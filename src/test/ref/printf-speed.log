Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_string (byte*~) main::$3 (struct printf_format_string){ (byte) 0, (byte) 0 } 
Added struct type cast to parameter value list call printf_uint (word) main::i (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call __init 
Eliminating unused variable with no statement (struct TIME_OF_DAY~) main::$2
Eliminating unused variable with no statement (void~) main::$4
Eliminating unused variable with no statement (void~) main::$10
Eliminating unused variable with no statement (void~) main::$12
Unwinding list assignment { (byte~) main::$2_TENTHS, (byte~) main::$2_SEC, (byte~) main::$2_MIN, (byte~) main::$2_HOURS } ← { (byte) tod_read::return_TENTHS, (byte) tod_read::return_SEC, (byte) tod_read::return_MIN, (byte) tod_read::return_HOURS }
Unwinding list assignment { (byte) tod_read::return_TENTHS#2, (byte) tod_read::return_SEC#2, (byte) tod_read::return_MIN#2, (byte) tod_read::return_HOURS#2 } ← { (byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1 }

CONTROL FLOW GRAPH SSA

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6 printf_string::@3
  (byte*) strlen::str#5 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 printf_string::@3/(byte*) strlen::str#2 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#3 ← phi( strlen/(byte*) strlen::str#5 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#3)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#4 ← phi( strlen::@1/(byte*) strlen::str#3 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#4
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#4 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#4
  return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  (byte*) utoa::buffer#21 ← phi( printf_uint::@3/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( printf_uint::@3/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( printf_uint::@3/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@14 main::@3 main::@5
  (byte) gotoxy::x#7 ← phi( cscroll::@2/(byte) gotoxy::x#1 main::@14/(byte) gotoxy::x#4 main::@3/(byte) gotoxy::x#2 main::@5/(byte) gotoxy::x#3 )
  (byte) gotoxy::y#5 ← phi( cscroll::@2/(byte) gotoxy::y#1 main::@14/(byte) gotoxy::y#4 main::@3/(byte) gotoxy::y#2 main::@5/(byte) gotoxy::y#3 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#5 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#7 ← phi( gotoxy/(byte) gotoxy::y#5 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#5 ← phi( gotoxy/(byte) gotoxy::x#7 gotoxy::@3/(byte) gotoxy::x#8 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#5 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#8 ← phi( gotoxy/(byte) gotoxy::x#7 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#6 ← phi( gotoxy::@1/(byte) gotoxy::y#7 gotoxy::@4/(byte) gotoxy::y#8 )
  (byte) gotoxy::x#6 ← phi( gotoxy::@1/(byte) gotoxy::x#5 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#6
  (byte) conio_cursor_y ← (byte) gotoxy::y#6
  (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6
  (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (number) $28
  (word) gotoxy::line_offset#0 ← (number~) gotoxy::$4
  (byte*~) gotoxy::$5 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::line_offset#0
  (byte*) conio_line_text ← (byte*~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::line_offset#0
  (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#8 ← phi( gotoxy::@1/(byte) gotoxy::y#7 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#3 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#4 ← phi( cputc/(byte) cputc::c#3 )
  *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#4
  *((byte*) conio_line_color + (byte) conio_cursor_x) ← (byte) conio_textcolor
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  (byte*) conio_line_text ← (byte*) conio_line_text + (number) $28
  (byte*) conio_line_color ← (byte*) conio_line_color + (number) $28
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$7 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*) conio_line_text ← (byte*) conio_line_text - (number) $28
  (byte*) conio_line_color ← (byte*) conio_line_color - (number) $28
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@4 main::@9 printf_number_buffer::@5 printf_string::@2
  (to_nomodify byte*) cputs::s#6 ← phi( main::@4/(to_nomodify byte*) cputs::s#4 main::@9/(to_nomodify byte*) cputs::s#3 printf_number_buffer::@5/(to_nomodify byte*) cputs::s#1 printf_string::@2/(to_nomodify byte*) cputs::s#2 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#5 ← phi( cputs/(to_nomodify byte*) cputs::s#6 cputs::@3/(to_nomodify byte*) cputs::s#7 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#5
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#8 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#7 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#8 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8 printf_string::@5 printf_string::@6
  (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 printf_string::@5/(byte) printf_padding::pad#3 printf_string::@6/(byte) printf_padding::pad#4 )
  (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 printf_string::@5/(byte) printf_padding::length#3 printf_string::@6/(byte) printf_padding::length#4 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#6 ← phi( printf_padding/(byte) printf_padding::pad#7 printf_padding::@3/(byte) printf_padding::pad#8 )
  (byte) printf_padding::length#5 ← phi( printf_padding/(byte) printf_padding::length#6 printf_padding::@3/(byte) printf_padding::length#7 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#5
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#8 ← phi( printf_padding::@1/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#5 ← phi( printf_padding::@1/(byte) printf_padding::pad#6 )
  (byte) cputc::c#1 ← (byte) printf_padding::pad#5
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#8 ← phi( printf_padding::@2/(byte) printf_padding::pad#5 )
  (byte) printf_padding::length#7 ← phi( printf_padding::@2/(byte) printf_padding::length#8 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@13
  (byte) printf_uint::format_upper_case#5 ← phi( main::@13/(byte) printf_uint::format_upper_case#0 )
  (byte) printf_uint::format_zero_padding#5 ← phi( main::@13/(byte) printf_uint::format_zero_padding#0 )
  (byte) printf_uint::format_justify_left#5 ← phi( main::@13/(byte) printf_uint::format_justify_left#0 )
  (byte) printf_uint::format_min_length#5 ← phi( main::@13/(byte) printf_uint::format_min_length#0 )
  (byte) printf_uint::format_radix#5 ← phi( main::@13/(byte) printf_uint::format_radix#0 )
  (word) printf_uint::uvalue#4 ← phi( main::@13/(word) printf_uint::uvalue#0 )
  (byte) printf_uint::format_sign_always#1 ← phi( main::@13/(byte) printf_uint::format_sign_always#0 )
  (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
  if((bool~) printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#3 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#3 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#4 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#3 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#3 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#3 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#2 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (byte~) printf_uint::$1 ← (byte) '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#4 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#4 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#5 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#4 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#4 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#4 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#3 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (number~) printf_uint::$0 ← (number) 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uint::$2
  (word) utoa::value#1 ← (word) printf_uint::uvalue#1
  (byte*) utoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) utoa::radix#0 ← (byte) printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  (byte) printf_uint::format_radix#2 ← phi( printf_uint::@3/(byte) printf_uint::format_radix#1 )
  (byte) printf_uint::format_upper_case#1 ← phi( printf_uint::@3/(byte) printf_uint::format_upper_case#2 )
  (byte) printf_uint::format_zero_padding#1 ← phi( printf_uint::@3/(byte) printf_uint::format_zero_padding#2 )
  (byte) printf_uint::format_sign_always#2 ← phi( printf_uint::@3/(byte) printf_uint::format_sign_always#3 )
  (byte) printf_uint::format_justify_left#1 ← phi( printf_uint::@3/(byte) printf_uint::format_justify_left#2 )
  (byte) printf_uint::format_min_length#1 ← phi( printf_uint::@3/(byte) printf_uint::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_uint::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_uint::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_uint::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_uint::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_uint::format_upper_case#1
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@4
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uint::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_uint::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_uint::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_uint::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_uint::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#1 ← phi( printf_uint::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#1
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#4 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#15 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#10 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#11 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#7 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#8 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#9 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#1 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#4 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#5 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#1 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#3 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#4 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#5 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#1
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#1
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#10 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#3 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#1 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#7 )
  (byte*) printf_number_buffer::buffer_digits#1 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#4 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#1
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#1 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#5 )
  (byte) printf_number_buffer::buffer_sign#1 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#4 )
  (word) strlen::return#5 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#5
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#1
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#18 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#14 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#15 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#1 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#11 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#10 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#11 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#7 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#8 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#2 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#3 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#4 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#2
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#14 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#1 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#10 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#7 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#3 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#11 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#8 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#5 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#4 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#1 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#12 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#7 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#8 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#1 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::buffer_sign#2 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#5 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#6 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#1 )
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#7 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#1 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#5 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#13 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#10 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#15 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#16 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#9 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#4 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#2 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#7 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#8 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#2 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#16 )
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#8 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#2 )
  (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#3
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#19 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#9 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#13 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#12 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#18 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#7 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte) printf_number_buffer::format_upper_case#1 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#2 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#3 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#1
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#3 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#17 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#20 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#2 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#6 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#9 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#10 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#14 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#15 )
  (byte*) printf_number_buffer::buffer_digits#2 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#5 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#6 )
  (to_nomodify byte*) cputs::s#1 ← (byte*) printf_number_buffer::buffer_digits#2
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#2 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#6 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#9 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#2 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#10 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#15 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#3
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#19 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#3 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@10
  (byte*) printf_string::str#3 ← phi( main::@10/(byte*) printf_string::str#0 )
  (byte) printf_string::format_justify_left#3 ← phi( main::@10/(byte) printf_string::format_justify_left#0 )
  (byte) printf_string::format_min_length#1 ← phi( main::@10/(byte) printf_string::format_min_length#0 )
  (signed byte) printf_string::padding#0 ← (signed byte) 0
  (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#1
  (bool~) printf_string::$0 ← ! (bool~) printf_string::$14
  if((bool~) printf_string::$0) goto printf_string::@1
  to:printf_string::@3
printf_string::@1: scope:[printf_string]  from printf_string printf_string::@4 printf_string::@7
  (byte*) printf_string::str#4 ← phi( printf_string/(byte*) printf_string::str#3 printf_string::@4/(byte*) printf_string::str#6 printf_string::@7/(byte*) printf_string::str#7 )
  (signed byte) printf_string::padding#3 ← phi( printf_string/(signed byte) printf_string::padding#0 printf_string::@4/(signed byte) printf_string::padding#2 printf_string::@7/(signed byte) printf_string::padding#1 )
  (byte) printf_string::format_justify_left#1 ← phi( printf_string/(byte) printf_string::format_justify_left#3 printf_string::@4/(byte) printf_string::format_justify_left#4 printf_string::@7/(byte) printf_string::format_justify_left#5 )
  (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#1
  (bool~) printf_string::$1 ← ! (bool~) printf_string::$15
  (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
  (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
  if((bool~) printf_string::$3) goto printf_string::@2
  to:printf_string::@5
printf_string::@3: scope:[printf_string]  from printf_string
  (byte) printf_string::format_justify_left#7 ← phi( printf_string/(byte) printf_string::format_justify_left#3 )
  (byte) printf_string::format_min_length#3 ← phi( printf_string/(byte) printf_string::format_min_length#1 )
  (byte*) printf_string::str#1 ← phi( printf_string/(byte*) printf_string::str#3 )
  (byte*) strlen::str#2 ← (byte*) printf_string::str#1
  call strlen 
  (word) strlen::return#3 ← (word) strlen::return#1
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@3
  (byte*) printf_string::str#7 ← phi( printf_string::@3/(byte*) printf_string::str#1 )
  (byte) printf_string::format_justify_left#5 ← phi( printf_string::@3/(byte) printf_string::format_justify_left#7 )
  (byte) printf_string::format_min_length#2 ← phi( printf_string::@3/(byte) printf_string::format_min_length#3 )
  (word) strlen::return#6 ← phi( printf_string::@3/(word) strlen::return#3 )
  (word~) printf_string::$9 ← (word) strlen::return#6
  (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9
  (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#2
  (signed byte~) printf_string::$10 ← (signed byte~) printf_string::$13 - (signed byte) printf_string::len#0
  (signed byte) printf_string::padding#1 ← (signed byte~) printf_string::$10
  (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
  (bool~) printf_string::$12 ← ! (bool~) printf_string::$11
  if((bool~) printf_string::$12) goto printf_string::@1
  to:printf_string::@4
printf_string::@4: scope:[printf_string]  from printf_string::@7
  (byte*) printf_string::str#6 ← phi( printf_string::@7/(byte*) printf_string::str#7 )
  (byte) printf_string::format_justify_left#4 ← phi( printf_string::@7/(byte) printf_string::format_justify_left#5 )
  (signed byte) printf_string::padding#2 ← (number) 0
  to:printf_string::@1
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@9
  (signed byte) printf_string::padding#7 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 printf_string::@9/(signed byte) printf_string::padding#8 )
  (byte) printf_string::format_justify_left#6 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#1 printf_string::@9/(byte) printf_string::format_justify_left#8 )
  (byte*) printf_string::str#2 ← phi( printf_string::@1/(byte*) printf_string::str#4 printf_string::@9/(byte*) printf_string::str#5 )
  (to_nomodify byte*) cputs::s#2 ← (byte*) printf_string::str#2
  call cputs 
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@2
  (signed byte) printf_string::padding#4 ← phi( printf_string::@2/(signed byte) printf_string::padding#7 )
  (byte) printf_string::format_justify_left#2 ← phi( printf_string::@2/(byte) printf_string::format_justify_left#6 )
  (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#2 && (signed byte) printf_string::padding#4
  (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
  if((bool~) printf_string::$7) goto printf_string::@return
  to:printf_string::@6
printf_string::@5: scope:[printf_string]  from printf_string::@1
  (byte) printf_string::format_justify_left#9 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#1 )
  (byte*) printf_string::str#8 ← phi( printf_string::@1/(byte*) printf_string::str#4 )
  (signed byte) printf_string::padding#5 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 )
  (byte) printf_padding::pad#3 ← (byte) ' '
  (byte) printf_padding::length#3 ← (byte)(signed byte) printf_string::padding#5
  call printf_padding 
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@5
  (signed byte) printf_string::padding#8 ← phi( printf_string::@5/(signed byte) printf_string::padding#5 )
  (byte) printf_string::format_justify_left#8 ← phi( printf_string::@5/(byte) printf_string::format_justify_left#9 )
  (byte*) printf_string::str#5 ← phi( printf_string::@5/(byte*) printf_string::str#8 )
  to:printf_string::@2
printf_string::@6: scope:[printf_string]  from printf_string::@8
  (signed byte) printf_string::padding#6 ← phi( printf_string::@8/(signed byte) printf_string::padding#4 )
  (byte) printf_padding::pad#4 ← (byte) ' '
  (byte) printf_padding::length#4 ← (byte)(signed byte) printf_string::padding#6
  call printf_padding 
  to:printf_string::@10
printf_string::@10: scope:[printf_string]  from printf_string::@6
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@10 printf_string::@8
  return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  (byte) tod_init::tod_TENTHS#1 ← phi( main/(byte) tod_init::tod_TENTHS#0 )
  (byte) tod_init::tod_SEC#1 ← phi( main/(byte) tod_init::tod_SEC#0 )
  (byte) tod_init::tod_MIN#1 ← phi( main/(byte) tod_init::tod_MIN#0 )
  (byte) tod_init::tod_HOURS#1 ← phi( main/(byte) tod_init::tod_HOURS#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#1
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@7
  (byte) tod_read::hours#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  (byte) tod_read::mins#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  (byte) tod_read::secs#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  (byte) tod_read::tenths#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  (byte) tod_read::tod_TENTHS#0 ← (byte) tod_read::tenths#0
  (byte) tod_read::tod_SEC#0 ← (byte) tod_read::secs#0
  (byte) tod_read::tod_MIN#0 ← (byte) tod_read::mins#0
  (byte) tod_read::tod_HOURS#0 ← (byte) tod_read::hours#0
  (byte) tod_read::return_TENTHS#0 ← (byte) tod_read::tod_TENTHS#0
  (byte) tod_read::return_SEC#0 ← (byte) tod_read::tod_SEC#0
  (byte) tod_read::return_MIN#0 ← (byte) tod_read::tod_MIN#0
  (byte) tod_read::return_HOURS#0 ← (byte) tod_read::tod_HOURS#0
  (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  (byte) tod_read::return_HOURS#3 ← phi( tod_read/(byte) tod_read::return_HOURS#0 )
  (byte) tod_read::return_MIN#3 ← phi( tod_read/(byte) tod_read::return_MIN#0 )
  (byte) tod_read::return_SEC#3 ← phi( tod_read/(byte) tod_read::return_SEC#0 )
  (byte) tod_read::return_TENTHS#3 ← phi( tod_read/(byte) tod_read::return_TENTHS#0 )
  (byte) tod_read::return_TENTHS#1 ← (byte) tod_read::return_TENTHS#3
  (byte) tod_read::return_SEC#1 ← (byte) tod_read::return_SEC#3
  (byte) tod_read::return_MIN#1 ← (byte) tod_read::return_MIN#3
  (byte) tod_read::return_HOURS#1 ← (byte) tod_read::return_HOURS#3
  (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1}
  return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@8
  (byte) tod_str::tod_TENTHS#1 ← phi( main::@8/(byte) tod_str::tod_TENTHS#0 )
  (byte) tod_str::tod_SEC#1 ← phi( main::@8/(byte) tod_str::tod_SEC#0 )
  (byte) tod_str::tod_MIN#1 ← phi( main::@8/(byte) tod_str::tod_MIN#0 )
  (byte) tod_str::tod_HOURS#1 ← phi( main::@8/(byte) tod_str::tod_HOURS#0 )
  (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
  (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
  (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
  (number~) tod_str::$3 ← (byte) '0' + (number~) tod_str::$2
  *((const byte*) tod_buffer + (number) 1) ← (number~) tod_str::$3
  (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
  (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
  (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
  (number~) tod_str::$7 ← (byte) '0' + (number~) tod_str::$6
  *((const byte*) tod_buffer + (number) 4) ← (number~) tod_str::$7
  (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
  (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
  (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
  (number~) tod_str::$11 ← (byte) '0' + (number~) tod_str::$10
  *((const byte*) tod_buffer + (number) 7) ← (number~) tod_str::$11
  (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
  (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
  (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
  (number~) tod_str::$15 ← (byte) '0' + (number~) tod_str::$14
  *((const byte*) tod_buffer + (number) $a) ← (number~) tod_str::$15
  (byte*) tod_str::return#0 ← (const byte*) tod_buffer
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  (byte*) tod_str::return#3 ← phi( tod_str/(byte*) tod_str::return#0 )
  (byte*) tod_str::return#1 ← (byte*) tod_str::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
  (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  call tod_init 
  to:main::@6
main::@6: scope:[main]  from main
  (word) main::i#0 ← (word) 0
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@6
  (word) main::i#2 ← phi( main::@12/(word) main::i#1 main::@6/(word) main::i#0 )
  (bool~) main::$5 ← (word) main::i#2 < (number) $2710
  if((bool~) main::$5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (word) main::i#3 ← phi( main::@1/(word) main::i#2 )
  (number~) main::$6 ← (word) main::i#3 & (number) $7f
  (bool~) main::$7 ← (number~) main::$6 == (number) 0
  (bool~) main::$8 ← ! (bool~) main::$7
  if((bool~) main::$8) goto main::@4
  to:main::@5
main::@3: scope:[main]  from main::@1
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) $16
  call gotoxy 
  to:main::@7
main::@7: scope:[main]  from main::@3
  call tod_read 
  (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#1
  (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#1
  (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#1
  (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#1
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) tod_read::return_HOURS#4 ← phi( main::@7/(byte) tod_read::return_HOURS#2 )
  (byte) tod_read::return_MIN#4 ← phi( main::@7/(byte) tod_read::return_MIN#2 )
  (byte) tod_read::return_SEC#4 ← phi( main::@7/(byte) tod_read::return_SEC#2 )
  (byte) tod_read::return_TENTHS#4 ← phi( main::@7/(byte) tod_read::return_TENTHS#2 )
  (byte~) main::$2_TENTHS ← (byte) tod_read::return_TENTHS#4
  (byte~) main::$2_SEC ← (byte) tod_read::return_SEC#4
  (byte~) main::$2_MIN ← (byte) tod_read::return_MIN#4
  (byte~) main::$2_HOURS ← (byte) tod_read::return_HOURS#4
  (byte) tod_str::tod_TENTHS#0 ← (byte~) main::$2_TENTHS
  (byte) tod_str::tod_SEC#0 ← (byte~) main::$2_SEC
  (byte) tod_str::tod_MIN#0 ← (byte~) main::$2_MIN
  (byte) tod_str::tod_HOURS#0 ← (byte~) main::$2_HOURS
  call tod_str 
  (byte*) tod_str::return#2 ← (byte*) tod_str::return#1
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte*) tod_str::return#4 ← phi( main::@8/(byte*) tod_str::return#2 )
  (byte*~) main::$3 ← (byte*) tod_str::return#4
  (to_nomodify byte*) cputs::s#3 ← (const byte*) main::s
  call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte*) printf_string::str#0 ← (byte*~) main::$3
  (byte) printf_string::format_min_length#0 ← (byte) 0
  (byte) printf_string::format_justify_left#0 ← (byte) 0
  call printf_string 
  to:main::@11
main::@11: scope:[main]  from main::@10
  to:main::@return
main::@4: scope:[main]  from main::@15 main::@2
  (word) main::i#6 ← phi( main::@15/(word) main::i#8 main::@2/(word) main::i#3 )
  (to_nomodify byte*) cputs::s#4 ← (const byte*) main::s1
  call cputs 
  to:main::@12
main::@12: scope:[main]  from main::@4
  (word) main::i#4 ← phi( main::@4/(word) main::i#6 )
  (word) main::i#1 ← ++ (word) main::i#4
  to:main::@1
main::@5: scope:[main]  from main::@2
  (word) main::i#7 ← phi( main::@2/(word) main::i#3 )
  (byte) gotoxy::x#3 ← (number) 0
  (byte) gotoxy::y#3 ← (number) $10
  call gotoxy 
  to:main::@13
main::@13: scope:[main]  from main::@5
  (word) main::i#5 ← phi( main::@5/(word) main::i#7 )
  (word) printf_uint::uvalue#0 ← (word) main::i#5
  (byte) printf_uint::format_min_length#0 ← (byte) 0
  (byte) printf_uint::format_justify_left#0 ← (byte) 0
  (byte) printf_uint::format_sign_always#0 ← (byte) 0
  (byte) printf_uint::format_zero_padding#0 ← (byte) 0
  (byte) printf_uint::format_upper_case#0 ← (byte) 0
  (byte) printf_uint::format_radix#0 ← (const byte) DECIMAL
  call printf_uint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (word) main::i#9 ← phi( main::@13/(word) main::i#5 )
  (byte) gotoxy::x#4 ← (number) 0
  (byte) gotoxy::y#4 ← (number) 0
  call gotoxy 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (word) main::i#8 ← phi( main::@14/(word) main::i#9 )
  to:main::@4
main::@return: scope:[main]  from main::@11
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_line_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_line_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) BINARY = (number) 2
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte*) COLORRAM = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_COLORS = (const nomodify byte*) COLORRAM
(const nomodify byte*) CONIO_SCREEN_TEXT = (const nomodify byte*) DEFAULT_SCREEN
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (const nomodify byte) LIGHT_BLUE
(const byte) DECIMAL = (number) $a
(const nomodify byte*) DEFAULT_SCREEN = (byte*)(number) $400
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte) SIZEOF_WORD = (byte) 2
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte*) conio_line_color loadstore
(byte*) conio_line_text loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(byte) cputc::c#4
(void()) cputln()
(label) cputln::@1
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(to_nomodify byte*) cputs::s#6
(to_nomodify byte*) cputs::s#7
(to_nomodify byte*) cputs::s#8
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(bool~) cscroll::$7
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(byte*~) gotoxy::$5
(byte*~) gotoxy::$6
(word~) gotoxy::$7
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::x#7
(byte) gotoxy::x#8
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(byte) gotoxy::y#7
(byte) gotoxy::y#8
(void()) main()
(byte~) main::$2_HOURS
(byte~) main::$2_MIN
(byte~) main::$2_SEC
(byte~) main::$2_TENTHS
(byte*~) main::$3
(bool~) main::$5
(number~) main::$6
(bool~) main::$7
(bool~) main::$8
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(word) main::i
(word) main::i#0
(word) main::i#1
(word) main::i#2
(word) main::i#3
(word) main::i#4
(word) main::i#5
(word) main::i#6
(word) main::i#7
(word) main::i#8
(word) main::i#9
(const byte*) main::s[(byte) 7]  = (byte*) "time: "
(const byte*) main::s1[(byte) 5]  = (byte*) "qwe "
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::length#7
(byte) printf_padding::length#8
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(byte) printf_padding::pad#7
(byte) printf_padding::pad#8
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(bool~) printf_string::$0
(bool~) printf_string::$1
(signed byte~) printf_string::$10
(bool~) printf_string::$11
(bool~) printf_string::$12
(signed byte~) printf_string::$13
(bool~) printf_string::$14
(bool~) printf_string::$15
(bool~) printf_string::$2
(bool~) printf_string::$3
(bool~) printf_string::$6
(bool~) printf_string::$7
(word~) printf_string::$9
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@2
(label) printf_string::@3
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@8
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#0
(byte) printf_string::format_justify_left#1
(byte) printf_string::format_justify_left#2
(byte) printf_string::format_justify_left#3
(byte) printf_string::format_justify_left#4
(byte) printf_string::format_justify_left#5
(byte) printf_string::format_justify_left#6
(byte) printf_string::format_justify_left#7
(byte) printf_string::format_justify_left#8
(byte) printf_string::format_justify_left#9
(byte) printf_string::format_min_length
(byte) printf_string::format_min_length#0
(byte) printf_string::format_min_length#1
(byte) printf_string::format_min_length#2
(byte) printf_string::format_min_length#3
(signed byte) printf_string::len
(signed byte) printf_string::len#0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#0
(signed byte) printf_string::padding#1
(signed byte) printf_string::padding#2
(signed byte) printf_string::padding#3
(signed byte) printf_string::padding#4
(signed byte) printf_string::padding#5
(signed byte) printf_string::padding#6
(signed byte) printf_string::padding#7
(signed byte) printf_string::padding#8
(byte*) printf_string::str
(byte*) printf_string::str#0
(byte*) printf_string::str#1
(byte*) printf_string::str#2
(byte*) printf_string::str#3
(byte*) printf_string::str#4
(byte*) printf_string::str#5
(byte*) printf_string::str#6
(byte*) printf_string::str#7
(byte*) printf_string::str#8
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(number~) printf_uint::$0
(byte~) printf_uint::$1
(number~) printf_uint::$2
(bool~) printf_uint::$5
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@3
(label) printf_uint::@4
(label) printf_uint::@5
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_justify_left#0
(byte) printf_uint::format_justify_left#1
(byte) printf_uint::format_justify_left#2
(byte) printf_uint::format_justify_left#3
(byte) printf_uint::format_justify_left#4
(byte) printf_uint::format_justify_left#5
(byte) printf_uint::format_min_length
(byte) printf_uint::format_min_length#0
(byte) printf_uint::format_min_length#1
(byte) printf_uint::format_min_length#2
(byte) printf_uint::format_min_length#3
(byte) printf_uint::format_min_length#4
(byte) printf_uint::format_min_length#5
(byte) printf_uint::format_radix
(byte) printf_uint::format_radix#0
(byte) printf_uint::format_radix#1
(byte) printf_uint::format_radix#2
(byte) printf_uint::format_radix#3
(byte) printf_uint::format_radix#4
(byte) printf_uint::format_radix#5
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_sign_always#0
(byte) printf_uint::format_sign_always#1
(byte) printf_uint::format_sign_always#2
(byte) printf_uint::format_sign_always#3
(byte) printf_uint::format_sign_always#4
(byte) printf_uint::format_sign_always#5
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_upper_case#0
(byte) printf_uint::format_upper_case#1
(byte) printf_uint::format_upper_case#2
(byte) printf_uint::format_upper_case#3
(byte) printf_uint::format_upper_case#4
(byte) printf_uint::format_upper_case#5
(byte) printf_uint::format_zero_padding
(byte) printf_uint::format_zero_padding#0
(byte) printf_uint::format_zero_padding#1
(byte) printf_uint::format_zero_padding#2
(byte) printf_uint::format_zero_padding#3
(byte) printf_uint::format_zero_padding#4
(byte) printf_uint::format_zero_padding#5
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0
(word) printf_uint::uvalue#1
(word) printf_uint::uvalue#2
(word) printf_uint::uvalue#3
(word) printf_uint::uvalue#4
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(word) strlen::return#5
(word) strlen::return#6
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*) strlen::str#5
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0
(byte) tod_init::tod_HOURS#1
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0
(byte) tod_init::tod_MIN#1
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0
(byte) tod_init::tod_SEC#1
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0
(byte) tod_init::tod_TENTHS#1
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::hours#0
(byte) tod_read::mins
(byte) tod_read::mins#0
(struct TIME_OF_DAY) tod_read::return
(struct TIME_OF_DAY) tod_read::return#0
(struct TIME_OF_DAY) tod_read::return#1
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0
(byte) tod_read::return_HOURS#1
(byte) tod_read::return_HOURS#2
(byte) tod_read::return_HOURS#3
(byte) tod_read::return_HOURS#4
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0
(byte) tod_read::return_MIN#1
(byte) tod_read::return_MIN#2
(byte) tod_read::return_MIN#3
(byte) tod_read::return_MIN#4
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0
(byte) tod_read::return_SEC#1
(byte) tod_read::return_SEC#2
(byte) tod_read::return_SEC#3
(byte) tod_read::return_SEC#4
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0
(byte) tod_read::return_TENTHS#1
(byte) tod_read::return_TENTHS#2
(byte) tod_read::return_TENTHS#3
(byte) tod_read::return_TENTHS#4
(byte) tod_read::secs
(byte) tod_read::secs#0
(byte) tod_read::tenths
(byte) tod_read::tenths#0
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_HOURS#0
(byte) tod_read::tod_MIN
(byte) tod_read::tod_MIN#0
(byte) tod_read::tod_SEC
(byte) tod_read::tod_SEC#0
(byte) tod_read::tod_TENTHS
(byte) tod_read::tod_TENTHS#0
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0
(byte~) tod_str::$1
(number~) tod_str::$10
(number~) tod_str::$11
(byte~) tod_str::$12
(byte~) tod_str::$13
(number~) tod_str::$14
(number~) tod_str::$15
(number~) tod_str::$2
(number~) tod_str::$3
(byte~) tod_str::$4
(byte~) tod_str::$5
(number~) tod_str::$6
(number~) tod_str::$7
(byte~) tod_str::$8
(byte~) tod_str::$9
(label) tod_str::@return
(byte*) tod_str::return
(byte*) tod_str::return#0
(byte*) tod_str::return#1
(byte*) tod_str::return#2
(byte*) tod_str::return#3
(byte*) tod_str::return#4
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0
(byte) tod_str::tod_HOURS#1
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0
(byte) tod_str::tod_MIN#1
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0
(byte) tod_str::tod_SEC#1
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0
(byte) tod_str::tod_TENTHS#1
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#3)
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#5 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#5 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$7 * (unumber)(number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_text ← (byte*) conio_line_text + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_color ← (byte*) conio_line_color + (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$7 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_text ← (byte*) conio_line_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*) conio_line_color ← (byte*) conio_line_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (unumber~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#1
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#1
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#1
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_string::padding#2 ← (number) 0
Adding number conversion cast (unumber) $80 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
Adding number conversion cast (unumber) $7f in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
Adding number conversion cast (unumber) 0 in *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
Adding number conversion cast (unumber) $f in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$2 in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$3 in (number~) tod_str::$3 ← (byte) '0' + (unumber~) tod_str::$2
Adding number conversion cast (unumber) 1 in *((const byte*) tod_buffer + (number) 1) ← (unumber~) tod_str::$3
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
Adding number conversion cast (unumber) 3 in *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
Adding number conversion cast (unumber) $f in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$6 in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$7 in (number~) tod_str::$7 ← (byte) '0' + (unumber~) tod_str::$6
Adding number conversion cast (unumber) 4 in *((const byte*) tod_buffer + (number) 4) ← (unumber~) tod_str::$7
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
Adding number conversion cast (unumber) 6 in *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
Adding number conversion cast (unumber) $f in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$10 in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$11 in (number~) tod_str::$11 ← (byte) '0' + (unumber~) tod_str::$10
Adding number conversion cast (unumber) 7 in *((const byte*) tod_buffer + (number) 7) ← (unumber~) tod_str::$11
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
Adding number conversion cast (unumber) 9 in *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
Adding number conversion cast (unumber) $f in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$14 in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$15 in (number~) tod_str::$15 ← (byte) '0' + (unumber~) tod_str::$14
Adding number conversion cast (unumber) $a in *((const byte*) tod_buffer + (number) $a) ← (unumber~) tod_str::$15
Adding number conversion cast (unumber) $2710 in (bool~) main::$5 ← (word) main::i#2 < (number) $2710
Adding number conversion cast (unumber) $7f in (number~) main::$6 ← (word) main::i#3 & (number) $7f
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (word) main::i#3 & (unumber)(number) $7f
Adding number conversion cast (unumber) 0 in (bool~) main::$7 ← (unumber~) main::$6 == (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) $16 in (byte) gotoxy::y#2 ← (number) $16
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#3 ← (number) 0
Adding number conversion cast (unumber) $10 in (byte) gotoxy::y#3 ← (number) $10
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#4 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#4 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_uint::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uint::$0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Inlining cast (signed byte) printf_string::padding#2 ← (snumber)(number) 0
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) $16
Inlining cast (byte) gotoxy::x#3 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#3 ← (unumber)(number) $10
Inlining cast (byte) gotoxy::x#4 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#4 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast 7
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast $2710
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $16
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (word) $2710
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$7 * (byte) $28
Inferred type updated to byte in (unumber~) printf_uint::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uint::$2
Inferred type updated to byte in (unumber~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
Inferred type updated to byte in (unumber~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
Inferred type updated to byte in (unumber~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
Inferred type updated to byte in (unumber~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
Inferred type updated to byte in (unumber~) main::$6 ← (word) main::i#3 & (byte) $7f
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [165] (bool~) gotoxy::$1 ← (byte) gotoxy::y#5 <= (byte) $19 from [164] (bool~) gotoxy::$0 ← (byte) gotoxy::y#5 > (byte) $19
Inversing boolean not [169] (bool~) gotoxy::$3 ← (byte) gotoxy::x#5 < (byte) $28 from [168] (bool~) gotoxy::$2 ← (byte) gotoxy::x#5 >= (byte) $28
Inversing boolean not [195] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [194] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [206] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [205] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Inversing boolean not [287] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#1 from [286] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#1
Inversing boolean not [291] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#1 from [290] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#1
Inversing boolean not [293] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#1 from [292] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#1
Inversing boolean not [306] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#1 from [305] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#1
Inversing boolean not [313] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [312] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [321] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#2 from [320] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#2
Inversing boolean not [338] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#1 from [337] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#1
Inversing boolean not [350] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#3 from [349] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#3
Inversing boolean not [368] (bool~) printf_string::$0 ← (byte) 0 == (byte) printf_string::format_min_length#1 from [367] (bool~) printf_string::$14 ← (byte) 0 != (byte) printf_string::format_min_length#1
Inversing boolean not [372] (bool~) printf_string::$1 ← (byte) 0 == (byte) printf_string::format_justify_left#1 from [371] (bool~) printf_string::$15 ← (byte) 0 != (byte) printf_string::format_justify_left#1
Inversing boolean not [387] (bool~) printf_string::$12 ← (signed byte) printf_string::padding#1 >= (signed byte) 0 from [386] (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (signed byte) 0
Inversing boolean not [477] (bool~) main::$8 ← (byte~) main::$6 != (byte) 0 from [476] (bool~) main::$7 ← (byte~) main::$6 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#4 strlen::return#1 
Alias strlen::str#3 = strlen::str#4 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias gotoxy::x#7 = gotoxy::x#8 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#7 = gotoxy::y#8 
Alias cputc::c#3 = cputc::c#4 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#8 cputs::s#7 
Alias printf_padding::pad#5 = printf_padding::pad#6 printf_padding::pad#8 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#5 = printf_padding::length#8 printf_padding::length#7 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#4 printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#3 printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#3 printf_number_buffer::format_justify_left#7 printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#4 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#15 
Alias strlen::return#2 = strlen::return#5 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#5 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#8 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#15 = printf_number_buffer::buffer_digits#16 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#6 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#8 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#17 printf_number_buffer::buffer_digits#13 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::buffer_sign#2 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#8 printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#9 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_justify_left#15 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#16 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#2 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#18 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#13 
Alias printf_number_buffer::format_zero_padding#3 = printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::format_justify_left#2 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#3 = printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#5 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias printf_string::str#1 = printf_string::str#3 printf_string::str#7 printf_string::str#6 
Alias printf_string::format_min_length#1 = printf_string::format_min_length#3 printf_string::format_min_length#2 
Alias printf_string::format_justify_left#3 = printf_string::format_justify_left#7 printf_string::format_justify_left#5 printf_string::format_justify_left#4 
Alias strlen::return#3 = strlen::return#6 
Alias printf_string::padding#1 = printf_string::$10 
Alias printf_string::format_justify_left#2 = printf_string::format_justify_left#6 
Alias printf_string::padding#4 = printf_string::padding#7 printf_string::padding#6 
Alias printf_string::padding#3 = printf_string::padding#5 printf_string::padding#8 
Alias printf_string::str#4 = printf_string::str#8 printf_string::str#5 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#9 printf_string::format_justify_left#8 
Alias tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0 tod_read::tenths#0 tod_read::return_TENTHS#3 tod_read::return_TENTHS#1 
Alias tod_read::return_SEC#0 = tod_read::tod_SEC#0 tod_read::secs#0 tod_read::return_SEC#3 tod_read::return_SEC#1 
Alias tod_read::return_MIN#0 = tod_read::tod_MIN#0 tod_read::mins#0 tod_read::return_MIN#3 tod_read::return_MIN#1 
Alias tod_read::return_HOURS#0 = tod_read::tod_HOURS#0 tod_read::hours#0 tod_read::return_HOURS#3 tod_read::return_HOURS#1 
Alias tod_str::return#0 = tod_str::return#3 tod_str::return#1 
Alias main::i#2 = main::i#3 main::i#7 main::i#5 main::i#9 main::i#8 
Alias tod_read::return_TENTHS#2 = tod_read::return_TENTHS#4 
Alias tod_read::return_SEC#2 = tod_read::return_SEC#4 
Alias tod_read::return_MIN#2 = tod_read::return_MIN#4 
Alias tod_read::return_HOURS#2 = tod_read::return_HOURS#4 
Alias tod_str::tod_TENTHS#0 = main::$2_TENTHS 
Alias tod_str::tod_SEC#0 = main::$2_SEC 
Alias tod_str::tod_MIN#0 = main::$2_MIN 
Alias tod_str::tod_HOURS#0 = main::$2_HOURS 
Alias tod_str::return#2 = tod_str::return#4 
Alias printf_string::str#0 = main::$3 
Alias main::i#4 = main::i#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias gotoxy::x#5 = gotoxy::x#7 
Alias gotoxy::y#6 = gotoxy::y#7 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#2 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#13 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#2 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#12 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#2 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#3 printf_string::format_justify_left#2 
Alias printf_string::str#1 = printf_string::str#4 printf_string::str#2 
Alias printf_string::padding#3 = printf_string::padding#4 
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#10 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte) printf_padding::length#5 (byte) printf_padding::length#6
Identical Phi Values (byte) printf_padding::pad#5 (byte) printf_padding::pad#7
Identical Phi Values (byte) printf_uint::format_sign_always#1 (byte) printf_uint::format_sign_always#0
Identical Phi Values (word) printf_uint::uvalue#1 (word) printf_uint::uvalue#0
Identical Phi Values (byte) printf_uint::format_radix#1 (byte) printf_uint::format_radix#0
Identical Phi Values (byte) printf_uint::format_min_length#1 (byte) printf_uint::format_min_length#0
Identical Phi Values (byte) printf_uint::format_justify_left#1 (byte) printf_uint::format_justify_left#0
Identical Phi Values (byte) printf_uint::format_zero_padding#1 (byte) printf_uint::format_zero_padding#0
Identical Phi Values (byte) printf_uint::format_upper_case#1 (byte) printf_uint::format_upper_case#0
Identical Phi Values (byte) printf_number_buffer::format_min_length#1 (byte) printf_number_buffer::format_min_length#0
Identical Phi Values (byte) printf_number_buffer::format_justify_left#1 (byte) printf_number_buffer::format_justify_left#0
Identical Phi Values (byte) printf_number_buffer::format_zero_padding#1 (byte) printf_number_buffer::format_zero_padding#0
Identical Phi Values (byte*) printf_number_buffer::buffer_digits#1 (byte*) printf_number_buffer::buffer_digits#0
Identical Phi Values (byte) printf_number_buffer::buffer_sign#1 (byte) printf_number_buffer::buffer_sign#0
Identical Phi Values (byte) printf_number_buffer::format_upper_case#1 (byte) printf_number_buffer::format_upper_case#0
Identical Phi Values (byte) printf_string::format_min_length#1 (byte) printf_string::format_min_length#0
Identical Phi Values (byte) printf_string::format_justify_left#1 (byte) printf_string::format_justify_left#0
Identical Phi Values (byte*) printf_string::str#1 (byte*) printf_string::str#0
Identical Phi Values (byte) tod_init::tod_HOURS#1 (byte) tod_init::tod_HOURS#0
Identical Phi Values (byte) tod_init::tod_MIN#1 (byte) tod_init::tod_MIN#0
Identical Phi Values (byte) tod_init::tod_SEC#1 (byte) tod_init::tod_SEC#0
Identical Phi Values (byte) tod_init::tod_TENTHS#1 (byte) tod_init::tod_TENTHS#0
Identical Phi Values (byte) tod_str::tod_HOURS#1 (byte) tod_str::tod_HOURS#0
Identical Phi Values (byte) tod_str::tod_MIN#1 (byte) tod_str::tod_MIN#0
Identical Phi Values (byte) tod_str::tod_SEC#1 (byte) tod_str::tod_SEC#0
Identical Phi Values (byte) tod_str::tod_TENTHS#1 (byte) tod_str::tod_TENTHS#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
Simple Condition (bool~) utoa::$0 [56] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [60] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [64] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [68] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [85] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [110] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) gotoxy::$1 [117] if((byte) gotoxy::y#5<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [120] if((byte) gotoxy::x#5<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [135] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [141] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [151] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$7 [153] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$1 [187] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) printf_padding::$0 [195] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
Simple Condition (bool~) printf_uint::$5 [202] if((byte) 0!=(byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition (bool~) printf_number_buffer::$0 [224] if((byte) 0==(byte) printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [238] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [243] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [247] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [257] if((byte) 0==(byte) printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Simple Condition (bool~) printf_string::$0 [278] if((byte) 0==(byte) printf_string::format_min_length#0) goto printf_string::@1
Simple Condition (bool~) printf_string::$12 [292] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@1
Simple Condition (bool~) main::$5 [356] if((word) main::i#2<(word) $2710) goto main::@2
Simple Condition (bool~) main::$8 [359] if((byte~) main::$6!=(byte) 0) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [90] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [89] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting ! if()-condition to reversed if() [230] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [229] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [228] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [252] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [251] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#0 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [266] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [265] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [264] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#0 && (bool~) printf_number_buffer::$14
Rewriting ! if()-condition to reversed if() [282] (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
Rewriting && if()-condition to two if()s [281] (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
Rewriting ! if()-condition to reversed if() [297] (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
Rewriting && if()-condition to two if()s [296] (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#0 && (signed byte) printf_string::padding#3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#0
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition (byte) printf_string::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Constant right-side identified [156] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [161] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_uint::$1 = '+'
Constant (const byte) printf_uint::$0 = 0
Constant (const byte*) utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const signed byte) printf_string::padding#0 = 0
Constant (const signed byte) printf_string::padding#2 = 0
Constant (const byte) printf_padding::pad#3 = ' '
Constant (const byte) printf_padding::pad#4 = ' '
Constant (const byte*) tod_str::return#0 = tod_buffer
Constant (const word) main::i#0 = 0
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = $16
Constant (const to_nomodify byte*) cputs::s#3 = main::s
Constant (const byte) printf_string::format_min_length#0 = 0
Constant (const byte) printf_string::format_justify_left#0 = 0
Constant (const to_nomodify byte*) cputs::s#4 = main::s1
Constant (const byte) gotoxy::x#3 = 0
Constant (const byte) gotoxy::y#3 = $10
Constant (const byte) printf_uint::format_min_length#0 = 0
Constant (const byte) printf_uint::format_justify_left#0 = 0
Constant (const byte) printf_uint::format_sign_always#0 = 0
Constant (const byte) printf_uint::format_zero_padding#0 = 0
Constant (const byte) printf_uint::format_upper_case#0 = 0
Constant (const byte) printf_uint::format_radix#0 = DECIMAL
Constant (const byte) gotoxy::x#4 = 0
Constant (const byte) gotoxy::y#4 = 0
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Constant (const byte) utoa::radix#0 = printf_uint::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#0 = printf_uint::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#0 = printf_uint::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#0 = printf_uint::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = printf_uint::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#0 = printf_uint::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#0 = printf_uint::format_radix#0
Constant (const byte*) strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant (const to_nomodify byte*) cputs::s#1 = printf_number_buffer::buffer_digits#0
Constant (const byte*) strupr::str#0 = printf_number_buffer::buffer_digits#0
Constant (const signed byte) printf_string::$13 = (signed byte)printf_string::format_min_length#0
Constant (const byte*) tod_str::return#2 = tod_str::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed byte) printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#0
Constant (const byte*) strupr::return#2 = strupr::str#0
Constant (const byte*) printf_string::str#0 = tod_str::return#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) strlen::str#2 = printf_string::str#0
Constant (const to_nomodify byte*) cputs::s#2 = printf_string::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [56] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [60] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [64] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [68] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
if() condition always true - replacing block destination [153] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [202] if((byte) 0!=(const byte) printf_uint::format_sign_always#0) goto printf_uint::@1
if() condition always true - replacing block destination [224] if((byte) 0==(const byte) printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
if() condition always true - replacing block destination [257] if((byte) 0==(const byte) printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
if() condition always true - replacing block destination [278] if((byte) 0==(const byte) printf_string::format_min_length#0) goto printf_string::@1
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [117] if((byte) gotoxy::y#5<=(byte) $19) goto gotoxy::@1
Simplifying constant evaluating to zero (signed byte)(const byte) printf_number_buffer::format_min_length#0 in 
Simplifying constant evaluating to zero (signed byte)(const byte) printf_string::format_min_length#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)&printf_buffer in [206] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [211] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero printf_number_buffer::len#2 in [241] (signed byte) printf_number_buffer::padding#1 ← (const signed byte) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
Simplifying expression containing zero printf_string::len#0 in [290] (signed byte) printf_string::padding#1 ← (const signed byte) printf_string::$13 - (signed byte) printf_string::len#0
Simplifying expression containing zero tod_buffer in [324] *((const byte*) tod_buffer + (byte) 0) ← (byte~) tod_str::$1
Simplifying expression containing zero (byte*)&TOD_ZERO in [348] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memcpy::return#2 and assignment [109] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [111] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [113] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [115] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#0 and assignment [201] (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#1 and assignment [202] (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused constant (const byte*) strupr::return#2
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) HEXADECIMAL
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) printf_number_buffer::format_min_length#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#0
Eliminating unused constant (const byte) printf_number_buffer::format_upper_case#0
Eliminating unused constant (const byte) printf_number_buffer::format_radix#0
Eliminating unused constant (const signed byte) printf_number_buffer::$25
Eliminating unused constant (const byte) printf_string::format_min_length#0
Eliminating unused constant (const signed byte) printf_string::$13
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant (const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) printf_uint::format_min_length#0
Eliminating unused constant (const byte) printf_uint::format_sign_always#0
Eliminating unused constant (const byte) printf_uint::format_upper_case#0
Eliminating unused constant (const byte) printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (bool~) toupper::$0 from unused block toupper
Eliminating variable (bool~) toupper::$1 from unused block toupper
Eliminating variable (byte) toupper::return#0 from unused block toupper::@1
Eliminating variable (byte) toupper::return#2 from unused block toupper::@return
Eliminating variable (byte*) strupr::src#2 from unused block strupr::@1
Eliminating variable (byte) toupper::ch#0 from unused block strupr::@2
Eliminating variable (byte) toupper::return#3 from unused block strupr::@2
Eliminating variable (byte~) strupr::$0 from unused block strupr::@4
Eliminating variable (byte*) strupr::src#1 from unused block strupr::@4
Eliminating variable (byte*) strlen::str#5 from unused block strlen
Eliminating variable (byte*) strlen::str#3 from unused block strlen::@1
Eliminating variable (word) strlen::len#2 from unused block strlen::@1
Eliminating variable (word) strlen::len#1 from unused block strlen::@2
Eliminating variable (byte*) strlen::str#0 from unused block strlen::@2
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Eliminating variable (word) strlen::return#2 from unused block printf_number_buffer::@6
Eliminating variable (word~) printf_number_buffer::$19 from unused block printf_number_buffer::@15
Eliminating variable (signed byte) printf_number_buffer::len#0 from unused block printf_number_buffer::@15
Eliminating variable (signed byte) printf_number_buffer::len#2 from unused block printf_number_buffer::@13
Eliminating variable (signed byte) printf_number_buffer::padding#1 from unused block printf_number_buffer::@13
Eliminating variable (signed byte) printf_number_buffer::len#1 from unused block printf_number_buffer::@7
Eliminating variable (word) strlen::return#3 from unused block printf_string::@3
Eliminating variable (word~) printf_string::$9 from unused block printf_string::@7
Eliminating variable (signed byte) printf_string::len#0 from unused block printf_string::@7
Eliminating variable (signed byte) printf_string::padding#1 from unused block printf_string::@7
Removing unused procedure toupper
Removing unused procedure block toupper
Removing unused procedure block toupper::@1
Removing PHI-reference to removed block (toupper::@1) in block toupper::@return
Removing unused procedure block toupper::@2
Removing PHI-reference to removed block (toupper::@2) in block toupper::@return
Removing unused procedure block toupper::@return
Removing unused procedure block toupper::@3
Removing unused procedure strupr
Removing unused procedure block strupr
Removing PHI-reference to removed block (strupr) in block strupr::@1
Removing unused procedure block strupr::@1
Removing unused procedure block strupr::@2
Removing unused procedure block strupr::@4
Removing unused procedure block strupr::@3
Removing unused procedure block strupr::@return
Removing unused procedure strlen
Removing unused procedure block strlen
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing unused procedure block strlen::@1
Removing unused procedure block strlen::@2
Removing unused procedure block strlen::@3
Removing unused procedure block strlen::@return
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Removing unused block printf_number_buffer::@6
Removing PHI-reference to removed block (printf_number_buffer::@15) in block printf_number_buffer::@13
Removing unused block printf_number_buffer::@15
Removing PHI-reference to removed block (printf_number_buffer::@13) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@13
Removing unused block printf_number_buffer::@7
Removing PHI-reference to removed block (printf_number_buffer::@14) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@14
Removing unused block printf_number_buffer::@11
Removing unused block printf_number_buffer::@20
Removing unused block printf_string::@3
Removing PHI-reference to removed block (printf_string::@7) in block printf_string::@1
Removing unused block printf_string::@7
Removing PHI-reference to removed block (printf_string::@4) in block printf_string::@1
Removing unused block printf_string::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) $19+1 in if((byte) gotoxy::y#5<(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if((byte) gotoxy::y#5<(unumber)(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (const byte) printf_number_buffer::format_zero_padding#0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (const byte) printf_number_buffer::format_justify_left#0
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$16 ← (number) 0 != (const byte) printf_string::format_justify_left#0
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$17 ← (number) 0 != (signed byte) printf_string::padding#3
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$18 ← (number) 0 != (signed byte) printf_string::padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) $19+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#1
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#1
Identical Phi Values (byte~) printf_uint::$2 (const byte) printf_uint::$0
Identical Phi Values (signed byte) printf_number_buffer::padding#10 (const signed byte) printf_number_buffer::padding#0
Identical Phi Values (signed byte) printf_string::padding#3 (const signed byte) printf_string::padding#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) utoa::$12 [30] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [113] if((byte) 0==(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [118] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [126] if((byte) 0!=(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@26
Simple Condition (bool~) printf_string::$1 [132] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@11
Simple Condition (bool~) printf_string::$16 [135] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@12
Simple Condition (bool~) utoa::$6 [213] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [215] if((signed byte) 0!=(const signed byte) printf_number_buffer::padding#0) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [216] if((byte) 0==(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [218] if((signed byte) 0!=(const signed byte) printf_number_buffer::padding#0) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [220] if((signed byte) 0!=(const signed byte) printf_number_buffer::padding#0) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [221] if((byte) 0==(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@25
Simple Condition (bool~) printf_string::$17 [223] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@5
Simple Condition (bool~) printf_string::$18 [225] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [113] if((byte) 0!=(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
Negating conditional jump and destination [118] if((byte) 0==(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
Negating conditional jump and destination [126] if((byte) 0==(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
Negating conditional jump and destination [132] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@2
Negating conditional jump and destination [135] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@return
Negating conditional jump and destination [216] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
Negating conditional jump and destination [221] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [24] (byte~) utoa::$4 ← (const byte) utoa::max_digits#1 - (byte) 1
Constant right-side identified [115] (byte) printf_padding::length#0 ← (byte)(const signed byte) printf_number_buffer::padding#0
Constant right-side identified [121] (byte) printf_padding::length#1 ← (byte)(const signed byte) printf_number_buffer::padding#0
Constant right-side identified [127] (byte) printf_padding::length#2 ← (byte)(const signed byte) printf_number_buffer::padding#0
Constant right-side identified [136] (byte) printf_padding::length#3 ← (byte)(const signed byte) printf_string::padding#0
Constant right-side identified [138] (byte) printf_padding::length#4 ← (byte)(const signed byte) printf_string::padding#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) utoa::$4 = utoa::max_digits#1-1
Constant (const byte) printf_padding::length#0 = (byte)printf_number_buffer::padding#0
Constant (const byte) printf_padding::length#1 = (byte)printf_number_buffer::padding#0
Constant (const byte) printf_padding::length#2 = (byte)printf_number_buffer::padding#0
Constant (const byte) printf_padding::length#3 = (byte)printf_string::padding#0
Constant (const byte) printf_padding::length#4 = (byte)printf_string::padding#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [113] if((byte) 0!=(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
if() condition always true - replacing block destination [118] if((byte) 0==(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
if() condition always true - replacing block destination [126] if((byte) 0==(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
if() condition always false - eliminating [132] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@2
if() condition always true - replacing block destination [135] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@return
if() condition always false - eliminating [215] if((signed byte) 0!=(const signed byte) printf_number_buffer::padding#0) goto printf_number_buffer::@8
if() condition always false - eliminating [216] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
if() condition always false - eliminating [218] if((signed byte) 0!=(const signed byte) printf_number_buffer::padding#0) goto printf_number_buffer::@10
if() condition always false - eliminating [220] if((signed byte) 0!=(const signed byte) printf_number_buffer::padding#0) goto printf_number_buffer::@12
if() condition always false - eliminating [221] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
if() condition always false - eliminating [223] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@5
if() condition always false - eliminating [225] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)(const signed byte) printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)(const signed byte) printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)(const signed byte) printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)(const signed byte) printf_string::padding#0 in 
Simplifying constant evaluating to zero (byte)(const signed byte) printf_string::padding#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const byte) utoa::max_digits#2
Eliminating unused constant (const word*) utoa::digit_values#2
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Eliminating unused constant (const byte) gotoxy::x#1
Eliminating unused constant (const byte) gotoxy::y#1
Eliminating unused constant (const byte) printf_uint::$1
Eliminating unused constant (const signed byte) printf_number_buffer::padding#0
Eliminating unused constant (const signed byte) printf_number_buffer::padding#2
Eliminating unused constant (const byte) printf_number_buffer::format_justify_left#0
Eliminating unused constant (const byte) printf_number_buffer::format_zero_padding#0
Eliminating unused constant (const signed byte) printf_string::padding#0
Eliminating unused constant (const signed byte) printf_string::padding#2
Eliminating unused constant (const byte) printf_string::format_justify_left#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Eliminating unused constant (const byte) printf_uint::format_justify_left#0
Eliminating unused constant (const byte) printf_uint::format_zero_padding#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) printf_padding::length#6 from unused block printf_padding
Eliminating variable (byte) printf_padding::pad#7 from unused block printf_padding
Eliminating variable (byte) printf_padding::i#2 from unused block printf_padding::@1
Eliminating variable (byte) cputc::c#1 from unused block printf_padding::@2
Eliminating variable (byte) printf_padding::i#1 from unused block printf_padding::@3
Removing unused procedure printf_padding
Removing unused procedure block printf_padding
Removing PHI-reference to removed block (printf_padding) in block printf_padding::@1
Removing unused procedure block printf_padding::@1
Removing unused procedure block printf_padding::@2
Removing PHI-reference to removed block (printf_padding::@2) in block cputc
Removing unused procedure block printf_padding::@3
Removing unused procedure block printf_padding::@return
Removing unused block printf_number_buffer::@8
Removing unused block printf_number_buffer::@16
Removing unused block printf_number_buffer::@10
Removing unused block printf_number_buffer::@18
Removing unused block printf_number_buffer::@12
Removing unused block printf_number_buffer::@21
Removing unused block printf_string::@5
Removing unused block printf_string::@9
Removing unused block printf_string::@6
Removing unused block printf_string::@10
Removing unused block printf_number_buffer::@24
Removing unused block printf_number_buffer::@25
Removing unused block printf_number_buffer::@26
Removing unused block printf_string::@12
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Inlining Noop Cast [1] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [24] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift and addition[54] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$7 * (byte) $28
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte) gotoxy::y#0
Inlining constant with var siblings (const byte) gotoxy::x#0
Inlining constant with var siblings (const byte) gotoxy::x#2
Inlining constant with var siblings (const byte) gotoxy::y#2
Inlining constant with var siblings (const byte) gotoxy::x#3
Inlining constant with var siblings (const byte) gotoxy::y#3
Inlining constant with var siblings (const byte) gotoxy::x#4
Inlining constant with var siblings (const byte) gotoxy::y#4
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#3
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#4
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#2
Inlining constant with var siblings (const word) main::i#0
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined cputs::s#3 = (const byte*) main::s
Constant inlined cputs::s#4 = (const byte*) main::s1
Constant inlined cputs::s#1 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined cputs::s#2 = (const byte*) tod_buffer
Constant inlined conio_textcolor = (const nomodify byte) LIGHT_BLUE
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN
Constant inlined memset::num#1 = (byte) $28
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) COLORRAM
Constant inlined memset::num#0 = (byte) $28
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) COLORRAM+(byte) $28
Constant inlined printf_string::str#0 = (const byte*) tod_buffer
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined CONIO_SCREEN_TEXT = (const nomodify byte*) DEFAULT_SCREEN
Constant inlined main::i#0 = (word) 0
Constant inlined utoa::$4 = (const byte) utoa::max_digits#1-(byte) 1
Constant inlined tod_str::return#2 = (const byte*) tod_buffer
Constant inlined tod_str::return#0 = (const byte*) tod_buffer
Constant inlined CONIO_TEXTCOLOR_DEFAULT = (const nomodify byte) LIGHT_BLUE
Constant inlined memset::str#1 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28
Constant inlined memset::str#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28
Constant inlined CONIO_SCREEN_COLORS = (const nomodify byte*) COLORRAM
Constant inlined printf_uint::$0 = (byte) 0
Constant inlined utoa::started#1 = (byte) 1
Constant inlined utoa::started#0 = (byte) 0
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined gotoxy::y#2 = (byte) $16
Constant inlined gotoxy::x#3 = (byte) 0
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined gotoxy::y#3 = (byte) $10
Constant inlined gotoxy::x#4 = (byte) 0
Constant inlined gotoxy::y#4 = (byte) 0
Constant inlined utoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined gotoxy::x#0 = (byte) 0
Constant inlined gotoxy::y#0 = (byte) 0
Constant inlined gotoxy::x#2 = (byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined memset::c#1 = (const nomodify byte) LIGHT_BLUE
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(tod_buffer+1)
Consolidated array index constant in *(tod_buffer+3)
Consolidated array index constant in *(tod_buffer+4)
Consolidated array index constant in *(tod_buffer+6)
Consolidated array index constant in *(tod_buffer+7)
Consolidated array index constant in *(tod_buffer+9)
Consolidated array index constant in *(tod_buffer+$a)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::line_offset#0 = gotoxy::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Identical Phi Values (byte) gotoxy::x#5 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) gotoxy::x#6 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [9] if((byte) $28<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [44] if((byte) 0<(byte) $28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@1
Adding NOP phi() at start of printf_number_buffer::@23
Adding NOP phi() at start of printf_number_buffer::@22
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@3
Adding NOP phi() at start of printf_number_buffer::@4
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@19
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of printf_string::@11
Adding NOP phi() at start of printf_string::@2
Adding NOP phi() at start of printf_string::@8
CALL GRAPH
Calls in [__start] to main:6 
Calls in [main] to tod_init:13 gotoxy:18 tod_read:20 tod_str:29 cputs:31 printf_string:33 gotoxy:39 printf_uint:41 gotoxy:43 cputs:46 
Calls in [cputs] to cputc:58 
Calls in [cputc] to cputln:67 cputln:71 
Calls in [cputln] to cscroll:77 
Calls in [cscroll] to memcpy:83 memcpy:85 memset:87 memset:89 
Calls in [printf_uint] to utoa:137 printf_number_buffer:139 
Calls in [printf_number_buffer] to cputc:149 cputs:154 
Calls in [utoa] to utoa_append:183 
Calls in [printf_string] to cputs:202 

Created 22 initial phi equivalence classes
Coalesced [48] main::i#10 ← main::i#1
Coalesced [50] cputs::s#9 ← cputs::s#6
Coalesced [57] cputc::c#5 ← cputc::c#0
Coalesced [59] cputs::s#10 ← cputs::s#0
Coalesced [103] memset::dst#5 ← memset::dst#1
Coalesced [115] memcpy::src#5 ← memcpy::src#1
Coalesced [116] memcpy::dst#5 ← memcpy::dst#1
Coalesced [132] gotoxy::y#9 ← gotoxy::y#5
Coalesced [148] cputc::c#6 ← cputc::c#2
Coalesced [159] utoa::value#17 ← utoa::value#1
Coalesced [171] utoa::value#18 ← utoa::value#2
Coalesced [172] utoa::started#6 ← utoa::started#2
Coalesced [173] utoa::buffer#23 ← utoa::buffer#11
Coalesced [176] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [177] utoa::value#16 ← utoa::value#6
Coalesced (already) [178] utoa::started#5 ← utoa::started#4
Coalesced (already) [179] utoa::buffer#22 ← utoa::buffer#14
Coalesced [187] utoa::value#19 ← utoa::value#0
Coalesced [188] utoa::buffer#24 ← utoa::buffer#4
Coalesced [189] utoa_append::value#6 ← utoa_append::value#0
Coalesced [196] utoa_append::value#7 ← utoa_append::value#1
Coalesced [197] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced down to 17 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@15
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) gotoxy::@3
Culled Empty Block (label) printf_uint::@2
Culled Empty Block (label) printf_uint::@5
Culled Empty Block (label) printf_number_buffer::@1
Culled Empty Block (label) printf_number_buffer::@23
Culled Empty Block (label) printf_number_buffer::@22
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@3
Culled Empty Block (label) printf_number_buffer::@4
Culled Empty Block (label) printf_number_buffer::@19
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) printf_string::@1
Culled Empty Block (label) printf_string::@11
Culled Empty Block (label) printf_string::@8
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_number_buffer::@2 to printf_number_buffer::@1
Renumbering block printf_number_buffer::@5 to printf_number_buffer::@2
Renumbering block printf_number_buffer::@9 to printf_number_buffer::@3
Renumbering block printf_string::@2 to printf_string::@1
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block main::@12 to main::@10
Renumbering block main::@13 to main::@11
Renumbering block main::@14 to main::@12
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@2
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@10
  [13] (word) main::i#2 ← phi( main::@10/(word) main::i#1 main/(word) 0 )
  [14] if((word) main::i#2<(word) $2710) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [15] phi()
  [16] call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [17] phi()
  [18] call tod_read 
  [19] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [20] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [21] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [22] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [24] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [25] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [26] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [27] call tod_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [28] phi()
  [29] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [30] phi()
  [31] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [32] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f
  [34] if((byte~) main::$6!=(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [35] phi()
  [36] call gotoxy 
  to:main::@11
main::@11: scope:[main]  from main::@5
  [37] (word) printf_uint::uvalue#0 ← (word) main::i#2
  [38] call printf_uint 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [39] phi()
  [40] call gotoxy 
  to:main::@4
main::@4: scope:[main]  from main::@12 main::@2
  [41] phi()
  [42] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@4
  [43] (word) main::i#1 ← ++ (word) main::i#2
  to:main::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@4 main::@8 printf_number_buffer::@2 printf_string::@1
  [44] (to_nomodify byte*) cputs::s#6 ← phi( main::@4/(const byte*) main::s1 main::@8/(const byte*) main::s printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 printf_string::@1/(const byte*) tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [45] (to_nomodify byte*) cputs::s#5 ← phi( cputs/(to_nomodify byte*) cputs::s#6 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [46] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5)
  [47] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#5
  [48] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [49] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [50] (byte) cputc::c#0 ← (byte) cputs::c#1
  [51] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [52] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@3/(byte) cputc::c#2 )
  [53] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [54] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3
  [55] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [56] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [57] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [58] phi()
  [59] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [60] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [61] phi()
  [62] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [63] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [64] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [65] (byte) conio_cursor_x ← (byte) 0
  [66] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [67] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [68] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [69] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [70] phi()
  [71] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [72] phi()
  [73] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [74] phi()
  [75] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [76] phi()
  [77] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [78] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [79] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [81] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [82] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [82] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [83] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [84] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [85] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [86] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [87] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [88] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [89] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [90] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [90] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [91] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [92] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [93] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [94] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [94] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [95] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [96] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [97] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [98] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [99] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@12 main::@3 main::@5
  [100] (byte) gotoxy::y#5 ← phi( main::@12/(byte) 0 main::@3/(byte) $16 main::@5/(byte) $10 )
  [101] if((byte) gotoxy::y#5<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [102] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [103] (byte) gotoxy::y#6 ← phi( gotoxy::@3/(byte) gotoxy::y#5 gotoxy/(byte) 0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [104] (byte) conio_cursor_x ← (byte) 0
  [105] (byte) conio_cursor_y ← (byte) gotoxy::y#6
  [106] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6
  [107] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2
  [108] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7
  [109] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3
  [110] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0
  [111] (byte*) conio_line_text ← (byte*~) gotoxy::$5
  [112] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0
  [113] (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [114] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@11
  [115] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [116] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [117] (word) utoa::value#1 ← (word) printf_uint::uvalue#0
  [118] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [119] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [120] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [121] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [122] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [123] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [124] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
  [125] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [126] phi()
  [127] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [128] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [129] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [130] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [130] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [130] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [130] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [131] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [132] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [133] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [134] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [135] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [136] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [137] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [138] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [139] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [140] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [141] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [141] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [141] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [142] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [143] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [144] (word) utoa_append::value#0 ← (word) utoa::value#2
  [145] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [146] call utoa_append 
  [147] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [148] (word) utoa::value#0 ← (word) utoa_append::return#0
  [149] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [150] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [151] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [151] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [152] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [153] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [154] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [155] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [156] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@9
  [157] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [158] phi()
  [159] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [160] return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@7
  [161] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [162] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [163] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [164] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [165] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [166] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [167] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [168] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [169] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [170] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [171] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [172] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [173] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [174] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [175] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [176] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [177] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [178] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [179] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [180] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [181] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [182] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [183] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [184] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [185] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@6
  [186] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [187] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [188] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [189] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [190] return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [191] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [192] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [193] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [194] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [195] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [196] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [197] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) __start()
(byte) conio_cursor_x loadstore 1.8987354544303797E7
(byte) conio_cursor_y loadstore 3.4042554263829786E8
(byte*) conio_line_color loadstore 2.6309525009523806E8
(byte*) conio_line_text loadstore 2.5402300009195402E8
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 2.0000002E7
(byte) cputc::c#2 20002.0
(byte) cputc::c#3 1.05005002E8
(void()) cputln()
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5000000.5
(to_nomodify byte*) cputs::s#5 1.5050002E7
(to_nomodify byte*) cputs::s#6 100001.0
(void()) cscroll()
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(byte*~) gotoxy::$5 2002.0
(byte*~) gotoxy::$6 2002.0
(word~) gotoxy::$7 1501.5
(word~) gotoxy::$8 2002.0
(word~) gotoxy::$9 2002.0
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0 1001.0
(byte) gotoxy::x
(byte) gotoxy::y
(byte) gotoxy::y#5 667.3333333333334
(byte) gotoxy::y#6 667.3333333333334
(void()) main()
(byte~) main::$6 202.0
(word) main::i
(word) main::i#1 202.0
(word) main::i#2 42.08333333333333
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.00000000000001E14
(byte*) memcpy::dst#2 1.0003333333333467E14
(byte*) memcpy::dst#4 2.00000000002E11
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.00000000000002E14
(byte*) memcpy::src#2 1.0002500000000125E14
(byte*) memcpy::src#4 1.00000000001E11
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.251250000000025E13
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.4285714285714428E13
(byte*) memset::dst
(byte*) memset::dst#1 2.00000000000002E14
(byte*) memset::dst#2 1.3336666666666834E14
(byte*) memset::dst#4 2.00000000002E11
(byte*) memset::end
(byte*) memset::end#0 1.6683333333333668E13
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 7001.0
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_zero_padding
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::padding
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::padding
(byte*) printf_string::str
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0 367.33333333333337
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 12.444444444444443
(byte) tod_read::return_HOURS#2 5.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 16.0
(byte) tod_read::return_MIN#2 5.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 22.4
(byte) tod_read::return_SEC#2 5.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 37.33333333333333
(byte) tod_read::return_TENTHS#2 5.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 202.0
(byte~) tod_str::$1 202.0
(byte~) tod_str::$10 202.0
(byte~) tod_str::$11 202.0
(byte~) tod_str::$12 202.0
(byte~) tod_str::$13 202.0
(byte~) tod_str::$14 202.0
(byte~) tod_str::$15 202.0
(byte~) tod_str::$2 202.0
(byte~) tod_str::$3 202.0
(byte~) tod_str::$4 202.0
(byte~) tod_str::$5 202.0
(byte~) tod_str::$6 202.0
(byte~) tod_str::$7 202.0
(byte~) tod_str::$8 202.0
(byte~) tod_str::$9 202.0
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 53.25
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 19.363636363636363
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 11.833333333333332
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 8.52
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 2000002.0
(byte~) utoa::$11 20002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 287143.2857142857
(byte*) utoa::buffer#14 1500001.5
(byte*) utoa::buffer#3 20002.0
(byte*) utoa::buffer#4 2000002.0
(byte) utoa::digit
(byte) utoa::digit#1 2000002.0
(byte) utoa::digit#2 285714.5714285714
(word) utoa::digit_value
(word) utoa::digit_value#0 600000.6000000001
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 500000.5
(byte) utoa::started#4 1000001.0
(word) utoa::value
(word) utoa::value#0 1000001.0
(word) utoa::value#1 5501.0
(word) utoa::value#2 572857.857142857
(word) utoa::value#6 1500001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 1375000.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.0000000001E10
(byte) utoa_append::digit#2 1.00050000015E10
(word) utoa_append::return
(word) utoa_append::return#0 2000002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3.3335000005E9
(word) utoa_append::value
(word) utoa_append::value#0 3666667.333333333
(word) utoa_append::value#1 2.0000000002E10
(word) utoa_append::value#2 5.001833334166666E9

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ cputs::s#5 cputs::s#6 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ gotoxy::y#6 gotoxy::y#5 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable tod_init::tod_TENTHS#0 to live range equivalence class [ tod_init::tod_TENTHS#0 ]
Added variable tod_init::tod_SEC#0 to live range equivalence class [ tod_init::tod_SEC#0 ]
Added variable tod_init::tod_MIN#0 to live range equivalence class [ tod_init::tod_MIN#0 ]
Added variable tod_init::tod_HOURS#0 to live range equivalence class [ tod_init::tod_HOURS#0 ]
Added variable tod_read::return_TENTHS#2 to live range equivalence class [ tod_read::return_TENTHS#2 ]
Added variable tod_read::return_SEC#2 to live range equivalence class [ tod_read::return_SEC#2 ]
Added variable tod_read::return_MIN#2 to live range equivalence class [ tod_read::return_MIN#2 ]
Added variable tod_read::return_HOURS#2 to live range equivalence class [ tod_read::return_HOURS#2 ]
Added variable tod_str::tod_TENTHS#0 to live range equivalence class [ tod_str::tod_TENTHS#0 ]
Added variable tod_str::tod_SEC#0 to live range equivalence class [ tod_str::tod_SEC#0 ]
Added variable tod_str::tod_MIN#0 to live range equivalence class [ tod_str::tod_MIN#0 ]
Added variable tod_str::tod_HOURS#0 to live range equivalence class [ tod_str::tod_HOURS#0 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable printf_uint::uvalue#0 to live range equivalence class [ printf_uint::uvalue#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable gotoxy::$7 to live range equivalence class [ gotoxy::$7 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::line_offset#0 to live range equivalence class [ gotoxy::line_offset#0 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::$6 to live range equivalence class [ gotoxy::$6 ]
Added variable printf_number_buffer::buffer_sign#0 to live range equivalence class [ printf_number_buffer::buffer_sign#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable tod_str::$0 to live range equivalence class [ tod_str::$0 ]
Added variable tod_str::$1 to live range equivalence class [ tod_str::$1 ]
Added variable tod_str::$2 to live range equivalence class [ tod_str::$2 ]
Added variable tod_str::$3 to live range equivalence class [ tod_str::$3 ]
Added variable tod_str::$4 to live range equivalence class [ tod_str::$4 ]
Added variable tod_str::$5 to live range equivalence class [ tod_str::$5 ]
Added variable tod_str::$6 to live range equivalence class [ tod_str::$6 ]
Added variable tod_str::$7 to live range equivalence class [ tod_str::$7 ]
Added variable tod_str::$8 to live range equivalence class [ tod_str::$8 ]
Added variable tod_str::$9 to live range equivalence class [ tod_str::$9 ]
Added variable tod_str::$10 to live range equivalence class [ tod_str::$10 ]
Added variable tod_str::$11 to live range equivalence class [ tod_str::$11 ]
Added variable tod_str::$12 to live range equivalence class [ tod_str::$12 ]
Added variable tod_str::$13 to live range equivalence class [ tod_str::$13 ]
Added variable tod_str::$14 to live range equivalence class [ tod_str::$14 ]
Added variable tod_str::$15 to live range equivalence class [ tod_str::$15 ]
Added variable tod_read::return_HOURS#0 to live range equivalence class [ tod_read::return_HOURS#0 ]
Added variable tod_read::return_MIN#0 to live range equivalence class [ tod_read::return_MIN#0 ]
Added variable tod_read::return_SEC#0 to live range equivalence class [ tod_read::return_SEC#0 ]
Added variable tod_read::return_TENTHS#0 to live range equivalence class [ tod_read::return_TENTHS#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Added variable TOD_ZERO to live range equivalence class [ TOD_ZERO ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ cputs::s#5 cputs::s#6 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ gotoxy::y#6 gotoxy::y#5 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ tod_init::tod_TENTHS#0 ]
[ tod_init::tod_SEC#0 ]
[ tod_init::tod_MIN#0 ]
[ tod_init::tod_HOURS#0 ]
[ tod_read::return_TENTHS#2 ]
[ tod_read::return_SEC#2 ]
[ tod_read::return_MIN#2 ]
[ tod_read::return_HOURS#2 ]
[ tod_str::tod_TENTHS#0 ]
[ tod_str::tod_SEC#0 ]
[ tod_str::tod_MIN#0 ]
[ tod_str::tod_HOURS#0 ]
[ main::$6 ]
[ printf_uint::uvalue#0 ]
[ cputs::c#1 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ gotoxy::$7 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::line_offset#0 ]
[ gotoxy::$5 ]
[ gotoxy::$6 ]
[ printf_number_buffer::buffer_sign#0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ tod_str::$0 ]
[ tod_str::$1 ]
[ tod_str::$2 ]
[ tod_str::$3 ]
[ tod_str::$4 ]
[ tod_str::$5 ]
[ tod_str::$6 ]
[ tod_str::$7 ]
[ tod_str::$8 ]
[ tod_str::$9 ]
[ tod_str::$10 ]
[ tod_str::$11 ]
[ tod_str::$12 ]
[ tod_str::$13 ]
[ tod_str::$14 ]
[ tod_str::$15 ]
[ tod_read::return_HOURS#0 ]
[ tod_read::return_MIN#0 ]
[ tod_read::return_SEC#0 ]
[ tod_read::return_TENTHS#0 ]
[ printf_buffer ]
[ TOD_ZERO ]
Allocated zp[2]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:4 [ cputs::s#5 cputs::s#6 cputs::s#0 ]
Allocated zp[1]:6 [ cputc::c#3 cputc::c#0 cputc::c#2 ]
Allocated zp[2]:7 [ memset::str#3 ]
Allocated zp[1]:9 [ memset::c#4 ]
Allocated zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:12 [ memcpy::source#2 ]
Allocated zp[2]:14 [ memcpy::destination#2 ]
Allocated zp[2]:16 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:18 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[1]:20 [ gotoxy::y#6 gotoxy::y#5 ]
Allocated zp[1]:21 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:24 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:27 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:29 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[1]:30 [ conio_cursor_x ]
Allocated zp[1]:31 [ conio_cursor_y ]
Allocated zp[2]:32 [ conio_line_text ]
Allocated zp[2]:34 [ conio_line_color ]
Allocated zp[1]:36 [ tod_init::tod_TENTHS#0 ]
Allocated zp[1]:37 [ tod_init::tod_SEC#0 ]
Allocated zp[1]:38 [ tod_init::tod_MIN#0 ]
Allocated zp[1]:39 [ tod_init::tod_HOURS#0 ]
Allocated zp[1]:40 [ tod_read::return_TENTHS#2 ]
Allocated zp[1]:41 [ tod_read::return_SEC#2 ]
Allocated zp[1]:42 [ tod_read::return_MIN#2 ]
Allocated zp[1]:43 [ tod_read::return_HOURS#2 ]
Allocated zp[1]:44 [ tod_str::tod_TENTHS#0 ]
Allocated zp[1]:45 [ tod_str::tod_SEC#0 ]
Allocated zp[1]:46 [ tod_str::tod_MIN#0 ]
Allocated zp[1]:47 [ tod_str::tod_HOURS#0 ]
Allocated zp[1]:48 [ main::$6 ]
Allocated zp[2]:49 [ printf_uint::uvalue#0 ]
Allocated zp[1]:51 [ cputs::c#1 ]
Allocated zp[2]:52 [ memset::end#0 ]
Allocated zp[2]:54 [ memcpy::src_end#0 ]
Allocated zp[2]:56 [ gotoxy::$7 ]
Allocated zp[2]:58 [ gotoxy::$8 ]
Allocated zp[2]:60 [ gotoxy::$9 ]
Allocated zp[2]:62 [ gotoxy::line_offset#0 ]
Allocated zp[2]:64 [ gotoxy::$5 ]
Allocated zp[2]:66 [ gotoxy::$6 ]
Allocated zp[1]:68 [ printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:69 [ utoa::$11 ]
Allocated zp[2]:70 [ utoa::buffer#3 ]
Allocated zp[1]:72 [ utoa::$10 ]
Allocated zp[2]:73 [ utoa::digit_value#0 ]
Allocated zp[2]:75 [ utoa_append::buffer#0 ]
Allocated zp[2]:77 [ utoa_append::sub#0 ]
Allocated zp[2]:79 [ utoa_append::return#0 ]
Allocated zp[1]:81 [ tod_str::$0 ]
Allocated zp[1]:82 [ tod_str::$1 ]
Allocated zp[1]:83 [ tod_str::$2 ]
Allocated zp[1]:84 [ tod_str::$3 ]
Allocated zp[1]:85 [ tod_str::$4 ]
Allocated zp[1]:86 [ tod_str::$5 ]
Allocated zp[1]:87 [ tod_str::$6 ]
Allocated zp[1]:88 [ tod_str::$7 ]
Allocated zp[1]:89 [ tod_str::$8 ]
Allocated zp[1]:90 [ tod_str::$9 ]
Allocated zp[1]:91 [ tod_str::$10 ]
Allocated zp[1]:92 [ tod_str::$11 ]
Allocated zp[1]:93 [ tod_str::$12 ]
Allocated zp[1]:94 [ tod_str::$13 ]
Allocated zp[1]:95 [ tod_str::$14 ]
Allocated zp[1]:96 [ tod_str::$15 ]
Allocated zp[1]:97 [ tod_read::return_HOURS#0 ]
Allocated zp[1]:98 [ tod_read::return_MIN#0 ]
Allocated zp[1]:99 [ tod_read::return_SEC#0 ]
Allocated zp[1]:100 [ tod_read::return_TENTHS#0 ]
Allocated mem[12] [ printf_buffer ]
Allocated mem[4] [ TOD_ZERO ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests the speed of printf()
// Functions for performing input and output.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $1e
  // The current cursor y-position
  .label conio_cursor_y = $1f
  // The current text cursor line start
  .label conio_line_text = $20
  // The current color cursor line start
  .label conio_line_color = $22
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    .label __6 = $30
    .label i = 2
    // [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    sta.z tod_init.tod_MIN
    // [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    sta.z tod_init.tod_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [13] phi (word) main::i#2 = (word) 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [14] if((word) main::i#2<(word) $2710) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$2710
    bcc __b2
    bne !+
    lda.z i
    cmp #<$2710
    bcc __b2
  !:
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [16] call gotoxy 
    // [100] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
  gotoxy_from___b3:
    // [100] phi (byte) gotoxy::y#5 = (byte) $16 [phi:main::@3->gotoxy#0] -- vbuz1=vbuc1 
    lda #$16
    sta.z gotoxy.y
    jsr gotoxy
    // [17] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
  __b6_from___b3:
    jmp __b6
    // main::@6
  __b6:
    // [18] call tod_read 
    jsr tod_read
    // [19] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS
    sta.z tod_read.return_TENTHS_1
    // [20] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC
    sta.z tod_read.return_SEC_1
    // [21] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN
    sta.z tod_read.return_MIN_1
    // [22] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS
    sta.z tod_read.return_HOURS_1
    jmp __b7
    // main::@7
  __b7:
    // [23] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS_1
    sta.z tod_str.tod_TENTHS
    // [24] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC_1
    sta.z tod_str.tod_SEC
    // [25] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN_1
    sta.z tod_str.tod_MIN
    // [26] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS_1
    sta.z tod_str.tod_HOURS
    // [27] call tod_str 
    jsr tod_str
    // [28] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [29] call cputs 
    // [44] phi from main::@8 to cputs [phi:main::@8->cputs]
  cputs_from___b8:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) main::s [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [31] call printf_string 
    // [157] phi from main::@9 to printf_string [phi:main::@9->printf_string]
  printf_string_from___b9:
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [32] return 
    rts
    // main::@2
  __b2:
    // [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f -- vbuz1=vwuz2_band_vbuc1 
    lda #$7f
    and.z i
    sta.z __6
    // [34] if((byte~) main::$6!=(byte) 0) goto main::@4 -- vbuz1_neq_0_then_la1 
    lda.z __6
    cmp #0
    bne __b4_from___b2
    // [35] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  __b5_from___b2:
    jmp __b5
    // main::@5
  __b5:
    // [36] call gotoxy 
    // [100] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
  gotoxy_from___b5:
    // [100] phi (byte) gotoxy::y#5 = (byte) $10 [phi:main::@5->gotoxy#0] -- vbuz1=vbuc1 
    lda #$10
    sta.z gotoxy.y
    jsr gotoxy
    jmp __b11
    // main::@11
  __b11:
    // [37] (word) printf_uint::uvalue#0 ← (word) main::i#2 -- vwuz1=vwuz2 
    lda.z i
    sta.z printf_uint.uvalue
    lda.z i+1
    sta.z printf_uint.uvalue+1
    // [38] call printf_uint 
    // [115] phi from main::@11 to printf_uint [phi:main::@11->printf_uint]
  printf_uint_from___b11:
    jsr printf_uint
    // [39] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [40] call gotoxy 
    // [100] phi from main::@12 to gotoxy [phi:main::@12->gotoxy]
  gotoxy_from___b12:
    // [100] phi (byte) gotoxy::y#5 = (byte) 0 [phi:main::@12->gotoxy#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gotoxy.y
    jsr gotoxy
    // [41] phi from main::@12 main::@2 to main::@4 [phi:main::@12/main::@2->main::@4]
  __b4_from___b12:
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [42] call cputs 
    // [44] phi from main::@4 to cputs [phi:main::@4->cputs]
  cputs_from___b4:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) main::s1 [phi:main::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b10
    // main::@10
  __b10:
    // [43] (word) main::i#1 ← ++ (word) main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [13] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  __b1_from___b10:
    // [13] phi (word) main::i#2 = (word) main::i#1 [phi:main::@10->main::@1#0] -- register_copy 
    jmp __b1
    s: .text "time: "
    .byte 0
    s1: .text "qwe "
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label c = $33
    .label s = 4
    // [45] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [45] phi (to_nomodify byte*) cputs::s#5 = (to_nomodify byte*) cputs::s#6 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [46] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [47] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#5 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [48] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [49] return 
    rts
    // cputs::@2
  __b2:
    // [50] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [51] call cputc 
    // [52] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [52] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp(6) c)
cputc: {
    .label c = 6
    // [53] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [54] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z c
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [55] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [56] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [57] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [58] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [59] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [60] return 
    rts
    // [61] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [62] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [63] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [64] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [65] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [66] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [67] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [68] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [69] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [70] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [71] call memcpy 
    // [90] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [90] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [90] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [72] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [73] call memcpy 
    // [90] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [90] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [90] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [74] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [75] call memset 
    // [82] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [82] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [82] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [76] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [77] call memset 
    // [82] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [82] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z memset.c
    // [82] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [78] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [79] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(7) str, byte zp(9) c)
memset: {
    .label end = $34
    .label dst = $a
    .label str = 7
    .label c = 9
    jmp __b1
    // memset::@1
  __b1:
    // [83] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [84] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [85] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [85] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [86] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [87] return 
    rts
    // memset::@3
  __b3:
    // [88] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [89] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($e) destination, void* zp($c) source)
memcpy: {
    .label src_end = $36
    .label dst = $12
    .label src = $10
    .label source = $c
    .label destination = $e
    // [91] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [92] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [93] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [94] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [94] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [94] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [95] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [96] return 
    rts
    // memcpy::@2
  __b2:
    // [97] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [98] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [99] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte zp($14) y)
gotoxy: {
    .label __5 = $40
    .label __6 = $42
    .label __7 = $38
    .label line_offset = $3e
    .label y = $14
    .label __8 = $3a
    .label __9 = $3c
    // [101] if((byte) gotoxy::y#5<(byte) $19+(byte) 1) goto gotoxy::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$19+1
    bcc __b3_from_gotoxy
    // [103] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [103] phi (byte) gotoxy::y#6 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // [102] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [103] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [103] phi (byte) gotoxy::y#6 = (byte) gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [104] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [105] (byte) conio_cursor_y ← (byte) gotoxy::y#6 -- vbuz1=vbuz2 
    lda.z y
    sta.z conio_cursor_y
    // [106] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __7
    lda #0
    sta.z __7+1
    // [107] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [108] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z __8
    clc
    adc.z __7
    sta.z __9
    lda.z __8+1
    adc.z __7+1
    sta.z __9+1
    // [109] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z __9
    asl
    sta.z line_offset
    lda.z __9+1
    rol
    sta.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [110] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [111] (byte*) conio_line_text ← (byte*~) gotoxy::$5 -- pbuz1=pbuz2 
    lda.z __5
    sta.z conio_line_text
    lda.z __5+1
    sta.z conio_line_text+1
    // [112] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<COLORRAM
    sta.z __6
    lda.z line_offset+1
    adc #>COLORRAM
    sta.z __6+1
    // [113] (byte*) conio_line_color ← (byte*~) gotoxy::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z conio_line_color
    lda.z __6+1
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [114] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp($31) uvalue)
printf_uint: {
    .label uvalue = $31
    jmp __b1
    // printf_uint::@1
  __b1:
    // [116] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [117] (word) utoa::value#1 ← (word) printf_uint::uvalue#0 -- vwuz1=vwuz2 
    lda.z uvalue
    sta.z utoa.value
    lda.z uvalue+1
    sta.z utoa.value+1
    // [118] call utoa 
  // Format number into buffer
    // [129] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [119] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [120] call printf_number_buffer 
  // Print using format
    // [122] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [121] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($44) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label buffer_sign = $44
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [123] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [124] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [125] call cputc 
    // [52] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
  cputc_from___b3:
    // [52] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [126] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [127] call cputs 
    // [44] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
  cputs_from___b2:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [128] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($16) value, byte* zp($46) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $48
    .label __11 = $45
    .label digit_value = $49
    .label buffer = $46
    .label digit = $15
    .label value = $16
    .label buffer_1 = $19
    .label started = $18
    // [130] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [130] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [130] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [130] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [130] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [131] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [132] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [133] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [134] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [135] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [136] return 
    rts
    // utoa::@2
  __b2:
    // [137] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [138] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [139] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [140] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [141] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [141] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [141] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [141] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [142] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [130] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [130] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [130] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [130] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [130] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [143] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [144] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [145] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [146] call utoa_append 
    // [150] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [147] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [148] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [149] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [141] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [141] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [141] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [141] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($4b) buffer, word zp($1b) value, word zp($4d) sub)
utoa_append: {
    .label buffer = $4b
    .label value = $1b
    .label sub = $4d
    .label return = $4f
    .label digit = $1d
    // [151] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [151] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [151] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [152] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [153] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [154] return 
    rts
    // utoa_append::@2
  __b2:
    // [155] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [156] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [151] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [151] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [151] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [158] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [159] call cputs 
    // [44] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [160] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($2c) tod_TENTHS, byte zp($2d) tod_SEC, byte zp($2e) tod_MIN, byte zp($2f) tod_HOURS)
tod_str: {
    .label __0 = $51
    .label __1 = $52
    .label __2 = $53
    .label __3 = $54
    .label __4 = $55
    .label __5 = $56
    .label __6 = $57
    .label __7 = $58
    .label __8 = $59
    .label __9 = $5a
    .label __10 = $5b
    .label __11 = $5c
    .label __12 = $5d
    .label __13 = $5e
    .label __14 = $5f
    .label __15 = $60
    .label tod_TENTHS = $2c
    .label tod_SEC = $2d
    .label tod_MIN = $2e
    .label tod_HOURS = $2f
    // [161] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_HOURS
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [162] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __0
    axs #-['0']
    stx.z __1
    // [163] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta tod_buffer
    // [164] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_HOURS
    sta.z __2
    // [165] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __2
    axs #-['0']
    stx.z __3
    // [166] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuz1 
    lda.z __3
    sta tod_buffer+1
    // [167] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_MIN
    lsr
    lsr
    lsr
    lsr
    sta.z __4
    // [168] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __4
    axs #-['0']
    stx.z __5
    // [169] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuz1 
    lda.z __5
    sta tod_buffer+3
    // [170] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_MIN
    sta.z __6
    // [171] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __6
    axs #-['0']
    stx.z __7
    // [172] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuz1 
    lda.z __7
    sta tod_buffer+4
    // [173] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    sta.z __8
    // [174] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __8
    axs #-['0']
    stx.z __9
    // [175] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuz1 
    lda.z __9
    sta tod_buffer+6
    // [176] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_SEC
    sta.z __10
    // [177] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __10
    axs #-['0']
    stx.z __11
    // [178] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuz1 
    lda.z __11
    sta tod_buffer+7
    // [179] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    sta.z __12
    // [180] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __12
    axs #-['0']
    stx.z __13
    // [181] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuz1 
    lda.z __13
    sta tod_buffer+9
    // [182] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    sta.z __14
    // [183] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __14
    axs #-['0']
    stx.z __15
    // [184] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuz1 
    lda.z __15
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [185] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_TENTHS = $64
    .label return_SEC = $63
    .label return_MIN = $62
    .label return_HOURS = $61
    .label return_TENTHS_1 = $28
    .label return_SEC_1 = $29
    .label return_MIN_1 = $2a
    .label return_HOURS_1 = $2b
    // [186] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [187] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    sta.z return_MIN
    // [188] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    sta.z return_SEC
    // [189] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    sta.z return_TENTHS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [190] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($24) tod_TENTHS, byte zp($25) tod_SEC, byte zp($26) tod_MIN, byte zp($27) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $24
    .label tod_SEC = $25
    .label tod_MIN = $26
    .label tod_HOURS = $27
    // [191] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [192] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [193] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuz1 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    lda.z tod_HOURS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [194] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_MIN
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [195] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [196] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [197] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x TOD_ZERO printf_buffer ] (  [ conio_cursor_x TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [14] if((word) main::i#2<(word) $2710) goto main::@2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [37] (word) printf_uint::uvalue#0 ← (word) main::i#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 } }  ) always clobbers reg byte a 
Statement [46] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5) [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] ( main:6::cputs:29 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::cputs:42 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { { printf_uint::uvalue#0 = main::i#2 } }  main:6::printf_string:31::cputs:159 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [54] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [55] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [57] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [63] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [64] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [65] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [69] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [79] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [83] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ memset::c#4 ]
Statement [84] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [86] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [88] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:9 [ memset::c#4 ]
Statement [91] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [92] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [93] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [95] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [97] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [104] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x gotoxy::y#6 ] ( main:6::gotoxy:16 [ conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ gotoxy::y#6 gotoxy::y#5 ]
Statement [106] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [107] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [108] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [109] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [110] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [111] (byte*) conio_line_text ← (byte*~) gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [112] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [113] (byte*) conio_line_color ← (byte*~) gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [116] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] (word) utoa::value#1 ← (word) printf_uint::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [132] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [133] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [134] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [135] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [137] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ utoa::started#2 utoa::started#4 ]
Statement [138] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [140] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [143] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [144] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [145] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [147] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [148] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [152] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:38::utoa:118::utoa_append:146 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [153] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:6::printf_uint:38::utoa:118::utoa_append:146 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:21 [ utoa::digit#2 utoa::digit#1 ]
Statement [156] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:38::utoa:118::utoa_append:146 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:44 [ tod_str::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ tod_str::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ tod_str::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ tod_str::tod_HOURS#0 ]
Statement [164] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [167] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [170] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [173] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [176] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [179] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [182] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [191] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ tod_init::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:37 [ tod_init::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ tod_init::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ tod_init::tod_HOURS#0 ]
Statement [192] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x TOD_ZERO printf_buffer ] (  [ conio_cursor_x TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] (  [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [14] if((word) main::i#2<(word) $2710) goto main::@2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 main::$6 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [37] (word) printf_uint::uvalue#0 ← (word) main::i#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::i#2 printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 } }  ) always clobbers reg byte a 
Statement [46] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5) [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] ( main:6::cputs:29 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::cputs:42 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { { printf_uint::uvalue#0 = main::i#2 } }  main:6::printf_string:31::cputs:159 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#5 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [54] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [55] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [57] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [63] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [64] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62 [ main::i#2 printf_buffer conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [65] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [69] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [79] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [83] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [84] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [86] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [88] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:75 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:75 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memset:77 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memset:77 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [91] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [92] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [93] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [95] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [97] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:71 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:71 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:59::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:59::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:29::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:42::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputs:127::cputc:51::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:31::cputs:159::cputc:51::cputln:62::cscroll:67::memcpy:73 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:38::printf_number_buffer:120::cputc:125::cputln:62::cscroll:67::memcpy:73 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [104] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x gotoxy::y#6 ] ( main:6::gotoxy:16 [ conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x gotoxy::y#6 ] { }  ) always clobbers reg byte a 
Statement [106] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [107] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [108] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [109] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [110] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [111] (byte*) conio_line_text ← (byte*~) gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [112] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [113] (byte*) conio_line_color ← (byte*~) gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:16 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:36 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  main:6::gotoxy:40 [ main::i#2 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [116] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] (word) utoa::value#1 ← (word) printf_uint::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] ( main:6::printf_uint:38 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [132] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [133] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [134] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [135] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [137] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [138] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [140] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [143] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [144] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [145] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [147] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [148] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:38::utoa:118 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [152] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:38::utoa:118::utoa_append:146 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [153] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:6::printf_uint:38::utoa:118::utoa_append:146 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [156] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:38::utoa:118::utoa_append:146 [ main::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = main::i#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [164] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [167] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [170] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [173] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [176] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [179] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [182] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:6::tod_str:27 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [191] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [192] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::i#2 main::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ cputs::s#5 cputs::s#6 cputs::s#0 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ cputc::c#3 cputc::c#0 cputc::c#2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:7 [ memset::str#3 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ memset::c#4 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ memcpy::source#2 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ memcpy::destination#2 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ gotoxy::y#6 gotoxy::y#5 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:21 , reg byte x , 
Potential registers zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ utoa::started#2 utoa::started#4 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ conio_cursor_x ] : zp[1]:30 , 
Potential registers zp[1]:31 [ conio_cursor_y ] : zp[1]:31 , 
Potential registers zp[2]:32 [ conio_line_text ] : zp[2]:32 , 
Potential registers zp[2]:34 [ conio_line_color ] : zp[2]:34 , 
Potential registers zp[1]:36 [ tod_init::tod_TENTHS#0 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ tod_init::tod_SEC#0 ] : zp[1]:37 , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ tod_init::tod_MIN#0 ] : zp[1]:38 , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ tod_init::tod_HOURS#0 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ tod_read::return_TENTHS#2 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ tod_read::return_SEC#2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ tod_read::return_MIN#2 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ tod_read::return_HOURS#2 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ tod_str::tod_TENTHS#0 ] : zp[1]:44 , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ tod_str::tod_SEC#0 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ tod_str::tod_MIN#0 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ tod_str::tod_HOURS#0 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ main::$6 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:49 [ printf_uint::uvalue#0 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ cputs::c#1 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:52 [ memset::end#0 ] : zp[2]:52 , 
Potential registers zp[2]:54 [ memcpy::src_end#0 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ gotoxy::$7 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ gotoxy::$8 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ gotoxy::$9 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ gotoxy::line_offset#0 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ gotoxy::$5 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ gotoxy::$6 ] : zp[2]:66 , 
Potential registers zp[1]:68 [ printf_number_buffer::buffer_sign#0 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ utoa::$11 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:70 [ utoa::buffer#3 ] : zp[2]:70 , 
Potential registers zp[1]:72 [ utoa::$10 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:73 [ utoa::digit_value#0 ] : zp[2]:73 , 
Potential registers zp[2]:75 [ utoa_append::buffer#0 ] : zp[2]:75 , 
Potential registers zp[2]:77 [ utoa_append::sub#0 ] : zp[2]:77 , 
Potential registers zp[2]:79 [ utoa_append::return#0 ] : zp[2]:79 , 
Potential registers zp[1]:81 [ tod_str::$0 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ tod_str::$1 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ tod_str::$2 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:84 [ tod_str::$3 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ tod_str::$4 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:86 [ tod_str::$5 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ tod_str::$6 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ tod_str::$7 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ tod_str::$8 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ tod_str::$9 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ tod_str::$10 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:92 [ tod_str::$11 ] : zp[1]:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:93 [ tod_str::$12 ] : zp[1]:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:94 [ tod_str::$13 ] : zp[1]:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ tod_str::$14 ] : zp[1]:95 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:96 [ tod_str::$15 ] : zp[1]:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ tod_read::return_HOURS#0 ] : zp[1]:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:98 [ tod_read::return_MIN#0 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ tod_read::return_SEC#0 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ tod_read::return_TENTHS#0 ] : zp[1]:100 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 
Potential registers mem[4] [ TOD_ZERO ] : mem[4] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,125,000,000,004.25: zp[2]:16 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 200,233,333,333,337.7: zp[2]:18 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,512,500,000,000.25: zp[2]:54 [ memcpy::src_end#0 ] 0: zp[2]:12 [ memcpy::source#2 ] 0: zp[2]:14 [ memcpy::destination#2 ] 
Uplift Scope [memset] 333,566,666,666,672.4: zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,683,333,333,333.67: zp[2]:52 [ memset::end#0 ] 14,285,714,285,714.43: zp[1]:9 [ memset::c#4 ] 0: zp[2]:7 [ memset::str#3 ] 
Uplift Scope [utoa_append] 25,005,500,003.5: zp[2]:27 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,005,000,002.5: zp[1]:29 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,333,500,000.5: zp[2]:77 [ utoa_append::sub#0 ] 2,000,002: zp[2]:79 [ utoa_append::return#0 ] 1,375,000.25: zp[2]:75 [ utoa_append::buffer#0 ] 
Uplift Scope [] 340,425,542.64: zp[1]:31 [ conio_cursor_y ] 263,095,250.1: zp[2]:34 [ conio_line_color ] 254,023,000.09: zp[2]:32 [ conio_line_text ] 18,987,354.54: zp[1]:30 [ conio_cursor_x ] 0: mem[12] [ printf_buffer ] 0: mem[4] [ TOD_ZERO ] 
Uplift Scope [cputc] 125,025,006: zp[1]:6 [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplift Scope [cputs] 20,150,003.5: zp[2]:4 [ cputs::s#5 cputs::s#6 cputs::s#0 ] 10,000,001: zp[1]:51 [ cputs::c#1 ] 
Uplift Scope [utoa] 3,787,146.79: zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 3,078,361.36: zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 2,285,716.57: zp[1]:21 [ utoa::digit#2 utoa::digit#1 ] 2,000,002: zp[1]:72 [ utoa::$10 ] 1,500,001.5: zp[1]:24 [ utoa::started#2 utoa::started#4 ] 600,000.6: zp[2]:73 [ utoa::digit_value#0 ] 20,002: zp[1]:69 [ utoa::$11 ] 20,002: zp[2]:70 [ utoa::buffer#3 ] 
Uplift Scope [gotoxy] 2,002: zp[2]:58 [ gotoxy::$8 ] 2,002: zp[2]:60 [ gotoxy::$9 ] 2,002: zp[2]:64 [ gotoxy::$5 ] 2,002: zp[2]:66 [ gotoxy::$6 ] 1,501.5: zp[2]:56 [ gotoxy::$7 ] 1,334.67: zp[1]:20 [ gotoxy::y#6 gotoxy::y#5 ] 1,001: zp[2]:62 [ gotoxy::line_offset#0 ] 
Uplift Scope [printf_number_buffer] 7,001: zp[1]:68 [ printf_number_buffer::buffer_sign#0 ] 
Uplift Scope [tod_str] 202: zp[1]:81 [ tod_str::$0 ] 202: zp[1]:82 [ tod_str::$1 ] 202: zp[1]:83 [ tod_str::$2 ] 202: zp[1]:84 [ tod_str::$3 ] 202: zp[1]:85 [ tod_str::$4 ] 202: zp[1]:86 [ tod_str::$5 ] 202: zp[1]:87 [ tod_str::$6 ] 202: zp[1]:88 [ tod_str::$7 ] 202: zp[1]:89 [ tod_str::$8 ] 202: zp[1]:90 [ tod_str::$9 ] 202: zp[1]:91 [ tod_str::$10 ] 202: zp[1]:92 [ tod_str::$11 ] 202: zp[1]:93 [ tod_str::$12 ] 202: zp[1]:94 [ tod_str::$13 ] 202: zp[1]:95 [ tod_str::$14 ] 202: zp[1]:96 [ tod_str::$15 ] 53.25: zp[1]:47 [ tod_str::tod_HOURS#0 ] 19.36: zp[1]:46 [ tod_str::tod_MIN#0 ] 11.83: zp[1]:45 [ tod_str::tod_SEC#0 ] 8.52: zp[1]:44 [ tod_str::tod_TENTHS#0 ] 
Uplift Scope [main] 244.08: zp[2]:2 [ main::i#2 main::i#1 ] 202: zp[1]:48 [ main::$6 ] 
Uplift Scope [printf_uint] 367.33: zp[2]:49 [ printf_uint::uvalue#0 ] 
Uplift Scope [tod_read] 37.33: zp[1]:100 [ tod_read::return_TENTHS#0 ] 22.4: zp[1]:99 [ tod_read::return_SEC#0 ] 16: zp[1]:98 [ tod_read::return_MIN#0 ] 12.44: zp[1]:97 [ tod_read::return_HOURS#0 ] 5.5: zp[1]:40 [ tod_read::return_TENTHS#2 ] 5.5: zp[1]:41 [ tod_read::return_SEC#2 ] 5.5: zp[1]:42 [ tod_read::return_MIN#2 ] 5.5: zp[1]:43 [ tod_read::return_HOURS#2 ] 
Uplift Scope [tod_init] 37.33: zp[1]:39 [ tod_init::tod_HOURS#0 ] 22.4: zp[1]:38 [ tod_init::tod_MIN#0 ] 16: zp[1]:37 [ tod_init::tod_SEC#0 ] 12.44: zp[1]:36 [ tod_init::tod_TENTHS#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_string] 
Uplift Scope [TIME_OF_DAY] 
Uplift Scope [__start] 

Uplifting [memcpy] best 199493 combination zp[2]:16 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:18 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:54 [ memcpy::src_end#0 ] zp[2]:12 [ memcpy::source#2 ] zp[2]:14 [ memcpy::destination#2 ] 
Uplifting [memset] best 198487 combination zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:52 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:7 [ memset::str#3 ] 
Uplifting [utoa_append] best 192484 combination zp[2]:27 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:77 [ utoa_append::sub#0 ] zp[2]:79 [ utoa_append::return#0 ] zp[2]:75 [ utoa_append::buffer#0 ] 
Uplifting [] best 192484 combination zp[1]:31 [ conio_cursor_y ] zp[2]:34 [ conio_line_color ] zp[2]:32 [ conio_line_text ] zp[1]:30 [ conio_cursor_x ] mem[12] [ printf_buffer ] mem[4] [ TOD_ZERO ] 
Uplifting [cputc] best 192175 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplifting [cputs] best 191275 combination zp[2]:4 [ cputs::s#5 cputs::s#6 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [utoa] best 189971 combination zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:21 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:73 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:70 [ utoa::buffer#3 ] 
Uplifting [gotoxy] best 189952 combination zp[2]:58 [ gotoxy::$8 ] zp[2]:60 [ gotoxy::$9 ] zp[2]:64 [ gotoxy::$5 ] zp[2]:66 [ gotoxy::$6 ] zp[2]:56 [ gotoxy::$7 ] reg byte x [ gotoxy::y#6 gotoxy::y#5 ] zp[2]:62 [ gotoxy::line_offset#0 ] 
Uplifting [printf_number_buffer] best 189943 combination reg byte a [ printf_number_buffer::buffer_sign#0 ] 
Uplifting [main] best 189883 combination zp[2]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$6 ] 
Uplifting [printf_uint] best 189883 combination zp[2]:49 [ printf_uint::uvalue#0 ] 
Uplifting [tod_read] best 189865 combination reg byte y [ tod_read::return_TENTHS#0 ] reg byte x [ tod_read::return_SEC#0 ] reg byte a [ tod_read::return_MIN#0 ] zp[1]:97 [ tod_read::return_HOURS#0 ] zp[1]:40 [ tod_read::return_TENTHS#2 ] zp[1]:41 [ tod_read::return_SEC#2 ] zp[1]:42 [ tod_read::return_MIN#2 ] zp[1]:43 [ tod_read::return_HOURS#2 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [tod_init] best 189853 combination reg byte y [ tod_init::tod_HOURS#0 ] reg byte x [ tod_init::tod_MIN#0 ] zp[1]:37 [ tod_init::tod_SEC#0 ] zp[1]:36 [ tod_init::tod_TENTHS#0 ] 
Uplifting [RADIX] best 189853 combination 
Uplifting [MOS6526_CIA] best 189853 combination 
Uplifting [MOS6569_VICII] best 189853 combination 
Uplifting [MOS6581_SID] best 189853 combination 
Uplifting [cputln] best 189853 combination 
Uplifting [cscroll] best 189853 combination 
Uplifting [printf_format_number] best 189853 combination 
Uplifting [printf_buffer_number] best 189853 combination 
Uplifting [printf_format_string] best 189853 combination 
Uplifting [printf_string] best 189853 combination 
Uplifting [TIME_OF_DAY] best 189853 combination 
Uplifting [__start] best 189853 combination 
Attempting to uplift remaining variables inzp[1]:31 [ conio_cursor_y ]
Uplifting [] best 189853 combination zp[1]:31 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:30 [ conio_cursor_x ]
Uplifting [] best 189853 combination zp[1]:30 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:21 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 189853 combination zp[1]:21 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:81 [ tod_str::$0 ]
Uplifting [tod_str] best 189849 combination reg byte a [ tod_str::$0 ] 
Attempting to uplift remaining variables inzp[1]:82 [ tod_str::$1 ]
Uplifting [tod_str] best 189843 combination reg byte a [ tod_str::$1 ] 
Attempting to uplift remaining variables inzp[1]:83 [ tod_str::$2 ]
Uplifting [tod_str] best 189839 combination reg byte a [ tod_str::$2 ] 
Attempting to uplift remaining variables inzp[1]:84 [ tod_str::$3 ]
Uplifting [tod_str] best 189833 combination reg byte a [ tod_str::$3 ] 
Attempting to uplift remaining variables inzp[1]:85 [ tod_str::$4 ]
Uplifting [tod_str] best 189829 combination reg byte a [ tod_str::$4 ] 
Attempting to uplift remaining variables inzp[1]:86 [ tod_str::$5 ]
Uplifting [tod_str] best 189823 combination reg byte a [ tod_str::$5 ] 
Attempting to uplift remaining variables inzp[1]:87 [ tod_str::$6 ]
Uplifting [tod_str] best 189819 combination reg byte a [ tod_str::$6 ] 
Attempting to uplift remaining variables inzp[1]:88 [ tod_str::$7 ]
Uplifting [tod_str] best 189813 combination reg byte a [ tod_str::$7 ] 
Attempting to uplift remaining variables inzp[1]:89 [ tod_str::$8 ]
Uplifting [tod_str] best 189809 combination reg byte a [ tod_str::$8 ] 
Attempting to uplift remaining variables inzp[1]:90 [ tod_str::$9 ]
Uplifting [tod_str] best 189803 combination reg byte a [ tod_str::$9 ] 
Attempting to uplift remaining variables inzp[1]:91 [ tod_str::$10 ]
Uplifting [tod_str] best 189799 combination reg byte a [ tod_str::$10 ] 
Attempting to uplift remaining variables inzp[1]:92 [ tod_str::$11 ]
Uplifting [tod_str] best 189793 combination reg byte a [ tod_str::$11 ] 
Attempting to uplift remaining variables inzp[1]:93 [ tod_str::$12 ]
Uplifting [tod_str] best 189789 combination reg byte a [ tod_str::$12 ] 
Attempting to uplift remaining variables inzp[1]:94 [ tod_str::$13 ]
Uplifting [tod_str] best 189783 combination reg byte a [ tod_str::$13 ] 
Attempting to uplift remaining variables inzp[1]:95 [ tod_str::$14 ]
Uplifting [tod_str] best 189779 combination reg byte a [ tod_str::$14 ] 
Attempting to uplift remaining variables inzp[1]:96 [ tod_str::$15 ]
Uplifting [tod_str] best 189773 combination reg byte a [ tod_str::$15 ] 
Attempting to uplift remaining variables inzp[1]:47 [ tod_str::tod_HOURS#0 ]
Uplifting [tod_str] best 189768 combination reg byte x [ tod_str::tod_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:46 [ tod_str::tod_MIN#0 ]
Uplifting [tod_str] best 189763 combination reg byte y [ tod_str::tod_MIN#0 ] 
Attempting to uplift remaining variables inzp[1]:37 [ tod_init::tod_SEC#0 ]
Uplifting [tod_init] best 189763 combination zp[1]:37 [ tod_init::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:36 [ tod_init::tod_TENTHS#0 ]
Uplifting [tod_init] best 189763 combination zp[1]:36 [ tod_init::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:97 [ tod_read::return_HOURS#0 ]
Uplifting [tod_read] best 189763 combination zp[1]:97 [ tod_read::return_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:45 [ tod_str::tod_SEC#0 ]
Uplifting [tod_str] best 189763 combination zp[1]:45 [ tod_str::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:44 [ tod_str::tod_TENTHS#0 ]
Uplifting [tod_str] best 189763 combination zp[1]:44 [ tod_str::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:40 [ tod_read::return_TENTHS#2 ]
Uplifting [tod_read] best 189757 combination reg byte y [ tod_read::return_TENTHS#2 ] 
Attempting to uplift remaining variables inzp[1]:41 [ tod_read::return_SEC#2 ]
Uplifting [tod_read] best 189751 combination reg byte x [ tod_read::return_SEC#2 ] 
Attempting to uplift remaining variables inzp[1]:42 [ tod_read::return_MIN#2 ]
Uplifting [tod_read] best 189751 combination zp[1]:42 [ tod_read::return_MIN#2 ] 
Attempting to uplift remaining variables inzp[1]:43 [ tod_read::return_HOURS#2 ]
Uplifting [tod_read] best 189747 combination reg byte a [ tod_read::return_HOURS#2 ] 
Coalescing zero page register [ zp[2]:2 [ main::i#2 main::i#1 ] ] with [ zp[2]:49 [ printf_uint::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ memset::str#3 ] ] with [ zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memcpy::source#2 ] ] with [ zp[2]:16 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ memcpy::destination#2 ] ] with [ zp[2]:18 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:27 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:79 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:70 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:75 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:32 [ conio_line_text ] ] with [ zp[2]:64 [ gotoxy::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ conio_line_color ] ] with [ zp[2]:66 [ gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:56 [ gotoxy::$7 ] ] with [ zp[2]:60 [ gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:73 [ utoa::digit_value#0 ] ] with [ zp[2]:77 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ conio_line_color gotoxy::$6 ] ] with [ zp[2]:62 [ gotoxy::line_offset#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 ] ] with [ zp[2]:56 [ gotoxy::$7 gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:7 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:22 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:4 [ cputs::s#5 cputs::s#6 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:25 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:14 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[1]:36 [ tod_init::tod_TENTHS#0 ] ] with [ zp[1]:21 [ utoa::digit#2 utoa::digit#1 ] ]
Coalescing zero page register [ zp[1]:42 [ tod_read::return_MIN#2 ] ] with [ zp[1]:37 [ tod_init::tod_SEC#0 ] ]
Coalescing zero page register [ zp[2]:54 [ memcpy::src_end#0 ] ] with [ zp[2]:52 [ memset::end#0 ] ]
Coalescing zero page register [ zp[2]:73 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:58 [ gotoxy::$8 ] ]
Coalescing zero page register [ zp[1]:97 [ tod_read::return_HOURS#0 ] ] with [ zp[1]:44 [ tod_str::tod_TENTHS#0 ] ]
Coalescing zero page register [ zp[1]:45 [ tod_str::tod_SEC#0 ] ] with [ zp[1]:36 [ tod_init::tod_TENTHS#0 utoa::digit#2 utoa::digit#1 ] ]
Coalescing zero page register [ zp[2]:73 [ utoa::digit_value#0 utoa_append::sub#0 gotoxy::$8 ] ] with [ zp[2]:12 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[2]:22) zp[2]:4 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#5 cputs::s#6 cputs::s#0 ]
Allocated (was zp[2]:25) zp[2]:6 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[1]:30) zp[1]:8 [ conio_cursor_x ]
Allocated (was zp[1]:31) zp[1]:9 [ conio_cursor_y ]
Allocated (was zp[2]:32) zp[2]:10 [ conio_line_text gotoxy::$5 ]
Allocated (was zp[2]:34) zp[2]:12 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
Allocated (was zp[1]:42) zp[1]:14 [ tod_read::return_MIN#2 tod_init::tod_SEC#0 ]
Allocated (was zp[1]:45) zp[1]:15 [ tod_str::tod_SEC#0 tod_init::tod_TENTHS#0 utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[2]:54) zp[2]:16 [ memcpy::src_end#0 memset::end#0 ]
Allocated (was zp[2]:73) zp[2]:18 [ utoa::digit_value#0 utoa_append::sub#0 gotoxy::$8 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[1]:97) zp[1]:20 [ tod_read::return_HOURS#0 tod_str::tod_TENTHS#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the speed of printf()
// Functions for performing input and output.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 8
  // The current cursor y-position
  .label conio_cursor_y = 9
  // The current text cursor line start
  .label conio_line_text = $a
  // The current color cursor line start
  .label conio_line_color = $c
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    .label i = 2
    // [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [13] phi (word) main::i#2 = (word) 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [14] if((word) main::i#2<(word) $2710) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$2710
    bcc __b2
    bne !+
    lda.z i
    cmp #<$2710
    bcc __b2
  !:
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [16] call gotoxy 
    // [100] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
  gotoxy_from___b3:
    // [100] phi (byte) gotoxy::y#5 = (byte) $16 [phi:main::@3->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$16
    jsr gotoxy
    // [17] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
  __b6_from___b3:
    jmp __b6
    // main::@6
  __b6:
    // [18] call tod_read 
    jsr tod_read
    // [19] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [20] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [21] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [22] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    jmp __b7
    // main::@7
  __b7:
    // [23] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [24] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [25] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [26] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [27] call tod_str 
    jsr tod_str
    // [28] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [29] call cputs 
    // [44] phi from main::@8 to cputs [phi:main::@8->cputs]
  cputs_from___b8:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) main::s [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [31] call printf_string 
    // [157] phi from main::@9 to printf_string [phi:main::@9->printf_string]
  printf_string_from___b9:
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [32] return 
    rts
    // main::@2
  __b2:
    // [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f -- vbuaa=vwuz1_band_vbuc1 
    lda #$7f
    and.z i
    // [34] if((byte~) main::$6!=(byte) 0) goto main::@4 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b4_from___b2
    // [35] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  __b5_from___b2:
    jmp __b5
    // main::@5
  __b5:
    // [36] call gotoxy 
    // [100] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
  gotoxy_from___b5:
    // [100] phi (byte) gotoxy::y#5 = (byte) $10 [phi:main::@5->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$10
    jsr gotoxy
    jmp __b11
    // main::@11
  __b11:
    // [37] (word) printf_uint::uvalue#0 ← (word) main::i#2
    // [38] call printf_uint 
    // [115] phi from main::@11 to printf_uint [phi:main::@11->printf_uint]
  printf_uint_from___b11:
    jsr printf_uint
    // [39] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [40] call gotoxy 
    // [100] phi from main::@12 to gotoxy [phi:main::@12->gotoxy]
  gotoxy_from___b12:
    // [100] phi (byte) gotoxy::y#5 = (byte) 0 [phi:main::@12->gotoxy#0] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    // [41] phi from main::@12 main::@2 to main::@4 [phi:main::@12/main::@2->main::@4]
  __b4_from___b12:
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [42] call cputs 
    // [44] phi from main::@4 to cputs [phi:main::@4->cputs]
  cputs_from___b4:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) main::s1 [phi:main::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b10
    // main::@10
  __b10:
    // [43] (word) main::i#1 ← ++ (word) main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [13] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  __b1_from___b10:
    // [13] phi (word) main::i#2 = (word) main::i#1 [phi:main::@10->main::@1#0] -- register_copy 
    jmp __b1
    s: .text "time: "
    .byte 0
    s1: .text "qwe "
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label s = 4
    // [45] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [45] phi (to_nomodify byte*) cputs::s#5 = (to_nomodify byte*) cputs::s#6 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [46] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [47] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#5 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [48] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [49] return 
    rts
    // cputs::@2
  __b2:
    // [50] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [51] call cputc 
    // [52] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [52] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [53] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [54] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [55] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [56] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [57] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [58] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [59] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [60] return 
    rts
    // [61] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [62] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    // [63] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [64] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [65] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [66] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [67] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [68] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [69] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [70] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [71] call memcpy 
    // [90] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [90] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [90] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [72] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [73] call memcpy 
    // [90] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [90] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [90] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [74] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [75] call memset 
    // [82] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [82] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [82] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [76] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [77] call memset 
    // [82] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [82] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [82] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [78] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [79] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($12) str, byte register(X) c)
memset: {
    .label end = $10
    .label dst = $12
    .label str = $12
    jmp __b1
    // memset::@1
  __b1:
    // [83] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [84] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [85] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [85] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [86] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [87] return 
    rts
    // memset::@3
  __b3:
    // [88] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [89] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(6) destination, void* zp($12) source)
memcpy: {
    .label src_end = $10
    .label dst = 6
    .label src = $12
    .label source = $12
    .label destination = 6
    // [91] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [92] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [93] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [94] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [94] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [94] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [95] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [96] return 
    rts
    // memcpy::@2
  __b2:
    // [97] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [98] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [99] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .label __5 = $a
    .label __6 = $c
    .label __7 = $c
    .label line_offset = $c
    .label __8 = $12
    .label __9 = $c
    // [101] if((byte) gotoxy::y#5<(byte) $19+(byte) 1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b3_from_gotoxy
    // [103] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [103] phi (byte) gotoxy::y#6 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [102] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [103] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [103] phi (byte) gotoxy::y#6 = (byte) gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [104] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [105] (byte) conio_cursor_y ← (byte) gotoxy::y#6 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // [106] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // [107] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [108] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [109] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [110] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [111] (byte*) conio_line_text ← (byte*~) gotoxy::$5
    // [112] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // [113] (byte*) conio_line_color ← (byte*~) gotoxy::$6
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [114] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp(2) uvalue)
printf_uint: {
    .label uvalue = 2
    jmp __b1
    // printf_uint::@1
  __b1:
    // [116] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [117] (word) utoa::value#1 ← (word) printf_uint::uvalue#0 -- vwuz1=vwuz2 
    lda.z uvalue
    sta.z utoa.value
    lda.z uvalue+1
    sta.z utoa.value+1
    // [118] call utoa 
  // Format number into buffer
    // [129] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [119] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [120] call printf_number_buffer 
  // Print using format
    // [122] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [121] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [123] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [124] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
    // [125] call cputc 
    // [52] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
  cputc_from___b3:
    // [52] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [126] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [127] call cputs 
    // [44] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
  cputs_from___b2:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [128] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(4) value, byte* zp(6) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $12
    .label buffer = 6
    .label digit = $f
    .label value = 4
    // [130] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [130] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [130] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [130] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [130] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [131] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [132] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [133] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [134] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [135] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [136] return 
    rts
    // utoa::@2
  __b2:
    // [137] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [138] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [139] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [140] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [141] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [141] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [141] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [141] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [142] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [130] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [130] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [130] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [130] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [130] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [143] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [144] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [145] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [146] call utoa_append 
    // [150] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [147] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [148] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [149] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [141] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [141] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [141] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [141] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(6) buffer, word zp(4) value, word zp($12) sub)
utoa_append: {
    .label buffer = 6
    .label value = 4
    .label sub = $12
    .label return = 4
    // [151] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [151] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [151] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [152] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [153] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [154] return 
    rts
    // utoa_append::@2
  __b2:
    // [155] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [156] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [151] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [151] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [151] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [158] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [159] call cputs 
    // [44] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [160] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($14) tod_TENTHS, byte zp($f) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $14
    .label tod_SEC = $f
    // [161] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [162] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [163] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // [164] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [165] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [166] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // [167] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // [168] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [169] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // [170] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [171] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [172] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // [173] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // [174] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [175] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // [176] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // [177] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [178] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // [179] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // [180] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [181] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // [182] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // [183] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [184] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [185] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $14
    .label return_MIN = $e
    // [186] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [187] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [188] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [189] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [190] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($f) tod_TENTHS, byte zp($e) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $f
    .label tod_SEC = $e
    // [191] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [192] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [193] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [194] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [195] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [196] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [197] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b4
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction ldy.z conio_cursor_x
Removing instruction ldy #0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b2 with __b4
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b3_from_gotoxy with __b2
Replacing label __b1 with __b2
Replacing label __b2_from___b1 with __b2
Removing instruction __b1_from___init1:
Removing instruction __b3_from___b1:
Removing instruction gotoxy_from___b3:
Removing instruction __b6_from___b3:
Removing instruction __b8_from___b7:
Removing instruction cputs_from___b8:
Removing instruction __b9_from___b8:
Removing instruction printf_string_from___b9:
Removing instruction __b5_from___b2:
Removing instruction gotoxy_from___b5:
Removing instruction printf_uint_from___b11:
Removing instruction __b12_from___b11:
Removing instruction gotoxy_from___b12:
Removing instruction __b4_from___b12:
Removing instruction __b4_from___b2:
Removing instruction cputs_from___b4:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction cputc_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction cputs_from___b2:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b1_from_printf_string:
Removing instruction cputs_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_gotoxy:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte*) COLORRAM = (byte*) 55296
(const nomodify byte*) DEFAULT_SCREEN = (byte*) 1024
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore mem[4] = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(byte) conio_cursor_x loadstore zp[1]:8 1.8987354544303797E7
(byte) conio_cursor_y loadstore zp[1]:9 3.4042554263829786E8
(byte*) conio_line_color loadstore zp[2]:12 2.6309525009523806E8
(byte*) conio_line_text loadstore zp[2]:10 2.5402300009195402E8
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 2.0000002E7
(byte) cputc::c#2 reg byte a 20002.0
(byte) cputc::c#3 reg byte a 1.05005002E8
(void()) cputln()
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:4 5000000.5
(to_nomodify byte*) cputs::s#5 s zp[2]:4 1.5050002E7
(to_nomodify byte*) cputs::s#6 s zp[2]:4 100001.0
(void()) cscroll()
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(byte*~) gotoxy::$5 zp[2]:10 2002.0
(byte*~) gotoxy::$6 zp[2]:12 2002.0
(word~) gotoxy::$7 zp[2]:12 1501.5
(word~) gotoxy::$8 zp[2]:18 2002.0
(word~) gotoxy::$9 zp[2]:12 2002.0
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0 line_offset zp[2]:12 1001.0
(byte) gotoxy::x
(byte) gotoxy::y
(byte) gotoxy::y#5 reg byte x 667.3333333333334
(byte) gotoxy::y#6 reg byte x 667.3333333333334
(void()) main()
(byte~) main::$6 reg byte a 202.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(word) main::i
(word) main::i#1 i zp[2]:2 202.0
(word) main::i#2 i zp[2]:2 42.08333333333333
(const byte*) main::s[(byte) 7]  = (byte*) "time: "
(const byte*) main::s1[(byte) 5]  = (byte*) "qwe "
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:6
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:6 1.00000000000001E14
(byte*) memcpy::dst#2 dst zp[2]:6 1.0003333333333467E14
(byte*) memcpy::dst#4 dst zp[2]:6 2.00000000002E11
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:18
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:18 2.00000000000002E14
(byte*) memcpy::src#2 src zp[2]:18 1.0002500000000125E14
(byte*) memcpy::src#4 src zp[2]:18 1.00000000001E11
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:16 1.251250000000025E13
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.4285714285714428E13
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:18 2.00000000000002E14
(byte*) memset::dst#2 dst zp[2]:18 1.3336666666666834E14
(byte*) memset::dst#4 dst zp[2]:18 2.00000000002E11
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:16 1.6683333333333668E13
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:18
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(label) printf_number_buffer::@1
(label) printf_number_buffer::@2
(label) printf_number_buffer::@3
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(const byte*) printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 reg byte a 7001.0
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_zero_padding
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::padding
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(label) printf_string::@1
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::padding
(byte*) printf_string::str
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0 uvalue zp[2]:2 367.33333333333337
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 reg byte y 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 reg byte x 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 tod_SEC zp[1]:14 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 tod_TENTHS zp[1]:15 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 return_HOURS zp[1]:20 12.444444444444443
(byte) tod_read::return_HOURS#2 reg byte a 5.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 reg byte a 16.0
(byte) tod_read::return_MIN#2 return_MIN zp[1]:14 5.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 reg byte x 22.4
(byte) tod_read::return_SEC#2 reg byte x 5.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 reg byte y 37.33333333333333
(byte) tod_read::return_TENTHS#2 reg byte y 5.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 reg byte a 202.0
(byte~) tod_str::$1 reg byte a 202.0
(byte~) tod_str::$10 reg byte a 202.0
(byte~) tod_str::$11 reg byte a 202.0
(byte~) tod_str::$12 reg byte a 202.0
(byte~) tod_str::$13 reg byte a 202.0
(byte~) tod_str::$14 reg byte a 202.0
(byte~) tod_str::$15 reg byte a 202.0
(byte~) tod_str::$2 reg byte a 202.0
(byte~) tod_str::$3 reg byte a 202.0
(byte~) tod_str::$4 reg byte a 202.0
(byte~) tod_str::$5 reg byte a 202.0
(byte~) tod_str::$6 reg byte a 202.0
(byte~) tod_str::$7 reg byte a 202.0
(byte~) tod_str::$8 reg byte a 202.0
(byte~) tod_str::$9 reg byte a 202.0
(label) tod_str::@return
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 reg byte x 53.25
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 reg byte y 19.363636363636363
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 tod_SEC zp[1]:15 11.833333333333332
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 tod_TENTHS zp[1]:20 8.52
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 2000002.0
(byte~) utoa::$11 reg byte a 20002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:6 287143.2857142857
(byte*) utoa::buffer#14 buffer zp[2]:6 1500001.5
(byte*) utoa::buffer#3 buffer zp[2]:6 20002.0
(byte*) utoa::buffer#4 buffer zp[2]:6 2000002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:15 2000002.0
(byte) utoa::digit#2 digit zp[1]:15 285714.5714285714
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:18 600000.6000000001
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 500000.5
(byte) utoa::started#4 reg byte x 1000001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:4 1000001.0
(word) utoa::value#1 value zp[2]:4 5501.0
(word) utoa::value#2 value zp[2]:4 572857.857142857
(word) utoa::value#6 value zp[2]:4 1500001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:6 1375000.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.0000000001E10
(byte) utoa_append::digit#2 reg byte x 1.00050000015E10
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:4 2000002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:18 3.3335000005E9
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:4 3666667.333333333
(word) utoa_append::value#1 value zp[2]:4 2.0000000002E10
(word) utoa_append::value#2 value zp[2]:4 5.001833334166666E9

zp[2]:2 [ main::i#2 main::i#1 printf_uint::uvalue#0 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
reg byte x [ memset::c#4 ]
reg byte x [ gotoxy::y#6 gotoxy::y#5 ]
zp[2]:4 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#5 cputs::s#6 cputs::s#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:6 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:8 [ conio_cursor_x ]
zp[1]:9 [ conio_cursor_y ]
zp[2]:10 [ conio_line_text gotoxy::$5 ]
zp[2]:12 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
reg byte x [ tod_init::tod_MIN#0 ]
reg byte y [ tod_init::tod_HOURS#0 ]
reg byte y [ tod_read::return_TENTHS#2 ]
reg byte x [ tod_read::return_SEC#2 ]
zp[1]:14 [ tod_read::return_MIN#2 tod_init::tod_SEC#0 ]
reg byte a [ tod_read::return_HOURS#2 ]
zp[1]:15 [ tod_str::tod_SEC#0 tod_init::tod_TENTHS#0 utoa::digit#2 utoa::digit#1 ]
reg byte y [ tod_str::tod_MIN#0 ]
reg byte x [ tod_str::tod_HOURS#0 ]
reg byte a [ main::$6 ]
reg byte a [ cputs::c#1 ]
zp[2]:16 [ memcpy::src_end#0 memset::end#0 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:18 [ utoa::digit_value#0 utoa_append::sub#0 gotoxy::$8 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte a [ tod_str::$0 ]
reg byte a [ tod_str::$1 ]
reg byte a [ tod_str::$2 ]
reg byte a [ tod_str::$3 ]
reg byte a [ tod_str::$4 ]
reg byte a [ tod_str::$5 ]
reg byte a [ tod_str::$6 ]
reg byte a [ tod_str::$7 ]
reg byte a [ tod_str::$8 ]
reg byte a [ tod_str::$9 ]
reg byte a [ tod_str::$10 ]
reg byte a [ tod_str::$11 ]
reg byte a [ tod_str::$12 ]
reg byte a [ tod_str::$13 ]
reg byte a [ tod_str::$14 ]
reg byte a [ tod_str::$15 ]
zp[1]:20 [ tod_read::return_HOURS#0 tod_str::tod_TENTHS#0 ]
reg byte a [ tod_read::return_MIN#0 ]
reg byte x [ tod_read::return_SEC#0 ]
reg byte y [ tod_read::return_TENTHS#0 ]
mem[12] [ printf_buffer ]
mem[4] [ TOD_ZERO ]


FINAL ASSEMBLER
Score: 160752

  // File Comments
// Tests the speed of printf()
// Functions for performing input and output.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 8
  // The current cursor y-position
  .label conio_cursor_y = 9
  // The current text cursor line start
  .label conio_line_text = $a
  // The current color cursor line start
  .label conio_line_color = $c
  // __start
__start: {
    // __start::__init1
    // conio_cursor_x = 0
    // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [6] call main 
    jsr main
    // __start::@return
    // [7] return 
    rts
}
  // main
main: {
    .label i = 2
    // tod_init(TOD_ZERO)
    // [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main to main::@1 [phi:main->main::@1]
    // [13] phi (word) main::i#2 = (word) 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // main::@1
  __b1:
    // for(unsigned int i=0;i<10000;i++)
    // [14] if((word) main::i#2<(word) $2710) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>$2710
    bcc __b2
    bne !+
    lda.z i
    cmp #<$2710
    bcc __b2
  !:
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // gotoxy(0, 22)
    // [16] call gotoxy 
    // [100] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
    // [100] phi (byte) gotoxy::y#5 = (byte) $16 [phi:main::@3->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$16
    jsr gotoxy
    // [17] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
    // main::@6
    // tod_read()
    // [18] call tod_read 
    jsr tod_read
    // [19] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [20] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [21] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [22] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    // main::@7
    // tod_str(tod_read())
    // [23] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [24] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [25] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [26] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [27] call tod_str 
    jsr tod_str
    // [28] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // printf("time: %s",tod_str(tod_read()))
    // [29] call cputs 
    // [44] phi from main::@8 to cputs [phi:main::@8->cputs]
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) main::s [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [30] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // printf("time: %s",tod_str(tod_read()))
    // [31] call printf_string 
    // [157] phi from main::@9 to printf_string [phi:main::@9->printf_string]
    jsr printf_string
    // main::@return
    // }
    // [32] return 
    rts
    // main::@2
  __b2:
    // i&0x7f
    // [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f -- vbuaa=vwuz1_band_vbuc1 
    lda #$7f
    and.z i
    // if((i&0x7f) == 0)
    // [34] if((byte~) main::$6!=(byte) 0) goto main::@4 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b4
    // [35] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
    // main::@5
    // gotoxy(0,16)
    // [36] call gotoxy 
    // [100] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
    // [100] phi (byte) gotoxy::y#5 = (byte) $10 [phi:main::@5->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$10
    jsr gotoxy
    // main::@11
    // printf("%u",i)
    // [37] (word) printf_uint::uvalue#0 ← (word) main::i#2
    // [38] call printf_uint 
    // [115] phi from main::@11 to printf_uint [phi:main::@11->printf_uint]
    jsr printf_uint
    // [39] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // gotoxy(0,0)
    // [40] call gotoxy 
    // [100] phi from main::@12 to gotoxy [phi:main::@12->gotoxy]
    // [100] phi (byte) gotoxy::y#5 = (byte) 0 [phi:main::@12->gotoxy#0] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    // [41] phi from main::@12 main::@2 to main::@4 [phi:main::@12/main::@2->main::@4]
    // main::@4
  __b4:
    // printf("qwe ")
    // [42] call cputs 
    // [44] phi from main::@4 to cputs [phi:main::@4->cputs]
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) main::s1 [phi:main::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // main::@10
    // for(unsigned int i=0;i<10000;i++)
    // [43] (word) main::i#1 ← ++ (word) main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [13] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
    // [13] phi (word) main::i#2 = (word) main::i#1 [phi:main::@10->main::@1#0] -- register_copy 
    jmp __b1
    s: .text "time: "
    .byte 0
    s1: .text "qwe "
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label s = 4
    // [45] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [45] phi (to_nomodify byte*) cputs::s#5 = (to_nomodify byte*) cputs::s#6 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // c=*s++
    // [46] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [47] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#5 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [48] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [49] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [50] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [51] call cputc 
    // [52] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [52] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [53] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [54] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [55] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [56] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [57] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [58] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [59] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [60] return 
    rts
    // [61] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [62] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [63] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [64] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [65] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [66] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [67] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [68] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [69] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [70] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [71] call memcpy 
    // [90] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [90] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [90] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [72] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [73] call memcpy 
    // [90] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [90] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [90] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) COLORRAM+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [74] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [75] call memset 
    // [82] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [82] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [82] phi (void*) memset::str#3 = (void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [76] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [77] call memset 
    // [82] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [82] phi (byte) memset::c#4 = (const nomodify byte) LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [82] phi (void*) memset::str#3 = (void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [78] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [79] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [80] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($12) str, byte register(X) c)
memset: {
    .label end = $10
    .label dst = $12
    .label str = $12
    // memset::@1
    // end = (char*)str + num
    // [83] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [84] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [85] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [85] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [86] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [87] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [88] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [89] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(6) destination, void* zp($12) source)
memcpy: {
    .label src_end = $10
    .label dst = 6
    .label src = $12
    .label source = $12
    .label destination = 6
    // src_end = (char*)source+num
    // [91] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [92] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [93] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [94] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [94] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [94] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [95] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [96] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [97] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [98] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [99] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .label __5 = $a
    .label __6 = $c
    .label __7 = $c
    .label line_offset = $c
    .label __8 = $12
    .label __9 = $c
    // if(y>CONIO_HEIGHT)
    // [101] if((byte) gotoxy::y#5<(byte) $19+(byte) 1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b2
    // [103] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [103] phi (byte) gotoxy::y#6 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [102] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [103] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [103] phi (byte) gotoxy::y#6 = (byte) gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [104] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [105] (byte) conio_cursor_y ← (byte) gotoxy::y#6 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [106] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // line_offset = (unsigned int)y*CONIO_WIDTH
    // [107] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [108] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [109] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // CONIO_SCREEN_TEXT + line_offset
    // [110] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [111] (byte*) conio_line_text ← (byte*~) gotoxy::$5
    // CONIO_SCREEN_COLORS + line_offset
    // [112] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [113] (byte*) conio_line_color ← (byte*~) gotoxy::$6
    // gotoxy::@return
    // }
    // [114] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp(2) uvalue)
printf_uint: {
    .label uvalue = 2
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [116] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [117] (word) utoa::value#1 ← (word) printf_uint::uvalue#0 -- vwuz1=vwuz2 
    lda.z uvalue
    sta.z utoa.value
    lda.z uvalue+1
    sta.z utoa.value+1
    // [118] call utoa 
  // Format number into buffer
    // [129] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [119] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [120] call printf_number_buffer 
  // Print using format
    // [122] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [121] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // printf_number_buffer::@1
    // if(buffer.sign)
    // [123] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // printf_number_buffer::@3
    // cputc(buffer.sign)
    // [124] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
    // [125] call cputc 
    // [52] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
    // [52] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [126] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
    // printf_number_buffer::@2
  __b2:
    // cputs(buffer.digits)
    // [127] call cputs 
    // [44] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@return
    // }
    // [128] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(4) value, byte* zp(6) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $12
    .label buffer = 6
    .label digit = $f
    .label value = 4
    // [130] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [130] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [130] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [130] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [130] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [131] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [132] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [133] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [134] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [135] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [136] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [137] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [138] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [139] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [140] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [141] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [141] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [141] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [141] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [142] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [130] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [130] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [130] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [130] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [130] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [143] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [144] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [145] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [146] call utoa_append 
    // [150] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [147] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [148] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [149] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [141] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [141] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [141] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [141] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(6) buffer, word zp(4) value, word zp($12) sub)
utoa_append: {
    .label buffer = 6
    .label value = 4
    .label sub = $12
    .label return = 4
    // [151] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [151] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [151] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [152] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [153] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [154] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [155] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [156] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [151] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [151] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [151] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [158] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
    // printf_string::@1
    // cputs(str)
    // [159] call cputs 
    // [44] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
    // [44] phi (to_nomodify byte*) cputs::s#6 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    // printf_string::@return
    // }
    // [160] return 
    rts
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($14) tod_TENTHS, byte zp($f) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $14
    .label tod_SEC = $f
    // tod.HOURS>>4
    // [161] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.HOURS>>4)
    // [162] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[0] = '0'+(tod.HOURS>>4)
    // [163] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // tod.HOURS&0x0f
    // [164] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // '0'+(tod.HOURS&0x0f)
    // [165] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[1] = '0'+(tod.HOURS&0x0f)
    // [166] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // tod.MIN>>4
    // [167] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.MIN>>4)
    // [168] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[3] = '0'+(tod.MIN>>4)
    // [169] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // tod.MIN&0x0f
    // [170] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // '0'+(tod.MIN&0x0f)
    // [171] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[4] = '0'+(tod.MIN&0x0f)
    // [172] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // tod.SEC>>4
    // [173] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.SEC>>4)
    // [174] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[6] = '0'+(tod.SEC>>4)
    // [175] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // tod.SEC&0x0f
    // [176] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // '0'+(tod.SEC&0x0f)
    // [177] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[7] = '0'+(tod.SEC&0x0f)
    // [178] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // tod.TENTHS>>4
    // [179] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.TENTHS>>4)
    // [180] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[9] = '0'+(tod.TENTHS>>4)
    // [181] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // tod.TENTHS&0x0f
    // [182] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // '0'+(tod.TENTHS&0x0f)
    // [183] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[10] = '0'+(tod.TENTHS&0x0f)
    // [184] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    // tod_str::@return
    // }
    // [185] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $14
    .label return_MIN = $e
    // hours = CIA1->TOD_HOURS
    // [186] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // mins = CIA1->TOD_MIN
    // [187] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // secs = CIA1->TOD_SEC
    // [188] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // tenths = CIA1->TOD_10THS
    // [189] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_read::@return
    // }
    // [190] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($f) tod_TENTHS, byte zp($e) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $f
    .label tod_SEC = $e
    // CIA1->TIMER_A_CONTROL |= 0x80
    // [191] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA1->TIMER_B_CONTROL &= 0x7f
    // [192] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA1->TOD_HOURS = tod.HOURS
    // [193] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // CIA1->TOD_MIN = tod.MIN
    // [194] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // CIA1->TOD_SEC = tod.SEC
    // [195] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // CIA1->TOD_10THS = tod.TENTHS
    // [196] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_init::@return
    // }
    // [197] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

