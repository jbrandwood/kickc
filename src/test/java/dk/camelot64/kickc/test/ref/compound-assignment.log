PARSING src/test/java/dk/camelot64/kickc/test/kc/compound-assignment.kc
// Test compound assignment operators
byte[] ref = { 3, 4, 3, 18, 9, 1, 4, 2, 4, 5, 1 , 0};
byte* screen1 = $400;
byte* screen2 = screen1+40;
byte* cols = $d800;
byte GREEN = 5;
byte RED = 2;

void main() {

    byte i =0;
    byte a = 3; //3
    test(i++, a);
    a += 1; //4
    test(i++, a);
    a -= 1; //3
    test(i++, a);
    a *= 6; //18
    test(i++, a);
    a /= 2; //9
    test(i++, a);
    a %= 2; //1
    test(i++, a);
    a <<= 2; //4
    test(i++, a);
    a >>= 1; //2
    test(i++, a);
    a ^= %110; //4
    test(i++, a);
    a |= %1; //5
    test(i++, a);
    a &= %1; //1
    test(i++, a);

}

void test(byte i, byte a) {
    screen1[i] = a;
    screen2[i] = ref[i];
    if(ref[i]==a) {
        cols[i] = GREEN;
    } else {
        cols[i] = RED;
    }
}
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
SYMBOLS
(byte*~) $0
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) GREEN
(byte) RED
(byte*) cols
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$10
(void~) main::$2
(void~) main::$3
(void~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(void~) main::$9
(label) main::@return
(byte) main::a
(byte) main::i
(byte[]) ref
(byte*) screen1
(byte*) screen2
(void()) test((byte) test::i , (byte) test::a)
(bool~) test::$0
(label) test::@1
(label) test::@2
(label) test::@3
(label) test::@4
(label) test::@return
(byte) test::a
(byte) test::i

Promoting word/signed word/dword/signed dword to byte* in screen1 ← ((byte*)) 1024
Promoting word/dword/signed dword to byte* in cols ← ((byte*)) 55296
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) ref ← { (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 18, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte*) screen1 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*~) $0 ← (byte*) screen1 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) screen2 ← (byte*~) $0
  (byte*) cols ← ((byte*)) (word/dword/signed dword) 55296
  (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::a ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (void~) main::$0 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a + (byte/signed byte/word/signed word/dword/signed dword) 1
  (void~) main::$1 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a - (byte/signed byte/word/signed word/dword/signed dword) 1
  (void~) main::$2 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a * (byte/signed byte/word/signed word/dword/signed dword) 6
  (void~) main::$3 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a / (byte/signed byte/word/signed word/dword/signed dword) 2
  (void~) main::$4 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a % (byte/signed byte/word/signed word/dword/signed dword) 2
  (void~) main::$5 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a << (byte/signed byte/word/signed word/dword/signed dword) 2
  (void~) main::$6 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (void~) main::$7 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a ^ (byte/signed byte/word/signed word/dword/signed dword) 6
  (void~) main::$8 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a | (byte/signed byte/word/signed word/dword/signed dword) 1
  (void~) main::$9 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  (byte) main::a ← (byte) main::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (void~) main::$10 ← call test (byte) main::i (byte) main::a 
  (byte) main::i ← ++ (byte) main::i
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
test: scope:[test]  from
  *((byte*) screen1 + (byte) test::i) ← (byte) test::a
  *((byte*) screen2 + (byte) test::i) ← *((byte[]) ref + (byte) test::i)
  (bool~) test::$0 ← *((byte[]) ref + (byte) test::i) == (byte) test::a
  if((bool~) test::$0) goto test::@1
  to:test::@3
test::@1: scope:[test]  from test test::@4
  *((byte*) cols + (byte) test::i) ← (byte) GREEN
  to:test::@2
test::@3: scope:[test]  from test
  *((byte*) cols + (byte) test::i) ← (byte) RED
  to:test::@2
test::@2: scope:[test]  from test::@1 test::@3
  to:test::@return
test::@4: scope:[test]  from
  to:test::@1
test::@return: scope:[test]  from test::@2
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable - keeping the call (void~) main::$3
Eliminating unused variable - keeping the call (void~) main::$4
Eliminating unused variable - keeping the call (void~) main::$5
Eliminating unused variable - keeping the call (void~) main::$6
Eliminating unused variable - keeping the call (void~) main::$7
Eliminating unused variable - keeping the call (void~) main::$8
Eliminating unused variable - keeping the call (void~) main::$9
Eliminating unused variable - keeping the call (void~) main::$10
Removing empty block @1
Removing empty block test::@2
Removing empty block test::@4
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte[]) ref#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 18, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte*) screen1#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*~) $0 ← (byte*) screen1#0 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) screen2#0 ← (byte*~) $0
  (byte*) cols#0 ← ((byte*)) (word/dword/signed dword) 55296
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  to:@2
main: scope:[main]  from @2
  (byte) RED#3 ← phi( @2/(byte) RED#14 )
  (byte*) cols#4 ← phi( @2/(byte*) cols#15 )
  (byte) GREEN#3 ← phi( @2/(byte) GREEN#14 )
  (byte*) screen2#2 ← phi( @2/(byte*) screen2#13 )
  (byte*) screen1#2 ← phi( @2/(byte*) screen1#13 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::a#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) test::i#0 ← (byte) main::i#0
  (byte) test::a#0 ← (byte) main::a#0
  call test 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) RED#4 ← phi( main/(byte) RED#3 )
  (byte*) cols#5 ← phi( main/(byte*) cols#4 )
  (byte) GREEN#4 ← phi( main/(byte) GREEN#3 )
  (byte*) screen2#3 ← phi( main/(byte*) screen2#2 )
  (byte*) screen1#3 ← phi( main/(byte*) screen1#2 )
  (byte) main::a#11 ← phi( main/(byte) main::a#0 )
  (byte) main::i#12 ← phi( main/(byte) main::i#0 )
  (byte) main::i#1 ← ++ (byte) main::i#12
  (byte) main::a#1 ← (byte) main::a#11 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) test::i#1 ← (byte) main::i#1
  (byte) test::a#1 ← (byte) main::a#1
  call test 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) RED#6 ← phi( main::@1/(byte) RED#4 )
  (byte*) cols#7 ← phi( main::@1/(byte*) cols#5 )
  (byte) GREEN#6 ← phi( main::@1/(byte) GREEN#4 )
  (byte*) screen2#5 ← phi( main::@1/(byte*) screen2#3 )
  (byte*) screen1#5 ← phi( main::@1/(byte*) screen1#3 )
  (byte) main::a#12 ← phi( main::@1/(byte) main::a#1 )
  (byte) main::i#13 ← phi( main::@1/(byte) main::i#1 )
  (byte) main::i#2 ← ++ (byte) main::i#13
  (byte) main::a#2 ← (byte) main::a#12 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) test::i#2 ← (byte) main::i#2
  (byte) test::a#2 ← (byte) main::a#2
  call test 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) RED#7 ← phi( main::@2/(byte) RED#6 )
  (byte*) cols#8 ← phi( main::@2/(byte*) cols#7 )
  (byte) GREEN#7 ← phi( main::@2/(byte) GREEN#6 )
  (byte*) screen2#6 ← phi( main::@2/(byte*) screen2#5 )
  (byte*) screen1#6 ← phi( main::@2/(byte*) screen1#5 )
  (byte) main::a#13 ← phi( main::@2/(byte) main::a#2 )
  (byte) main::i#14 ← phi( main::@2/(byte) main::i#2 )
  (byte) main::i#3 ← ++ (byte) main::i#14
  (byte) main::a#3 ← (byte) main::a#13 * (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) test::i#3 ← (byte) main::i#3
  (byte) test::a#3 ← (byte) main::a#3
  call test 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) RED#8 ← phi( main::@3/(byte) RED#7 )
  (byte*) cols#9 ← phi( main::@3/(byte*) cols#8 )
  (byte) GREEN#8 ← phi( main::@3/(byte) GREEN#7 )
  (byte*) screen2#7 ← phi( main::@3/(byte*) screen2#6 )
  (byte*) screen1#7 ← phi( main::@3/(byte*) screen1#6 )
  (byte) main::a#14 ← phi( main::@3/(byte) main::a#3 )
  (byte) main::i#15 ← phi( main::@3/(byte) main::i#3 )
  (byte) main::i#4 ← ++ (byte) main::i#15
  (byte) main::a#4 ← (byte) main::a#14 / (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test::i#4 ← (byte) main::i#4
  (byte) test::a#4 ← (byte) main::a#4
  call test 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) RED#9 ← phi( main::@4/(byte) RED#8 )
  (byte*) cols#10 ← phi( main::@4/(byte*) cols#9 )
  (byte) GREEN#9 ← phi( main::@4/(byte) GREEN#8 )
  (byte*) screen2#8 ← phi( main::@4/(byte*) screen2#7 )
  (byte*) screen1#8 ← phi( main::@4/(byte*) screen1#7 )
  (byte) main::a#15 ← phi( main::@4/(byte) main::a#4 )
  (byte) main::i#16 ← phi( main::@4/(byte) main::i#4 )
  (byte) main::i#5 ← ++ (byte) main::i#16
  (byte) main::a#5 ← (byte) main::a#15 % (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test::i#5 ← (byte) main::i#5
  (byte) test::a#5 ← (byte) main::a#5
  call test 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) RED#10 ← phi( main::@5/(byte) RED#9 )
  (byte*) cols#11 ← phi( main::@5/(byte*) cols#10 )
  (byte) GREEN#10 ← phi( main::@5/(byte) GREEN#9 )
  (byte*) screen2#9 ← phi( main::@5/(byte*) screen2#8 )
  (byte*) screen1#9 ← phi( main::@5/(byte*) screen1#8 )
  (byte) main::a#16 ← phi( main::@5/(byte) main::a#5 )
  (byte) main::i#17 ← phi( main::@5/(byte) main::i#5 )
  (byte) main::i#6 ← ++ (byte) main::i#17
  (byte) main::a#6 ← (byte) main::a#16 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test::i#6 ← (byte) main::i#6
  (byte) test::a#6 ← (byte) main::a#6
  call test 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) RED#11 ← phi( main::@6/(byte) RED#10 )
  (byte*) cols#12 ← phi( main::@6/(byte*) cols#11 )
  (byte) GREEN#11 ← phi( main::@6/(byte) GREEN#10 )
  (byte*) screen2#10 ← phi( main::@6/(byte*) screen2#9 )
  (byte*) screen1#10 ← phi( main::@6/(byte*) screen1#9 )
  (byte) main::a#17 ← phi( main::@6/(byte) main::a#6 )
  (byte) main::i#18 ← phi( main::@6/(byte) main::i#6 )
  (byte) main::i#7 ← ++ (byte) main::i#18
  (byte) main::a#7 ← (byte) main::a#17 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) test::i#7 ← (byte) main::i#7
  (byte) test::a#7 ← (byte) main::a#7
  call test 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) RED#12 ← phi( main::@7/(byte) RED#11 )
  (byte*) cols#13 ← phi( main::@7/(byte*) cols#12 )
  (byte) GREEN#12 ← phi( main::@7/(byte) GREEN#11 )
  (byte*) screen2#11 ← phi( main::@7/(byte*) screen2#10 )
  (byte*) screen1#11 ← phi( main::@7/(byte*) screen1#10 )
  (byte) main::a#18 ← phi( main::@7/(byte) main::a#7 )
  (byte) main::i#19 ← phi( main::@7/(byte) main::i#7 )
  (byte) main::i#8 ← ++ (byte) main::i#19
  (byte) main::a#8 ← (byte) main::a#18 ^ (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) test::i#8 ← (byte) main::i#8
  (byte) test::a#8 ← (byte) main::a#8
  call test 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte) RED#13 ← phi( main::@8/(byte) RED#12 )
  (byte*) cols#14 ← phi( main::@8/(byte*) cols#13 )
  (byte) GREEN#13 ← phi( main::@8/(byte) GREEN#12 )
  (byte*) screen2#12 ← phi( main::@8/(byte*) screen2#11 )
  (byte*) screen1#12 ← phi( main::@8/(byte*) screen1#11 )
  (byte) main::a#19 ← phi( main::@8/(byte) main::a#8 )
  (byte) main::i#20 ← phi( main::@8/(byte) main::i#8 )
  (byte) main::i#9 ← ++ (byte) main::i#20
  (byte) main::a#9 ← (byte) main::a#19 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) test::i#9 ← (byte) main::i#9
  (byte) test::a#9 ← (byte) main::a#9
  call test 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) RED#5 ← phi( main::@9/(byte) RED#13 )
  (byte*) cols#6 ← phi( main::@9/(byte*) cols#14 )
  (byte) GREEN#5 ← phi( main::@9/(byte) GREEN#13 )
  (byte*) screen2#4 ← phi( main::@9/(byte*) screen2#12 )
  (byte*) screen1#4 ← phi( main::@9/(byte*) screen1#12 )
  (byte) main::a#20 ← phi( main::@9/(byte) main::a#9 )
  (byte) main::i#21 ← phi( main::@9/(byte) main::i#9 )
  (byte) main::i#10 ← ++ (byte) main::i#21
  (byte) main::a#10 ← (byte) main::a#20 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) test::i#10 ← (byte) main::i#10
  (byte) test::a#10 ← (byte) main::a#10
  call test 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) main::i#22 ← phi( main::@10/(byte) main::i#10 )
  (byte) main::i#11 ← ++ (byte) main::i#22
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
test: scope:[test]  from main main::@1 main::@10 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  (byte) RED#2 ← phi( main/(byte) RED#3 main::@1/(byte) RED#4 main::@10/(byte) RED#5 main::@2/(byte) RED#6 main::@3/(byte) RED#7 main::@4/(byte) RED#8 main::@5/(byte) RED#9 main::@6/(byte) RED#10 main::@7/(byte) RED#11 main::@8/(byte) RED#12 main::@9/(byte) RED#13 )
  (byte*) cols#3 ← phi( main/(byte*) cols#4 main::@1/(byte*) cols#5 main::@10/(byte*) cols#6 main::@2/(byte*) cols#7 main::@3/(byte*) cols#8 main::@4/(byte*) cols#9 main::@5/(byte*) cols#10 main::@6/(byte*) cols#11 main::@7/(byte*) cols#12 main::@8/(byte*) cols#13 main::@9/(byte*) cols#14 )
  (byte) GREEN#2 ← phi( main/(byte) GREEN#3 main::@1/(byte) GREEN#4 main::@10/(byte) GREEN#5 main::@2/(byte) GREEN#6 main::@3/(byte) GREEN#7 main::@4/(byte) GREEN#8 main::@5/(byte) GREEN#9 main::@6/(byte) GREEN#10 main::@7/(byte) GREEN#11 main::@8/(byte) GREEN#12 main::@9/(byte) GREEN#13 )
  (byte*) screen2#1 ← phi( main/(byte*) screen2#2 main::@1/(byte*) screen2#3 main::@10/(byte*) screen2#4 main::@2/(byte*) screen2#5 main::@3/(byte*) screen2#6 main::@4/(byte*) screen2#7 main::@5/(byte*) screen2#8 main::@6/(byte*) screen2#9 main::@7/(byte*) screen2#10 main::@8/(byte*) screen2#11 main::@9/(byte*) screen2#12 )
  (byte) test::i#11 ← phi( main/(byte) test::i#0 main::@1/(byte) test::i#1 main::@10/(byte) test::i#10 main::@2/(byte) test::i#2 main::@3/(byte) test::i#3 main::@4/(byte) test::i#4 main::@5/(byte) test::i#5 main::@6/(byte) test::i#6 main::@7/(byte) test::i#7 main::@8/(byte) test::i#8 main::@9/(byte) test::i#9 )
  (byte*) screen1#1 ← phi( main/(byte*) screen1#2 main::@1/(byte*) screen1#3 main::@10/(byte*) screen1#4 main::@2/(byte*) screen1#5 main::@3/(byte*) screen1#6 main::@4/(byte*) screen1#7 main::@5/(byte*) screen1#8 main::@6/(byte*) screen1#9 main::@7/(byte*) screen1#10 main::@8/(byte*) screen1#11 main::@9/(byte*) screen1#12 )
  (byte) test::a#11 ← phi( main/(byte) test::a#0 main::@1/(byte) test::a#1 main::@10/(byte) test::a#10 main::@2/(byte) test::a#2 main::@3/(byte) test::a#3 main::@4/(byte) test::a#4 main::@5/(byte) test::a#5 main::@6/(byte) test::a#6 main::@7/(byte) test::a#7 main::@8/(byte) test::a#8 main::@9/(byte) test::a#9 )
  *((byte*) screen1#1 + (byte) test::i#11) ← (byte) test::a#11
  *((byte*) screen2#1 + (byte) test::i#11) ← *((byte[]) ref#0 + (byte) test::i#11)
  (bool~) test::$0 ← *((byte[]) ref#0 + (byte) test::i#11) == (byte) test::a#11
  if((bool~) test::$0) goto test::@1
  to:test::@3
test::@1: scope:[test]  from test
  (byte) test::i#12 ← phi( test/(byte) test::i#11 )
  (byte*) cols#1 ← phi( test/(byte*) cols#3 )
  (byte) GREEN#1 ← phi( test/(byte) GREEN#2 )
  *((byte*) cols#1 + (byte) test::i#12) ← (byte) GREEN#1
  to:test::@return
test::@3: scope:[test]  from test
  (byte) test::i#13 ← phi( test/(byte) test::i#11 )
  (byte*) cols#2 ← phi( test/(byte*) cols#3 )
  (byte) RED#1 ← phi( test/(byte) RED#2 )
  *((byte*) cols#2 + (byte) test::i#13) ← (byte) RED#1
  to:test::@return
test::@return: scope:[test]  from test::@1 test::@3
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) RED#14 ← phi( @begin/(byte) RED#0 )
  (byte*) cols#15 ← phi( @begin/(byte*) cols#0 )
  (byte) GREEN#14 ← phi( @begin/(byte) GREEN#0 )
  (byte*) screen2#13 ← phi( @begin/(byte*) screen2#0 )
  (byte*) screen1#13 ← phi( @begin/(byte*) screen1#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(byte*~) $0
(label) @2
(label) @3
(label) @begin
(label) @end
(byte) GREEN
(byte) GREEN#0
(byte) GREEN#1
(byte) GREEN#10
(byte) GREEN#11
(byte) GREEN#12
(byte) GREEN#13
(byte) GREEN#14
(byte) GREEN#2
(byte) GREEN#3
(byte) GREEN#4
(byte) GREEN#5
(byte) GREEN#6
(byte) GREEN#7
(byte) GREEN#8
(byte) GREEN#9
(byte) RED
(byte) RED#0
(byte) RED#1
(byte) RED#10
(byte) RED#11
(byte) RED#12
(byte) RED#13
(byte) RED#14
(byte) RED#2
(byte) RED#3
(byte) RED#4
(byte) RED#5
(byte) RED#6
(byte) RED#7
(byte) RED#8
(byte) RED#9
(byte*) cols
(byte*) cols#0
(byte*) cols#1
(byte*) cols#10
(byte*) cols#11
(byte*) cols#12
(byte*) cols#13
(byte*) cols#14
(byte*) cols#15
(byte*) cols#2
(byte*) cols#3
(byte*) cols#4
(byte*) cols#5
(byte*) cols#6
(byte*) cols#7
(byte*) cols#8
(byte*) cols#9
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::a#10
(byte) main::a#11
(byte) main::a#12
(byte) main::a#13
(byte) main::a#14
(byte) main::a#15
(byte) main::a#16
(byte) main::a#17
(byte) main::a#18
(byte) main::a#19
(byte) main::a#2
(byte) main::a#20
(byte) main::a#3
(byte) main::a#4
(byte) main::a#5
(byte) main::a#6
(byte) main::a#7
(byte) main::a#8
(byte) main::a#9
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#12
(byte) main::i#13
(byte) main::i#14
(byte) main::i#15
(byte) main::i#16
(byte) main::i#17
(byte) main::i#18
(byte) main::i#19
(byte) main::i#2
(byte) main::i#20
(byte) main::i#21
(byte) main::i#22
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte[]) ref
(byte[]) ref#0
(byte*) screen1
(byte*) screen1#0
(byte*) screen1#1
(byte*) screen1#10
(byte*) screen1#11
(byte*) screen1#12
(byte*) screen1#13
(byte*) screen1#2
(byte*) screen1#3
(byte*) screen1#4
(byte*) screen1#5
(byte*) screen1#6
(byte*) screen1#7
(byte*) screen1#8
(byte*) screen1#9
(byte*) screen2
(byte*) screen2#0
(byte*) screen2#1
(byte*) screen2#10
(byte*) screen2#11
(byte*) screen2#12
(byte*) screen2#13
(byte*) screen2#2
(byte*) screen2#3
(byte*) screen2#4
(byte*) screen2#5
(byte*) screen2#6
(byte*) screen2#7
(byte*) screen2#8
(byte*) screen2#9
(void()) test((byte) test::i , (byte) test::a)
(bool~) test::$0
(label) test::@1
(label) test::@3
(label) test::@return
(byte) test::a
(byte) test::a#0
(byte) test::a#1
(byte) test::a#10
(byte) test::a#11
(byte) test::a#2
(byte) test::a#3
(byte) test::a#4
(byte) test::a#5
(byte) test::a#6
(byte) test::a#7
(byte) test::a#8
(byte) test::a#9
(byte) test::i
(byte) test::i#0
(byte) test::i#1
(byte) test::i#10
(byte) test::i#11
(byte) test::i#12
(byte) test::i#13
(byte) test::i#2
(byte) test::i#3
(byte) test::i#4
(byte) test::i#5
(byte) test::i#6
(byte) test::i#7
(byte) test::i#8
(byte) test::i#9

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
Alias (byte*) screen2#0 = (byte*~) $0 (byte*) screen2#13 
Alias (byte) main::i#0 = (byte) main::i#12 
Alias (byte) main::a#0 = (byte) main::a#11 
Alias (byte*) screen1#10 = (byte*) screen1#3 (byte*) screen1#2 (byte*) screen1#5 (byte*) screen1#6 (byte*) screen1#7 (byte*) screen1#8 (byte*) screen1#9 (byte*) screen1#11 (byte*) screen1#12 (byte*) screen1#4 
Alias (byte*) screen2#10 = (byte*) screen2#3 (byte*) screen2#2 (byte*) screen2#5 (byte*) screen2#6 (byte*) screen2#7 (byte*) screen2#8 (byte*) screen2#9 (byte*) screen2#11 (byte*) screen2#12 (byte*) screen2#4 
Alias (byte) GREEN#10 = (byte) GREEN#4 (byte) GREEN#3 (byte) GREEN#6 (byte) GREEN#7 (byte) GREEN#8 (byte) GREEN#9 (byte) GREEN#11 (byte) GREEN#12 (byte) GREEN#13 (byte) GREEN#5 
Alias (byte*) cols#10 = (byte*) cols#5 (byte*) cols#4 (byte*) cols#7 (byte*) cols#8 (byte*) cols#9 (byte*) cols#11 (byte*) cols#12 (byte*) cols#13 (byte*) cols#14 (byte*) cols#6 
Alias (byte) RED#10 = (byte) RED#4 (byte) RED#3 (byte) RED#6 (byte) RED#7 (byte) RED#8 (byte) RED#9 (byte) RED#11 (byte) RED#12 (byte) RED#13 (byte) RED#5 
Alias (byte) main::i#1 = (byte) main::i#13 
Alias (byte) main::a#1 = (byte) main::a#12 
Alias (byte) main::i#14 = (byte) main::i#2 
Alias (byte) main::a#13 = (byte) main::a#2 
Alias (byte) main::i#15 = (byte) main::i#3 
Alias (byte) main::a#14 = (byte) main::a#3 
Alias (byte) main::i#16 = (byte) main::i#4 
Alias (byte) main::a#15 = (byte) main::a#4 
Alias (byte) main::i#17 = (byte) main::i#5 
Alias (byte) main::a#16 = (byte) main::a#5 
Alias (byte) main::i#18 = (byte) main::i#6 
Alias (byte) main::a#17 = (byte) main::a#6 
Alias (byte) main::i#19 = (byte) main::i#7 
Alias (byte) main::a#18 = (byte) main::a#7 
Alias (byte) main::i#20 = (byte) main::i#8 
Alias (byte) main::a#19 = (byte) main::a#8 
Alias (byte) main::i#21 = (byte) main::i#9 
Alias (byte) main::a#20 = (byte) main::a#9 
Alias (byte) main::i#10 = (byte) main::i#22 
Alias (byte) GREEN#1 = (byte) GREEN#2 
Alias (byte*) cols#1 = (byte*) cols#3 (byte*) cols#2 
Alias (byte) test::i#11 = (byte) test::i#12 (byte) test::i#13 
Alias (byte) RED#1 = (byte) RED#2 
Alias (byte*) screen1#0 = (byte*) screen1#13 
Alias (byte) GREEN#0 = (byte) GREEN#14 
Alias (byte*) cols#0 = (byte*) cols#15 
Alias (byte) RED#0 = (byte) RED#14 
Succesful SSA optimization Pass2AliasElimination
Redundant Phi (byte*) screen1#10 (byte*) screen1#0
Redundant Phi (byte*) screen2#10 (byte*) screen2#0
Redundant Phi (byte) GREEN#10 (byte) GREEN#0
Redundant Phi (byte*) cols#10 (byte*) cols#0
Redundant Phi (byte) RED#10 (byte) RED#0
Redundant Phi (byte*) screen1#1 (byte*) screen1#10
Redundant Phi (byte*) screen2#1 (byte*) screen2#10
Redundant Phi (byte) GREEN#1 (byte) GREEN#10
Redundant Phi (byte*) cols#1 (byte*) cols#10
Redundant Phi (byte) RED#1 (byte) RED#10
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) test::$0 if(*((byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte[]) ref#0 = { 3, 4, 3, 18, 9, 1, 4, 2, 4, 5, 1, 0 }
Constant (const byte*) screen1#0 = ((byte*))1024
Constant (const byte*) cols#0 = ((byte*))55296
Constant (const byte) GREEN#0 = 5
Constant (const byte) RED#0 = 2
Constant (const byte) main::i#0 = 0
Constant (const byte) main::a#0 = 3
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) screen2#0 = screen1#0+40
Constant (const byte) test::i#0 = main::i#0
Constant (const byte) test::a#0 = main::a#0
Constant (const byte) main::i#1 = ++main::i#0
Constant (const byte) main::a#1 = main::a#0+1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#1 = main::i#1
Constant (const byte) test::a#1 = main::a#1
Constant (const byte) main::i#14 = ++main::i#1
Constant (const byte) main::a#13 = main::a#1-1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#2 = main::i#14
Constant (const byte) test::a#2 = main::a#13
Constant (const byte) main::i#15 = ++main::i#14
Constant (const byte) main::a#14 = main::a#13*6
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#3 = main::i#15
Constant (const byte) test::a#3 = main::a#14
Constant (const byte) main::i#16 = ++main::i#15
Constant (const byte) main::a#15 = main::a#14/2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#4 = main::i#16
Constant (const byte) test::a#4 = main::a#15
Constant (const byte) main::i#17 = ++main::i#16
Constant (const byte) main::a#16 = main::a#15%2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#5 = main::i#17
Constant (const byte) test::a#5 = main::a#16
Constant (const byte) main::i#18 = ++main::i#17
Constant (const byte) main::a#17 = main::a#16<<2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#6 = main::i#18
Constant (const byte) test::a#6 = main::a#17
Constant (const byte) main::i#19 = ++main::i#18
Constant (const byte) main::a#18 = main::a#17>>1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#7 = main::i#19
Constant (const byte) test::a#7 = main::a#18
Constant (const byte) main::i#20 = ++main::i#19
Constant (const byte) main::a#19 = main::a#18^6
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#8 = main::i#20
Constant (const byte) test::a#8 = main::a#19
Constant (const byte) main::i#21 = ++main::i#20
Constant (const byte) main::a#20 = main::a#19|1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#9 = main::i#21
Constant (const byte) test::a#9 = main::a#20
Constant (const byte) main::i#10 = ++main::i#21
Constant (const byte) main::a#10 = main::a#20&1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) test::i#10 = main::i#10
Constant (const byte) test::a#10 = main::a#10
Constant (const byte) main::i#11 = ++main::i#10
Succesful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) main::i#11
Succesful SSA optimization PassNEliminateUnusedVars
Culled Empty Block (label) main::@11
Succesful SSA optimization Pass2CullEmptyBlocks
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with different constant siblings (const byte) main::i#0
Inlining constant with different constant siblings (const byte) main::a#0
Inlining constant with different constant siblings (const byte) main::i#1
Inlining constant with different constant siblings (const byte) main::a#1
Inlining constant with different constant siblings (const byte) main::i#14
Inlining constant with different constant siblings (const byte) main::a#13
Inlining constant with different constant siblings (const byte) main::i#15
Inlining constant with different constant siblings (const byte) main::a#14
Inlining constant with different constant siblings (const byte) main::i#16
Inlining constant with different constant siblings (const byte) main::a#15
Inlining constant with different constant siblings (const byte) main::i#17
Inlining constant with different constant siblings (const byte) main::a#16
Inlining constant with different constant siblings (const byte) main::i#18
Inlining constant with different constant siblings (const byte) main::a#17
Inlining constant with different constant siblings (const byte) main::i#19
Inlining constant with different constant siblings (const byte) main::a#18
Inlining constant with different constant siblings (const byte) main::i#20
Inlining constant with different constant siblings (const byte) main::a#19
Inlining constant with different constant siblings (const byte) main::i#21
Inlining constant with different constant siblings (const byte) main::a#20
Inlining constant with different constant siblings (const byte) main::i#10
Inlining constant with different constant siblings (const byte) main::a#10
Inlining constant with var siblings (const byte) test::i#0
Inlining constant with var siblings (const byte) test::a#0
Inlining constant with var siblings (const byte) test::i#1
Inlining constant with var siblings (const byte) test::a#1
Inlining constant with var siblings (const byte) test::i#2
Inlining constant with var siblings (const byte) test::a#2
Inlining constant with var siblings (const byte) test::i#3
Inlining constant with var siblings (const byte) test::a#3
Inlining constant with var siblings (const byte) test::i#4
Inlining constant with var siblings (const byte) test::a#4
Inlining constant with var siblings (const byte) test::i#5
Inlining constant with var siblings (const byte) test::a#5
Inlining constant with var siblings (const byte) test::i#6
Inlining constant with var siblings (const byte) test::a#6
Inlining constant with var siblings (const byte) test::i#7
Inlining constant with var siblings (const byte) test::a#7
Inlining constant with var siblings (const byte) test::i#8
Inlining constant with var siblings (const byte) test::a#8
Inlining constant with var siblings (const byte) test::i#9
Inlining constant with var siblings (const byte) test::a#9
Inlining constant with var siblings (const byte) test::i#10
Inlining constant with var siblings (const byte) test::a#10
Constant inlined test::i#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::a#8 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined test::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::a#9 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test::i#3 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#2 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::a#4 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::i#21 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::a#5 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined test::a#6 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined test::a#7 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::i#20 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#9 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#8 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::a#20 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test::a#10 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1&(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test::i#5 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#4 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#7 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#6 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::i#10 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::a#0 = (byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined main::a#19 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined main::a#18 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::a#17 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::a#1 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::a#16 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#14 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#15 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#10 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::a#10 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1&(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::a#15 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::i#18 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::a#14 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined main::i#19 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::a#13 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::i#16 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#17 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test::a#0 = (byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined test::a#1 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test::a#2 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9 main::@10 main::@return test test::@3 test::@return test::@1 
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9 main::@10 main::@return test test::@3 test::@return test::@1 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to test:5 test:7 test:9 test:11 test:13 test:15 test:17 test:19 test:21 test:23 test:25 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9 main::@10 main::@return test test::@3 test::@return test::@1 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ] ( )
main: scope:[main]  from @2
  [4] phi() [ ] ( main:2 [ ] )
  [5] call test  [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call test  [ ] ( main:2 [ ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ] ( main:2 [ ] )
  [9] call test  [ ] ( main:2 [ ] )
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi() [ ] ( main:2 [ ] )
  [11] call test  [ ] ( main:2 [ ] )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi() [ ] ( main:2 [ ] )
  [13] call test  [ ] ( main:2 [ ] )
  to:main::@5
main::@5: scope:[main]  from main::@4
  [14] phi() [ ] ( main:2 [ ] )
  [15] call test  [ ] ( main:2 [ ] )
  to:main::@6
main::@6: scope:[main]  from main::@5
  [16] phi() [ ] ( main:2 [ ] )
  [17] call test  [ ] ( main:2 [ ] )
  to:main::@7
main::@7: scope:[main]  from main::@6
  [18] phi() [ ] ( main:2 [ ] )
  [19] call test  [ ] ( main:2 [ ] )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [20] phi() [ ] ( main:2 [ ] )
  [21] call test  [ ] ( main:2 [ ] )
  to:main::@9
main::@9: scope:[main]  from main::@8
  [22] phi() [ ] ( main:2 [ ] )
  [23] call test  [ ] ( main:2 [ ] )
  to:main::@10
main::@10: scope:[main]  from main::@9
  [24] phi() [ ] ( main:2 [ ] )
  [25] call test  [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@10
  [26] return  [ ] ( main:2 [ ] )
  to:@return
test: scope:[test]  from main main::@1 main::@10 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [27] (byte) test::i#11 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@10/++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@4/++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@5/++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@6/++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@7/++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@8/++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 main::@9/++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] )
  [27] (byte) test::a#11 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 3 main::@1/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1 main::@10/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1&(byte/signed byte/word/signed word/dword/signed dword) 1 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1 main::@3/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6 main::@4/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2 main::@5/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2 main::@6/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2 main::@7/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1 main::@8/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6 main::@9/(byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] )
  [28] *((const byte*) screen1#0 + (byte) test::i#11) ← (byte) test::a#11 [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] )
  [29] *((const byte*) screen2#0 + (byte) test::i#11) ← *((const byte[]) ref#0 + (byte) test::i#11) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] )
  [30] if(*((const byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1 [ test::i#11 ] ( main:2::test:5 [ test::i#11 ] main:2::test:7 [ test::i#11 ] main:2::test:9 [ test::i#11 ] main:2::test:11 [ test::i#11 ] main:2::test:13 [ test::i#11 ] main:2::test:15 [ test::i#11 ] main:2::test:17 [ test::i#11 ] main:2::test:19 [ test::i#11 ] main:2::test:21 [ test::i#11 ] main:2::test:23 [ test::i#11 ] main:2::test:25 [ test::i#11 ] )
  to:test::@3
test::@3: scope:[test]  from test
  [31] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) RED#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] )
  to:test::@return
test::@return: scope:[test]  from test::@1 test::@3
  [32] return  [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] )
  to:@return
test::@1: scope:[test]  from test
  [33] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) GREEN#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] )
  to:test::@return


VARIABLE REGISTER WEIGHTS
(byte) GREEN
(byte) RED
(byte*) cols
(void()) main()
(byte) main::a
(byte) main::i
(byte[]) ref
(byte*) screen1
(byte*) screen2
(void()) test((byte) test::i , (byte) test::a)
(byte) test::a
(byte) test::a#11 1.3333333333333333
(byte) test::i
(byte) test::i#11 3.0

Initial phi equivalence classes
[ test::a#11 ]
[ test::i#11 ]
Complete equivalence classes
[ test::a#11 ]
[ test::i#11 ]
Allocated zp ZP_BYTE:2 [ test::a#11 ]
Allocated zp ZP_BYTE:3 [ test::i#11 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen1 = $400
  .label cols = $d800
  .const GREEN = 5
  .const RED = 2
  .label screen2 = screen1+$28
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call test  [ ] ( main:2 [ ] )
  //SEG11 [27] phi from main to test [phi:main->test]
  test_from_main:
  //SEG12 [27] phi (byte) test::i#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->test#0] -- vbuz1=vbuc1 
    lda #0
    sta test.i
  //SEG13 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main->test#1] -- vbuz1=vbuc1 
    lda #3
    sta test.a
    jsr test
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call test  [ ] ( main:2 [ ] )
  //SEG17 [27] phi from main::@1 to test [phi:main::@1->test]
  test_from_b1:
  //SEG18 [27] phi (byte) test::i#11 = ++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@1->test#0] -- vbuz1=vbuc1 
    lda #0+1
    sta test.i
  //SEG19 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@1->test#1] -- vbuz1=vbuc1 
    lda #3+1
    sta test.a
    jsr test
  //SEG20 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG21 main::@2
  b2:
  //SEG22 [9] call test  [ ] ( main:2 [ ] )
  //SEG23 [27] phi from main::@2 to test [phi:main::@2->test]
  test_from_b2:
  //SEG24 [27] phi (byte) test::i#11 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->test#0] -- vbuz1=vbuc1 
    lda #0+1+1
    sta test.i
  //SEG25 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@2->test#1] -- vbuz1=vbuc1 
    lda #3+1-1
    sta test.a
    jsr test
  //SEG26 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG27 main::@3
  b3:
  //SEG28 [11] call test  [ ] ( main:2 [ ] )
  //SEG29 [27] phi from main::@3 to test [phi:main::@3->test]
  test_from_b3:
  //SEG30 [27] phi (byte) test::i#11 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1
    sta test.i
  //SEG31 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:main::@3->test#1] -- vbuz1=vbuc1 
    lda #(3+1-1)*6
    sta test.a
    jsr test
  //SEG32 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG33 main::@4
  b4:
  //SEG34 [13] call test  [ ] ( main:2 [ ] )
  //SEG35 [27] phi from main::@4 to test [phi:main::@4->test]
  test_from_b4:
  //SEG36 [27] phi (byte) test::i#11 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@4->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1
    sta test.i
  //SEG37 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@4->test#1] -- vbuz1=vbuc1 
    lda #(3+1-1)*6/2
    sta test.a
    jsr test
  //SEG38 [14] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
  //SEG39 main::@5
  b5:
  //SEG40 [15] call test  [ ] ( main:2 [ ] )
  //SEG41 [27] phi from main::@5 to test [phi:main::@5->test]
  test_from_b5:
  //SEG42 [27] phi (byte) test::i#11 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@5->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1+1
    sta test.i
  //SEG43 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@5->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)
    sta test.a
    jsr test
  //SEG44 [16] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
  //SEG45 main::@6
  b6:
  //SEG46 [17] call test  [ ] ( main:2 [ ] )
  //SEG47 [27] phi from main::@6 to test [phi:main::@6->test]
  test_from_b6:
  //SEG48 [27] phi (byte) test::i#11 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1+1+1
    sta test.i
  //SEG49 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@6->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2
    sta test.a
    jsr test
  //SEG50 [18] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG51 main::@7
  b7:
  //SEG52 [19] call test  [ ] ( main:2 [ ] )
  //SEG53 [27] phi from main::@7 to test [phi:main::@7->test]
  test_from_b7:
  //SEG54 [27] phi (byte) test::i#11 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@7->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1+1+1+1
    sta test.i
  //SEG55 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@7->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1
    sta test.a
    jsr test
  //SEG56 [20] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG57 main::@8
  b8:
  //SEG58 [21] call test  [ ] ( main:2 [ ] )
  //SEG59 [27] phi from main::@8 to test [phi:main::@8->test]
  test_from_b8:
  //SEG60 [27] phi (byte) test::i#11 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@8->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1+1+1+1+1
    sta test.i
  //SEG61 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:main::@8->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1^6
    sta test.a
    jsr test
  //SEG62 [22] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG63 main::@9
  b9:
  //SEG64 [23] call test  [ ] ( main:2 [ ] )
  //SEG65 [27] phi from main::@9 to test [phi:main::@9->test]
  test_from_b9:
  //SEG66 [27] phi (byte) test::i#11 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@9->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1+1+1+1+1+1
    sta test.i
  //SEG67 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@9->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1^6|1
    sta test.a
    jsr test
  //SEG68 [24] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG69 main::@10
  b10:
  //SEG70 [25] call test  [ ] ( main:2 [ ] )
  //SEG71 [27] phi from main::@10 to test [phi:main::@10->test]
  test_from_b10:
  //SEG72 [27] phi (byte) test::i#11 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@10->test#0] -- vbuz1=vbuc1 
    lda #0+1+1+1+1+1+1+1+1+1+1
    sta test.i
  //SEG73 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1&(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@10->test#1] -- vbuz1=vbuc1 
    lda #(mod((3+1-1)*6/2,2)<<2>>1^6|1)&1
    sta test.a
    jsr test
    jmp breturn
  //SEG74 main::@return
  breturn:
  //SEG75 [26] return  [ ] ( main:2 [ ] )
    rts
}
//SEG76 test
test: {
    .label a = 2
    .label i = 3
  //SEG77 [28] *((const byte*) screen1#0 + (byte) test::i#11) ← (byte) test::a#11 [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda a
    ldy i
    sta screen1,y
  //SEG78 [29] *((const byte*) screen2#0 + (byte) test::i#11) ← *((const byte[]) ref#0 + (byte) test::i#11) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda ref,y
    sta screen2,y
  //SEG79 [30] if(*((const byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1 [ test::i#11 ] ( main:2::test:5 [ test::i#11 ] main:2::test:7 [ test::i#11 ] main:2::test:9 [ test::i#11 ] main:2::test:11 [ test::i#11 ] main:2::test:13 [ test::i#11 ] main:2::test:15 [ test::i#11 ] main:2::test:17 [ test::i#11 ] main:2::test:19 [ test::i#11 ] main:2::test:21 [ test::i#11 ] main:2::test:23 [ test::i#11 ] main:2::test:25 [ test::i#11 ] ) -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy i
    lda ref,y
    cmp a
    beq b1
    jmp b3
  //SEG80 test::@3
  b3:
  //SEG81 [31] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) RED#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #RED
    sta cols,y
    jmp breturn
  //SEG82 test::@return
  breturn:
  //SEG83 [32] return  [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] )
    rts
  //SEG84 test::@1
  b1:
  //SEG85 [33] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) GREEN#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #GREEN
    sta cols,y
    jmp breturn
}
  ref: .byte 3, 4, 3, $12, 9, 1, 4, 2, 4, 5, 1, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [29] *((const byte*) screen2#0 + (byte) test::i#11) ← *((const byte[]) ref#0 + (byte) test::i#11) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ test::a#11 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ test::i#11 ]
Statement [30] if(*((const byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1 [ test::i#11 ] ( main:2::test:5 [ test::i#11 ] main:2::test:7 [ test::i#11 ] main:2::test:9 [ test::i#11 ] main:2::test:11 [ test::i#11 ] main:2::test:13 [ test::i#11 ] main:2::test:15 [ test::i#11 ] main:2::test:17 [ test::i#11 ] main:2::test:19 [ test::i#11 ] main:2::test:21 [ test::i#11 ] main:2::test:23 [ test::i#11 ] main:2::test:25 [ test::i#11 ] ) always clobbers reg byte a 
Statement [31] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) RED#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) GREEN#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) screen1#0 + (byte) test::i#11) ← (byte) test::a#11 [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) always clobbers reg byte a 
Statement [29] *((const byte*) screen2#0 + (byte) test::i#11) ← *((const byte[]) ref#0 + (byte) test::i#11) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) always clobbers reg byte a 
Statement [30] if(*((const byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1 [ test::i#11 ] ( main:2::test:5 [ test::i#11 ] main:2::test:7 [ test::i#11 ] main:2::test:9 [ test::i#11 ] main:2::test:11 [ test::i#11 ] main:2::test:13 [ test::i#11 ] main:2::test:15 [ test::i#11 ] main:2::test:17 [ test::i#11 ] main:2::test:19 [ test::i#11 ] main:2::test:21 [ test::i#11 ] main:2::test:23 [ test::i#11 ] main:2::test:25 [ test::i#11 ] ) always clobbers reg byte a 
Statement [31] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) RED#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) GREEN#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ test::a#11 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ test::i#11 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [test] 3: zp ZP_BYTE:3 [ test::i#11 ] 1.33: zp ZP_BYTE:2 [ test::a#11 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [test] best 250 combination reg byte x [ test::i#11 ] zp ZP_BYTE:2 [ test::a#11 ] 
Uplifting [main] best 250 combination 
Uplifting [] best 250 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ test::a#11 ]
Uplifting [test] best 250 combination zp ZP_BYTE:2 [ test::a#11 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen1 = $400
  .label cols = $d800
  .const GREEN = 5
  .const RED = 2
  .label screen2 = screen1+$28
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call test  [ ] ( main:2 [ ] )
  //SEG11 [27] phi from main to test [phi:main->test]
  test_from_main:
  //SEG12 [27] phi (byte) test::i#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->test#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main->test#1] -- vbuz1=vbuc1 
    lda #3
    sta test.a
    jsr test
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call test  [ ] ( main:2 [ ] )
  //SEG17 [27] phi from main::@1 to test [phi:main::@1->test]
  test_from_b1:
  //SEG18 [27] phi (byte) test::i#11 = ++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@1->test#0] -- vbuxx=vbuc1 
    ldx #0+1
  //SEG19 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@1->test#1] -- vbuz1=vbuc1 
    lda #3+1
    sta test.a
    jsr test
  //SEG20 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG21 main::@2
  b2:
  //SEG22 [9] call test  [ ] ( main:2 [ ] )
  //SEG23 [27] phi from main::@2 to test [phi:main::@2->test]
  test_from_b2:
  //SEG24 [27] phi (byte) test::i#11 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1
  //SEG25 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@2->test#1] -- vbuz1=vbuc1 
    lda #3+1-1
    sta test.a
    jsr test
  //SEG26 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG27 main::@3
  b3:
  //SEG28 [11] call test  [ ] ( main:2 [ ] )
  //SEG29 [27] phi from main::@3 to test [phi:main::@3->test]
  test_from_b3:
  //SEG30 [27] phi (byte) test::i#11 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1
  //SEG31 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:main::@3->test#1] -- vbuz1=vbuc1 
    lda #(3+1-1)*6
    sta test.a
    jsr test
  //SEG32 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG33 main::@4
  b4:
  //SEG34 [13] call test  [ ] ( main:2 [ ] )
  //SEG35 [27] phi from main::@4 to test [phi:main::@4->test]
  test_from_b4:
  //SEG36 [27] phi (byte) test::i#11 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@4->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1
  //SEG37 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@4->test#1] -- vbuz1=vbuc1 
    lda #(3+1-1)*6/2
    sta test.a
    jsr test
  //SEG38 [14] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
  //SEG39 main::@5
  b5:
  //SEG40 [15] call test  [ ] ( main:2 [ ] )
  //SEG41 [27] phi from main::@5 to test [phi:main::@5->test]
  test_from_b5:
  //SEG42 [27] phi (byte) test::i#11 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@5->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1
  //SEG43 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@5->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)
    sta test.a
    jsr test
  //SEG44 [16] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
  //SEG45 main::@6
  b6:
  //SEG46 [17] call test  [ ] ( main:2 [ ] )
  //SEG47 [27] phi from main::@6 to test [phi:main::@6->test]
  test_from_b6:
  //SEG48 [27] phi (byte) test::i#11 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1
  //SEG49 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@6->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2
    sta test.a
    jsr test
  //SEG50 [18] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG51 main::@7
  b7:
  //SEG52 [19] call test  [ ] ( main:2 [ ] )
  //SEG53 [27] phi from main::@7 to test [phi:main::@7->test]
  test_from_b7:
  //SEG54 [27] phi (byte) test::i#11 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@7->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1
  //SEG55 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@7->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1
    sta test.a
    jsr test
  //SEG56 [20] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG57 main::@8
  b8:
  //SEG58 [21] call test  [ ] ( main:2 [ ] )
  //SEG59 [27] phi from main::@8 to test [phi:main::@8->test]
  test_from_b8:
  //SEG60 [27] phi (byte) test::i#11 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@8->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1+1
  //SEG61 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:main::@8->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1^6
    sta test.a
    jsr test
  //SEG62 [22] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG63 main::@9
  b9:
  //SEG64 [23] call test  [ ] ( main:2 [ ] )
  //SEG65 [27] phi from main::@9 to test [phi:main::@9->test]
  test_from_b9:
  //SEG66 [27] phi (byte) test::i#11 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@9->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1+1+1
  //SEG67 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@9->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1^6|1
    sta test.a
    jsr test
  //SEG68 [24] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG69 main::@10
  b10:
  //SEG70 [25] call test  [ ] ( main:2 [ ] )
  //SEG71 [27] phi from main::@10 to test [phi:main::@10->test]
  test_from_b10:
  //SEG72 [27] phi (byte) test::i#11 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@10->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1+1+1+1
  //SEG73 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1&(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@10->test#1] -- vbuz1=vbuc1 
    lda #(mod((3+1-1)*6/2,2)<<2>>1^6|1)&1
    sta test.a
    jsr test
    jmp breturn
  //SEG74 main::@return
  breturn:
  //SEG75 [26] return  [ ] ( main:2 [ ] )
    rts
}
//SEG76 test
test: {
    .label a = 2
  //SEG77 [28] *((const byte*) screen1#0 + (byte) test::i#11) ← (byte) test::a#11 [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda a
    sta screen1,x
  //SEG78 [29] *((const byte*) screen2#0 + (byte) test::i#11) ← *((const byte[]) ref#0 + (byte) test::i#11) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda ref,x
    sta screen2,x
  //SEG79 [30] if(*((const byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1 [ test::i#11 ] ( main:2::test:5 [ test::i#11 ] main:2::test:7 [ test::i#11 ] main:2::test:9 [ test::i#11 ] main:2::test:11 [ test::i#11 ] main:2::test:13 [ test::i#11 ] main:2::test:15 [ test::i#11 ] main:2::test:17 [ test::i#11 ] main:2::test:19 [ test::i#11 ] main:2::test:21 [ test::i#11 ] main:2::test:23 [ test::i#11 ] main:2::test:25 [ test::i#11 ] ) -- pbuc1_derefidx_vbuxx_eq_vbuz1_then_la1 
    lda ref,x
    cmp a
    beq b1
    jmp b3
  //SEG80 test::@3
  b3:
  //SEG81 [31] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) RED#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #RED
    sta cols,x
    jmp breturn
  //SEG82 test::@return
  breturn:
  //SEG83 [32] return  [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] )
    rts
  //SEG84 test::@1
  b1:
  //SEG85 [33] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) GREEN#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta cols,x
    jmp breturn
}
  ref: .byte 3, 4, 3, $12, 9, 1, 4, 2, 4, 5, 1, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b2_from_bbegin:
Removing instruction main_from_b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_main:
Removing instruction test_from_b1:
Removing instruction b2_from_b1:
Removing instruction test_from_b2:
Removing instruction b3_from_b2:
Removing instruction test_from_b3:
Removing instruction b4_from_b3:
Removing instruction test_from_b4:
Removing instruction b5_from_b4:
Removing instruction test_from_b5:
Removing instruction b6_from_b5:
Removing instruction test_from_b6:
Removing instruction b7_from_b6:
Removing instruction test_from_b7:
Removing instruction b8_from_b7:
Removing instruction test_from_b8:
Removing instruction b9_from_b8:
Removing instruction test_from_b9:
Removing instruction b10_from_b9:
Removing instruction test_from_b10:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b2:
Removing instruction bend:
Removing instruction test_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) RED
(const byte) RED#0 RED = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte*) cols
(const byte*) cols#0 cols = ((byte*))(word/dword/signed dword) 55296
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::a
(byte) main::i
(byte[]) ref
(const byte[]) ref#0 ref = { (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 18, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte*) screen1
(const byte*) screen1#0 screen1 = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) screen2
(const byte*) screen2#0 screen2 = (const byte*) screen1#0+(byte/signed byte/word/signed word/dword/signed dword) 40
(void()) test((byte) test::i , (byte) test::a)
(label) test::@1
(label) test::@3
(label) test::@return
(byte) test::a
(byte) test::a#11 a zp ZP_BYTE:2 1.3333333333333333
(byte) test::i
(byte) test::i#11 reg byte x 3.0

zp ZP_BYTE:2 [ test::a#11 ]
reg byte x [ test::i#11 ]


FINAL ASSEMBLER
Score: 205

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen1 = $400
  .label cols = $d800
  .const GREEN = 5
  .const RED = 2
  .label screen2 = screen1+$28
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call test  [ ] ( main:2 [ ] )
  //SEG11 [27] phi from main to test [phi:main->test]
  //SEG12 [27] phi (byte) test::i#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->test#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main->test#1] -- vbuz1=vbuc1 
    lda #3
    sta test.a
    jsr test
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG15 main::@1
  //SEG16 [7] call test  [ ] ( main:2 [ ] )
  //SEG17 [27] phi from main::@1 to test [phi:main::@1->test]
  //SEG18 [27] phi (byte) test::i#11 = ++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@1->test#0] -- vbuxx=vbuc1 
    ldx #0+1
  //SEG19 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@1->test#1] -- vbuz1=vbuc1 
    lda #3+1
    sta test.a
    jsr test
  //SEG20 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG21 main::@2
  //SEG22 [9] call test  [ ] ( main:2 [ ] )
  //SEG23 [27] phi from main::@2 to test [phi:main::@2->test]
  //SEG24 [27] phi (byte) test::i#11 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1
  //SEG25 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@2->test#1] -- vbuz1=vbuc1 
    lda #3+1-1
    sta test.a
    jsr test
  //SEG26 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG27 main::@3
  //SEG28 [11] call test  [ ] ( main:2 [ ] )
  //SEG29 [27] phi from main::@3 to test [phi:main::@3->test]
  //SEG30 [27] phi (byte) test::i#11 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1
  //SEG31 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:main::@3->test#1] -- vbuz1=vbuc1 
    lda #(3+1-1)*6
    sta test.a
    jsr test
  //SEG32 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG33 main::@4
  //SEG34 [13] call test  [ ] ( main:2 [ ] )
  //SEG35 [27] phi from main::@4 to test [phi:main::@4->test]
  //SEG36 [27] phi (byte) test::i#11 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@4->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1
  //SEG37 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@4->test#1] -- vbuz1=vbuc1 
    lda #(3+1-1)*6/2
    sta test.a
    jsr test
  //SEG38 [14] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  //SEG39 main::@5
  //SEG40 [15] call test  [ ] ( main:2 [ ] )
  //SEG41 [27] phi from main::@5 to test [phi:main::@5->test]
  //SEG42 [27] phi (byte) test::i#11 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@5->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1
  //SEG43 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@5->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)
    sta test.a
    jsr test
  //SEG44 [16] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  //SEG45 main::@6
  //SEG46 [17] call test  [ ] ( main:2 [ ] )
  //SEG47 [27] phi from main::@6 to test [phi:main::@6->test]
  //SEG48 [27] phi (byte) test::i#11 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1
  //SEG49 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@6->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2
    sta test.a
    jsr test
  //SEG50 [18] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  //SEG51 main::@7
  //SEG52 [19] call test  [ ] ( main:2 [ ] )
  //SEG53 [27] phi from main::@7 to test [phi:main::@7->test]
  //SEG54 [27] phi (byte) test::i#11 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@7->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1
  //SEG55 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@7->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1
    sta test.a
    jsr test
  //SEG56 [20] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  //SEG57 main::@8
  //SEG58 [21] call test  [ ] ( main:2 [ ] )
  //SEG59 [27] phi from main::@8 to test [phi:main::@8->test]
  //SEG60 [27] phi (byte) test::i#11 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@8->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1+1
  //SEG61 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:main::@8->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1^6
    sta test.a
    jsr test
  //SEG62 [22] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  //SEG63 main::@9
  //SEG64 [23] call test  [ ] ( main:2 [ ] )
  //SEG65 [27] phi from main::@9 to test [phi:main::@9->test]
  //SEG66 [27] phi (byte) test::i#11 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@9->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1+1+1
  //SEG67 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@9->test#1] -- vbuz1=vbuc1 
    lda #mod((3+1-1)*6/2,2)<<2>>1^6|1
    sta test.a
    jsr test
  //SEG68 [24] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  //SEG69 main::@10
  //SEG70 [25] call test  [ ] ( main:2 [ ] )
  //SEG71 [27] phi from main::@10 to test [phi:main::@10->test]
  //SEG72 [27] phi (byte) test::i#11 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@10->test#0] -- vbuxx=vbuc1 
    ldx #0+1+1+1+1+1+1+1+1+1+1
  //SEG73 [27] phi (byte) test::a#11 = (byte/signed byte/word/signed word/dword/signed dword) 3+(byte/signed byte/word/signed word/dword/signed dword) 1-(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) 6/(byte/signed byte/word/signed word/dword/signed dword) 2%(byte/signed byte/word/signed word/dword/signed dword) 2<<(byte/signed byte/word/signed word/dword/signed dword) 2>>(byte/signed byte/word/signed word/dword/signed dword) 1^(byte/signed byte/word/signed word/dword/signed dword) 6|(byte/signed byte/word/signed word/dword/signed dword) 1&(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main::@10->test#1] -- vbuz1=vbuc1 
    lda #(mod((3+1-1)*6/2,2)<<2>>1^6|1)&1
    sta test.a
    jsr test
  //SEG74 main::@return
  //SEG75 [26] return  [ ] ( main:2 [ ] )
    rts
}
//SEG76 test
test: {
    .label a = 2
  //SEG77 [28] *((const byte*) screen1#0 + (byte) test::i#11) ← (byte) test::a#11 [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda a
    sta screen1,x
  //SEG78 [29] *((const byte*) screen2#0 + (byte) test::i#11) ← *((const byte[]) ref#0 + (byte) test::i#11) [ test::a#11 test::i#11 ] ( main:2::test:5 [ test::a#11 test::i#11 ] main:2::test:7 [ test::a#11 test::i#11 ] main:2::test:9 [ test::a#11 test::i#11 ] main:2::test:11 [ test::a#11 test::i#11 ] main:2::test:13 [ test::a#11 test::i#11 ] main:2::test:15 [ test::a#11 test::i#11 ] main:2::test:17 [ test::a#11 test::i#11 ] main:2::test:19 [ test::a#11 test::i#11 ] main:2::test:21 [ test::a#11 test::i#11 ] main:2::test:23 [ test::a#11 test::i#11 ] main:2::test:25 [ test::a#11 test::i#11 ] ) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda ref,x
    sta screen2,x
  //SEG79 [30] if(*((const byte[]) ref#0 + (byte) test::i#11)==(byte) test::a#11) goto test::@1 [ test::i#11 ] ( main:2::test:5 [ test::i#11 ] main:2::test:7 [ test::i#11 ] main:2::test:9 [ test::i#11 ] main:2::test:11 [ test::i#11 ] main:2::test:13 [ test::i#11 ] main:2::test:15 [ test::i#11 ] main:2::test:17 [ test::i#11 ] main:2::test:19 [ test::i#11 ] main:2::test:21 [ test::i#11 ] main:2::test:23 [ test::i#11 ] main:2::test:25 [ test::i#11 ] ) -- pbuc1_derefidx_vbuxx_eq_vbuz1_then_la1 
    lda ref,x
    cmp a
    beq b1
  //SEG80 test::@3
  //SEG81 [31] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) RED#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #RED
    sta cols,x
  //SEG82 test::@return
  breturn:
  //SEG83 [32] return  [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] )
    rts
  //SEG84 test::@1
  b1:
  //SEG85 [33] *((const byte*) cols#0 + (byte) test::i#11) ← (const byte) GREEN#0 [ ] ( main:2::test:5 [ ] main:2::test:7 [ ] main:2::test:9 [ ] main:2::test:11 [ ] main:2::test:13 [ ] main:2::test:15 [ ] main:2::test:17 [ ] main:2::test:19 [ ] main:2::test:21 [ ] main:2::test:23 [ ] main:2::test:25 [ ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta cols,x
    jmp breturn
}
  ref: .byte 3, 4, 3, $12, 9, 1, 4, 2, 4, 5, 1, 0

