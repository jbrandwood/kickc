// Minimal if() test
byte* SCREEN = $0400;

main();

void main() {
  byte i=0;
  do {
    if(i<50) {
      *SCREEN = i;
    }
  } while(++i<100)
}
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  proc (void()) main()
  (byte) main::i ← (byte) 0
main::@1:
  (boolean~) main::$0 ← (byte) main::i < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  *((byte*) SCREEN) ← (byte) main::i
main::@2:
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte) 100
  if((boolean~) main::$2) goto main::@1
main::@return:
  return 
  endproc // main()

SYMBOLS
(void~) $0
(byte*) SCREEN
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN) ← (byte) main::i
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN) ← (byte) main::i
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN) ← (byte) main::i
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#0 (word) 1024
Constant (byte) main::i#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Inversing boolean not (boolean~) main::$1 ← (byte) main::i#2 >= (byte) 50 from (boolean~) main::$0 ← (byte) main::i#2 < (byte) 50
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#3 (word) 1024
Redundant Phi (byte) main::i#3 (byte) main::i#2
Redundant Phi (byte*) SCREEN#4 (byte*) SCREEN#1
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(word) 1024 main::@2/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 < (byte) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$1 if((byte) main::i#2>=(byte) 50) goto main::@2
Simple Condition (boolean~) main::$2 if((byte) main::i#1<(byte) 100) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2>=(byte) 50) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte) 100) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#1 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2>=(byte) 50) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte) 100) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((word) 1024) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@end: scope:[]  from @begin

Block Sequence Planned @begin @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Block Sequence Planned @begin @end main main::@1 main::@3 main::@2 main::@return main::@5 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i#2 ← phi( main/(byte) 0 main::@5/(byte~) main::i#5 )
  if((byte) main::i#2>=(byte) 50) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  *((word) 1024) ← (byte) main::i#2
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte) 100) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@5: scope:[main]  from main::@2
  (byte~) main::i#5 ← (byte) main::i#1
  to:main::@1

Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@5/(byte~) main::i#5 ) [ main::i#2 ]
  [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [5] if((byte) main::i#1<(byte) 100) goto main::@5 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@2
  [7] (byte~) main::i#5 ← (byte) main::i#1 [ main::i#5 ]
  to:main::@1

Created 1 initial phi equivalence classes
Coalesced [7] main::i#5 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@5
Block Sequence Planned @begin @end main main::@1 main::@3 main::@2 main::@return 
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 ) [ main::i#2 ]
  [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return  [ ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@3 dominated by  @begin main::@1 main::@3 main 
main::@2 dominated by  @begin main::@2 main::@1 main 
main::@return dominated by  main::@return @begin main::@2 main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp byte:2 to zp byte:2 [ main::i#2 main::i#1 ]
INITIAL ASM
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta $2
    jmp b1
  //SEG6 [1] phi from main::@2 to main::@1
  b1_from_b2:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG8 main::@1
  b1:
  //SEG9 [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ] -- zpby1_ge_coby1_then_la1 
    lda $2
    cmp #$32
    bcs b2
    jmp b3
  //SEG10 main::@3
  b3:
  //SEG11 [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ] -- _star_cowo1=zpby1 
    lda $2
    sta $400
    jmp b2
  //SEG12 main::@2
  b2:
  //SEG13 [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- zpby1=_inc_zpby1 
    inc $2
  //SEG14 [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ] -- zpby1_lt_coby1_then_la1 
    lda $2
    cmp #$64
    bcc b1_from_b2
    jmp breturn
  //SEG15 main::@return
  breturn:
  //SEG16 [6] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ main::i#2 main::i#1 ] : zp byte:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp byte:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 335 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 335 combination 
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG6 [1] phi from main::@2 to main::@1
  b1_from_b2:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ] -- xby_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG10 main::@3
  b3:
  //SEG11 [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG12 main::@2
  b2:
  //SEG13 [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ] -- xby_lt_coby1_then_la1 
    cpx #$64
    bcc b1_from_b2
  //SEG15 main::@return
  breturn:
  //SEG16 [6] return  [ ]
    rts
}

Replacing label b1_from_b2 with b1
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG6 [1] phi from main::@2 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ] -- xby_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG10 main::@3
  b3:
  //SEG11 [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG12 main::@2
  b2:
  //SEG13 [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ] -- xby_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG15 main::@return
  breturn:
  //SEG16 [6] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG6 [1] phi from main::@2 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ] -- xby_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG10 main::@3
  //SEG11 [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG12 main::@2
  b2:
  //SEG13 [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ] -- xby_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG15 main::@return
  //SEG16 [6] return  [ ]
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG6 [1] phi from main::@2 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ] -- xby_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG10 main::@3
  //SEG11 [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG12 main::@2
  b2:
  //SEG13 [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ] -- xby_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG15 main::@return
  //SEG16 [6] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]

FINAL CODE
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG6 [1] phi from main::@2 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] if((byte) main::i#2>=(byte) 50) goto main::@2 [ main::i#2 ] -- xby_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG10 main::@3
  //SEG11 [3] *((word) 1024) ← (byte) main::i#2 [ main::i#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG12 main::@2
  b2:
  //SEG13 [4] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [5] if((byte) main::i#1<(byte) 100) goto main::@1 [ main::i#1 ] -- xby_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG15 main::@return
  //SEG16 [6] return  [ ]
    rts
}

