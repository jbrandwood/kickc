@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1
  [8] if((byte~) main::$0==(byte) 0) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  [9] phi()
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [10] (byte()*) main::f#3 ← phi( main::@3/&(byte()) fn1() main::@2/&(byte()) fn2() )
  [11] *((const nomodify byte*) main::SCREEN) ← (byte)(byte()*) main::f#3
  to:main::@1

(byte()) fn2()
fn2: scope:[fn2]  from
  [12] *((const nomodify byte*) fn2::BGCOL) ← ++ *((const nomodify byte*) fn2::BGCOL)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [13] return 
  to:@return

(byte()) fn1()
fn1: scope:[fn1]  from
  [14] *((const nomodify byte*) fn1::BORDERCOL) ← ++ *((const nomodify byte*) fn1::BORDERCOL)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [15] return 
  to:@return
