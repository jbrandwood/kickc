Setting struct to load/store in variable affected by address-of COLORS

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *BORDER_COLOR = 0
  *BG_COLOR = 6
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte* const BG_COLOR = (byte*)(byte*)&COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
constant byte* const BORDER_COLOR = (byte*)(byte*)&COLORS+OFFSET_STRUCT_SCREEN_COLORS_BORDER
volatile struct SCREEN_COLORS COLORS loadstore = {}
constant byte OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
constant byte OFFSET_STRUCT_SCREEN_COLORS_BORDER = 0
void __start()
void main()

Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) 6 in *BG_COLOR = 6
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *BG_COLOR = (unumber)6
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (byte*)&COLORS+OFFSET_STRUCT_SCREEN_COLORS_BORDER
Simplifying constant integer cast (byte*)&COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
Simplifying constant integer cast 0
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero (byte*)&COLORS in 
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_SCREEN_COLORS_BORDER
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *BORDER_COLOR = 0
  [1] *BG_COLOR = 6
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
volatile struct SCREEN_COLORS COLORS loadstore = {}
void main()

Initial phi equivalence classes
Added variable COLORS to live range equivalence class [ COLORS ]
Complete equivalence classes
[ COLORS ]
Allocated mem[5] [ COLORS ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *BORDER_COLOR = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *BG_COLOR = 6 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers mem[5] [ COLORS ] : mem[5] , 

REGISTER UPLIFT SCOPES
Uplift Scope [SCREEN_COLORS] 
Uplift Scope [main] 
Uplift Scope [] 0: mem[5] [ COLORS ] 

Uplifting [SCREEN_COLORS] best 21 combination 
Uplifting [main] best 21 combination 
Uplifting [] best 21 combination mem[5] [ COLORS ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Support for pointer to struct member
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-pointer-to-member-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
  .const SIZEOF_STRUCT_SCREEN_COLORS = 5
  // The border color
  .label BORDER_COLOR = COLORS
  // The background color
  .label BG_COLOR = COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
.segment Code
  // main
main: {
    // [0] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [1] *BG_COLOR = 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data
.segment Data
  // Commodore 64 processor port
  COLORS: .fill SIZEOF_STRUCT_SCREEN_COLORS, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte* const BG_COLOR = (byte*)&COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
constant byte* const BORDER_COLOR = (byte*)&COLORS
volatile struct SCREEN_COLORS COLORS loadstore mem[5] = {}
constant byte OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
constant byte SIZEOF_STRUCT_SCREEN_COLORS = 5
void main()

mem[5] [ COLORS ]


FINAL ASSEMBLER
Score: 18

  // File Comments
// Support for pointer to struct member
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-pointer-to-member-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
  .const SIZEOF_STRUCT_SCREEN_COLORS = 5
  // The border color
  .label BORDER_COLOR = COLORS
  // The background color
  .label BG_COLOR = COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
.segment Code
  // main
main: {
    // *BORDER_COLOR = 0
    // [0] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // *BG_COLOR = 6
    // [1] *BG_COLOR = 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data
.segment Data
  // Commodore 64 processor port
  COLORS: .fill SIZEOF_STRUCT_SCREEN_COLORS, 0

