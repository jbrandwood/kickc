
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from printf_number_buffer::@3
  [16] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [17] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [18] conio_line_text[conio_cursor_x] = cputc::c#0
  [19] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [20] conio_cursor_x = ++ conio_cursor_x
  [21] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [22] phi()
  [23] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [24] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [25] phi()
  [26] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [27] phi()
  [28] call clrscr
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [29] main::signed_char_value#2 = phi( main/-5, main::@2/main::signed_char_value#1 )
  [30] if(main::signed_char_value#2!=0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [31] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [32] main::signed_char_value#1 = ++ main::signed_char_value#2
  [33] test_casting::signed_short_value#0 = main::signed_char_value#1
  [34] call test_casting
  to:main::@1

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [35] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [36] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [37] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [38] conio_cursor_x = gotoxy::x#2
  [39] conio_cursor_y = gotoxy::y#4
  [40] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [41] gotoxy::$8 = gotoxy::$7 << 2
  [42] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [43] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [44] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [45] conio_line_text = gotoxy::$5
  [46] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [47] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [48] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [49] conio_line_text = conio_line_text + $28
  [50] conio_line_color = conio_line_color + $28
  [51] conio_cursor_x = 0
  [52] conio_cursor_y = ++ conio_cursor_y
  [53] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [54] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [55] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [56] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [56] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [56] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [57] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [58] conio_cursor_x = 0
  [59] conio_cursor_y = 0
  [60] conio_line_text = DEFAULT_SCREEN
  [61] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [62] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [63] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [64] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [65] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [66] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [67] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [68] clrscr::line_text#5[clrscr::c#2] = ' '
  [69] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [70] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void test_casting(int signed_short_value)
test_casting: scope:[test_casting]  from main::@2
  [71] printf_sint::value#1 = test_casting::signed_short_value#0
  [72] call printf_sint
  to:test_casting::@1
test_casting::@1: scope:[test_casting]  from test_casting
  [73] phi()
  [74] call printf_str
  to:test_casting::@return
test_casting::@return: scope:[test_casting]  from test_casting::@1
  [75] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [76] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [77] phi()
  [78] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [79] phi()
  [80] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [81] phi()
  [82] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [83] phi()
  [84] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [85] conio_line_text = conio_line_text - $28
  [86] conio_line_color = conio_line_color - $28
  [87] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [88] return 
  to:@return

void printf_sint(void (*putc)(char) , int value , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_sint: scope:[printf_sint]  from test_casting
  [89] *((char *)&printf_buffer) = 0
  [90] if(printf_sint::value#1<0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [91] printf_sint::value#0 = - printf_sint::value#1
  [92] *((char *)&printf_buffer) = '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [93] printf_sint::value#4 = phi( printf_sint::@1/printf_sint::value#0, printf_sint/printf_sint::value#1 )
  [94] utoa::value#1 = (unsigned int)printf_sint::value#4
  [95] call utoa
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [96] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [97] call printf_number_buffer
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [98] return 
  to:@return

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from printf_number_buffer::@2 test_casting::@1
  [99] printf_str::putc#4 = phi( printf_number_buffer::@2/printf_sint::putc#0, test_casting::@1/&cputc )
  [99] printf_str::s#4 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_digits#0, test_casting::@1/test_casting::s )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [100] printf_str::s#3 = phi( printf_str/printf_str::s#4, printf_str::@2/printf_str::s#0 )
  [101] printf_str::c#1 = *printf_str::s#3
  [102] printf_str::s#0 = ++ printf_str::s#3
  [103] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [104] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [105] stackpush(char) = printf_str::c#1
  [106] callexecute *printf_str::putc#4 
  sideeffect stackpullbytes(1)
  to:printf_str::@1

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [108] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [108] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [109] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [110] memcpy::src#4 = (char *)memcpy::source#2
  [111] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [112] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [112] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [113] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [114] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [115] *memcpy::dst#2 = *memcpy::src#2
  [116] memcpy::dst#1 = ++ memcpy::dst#2
  [117] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [118] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [118] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [119] memset::end#0 = (char *)memset::str#3 + $28
  [120] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [121] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [122] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [123] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [124] *memset::dst#2 = memset::c#4
  [125] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_sint::@2
  [126] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [127] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [127] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [127] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [127] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [128] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [129] utoa::$11 = (char)utoa::value#2
  [130] *utoa::buffer#11 = DIGITS[utoa::$11]
  [131] utoa::buffer#3 = ++ utoa::buffer#11
  [132] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [133] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [134] utoa::$10 = utoa::digit#2 << 1
  [135] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [136] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [137] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [138] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [138] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [138] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [139] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [140] utoa_append::buffer#0 = utoa::buffer#11
  [141] utoa_append::value#0 = utoa::value#2
  [142] utoa_append::sub#0 = utoa::digit_value#0
  [143] call utoa_append
  [144] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [145] utoa::value#0 = utoa_append::return#0
  [146] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [147] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [148] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [149] stackpush(char) = printf_number_buffer::buffer_sign#0
  [150] callexecute cputc 
  sideeffect stackpullbytes(1)
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [152] phi()
  [153] call printf_str
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [154] return 
  to:@return

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [155] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [156] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [156] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [157] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [158] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [159] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [160] utoa_append::digit#1 = ++ utoa_append::digit#2
  [161] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1
