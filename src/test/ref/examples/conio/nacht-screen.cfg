@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [6] (byte) conio_scroll_enable ← (byte) 1
  to:@2
@2: scope:[]  from @1
  [7] (volatile byte) XSize ← (byte) 0
  [8] (volatile byte) YSize ← (byte) 0
  to:@3
@3: scope:[]  from @2
  [9] phi()
  [10] call main 
  to:@end
@end: scope:[]  from @3
  [11] phi()

(void()) main()
main: scope:[main]  from @3
  [12] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17
  [13] call screensize 
  to:main::@3
main::@3: scope:[main]  from main
  [14] phi()
  [15] call MakeNiceScreen 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  [16] phi()
  [17] call kbhit 
  [18] (byte) kbhit::return#2 ← (byte) kbhit::return#0
  to:main::@4
main::@4: scope:[main]  from main::@1
  [19] (byte~) main::$3 ← (byte) kbhit::return#2
  [20] if((byte) 0==(byte~) main::$3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@4
  [21] phi()
  [22] call clrscr 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [23] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from MakeNiceScreen::@6 main::@2
  [24] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [25] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@5/(byte*) clrscr::line_cols#1 )
  [25] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@5/(byte*) clrscr::line_text#1 )
  [25] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [26] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [27] (byte) conio_cursor_x ← (byte) 0
  [28] (byte) conio_cursor_y ← (byte) 0
  [29] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [30] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [31] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [32] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [33] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [34] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [35] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [36] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [37] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [38] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (byte) conio_textcolor
  [39] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

(byte()) kbhit()
kbhit: scope:[kbhit]  from main::@1
  [40] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0
  [41] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [42] return 
  to:@return

(void()) MakeNiceScreen()
MakeNiceScreen: scope:[MakeNiceScreen]  from main::@3
  [43] phi()
  [44] call scroll 
  to:MakeNiceScreen::@3
MakeNiceScreen::@3: scope:[MakeNiceScreen]  from MakeNiceScreen
  [45] phi()
  [46] call textcolor 
  to:MakeNiceScreen::@4
MakeNiceScreen::@4: scope:[MakeNiceScreen]  from MakeNiceScreen::@3
  [47] phi()
  [48] call bordercolor 
  to:MakeNiceScreen::@5
MakeNiceScreen::@5: scope:[MakeNiceScreen]  from MakeNiceScreen::@4
  [49] phi()
  [50] call bgcolor 
  to:MakeNiceScreen::@6
MakeNiceScreen::@6: scope:[MakeNiceScreen]  from MakeNiceScreen::@5
  [51] phi()
  [52] call clrscr 
  to:MakeNiceScreen::@7
MakeNiceScreen::@7: scope:[MakeNiceScreen]  from MakeNiceScreen::@6
  [53] phi()
  [54] call cursor 
  to:MakeNiceScreen::@8
MakeNiceScreen::@8: scope:[MakeNiceScreen]  from MakeNiceScreen::@7
  [55] phi()
  [56] call cputcxy 
  to:MakeNiceScreen::@9
MakeNiceScreen::@9: scope:[MakeNiceScreen]  from MakeNiceScreen::@8
  [57] (byte) chline::length#1 ← (volatile byte) XSize - (byte) 2
  [58] call chline 
  to:MakeNiceScreen::@10
MakeNiceScreen::@10: scope:[MakeNiceScreen]  from MakeNiceScreen::@9
  [59] phi()
  [60] call cputc 
  to:MakeNiceScreen::@11
MakeNiceScreen::@11: scope:[MakeNiceScreen]  from MakeNiceScreen::@10
  [61] phi()
  [62] call cvlinexy 
  to:MakeNiceScreen::@12
MakeNiceScreen::@12: scope:[MakeNiceScreen]  from MakeNiceScreen::@11
  [63] phi()
  [64] call cputc 
  to:MakeNiceScreen::@13
MakeNiceScreen::@13: scope:[MakeNiceScreen]  from MakeNiceScreen::@12
  [65] (byte) chline::length#2 ← (volatile byte) XSize - (byte) 2
  [66] call chline 
  to:MakeNiceScreen::@14
MakeNiceScreen::@14: scope:[MakeNiceScreen]  from MakeNiceScreen::@13
  [67] phi()
  [68] call cputc 
  to:MakeNiceScreen::@15
MakeNiceScreen::@15: scope:[MakeNiceScreen]  from MakeNiceScreen::@14
  [69] (byte) cvlinexy::x#1 ← (volatile byte) XSize - (byte) 1
  [70] call cvlinexy 
  to:MakeNiceScreen::@16
MakeNiceScreen::@16: scope:[MakeNiceScreen]  from MakeNiceScreen::@15
  [71] phi()
  [72] call MakeTeeLine 
  to:MakeNiceScreen::@17
MakeNiceScreen::@17: scope:[MakeNiceScreen]  from MakeNiceScreen::@16
  [73] phi()
  [74] call MakeTeeLine 
  to:MakeNiceScreen::@1
MakeNiceScreen::@1: scope:[MakeNiceScreen]  from MakeNiceScreen::@17 MakeNiceScreen::@19
  [75] (to_nomodify struct $0*) MakeNiceScreen::T#3 ← phi( MakeNiceScreen::@17/(const struct $0*) MakeNiceScreen::Text MakeNiceScreen::@19/(to_nomodify struct $0*) MakeNiceScreen::T#2 )
  [75] (byte) MakeNiceScreen::I#3 ← phi( MakeNiceScreen::@17/(byte) 0 MakeNiceScreen::@19/(byte) MakeNiceScreen::I#2 )
  [76] if((byte) MakeNiceScreen::I#3<(byte) $c*(byte) $29/(byte) $29) goto MakeNiceScreen::@2
  to:MakeNiceScreen::@return
MakeNiceScreen::@return: scope:[MakeNiceScreen]  from MakeNiceScreen::@1
  [77] return 
  to:@return
MakeNiceScreen::@2: scope:[MakeNiceScreen]  from MakeNiceScreen::@1
  [78] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1
  [79] call strlen 
  [80] (word) strlen::return#2 ← (word) strlen::len#2
  to:MakeNiceScreen::@18
MakeNiceScreen::@18: scope:[MakeNiceScreen]  from MakeNiceScreen::@2
  [81] (word~) MakeNiceScreen::$22 ← (word) strlen::return#2
  [82] (byte~) MakeNiceScreen::$34 ← (byte)(word~) MakeNiceScreen::$22
  [83] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$34
  [84] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1
  [85] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1
  [86] (byte) cputsxy::x#0 ← (byte) MakeNiceScreen::X#1
  [87] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3)
  [88] call cputsxy 
  to:MakeNiceScreen::@19
MakeNiceScreen::@19: scope:[MakeNiceScreen]  from MakeNiceScreen::@18
  [89] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29
  [90] (byte) MakeNiceScreen::I#2 ← ++ (byte) MakeNiceScreen::I#3
  to:MakeNiceScreen::@1

(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
cputsxy: scope:[cputsxy]  from MakeNiceScreen::@18
  [91] (byte) gotoxy::x#3 ← (byte) cputsxy::x#0
  [92] (byte) gotoxy::y#3 ← (byte) cputsxy::y#0
  [93] call gotoxy 
  to:cputsxy::@1
cputsxy::@1: scope:[cputsxy]  from cputsxy
  [94] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0
  [95] call cputs 
  to:cputsxy::@return
cputsxy::@return: scope:[cputsxy]  from cputsxy::@1
  [96] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from cputsxy::@1
  [97] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [98] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#1 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [99] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [100] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [101] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [102] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [103] (byte) cputc::c#0 ← (byte) cputs::c#1
  [104] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from MakeNiceScreen::@10 MakeNiceScreen::@12 MakeNiceScreen::@14 MakeTeeLine::@2 chline::@2 cputcxy::@1 cputs::@2 cvline::@2
  [105] (byte) cputc::c#8 ← phi( MakeNiceScreen::@10/(const nomodify byte) CH_URCORNER MakeNiceScreen::@12/(const nomodify byte) CH_LLCORNER MakeNiceScreen::@14/(const nomodify byte) CH_LRCORNER MakeTeeLine::@2/(const nomodify byte) CH_RTEE chline::@2/(const nomodify byte) CH_HLINE cputcxy::@1/(byte) cputc::c#1 cputs::@2/(byte) cputc::c#0 cvline::@2/(const nomodify byte) CH_VLINE )
  [106] if((byte) cputc::c#8==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [107] *((byte*) conio_cursor_text) ← (byte) cputc::c#8
  [108] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [109] *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  [110] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [111] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [112] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [113] (byte) conio_cursor_x ← (byte) 0
  [114] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [115] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [116] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [117] phi()
  [118] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [119] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  [120] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28
  [121] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [122] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  [123] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28
  [124] (byte*) conio_cursor_color ← (byte*~) cputln::$3
  [125] (byte) conio_cursor_x ← (byte) 0
  [126] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [127] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [128] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [129] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [130] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [131] phi()
  [132] call gotoxy 
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@2 cscroll::@7
  [133] return 
  to:@return
cscroll::@3: scope:[cscroll]  from cscroll::@1
  [134] phi()
  [135] call memcpy 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [136] phi()
  [137] call memcpy 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [138] phi()
  [139] call memset 
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  [140] (byte) memset::c#1 ← (byte) conio_textcolor
  [141] call memset 
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  [142] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [143] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [144] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [145] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [146] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  [147] (byte) memset::c#4 ← phi( cscroll::@5/(byte) ' ' cscroll::@6/(byte) memset::c#1 )
  [147] (void*) memset::str#3 ← phi( cscroll::@5/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@6/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [148] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [149] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [150] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [151] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [152] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [153] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [154] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  [155] (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [155] (void*) memcpy::source#2 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [156] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [157] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [158] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [159] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [159] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [160] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [161] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [162] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [163] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [164] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cputcxy cputsxy cscroll::@2 cvline::@3 cvlinexy
  [165] (byte) gotoxy::x#6 ← phi( cputcxy/(byte) 0 cputsxy/(byte) gotoxy::x#3 cscroll::@2/(byte) 0 cvline::@3/(byte) gotoxy::x#4 cvlinexy/(byte) gotoxy::x#5 )
  [165] (byte) gotoxy::y#6 ← phi( cputcxy/(byte) gotoxy::y#2 cputsxy/(byte) gotoxy::y#3 cscroll::@2/(byte) 0 cvline::@3/(byte) gotoxy::y#4 cvlinexy/(byte) 1 )
  [166] if((byte) gotoxy::y#6<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [167] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [168] (byte) gotoxy::y#7 ← phi( gotoxy::@3/(byte) gotoxy::y#6 gotoxy/(byte) 0 )
  [169] if((byte) gotoxy::x#6<(byte) $28) goto gotoxy::@4
  to:gotoxy::@2
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  [170] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  [171] (byte) gotoxy::x#7 ← phi( gotoxy::@4/(byte) gotoxy::x#6 gotoxy::@1/(byte) 0 )
  [172] (byte) conio_cursor_x ← (byte) gotoxy::x#7
  [173] (byte) conio_cursor_y ← (byte) gotoxy::y#7
  [174] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#7
  [175] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2
  [176] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8
  [177] (word~) gotoxy::$4 ← (word~) gotoxy::$10 << (byte) 3
  [178] (word) gotoxy::offset#0 ← (word~) gotoxy::$4 + (byte) gotoxy::x#7
  [179] (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  [180] (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  [181] (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  [182] (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [183] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from MakeNiceScreen::@2
  [184] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [185] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [185] (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [186] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [187] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [188] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [189] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) MakeTeeLine((byte) MakeTeeLine::Y)
MakeTeeLine: scope:[MakeTeeLine]  from MakeNiceScreen::@16 MakeNiceScreen::@17
  [190] (byte) MakeTeeLine::Y#2 ← phi( MakeNiceScreen::@16/(byte) 7 MakeNiceScreen::@17/(byte) $16 )
  [191] (byte) cputcxy::y#0 ← (byte) MakeTeeLine::Y#2
  [192] call cputcxy 
  to:MakeTeeLine::@1
MakeTeeLine::@1: scope:[MakeTeeLine]  from MakeTeeLine
  [193] (byte) chline::length#0 ← (volatile byte) XSize - (byte) 2
  [194] call chline 
  to:MakeTeeLine::@2
MakeTeeLine::@2: scope:[MakeTeeLine]  from MakeTeeLine::@1
  [195] phi()
  [196] call cputc 
  to:MakeTeeLine::@return
MakeTeeLine::@return: scope:[MakeTeeLine]  from MakeTeeLine::@2
  [197] return 
  to:@return

(void()) chline((byte) chline::length)
chline: scope:[chline]  from MakeNiceScreen::@13 MakeNiceScreen::@9 MakeTeeLine::@1
  [198] (byte) chline::length#4 ← phi( MakeNiceScreen::@13/(byte) chline::length#2 MakeNiceScreen::@9/(byte) chline::length#1 MakeTeeLine::@1/(byte) chline::length#0 )
  to:chline::@1
chline::@1: scope:[chline]  from chline chline::@3
  [199] (byte) chline::i#2 ← phi( chline/(byte) 0 chline::@3/(byte) chline::i#1 )
  [200] if((byte) chline::i#2<(byte) chline::length#4) goto chline::@2
  to:chline::@return
chline::@return: scope:[chline]  from chline::@1
  [201] return 
  to:@return
chline::@2: scope:[chline]  from chline::@1
  [202] phi()
  [203] call cputc 
  to:chline::@3
chline::@3: scope:[chline]  from chline::@2
  [204] (byte) chline::i#1 ← ++ (byte) chline::i#2
  to:chline::@1

(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
cputcxy: scope:[cputcxy]  from MakeNiceScreen::@8 MakeTeeLine
  [205] (byte) cputcxy::c#2 ← phi( MakeNiceScreen::@8/(const nomodify byte) CH_ULCORNER MakeTeeLine/(const nomodify byte) CH_LTEE )
  [205] (byte) cputcxy::y#2 ← phi( MakeNiceScreen::@8/(byte) 0 MakeTeeLine/(byte) cputcxy::y#0 )
  [206] (byte) gotoxy::y#2 ← (byte) cputcxy::y#2
  [207] call gotoxy 
  to:cputcxy::@1
cputcxy::@1: scope:[cputcxy]  from cputcxy
  [208] (byte) cputc::c#1 ← (byte) cputcxy::c#2
  [209] call cputc 
  to:cputcxy::@return
cputcxy::@return: scope:[cputcxy]  from cputcxy::@1
  [210] return 
  to:@return

(void()) cvlinexy((byte) cvlinexy::x , (byte) cvlinexy::y , (byte) cvlinexy::length)
cvlinexy: scope:[cvlinexy]  from MakeNiceScreen::@11 MakeNiceScreen::@15
  [211] (byte) cvlinexy::x#2 ← phi( MakeNiceScreen::@11/(byte) 0 MakeNiceScreen::@15/(byte) cvlinexy::x#1 )
  [212] (byte) gotoxy::x#5 ← (byte) cvlinexy::x#2
  [213] call gotoxy 
  to:cvlinexy::@1
cvlinexy::@1: scope:[cvlinexy]  from cvlinexy
  [214] phi()
  [215] call cvline 
  to:cvlinexy::@return
cvlinexy::@return: scope:[cvlinexy]  from cvlinexy::@1
  [216] return 
  to:@return

(void()) cvline((byte) cvline::length)
cvline: scope:[cvline]  from cvlinexy::@1
  [217] (byte) cvline::x#0 ← (byte) conio_cursor_x
  [218] (byte) cvline::y#0 ← (byte) conio_cursor_y
  to:cvline::@1
cvline::@1: scope:[cvline]  from cvline cvline::@4
  [219] (byte) cvline::y#2 ← phi( cvline/(byte) cvline::y#0 cvline::@4/(byte) cvline::y#1 )
  [219] (byte) cvline::i#2 ← phi( cvline/(byte) 0 cvline::@4/(byte) cvline::i#1 )
  [220] if((byte) cvline::i#2<(const byte) cvline::length#0) goto cvline::@2
  to:cvline::@return
cvline::@return: scope:[cvline]  from cvline::@1
  [221] return 
  to:@return
cvline::@2: scope:[cvline]  from cvline::@1
  [222] phi()
  [223] call cputc 
  to:cvline::@3
cvline::@3: scope:[cvline]  from cvline::@2
  [224] (byte) cvline::y#1 ← ++ (byte) cvline::y#2
  [225] (byte) gotoxy::x#4 ← (byte) cvline::x#0
  [226] (byte) gotoxy::y#4 ← (byte) cvline::y#1
  [227] call gotoxy 
  to:cvline::@4
cvline::@4: scope:[cvline]  from cvline::@3
  [228] (byte) cvline::i#1 ← ++ (byte) cvline::i#2
  to:cvline::@1

(byte()) cursor((byte) cursor::onoff)
cursor: scope:[cursor]  from MakeNiceScreen::@7
  [229] phi()
  to:cursor::@return
cursor::@return: scope:[cursor]  from cursor
  [230] return 
  to:@return

(byte()) bgcolor((byte) bgcolor::color)
bgcolor: scope:[bgcolor]  from MakeNiceScreen::@5
  [231] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK
  to:bgcolor::@return
bgcolor::@return: scope:[bgcolor]  from bgcolor
  [232] return 
  to:@return

(byte()) bordercolor((byte) bordercolor::color)
bordercolor: scope:[bordercolor]  from MakeNiceScreen::@4
  [233] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK
  to:bordercolor::@return
bordercolor::@return: scope:[bordercolor]  from bordercolor
  [234] return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from MakeNiceScreen::@3
  [235] (byte) conio_textcolor ← (const nomodify byte) COLOR_GRAY3
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [236] return 
  to:@return

(byte()) scroll((byte) scroll::onoff)
scroll: scope:[scroll]  from MakeNiceScreen
  [237] (byte) conio_scroll_enable ← (const byte) scroll::onoff#0
  to:scroll::@return
scroll::@return: scope:[scroll]  from scroll
  [238] return 
  to:@return

(void()) screensize((byte*) screensize::x , (byte*) screensize::y)
screensize: scope:[screensize]  from main
  [239] *((const byte*) screensize::x#0) ← (byte) $28
  [240] *((const byte*) screensize::y#0) ← (byte) $19
  to:screensize::@return
screensize::@return: scope:[screensize]  from screensize
  [241] return 
  to:@return
