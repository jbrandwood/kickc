
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) do10((void()*) do10::fn)
do10: scope:[do10]  from main main::@1
  (void()*) do10::fn#3 ← phi( main/(void()*) do10::fn#0 main::@1/(void()*) do10::fn#1 )
  (byte) do10::i#0 ← (byte) 0
  to:do10::@1
do10::@1: scope:[do10]  from do10 do10::@1
  (byte) do10::i#2 ← phi( do10/(byte) do10::i#0 do10::@1/(byte) do10::i#1 )
  (void()*) do10::fn#2 ← phi( do10/(void()*) do10::fn#3 do10::@1/(void()*) do10::fn#2 )
  call *((void()*) do10::fn#2) 
  (byte) do10::i#1 ← (byte) do10::i#2 + rangenext(0,9)
  (bool~) do10::$1 ← (byte) do10::i#1 != rangelast(0,9)
  if((bool~) do10::$1) goto do10::@1
  to:do10::@return
do10::@return: scope:[do10]  from do10::@1
  return 
  to:@return
@1: scope:[]  from @begin
  (volatile byte*) msg ← (byte*) 0
  (volatile byte) idx ← (byte) 0
  to:@2

(void()) hello()
hello: scope:[hello]  from
  (byte) hello::i#0 ← (byte) 0
  to:hello::@1
hello::@1: scope:[hello]  from hello hello::@1
  (byte) hello::i#2 ← phi( hello/(byte) hello::i#0 hello::@1/(byte) hello::i#1 )
  *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2)
  (volatile byte) idx ← ++ (volatile byte) idx
  (byte) hello::i#1 ← ++ (byte) hello::i#2
  (bool~) hello::$0 ← (number) 0 != *((volatile byte*) msg + (byte) hello::i#1)
  if((bool~) hello::$0) goto hello::@1
  to:hello::@return
hello::@return: scope:[hello]  from hello::@1
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  (volatile byte*) msg ← (const to_nomodify byte*) msg1
  (void()*) do10::fn#0 ← (const void()*) main::f
  call do10 
  to:main::@1
main::@1: scope:[main]  from main
  (volatile byte*) msg ← (const to_nomodify byte*) msg2
  (void()*) do10::fn#1 ← (const void()*) main::f
  call do10 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) do10((void()*) do10::fn)
(bool~) do10::$1
(label) do10::@1
(label) do10::@return
(void()*) do10::fn
(void()*) do10::fn#0
(void()*) do10::fn#1
(void()*) do10::fn#2
(void()*) do10::fn#3
(byte) do10::i
(byte) do10::i#0
(byte) do10::i#1
(byte) do10::i#2
(void()) hello()
(bool~) hello::$0
(label) hello::@1
(label) hello::@return
(byte) hello::i
(byte) hello::i#0
(byte) hello::i#1
(byte) hello::i#2
(volatile byte) idx loadstore
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const void()*) main::f = &(void()) hello()
(volatile byte*) msg loadstore
(const to_nomodify byte*) msg1[]  = (byte*) "hello "
(const to_nomodify byte*) msg2[]  = (byte*) "world "

Adding number conversion cast (unumber) 0 in (bool~) hello::$0 ← (number) 0 != *((volatile byte*) msg + (byte) hello::i#1)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values (void()*) do10::fn#2 (void()*) do10::fn#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) do10::$1 [6] if((byte) do10::i#1!=rangelast(0,9)) goto do10::@1
Simple Condition (bool~) hello::$0 [16] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) do10::i#0 = 0
Constant (const byte) hello::i#0 = 0
Constant (const void()*) do10::fn#0 = main::f
Constant (const void()*) do10::fn#1 = main::f
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] do10::i#1 ← ++ do10::i#2 to ++
Resolved ranged comparison value [6] if(do10::i#1!=rangelast(0,9)) goto do10::@1 to (number) $a
Adding number conversion cast (unumber) $a in if((byte) do10::i#1!=(number) $a) goto do10::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) do10::i#0
Inlining constant with var siblings (const void()*) do10::fn#0
Inlining constant with var siblings (const void()*) do10::fn#1
Inlining constant with var siblings (const byte) hello::i#0
Constant inlined hello::i#0 = (byte) 0
Constant inlined do10::i#0 = (byte) 0
Constant inlined do10::fn#1 = (const void()*) main::f
Constant inlined do10::fn#0 = (const void()*) main::f
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (void()*) do10::fn#3 (const void()*) main::f
Successful SSA optimization Pass2IdenticalPhiElimination
Replacing constant pointer function [2] call hello 
Successful SSA optimization Pass2ConstantCallPointerIdentification
Eliminating unused constant (const void()*) main::f
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting do10::@2(between do10::@1 and do10::@1)
Added new block during phi lifting hello::@2(between hello::@1 and hello::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of do10
Adding NOP phi() at start of hello
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to do10:8 do10:10 
Calls in [do10] to hello:15 

Created 2 initial phi equivalence classes
Coalesced [19] do10::i#3 ← do10::i#1
Coalesced [27] hello::i#3 ← hello::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@2
Culled Empty Block (label) do10::@2
Culled Empty Block (label) hello::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of do10
Adding NOP phi() at start of hello

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (volatile byte*) msg ← (byte*) 0
  [2] (volatile byte) idx ← (byte) 0
  to:@2
@2: scope:[]  from @1
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @2
  [5] phi()

(void()) main()
main: scope:[main]  from @2
  [6] (volatile byte*) msg ← (const to_nomodify byte*) msg1
  [7] call do10 
  to:main::@1
main::@1: scope:[main]  from main
  [8] (volatile byte*) msg ← (const to_nomodify byte*) msg2
  [9] call do10 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return 
  to:@return

(void()) do10((void()*) do10::fn)
do10: scope:[do10]  from main main::@1
  [11] phi()
  to:do10::@1
do10::@1: scope:[do10]  from do10 do10::@1
  [12] (byte) do10::i#2 ← phi( do10/(byte) 0 do10::@1/(byte) do10::i#1 )
  [13] call hello 
  [14] (byte) do10::i#1 ← ++ (byte) do10::i#2
  [15] if((byte) do10::i#1!=(byte) $a) goto do10::@1
  to:do10::@return
do10::@return: scope:[do10]  from do10::@1
  [16] return 
  to:@return

__stackcall (void()) hello()
hello: scope:[hello]  from do10::@1
  [17] phi()
  to:hello::@1
hello::@1: scope:[hello]  from hello hello::@1
  [18] (byte) hello::i#2 ← phi( hello/(byte) 0 hello::@1/(byte) hello::i#1 )
  [19] *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2)
  [20] (volatile byte) idx ← ++ (volatile byte) idx
  [21] (byte) hello::i#1 ← ++ (byte) hello::i#2
  [22] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1
  to:hello::@return
hello::@return: scope:[hello]  from hello::@1
  [23] return 
  to:@return

null depth in calling loop Loop head: do10::@1 tails: do10::@1 blocks: do10::@1  in scope hello

VARIABLE REGISTER WEIGHTS
(void()) do10((void()*) do10::fn)
(void()*) do10::fn
(byte) do10::i
(byte) do10::i#1 1501.5
(byte) do10::i#2 1001.0
__stackcall (void()) hello()
(byte) hello::i
(byte) hello::i#1 150001.5
(byte) hello::i#2 100001.0
(volatile byte) idx loadstore 16666.944444444445
(void()) main()
(volatile byte*) msg loadstore 14287.571428571428

Initial phi equivalence classes
[ do10::i#2 do10::i#1 ]
[ hello::i#2 hello::i#1 ]
Added variable msg to live range equivalence class [ msg ]
Added variable idx to live range equivalence class [ idx ]
Complete equivalence classes
[ do10::i#2 do10::i#1 ]
[ hello::i#2 hello::i#1 ]
[ msg ]
[ idx ]
Allocated zp[1]:2 [ do10::i#2 do10::i#1 ]
Allocated zp[1]:3 [ hello::i#2 hello::i#1 ]
Allocated zp[2]:4 [ msg ]
Allocated zp[1]:6 [ idx ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label msg = 4
  .label idx = 6
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte*) msg ← (byte*) 0 -- pbuz1=pbuc1 
  lda #<0
  sta.z msg
  lda #>0
  sta.z msg+1
  // [2] (volatile byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  // [3] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [4] call main 
  jsr main
  // [5] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [6] (volatile byte*) msg ← (const to_nomodify byte*) msg1 -- pbuz1=pbuc1 
    lda #<msg1
    sta.z msg
    lda #>msg1
    sta.z msg+1
    // [7] call do10 
    // [11] phi from main to do10 [phi:main->do10]
  do10_from_main:
    jsr do10
    jmp __b1
    // main::@1
  __b1:
    // [8] (volatile byte*) msg ← (const to_nomodify byte*) msg2 -- pbuz1=pbuc1 
    lda #<msg2
    sta.z msg
    lda #>msg2
    sta.z msg+1
    // [9] call do10 
    // [11] phi from main::@1 to do10 [phi:main::@1->do10]
  do10_from___b1:
    jsr do10
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // do10
do10: {
    .label i = 2
    // [12] phi from do10 to do10::@1 [phi:do10->do10::@1]
  __b1_from_do10:
    // [12] phi (byte) do10::i#2 = (byte) 0 [phi:do10->do10::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [12] phi from do10::@1 to do10::@1 [phi:do10::@1->do10::@1]
  __b1_from___b1:
    // [12] phi (byte) do10::i#2 = (byte) do10::i#1 [phi:do10::@1->do10::@1#0] -- register_copy 
    jmp __b1
    // do10::@1
  __b1:
    // [13] call hello 
    jsr hello
    // [14] (byte) do10::i#1 ← ++ (byte) do10::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [15] if((byte) do10::i#1!=(byte) $a) goto do10::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // do10::@return
  __breturn:
    // [16] return 
    rts
}
  // hello
hello: {
    .label i = 3
    // [18] phi from hello to hello::@1 [phi:hello->hello::@1]
  __b1_from_hello:
    // [18] phi (byte) hello::i#2 = (byte) 0 [phi:hello->hello::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [18] phi from hello::@1 to hello::@1 [phi:hello::@1->hello::@1]
  __b1_from___b1:
    // [18] phi (byte) hello::i#2 = (byte) hello::i#1 [phi:hello::@1->hello::@1#0] -- register_copy 
    jmp __b1
    // hello::@1
  __b1:
    // [19] *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuz3 
    ldx.z idx
    ldy.z i
    lda (msg),y
    sta SCREEN,x
    // [20] (volatile byte) idx ← ++ (volatile byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [21] (byte) hello::i#1 ← ++ (byte) hello::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [22] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1 -- vbuc1_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (msg),y
    cmp #0
    bne __b1_from___b1
    jmp __breturn
    // hello::@return
  __breturn:
    // [23] return 
    rts
}
  // File Data
  msg1: .text "hello "
  .byte 0
  msg2: .text "world "
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte*) msg ← (byte*) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) idx ← (byte) 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement [6] (volatile byte*) msg ← (const to_nomodify byte*) msg1 [ msg idx ] ( main:4 [ msg idx ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte*) msg ← (const to_nomodify byte*) msg2 [ msg idx ] ( main:4 [ msg idx ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2) [ msg idx hello::i#2 ] ( main:4::do10:7::hello:13 [ do10::i#2 msg idx hello::i#2 ] { }  main:4::do10:9::hello:13 [ do10::i#2 msg idx hello::i#2 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ do10::i#2 do10::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ do10::i#2 do10::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ hello::i#2 hello::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:3 [ hello::i#2 hello::i#1 ]
Statement [22] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1 [ msg idx hello::i#1 ] ( main:4::do10:7::hello:13 [ do10::i#2 msg idx hello::i#1 ] { }  main:4::do10:9::hello:13 [ do10::i#2 msg idx hello::i#1 ] { }  ) always clobbers reg byte a 
Statement [1] (volatile byte*) msg ← (byte*) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) idx ← (byte) 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement [6] (volatile byte*) msg ← (const to_nomodify byte*) msg1 [ msg idx ] ( main:4 [ msg idx ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte*) msg ← (const to_nomodify byte*) msg2 [ msg idx ] ( main:4 [ msg idx ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2) [ msg idx hello::i#2 ] ( main:4::do10:7::hello:13 [ do10::i#2 msg idx hello::i#2 ] { }  main:4::do10:9::hello:13 [ do10::i#2 msg idx hello::i#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [22] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1 [ msg idx hello::i#1 ] ( main:4::do10:7::hello:13 [ do10::i#2 msg idx hello::i#1 ] { }  main:4::do10:9::hello:13 [ do10::i#2 msg idx hello::i#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ do10::i#2 do10::i#1 ] : zp[1]:2 , reg byte y , 
Potential registers zp[1]:3 [ hello::i#2 hello::i#1 ] : zp[1]:3 , reg byte y , 
Potential registers zp[2]:4 [ msg ] : zp[2]:4 , 
Potential registers zp[1]:6 [ idx ] : zp[1]:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [hello] 250,002.5: zp[1]:3 [ hello::i#2 hello::i#1 ] 
Uplift Scope [] 16,666.94: zp[1]:6 [ idx ] 14,287.57: zp[2]:4 [ msg ] 
Uplift Scope [do10] 2,502.5: zp[1]:2 [ do10::i#2 do10::i#1 ] 
Uplift Scope [main] 

Uplifting [hello] best 853 combination reg byte y [ hello::i#2 hello::i#1 ] 
Uplifting [] best 853 combination zp[1]:6 [ idx ] zp[2]:4 [ msg ] 
Uplifting [do10] best 853 combination zp[1]:2 [ do10::i#2 do10::i#1 ] 
Uplifting [main] best 853 combination 
Attempting to uplift remaining variables inzp[1]:6 [ idx ]
Uplifting [] best 853 combination zp[1]:6 [ idx ] 
Attempting to uplift remaining variables inzp[1]:2 [ do10::i#2 do10::i#1 ]
Uplifting [do10] best 853 combination zp[1]:2 [ do10::i#2 do10::i#1 ] 
Allocated (was zp[2]:4) zp[2]:3 [ msg ]
Allocated (was zp[1]:6) zp[1]:5 [ idx ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label msg = 3
  .label idx = 5
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte*) msg ← (byte*) 0 -- pbuz1=pbuc1 
  lda #<0
  sta.z msg
  lda #>0
  sta.z msg+1
  // [2] (volatile byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z idx
  // [3] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [4] call main 
  jsr main
  // [5] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [6] (volatile byte*) msg ← (const to_nomodify byte*) msg1 -- pbuz1=pbuc1 
    lda #<msg1
    sta.z msg
    lda #>msg1
    sta.z msg+1
    // [7] call do10 
    // [11] phi from main to do10 [phi:main->do10]
  do10_from_main:
    jsr do10
    jmp __b1
    // main::@1
  __b1:
    // [8] (volatile byte*) msg ← (const to_nomodify byte*) msg2 -- pbuz1=pbuc1 
    lda #<msg2
    sta.z msg
    lda #>msg2
    sta.z msg+1
    // [9] call do10 
    // [11] phi from main::@1 to do10 [phi:main::@1->do10]
  do10_from___b1:
    jsr do10
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // do10
do10: {
    .label i = 2
    // [12] phi from do10 to do10::@1 [phi:do10->do10::@1]
  __b1_from_do10:
    // [12] phi (byte) do10::i#2 = (byte) 0 [phi:do10->do10::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [12] phi from do10::@1 to do10::@1 [phi:do10::@1->do10::@1]
  __b1_from___b1:
    // [12] phi (byte) do10::i#2 = (byte) do10::i#1 [phi:do10::@1->do10::@1#0] -- register_copy 
    jmp __b1
    // do10::@1
  __b1:
    // [13] call hello 
    jsr hello
    // [14] (byte) do10::i#1 ← ++ (byte) do10::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [15] if((byte) do10::i#1!=(byte) $a) goto do10::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // do10::@return
  __breturn:
    // [16] return 
    rts
}
  // hello
hello: {
    // [18] phi from hello to hello::@1 [phi:hello->hello::@1]
  __b1_from_hello:
    // [18] phi (byte) hello::i#2 = (byte) 0 [phi:hello->hello::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [18] phi from hello::@1 to hello::@1 [phi:hello::@1->hello::@1]
  __b1_from___b1:
    // [18] phi (byte) hello::i#2 = (byte) hello::i#1 [phi:hello::@1->hello::@1#0] -- register_copy 
    jmp __b1
    // hello::@1
  __b1:
    // [19] *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuyy 
    lda (msg),y
    ldx.z idx
    sta SCREEN,x
    // [20] (volatile byte) idx ← ++ (volatile byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [21] (byte) hello::i#1 ← ++ (byte) hello::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [22] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (msg),y
    cmp #0
    bne __b1_from___b1
    jmp __breturn
    // hello::@return
  __breturn:
    // [23] return 
    rts
}
  // File Data
  msg1: .text "hello "
  .byte 0
  msg2: .text "world "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __bend_from___b2:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction do10_from_main:
Removing instruction __b1:
Removing instruction do10_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_do10:
Removing instruction __breturn:
Removing instruction __b1_from_hello:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) do10((void()*) do10::fn)
(label) do10::@1
(label) do10::@return
(void()*) do10::fn
(byte) do10::i
(byte) do10::i#1 i zp[1]:2 1501.5
(byte) do10::i#2 i zp[1]:2 1001.0
__stackcall (void()) hello()
(label) hello::@1
(label) hello::@return
(byte) hello::i
(byte) hello::i#1 reg byte y 150001.5
(byte) hello::i#2 reg byte y 100001.0
(volatile byte) idx loadstore zp[1]:5 16666.944444444445
(void()) main()
(label) main::@1
(label) main::@return
(volatile byte*) msg loadstore zp[2]:3 14287.571428571428
(const to_nomodify byte*) msg1[]  = (byte*) "hello "
(const to_nomodify byte*) msg2[]  = (byte*) "world "

zp[1]:2 [ do10::i#2 do10::i#1 ]
reg byte y [ hello::i#2 hello::i#1 ]
zp[2]:3 [ msg ]
zp[1]:5 [ idx ]


FINAL ASSEMBLER
Score: 633

  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label msg = 3
  .label idx = 5
  // @begin
__bbegin:
  // @1
  // msg
  // [1] (volatile byte*) msg ← (byte*) 0 -- pbuz1=pbuc1 
  lda #<0
  sta.z msg
  sta.z msg+1
  // idx = 0
  // [2] (volatile byte) idx ← (byte) 0 -- vbuz1=vbuc1 
  sta.z idx
  // [3] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [4] call main 
  jsr main
  rts
  // [5] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // msg = msg1
    // [6] (volatile byte*) msg ← (const to_nomodify byte*) msg1 -- pbuz1=pbuc1 
    lda #<msg1
    sta.z msg
    lda #>msg1
    sta.z msg+1
    // do10(f)
    // [7] call do10 
    // [11] phi from main to do10 [phi:main->do10]
    jsr do10
    // main::@1
    // msg = msg2
    // [8] (volatile byte*) msg ← (const to_nomodify byte*) msg2 -- pbuz1=pbuc1 
    lda #<msg2
    sta.z msg
    lda #>msg2
    sta.z msg+1
    // do10(f)
    // [9] call do10 
    // [11] phi from main::@1 to do10 [phi:main::@1->do10]
    jsr do10
    // main::@return
    // }
    // [10] return 
    rts
}
  // do10
do10: {
    .label i = 2
    // [12] phi from do10 to do10::@1 [phi:do10->do10::@1]
    // [12] phi (byte) do10::i#2 = (byte) 0 [phi:do10->do10::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [12] phi from do10::@1 to do10::@1 [phi:do10::@1->do10::@1]
    // [12] phi (byte) do10::i#2 = (byte) do10::i#1 [phi:do10::@1->do10::@1#0] -- register_copy 
    // do10::@1
  __b1:
    // (*fn)()
    // [13] call hello 
    jsr hello
    // for( byte i: 0..9)
    // [14] (byte) do10::i#1 ← ++ (byte) do10::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [15] if((byte) do10::i#1!=(byte) $a) goto do10::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z i
    bne __b1
    // do10::@return
    // }
    // [16] return 
    rts
}
  // hello
hello: {
    // [18] phi from hello to hello::@1 [phi:hello->hello::@1]
    // [18] phi (byte) hello::i#2 = (byte) 0 [phi:hello->hello::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [18] phi from hello::@1 to hello::@1 [phi:hello::@1->hello::@1]
    // [18] phi (byte) hello::i#2 = (byte) hello::i#1 [phi:hello::@1->hello::@1#0] -- register_copy 
    // hello::@1
  __b1:
    // SCREEN[idx++] = msg[i++]
    // [19] *((const nomodify byte*) SCREEN + (volatile byte) idx) ← *((volatile byte*) msg + (byte) hello::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuyy 
    lda (msg),y
    ldx.z idx
    sta SCREEN,x
    // SCREEN[idx++] = msg[i++];
    // [20] (volatile byte) idx ← ++ (volatile byte) idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [21] (byte) hello::i#1 ← ++ (byte) hello::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // while(msg[i])
    // [22] if((byte) 0!=*((volatile byte*) msg + (byte) hello::i#1)) goto hello::@1 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (msg),y
    cmp #0
    bne __b1
    // hello::@return
    // }
    // [23] return 
    rts
}
  // File Data
  msg1: .text "hello "
  .byte 0
  msg2: .text "world "
  .byte 0

