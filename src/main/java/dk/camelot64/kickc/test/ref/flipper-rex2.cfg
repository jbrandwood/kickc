@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ] ( )
main: scope:[main]  from @4
  [4] phi() [ ] ( main:2 [ ] )
  [5] call prepare param-assignment [ ] ( main:2 [ ] )
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  [6] (byte) main::c#4 ← phi( main/(byte/signed byte/word/signed word) 25 main::@6/(byte) main::c#1 main::@11/(byte/signed byte/word/signed word) 25 ) [ main::c#4 ] ( main:2 [ main::c#4 ] )
  [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word) 254) goto main::@3 [ main::c#4 ] ( main:2 [ main::c#4 ] )
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [8] if(*((const byte*) RASTER#0)!=(byte/word/signed word) 255) goto main::@4 [ main::c#4 ] ( main:2 [ main::c#4 ] )
  to:main::@6
main::@6: scope:[main]  from main::@4
  [9] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:2 [ main::c#1 ] )
  [10] if((byte) main::c#1!=(byte/signed byte/word/signed word) 0) goto main::@3 [ main::c#1 ] ( main:2 [ main::c#1 ] )
  to:main::@7
main::@7: scope:[main]  from main::@6
  [11] phi() [ ] ( main:2 [ ] )
  [12] call flip param-assignment [ ] ( main:2 [ ] )
  to:main::@10
main::@10: scope:[main]  from main::@7
  [13] phi() [ ] ( main:2 [ ] )
  [14] call plot param-assignment [ ] ( main:2 [ ] )
  to:main::@11
main::@11: scope:[main]  from main::@10
  [15] if(true) goto main::@3 [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@11
  [16] return  [ ] ( main:2 [ ] )
  to:@return
plot: scope:[plot]  from main::@10
  [17] phi() [ ] ( main:2::plot:14 [ ] )
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  [18] (byte) plot::y#4 ← phi( plot/(byte/signed byte/word/signed word) 16 plot::@3/(byte) plot::y#1 ) [ plot::i#3 plot::line#4 plot::y#4 ] ( main:2::plot:14 [ plot::i#3 plot::line#4 plot::y#4 ] )
  [18] (byte*) plot::line#4 ← phi( plot/(const byte*) SCREEN#0+(byte/signed byte/word/signed word) 5*(byte/signed byte/word/signed word) 40+(byte/signed byte/word/signed word) 12 plot::@3/(byte*) plot::line#1 ) [ plot::i#3 plot::line#4 plot::y#4 ] ( main:2::plot:14 [ plot::i#3 plot::line#4 plot::y#4 ] )
  [18] (byte) plot::i#3 ← phi( plot/(byte/signed byte/word/signed word) 0 plot::@3/(byte) plot::i#1 ) [ plot::i#3 plot::line#4 plot::y#4 ] ( main:2::plot:14 [ plot::i#3 plot::line#4 plot::y#4 ] )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  [19] (byte) plot::x#2 ← phi( plot::@1/(byte/signed byte/word/signed word) 0 plot::@2/(byte) plot::x#1 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:2::plot:14 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] )
  [19] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:2::plot:14 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] )
  [20] *((byte*) plot::line#4 + (byte) plot::x#2) ← *((const byte[256]) buffer1#0 + (byte) plot::i#2) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:2::plot:14 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] )
  [21] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:2::plot:14 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] )
  [22] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:2::plot:14 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] )
  [23] if((byte) plot::x#1<(byte/signed byte/word/signed word) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:2::plot:14 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] )
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [24] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte/signed byte/word/signed word) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:2::plot:14 [ plot::y#4 plot::i#1 plot::line#1 ] )
  [25] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:2::plot:14 [ plot::i#1 plot::line#1 plot::y#1 ] )
  [26] if((byte) plot::y#1!=(byte/signed byte/word/signed word) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:2::plot:14 [ plot::i#1 plot::line#1 plot::y#1 ] )
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [27] return  [ ] ( main:2::plot:14 [ ] )
  to:@return
flip: scope:[flip]  from main::@7
  [28] phi() [ ] ( main:2::flip:12 [ ] )
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  [29] (byte) flip::r#4 ← phi( flip/(byte/signed byte/word/signed word) 16 flip::@4/(byte) flip::r#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] ( main:2::flip:12 [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] )
  [29] (byte) flip::dstIdx#5 ← phi( flip/(byte/signed byte/word/signed word) 15 flip::@4/(byte) flip::dstIdx#2 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] ( main:2::flip:12 [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] )
  [29] (byte) flip::srcIdx#3 ← phi( flip/(byte/signed byte/word/signed word) 0 flip::@4/(byte) flip::srcIdx#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] ( main:2::flip:12 [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  [30] (byte) flip::c#2 ← phi( flip::@1/(byte/signed byte/word/signed word) 16 flip::@2/(byte) flip::c#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [30] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [30] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [31] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← *((const byte[256]) buffer1#0 + (byte) flip::srcIdx#2) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [32] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] )
  [33] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte/signed byte/word/signed word) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] )
  [34] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] )
  [35] if((byte) flip::c#1!=(byte/signed byte/word/signed word) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] )
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  [36] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:2::flip:12 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] )
  [37] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:2::flip:12 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] )
  [38] if((byte) flip::r#1!=(byte/signed byte/word/signed word) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:2::flip:12 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] )
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  [39] (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte/signed byte/word/signed word) 0 ) [ flip::i#2 ] ( main:2::flip:12 [ flip::i#2 ] )
  [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← *((const byte[256]) buffer2#0 + (byte) flip::i#2) [ flip::i#2 ] ( main:2::flip:12 [ flip::i#2 ] )
  [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:2::flip:12 [ flip::i#1 ] )
  [42] if((byte) flip::i#1!=(byte/signed byte/word/signed word) 0) goto flip::@3 [ flip::i#1 ] ( main:2::flip:12 [ flip::i#1 ] )
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  [43] return  [ ] ( main:2::flip:12 [ ] )
  to:@return
prepare: scope:[prepare]  from main
  [44] phi() [ ] ( main:2::prepare:5 [ ] )
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  [45] (byte) prepare::i#2 ← phi( prepare/(byte/signed byte/word/signed word) 0 prepare::@1/(byte) prepare::i#1 ) [ prepare::i#2 ] ( main:2::prepare:5 [ prepare::i#2 ] )
  [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:2::prepare:5 [ prepare::i#2 ] )
  [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:2::prepare:5 [ prepare::i#1 ] )
  [48] if((byte) prepare::i#1!=(byte/signed byte/word/signed word) 0) goto prepare::@1 [ prepare::i#1 ] ( main:2::prepare:5 [ prepare::i#1 ] )
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [49] return  [ ] ( main:2::prepare:5 [ ] )
  to:@return
