Fixing struct type size struct foo to 14
Fixing struct type size struct foo to 14
Fixing struct type size struct foo to 14
Fixing struct type SIZE_OF struct foo to 14
Fixing struct type SIZE_OF struct foo to 14
Setting struct to load/store in variable affected by address-of main::barp = &bar

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  main::$4 = (char *)main::barp
  main::$1 = main::$4 + OFFSET_STRUCT_FOO_THING1
  main::SCREEN[main::i#0] = *main::$1
  main::i#1 = ++ main::i#0
  main::$5 = (char *)main::barp
  main::$2 = main::$5 + OFFSET_STRUCT_FOO_THING2
  main::SCREEN[main::i#1] = *main::$2
  main::i#2 = ++ main::i#1
  main::j#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#4 = phi( main/main::i#2, main::@1/main::i#3 )
  main::j#2 = phi( main/main::j#0, main::@1/main::j#1 )
  main::$6 = (char *)main::barp
  main::$3 = main::$6 + OFFSET_STRUCT_FOO_THING3
  main::SCREEN[main::i#4] = main::$3[main::j#2]
  main::i#3 = ++ main::i#4
  main::j#1 = main::j#2 + rangenext(0,$b)
  main::$0 = main::j#1 != rangelast(0,$b)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char OFFSET_STRUCT_FOO_THING1 = 0
__constant char OFFSET_STRUCT_FOO_THING2 = 1
__constant char OFFSET_STRUCT_FOO_THING3 = 2
void __start()
__loadstore volatile struct foo bar = { thing1: 'a', thing2: 'b', thing3: "qwe" }
void main()
bool main::$0
char *main::$1
char *main::$2
char *main::$3
char *main::$4
char *main::$5
char *main::$6
__constant char * const main::SCREEN = (char *)$400
__constant struct foo *main::barp = &bar
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::j
char main::j#0
char main::j#1
char main::j#2

Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$0 [17] if(main::j#1!=rangelast(0,$b)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [1] main::$4 = (char *)main::barp
Constant right-side identified [5] main::$5 = (char *)main::barp
Constant right-side identified [11] main::$6 = (char *)main::barp
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$4 = (char *)main::barp
Constant main::$5 = (char *)main::barp
Constant main::j#0 = 0
Constant main::$6 = (char *)main::barp
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [15] main::j#1 = ++ main::j#2 to ++
Resolved ranged comparison value [17] if(main::j#1!=rangelast(0,$b)) goto main::@1 to $c
Converting *(pointer+n) to pointer[n] [3] main::SCREEN[main::i#0] = *main::$1  -- main::$4[OFFSET_STRUCT_FOO_THING1]
Converting *(pointer+n) to pointer[n] [7] main::SCREEN[main::i#1] = *main::$2  -- main::$5[OFFSET_STRUCT_FOO_THING2]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$4 in [2] main::$1 = main::$4 + OFFSET_STRUCT_FOO_THING1
Simplifying expression containing zero main::$4 in [3] main::SCREEN[main::i#0] = main::$4[OFFSET_STRUCT_FOO_THING1]
Simplifying expression containing zero main::SCREEN in [3] main::SCREEN[main::i#0] = *main::$4
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::$1 and assignment [0] main::$1 = main::$4
Eliminating unused variable main::$2 and assignment [3] main::$2 = main::$5 + OFFSET_STRUCT_FOO_THING2
Eliminating unused constant OFFSET_STRUCT_FOO_THING1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $c in [9] if(main::j#1!=$c) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] main::i#1 = ++ main::i#0
Constant right-side identified [5] main::$3 = main::$6 + OFFSET_STRUCT_FOO_THING3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#1 = ++main::i#0
Constant main::$3 = main::$6+OFFSET_STRUCT_FOO_THING3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] main::i#2 = ++ main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#2 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#0
Inlining constant with var siblings main::i#1
Inlining constant with var siblings main::i#2
Constant inlined main::$5 = (char *)main::barp
Constant inlined main::i#0 = 0
Constant inlined main::$6 = (char *)main::barp
Constant inlined main::$3 = (char *)main::barp+OFFSET_STRUCT_FOO_THING3
Constant inlined main::i#2 = ++++0
Constant inlined main::$4 = (char *)main::barp
Constant inlined main::j#0 = 0
Constant inlined main::i#1 = ++0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((char *)main::barp+OFFSET_STRUCT_FOO_THING2)
Consolidated array index constant in *(main::SCREEN+++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
Finalized unsigned number type (char) $c
Finalized unsigned number type (char) $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [8] main::j#3 = main::j#1
Coalesced [9] main::i#5 = main::i#3
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = *((char *)main::barp)
  [1] *(main::SCREEN+1) = *((char *)main::barp+OFFSET_STRUCT_FOO_THING2)
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] main::i#4 = phi( main/2, main::@1/main::i#3 )
  [2] main::j#2 = phi( main/0, main::@1/main::j#1 )
  [3] main::SCREEN[main::i#4] = ((char *)main::barp+OFFSET_STRUCT_FOO_THING3)[main::j#2]
  [4] main::i#3 = ++ main::i#4
  [5] main::j#1 = ++ main::j#2
  [6] if(main::j#1!=$c) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__loadstore volatile struct foo bar = { thing1: 'a', thing2: 'b', thing3: "qwe" }
void main()
char main::i
char main::i#3 // 7.333333333333333
char main::i#4 // 16.5
char main::j
char main::j#1 // 16.5
char main::j#2 // 11.0

Initial phi equivalence classes
[ main::j#2 main::j#1 ]
[ main::i#4 main::i#3 ]
Added variable bar to live range equivalence class [ bar ]
Complete equivalence classes
[ main::j#2 main::j#1 ]
[ main::i#4 main::i#3 ]
[ bar ]
Allocated zp[1]:2 [ main::j#2 main::j#1 ]
Allocated zp[1]:3 [ main::i#4 main::i#3 ]
Allocated mem[14] [ bar ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = *((char *)main::barp) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1) = *((char *)main::barp+OFFSET_STRUCT_FOO_THING2) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] main::SCREEN[main::i#4] = ((char *)main::barp+OFFSET_STRUCT_FOO_THING3)[main::j#2] [ main::j#2 main::i#4 ] (  [ main::j#2 main::i#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#4 main::i#3 ]
Statement [0] *main::SCREEN = *((char *)main::barp) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1) = *((char *)main::barp+OFFSET_STRUCT_FOO_THING2) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] main::SCREEN[main::i#4] = ((char *)main::barp+OFFSET_STRUCT_FOO_THING3)[main::j#2] [ main::j#2 main::i#4 ] (  [ main::j#2 main::i#4 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::j#2 main::j#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i#4 main::i#3 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers mem[14] [ bar ] : mem[14] , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::j#2 main::j#1 ] 23.83: zp[1]:3 [ main::i#4 main::i#3 ] 
Uplift Scope [foo] 
Uplift Scope [] 0: mem[14] [ bar ] 

Uplifting [main] best 332 combination reg byte y [ main::j#2 main::j#1 ] reg byte x [ main::i#4 main::i#3 ] 
Uplifting [foo] best 332 combination 
Uplifting [] best 332 combination mem[14] [ bar ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value - containing a fixed size array
  // Upstart
  // Commodore 64 PRG executable file
.file [name="declared-memory-var-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  .const OFFSET_STRUCT_FOO_THING3 = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    // [0] *main::SCREEN = *((char *)main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // [1] *(main::SCREEN+1) = *((char *)main::barp+OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi main::i#4 = 2 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #2
    // [2] phi main::j#2 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [2] phi main::i#4 = main::i#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [2] phi main::j#2 = main::j#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] main::SCREEN[main::i#4] = ((char *)main::barp+OFFSET_STRUCT_FOO_THING3)[main::j#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda barp+OFFSET_STRUCT_FOO_THING3,y
    sta SCREEN,x
    // [4] main::i#3 = ++ main::i#4 -- vbuxx=_inc_vbuxx 
    inx
    // [5] main::j#1 = ++ main::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::j#1!=$c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data
.segment Data
  bar: .byte 'a', 'b'
  .text "qwe"
  .byte 0
  .fill 8, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char OFFSET_STRUCT_FOO_THING2 = 1
__constant char OFFSET_STRUCT_FOO_THING3 = 2
__loadstore volatile struct foo bar = { thing1: 'a', thing2: 'b', thing3: "qwe" } // mem[14]
void main()
__constant char * const main::SCREEN = (char *) 1024
__constant struct foo *main::barp = &bar
char main::i
char main::i#3 // reg byte x 7.333333333333333
char main::i#4 // reg byte x 16.5
char main::j
char main::j#1 // reg byte y 16.5
char main::j#2 // reg byte y 11.0

reg byte y [ main::j#2 main::j#1 ]
reg byte x [ main::i#4 main::i#3 ]
mem[14] [ bar ]


FINAL ASSEMBLER
Score: 242

  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value - containing a fixed size array
  // Upstart
  // Commodore 64 PRG executable file
.file [name="declared-memory-var-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  .const OFFSET_STRUCT_FOO_THING3 = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    // SCREEN[i++] = barp->thing1
    // [0] *main::SCREEN = *((char *)main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // SCREEN[i++] = barp->thing2
    // [1] *(main::SCREEN+1) = *((char *)main::barp+OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi main::i#4 = 2 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #2
    // [2] phi main::j#2 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [2] phi main::i#4 = main::i#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [2] phi main::j#2 = main::j#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[i++] = barp->thing3[j]
    // [3] main::SCREEN[main::i#4] = ((char *)main::barp+OFFSET_STRUCT_FOO_THING3)[main::j#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda barp+OFFSET_STRUCT_FOO_THING3,y
    sta SCREEN,x
    // SCREEN[i++] = barp->thing3[j];
    // [4] main::i#3 = ++ main::i#4 -- vbuxx=_inc_vbuxx 
    inx
    // for( char j: 0..11)
    // [5] main::j#1 = ++ main::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::j#1!=$c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data
.segment Data
  bar: .byte 'a', 'b'
  .text "qwe"
  .byte 0
  .fill 8, 0

