__constant char * const CHARGEN = (char *) 53248
__constant struct MOS6526_CIA * const CIA1 = (struct MOS6526_CIA *) 56320
__constant const char KEY_0 = $23
__constant const char KEY_1 = $38
__constant const char KEY_2 = $3b
__constant const char KEY_3 = 8
__constant const char KEY_4 = $b
__constant const char KEY_5 = $10
__constant const char KEY_6 = $13
__constant const char KEY_7 = $18
__constant const char KEY_8 = $1b
__constant const char KEY_9 = $20
__constant const char KEY_A = $a
__constant const char KEY_ARROW_LEFT = $39
__constant const char KEY_ARROW_UP = $36
__constant const char KEY_ASTERISK = $31
__constant const char KEY_AT = $2e
__constant const char KEY_B = $1c
__constant const char KEY_C = $14
__constant const char KEY_COLON = $2d
__constant const char KEY_COMMA = $2f
__constant const char KEY_D = $12
__constant const char KEY_DOT = $2c
__constant const char KEY_E = $e
__constant const char KEY_EQUALS = $35
__constant const char KEY_F = $15
__constant const char KEY_F1 = 4
__constant const char KEY_F3 = 5
__constant const char KEY_F5 = 6
__constant const char KEY_F7 = 3
__constant const char KEY_G = $1a
__constant const char KEY_H = $1d
__constant const char KEY_I = $21
__constant const char KEY_J = $22
__constant const char KEY_K = $25
__constant const char KEY_L = $2a
__constant const char KEY_LSHIFT = $f
__constant const char KEY_M = $24
__constant const char KEY_MINUS = $2b
__constant const char KEY_N = $27
__constant const char KEY_O = $26
__constant const char KEY_P = $29
__constant const char KEY_PLUS = $28
__constant const char KEY_POUND = $30
__constant const char KEY_Q = $3e
__constant const char KEY_R = $11
__constant const char KEY_S = $d
__constant const char KEY_SEMICOLON = $32
__constant const char KEY_SLASH = $37
__constant const char KEY_SPACE = $3c
__constant const char KEY_T = $16
__constant const char KEY_U = $1e
__constant const char KEY_V = $1f
__constant const char KEY_W = 9
__constant const char KEY_X = $17
__constant const char KEY_Y = $19
__constant const char KEY_Z = $c
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
__constant char * const PROCPORT = (char *) 1
__constant char *SCREEN = (char *) 1024
__constant const char keyboard_char_keycodes[] = { KEY_AT, KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, KEY_H, KEY_I, KEY_J, KEY_K, KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R, KEY_S, KEY_T, KEY_U, KEY_V, KEY_W, KEY_X, KEY_Y, KEY_Z, $3f, KEY_POUND, $3f, KEY_ARROW_UP, KEY_ARROW_LEFT, KEY_SPACE, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, KEY_ASTERISK, KEY_PLUS, KEY_COMMA, KEY_MINUS, KEY_DOT, KEY_SLASH, KEY_0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_COLON, KEY_SEMICOLON, $3f, KEY_EQUALS, $3f, $3f }
char keyboard_get_keycode(char ch)
char keyboard_get_keycode::ch
char keyboard_get_keycode::ch#0 // reg byte x 1102.0
char keyboard_get_keycode::return
char keyboard_get_keycode::return#0 // reg byte a 367.33333333333337
char keyboard_get_keycode::return#2 // reg byte a 202.0
char keyboard_key_pressed(char key)
char keyboard_key_pressed::$2 // reg byte a 2002.0
char keyboard_key_pressed::colidx
char keyboard_key_pressed::colidx#0 // reg byte y 333.6666666666667
char keyboard_key_pressed::key
char keyboard_key_pressed::key#5 // reg byte x 202.0
char keyboard_key_pressed::key#6 // reg byte x 1051.5
char keyboard_key_pressed::return
char keyboard_key_pressed::return#0 // reg byte a 144.625
char keyboard_key_pressed::return#10 // reg byte a 22.0
char keyboard_key_pressed::return#11 // reg byte a 22.0
char keyboard_key_pressed::return#12 // reg byte a 22.0
char keyboard_key_pressed::return#13 // reg byte a 22.0
char keyboard_key_pressed::return#14 // reg byte a 202.0
char keyboard_key_pressed::return#2 // reg byte a 22.0
char keyboard_key_pressed::rowidx
char keyboard_key_pressed::rowidx#0 // reg byte a 2002.0
__constant char keyboard_matrix_col_bitmask[8] = { 1, 2, 4, 8, $10, $20, $40, $80 }
char keyboard_matrix_read(char rowid)
char keyboard_matrix_read::return
char keyboard_matrix_read::return#0 // reg byte a 3667.333333333333
char keyboard_matrix_read::return#2 // reg byte a 2002.0
char keyboard_matrix_read::row_pressed_bits
char keyboard_matrix_read::rowid
char keyboard_matrix_read::rowid#0 // reg byte x 11002.0
__constant char keyboard_matrix_row_bitmask[8] = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
char main::$15 // reg byte a 22.0
char main::$18 // reg byte a 22.0
char main::$21 // reg byte a 22.0
char main::$24 // reg byte a 22.0
char main::$27 // reg byte a 22.0
char main::ch
char main::ch#1 // ch zp[1]:8 151.5
char main::ch#2 // ch zp[1]:8 25.25
char main::cur_pos
char main::cur_pos#11 // cur_pos zp[1]:9 8.52
char main::cur_pos#18 // cur_pos zp[1]:9 3.6666666666666665
char main::cur_pos#20 // cur_pos zp[1]:9 3.6666666666666665
char main::cur_pos#22 // cur_pos zp[1]:9 3.6666666666666665
char main::cur_pos#24 // cur_pos zp[1]:9 18.666666666666664
char main::i
char main::i#1 // i zp[1]:12 16.5
char main::i#2 // i zp[1]:12 11.0
char main::key
char main::key#0 // reg byte a 151.5
char main::pressed
char main::pressed#1 // reg byte a 202.0
char main::pressed#2 // reg byte a 202.0
char *main::sc
char *main::sc#1 // sc zp[2]:10 22.0
char *main::sc#2 // sc zp[2]:10 14.666666666666666
char main::shift
char main::shift#9 // shift zp[1]:13 5.315789473684211
__constant char main::str[3] = "f1"
__constant char main::str1[3] = "f3"
__constant char main::str2[3] = "f5"
__constant char main::str3[3] = "f7"
void plot_chargen(char pos , char ch , char shift)
unsigned int plot_chargen::$0 // zp[2]:6 2002.0
unsigned int plot_chargen::$15 // zp[2]:6 2002.0
char plot_chargen::$16 // reg byte a 2002.0
char plot_chargen::$17 // reg byte a 2002.0
char plot_chargen::$5 // reg byte a 2002.0
char plot_chargen::$8 // reg byte a 2.0000002E7
char plot_chargen::bits
char plot_chargen::bits#0 // bits zp[1]:2 2000002.0
char plot_chargen::bits#1 // bits zp[1]:2 6666667.333333333
char plot_chargen::bits#2 // bits zp[1]:2 4428572.0
char plot_chargen::c
char plot_chargen::c#2 // reg byte a 1.0000001E7
char plot_chargen::ch
char plot_chargen::ch#1 // reg byte a 101.0
char plot_chargen::ch#2 // reg byte a 50.5
char *plot_chargen::chargen
char *plot_chargen::chargen#0 // chargen zp[2]:6 1501.5
char *plot_chargen::chargen#1 // chargen zp[2]:6 2002.0
char *plot_chargen::chargen#4 // chargen zp[2]:6 47714.42857142857
char plot_chargen::pos
char plot_chargen::pos#0 // reg byte y 22.0
char plot_chargen::pos#1 // reg byte y 67.33333333333333
char plot_chargen::pos#2 // reg byte y 211.39999999999998
char *plot_chargen::sc
char *plot_chargen::sc#0 // sc zp[2]:3 2002.0
char *plot_chargen::sc#1 // sc zp[2]:3 5250000.75
char *plot_chargen::sc#2 // sc zp[2]:3 666667.3333333334
char *plot_chargen::sc#3 // sc zp[2]:3 5166667.333333333
char *plot_chargen::sc#7 // sc zp[2]:3 1000501.5
char plot_chargen::shift
char plot_chargen::shift#1 // reg byte x 202.0
char plot_chargen::shift#2 // reg byte x 220.39999999999998
char plot_chargen::x
char plot_chargen::x#1 // reg byte x 1.50000015E7
char plot_chargen::x#2 // reg byte x 2500000.25
char plot_chargen::y
char plot_chargen::y#1 // y zp[1]:5 1500001.5
char plot_chargen::y#2 // y zp[1]:5 230769.46153846153
void print_str_at(char *str , char *at)
char *print_str_at::at
char *print_str_at::at#4 // at zp[2]:3 101.0
char *print_str_at::at#5 // at zp[2]:3 104.66666666666666
char *print_str_at::at#7 // at zp[2]:3 11.0
char *print_str_at::str
char *print_str_at::str#4 // str zp[2]:6 202.0
char *print_str_at::str#5 // str zp[2]:6 103.75
char *print_str_at::str#7 // str zp[2]:6 11.0

zp[2]:10 [ main::sc#2 main::sc#1 ]
zp[1]:12 [ main::i#2 main::i#1 ]
zp[1]:9 [ main::cur_pos#18 main::cur_pos#20 main::cur_pos#22 main::cur_pos#24 main::cur_pos#11 ]
zp[1]:13 [ main::shift#9 ]
zp[1]:8 [ main::ch#2 main::ch#1 ]
reg byte a [ main::pressed#2 main::pressed#1 ]
reg byte a [ plot_chargen::ch#2 plot_chargen::ch#1 ]
reg byte x [ plot_chargen::shift#2 plot_chargen::shift#1 ]
reg byte y [ plot_chargen::pos#2 plot_chargen::pos#1 plot_chargen::pos#0 ]
zp[2]:6 [ plot_chargen::chargen#4 plot_chargen::chargen#0 plot_chargen::chargen#1 plot_chargen::$0 plot_chargen::$15 print_str_at::str#5 print_str_at::str#7 print_str_at::str#4 ]
zp[1]:5 [ plot_chargen::y#2 plot_chargen::y#1 ]
zp[1]:2 [ plot_chargen::bits#2 plot_chargen::bits#0 plot_chargen::bits#1 ]
zp[2]:3 [ plot_chargen::sc#3 plot_chargen::sc#7 plot_chargen::sc#0 plot_chargen::sc#2 plot_chargen::sc#1 print_str_at::at#5 print_str_at::at#7 print_str_at::at#4 ]
reg byte x [ plot_chargen::x#2 plot_chargen::x#1 ]
reg byte a [ plot_chargen::c#2 ]
reg byte x [ keyboard_key_pressed::key#6 keyboard_key_pressed::key#5 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$15 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ main::$18 ]
reg byte a [ keyboard_key_pressed::return#11 ]
reg byte a [ main::$21 ]
reg byte a [ keyboard_key_pressed::return#12 ]
reg byte a [ main::$24 ]
reg byte a [ keyboard_key_pressed::return#13 ]
reg byte a [ main::$27 ]
reg byte x [ keyboard_get_keycode::ch#0 ]
reg byte a [ keyboard_get_keycode::return#2 ]
reg byte a [ main::key#0 ]
reg byte a [ keyboard_key_pressed::return#14 ]
reg byte a [ plot_chargen::$16 ]
reg byte a [ plot_chargen::$17 ]
reg byte a [ plot_chargen::$5 ]
reg byte a [ plot_chargen::$8 ]
reg byte y [ keyboard_key_pressed::colidx#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_get_keycode::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
