Setting inferred volatile on symbol affected by address-of utoa16w::$2 = call utoa16n(utoa16w::$1, &utoa16w::dst, utoa16w::started)

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  call cls
  to:main::@1
main::@1: scope:[main]  from main
  main::screen#0 = (char *)$400
  utoa16w::value#0 = 0
  utoa16w::dst = main::screen#0
  call utoa16w
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::screen#5 = phi( main::@1/main::screen#0 )
  main::screen#1 = main::screen#5 + $28
  utoa16w::value#1 = $4d2
  utoa16w::dst = main::screen#1
  call utoa16w
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::screen#6 = phi( main::@2/main::screen#1 )
  main::screen#2 = main::screen#6 + $28
  utoa16w::value#2 = $162e
  utoa16w::dst = main::screen#2
  call utoa16w
  to:main::@4
main::@4: scope:[main]  from main::@3
  main::screen#7 = phi( main::@3/main::screen#2 )
  main::screen#3 = main::screen#7 + $28
  utoa16w::value#3 = $270f
  utoa16w::dst = main::screen#3
  call utoa16w
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::screen#8 = phi( main::@4/main::screen#3 )
  main::screen#4 = main::screen#8 + $28
  utoa16w::value#4 = $e608
  utoa16w::dst = main::screen#4
  call utoa16w
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@return
main::@return: scope:[main]  from main::@6
  return 
  to:@return

void cls()
cls: scope:[cls]  from main
  cls::$0 = cls::screen + $3e7
  cls::sc#0 = cls::screen
  to:cls::@1
cls::@1: scope:[cls]  from cls cls::@1
  cls::sc#2 = phi( cls/cls::sc#0, cls::@1/cls::sc#1 )
  *cls::sc#2 = ' '
  cls::sc#1 = cls::sc#2 + rangenext(cls::screen,cls::$0)
  cls::$1 = cls::sc#1 != rangelast(cls::screen,cls::$0)
  if(cls::$1) goto cls::@1
  to:cls::@return
cls::@return: scope:[cls]  from cls::@1
  return 
  to:@return

void utoa16w(unsigned int value , char * volatile dst)
utoa16w: scope:[utoa16w]  from main::@1 main::@2 main::@3 main::@4 main::@5
  utoa16w::value#5 = phi( main::@1/utoa16w::value#0, main::@2/utoa16w::value#1, main::@3/utoa16w::value#2, main::@4/utoa16w::value#3, main::@5/utoa16w::value#4 )
  utoa16w::started#0 = 0
  utoa16w::$0 = byte1  utoa16w::value#5
  utoa16w::$1 = utoa16w::$0 >> 4
  utoa16n::nybble#0 = utoa16w::$1
  utoa16n::dst#0 = &utoa16w::dst
  utoa16n::started#0 = utoa16w::started#0
  call utoa16n
  utoa16n::return#0 = utoa16n::return#5
  to:utoa16w::@1
utoa16w::@1: scope:[utoa16w]  from utoa16w
  utoa16w::value#6 = phi( utoa16w/utoa16w::value#5 )
  utoa16n::return#6 = phi( utoa16w/utoa16n::return#0 )
  utoa16w::$2 = utoa16n::return#6
  utoa16w::started#1 = utoa16w::$2
  utoa16w::$3 = byte1  utoa16w::value#6
  utoa16w::$4 = utoa16w::$3 & $f
  utoa16n::nybble#1 = utoa16w::$4
  utoa16n::dst#1 = &utoa16w::dst
  utoa16n::started#1 = utoa16w::started#1
  call utoa16n
  utoa16n::return#1 = utoa16n::return#5
  to:utoa16w::@2
utoa16w::@2: scope:[utoa16w]  from utoa16w::@1
  utoa16w::value#7 = phi( utoa16w::@1/utoa16w::value#6 )
  utoa16n::return#7 = phi( utoa16w::@1/utoa16n::return#1 )
  utoa16w::$5 = utoa16n::return#7
  utoa16w::started#2 = utoa16w::$5
  utoa16w::$6 = byte0  utoa16w::value#7
  utoa16w::$7 = utoa16w::$6 >> 4
  utoa16n::nybble#2 = utoa16w::$7
  utoa16n::dst#2 = &utoa16w::dst
  utoa16n::started#2 = utoa16w::started#2
  call utoa16n
  utoa16n::return#2 = utoa16n::return#5
  to:utoa16w::@3
utoa16w::@3: scope:[utoa16w]  from utoa16w::@2
  utoa16w::value#8 = phi( utoa16w::@2/utoa16w::value#7 )
  utoa16n::return#8 = phi( utoa16w::@2/utoa16n::return#2 )
  utoa16w::$8 = utoa16n::return#8
  utoa16w::started#3 = utoa16w::$8
  utoa16w::$9 = byte0  utoa16w::value#8
  utoa16w::$10 = utoa16w::$9 & $f
  utoa16n::nybble#3 = utoa16w::$10
  utoa16n::dst#3 = &utoa16w::dst
  utoa16n::started#3 = 1
  call utoa16n
  utoa16n::return#3 = utoa16n::return#5
  to:utoa16w::@4
utoa16w::@4: scope:[utoa16w]  from utoa16w::@3
  *utoa16w::dst = 0
  to:utoa16w::@return
utoa16w::@return: scope:[utoa16w]  from utoa16w::@4
  return 
  to:@return

char utoa16n(char nybble , unsigned int **dst , char started)
utoa16n: scope:[utoa16n]  from utoa16w utoa16w::@1 utoa16w::@2 utoa16w::@3
  utoa16n::dst#6 = phi( utoa16w/utoa16n::dst#0, utoa16w::@1/utoa16n::dst#1, utoa16w::@2/utoa16n::dst#2, utoa16w::@3/utoa16n::dst#3 )
  utoa16n::started#7 = phi( utoa16w/utoa16n::started#0, utoa16w::@1/utoa16n::started#1, utoa16w::@2/utoa16n::started#2, utoa16w::@3/utoa16n::started#3 )
  utoa16n::nybble#4 = phi( utoa16w/utoa16n::nybble#0, utoa16w::@1/utoa16n::nybble#1, utoa16w::@2/utoa16n::nybble#2, utoa16w::@3/utoa16n::nybble#3 )
  utoa16n::$0 = utoa16n::nybble#4 != 0
  utoa16n::$1 = ! utoa16n::$0
  if(utoa16n::$1) goto utoa16n::@1
  to:utoa16n::@3
utoa16n::@1: scope:[utoa16n]  from utoa16n utoa16n::@3
  utoa16n::dst#5 = phi( utoa16n/utoa16n::dst#6, utoa16n::@3/utoa16n::dst#7 )
  utoa16n::nybble#6 = phi( utoa16n/utoa16n::nybble#4, utoa16n::@3/utoa16n::nybble#7 )
  utoa16n::started#5 = phi( utoa16n/utoa16n::started#7, utoa16n::@3/utoa16n::started#4 )
  utoa16n::$2 = utoa16n::started#5 != 0
  utoa16n::$3 = ! utoa16n::$2
  if(utoa16n::$3) goto utoa16n::@2
  to:utoa16n::@4
utoa16n::@3: scope:[utoa16n]  from utoa16n
  utoa16n::dst#7 = phi( utoa16n/utoa16n::dst#6 )
  utoa16n::nybble#7 = phi( utoa16n/utoa16n::nybble#4 )
  utoa16n::started#4 = 1
  to:utoa16n::@1
utoa16n::@2: scope:[utoa16n]  from utoa16n::@1 utoa16n::@4
  utoa16n::started#6 = phi( utoa16n::@1/utoa16n::started#5, utoa16n::@4/utoa16n::started#8 )
  utoa16n::return#4 = utoa16n::started#6
  to:utoa16n::@return
utoa16n::@4: scope:[utoa16n]  from utoa16n::@1
  utoa16n::started#8 = phi( utoa16n::@1/utoa16n::started#5 )
  utoa16n::dst#4 = phi( utoa16n::@1/utoa16n::dst#5 )
  utoa16n::nybble#5 = phi( utoa16n::@1/utoa16n::nybble#6 )
  *(*utoa16n::dst#4) = DIGITS[utoa16n::nybble#5]
  *utoa16n::dst#4 = ++ *utoa16n::dst#4
  to:utoa16n::@2
utoa16n::@return: scope:[utoa16n]  from utoa16n::@2
  utoa16n::return#9 = phi( utoa16n::@2/utoa16n::return#4 )
  utoa16n::return#5 = utoa16n::return#9
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char DIGITS[] = "0123456789abcdef"
void __start()
void cls()
char *cls::$0
bool cls::$1
char *cls::sc
char *cls::sc#0
char *cls::sc#1
char *cls::sc#2
__constant char *cls::screen = (char *)$400
void main()
char *main::screen
char *main::screen#0
char *main::screen#1
char *main::screen#2
char *main::screen#3
char *main::screen#4
char *main::screen#5
char *main::screen#6
char *main::screen#7
char *main::screen#8
char utoa16n(char nybble , unsigned int **dst , char started)
bool utoa16n::$0
bool utoa16n::$1
bool utoa16n::$2
bool utoa16n::$3
unsigned int **utoa16n::dst
unsigned int **utoa16n::dst#0
unsigned int **utoa16n::dst#1
unsigned int **utoa16n::dst#2
unsigned int **utoa16n::dst#3
unsigned int **utoa16n::dst#4
unsigned int **utoa16n::dst#5
unsigned int **utoa16n::dst#6
unsigned int **utoa16n::dst#7
char utoa16n::nybble
char utoa16n::nybble#0
char utoa16n::nybble#1
char utoa16n::nybble#2
char utoa16n::nybble#3
char utoa16n::nybble#4
char utoa16n::nybble#5
char utoa16n::nybble#6
char utoa16n::nybble#7
char utoa16n::return
char utoa16n::return#0
char utoa16n::return#1
char utoa16n::return#2
char utoa16n::return#3
char utoa16n::return#4
char utoa16n::return#5
char utoa16n::return#6
char utoa16n::return#7
char utoa16n::return#8
char utoa16n::return#9
char utoa16n::started
char utoa16n::started#0
char utoa16n::started#1
char utoa16n::started#2
char utoa16n::started#3
char utoa16n::started#4
char utoa16n::started#5
char utoa16n::started#6
char utoa16n::started#7
char utoa16n::started#8
void utoa16w(unsigned int value , char * volatile dst)
char utoa16w::$0
char utoa16w::$1
number utoa16w::$10
char utoa16w::$2
char utoa16w::$3
number utoa16w::$4
char utoa16w::$5
char utoa16w::$6
char utoa16w::$7
char utoa16w::$8
char utoa16w::$9
__loadstore char * volatile utoa16w::dst
char utoa16w::started
char utoa16w::started#0
char utoa16w::started#1
char utoa16w::started#2
char utoa16w::started#3
unsigned int utoa16w::value
unsigned int utoa16w::value#0
unsigned int utoa16w::value#1
unsigned int utoa16w::value#2
unsigned int utoa16w::value#3
unsigned int utoa16w::value#4
unsigned int utoa16w::value#5
unsigned int utoa16w::value#6
unsigned int utoa16w::value#7
unsigned int utoa16w::value#8

Adding number conversion cast (unumber) 0 in utoa16w::value#0 = 0
Adding number conversion cast (unumber) $28 in main::screen#1 = main::screen#5 + $28
Adding number conversion cast (unumber) $4d2 in utoa16w::value#1 = $4d2
Adding number conversion cast (unumber) $28 in main::screen#2 = main::screen#6 + $28
Adding number conversion cast (unumber) $162e in utoa16w::value#2 = $162e
Adding number conversion cast (unumber) $28 in main::screen#3 = main::screen#7 + $28
Adding number conversion cast (unumber) $270f in utoa16w::value#3 = $270f
Adding number conversion cast (unumber) $28 in main::screen#4 = main::screen#8 + $28
Adding number conversion cast (unumber) $e608 in utoa16w::value#4 = $e608
Adding number conversion cast (unumber) $3e7 in cls::$0 = cls::screen + $3e7
Adding number conversion cast (unumber) 4 in utoa16w::$1 = utoa16w::$0 >> 4
Adding number conversion cast (unumber) $f in utoa16w::$4 = utoa16w::$3 & $f
Adding number conversion cast (unumber) utoa16w::$4 in utoa16w::$4 = utoa16w::$3 & (unumber)$f
Adding number conversion cast (unumber) 4 in utoa16w::$7 = utoa16w::$6 >> 4
Adding number conversion cast (unumber) $f in utoa16w::$10 = utoa16w::$9 & $f
Adding number conversion cast (unumber) utoa16w::$10 in utoa16w::$10 = utoa16w::$9 & (unumber)$f
Adding number conversion cast (unumber) 1 in utoa16n::started#3 = 1
Adding number conversion cast (unumber) 0 in *utoa16w::dst = 0
Adding number conversion cast (unumber) 0 in utoa16n::$0 = utoa16n::nybble#4 != 0
Adding number conversion cast (unumber) 0 in utoa16n::$2 = utoa16n::started#5 != 0
Adding number conversion cast (unumber) 1 in utoa16n::started#4 = 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast utoa16w::value#0 = (unumber)0
Inlining cast utoa16w::value#1 = (unumber)$4d2
Inlining cast utoa16w::value#2 = (unumber)$162e
Inlining cast utoa16w::value#3 = (unumber)$270f
Inlining cast utoa16w::value#4 = (unumber)$e608
Inlining cast utoa16n::started#3 = (unumber)1
Inlining cast *utoa16w::dst = (unumber)0
Inlining cast utoa16n::started#4 = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $4d2
Simplifying constant integer cast $28
Simplifying constant integer cast $162e
Simplifying constant integer cast $28
Simplifying constant integer cast $270f
Simplifying constant integer cast $28
Simplifying constant integer cast $e608
Simplifying constant integer cast $3e7
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $28
Finalized unsigned number type (unsigned int) $4d2
Finalized unsigned number type (char) $28
Finalized unsigned number type (unsigned int) $162e
Finalized unsigned number type (char) $28
Finalized unsigned number type (unsigned int) $270f
Finalized unsigned number type (char) $28
Finalized unsigned number type (unsigned int) $e608
Finalized unsigned number type (unsigned int) $3e7
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in utoa16w::$4 = utoa16w::$3 & $f
Inferred type updated to char in utoa16w::$10 = utoa16w::$9 & $f
Inversing boolean not [77] utoa16n::$1 = utoa16n::nybble#4 == 0 from [76] utoa16n::$0 = utoa16n::nybble#4 != 0
Inversing boolean not [81] utoa16n::$3 = utoa16n::started#5 == 0 from [80] utoa16n::$2 = utoa16n::started#5 != 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::screen#0 = main::screen#5 
Alias main::screen#1 = main::screen#6 
Alias main::screen#2 = main::screen#7 
Alias main::screen#3 = main::screen#8 
Alias utoa16n::nybble#0 = utoa16w::$1 
Alias utoa16n::return#0 = utoa16n::return#6 
Alias utoa16w::value#5 = utoa16w::value#6 utoa16w::value#7 utoa16w::value#8 
Alias utoa16w::started#1 = utoa16w::$2 
Alias utoa16n::nybble#1 = utoa16w::$4 
Alias utoa16n::return#1 = utoa16n::return#7 
Alias utoa16w::started#2 = utoa16w::$5 
Alias utoa16n::nybble#2 = utoa16w::$7 
Alias utoa16n::return#2 = utoa16n::return#8 
Alias utoa16w::started#3 = utoa16w::$8 
Alias utoa16n::nybble#3 = utoa16w::$10 
Alias utoa16n::nybble#4 = utoa16n::nybble#7 
Alias utoa16n::dst#6 = utoa16n::dst#7 
Alias utoa16n::return#4 = utoa16n::started#6 utoa16n::return#9 utoa16n::return#5 
Alias utoa16n::nybble#5 = utoa16n::nybble#6 
Alias utoa16n::dst#4 = utoa16n::dst#5 
Alias utoa16n::started#5 = utoa16n::started#8 
Successful SSA optimization Pass2AliasElimination
Alias utoa16n::nybble#4 = utoa16n::nybble#5 
Alias utoa16n::dst#4 = utoa16n::dst#6 
Alias utoa16n::return#4 = utoa16n::started#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition cls::$1 [28] if(cls::sc#1!=rangelast(cls::screen,cls::$0)) goto cls::@1
Simple Condition utoa16n::$1 [63] if(utoa16n::nybble#4==0) goto utoa16n::@1
Simple Condition utoa16n::$3 [66] if(utoa16n::return#4==0) goto utoa16n::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [22] cls::$0 = cls::screen + $3e7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::screen#0 = (char *) 1024
Constant utoa16w::value#0 = 0
Constant utoa16w::value#1 = $4d2
Constant utoa16w::value#2 = $162e
Constant utoa16w::value#3 = $270f
Constant utoa16w::value#4 = $e608
Constant cls::$0 = cls::screen+$3e7
Constant cls::sc#0 = cls::screen
Constant utoa16w::started#0 = 0
Constant utoa16n::dst#0 = &utoa16w::dst
Constant utoa16n::dst#1 = &utoa16w::dst
Constant utoa16n::dst#2 = &utoa16w::dst
Constant utoa16n::dst#3 = &utoa16w::dst
Constant utoa16n::started#3 = 1
Constant utoa16n::started#4 = 1
Successful SSA optimization Pass2ConstantIdentification
Constant utoa16n::started#0 = utoa16w::started#0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [26] cls::sc#1 = ++ cls::sc#2 to ++
Resolved ranged comparison value [28] if(cls::sc#1!=rangelast(cls::screen,cls::$0)) goto cls::@1 to (char *)cls::$0+1
Eliminating unused variable utoa16w::started#3 and assignment [38] utoa16w::started#3 = utoa16n::return#2
Eliminating unused variable utoa16n::return#3 and assignment [42] utoa16n::return#3 = utoa16n::return#4
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable utoa16n::return#2 and assignment [37] utoa16n::return#2 = utoa16n::return#4
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 1 in [19] if(cls::sc#1!=(char *)cls::$0+1) goto cls::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast cls::$0+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [3] main::screen#1 = main::screen#0 + $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::screen#1 = main::screen#0+$28
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] main::screen#2 = main::screen#1 + $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::screen#2 = main::screen#1+$28
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] main::screen#3 = main::screen#2 + $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::screen#3 = main::screen#2+$28
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [9] main::screen#4 = main::screen#3 + $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::screen#4 = main::screen#3+$28
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::screen#0
Inlining constant with different constant siblings main::screen#1
Inlining constant with different constant siblings main::screen#2
Inlining constant with different constant siblings main::screen#3
Inlining constant with different constant siblings main::screen#4
Inlining constant with var siblings cls::sc#0
Inlining constant with var siblings utoa16w::value#0
Inlining constant with var siblings utoa16w::value#1
Inlining constant with var siblings utoa16w::value#2
Inlining constant with var siblings utoa16w::value#3
Inlining constant with var siblings utoa16w::value#4
Inlining constant with var siblings utoa16w::started#0
Inlining constant with var siblings utoa16n::dst#0
Inlining constant with var siblings utoa16n::dst#1
Inlining constant with var siblings utoa16n::dst#2
Inlining constant with var siblings utoa16n::dst#3
Inlining constant with var siblings utoa16n::started#3
Inlining constant with var siblings utoa16n::started#4
Inlining constant with var siblings utoa16n::started#0
Constant inlined main::screen#0 = (char *) 1024
Constant inlined main::screen#1 = (char *) 1024+$28
Constant inlined main::screen#4 = (char *) 1024+$28+$28+$28+$28
Constant inlined utoa16w::value#2 = $162e
Constant inlined cls::sc#0 = cls::screen
Constant inlined utoa16w::value#1 = $4d2
Constant inlined main::screen#2 = (char *) 1024+$28+$28
Constant inlined utoa16w::value#0 = 0
Constant inlined main::screen#3 = (char *) 1024+$28+$28+$28
Constant inlined utoa16w::started#0 = 0
Constant inlined utoa16n::started#0 = 0
Constant inlined cls::$0 = cls::screen+$3e7
Constant inlined utoa16n::dst#1 = &utoa16w::dst
Constant inlined utoa16n::dst#0 = &utoa16w::dst
Constant inlined utoa16w::value#4 = $e608
Constant inlined utoa16w::value#3 = $270f
Constant inlined utoa16n::started#3 = 1
Constant inlined utoa16n::dst#3 = &utoa16w::dst
Constant inlined utoa16n::started#4 = 1
Constant inlined utoa16n::dst#2 = &utoa16w::dst
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values utoa16n::dst#4 &utoa16w::dst
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting cls::@2(between cls::@1 and cls::@1)
Added new block during phi lifting utoa16n::@5(between utoa16n and utoa16n::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of cls
Adding NOP phi() at start of utoa16n::@3
Adding NOP phi() at start of utoa16n::@2
CALL GRAPH
Calls in [main] to cls:1 utoa16w:3 utoa16w:5 utoa16w:7 utoa16w:9 utoa16w:11 
Calls in [utoa16w] to utoa16n:25 utoa16n:33 utoa16n:41 utoa16n:45 

Created 5 initial phi equivalence classes
Coalesced [20] cls::sc#3 = cls::sc#1
Coalesced [24] utoa16n::nybble#8 = utoa16n::nybble#0
Coalesced [31] utoa16n::nybble#9 = utoa16n::nybble#1
Coalesced [32] utoa16n::started#9 = utoa16n::started#1
Coalesced [39] utoa16n::nybble#10 = utoa16n::nybble#2
Coalesced [40] utoa16n::started#10 = utoa16n::started#2
Coalesced [44] utoa16n::nybble#11 = utoa16n::nybble#3
Coalesced [57] utoa16n::return#10 = utoa16n::started#7
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@6
Culled Empty Block label cls::@2
Culled Empty Block label utoa16n::@3
Culled Empty Block label utoa16n::@2
Renumbering block utoa16n::@4 to utoa16n::@2
Renumbering block utoa16n::@5 to utoa16n::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of cls
Adding NOP phi() at start of utoa16n::@3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call cls
  to:main::@1
main::@1: scope:[main]  from main
  [2] utoa16w::dst = (char *) 1024
  [3] call utoa16w
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] utoa16w::dst = (char *) 1024+$28
  [5] call utoa16w
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] utoa16w::dst = (char *) 1024+$28+$28
  [7] call utoa16w
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] utoa16w::dst = (char *) 1024+$28+$28+$28
  [9] call utoa16w
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] utoa16w::dst = (char *) 1024+$28+$28+$28+$28
  [11] call utoa16w
  to:main::@return
main::@return: scope:[main]  from main::@5
  [12] return 
  to:@return

void cls()
cls: scope:[cls]  from main
  [13] phi()
  to:cls::@1
cls::@1: scope:[cls]  from cls cls::@1
  [14] cls::sc#2 = phi( cls/cls::screen, cls::@1/cls::sc#1 )
  [15] *cls::sc#2 = ' '
  [16] cls::sc#1 = ++ cls::sc#2
  [17] if(cls::sc#1!=cls::screen+$3e7+1) goto cls::@1
  to:cls::@return
cls::@return: scope:[cls]  from cls::@1
  [18] return 
  to:@return

void utoa16w(unsigned int value , char * volatile dst)
utoa16w: scope:[utoa16w]  from main::@1 main::@2 main::@3 main::@4 main::@5
  [19] utoa16w::value#5 = phi( main::@1/0, main::@2/$4d2, main::@3/$162e, main::@4/$270f, main::@5/$e608 )
  [20] utoa16w::$0 = byte1  utoa16w::value#5
  [21] utoa16n::nybble#0 = utoa16w::$0 >> 4
  [22] call utoa16n
  [23] utoa16n::return#0 = utoa16n::return#4
  to:utoa16w::@1
utoa16w::@1: scope:[utoa16w]  from utoa16w
  [24] utoa16w::started#1 = utoa16n::return#0
  [25] utoa16w::$3 = byte1  utoa16w::value#5
  [26] utoa16n::nybble#1 = utoa16w::$3 & $f
  [27] utoa16n::started#1 = utoa16w::started#1
  [28] call utoa16n
  [29] utoa16n::return#1 = utoa16n::return#4
  to:utoa16w::@2
utoa16w::@2: scope:[utoa16w]  from utoa16w::@1
  [30] utoa16w::started#2 = utoa16n::return#1
  [31] utoa16w::$6 = byte0  utoa16w::value#5
  [32] utoa16n::nybble#2 = utoa16w::$6 >> 4
  [33] utoa16n::started#2 = utoa16w::started#2
  [34] call utoa16n
  to:utoa16w::@3
utoa16w::@3: scope:[utoa16w]  from utoa16w::@2
  [35] utoa16w::$9 = byte0  utoa16w::value#5
  [36] utoa16n::nybble#3 = utoa16w::$9 & $f
  [37] call utoa16n
  to:utoa16w::@4
utoa16w::@4: scope:[utoa16w]  from utoa16w::@3
  [38] *utoa16w::dst = 0
  to:utoa16w::@return
utoa16w::@return: scope:[utoa16w]  from utoa16w::@4
  [39] return 
  to:@return

char utoa16n(char nybble , unsigned int **dst , char started)
utoa16n: scope:[utoa16n]  from utoa16w utoa16w::@1 utoa16w::@2 utoa16w::@3
  [40] utoa16n::started#7 = phi( utoa16w/0, utoa16w::@1/utoa16n::started#1, utoa16w::@2/utoa16n::started#2, utoa16w::@3/1 )
  [40] utoa16n::nybble#4 = phi( utoa16w/utoa16n::nybble#0, utoa16w::@1/utoa16n::nybble#1, utoa16w::@2/utoa16n::nybble#2, utoa16w::@3/utoa16n::nybble#3 )
  [41] if(utoa16n::nybble#4==0) goto utoa16n::@3
  to:utoa16n::@1
utoa16n::@3: scope:[utoa16n]  from utoa16n
  [42] phi()
  to:utoa16n::@1
utoa16n::@1: scope:[utoa16n]  from utoa16n utoa16n::@3
  [43] utoa16n::return#4 = phi( utoa16n::@3/utoa16n::started#7, utoa16n/1 )
  [44] if(utoa16n::return#4==0) goto utoa16n::@return
  to:utoa16n::@2
utoa16n::@2: scope:[utoa16n]  from utoa16n::@1
  [45] *(*(&utoa16w::dst)) = DIGITS[utoa16n::nybble#4]
  [46] *(&utoa16w::dst) = ++ *(&utoa16w::dst)
  to:utoa16n::@return
utoa16n::@return: scope:[utoa16n]  from utoa16n::@1 utoa16n::@2
  [47] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void cls()
char *cls::sc
char *cls::sc#1 // 151.5
char *cls::sc#2 // 151.5
void main()
char *main::screen
char utoa16n(char nybble , unsigned int **dst , char started)
unsigned int **utoa16n::dst
char utoa16n::nybble
char utoa16n::nybble#0 // 22.0
char utoa16n::nybble#1 // 11.0
char utoa16n::nybble#2 // 11.0
char utoa16n::nybble#3 // 22.0
char utoa16n::nybble#4 // 49.2
char utoa16n::return
char utoa16n::return#0 // 22.0
char utoa16n::return#1 // 22.0
char utoa16n::return#4 // 32.0
char utoa16n::started
char utoa16n::started#1 // 22.0
char utoa16n::started#2 // 22.0
char utoa16n::started#7 // 41.0
void utoa16w(unsigned int value , char * volatile dst)
char utoa16w::$0 // 22.0
char utoa16w::$3 // 22.0
char utoa16w::$6 // 22.0
char utoa16w::$9 // 22.0
__loadstore char * volatile utoa16w::dst // 0.65625
char utoa16w::started
char utoa16w::started#1 // 7.333333333333333
char utoa16w::started#2 // 7.333333333333333
unsigned int utoa16w::value
unsigned int utoa16w::value#5 // 2.75

Initial phi equivalence classes
[ cls::sc#2 cls::sc#1 ]
[ utoa16w::value#5 ]
[ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ]
[ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ]
Added variable utoa16w::dst to live range equivalence class [ utoa16w::dst ]
Added variable utoa16w::$0 to live range equivalence class [ utoa16w::$0 ]
Added variable utoa16n::return#0 to live range equivalence class [ utoa16n::return#0 ]
Added variable utoa16w::started#1 to live range equivalence class [ utoa16w::started#1 ]
Added variable utoa16w::$3 to live range equivalence class [ utoa16w::$3 ]
Added variable utoa16n::return#1 to live range equivalence class [ utoa16n::return#1 ]
Added variable utoa16w::started#2 to live range equivalence class [ utoa16w::started#2 ]
Added variable utoa16w::$6 to live range equivalence class [ utoa16w::$6 ]
Added variable utoa16w::$9 to live range equivalence class [ utoa16w::$9 ]
Complete equivalence classes
[ cls::sc#2 cls::sc#1 ]
[ utoa16w::value#5 ]
[ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ]
[ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ]
[ utoa16w::dst ]
[ utoa16w::$0 ]
[ utoa16n::return#0 ]
[ utoa16w::started#1 ]
[ utoa16w::$3 ]
[ utoa16n::return#1 ]
[ utoa16w::started#2 ]
[ utoa16w::$6 ]
[ utoa16w::$9 ]
Allocated zp[2]:2 [ cls::sc#2 cls::sc#1 ]
Allocated zp[1]:4 [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ]
Allocated zp[1]:5 [ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ]
Allocated zp[1]:6 [ utoa16w::$0 ]
Allocated zp[1]:7 [ utoa16n::return#0 ]
Allocated zp[1]:8 [ utoa16w::$3 ]
Allocated zp[1]:9 [ utoa16n::return#1 ]
Allocated zp[1]:10 [ utoa16w::$6 ]
Allocated zp[1]:11 [ utoa16w::$9 ]
Allocated zp[1]:12 [ utoa16w::started#1 ]
Allocated zp[1]:13 [ utoa16w::started#2 ]
Allocated zp[2]:14 [ utoa16w::value#5 ]
Allocated zp[2]:16 [ utoa16w::dst ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] utoa16w::dst = (char *) 1024 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [4] utoa16w::dst = (char *) 1024+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [6] utoa16w::dst = (char *) 1024+$28+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [8] utoa16w::dst = (char *) 1024+$28+$28+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [10] utoa16w::dst = (char *) 1024+$28+$28+$28+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [15] *cls::sc#2 = ' ' [ cls::sc#2 ] ( cls:1 [ cls::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [17] if(cls::sc#1!=cls::screen+$3e7+1) goto cls::@1 [ cls::sc#1 ] ( cls:1 [ cls::sc#1 ] { }  ) always clobbers reg byte a 
Statement [21] utoa16n::nybble#0 = utoa16w::$0 >> 4 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] ( utoa16w:3 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:5 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:7 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:9 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:11 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  ) always clobbers reg byte a 
Statement [32] utoa16n::nybble#2 = utoa16w::$6 >> 4 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] ( utoa16w:3 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:5 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:7 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:9 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:11 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ utoa16w::started#2 ]
Statement [38] *utoa16w::dst = 0 [ ] ( utoa16w:3 [ ] { }  utoa16w:5 [ ] { }  utoa16w:7 [ ] { }  utoa16w:9 [ ] { }  utoa16w:11 [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [45] *(*(&utoa16w::dst)) = DIGITS[utoa16n::nybble#4] [ utoa16w::dst utoa16n::return#4 ] ( utoa16w:3::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:5::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:7::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:9::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:11::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:3::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:5::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:7::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:9::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:11::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:3::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:5::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:7::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:9::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:11::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:3::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:5::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:7::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:9::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:11::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ]
Statement [2] utoa16w::dst = (char *) 1024 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [4] utoa16w::dst = (char *) 1024+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [6] utoa16w::dst = (char *) 1024+$28+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [8] utoa16w::dst = (char *) 1024+$28+$28+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [10] utoa16w::dst = (char *) 1024+$28+$28+$28+$28 [ utoa16w::dst ] (  [ utoa16w::dst ] { }  ) always clobbers reg byte a 
Statement [15] *cls::sc#2 = ' ' [ cls::sc#2 ] ( cls:1 [ cls::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [17] if(cls::sc#1!=cls::screen+$3e7+1) goto cls::@1 [ cls::sc#1 ] ( cls:1 [ cls::sc#1 ] { }  ) always clobbers reg byte a 
Statement [21] utoa16n::nybble#0 = utoa16w::$0 >> 4 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] ( utoa16w:3 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:5 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:7 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:9 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:11 [ utoa16w::dst utoa16w::value#5 utoa16n::nybble#0 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  ) always clobbers reg byte a 
Statement [32] utoa16n::nybble#2 = utoa16w::$6 >> 4 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] ( utoa16w:3 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:5 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:7 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:9 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:11 [ utoa16w::dst utoa16w::value#5 utoa16w::started#2 utoa16n::nybble#2 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  ) always clobbers reg byte a 
Statement [38] *utoa16w::dst = 0 [ ] ( utoa16w:3 [ ] { }  utoa16w:5 [ ] { }  utoa16w:7 [ ] { }  utoa16w:9 [ ] { }  utoa16w:11 [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [45] *(*(&utoa16w::dst)) = DIGITS[utoa16n::nybble#4] [ utoa16w::dst utoa16n::return#4 ] ( utoa16w:3::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:5::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:7::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:9::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:11::utoa16n:22 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#0 = utoa16n::nybble#4 } { utoa16n::return#0 = utoa16n::return#4 } }  utoa16w:3::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:5::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:7::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:9::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:11::utoa16n:28 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#1 = utoa16n::nybble#4 } { utoa16n::started#1 = utoa16n::started#7 utoa16w::started#1 } { utoa16n::return#1 = utoa16n::return#4 } }  utoa16w:3::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:5::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:7::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:9::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:11::utoa16n:34 [ utoa16w::value#5 utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#2 = utoa16n::nybble#4 } { utoa16n::started#2 = utoa16n::started#7 utoa16w::started#2 } }  utoa16w:3::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:5::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:7::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:9::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  utoa16w:11::utoa16n:37 [ utoa16w::dst utoa16n::return#4 ] { { utoa16n::nybble#3 = utoa16n::nybble#4 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ cls::sc#2 cls::sc#1 ] : zp[2]:2 , 
Potential registers zp[2]:14 [ utoa16w::value#5 ] : zp[2]:14 , 
Potential registers zp[1]:5 [ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ] : zp[1]:4 , reg byte x , 
Potential registers zp[2]:16 [ utoa16w::dst ] : zp[2]:16 , 
Potential registers zp[1]:6 [ utoa16w::$0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ utoa16n::return#0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ utoa16w::started#1 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ utoa16w::$3 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ utoa16n::return#1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ utoa16w::started#2 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ utoa16w::$6 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ utoa16w::$9 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [cls] 303: zp[2]:2 [ cls::sc#2 cls::sc#1 ] 
Uplift Scope [utoa16n] 117: zp[1]:4 [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ] 115.2: zp[1]:5 [ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ] 22: zp[1]:7 [ utoa16n::return#0 ] 22: zp[1]:9 [ utoa16n::return#1 ] 
Uplift Scope [utoa16w] 22: zp[1]:6 [ utoa16w::$0 ] 22: zp[1]:8 [ utoa16w::$3 ] 22: zp[1]:10 [ utoa16w::$6 ] 22: zp[1]:11 [ utoa16w::$9 ] 7.33: zp[1]:12 [ utoa16w::started#1 ] 7.33: zp[1]:13 [ utoa16w::started#2 ] 2.75: zp[2]:14 [ utoa16w::value#5 ] 0.66: zp[2]:16 [ utoa16w::dst ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [cls] best 975 combination zp[2]:2 [ cls::sc#2 cls::sc#1 ] 
Uplifting [utoa16n] best 927 combination reg byte x [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ] reg byte a [ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ] reg byte x [ utoa16n::return#0 ] reg byte x [ utoa16n::return#1 ] 
Limited combination testing to 100 combinations of 128 possible.
Uplifting [utoa16w] best 903 combination reg byte a [ utoa16w::$0 ] reg byte a [ utoa16w::$3 ] reg byte a [ utoa16w::$6 ] reg byte a [ utoa16w::$9 ] zp[1]:12 [ utoa16w::started#1 ] zp[1]:13 [ utoa16w::started#2 ] zp[2]:14 [ utoa16w::value#5 ] zp[2]:16 [ utoa16w::dst ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [main] best 903 combination 
Uplifting [] best 903 combination 
Attempting to uplift remaining variables inzp[1]:12 [ utoa16w::started#1 ]
Uplifting [utoa16w] best 897 combination reg byte x [ utoa16w::started#1 ] 
Attempting to uplift remaining variables inzp[1]:13 [ utoa16w::started#2 ]
Uplifting [utoa16w] best 891 combination reg byte x [ utoa16w::started#2 ] 
Coalescing zero page register [ zp[2]:14 [ utoa16w::value#5 ] ] with [ zp[2]:2 [ cls::sc#2 cls::sc#1 ] ]
Allocated (was zp[2]:14) zp[2]:2 [ utoa16w::value#5 cls::sc#2 cls::sc#1 ]
Allocated (was zp[2]:16) zp[2]:4 [ utoa16w::dst ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Testing binary to hex conversion using pointer to pointer
  // Upstart
  // Commodore 64 PRG executable file
.file [name="hex2dec-ptrptr.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] call cls
    // [13] phi from main to cls [phi:main->cls] -- call_phi_near 
  cls_from_main:
    jsr cls
    jmp __b1
    // main::@1
  __b1:
    // [2] utoa16w::dst = (char *) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z utoa16w.dst
    lda #>$400
    sta.z utoa16w.dst+1
    // [3] call utoa16w
    // [19] phi from main::@1 to utoa16w [phi:main::@1->utoa16w]
  utoa16w_from___b1:
    // [19] phi utoa16w::value#5 = 0 [phi:main::@1->utoa16w#0] -- call_phi_near 
    lda #<0
    sta.z utoa16w.value
    lda #>0
    sta.z utoa16w.value+1
    jsr utoa16w
    jmp __b2
    // main::@2
  __b2:
    // [4] utoa16w::dst = (char *) 1024+$28 -- pbuz1=pbuc1 
    lda #<$400+$28
    sta.z utoa16w.dst
    lda #>$400+$28
    sta.z utoa16w.dst+1
    // [5] call utoa16w
    // [19] phi from main::@2 to utoa16w [phi:main::@2->utoa16w]
  utoa16w_from___b2:
    // [19] phi utoa16w::value#5 = $4d2 [phi:main::@2->utoa16w#0] -- call_phi_near 
    lda #<$4d2
    sta.z utoa16w.value
    lda #>$4d2
    sta.z utoa16w.value+1
    jsr utoa16w
    jmp __b3
    // main::@3
  __b3:
    // [6] utoa16w::dst = (char *) 1024+$28+$28 -- pbuz1=pbuc1 
    lda #<$400+$28+$28
    sta.z utoa16w.dst
    lda #>$400+$28+$28
    sta.z utoa16w.dst+1
    // [7] call utoa16w
    // [19] phi from main::@3 to utoa16w [phi:main::@3->utoa16w]
  utoa16w_from___b3:
    // [19] phi utoa16w::value#5 = $162e [phi:main::@3->utoa16w#0] -- call_phi_near 
    lda #<$162e
    sta.z utoa16w.value
    lda #>$162e
    sta.z utoa16w.value+1
    jsr utoa16w
    jmp __b4
    // main::@4
  __b4:
    // [8] utoa16w::dst = (char *) 1024+$28+$28+$28 -- pbuz1=pbuc1 
    lda #<$400+$28+$28+$28
    sta.z utoa16w.dst
    lda #>$400+$28+$28+$28
    sta.z utoa16w.dst+1
    // [9] call utoa16w
    // [19] phi from main::@4 to utoa16w [phi:main::@4->utoa16w]
  utoa16w_from___b4:
    // [19] phi utoa16w::value#5 = $270f [phi:main::@4->utoa16w#0] -- call_phi_near 
    lda #<$270f
    sta.z utoa16w.value
    lda #>$270f
    sta.z utoa16w.value+1
    jsr utoa16w
    jmp __b5
    // main::@5
  __b5:
    // [10] utoa16w::dst = (char *) 1024+$28+$28+$28+$28 -- pbuz1=pbuc1 
    lda #<$400+$28+$28+$28+$28
    sta.z utoa16w.dst
    lda #>$400+$28+$28+$28+$28
    sta.z utoa16w.dst+1
    // [11] call utoa16w
    // [19] phi from main::@5 to utoa16w [phi:main::@5->utoa16w]
  utoa16w_from___b5:
    // [19] phi utoa16w::value#5 = $e608 [phi:main::@5->utoa16w#0] -- call_phi_near 
    lda #<$e608
    sta.z utoa16w.value
    lda #>$e608
    sta.z utoa16w.value+1
    jsr utoa16w
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // cls
cls: {
    .label screen = $400
    .label sc = 2
    // [14] phi from cls to cls::@1 [phi:cls->cls::@1]
  __b1_from_cls:
    // [14] phi cls::sc#2 = cls::screen [phi:cls->cls::@1#0] -- pbuz1=pbuc1 
    lda #<screen
    sta.z sc
    lda #>screen
    sta.z sc+1
    jmp __b1
    // [14] phi from cls::@1 to cls::@1 [phi:cls::@1->cls::@1]
  __b1_from___b1:
    // [14] phi cls::sc#2 = cls::sc#1 [phi:cls::@1->cls::@1#0] -- register_copy 
    jmp __b1
    // cls::@1
  __b1:
    // [15] *cls::sc#2 = ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [16] cls::sc#1 = ++ cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [17] if(cls::sc#1!=cls::screen+$3e7+1) goto cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>screen+$3e7+1
    bne __b1_from___b1
    lda.z sc
    cmp #<screen+$3e7+1
    bne __b1_from___b1
    jmp __breturn
    // cls::@return
  __breturn:
    // [18] return 
    rts
}
  // utoa16w
// Hexadecimal utoa() for an unsigned int (16bits)
// void utoa16w(__zp(2) unsigned int value, __zp(4) char * volatile dst)
utoa16w: {
    .label dst = 4
    .label value = 2
    // [20] utoa16w::$0 = byte1  utoa16w::value#5 -- vbuaa=_byte1_vwuz1 
    lda.z value+1
    // [21] utoa16n::nybble#0 = utoa16w::$0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [22] call utoa16n
    // [40] phi from utoa16w to utoa16n [phi:utoa16w->utoa16n]
  utoa16n_from_utoa16w:
    // [40] phi utoa16n::started#7 = 0 [phi:utoa16w->utoa16n#0] -- vbuxx=vbuc1 
    ldx #0
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#0 [phi:utoa16w->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    // [23] utoa16n::return#0 = utoa16n::return#4
    jmp __b1
    // utoa16w::@1
  __b1:
    // [24] utoa16w::started#1 = utoa16n::return#0
    // [25] utoa16w::$3 = byte1  utoa16w::value#5 -- vbuaa=_byte1_vwuz1 
    lda.z value+1
    // [26] utoa16n::nybble#1 = utoa16w::$3 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [27] utoa16n::started#1 = utoa16w::started#1
    // [28] call utoa16n
    // [40] phi from utoa16w::@1 to utoa16n [phi:utoa16w::@1->utoa16n]
  utoa16n_from___b1:
    // [40] phi utoa16n::started#7 = utoa16n::started#1 [phi:utoa16w::@1->utoa16n#0] -- register_copy 
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#1 [phi:utoa16w::@1->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    // [29] utoa16n::return#1 = utoa16n::return#4
    jmp __b2
    // utoa16w::@2
  __b2:
    // [30] utoa16w::started#2 = utoa16n::return#1
    // [31] utoa16w::$6 = byte0  utoa16w::value#5 -- vbuaa=_byte0_vwuz1 
    lda.z value
    // [32] utoa16n::nybble#2 = utoa16w::$6 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [33] utoa16n::started#2 = utoa16w::started#2
    // [34] call utoa16n
    // [40] phi from utoa16w::@2 to utoa16n [phi:utoa16w::@2->utoa16n]
  utoa16n_from___b2:
    // [40] phi utoa16n::started#7 = utoa16n::started#2 [phi:utoa16w::@2->utoa16n#0] -- register_copy 
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#2 [phi:utoa16w::@2->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    jmp __b3
    // utoa16w::@3
  __b3:
    // [35] utoa16w::$9 = byte0  utoa16w::value#5 -- vbuaa=_byte0_vwuz1 
    lda.z value
    // [36] utoa16n::nybble#3 = utoa16w::$9 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [37] call utoa16n
    // [40] phi from utoa16w::@3 to utoa16n [phi:utoa16w::@3->utoa16n]
  utoa16n_from___b3:
    // [40] phi utoa16n::started#7 = 1 [phi:utoa16w::@3->utoa16n#0] -- vbuxx=vbuc1 
    ldx #1
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#3 [phi:utoa16w::@3->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    jmp __b4
    // utoa16w::@4
  __b4:
    // [38] *utoa16w::dst = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (dst),y
    jmp __breturn
    // utoa16w::@return
  __breturn:
    // [39] return 
    rts
}
  // utoa16n
// Hexadecimal utoa() for a single nybble
// __register(X) char utoa16n(__register(A) char nybble, unsigned int **dst, __register(X) char started)
utoa16n: {
    // [41] if(utoa16n::nybble#4==0) goto utoa16n::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from_utoa16n
    // [43] phi from utoa16n to utoa16n::@1 [phi:utoa16n->utoa16n::@1]
  __b1_from_utoa16n:
    // [43] phi utoa16n::return#4 = 1 [phi:utoa16n->utoa16n::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp __b1
    // [42] phi from utoa16n to utoa16n::@3 [phi:utoa16n->utoa16n::@3]
  __b3_from_utoa16n:
    jmp __b3
    // utoa16n::@3
  __b3:
    // [43] phi from utoa16n::@3 to utoa16n::@1 [phi:utoa16n::@3->utoa16n::@1]
  __b1_from___b3:
    // [43] phi utoa16n::return#4 = utoa16n::started#7 [phi:utoa16n::@3->utoa16n::@1#0] -- register_copy 
    jmp __b1
    // utoa16n::@1
  __b1:
    // [44] if(utoa16n::return#4==0) goto utoa16n::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __breturn
    jmp __b2
    // utoa16n::@2
  __b2:
    // [45] *(*(&utoa16w::dst)) = DIGITS[utoa16n::nybble#4] -- _deref_(_deref_qbuc1)=pbuc2_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy.z utoa16w.dst
    sty.z $fe
    ldy.z utoa16w.dst+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [46] *(&utoa16w::dst) = ++ *(&utoa16w::dst) -- _deref_qbuc1=_inc__deref_qbuc1 
    inc.z utoa16w.dst
    bne !+
    inc.z utoa16w.dst+1
  !:
    jmp __breturn
    // utoa16n::@return
  __breturn:
    // [47] return 
    rts
}
  // File Data
.segment Data
  // Digits used for utoa()
  DIGITS: .text "0123456789abcdef"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from_utoa16n with __b1
Removing instruction __b1_from___b1:
Removing instruction __b3_from_utoa16n:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction cls_from_main:
Removing instruction __b1:
Removing instruction utoa16w_from___b1:
Removing instruction __b2:
Removing instruction utoa16w_from___b2:
Removing instruction __b3:
Removing instruction utoa16w_from___b3:
Removing instruction __b4:
Removing instruction utoa16w_from___b4:
Removing instruction __b5:
Removing instruction utoa16w_from___b5:
Removing instruction __breturn:
Removing instruction __b1_from_cls:
Removing instruction __breturn:
Removing instruction utoa16n_from_utoa16w:
Removing instruction __b1:
Removing instruction utoa16n_from___b1:
Removing instruction __b2:
Removing instruction utoa16n_from___b2:
Removing instruction __b3:
Removing instruction utoa16n_from___b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_utoa16n:
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char DIGITS[] = "0123456789abcdef"
void cls()
char *cls::sc
char *cls::sc#1 // sc zp[2]:2 151.5
char *cls::sc#2 // sc zp[2]:2 151.5
__constant char *cls::screen = (char *) 1024
void main()
char *main::screen
char utoa16n(char nybble , unsigned int **dst , char started)
unsigned int **utoa16n::dst
char utoa16n::nybble
char utoa16n::nybble#0 // reg byte a 22.0
char utoa16n::nybble#1 // reg byte a 11.0
char utoa16n::nybble#2 // reg byte a 11.0
char utoa16n::nybble#3 // reg byte a 22.0
char utoa16n::nybble#4 // reg byte a 49.2
char utoa16n::return
char utoa16n::return#0 // reg byte x 22.0
char utoa16n::return#1 // reg byte x 22.0
char utoa16n::return#4 // reg byte x 32.0
char utoa16n::started
char utoa16n::started#1 // reg byte x 22.0
char utoa16n::started#2 // reg byte x 22.0
char utoa16n::started#7 // reg byte x 41.0
void utoa16w(unsigned int value , char * volatile dst)
char utoa16w::$0 // reg byte a 22.0
char utoa16w::$3 // reg byte a 22.0
char utoa16w::$6 // reg byte a 22.0
char utoa16w::$9 // reg byte a 22.0
__loadstore char * volatile utoa16w::dst // zp[2]:4 0.65625
char utoa16w::started
char utoa16w::started#1 // reg byte x 7.333333333333333
char utoa16w::started#2 // reg byte x 7.333333333333333
unsigned int utoa16w::value
unsigned int utoa16w::value#5 // value zp[2]:2 2.75

zp[2]:2 [ utoa16w::value#5 cls::sc#2 cls::sc#1 ]
reg byte a [ utoa16n::nybble#4 utoa16n::nybble#0 utoa16n::nybble#1 utoa16n::nybble#2 utoa16n::nybble#3 ]
reg byte x [ utoa16n::return#4 utoa16n::started#7 utoa16n::started#1 utoa16n::started#2 ]
zp[2]:4 [ utoa16w::dst ]
reg byte a [ utoa16w::$0 ]
reg byte x [ utoa16n::return#0 ]
reg byte x [ utoa16w::started#1 ]
reg byte a [ utoa16w::$3 ]
reg byte x [ utoa16n::return#1 ]
reg byte x [ utoa16w::started#2 ]
reg byte a [ utoa16w::$6 ]
reg byte a [ utoa16w::$9 ]


FINAL ASSEMBLER
Score: 751

  // File Comments
// Testing binary to hex conversion using pointer to pointer
  // Upstart
  // Commodore 64 PRG executable file
.file [name="hex2dec-ptrptr.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // cls()
    // [1] call cls
    // [13] phi from main to cls [phi:main->cls] -- call_phi_near 
    jsr cls
    // main::@1
    // utoa16w(00000, screen)
    // [2] utoa16w::dst = (char *) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z utoa16w.dst
    lda #>$400
    sta.z utoa16w.dst+1
    // [3] call utoa16w
    // [19] phi from main::@1 to utoa16w [phi:main::@1->utoa16w]
    // [19] phi utoa16w::value#5 = 0 [phi:main::@1->utoa16w#0] -- call_phi_near 
    lda #<0
    sta.z utoa16w.value
    sta.z utoa16w.value+1
    jsr utoa16w
    // main::@2
    // utoa16w(01234, screen)
    // [4] utoa16w::dst = (char *) 1024+$28 -- pbuz1=pbuc1 
    lda #<$400+$28
    sta.z utoa16w.dst
    lda #>$400+$28
    sta.z utoa16w.dst+1
    // [5] call utoa16w
    // [19] phi from main::@2 to utoa16w [phi:main::@2->utoa16w]
    // [19] phi utoa16w::value#5 = $4d2 [phi:main::@2->utoa16w#0] -- call_phi_near 
    lda #<$4d2
    sta.z utoa16w.value
    lda #>$4d2
    sta.z utoa16w.value+1
    jsr utoa16w
    // main::@3
    // utoa16w(05678, screen)
    // [6] utoa16w::dst = (char *) 1024+$28+$28 -- pbuz1=pbuc1 
    lda #<$400+$28+$28
    sta.z utoa16w.dst
    lda #>$400+$28+$28
    sta.z utoa16w.dst+1
    // [7] call utoa16w
    // [19] phi from main::@3 to utoa16w [phi:main::@3->utoa16w]
    // [19] phi utoa16w::value#5 = $162e [phi:main::@3->utoa16w#0] -- call_phi_near 
    lda #<$162e
    sta.z utoa16w.value
    lda #>$162e
    sta.z utoa16w.value+1
    jsr utoa16w
    // main::@4
    // utoa16w(09999, screen)
    // [8] utoa16w::dst = (char *) 1024+$28+$28+$28 -- pbuz1=pbuc1 
    lda #<$400+$28+$28+$28
    sta.z utoa16w.dst
    lda #>$400+$28+$28+$28
    sta.z utoa16w.dst+1
    // [9] call utoa16w
    // [19] phi from main::@4 to utoa16w [phi:main::@4->utoa16w]
    // [19] phi utoa16w::value#5 = $270f [phi:main::@4->utoa16w#0] -- call_phi_near 
    lda #<$270f
    sta.z utoa16w.value
    lda #>$270f
    sta.z utoa16w.value+1
    jsr utoa16w
    // main::@5
    // utoa16w(58888, screen)
    // [10] utoa16w::dst = (char *) 1024+$28+$28+$28+$28 -- pbuz1=pbuc1 
    lda #<$400+$28+$28+$28+$28
    sta.z utoa16w.dst
    lda #>$400+$28+$28+$28+$28
    sta.z utoa16w.dst+1
    // [11] call utoa16w
    // [19] phi from main::@5 to utoa16w [phi:main::@5->utoa16w]
    // [19] phi utoa16w::value#5 = $e608 [phi:main::@5->utoa16w#0] -- call_phi_near 
    lda #<$e608
    sta.z utoa16w.value
    lda #>$e608
    sta.z utoa16w.value+1
    jsr utoa16w
    // main::@return
    // }
    // [12] return 
    rts
}
  // cls
cls: {
    .label screen = $400
    .label sc = 2
    // [14] phi from cls to cls::@1 [phi:cls->cls::@1]
    // [14] phi cls::sc#2 = cls::screen [phi:cls->cls::@1#0] -- pbuz1=pbuc1 
    lda #<screen
    sta.z sc
    lda #>screen
    sta.z sc+1
    // [14] phi from cls::@1 to cls::@1 [phi:cls::@1->cls::@1]
    // [14] phi cls::sc#2 = cls::sc#1 [phi:cls::@1->cls::@1#0] -- register_copy 
    // cls::@1
  __b1:
    // *sc=' '
    // [15] *cls::sc#2 = ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // for( unsigned char *sc: screen..screen+999)
    // [16] cls::sc#1 = ++ cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [17] if(cls::sc#1!=cls::screen+$3e7+1) goto cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>screen+$3e7+1
    bne __b1
    lda.z sc
    cmp #<screen+$3e7+1
    bne __b1
    // cls::@return
    // }
    // [18] return 
    rts
}
  // utoa16w
// Hexadecimal utoa() for an unsigned int (16bits)
// void utoa16w(__zp(2) unsigned int value, __zp(4) char * volatile dst)
utoa16w: {
    .label dst = 4
    .label value = 2
    // BYTE1(value)
    // [20] utoa16w::$0 = byte1  utoa16w::value#5 -- vbuaa=_byte1_vwuz1 
    lda.z value+1
    // utoa16n(BYTE1(value)>>4, &dst, started)
    // [21] utoa16n::nybble#0 = utoa16w::$0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [22] call utoa16n
    // [40] phi from utoa16w to utoa16n [phi:utoa16w->utoa16n]
    // [40] phi utoa16n::started#7 = 0 [phi:utoa16w->utoa16n#0] -- vbuxx=vbuc1 
    ldx #0
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#0 [phi:utoa16w->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    // utoa16n(BYTE1(value)>>4, &dst, started)
    // [23] utoa16n::return#0 = utoa16n::return#4
    // utoa16w::@1
    // started = utoa16n(BYTE1(value)>>4, &dst, started)
    // [24] utoa16w::started#1 = utoa16n::return#0
    // BYTE1(value)
    // [25] utoa16w::$3 = byte1  utoa16w::value#5 -- vbuaa=_byte1_vwuz1 
    lda.z value+1
    // utoa16n(BYTE1(value)&0x0f, &dst, started)
    // [26] utoa16n::nybble#1 = utoa16w::$3 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [27] utoa16n::started#1 = utoa16w::started#1
    // [28] call utoa16n
    // [40] phi from utoa16w::@1 to utoa16n [phi:utoa16w::@1->utoa16n]
    // [40] phi utoa16n::started#7 = utoa16n::started#1 [phi:utoa16w::@1->utoa16n#0] -- register_copy 
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#1 [phi:utoa16w::@1->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    // utoa16n(BYTE1(value)&0x0f, &dst, started)
    // [29] utoa16n::return#1 = utoa16n::return#4
    // utoa16w::@2
    // started = utoa16n(BYTE1(value)&0x0f, &dst, started)
    // [30] utoa16w::started#2 = utoa16n::return#1
    // BYTE0(value)
    // [31] utoa16w::$6 = byte0  utoa16w::value#5 -- vbuaa=_byte0_vwuz1 
    lda.z value
    // utoa16n(BYTE0(value)>>4, &dst, started)
    // [32] utoa16n::nybble#2 = utoa16w::$6 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [33] utoa16n::started#2 = utoa16w::started#2
    // [34] call utoa16n
    // [40] phi from utoa16w::@2 to utoa16n [phi:utoa16w::@2->utoa16n]
    // [40] phi utoa16n::started#7 = utoa16n::started#2 [phi:utoa16w::@2->utoa16n#0] -- register_copy 
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#2 [phi:utoa16w::@2->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    // utoa16w::@3
    // BYTE0(value)
    // [35] utoa16w::$9 = byte0  utoa16w::value#5 -- vbuaa=_byte0_vwuz1 
    lda.z value
    // utoa16n(BYTE0(value)&0x0f, &dst, 1)
    // [36] utoa16n::nybble#3 = utoa16w::$9 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [37] call utoa16n
    // [40] phi from utoa16w::@3 to utoa16n [phi:utoa16w::@3->utoa16n]
    // [40] phi utoa16n::started#7 = 1 [phi:utoa16w::@3->utoa16n#0] -- vbuxx=vbuc1 
    ldx #1
    // [40] phi utoa16n::nybble#4 = utoa16n::nybble#3 [phi:utoa16w::@3->utoa16n#1] -- call_phi_near 
    jsr utoa16n
    // utoa16w::@4
    // *dst = 0
    // [38] *utoa16w::dst = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (dst),y
    // utoa16w::@return
    // }
    // [39] return 
    rts
}
  // utoa16n
// Hexadecimal utoa() for a single nybble
// __register(X) char utoa16n(__register(A) char nybble, unsigned int **dst, __register(X) char started)
utoa16n: {
    // if(nybble!=0)
    // [41] if(utoa16n::nybble#4==0) goto utoa16n::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // [43] phi from utoa16n to utoa16n::@1 [phi:utoa16n->utoa16n::@1]
    // [43] phi utoa16n::return#4 = 1 [phi:utoa16n->utoa16n::@1#0] -- vbuxx=vbuc1 
    ldx #1
    // [42] phi from utoa16n to utoa16n::@3 [phi:utoa16n->utoa16n::@3]
    // utoa16n::@3
    // [43] phi from utoa16n::@3 to utoa16n::@1 [phi:utoa16n::@3->utoa16n::@1]
    // [43] phi utoa16n::return#4 = utoa16n::started#7 [phi:utoa16n::@3->utoa16n::@1#0] -- register_copy 
    // utoa16n::@1
  __b1:
    // if(started!=0)
    // [44] if(utoa16n::return#4==0) goto utoa16n::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __breturn
    // utoa16n::@2
    // *(*dst)++ = DIGITS[nybble]
    // [45] *(*(&utoa16w::dst)) = DIGITS[utoa16n::nybble#4] -- _deref_(_deref_qbuc1)=pbuc2_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy.z utoa16w.dst
    sty.z $fe
    ldy.z utoa16w.dst+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // *(*dst)++ = DIGITS[nybble];
    // [46] *(&utoa16w::dst) = ++ *(&utoa16w::dst) -- _deref_qbuc1=_inc__deref_qbuc1 
    inc.z utoa16w.dst
    bne !+
    inc.z utoa16w.dst+1
  !:
    // utoa16n::@return
  __breturn:
    // }
    // [47] return 
    rts
}
  // File Data
.segment Data
  // Digits used for utoa()
  DIGITS: .text "0123456789abcdef"
  .byte 0

