Setting inferred volatile on symbol affected by address-of main::$0 = call foo(1, &main::y1)
Setting inferred volatile on symbol affected by address-of main::$1 = call foo(2, &main::y2)

CONTROL FLOW GRAPH SSA

int foo(char x , int *y)
foo: scope:[foo]  from main main::@1
  foo::y#2 = phi( main/foo::y#0, main::@1/foo::y#1 )
  foo::x#2 = phi( main/foo::x#0, main::@1/foo::x#1 )
  foo::$1 = foo::x#2 * SIZEOF_INT
  foo::$0 = wow[foo::$1] + *foo::y#2
  foo::return#0 = foo::$0
  to:foo::@return
foo::@return: scope:[foo]  from foo
  foo::return#4 = phi( foo/foo::return#0 )
  foo::return#1 = foo::return#4
  return 
  to:@return

void main()
main: scope:[main]  from __start
  main::SCREEN#0 = (int *)$400
  main::y1 = $1234
  main::y2 = $1234
  foo::x#0 = 1
  foo::y#0 = &main::y1
  call foo
  foo::return#2 = foo::return#1
  to:main::@1
main::@1: scope:[main]  from main
  main::SCREEN#3 = phi( main/main::SCREEN#0 )
  foo::return#5 = phi( main/foo::return#2 )
  main::$0 = foo::return#5
  *main::SCREEN#3 = main::$0
  main::SCREEN#1 = main::SCREEN#3 + SIZEOF_INT
  foo::x#1 = 2
  foo::y#1 = &main::y2
  call foo
  foo::return#3 = foo::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::SCREEN#4 = phi( main::@1/main::SCREEN#1 )
  foo::return#6 = phi( main::@1/foo::return#3 )
  main::$1 = foo::return#6
  *main::SCREEN#4 = main::$1
  main::SCREEN#2 = main::SCREEN#4 + SIZEOF_INT
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char SIZEOF_INT = 2
void __start()
int foo(char x , int *y)
int foo::$0
char foo::$1
int foo::return
int foo::return#0
int foo::return#1
int foo::return#2
int foo::return#3
int foo::return#4
int foo::return#5
int foo::return#6
char foo::x
char foo::x#0
char foo::x#1
char foo::x#2
int *foo::y
int *foo::y#0
int *foo::y#1
int *foo::y#2
void main()
int main::$0
int main::$1
int *main::SCREEN
int *main::SCREEN#0
int *main::SCREEN#1
int *main::SCREEN#2
int *main::SCREEN#3
int *main::SCREEN#4
__loadstore volatile int main::y1
__loadstore volatile int main::y2
__constant int wow[4] = { (int)$cafe, (int)$babe, $1234, $5678 }

Adding number conversion cast (unumber) 1 in foo::x#0 = 1
Adding number conversion cast (unumber) 2 in foo::x#1 = 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast foo::x#0 = (unumber)1
Inlining cast foo::x#1 = (unumber)2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $cafe
Simplifying constant integer cast $babe
Simplifying constant pointer cast (int *) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias foo::return#0 = foo::$0 foo::return#4 foo::return#1 
Alias foo::return#2 = foo::return#5 
Alias main::SCREEN#0 = main::SCREEN#3 
Alias foo::return#3 = foo::return#6 
Alias main::SCREEN#1 = main::SCREEN#4 
Successful SSA optimization Pass2AliasElimination
Constant main::SCREEN#0 = (int *) 1024
Constant foo::x#0 = 1
Constant foo::y#0 = &main::y1
Constant foo::x#1 = 2
Constant foo::y#1 = &main::y2
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [19] *main::SCREEN#1 = main::$1  -- main::SCREEN#0[SIZEOF_INT]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable main::SCREEN#2 and assignment [15] main::SCREEN#2 = main::SCREEN#1 + SIZEOF_INT
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable main::SCREEN#1 and assignment [10] main::SCREEN#1 = main::SCREEN#0 + SIZEOF_INT
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Rewriting multiplication to use shift [1] foo::$1 = foo::x#2 * SIZEOF_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings foo::x#0
Inlining constant with var siblings foo::y#0
Inlining constant with var siblings foo::x#1
Inlining constant with var siblings foo::y#1
Constant inlined foo::y#0 = &main::y1
Constant inlined foo::x#1 = 2
Constant inlined foo::y#1 = &main::y2
Constant inlined foo::x#0 = 1
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN#0+SIZEOF_INT)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type (char) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH
Calls in [main] to foo:2 foo:6 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::y1 = $1234
  [1] main::y2 = $1234
  [2] call foo
  [3] foo::return#2 = foo::return#0
  to:main::@1
main::@1: scope:[main]  from main
  [4] main::$0 = foo::return#2
  [5] *main::SCREEN#0 = main::$0
  [6] call foo
  [7] foo::return#3 = foo::return#0
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] main::$1 = foo::return#3
  [9] *(main::SCREEN#0+SIZEOF_INT) = main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

int foo(char x , int *y)
foo: scope:[foo]  from main main::@1
  [11] foo::y#2 = phi( main/&main::y1, main::@1/&main::y2 )
  [11] foo::x#2 = phi( main/1, main::@1/2 )
  [12] foo::$1 = foo::x#2 << 1
  [13] foo::return#0 = wow[foo::$1] + *foo::y#2
  to:foo::@return
foo::@return: scope:[foo]  from foo
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
int foo(char x , int *y)
char foo::$1 // 22.0
int foo::return
int foo::return#0 // 3.75
int foo::return#2 // 4.0
int foo::return#3 // 4.0
char foo::x
char foo::x#2 // 11.0
int *foo::y
int *foo::y#2 // 5.5
void main()
int main::$0 // 4.0
int main::$1 // 4.0
int *main::SCREEN
__loadstore volatile int main::y1 // 20.0
__loadstore volatile int main::y2 // 20.0

Initial phi equivalence classes
[ foo::x#2 ]
[ foo::y#2 ]
Added variable main::y1 to live range equivalence class [ main::y1 ]
Added variable main::y2 to live range equivalence class [ main::y2 ]
Added variable foo::return#2 to live range equivalence class [ foo::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable foo::return#3 to live range equivalence class [ foo::return#3 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable foo::$1 to live range equivalence class [ foo::$1 ]
Added variable foo::return#0 to live range equivalence class [ foo::return#0 ]
Complete equivalence classes
[ foo::x#2 ]
[ foo::y#2 ]
[ main::y1 ]
[ main::y2 ]
[ foo::return#2 ]
[ main::$0 ]
[ foo::return#3 ]
[ main::$1 ]
[ foo::$1 ]
[ foo::return#0 ]
Allocated zp[1]:2 [ foo::$1 ]
Allocated zp[2]:3 [ main::y1 ]
Allocated zp[2]:5 [ main::y2 ]
Allocated zp[1]:7 [ foo::x#2 ]
Allocated zp[2]:8 [ foo::y#2 ]
Allocated zp[2]:10 [ foo::return#2 ]
Allocated zp[2]:12 [ main::$0 ]
Allocated zp[2]:14 [ foo::return#3 ]
Allocated zp[2]:16 [ main::$1 ]
Allocated zp[2]:18 [ foo::return#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::y1 = $1234 [ ] (  [ ] { { foo::return#0 = foo::return#2 } }  ) always clobbers reg byte a 
Statement [1] main::y2 = $1234 [ ] (  [ ] { { foo::return#0 = foo::return#2 } }  ) always clobbers reg byte a 
Statement [3] foo::return#2 = foo::return#0 [ foo::return#2 ] (  [ foo::return#2 ] { { foo::return#0 = foo::return#2 } }  ) always clobbers reg byte a 
Statement [4] main::$0 = foo::return#2 [ main::$0 ] (  [ main::$0 ] { { foo::return#0 = foo::return#3 } }  ) always clobbers reg byte a 
Statement [5] *main::SCREEN#0 = main::$0 [ ] (  [ ] { { foo::return#0 = foo::return#3 } }  ) always clobbers reg byte a 
Statement [7] foo::return#3 = foo::return#0 [ foo::return#3 ] (  [ foo::return#3 ] { { foo::return#0 = foo::return#3 } }  ) always clobbers reg byte a 
Statement [8] main::$1 = foo::return#3 [ main::$1 ] (  [ main::$1 ] { }  ) always clobbers reg byte a 
Statement [9] *(main::SCREEN#0+SIZEOF_INT) = main::$1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [12] foo::$1 = foo::x#2 << 1 [ foo::y#2 foo::$1 ] ( foo:2 [ foo::y#2 foo::$1 ] { { foo::return#0 = foo::return#2 } }  foo:6 [ foo::y#2 foo::$1 ] { { foo::return#0 = foo::return#3 } }  ) always clobbers reg byte a 
Statement [13] foo::return#0 = wow[foo::$1] + *foo::y#2 [ foo::return#0 ] ( foo:2 [ foo::return#0 ] { { foo::return#0 = foo::return#2 } }  foo:6 [ foo::return#0 ] { { foo::return#0 = foo::return#3 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:7 [ foo::x#2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ foo::y#2 ] : zp[2]:8 , 
Potential registers zp[2]:3 [ main::y1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ main::y2 ] : zp[2]:5 , 
Potential registers zp[2]:10 [ foo::return#2 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ main::$0 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ foo::return#3 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ main::$1 ] : zp[2]:16 , 
Potential registers zp[1]:2 [ foo::$1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:18 [ foo::return#0 ] : zp[2]:18 , 

REGISTER UPLIFT SCOPES
Uplift Scope [foo] 22: zp[1]:2 [ foo::$1 ] 11: zp[1]:7 [ foo::x#2 ] 5.5: zp[2]:8 [ foo::y#2 ] 4: zp[2]:10 [ foo::return#2 ] 4: zp[2]:14 [ foo::return#3 ] 3.75: zp[2]:18 [ foo::return#0 ] 
Uplift Scope [main] 20: zp[2]:3 [ main::y1 ] 20: zp[2]:5 [ main::y2 ] 4: zp[2]:12 [ main::$0 ] 4: zp[2]:16 [ main::$1 ] 
Uplift Scope [] 

Uplifting [foo] best 194 combination reg byte a [ foo::$1 ] reg byte x [ foo::x#2 ] zp[2]:8 [ foo::y#2 ] zp[2]:10 [ foo::return#2 ] zp[2]:14 [ foo::return#3 ] zp[2]:18 [ foo::return#0 ] 
Uplifting [main] best 194 combination zp[2]:3 [ main::y1 ] zp[2]:5 [ main::y2 ] zp[2]:12 [ main::$0 ] zp[2]:16 [ main::$1 ] 
Uplifting [] best 194 combination 
Coalescing zero page register [ zp[2]:8 [ foo::y#2 ] ] with [ zp[2]:18 [ foo::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ foo::return#2 ] ] with [ zp[2]:12 [ main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ foo::return#3 ] ] with [ zp[2]:16 [ main::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ foo::y#2 foo::return#0 ] ] with [ zp[2]:10 [ foo::return#2 main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ foo::y#2 foo::return#0 foo::return#2 main::$0 ] ] with [ zp[2]:14 [ foo::return#3 main::$1 ] ] - score: 1
Allocated (was zp[2]:8) zp[2]:2 [ foo::y#2 foo::return#0 foo::return#2 main::$0 foo::return#3 main::$1 ]
Allocated (was zp[2]:3) zp[2]:4 [ main::y1 ]
Allocated (was zp[2]:5) zp[2]:6 [ main::y2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a bit of array code from the NES forum
// https://forums.nesdev.com/viewtopic.php?f=2&t=18735
  // Upstart
  // Commodore 64 PRG executable file
.file [name="nes-array.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label y1 = 4
    .label y2 = 6
    .label __0 = 2
    .label __1 = 2
    // [0] main::y1 = $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y1
    lda #>$1234
    sta.z y1+1
    // [1] main::y2 = $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y2
    lda #>$1234
    sta.z y2+1
    // [2] call foo
    // [11] phi from main to foo [phi:main->foo]
  foo_from_main:
    // [11] phi foo::y#2 = &main::y1 [phi:main->foo#0] -- pwsz1=pwsc1 
    lda #<y1
    sta.z foo.y
    lda #>y1
    sta.z foo.y+1
    // [11] phi foo::x#2 = 1 [phi:main->foo#1] -- vbuxx=vbuc1 
    ldx #1
    jsr foo
    // [3] foo::return#2 = foo::return#0
    jmp __b1
    // main::@1
  __b1:
    // [4] main::$0 = foo::return#2
    // [5] *main::SCREEN#0 = main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // [6] call foo
    // [11] phi from main::@1 to foo [phi:main::@1->foo]
  foo_from___b1:
    // [11] phi foo::y#2 = &main::y2 [phi:main::@1->foo#0] -- pwsz1=pwsc1 
    lda #<y2
    sta.z foo.y
    lda #>y2
    sta.z foo.y+1
    // [11] phi foo::x#2 = 2 [phi:main::@1->foo#1] -- vbuxx=vbuc1 
    ldx #2
    jsr foo
    // [7] foo::return#3 = foo::return#0
    jmp __b2
    // main::@2
  __b2:
    // [8] main::$1 = foo::return#3
    // [9] *(main::SCREEN#0+SIZEOF_INT) = main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+SIZEOF_INT
    lda.z __1+1
    sta SCREEN+SIZEOF_INT+1
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // foo
// __zp(2) int foo(__register(X) char x, __zp(2) int *y)
foo: {
    .label return = 2
    .label y = 2
    // [12] foo::$1 = foo::x#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [13] foo::return#0 = wow[foo::$1] + *foo::y#2 -- vwsz1=pwsc1_derefidx_vbuaa_plus__deref_pwsz1 
    tax
    ldy #0
    clc
    lda wow,x
    adc (return),y
    pha
    iny
    lda wow+1,x
    adc (return),y
    sta.z return+1
    pla
    sta.z return
    jmp __breturn
    // foo::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
.segment Data
  wow: .word $cafe, $babe, $1234, $5678

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction foo_from_main:
Removing instruction __b1:
Removing instruction foo_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char SIZEOF_INT = 2
int foo(char x , int *y)
char foo::$1 // reg byte a 22.0
int foo::return
int foo::return#0 // return zp[2]:2 3.75
int foo::return#2 // return zp[2]:2 4.0
int foo::return#3 // return zp[2]:2 4.0
char foo::x
char foo::x#2 // reg byte x 11.0
int *foo::y
int *foo::y#2 // y zp[2]:2 5.5
void main()
int main::$0 // zp[2]:2 4.0
int main::$1 // zp[2]:2 4.0
int *main::SCREEN
__constant int *main::SCREEN#0 = (int *) 1024 // SCREEN
__loadstore volatile int main::y1 // zp[2]:4 20.0
__loadstore volatile int main::y2 // zp[2]:6 20.0
__constant int wow[4] = { $cafe, $babe, $1234, $5678 }

reg byte x [ foo::x#2 ]
zp[2]:2 [ foo::y#2 foo::return#0 foo::return#2 main::$0 foo::return#3 main::$1 ]
zp[2]:4 [ main::y1 ]
zp[2]:6 [ main::y2 ]
reg byte a [ foo::$1 ]


FINAL ASSEMBLER
Score: 141

  // File Comments
// Test a bit of array code from the NES forum
// https://forums.nesdev.com/viewtopic.php?f=2&t=18735
  // Upstart
  // Commodore 64 PRG executable file
.file [name="nes-array.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label y1 = 4
    .label y2 = 6
    .label __0 = 2
    .label __1 = 2
    // int y1 = 0x1234
    // [0] main::y1 = $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y1
    lda #>$1234
    sta.z y1+1
    // int y2 = 0x1234
    // [1] main::y2 = $1234 -- vwsz1=vwsc1 
    lda #<$1234
    sta.z y2
    lda #>$1234
    sta.z y2+1
    // foo(1, &y1)
    // [2] call foo
    // [11] phi from main to foo [phi:main->foo]
    // [11] phi foo::y#2 = &main::y1 [phi:main->foo#0] -- pwsz1=pwsc1 
    lda #<y1
    sta.z foo.y
    lda #>y1
    sta.z foo.y+1
    // [11] phi foo::x#2 = 1 [phi:main->foo#1] -- vbuxx=vbuc1 
    ldx #1
    jsr foo
    // foo(1, &y1)
    // [3] foo::return#2 = foo::return#0
    // main::@1
    // [4] main::$0 = foo::return#2
    // *SCREEN++ = foo(1, &y1)
    // [5] *main::SCREEN#0 = main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // foo(2, &y2)
    // [6] call foo
    // [11] phi from main::@1 to foo [phi:main::@1->foo]
    // [11] phi foo::y#2 = &main::y2 [phi:main::@1->foo#0] -- pwsz1=pwsc1 
    lda #<y2
    sta.z foo.y
    lda #>y2
    sta.z foo.y+1
    // [11] phi foo::x#2 = 2 [phi:main::@1->foo#1] -- vbuxx=vbuc1 
    ldx #2
    jsr foo
    // foo(2, &y2)
    // [7] foo::return#3 = foo::return#0
    // main::@2
    // [8] main::$1 = foo::return#3
    // *SCREEN++ = foo(2, &y2)
    // [9] *(main::SCREEN#0+SIZEOF_INT) = main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+SIZEOF_INT
    lda.z __1+1
    sta SCREEN+SIZEOF_INT+1
    // main::@return
    // }
    // [10] return 
    rts
}
  // foo
// __zp(2) int foo(__register(X) char x, __zp(2) int *y)
foo: {
    .label return = 2
    .label y = 2
    // wow[x] + *y
    // [12] foo::$1 = foo::x#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [13] foo::return#0 = wow[foo::$1] + *foo::y#2 -- vwsz1=pwsc1_derefidx_vbuaa_plus__deref_pwsz1 
    tax
    ldy #0
    clc
    lda wow,x
    adc (return),y
    pha
    iny
    lda wow+1,x
    adc (return),y
    sta.z return+1
    pla
    sta.z return
    // foo::@return
    // }
    // [14] return 
    rts
}
  // File Data
.segment Data
  wow: .word $cafe, $babe, $1234, $5678

