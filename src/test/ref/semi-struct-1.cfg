
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call init_points 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_points 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print_points()
print_points: scope:[print_points]  from main::@1
  [5] phi()
  [6] call print_cls 
  to:print_points::@1
print_points::@1: scope:[print_points]  from print_points print_points::@7
  [7] (byte*) print_line_cursor#26 ← phi( print_points/(const byte*) print_screen#0 print_points::@7/(byte*) print_line_cursor#0 )
  [7] (byte*) print_char_cursor#48 ← phi( print_points/(const byte*) print_screen#0 print_points::@7/(byte*) print_char_cursor#66 )
  [7] (byte) print_points::i#10 ← phi( print_points/(byte) 0 print_points::@7/(byte) print_points::i#1 )
  to:print_points::getPoint1
print_points::getPoint1: scope:[print_points]  from print_points::@1
  [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1
  [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0
  to:print_points::pointXpos1
print_points::pointXpos1: scope:[print_points]  from print_points::getPoint1
  [10] phi()
  to:print_points::@2
print_points::@2: scope:[print_points]  from print_points::pointXpos1
  [11] (byte) print_uchar::b#0 ← *((const byte*) points + (byte~) print_points::getPoint1_$0)
  [12] call print_uchar 
  to:print_points::@4
print_points::@4: scope:[print_points]  from print_points::@2
  [13] phi()
  [14] call print_str 
  to:print_points::pointYpos1
print_points::pointYpos1: scope:[print_points]  from print_points::@4
  [15] phi()
  to:print_points::@3
print_points::@3: scope:[print_points]  from print_points::pointYpos1
  [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1)
  [17] call print_uchar 
  to:print_points::@5
print_points::@5: scope:[print_points]  from print_points::@3
  [18] phi()
  [19] call print_ln 
  to:print_points::@6
print_points::@6: scope:[print_points]  from print_points::@5
  [20] (byte) print_points::i#1 ← ++ (byte) print_points::i#10
  [21] if((byte) print_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto print_points::@7
  to:print_points::@return
print_points::@return: scope:[print_points]  from print_points::@6
  [22] return 
  to:@return
print_points::@7: scope:[print_points]  from print_points::@6
  [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0
  to:print_points::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from print_points::@5
  [24] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [25] (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#26 print_ln::@1/(byte*) print_line_cursor#0 )
  [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28
  [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [28] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_points::@2 print_points::@3
  [29] (byte*) print_char_cursor#45 ← phi( print_points::@2/(byte*) print_char_cursor#48 print_points::@3/(byte*) print_char_cursor#30 )
  [29] (byte) print_uchar::b#2 ← phi( print_points::@2/(byte) print_uchar::b#0 print_points::@3/(byte) print_uchar::b#1 )
  [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [31] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [32] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [34] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [35] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [36] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1
  [37] (byte*) print_char_cursor#29 ← phi( print_str::@2/(byte*) print_char_cursor#30 print_uchar/(byte*) print_char_cursor#45 print_uchar::@1/(byte*) print_char_cursor#30 )
  [37] (byte) print_char::ch#3 ← phi( print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 )
  [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3
  [39] (byte*) print_char_cursor#30 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [40] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_points::@4
  [41] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [42] (byte*) print_str::str#2 ← phi( print_str/(const byte*) print_points::str print_str::@3/(byte*) print_str::str#0 )
  [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [44] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [46] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [47] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from print_points
  [48] phi()
  [49] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [50] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [51] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [52] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [54] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [56] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) init_points()
init_points: scope:[init_points]  from main
  [57] phi()
  to:init_points::@1
init_points::@1: scope:[init_points]  from init_points init_points::@3
  [58] (byte) init_points::pos#10 ← phi( init_points/(byte) $a init_points::@3/(byte) init_points::pos#2 )
  [58] (byte) init_points::i#10 ← phi( init_points/(byte) 0 init_points::@3/(byte) init_points::i#1 )
  to:init_points::getPoint1
init_points::getPoint1: scope:[init_points]  from init_points::@1
  [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1
  [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0
  to:init_points::pointXpos1
init_points::pointXpos1: scope:[init_points]  from init_points::getPoint1
  [61] phi()
  to:init_points::@2
init_points::@2: scope:[init_points]  from init_points::pointXpos1
  [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10
  [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a
  to:init_points::pointYpos1
init_points::pointYpos1: scope:[init_points]  from init_points::@2
  [64] phi()
  to:init_points::@3
init_points::@3: scope:[init_points]  from init_points::pointYpos1
  [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1
  [66] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a
  [67] (byte) init_points::i#1 ← ++ (byte) init_points::i#10
  [68] if((byte) init_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto init_points::@1
  to:init_points::@return
init_points::@return: scope:[init_points]  from init_points::@3
  [69] return 
  to:@return
