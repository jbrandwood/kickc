
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] plex_show_idx = 0
  [2] plex_sprite_idx = 0
  [3] plex_sprite_msb = 1
  [4] plex_free_next = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  asm { sei  }
  [9] call init 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call loop 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call exit 
  to:main::@3
main::@3: scope:[main]  from main::@2
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main::@3
  [15] return 
  to:@return

void init()
init: scope:[init]  from main
  [16] *D011 = VIC_DEN|VIC_RSEL|3
  [17] call plexInit 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [18] init::i#2 = phi( init::@1/init::i#1, init/0 )
  [19] PLEX_PTR[init::i#2] = (byte)SPRITE/$40
  [20] init::$10 = init::i#2 << 2
  [21] init::$3 = init::$10 + init::i#2
  [22] init::$4 = $18 + init::$3
  [23] init::$9 = init::i#2 << 1
  [24] PLEX_XPOS[init::$9] = init::$4
  [25] init::$5 = init::i#2 << 3
  [26] init::$6 = $32 + init::$5
  [27] PLEX_YPOS[init::i#2] = init::$6
  [28] init::i#1 = ++ init::i#2
  [29] if(init::i#1!=PLEX_COUNT-1+1) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [30] *SPRITES_ENABLE = $ff
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  [31] init::i1#2 = phi( init::@2/0, init::@3/init::i1#1 )
  [32] SPRITES_COLOR[init::i1#2] = GREEN
  [33] init::i1#1 = ++ init::i1#2
  [34] if(init::i1#1!=8) goto init::@3
  to:init::@4
init::@4: scope:[init]  from init::@3
  [35] phi()
  [36] call mulf_init 
  to:init::@5
init::@5: scope:[init]  from init::@4
  [37] phi()
  [38] call memset 
  to:init::@return
init::@return: scope:[init]  from init::@5
  [39] return 
  to:@return

void loop()
loop: scope:[loop]  from main::@1
  [40] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@15
  [41] loop::angle#6 = phi( loop/0, loop::@15/loop::angle#1 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [42] if(*RASTER<$d8) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [43] *BORDER_COLOR = $f
  [44] loop::a#6 = loop::angle#6
  to:loop::@4
loop::@4: scope:[loop]  from loop::@12 loop::@3
  [45] loop::i#2 = phi( loop::@12/loop::i#1, loop::@3/0 )
  [45] loop::a#2 = phi( loop::@12/loop::a#1, loop::@3/loop::a#6 )
  [45] loop::r#2 = phi( loop::@12/loop::r#1, loop::@3/$1e )
  [46] *BORDER_COLOR = 6
  [47] mulf8s::a#0 = loop::r#2
  [48] mulf8s::b#0 = COS[loop::a#2]
  [49] call mulf8s 
  [50] mulf8s::return#2 = mulf8s::return#0
  to:loop::@11
loop::@11: scope:[loop]  from loop::@4
  [51] loop::$1 = mulf8s::return#2
  [52] loop::$2 = loop::$1 << 1
  [53] loop::x#0 = loop::$2 + (signed word)$7d*$100
  [54] loop::$4 = > loop::x#0
  [55] loop::$20 = loop::i#2 << 1
  [56] PLEX_XPOS[loop::$20] = loop::$4
  [57] mulf8s::a#1 = loop::r#2
  [58] mulf8s::b#1 = SIN[loop::a#2]
  [59] call mulf8s 
  [60] mulf8s::return#3 = mulf8s::return#0
  to:loop::@12
loop::@12: scope:[loop]  from loop::@11
  [61] loop::$5 = mulf8s::return#3
  [62] loop::$6 = loop::$5 << 1
  [63] loop::y#0 = loop::$6 + (signed word)$7d*$100
  [64] loop::$8 = > loop::y#0
  [65] PLEX_YPOS[loop::i#2] = loop::$8
  [66] loop::a#1 = loop::a#2 + $62
  [67] loop::r#1 = loop::r#2 + 3
  [68] loop::i#1 = ++ loop::i#2
  [69] if(loop::i#1!=NUM_BOBS-1+1) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@12
  [70] *BORDER_COLOR = 3
  [71] call plexSort 
  to:loop::@13
loop::@13: scope:[loop]  from loop::@5
  [72] loop::angle#1 = loop::angle#6 + 3
  [73] *BORDER_COLOR = BLACK
  to:loop::@6
loop::@6: scope:[loop]  from loop::@13 loop::@6
  [74] loop::$11 = *D011 & VIC_RST8
  [75] if(loop::$11!=0) goto loop::@6
  to:loop::@7
loop::@7: scope:[loop]  from loop::@14 loop::@6
  [76] loop::i1#5 = phi( loop::@14/loop::i1#1, loop::@6/0 )
  [77] *BORDER_COLOR = BLACK
  to:loop::plexFreeNextYpos1
loop::plexFreeNextYpos1: scope:[loop]  from loop::@7
  [78] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next]
  to:loop::@8
loop::@8: scope:[loop]  from loop::@8 loop::plexFreeNextYpos1
  [79] if(*RASTER<loop::plexFreeNextYpos1_return#0) goto loop::@8
  to:loop::@9
loop::@9: scope:[loop]  from loop::@8
  [80] *BORDER_COLOR = ++ *BORDER_COLOR
  [81] call plexShowSprite 
  to:loop::@14
loop::@14: scope:[loop]  from loop::@9
  [82] loop::i1#1 = ++ loop::i1#5
  [83] if(loop::i1#1!=PLEX_COUNT-1+1) goto loop::@7
  to:loop::@10
loop::@10: scope:[loop]  from loop::@14
  [84] *BORDER_COLOR = BLACK
  [85] call keyboard_key_pressed 
  [86] keyboard_key_pressed::return#3 = keyboard_key_pressed::return#0
  to:loop::@15
loop::@15: scope:[loop]  from loop::@10
  [87] loop::$18 = keyboard_key_pressed::return#3
  [88] if(0!=loop::$18) goto loop::@return
  to:loop::@1
loop::@return: scope:[loop]  from loop::@15
  [89] return 
  to:@return

void exit()
exit: scope:[exit]  from main::@2
  [90] phi()
  to:exit::@1
exit::@1: scope:[exit]  from exit exit::@2
  [91] phi()
  [92] call keyboard_key_pressed 
  [93] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
  to:exit::@2
exit::@2: scope:[exit]  from exit::@1
  [94] exit::$0 = keyboard_key_pressed::return#2
  [95] if(0!=exit::$0) goto exit::@1
  to:exit::@return
exit::@return: scope:[exit]  from exit::@2
  [96] return 
  to:@return

void plexInit(byte* plexInit::screen)
plexInit: scope:[plexInit]  from init
  [97] phi()
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  [98] phi()
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::plexSetScreen1
  [99] plexInit::i#2 = phi( plexInit::@1/plexInit::i#1, plexInit::plexSetScreen1/0 )
  [100] PLEX_SORTED_IDX[plexInit::i#2] = plexInit::i#2
  [101] plexInit::i#1 = ++ plexInit::i#2
  [102] if(plexInit::i#1!=PLEX_COUNT-1+1) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  [103] return 
  to:@return

void mulf_init()
mulf_init: scope:[mulf_init]  from init::@4
  [104] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [105] mulf_init::x_2#3 = phi( mulf_init/0, mulf_init::@3/mulf_init::x_2#2 )
  [105] mulf_init::sqr1_hi#2 = phi( mulf_init/mulf_sqr1_hi+1, mulf_init::@3/mulf_init::sqr1_hi#1 )
  [105] mulf_init::sqr#4 = phi( mulf_init/0, mulf_init::@3/mulf_init::sqr#1 )
  [105] mulf_init::c#2 = phi( mulf_init/0, mulf_init::@3/mulf_init::c#1 )
  [105] mulf_init::sqr1_lo#2 = phi( mulf_init/mulf_sqr1_lo+1, mulf_init::@3/mulf_init::sqr1_lo#1 )
  [106] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [107] mulf_init::dir#2 = phi( mulf_init::@1/$ff, mulf_init::@8/mulf_init::dir#4 )
  [107] mulf_init::sqr2_hi#2 = phi( mulf_init::@1/mulf_sqr2_hi, mulf_init::@8/mulf_init::sqr2_hi#1 )
  [107] mulf_init::x_255#2 = phi( mulf_init::@1/-1, mulf_init::@8/mulf_init::x_255#1 )
  [107] mulf_init::sqr2_lo#2 = phi( mulf_init::@1/mulf_sqr2_lo, mulf_init::@8/mulf_init::sqr2_lo#1 )
  [108] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [109] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
  [110] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [111] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [112] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2]
  [113] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2]
  [114] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2
  [115] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2
  [116] if(mulf_init::x_255#1!=0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [117] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [118] mulf_init::dir#4 = phi( mulf_init::@6/1, mulf_init::@9/mulf_init::dir#2 )
  [119] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [120] mulf_init::c#1 = ++ mulf_init::c#2
  [121] mulf_init::$1 = mulf_init::c#1 & 1
  [122] if(mulf_init::$1!=0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [123] mulf_init::x_2#1 = ++ mulf_init::x_2#3
  [124] mulf_init::sqr#2 = ++ mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [125] mulf_init::x_2#2 = phi( mulf_init::@2/mulf_init::x_2#3, mulf_init::@4/mulf_init::x_2#1 )
  [125] mulf_init::sqr#3 = phi( mulf_init::@2/mulf_init::sqr#4, mulf_init::@4/mulf_init::sqr#2 )
  [126] mulf_init::$4 = < mulf_init::sqr#3
  [127] *mulf_init::sqr1_lo#2 = mulf_init::$4
  [128] mulf_init::$5 = > mulf_init::sqr#3
  [129] *mulf_init::sqr1_hi#2 = mulf_init::$5
  [130] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2
  [131] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2
  [132] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2
  to:mulf_init::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from init::@5
  [133] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [134] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [135] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [136] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [137] *memset::dst#2 = memset::c#0
  [138] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
mulf8s: scope:[mulf8s]  from loop::@11 loop::@4
  [139] mulf8s::b#2 = phi( loop::@11/mulf8s::b#1, loop::@4/mulf8s::b#0 )
  [139] mulf8s::mulf8s_prepare1_a#0 = phi( loop::@11/mulf8s::a#1, loop::@4/mulf8s::a#0 )
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  [140] mulf8u_prepare::a#0 = (byte)mulf8s::mulf8s_prepare1_a#0
  [141] call mulf8u_prepare 
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  [142] mulf8s_prepared::b#0 = mulf8s::b#2
  [143] call mulf8s_prepared 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::@1
  [144] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@2
  [145] return 
  to:@return

void plexSort()
plexSort: scope:[plexSort]  from loop::@5
  [146] phi()
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  [147] plexSort::m#2 = phi( plexSort/0, plexSort::@2/plexSort::m#1 )
  [148] plexSort::nxt_idx#0 = (PLEX_SORTED_IDX+1)[plexSort::m#2]
  [149] plexSort::nxt_y#0 = PLEX_YPOS[plexSort::nxt_idx#0]
  [150] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@1
  [151] plexSort::s#6 = plexSort::m#2
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@5 plexSort::@7
  [152] plexSort::s#3 = phi( plexSort::@7/plexSort::s#1, plexSort::@5/plexSort::s#6 )
  [153] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3]
  [154] plexSort::s#1 = -- plexSort::s#3
  [155] if(plexSort::s#1==$ff) goto plexSort::@4
  to:plexSort::@7
plexSort::@7: scope:[plexSort]  from plexSort::@3
  [156] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3
  to:plexSort::@4
plexSort::@4: scope:[plexSort]  from plexSort::@3 plexSort::@7
  [157] plexSort::s#2 = ++ plexSort::s#1
  [158] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0
  to:plexSort::@2
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@4
  [159] plexSort::m#1 = ++ plexSort::m#2
  [160] if(plexSort::m#1!=PLEX_COUNT-2+1) goto plexSort::@1
  to:plexSort::@6
plexSort::@6: scope:[plexSort]  from plexSort::@2
  [161] plex_show_idx = 0
  [162] plex_sprite_idx = 0
  [163] plex_sprite_msb = 1
  to:plexSort::plexFreePrepare1
plexSort::plexFreePrepare1: scope:[plexSort]  from plexSort::@6
  [164] phi()
  to:plexSort::plexFreePrepare1_@1
plexSort::plexFreePrepare1_@1: scope:[plexSort]  from plexSort::plexFreePrepare1 plexSort::plexFreePrepare1_@1
  [165] plexSort::plexFreePrepare1_s#2 = phi( plexSort::plexFreePrepare1/0, plexSort::plexFreePrepare1_@1/plexSort::plexFreePrepare1_s#1 )
  [166] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0
  [167] plexSort::plexFreePrepare1_s#1 = ++ plexSort::plexFreePrepare1_s#2
  [168] if(plexSort::plexFreePrepare1_s#1!=8) goto plexSort::plexFreePrepare1_@1
  to:plexSort::plexFreePrepare1_@2
plexSort::plexFreePrepare1_@2: scope:[plexSort]  from plexSort::plexFreePrepare1_@1
  [169] plex_free_next = 0
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::plexFreePrepare1_@2
  [170] return 
  to:@return

void plexShowSprite()
plexShowSprite: scope:[plexShowSprite]  from loop::@9
  [171] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1
  [172] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]]
  [173] SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::plexFreeAdd1_ypos#0
  to:plexShowSprite::plexFreeAdd1
plexShowSprite::plexFreeAdd1: scope:[plexShowSprite]  from plexShowSprite
  [174] plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#0 + $15
  [175] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0
  [176] plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1
  [177] plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7
  [178] plex_free_next = plexShowSprite::plexFreeAdd1_$2
  to:plexShowSprite::@5
plexShowSprite::@5: scope:[plexShowSprite]  from plexShowSprite::plexFreeAdd1
  [179] PLEX_SCREEN_PTR#0[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]]
  [180] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx]
  [181] plexShowSprite::$11 = plexShowSprite::xpos_idx#0 << 1
  [182] plexShowSprite::$2 = < PLEX_XPOS[plexShowSprite::$11]
  [183] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::$2
  [184] plexShowSprite::$3 = > PLEX_XPOS[plexShowSprite::$11]
  [185] if(plexShowSprite::$3!=0) goto plexShowSprite::@1
  to:plexShowSprite::@3
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@5
  [186] plexShowSprite::$9 = $ff ^ plex_sprite_msb
  [187] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$9
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@3
  [188] plexShowSprite::$5 = plex_sprite_idx + 1
  [189] plexShowSprite::$6 = plexShowSprite::$5 & 7
  [190] plex_sprite_idx = plexShowSprite::$6
  [191] plex_show_idx = ++ plex_show_idx
  [192] plex_sprite_msb = plex_sprite_msb << 1
  [193] if(plex_sprite_msb!=0) goto plexShowSprite::@return
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite::@2
  [194] plex_sprite_msb = 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@4
  [195] return 
  to:@return
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite::@5
  [196] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb
  to:plexShowSprite::@2

byte keyboard_key_pressed(byte keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from exit::@1 loop::@10
  [197] phi()
  [198] call keyboard_matrix_read 
  [199] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [200] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
  [201] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & *(keyboard_matrix_col_bitmask+keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [202] return 
  to:@return

void mulf8u_prepare(byte mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1
  [203] *mulf8u_prepare::memA = mulf8u_prepare::a#0
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [205] return 
  to:@return

signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  [206] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#0
  [207] call mulf8u_prepared 
  [208] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [209] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
  [210] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [211] mulf8s_prepared::$6 = > mulf8s_prepared::m#0
  [212] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0
  [213] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [214] mulf8s_prepared::m#5 = phi( mulf8s_prepared::@3/mulf8s_prepared::m#1, mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  [215] if(mulf8s_prepared::b#0>=0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [216] mulf8s_prepared::$9 = > mulf8s_prepared::m#5
  [217] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA
  [218] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [219] mulf8s_prepared::m#4 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#5, mulf8s_prepared::@4/mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [220] return 
  to:@return

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [221] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0)
  [222] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [223] return 
  to:@return

word mulf8u_prepared(byte mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [224] *mulf8u_prepared::memB = mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [226] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [227] return 
  to:@return
