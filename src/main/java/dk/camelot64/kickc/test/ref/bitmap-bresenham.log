byte* COLS = $d800;
byte* BGCOL = $d020;
byte* FGCOL = $d021;
byte* SCROLL = $d016;
byte* D018 = $d018;

byte* D011 = $d011;
byte RST8 = %10000000;
byte ECM =  %01000000;
byte BMM =  %00100000;
byte DEN =  %00010000;
byte RSEL =  %00001000;

byte* D016 = $d016;
byte MCM =  %00010000;
byte CSEL = %00001000;

byte* SCREEN = $400;
const byte* BITMAP = $2000;

const byte[] plot_xlo = $1000;
const byte[] plot_xhi = $1100;
const byte[] plot_ylo = $1200;
const byte[] plot_yhi = $1300;
const byte[] plot_bit = $1400;

byte[] lines_x = { 60, 80, 110, 80, 60, 40, 10, 40, 60 };
byte[] lines_y = { 10, 40, 60, 80, 110, 80, 60, 40, 10 };
byte lines_cnt = 8;

void main() {
    *BGCOL = 0;
    *FGCOL = 0;
    *D011 = BMM|DEN|RSEL|3;
    *D018 = $18; // Needs casting for *D018 = ((word)SCREEN/$40)|((word)BITMAP/$400);
    init_screen();
    init_plot_tables();
    do {
        lines();
    } while (true)
}

void lines() {
    for(byte l=0; l<lines_cnt;l++) {
        line(lines_x[l], lines_x[l+1], lines_y[l], lines_y[l+1]);
    }
}

void line(byte x0, byte x1, byte y0, byte y1) {
    byte xd;
    byte yd;
    if(x0<x1) {
        xd = x1-x0;
        if(y0<y1) {
            yd = y1-y0;
            if(yd<xd) {
                line_xdyi(x0, y0, x1, xd, yd);
            } else {
            plot(x0, y0);
            plot(x1, y1);
            }
        } else {
            plot(x0, y0);
            plot(x1, y1);
        }
    } else {
        xd = x1-x0;
        if(y0<y1) {
            plot(x0, y0);
            plot(x1, y1);
        } else {
            plot(x0, y0);
            plot(x1, y1);
        }
    }
}

void line_xdyi(byte x, byte y, byte x1, byte xd, byte yd) {
  byte e = yd>>1;
  do  {
      plot(x,y);
      x = x + 1;
      e = e+yd;
      if(xd<e) {
          y = y+1;
          e = e - xd;
      }
  } while (x<(x1+1))
}

void plot(byte x, byte y) {
    byte* plotter_x = 0;
    byte* plotter_y = 0;
    >plotter_x = plot_xhi[x];  // Needs word arrays arranged as two underlying byte arrays to allow byte* plotter_x = plot_x[x]; - and eventually - byte* plotter = plot_x[x] + plot_y[y];
    <plotter_x = plot_xlo[x];
    >plotter_y = plot_yhi[y];
    <plotter_y = plot_ylo[y];
    byte* plotter = plotter_x+plotter_y;
    *plotter = *plotter | plot_bit[x];
}

void init_plot_tables() {
    byte bit = $80;
    for(byte x : 0..255) {
        plot_xlo[x] = x&$f8;
        plot_xhi[x] = >BITMAP;
        plot_bit[x] = bit;
        bit = bit>>1;
        if(bit==0) {
          bit = $80;
        }
    }
    byte* yoffs = $0;
    for(byte y : 0..255) {
        plot_ylo[y] = y&$7 | <yoffs;
        plot_yhi[y] = >yoffs;
        if((y&$7)==7) {
            yoffs = yoffs + 320; // Needs better constant type inference for yoffs = yoffs + 40*8;
        }
    }
}

void init_screen() {
    for(byte* b = BITMAP; b!=BITMAP+$2000; b++) {
        *b = 0;
    }
    for(byte* c = SCREEN; c!=SCREEN+$400;c++) {
        *c = $14;
    }
}

main();

Adding pre/post-modifier (byte) lines::l ← ++ (byte) lines::l
Adding pre/post-modifier (byte*) init_screen::b ← ++ (byte*) init_screen::b
Adding pre/post-modifier (byte*) init_screen::c ← ++ (byte*) init_screen::c
Fixing lo/hi-lvalue hi=(plot::plotter_x) ← plot::$0
Fixing lo/hi-lvalue lo=(plot::plotter_x) ← plot::$1
Fixing lo/hi-lvalue hi=(plot::plotter_y) ← plot::$2
Fixing lo/hi-lvalue lo=(plot::plotter_y) ← plot::$3
PROGRAM
  (byte*) COLS ← (word) 55296
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) SCROLL ← (word) 53270
  (byte*) D018 ← (word) 53272
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  (byte[]) lines_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt ← (byte) 8
proc (void()) main()
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  (void~) main::$3 ← call init_screen 
  (void~) main::$4 ← call init_plot_tables 
main::@1:
  (void~) main::$5 ← call lines 
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) lines()
  (byte) lines::l ← (byte) 0
lines::@1:
  (byte~) lines::$0 ← (byte[]) lines_x *idx (byte) lines::l
  (byte~) lines::$1 ← (byte) lines::l + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y *idx (byte) lines::l
  (byte~) lines::$4 ← (byte) lines::l + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y *idx (byte~) lines::$4
  (void~) lines::$6 ← call line (byte~) lines::$0 (byte~) lines::$2 (byte~) lines::$3 (byte~) lines::$5 
  (byte) lines::l ← ++ (byte) lines::l
  (boolean~) lines::$7 ← (byte) lines::l < (byte) lines_cnt
  if((boolean~) lines::$7) goto lines::@1
lines::@return:
  return 
endproc // lines()
proc (void()) line((byte) line::x0 , (byte) line::x1 , (byte) line::y0 , (byte) line::y1)
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  (byte~) line::$2 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  (byte~) line::$5 ← (byte) line::y1 - (byte) line::y0
  (byte) line::yd ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd < (byte) line::xd
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  (void~) line::$8 ← call line_xdyi (byte) line::x0 (byte) line::y0 (byte) line::x1 (byte) line::xd (byte) line::yd 
  goto line::@4
line::@3:
  (void~) line::$9 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$10 ← call plot (byte) line::x1 (byte) line::y1 
line::@4:
  goto line::@5
line::@2:
  (void~) line::$11 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$12 ← call plot (byte) line::x1 (byte) line::y1 
line::@5:
  goto line::@6
line::@1:
  (byte~) line::$13 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  (void~) line::$16 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$17 ← call plot (byte) line::x1 (byte) line::y1 
  goto line::@8
line::@7:
  (void~) line::$18 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$19 ← call plot (byte) line::x1 (byte) line::y1 
line::@8:
line::@6:
line::@return:
  return 
endproc // line()
proc (void()) line_xdyi((byte) line_xdyi::x , (byte) line_xdyi::y , (byte) line_xdyi::x1 , (byte) line_xdyi::xd , (byte) line_xdyi::yd)
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd >> (byte) 1
  (byte) line_xdyi::e ← (byte~) line_xdyi::$0
line_xdyi::@1:
  (void~) line_xdyi::$1 ← call plot (byte) line_xdyi::x (byte) line_xdyi::y 
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x + (byte) 1
  (byte) line_xdyi::x ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e + (byte) line_xdyi::yd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd < (byte) line_xdyi::e
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y + (byte) 1
  (byte) line_xdyi::y ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e - (byte) line_xdyi::xd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$7
line_xdyi::@2:
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
line_xdyi::@return:
  return 
endproc // line_xdyi()
proc (void()) plot((byte) plot::x , (byte) plot::y)
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
plot::@return:
  return 
endproc // plot()
proc (void()) init_plot_tables()
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
init_plot_tables::@1:
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  (byte) init_plot_tables::bit ← (byte) 128
init_plot_tables::@2:
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
init_plot_tables::@3:
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
init_plot_tables::@4:
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
init_plot_tables::@return:
  return 
endproc // init_plot_tables()
proc (void()) init_screen()
  (byte*) init_screen::b ← (byte*) BITMAP
init_screen::@1:
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
init_screen::@2:
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
init_screen::@return:
  return 
endproc // init_screen()
  (void~) $0 ← call main 

SYMBOLS
(void~) $0
(byte*) BGCOL
(byte*) BITMAP
(byte) BMM
(byte*) COLS
(byte) CSEL
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DEN
(byte) ECM
(byte*) FGCOL
(byte) MCM
(byte) RSEL
(byte) RST8
(byte*) SCREEN
(byte*) SCROLL
(void()) init_plot_tables()
(byte~) init_plot_tables::$0
(byte~) init_plot_tables::$1
(byte~) init_plot_tables::$10
(boolean~) init_plot_tables::$11
(boolean~) init_plot_tables::$12
(byte*~) init_plot_tables::$13
(boolean~) init_plot_tables::$14
(byte~) init_plot_tables::$2
(boolean~) init_plot_tables::$3
(boolean~) init_plot_tables::$4
(boolean~) init_plot_tables::$5
(byte~) init_plot_tables::$6
(byte~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(byte~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::x
(byte) init_plot_tables::y
(byte*) init_plot_tables::yoffs
(void()) init_screen()
(byte*~) init_screen::$0
(boolean~) init_screen::$1
(byte*~) init_screen::$2
(boolean~) init_screen::$3
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::c
(void()) line((byte) line::x0 , (byte) line::x1 , (byte) line::y0 , (byte) line::y1)
(boolean~) line::$0
(boolean~) line::$1
(void~) line::$10
(void~) line::$11
(void~) line::$12
(byte~) line::$13
(boolean~) line::$14
(boolean~) line::$15
(void~) line::$16
(void~) line::$17
(void~) line::$18
(void~) line::$19
(byte~) line::$2
(boolean~) line::$3
(boolean~) line::$4
(byte~) line::$5
(boolean~) line::$6
(boolean~) line::$7
(void~) line::$8
(void~) line::$9
(label) line::@1
(label) line::@2
(label) line::@3
(label) line::@4
(label) line::@5
(label) line::@6
(label) line::@7
(label) line::@8
(label) line::@return
(byte) line::x0
(byte) line::x1
(byte) line::xd
(byte) line::y0
(byte) line::y1
(byte) line::yd
(void()) line_xdyi((byte) line_xdyi::x , (byte) line_xdyi::y , (byte) line_xdyi::x1 , (byte) line_xdyi::xd , (byte) line_xdyi::yd)
(byte~) line_xdyi::$0
(void~) line_xdyi::$1
(byte~) line_xdyi::$2
(byte~) line_xdyi::$3
(boolean~) line_xdyi::$4
(boolean~) line_xdyi::$5
(byte~) line_xdyi::$6
(byte~) line_xdyi::$7
(byte~) line_xdyi::$8
(boolean~) line_xdyi::$9
(label) line_xdyi::@1
(label) line_xdyi::@2
(label) line_xdyi::@return
(byte) line_xdyi::e
(byte) line_xdyi::x
(byte) line_xdyi::x1
(byte) line_xdyi::xd
(byte) line_xdyi::y
(byte) line_xdyi::yd
(void()) lines()
(byte~) lines::$0
(byte~) lines::$1
(byte~) lines::$2
(byte~) lines::$3
(byte~) lines::$4
(byte~) lines::$5
(void~) lines::$6
(boolean~) lines::$7
(label) lines::@1
(label) lines::@return
(byte) lines::l
(byte) lines_cnt
(byte[]) lines_x
(byte[]) lines_y
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(void~) main::$3
(void~) main::$4
(void~) main::$5
(label) main::@1
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(byte~) plot::$3
(byte~) plot::$4
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter_x
(byte*) plot::plotter_y
(byte) plot::x
(byte) plot::y
(byte[]) plot_bit
(byte[]) plot_xhi
(byte[]) plot_xlo
(byte[]) plot_yhi
(byte[]) plot_ylo

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS ← (word) 55296
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) SCROLL ← (word) 53270
  (byte*) D018 ← (word) 53272
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  (byte[]) lines_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt ← (byte) 8
  to:@1
main: scope:[main]  from
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  (void~) main::$3 ← call init_screen 
  (void~) main::$4 ← call init_plot_tables 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$5 ← call lines 
  if(true) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
lines: scope:[lines]  from
  (byte) lines::l ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@1
  (byte~) lines::$0 ← (byte[]) lines_x *idx (byte) lines::l
  (byte~) lines::$1 ← (byte) lines::l + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y *idx (byte) lines::l
  (byte~) lines::$4 ← (byte) lines::l + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y *idx (byte~) lines::$4
  (void~) lines::$6 ← call line (byte~) lines::$0 (byte~) lines::$2 (byte~) lines::$3 (byte~) lines::$5 
  (byte) lines::l ← ++ (byte) lines::l
  (boolean~) lines::$7 ← (byte) lines::l < (byte) lines_cnt
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@2
lines::@2: scope:[lines]  from lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
line: scope:[line]  from
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line line::@14
  (byte~) line::$13 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte~) line::$2 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@13 line::@9
  (void~) line::$11 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$12 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@5
line::@10: scope:[line]  from line::@9
  (byte~) line::$5 ← (byte) line::y1 - (byte) line::y0
  (byte) line::yd ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd < (byte) line::xd
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10 line::@12
  (void~) line::$9 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$10 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@4
line::@11: scope:[line]  from line::@10
  (void~) line::$8 ← call line_xdyi (byte) line::x0 (byte) line::y0 (byte) line::x1 (byte) line::xd (byte) line::yd 
  to:line::@4
line::@4: scope:[line]  from line::@11 line::@3
  to:line::@5
line::@12: scope:[line]  from
  to:line::@3
line::@5: scope:[line]  from line::@2 line::@4
  to:line::@6
line::@13: scope:[line]  from
  to:line::@2
line::@6: scope:[line]  from line::@5 line::@8
  to:line::@return
line::@14: scope:[line]  from
  to:line::@1
line::@7: scope:[line]  from line::@1 line::@16
  (void~) line::$18 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$19 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@8
line::@15: scope:[line]  from line::@1
  (void~) line::$16 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$17 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@8
line::@8: scope:[line]  from line::@15 line::@7
  to:line::@6
line::@16: scope:[line]  from
  to:line::@7
line::@return: scope:[line]  from line::@6
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
line_xdyi: scope:[line_xdyi]  from
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd >> (byte) 1
  (byte) line_xdyi::e ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (void~) line_xdyi::$1 ← call plot (byte) line_xdyi::x (byte) line_xdyi::y 
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x + (byte) 1
  (byte) line_xdyi::x ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e + (byte) line_xdyi::yd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd < (byte) line_xdyi::e
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@1 line_xdyi::@3
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@4
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@1
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y + (byte) 1
  (byte) line_xdyi::y ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e - (byte) line_xdyi::xd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@4: scope:[line_xdyi]  from line_xdyi::@2
  to:line_xdyi::@return
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@4
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
plot: scope:[plot]  from
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
init_plot_tables: scope:[init_plot_tables]  from
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@8
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@8: scope:[init_plot_tables]  from init_plot_tables::@4
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@8
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
init_screen: scope:[init_screen]  from
  (byte*) init_screen::b ← (byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@4
init_screen::@4: scope:[init_screen]  from init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@4
  return 
  to:@return
@7: scope:[]  from @6
  (void~) $0 ← call main 
  to:@end
@end: scope:[]  from @7

Removing empty block main::@2
Removing empty block @1
Removing empty block lines::@2
Removing empty block @2
Removing empty block line::@4
Removing empty block line::@12
Removing empty block line::@5
Removing empty block line::@13
Removing empty block line::@6
Removing empty block line::@14
Removing empty block line::@8
Removing empty block line::@16
Removing empty block @3
Removing empty block line_xdyi::@4
Removing empty block @4
Removing empty block @5
Removing empty block init_plot_tables::@8
Removing empty block @6
Removing empty block init_screen::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS ← (word) 55296
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) SCROLL ← (word) 53270
  (byte*) D018 ← (word) 53272
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  (byte[]) lines_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt ← (byte) 8
  to:@7
main: scope:[main]  from
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  (void~) main::$3 ← call init_screen 
  (void~) main::$4 ← call init_plot_tables 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$5 ← call lines 
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
lines: scope:[lines]  from
  (byte) lines::l ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@1
  (byte~) lines::$0 ← (byte[]) lines_x *idx (byte) lines::l
  (byte~) lines::$1 ← (byte) lines::l + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y *idx (byte) lines::l
  (byte~) lines::$4 ← (byte) lines::l + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y *idx (byte~) lines::$4
  (void~) lines::$6 ← call line (byte~) lines::$0 (byte~) lines::$2 (byte~) lines::$3 (byte~) lines::$5 
  (byte) lines::l ← ++ (byte) lines::l
  (boolean~) lines::$7 ← (byte) lines::l < (byte) lines_cnt
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@1
  return 
  to:@return
line: scope:[line]  from
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte~) line::$13 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte~) line::$2 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (void~) line::$11 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$12 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte~) line::$5 ← (byte) line::y1 - (byte) line::y0
  (byte) line::yd ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd < (byte) line::xd
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (void~) line::$9 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$10 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@return
line::@11: scope:[line]  from line::@10
  (void~) line::$8 ← call line_xdyi (byte) line::x0 (byte) line::y0 (byte) line::x1 (byte) line::xd (byte) line::yd 
  to:line::@return
line::@7: scope:[line]  from line::@1
  (void~) line::$18 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$19 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@return
line::@15: scope:[line]  from line::@1
  (void~) line::$16 ← call plot (byte) line::x0 (byte) line::y0 
  (void~) line::$17 ← call plot (byte) line::x1 (byte) line::y1 
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@15 line::@2 line::@3 line::@7
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd >> (byte) 1
  (byte) line_xdyi::e ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (void~) line_xdyi::$1 ← call plot (byte) line_xdyi::x (byte) line_xdyi::y 
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x + (byte) 1
  (byte) line_xdyi::x ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e + (byte) line_xdyi::yd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd < (byte) line_xdyi::e
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@1 line_xdyi::@3
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@1
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y + (byte) 1
  (byte) line_xdyi::y ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e - (byte) line_xdyi::xd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from
  (byte*) init_screen::b ← (byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  (void~) $0 ← call main 
  to:@end
@end: scope:[]  from @7

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) COLS ← (word) 55296
  (byte*) BGCOL ← (word) 53280
  (byte*) FGCOL ← (word) 53281
  (byte*) SCROLL ← (word) 53270
  (byte*) D018 ← (word) 53272
  (byte*) D011 ← (word) 53265
  (byte) RST8 ← (byte) 128
  (byte) ECM ← (byte) 64
  (byte) BMM ← (byte) 32
  (byte) DEN ← (byte) 16
  (byte) RSEL ← (byte) 8
  (byte*) D016 ← (word) 53270
  (byte) MCM ← (byte) 16
  (byte) CSEL ← (byte) 8
  (byte*) SCREEN ← (word) 1024
  (byte*) BITMAP ← (word) 8192
  (byte[]) plot_xlo ← (word) 4096
  (byte[]) plot_xhi ← (word) 4352
  (byte[]) plot_ylo ← (word) 4608
  (byte[]) plot_yhi ← (word) 4864
  (byte[]) plot_bit ← (word) 5120
  (byte[]) lines_x ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL) ← (byte) 0
  *((byte*) FGCOL) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM | (byte) DEN
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011) ← (byte~) main::$2
  *((byte*) D018) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte~) lines::$0 ← (byte[]) lines_x *idx (byte) lines::l
  (byte~) lines::$1 ← (byte) lines::l + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y *idx (byte) lines::l
  (byte~) lines::$4 ← (byte) lines::l + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y *idx (byte~) lines::$4
  (byte) line::x0 ← (byte~) lines::$0
  (byte) line::x1 ← (byte~) lines::$2
  (byte) line::y0 ← (byte~) lines::$3
  (byte) line::y1 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l ← ++ (byte) lines::l
  (boolean~) lines::$7 ← (byte) lines::l < (byte) lines_cnt
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte~) line::$13 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte~) line::$2 ← (byte) line::x1 - (byte) line::x0
  (byte) line::xd ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0 < (byte) line::y1
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x ← (byte) line::x0
  (byte) plot::y ← (byte) line::y0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x ← (byte) line::x1
  (byte) plot::y ← (byte) line::y1
  call plot param-assignment
  to:line::@18
line::@18: scope:[line]  from line::@17
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte~) line::$5 ← (byte) line::y1 - (byte) line::y0
  (byte) line::yd ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd < (byte) line::xd
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x ← (byte) line::x0
  (byte) plot::y ← (byte) line::y0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x ← (byte) line::x1
  (byte) plot::y ← (byte) line::y1
  call plot param-assignment
  to:line::@20
line::@20: scope:[line]  from line::@19
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x ← (byte) line::x0
  (byte) line_xdyi::y ← (byte) line::y0
  (byte) line_xdyi::x1 ← (byte) line::x1
  (byte) line_xdyi::xd ← (byte) line::xd
  (byte) line_xdyi::yd ← (byte) line::yd
  call line_xdyi param-assignment
  to:line::@21
line::@21: scope:[line]  from line::@11
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x ← (byte) line::x0
  (byte) plot::y ← (byte) line::y0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x ← (byte) line::x1
  (byte) plot::y ← (byte) line::y1
  call plot param-assignment
  to:line::@23
line::@23: scope:[line]  from line::@22
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x ← (byte) line::x0
  (byte) plot::y ← (byte) line::y0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x ← (byte) line::x1
  (byte) plot::y ← (byte) line::y1
  call plot param-assignment
  to:line::@25
line::@25: scope:[line]  from line::@24
  to:line::@return
line::@return: scope:[line]  from line::@18 line::@20 line::@21 line::@23 line::@25
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd >> (byte) 1
  (byte) line_xdyi::e ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) plot::x ← (byte) line_xdyi::x
  (byte) plot::y ← (byte) line_xdyi::y
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x + (byte) 1
  (byte) line_xdyi::x ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e + (byte) line_xdyi::yd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd < (byte) line_xdyi::e
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y + (byte) 1
  (byte) line_xdyi::y ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e - (byte) line_xdyi::xd
  (byte) line_xdyi::e ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte*) plot::plotter_x ← (byte) 0
  (byte*) plot::plotter_y ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo *idx (byte) plot::x
  (byte*) plot::plotter_x ← (byte*) plot::plotter_x lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo *idx (byte) plot::y
  (byte*) plot::plotter_y ← (byte*) plot::plotter_y lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x + (byte*) plot::plotter_y
  (byte*) plot::plotter ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter
  (byte~) plot::$6 ← (byte[]) plot_bit *idx (byte) plot::x
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit ← (byte) 128
  (byte) init_plot_tables::x ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x & (byte) 248
  *((byte[]) plot_xlo + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP
  *((byte[]) plot_xhi + (byte) init_plot_tables::x) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit + (byte) init_plot_tables::x) ← (byte) init_plot_tables::bit
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit >> (byte) 1
  (byte) init_plot_tables::bit ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::x ← ++ (byte) init_plot_tables::x
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs ← (byte) 0
  (byte) init_plot_tables::y ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs
  *((byte[]) plot_yhi + (byte) init_plot_tables::y) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte) init_plot_tables::y ← ++ (byte) init_plot_tables::y
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs + (word) 320
  (byte*) init_plot_tables::yoffs ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b ← (byte*) BITMAP
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  *((byte*) init_screen::b) ← (byte) 0
  (byte*) init_screen::b ← ++ (byte*) init_screen::b
  (byte*~) init_screen::$0 ← (byte*) BITMAP + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c ← (byte*) SCREEN
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  *((byte*) init_screen::c) ← (byte) 20
  (byte*) init_screen::c ← ++ (byte*) init_screen::c
  (byte*~) init_screen::$2 ← (byte*) SCREEN + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@8
@8: scope:[]  from @7
  to:@end
@end: scope:[]  from @8

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  (byte[]) plot_yhi#32 ← phi( @7/(byte[]) plot_yhi#34 )
  (byte[]) plot_ylo#32 ← phi( @7/(byte[]) plot_ylo#34 )
  (byte) lines_cnt#8 ← phi( @7/(byte) lines_cnt#9 )
  (byte[]) lines_y#8 ← phi( @7/(byte[]) lines_y#9 )
  (byte[]) lines_x#8 ← phi( @7/(byte[]) lines_x#9 )
  (byte*) SCREEN#5 ← phi( @7/(byte*) SCREEN#6 )
  (byte[]) plot_bit#21 ← phi( @7/(byte[]) plot_bit#26 )
  (byte[]) plot_xhi#21 ← phi( @7/(byte[]) plot_xhi#26 )
  (byte[]) plot_xlo#21 ← phi( @7/(byte[]) plot_xlo#26 )
  (byte*) BITMAP#6 ← phi( @7/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @7/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @7/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @7/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @7/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @7/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @7/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @7/(byte*) BGCOL#2 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) plot_yhi#31 ← phi( main/(byte[]) plot_yhi#32 )
  (byte[]) plot_ylo#31 ← phi( main/(byte[]) plot_ylo#32 )
  (byte) lines_cnt#7 ← phi( main/(byte) lines_cnt#8 )
  (byte[]) lines_y#7 ← phi( main/(byte[]) lines_y#8 )
  (byte[]) lines_x#7 ← phi( main/(byte[]) lines_x#8 )
  (byte[]) plot_bit#19 ← phi( main/(byte[]) plot_bit#21 )
  (byte[]) plot_xhi#19 ← phi( main/(byte[]) plot_xhi#21 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#19 ← phi( main/(byte[]) plot_xlo#21 )
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte[]) plot_bit#31 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_ylo#35 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_yhi#35 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_xlo#31 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte[]) plot_xhi#31 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte) lines_cnt#5 ← phi( main::@3/(byte) lines_cnt#7 )
  (byte[]) lines_y#5 ← phi( main::@3/(byte[]) lines_y#7 )
  (byte[]) lines_x#5 ← phi( main::@3/(byte[]) lines_x#7 )
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#30 ← phi( main::@4/(byte[]) plot_bit#31 main::@5/(byte[]) plot_bit#32 )
  (byte[]) plot_ylo#33 ← phi( main::@4/(byte[]) plot_ylo#35 main::@5/(byte[]) plot_ylo#36 )
  (byte[]) plot_yhi#33 ← phi( main::@4/(byte[]) plot_yhi#35 main::@5/(byte[]) plot_yhi#36 )
  (byte[]) plot_xlo#30 ← phi( main::@4/(byte[]) plot_xlo#31 main::@5/(byte[]) plot_xlo#32 )
  (byte[]) plot_xhi#30 ← phi( main::@4/(byte[]) plot_xhi#31 main::@5/(byte[]) plot_xhi#32 )
  (byte) lines_cnt#4 ← phi( main::@4/(byte) lines_cnt#5 main::@5/(byte) lines_cnt#6 )
  (byte[]) lines_y#4 ← phi( main::@4/(byte[]) lines_y#5 main::@5/(byte[]) lines_y#6 )
  (byte[]) lines_x#4 ← phi( main::@4/(byte[]) lines_x#5 main::@5/(byte[]) lines_x#6 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte[]) plot_bit#32 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#36 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#36 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#32 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#32 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#6 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#6 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#6 ← phi( main::@1/(byte[]) lines_x#4 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte[]) plot_bit#28 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#29 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#29 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#28 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#28 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#3 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#2 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#2 ← phi( main::@1/(byte[]) lines_x#4 )
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#27 ← phi( lines/(byte[]) plot_bit#28 lines::@3/(byte[]) plot_bit#29 )
  (byte[]) plot_ylo#27 ← phi( lines/(byte[]) plot_ylo#29 lines::@3/(byte[]) plot_ylo#30 )
  (byte[]) plot_yhi#27 ← phi( lines/(byte[]) plot_yhi#29 lines::@3/(byte[]) plot_yhi#30 )
  (byte[]) plot_xlo#27 ← phi( lines/(byte[]) plot_xlo#28 lines::@3/(byte[]) plot_xlo#29 )
  (byte[]) plot_xhi#27 ← phi( lines/(byte[]) plot_xhi#28 lines::@3/(byte[]) plot_xhi#29 )
  (byte) lines_cnt#2 ← phi( lines/(byte) lines_cnt#3 lines::@3/(byte) lines_cnt#1 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 lines::@3/(byte[]) lines_y#3 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 lines::@3/(byte[]) lines_x#3 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte[]) plot_bit#29 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#30 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#30 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#29 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#29 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte[]) lines_y#3 ← phi( lines::@1/(byte[]) lines_y#1 )
  (byte[]) lines_x#3 ← phi( lines::@1/(byte[]) lines_x#1 )
  (byte) lines_cnt#1 ← phi( lines::@1/(byte) lines_cnt#2 )
  (byte) lines::l#3 ← phi( lines::@1/(byte) lines::l#2 )
  (byte) lines::l#1 ← ++ (byte) lines::l#3
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (byte[]) plot_bit#22 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#21 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#21 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#22 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#22 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte) line::y1#8 ← phi( lines::@1/(byte) line::y1#0 )
  (byte) line::y0#9 ← phi( lines::@1/(byte) line::y0#0 )
  (byte) line::x1#1 ← phi( lines::@1/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( lines::@1/(byte) line::x0#0 )
  (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte[]) plot_bit#16 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#16 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#16 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#16 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#16 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#1 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#1 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#2 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$13 ← (byte) line::x1#2 - (byte) line::x0#2
  (byte) line::xd#0 ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0#1 < (byte) line::y1#1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte[]) plot_bit#14 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#14 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#14 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#14 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#14 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#2 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#2 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#3 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$2 ← (byte) line::x1#3 - (byte) line::x0#3
  (byte) line::xd#1 ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0#2 < (byte) line::y1#2
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte[]) plot_bit#6 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#6 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#6 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#6 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#6 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::y1#9 ← phi( line::@9/(byte) line::y1#2 )
  (byte) line::x1#9 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::y0#3 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::x0#4 ← phi( line::@9/(byte) line::x0#3 )
  (byte) plot::x#0 ← (byte) line::x0#4
  (byte) plot::y#0 ← (byte) line::y0#3
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte[]) plot_bit#4 ← phi( line::@2/(byte[]) plot_bit#6 )
  (byte[]) plot_ylo#4 ← phi( line::@2/(byte[]) plot_ylo#6 )
  (byte[]) plot_yhi#4 ← phi( line::@2/(byte[]) plot_yhi#6 )
  (byte[]) plot_xlo#4 ← phi( line::@2/(byte[]) plot_xlo#6 )
  (byte[]) plot_xhi#4 ← phi( line::@2/(byte[]) plot_xhi#6 )
  (byte) line::y1#3 ← phi( line::@2/(byte) line::y1#9 )
  (byte) line::x1#4 ← phi( line::@2/(byte) line::x1#9 )
  (byte) plot::x#1 ← (byte) line::x1#4
  (byte) plot::y#1 ← (byte) line::y1#3
  call plot param-assignment
  to:line::@18
line::@18: scope:[line]  from line::@17
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte[]) plot_bit#15 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#15 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#15 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#15 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#15 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::x1#11 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::x0#9 ← phi( line::@9/(byte) line::x0#3 )
  (byte) line::xd#2 ← phi( line::@9/(byte) line::xd#1 )
  (byte) line::y0#4 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::y1#4 ← phi( line::@9/(byte) line::y1#2 )
  (byte~) line::$5 ← (byte) line::y1#4 - (byte) line::y0#4
  (byte) line::yd#0 ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd#0 < (byte) line::xd#2
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte[]) plot_bit#9 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#9 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#9 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#9 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#9 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::y1#10 ← phi( line::@10/(byte) line::y1#4 )
  (byte) line::x1#10 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#5 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#5 ← phi( line::@10/(byte) line::x0#9 )
  (byte) plot::x#2 ← (byte) line::x0#5
  (byte) plot::y#2 ← (byte) line::y0#5
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte[]) plot_bit#5 ← phi( line::@3/(byte[]) plot_bit#9 )
  (byte[]) plot_ylo#5 ← phi( line::@3/(byte[]) plot_ylo#9 )
  (byte[]) plot_yhi#5 ← phi( line::@3/(byte[]) plot_yhi#9 )
  (byte[]) plot_xlo#5 ← phi( line::@3/(byte[]) plot_xlo#9 )
  (byte[]) plot_xhi#5 ← phi( line::@3/(byte[]) plot_xhi#9 )
  (byte) line::y1#5 ← phi( line::@3/(byte) line::y1#10 )
  (byte) line::x1#5 ← phi( line::@3/(byte) line::x1#10 )
  (byte) plot::x#3 ← (byte) line::x1#5
  (byte) plot::y#3 ← (byte) line::y1#5
  call plot param-assignment
  to:line::@20
line::@20: scope:[line]  from line::@19
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte[]) plot_bit#23 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#22 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#22 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#23 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#23 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::yd#1 ← phi( line::@10/(byte) line::yd#0 )
  (byte) line::xd#3 ← phi( line::@10/(byte) line::xd#2 )
  (byte) line::x1#6 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#6 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#6 ← phi( line::@10/(byte) line::x0#9 )
  (byte) line_xdyi::x#0 ← (byte) line::x0#6
  (byte) line_xdyi::y#0 ← (byte) line::y0#6
  (byte) line_xdyi::x1#0 ← (byte) line::x1#6
  (byte) line_xdyi::xd#0 ← (byte) line::xd#3
  (byte) line_xdyi::yd#0 ← (byte) line::yd#1
  call line_xdyi param-assignment
  to:line::@21
line::@21: scope:[line]  from line::@11
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte[]) plot_bit#10 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#10 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#10 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#10 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#10 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#11 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#12 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#7 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#7 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#4 ← (byte) line::x0#7
  (byte) plot::y#4 ← (byte) line::y0#7
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte[]) plot_bit#7 ← phi( line::@7/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#7 ← phi( line::@7/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#7 ← phi( line::@7/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#7 ← phi( line::@7/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#7 ← phi( line::@7/(byte[]) plot_xhi#10 )
  (byte) line::y1#6 ← phi( line::@7/(byte) line::y1#11 )
  (byte) line::x1#7 ← phi( line::@7/(byte) line::x1#12 )
  (byte) plot::x#5 ← (byte) line::x1#7
  (byte) plot::y#5 ← (byte) line::y1#6
  call plot param-assignment
  to:line::@23
line::@23: scope:[line]  from line::@22
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte[]) plot_bit#3 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#3 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#3 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#3 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#3 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#12 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#13 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#8 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#8 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#6 ← (byte) line::x0#8
  (byte) plot::y#6 ← (byte) line::y0#8
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte[]) plot_bit#8 ← phi( line::@15/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#8 ← phi( line::@15/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#8 ← phi( line::@15/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#8 ← phi( line::@15/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#8 ← phi( line::@15/(byte[]) plot_xhi#3 )
  (byte) line::y1#7 ← phi( line::@15/(byte) line::y1#12 )
  (byte) line::x1#8 ← phi( line::@15/(byte) line::x1#13 )
  (byte) plot::x#7 ← (byte) line::x1#8
  (byte) plot::y#7 ← (byte) line::y1#7
  call plot param-assignment
  to:line::@25
line::@25: scope:[line]  from line::@24
  to:line::@return
line::@return: scope:[line]  from line::@18 line::@20 line::@21 line::@23 line::@25
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::x1#5 ← phi( line::@11/(byte) line_xdyi::x1#0 )
  (byte[]) plot_bit#17 ← phi( line::@11/(byte[]) plot_bit#23 )
  (byte[]) plot_ylo#17 ← phi( line::@11/(byte[]) plot_ylo#22 )
  (byte[]) plot_yhi#17 ← phi( line::@11/(byte[]) plot_yhi#22 )
  (byte[]) plot_xlo#17 ← phi( line::@11/(byte[]) plot_xlo#23 )
  (byte[]) plot_xhi#17 ← phi( line::@11/(byte[]) plot_xhi#23 )
  (byte) line_xdyi::xd#4 ← phi( line::@11/(byte) line_xdyi::xd#0 )
  (byte) line_xdyi::y#4 ← phi( line::@11/(byte) line_xdyi::y#0 )
  (byte) line_xdyi::x#5 ← phi( line::@11/(byte) line_xdyi::x#0 )
  (byte) line_xdyi::yd#1 ← phi( line::@11/(byte) line_xdyi::yd#0 )
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd#1 >> (byte) 1
  (byte) line_xdyi::e#0 ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#4 ← phi( line_xdyi/(byte) line_xdyi::x1#5 line_xdyi::@2/(byte) line_xdyi::x1#1 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#17 line_xdyi::@2/(byte[]) plot_bit#18 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#17 line_xdyi::@2/(byte[]) plot_ylo#18 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#17 line_xdyi::@2/(byte[]) plot_yhi#18 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#17 line_xdyi::@2/(byte[]) plot_xlo#18 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#17 line_xdyi::@2/(byte[]) plot_xhi#18 )
  (byte) line_xdyi::xd#3 ← phi( line_xdyi/(byte) line_xdyi::xd#4 line_xdyi::@2/(byte) line_xdyi::xd#5 )
  (byte) line_xdyi::yd#3 ← phi( line_xdyi/(byte) line_xdyi::yd#1 line_xdyi::@2/(byte) line_xdyi::yd#4 )
  (byte) line_xdyi::e#5 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#4 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#5 line_xdyi::@2/(byte) line_xdyi::x#4 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte[]) plot_bit#25 ← phi( line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#24 ← phi( line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_yhi#24 ← phi( line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#25 ← phi( line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#25 ← phi( line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte) line_xdyi::y#6 ← phi( line_xdyi::@1/(byte) line_xdyi::y#2 )
  (byte) line_xdyi::x1#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x1#4 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi::@1/(byte) line_xdyi::xd#3 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi::@1/(byte) line_xdyi::yd#3 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi::@1/(byte) line_xdyi::e#5 )
  (byte) line_xdyi::x#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x#2 )
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x#3 + (byte) 1
  (byte) line_xdyi::x#1 ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (byte) line_xdyi::e#1 ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd#1 < (byte) line_xdyi::e#1
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte[]) plot_bit#18 ← phi( line_xdyi::@3/(byte[]) plot_bit#24 line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#18 ← phi( line_xdyi::@3/(byte[]) plot_ylo#23 line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#18 ← phi( line_xdyi::@3/(byte[]) plot_yhi#23 line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#18 ← phi( line_xdyi::@3/(byte[]) plot_xlo#24 line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#18 ← phi( line_xdyi::@3/(byte[]) plot_xhi#24 line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::xd#5 ← phi( line_xdyi::@3/(byte) line_xdyi::xd#2 line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::yd#4 ← phi( line_xdyi::@3/(byte) line_xdyi::yd#5 line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte) line_xdyi::x#4 ← phi( line_xdyi::@3/(byte) line_xdyi::x#6 line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#1 ← phi( line_xdyi::@3/(byte) line_xdyi::x1#2 line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#4 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte[]) plot_bit#24 ← phi( line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#23 ← phi( line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#23 ← phi( line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#24 ← phi( line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#24 ← phi( line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::yd#5 ← phi( line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::x#6 ← phi( line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#2 ← phi( line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte) line_xdyi::xd#2 ← phi( line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::e#4 ← phi( line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#3 ← phi( line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y#3 + (byte) 1
  (byte) line_xdyi::y#1 ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e#4 - (byte) line_xdyi::xd#2
  (byte) line_xdyi::e#2 ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#3 line::@17/(byte[]) plot_bit#4 line::@19/(byte[]) plot_bit#5 line::@2/(byte[]) plot_bit#6 line::@22/(byte[]) plot_bit#7 line::@24/(byte[]) plot_bit#8 line::@3/(byte[]) plot_bit#9 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#3 line::@17/(byte[]) plot_ylo#4 line::@19/(byte[]) plot_ylo#5 line::@2/(byte[]) plot_ylo#6 line::@22/(byte[]) plot_ylo#7 line::@24/(byte[]) plot_ylo#8 line::@3/(byte[]) plot_ylo#9 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#3 line::@17/(byte[]) plot_yhi#4 line::@19/(byte[]) plot_yhi#5 line::@2/(byte[]) plot_yhi#6 line::@22/(byte[]) plot_yhi#7 line::@24/(byte[]) plot_yhi#8 line::@3/(byte[]) plot_yhi#9 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#3 line::@17/(byte[]) plot_xlo#4 line::@19/(byte[]) plot_xlo#5 line::@2/(byte[]) plot_xlo#6 line::@22/(byte[]) plot_xlo#7 line::@24/(byte[]) plot_xlo#8 line::@3/(byte[]) plot_xlo#9 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#3 line::@17/(byte[]) plot_xhi#4 line::@19/(byte[]) plot_xhi#5 line::@2/(byte[]) plot_xhi#6 line::@22/(byte[]) plot_xhi#7 line::@24/(byte[]) plot_xhi#8 line::@3/(byte[]) plot_xhi#9 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte[]) plot_yhi#28 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_ylo#28 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_bit#12 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_xhi#12 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte*) BITMAP#4 ← phi( main::@3/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#12 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#25 ← phi( init_plot_tables/(byte[]) plot_yhi#28 init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#25 ← phi( init_plot_tables/(byte[]) plot_ylo#28 init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#12 init_plot_tables::@2/(byte[]) plot_bit#13 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#12 init_plot_tables::@2/(byte[]) plot_xhi#13 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#12 init_plot_tables::@2/(byte[]) plot_xlo#13 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#19 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 init_plot_tables::@5/(byte[]) plot_yhi#26 )
  (byte[]) plot_ylo#19 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 init_plot_tables::@5/(byte[]) plot_ylo#26 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#20 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#20 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#20 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#26 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 )
  (byte[]) plot_ylo#26 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 )
  (byte[]) plot_bit#20 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#20 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#20 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#13 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#12 init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#12 init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#20 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#20 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#20 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  (byte[]) plot_yhi#34 ← phi( @begin/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#34 ← phi( @begin/(byte[]) plot_ylo#0 )
  (byte) lines_cnt#9 ← phi( @begin/(byte) lines_cnt#0 )
  (byte[]) lines_y#9 ← phi( @begin/(byte[]) lines_y#0 )
  (byte[]) lines_x#9 ← phi( @begin/(byte[]) lines_x#0 )
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plot_bit#26 ← phi( @begin/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#26 ← phi( @begin/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#26 ← phi( @begin/(byte[]) plot_xlo#0 )
  (byte*) BITMAP#7 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#2 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#2 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#2 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#2 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#2 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#2 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  call main param-assignment
  to:@8
@8: scope:[]  from @7
  to:@end
@end: scope:[]  from @8

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  (byte[]) plot_yhi#32 ← phi( @7/(byte[]) plot_yhi#34 )
  (byte[]) plot_ylo#32 ← phi( @7/(byte[]) plot_ylo#34 )
  (byte) lines_cnt#8 ← phi( @7/(byte) lines_cnt#9 )
  (byte[]) lines_y#8 ← phi( @7/(byte[]) lines_y#9 )
  (byte[]) lines_x#8 ← phi( @7/(byte[]) lines_x#9 )
  (byte*) SCREEN#5 ← phi( @7/(byte*) SCREEN#6 )
  (byte[]) plot_bit#21 ← phi( @7/(byte[]) plot_bit#26 )
  (byte[]) plot_xhi#21 ← phi( @7/(byte[]) plot_xhi#26 )
  (byte[]) plot_xlo#21 ← phi( @7/(byte[]) plot_xlo#26 )
  (byte*) BITMAP#6 ← phi( @7/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @7/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @7/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @7/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @7/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @7/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @7/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @7/(byte*) BGCOL#2 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) plot_yhi#31 ← phi( main/(byte[]) plot_yhi#32 )
  (byte[]) plot_ylo#31 ← phi( main/(byte[]) plot_ylo#32 )
  (byte) lines_cnt#7 ← phi( main/(byte) lines_cnt#8 )
  (byte[]) lines_y#7 ← phi( main/(byte[]) lines_y#8 )
  (byte[]) lines_x#7 ← phi( main/(byte[]) lines_x#8 )
  (byte[]) plot_bit#19 ← phi( main/(byte[]) plot_bit#21 )
  (byte[]) plot_xhi#19 ← phi( main/(byte[]) plot_xhi#21 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#19 ← phi( main/(byte[]) plot_xlo#21 )
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte[]) plot_bit#31 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_ylo#35 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_yhi#35 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_xlo#31 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte[]) plot_xhi#31 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte) lines_cnt#5 ← phi( main::@3/(byte) lines_cnt#7 )
  (byte[]) lines_y#5 ← phi( main::@3/(byte[]) lines_y#7 )
  (byte[]) lines_x#5 ← phi( main::@3/(byte[]) lines_x#7 )
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#30 ← phi( main::@4/(byte[]) plot_bit#31 main::@5/(byte[]) plot_bit#32 )
  (byte[]) plot_ylo#33 ← phi( main::@4/(byte[]) plot_ylo#35 main::@5/(byte[]) plot_ylo#36 )
  (byte[]) plot_yhi#33 ← phi( main::@4/(byte[]) plot_yhi#35 main::@5/(byte[]) plot_yhi#36 )
  (byte[]) plot_xlo#30 ← phi( main::@4/(byte[]) plot_xlo#31 main::@5/(byte[]) plot_xlo#32 )
  (byte[]) plot_xhi#30 ← phi( main::@4/(byte[]) plot_xhi#31 main::@5/(byte[]) plot_xhi#32 )
  (byte) lines_cnt#4 ← phi( main::@4/(byte) lines_cnt#5 main::@5/(byte) lines_cnt#6 )
  (byte[]) lines_y#4 ← phi( main::@4/(byte[]) lines_y#5 main::@5/(byte[]) lines_y#6 )
  (byte[]) lines_x#4 ← phi( main::@4/(byte[]) lines_x#5 main::@5/(byte[]) lines_x#6 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte[]) plot_bit#32 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#36 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#36 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#32 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#32 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#6 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#6 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#6 ← phi( main::@1/(byte[]) lines_x#4 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte[]) plot_bit#28 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#29 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#29 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#28 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#28 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#3 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#2 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#2 ← phi( main::@1/(byte[]) lines_x#4 )
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#27 ← phi( lines/(byte[]) plot_bit#28 lines::@3/(byte[]) plot_bit#29 )
  (byte[]) plot_ylo#27 ← phi( lines/(byte[]) plot_ylo#29 lines::@3/(byte[]) plot_ylo#30 )
  (byte[]) plot_yhi#27 ← phi( lines/(byte[]) plot_yhi#29 lines::@3/(byte[]) plot_yhi#30 )
  (byte[]) plot_xlo#27 ← phi( lines/(byte[]) plot_xlo#28 lines::@3/(byte[]) plot_xlo#29 )
  (byte[]) plot_xhi#27 ← phi( lines/(byte[]) plot_xhi#28 lines::@3/(byte[]) plot_xhi#29 )
  (byte) lines_cnt#2 ← phi( lines/(byte) lines_cnt#3 lines::@3/(byte) lines_cnt#1 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 lines::@3/(byte[]) lines_y#3 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 lines::@3/(byte[]) lines_x#3 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte[]) plot_bit#29 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#30 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#30 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#29 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#29 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte[]) lines_y#3 ← phi( lines::@1/(byte[]) lines_y#1 )
  (byte[]) lines_x#3 ← phi( lines::@1/(byte[]) lines_x#1 )
  (byte) lines_cnt#1 ← phi( lines::@1/(byte) lines_cnt#2 )
  (byte) lines::l#3 ← phi( lines::@1/(byte) lines::l#2 )
  (byte) lines::l#1 ← ++ (byte) lines::l#3
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (byte[]) plot_bit#22 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#21 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#21 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#22 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#22 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte) line::y1#8 ← phi( lines::@1/(byte) line::y1#0 )
  (byte) line::y0#9 ← phi( lines::@1/(byte) line::y0#0 )
  (byte) line::x1#1 ← phi( lines::@1/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( lines::@1/(byte) line::x0#0 )
  (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte[]) plot_bit#16 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#16 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#16 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#16 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#16 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#1 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#1 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#2 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$13 ← (byte) line::x1#2 - (byte) line::x0#2
  (byte) line::xd#0 ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0#1 < (byte) line::y1#1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte[]) plot_bit#14 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#14 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#14 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#14 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#14 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#2 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#2 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#3 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$2 ← (byte) line::x1#3 - (byte) line::x0#3
  (byte) line::xd#1 ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0#2 < (byte) line::y1#2
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte[]) plot_bit#6 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#6 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#6 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#6 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#6 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::y1#9 ← phi( line::@9/(byte) line::y1#2 )
  (byte) line::x1#9 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::y0#3 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::x0#4 ← phi( line::@9/(byte) line::x0#3 )
  (byte) plot::x#0 ← (byte) line::x0#4
  (byte) plot::y#0 ← (byte) line::y0#3
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte[]) plot_bit#4 ← phi( line::@2/(byte[]) plot_bit#6 )
  (byte[]) plot_ylo#4 ← phi( line::@2/(byte[]) plot_ylo#6 )
  (byte[]) plot_yhi#4 ← phi( line::@2/(byte[]) plot_yhi#6 )
  (byte[]) plot_xlo#4 ← phi( line::@2/(byte[]) plot_xlo#6 )
  (byte[]) plot_xhi#4 ← phi( line::@2/(byte[]) plot_xhi#6 )
  (byte) line::y1#3 ← phi( line::@2/(byte) line::y1#9 )
  (byte) line::x1#4 ← phi( line::@2/(byte) line::x1#9 )
  (byte) plot::x#1 ← (byte) line::x1#4
  (byte) plot::y#1 ← (byte) line::y1#3
  call plot param-assignment
  to:line::@18
line::@18: scope:[line]  from line::@17
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte[]) plot_bit#15 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#15 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#15 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#15 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#15 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::x1#11 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::x0#9 ← phi( line::@9/(byte) line::x0#3 )
  (byte) line::xd#2 ← phi( line::@9/(byte) line::xd#1 )
  (byte) line::y0#4 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::y1#4 ← phi( line::@9/(byte) line::y1#2 )
  (byte~) line::$5 ← (byte) line::y1#4 - (byte) line::y0#4
  (byte) line::yd#0 ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd#0 < (byte) line::xd#2
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte[]) plot_bit#9 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#9 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#9 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#9 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#9 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::y1#10 ← phi( line::@10/(byte) line::y1#4 )
  (byte) line::x1#10 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#5 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#5 ← phi( line::@10/(byte) line::x0#9 )
  (byte) plot::x#2 ← (byte) line::x0#5
  (byte) plot::y#2 ← (byte) line::y0#5
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte[]) plot_bit#5 ← phi( line::@3/(byte[]) plot_bit#9 )
  (byte[]) plot_ylo#5 ← phi( line::@3/(byte[]) plot_ylo#9 )
  (byte[]) plot_yhi#5 ← phi( line::@3/(byte[]) plot_yhi#9 )
  (byte[]) plot_xlo#5 ← phi( line::@3/(byte[]) plot_xlo#9 )
  (byte[]) plot_xhi#5 ← phi( line::@3/(byte[]) plot_xhi#9 )
  (byte) line::y1#5 ← phi( line::@3/(byte) line::y1#10 )
  (byte) line::x1#5 ← phi( line::@3/(byte) line::x1#10 )
  (byte) plot::x#3 ← (byte) line::x1#5
  (byte) plot::y#3 ← (byte) line::y1#5
  call plot param-assignment
  to:line::@20
line::@20: scope:[line]  from line::@19
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte[]) plot_bit#23 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#22 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#22 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#23 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#23 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::yd#1 ← phi( line::@10/(byte) line::yd#0 )
  (byte) line::xd#3 ← phi( line::@10/(byte) line::xd#2 )
  (byte) line::x1#6 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#6 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#6 ← phi( line::@10/(byte) line::x0#9 )
  (byte) line_xdyi::x#0 ← (byte) line::x0#6
  (byte) line_xdyi::y#0 ← (byte) line::y0#6
  (byte) line_xdyi::x1#0 ← (byte) line::x1#6
  (byte) line_xdyi::xd#0 ← (byte) line::xd#3
  (byte) line_xdyi::yd#0 ← (byte) line::yd#1
  call line_xdyi param-assignment
  to:line::@21
line::@21: scope:[line]  from line::@11
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte[]) plot_bit#10 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#10 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#10 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#10 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#10 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#11 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#12 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#7 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#7 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#4 ← (byte) line::x0#7
  (byte) plot::y#4 ← (byte) line::y0#7
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte[]) plot_bit#7 ← phi( line::@7/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#7 ← phi( line::@7/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#7 ← phi( line::@7/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#7 ← phi( line::@7/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#7 ← phi( line::@7/(byte[]) plot_xhi#10 )
  (byte) line::y1#6 ← phi( line::@7/(byte) line::y1#11 )
  (byte) line::x1#7 ← phi( line::@7/(byte) line::x1#12 )
  (byte) plot::x#5 ← (byte) line::x1#7
  (byte) plot::y#5 ← (byte) line::y1#6
  call plot param-assignment
  to:line::@23
line::@23: scope:[line]  from line::@22
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte[]) plot_bit#3 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#3 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#3 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#3 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#3 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#12 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#13 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#8 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#8 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#6 ← (byte) line::x0#8
  (byte) plot::y#6 ← (byte) line::y0#8
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte[]) plot_bit#8 ← phi( line::@15/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#8 ← phi( line::@15/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#8 ← phi( line::@15/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#8 ← phi( line::@15/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#8 ← phi( line::@15/(byte[]) plot_xhi#3 )
  (byte) line::y1#7 ← phi( line::@15/(byte) line::y1#12 )
  (byte) line::x1#8 ← phi( line::@15/(byte) line::x1#13 )
  (byte) plot::x#7 ← (byte) line::x1#8
  (byte) plot::y#7 ← (byte) line::y1#7
  call plot param-assignment
  to:line::@25
line::@25: scope:[line]  from line::@24
  to:line::@return
line::@return: scope:[line]  from line::@18 line::@20 line::@21 line::@23 line::@25
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::x1#5 ← phi( line::@11/(byte) line_xdyi::x1#0 )
  (byte[]) plot_bit#17 ← phi( line::@11/(byte[]) plot_bit#23 )
  (byte[]) plot_ylo#17 ← phi( line::@11/(byte[]) plot_ylo#22 )
  (byte[]) plot_yhi#17 ← phi( line::@11/(byte[]) plot_yhi#22 )
  (byte[]) plot_xlo#17 ← phi( line::@11/(byte[]) plot_xlo#23 )
  (byte[]) plot_xhi#17 ← phi( line::@11/(byte[]) plot_xhi#23 )
  (byte) line_xdyi::xd#4 ← phi( line::@11/(byte) line_xdyi::xd#0 )
  (byte) line_xdyi::y#4 ← phi( line::@11/(byte) line_xdyi::y#0 )
  (byte) line_xdyi::x#5 ← phi( line::@11/(byte) line_xdyi::x#0 )
  (byte) line_xdyi::yd#1 ← phi( line::@11/(byte) line_xdyi::yd#0 )
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd#1 >> (byte) 1
  (byte) line_xdyi::e#0 ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#4 ← phi( line_xdyi/(byte) line_xdyi::x1#5 line_xdyi::@2/(byte) line_xdyi::x1#1 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#17 line_xdyi::@2/(byte[]) plot_bit#18 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#17 line_xdyi::@2/(byte[]) plot_ylo#18 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#17 line_xdyi::@2/(byte[]) plot_yhi#18 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#17 line_xdyi::@2/(byte[]) plot_xlo#18 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#17 line_xdyi::@2/(byte[]) plot_xhi#18 )
  (byte) line_xdyi::xd#3 ← phi( line_xdyi/(byte) line_xdyi::xd#4 line_xdyi::@2/(byte) line_xdyi::xd#5 )
  (byte) line_xdyi::yd#3 ← phi( line_xdyi/(byte) line_xdyi::yd#1 line_xdyi::@2/(byte) line_xdyi::yd#4 )
  (byte) line_xdyi::e#5 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#4 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#5 line_xdyi::@2/(byte) line_xdyi::x#4 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte[]) plot_bit#25 ← phi( line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#24 ← phi( line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_yhi#24 ← phi( line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#25 ← phi( line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#25 ← phi( line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte) line_xdyi::y#6 ← phi( line_xdyi::@1/(byte) line_xdyi::y#2 )
  (byte) line_xdyi::x1#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x1#4 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi::@1/(byte) line_xdyi::xd#3 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi::@1/(byte) line_xdyi::yd#3 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi::@1/(byte) line_xdyi::e#5 )
  (byte) line_xdyi::x#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x#2 )
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x#3 + (byte) 1
  (byte) line_xdyi::x#1 ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (byte) line_xdyi::e#1 ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd#1 < (byte) line_xdyi::e#1
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte[]) plot_bit#18 ← phi( line_xdyi::@3/(byte[]) plot_bit#24 line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#18 ← phi( line_xdyi::@3/(byte[]) plot_ylo#23 line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#18 ← phi( line_xdyi::@3/(byte[]) plot_yhi#23 line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#18 ← phi( line_xdyi::@3/(byte[]) plot_xlo#24 line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#18 ← phi( line_xdyi::@3/(byte[]) plot_xhi#24 line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::xd#5 ← phi( line_xdyi::@3/(byte) line_xdyi::xd#2 line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::yd#4 ← phi( line_xdyi::@3/(byte) line_xdyi::yd#5 line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte) line_xdyi::x#4 ← phi( line_xdyi::@3/(byte) line_xdyi::x#6 line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#1 ← phi( line_xdyi::@3/(byte) line_xdyi::x1#2 line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#4 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte[]) plot_bit#24 ← phi( line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#23 ← phi( line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#23 ← phi( line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#24 ← phi( line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#24 ← phi( line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::yd#5 ← phi( line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::x#6 ← phi( line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#2 ← phi( line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte) line_xdyi::xd#2 ← phi( line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::e#4 ← phi( line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#3 ← phi( line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y#3 + (byte) 1
  (byte) line_xdyi::y#1 ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e#4 - (byte) line_xdyi::xd#2
  (byte) line_xdyi::e#2 ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#3 line::@17/(byte[]) plot_bit#4 line::@19/(byte[]) plot_bit#5 line::@2/(byte[]) plot_bit#6 line::@22/(byte[]) plot_bit#7 line::@24/(byte[]) plot_bit#8 line::@3/(byte[]) plot_bit#9 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#3 line::@17/(byte[]) plot_ylo#4 line::@19/(byte[]) plot_ylo#5 line::@2/(byte[]) plot_ylo#6 line::@22/(byte[]) plot_ylo#7 line::@24/(byte[]) plot_ylo#8 line::@3/(byte[]) plot_ylo#9 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#3 line::@17/(byte[]) plot_yhi#4 line::@19/(byte[]) plot_yhi#5 line::@2/(byte[]) plot_yhi#6 line::@22/(byte[]) plot_yhi#7 line::@24/(byte[]) plot_yhi#8 line::@3/(byte[]) plot_yhi#9 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#3 line::@17/(byte[]) plot_xlo#4 line::@19/(byte[]) plot_xlo#5 line::@2/(byte[]) plot_xlo#6 line::@22/(byte[]) plot_xlo#7 line::@24/(byte[]) plot_xlo#8 line::@3/(byte[]) plot_xlo#9 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#3 line::@17/(byte[]) plot_xhi#4 line::@19/(byte[]) plot_xhi#5 line::@2/(byte[]) plot_xhi#6 line::@22/(byte[]) plot_xhi#7 line::@24/(byte[]) plot_xhi#8 line::@3/(byte[]) plot_xhi#9 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte[]) plot_yhi#28 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_ylo#28 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_bit#12 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_xhi#12 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte*) BITMAP#4 ← phi( main::@3/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#12 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#25 ← phi( init_plot_tables/(byte[]) plot_yhi#28 init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#25 ← phi( init_plot_tables/(byte[]) plot_ylo#28 init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#12 init_plot_tables::@2/(byte[]) plot_bit#13 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#12 init_plot_tables::@2/(byte[]) plot_xhi#13 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#12 init_plot_tables::@2/(byte[]) plot_xlo#13 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#19 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 init_plot_tables::@5/(byte[]) plot_yhi#26 )
  (byte[]) plot_ylo#19 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 init_plot_tables::@5/(byte[]) plot_ylo#26 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#20 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#20 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#20 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#26 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 )
  (byte[]) plot_ylo#26 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 )
  (byte[]) plot_bit#20 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#20 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#20 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#13 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#12 init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#12 init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#20 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#20 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#20 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  (byte[]) plot_yhi#34 ← phi( @begin/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#34 ← phi( @begin/(byte[]) plot_ylo#0 )
  (byte) lines_cnt#9 ← phi( @begin/(byte) lines_cnt#0 )
  (byte[]) lines_y#9 ← phi( @begin/(byte[]) lines_y#0 )
  (byte[]) lines_x#9 ← phi( @begin/(byte[]) lines_x#0 )
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plot_bit#26 ← phi( @begin/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#26 ← phi( @begin/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#26 ← phi( @begin/(byte[]) plot_xlo#0 )
  (byte*) BITMAP#7 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#2 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#2 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#2 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#2 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#2 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#2 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  call main param-assignment
  to:@8
@8: scope:[]  from @7
  to:@end
@end: scope:[]  from @8

INITIAL SSA SYMBOL TABLE
(label) @7
(label) @8
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#2
(byte*) BITMAP
(byte*) BITMAP#0
(byte*) BITMAP#1
(byte*) BITMAP#2
(byte*) BITMAP#3
(byte*) BITMAP#4
(byte*) BITMAP#5
(byte*) BITMAP#6
(byte*) BITMAP#7
(byte*) BITMAP#8
(byte*) BITMAP#9
(byte) BMM
(byte) BMM#0
(byte) BMM#1
(byte) BMM#2
(byte*) COLS
(byte*) COLS#0
(byte) CSEL
(byte) CSEL#0
(byte*) D011
(byte*) D011#0
(byte*) D011#1
(byte*) D011#2
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte*) D018#1
(byte*) D018#2
(byte) DEN
(byte) DEN#0
(byte) DEN#1
(byte) DEN#2
(byte) ECM
(byte) ECM#0
(byte*) FGCOL
(byte*) FGCOL#0
(byte*) FGCOL#1
(byte*) FGCOL#2
(byte) MCM
(byte) MCM#0
(byte) RSEL
(byte) RSEL#0
(byte) RSEL#1
(byte) RSEL#2
(byte) RST8
(byte) RST8#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCROLL
(byte*) SCROLL#0
(void()) init_plot_tables()
(byte~) init_plot_tables::$0
(byte~) init_plot_tables::$1
(byte~) init_plot_tables::$10
(boolean~) init_plot_tables::$11
(boolean~) init_plot_tables::$12
(byte*~) init_plot_tables::$13
(boolean~) init_plot_tables::$14
(byte~) init_plot_tables::$2
(boolean~) init_plot_tables::$3
(boolean~) init_plot_tables::$4
(boolean~) init_plot_tables::$5
(byte~) init_plot_tables::$6
(byte~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(byte~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@5
(label) init_plot_tables::@6
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#0
(byte) init_plot_tables::bit#1
(byte) init_plot_tables::bit#2
(byte) init_plot_tables::bit#3
(byte) init_plot_tables::bit#4
(byte) init_plot_tables::x
(byte) init_plot_tables::x#0
(byte) init_plot_tables::x#1
(byte) init_plot_tables::x#2
(byte) init_plot_tables::x#3
(byte) init_plot_tables::x#4
(byte) init_plot_tables::y
(byte) init_plot_tables::y#0
(byte) init_plot_tables::y#1
(byte) init_plot_tables::y#2
(byte) init_plot_tables::y#3
(byte) init_plot_tables::y#4
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#0
(byte*) init_plot_tables::yoffs#1
(byte*) init_plot_tables::yoffs#2
(byte*) init_plot_tables::yoffs#3
(byte*) init_plot_tables::yoffs#4
(void()) init_screen()
(byte*~) init_screen::$0
(boolean~) init_screen::$1
(byte*~) init_screen::$2
(boolean~) init_screen::$3
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@3
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#0
(byte*) init_screen::b#1
(byte*) init_screen::b#2
(byte*) init_screen::c
(byte*) init_screen::c#0
(byte*) init_screen::c#1
(byte*) init_screen::c#2
(void()) line((byte) line::x0 , (byte) line::x1 , (byte) line::y0 , (byte) line::y1)
(boolean~) line::$0
(boolean~) line::$1
(byte~) line::$13
(boolean~) line::$14
(boolean~) line::$15
(byte~) line::$2
(boolean~) line::$3
(boolean~) line::$4
(byte~) line::$5
(boolean~) line::$6
(boolean~) line::$7
(label) line::@1
(label) line::@10
(label) line::@11
(label) line::@15
(label) line::@17
(label) line::@18
(label) line::@19
(label) line::@2
(label) line::@20
(label) line::@21
(label) line::@22
(label) line::@23
(label) line::@24
(label) line::@25
(label) line::@3
(label) line::@7
(label) line::@9
(label) line::@return
(byte) line::x0
(byte) line::x0#0
(byte) line::x0#1
(byte) line::x0#2
(byte) line::x0#3
(byte) line::x0#4
(byte) line::x0#5
(byte) line::x0#6
(byte) line::x0#7
(byte) line::x0#8
(byte) line::x0#9
(byte) line::x1
(byte) line::x1#0
(byte) line::x1#1
(byte) line::x1#10
(byte) line::x1#11
(byte) line::x1#12
(byte) line::x1#13
(byte) line::x1#2
(byte) line::x1#3
(byte) line::x1#4
(byte) line::x1#5
(byte) line::x1#6
(byte) line::x1#7
(byte) line::x1#8
(byte) line::x1#9
(byte) line::xd
(byte) line::xd#0
(byte) line::xd#1
(byte) line::xd#2
(byte) line::xd#3
(byte) line::y0
(byte) line::y0#0
(byte) line::y0#1
(byte) line::y0#2
(byte) line::y0#3
(byte) line::y0#4
(byte) line::y0#5
(byte) line::y0#6
(byte) line::y0#7
(byte) line::y0#8
(byte) line::y0#9
(byte) line::y1
(byte) line::y1#0
(byte) line::y1#1
(byte) line::y1#10
(byte) line::y1#11
(byte) line::y1#12
(byte) line::y1#2
(byte) line::y1#3
(byte) line::y1#4
(byte) line::y1#5
(byte) line::y1#6
(byte) line::y1#7
(byte) line::y1#8
(byte) line::y1#9
(byte) line::yd
(byte) line::yd#0
(byte) line::yd#1
(void()) line_xdyi((byte) line_xdyi::x , (byte) line_xdyi::y , (byte) line_xdyi::x1 , (byte) line_xdyi::xd , (byte) line_xdyi::yd)
(byte~) line_xdyi::$0
(byte~) line_xdyi::$2
(byte~) line_xdyi::$3
(boolean~) line_xdyi::$4
(boolean~) line_xdyi::$5
(byte~) line_xdyi::$6
(byte~) line_xdyi::$7
(byte~) line_xdyi::$8
(boolean~) line_xdyi::$9
(label) line_xdyi::@1
(label) line_xdyi::@2
(label) line_xdyi::@3
(label) line_xdyi::@5
(label) line_xdyi::@return
(byte) line_xdyi::e
(byte) line_xdyi::e#0
(byte) line_xdyi::e#1
(byte) line_xdyi::e#2
(byte) line_xdyi::e#3
(byte) line_xdyi::e#4
(byte) line_xdyi::e#5
(byte) line_xdyi::e#6
(byte) line_xdyi::x
(byte) line_xdyi::x#0
(byte) line_xdyi::x#1
(byte) line_xdyi::x#2
(byte) line_xdyi::x#3
(byte) line_xdyi::x#4
(byte) line_xdyi::x#5
(byte) line_xdyi::x#6
(byte) line_xdyi::x1
(byte) line_xdyi::x1#0
(byte) line_xdyi::x1#1
(byte) line_xdyi::x1#2
(byte) line_xdyi::x1#3
(byte) line_xdyi::x1#4
(byte) line_xdyi::x1#5
(byte) line_xdyi::xd
(byte) line_xdyi::xd#0
(byte) line_xdyi::xd#1
(byte) line_xdyi::xd#2
(byte) line_xdyi::xd#3
(byte) line_xdyi::xd#4
(byte) line_xdyi::xd#5
(byte) line_xdyi::y
(byte) line_xdyi::y#0
(byte) line_xdyi::y#1
(byte) line_xdyi::y#2
(byte) line_xdyi::y#3
(byte) line_xdyi::y#4
(byte) line_xdyi::y#5
(byte) line_xdyi::y#6
(byte) line_xdyi::yd
(byte) line_xdyi::yd#0
(byte) line_xdyi::yd#1
(byte) line_xdyi::yd#2
(byte) line_xdyi::yd#3
(byte) line_xdyi::yd#4
(byte) line_xdyi::yd#5
(void()) lines()
(byte~) lines::$0
(byte~) lines::$1
(byte~) lines::$2
(byte~) lines::$3
(byte~) lines::$4
(byte~) lines::$5
(boolean~) lines::$7
(label) lines::@1
(label) lines::@3
(label) lines::@return
(byte) lines::l
(byte) lines::l#0
(byte) lines::l#1
(byte) lines::l#2
(byte) lines::l#3
(byte) lines_cnt
(byte) lines_cnt#0
(byte) lines_cnt#1
(byte) lines_cnt#2
(byte) lines_cnt#3
(byte) lines_cnt#4
(byte) lines_cnt#5
(byte) lines_cnt#6
(byte) lines_cnt#7
(byte) lines_cnt#8
(byte) lines_cnt#9
(byte[]) lines_x
(byte[]) lines_x#0
(byte[]) lines_x#1
(byte[]) lines_x#2
(byte[]) lines_x#3
(byte[]) lines_x#4
(byte[]) lines_x#5
(byte[]) lines_x#6
(byte[]) lines_x#7
(byte[]) lines_x#8
(byte[]) lines_x#9
(byte[]) lines_y
(byte[]) lines_y#0
(byte[]) lines_y#1
(byte[]) lines_y#2
(byte[]) lines_y#3
(byte[]) lines_y#4
(byte[]) lines_y#5
(byte[]) lines_y#6
(byte[]) lines_y#7
(byte[]) lines_y#8
(byte[]) lines_y#9
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(byte~) plot::$3
(byte~) plot::$4
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0
(byte*) plot::plotter_x
(byte*) plot::plotter_x#0
(byte*) plot::plotter_x#1
(byte*) plot::plotter_x#2
(byte*) plot::plotter_y
(byte*) plot::plotter_y#0
(byte*) plot::plotter_y#1
(byte*) plot::plotter_y#2
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::x#3
(byte) plot::x#4
(byte) plot::x#5
(byte) plot::x#6
(byte) plot::x#7
(byte) plot::x#8
(byte) plot::x#9
(byte) plot::y
(byte) plot::y#0
(byte) plot::y#1
(byte) plot::y#2
(byte) plot::y#3
(byte) plot::y#4
(byte) plot::y#5
(byte) plot::y#6
(byte) plot::y#7
(byte) plot::y#8
(byte) plot::y#9
(byte[]) plot_bit
(byte[]) plot_bit#0
(byte[]) plot_bit#1
(byte[]) plot_bit#10
(byte[]) plot_bit#11
(byte[]) plot_bit#12
(byte[]) plot_bit#13
(byte[]) plot_bit#14
(byte[]) plot_bit#15
(byte[]) plot_bit#16
(byte[]) plot_bit#17
(byte[]) plot_bit#18
(byte[]) plot_bit#19
(byte[]) plot_bit#2
(byte[]) plot_bit#20
(byte[]) plot_bit#21
(byte[]) plot_bit#22
(byte[]) plot_bit#23
(byte[]) plot_bit#24
(byte[]) plot_bit#25
(byte[]) plot_bit#26
(byte[]) plot_bit#27
(byte[]) plot_bit#28
(byte[]) plot_bit#29
(byte[]) plot_bit#3
(byte[]) plot_bit#30
(byte[]) plot_bit#31
(byte[]) plot_bit#32
(byte[]) plot_bit#4
(byte[]) plot_bit#5
(byte[]) plot_bit#6
(byte[]) plot_bit#7
(byte[]) plot_bit#8
(byte[]) plot_bit#9
(byte[]) plot_xhi
(byte[]) plot_xhi#0
(byte[]) plot_xhi#1
(byte[]) plot_xhi#10
(byte[]) plot_xhi#11
(byte[]) plot_xhi#12
(byte[]) plot_xhi#13
(byte[]) plot_xhi#14
(byte[]) plot_xhi#15
(byte[]) plot_xhi#16
(byte[]) plot_xhi#17
(byte[]) plot_xhi#18
(byte[]) plot_xhi#19
(byte[]) plot_xhi#2
(byte[]) plot_xhi#20
(byte[]) plot_xhi#21
(byte[]) plot_xhi#22
(byte[]) plot_xhi#23
(byte[]) plot_xhi#24
(byte[]) plot_xhi#25
(byte[]) plot_xhi#26
(byte[]) plot_xhi#27
(byte[]) plot_xhi#28
(byte[]) plot_xhi#29
(byte[]) plot_xhi#3
(byte[]) plot_xhi#30
(byte[]) plot_xhi#31
(byte[]) plot_xhi#32
(byte[]) plot_xhi#4
(byte[]) plot_xhi#5
(byte[]) plot_xhi#6
(byte[]) plot_xhi#7
(byte[]) plot_xhi#8
(byte[]) plot_xhi#9
(byte[]) plot_xlo
(byte[]) plot_xlo#0
(byte[]) plot_xlo#1
(byte[]) plot_xlo#10
(byte[]) plot_xlo#11
(byte[]) plot_xlo#12
(byte[]) plot_xlo#13
(byte[]) plot_xlo#14
(byte[]) plot_xlo#15
(byte[]) plot_xlo#16
(byte[]) plot_xlo#17
(byte[]) plot_xlo#18
(byte[]) plot_xlo#19
(byte[]) plot_xlo#2
(byte[]) plot_xlo#20
(byte[]) plot_xlo#21
(byte[]) plot_xlo#22
(byte[]) plot_xlo#23
(byte[]) plot_xlo#24
(byte[]) plot_xlo#25
(byte[]) plot_xlo#26
(byte[]) plot_xlo#27
(byte[]) plot_xlo#28
(byte[]) plot_xlo#29
(byte[]) plot_xlo#3
(byte[]) plot_xlo#30
(byte[]) plot_xlo#31
(byte[]) plot_xlo#32
(byte[]) plot_xlo#4
(byte[]) plot_xlo#5
(byte[]) plot_xlo#6
(byte[]) plot_xlo#7
(byte[]) plot_xlo#8
(byte[]) plot_xlo#9
(byte[]) plot_yhi
(byte[]) plot_yhi#0
(byte[]) plot_yhi#1
(byte[]) plot_yhi#10
(byte[]) plot_yhi#11
(byte[]) plot_yhi#12
(byte[]) plot_yhi#13
(byte[]) plot_yhi#14
(byte[]) plot_yhi#15
(byte[]) plot_yhi#16
(byte[]) plot_yhi#17
(byte[]) plot_yhi#18
(byte[]) plot_yhi#19
(byte[]) plot_yhi#2
(byte[]) plot_yhi#20
(byte[]) plot_yhi#21
(byte[]) plot_yhi#22
(byte[]) plot_yhi#23
(byte[]) plot_yhi#24
(byte[]) plot_yhi#25
(byte[]) plot_yhi#26
(byte[]) plot_yhi#27
(byte[]) plot_yhi#28
(byte[]) plot_yhi#29
(byte[]) plot_yhi#3
(byte[]) plot_yhi#30
(byte[]) plot_yhi#31
(byte[]) plot_yhi#32
(byte[]) plot_yhi#33
(byte[]) plot_yhi#34
(byte[]) plot_yhi#35
(byte[]) plot_yhi#36
(byte[]) plot_yhi#4
(byte[]) plot_yhi#5
(byte[]) plot_yhi#6
(byte[]) plot_yhi#7
(byte[]) plot_yhi#8
(byte[]) plot_yhi#9
(byte[]) plot_ylo
(byte[]) plot_ylo#0
(byte[]) plot_ylo#1
(byte[]) plot_ylo#10
(byte[]) plot_ylo#11
(byte[]) plot_ylo#12
(byte[]) plot_ylo#13
(byte[]) plot_ylo#14
(byte[]) plot_ylo#15
(byte[]) plot_ylo#16
(byte[]) plot_ylo#17
(byte[]) plot_ylo#18
(byte[]) plot_ylo#19
(byte[]) plot_ylo#2
(byte[]) plot_ylo#20
(byte[]) plot_ylo#21
(byte[]) plot_ylo#22
(byte[]) plot_ylo#23
(byte[]) plot_ylo#24
(byte[]) plot_ylo#25
(byte[]) plot_ylo#26
(byte[]) plot_ylo#27
(byte[]) plot_ylo#28
(byte[]) plot_ylo#29
(byte[]) plot_ylo#3
(byte[]) plot_ylo#30
(byte[]) plot_ylo#31
(byte[]) plot_ylo#32
(byte[]) plot_ylo#33
(byte[]) plot_ylo#34
(byte[]) plot_ylo#35
(byte[]) plot_ylo#36
(byte[]) plot_ylo#4
(byte[]) plot_ylo#5
(byte[]) plot_ylo#6
(byte[]) plot_ylo#7
(byte[]) plot_ylo#8
(byte[]) plot_ylo#9

Culled Empty Block (label) line::@18
Culled Empty Block (label) line::@20
Culled Empty Block (label) line::@21
Culled Empty Block (label) line::@23
Culled Empty Block (label) line::@25
Culled Empty Block (label) @8
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  (byte[]) plot_yhi#32 ← phi( @7/(byte[]) plot_yhi#34 )
  (byte[]) plot_ylo#32 ← phi( @7/(byte[]) plot_ylo#34 )
  (byte) lines_cnt#8 ← phi( @7/(byte) lines_cnt#9 )
  (byte[]) lines_y#8 ← phi( @7/(byte[]) lines_y#9 )
  (byte[]) lines_x#8 ← phi( @7/(byte[]) lines_x#9 )
  (byte*) SCREEN#5 ← phi( @7/(byte*) SCREEN#6 )
  (byte[]) plot_bit#21 ← phi( @7/(byte[]) plot_bit#26 )
  (byte[]) plot_xhi#21 ← phi( @7/(byte[]) plot_xhi#26 )
  (byte[]) plot_xlo#21 ← phi( @7/(byte[]) plot_xlo#26 )
  (byte*) BITMAP#6 ← phi( @7/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @7/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @7/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @7/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @7/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @7/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @7/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @7/(byte*) BGCOL#2 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) plot_yhi#31 ← phi( main/(byte[]) plot_yhi#32 )
  (byte[]) plot_ylo#31 ← phi( main/(byte[]) plot_ylo#32 )
  (byte) lines_cnt#7 ← phi( main/(byte) lines_cnt#8 )
  (byte[]) lines_y#7 ← phi( main/(byte[]) lines_y#8 )
  (byte[]) lines_x#7 ← phi( main/(byte[]) lines_x#8 )
  (byte[]) plot_bit#19 ← phi( main/(byte[]) plot_bit#21 )
  (byte[]) plot_xhi#19 ← phi( main/(byte[]) plot_xhi#21 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#19 ← phi( main/(byte[]) plot_xlo#21 )
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte[]) plot_bit#31 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_ylo#35 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_yhi#35 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_xlo#31 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte[]) plot_xhi#31 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte) lines_cnt#5 ← phi( main::@3/(byte) lines_cnt#7 )
  (byte[]) lines_y#5 ← phi( main::@3/(byte[]) lines_y#7 )
  (byte[]) lines_x#5 ← phi( main::@3/(byte[]) lines_x#7 )
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#30 ← phi( main::@4/(byte[]) plot_bit#31 main::@5/(byte[]) plot_bit#32 )
  (byte[]) plot_ylo#33 ← phi( main::@4/(byte[]) plot_ylo#35 main::@5/(byte[]) plot_ylo#36 )
  (byte[]) plot_yhi#33 ← phi( main::@4/(byte[]) plot_yhi#35 main::@5/(byte[]) plot_yhi#36 )
  (byte[]) plot_xlo#30 ← phi( main::@4/(byte[]) plot_xlo#31 main::@5/(byte[]) plot_xlo#32 )
  (byte[]) plot_xhi#30 ← phi( main::@4/(byte[]) plot_xhi#31 main::@5/(byte[]) plot_xhi#32 )
  (byte) lines_cnt#4 ← phi( main::@4/(byte) lines_cnt#5 main::@5/(byte) lines_cnt#6 )
  (byte[]) lines_y#4 ← phi( main::@4/(byte[]) lines_y#5 main::@5/(byte[]) lines_y#6 )
  (byte[]) lines_x#4 ← phi( main::@4/(byte[]) lines_x#5 main::@5/(byte[]) lines_x#6 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte[]) plot_bit#32 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#36 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#36 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#32 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#32 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#6 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#6 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#6 ← phi( main::@1/(byte[]) lines_x#4 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte[]) plot_bit#28 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#29 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#29 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#28 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#28 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#3 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#2 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#2 ← phi( main::@1/(byte[]) lines_x#4 )
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#27 ← phi( lines/(byte[]) plot_bit#28 lines::@3/(byte[]) plot_bit#29 )
  (byte[]) plot_ylo#27 ← phi( lines/(byte[]) plot_ylo#29 lines::@3/(byte[]) plot_ylo#30 )
  (byte[]) plot_yhi#27 ← phi( lines/(byte[]) plot_yhi#29 lines::@3/(byte[]) plot_yhi#30 )
  (byte[]) plot_xlo#27 ← phi( lines/(byte[]) plot_xlo#28 lines::@3/(byte[]) plot_xlo#29 )
  (byte[]) plot_xhi#27 ← phi( lines/(byte[]) plot_xhi#28 lines::@3/(byte[]) plot_xhi#29 )
  (byte) lines_cnt#2 ← phi( lines/(byte) lines_cnt#3 lines::@3/(byte) lines_cnt#1 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 lines::@3/(byte[]) lines_y#3 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 lines::@3/(byte[]) lines_x#3 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte[]) plot_bit#29 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#30 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#30 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#29 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#29 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte[]) lines_y#3 ← phi( lines::@1/(byte[]) lines_y#1 )
  (byte[]) lines_x#3 ← phi( lines::@1/(byte[]) lines_x#1 )
  (byte) lines_cnt#1 ← phi( lines::@1/(byte) lines_cnt#2 )
  (byte) lines::l#3 ← phi( lines::@1/(byte) lines::l#2 )
  (byte) lines::l#1 ← ++ (byte) lines::l#3
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (byte[]) plot_bit#22 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#21 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#21 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#22 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#22 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte) line::y1#8 ← phi( lines::@1/(byte) line::y1#0 )
  (byte) line::y0#9 ← phi( lines::@1/(byte) line::y0#0 )
  (byte) line::x1#1 ← phi( lines::@1/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( lines::@1/(byte) line::x0#0 )
  (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte[]) plot_bit#16 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#16 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#16 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#16 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#16 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#1 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#1 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#2 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$13 ← (byte) line::x1#2 - (byte) line::x0#2
  (byte) line::xd#0 ← (byte~) line::$13
  (boolean~) line::$14 ← (byte) line::y0#1 < (byte) line::y1#1
  (boolean~) line::$15 ← ! (boolean~) line::$14
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte[]) plot_bit#14 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#14 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#14 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#14 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#14 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#2 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#2 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#3 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$2 ← (byte) line::x1#3 - (byte) line::x0#3
  (byte) line::xd#1 ← (byte~) line::$2
  (boolean~) line::$3 ← (byte) line::y0#2 < (byte) line::y1#2
  (boolean~) line::$4 ← ! (boolean~) line::$3
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte[]) plot_bit#6 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#6 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#6 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#6 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#6 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::y1#9 ← phi( line::@9/(byte) line::y1#2 )
  (byte) line::x1#9 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::y0#3 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::x0#4 ← phi( line::@9/(byte) line::x0#3 )
  (byte) plot::x#0 ← (byte) line::x0#4
  (byte) plot::y#0 ← (byte) line::y0#3
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte[]) plot_bit#4 ← phi( line::@2/(byte[]) plot_bit#6 )
  (byte[]) plot_ylo#4 ← phi( line::@2/(byte[]) plot_ylo#6 )
  (byte[]) plot_yhi#4 ← phi( line::@2/(byte[]) plot_yhi#6 )
  (byte[]) plot_xlo#4 ← phi( line::@2/(byte[]) plot_xlo#6 )
  (byte[]) plot_xhi#4 ← phi( line::@2/(byte[]) plot_xhi#6 )
  (byte) line::y1#3 ← phi( line::@2/(byte) line::y1#9 )
  (byte) line::x1#4 ← phi( line::@2/(byte) line::x1#9 )
  (byte) plot::x#1 ← (byte) line::x1#4
  (byte) plot::y#1 ← (byte) line::y1#3
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte[]) plot_bit#15 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#15 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#15 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#15 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#15 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::x1#11 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::x0#9 ← phi( line::@9/(byte) line::x0#3 )
  (byte) line::xd#2 ← phi( line::@9/(byte) line::xd#1 )
  (byte) line::y0#4 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::y1#4 ← phi( line::@9/(byte) line::y1#2 )
  (byte~) line::$5 ← (byte) line::y1#4 - (byte) line::y0#4
  (byte) line::yd#0 ← (byte~) line::$5
  (boolean~) line::$6 ← (byte) line::yd#0 < (byte) line::xd#2
  (boolean~) line::$7 ← ! (boolean~) line::$6
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte[]) plot_bit#9 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#9 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#9 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#9 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#9 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::y1#10 ← phi( line::@10/(byte) line::y1#4 )
  (byte) line::x1#10 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#5 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#5 ← phi( line::@10/(byte) line::x0#9 )
  (byte) plot::x#2 ← (byte) line::x0#5
  (byte) plot::y#2 ← (byte) line::y0#5
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte[]) plot_bit#5 ← phi( line::@3/(byte[]) plot_bit#9 )
  (byte[]) plot_ylo#5 ← phi( line::@3/(byte[]) plot_ylo#9 )
  (byte[]) plot_yhi#5 ← phi( line::@3/(byte[]) plot_yhi#9 )
  (byte[]) plot_xlo#5 ← phi( line::@3/(byte[]) plot_xlo#9 )
  (byte[]) plot_xhi#5 ← phi( line::@3/(byte[]) plot_xhi#9 )
  (byte) line::y1#5 ← phi( line::@3/(byte) line::y1#10 )
  (byte) line::x1#5 ← phi( line::@3/(byte) line::x1#10 )
  (byte) plot::x#3 ← (byte) line::x1#5
  (byte) plot::y#3 ← (byte) line::y1#5
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte[]) plot_bit#23 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#22 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#22 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#23 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#23 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::yd#1 ← phi( line::@10/(byte) line::yd#0 )
  (byte) line::xd#3 ← phi( line::@10/(byte) line::xd#2 )
  (byte) line::x1#6 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#6 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#6 ← phi( line::@10/(byte) line::x0#9 )
  (byte) line_xdyi::x#0 ← (byte) line::x0#6
  (byte) line_xdyi::y#0 ← (byte) line::y0#6
  (byte) line_xdyi::x1#0 ← (byte) line::x1#6
  (byte) line_xdyi::xd#0 ← (byte) line::xd#3
  (byte) line_xdyi::yd#0 ← (byte) line::yd#1
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte[]) plot_bit#10 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#10 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#10 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#10 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#10 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#11 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#12 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#7 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#7 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#4 ← (byte) line::x0#7
  (byte) plot::y#4 ← (byte) line::y0#7
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte[]) plot_bit#7 ← phi( line::@7/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#7 ← phi( line::@7/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#7 ← phi( line::@7/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#7 ← phi( line::@7/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#7 ← phi( line::@7/(byte[]) plot_xhi#10 )
  (byte) line::y1#6 ← phi( line::@7/(byte) line::y1#11 )
  (byte) line::x1#7 ← phi( line::@7/(byte) line::x1#12 )
  (byte) plot::x#5 ← (byte) line::x1#7
  (byte) plot::y#5 ← (byte) line::y1#6
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte[]) plot_bit#3 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#3 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#3 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#3 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#3 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#12 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#13 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#8 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#8 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#6 ← (byte) line::x0#8
  (byte) plot::y#6 ← (byte) line::y0#8
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte[]) plot_bit#8 ← phi( line::@15/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#8 ← phi( line::@15/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#8 ← phi( line::@15/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#8 ← phi( line::@15/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#8 ← phi( line::@15/(byte[]) plot_xhi#3 )
  (byte) line::y1#7 ← phi( line::@15/(byte) line::y1#12 )
  (byte) line::x1#8 ← phi( line::@15/(byte) line::x1#13 )
  (byte) plot::x#7 ← (byte) line::x1#8
  (byte) plot::y#7 ← (byte) line::y1#7
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::x1#5 ← phi( line::@11/(byte) line_xdyi::x1#0 )
  (byte[]) plot_bit#17 ← phi( line::@11/(byte[]) plot_bit#23 )
  (byte[]) plot_ylo#17 ← phi( line::@11/(byte[]) plot_ylo#22 )
  (byte[]) plot_yhi#17 ← phi( line::@11/(byte[]) plot_yhi#22 )
  (byte[]) plot_xlo#17 ← phi( line::@11/(byte[]) plot_xlo#23 )
  (byte[]) plot_xhi#17 ← phi( line::@11/(byte[]) plot_xhi#23 )
  (byte) line_xdyi::xd#4 ← phi( line::@11/(byte) line_xdyi::xd#0 )
  (byte) line_xdyi::y#4 ← phi( line::@11/(byte) line_xdyi::y#0 )
  (byte) line_xdyi::x#5 ← phi( line::@11/(byte) line_xdyi::x#0 )
  (byte) line_xdyi::yd#1 ← phi( line::@11/(byte) line_xdyi::yd#0 )
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd#1 >> (byte) 1
  (byte) line_xdyi::e#0 ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#4 ← phi( line_xdyi/(byte) line_xdyi::x1#5 line_xdyi::@2/(byte) line_xdyi::x1#1 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#17 line_xdyi::@2/(byte[]) plot_bit#18 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#17 line_xdyi::@2/(byte[]) plot_ylo#18 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#17 line_xdyi::@2/(byte[]) plot_yhi#18 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#17 line_xdyi::@2/(byte[]) plot_xlo#18 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#17 line_xdyi::@2/(byte[]) plot_xhi#18 )
  (byte) line_xdyi::xd#3 ← phi( line_xdyi/(byte) line_xdyi::xd#4 line_xdyi::@2/(byte) line_xdyi::xd#5 )
  (byte) line_xdyi::yd#3 ← phi( line_xdyi/(byte) line_xdyi::yd#1 line_xdyi::@2/(byte) line_xdyi::yd#4 )
  (byte) line_xdyi::e#5 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#4 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#5 line_xdyi::@2/(byte) line_xdyi::x#4 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte[]) plot_bit#25 ← phi( line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#24 ← phi( line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_yhi#24 ← phi( line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#25 ← phi( line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#25 ← phi( line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte) line_xdyi::y#6 ← phi( line_xdyi::@1/(byte) line_xdyi::y#2 )
  (byte) line_xdyi::x1#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x1#4 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi::@1/(byte) line_xdyi::xd#3 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi::@1/(byte) line_xdyi::yd#3 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi::@1/(byte) line_xdyi::e#5 )
  (byte) line_xdyi::x#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x#2 )
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x#3 + (byte) 1
  (byte) line_xdyi::x#1 ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (byte) line_xdyi::e#1 ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd#1 < (byte) line_xdyi::e#1
  (boolean~) line_xdyi::$5 ← ! (boolean~) line_xdyi::$4
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte[]) plot_bit#18 ← phi( line_xdyi::@3/(byte[]) plot_bit#24 line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#18 ← phi( line_xdyi::@3/(byte[]) plot_ylo#23 line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#18 ← phi( line_xdyi::@3/(byte[]) plot_yhi#23 line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#18 ← phi( line_xdyi::@3/(byte[]) plot_xlo#24 line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#18 ← phi( line_xdyi::@3/(byte[]) plot_xhi#24 line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::xd#5 ← phi( line_xdyi::@3/(byte) line_xdyi::xd#2 line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::yd#4 ← phi( line_xdyi::@3/(byte) line_xdyi::yd#5 line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte) line_xdyi::x#4 ← phi( line_xdyi::@3/(byte) line_xdyi::x#6 line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#1 ← phi( line_xdyi::@3/(byte) line_xdyi::x1#2 line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#4 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte[]) plot_bit#24 ← phi( line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#23 ← phi( line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#23 ← phi( line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#24 ← phi( line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#24 ← phi( line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::yd#5 ← phi( line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::x#6 ← phi( line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#2 ← phi( line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte) line_xdyi::xd#2 ← phi( line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::e#4 ← phi( line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#3 ← phi( line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y#3 + (byte) 1
  (byte) line_xdyi::y#1 ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e#4 - (byte) line_xdyi::xd#2
  (byte) line_xdyi::e#2 ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#3 line::@17/(byte[]) plot_bit#4 line::@19/(byte[]) plot_bit#5 line::@2/(byte[]) plot_bit#6 line::@22/(byte[]) plot_bit#7 line::@24/(byte[]) plot_bit#8 line::@3/(byte[]) plot_bit#9 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#3 line::@17/(byte[]) plot_ylo#4 line::@19/(byte[]) plot_ylo#5 line::@2/(byte[]) plot_ylo#6 line::@22/(byte[]) plot_ylo#7 line::@24/(byte[]) plot_ylo#8 line::@3/(byte[]) plot_ylo#9 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#3 line::@17/(byte[]) plot_yhi#4 line::@19/(byte[]) plot_yhi#5 line::@2/(byte[]) plot_yhi#6 line::@22/(byte[]) plot_yhi#7 line::@24/(byte[]) plot_yhi#8 line::@3/(byte[]) plot_yhi#9 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#3 line::@17/(byte[]) plot_xlo#4 line::@19/(byte[]) plot_xlo#5 line::@2/(byte[]) plot_xlo#6 line::@22/(byte[]) plot_xlo#7 line::@24/(byte[]) plot_xlo#8 line::@3/(byte[]) plot_xlo#9 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#3 line::@17/(byte[]) plot_xhi#4 line::@19/(byte[]) plot_xhi#5 line::@2/(byte[]) plot_xhi#6 line::@22/(byte[]) plot_xhi#7 line::@24/(byte[]) plot_xhi#8 line::@3/(byte[]) plot_xhi#9 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte[]) plot_yhi#28 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_ylo#28 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_bit#12 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_xhi#12 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte*) BITMAP#4 ← phi( main::@3/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#12 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#25 ← phi( init_plot_tables/(byte[]) plot_yhi#28 init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#25 ← phi( init_plot_tables/(byte[]) plot_ylo#28 init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#12 init_plot_tables::@2/(byte[]) plot_bit#13 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#12 init_plot_tables::@2/(byte[]) plot_xhi#13 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#12 init_plot_tables::@2/(byte[]) plot_xlo#13 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
  (boolean~) init_plot_tables::$4 ← ! (boolean~) init_plot_tables::$3
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#19 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 init_plot_tables::@5/(byte[]) plot_yhi#26 )
  (byte[]) plot_ylo#19 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 init_plot_tables::@5/(byte[]) plot_ylo#26 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#20 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#20 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#20 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#26 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 )
  (byte[]) plot_ylo#26 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 )
  (byte[]) plot_bit#20 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#20 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#20 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#13 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#12 init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#12 init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
  (boolean~) init_plot_tables::$12 ← ! (boolean~) init_plot_tables::$11
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#20 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#20 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#20 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  (byte[]) plot_yhi#34 ← phi( @begin/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#34 ← phi( @begin/(byte[]) plot_ylo#0 )
  (byte) lines_cnt#9 ← phi( @begin/(byte) lines_cnt#0 )
  (byte[]) lines_y#9 ← phi( @begin/(byte[]) lines_y#0 )
  (byte[]) lines_x#9 ← phi( @begin/(byte[]) lines_x#0 )
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plot_bit#26 ← phi( @begin/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#26 ← phi( @begin/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#26 ← phi( @begin/(byte[]) plot_xlo#0 )
  (byte*) BITMAP#7 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#2 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#2 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#2 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#2 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#2 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#2 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Inversing boolean not (boolean~) line::$1 ← (byte) line::x0#1 >= (byte) line::x1#1 from (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
Inversing boolean not (boolean~) line::$15 ← (byte) line::y0#1 >= (byte) line::y1#1 from (boolean~) line::$14 ← (byte) line::y0#1 < (byte) line::y1#1
Inversing boolean not (boolean~) line::$4 ← (byte) line::y0#2 >= (byte) line::y1#2 from (boolean~) line::$3 ← (byte) line::y0#2 < (byte) line::y1#2
Inversing boolean not (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#2 from (boolean~) line::$6 ← (byte) line::yd#0 < (byte) line::xd#2
Inversing boolean not (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#1 >= (byte) line_xdyi::e#1 from (boolean~) line_xdyi::$4 ← (byte) line_xdyi::xd#1 < (byte) line_xdyi::e#1
Inversing boolean not (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0 from (boolean~) init_plot_tables::$3 ← (byte) init_plot_tables::bit#1 == (byte) 0
Inversing boolean not (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7 from (boolean~) init_plot_tables::$11 ← (byte~) init_plot_tables::$10 == (byte) 7
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  (byte[]) plot_yhi#32 ← phi( @7/(byte[]) plot_yhi#34 )
  (byte[]) plot_ylo#32 ← phi( @7/(byte[]) plot_ylo#34 )
  (byte) lines_cnt#8 ← phi( @7/(byte) lines_cnt#9 )
  (byte[]) lines_y#8 ← phi( @7/(byte[]) lines_y#9 )
  (byte[]) lines_x#8 ← phi( @7/(byte[]) lines_x#9 )
  (byte*) SCREEN#5 ← phi( @7/(byte*) SCREEN#6 )
  (byte[]) plot_bit#21 ← phi( @7/(byte[]) plot_bit#26 )
  (byte[]) plot_xhi#21 ← phi( @7/(byte[]) plot_xhi#26 )
  (byte[]) plot_xlo#21 ← phi( @7/(byte[]) plot_xlo#26 )
  (byte*) BITMAP#6 ← phi( @7/(byte*) BITMAP#7 )
  (byte*) D018#1 ← phi( @7/(byte*) D018#2 )
  (byte*) D011#1 ← phi( @7/(byte*) D011#2 )
  (byte) RSEL#1 ← phi( @7/(byte) RSEL#2 )
  (byte) DEN#1 ← phi( @7/(byte) DEN#2 )
  (byte) BMM#1 ← phi( @7/(byte) BMM#2 )
  (byte*) FGCOL#1 ← phi( @7/(byte*) FGCOL#2 )
  (byte*) BGCOL#1 ← phi( @7/(byte*) BGCOL#2 )
  *((byte*) BGCOL#1) ← (byte) 0
  *((byte*) FGCOL#1) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#1 | (byte) DEN#1
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#1
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#1) ← (byte~) main::$2
  *((byte*) D018#1) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte[]) plot_yhi#31 ← phi( main/(byte[]) plot_yhi#32 )
  (byte[]) plot_ylo#31 ← phi( main/(byte[]) plot_ylo#32 )
  (byte) lines_cnt#7 ← phi( main/(byte) lines_cnt#8 )
  (byte[]) lines_y#7 ← phi( main/(byte[]) lines_y#8 )
  (byte[]) lines_x#7 ← phi( main/(byte[]) lines_x#8 )
  (byte[]) plot_bit#19 ← phi( main/(byte[]) plot_bit#21 )
  (byte[]) plot_xhi#19 ← phi( main/(byte[]) plot_xhi#21 )
  (byte*) BITMAP#8 ← phi( main/(byte*) BITMAP#6 )
  (byte[]) plot_xlo#19 ← phi( main/(byte[]) plot_xlo#21 )
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte[]) plot_bit#31 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_ylo#35 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_yhi#35 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_xlo#31 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte[]) plot_xhi#31 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte) lines_cnt#5 ← phi( main::@3/(byte) lines_cnt#7 )
  (byte[]) lines_y#5 ← phi( main::@3/(byte[]) lines_y#7 )
  (byte[]) lines_x#5 ← phi( main::@3/(byte[]) lines_x#7 )
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#30 ← phi( main::@4/(byte[]) plot_bit#31 main::@5/(byte[]) plot_bit#32 )
  (byte[]) plot_ylo#33 ← phi( main::@4/(byte[]) plot_ylo#35 main::@5/(byte[]) plot_ylo#36 )
  (byte[]) plot_yhi#33 ← phi( main::@4/(byte[]) plot_yhi#35 main::@5/(byte[]) plot_yhi#36 )
  (byte[]) plot_xlo#30 ← phi( main::@4/(byte[]) plot_xlo#31 main::@5/(byte[]) plot_xlo#32 )
  (byte[]) plot_xhi#30 ← phi( main::@4/(byte[]) plot_xhi#31 main::@5/(byte[]) plot_xhi#32 )
  (byte) lines_cnt#4 ← phi( main::@4/(byte) lines_cnt#5 main::@5/(byte) lines_cnt#6 )
  (byte[]) lines_y#4 ← phi( main::@4/(byte[]) lines_y#5 main::@5/(byte[]) lines_y#6 )
  (byte[]) lines_x#4 ← phi( main::@4/(byte[]) lines_x#5 main::@5/(byte[]) lines_x#6 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte[]) plot_bit#32 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#36 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#36 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#32 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#32 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#6 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#6 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#6 ← phi( main::@1/(byte[]) lines_x#4 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte[]) plot_bit#28 ← phi( main::@1/(byte[]) plot_bit#30 )
  (byte[]) plot_ylo#29 ← phi( main::@1/(byte[]) plot_ylo#33 )
  (byte[]) plot_yhi#29 ← phi( main::@1/(byte[]) plot_yhi#33 )
  (byte[]) plot_xlo#28 ← phi( main::@1/(byte[]) plot_xlo#30 )
  (byte[]) plot_xhi#28 ← phi( main::@1/(byte[]) plot_xhi#30 )
  (byte) lines_cnt#3 ← phi( main::@1/(byte) lines_cnt#4 )
  (byte[]) lines_y#2 ← phi( main::@1/(byte[]) lines_y#4 )
  (byte[]) lines_x#2 ← phi( main::@1/(byte[]) lines_x#4 )
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#27 ← phi( lines/(byte[]) plot_bit#28 lines::@3/(byte[]) plot_bit#29 )
  (byte[]) plot_ylo#27 ← phi( lines/(byte[]) plot_ylo#29 lines::@3/(byte[]) plot_ylo#30 )
  (byte[]) plot_yhi#27 ← phi( lines/(byte[]) plot_yhi#29 lines::@3/(byte[]) plot_yhi#30 )
  (byte[]) plot_xlo#27 ← phi( lines/(byte[]) plot_xlo#28 lines::@3/(byte[]) plot_xlo#29 )
  (byte[]) plot_xhi#27 ← phi( lines/(byte[]) plot_xhi#28 lines::@3/(byte[]) plot_xhi#29 )
  (byte) lines_cnt#2 ← phi( lines/(byte) lines_cnt#3 lines::@3/(byte) lines_cnt#1 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 lines::@3/(byte[]) lines_y#3 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 lines::@3/(byte[]) lines_x#3 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte[]) plot_bit#29 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#30 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#30 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#29 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#29 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte[]) lines_y#3 ← phi( lines::@1/(byte[]) lines_y#1 )
  (byte[]) lines_x#3 ← phi( lines::@1/(byte[]) lines_x#1 )
  (byte) lines_cnt#1 ← phi( lines::@1/(byte) lines_cnt#2 )
  (byte) lines::l#3 ← phi( lines::@1/(byte) lines::l#2 )
  (byte) lines::l#1 ← ++ (byte) lines::l#3
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (byte[]) plot_bit#22 ← phi( lines::@1/(byte[]) plot_bit#27 )
  (byte[]) plot_ylo#21 ← phi( lines::@1/(byte[]) plot_ylo#27 )
  (byte[]) plot_yhi#21 ← phi( lines::@1/(byte[]) plot_yhi#27 )
  (byte[]) plot_xlo#22 ← phi( lines::@1/(byte[]) plot_xlo#27 )
  (byte[]) plot_xhi#22 ← phi( lines::@1/(byte[]) plot_xhi#27 )
  (byte) line::y1#8 ← phi( lines::@1/(byte) line::y1#0 )
  (byte) line::y0#9 ← phi( lines::@1/(byte) line::y0#0 )
  (byte) line::x1#1 ← phi( lines::@1/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( lines::@1/(byte) line::x0#0 )
  (boolean~) line::$1 ← (byte) line::x0#1 >= (byte) line::x1#1
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte[]) plot_bit#16 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#16 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#16 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#16 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#16 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#1 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#1 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#2 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$13 ← (byte) line::x1#2 - (byte) line::x0#2
  (byte) line::xd#0 ← (byte~) line::$13
  (boolean~) line::$15 ← (byte) line::y0#1 >= (byte) line::y1#1
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte[]) plot_bit#14 ← phi( line/(byte[]) plot_bit#22 )
  (byte[]) plot_ylo#14 ← phi( line/(byte[]) plot_ylo#21 )
  (byte[]) plot_yhi#14 ← phi( line/(byte[]) plot_yhi#21 )
  (byte[]) plot_xlo#14 ← phi( line/(byte[]) plot_xlo#22 )
  (byte[]) plot_xhi#14 ← phi( line/(byte[]) plot_xhi#22 )
  (byte) line::y1#2 ← phi( line/(byte) line::y1#8 )
  (byte) line::y0#2 ← phi( line/(byte) line::y0#9 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x1#3 ← phi( line/(byte) line::x1#1 )
  (byte~) line::$2 ← (byte) line::x1#3 - (byte) line::x0#3
  (byte) line::xd#1 ← (byte~) line::$2
  (boolean~) line::$4 ← (byte) line::y0#2 >= (byte) line::y1#2
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte[]) plot_bit#6 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#6 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#6 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#6 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#6 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::y1#9 ← phi( line::@9/(byte) line::y1#2 )
  (byte) line::x1#9 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::y0#3 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::x0#4 ← phi( line::@9/(byte) line::x0#3 )
  (byte) plot::x#0 ← (byte) line::x0#4
  (byte) plot::y#0 ← (byte) line::y0#3
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte[]) plot_bit#4 ← phi( line::@2/(byte[]) plot_bit#6 )
  (byte[]) plot_ylo#4 ← phi( line::@2/(byte[]) plot_ylo#6 )
  (byte[]) plot_yhi#4 ← phi( line::@2/(byte[]) plot_yhi#6 )
  (byte[]) plot_xlo#4 ← phi( line::@2/(byte[]) plot_xlo#6 )
  (byte[]) plot_xhi#4 ← phi( line::@2/(byte[]) plot_xhi#6 )
  (byte) line::y1#3 ← phi( line::@2/(byte) line::y1#9 )
  (byte) line::x1#4 ← phi( line::@2/(byte) line::x1#9 )
  (byte) plot::x#1 ← (byte) line::x1#4
  (byte) plot::y#1 ← (byte) line::y1#3
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte[]) plot_bit#15 ← phi( line::@9/(byte[]) plot_bit#14 )
  (byte[]) plot_ylo#15 ← phi( line::@9/(byte[]) plot_ylo#14 )
  (byte[]) plot_yhi#15 ← phi( line::@9/(byte[]) plot_yhi#14 )
  (byte[]) plot_xlo#15 ← phi( line::@9/(byte[]) plot_xlo#14 )
  (byte[]) plot_xhi#15 ← phi( line::@9/(byte[]) plot_xhi#14 )
  (byte) line::x1#11 ← phi( line::@9/(byte) line::x1#3 )
  (byte) line::x0#9 ← phi( line::@9/(byte) line::x0#3 )
  (byte) line::xd#2 ← phi( line::@9/(byte) line::xd#1 )
  (byte) line::y0#4 ← phi( line::@9/(byte) line::y0#2 )
  (byte) line::y1#4 ← phi( line::@9/(byte) line::y1#2 )
  (byte~) line::$5 ← (byte) line::y1#4 - (byte) line::y0#4
  (byte) line::yd#0 ← (byte~) line::$5
  (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#2
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte[]) plot_bit#9 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#9 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#9 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#9 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#9 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::y1#10 ← phi( line::@10/(byte) line::y1#4 )
  (byte) line::x1#10 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#5 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#5 ← phi( line::@10/(byte) line::x0#9 )
  (byte) plot::x#2 ← (byte) line::x0#5
  (byte) plot::y#2 ← (byte) line::y0#5
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte[]) plot_bit#5 ← phi( line::@3/(byte[]) plot_bit#9 )
  (byte[]) plot_ylo#5 ← phi( line::@3/(byte[]) plot_ylo#9 )
  (byte[]) plot_yhi#5 ← phi( line::@3/(byte[]) plot_yhi#9 )
  (byte[]) plot_xlo#5 ← phi( line::@3/(byte[]) plot_xlo#9 )
  (byte[]) plot_xhi#5 ← phi( line::@3/(byte[]) plot_xhi#9 )
  (byte) line::y1#5 ← phi( line::@3/(byte) line::y1#10 )
  (byte) line::x1#5 ← phi( line::@3/(byte) line::x1#10 )
  (byte) plot::x#3 ← (byte) line::x1#5
  (byte) plot::y#3 ← (byte) line::y1#5
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte[]) plot_bit#23 ← phi( line::@10/(byte[]) plot_bit#15 )
  (byte[]) plot_ylo#22 ← phi( line::@10/(byte[]) plot_ylo#15 )
  (byte[]) plot_yhi#22 ← phi( line::@10/(byte[]) plot_yhi#15 )
  (byte[]) plot_xlo#23 ← phi( line::@10/(byte[]) plot_xlo#15 )
  (byte[]) plot_xhi#23 ← phi( line::@10/(byte[]) plot_xhi#15 )
  (byte) line::yd#1 ← phi( line::@10/(byte) line::yd#0 )
  (byte) line::xd#3 ← phi( line::@10/(byte) line::xd#2 )
  (byte) line::x1#6 ← phi( line::@10/(byte) line::x1#11 )
  (byte) line::y0#6 ← phi( line::@10/(byte) line::y0#4 )
  (byte) line::x0#6 ← phi( line::@10/(byte) line::x0#9 )
  (byte) line_xdyi::x#0 ← (byte) line::x0#6
  (byte) line_xdyi::y#0 ← (byte) line::y0#6
  (byte) line_xdyi::x1#0 ← (byte) line::x1#6
  (byte) line_xdyi::xd#0 ← (byte) line::xd#3
  (byte) line_xdyi::yd#0 ← (byte) line::yd#1
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte[]) plot_bit#10 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#10 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#10 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#10 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#10 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#11 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#12 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#7 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#7 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#4 ← (byte) line::x0#7
  (byte) plot::y#4 ← (byte) line::y0#7
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte[]) plot_bit#7 ← phi( line::@7/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#7 ← phi( line::@7/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#7 ← phi( line::@7/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#7 ← phi( line::@7/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#7 ← phi( line::@7/(byte[]) plot_xhi#10 )
  (byte) line::y1#6 ← phi( line::@7/(byte) line::y1#11 )
  (byte) line::x1#7 ← phi( line::@7/(byte) line::x1#12 )
  (byte) plot::x#5 ← (byte) line::x1#7
  (byte) plot::y#5 ← (byte) line::y1#6
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte[]) plot_bit#3 ← phi( line::@1/(byte[]) plot_bit#16 )
  (byte[]) plot_ylo#3 ← phi( line::@1/(byte[]) plot_ylo#16 )
  (byte[]) plot_yhi#3 ← phi( line::@1/(byte[]) plot_yhi#16 )
  (byte[]) plot_xlo#3 ← phi( line::@1/(byte[]) plot_xlo#16 )
  (byte[]) plot_xhi#3 ← phi( line::@1/(byte[]) plot_xhi#16 )
  (byte) line::y1#12 ← phi( line::@1/(byte) line::y1#1 )
  (byte) line::x1#13 ← phi( line::@1/(byte) line::x1#2 )
  (byte) line::y0#8 ← phi( line::@1/(byte) line::y0#1 )
  (byte) line::x0#8 ← phi( line::@1/(byte) line::x0#2 )
  (byte) plot::x#6 ← (byte) line::x0#8
  (byte) plot::y#6 ← (byte) line::y0#8
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte[]) plot_bit#8 ← phi( line::@15/(byte[]) plot_bit#3 )
  (byte[]) plot_ylo#8 ← phi( line::@15/(byte[]) plot_ylo#3 )
  (byte[]) plot_yhi#8 ← phi( line::@15/(byte[]) plot_yhi#3 )
  (byte[]) plot_xlo#8 ← phi( line::@15/(byte[]) plot_xlo#3 )
  (byte[]) plot_xhi#8 ← phi( line::@15/(byte[]) plot_xhi#3 )
  (byte) line::y1#7 ← phi( line::@15/(byte) line::y1#12 )
  (byte) line::x1#8 ← phi( line::@15/(byte) line::x1#13 )
  (byte) plot::x#7 ← (byte) line::x1#8
  (byte) plot::y#7 ← (byte) line::y1#7
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::x1#5 ← phi( line::@11/(byte) line_xdyi::x1#0 )
  (byte[]) plot_bit#17 ← phi( line::@11/(byte[]) plot_bit#23 )
  (byte[]) plot_ylo#17 ← phi( line::@11/(byte[]) plot_ylo#22 )
  (byte[]) plot_yhi#17 ← phi( line::@11/(byte[]) plot_yhi#22 )
  (byte[]) plot_xlo#17 ← phi( line::@11/(byte[]) plot_xlo#23 )
  (byte[]) plot_xhi#17 ← phi( line::@11/(byte[]) plot_xhi#23 )
  (byte) line_xdyi::xd#4 ← phi( line::@11/(byte) line_xdyi::xd#0 )
  (byte) line_xdyi::y#4 ← phi( line::@11/(byte) line_xdyi::y#0 )
  (byte) line_xdyi::x#5 ← phi( line::@11/(byte) line_xdyi::x#0 )
  (byte) line_xdyi::yd#1 ← phi( line::@11/(byte) line_xdyi::yd#0 )
  (byte~) line_xdyi::$0 ← (byte) line_xdyi::yd#1 >> (byte) 1
  (byte) line_xdyi::e#0 ← (byte~) line_xdyi::$0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#4 ← phi( line_xdyi/(byte) line_xdyi::x1#5 line_xdyi::@2/(byte) line_xdyi::x1#1 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#17 line_xdyi::@2/(byte[]) plot_bit#18 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#17 line_xdyi::@2/(byte[]) plot_ylo#18 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#17 line_xdyi::@2/(byte[]) plot_yhi#18 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#17 line_xdyi::@2/(byte[]) plot_xlo#18 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#17 line_xdyi::@2/(byte[]) plot_xhi#18 )
  (byte) line_xdyi::xd#3 ← phi( line_xdyi/(byte) line_xdyi::xd#4 line_xdyi::@2/(byte) line_xdyi::xd#5 )
  (byte) line_xdyi::yd#3 ← phi( line_xdyi/(byte) line_xdyi::yd#1 line_xdyi::@2/(byte) line_xdyi::yd#4 )
  (byte) line_xdyi::e#5 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#4 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#5 line_xdyi::@2/(byte) line_xdyi::x#4 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte[]) plot_bit#25 ← phi( line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#24 ← phi( line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte[]) plot_yhi#24 ← phi( line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#25 ← phi( line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#25 ← phi( line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte) line_xdyi::y#6 ← phi( line_xdyi::@1/(byte) line_xdyi::y#2 )
  (byte) line_xdyi::x1#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x1#4 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi::@1/(byte) line_xdyi::xd#3 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi::@1/(byte) line_xdyi::yd#3 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi::@1/(byte) line_xdyi::e#5 )
  (byte) line_xdyi::x#3 ← phi( line_xdyi::@1/(byte) line_xdyi::x#2 )
  (byte~) line_xdyi::$2 ← (byte) line_xdyi::x#3 + (byte) 1
  (byte) line_xdyi::x#1 ← (byte~) line_xdyi::$2
  (byte~) line_xdyi::$3 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (byte) line_xdyi::e#1 ← (byte~) line_xdyi::$3
  (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#1 >= (byte) line_xdyi::e#1
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte[]) plot_bit#18 ← phi( line_xdyi::@3/(byte[]) plot_bit#24 line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#18 ← phi( line_xdyi::@3/(byte[]) plot_ylo#23 line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#18 ← phi( line_xdyi::@3/(byte[]) plot_yhi#23 line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#18 ← phi( line_xdyi::@3/(byte[]) plot_xlo#24 line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#18 ← phi( line_xdyi::@3/(byte[]) plot_xhi#24 line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::xd#5 ← phi( line_xdyi::@3/(byte) line_xdyi::xd#2 line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::yd#4 ← phi( line_xdyi::@3/(byte) line_xdyi::yd#5 line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte) line_xdyi::x#4 ← phi( line_xdyi::@3/(byte) line_xdyi::x#6 line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#1 ← phi( line_xdyi::@3/(byte) line_xdyi::x1#2 line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#4 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte[]) plot_bit#24 ← phi( line_xdyi::@5/(byte[]) plot_bit#25 )
  (byte[]) plot_ylo#23 ← phi( line_xdyi::@5/(byte[]) plot_ylo#24 )
  (byte[]) plot_yhi#23 ← phi( line_xdyi::@5/(byte[]) plot_yhi#24 )
  (byte[]) plot_xlo#24 ← phi( line_xdyi::@5/(byte[]) plot_xlo#25 )
  (byte[]) plot_xhi#24 ← phi( line_xdyi::@5/(byte[]) plot_xhi#25 )
  (byte) line_xdyi::yd#5 ← phi( line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::x#6 ← phi( line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#2 ← phi( line_xdyi::@5/(byte) line_xdyi::x1#3 )
  (byte) line_xdyi::xd#2 ← phi( line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::e#4 ← phi( line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#3 ← phi( line_xdyi::@5/(byte) line_xdyi::y#6 )
  (byte~) line_xdyi::$6 ← (byte) line_xdyi::y#3 + (byte) 1
  (byte) line_xdyi::y#1 ← (byte~) line_xdyi::$6
  (byte~) line_xdyi::$7 ← (byte) line_xdyi::e#4 - (byte) line_xdyi::xd#2
  (byte) line_xdyi::e#2 ← (byte~) line_xdyi::$7
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#3 line::@17/(byte[]) plot_bit#4 line::@19/(byte[]) plot_bit#5 line::@2/(byte[]) plot_bit#6 line::@22/(byte[]) plot_bit#7 line::@24/(byte[]) plot_bit#8 line::@3/(byte[]) plot_bit#9 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#3 line::@17/(byte[]) plot_ylo#4 line::@19/(byte[]) plot_ylo#5 line::@2/(byte[]) plot_ylo#6 line::@22/(byte[]) plot_ylo#7 line::@24/(byte[]) plot_ylo#8 line::@3/(byte[]) plot_ylo#9 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#3 line::@17/(byte[]) plot_yhi#4 line::@19/(byte[]) plot_yhi#5 line::@2/(byte[]) plot_yhi#6 line::@22/(byte[]) plot_yhi#7 line::@24/(byte[]) plot_yhi#8 line::@3/(byte[]) plot_yhi#9 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#3 line::@17/(byte[]) plot_xlo#4 line::@19/(byte[]) plot_xlo#5 line::@2/(byte[]) plot_xlo#6 line::@22/(byte[]) plot_xlo#7 line::@24/(byte[]) plot_xlo#8 line::@3/(byte[]) plot_xlo#9 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#3 line::@17/(byte[]) plot_xhi#4 line::@19/(byte[]) plot_xhi#5 line::@2/(byte[]) plot_xhi#6 line::@22/(byte[]) plot_xhi#7 line::@24/(byte[]) plot_xhi#8 line::@3/(byte[]) plot_xhi#9 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte~) plot::$4 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte*) plot::plotter#0 ← (byte~) plot::$4
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte[]) plot_yhi#28 ← phi( main::@3/(byte[]) plot_yhi#31 )
  (byte[]) plot_ylo#28 ← phi( main::@3/(byte[]) plot_ylo#31 )
  (byte[]) plot_bit#12 ← phi( main::@3/(byte[]) plot_bit#19 )
  (byte[]) plot_xhi#12 ← phi( main::@3/(byte[]) plot_xhi#19 )
  (byte*) BITMAP#4 ← phi( main::@3/(byte*) BITMAP#8 )
  (byte[]) plot_xlo#12 ← phi( main::@3/(byte[]) plot_xlo#19 )
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#25 ← phi( init_plot_tables/(byte[]) plot_yhi#28 init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#25 ← phi( init_plot_tables/(byte[]) plot_ylo#28 init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#12 init_plot_tables::@2/(byte[]) plot_bit#13 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#12 init_plot_tables::@2/(byte[]) plot_xhi#13 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#4 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#12 init_plot_tables::@2/(byte[]) plot_xlo#13 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte~) init_plot_tables::$2 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (byte) init_plot_tables::bit#1 ← (byte~) init_plot_tables::$2
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#19 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 init_plot_tables::@5/(byte[]) plot_yhi#26 )
  (byte[]) plot_ylo#19 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 init_plot_tables::@5/(byte[]) plot_ylo#26 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#20 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#20 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#9 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#20 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#4 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte[]) plot_yhi#26 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 )
  (byte[]) plot_ylo#26 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 )
  (byte[]) plot_bit#20 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 )
  (byte[]) plot_xhi#20 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#9 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#20 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte[]) plot_yhi#13 ← phi( init_plot_tables::@2/(byte[]) plot_yhi#19 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables::@2/(byte[]) plot_ylo#19 )
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#12 init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#12 init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#20 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#20 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#4 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte[]) plot_yhi#20 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#20 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 )
  (byte) init_plot_tables::y#4 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 )
  (byte*) init_plot_tables::yoffs#3 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 )
  (byte*~) init_plot_tables::$13 ← (byte*) init_plot_tables::yoffs#3 + (word) 320
  (byte*) init_plot_tables::yoffs#1 ← (byte*~) init_plot_tables::$13
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) SCREEN#4 ← phi( main/(byte*) SCREEN#5 )
  (byte*) BITMAP#2 ← phi( main/(byte*) BITMAP#6 )
  (byte*) init_screen::b#0 ← (byte*) BITMAP#2
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#3 ← phi( init_screen/(byte*) SCREEN#4 init_screen::@1/(byte*) SCREEN#3 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#2 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen::@1/(byte*) SCREEN#3 )
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  (byte[]) plot_yhi#34 ← phi( @begin/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#34 ← phi( @begin/(byte[]) plot_ylo#0 )
  (byte) lines_cnt#9 ← phi( @begin/(byte) lines_cnt#0 )
  (byte[]) lines_y#9 ← phi( @begin/(byte[]) lines_y#0 )
  (byte[]) lines_x#9 ← phi( @begin/(byte[]) lines_x#0 )
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plot_bit#26 ← phi( @begin/(byte[]) plot_bit#0 )
  (byte[]) plot_xhi#26 ← phi( @begin/(byte[]) plot_xhi#0 )
  (byte[]) plot_xlo#26 ← phi( @begin/(byte[]) plot_xlo#0 )
  (byte*) BITMAP#7 ← phi( @begin/(byte*) BITMAP#0 )
  (byte*) D018#2 ← phi( @begin/(byte*) D018#0 )
  (byte*) D011#2 ← phi( @begin/(byte*) D011#0 )
  (byte) RSEL#2 ← phi( @begin/(byte) RSEL#0 )
  (byte) DEN#2 ← phi( @begin/(byte) DEN#0 )
  (byte) BMM#2 ← phi( @begin/(byte) BMM#0 )
  (byte*) FGCOL#2 ← phi( @begin/(byte*) FGCOL#0 )
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Not aliassing across scopes: line::x0#0 lines::$0
Not aliassing across scopes: line::x1#0 lines::$2
Not aliassing across scopes: line::y0#0 lines::$3
Not aliassing across scopes: line::y1#0 lines::$5
Not aliassing across scopes: plot::x#0 line::x0#4
Not aliassing across scopes: plot::y#0 line::y0#3
Not aliassing across scopes: plot::x#1 line::x1#4
Not aliassing across scopes: plot::y#1 line::y1#3
Not aliassing across scopes: plot::x#2 line::x0#5
Not aliassing across scopes: plot::y#2 line::y0#5
Not aliassing across scopes: plot::x#3 line::x1#5
Not aliassing across scopes: plot::y#3 line::y1#5
Not aliassing across scopes: line_xdyi::x#0 line::x0#6
Not aliassing across scopes: line_xdyi::y#0 line::y0#6
Not aliassing across scopes: line_xdyi::x1#0 line::x1#6
Not aliassing across scopes: line_xdyi::xd#0 line::xd#3
Not aliassing across scopes: line_xdyi::yd#0 line::yd#1
Not aliassing across scopes: plot::x#4 line::x0#7
Not aliassing across scopes: plot::y#4 line::y0#7
Not aliassing across scopes: plot::x#5 line::x1#7
Not aliassing across scopes: plot::y#5 line::y1#6
Not aliassing across scopes: plot::x#6 line::x0#8
Not aliassing across scopes: plot::y#6 line::y0#8
Not aliassing across scopes: plot::x#7 line::x1#8
Not aliassing across scopes: plot::y#7 line::y1#7
Not aliassing across scopes: plot::x#8 line_xdyi::x#2
Not aliassing across scopes: plot::y#8 line_xdyi::y#2
Not aliassing across scopes: init_screen::b#0 BITMAP#2
Not aliassing across scopes: init_screen::c#0 SCREEN#1
Not aliassing identity: SCREEN#2 SCREEN#2
Alias (byte*) BGCOL#0 = (byte*) BGCOL#1 (byte*) BGCOL#2 
Alias (byte*) FGCOL#0 = (byte*) FGCOL#1 (byte*) FGCOL#2 
Alias (byte) BMM#0 = (byte) BMM#1 (byte) BMM#2 
Alias (byte) DEN#0 = (byte) DEN#1 (byte) DEN#2 
Alias (byte) RSEL#0 = (byte) RSEL#1 (byte) RSEL#2 
Alias (byte*) D011#0 = (byte*) D011#1 (byte*) D011#2 
Alias (byte*) D018#0 = (byte*) D018#1 (byte*) D018#2 
Alias (byte*) BITMAP#0 = (byte*) BITMAP#6 (byte*) BITMAP#7 (byte*) BITMAP#8 (byte*) BITMAP#4 (byte*) BITMAP#2 
Alias (byte[]) plot_xlo#0 = (byte[]) plot_xlo#21 (byte[]) plot_xlo#26 (byte[]) plot_xlo#19 (byte[]) plot_xlo#31 (byte[]) plot_xlo#12 
Alias (byte[]) plot_xhi#0 = (byte[]) plot_xhi#21 (byte[]) plot_xhi#26 (byte[]) plot_xhi#19 (byte[]) plot_xhi#31 (byte[]) plot_xhi#12 
Alias (byte[]) plot_bit#0 = (byte[]) plot_bit#21 (byte[]) plot_bit#26 (byte[]) plot_bit#19 (byte[]) plot_bit#31 (byte[]) plot_bit#12 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#5 (byte*) SCREEN#6 (byte*) SCREEN#4 
Alias (byte[]) lines_x#0 = (byte[]) lines_x#8 (byte[]) lines_x#9 (byte[]) lines_x#7 (byte[]) lines_x#5 
Alias (byte[]) lines_y#0 = (byte[]) lines_y#8 (byte[]) lines_y#9 (byte[]) lines_y#7 (byte[]) lines_y#5 
Alias (byte) lines_cnt#0 = (byte) lines_cnt#8 (byte) lines_cnt#9 (byte) lines_cnt#7 (byte) lines_cnt#5 
Alias (byte[]) plot_ylo#0 = (byte[]) plot_ylo#32 (byte[]) plot_ylo#34 (byte[]) plot_ylo#31 (byte[]) plot_ylo#35 (byte[]) plot_ylo#28 
Alias (byte[]) plot_yhi#0 = (byte[]) plot_yhi#32 (byte[]) plot_yhi#34 (byte[]) plot_yhi#31 (byte[]) plot_yhi#35 (byte[]) plot_yhi#28 
Alias (byte[]) lines_x#2 = (byte[]) lines_x#6 (byte[]) lines_x#4 
Alias (byte[]) lines_y#2 = (byte[]) lines_y#6 (byte[]) lines_y#4 
Alias (byte) lines_cnt#3 = (byte) lines_cnt#6 (byte) lines_cnt#4 
Alias (byte[]) plot_xhi#28 = (byte[]) plot_xhi#32 (byte[]) plot_xhi#30 
Alias (byte[]) plot_xlo#28 = (byte[]) plot_xlo#32 (byte[]) plot_xlo#30 
Alias (byte[]) plot_yhi#29 = (byte[]) plot_yhi#36 (byte[]) plot_yhi#33 
Alias (byte[]) plot_ylo#29 = (byte[]) plot_ylo#36 (byte[]) plot_ylo#33 
Alias (byte[]) plot_bit#28 = (byte[]) plot_bit#32 (byte[]) plot_bit#30 
Alias (byte) lines::l#2 = (byte) lines::l#3 
Alias (byte) lines_cnt#1 = (byte) lines_cnt#2 
Alias (byte[]) lines_x#1 = (byte[]) lines_x#3 
Alias (byte[]) lines_y#1 = (byte[]) lines_y#3 
Alias (byte[]) plot_xhi#10 = (byte[]) plot_xhi#29 (byte[]) plot_xhi#27 (byte[]) plot_xhi#22 (byte[]) plot_xhi#16 (byte[]) plot_xhi#14 (byte[]) plot_xhi#6 (byte[]) plot_xhi#4 (byte[]) plot_xhi#15 (byte[]) plot_xhi#9 (byte[]) plot_xhi#5 (byte[]) plot_xhi#23 (byte[]) plot_xhi#7 (byte[]) plot_xhi#3 (byte[]) plot_xhi#8 (byte[]) plot_xhi#17 
Alias (byte[]) plot_xlo#10 = (byte[]) plot_xlo#29 (byte[]) plot_xlo#27 (byte[]) plot_xlo#22 (byte[]) plot_xlo#16 (byte[]) plot_xlo#14 (byte[]) plot_xlo#6 (byte[]) plot_xlo#4 (byte[]) plot_xlo#15 (byte[]) plot_xlo#9 (byte[]) plot_xlo#5 (byte[]) plot_xlo#23 (byte[]) plot_xlo#7 (byte[]) plot_xlo#3 (byte[]) plot_xlo#8 (byte[]) plot_xlo#17 
Alias (byte[]) plot_yhi#10 = (byte[]) plot_yhi#30 (byte[]) plot_yhi#27 (byte[]) plot_yhi#21 (byte[]) plot_yhi#16 (byte[]) plot_yhi#14 (byte[]) plot_yhi#6 (byte[]) plot_yhi#4 (byte[]) plot_yhi#15 (byte[]) plot_yhi#9 (byte[]) plot_yhi#5 (byte[]) plot_yhi#22 (byte[]) plot_yhi#7 (byte[]) plot_yhi#3 (byte[]) plot_yhi#8 (byte[]) plot_yhi#17 
Alias (byte[]) plot_ylo#10 = (byte[]) plot_ylo#30 (byte[]) plot_ylo#27 (byte[]) plot_ylo#21 (byte[]) plot_ylo#16 (byte[]) plot_ylo#14 (byte[]) plot_ylo#6 (byte[]) plot_ylo#4 (byte[]) plot_ylo#15 (byte[]) plot_ylo#9 (byte[]) plot_ylo#5 (byte[]) plot_ylo#22 (byte[]) plot_ylo#7 (byte[]) plot_ylo#3 (byte[]) plot_ylo#8 (byte[]) plot_ylo#17 
Alias (byte[]) plot_bit#10 = (byte[]) plot_bit#29 (byte[]) plot_bit#27 (byte[]) plot_bit#22 (byte[]) plot_bit#16 (byte[]) plot_bit#14 (byte[]) plot_bit#6 (byte[]) plot_bit#4 (byte[]) plot_bit#15 (byte[]) plot_bit#9 (byte[]) plot_bit#5 (byte[]) plot_bit#23 (byte[]) plot_bit#7 (byte[]) plot_bit#3 (byte[]) plot_bit#8 (byte[]) plot_bit#17 
Alias (byte) line::x0#0 = (byte) line::x0#1 (byte) line::x0#2 (byte) line::x0#3 (byte) line::x0#4 (byte) line::x0#9 (byte) line::x0#5 (byte) line::x0#6 (byte) line::x0#7 (byte) line::x0#8 
Alias (byte) line::x1#0 = (byte) line::x1#1 (byte) line::x1#2 (byte) line::x1#3 (byte) line::x1#9 (byte) line::x1#4 (byte) line::x1#11 (byte) line::x1#10 (byte) line::x1#5 (byte) line::x1#6 (byte) line::x1#12 (byte) line::x1#7 (byte) line::x1#13 (byte) line::x1#8 
Alias (byte) line::y0#0 = (byte) line::y0#9 (byte) line::y0#1 (byte) line::y0#2 (byte) line::y0#3 (byte) line::y0#4 (byte) line::y0#5 (byte) line::y0#6 (byte) line::y0#7 (byte) line::y0#8 
Alias (byte) line::y1#0 = (byte) line::y1#8 (byte) line::y1#1 (byte) line::y1#2 (byte) line::y1#9 (byte) line::y1#3 (byte) line::y1#4 (byte) line::y1#10 (byte) line::y1#5 (byte) line::y1#11 (byte) line::y1#6 (byte) line::y1#12 (byte) line::y1#7 
Alias (byte) line::xd#0 = (byte~) line::$13 
Alias (byte) line::xd#1 = (byte~) line::$2 (byte) line::xd#2 (byte) line::xd#3 
Alias (byte) line::yd#0 = (byte~) line::$5 (byte) line::yd#1 
Alias (byte) line_xdyi::yd#0 = (byte) line_xdyi::yd#1 
Alias (byte) line_xdyi::x#0 = (byte) line_xdyi::x#5 
Alias (byte) line_xdyi::y#0 = (byte) line_xdyi::y#4 
Alias (byte) line_xdyi::xd#0 = (byte) line_xdyi::xd#4 
Alias (byte) line_xdyi::x1#0 = (byte) line_xdyi::x1#5 
Alias (byte) line_xdyi::e#0 = (byte~) line_xdyi::$0 
Alias (byte) line_xdyi::x#2 = (byte) line_xdyi::x#3 
Alias (byte) line_xdyi::e#3 = (byte) line_xdyi::e#5 
Alias (byte) line_xdyi::yd#2 = (byte) line_xdyi::yd#3 (byte) line_xdyi::yd#5 
Alias (byte) line_xdyi::xd#1 = (byte) line_xdyi::xd#3 (byte) line_xdyi::xd#2 
Alias (byte) line_xdyi::x1#2 = (byte) line_xdyi::x1#3 (byte) line_xdyi::x1#4 
Alias (byte) line_xdyi::y#2 = (byte) line_xdyi::y#6 (byte) line_xdyi::y#3 
Alias (byte[]) plot_xhi#11 = (byte[]) plot_xhi#25 (byte[]) plot_xhi#24 
Alias (byte[]) plot_xlo#11 = (byte[]) plot_xlo#25 (byte[]) plot_xlo#24 
Alias (byte[]) plot_yhi#11 = (byte[]) plot_yhi#24 (byte[]) plot_yhi#23 
Alias (byte[]) plot_ylo#11 = (byte[]) plot_ylo#24 (byte[]) plot_ylo#23 
Alias (byte[]) plot_bit#11 = (byte[]) plot_bit#25 (byte[]) plot_bit#24 
Alias (byte) line_xdyi::x#1 = (byte~) line_xdyi::$2 (byte) line_xdyi::x#6 
Alias (byte) line_xdyi::e#1 = (byte~) line_xdyi::$3 (byte) line_xdyi::e#4 
Alias (byte) line_xdyi::y#1 = (byte~) line_xdyi::$6 
Alias (byte) line_xdyi::e#2 = (byte~) line_xdyi::$7 
Alias (byte*) plot::plotter#0 = (byte~) plot::$4 
Alias (byte) init_plot_tables::bit#1 = (byte~) init_plot_tables::$2 
Alias (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#4 
Alias (byte[]) plot_xlo#2 = (byte[]) plot_xlo#20 
Alias (byte*) BITMAP#1 = (byte*) BITMAP#9 
Alias (byte[]) plot_xhi#2 = (byte[]) plot_xhi#20 
Alias (byte[]) plot_bit#2 = (byte[]) plot_bit#20 
Alias (byte[]) plot_ylo#25 = (byte[]) plot_ylo#26 
Alias (byte[]) plot_yhi#25 = (byte[]) plot_yhi#26 
Alias (byte[]) plot_ylo#13 = (byte[]) plot_ylo#19 
Alias (byte[]) plot_yhi#13 = (byte[]) plot_yhi#19 
Alias (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#3 
Alias (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#4 
Alias (byte[]) plot_ylo#2 = (byte[]) plot_ylo#20 
Alias (byte[]) plot_yhi#2 = (byte[]) plot_yhi#20 
Alias (byte*) init_plot_tables::yoffs#1 = (byte*~) init_plot_tables::$13 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#28 ← phi( main::@4/(byte[]) plot_bit#0 main::@5/(byte[]) plot_bit#28 )
  (byte[]) plot_ylo#29 ← phi( main::@4/(byte[]) plot_ylo#0 main::@5/(byte[]) plot_ylo#29 )
  (byte[]) plot_yhi#29 ← phi( main::@4/(byte[]) plot_yhi#0 main::@5/(byte[]) plot_yhi#29 )
  (byte[]) plot_xlo#28 ← phi( main::@4/(byte[]) plot_xlo#0 main::@5/(byte[]) plot_xlo#28 )
  (byte[]) plot_xhi#28 ← phi( main::@4/(byte[]) plot_xhi#0 main::@5/(byte[]) plot_xhi#28 )
  (byte) lines_cnt#3 ← phi( main::@4/(byte) lines_cnt#0 main::@5/(byte) lines_cnt#3 )
  (byte[]) lines_y#2 ← phi( main::@4/(byte[]) lines_y#0 main::@5/(byte[]) lines_y#2 )
  (byte[]) lines_x#2 ← phi( main::@4/(byte[]) lines_x#0 main::@5/(byte[]) lines_x#2 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#10 ← phi( lines/(byte[]) plot_bit#28 lines::@3/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#10 ← phi( lines/(byte[]) plot_ylo#29 lines::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#10 ← phi( lines/(byte[]) plot_yhi#29 lines::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#10 ← phi( lines/(byte[]) plot_xlo#28 lines::@3/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#10 ← phi( lines/(byte[]) plot_xhi#28 lines::@3/(byte[]) plot_xhi#10 )
  (byte) lines_cnt#1 ← phi( lines/(byte) lines_cnt#3 lines::@3/(byte) lines_cnt#1 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 lines::@3/(byte[]) lines_y#1 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 lines::@3/(byte[]) lines_x#1 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (boolean~) line::$1 ← (byte) line::x0#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$15 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$4 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#1
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#2 ← phi( line_xdyi/(byte) line_xdyi::x1#0 line_xdyi::@2/(byte) line_xdyi::x1#1 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#10 line_xdyi::@2/(byte[]) plot_bit#18 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#10 line_xdyi::@2/(byte[]) plot_ylo#18 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#10 line_xdyi::@2/(byte[]) plot_yhi#18 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#10 line_xdyi::@2/(byte[]) plot_xlo#18 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#10 line_xdyi::@2/(byte[]) plot_xhi#18 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi/(byte) line_xdyi::xd#0 line_xdyi::@2/(byte) line_xdyi::xd#5 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi/(byte) line_xdyi::yd#0 line_xdyi::@2/(byte) line_xdyi::yd#4 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#4 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#1 >= (byte) line_xdyi::e#1
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte[]) plot_bit#18 ← phi( line_xdyi::@3/(byte[]) plot_bit#11 line_xdyi::@5/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#18 ← phi( line_xdyi::@3/(byte[]) plot_ylo#11 line_xdyi::@5/(byte[]) plot_ylo#11 )
  (byte[]) plot_yhi#18 ← phi( line_xdyi::@3/(byte[]) plot_yhi#11 line_xdyi::@5/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#18 ← phi( line_xdyi::@3/(byte[]) plot_xlo#11 line_xdyi::@5/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#18 ← phi( line_xdyi::@3/(byte[]) plot_xhi#11 line_xdyi::@5/(byte[]) plot_xhi#11 )
  (byte) line_xdyi::xd#5 ← phi( line_xdyi::@3/(byte) line_xdyi::xd#1 line_xdyi::@5/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::yd#4 ← phi( line_xdyi::@3/(byte) line_xdyi::yd#2 line_xdyi::@5/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte) line_xdyi::x#4 ← phi( line_xdyi::@3/(byte) line_xdyi::x#1 line_xdyi::@5/(byte) line_xdyi::x#1 )
  (byte) line_xdyi::x1#1 ← phi( line_xdyi::@3/(byte) line_xdyi::x1#2 line_xdyi::@5/(byte) line_xdyi::x1#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#4 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#1
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#10 line::@17/(byte[]) plot_bit#10 line::@19/(byte[]) plot_bit#10 line::@2/(byte[]) plot_bit#10 line::@22/(byte[]) plot_bit#10 line::@24/(byte[]) plot_bit#10 line::@3/(byte[]) plot_bit#10 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#10 line::@17/(byte[]) plot_ylo#10 line::@19/(byte[]) plot_ylo#10 line::@2/(byte[]) plot_ylo#10 line::@22/(byte[]) plot_ylo#10 line::@24/(byte[]) plot_ylo#10 line::@3/(byte[]) plot_ylo#10 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#10 line::@17/(byte[]) plot_yhi#10 line::@19/(byte[]) plot_yhi#10 line::@2/(byte[]) plot_yhi#10 line::@22/(byte[]) plot_yhi#10 line::@24/(byte[]) plot_yhi#10 line::@3/(byte[]) plot_yhi#10 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#10 line::@17/(byte[]) plot_xlo#10 line::@19/(byte[]) plot_xlo#10 line::@2/(byte[]) plot_xlo#10 line::@22/(byte[]) plot_xlo#10 line::@24/(byte[]) plot_xlo#10 line::@3/(byte[]) plot_xlo#10 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#10 line::@17/(byte[]) plot_xhi#10 line::@19/(byte[]) plot_xhi#10 line::@2/(byte[]) plot_xhi#10 line::@22/(byte[]) plot_xhi#10 line::@24/(byte[]) plot_xhi#10 line::@3/(byte[]) plot_xhi#10 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#25 ← phi( init_plot_tables/(byte[]) plot_yhi#0 init_plot_tables::@2/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#25 ← phi( init_plot_tables/(byte[]) plot_ylo#0 init_plot_tables::@2/(byte[]) plot_ylo#13 )
  (byte[]) plot_bit#2 ← phi( init_plot_tables/(byte[]) plot_bit#0 init_plot_tables::@2/(byte[]) plot_bit#13 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#2 ← phi( init_plot_tables/(byte[]) plot_xhi#0 init_plot_tables::@2/(byte[]) plot_xhi#13 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#0 init_plot_tables::@2/(byte*) BITMAP#5 )
  (byte[]) plot_xlo#2 ← phi( init_plot_tables/(byte[]) plot_xlo#0 init_plot_tables::@2/(byte[]) plot_xlo#13 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#2 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#2 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte[]) plot_yhi#13 ← phi( init_plot_tables::@1/(byte[]) plot_yhi#25 init_plot_tables::@5/(byte[]) plot_yhi#25 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables::@1/(byte[]) plot_ylo#25 init_plot_tables::@5/(byte[]) plot_ylo#25 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables::@1/(byte[]) plot_bit#2 init_plot_tables::@5/(byte[]) plot_bit#2 )
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables::@1/(byte[]) plot_xhi#2 init_plot_tables::@5/(byte[]) plot_xhi#2 )
  (byte*) BITMAP#5 ← phi( init_plot_tables::@1/(byte*) BITMAP#1 init_plot_tables::@5/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables::@1/(byte[]) plot_xlo#2 init_plot_tables::@5/(byte[]) plot_xlo#2 )
  (byte) init_plot_tables::x#3 ← phi( init_plot_tables::@1/(byte) init_plot_tables::x#2 init_plot_tables::@5/(byte) init_plot_tables::x#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#3
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#2 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#12 init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#2 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#12 init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#2 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@3/(byte[]) plot_yhi#2 init_plot_tables::@7/(byte[]) plot_yhi#2 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@3/(byte[]) plot_ylo#2 init_plot_tables::@7/(byte[]) plot_ylo#2 )
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#3 ← phi( init_plot_tables::@3/(byte) init_plot_tables::y#2 init_plot_tables::@7/(byte) init_plot_tables::y#2 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#3
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen/(byte*) SCREEN#0 init_screen::@1/(byte*) SCREEN#1 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#0 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Not aliassing across scopes: line::x0#0 lines::$0
Not aliassing across scopes: line::x1#0 lines::$2
Not aliassing across scopes: line::y0#0 lines::$3
Not aliassing across scopes: line::y1#0 lines::$5
Not aliassing across scopes: plot::x#0 line::x0#0
Not aliassing across scopes: plot::y#0 line::y0#0
Not aliassing across scopes: plot::x#1 line::x1#0
Not aliassing across scopes: plot::y#1 line::y1#0
Not aliassing across scopes: plot::x#2 line::x0#0
Not aliassing across scopes: plot::y#2 line::y0#0
Not aliassing across scopes: plot::x#3 line::x1#0
Not aliassing across scopes: plot::y#3 line::y1#0
Not aliassing across scopes: line_xdyi::x#0 line::x0#0
Not aliassing across scopes: line_xdyi::y#0 line::y0#0
Not aliassing across scopes: line_xdyi::x1#0 line::x1#0
Not aliassing across scopes: line_xdyi::xd#0 line::xd#1
Not aliassing across scopes: line_xdyi::yd#0 line::yd#0
Not aliassing across scopes: plot::x#4 line::x0#0
Not aliassing across scopes: plot::y#4 line::y0#0
Not aliassing across scopes: plot::x#5 line::x1#0
Not aliassing across scopes: plot::y#5 line::y1#0
Not aliassing across scopes: plot::x#6 line::x0#0
Not aliassing across scopes: plot::y#6 line::y0#0
Not aliassing across scopes: plot::x#7 line::x1#0
Not aliassing across scopes: plot::y#7 line::y1#0
Not aliassing across scopes: plot::x#8 line_xdyi::x#2
Not aliassing across scopes: plot::y#8 line_xdyi::y#2
Not aliassing across scopes: init_screen::b#0 BITMAP#0
Not aliassing across scopes: init_screen::c#0 SCREEN#1
Not aliassing identity: SCREEN#2 SCREEN#2
Alias (byte) line_xdyi::x1#1 = (byte) line_xdyi::x1#2 
Alias (byte) line_xdyi::x#1 = (byte) line_xdyi::x#4 
Alias (byte) line_xdyi::yd#2 = (byte) line_xdyi::yd#4 
Alias (byte) line_xdyi::xd#1 = (byte) line_xdyi::xd#5 
Alias (byte[]) plot_xhi#11 = (byte[]) plot_xhi#18 
Alias (byte[]) plot_xlo#11 = (byte[]) plot_xlo#18 
Alias (byte[]) plot_yhi#11 = (byte[]) plot_yhi#18 
Alias (byte[]) plot_ylo#11 = (byte[]) plot_ylo#18 
Alias (byte[]) plot_bit#11 = (byte[]) plot_bit#18 
Alias (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#3 
Alias (byte[]) plot_xlo#13 = (byte[]) plot_xlo#2 
Alias (byte*) BITMAP#1 = (byte*) BITMAP#5 
Alias (byte[]) plot_xhi#13 = (byte[]) plot_xhi#2 
Alias (byte[]) plot_bit#13 = (byte[]) plot_bit#2 
Alias (byte[]) plot_ylo#13 = (byte[]) plot_ylo#25 
Alias (byte[]) plot_yhi#13 = (byte[]) plot_yhi#25 
Alias (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#3 
Alias (byte[]) plot_ylo#12 = (byte[]) plot_ylo#2 
Alias (byte[]) plot_yhi#12 = (byte[]) plot_yhi#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#28 ← phi( main::@4/(byte[]) plot_bit#0 main::@5/(byte[]) plot_bit#28 )
  (byte[]) plot_ylo#29 ← phi( main::@4/(byte[]) plot_ylo#0 main::@5/(byte[]) plot_ylo#29 )
  (byte[]) plot_yhi#29 ← phi( main::@4/(byte[]) plot_yhi#0 main::@5/(byte[]) plot_yhi#29 )
  (byte[]) plot_xlo#28 ← phi( main::@4/(byte[]) plot_xlo#0 main::@5/(byte[]) plot_xlo#28 )
  (byte[]) plot_xhi#28 ← phi( main::@4/(byte[]) plot_xhi#0 main::@5/(byte[]) plot_xhi#28 )
  (byte) lines_cnt#3 ← phi( main::@4/(byte) lines_cnt#0 main::@5/(byte) lines_cnt#3 )
  (byte[]) lines_y#2 ← phi( main::@4/(byte[]) lines_y#0 main::@5/(byte[]) lines_y#2 )
  (byte[]) lines_x#2 ← phi( main::@4/(byte[]) lines_x#0 main::@5/(byte[]) lines_x#2 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#10 ← phi( lines/(byte[]) plot_bit#28 lines::@3/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#10 ← phi( lines/(byte[]) plot_ylo#29 lines::@3/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#10 ← phi( lines/(byte[]) plot_yhi#29 lines::@3/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#10 ← phi( lines/(byte[]) plot_xlo#28 lines::@3/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#10 ← phi( lines/(byte[]) plot_xhi#28 lines::@3/(byte[]) plot_xhi#10 )
  (byte) lines_cnt#1 ← phi( lines/(byte) lines_cnt#3 lines::@3/(byte) lines_cnt#1 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 lines::@3/(byte[]) lines_y#1 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 lines::@3/(byte[]) lines_x#1 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (boolean~) line::$1 ← (byte) line::x0#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$15 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$4 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#1
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#1 ← phi( line_xdyi/(byte) line_xdyi::x1#0 line_xdyi::@2/(byte) line_xdyi::x1#1 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#10 line_xdyi::@2/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#10 line_xdyi::@2/(byte[]) plot_ylo#11 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#10 line_xdyi::@2/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#10 line_xdyi::@2/(byte[]) plot_xlo#11 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#10 line_xdyi::@2/(byte[]) plot_xhi#11 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi/(byte) line_xdyi::xd#0 line_xdyi::@2/(byte) line_xdyi::xd#1 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi/(byte) line_xdyi::yd#0 line_xdyi::@2/(byte) line_xdyi::yd#2 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#1 >= (byte) line_xdyi::e#1
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#1 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#1
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#10 line::@17/(byte[]) plot_bit#10 line::@19/(byte[]) plot_bit#10 line::@2/(byte[]) plot_bit#10 line::@22/(byte[]) plot_bit#10 line::@24/(byte[]) plot_bit#10 line::@3/(byte[]) plot_bit#10 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#10 line::@17/(byte[]) plot_ylo#10 line::@19/(byte[]) plot_ylo#10 line::@2/(byte[]) plot_ylo#10 line::@22/(byte[]) plot_ylo#10 line::@24/(byte[]) plot_ylo#10 line::@3/(byte[]) plot_ylo#10 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#10 line::@17/(byte[]) plot_yhi#10 line::@19/(byte[]) plot_yhi#10 line::@2/(byte[]) plot_yhi#10 line::@22/(byte[]) plot_yhi#10 line::@24/(byte[]) plot_yhi#10 line::@3/(byte[]) plot_yhi#10 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#10 line::@17/(byte[]) plot_xlo#10 line::@19/(byte[]) plot_xlo#10 line::@2/(byte[]) plot_xlo#10 line::@22/(byte[]) plot_xlo#10 line::@24/(byte[]) plot_xlo#10 line::@3/(byte[]) plot_xlo#10 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#10 line::@17/(byte[]) plot_xhi#10 line::@19/(byte[]) plot_xhi#10 line::@2/(byte[]) plot_xhi#10 line::@22/(byte[]) plot_xhi#10 line::@24/(byte[]) plot_xhi#10 line::@3/(byte[]) plot_xhi#10 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#13 ← phi( init_plot_tables/(byte[]) plot_yhi#0 init_plot_tables::@2/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables/(byte[]) plot_ylo#0 init_plot_tables::@2/(byte[]) plot_ylo#13 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables/(byte[]) plot_bit#0 init_plot_tables::@2/(byte[]) plot_bit#13 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables/(byte[]) plot_xhi#0 init_plot_tables::@2/(byte[]) plot_xhi#13 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#0 init_plot_tables::@2/(byte*) BITMAP#1 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables/(byte[]) plot_xlo#0 init_plot_tables::@2/(byte[]) plot_xlo#13 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#13 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#13 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#13 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@4/(byte[]) plot_yhi#12 init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@4/(byte[]) plot_ylo#12 init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#12 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#12 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen/(byte*) SCREEN#0 init_screen::@1/(byte*) SCREEN#1 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#0 init_screen::@1/(byte*) BITMAP#3 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@2/(byte*) SCREEN#2 init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Not aliassing across scopes: line::x0#0 lines::$0
Not aliassing across scopes: line::x1#0 lines::$2
Not aliassing across scopes: line::y0#0 lines::$3
Not aliassing across scopes: line::y1#0 lines::$5
Not aliassing across scopes: plot::x#0 line::x0#0
Not aliassing across scopes: plot::y#0 line::y0#0
Not aliassing across scopes: plot::x#1 line::x1#0
Not aliassing across scopes: plot::y#1 line::y1#0
Not aliassing across scopes: plot::x#2 line::x0#0
Not aliassing across scopes: plot::y#2 line::y0#0
Not aliassing across scopes: plot::x#3 line::x1#0
Not aliassing across scopes: plot::y#3 line::y1#0
Not aliassing across scopes: line_xdyi::x#0 line::x0#0
Not aliassing across scopes: line_xdyi::y#0 line::y0#0
Not aliassing across scopes: line_xdyi::x1#0 line::x1#0
Not aliassing across scopes: line_xdyi::xd#0 line::xd#1
Not aliassing across scopes: line_xdyi::yd#0 line::yd#0
Not aliassing across scopes: plot::x#4 line::x0#0
Not aliassing across scopes: plot::y#4 line::y0#0
Not aliassing across scopes: plot::x#5 line::x1#0
Not aliassing across scopes: plot::y#5 line::y1#0
Not aliassing across scopes: plot::x#6 line::x0#0
Not aliassing across scopes: plot::y#6 line::y0#0
Not aliassing across scopes: plot::x#7 line::x1#0
Not aliassing across scopes: plot::y#7 line::y1#0
Not aliassing across scopes: plot::x#8 line_xdyi::x#2
Not aliassing across scopes: plot::y#8 line_xdyi::y#2
Not aliassing identity: plot_ylo#12 plot_ylo#12
Not aliassing identity: plot_yhi#12 plot_yhi#12
Not aliassing across scopes: init_screen::b#0 BITMAP#0
Not aliassing across scopes: init_screen::c#0 SCREEN#1
Not aliassing identity: SCREEN#2 SCREEN#2
Self Phi Eliminated (byte[]) lines_x#2
Self Phi Eliminated (byte[]) lines_y#2
Self Phi Eliminated (byte) lines_cnt#3
Self Phi Eliminated (byte[]) plot_xhi#28
Self Phi Eliminated (byte[]) plot_xlo#28
Self Phi Eliminated (byte[]) plot_yhi#29
Self Phi Eliminated (byte[]) plot_ylo#29
Self Phi Eliminated (byte[]) plot_bit#28
Self Phi Eliminated (byte[]) lines_x#1
Self Phi Eliminated (byte[]) lines_y#1
Self Phi Eliminated (byte) lines_cnt#1
Self Phi Eliminated (byte[]) plot_xhi#10
Self Phi Eliminated (byte[]) plot_xlo#10
Self Phi Eliminated (byte[]) plot_yhi#10
Self Phi Eliminated (byte[]) plot_ylo#10
Self Phi Eliminated (byte[]) plot_bit#10
Self Phi Eliminated (byte) line_xdyi::yd#2
Self Phi Eliminated (byte) line_xdyi::xd#1
Self Phi Eliminated (byte[]) plot_xhi#11
Self Phi Eliminated (byte[]) plot_xlo#11
Self Phi Eliminated (byte[]) plot_yhi#11
Self Phi Eliminated (byte[]) plot_ylo#11
Self Phi Eliminated (byte[]) plot_bit#11
Self Phi Eliminated (byte) line_xdyi::x1#1
Self Phi Eliminated (byte[]) plot_xlo#13
Self Phi Eliminated (byte*) BITMAP#1
Self Phi Eliminated (byte[]) plot_xhi#13
Self Phi Eliminated (byte[]) plot_bit#13
Self Phi Eliminated (byte[]) plot_ylo#13
Self Phi Eliminated (byte[]) plot_yhi#13
Self Phi Eliminated (byte[]) plot_ylo#12
Self Phi Eliminated (byte[]) plot_yhi#12
Self Phi Eliminated (byte*) BITMAP#3
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte*) SCREEN#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte[]) plot_bit#28 ← phi( main::@4/(byte[]) plot_bit#0 )
  (byte[]) plot_ylo#29 ← phi( main::@4/(byte[]) plot_ylo#0 )
  (byte[]) plot_yhi#29 ← phi( main::@4/(byte[]) plot_yhi#0 )
  (byte[]) plot_xlo#28 ← phi( main::@4/(byte[]) plot_xlo#0 )
  (byte[]) plot_xhi#28 ← phi( main::@4/(byte[]) plot_xhi#0 )
  (byte) lines_cnt#3 ← phi( main::@4/(byte) lines_cnt#0 )
  (byte[]) lines_y#2 ← phi( main::@4/(byte[]) lines_y#0 )
  (byte[]) lines_x#2 ← phi( main::@4/(byte[]) lines_x#0 )
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte[]) plot_bit#10 ← phi( lines/(byte[]) plot_bit#28 )
  (byte[]) plot_ylo#10 ← phi( lines/(byte[]) plot_ylo#29 )
  (byte[]) plot_yhi#10 ← phi( lines/(byte[]) plot_yhi#29 )
  (byte[]) plot_xlo#10 ← phi( lines/(byte[]) plot_xlo#28 )
  (byte[]) plot_xhi#10 ← phi( lines/(byte[]) plot_xhi#28 )
  (byte) lines_cnt#1 ← phi( lines/(byte) lines_cnt#3 )
  (byte[]) lines_y#1 ← phi( lines/(byte[]) lines_y#2 )
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte[]) lines_x#1 ← phi( lines/(byte[]) lines_x#2 )
  (byte~) lines::$0 ← (byte[]) lines_x#1 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#1 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#1
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (boolean~) line::$1 ← (byte) line::x0#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$15 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$4 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#1
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::x1#1 ← phi( line_xdyi/(byte) line_xdyi::x1#0 )
  (byte[]) plot_bit#11 ← phi( line_xdyi/(byte[]) plot_bit#10 )
  (byte[]) plot_ylo#11 ← phi( line_xdyi/(byte[]) plot_ylo#10 )
  (byte[]) plot_yhi#11 ← phi( line_xdyi/(byte[]) plot_yhi#10 )
  (byte[]) plot_xlo#11 ← phi( line_xdyi/(byte[]) plot_xlo#10 )
  (byte[]) plot_xhi#11 ← phi( line_xdyi/(byte[]) plot_xhi#10 )
  (byte) line_xdyi::xd#1 ← phi( line_xdyi/(byte) line_xdyi::xd#0 )
  (byte) line_xdyi::yd#2 ← phi( line_xdyi/(byte) line_xdyi::yd#0 )
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#2
  (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#1 >= (byte) line_xdyi::e#1
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#1 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#1 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#1
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#10 line::@17/(byte[]) plot_bit#10 line::@19/(byte[]) plot_bit#10 line::@2/(byte[]) plot_bit#10 line::@22/(byte[]) plot_bit#10 line::@24/(byte[]) plot_bit#10 line::@3/(byte[]) plot_bit#10 line::@7/(byte[]) plot_bit#10 line_xdyi::@1/(byte[]) plot_bit#11 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#10 line::@17/(byte[]) plot_ylo#10 line::@19/(byte[]) plot_ylo#10 line::@2/(byte[]) plot_ylo#10 line::@22/(byte[]) plot_ylo#10 line::@24/(byte[]) plot_ylo#10 line::@3/(byte[]) plot_ylo#10 line::@7/(byte[]) plot_ylo#10 line_xdyi::@1/(byte[]) plot_ylo#11 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#10 line::@17/(byte[]) plot_yhi#10 line::@19/(byte[]) plot_yhi#10 line::@2/(byte[]) plot_yhi#10 line::@22/(byte[]) plot_yhi#10 line::@24/(byte[]) plot_yhi#10 line::@3/(byte[]) plot_yhi#10 line::@7/(byte[]) plot_yhi#10 line_xdyi::@1/(byte[]) plot_yhi#11 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#10 line::@17/(byte[]) plot_xlo#10 line::@19/(byte[]) plot_xlo#10 line::@2/(byte[]) plot_xlo#10 line::@22/(byte[]) plot_xlo#10 line::@24/(byte[]) plot_xlo#10 line::@3/(byte[]) plot_xlo#10 line::@7/(byte[]) plot_xlo#10 line_xdyi::@1/(byte[]) plot_xlo#11 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#10 line::@17/(byte[]) plot_xhi#10 line::@19/(byte[]) plot_xhi#10 line::@2/(byte[]) plot_xhi#10 line::@22/(byte[]) plot_xhi#10 line::@24/(byte[]) plot_xhi#10 line::@3/(byte[]) plot_xhi#10 line::@7/(byte[]) plot_xhi#10 line_xdyi::@1/(byte[]) plot_xhi#11 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte[]) plot_yhi#13 ← phi( init_plot_tables/(byte[]) plot_yhi#0 )
  (byte[]) plot_ylo#13 ← phi( init_plot_tables/(byte[]) plot_ylo#0 )
  (byte[]) plot_bit#13 ← phi( init_plot_tables/(byte[]) plot_bit#0 )
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte[]) plot_xhi#13 ← phi( init_plot_tables/(byte[]) plot_xhi#0 )
  (byte*) BITMAP#1 ← phi( init_plot_tables/(byte*) BITMAP#0 )
  (byte[]) plot_xlo#13 ← phi( init_plot_tables/(byte[]) plot_xlo#0 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#13 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#1
  *((byte[]) plot_xhi#13 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#13 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte[]) plot_yhi#12 ← phi( init_plot_tables::@6/(byte[]) plot_yhi#13 )
  (byte[]) plot_ylo#12 ← phi( init_plot_tables::@6/(byte[]) plot_ylo#13 )
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#12 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#12 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) SCREEN#1 ← phi( init_screen/(byte*) SCREEN#0 )
  (byte*) BITMAP#3 ← phi( init_screen/(byte*) BITMAP#0 )
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#3 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) SCREEN#2 ← phi( init_screen::@3/(byte*) SCREEN#1 )
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#2 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Redundant Phi (byte[]) lines_x#2 (byte[]) lines_x#0
Redundant Phi (byte[]) lines_y#2 (byte[]) lines_y#0
Redundant Phi (byte) lines_cnt#3 (byte) lines_cnt#0
Redundant Phi (byte[]) plot_xhi#28 (byte[]) plot_xhi#0
Redundant Phi (byte[]) plot_xlo#28 (byte[]) plot_xlo#0
Redundant Phi (byte[]) plot_yhi#29 (byte[]) plot_yhi#0
Redundant Phi (byte[]) plot_ylo#29 (byte[]) plot_ylo#0
Redundant Phi (byte[]) plot_bit#28 (byte[]) plot_bit#0
Redundant Phi (byte[]) lines_x#1 (byte[]) lines_x#2
Redundant Phi (byte[]) lines_y#1 (byte[]) lines_y#2
Redundant Phi (byte) lines_cnt#1 (byte) lines_cnt#3
Redundant Phi (byte[]) plot_xhi#10 (byte[]) plot_xhi#28
Redundant Phi (byte[]) plot_xlo#10 (byte[]) plot_xlo#28
Redundant Phi (byte[]) plot_yhi#10 (byte[]) plot_yhi#29
Redundant Phi (byte[]) plot_ylo#10 (byte[]) plot_ylo#29
Redundant Phi (byte[]) plot_bit#10 (byte[]) plot_bit#28
Redundant Phi (byte) line_xdyi::yd#2 (byte) line_xdyi::yd#0
Redundant Phi (byte) line_xdyi::xd#1 (byte) line_xdyi::xd#0
Redundant Phi (byte[]) plot_xhi#11 (byte[]) plot_xhi#10
Redundant Phi (byte[]) plot_xlo#11 (byte[]) plot_xlo#10
Redundant Phi (byte[]) plot_yhi#11 (byte[]) plot_yhi#10
Redundant Phi (byte[]) plot_ylo#11 (byte[]) plot_ylo#10
Redundant Phi (byte[]) plot_bit#11 (byte[]) plot_bit#10
Redundant Phi (byte) line_xdyi::x1#1 (byte) line_xdyi::x1#0
Redundant Phi (byte[]) plot_xlo#13 (byte[]) plot_xlo#0
Redundant Phi (byte*) BITMAP#1 (byte*) BITMAP#0
Redundant Phi (byte[]) plot_xhi#13 (byte[]) plot_xhi#0
Redundant Phi (byte[]) plot_bit#13 (byte[]) plot_bit#0
Redundant Phi (byte[]) plot_ylo#13 (byte[]) plot_ylo#0
Redundant Phi (byte[]) plot_yhi#13 (byte[]) plot_yhi#0
Redundant Phi (byte[]) plot_ylo#12 (byte[]) plot_ylo#13
Redundant Phi (byte[]) plot_yhi#12 (byte[]) plot_yhi#13
Redundant Phi (byte*) BITMAP#3 (byte*) BITMAP#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#1
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#0
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (boolean~) line::$1 ← (byte) line::x0#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$15 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$4 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#1
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#0 >= (byte) line_xdyi::e#1
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#1 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte[]) plot_bit#1 ← phi( line::@15/(byte[]) plot_bit#0 line::@17/(byte[]) plot_bit#0 line::@19/(byte[]) plot_bit#0 line::@2/(byte[]) plot_bit#0 line::@22/(byte[]) plot_bit#0 line::@24/(byte[]) plot_bit#0 line::@3/(byte[]) plot_bit#0 line::@7/(byte[]) plot_bit#0 line_xdyi::@1/(byte[]) plot_bit#0 )
  (byte[]) plot_ylo#1 ← phi( line::@15/(byte[]) plot_ylo#0 line::@17/(byte[]) plot_ylo#0 line::@19/(byte[]) plot_ylo#0 line::@2/(byte[]) plot_ylo#0 line::@22/(byte[]) plot_ylo#0 line::@24/(byte[]) plot_ylo#0 line::@3/(byte[]) plot_ylo#0 line::@7/(byte[]) plot_ylo#0 line_xdyi::@1/(byte[]) plot_ylo#0 )
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte[]) plot_yhi#1 ← phi( line::@15/(byte[]) plot_yhi#0 line::@17/(byte[]) plot_yhi#0 line::@19/(byte[]) plot_yhi#0 line::@2/(byte[]) plot_yhi#0 line::@22/(byte[]) plot_yhi#0 line::@24/(byte[]) plot_yhi#0 line::@3/(byte[]) plot_yhi#0 line::@7/(byte[]) plot_yhi#0 line_xdyi::@1/(byte[]) plot_yhi#0 )
  (byte[]) plot_xlo#1 ← phi( line::@15/(byte[]) plot_xlo#0 line::@17/(byte[]) plot_xlo#0 line::@19/(byte[]) plot_xlo#0 line::@2/(byte[]) plot_xlo#0 line::@22/(byte[]) plot_xlo#0 line::@24/(byte[]) plot_xlo#0 line::@3/(byte[]) plot_xlo#0 line::@7/(byte[]) plot_xlo#0 line_xdyi::@1/(byte[]) plot_xlo#0 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte[]) plot_xhi#1 ← phi( line::@15/(byte[]) plot_xhi#0 line::@17/(byte[]) plot_xhi#0 line::@19/(byte[]) plot_xhi#0 line::@2/(byte[]) plot_xhi#0 line::@22/(byte[]) plot_xhi#0 line::@24/(byte[]) plot_xhi#0 line::@3/(byte[]) plot_xhi#0 line::@7/(byte[]) plot_xhi#0 line_xdyi::@1/(byte[]) plot_xhi#0 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#1 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#1 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#1 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#0
  *((byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#0 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#0 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Redundant Phi (byte[]) plot_xhi#1 (byte[]) plot_xhi#0
Redundant Phi (byte[]) plot_xlo#1 (byte[]) plot_xlo#0
Redundant Phi (byte[]) plot_yhi#1 (byte[]) plot_yhi#0
Redundant Phi (byte[]) plot_ylo#1 (byte[]) plot_ylo#0
Redundant Phi (byte[]) plot_bit#1 (byte[]) plot_bit#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  (boolean~) lines::$7 ← (byte) lines::l#1 < (byte) lines_cnt#0
  if((boolean~) lines::$7) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  (boolean~) line::$1 ← (byte) line::x0#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$15 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$15) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  (boolean~) line::$4 ← (byte) line::y0#0 >= (byte) line::y1#0
  if((boolean~) line::$4) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  (boolean~) line::$7 ← (byte) line::yd#0 >= (byte) line::xd#1
  if((boolean~) line::$7) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  (boolean~) line_xdyi::$5 ← (byte) line_xdyi::xd#0 >= (byte) line_xdyi::e#1
  if((boolean~) line_xdyi::$5) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  (boolean~) line_xdyi::$9 ← (byte) line_xdyi::x#1 < (byte~) line_xdyi::$8
  if((boolean~) line_xdyi::$9) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#0
  *((byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  (boolean~) init_plot_tables::$4 ← (byte) init_plot_tables::bit#1 != (byte) 0
  if((boolean~) init_plot_tables::$4) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  (boolean~) init_plot_tables::$5 ← (byte) init_plot_tables::x#1 != (byte) 0
  if((boolean~) init_plot_tables::$5) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  (boolean~) init_plot_tables::$12 ← (byte~) init_plot_tables::$10 != (byte) 7
  if((boolean~) init_plot_tables::$12) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  (boolean~) init_plot_tables::$14 ← (byte) init_plot_tables::y#1 != (byte) 0
  if((boolean~) init_plot_tables::$14) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#0 + (word) 8192
  (boolean~) init_screen::$1 ← (byte*) init_screen::b#1 != (byte*~) init_screen::$0
  if((boolean~) init_screen::$1) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#0 + (word) 1024
  (boolean~) init_screen::$3 ← (byte*) init_screen::c#1 != (byte*~) init_screen::$2
  if((boolean~) init_screen::$3) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Simple Condition (boolean~) lines::$7 if((byte) lines::l#1<(byte) lines_cnt#0) goto lines::@1
Simple Condition (boolean~) line::$1 if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
Simple Condition (boolean~) line::$15 if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
Simple Condition (boolean~) line::$4 if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
Simple Condition (boolean~) line::$7 if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
Simple Condition (boolean~) line_xdyi::$5 if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
Simple Condition (boolean~) line_xdyi::$9 if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
Simple Condition (boolean~) init_plot_tables::$4 if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
Simple Condition (boolean~) init_plot_tables::$5 if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
Simple Condition (boolean~) init_plot_tables::$12 if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
Simple Condition (boolean~) init_plot_tables::$14 if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
Simple Condition (boolean~) init_screen::$1 if((byte*) init_screen::b#1!=(byte*~) init_screen::$0) goto init_screen::@1
Simple Condition (boolean~) init_screen::$3 if((byte*) init_screen::c#1!=(byte*~) init_screen::$2) goto init_screen::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) COLS#0 ← (word) 55296
  (byte*) BGCOL#0 ← (word) 53280
  (byte*) FGCOL#0 ← (word) 53281
  (byte*) SCROLL#0 ← (word) 53270
  (byte*) D018#0 ← (word) 53272
  (byte*) D011#0 ← (word) 53265
  (byte) RST8#0 ← (byte) 128
  (byte) ECM#0 ← (byte) 64
  (byte) BMM#0 ← (byte) 32
  (byte) DEN#0 ← (byte) 16
  (byte) RSEL#0 ← (byte) 8
  (byte*) D016#0 ← (word) 53270
  (byte) MCM#0 ← (byte) 16
  (byte) CSEL#0 ← (byte) 8
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) BITMAP#0 ← (word) 8192
  (byte[]) plot_xlo#0 ← (word) 4096
  (byte[]) plot_xhi#0 ← (word) 4352
  (byte[]) plot_ylo#0 ← (word) 4608
  (byte[]) plot_yhi#0 ← (word) 4864
  (byte[]) plot_bit#0 ← (word) 5120
  (byte[]) lines_x#0 ← { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
  (byte[]) lines_y#0 ← { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
  (byte) lines_cnt#0 ← (byte) 8
  to:@7
main: scope:[main]  from @7
  *((byte*) BGCOL#0) ← (byte) 0
  *((byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (byte) BMM#0 | (byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((byte*) D011#0) ← (byte~) main::$2
  *((byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  (byte) lines::l#0 ← (byte) 0
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte*) plot::plotter_x#0 ← (byte) 0
  (byte*) plot::plotter_y#0 ← (byte) 0
  (byte~) plot::$0 ← (byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  (byte) init_plot_tables::bit#0 ← (byte) 128
  (byte) init_plot_tables::x#0 ← (byte) 0
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (byte*) BITMAP#0
  *((byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte) init_plot_tables::bit#2 ← (byte) 128
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#0 ← (byte) 0
  (byte) init_plot_tables::y#0 ← (byte) 0
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (byte*) BITMAP#0 + (word) 8192
  if((byte*) init_screen::b#1!=(byte*~) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (byte*) SCREEN#0 + (word) 1024
  if((byte*) init_screen::c#1!=(byte*~) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Constant (const byte*) COLS#0 = 55296
Constant (const byte*) BGCOL#0 = 53280
Constant (const byte*) FGCOL#0 = 53281
Constant (const byte*) SCROLL#0 = 53270
Constant (const byte*) D018#0 = 53272
Constant (const byte*) D011#0 = 53265
Constant (const byte) RST8#0 = 128
Constant (const byte) ECM#0 = 64
Constant (const byte) BMM#0 = 32
Constant (const byte) DEN#0 = 16
Constant (const byte) RSEL#0 = 8
Constant (const byte*) D016#0 = 53270
Constant (const byte) MCM#0 = 16
Constant (const byte) CSEL#0 = 8
Constant (const byte*) SCREEN#0 = 1024
Constant (const byte*) BITMAP#0 = 8192
Constant (const byte[]) plot_xlo#0 = 4096
Constant (const byte[]) plot_xhi#0 = 4352
Constant (const byte[]) plot_ylo#0 = 4608
Constant (const byte[]) plot_yhi#0 = 4864
Constant (const byte[]) plot_bit#0 = 5120
Constant (const byte[]) lines_x#0 = { 60, 80, 110, 80, 60, 40, 10, 40, 60 }
Constant (const byte[]) lines_y#0 = { 10, 40, 60, 80, 110, 80, 60, 40, 10 }
Constant (const byte) lines_cnt#0 = 8
Constant (const byte) lines::l#0 = 0
Constant (const byte*) plot::plotter_x#0 = 0
Constant (const byte*) plot::plotter_y#0 = 0
Constant (const byte) init_plot_tables::bit#0 = 128
Constant (const byte) init_plot_tables::x#0 = 0
Constant (const byte) init_plot_tables::bit#2 = 128
Constant (const byte*) init_plot_tables::yoffs#0 = 0
Constant (const byte) init_plot_tables::y#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$0 ← (const byte) BMM#0 | (const byte) DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (const byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((const byte*) D011#0) ← (byte~) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (const byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (const byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  (byte~) init_plot_tables::$1 ← > (const byte*) BITMAP#0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  (byte*) init_screen::b#0 ← (const byte*) BITMAP#0
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  (byte*~) init_screen::$0 ← (const byte*) BITMAP#0 + (word) 8192
  if((byte*) init_screen::b#1!=(byte*~) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  (byte*) init_screen::c#0 ← (const byte*) SCREEN#0
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  (byte*~) init_screen::$2 ← (const byte*) SCREEN#0 + (word) 1024
  if((byte*) init_screen::c#1!=(byte*~) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Constant (const byte) main::$0 = BMM#0|DEN#0
Constant (const byte) init_plot_tables::$1 = >BITMAP#0
Constant (const byte*) init_screen::b#0 = BITMAP#0
Constant (const byte*) init_screen::$0 = BITMAP#0+8192
Constant (const byte*) init_screen::c#0 = SCREEN#0
Constant (const byte*) init_screen::$2 = SCREEN#0+1024
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$1 ← (const byte) main::$0 | (const byte) RSEL#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) 3
  *((const byte*) D011#0) ← (byte~) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (const byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (const byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Constant (const byte) main::$1 = main::$0|RSEL#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  (byte~) main::$2 ← (const byte) main::$1 | (byte) 3
  *((const byte*) D011#0) ← (byte~) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (const byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (const byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Constant (const byte) main::$2 = main::$1|3
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$2 ← (const byte[]) lines_x#0 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2 + (byte) 1
  (byte~) lines::$5 ← (const byte[]) lines_y#0 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Consolidated referenced array index constant in assignment lines::$2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Consolidated referenced array index constant in assignment lines::$5
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2
  (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2
  (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@6
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@6: scope:[init_plot_tables]  from init_plot_tables::@2
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@4 init_plot_tables::@6
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@6/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@6/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@3
init_screen::@3: scope:[init_screen]  from init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@2 init_screen::@3
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@3/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Culled Empty Block (label) main::@4
Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@5
Culled Empty Block (label) init_plot_tables::@6
Culled Empty Block (label) init_screen::@3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$1 ← (byte) lines::l#2
  (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte~) lines::$1
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$4 ← (byte) lines::l#2
  (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte~) lines::$4
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@3
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@5
Not aliassing across scopes: line::x0#0 lines::$0
Not aliassing across scopes: line::x1#0 lines::$2
Not aliassing across scopes: line::y0#0 lines::$3
Not aliassing across scopes: line::y1#0 lines::$5
Not aliassing across scopes: plot::x#0 line::x0#0
Not aliassing across scopes: plot::y#0 line::y0#0
Not aliassing across scopes: plot::x#1 line::x1#0
Not aliassing across scopes: plot::y#1 line::y1#0
Not aliassing across scopes: plot::x#2 line::x0#0
Not aliassing across scopes: plot::y#2 line::y0#0
Not aliassing across scopes: plot::x#3 line::x1#0
Not aliassing across scopes: plot::y#3 line::y1#0
Not aliassing across scopes: line_xdyi::x#0 line::x0#0
Not aliassing across scopes: line_xdyi::y#0 line::y0#0
Not aliassing across scopes: line_xdyi::x1#0 line::x1#0
Not aliassing across scopes: line_xdyi::xd#0 line::xd#1
Not aliassing across scopes: line_xdyi::yd#0 line::yd#0
Not aliassing across scopes: plot::x#4 line::x0#0
Not aliassing across scopes: plot::y#4 line::y0#0
Not aliassing across scopes: plot::x#5 line::x1#0
Not aliassing across scopes: plot::y#5 line::y1#0
Not aliassing across scopes: plot::x#6 line::x0#0
Not aliassing across scopes: plot::y#6 line::y0#0
Not aliassing across scopes: plot::x#7 line::x1#0
Not aliassing across scopes: plot::y#7 line::y1#0
Not aliassing across scopes: plot::x#8 line_xdyi::x#2
Not aliassing across scopes: plot::y#8 line_xdyi::y#2
Alias (byte) lines::l#2 = (byte~) lines::$1 (byte~) lines::$4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) main::$2
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(const byte) lines::l#0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (const byte*) plot::plotter_x#0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (const byte*) plot::plotter_y#0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(const byte) init_plot_tables::bit#0 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(const byte) init_plot_tables::x#0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← (const byte) init_plot_tables::$1
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(const byte) init_plot_tables::bit#2 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@3
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(const byte*) init_plot_tables::yoffs#0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(const byte) init_plot_tables::y#0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) init_screen::b#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) init_screen::$0) goto init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) init_screen::c#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) init_screen::$2) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

Not aliassing across scopes: line::x0#0 lines::$0
Not aliassing across scopes: line::x1#0 lines::$2
Not aliassing across scopes: line::y0#0 lines::$3
Not aliassing across scopes: line::y1#0 lines::$5
Not aliassing across scopes: plot::x#0 line::x0#0
Not aliassing across scopes: plot::y#0 line::y0#0
Not aliassing across scopes: plot::x#1 line::x1#0
Not aliassing across scopes: plot::y#1 line::y1#0
Not aliassing across scopes: plot::x#2 line::x0#0
Not aliassing across scopes: plot::y#2 line::y0#0
Not aliassing across scopes: plot::x#3 line::x1#0
Not aliassing across scopes: plot::y#3 line::y1#0
Not aliassing across scopes: line_xdyi::x#0 line::x0#0
Not aliassing across scopes: line_xdyi::y#0 line::y0#0
Not aliassing across scopes: line_xdyi::x1#0 line::x1#0
Not aliassing across scopes: line_xdyi::xd#0 line::xd#1
Not aliassing across scopes: line_xdyi::yd#0 line::yd#0
Not aliassing across scopes: plot::x#4 line::x0#0
Not aliassing across scopes: plot::y#4 line::y0#0
Not aliassing across scopes: plot::x#5 line::x1#0
Not aliassing across scopes: plot::y#5 line::y1#0
Not aliassing across scopes: plot::x#6 line::x0#0
Not aliassing across scopes: plot::y#6 line::y0#0
Not aliassing across scopes: plot::x#7 line::x1#0
Not aliassing across scopes: plot::y#7 line::y1#0
Not aliassing across scopes: plot::x#8 line_xdyi::x#2
Not aliassing across scopes: plot::y#8 line_xdyi::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@5
Not aliassing across scopes: line::x0#0 lines::$0
Not aliassing across scopes: line::x1#0 lines::$2
Not aliassing across scopes: line::y0#0 lines::$3
Not aliassing across scopes: line::y1#0 lines::$5
Not aliassing across scopes: plot::x#0 line::x0#0
Not aliassing across scopes: plot::y#0 line::y0#0
Not aliassing across scopes: plot::x#1 line::x1#0
Not aliassing across scopes: plot::y#1 line::y1#0
Not aliassing across scopes: plot::x#2 line::x0#0
Not aliassing across scopes: plot::y#2 line::y0#0
Not aliassing across scopes: plot::x#3 line::x1#0
Not aliassing across scopes: plot::y#3 line::y1#0
Not aliassing across scopes: line_xdyi::x#0 line::x0#0
Not aliassing across scopes: line_xdyi::y#0 line::y0#0
Not aliassing across scopes: line_xdyi::x1#0 line::x1#0
Not aliassing across scopes: line_xdyi::xd#0 line::xd#1
Not aliassing across scopes: line_xdyi::yd#0 line::yd#0
Not aliassing across scopes: plot::x#4 line::x0#0
Not aliassing across scopes: plot::y#4 line::y0#0
Not aliassing across scopes: plot::x#5 line::x1#0
Not aliassing across scopes: plot::y#5 line::y1#0
Not aliassing across scopes: plot::x#6 line::x0#0
Not aliassing across scopes: plot::y#6 line::y0#0
Not aliassing across scopes: plot::x#7 line::x1#0
Not aliassing across scopes: plot::y#7 line::y1#0
Not aliassing across scopes: plot::x#8 line_xdyi::x#2
Not aliassing across scopes: plot::y#8 line_xdyi::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) lines::l#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) line_xdyi::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::y#9
Multiple usages for variable. Not optimizing sub-constant (byte) plot::x#9
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte) init_plot_tables::y#2
Multiple usages for variable. Not optimizing sub-constant (byte*) init_plot_tables::yoffs#2
Inlining constant with var siblings (const byte) lines::l#0
Inlining constant with var siblings (const byte) lines::l#0
Inlining constant with var siblings (const byte*) plot::plotter_x#0
Inlining constant with var siblings (const byte*) plot::plotter_x#0
Inlining constant with var siblings (const byte*) plot::plotter_y#0
Inlining constant with var siblings (const byte*) plot::plotter_y#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#0
Inlining constant with var siblings (const byte) init_plot_tables::x#0
Inlining constant with var siblings (const byte) init_plot_tables::x#0
Inlining constant with var siblings (const byte) init_plot_tables::bit#2
Inlining constant with var siblings (const byte) init_plot_tables::bit#2
Inlining constant with var siblings (const byte) init_plot_tables::bit#2
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte*) init_plot_tables::yoffs#0
Inlining constant with var siblings (const byte) init_plot_tables::y#0
Inlining constant with var siblings (const byte) init_plot_tables::y#0
Inlining constant with var siblings (const byte*) init_screen::b#0
Inlining constant with var siblings (const byte*) init_screen::b#0
Inlining constant with var siblings (const byte*) init_screen::c#0
Inlining constant with var siblings (const byte*) init_screen::c#0
Constant inlined init_plot_tables::y#0 = (byte) 0
Constant inlined init_plot_tables::x#0 = (byte) 0
Constant inlined init_plot_tables::yoffs#0 = (byte) 0
Constant inlined main::$1 = (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0
Constant inlined init_plot_tables::$1 = >(const byte*) BITMAP#0
Constant inlined main::$2 = (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3
Constant inlined main::$0 = (const byte) BMM#0|(const byte) DEN#0
Constant inlined plot::plotter_y#0 = (byte) 0
Constant inlined init_screen::$2 = (const byte*) SCREEN#0+(word) 1024
Constant inlined init_screen::c#0 = (const byte*) SCREEN#0
Constant inlined init_plot_tables::bit#2 = (byte) 128
Constant inlined lines::l#0 = (byte) 0
Constant inlined init_plot_tables::bit#0 = (byte) 128
Constant inlined plot::plotter_x#0 = (byte) 0
Constant inlined init_screen::$0 = (const byte*) BITMAP#0+(word) 8192
Constant inlined init_screen::b#0 = (const byte*) BITMAP#0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  (byte) lines::l#2 ← phi( lines/(byte) 0 lines::@3/(byte) lines::l#1 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  call plot param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2
  to:line_xdyi::@3
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1
  to:line_xdyi::@return
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  to:line_xdyi::@2
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 )
  (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@2/(byte) init_plot_tables::bit#4 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@2/(byte) init_plot_tables::x#1 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@2
  to:init_plot_tables::@5
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@1/(byte) init_plot_tables::bit#1 init_plot_tables::@5/(byte) 128 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1
  to:init_plot_tables::@3
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(byte) 0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(byte) 0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4
  to:init_plot_tables::@7
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3
  to:init_plot_tables::@return
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  to:init_plot_tables::@4
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@1/(byte*) init_screen::b#1 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) SCREEN#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7

FINAL SYMBOL TABLE
(label) @7
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 = (word) 53280
(byte*) BITMAP
(const byte*) BITMAP#0 = (word) 8192
(byte) BMM
(const byte) BMM#0 = (byte) 32
(byte*) COLS
(const byte*) COLS#0 = (word) 55296
(byte) CSEL
(const byte) CSEL#0 = (byte) 8
(byte*) D011
(const byte*) D011#0 = (word) 53265
(byte*) D016
(const byte*) D016#0 = (word) 53270
(byte*) D018
(const byte*) D018#0 = (word) 53272
(byte) DEN
(const byte) DEN#0 = (byte) 16
(byte) ECM
(const byte) ECM#0 = (byte) 64
(byte*) FGCOL
(const byte*) FGCOL#0 = (word) 53281
(byte) MCM
(const byte) MCM#0 = (byte) 16
(byte) RSEL
(const byte) RSEL#0 = (byte) 8
(byte) RST8
(const byte) RST8#0 = (byte) 128
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(byte*) SCROLL
(const byte*) SCROLL#0 = (word) 53270
(void()) init_plot_tables()
(byte~) init_plot_tables::$0
(byte~) init_plot_tables::$10
(byte~) init_plot_tables::$6
(byte~) init_plot_tables::$7
(byte~) init_plot_tables::$8
(byte~) init_plot_tables::$9
(label) init_plot_tables::@1
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@5
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#1
(byte) init_plot_tables::bit#3
(byte) init_plot_tables::bit#4
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1
(byte) init_plot_tables::x#2
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1
(byte) init_plot_tables::y#2
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1
(byte*) init_plot_tables::yoffs#2
(byte*) init_plot_tables::yoffs#4
(void()) init_screen()
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#1
(byte*) init_screen::b#2
(byte*) init_screen::c
(byte*) init_screen::c#1
(byte*) init_screen::c#2
(void()) line((byte) line::x0 , (byte) line::x1 , (byte) line::y0 , (byte) line::y1)
(label) line::@1
(label) line::@10
(label) line::@11
(label) line::@15
(label) line::@17
(label) line::@19
(label) line::@2
(label) line::@22
(label) line::@24
(label) line::@3
(label) line::@7
(label) line::@9
(label) line::@return
(byte) line::x0
(byte) line::x0#0
(byte) line::x1
(byte) line::x1#0
(byte) line::xd
(byte) line::xd#0
(byte) line::xd#1
(byte) line::y0
(byte) line::y0#0
(byte) line::y1
(byte) line::y1#0
(byte) line::yd
(byte) line::yd#0
(void()) line_xdyi((byte) line_xdyi::x , (byte) line_xdyi::y , (byte) line_xdyi::x1 , (byte) line_xdyi::xd , (byte) line_xdyi::yd)
(byte~) line_xdyi::$8
(label) line_xdyi::@1
(label) line_xdyi::@2
(label) line_xdyi::@3
(label) line_xdyi::@5
(label) line_xdyi::@return
(byte) line_xdyi::e
(byte) line_xdyi::e#0
(byte) line_xdyi::e#1
(byte) line_xdyi::e#2
(byte) line_xdyi::e#3
(byte) line_xdyi::e#6
(byte) line_xdyi::x
(byte) line_xdyi::x#0
(byte) line_xdyi::x#1
(byte) line_xdyi::x#2
(byte) line_xdyi::x1
(byte) line_xdyi::x1#0
(byte) line_xdyi::xd
(byte) line_xdyi::xd#0
(byte) line_xdyi::y
(byte) line_xdyi::y#0
(byte) line_xdyi::y#1
(byte) line_xdyi::y#2
(byte) line_xdyi::y#5
(byte) line_xdyi::yd
(byte) line_xdyi::yd#0
(void()) lines()
(byte~) lines::$0
(byte~) lines::$2
(byte~) lines::$3
(byte~) lines::$5
(label) lines::@1
(label) lines::@3
(label) lines::@return
(byte) lines::l
(byte) lines::l#1
(byte) lines::l#2
(byte) lines_cnt
(const byte) lines_cnt#0 = (byte) 8
(byte[]) lines_x
(const byte[]) lines_x#0 = { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
(byte[]) lines_y
(const byte[]) lines_y#0 = { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@5
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(byte~) plot::$3
(byte~) plot::$5
(byte~) plot::$6
(byte~) plot::$7
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1
(byte*) plot::plotter_x#2
(byte*) plot::plotter_y
(byte*) plot::plotter_y#1
(byte*) plot::plotter_y#2
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::x#3
(byte) plot::x#4
(byte) plot::x#5
(byte) plot::x#6
(byte) plot::x#7
(byte) plot::x#8
(byte) plot::x#9
(byte) plot::y
(byte) plot::y#0
(byte) plot::y#1
(byte) plot::y#2
(byte) plot::y#3
(byte) plot::y#4
(byte) plot::y#5
(byte) plot::y#6
(byte) plot::y#7
(byte) plot::y#8
(byte) plot::y#9
(byte[]) plot_bit
(const byte[]) plot_bit#0 = (word) 5120
(byte[]) plot_xhi
(const byte[]) plot_xhi#0 = (word) 4352
(byte[]) plot_xlo
(const byte[]) plot_xlo#0 = (word) 4096
(byte[]) plot_yhi
(const byte[]) plot_yhi#0 = (word) 4864
(byte[]) plot_ylo
(const byte[]) plot_ylo#0 = (word) 4608

Block Sequence Planned @begin @7 @end main main::@3 main::@1 main::@5 main::@return lines lines::@1 lines::@3 lines::@return line line::@9 line::@10 line::@11 line::@return line::@3 line::@19 line::@2 line::@17 line::@1 line::@15 line::@24 line::@7 line::@22 plot plot::@return line_xdyi line_xdyi::@1 line_xdyi::@5 line_xdyi::@3 line_xdyi::@2 line_xdyi::@return init_plot_tables init_plot_tables::@1 init_plot_tables::@5 init_plot_tables::@2 init_plot_tables::@3 init_plot_tables::@7 init_plot_tables::@4 init_plot_tables::@return init_screen init_screen::@1 init_screen::@2 init_screen::@return 
Added new block during phi lifting lines::@4(between lines::@3 and lines::@1)
Added new block during phi lifting line_xdyi::@6(between line_xdyi::@2 and line_xdyi::@1)
Added new block during phi lifting line_xdyi::@7(between line_xdyi::@5 and line_xdyi::@2)
Added new block during phi lifting init_plot_tables::@9(between init_plot_tables::@2 and init_plot_tables::@1)
Added new block during phi lifting init_plot_tables::@10(between init_plot_tables::@1 and init_plot_tables::@2)
Added new block during phi lifting init_plot_tables::@11(between init_plot_tables::@4 and init_plot_tables::@3)
Added new block during phi lifting init_plot_tables::@12(between init_plot_tables::@3 and init_plot_tables::@4)
Added new block during phi lifting init_screen::@5(between init_screen::@1 and init_screen::@1)
Added new block during phi lifting init_screen::@6(between init_screen::@2 and init_screen::@2)
Block Sequence Planned @begin @7 @end main main::@3 main::@1 main::@5 main::@return lines lines::@1 lines::@3 lines::@return lines::@4 line line::@9 line::@10 line::@11 line::@return line::@3 line::@19 line::@2 line::@17 line::@1 line::@15 line::@24 line::@7 line::@22 plot plot::@return line_xdyi line_xdyi::@1 line_xdyi::@5 line_xdyi::@3 line_xdyi::@2 line_xdyi::@return line_xdyi::@6 line_xdyi::@7 init_plot_tables init_plot_tables::@1 init_plot_tables::@5 init_plot_tables::@2 init_plot_tables::@3 init_plot_tables::@7 init_plot_tables::@4 init_plot_tables::@return init_plot_tables::@11 init_plot_tables::@12 init_plot_tables::@9 init_plot_tables::@10 init_screen init_screen::@1 init_screen::@2 init_screen::@return init_screen::@6 init_screen::@5 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@7
@7: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @7
main: scope:[main]  from @7
  *((const byte*) BGCOL#0) ← (byte) 0
  *((const byte*) FGCOL#0) ← (byte) 0
  *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3
  *((const byte*) D018#0) ← (byte) 24
  call init_screen param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call init_plot_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  call lines param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@1
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
lines: scope:[lines]  from main::@1
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@4
  (byte) lines::l#2 ← phi( lines/(byte) 0 lines::@4/(byte~) lines::l#4 )
  (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2
  (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2
  (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2
  (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2
  (byte) line::x0#0 ← (byte~) lines::$0
  (byte) line::x1#0 ← (byte~) lines::$2
  (byte) line::y0#0 ← (byte~) lines::$3
  (byte) line::y1#0 ← (byte~) lines::$5
  call line param-assignment
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  (byte) lines::l#1 ← ++ (byte) lines::l#2
  if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@4
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  return 
  to:@return
lines::@4: scope:[lines]  from lines::@3
  (byte~) lines::l#4 ← (byte) lines::l#1
  to:lines::@1
line: scope:[line]  from lines::@1
  if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1
  to:line::@9
line::@9: scope:[line]  from line
  (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2
  to:line::@10
line::@10: scope:[line]  from line::@9
  (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0
  if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3
  to:line::@11
line::@11: scope:[line]  from line::@10
  (byte) line_xdyi::x#0 ← (byte) line::x0#0
  (byte) line_xdyi::y#0 ← (byte) line::y0#0
  (byte) line_xdyi::x1#0 ← (byte) line::x1#0
  (byte) line_xdyi::xd#0 ← (byte) line::xd#1
  (byte) line_xdyi::yd#0 ← (byte) line::yd#0
  call line_xdyi param-assignment
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  return 
  to:@return
line::@3: scope:[line]  from line::@10
  (byte) plot::x#2 ← (byte) line::x0#0
  (byte) plot::y#2 ← (byte) line::y0#0
  (byte~) plot::x#16 ← (byte) plot::x#2
  (byte~) plot::y#16 ← (byte) plot::y#2
  call plot param-assignment
  to:line::@19
line::@19: scope:[line]  from line::@3
  (byte) plot::x#3 ← (byte) line::x1#0
  (byte) plot::y#3 ← (byte) line::y1#0
  (byte~) plot::x#12 ← (byte) plot::x#3
  (byte~) plot::y#12 ← (byte) plot::y#3
  call plot param-assignment
  to:line::@return
line::@2: scope:[line]  from line::@9
  (byte) plot::x#0 ← (byte) line::x0#0
  (byte) plot::y#0 ← (byte) line::y0#0
  (byte~) plot::x#13 ← (byte) plot::x#0
  (byte~) plot::y#13 ← (byte) plot::y#0
  call plot param-assignment
  to:line::@17
line::@17: scope:[line]  from line::@2
  (byte) plot::x#1 ← (byte) line::x1#0
  (byte) plot::y#1 ← (byte) line::y1#0
  (byte~) plot::x#11 ← (byte) plot::x#1
  (byte~) plot::y#11 ← (byte) plot::y#1
  call plot param-assignment
  to:line::@return
line::@1: scope:[line]  from line
  (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0
  if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7
  to:line::@15
line::@15: scope:[line]  from line::@1
  (byte) plot::x#6 ← (byte) line::x0#0
  (byte) plot::y#6 ← (byte) line::y0#0
  (byte~) plot::x#10 ← (byte) plot::x#6
  (byte~) plot::y#10 ← (byte) plot::y#6
  call plot param-assignment
  to:line::@24
line::@24: scope:[line]  from line::@15
  (byte) plot::x#7 ← (byte) line::x1#0
  (byte) plot::y#7 ← (byte) line::y1#0
  (byte~) plot::x#15 ← (byte) plot::x#7
  (byte~) plot::y#15 ← (byte) plot::y#7
  call plot param-assignment
  to:line::@return
line::@7: scope:[line]  from line::@1
  (byte) plot::x#4 ← (byte) line::x0#0
  (byte) plot::y#4 ← (byte) line::y0#0
  (byte~) plot::x#17 ← (byte) plot::x#4
  (byte~) plot::y#17 ← (byte) plot::y#4
  call plot param-assignment
  to:line::@22
line::@22: scope:[line]  from line::@7
  (byte) plot::x#5 ← (byte) line::x1#0
  (byte) plot::y#5 ← (byte) line::y1#0
  (byte~) plot::x#14 ← (byte) plot::x#5
  (byte~) plot::y#14 ← (byte) plot::y#5
  call plot param-assignment
  to:line::@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  (byte) plot::y#9 ← phi( line::@15/(byte~) plot::y#10 line::@17/(byte~) plot::y#11 line::@19/(byte~) plot::y#12 line::@2/(byte~) plot::y#13 line::@22/(byte~) plot::y#14 line::@24/(byte~) plot::y#15 line::@3/(byte~) plot::y#16 line::@7/(byte~) plot::y#17 line_xdyi::@1/(byte~) plot::y#18 )
  (byte) plot::x#9 ← phi( line::@15/(byte~) plot::x#10 line::@17/(byte~) plot::x#11 line::@19/(byte~) plot::x#12 line::@2/(byte~) plot::x#13 line::@22/(byte~) plot::x#14 line::@24/(byte~) plot::x#15 line::@3/(byte~) plot::x#16 line::@7/(byte~) plot::x#17 line_xdyi::@1/(byte~) plot::x#18 )
  (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0
  (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9
  (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1
  (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2
  (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9
  (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3
  (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2
  (byte~) plot::$5 ← * (byte*) plot::plotter#0
  (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9
  (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6
  *((byte*) plot::plotter#0) ← (byte~) plot::$7
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1
  (byte~) line_xdyi::x#7 ← (byte) line_xdyi::x#0
  (byte~) line_xdyi::y#7 ← (byte) line_xdyi::y#0
  (byte~) line_xdyi::e#7 ← (byte) line_xdyi::e#0
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@6
  (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte~) line_xdyi::e#7 line_xdyi::@6/(byte~) line_xdyi::e#8 )
  (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte~) line_xdyi::y#7 line_xdyi::@6/(byte~) line_xdyi::y#8 )
  (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte~) line_xdyi::x#7 line_xdyi::@6/(byte~) line_xdyi::x#8 )
  (byte) plot::x#8 ← (byte) line_xdyi::x#2
  (byte) plot::y#8 ← (byte) line_xdyi::y#2
  (byte~) plot::x#18 ← (byte) plot::x#8
  (byte~) plot::y#18 ← (byte) plot::y#8
  call plot param-assignment
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1
  (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0
  if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@7
  to:line_xdyi::@3
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1
  (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0
  (byte~) line_xdyi::y#9 ← (byte) line_xdyi::y#1
  (byte~) line_xdyi::e#9 ← (byte) line_xdyi::e#2
  to:line_xdyi::@2
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@7
  (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte~) line_xdyi::e#9 line_xdyi::@7/(byte~) line_xdyi::e#10 )
  (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte~) line_xdyi::y#9 line_xdyi::@7/(byte~) line_xdyi::y#10 )
  (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1
  if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@6
  to:line_xdyi::@return
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  return 
  to:@return
line_xdyi::@6: scope:[line_xdyi]  from line_xdyi::@2
  (byte~) line_xdyi::x#8 ← (byte) line_xdyi::x#1
  (byte~) line_xdyi::y#8 ← (byte) line_xdyi::y#5
  (byte~) line_xdyi::e#8 ← (byte) line_xdyi::e#6
  to:line_xdyi::@1
line_xdyi::@7: scope:[line_xdyi]  from line_xdyi::@5
  (byte~) line_xdyi::y#10 ← (byte) line_xdyi::y#2
  (byte~) line_xdyi::e#10 ← (byte) line_xdyi::e#1
  to:line_xdyi::@2
init_plot_tables: scope:[init_plot_tables]  from main::@3
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@9
  (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@9/(byte~) init_plot_tables::bit#5 )
  (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@9/(byte~) init_plot_tables::x#5 )
  (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248
  *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0
  *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0
  *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3
  (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1
  if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10
  to:init_plot_tables::@5
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@10 init_plot_tables::@5
  (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@10/(byte~) init_plot_tables::bit#6 init_plot_tables::@5/(byte) 128 )
  (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2
  if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@9
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@11 init_plot_tables::@2
  (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@11/(byte*~) init_plot_tables::yoffs#5 init_plot_tables::@2/(byte) 0 )
  (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@11/(byte~) init_plot_tables::y#5 init_plot_tables::@2/(byte) 0 )
  (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7
  (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2
  (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7
  *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8
  (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2
  *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9
  (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7
  if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@12
  to:init_plot_tables::@7
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320
  (byte*~) init_plot_tables::yoffs#7 ← (byte*) init_plot_tables::yoffs#1
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@12 init_plot_tables::@7
  (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@12/(byte*~) init_plot_tables::yoffs#6 init_plot_tables::@7/(byte*~) init_plot_tables::yoffs#7 )
  (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2
  if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@11
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  return 
  to:@return
init_plot_tables::@11: scope:[init_plot_tables]  from init_plot_tables::@4
  (byte~) init_plot_tables::y#5 ← (byte) init_plot_tables::y#1
  (byte*~) init_plot_tables::yoffs#5 ← (byte*) init_plot_tables::yoffs#4
  to:init_plot_tables::@3
init_plot_tables::@12: scope:[init_plot_tables]  from init_plot_tables::@3
  (byte*~) init_plot_tables::yoffs#6 ← (byte*) init_plot_tables::yoffs#2
  to:init_plot_tables::@4
init_plot_tables::@9: scope:[init_plot_tables]  from init_plot_tables::@2
  (byte~) init_plot_tables::x#5 ← (byte) init_plot_tables::x#1
  (byte~) init_plot_tables::bit#5 ← (byte) init_plot_tables::bit#4
  to:init_plot_tables::@1
init_plot_tables::@10: scope:[init_plot_tables]  from init_plot_tables::@1
  (byte~) init_plot_tables::bit#6 ← (byte) init_plot_tables::bit#1
  to:init_plot_tables::@2
init_screen: scope:[init_screen]  from main
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@5
  (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@5/(byte*~) init_screen::b#3 )
  *((byte*) init_screen::b#2) ← (byte) 0
  (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2
  if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@5
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@6
  (byte*) init_screen::c#2 ← phi( init_screen::@6/(byte*~) init_screen::c#3 init_screen::@1/(const byte*) SCREEN#0 )
  *((byte*) init_screen::c#2) ← (byte) 20
  (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2
  if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@6
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  return 
  to:@return
init_screen::@6: scope:[init_screen]  from init_screen::@2
  (byte*~) init_screen::c#3 ← (byte*) init_screen::c#1
  to:init_screen::@2
init_screen::@5: scope:[init_screen]  from init_screen::@1
  (byte*~) init_screen::b#3 ← (byte*) init_screen::b#1
  to:init_screen::@1

Adding NOP phi() at start of lines
Adding NOP phi() at start of init_plot_tables
Adding NOP phi() at start of init_screen
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 5:init_screen 6:init_plot_tables 7:lines 
Calls in [lines] to 20:line 
Calls in [line] to 35:line_xdyi 41:plot 46:plot 51:plot 56:plot 63:plot 68:plot 73:plot 78:plot 
Calls in [line_xdyi] to 103:plot 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@7
@7: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @7
main: scope:[main]  from @7
  [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ]
  [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ]
  [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ]
  [4] *((const byte*) D018#0) ← (byte) 24 [ ]
  [5] call init_screen param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main
  [6] call init_plot_tables param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [7] call lines param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@1
  [8] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return  [ ]
  to:@return
lines: scope:[lines]  from main::@1
  [10] phi() [ ]
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@4
  [11] (byte) lines::l#2 ← phi( lines/(byte) 0 lines::@4/(byte~) lines::l#4 ) [ lines::l#2 ]
  [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ]
  [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ]
  [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ]
  [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ]
  [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ]
  [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ]
  [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ]
  [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  [20] call line param-assignment [ lines::l#2 ]
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ]
  [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@4 [ lines::l#1 ]
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  [23] return  [ ]
  to:@return
lines::@4: scope:[lines]  from lines::@3
  [24] (byte~) lines::l#4 ← (byte) lines::l#1 [ lines::l#4 ]
  to:lines::@1
line: scope:[line]  from lines::@1
  [25] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  to:line::@9
line::@9: scope:[line]  from line
  [26] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ]
  [27] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ]
  to:line::@10
line::@10: scope:[line]  from line::@9
  [28] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ]
  [29] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ]
  to:line::@11
line::@11: scope:[line]  from line::@10
  [30] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ]
  [31] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ]
  [32] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ]
  [33] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
  [34] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ]
  [35] call line_xdyi param-assignment [ ]
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  [36] return  [ ]
  to:@return
line::@3: scope:[line]  from line::@10
  [37] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ]
  [38] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
  [39] (byte~) plot::x#16 ← (byte) plot::x#2 [ line::x1#0 line::y1#0 plot::y#2 plot::x#16 ]
  [40] (byte~) plot::y#16 ← (byte) plot::y#2 [ line::x1#0 line::y1#0 plot::x#16 plot::y#16 ]
  [41] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@19
line::@19: scope:[line]  from line::@3
  [42] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ]
  [43] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ]
  [44] (byte~) plot::x#12 ← (byte) plot::x#3 [ plot::y#3 plot::x#12 ]
  [45] (byte~) plot::y#12 ← (byte) plot::y#3 [ plot::x#12 plot::y#12 ]
  [46] call plot param-assignment [ ]
  to:line::@return
line::@2: scope:[line]  from line::@9
  [47] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ]
  [48] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
  [49] (byte~) plot::x#13 ← (byte) plot::x#0 [ line::x1#0 line::y1#0 plot::y#0 plot::x#13 ]
  [50] (byte~) plot::y#13 ← (byte) plot::y#0 [ line::x1#0 line::y1#0 plot::x#13 plot::y#13 ]
  [51] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@17
line::@17: scope:[line]  from line::@2
  [52] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ]
  [53] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ]
  [54] (byte~) plot::x#11 ← (byte) plot::x#1 [ plot::y#1 plot::x#11 ]
  [55] (byte~) plot::y#11 ← (byte) plot::y#1 [ plot::x#11 plot::y#11 ]
  [56] call plot param-assignment [ ]
  to:line::@return
line::@1: scope:[line]  from line
  [57] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  [58] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  to:line::@15
line::@15: scope:[line]  from line::@1
  [59] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ]
  [60] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
  [61] (byte~) plot::x#10 ← (byte) plot::x#6 [ line::x1#0 line::y1#0 plot::y#6 plot::x#10 ]
  [62] (byte~) plot::y#10 ← (byte) plot::y#6 [ line::x1#0 line::y1#0 plot::x#10 plot::y#10 ]
  [63] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@24
line::@24: scope:[line]  from line::@15
  [64] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ]
  [65] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ]
  [66] (byte~) plot::x#15 ← (byte) plot::x#7 [ plot::y#7 plot::x#15 ]
  [67] (byte~) plot::y#15 ← (byte) plot::y#7 [ plot::x#15 plot::y#15 ]
  [68] call plot param-assignment [ ]
  to:line::@return
line::@7: scope:[line]  from line::@1
  [69] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ]
  [70] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
  [71] (byte~) plot::x#17 ← (byte) plot::x#4 [ line::x1#0 line::y1#0 plot::y#4 plot::x#17 ]
  [72] (byte~) plot::y#17 ← (byte) plot::y#4 [ line::x1#0 line::y1#0 plot::x#17 plot::y#17 ]
  [73] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@22
line::@22: scope:[line]  from line::@7
  [74] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ]
  [75] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ]
  [76] (byte~) plot::x#14 ← (byte) plot::x#5 [ plot::y#5 plot::x#14 ]
  [77] (byte~) plot::y#14 ← (byte) plot::y#5 [ plot::x#14 plot::y#14 ]
  [78] call plot param-assignment [ ]
  to:line::@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  [79] (byte) plot::y#9 ← phi( line::@15/(byte~) plot::y#10 line::@17/(byte~) plot::y#11 line::@19/(byte~) plot::y#12 line::@2/(byte~) plot::y#13 line::@22/(byte~) plot::y#14 line::@24/(byte~) plot::y#15 line::@3/(byte~) plot::y#16 line::@7/(byte~) plot::y#17 line_xdyi::@1/(byte~) plot::y#18 ) [ plot::x#9 plot::y#9 ]
  [79] (byte) plot::x#9 ← phi( line::@15/(byte~) plot::x#10 line::@17/(byte~) plot::x#11 line::@19/(byte~) plot::x#12 line::@2/(byte~) plot::x#13 line::@22/(byte~) plot::x#14 line::@24/(byte~) plot::x#15 line::@3/(byte~) plot::x#16 line::@7/(byte~) plot::x#17 line_xdyi::@1/(byte~) plot::x#18 ) [ plot::x#9 plot::y#9 ]
  [80] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ]
  [81] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ]
  [82] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ]
  [83] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ]
  [84] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ]
  [85] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ]
  [86] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ]
  [87] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ]
  [88] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ]
  [89] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ]
  [90] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ]
  [91] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ]
  [92] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [93] return  [ ]
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  [94] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ]
  [95] (byte~) line_xdyi::x#7 ← (byte) line_xdyi::x#0 [ line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 line_xdyi::x#7 ]
  [96] (byte~) line_xdyi::y#7 ← (byte) line_xdyi::y#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 line_xdyi::x#7 line_xdyi::y#7 ]
  [97] (byte~) line_xdyi::e#7 ← (byte) line_xdyi::e#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#7 line_xdyi::y#7 line_xdyi::e#7 ]
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@6
  [98] (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte~) line_xdyi::e#7 line_xdyi::@6/(byte~) line_xdyi::e#8 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [98] (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte~) line_xdyi::y#7 line_xdyi::@6/(byte~) line_xdyi::y#8 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [98] (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte~) line_xdyi::x#7 line_xdyi::@6/(byte~) line_xdyi::x#8 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [99] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 plot::x#8 ]
  [100] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 plot::x#8 plot::y#8 ]
  [101] (byte~) plot::x#18 ← (byte) plot::x#8 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#18 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 plot::y#8 ]
  [102] (byte~) plot::y#18 ← (byte) plot::y#8 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#18 plot::y#18 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [103] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  [104] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ]
  [105] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ]
  [106] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@7 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ]
  to:line_xdyi::@3
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  [107] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ]
  [108] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ]
  [109] (byte~) line_xdyi::y#9 ← (byte) line_xdyi::y#1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#2 line_xdyi::y#9 ]
  [110] (byte~) line_xdyi::e#9 ← (byte) line_xdyi::e#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#9 line_xdyi::e#9 ]
  to:line_xdyi::@2
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@7
  [111] (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte~) line_xdyi::e#9 line_xdyi::@7/(byte~) line_xdyi::e#10 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ]
  [111] (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte~) line_xdyi::y#9 line_xdyi::@7/(byte~) line_xdyi::y#10 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ]
  [112] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ]
  [113] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@6 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ]
  to:line_xdyi::@return
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  [114] return  [ ]
  to:@return
line_xdyi::@6: scope:[line_xdyi]  from line_xdyi::@2
  [115] (byte~) line_xdyi::x#8 ← (byte) line_xdyi::x#1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#8 line_xdyi::y#5 line_xdyi::e#6 ]
  [116] (byte~) line_xdyi::y#8 ← (byte) line_xdyi::y#5 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#8 line_xdyi::y#8 line_xdyi::e#6 ]
  [117] (byte~) line_xdyi::e#8 ← (byte) line_xdyi::e#6 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#8 line_xdyi::y#8 line_xdyi::e#8 ]
  to:line_xdyi::@1
line_xdyi::@7: scope:[line_xdyi]  from line_xdyi::@5
  [118] (byte~) line_xdyi::y#10 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#10 ]
  [119] (byte~) line_xdyi::e#10 ← (byte) line_xdyi::e#1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#10 line_xdyi::e#10 ]
  to:line_xdyi::@2
init_plot_tables: scope:[init_plot_tables]  from main::@3
  [120] phi() [ ]
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@9
  [121] (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@9/(byte~) init_plot_tables::bit#5 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [121] (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@9/(byte~) init_plot_tables::x#5 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [122] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ]
  [123] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [124] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [125] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [126] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ]
  [127] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 init_plot_tables::bit#1 ]
  to:init_plot_tables::@5
init_plot_tables::@5: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@10 init_plot_tables::@5
  [128] (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@10/(byte~) init_plot_tables::bit#6 init_plot_tables::@5/(byte) 128 ) [ init_plot_tables::x#2 init_plot_tables::bit#4 ]
  [129] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::bit#4 init_plot_tables::x#1 ]
  [130] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@9 [ init_plot_tables::bit#4 init_plot_tables::x#1 ]
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@11 init_plot_tables::@2
  [131] (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@11/(byte*~) init_plot_tables::yoffs#5 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [131] (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@11/(byte~) init_plot_tables::y#5 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [132] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ]
  [133] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ]
  [134] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ]
  [135] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [136] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ]
  [137] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [138] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ]
  [139] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@12 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  to:init_plot_tables::@7
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  [140] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ]
  [141] (byte*~) init_plot_tables::yoffs#7 ← (byte*) init_plot_tables::yoffs#1 [ init_plot_tables::y#2 init_plot_tables::yoffs#7 ]
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@12 init_plot_tables::@7
  [142] (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@12/(byte*~) init_plot_tables::yoffs#6 init_plot_tables::@7/(byte*~) init_plot_tables::yoffs#7 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#4 ]
  [143] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::yoffs#4 init_plot_tables::y#1 ]
  [144] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@11 [ init_plot_tables::yoffs#4 init_plot_tables::y#1 ]
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  [145] return  [ ]
  to:@return
init_plot_tables::@11: scope:[init_plot_tables]  from init_plot_tables::@4
  [146] (byte~) init_plot_tables::y#5 ← (byte) init_plot_tables::y#1 [ init_plot_tables::y#5 init_plot_tables::yoffs#4 ]
  [147] (byte*~) init_plot_tables::yoffs#5 ← (byte*) init_plot_tables::yoffs#4 [ init_plot_tables::y#5 init_plot_tables::yoffs#5 ]
  to:init_plot_tables::@3
init_plot_tables::@12: scope:[init_plot_tables]  from init_plot_tables::@3
  [148] (byte*~) init_plot_tables::yoffs#6 ← (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#6 ]
  to:init_plot_tables::@4
init_plot_tables::@9: scope:[init_plot_tables]  from init_plot_tables::@2
  [149] (byte~) init_plot_tables::x#5 ← (byte) init_plot_tables::x#1 [ init_plot_tables::x#5 init_plot_tables::bit#4 ]
  [150] (byte~) init_plot_tables::bit#5 ← (byte) init_plot_tables::bit#4 [ init_plot_tables::x#5 init_plot_tables::bit#5 ]
  to:init_plot_tables::@1
init_plot_tables::@10: scope:[init_plot_tables]  from init_plot_tables::@1
  [151] (byte~) init_plot_tables::bit#6 ← (byte) init_plot_tables::bit#1 [ init_plot_tables::x#2 init_plot_tables::bit#6 ]
  to:init_plot_tables::@2
init_screen: scope:[init_screen]  from main
  [152] phi() [ ]
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@5
  [153] (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@5/(byte*~) init_screen::b#3 ) [ init_screen::b#2 ]
  [154] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ]
  [155] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ]
  [156] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@5 [ init_screen::b#1 ]
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@6
  [157] (byte*) init_screen::c#2 ← phi( init_screen::@6/(byte*~) init_screen::c#3 init_screen::@1/(const byte*) SCREEN#0 ) [ init_screen::c#2 ]
  [158] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ]
  [159] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ]
  [160] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@6 [ init_screen::c#1 ]
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  [161] return  [ ]
  to:@return
init_screen::@6: scope:[init_screen]  from init_screen::@2
  [162] (byte*~) init_screen::c#3 ← (byte*) init_screen::c#1 [ init_screen::c#3 ]
  to:init_screen::@2
init_screen::@5: scope:[init_screen]  from init_screen::@1
  [163] (byte*~) init_screen::b#3 ← (byte*) init_screen::b#1 [ init_screen::b#3 ]
  to:init_screen::@1

Created 16 initial phi equivalence classes
Coalesced [24] lines::l#4 ← lines::l#1
Coalesced [39] plot::x#16 ← plot::x#2
Coalesced [40] plot::y#16 ← plot::y#2
Coalesced [44] plot::x#12 ← plot::x#3
Coalesced [45] plot::y#12 ← plot::y#3
Coalesced [49] plot::x#13 ← plot::x#0
Coalesced [50] plot::y#13 ← plot::y#0
Coalesced [54] plot::x#11 ← plot::x#1
Coalesced [55] plot::y#11 ← plot::y#1
Coalesced [61] plot::x#10 ← plot::x#6
Coalesced [62] plot::y#10 ← plot::y#6
Coalesced [66] plot::x#15 ← plot::x#7
Coalesced [67] plot::y#15 ← plot::y#7
Coalesced [71] plot::x#17 ← plot::x#4
Coalesced [72] plot::y#17 ← plot::y#4
Coalesced [76] plot::x#14 ← plot::x#5
Coalesced [77] plot::y#14 ← plot::y#5
Coalesced [95] line_xdyi::x#7 ← line_xdyi::x#0
Coalesced [96] line_xdyi::y#7 ← line_xdyi::y#0
Coalesced [97] line_xdyi::e#7 ← line_xdyi::e#0
Coalesced [101] plot::x#18 ← plot::x#8
Coalesced [102] plot::y#18 ← plot::y#8
Coalesced [109] line_xdyi::y#9 ← line_xdyi::y#1
Coalesced [110] line_xdyi::e#9 ← line_xdyi::e#2
Coalesced [115] line_xdyi::x#8 ← line_xdyi::x#1
Coalesced [116] line_xdyi::y#8 ← line_xdyi::y#5
Coalesced [117] line_xdyi::e#8 ← line_xdyi::e#6
Coalesced (already) [118] line_xdyi::y#10 ← line_xdyi::y#2
Coalesced [119] line_xdyi::e#10 ← line_xdyi::e#1
Coalesced [141] init_plot_tables::yoffs#7 ← init_plot_tables::yoffs#1
Coalesced [146] init_plot_tables::y#5 ← init_plot_tables::y#1
Coalesced [147] init_plot_tables::yoffs#5 ← init_plot_tables::yoffs#4
Coalesced (already) [148] init_plot_tables::yoffs#6 ← init_plot_tables::yoffs#2
Coalesced [149] init_plot_tables::x#5 ← init_plot_tables::x#1
Coalesced [150] init_plot_tables::bit#5 ← init_plot_tables::bit#4
Coalesced [151] init_plot_tables::bit#6 ← init_plot_tables::bit#1
Coalesced [162] init_screen::c#3 ← init_screen::c#1
Coalesced [163] init_screen::b#3 ← init_screen::b#1
Coalesced down to 12 phi equivalence classes
Culled Empty Block (label) lines::@4
Culled Empty Block (label) line_xdyi::@6
Culled Empty Block (label) line_xdyi::@7
Culled Empty Block (label) init_plot_tables::@5
Culled Empty Block (label) init_plot_tables::@11
Culled Empty Block (label) init_plot_tables::@12
Culled Empty Block (label) init_plot_tables::@9
Not culling empty block because it shares successor with its predecessor. (label) init_plot_tables::@10
Culled Empty Block (label) init_screen::@6
Culled Empty Block (label) init_screen::@5
Block Sequence Planned @begin @7 @end main main::@3 main::@1 main::@5 main::@return lines lines::@1 lines::@3 lines::@return line line::@9 line::@10 line::@11 line::@return line::@3 line::@19 line::@2 line::@17 line::@1 line::@15 line::@24 line::@7 line::@22 plot plot::@return line_xdyi line_xdyi::@1 line_xdyi::@5 line_xdyi::@3 line_xdyi::@2 line_xdyi::@return init_plot_tables init_plot_tables::@1 init_plot_tables::@2 init_plot_tables::@3 init_plot_tables::@7 init_plot_tables::@4 init_plot_tables::@return init_plot_tables::@10 init_screen init_screen::@1 init_screen::@2 init_screen::@return 
Adding NOP phi() at start of lines
Adding NOP phi() at start of init_plot_tables
Adding NOP phi() at start of init_screen
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@7
@7: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @7
main: scope:[main]  from @7
  [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ]
  [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ]
  [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ]
  [4] *((const byte*) D018#0) ← (byte) 24 [ ]
  [5] call init_screen param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main
  [6] call init_plot_tables param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [7] call lines param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@1
  [8] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return  [ ]
  to:@return
lines: scope:[lines]  from main::@1
  [10] phi() [ ]
  to:lines::@1
lines::@1: scope:[lines]  from lines lines::@3
  [11] (byte) lines::l#2 ← phi( lines/(byte) 0 lines::@3/(byte) lines::l#1 ) [ lines::l#2 ]
  [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ]
  [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ]
  [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ]
  [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ]
  [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ]
  [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ]
  [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ]
  [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  [20] call line param-assignment [ lines::l#2 ]
  to:lines::@3
lines::@3: scope:[lines]  from lines::@1
  [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ]
  [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ]
  to:lines::@return
lines::@return: scope:[lines]  from lines::@3
  [23] return  [ ]
  to:@return
line: scope:[line]  from lines::@1
  [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  to:line::@9
line::@9: scope:[line]  from line
  [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ]
  [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ]
  to:line::@10
line::@10: scope:[line]  from line::@9
  [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ]
  [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ]
  to:line::@11
line::@11: scope:[line]  from line::@10
  [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ]
  [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ]
  [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ]
  [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
  [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ]
  [34] call line_xdyi param-assignment [ ]
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@17 line::@19 line::@22 line::@24
  [35] return  [ ]
  to:@return
line::@3: scope:[line]  from line::@10
  [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ]
  [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
  [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@19
line::@19: scope:[line]  from line::@3
  [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ]
  [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ]
  [41] call plot param-assignment [ ]
  to:line::@return
line::@2: scope:[line]  from line::@9
  [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ]
  [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
  [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@17
line::@17: scope:[line]  from line::@2
  [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ]
  [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ]
  [47] call plot param-assignment [ ]
  to:line::@return
line::@1: scope:[line]  from line
  [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ]
  to:line::@15
line::@15: scope:[line]  from line::@1
  [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ]
  [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
  [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@24
line::@24: scope:[line]  from line::@15
  [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ]
  [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ]
  [55] call plot param-assignment [ ]
  to:line::@return
line::@7: scope:[line]  from line::@1
  [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ]
  [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
  [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  to:line::@22
line::@22: scope:[line]  from line::@7
  [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ]
  [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ]
  [61] call plot param-assignment [ ]
  to:line::@return
plot: scope:[plot]  from line::@15 line::@17 line::@19 line::@2 line::@22 line::@24 line::@3 line::@7 line_xdyi::@1
  [62] (byte) plot::y#9 ← phi( line::@15/(byte) plot::y#6 line::@17/(byte) plot::y#1 line::@19/(byte) plot::y#3 line::@2/(byte) plot::y#0 line::@22/(byte) plot::y#5 line::@24/(byte) plot::y#7 line::@3/(byte) plot::y#2 line::@7/(byte) plot::y#4 line_xdyi::@1/(byte) plot::y#8 ) [ plot::x#9 plot::y#9 ]
  [62] (byte) plot::x#9 ← phi( line::@15/(byte) plot::x#6 line::@17/(byte) plot::x#1 line::@19/(byte) plot::x#3 line::@2/(byte) plot::x#0 line::@22/(byte) plot::x#5 line::@24/(byte) plot::x#7 line::@3/(byte) plot::x#2 line::@7/(byte) plot::x#4 line_xdyi::@1/(byte) plot::x#8 ) [ plot::x#9 plot::y#9 ]
  [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ]
  [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ]
  [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ]
  [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ]
  [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ]
  [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ]
  [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ]
  [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ]
  [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ]
  [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ]
  [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ]
  [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ]
  [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [76] return  [ ]
  to:@return
line_xdyi: scope:[line_xdyi]  from line::@11
  [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ]
  to:line_xdyi::@1
line_xdyi::@1: scope:[line_xdyi]  from line_xdyi line_xdyi::@2
  [78] (byte) line_xdyi::e#3 ← phi( line_xdyi/(byte) line_xdyi::e#0 line_xdyi::@2/(byte) line_xdyi::e#6 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [78] (byte) line_xdyi::y#2 ← phi( line_xdyi/(byte) line_xdyi::y#0 line_xdyi::@2/(byte) line_xdyi::y#5 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [78] (byte) line_xdyi::x#2 ← phi( line_xdyi/(byte) line_xdyi::x#0 line_xdyi::@2/(byte) line_xdyi::x#1 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  to:line_xdyi::@5
line_xdyi::@5: scope:[line_xdyi]  from line_xdyi::@1
  [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ]
  [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ]
  [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ]
  to:line_xdyi::@3
line_xdyi::@3: scope:[line_xdyi]  from line_xdyi::@5
  [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ]
  [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ]
  to:line_xdyi::@2
line_xdyi::@2: scope:[line_xdyi]  from line_xdyi::@3 line_xdyi::@5
  [87] (byte) line_xdyi::e#6 ← phi( line_xdyi::@3/(byte) line_xdyi::e#2 line_xdyi::@5/(byte) line_xdyi::e#1 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ]
  [87] (byte) line_xdyi::y#5 ← phi( line_xdyi::@3/(byte) line_xdyi::y#1 line_xdyi::@5/(byte) line_xdyi::y#2 ) [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ]
  [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ]
  [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ]
  to:line_xdyi::@return
line_xdyi::@return: scope:[line_xdyi]  from line_xdyi::@2
  [90] return  [ ]
  to:@return
init_plot_tables: scope:[init_plot_tables]  from main::@3
  [91] phi() [ ]
  to:init_plot_tables::@1
init_plot_tables::@1: scope:[init_plot_tables]  from init_plot_tables init_plot_tables::@2
  [92] (byte) init_plot_tables::bit#3 ← phi( init_plot_tables/(byte) 128 init_plot_tables::@2/(byte) init_plot_tables::bit#4 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [92] (byte) init_plot_tables::x#2 ← phi( init_plot_tables/(byte) 0 init_plot_tables::@2/(byte) init_plot_tables::x#1 ) [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ]
  [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ]
  [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ]
  [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ]
  to:init_plot_tables::@2
init_plot_tables::@2: scope:[init_plot_tables]  from init_plot_tables::@1 init_plot_tables::@10
  [99] (byte) init_plot_tables::bit#4 ← phi( init_plot_tables::@10/(byte) init_plot_tables::bit#1 init_plot_tables::@1/(byte) 128 ) [ init_plot_tables::x#2 init_plot_tables::bit#4 ]
  [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ]
  [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ]
  to:init_plot_tables::@3
init_plot_tables::@3: scope:[init_plot_tables]  from init_plot_tables::@2 init_plot_tables::@4
  [102] (byte*) init_plot_tables::yoffs#2 ← phi( init_plot_tables::@4/(byte*) init_plot_tables::yoffs#4 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [102] (byte) init_plot_tables::y#2 ← phi( init_plot_tables::@4/(byte) init_plot_tables::y#1 init_plot_tables::@2/(byte) 0 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ]
  [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ]
  [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ]
  [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ]
  [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ]
  [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ]
  to:init_plot_tables::@7
init_plot_tables::@7: scope:[init_plot_tables]  from init_plot_tables::@3
  [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ]
  to:init_plot_tables::@4
init_plot_tables::@4: scope:[init_plot_tables]  from init_plot_tables::@3 init_plot_tables::@7
  [112] (byte*) init_plot_tables::yoffs#4 ← phi( init_plot_tables::@3/(byte*) init_plot_tables::yoffs#2 init_plot_tables::@7/(byte*) init_plot_tables::yoffs#1 ) [ init_plot_tables::y#2 init_plot_tables::yoffs#4 ]
  [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ]
  [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ]
  to:init_plot_tables::@return
init_plot_tables::@return: scope:[init_plot_tables]  from init_plot_tables::@4
  [115] return  [ ]
  to:@return
init_plot_tables::@10: scope:[init_plot_tables]  from init_plot_tables::@1
  to:init_plot_tables::@2
init_screen: scope:[init_screen]  from main
  [116] phi() [ ]
  to:init_screen::@1
init_screen::@1: scope:[init_screen]  from init_screen init_screen::@1
  [117] (byte*) init_screen::b#2 ← phi( init_screen/(const byte*) BITMAP#0 init_screen::@1/(byte*) init_screen::b#1 ) [ init_screen::b#2 ]
  [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ]
  [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ]
  [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ]
  to:init_screen::@2
init_screen::@2: scope:[init_screen]  from init_screen::@1 init_screen::@2
  [121] (byte*) init_screen::c#2 ← phi( init_screen::@2/(byte*) init_screen::c#1 init_screen::@1/(const byte*) SCREEN#0 ) [ init_screen::c#2 ]
  [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ]
  [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ]
  [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ]
  to:init_screen::@return
init_screen::@return: scope:[init_screen]  from init_screen::@2
  [125] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@7 dominated by  @begin @7 
@end dominated by  @begin @7 @end 
main dominated by  @begin @7 main 
main::@3 dominated by  @begin @7 main::@3 main 
main::@1 dominated by  @begin @7 main::@1 main::@3 main 
main::@5 dominated by  @begin @7 main::@1 main::@3 main::@5 main 
main::@return dominated by  @begin @7 main::@1 main::@3 main::@5 main main::@return 
lines dominated by  @begin @7 main::@1 main::@3 main lines 
lines::@1 dominated by  @begin @7 main::@1 main::@3 lines::@1 main lines 
lines::@3 dominated by  @begin @7 main::@1 main::@3 lines::@3 lines::@1 main lines 
lines::@return dominated by  @begin @7 main::@1 main::@3 lines::@return lines::@3 lines::@1 main lines 
line dominated by  @begin @7 line main::@1 main::@3 lines::@1 main lines 
line::@9 dominated by  @begin @7 line main::@1 main::@3 line::@9 lines::@1 main lines 
line::@10 dominated by  @begin @7 line main::@1 main::@3 line::@10 lines::@1 main line::@9 lines 
line::@11 dominated by  @begin @7 line main::@1 main::@3 line::@10 line::@11 lines::@1 main line::@9 lines 
line::@return dominated by  @begin @7 line main::@1 main::@3 line::@return lines::@1 main lines 
line::@3 dominated by  @begin @7 line main::@1 main::@3 line::@3 line::@10 lines::@1 main line::@9 lines 
line::@19 dominated by  @begin @7 line main::@1 main::@3 line::@3 line::@10 lines::@1 main line::@9 line::@19 lines 
line::@2 dominated by  @begin @7 line main::@1 main::@3 line::@2 lines::@1 main line::@9 lines 
line::@17 dominated by  @begin @7 line main::@1 main::@3 line::@2 lines::@1 main line::@9 line::@17 lines 
line::@1 dominated by  @begin @7 line main::@1 main::@3 line::@1 lines::@1 main lines 
line::@15 dominated by  @begin @7 line main::@1 main::@3 line::@1 lines::@1 main line::@15 lines 
line::@24 dominated by  @begin @7 line::@24 line main::@1 main::@3 line::@1 lines::@1 main line::@15 lines 
line::@7 dominated by  @begin @7 line main::@1 main::@3 line::@1 line::@7 lines::@1 main lines 
line::@22 dominated by  @begin @7 line line::@22 main::@1 main::@3 line::@1 line::@7 lines::@1 main lines 
plot dominated by  @begin @7 line main::@1 main::@3 plot lines::@1 main lines 
plot::@return dominated by  @begin @7 line main::@1 main::@3 plot plot::@return lines::@1 main lines 
line_xdyi dominated by  @begin @7 line main::@1 main::@3 line_xdyi line::@10 line::@11 lines::@1 main line::@9 lines 
line_xdyi::@1 dominated by  @begin @7 line main::@1 main::@3 line_xdyi line::@10 line::@11 lines::@1 main line::@9 line_xdyi::@1 lines 
line_xdyi::@5 dominated by  @begin @7 line main::@1 main::@3 line_xdyi line::@10 line::@11 lines::@1 main line::@9 line_xdyi::@1 line_xdyi::@5 lines 
line_xdyi::@3 dominated by  @begin @7 line main::@1 main::@3 line_xdyi line::@10 line::@11 lines::@1 main line::@9 line_xdyi::@1 line_xdyi::@3 line_xdyi::@5 lines 
line_xdyi::@2 dominated by  @begin @7 line main::@1 main::@3 line_xdyi line::@10 line::@11 lines::@1 main line::@9 line_xdyi::@1 line_xdyi::@2 line_xdyi::@5 lines 
line_xdyi::@return dominated by  @begin @7 line main::@1 main::@3 line_xdyi line::@10 line::@11 lines::@1 main line::@9 line_xdyi::@1 line_xdyi::@2 line_xdyi::@5 lines line_xdyi::@return 
init_plot_tables dominated by  init_plot_tables @begin @7 main::@3 main 
init_plot_tables::@1 dominated by  init_plot_tables::@1 init_plot_tables @begin @7 main::@3 main 
init_plot_tables::@2 dominated by  init_plot_tables::@2 init_plot_tables::@1 init_plot_tables @begin @7 main::@3 main 
init_plot_tables::@3 dominated by  init_plot_tables::@3 init_plot_tables::@2 init_plot_tables::@1 init_plot_tables @begin @7 main::@3 main 
init_plot_tables::@7 dominated by  init_plot_tables::@3 init_plot_tables::@2 init_plot_tables::@1 init_plot_tables @begin @7 init_plot_tables::@7 main::@3 main 
init_plot_tables::@4 dominated by  init_plot_tables::@3 init_plot_tables::@2 init_plot_tables::@1 init_plot_tables @begin @7 init_plot_tables::@4 main::@3 main 
init_plot_tables::@return dominated by  init_plot_tables::@3 init_plot_tables::@2 init_plot_tables::@1 init_plot_tables @begin init_plot_tables::@return @7 init_plot_tables::@4 main::@3 main 
init_plot_tables::@10 dominated by  init_plot_tables::@10 init_plot_tables::@1 init_plot_tables @begin @7 main::@3 main 
init_screen dominated by  @begin @7 init_screen main 
init_screen::@1 dominated by  init_screen::@1 @begin @7 init_screen main 
init_screen::@2 dominated by  init_screen::@1 init_screen::@2 @begin @7 init_screen main 
init_screen::@return dominated by  init_screen::@1 init_screen::@2 @begin @7 init_screen init_screen::@return main 

Found back edge: Loop head: main::@1 tails: main::@5 blocks: null
Found back edge: Loop head: lines::@1 tails: lines::@3 blocks: null
Found back edge: Loop head: line_xdyi::@1 tails: line_xdyi::@2 blocks: null
Found back edge: Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: null
Found back edge: Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: null
Found back edge: Loop head: init_screen::@1 tails: init_screen::@1 blocks: null
Found back edge: Loop head: init_screen::@2 tails: init_screen::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@1 
Populated: Loop head: lines::@1 tails: lines::@3 blocks: lines::@3 lines::@1 
Populated: Loop head: line_xdyi::@1 tails: line_xdyi::@2 blocks: line_xdyi::@2 line_xdyi::@3 line_xdyi::@5 line_xdyi::@1 
Populated: Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10 
Populated: Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7 
Populated: Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1 
Populated: Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2 
NATURAL LOOPS
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@1 
Loop head: lines::@1 tails: lines::@3 blocks: lines::@3 lines::@1 
Loop head: line_xdyi::@1 tails: line_xdyi::@2 blocks: line_xdyi::@2 line_xdyi::@3 line_xdyi::@5 line_xdyi::@1 
Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10 
Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7 
Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1 
Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@1 
Found 2 loops in scope [init_screen]
  Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1 
  Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2 
Found 2 loops in scope [init_plot_tables]
  Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10 
  Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7 
Found 1 loops in scope [lines]
  Loop head: lines::@1 tails: lines::@3 blocks: lines::@3 lines::@1 
Found 0 loops in scope [line]
Found 1 loops in scope [line_xdyi]
  Loop head: line_xdyi::@1 tails: line_xdyi::@2 blocks: line_xdyi::@2 line_xdyi::@3 line_xdyi::@5 line_xdyi::@1 
Found 0 loops in scope [plot]
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@1  depth: 1
Loop head: lines::@1 tails: lines::@3 blocks: lines::@3 lines::@1  depth: 2
Loop head: line_xdyi::@1 tails: line_xdyi::@2 blocks: line_xdyi::@2 line_xdyi::@3 line_xdyi::@5 line_xdyi::@1  depth: 1
Loop head: init_plot_tables::@1 tails: init_plot_tables::@2 blocks: init_plot_tables::@2 init_plot_tables::@1 init_plot_tables::@10  depth: 1
Loop head: init_plot_tables::@3 tails: init_plot_tables::@4 blocks: init_plot_tables::@4 init_plot_tables::@3 init_plot_tables::@7  depth: 1
Loop head: init_screen::@1 tails: init_screen::@1 blocks: init_screen::@1  depth: 1
Loop head: init_screen::@2 tails: init_screen::@2 blocks: init_screen::@2  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BITMAP
(byte) BMM
(byte*) COLS
(byte) CSEL
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DEN
(byte) ECM
(byte*) FGCOL
(byte) MCM
(byte) RSEL
(byte) RST8
(byte*) SCREEN
(byte*) SCROLL
(void()) init_plot_tables()
(byte~) init_plot_tables::$0 22.0
(byte~) init_plot_tables::$10 22.0
(byte~) init_plot_tables::$6 11.0
(byte~) init_plot_tables::$7 22.0
(byte~) init_plot_tables::$8 22.0
(byte~) init_plot_tables::$9 22.0
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#1 33.0
(byte) init_plot_tables::bit#3 6.6000000000000005
(byte) init_plot_tables::bit#4 7.333333333333333
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1 16.5
(byte) init_plot_tables::x#2 8.25
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1 16.5
(byte) init_plot_tables::y#2 6.0
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1 22.0
(byte*) init_plot_tables::yoffs#2 6.111111111111112
(byte*) init_plot_tables::yoffs#4 11.0
(void()) init_screen()
(byte*) init_screen::b
(byte*) init_screen::b#1 16.5
(byte*) init_screen::b#2 16.5
(byte*) init_screen::c
(byte*) init_screen::c#1 16.5
(byte*) init_screen::c#2 16.5
(void()) line((byte) line::x0 , (byte) line::x1 , (byte) line::y0 , (byte) line::y1)
(byte) line::x0
(byte) line::x0#0 10.636363636363635
(byte) line::x1
(byte) line::x1#0 4.874999999999997
(byte) line::xd
(byte) line::xd#0 20.0
(byte) line::xd#1 0.8571428571428571
(byte) line::y0
(byte) line::y0#0 8.357142857142858
(byte) line::y1
(byte) line::y1#0 4.791666666666664
(byte) line::yd
(byte) line::yd#0 1.0
(void()) line_xdyi((byte) line_xdyi::x , (byte) line_xdyi::y , (byte) line_xdyi::x1 , (byte) line_xdyi::xd , (byte) line_xdyi::yd)
(byte~) line_xdyi::$8 22.0
(byte) line_xdyi::e
(byte) line_xdyi::e#0 4.0
(byte) line_xdyi::e#1 14.666666666666666
(byte) line_xdyi::e#2 22.0
(byte) line_xdyi::e#3 4.800000000000001
(byte) line_xdyi::e#6 11.0
(byte) line_xdyi::x
(byte) line_xdyi::x#0 0.6666666666666666
(byte) line_xdyi::x#1 4.125
(byte) line_xdyi::x#2 8.75
(byte) line_xdyi::x1
(byte) line_xdyi::x1#0 0.8125
(byte) line_xdyi::xd
(byte) line_xdyi::xd#0 1.5999999999999999
(byte) line_xdyi::y
(byte) line_xdyi::y#0 0.8
(byte) line_xdyi::y#1 11.0
(byte) line_xdyi::y#2 6.571428571428571
(byte) line_xdyi::y#5 11.0
(byte) line_xdyi::yd
(byte) line_xdyi::yd#0 1.0714285714285714
(void()) lines()
(byte~) lines::$0 50.5
(byte~) lines::$2 50.5
(byte~) lines::$3 50.5
(byte~) lines::$5 50.5
(byte) lines::l
(byte) lines::l#1 151.5
(byte) lines::l#2 60.6
(byte) lines_cnt
(byte[]) lines_x
(byte[]) lines_y
(void()) main()
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0 4.0
(byte~) plot::$1 4.0
(byte~) plot::$2 4.0
(byte~) plot::$3 4.0
(byte~) plot::$5 2.0
(byte~) plot::$6 4.0
(byte~) plot::$7 4.0
(byte*) plot::plotter
(byte*) plot::plotter#0 1.5
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1 2.0
(byte*) plot::plotter_x#2 0.8
(byte*) plot::plotter_y
(byte*) plot::plotter_y#1 2.0
(byte*) plot::plotter_y#2 4.0
(byte) plot::x
(byte) plot::x#0 2.0
(byte) plot::x#1 2.0
(byte) plot::x#2 2.0
(byte) plot::x#3 2.0
(byte) plot::x#4 2.0
(byte) plot::x#5 2.0
(byte) plot::x#6 2.0
(byte) plot::x#7 2.0
(byte) plot::x#8 11.0
(byte) plot::x#9 3.0
(byte) plot::y
(byte) plot::y#0 4.0
(byte) plot::y#1 4.0
(byte) plot::y#2 4.0
(byte) plot::y#3 4.0
(byte) plot::y#4 4.0
(byte) plot::y#5 4.0
(byte) plot::y#6 4.0
(byte) plot::y#7 4.0
(byte) plot::y#8 22.0
(byte) plot::y#9 4.428571428571428
(byte[]) plot_bit
(byte[]) plot_xhi
(byte[]) plot_xlo
(byte[]) plot_yhi
(byte[]) plot_ylo

Initial phi equivalence classes
[ lines::l#2 lines::l#1 ]
[ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ]
[ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ]
[ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ]
[ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ]
[ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ]
[ init_plot_tables::x#2 init_plot_tables::x#1 ]
[ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
[ init_plot_tables::y#2 init_plot_tables::y#1 ]
[ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
[ init_screen::b#2 init_screen::b#1 ]
[ init_screen::c#2 init_screen::c#1 ]
Added variable lines::$0 to zero page equivalence class [ lines::$0 ]
Added variable lines::$2 to zero page equivalence class [ lines::$2 ]
Added variable lines::$3 to zero page equivalence class [ lines::$3 ]
Added variable lines::$5 to zero page equivalence class [ lines::$5 ]
Added variable line::x0#0 to zero page equivalence class [ line::x0#0 ]
Added variable line::x1#0 to zero page equivalence class [ line::x1#0 ]
Added variable line::y0#0 to zero page equivalence class [ line::y0#0 ]
Added variable line::y1#0 to zero page equivalence class [ line::y1#0 ]
Added variable line::xd#1 to zero page equivalence class [ line::xd#1 ]
Added variable line::yd#0 to zero page equivalence class [ line::yd#0 ]
Added variable line_xdyi::x1#0 to zero page equivalence class [ line_xdyi::x1#0 ]
Added variable line_xdyi::xd#0 to zero page equivalence class [ line_xdyi::xd#0 ]
Added variable line_xdyi::yd#0 to zero page equivalence class [ line_xdyi::yd#0 ]
Added variable line::xd#0 to zero page equivalence class [ line::xd#0 ]
Added variable plot::$0 to zero page equivalence class [ plot::$0 ]
Added variable plot::plotter_x#1 to zero page equivalence class [ plot::plotter_x#1 ]
Added variable plot::$1 to zero page equivalence class [ plot::$1 ]
Added variable plot::plotter_x#2 to zero page equivalence class [ plot::plotter_x#2 ]
Added variable plot::$2 to zero page equivalence class [ plot::$2 ]
Added variable plot::plotter_y#1 to zero page equivalence class [ plot::plotter_y#1 ]
Added variable plot::$3 to zero page equivalence class [ plot::$3 ]
Added variable plot::plotter_y#2 to zero page equivalence class [ plot::plotter_y#2 ]
Added variable plot::plotter#0 to zero page equivalence class [ plot::plotter#0 ]
Added variable plot::$5 to zero page equivalence class [ plot::$5 ]
Added variable plot::$6 to zero page equivalence class [ plot::$6 ]
Added variable plot::$7 to zero page equivalence class [ plot::$7 ]
Added variable line_xdyi::$8 to zero page equivalence class [ line_xdyi::$8 ]
Added variable init_plot_tables::$0 to zero page equivalence class [ init_plot_tables::$0 ]
Added variable init_plot_tables::$6 to zero page equivalence class [ init_plot_tables::$6 ]
Added variable init_plot_tables::$7 to zero page equivalence class [ init_plot_tables::$7 ]
Added variable init_plot_tables::$8 to zero page equivalence class [ init_plot_tables::$8 ]
Added variable init_plot_tables::$9 to zero page equivalence class [ init_plot_tables::$9 ]
Added variable init_plot_tables::$10 to zero page equivalence class [ init_plot_tables::$10 ]
Complete equivalence classes
[ lines::l#2 lines::l#1 ]
[ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ]
[ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ]
[ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ]
[ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ]
[ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ]
[ init_plot_tables::x#2 init_plot_tables::x#1 ]
[ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
[ init_plot_tables::y#2 init_plot_tables::y#1 ]
[ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
[ init_screen::b#2 init_screen::b#1 ]
[ init_screen::c#2 init_screen::c#1 ]
[ lines::$0 ]
[ lines::$2 ]
[ lines::$3 ]
[ lines::$5 ]
[ line::x0#0 ]
[ line::x1#0 ]
[ line::y0#0 ]
[ line::y1#0 ]
[ line::xd#1 ]
[ line::yd#0 ]
[ line_xdyi::x1#0 ]
[ line_xdyi::xd#0 ]
[ line_xdyi::yd#0 ]
[ line::xd#0 ]
[ plot::$0 ]
[ plot::plotter_x#1 ]
[ plot::$1 ]
[ plot::plotter_x#2 ]
[ plot::$2 ]
[ plot::plotter_y#1 ]
[ plot::$3 ]
[ plot::plotter_y#2 ]
[ plot::plotter#0 ]
[ plot::$5 ]
[ plot::$6 ]
[ plot::$7 ]
[ line_xdyi::$8 ]
[ init_plot_tables::$0 ]
[ init_plot_tables::$6 ]
[ init_plot_tables::$7 ]
[ init_plot_tables::$8 ]
[ init_plot_tables::$9 ]
[ init_plot_tables::$10 ]
Allocated zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ]
Allocated zp ZP_BYTE:3 [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ]
Allocated zp ZP_BYTE:4 [ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ]
Allocated zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ]
Allocated zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ]
Allocated zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ]
Allocated zp ZP_BYTE:8 [ init_plot_tables::x#2 init_plot_tables::x#1 ]
Allocated zp ZP_BYTE:9 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
Allocated zp ZP_BYTE:10 [ init_plot_tables::y#2 init_plot_tables::y#1 ]
Allocated zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ]
Allocated zp ZP_PTR_BYTE:13 [ init_screen::b#2 init_screen::b#1 ]
Allocated zp ZP_PTR_BYTE:15 [ init_screen::c#2 init_screen::c#1 ]
Allocated zp ZP_BYTE:17 [ lines::$0 ]
Allocated zp ZP_BYTE:18 [ lines::$2 ]
Allocated zp ZP_BYTE:19 [ lines::$3 ]
Allocated zp ZP_BYTE:20 [ lines::$5 ]
Allocated zp ZP_BYTE:21 [ line::x0#0 ]
Allocated zp ZP_BYTE:22 [ line::x1#0 ]
Allocated zp ZP_BYTE:23 [ line::y0#0 ]
Allocated zp ZP_BYTE:24 [ line::y1#0 ]
Allocated zp ZP_BYTE:25 [ line::xd#1 ]
Allocated zp ZP_BYTE:26 [ line::yd#0 ]
Allocated zp ZP_BYTE:27 [ line_xdyi::x1#0 ]
Allocated zp ZP_BYTE:28 [ line_xdyi::xd#0 ]
Allocated zp ZP_BYTE:29 [ line_xdyi::yd#0 ]
Allocated zp ZP_BYTE:30 [ line::xd#0 ]
Allocated zp ZP_BYTE:31 [ plot::$0 ]
Allocated zp ZP_PTR_BYTE:32 [ plot::plotter_x#1 ]
Allocated zp ZP_BYTE:34 [ plot::$1 ]
Allocated zp ZP_PTR_BYTE:35 [ plot::plotter_x#2 ]
Allocated zp ZP_BYTE:37 [ plot::$2 ]
Allocated zp ZP_PTR_BYTE:38 [ plot::plotter_y#1 ]
Allocated zp ZP_BYTE:40 [ plot::$3 ]
Allocated zp ZP_PTR_BYTE:41 [ plot::plotter_y#2 ]
Allocated zp ZP_PTR_BYTE:43 [ plot::plotter#0 ]
Allocated zp ZP_BYTE:45 [ plot::$5 ]
Allocated zp ZP_BYTE:46 [ plot::$6 ]
Allocated zp ZP_BYTE:47 [ plot::$7 ]
Allocated zp ZP_BYTE:48 [ line_xdyi::$8 ]
Allocated zp ZP_BYTE:49 [ init_plot_tables::$0 ]
Allocated zp ZP_BYTE:50 [ init_plot_tables::$6 ]
Allocated zp ZP_BYTE:51 [ init_plot_tables::$7 ]
Allocated zp ZP_BYTE:52 [ init_plot_tables::$8 ]
Allocated zp ZP_BYTE:53 [ init_plot_tables::$9 ]
Allocated zp ZP_BYTE:54 [ init_plot_tables::$10 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
bbegin:
  jmp b7
//SEG2 @7
b7:
//SEG3 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
    jmp b3
  //SEG12 main::@3
  b3:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
  init_plot_tables_from_b3:
    jsr init_plot_tables
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
  lines_from_b1:
    jsr lines
    jmp b5
  //SEG18 main::@5
  b5:
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _0 = 17
    .label _2 = 18
    .label _3 = 19
    .label _5 = 20
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  b1_from_lines:
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
    jmp b1
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  b1_from_b3:
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
    jmp b1
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x,x
    sta _0
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y+1,x
    sta _5
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=zpby2 
    lda _0
    sta line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- zpby1=zpby2 
    lda _3
    sta line.y0
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=zpby2 
    lda _5
    sta line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
    jmp b3
  //SEG37 lines::@3
  b3:
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1_from_b3
    jmp breturn
  //SEG40 lines::@return
  breturn:
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 21
    .label x1 = 22
    .label y0 = 23
    .label y1 = 24
    .label xd = 30
    .label xd_1 = 25
    .label yd = 26
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
    jmp b9
  //SEG44 line::@9
  b9:
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd_1
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y0
    cmp y1
    bcs b2
    jmp b10
  //SEG47 line::@10
  b10:
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- zpby1=zpby2_minus_zpby3 
    lda y1
    sec
    sbc y0
    sta yd
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- zpby1_ge_zpby2_then_la1 
    lda yd
    cmp xd_1
    bcs b3
    jmp b11
  //SEG50 line::@11
  b11:
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=zpby2 
    lda y0
    sta line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ] -- zpby1=zpby2 
    lda xd_1
    sta line_xdyi.xd
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=zpby2 
    lda yd
    sta line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
    jmp breturn
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- zpby1=zpby2 
    lda x0
    sta plot.x
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ] -- zpby1=zpby2 
    lda y0
    sta plot.y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  plot_from_b3:
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
    jmp b19
  //SEG66 line::@19
  b19:
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- zpby1=zpby2 
    lda x1
    sta plot.x
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- zpby1=zpby2 
    lda y1
    sta plot.y
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  plot_from_b19:
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- zpby1=zpby2 
    lda x0
    sta plot.x
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ] -- zpby1=zpby2 
    lda y0
    sta plot.y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
    jmp b17
  //SEG80 line::@17
  b17:
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- zpby1=zpby2 
    lda x1
    sta plot.x
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- zpby1=zpby2 
    lda y1
    sta plot.y
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  plot_from_b17:
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda y0
    cmp y1
    bcs b7
    jmp b15
  //SEG90 line::@15
  b15:
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- zpby1=zpby2 
    lda x0
    sta plot.x
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ] -- zpby1=zpby2 
    lda y0
    sta plot.y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  plot_from_b15:
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
    jmp b24
  //SEG97 line::@24
  b24:
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- zpby1=zpby2 
    lda x1
    sta plot.x
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- zpby1=zpby2 
    lda y1
    sta plot.y
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  plot_from_b24:
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- zpby1=zpby2 
    lda x0
    sta plot.x
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ] -- zpby1=zpby2 
    lda y0
    sta plot.y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  plot_from_b7:
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
    jmp b22
  //SEG111 line::@22
  b22:
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- zpby1=zpby2 
    lda x1
    sta plot.x
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- zpby1=zpby2 
    lda y1
    sta plot.y
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  plot_from_b22:
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _0 = 31
    .label _1 = 34
    .label _2 = 37
    .label _3 = 40
    .label _5 = 45
    .label _6 = 46
    .label _7 = 47
    .label x = 3
    .label y = 4
    .label plotter_x = 32
    .label plotter_x_2 = 35
    .label plotter_y = 38
    .label plotter_y_2 = 41
    .label plotter = 43
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plot_xhi,x
    sta _0
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_zpby1 
    lda #<0
    sta plotter_x
    lda _0
    sta plotter_x+1
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plot_xlo,x
    sta _1
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby2_setlo_zpby1 
    lda _1
    sta plotter_x_2
    lda plotter_x+1
    sta plotter_x_2+1
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx y
    lda plot_yhi,x
    sta _2
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_zpby1 
    lda #<0
    sta plotter_y
    lda _2
    sta plotter_y+1
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx y
    lda plot_ylo,x
    sta _3
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby2_setlo_zpby1 
    lda _3
    sta plotter_y_2
    lda plotter_y+1
    sta plotter_y_2+1
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby2_plus_zpptrby3 
    lda plotter_x_2
    clc
    adc plotter_y_2
    sta plotter
    lda plotter_x_2+1
    adc plotter_y_2+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plot_bit,x
    sta _6
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- zpby1=zpby2_bor_zpby3 
    lda _5
    ora _6
    sta _7
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=zpby1 
    ldy #0
    lda _7
    sta (plotter),y
    jmp breturn
  //SEG132 plot::@return
  breturn:
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label _8 = 48
    .label x = 5
    .label y = 6
    .label x1 = 27
    .label xd = 28
    .label yd = 29
    .label e = 7
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  b1_from_line_xdyi:
  b1_from_b2:
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
    jmp b1
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- zpby1=zpby2 
    lda x
    sta plot.x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- zpby1=zpby2 
    lda y
    sta plot.y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  plot_from_b1:
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
    jmp b5
  //SEG147 line_xdyi::@5
  b5:
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
    jmp b3
  //SEG151 line_xdyi::@3
  b3:
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
    jmp b2
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- zpby1=zpby2_plus_1 
    lda x1
    clc
    adc #1
    sta _8
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_zpby2_then_la1 
    lda x
    cmp _8
    bcc b1_from_b2
    jmp breturn
  //SEG160 line_xdyi::@return
  breturn:
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _0 = 49
    .label _6 = 50
    .label _7 = 51
    .label _8 = 52
    .label _9 = 53
    .label _10 = 54
    .label bit = 9
    .label x = 8
    .label y = 10
    .label yoffs = 11
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- zpby1=coby1 
    lda #$80
    sta bit
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- zpby1=coby1 
    lda #0
    sta x
    jmp b1
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  b1_from_b2:
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
    jmp b1
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- zpby1=zpby2_band_coby1 
    lda x
    and #$f8
    sta _0
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_zpby1=zpby2 
    lda _0
    ldx x
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_zpby1=coby2 
    lda #>BITMAP
    ldx x
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_zpby1=zpby2 
    lda bit
    ldx x
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- zpby1=zpby1_ror_1 
    lsr
    sta bit
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- zpby1_neq_0_then_la1 
    lda bit
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- zpby1=coby1 
    lda #$80
    sta bit
    jmp b2
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- zpby1_neq_0_then_la1 
    lda x
    bne b1_from_b2
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    lda #0
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- zpby1=coby1 
    lda #0
    sta y
    jmp b3
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  b3_from_b4:
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
    jmp b3
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=zpby2_band_coby1 
    lda y
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- zpby1=_lo_zpptrby1 
    lda yoffs
    sta _7
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- zpby1=zpby2_bor_zpby3 
    lda _6
    ora _7
    sta _8
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _8
    ldx y
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- zpby1=_hi_zpptrby1 
    lda yoffs+1
    sta _9
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _9
    ldx y
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- zpby1=zpby2_band_coby1 
    lda y
    and #7
    sta _10
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- zpby1_neq_coby1_then_la1 
    lda _10
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG196 init_plot_tables::@7
  b7:
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
    jmp b4
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b3_from_b4
    jmp breturn
  //SEG203 init_plot_tables::@return
  breturn:
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  b2_from_b10:
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 13
    .label c = 15
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  b1_from_b1:
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
    jmp b1
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1_from_b1
    lda b
    cmp #<BITMAP+$2000
    bne b1_from_b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  b2_from_b2:
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
    jmp b2
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2_from_b2
    lda c
    cmp #<SCREEN+$400
    bne b2_from_b2
    jmp breturn
  //SEG225 init_screen::@return
  breturn:
  //SEG226 [125] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:46 [ plot::$6 ] has ALU potential.
Equivalence Class zp ZP_BYTE:51 [ init_plot_tables::$7 ] has ALU potential.
Statement [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] always clobbers reg byte a 
Statement [4] *((const byte*) D018#0) ← (byte) 24 [ ] always clobbers reg byte a 
Statement [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ line::y1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ]
Statement [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ line::xd#1 ]
Statement [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] always clobbers reg byte a 
Statement [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ line_xdyi::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:28 [ line_xdyi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ line_xdyi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ]
Statement [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] always clobbers reg byte a 
Statement [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] always clobbers reg byte a 
Statement [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:22 [ line::x1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:24 [ line::y1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:27 [ line_xdyi::x1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:28 [ line_xdyi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:29 [ line_xdyi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ]
Statement [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] always clobbers reg byte y 
Statement [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] always clobbers reg byte a 
Statement [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] always clobbers reg byte a 
Statement [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] always clobbers reg byte a 
Statement [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ init_plot_tables::x#2 init_plot_tables::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
Statement [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ init_plot_tables::y#2 init_plot_tables::y#1 ]
Statement [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] always clobbers reg byte a 
Statement [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] always clobbers reg byte a 
Statement [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] always clobbers reg byte a 
Statement [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] always clobbers reg byte a reg byte y 
Statement [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] always clobbers reg byte a 
Statement [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] always clobbers reg byte a reg byte y 
Statement [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] always clobbers reg byte a 
Statement [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] always clobbers reg byte a 
Statement [4] *((const byte*) D018#0) ← (byte) 24 [ ] always clobbers reg byte a 
Statement [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] always clobbers reg byte a 
Statement [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] always clobbers reg byte a 
Statement [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] always clobbers reg byte a 
Statement [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] always clobbers reg byte a 
Statement [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] always clobbers reg byte a 
Statement [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] always clobbers reg byte a 
Statement [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] always clobbers reg byte a reg byte y 
Statement [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] always clobbers reg byte y 
Statement [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] always clobbers reg byte a 
Statement [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] always clobbers reg byte a 
Statement [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] always clobbers reg byte a 
Statement [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] always clobbers reg byte a 
Statement [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] always clobbers reg byte a 
Statement [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] always clobbers reg byte a 
Statement [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] always clobbers reg byte a 
Statement [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] always clobbers reg byte a 
Statement [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] always clobbers reg byte a 
Statement [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] always clobbers reg byte a reg byte y 
Statement [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] always clobbers reg byte a 
Statement [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] always clobbers reg byte a reg byte y 
Statement [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ] : zp ZP_BYTE:7 , reg byte x , 
Potential registers zp ZP_BYTE:8 [ init_plot_tables::x#2 init_plot_tables::x#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ init_plot_tables::y#2 init_plot_tables::y#1 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] : zp ZP_PTR_BYTE:11 , 
Potential registers zp ZP_PTR_BYTE:13 [ init_screen::b#2 init_screen::b#1 ] : zp ZP_PTR_BYTE:13 , 
Potential registers zp ZP_PTR_BYTE:15 [ init_screen::c#2 init_screen::c#1 ] : zp ZP_PTR_BYTE:15 , 
Potential registers zp ZP_BYTE:17 [ lines::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ lines::$2 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ lines::$3 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ lines::$5 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ line::x0#0 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ line::x1#0 ] : zp ZP_BYTE:22 , reg byte x , 
Potential registers zp ZP_BYTE:23 [ line::y0#0 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ line::y1#0 ] : zp ZP_BYTE:24 , reg byte x , 
Potential registers zp ZP_BYTE:25 [ line::xd#1 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ line::yd#0 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ line_xdyi::x1#0 ] : zp ZP_BYTE:27 , reg byte x , 
Potential registers zp ZP_BYTE:28 [ line_xdyi::xd#0 ] : zp ZP_BYTE:28 , reg byte x , 
Potential registers zp ZP_BYTE:29 [ line_xdyi::yd#0 ] : zp ZP_BYTE:29 , reg byte x , 
Potential registers zp ZP_BYTE:30 [ line::xd#0 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ plot::$0 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:32 [ plot::plotter_x#1 ] : zp ZP_PTR_BYTE:32 , 
Potential registers zp ZP_BYTE:34 [ plot::$1 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:35 [ plot::plotter_x#2 ] : zp ZP_PTR_BYTE:35 , 
Potential registers zp ZP_BYTE:37 [ plot::$2 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:38 [ plot::plotter_y#1 ] : zp ZP_PTR_BYTE:38 , 
Potential registers zp ZP_BYTE:40 [ plot::$3 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:41 [ plot::plotter_y#2 ] : zp ZP_PTR_BYTE:41 , 
Potential registers zp ZP_PTR_BYTE:43 [ plot::plotter#0 ] : zp ZP_PTR_BYTE:43 , 
Potential registers zp ZP_BYTE:45 [ plot::$5 ] : zp ZP_BYTE:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ plot::$6 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:47 [ plot::$7 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ line_xdyi::$8 ] : zp ZP_BYTE:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ init_plot_tables::$0 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ init_plot_tables::$6 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ init_plot_tables::$7 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:52 [ init_plot_tables::$8 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ init_plot_tables::$9 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ init_plot_tables::$10 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [lines] 212.1: zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ] 50.5: zp ZP_BYTE:17 [ lines::$0 ] 50.5: zp ZP_BYTE:18 [ lines::$2 ] 50.5: zp ZP_BYTE:19 [ lines::$3 ] 50.5: zp ZP_BYTE:20 [ lines::$5 ] 
Uplift Scope [init_plot_tables] 46.93: zp ZP_BYTE:9 [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ] 39.11: zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] 24.75: zp ZP_BYTE:8 [ init_plot_tables::x#2 init_plot_tables::x#1 ] 22.5: zp ZP_BYTE:10 [ init_plot_tables::y#2 init_plot_tables::y#1 ] 22: zp ZP_BYTE:49 [ init_plot_tables::$0 ] 22: zp ZP_BYTE:51 [ init_plot_tables::$7 ] 22: zp ZP_BYTE:52 [ init_plot_tables::$8 ] 22: zp ZP_BYTE:53 [ init_plot_tables::$9 ] 22: zp ZP_BYTE:54 [ init_plot_tables::$10 ] 11: zp ZP_BYTE:50 [ init_plot_tables::$6 ] 
Uplift Scope [line_xdyi] 56.47: zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ] 29.37: zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ] 22: zp ZP_BYTE:48 [ line_xdyi::$8 ] 13.54: zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ] 1.6: zp ZP_BYTE:28 [ line_xdyi::xd#0 ] 1.07: zp ZP_BYTE:29 [ line_xdyi::yd#0 ] 0.81: zp ZP_BYTE:27 [ line_xdyi::x1#0 ] 
Uplift Scope [plot] 58.43: zp ZP_BYTE:4 [ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ] 30: zp ZP_BYTE:3 [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ] 4: zp ZP_BYTE:31 [ plot::$0 ] 4: zp ZP_BYTE:34 [ plot::$1 ] 4: zp ZP_BYTE:37 [ plot::$2 ] 4: zp ZP_BYTE:40 [ plot::$3 ] 4: zp ZP_PTR_BYTE:41 [ plot::plotter_y#2 ] 4: zp ZP_BYTE:46 [ plot::$6 ] 4: zp ZP_BYTE:47 [ plot::$7 ] 2: zp ZP_PTR_BYTE:32 [ plot::plotter_x#1 ] 2: zp ZP_PTR_BYTE:38 [ plot::plotter_y#1 ] 2: zp ZP_BYTE:45 [ plot::$5 ] 1.5: zp ZP_PTR_BYTE:43 [ plot::plotter#0 ] 0.8: zp ZP_PTR_BYTE:35 [ plot::plotter_x#2 ] 
Uplift Scope [init_screen] 33: zp ZP_PTR_BYTE:13 [ init_screen::b#2 init_screen::b#1 ] 33: zp ZP_PTR_BYTE:15 [ init_screen::c#2 init_screen::c#1 ] 
Uplift Scope [line] 20: zp ZP_BYTE:30 [ line::xd#0 ] 10.64: zp ZP_BYTE:21 [ line::x0#0 ] 8.36: zp ZP_BYTE:23 [ line::y0#0 ] 4.87: zp ZP_BYTE:22 [ line::x1#0 ] 4.79: zp ZP_BYTE:24 [ line::y1#0 ] 1: zp ZP_BYTE:26 [ line::yd#0 ] 0.86: zp ZP_BYTE:25 [ line::xd#1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [lines] best 14052 combination zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ] reg byte y [ lines::$0 ] zp ZP_BYTE:18 [ lines::$2 ] zp ZP_BYTE:19 [ lines::$3 ] reg byte x [ lines::$5 ] 
Uplift attempts [init_plot_tables] 10000/138240 (limiting to 10000)
Uplifting [init_plot_tables] best 13422 combination reg byte y [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ] zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] reg byte x [ init_plot_tables::x#2 init_plot_tables::x#1 ] reg byte x [ init_plot_tables::y#2 init_plot_tables::y#1 ] reg byte a [ init_plot_tables::$0 ] reg byte a [ init_plot_tables::$7 ] reg byte a [ init_plot_tables::$8 ] reg byte a [ init_plot_tables::$9 ] zp ZP_BYTE:54 [ init_plot_tables::$10 ] zp ZP_BYTE:50 [ init_plot_tables::$6 ] 
Limited combination testing to 10000 combinations of 138240 possible.
Uplifting [line_xdyi] best 13362 combination zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ] zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ] reg byte a [ line_xdyi::$8 ] zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ] zp ZP_BYTE:28 [ line_xdyi::xd#0 ] zp ZP_BYTE:29 [ line_xdyi::yd#0 ] zp ZP_BYTE:27 [ line_xdyi::x1#0 ] 
Uplift attempts [plot] 10000/122880 (limiting to 10000)
Uplifting [plot] best 13203 combination reg byte y [ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ] reg byte x [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ] reg byte a [ plot::$0 ] reg byte a [ plot::$1 ] reg byte a [ plot::$2 ] reg byte a [ plot::$3 ] zp ZP_PTR_BYTE:41 [ plot::plotter_y#2 ] reg byte a [ plot::$6 ] reg byte a [ plot::$7 ] zp ZP_PTR_BYTE:32 [ plot::plotter_x#1 ] zp ZP_PTR_BYTE:38 [ plot::plotter_y#1 ] zp ZP_BYTE:45 [ plot::$5 ] zp ZP_PTR_BYTE:43 [ plot::plotter#0 ] zp ZP_PTR_BYTE:35 [ plot::plotter_x#2 ] 
Limited combination testing to 10000 combinations of 122880 possible.
Uplifting [init_screen] best 13203 combination zp ZP_PTR_BYTE:13 [ init_screen::b#2 init_screen::b#1 ] zp ZP_PTR_BYTE:15 [ init_screen::c#2 init_screen::c#1 ] 
Uplifting [line] best 12875 combination reg byte a [ line::xd#0 ] zp ZP_BYTE:21 [ line::x0#0 ] reg byte y [ line::y0#0 ] zp ZP_BYTE:22 [ line::x1#0 ] zp ZP_BYTE:24 [ line::y1#0 ] reg byte x [ line::yd#0 ] zp ZP_BYTE:25 [ line::xd#1 ] 
Uplifting [main] best 12875 combination 
Uplifting [] best 12875 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ lines::l#2 lines::l#1 ]
Uplifting [lines] best 12875 combination zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ]
Uplifting [line_xdyi] best 12875 combination zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ lines::$2 ]
Uplifting [lines] best 12875 combination zp ZP_BYTE:18 [ lines::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ lines::$3 ]
Uplifting [lines] best 12875 combination zp ZP_BYTE:19 [ lines::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ]
Uplifting [line_xdyi] best 12875 combination zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ init_plot_tables::$10 ]
Uplifting [init_plot_tables] best 12815 combination reg byte a [ init_plot_tables::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ]
Uplifting [line_xdyi] best 12815 combination zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ init_plot_tables::$6 ]
Uplifting [init_plot_tables] best 12815 combination zp ZP_BYTE:50 [ init_plot_tables::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ line::x0#0 ]
Uplifting [line] best 12815 combination zp ZP_BYTE:21 [ line::x0#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ line::x1#0 ]
Uplifting [line] best 12815 combination zp ZP_BYTE:22 [ line::x1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ line::y1#0 ]
Uplifting [line] best 12815 combination zp ZP_BYTE:24 [ line::y1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ plot::$5 ]
Uplifting [plot] best 12815 combination zp ZP_BYTE:45 [ plot::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ line_xdyi::xd#0 ]
Uplifting [line_xdyi] best 12815 combination zp ZP_BYTE:28 [ line_xdyi::xd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ line_xdyi::yd#0 ]
Uplifting [line_xdyi] best 12815 combination zp ZP_BYTE:29 [ line_xdyi::yd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ line::xd#1 ]
Uplifting [line] best 12815 combination zp ZP_BYTE:25 [ line::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ line_xdyi::x1#0 ]
Uplifting [line_xdyi] best 12815 combination zp ZP_BYTE:27 [ line_xdyi::x1#0 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ lines::l#2 lines::l#1 ] ] with [ zp ZP_BYTE:50 [ init_plot_tables::$6 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 ] ] with [ zp ZP_BYTE:18 [ lines::$2 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 ] ] with [ zp ZP_BYTE:19 [ lines::$3 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 ] ] with [ zp ZP_BYTE:21 [ line::x0#0 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 ] ] with [ zp ZP_PTR_BYTE:13 [ init_screen::b#2 init_screen::b#1 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 ] ] with [ zp ZP_PTR_BYTE:15 [ init_screen::c#2 init_screen::c#1 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 ] ] with [ zp ZP_PTR_BYTE:32 [ plot::plotter_x#1 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 ] ] with [ zp ZP_PTR_BYTE:35 [ plot::plotter_x#2 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:11 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 plot::plotter_x#2 ] ] with [ zp ZP_PTR_BYTE:43 [ plot::plotter#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:25 [ line::xd#1 ] ] with [ zp ZP_BYTE:28 [ line_xdyi::xd#0 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:38 [ plot::plotter_y#1 ] ] with [ zp ZP_PTR_BYTE:41 [ plot::plotter_y#2 ] ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:3 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 lines::$2 ]
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:4 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 lines::$3 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:5 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 line::x0#0 ]
Allocated (was zp ZP_PTR_BYTE:11) zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 ]
Allocated (was zp ZP_BYTE:22) zp ZP_BYTE:8 [ line::x1#0 ]
Allocated (was zp ZP_BYTE:24) zp ZP_BYTE:9 [ line::y1#0 ]
Allocated (was zp ZP_BYTE:25) zp ZP_BYTE:10 [ line::xd#1 line_xdyi::xd#0 ]
Allocated (was zp ZP_BYTE:27) zp ZP_BYTE:11 [ line_xdyi::x1#0 ]
Allocated (was zp ZP_BYTE:29) zp ZP_BYTE:12 [ line_xdyi::yd#0 ]
Allocated (was zp ZP_PTR_BYTE:38) zp ZP_PTR_BYTE:13 [ plot::plotter_y#1 plot::plotter_y#2 ]
Allocated (was zp ZP_BYTE:45) zp ZP_BYTE:15 [ plot::$5 ]
Removing instruction jmp b7
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b19
Removing instruction jmp b17
Removing instruction jmp b15
Removing instruction jmp b24
Removing instruction jmp b22
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
bbegin:
//SEG2 @7
b7:
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
  //SEG12 main::@3
  b3:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
  init_plot_tables_from_b3:
    jsr init_plot_tables
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
  lines_from_b1:
    jsr lines
  //SEG18 main::@5
  b5:
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG20 main::@return
  breturn:
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _2 = 3
    .label _3 = 4
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  b1_from_lines:
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
    jmp b1
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  b1_from_b3:
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx l
    lda lines_x,x
    tay
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- xby=cowo1_staridx_zpby1 
    ldx l
    lda lines_y+1,x
    tax
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=yby 
    sty line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- yby=zpby1 
    ldy _3
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=xby 
    stx line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
  //SEG37 lines::@3
  b3:
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1_from_b3
  //SEG40 lines::@return
  breturn:
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 5
    .label x1 = 8
    .label y1 = 9
    .label xd = 10
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
  //SEG44 line::@9
  b9:
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b2
  //SEG47 line::@10
  b10:
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby=zpby1_minus_yby 
    sty $ff
    lda y1
    sec
    sbc $ff
    tax
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby_ge_zpby1_then_la1 
    cpx xd
    bcs b3
  //SEG50 line::@11
  b11:
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=yby 
    sty line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
    // (byte) line_xdyi::xd#0 = (byte) line::xd#1  // register copy zp ZP_BYTE:10
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=xby 
    stx line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- xby=zpby1 
    ldx x0
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
    // (byte) plot::y#2 = (byte) line::y0#0  // register copy reg byte y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  plot_from_b3:
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
  //SEG66 line::@19
  b19:
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- xby=zpby1 
    ldx x1
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- yby=zpby1 
    ldy y1
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  plot_from_b19:
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- xby=zpby1 
    ldx x0
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
    // (byte) plot::y#0 = (byte) line::y0#0  // register copy reg byte y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
  //SEG80 line::@17
  b17:
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- xby=zpby1 
    ldx x1
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- yby=zpby1 
    ldy y1
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  plot_from_b17:
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- aby=zpby1_minus_zpby2 
    lda x1
    sec
    sbc x0
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b7
  //SEG90 line::@15
  b15:
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- xby=zpby1 
    ldx x0
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
    // (byte) plot::y#6 = (byte) line::y0#0  // register copy reg byte y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  plot_from_b15:
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
  //SEG97 line::@24
  b24:
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- xby=zpby1 
    ldx x1
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- yby=zpby1 
    ldy y1
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  plot_from_b24:
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- xby=zpby1 
    ldx x0
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
    // (byte) plot::y#4 = (byte) line::y0#0  // register copy reg byte y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  plot_from_b7:
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
  //SEG111 line::@22
  b22:
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- xby=zpby1 
    ldx x1
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- yby=zpby1 
    ldy y1
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  plot_from_b22:
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _5 = 15
    .label plotter_x = 6
    .label plotter_y = 13
    .label plotter = 6
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- aby=cowo1_staridx_xby 
    lda plot_xhi,x
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda plot_xlo,x
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_xby 
    lda plot_bit,x
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    ldy #0
    sta (plotter),y
  //SEG132 plot::@return
  breturn:
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label x = 3
    .label y = 4
    .label x1 = 11
    .label xd = 10
    .label yd = 12
    .label e = 5
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  b1_from_line_xdyi:
  b1_from_b2:
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- xby=zpby1 
    ldx x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- yby=zpby1 
    ldy y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  plot_from_b1:
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
  //SEG147 line_xdyi::@5
  b5:
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
  //SEG151 line_xdyi::@3
  b3:
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- aby=zpby1_plus_1 
    lda x1
    clc
    adc #1
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_aby_then_la1 
    cmp x
    bcs b1_from_b2
  //SEG160 line_xdyi::@return
  breturn:
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 6
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  b1_from_b2:
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    lda #0
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  b3_from_b4:
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4_from_b3
  //SEG196 init_plot_tables::@7
  b7:
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
  //SEG203 init_plot_tables::@return
  breturn:
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  b2_from_b10:
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 6
    .label c = 6
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  b1_from_b1:
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1_from_b1
    lda b
    cmp #<BITMAP+$2000
    bne b1_from_b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  b2_from_b2:
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2_from_b2
    lda c
    cmp #<SCREEN+$400
    bne b2_from_b2
  //SEG225 init_screen::@return
  breturn:
  //SEG226 [125] return  [ ]
    rts
}

Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
bbegin:
//SEG2 @7
b7:
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
  //SEG12 main::@3
  b3:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
  init_plot_tables_from_b3:
    jsr init_plot_tables
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
  lines_from_b1:
    jsr lines
  //SEG18 main::@5
  b5:
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG20 main::@return
  breturn:
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _2 = 3
    .label _3 = 4
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  b1_from_lines:
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
    jmp b1
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  b1_from_b3:
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx l
    lda lines_x,x
    tay
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- xby=cowo1_staridx_zpby1 
    ldx l
    lda lines_y+1,x
    tax
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=yby 
    sty line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- yby=zpby1 
    ldy _3
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=xby 
    stx line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
  //SEG37 lines::@3
  b3:
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1_from_b3
  //SEG40 lines::@return
  breturn:
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 5
    .label x1 = 8
    .label y1 = 9
    .label xd = 10
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
  //SEG44 line::@9
  b9:
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b2
  //SEG47 line::@10
  b10:
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby=zpby1_minus_yby 
    sty $ff
    lda y1
    sec
    sbc $ff
    tax
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby_ge_zpby1_then_la1 
    cpx xd
    bcs b3
  //SEG50 line::@11
  b11:
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=yby 
    sty line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
    // (byte) line_xdyi::xd#0 = (byte) line::xd#1  // register copy zp ZP_BYTE:10
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=xby 
    stx line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- xby=zpby1 
    ldx x0
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
    // (byte) plot::y#2 = (byte) line::y0#0  // register copy reg byte y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  plot_from_b3:
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
  //SEG66 line::@19
  b19:
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- xby=zpby1 
    ldx x1
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- yby=zpby1 
    ldy y1
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  plot_from_b19:
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- xby=zpby1 
    ldx x0
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
    // (byte) plot::y#0 = (byte) line::y0#0  // register copy reg byte y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
  //SEG80 line::@17
  b17:
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- xby=zpby1 
    ldx x1
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- yby=zpby1 
    ldy y1
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  plot_from_b17:
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- aby=zpby1_minus_zpby2 
    lda x1
    sec
    sbc x0
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b7
  //SEG90 line::@15
  b15:
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- xby=zpby1 
    ldx x0
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
    // (byte) plot::y#6 = (byte) line::y0#0  // register copy reg byte y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  plot_from_b15:
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
  //SEG97 line::@24
  b24:
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- xby=zpby1 
    ldx x1
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- yby=zpby1 
    ldy y1
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  plot_from_b24:
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- xby=zpby1 
    ldx x0
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
    // (byte) plot::y#4 = (byte) line::y0#0  // register copy reg byte y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  plot_from_b7:
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
  //SEG111 line::@22
  b22:
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- xby=zpby1 
    ldx x1
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- yby=zpby1 
    ldy y1
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  plot_from_b22:
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _5 = 15
    .label plotter_x = 6
    .label plotter_y = 13
    .label plotter = 6
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- aby=cowo1_staridx_xby 
    lda plot_xhi,x
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda plot_xlo,x
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_xby 
    lda plot_bit,x
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG132 plot::@return
  breturn:
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label x = 3
    .label y = 4
    .label x1 = 11
    .label xd = 10
    .label yd = 12
    .label e = 5
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  b1_from_line_xdyi:
  b1_from_b2:
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- xby=zpby1 
    ldx x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- yby=zpby1 
    ldy y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  plot_from_b1:
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
  //SEG147 line_xdyi::@5
  b5:
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b5
  //SEG151 line_xdyi::@3
  b3:
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  b2_from_b3:
  b2_from_b5:
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- aby=zpby1_plus_1 
    lda x1
    clc
    adc #1
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_aby_then_la1 
    cmp x
    bcs b1_from_b2
  //SEG160 line_xdyi::@return
  breturn:
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 6
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  b1_from_b2:
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  b3_from_b4:
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4_from_b3
  //SEG196 init_plot_tables::@7
  b7:
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
  //SEG203 init_plot_tables::@return
  breturn:
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  b2_from_b10:
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 6
    .label c = 6
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  b1_from_b1:
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1_from_b1
    lda b
    cmp #<BITMAP+$2000
    bne b1_from_b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  b2_from_b2:
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2_from_b2
    lda c
    cmp #<SCREEN+$400
    bne b2_from_b2
  //SEG225 init_screen::@return
  breturn:
  //SEG226 [125] return  [ ]
    rts
}

Replacing label b1_from_b3 with b1
Replacing label b2_from_b5 with b2
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Removing instruction bbegin:
Removing instruction init_plot_tables_from_b3:
Removing instruction lines_from_b1:
Removing instruction b1_from_b3:
Removing instruction b1_from_line_xdyi:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b5:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction b2_from_b10:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
//SEG2 @7
b7:
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
  init_screen_from_main:
    jsr init_screen
  //SEG12 main::@3
  b3:
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
    jsr lines
  //SEG18 main::@5
  b5:
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG20 main::@return
  breturn:
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _2 = 3
    .label _3 = 4
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  b1_from_lines:
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
    jmp b1
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx l
    lda lines_x,x
    tay
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- xby=cowo1_staridx_zpby1 
    ldx l
    lda lines_y+1,x
    tax
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=yby 
    sty line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- yby=zpby1 
    ldy _3
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=xby 
    stx line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
  //SEG37 lines::@3
  b3:
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1
  //SEG40 lines::@return
  breturn:
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 5
    .label x1 = 8
    .label y1 = 9
    .label xd = 10
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
  //SEG44 line::@9
  b9:
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b2
  //SEG47 line::@10
  b10:
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby=zpby1_minus_yby 
    sty $ff
    lda y1
    sec
    sbc $ff
    tax
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby_ge_zpby1_then_la1 
    cpx xd
    bcs b3
  //SEG50 line::@11
  b11:
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=yby 
    sty line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
    // (byte) line_xdyi::xd#0 = (byte) line::xd#1  // register copy zp ZP_BYTE:10
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=xby 
    stx line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- xby=zpby1 
    ldx x0
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
    // (byte) plot::y#2 = (byte) line::y0#0  // register copy reg byte y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  plot_from_b3:
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
  //SEG66 line::@19
  b19:
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- xby=zpby1 
    ldx x1
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- yby=zpby1 
    ldy y1
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  plot_from_b19:
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- xby=zpby1 
    ldx x0
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
    // (byte) plot::y#0 = (byte) line::y0#0  // register copy reg byte y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
  //SEG80 line::@17
  b17:
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- xby=zpby1 
    ldx x1
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- yby=zpby1 
    ldy y1
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  plot_from_b17:
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- aby=zpby1_minus_zpby2 
    lda x1
    sec
    sbc x0
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b7
  //SEG90 line::@15
  b15:
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- xby=zpby1 
    ldx x0
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
    // (byte) plot::y#6 = (byte) line::y0#0  // register copy reg byte y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  plot_from_b15:
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
  //SEG97 line::@24
  b24:
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- xby=zpby1 
    ldx x1
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- yby=zpby1 
    ldy y1
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  plot_from_b24:
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- xby=zpby1 
    ldx x0
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
    // (byte) plot::y#4 = (byte) line::y0#0  // register copy reg byte y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  plot_from_b7:
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
  //SEG111 line::@22
  b22:
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- xby=zpby1 
    ldx x1
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- yby=zpby1 
    ldy y1
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  plot_from_b22:
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _5 = 15
    .label plotter_x = 6
    .label plotter_y = 13
    .label plotter = 6
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- aby=cowo1_staridx_xby 
    lda plot_xhi,x
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda plot_xlo,x
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_xby 
    lda plot_bit,x
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG132 plot::@return
  breturn:
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label x = 3
    .label y = 4
    .label x1 = 11
    .label xd = 10
    .label yd = 12
    .label e = 5
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- xby=zpby1 
    ldx x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- yby=zpby1 
    ldy y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  plot_from_b1:
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
  //SEG147 line_xdyi::@5
  b5:
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG151 line_xdyi::@3
  b3:
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- aby=zpby1_plus_1 
    lda x1
    clc
    adc #1
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_aby_then_la1 
    cmp x
    bcs b1
  //SEG160 line_xdyi::@return
  breturn:
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 6
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  b1_from_init_plot_tables:
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  b2_from_b1:
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  b3_from_b2:
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG196 init_plot_tables::@7
  b7:
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG203 init_plot_tables::@return
  breturn:
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 6
    .label c = 6
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  b1_from_init_screen:
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  b2_from_b1:
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG225 init_screen::@return
  breturn:
  //SEG226 [125] return  [ ]
    rts
}

Removing instruction b7:
Removing instruction bend:
Removing instruction init_screen_from_main:
Removing instruction b3:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_lines:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction plot_from_b3:
Removing instruction b19:
Removing instruction plot_from_b19:
Removing instruction plot_from_b2:
Removing instruction b17:
Removing instruction plot_from_b17:
Removing instruction b15:
Removing instruction plot_from_b15:
Removing instruction b24:
Removing instruction plot_from_b24:
Removing instruction plot_from_b7:
Removing instruction b22:
Removing instruction plot_from_b22:
Removing instruction breturn:
Removing instruction plot_from_b1:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_init_plot_tables:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_init_screen:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
//SEG2 @7
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
  //SEG12 main::@3
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
    jsr lines
  //SEG18 main::@5
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG20 main::@return
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _2 = 3
    .label _3 = 4
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
    jmp b1
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx l
    lda lines_x,x
    tay
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- xby=cowo1_staridx_zpby1 
    ldx l
    lda lines_y+1,x
    tax
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=yby 
    sty line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- yby=zpby1 
    ldy _3
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=xby 
    stx line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
  //SEG37 lines::@3
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1
  //SEG40 lines::@return
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 5
    .label x1 = 8
    .label y1 = 9
    .label xd = 10
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
  //SEG44 line::@9
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b2
  //SEG47 line::@10
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby=zpby1_minus_yby 
    sty $ff
    lda y1
    sec
    sbc $ff
    tax
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby_ge_zpby1_then_la1 
    cpx xd
    bcs b3
  //SEG50 line::@11
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=yby 
    sty line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
    // (byte) line_xdyi::xd#0 = (byte) line::xd#1  // register copy zp ZP_BYTE:10
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=xby 
    stx line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- xby=zpby1 
    ldx x0
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
    // (byte) plot::y#2 = (byte) line::y0#0  // register copy reg byte y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
  //SEG66 line::@19
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- xby=zpby1 
    ldx x1
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- yby=zpby1 
    ldy y1
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- xby=zpby1 
    ldx x0
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
    // (byte) plot::y#0 = (byte) line::y0#0  // register copy reg byte y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
  //SEG80 line::@17
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- xby=zpby1 
    ldx x1
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- yby=zpby1 
    ldy y1
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- aby=zpby1_minus_zpby2 
    lda x1
    sec
    sbc x0
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b7
  //SEG90 line::@15
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- xby=zpby1 
    ldx x0
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
    // (byte) plot::y#6 = (byte) line::y0#0  // register copy reg byte y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
  //SEG97 line::@24
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- xby=zpby1 
    ldx x1
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- yby=zpby1 
    ldy y1
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- xby=zpby1 
    ldx x0
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
    // (byte) plot::y#4 = (byte) line::y0#0  // register copy reg byte y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
  //SEG111 line::@22
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- xby=zpby1 
    ldx x1
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- yby=zpby1 
    ldy y1
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _5 = 15
    .label plotter_x = 6
    .label plotter_y = 13
    .label plotter = 6
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- aby=cowo1_staridx_xby 
    lda plot_xhi,x
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda plot_xlo,x
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_xby 
    lda plot_bit,x
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG132 plot::@return
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label x = 3
    .label y = 4
    .label x1 = 11
    .label xd = 10
    .label yd = 12
    .label e = 5
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- xby=zpby1 
    ldx x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- yby=zpby1 
    ldy y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
  //SEG147 line_xdyi::@5
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG151 line_xdyi::@3
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- aby=zpby1_plus_1 
    lda x1
    clc
    adc #1
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_aby_then_la1 
    cmp x
    bcs b1
  //SEG160 line_xdyi::@return
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 6
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG196 init_plot_tables::@7
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG203 init_plot_tables::@return
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 6
    .label c = 6
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
    jmp b1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
    jmp b2
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG225 init_screen::@return
  //SEG226 [125] return  [ ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
//SEG2 @7
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
  //SEG12 main::@3
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
    jsr lines
  //SEG18 main::@5
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG20 main::@return
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _2 = 3
    .label _3 = 4
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx l
    lda lines_x,x
    tay
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- xby=cowo1_staridx_zpby1 
    ldx l
    lda lines_y+1,x
    tax
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=yby 
    sty line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- yby=zpby1 
    ldy _3
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=xby 
    stx line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
  //SEG37 lines::@3
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1
  //SEG40 lines::@return
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 5
    .label x1 = 8
    .label y1 = 9
    .label xd = 10
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
  //SEG44 line::@9
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b2
  //SEG47 line::@10
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby=zpby1_minus_yby 
    sty $ff
    lda y1
    sec
    sbc $ff
    tax
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby_ge_zpby1_then_la1 
    cpx xd
    bcs b3
  //SEG50 line::@11
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=yby 
    sty line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
    // (byte) line_xdyi::xd#0 = (byte) line::xd#1  // register copy zp ZP_BYTE:10
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=xby 
    stx line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- xby=zpby1 
    ldx x0
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
    // (byte) plot::y#2 = (byte) line::y0#0  // register copy reg byte y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
  //SEG66 line::@19
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- xby=zpby1 
    ldx x1
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- yby=zpby1 
    ldy y1
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- xby=zpby1 
    ldx x0
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
    // (byte) plot::y#0 = (byte) line::y0#0  // register copy reg byte y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
  //SEG80 line::@17
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- xby=zpby1 
    ldx x1
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- yby=zpby1 
    ldy y1
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- aby=zpby1_minus_zpby2 
    lda x1
    sec
    sbc x0
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b7
  //SEG90 line::@15
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- xby=zpby1 
    ldx x0
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
    // (byte) plot::y#6 = (byte) line::y0#0  // register copy reg byte y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
  //SEG97 line::@24
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- xby=zpby1 
    ldx x1
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- yby=zpby1 
    ldy y1
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- xby=zpby1 
    ldx x0
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
    // (byte) plot::y#4 = (byte) line::y0#0  // register copy reg byte y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
  //SEG111 line::@22
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- xby=zpby1 
    ldx x1
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- yby=zpby1 
    ldy y1
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _5 = 15
    .label plotter_x = 6
    .label plotter_y = 13
    .label plotter = 6
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- aby=cowo1_staridx_xby 
    lda plot_xhi,x
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda plot_xlo,x
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_xby 
    lda plot_bit,x
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG132 plot::@return
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label x = 3
    .label y = 4
    .label x1 = 11
    .label xd = 10
    .label yd = 12
    .label e = 5
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- xby=zpby1 
    ldx x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- yby=zpby1 
    ldy y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
  //SEG147 line_xdyi::@5
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG151 line_xdyi::@3
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- aby=zpby1_plus_1 
    lda x1
    clc
    adc #1
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_aby_then_la1 
    cmp x
    bcs b1
  //SEG160 line_xdyi::@return
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 6
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG196 init_plot_tables::@7
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG203 init_plot_tables::@return
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 6
    .label c = 6
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG225 init_screen::@return
  //SEG226 [125] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @7
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (word) 53280
(byte*) BITMAP
(const byte*) BITMAP#0 BITMAP = (word) 8192
(byte) BMM
(const byte) BMM#0 BMM = (byte) 32
(byte*) COLS
(const byte*) COLS#0 COLS = (word) 55296
(byte) CSEL
(const byte) CSEL#0 CSEL = (byte) 8
(byte*) D011
(const byte*) D011#0 D011 = (word) 53265
(byte*) D016
(const byte*) D016#0 D016 = (word) 53270
(byte*) D018
(const byte*) D018#0 D018 = (word) 53272
(byte) DEN
(const byte) DEN#0 DEN = (byte) 16
(byte) ECM
(const byte) ECM#0 ECM = (byte) 64
(byte*) FGCOL
(const byte*) FGCOL#0 FGCOL = (word) 53281
(byte) MCM
(const byte) MCM#0 MCM = (byte) 16
(byte) RSEL
(const byte) RSEL#0 RSEL = (byte) 8
(byte) RST8
(const byte) RST8#0 RST8 = (byte) 128
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(byte*) SCROLL
(const byte*) SCROLL#0 SCROLL = (word) 53270
(void()) init_plot_tables()
(byte~) init_plot_tables::$0 reg byte a 22.0
(byte~) init_plot_tables::$10 reg byte a 22.0
(byte~) init_plot_tables::$6 $6 zp ZP_BYTE:2 11.0
(byte~) init_plot_tables::$7 reg byte a 22.0
(byte~) init_plot_tables::$8 reg byte a 22.0
(byte~) init_plot_tables::$9 reg byte a 22.0
(label) init_plot_tables::@1
(label) init_plot_tables::@10
(label) init_plot_tables::@2
(label) init_plot_tables::@3
(label) init_plot_tables::@4
(label) init_plot_tables::@7
(label) init_plot_tables::@return
(byte) init_plot_tables::bit
(byte) init_plot_tables::bit#1 reg byte y 33.0
(byte) init_plot_tables::bit#3 reg byte y 6.6000000000000005
(byte) init_plot_tables::bit#4 reg byte y 7.333333333333333
(byte) init_plot_tables::x
(byte) init_plot_tables::x#1 reg byte x 16.5
(byte) init_plot_tables::x#2 reg byte x 8.25
(byte) init_plot_tables::y
(byte) init_plot_tables::y#1 reg byte x 16.5
(byte) init_plot_tables::y#2 reg byte x 6.0
(byte*) init_plot_tables::yoffs
(byte*) init_plot_tables::yoffs#1 yoffs zp ZP_PTR_BYTE:6 22.0
(byte*) init_plot_tables::yoffs#2 yoffs zp ZP_PTR_BYTE:6 6.111111111111112
(byte*) init_plot_tables::yoffs#4 yoffs zp ZP_PTR_BYTE:6 11.0
(void()) init_screen()
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::b
(byte*) init_screen::b#1 b zp ZP_PTR_BYTE:6 16.5
(byte*) init_screen::b#2 b zp ZP_PTR_BYTE:6 16.5
(byte*) init_screen::c
(byte*) init_screen::c#1 c zp ZP_PTR_BYTE:6 16.5
(byte*) init_screen::c#2 c zp ZP_PTR_BYTE:6 16.5
(void()) line((byte) line::x0 , (byte) line::x1 , (byte) line::y0 , (byte) line::y1)
(label) line::@1
(label) line::@10
(label) line::@11
(label) line::@15
(label) line::@17
(label) line::@19
(label) line::@2
(label) line::@22
(label) line::@24
(label) line::@3
(label) line::@7
(label) line::@9
(label) line::@return
(byte) line::x0
(byte) line::x0#0 x0 zp ZP_BYTE:5 10.636363636363635
(byte) line::x1
(byte) line::x1#0 x1 zp ZP_BYTE:8 4.874999999999997
(byte) line::xd
(byte) line::xd#0 reg byte a 20.0
(byte) line::xd#1 xd zp ZP_BYTE:10 0.8571428571428571
(byte) line::y0
(byte) line::y0#0 reg byte y 8.357142857142858
(byte) line::y1
(byte) line::y1#0 y1 zp ZP_BYTE:9 4.791666666666664
(byte) line::yd
(byte) line::yd#0 reg byte x 1.0
(void()) line_xdyi((byte) line_xdyi::x , (byte) line_xdyi::y , (byte) line_xdyi::x1 , (byte) line_xdyi::xd , (byte) line_xdyi::yd)
(byte~) line_xdyi::$8 reg byte a 22.0
(label) line_xdyi::@1
(label) line_xdyi::@2
(label) line_xdyi::@3
(label) line_xdyi::@5
(label) line_xdyi::@return
(byte) line_xdyi::e
(byte) line_xdyi::e#0 e zp ZP_BYTE:5 4.0
(byte) line_xdyi::e#1 e zp ZP_BYTE:5 14.666666666666666
(byte) line_xdyi::e#2 e zp ZP_BYTE:5 22.0
(byte) line_xdyi::e#3 e zp ZP_BYTE:5 4.800000000000001
(byte) line_xdyi::e#6 e zp ZP_BYTE:5 11.0
(byte) line_xdyi::x
(byte) line_xdyi::x#0 x zp ZP_BYTE:3 0.6666666666666666
(byte) line_xdyi::x#1 x zp ZP_BYTE:3 4.125
(byte) line_xdyi::x#2 x zp ZP_BYTE:3 8.75
(byte) line_xdyi::x1
(byte) line_xdyi::x1#0 x1 zp ZP_BYTE:11 0.8125
(byte) line_xdyi::xd
(byte) line_xdyi::xd#0 xd zp ZP_BYTE:10 1.5999999999999999
(byte) line_xdyi::y
(byte) line_xdyi::y#0 y zp ZP_BYTE:4 0.8
(byte) line_xdyi::y#1 y zp ZP_BYTE:4 11.0
(byte) line_xdyi::y#2 y zp ZP_BYTE:4 6.571428571428571
(byte) line_xdyi::y#5 y zp ZP_BYTE:4 11.0
(byte) line_xdyi::yd
(byte) line_xdyi::yd#0 yd zp ZP_BYTE:12 1.0714285714285714
(void()) lines()
(byte~) lines::$0 reg byte y 50.5
(byte~) lines::$2 $2 zp ZP_BYTE:3 50.5
(byte~) lines::$3 $3 zp ZP_BYTE:4 50.5
(byte~) lines::$5 reg byte x 50.5
(label) lines::@1
(label) lines::@3
(label) lines::@return
(byte) lines::l
(byte) lines::l#1 l zp ZP_BYTE:2 151.5
(byte) lines::l#2 l zp ZP_BYTE:2 60.6
(byte) lines_cnt
(const byte) lines_cnt#0 lines_cnt = (byte) 8
(byte[]) lines_x
(const byte[]) lines_x#0 lines_x = { (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10, (byte) 40, (byte) 60 }
(byte[]) lines_y
(const byte[]) lines_y#0 lines_y = { (byte) 10, (byte) 40, (byte) 60, (byte) 80, (byte) 110, (byte) 80, (byte) 60, (byte) 40, (byte) 10 }
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@5
(label) main::@return
(void()) plot((byte) plot::x , (byte) plot::y)
(byte~) plot::$0 reg byte a 4.0
(byte~) plot::$1 reg byte a 4.0
(byte~) plot::$2 reg byte a 4.0
(byte~) plot::$3 reg byte a 4.0
(byte~) plot::$5 $5 zp ZP_BYTE:15 2.0
(byte~) plot::$6 reg byte a 4.0
(byte~) plot::$7 reg byte a 4.0
(label) plot::@return
(byte*) plot::plotter
(byte*) plot::plotter#0 plotter zp ZP_PTR_BYTE:6 1.5
(byte*) plot::plotter_x
(byte*) plot::plotter_x#1 plotter_x zp ZP_PTR_BYTE:6 2.0
(byte*) plot::plotter_x#2 plotter_x zp ZP_PTR_BYTE:6 0.8
(byte*) plot::plotter_y
(byte*) plot::plotter_y#1 plotter_y zp ZP_PTR_BYTE:13 2.0
(byte*) plot::plotter_y#2 plotter_y zp ZP_PTR_BYTE:13 4.0
(byte) plot::x
(byte) plot::x#0 reg byte x 2.0
(byte) plot::x#1 reg byte x 2.0
(byte) plot::x#2 reg byte x 2.0
(byte) plot::x#3 reg byte x 2.0
(byte) plot::x#4 reg byte x 2.0
(byte) plot::x#5 reg byte x 2.0
(byte) plot::x#6 reg byte x 2.0
(byte) plot::x#7 reg byte x 2.0
(byte) plot::x#8 reg byte x 11.0
(byte) plot::x#9 reg byte x 3.0
(byte) plot::y
(byte) plot::y#0 reg byte y 4.0
(byte) plot::y#1 reg byte y 4.0
(byte) plot::y#2 reg byte y 4.0
(byte) plot::y#3 reg byte y 4.0
(byte) plot::y#4 reg byte y 4.0
(byte) plot::y#5 reg byte y 4.0
(byte) plot::y#6 reg byte y 4.0
(byte) plot::y#7 reg byte y 4.0
(byte) plot::y#8 reg byte y 22.0
(byte) plot::y#9 reg byte y 4.428571428571428
(byte[]) plot_bit
(const byte[]) plot_bit#0 plot_bit = (word) 5120
(byte[]) plot_xhi
(const byte[]) plot_xhi#0 plot_xhi = (word) 4352
(byte[]) plot_xlo
(const byte[]) plot_xlo#0 plot_xlo = (word) 4096
(byte[]) plot_yhi
(const byte[]) plot_yhi#0 plot_yhi = (word) 4864
(byte[]) plot_ylo
(const byte[]) plot_ylo#0 plot_ylo = (word) 4608

zp ZP_BYTE:2 [ lines::l#2 lines::l#1 init_plot_tables::$6 ]
reg byte x [ plot::x#9 plot::x#6 plot::x#1 plot::x#3 plot::x#0 plot::x#5 plot::x#7 plot::x#2 plot::x#4 plot::x#8 ]
reg byte y [ plot::y#9 plot::y#6 plot::y#1 plot::y#3 plot::y#0 plot::y#5 plot::y#7 plot::y#2 plot::y#4 plot::y#8 ]
zp ZP_BYTE:3 [ line_xdyi::x#2 line_xdyi::x#0 line_xdyi::x#1 lines::$2 ]
zp ZP_BYTE:4 [ line_xdyi::y#2 line_xdyi::y#0 line_xdyi::y#5 line_xdyi::y#1 lines::$3 ]
zp ZP_BYTE:5 [ line_xdyi::e#3 line_xdyi::e#0 line_xdyi::e#6 line_xdyi::e#2 line_xdyi::e#1 line::x0#0 ]
reg byte x [ init_plot_tables::x#2 init_plot_tables::x#1 ]
reg byte y [ init_plot_tables::bit#3 init_plot_tables::bit#4 init_plot_tables::bit#1 ]
reg byte x [ init_plot_tables::y#2 init_plot_tables::y#1 ]
zp ZP_PTR_BYTE:6 [ init_plot_tables::yoffs#2 init_plot_tables::yoffs#4 init_plot_tables::yoffs#1 init_screen::b#2 init_screen::b#1 init_screen::c#2 init_screen::c#1 plot::plotter_x#1 plot::plotter_x#2 plot::plotter#0 ]
reg byte y [ lines::$0 ]
reg byte x [ lines::$5 ]
zp ZP_BYTE:8 [ line::x1#0 ]
reg byte y [ line::y0#0 ]
zp ZP_BYTE:9 [ line::y1#0 ]
zp ZP_BYTE:10 [ line::xd#1 line_xdyi::xd#0 ]
reg byte x [ line::yd#0 ]
zp ZP_BYTE:11 [ line_xdyi::x1#0 ]
zp ZP_BYTE:12 [ line_xdyi::yd#0 ]
reg byte a [ line::xd#0 ]
reg byte a [ plot::$0 ]
reg byte a [ plot::$1 ]
reg byte a [ plot::$2 ]
zp ZP_PTR_BYTE:13 [ plot::plotter_y#1 plot::plotter_y#2 ]
reg byte a [ plot::$3 ]
zp ZP_BYTE:15 [ plot::$5 ]
reg byte a [ plot::$6 ]
reg byte a [ plot::$7 ]
reg byte a [ line_xdyi::$8 ]
reg byte a [ init_plot_tables::$0 ]
reg byte a [ init_plot_tables::$7 ]
reg byte a [ init_plot_tables::$8 ]
reg byte a [ init_plot_tables::$9 ]
reg byte a [ init_plot_tables::$10 ]

FINAL CODE
//SEG0 Global Constants & labels
  .const COLS = $d800
  .const BGCOL = $d020
  .const FGCOL = $d021
  .const SCROLL = $d016
  .const D018 = $d018
  .const D011 = $d011
  .const RST8 = $80
  .const ECM = $40
  .const BMM = $20
  .const DEN = $10
  .const RSEL = 8
  .const D016 = $d016
  .const MCM = $10
  .const CSEL = 8
  .const SCREEN = $400
  .const BITMAP = $2000
  .const plot_xlo = $1000
  .const plot_xhi = $1100
  .const plot_ylo = $1200
  .const plot_yhi = $1300
  .const plot_bit = $1400
  .const lines_cnt = 8
  lines_x: .byte $3c, $50, $6e, $50, $3c, $28, $a, $28, $3c
  lines_y: .byte $a, $28, $3c, $50, $6e, $50, $3c, $28, $a
//SEG1 @begin
//SEG2 @7
//SEG3 [0] call main param-assignment [ ]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [1] *((const byte*) BGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta BGCOL
  //SEG7 [2] *((const byte*) FGCOL#0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    sta FGCOL
  //SEG8 [3] *((const byte*) D011#0) ← (const byte) BMM#0|(const byte) DEN#0|(const byte) RSEL#0|(byte) 3 [ ] -- _star_cowo1=coby2 
    lda #BMM|DEN|RSEL|3
    sta D011
  //SEG9 [4] *((const byte*) D018#0) ← (byte) 24 [ ] -- _star_cowo1=coby2 
    lda #$18
    sta D018
  //SEG10 [5] call init_screen param-assignment [ ]
  //SEG11 [116] phi from main to init_screen [phi:main->init_screen]
    jsr init_screen
  //SEG12 main::@3
  //SEG13 [6] call init_plot_tables param-assignment [ ]
  //SEG14 [91] phi from main::@3 to init_plot_tables [phi:main::@3->init_plot_tables]
    jsr init_plot_tables
  //SEG15 main::@1
  b1:
  //SEG16 [7] call lines param-assignment [ ]
  //SEG17 [10] phi from main::@1 to lines [phi:main::@1->lines]
    jsr lines
  //SEG18 main::@5
  //SEG19 [8] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG20 main::@return
  //SEG21 [9] return  [ ]
    rts
}
//SEG22 lines
lines: {
    .label _2 = 3
    .label _3 = 4
    .label l = 2
  //SEG23 [11] phi from lines to lines::@1 [phi:lines->lines::@1]
  //SEG24 [11] phi (byte) lines::l#2 = (byte) 0 [phi:lines->lines::@1#0] -- zpby1=coby1 
    lda #0
    sta l
  //SEG25 [11] phi from lines::@3 to lines::@1 [phi:lines::@3->lines::@1]
  //SEG26 [11] phi (byte) lines::l#2 = (byte) lines::l#1 [phi:lines::@3->lines::@1#0] -- register_copy 
  //SEG27 lines::@1
  b1:
  //SEG28 [12] (byte~) lines::$0 ← (const byte[]) lines_x#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 ] -- yby=cowo1_staridx_zpby1 
    ldx l
    lda lines_x,x
    tay
  //SEG29 [13] (byte~) lines::$2 ← (const byte[]) lines_x#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_x+1,x
    sta _2
  //SEG30 [14] (byte~) lines::$3 ← (const byte[]) lines_y#0 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 ] -- zpby1=cowo1_staridx_zpby2 
    ldx l
    lda lines_y,x
    sta _3
  //SEG31 [15] (byte~) lines::$5 ← (const byte[]) lines_y#0+(byte) 1 *idx (byte) lines::l#2 [ lines::l#2 lines::$0 lines::$2 lines::$3 lines::$5 ] -- xby=cowo1_staridx_zpby1 
    ldx l
    lda lines_y+1,x
    tax
  //SEG32 [16] (byte) line::x0#0 ← (byte~) lines::$0 [ lines::l#2 lines::$2 lines::$3 lines::$5 line::x0#0 ] -- zpby1=yby 
    sty line.x0
  //SEG33 [17] (byte) line::x1#0 ← (byte~) lines::$2 [ lines::l#2 lines::$3 lines::$5 line::x0#0 line::x1#0 ] -- zpby1=zpby2 
    lda _2
    sta line.x1
  //SEG34 [18] (byte) line::y0#0 ← (byte~) lines::$3 [ lines::l#2 lines::$5 line::x0#0 line::x1#0 line::y0#0 ] -- yby=zpby1 
    ldy _3
  //SEG35 [19] (byte) line::y1#0 ← (byte~) lines::$5 [ lines::l#2 line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1=xby 
    stx line.y1
  //SEG36 [20] call line param-assignment [ lines::l#2 ]
    jsr line
  //SEG37 lines::@3
  //SEG38 [21] (byte) lines::l#1 ← ++ (byte) lines::l#2 [ lines::l#1 ] -- zpby1=_inc_zpby1 
    inc l
  //SEG39 [22] if((byte) lines::l#1<(const byte) lines_cnt#0) goto lines::@1 [ lines::l#1 ] -- zpby1_lt_coby1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1
  //SEG40 lines::@return
  //SEG41 [23] return  [ ]
    rts
}
//SEG42 line
line: {
    .label x0 = 5
    .label x1 = 8
    .label y1 = 9
    .label xd = 10
  //SEG43 [24] if((byte) line::x0#0>=(byte) line::x1#0) goto line::@1 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- zpby1_ge_zpby2_then_la1 
    lda x0
    cmp x1
    bcs b1
  //SEG44 line::@9
  //SEG45 [25] (byte) line::xd#1 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG46 [26] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@2 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b2
  //SEG47 line::@10
  //SEG48 [27] (byte) line::yd#0 ← (byte) line::y1#0 - (byte) line::y0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby=zpby1_minus_yby 
    sty $ff
    lda y1
    sec
    sbc $ff
    tax
  //SEG49 [28] if((byte) line::yd#0>=(byte) line::xd#1) goto line::@3 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 line::xd#1 line::yd#0 ] -- xby_ge_zpby1_then_la1 
    cpx xd
    bcs b3
  //SEG50 line::@11
  //SEG51 [29] (byte) line_xdyi::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::xd#1 line::yd#0 line_xdyi::x#0 ] -- zpby1=zpby2 
    lda x0
    sta line_xdyi.x
  //SEG52 [30] (byte) line_xdyi::y#0 ← (byte) line::y0#0 [ line::x1#0 line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 ] -- zpby1=yby 
    sty line_xdyi.y
  //SEG53 [31] (byte) line_xdyi::x1#0 ← (byte) line::x1#0 [ line::xd#1 line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 ] -- zpby1=zpby2 
    lda x1
    sta line_xdyi.x1
  //SEG54 [32] (byte) line_xdyi::xd#0 ← (byte) line::xd#1 [ line::yd#0 line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 ]
    // (byte) line_xdyi::xd#0 = (byte) line::xd#1  // register copy zp ZP_BYTE:10
  //SEG55 [33] (byte) line_xdyi::yd#0 ← (byte) line::yd#0 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 ] -- zpby1=xby 
    stx line_xdyi.yd
  //SEG56 [34] call line_xdyi param-assignment [ ]
    jsr line_xdyi
  //SEG57 line::@return
  breturn:
  //SEG58 [35] return  [ ]
    rts
  //SEG59 line::@3
  b3:
  //SEG60 [36] (byte) plot::x#2 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#2 ] -- xby=zpby1 
    ldx x0
  //SEG61 [37] (byte) plot::y#2 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#2 plot::y#2 ]
    // (byte) plot::y#2 = (byte) line::y0#0  // register copy reg byte y
  //SEG62 [38] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG63 [62] phi from line::@3 to plot [phi:line::@3->plot]
  //SEG64 [62] phi (byte) plot::y#9 = (byte) plot::y#2 [phi:line::@3->plot#0] -- register_copy 
  //SEG65 [62] phi (byte) plot::x#9 = (byte) plot::x#2 [phi:line::@3->plot#1] -- register_copy 
    jsr plot
  //SEG66 line::@19
  //SEG67 [39] (byte) plot::x#3 ← (byte) line::x1#0 [ line::y1#0 plot::x#3 ] -- xby=zpby1 
    ldx x1
  //SEG68 [40] (byte) plot::y#3 ← (byte) line::y1#0 [ plot::x#3 plot::y#3 ] -- yby=zpby1 
    ldy y1
  //SEG69 [41] call plot param-assignment [ ]
  //SEG70 [62] phi from line::@19 to plot [phi:line::@19->plot]
  //SEG71 [62] phi (byte) plot::y#9 = (byte) plot::y#3 [phi:line::@19->plot#0] -- register_copy 
  //SEG72 [62] phi (byte) plot::x#9 = (byte) plot::x#3 [phi:line::@19->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG73 line::@2
  b2:
  //SEG74 [42] (byte) plot::x#0 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#0 ] -- xby=zpby1 
    ldx x0
  //SEG75 [43] (byte) plot::y#0 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#0 plot::y#0 ]
    // (byte) plot::y#0 = (byte) line::y0#0  // register copy reg byte y
  //SEG76 [44] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG77 [62] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG78 [62] phi (byte) plot::y#9 = (byte) plot::y#0 [phi:line::@2->plot#0] -- register_copy 
  //SEG79 [62] phi (byte) plot::x#9 = (byte) plot::x#0 [phi:line::@2->plot#1] -- register_copy 
    jsr plot
  //SEG80 line::@17
  //SEG81 [45] (byte) plot::x#1 ← (byte) line::x1#0 [ line::y1#0 plot::x#1 ] -- xby=zpby1 
    ldx x1
  //SEG82 [46] (byte) plot::y#1 ← (byte) line::y1#0 [ plot::x#1 plot::y#1 ] -- yby=zpby1 
    ldy y1
  //SEG83 [47] call plot param-assignment [ ]
  //SEG84 [62] phi from line::@17 to plot [phi:line::@17->plot]
  //SEG85 [62] phi (byte) plot::y#9 = (byte) plot::y#1 [phi:line::@17->plot#0] -- register_copy 
  //SEG86 [62] phi (byte) plot::x#9 = (byte) plot::x#1 [phi:line::@17->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG87 line::@1
  b1:
  //SEG88 [48] (byte) line::xd#0 ← (byte) line::x1#0 - (byte) line::x0#0 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- aby=zpby1_minus_zpby2 
    lda x1
    sec
    sbc x0
  //SEG89 [49] if((byte) line::y0#0>=(byte) line::y1#0) goto line::@7 [ line::x0#0 line::x1#0 line::y0#0 line::y1#0 ] -- yby_ge_zpby1_then_la1 
    cpy y1
    bcs b7
  //SEG90 line::@15
  //SEG91 [50] (byte) plot::x#6 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#6 ] -- xby=zpby1 
    ldx x0
  //SEG92 [51] (byte) plot::y#6 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#6 plot::y#6 ]
    // (byte) plot::y#6 = (byte) line::y0#0  // register copy reg byte y
  //SEG93 [52] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG94 [62] phi from line::@15 to plot [phi:line::@15->plot]
  //SEG95 [62] phi (byte) plot::y#9 = (byte) plot::y#6 [phi:line::@15->plot#0] -- register_copy 
  //SEG96 [62] phi (byte) plot::x#9 = (byte) plot::x#6 [phi:line::@15->plot#1] -- register_copy 
    jsr plot
  //SEG97 line::@24
  //SEG98 [53] (byte) plot::x#7 ← (byte) line::x1#0 [ line::y1#0 plot::x#7 ] -- xby=zpby1 
    ldx x1
  //SEG99 [54] (byte) plot::y#7 ← (byte) line::y1#0 [ plot::x#7 plot::y#7 ] -- yby=zpby1 
    ldy y1
  //SEG100 [55] call plot param-assignment [ ]
  //SEG101 [62] phi from line::@24 to plot [phi:line::@24->plot]
  //SEG102 [62] phi (byte) plot::y#9 = (byte) plot::y#7 [phi:line::@24->plot#0] -- register_copy 
  //SEG103 [62] phi (byte) plot::x#9 = (byte) plot::x#7 [phi:line::@24->plot#1] -- register_copy 
    jsr plot
    jmp breturn
  //SEG104 line::@7
  b7:
  //SEG105 [56] (byte) plot::x#4 ← (byte) line::x0#0 [ line::x1#0 line::y0#0 line::y1#0 plot::x#4 ] -- xby=zpby1 
    ldx x0
  //SEG106 [57] (byte) plot::y#4 ← (byte) line::y0#0 [ line::x1#0 line::y1#0 plot::x#4 plot::y#4 ]
    // (byte) plot::y#4 = (byte) line::y0#0  // register copy reg byte y
  //SEG107 [58] call plot param-assignment [ line::x1#0 line::y1#0 ]
  //SEG108 [62] phi from line::@7 to plot [phi:line::@7->plot]
  //SEG109 [62] phi (byte) plot::y#9 = (byte) plot::y#4 [phi:line::@7->plot#0] -- register_copy 
  //SEG110 [62] phi (byte) plot::x#9 = (byte) plot::x#4 [phi:line::@7->plot#1] -- register_copy 
    jsr plot
  //SEG111 line::@22
  //SEG112 [59] (byte) plot::x#5 ← (byte) line::x1#0 [ line::y1#0 plot::x#5 ] -- xby=zpby1 
    ldx x1
  //SEG113 [60] (byte) plot::y#5 ← (byte) line::y1#0 [ plot::x#5 plot::y#5 ] -- yby=zpby1 
    ldy y1
  //SEG114 [61] call plot param-assignment [ ]
  //SEG115 [62] phi from line::@22 to plot [phi:line::@22->plot]
  //SEG116 [62] phi (byte) plot::y#9 = (byte) plot::y#5 [phi:line::@22->plot#0] -- register_copy 
  //SEG117 [62] phi (byte) plot::x#9 = (byte) plot::x#5 [phi:line::@22->plot#1] -- register_copy 
    jsr plot
    jmp breturn
}
//SEG118 plot
plot: {
    .label _5 = 15
    .label plotter_x = 6
    .label plotter_y = 13
    .label plotter = 6
  //SEG119 [63] (byte~) plot::$0 ← (const byte[]) plot_xhi#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::$0 ] -- aby=cowo1_staridx_xby 
    lda plot_xhi,x
  //SEG120 [64] (byte*) plot::plotter_x#1 ← (byte) 0 hi= (byte~) plot::$0 [ plot::x#9 plot::y#9 plot::plotter_x#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_x+1
    lda #<0
    sta plotter_x
  //SEG121 [65] (byte~) plot::$1 ← (const byte[]) plot_xlo#0 *idx (byte) plot::x#9 [ plot::x#9 plot::y#9 plot::plotter_x#1 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda plot_xlo,x
  //SEG122 [66] (byte*) plot::plotter_x#2 ← (byte*) plot::plotter_x#1 lo= (byte~) plot::$1 [ plot::x#9 plot::y#9 plot::plotter_x#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_x
  //SEG123 [67] (byte~) plot::$2 ← (const byte[]) plot_yhi#0 *idx (byte) plot::y#9 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::$2 ] -- aby=cowo1_staridx_yby 
    lda plot_yhi,y
  //SEG124 [68] (byte*) plot::plotter_y#1 ← (byte) 0 hi= (byte~) plot::$2 [ plot::x#9 plot::y#9 plot::plotter_x#2 plot::plotter_y#1 ] -- zpptrby1=coby1_sethi_aby 
    sta plotter_y+1
    lda #<0
    sta plotter_y
  //SEG125 [69] (byte~) plot::$3 ← (const byte[]) plot_ylo#0 *idx (byte) plot::y#9 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#1 plot::$3 ] -- aby=cowo1_staridx_yby 
    lda plot_ylo,y
  //SEG126 [70] (byte*) plot::plotter_y#2 ← (byte*) plot::plotter_y#1 lo= (byte~) plot::$3 [ plot::x#9 plot::plotter_x#2 plot::plotter_y#2 ] -- zpptrby1=zpptrby1_setlo_aby 
    sta plotter_y
  //SEG127 [71] (byte*) plot::plotter#0 ← (byte*) plot::plotter_x#2 + (byte*) plot::plotter_y#2 [ plot::x#9 plot::plotter#0 ] -- zpptrby1=zpptrby1_plus_zpptrby2 
    lda plotter
    clc
    adc plotter_y
    sta plotter
    lda plotter+1
    adc plotter_y+1
    sta plotter+1
  //SEG128 [72] (byte~) plot::$5 ← * (byte*) plot::plotter#0 [ plot::x#9 plot::plotter#0 plot::$5 ] -- zpby1=_star_zpptrby1 
    ldy #0
    lda (plotter),y
    sta _5
  //SEG129 [73] (byte~) plot::$6 ← (const byte[]) plot_bit#0 *idx (byte) plot::x#9 [ plot::plotter#0 plot::$5 plot::$6 ] -- aby=cowo1_staridx_xby 
    lda plot_bit,x
  //SEG130 [74] (byte~) plot::$7 ← (byte~) plot::$5 | (byte~) plot::$6 [ plot::plotter#0 plot::$7 ] -- aby=zpby1_bor_aby 
    ora _5
  //SEG131 [75] *((byte*) plot::plotter#0) ← (byte~) plot::$7 [ ] -- _star_zpptrby1=aby 
    sta (plotter),y
  //SEG132 plot::@return
  //SEG133 [76] return  [ ]
    rts
}
//SEG134 line_xdyi
line_xdyi: {
    .label x = 3
    .label y = 4
    .label x1 = 11
    .label xd = 10
    .label yd = 12
    .label e = 5
  //SEG135 [77] (byte) line_xdyi::e#0 ← (byte) line_xdyi::yd#0 >> (byte) 1 [ line_xdyi::x#0 line_xdyi::y#0 line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::e#0 ] -- zpby1=zpby2_ror_1 
    lda yd
    lsr
    sta e
  //SEG136 [78] phi from line_xdyi line_xdyi::@2 to line_xdyi::@1 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1]
  //SEG137 [78] phi (byte) line_xdyi::e#3 = (byte) line_xdyi::e#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#0] -- register_copy 
  //SEG138 [78] phi (byte) line_xdyi::y#2 = (byte) line_xdyi::y#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#1] -- register_copy 
  //SEG139 [78] phi (byte) line_xdyi::x#2 = (byte) line_xdyi::x#0 [phi:line_xdyi/line_xdyi::@2->line_xdyi::@1#2] -- register_copy 
  //SEG140 line_xdyi::@1
  b1:
  //SEG141 [79] (byte) plot::x#8 ← (byte) line_xdyi::x#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- xby=zpby1 
    ldx x
  //SEG142 [80] (byte) plot::y#8 ← (byte) line_xdyi::y#2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 plot::x#8 plot::y#8 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ] -- yby=zpby1 
    ldy y
  //SEG143 [81] call plot param-assignment [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#2 line_xdyi::y#2 line_xdyi::e#3 ]
  //SEG144 [62] phi from line_xdyi::@1 to plot [phi:line_xdyi::@1->plot]
  //SEG145 [62] phi (byte) plot::y#9 = (byte) plot::y#8 [phi:line_xdyi::@1->plot#0] -- register_copy 
  //SEG146 [62] phi (byte) plot::x#9 = (byte) plot::x#8 [phi:line_xdyi::@1->plot#1] -- register_copy 
    jsr plot
  //SEG147 line_xdyi::@5
  //SEG148 [82] (byte) line_xdyi::x#1 ← (byte) line_xdyi::x#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::e#3 line_xdyi::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG149 [83] (byte) line_xdyi::e#1 ← (byte) line_xdyi::e#3 + (byte) line_xdyi::yd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1=zpby1_plus_zpby2 
    lda e
    clc
    adc yd
    sta e
  //SEG150 [84] if((byte) line_xdyi::xd#0>=(byte) line_xdyi::e#1) goto line_xdyi::@2 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::y#2 line_xdyi::x#1 line_xdyi::e#1 ] -- zpby1_ge_zpby2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG151 line_xdyi::@3
  //SEG152 [85] (byte) line_xdyi::y#1 ← (byte) line_xdyi::y#2 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::e#1 line_xdyi::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG153 [86] (byte) line_xdyi::e#2 ← (byte) line_xdyi::e#1 - (byte) line_xdyi::xd#0 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#1 line_xdyi::e#2 ] -- zpby1=zpby1_minus_zpby2 
    lda e
    sec
    sbc xd
    sta e
  //SEG154 [87] phi from line_xdyi::@3 line_xdyi::@5 to line_xdyi::@2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2]
  //SEG155 [87] phi (byte) line_xdyi::e#6 = (byte) line_xdyi::e#2 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#0] -- register_copy 
  //SEG156 [87] phi (byte) line_xdyi::y#5 = (byte) line_xdyi::y#1 [phi:line_xdyi::@3/line_xdyi::@5->line_xdyi::@2#1] -- register_copy 
  //SEG157 line_xdyi::@2
  b2:
  //SEG158 [88] (byte~) line_xdyi::$8 ← (byte) line_xdyi::x1#0 + (byte) 1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 line_xdyi::$8 ] -- aby=zpby1_plus_1 
    lda x1
    clc
    adc #1
  //SEG159 [89] if((byte) line_xdyi::x#1<(byte~) line_xdyi::$8) goto line_xdyi::@1 [ line_xdyi::x1#0 line_xdyi::xd#0 line_xdyi::yd#0 line_xdyi::x#1 line_xdyi::y#5 line_xdyi::e#6 ] -- zpby1_lt_aby_then_la1 
    cmp x
    bcs b1
  //SEG160 line_xdyi::@return
  //SEG161 [90] return  [ ]
    rts
}
//SEG162 init_plot_tables
init_plot_tables: {
    .label _6 = 2
    .label yoffs = 6
  //SEG163 [92] phi from init_plot_tables to init_plot_tables::@1 [phi:init_plot_tables->init_plot_tables::@1]
  //SEG164 [92] phi (byte) init_plot_tables::bit#3 = (byte) 128 [phi:init_plot_tables->init_plot_tables::@1#0] -- yby=coby1 
    ldy #$80
  //SEG165 [92] phi (byte) init_plot_tables::x#2 = (byte) 0 [phi:init_plot_tables->init_plot_tables::@1#1] -- xby=coby1 
    ldx #0
  //SEG166 [92] phi from init_plot_tables::@2 to init_plot_tables::@1 [phi:init_plot_tables::@2->init_plot_tables::@1]
  //SEG167 [92] phi (byte) init_plot_tables::bit#3 = (byte) init_plot_tables::bit#4 [phi:init_plot_tables::@2->init_plot_tables::@1#0] -- register_copy 
  //SEG168 [92] phi (byte) init_plot_tables::x#2 = (byte) init_plot_tables::x#1 [phi:init_plot_tables::@2->init_plot_tables::@1#1] -- register_copy 
  //SEG169 init_plot_tables::@1
  b1:
  //SEG170 [93] (byte~) init_plot_tables::$0 ← (byte) init_plot_tables::x#2 & (byte) 248 [ init_plot_tables::x#2 init_plot_tables::bit#3 init_plot_tables::$0 ] -- aby=xby_band_coby1 
    txa
    and #$f8
  //SEG171 [94] *((const byte[]) plot_xlo#0 + (byte) init_plot_tables::x#2) ← (byte~) init_plot_tables::$0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=aby 
    sta plot_xlo,x
  //SEG172 [95] *((const byte[]) plot_xhi#0 + (byte) init_plot_tables::x#2) ← >(const byte*) BITMAP#0 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=coby2 
    lda #>BITMAP
    sta plot_xhi,x
  //SEG173 [96] *((const byte[]) plot_bit#0 + (byte) init_plot_tables::x#2) ← (byte) init_plot_tables::bit#3 [ init_plot_tables::x#2 init_plot_tables::bit#3 ] -- cowo1_staridx_xby=yby 
    tya
    sta plot_bit,x
  //SEG174 [97] (byte) init_plot_tables::bit#1 ← (byte) init_plot_tables::bit#3 >> (byte) 1 [ init_plot_tables::x#2 init_plot_tables::bit#1 ] -- yby=yby_ror_1 
    tya
    lsr
    tay
  //SEG175 [98] if((byte) init_plot_tables::bit#1!=(byte) 0) goto init_plot_tables::@10 [ init_plot_tables::x#2 ] -- yby_neq_0_then_la1 
    cpy #0
    bne b10
  //SEG176 [99] phi from init_plot_tables::@1 to init_plot_tables::@2 [phi:init_plot_tables::@1->init_plot_tables::@2]
  //SEG177 [99] phi (byte) init_plot_tables::bit#4 = (byte) 128 [phi:init_plot_tables::@1->init_plot_tables::@2#0] -- yby=coby1 
    ldy #$80
  //SEG178 init_plot_tables::@2
  b2:
  //SEG179 [100] (byte) init_plot_tables::x#1 ← ++ (byte) init_plot_tables::x#2 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby=_inc_xby 
    inx
  //SEG180 [101] if((byte) init_plot_tables::x#1!=(byte) 0) goto init_plot_tables::@1 [ init_plot_tables::x#1 init_plot_tables::bit#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG181 [102] phi from init_plot_tables::@2 to init_plot_tables::@3 [phi:init_plot_tables::@2->init_plot_tables::@3]
  //SEG182 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#0] -- zpptrby1=coby1 
    lda #0
    sta yoffs
    sta yoffs+1
  //SEG183 [102] phi (byte) init_plot_tables::y#2 = (byte) 0 [phi:init_plot_tables::@2->init_plot_tables::@3#1] -- xby=coby1 
    ldx #0
  //SEG184 [102] phi from init_plot_tables::@4 to init_plot_tables::@3 [phi:init_plot_tables::@4->init_plot_tables::@3]
  //SEG185 [102] phi (byte*) init_plot_tables::yoffs#2 = (byte*) init_plot_tables::yoffs#4 [phi:init_plot_tables::@4->init_plot_tables::@3#0] -- register_copy 
  //SEG186 [102] phi (byte) init_plot_tables::y#2 = (byte) init_plot_tables::y#1 [phi:init_plot_tables::@4->init_plot_tables::@3#1] -- register_copy 
  //SEG187 init_plot_tables::@3
  b3:
  //SEG188 [103] (byte~) init_plot_tables::$6 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 ] -- zpby1=xby_band_coby1 
    txa
    and #7
    sta _6
  //SEG189 [104] (byte~) init_plot_tables::$7 ← < (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$6 init_plot_tables::$7 ] -- aby=_lo_zpptrby1 
    lda yoffs
  //SEG190 [105] (byte~) init_plot_tables::$8 ← (byte~) init_plot_tables::$6 | (byte~) init_plot_tables::$7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$8 ] -- aby=zpby1_bor_aby 
    ora _6
  //SEG191 [106] *((const byte[]) plot_ylo#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$8 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_ylo,x
  //SEG192 [107] (byte~) init_plot_tables::$9 ← > (byte*) init_plot_tables::yoffs#2 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$9 ] -- aby=_hi_zpptrby1 
    lda yoffs+1
  //SEG193 [108] *((const byte[]) plot_yhi#0 + (byte) init_plot_tables::y#2) ← (byte~) init_plot_tables::$9 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- cowo1_staridx_xby=aby 
    sta plot_yhi,x
  //SEG194 [109] (byte~) init_plot_tables::$10 ← (byte) init_plot_tables::y#2 & (byte) 7 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 init_plot_tables::$10 ] -- aby=xby_band_coby1 
    txa
    and #7
  //SEG195 [110] if((byte~) init_plot_tables::$10!=(byte) 7) goto init_plot_tables::@4 [ init_plot_tables::y#2 init_plot_tables::yoffs#2 ] -- aby_neq_coby1_then_la1 
    cmp #7
    bne b4
  //SEG196 init_plot_tables::@7
  //SEG197 [111] (byte*) init_plot_tables::yoffs#1 ← (byte*) init_plot_tables::yoffs#2 + (word) 320 [ init_plot_tables::y#2 init_plot_tables::yoffs#1 ] -- zpptrby1=zpptrby1_plus_cowo1 
    lda yoffs
    clc
    adc #<$140
    sta yoffs
    lda yoffs+1
    adc #>$140
    sta yoffs+1
  //SEG198 [112] phi from init_plot_tables::@3 init_plot_tables::@7 to init_plot_tables::@4 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4]
  //SEG199 [112] phi (byte*) init_plot_tables::yoffs#4 = (byte*) init_plot_tables::yoffs#2 [phi:init_plot_tables::@3/init_plot_tables::@7->init_plot_tables::@4#0] -- register_copy 
  //SEG200 init_plot_tables::@4
  b4:
  //SEG201 [113] (byte) init_plot_tables::y#1 ← ++ (byte) init_plot_tables::y#2 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby=_inc_xby 
    inx
  //SEG202 [114] if((byte) init_plot_tables::y#1!=(byte) 0) goto init_plot_tables::@3 [ init_plot_tables::y#1 init_plot_tables::yoffs#4 ] -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG203 init_plot_tables::@return
  //SEG204 [115] return  [ ]
    rts
  //SEG205 init_plot_tables::@10
  b10:
  //SEG206 [99] phi from init_plot_tables::@10 to init_plot_tables::@2 [phi:init_plot_tables::@10->init_plot_tables::@2]
  //SEG207 [99] phi (byte) init_plot_tables::bit#4 = (byte) init_plot_tables::bit#1 [phi:init_plot_tables::@10->init_plot_tables::@2#0] -- register_copy 
    jmp b2
}
//SEG208 init_screen
init_screen: {
    .label b = 6
    .label c = 6
  //SEG209 [117] phi from init_screen to init_screen::@1 [phi:init_screen->init_screen::@1]
  //SEG210 [117] phi (byte*) init_screen::b#2 = (const byte*) BITMAP#0 [phi:init_screen->init_screen::@1#0] -- zpptrby1=cowo1 
    lda #<BITMAP
    sta b
    lda #>BITMAP
    sta b+1
  //SEG211 [117] phi from init_screen::@1 to init_screen::@1 [phi:init_screen::@1->init_screen::@1]
  //SEG212 [117] phi (byte*) init_screen::b#2 = (byte*) init_screen::b#1 [phi:init_screen::@1->init_screen::@1#0] -- register_copy 
  //SEG213 init_screen::@1
  b1:
  //SEG214 [118] *((byte*) init_screen::b#2) ← (byte) 0 [ init_screen::b#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #0
    sta (b),y
  //SEG215 [119] (byte*) init_screen::b#1 ← ++ (byte*) init_screen::b#2 [ init_screen::b#1 ] -- zpptrby1=_inc_zpptrby1 
    inc b
    bne !+
    inc b+1
  !:
  //SEG216 [120] if((byte*) init_screen::b#1!=(const byte*) BITMAP#0+(word) 8192) goto init_screen::@1 [ init_screen::b#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda b+1
    cmp #>BITMAP+$2000
    bne b1
    lda b
    cmp #<BITMAP+$2000
    bne b1
  //SEG217 [121] phi from init_screen::@1 to init_screen::@2 [phi:init_screen::@1->init_screen::@2]
  //SEG218 [121] phi (byte*) init_screen::c#2 = (const byte*) SCREEN#0 [phi:init_screen::@1->init_screen::@2#0] -- zpptrby1=cowo1 
    lda #<SCREEN
    sta c
    lda #>SCREEN
    sta c+1
  //SEG219 [121] phi from init_screen::@2 to init_screen::@2 [phi:init_screen::@2->init_screen::@2]
  //SEG220 [121] phi (byte*) init_screen::c#2 = (byte*) init_screen::c#1 [phi:init_screen::@2->init_screen::@2#0] -- register_copy 
  //SEG221 init_screen::@2
  b2:
  //SEG222 [122] *((byte*) init_screen::c#2) ← (byte) 20 [ init_screen::c#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #$14
    sta (c),y
  //SEG223 [123] (byte*) init_screen::c#1 ← ++ (byte*) init_screen::c#2 [ init_screen::c#1 ] -- zpptrby1=_inc_zpptrby1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG224 [124] if((byte*) init_screen::c#1!=(const byte*) SCREEN#0+(word) 1024) goto init_screen::@2 [ init_screen::c#1 ] -- zpptrby1_neq_cowo1_then_la1 
    lda c+1
    cmp #>SCREEN+$400
    bne b2
    lda c
    cmp #<SCREEN+$400
    bne b2
  //SEG225 init_screen::@return
  //SEG226 [125] return  [ ]
    rts
}

