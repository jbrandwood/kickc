@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte*) msg#10 ← (byte*) 0
  [2] (byte) idx#0 ← (byte) 0
  to:@2
@2: scope:[]  from @1
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @2
  [5] phi()
main: scope:[main]  from @2
  [6] (byte*) msg#0 ← (const byte[]) msg1#0
  [7] call do10 
  to:main::@1
main::@1: scope:[main]  from main
  [8] (byte*) msg#1 ← (const byte[]) msg2#0
  [9] call do10 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return 
  to:@return
do10: scope:[do10]  from main main::@1
  [11] phi()
  to:do10::@1
do10::@1: scope:[do10]  from do10 do10::@1
  [12] (byte) do10::i#2 ← phi( do10/(byte) 0 do10::@1/(byte) do10::i#1 )
  [13] call hello 
  [14] (byte) do10::i#1 ← ++ (byte) do10::i#2
  [15] if((byte) do10::i#1!=(byte) $a) goto do10::@1
  to:do10::@return
do10::@return: scope:[do10]  from do10::@1
  [16] return 
  to:@return
hello: scope:[hello]  from do10::@1
  [17] (byte~) idx#7 ← (byte) idx#0
  to:hello::@1
hello::@1: scope:[hello]  from hello hello::@1
  [18] (byte) idx#3 ← phi( hello/(byte~) idx#7 hello::@1/(byte) idx#1 )
  [18] (byte) hello::i#2 ← phi( hello/(byte) 0 hello::@1/(byte) hello::i#1 )
  [19] *((const byte*) SCREEN#0 + (byte) idx#3) ← *((byte*) msg#10 + (byte) hello::i#2)
  [20] (byte) idx#1 ← ++ (byte) idx#3
  [21] (byte) hello::i#1 ← ++ (byte) hello::i#2
  [22] if(*((byte*) msg#10 + (byte) hello::i#1)!=(byte) '@') goto hello::@1
  to:hello::@return
hello::@return: scope:[hello]  from hello::@1
  [23] return 
  to:@return
