Adding pointer type conversion cast (byte*) PROCPORT_DDR in (byte*) PROCPORT_DDR ← (number) 0
Adding pointer type conversion cast (byte*) PROCPORT in (byte*) PROCPORT ← (number) 1
Adding pointer type conversion cast (byte*) CHARGEN in (byte*) CHARGEN ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_XPOS in (byte*) SPRITES_XPOS ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_YPOS in (byte*) SPRITES_YPOS ← (number) $d001
Adding pointer type conversion cast (byte*) SPRITES_XMSB in (byte*) SPRITES_XMSB ← (number) $d010
Adding pointer type conversion cast (byte*) RASTER in (byte*) RASTER ← (number) $d012
Adding pointer type conversion cast (byte*) SPRITES_ENABLE in (byte*) SPRITES_ENABLE ← (number) $d015
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_Y in (byte*) SPRITES_EXPAND_Y ← (number) $d017
Adding pointer type conversion cast (byte*) SPRITES_PRIORITY in (byte*) SPRITES_PRIORITY ← (number) $d01b
Adding pointer type conversion cast (byte*) SPRITES_MC in (byte*) SPRITES_MC ← (number) $d01c
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_X in (byte*) SPRITES_EXPAND_X ← (number) $d01d
Adding pointer type conversion cast (byte*) BORDERCOL in (byte*) BORDERCOL ← (number) $d020
Adding pointer type conversion cast (byte*) BGCOL in (byte*) BGCOL ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL1 in (byte*) BGCOL1 ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL2 in (byte*) BGCOL2 ← (number) $d022
Adding pointer type conversion cast (byte*) BGCOL3 in (byte*) BGCOL3 ← (number) $d023
Adding pointer type conversion cast (byte*) BGCOL4 in (byte*) BGCOL4 ← (number) $d024
Adding pointer type conversion cast (byte*) SPRITES_MC1 in (byte*) SPRITES_MC1 ← (number) $d025
Adding pointer type conversion cast (byte*) SPRITES_MC2 in (byte*) SPRITES_MC2 ← (number) $d026
Adding pointer type conversion cast (byte*) SPRITES_COLS in (byte*) SPRITES_COLS ← (number) $d027
Adding pointer type conversion cast (byte*) VIC_CONTROL in (byte*) VIC_CONTROL ← (number) $d011
Adding pointer type conversion cast (byte*) D011 in (byte*) D011 ← (number) $d011
Adding pointer type conversion cast (byte*) VIC_CONTROL2 in (byte*) VIC_CONTROL2 ← (number) $d016
Adding pointer type conversion cast (byte*) D016 in (byte*) D016 ← (number) $d016
Adding pointer type conversion cast (byte*) D018 in (byte*) D018 ← (number) $d018
Adding pointer type conversion cast (byte*) VIC_MEMORY in (byte*) VIC_MEMORY ← (number) $d018
Adding pointer type conversion cast (byte*) LIGHTPEN_X in (byte*) LIGHTPEN_X ← (number) $d013
Adding pointer type conversion cast (byte*) LIGHTPEN_Y in (byte*) LIGHTPEN_Y ← (number) $d014
Adding pointer type conversion cast (byte*) IRQ_STATUS in (byte*) IRQ_STATUS ← (number) $d019
Adding pointer type conversion cast (byte*) IRQ_ENABLE in (byte*) IRQ_ENABLE ← (number) $d01a
Adding pointer type conversion cast (byte*) COLS in (byte*) COLS ← (number) $d800
Adding pointer type conversion cast (byte*) CIA1_PORT_A in (byte*) CIA1_PORT_A ← (number) $dc00
Adding pointer type conversion cast (byte*) CIA1_PORT_B in (byte*) CIA1_PORT_B ← (number) $dc01
Adding pointer type conversion cast (byte*) CIA1_PORT_A_DDR in (byte*) CIA1_PORT_A_DDR ← (number) $dc02
Adding pointer type conversion cast (byte*) CIA1_PORT_B_DDR in (byte*) CIA1_PORT_B_DDR ← (number) $dc03
Adding pointer type conversion cast (byte*) CIA1_INTERRUPT in (byte*) CIA1_INTERRUPT ← (number) $dc0d
Adding pointer type conversion cast (byte*) CIA2_PORT_A in (byte*) CIA2_PORT_A ← (number) $dd00
Adding pointer type conversion cast (byte*) CIA2_PORT_B in (byte*) CIA2_PORT_B ← (number) $dd01
Adding pointer type conversion cast (byte*) CIA2_PORT_A_DDR in (byte*) CIA2_PORT_A_DDR ← (number) $dd02
Adding pointer type conversion cast (byte*) CIA2_PORT_B_DDR in (byte*) CIA2_PORT_B_DDR ← (number) $dd03
Adding pointer type conversion cast (byte*) CIA2_INTERRUPT in (byte*) CIA2_INTERRUPT ← (number) $dd0d
Adding pointer type conversion cast (void()**) KERNEL_IRQ in (void()**) KERNEL_IRQ ← (number) $314
Adding pointer type conversion cast (void()**) HARDWARE_IRQ in (void()**) HARDWARE_IRQ ← (number) $fffe
Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Adding pointer type conversion cast (word*) SID_VOICE3_FREQ in (word*) SID_VOICE3_FREQ ← (number) $d40e
Adding pointer type conversion cast (byte*) SID_VOICE3_FREQ_LOW in (byte*) SID_VOICE3_FREQ_LOW ← (number) $d40e
Adding pointer type conversion cast (byte*) SID_VOICE3_FREQ_HIGH in (byte*) SID_VOICE3_FREQ_HIGH ← (number) $d40f
Adding pointer type conversion cast (byte*) SID_VOICE3_CONTROL in (byte*) SID_VOICE3_CONTROL ← (number) $d412
Adding pointer type conversion cast (byte*) SID_VOICE3_OSC in (byte*) SID_VOICE3_OSC ← (number) $d41b
Adding pointer type conversion cast (byte*) SCREEN1 in (byte*) SCREEN1 ← (number) $2800
Adding pointer type conversion cast (byte*) CHARSET in (byte*) CHARSET ← (number) $2000
Adding pointer type conversion cast (byte*) SINTABLE in (byte*) SINTABLE ← (number) $1f00
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) main::$1 ← call toD018 (byte*) SCREEN1 (byte*) CHARSET 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @24
Culled Empty Block (label) sid_rnd::@1
Culled Empty Block (label) main::toD0181_@1
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) doplasma::@8
Culled Empty Block (label) @27
Culled Empty Block (label) makecharset::@10

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) BGCOL#0 ← ((byte*)) (number) $d021
  (byte*) D018#0 ← ((byte*)) (number) $d018
  (byte*) COLS#0 ← ((byte*)) (number) $d800
  (byte) BLACK#0 ← (number) 0
  (byte) BLUE#0 ← (number) 6
  to:@4
@4: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@23
print_char: scope:[print_char]  from makecharset::@8
  (byte*) print_char_cursor#11 ← phi( makecharset::@8/(byte*) print_char_cursor#20 )
  (byte) print_char::ch#1 ← phi( makecharset::@8/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#11) ← (byte) print_char::ch#1
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#11
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#12 ← phi( print_char/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#12
  return 
  to:@return
print_cls: scope:[print_cls]  from makecharset::@11
  (byte*) print_screen#1 ← phi( makecharset::@11/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#1 ← (byte*) print_screen#3
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#13 ← phi( print_cls::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#8 ← phi( print_cls::@2/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#13
  return 
  to:@return
@23: scope:[]  from @4
  (byte*) print_screen#12 ← phi( @4/(byte*) print_screen#0 )
  (byte*) print_char_cursor#37 ← phi( @4/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#32 ← phi( @4/(byte*) print_line_cursor#0 )
  (word*) SID_VOICE3_FREQ#0 ← ((word*)) (number) $d40e
  (byte*) SID_VOICE3_CONTROL#0 ← ((byte*)) (number) $d412
  (byte) SID_CONTROL_NOISE#0 ← (number) $80
  (byte*) SID_VOICE3_OSC#0 ← ((byte*)) (number) $d41b
  to:@25
sid_rnd_init: scope:[sid_rnd_init]  from makecharset
  *((word*) SID_VOICE3_FREQ#0) ← (number) $ffff
  *((byte*) SID_VOICE3_CONTROL#0) ← (byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  return 
  to:@return
sid_rnd: scope:[sid_rnd]  from makecharset::@3
  (byte) sid_rnd::return#0 ← *((byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  (byte) sid_rnd::return#3 ← phi( sid_rnd/(byte) sid_rnd::return#0 )
  (byte) sid_rnd::return#1 ← (byte) sid_rnd::return#3
  return 
  to:@return
@25: scope:[]  from @23
  (byte*) print_screen#11 ← phi( @23/(byte*) print_screen#12 )
  (byte*) print_char_cursor#35 ← phi( @23/(byte*) print_char_cursor#37 )
  (byte*) print_line_cursor#29 ← phi( @23/(byte*) print_line_cursor#32 )
  (byte*) SCREEN1#0 ← ((byte*)) (number) $2800
  (byte*) CHARSET#0 ← ((byte*)) (number) $2000
  (byte*) SINTABLE#0 ← ((byte*)) (number) $1f00
  kickasm(location (byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))
 }}
  to:@26
main: scope:[main]  from @28
  (byte) c2B#27 ← phi( @28/(byte) c2B#17 )
  (byte) c2A#27 ← phi( @28/(byte) c2A#17 )
  (byte) c1B#27 ← phi( @28/(byte) c1B#16 )
  (byte) c1A#27 ← phi( @28/(byte) c1A#16 )
  (byte*) print_screen#8 ← phi( @28/(byte*) print_screen#9 )
  (byte*) print_char_cursor#32 ← phi( @28/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#26 ← phi( @28/(byte*) print_line_cursor#18 )
  asm { sei  }
  *((byte*) BORDERCOL#0) ← (byte) BLUE#0
  *((byte*) BGCOL#0) ← (byte) BLUE#0
  (byte*~) main::$2 ← (byte*) COLS#0 + (number) $3e8
  (byte*) main::col#0 ← (byte*) COLS#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) c2B#26 ← phi( main/(byte) c2B#27 main::@1/(byte) c2B#26 )
  (byte) c2A#26 ← phi( main/(byte) c2A#27 main::@1/(byte) c2A#26 )
  (byte) c1B#26 ← phi( main/(byte) c1B#27 main::@1/(byte) c1B#26 )
  (byte) c1A#26 ← phi( main/(byte) c1A#27 main::@1/(byte) c1A#26 )
  (byte*) print_screen#7 ← phi( main/(byte*) print_screen#8 main::@1/(byte*) print_screen#7 )
  (byte*) print_char_cursor#26 ← phi( main/(byte*) print_char_cursor#32 main::@1/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#19 ← phi( main/(byte*) print_line_cursor#26 main::@1/(byte*) print_line_cursor#19 )
  (byte*) main::col#2 ← phi( main/(byte*) main::col#0 main::@1/(byte*) main::col#1 )
  *((byte*) main::col#2) ← (byte) BLACK#0
  (byte*) main::col#1 ← (byte*) main::col#2 + rangenext(COLS#0,main::$2)
  (bool~) main::$3 ← (byte*) main::col#1 != rangelast(COLS#0,main::$2)
  if((bool~) main::$3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) c2B#25 ← phi( main::@1/(byte) c2B#26 )
  (byte) c2A#25 ← phi( main::@1/(byte) c2A#26 )
  (byte) c1B#25 ← phi( main::@1/(byte) c1B#26 )
  (byte) c1A#25 ← phi( main::@1/(byte) c1A#26 )
  (byte*) print_screen#6 ← phi( main::@1/(byte*) print_screen#7 )
  (byte*) print_char_cursor#21 ← phi( main::@1/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#14 ← phi( main::@1/(byte*) print_line_cursor#19 )
  (byte*) makecharset::charset#0 ← (byte*) CHARSET#0
  call makecharset 
  to:main::@10
main::@10: scope:[main]  from main::@2
  (byte) c2B#24 ← phi( main::@2/(byte) c2B#25 )
  (byte) c2A#24 ← phi( main::@2/(byte) c2A#25 )
  (byte) c1B#23 ← phi( main::@2/(byte) c1B#25 )
  (byte) c1A#23 ← phi( main::@2/(byte) c1A#25 )
  (byte*) print_char_cursor#14 ← phi( main::@2/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#9 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#14
  (byte*) main::toD0181_screen#0 ← (byte*) SCREEN1#0
  (byte*) main::toD0181_gfx#0 ← (byte*) CHARSET#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::@10
  (byte) c2B#23 ← phi( main::@10/(byte) c2B#24 )
  (byte) c2A#23 ← phi( main::@10/(byte) c2A#24 )
  (byte) c1B#21 ← phi( main::@10/(byte) c1B#23 )
  (byte) c1A#21 ← phi( main::@10/(byte) c1A#23 )
  (byte*) print_char_cursor#38 ← phi( main::@10/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#33 ← phi( main::@10/(byte*) print_line_cursor#3 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@10/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@10/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$0#0 ← ((word)) (byte*) main::toD0181_screen#1
  (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (number) $3fff
  (number~) main::toD0181_$2#0 ← (number~) main::toD0181_$1#0 * (number) 4
  (number~) main::toD0181_$3#0 ← > (number~) main::toD0181_$2#0
  (word~) main::toD0181_$4#0 ← ((word)) (byte*) main::toD0181_gfx#1
  (byte~) main::toD0181_$5#0 ← > (word~) main::toD0181_$4#0
  (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (number) 4
  (number~) main::toD0181_$7#0 ← (number~) main::toD0181_$6#0 & (number) $f
  (number~) main::toD0181_$8#0 ← (number~) main::toD0181_$3#0 | (number~) main::toD0181_$7#0
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$8#0
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte) c2B#21 ← phi( main::toD0181/(byte) c2B#23 )
  (byte) c2A#21 ← phi( main::toD0181/(byte) c2A#23 )
  (byte) c1B#19 ← phi( main::toD0181/(byte) c1B#21 )
  (byte) c1A#19 ← phi( main::toD0181/(byte) c1A#21 )
  (byte*) print_char_cursor#33 ← phi( main::toD0181/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#27 ← phi( main::toD0181/(byte*) print_line_cursor#33 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@9
main::@9: scope:[main]  from main::toD0181_@return
  (byte) c2B#18 ← phi( main::toD0181_@return/(byte) c2B#21 )
  (byte) c2A#18 ← phi( main::toD0181_@return/(byte) c2A#21 )
  (byte) c1B#17 ← phi( main::toD0181_@return/(byte) c1B#19 )
  (byte) c1A#17 ← phi( main::toD0181_@return/(byte) c1A#19 )
  (byte*) print_char_cursor#28 ← phi( main::toD0181_@return/(byte*) print_char_cursor#33 )
  (byte*) print_line_cursor#21 ← phi( main::toD0181_@return/(byte*) print_line_cursor#27 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$1 ← (byte) main::toD0181_return#3
  *((byte*) D018#0) ← (byte~) main::$1
  to:main::@3
main::@3: scope:[main]  from main::@11 main::@9
  (byte) c2B#13 ← phi( main::@11/(byte) c2B#0 main::@9/(byte) c2B#18 )
  (byte) c2A#13 ← phi( main::@11/(byte) c2A#0 main::@9/(byte) c2A#18 )
  (byte) c1B#13 ← phi( main::@11/(byte) c1B#0 main::@9/(byte) c1B#17 )
  (byte) c1A#13 ← phi( main::@11/(byte) c1A#0 main::@9/(byte) c1A#17 )
  (byte*) print_char_cursor#22 ← phi( main::@11/(byte*) print_char_cursor#27 main::@9/(byte*) print_char_cursor#28 )
  (byte*) print_line_cursor#15 ← phi( main::@11/(byte*) print_line_cursor#20 main::@9/(byte*) print_line_cursor#21 )
  if(true) goto main::@4
  to:main::@return
main::@4: scope:[main]  from main::@3
  (byte*) print_char_cursor#34 ← phi( main::@3/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#28 ← phi( main::@3/(byte*) print_line_cursor#15 )
  (byte) c2B#12 ← phi( main::@3/(byte) c2B#13 )
  (byte) c2A#12 ← phi( main::@3/(byte) c2A#13 )
  (byte) c1B#12 ← phi( main::@3/(byte) c1B#13 )
  (byte) c1A#12 ← phi( main::@3/(byte) c1A#13 )
  (byte*) doplasma::screen#0 ← (byte*) SCREEN1#0
  call doplasma 
  to:main::@11
main::@11: scope:[main]  from main::@4
  (byte*) print_char_cursor#27 ← phi( main::@4/(byte*) print_char_cursor#34 )
  (byte*) print_line_cursor#20 ← phi( main::@4/(byte*) print_line_cursor#28 )
  (byte) c2B#6 ← phi( main::@4/(byte) c2B#4 )
  (byte) c2A#6 ← phi( main::@4/(byte) c2A#4 )
  (byte) c1B#6 ← phi( main::@4/(byte) c1B#4 )
  (byte) c1A#6 ← phi( main::@4/(byte) c1A#4 )
  (byte) c1A#0 ← (byte) c1A#6
  (byte) c1B#0 ← (byte) c1B#6
  (byte) c2A#0 ← (byte) c2A#6
  (byte) c2B#0 ← (byte) c2B#6
  to:main::@3
main::@return: scope:[main]  from main::@3
  (byte) c2B#7 ← phi( main::@3/(byte) c2B#13 )
  (byte) c2A#7 ← phi( main::@3/(byte) c2A#13 )
  (byte) c1B#7 ← phi( main::@3/(byte) c1B#13 )
  (byte) c1A#7 ← phi( main::@3/(byte) c1A#13 )
  (byte*) print_char_cursor#15 ← phi( main::@3/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#10 ← phi( main::@3/(byte*) print_line_cursor#15 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#10
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#15
  (byte) c1A#1 ← (byte) c1A#7
  (byte) c1B#1 ← (byte) c1B#7
  (byte) c2A#1 ← (byte) c2A#7
  (byte) c2B#1 ← (byte) c2B#7
  return 
  to:@return
@26: scope:[]  from @25
  (byte*) print_screen#10 ← phi( @25/(byte*) print_screen#11 )
  (byte*) print_char_cursor#31 ← phi( @25/(byte*) print_char_cursor#35 )
  (byte*) print_line_cursor#25 ← phi( @25/(byte*) print_line_cursor#29 )
  (byte) c1A#2 ← (number) 0
  (byte) c1B#2 ← (number) 0
  (byte) c2A#2 ← (number) 0
  (byte) c2B#2 ← (number) 0
  to:@28
doplasma: scope:[doplasma]  from main::@4
  (byte*) doplasma::screen#8 ← phi( main::@4/(byte*) doplasma::screen#0 )
  (byte) c2B#19 ← phi( main::@4/(byte) c2B#12 )
  (byte) c2A#19 ← phi( main::@4/(byte) c2A#12 )
  (byte) c1B#8 ← phi( main::@4/(byte) c1B#12 )
  (byte) c1A#8 ← phi( main::@4/(byte) c1A#12 )
  (byte[$28]) doplasma::xbuf#0 ← { fill( $28, 0) }
  (byte[$19]) doplasma::ybuf#0 ← { fill( $19, 0) }
  (byte) doplasma::c1a#0 ← (byte) c1A#8
  (byte) doplasma::c1b#0 ← (byte) c1B#8
  (byte) doplasma::yprev#0 ← (number) 0
  (byte) doplasma::i#0 ← (number) 0
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@1
  (byte*) doplasma::screen#7 ← phi( doplasma/(byte*) doplasma::screen#8 doplasma::@1/(byte*) doplasma::screen#7 )
  (byte) c2B#14 ← phi( doplasma/(byte) c2B#19 doplasma::@1/(byte) c2B#14 )
  (byte) c2A#14 ← phi( doplasma/(byte) c2A#19 doplasma::@1/(byte) c2A#14 )
  (byte) c1B#14 ← phi( doplasma/(byte) c1B#8 doplasma::@1/(byte) c1B#14 )
  (byte) c1A#14 ← phi( doplasma/(byte) c1A#8 doplasma::@1/(byte) c1A#14 )
  (byte) doplasma::i#2 ← phi( doplasma/(byte) doplasma::i#0 doplasma::@1/(byte) doplasma::i#1 )
  (byte) doplasma::yprev#2 ← phi( doplasma/(byte) doplasma::yprev#0 doplasma::@1/(byte) doplasma::yprev#1 )
  (byte) doplasma::c1b#2 ← phi( doplasma/(byte) doplasma::c1b#0 doplasma::@1/(byte) doplasma::c1b#1 )
  (byte) doplasma::c1a#2 ← phi( doplasma/(byte) doplasma::c1a#0 doplasma::@1/(byte) doplasma::c1a#1 )
  (byte~) doplasma::$0 ← *((byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((byte*) SINTABLE#0 + (byte) doplasma::c1b#2)
  (byte) doplasma::yval#0 ← (byte~) doplasma::$0
  (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2
  *((byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$1
  (byte) doplasma::yprev#1 ← (byte) doplasma::yval#0
  (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (number) 4
  (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (number) 9
  (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2
  (bool~) doplasma::$2 ← (byte) doplasma::i#1 < (number) $19
  if((bool~) doplasma::$2) goto doplasma::@1
  to:doplasma::@2
doplasma::@2: scope:[doplasma]  from doplasma::@1
  (byte*) doplasma::screen#6 ← phi( doplasma::@1/(byte*) doplasma::screen#7 )
  (byte) c2B#8 ← phi( doplasma::@1/(byte) c2B#14 )
  (byte) c2A#8 ← phi( doplasma::@1/(byte) c2A#14 )
  (byte) c1B#9 ← phi( doplasma::@1/(byte) c1B#14 )
  (byte) c1A#9 ← phi( doplasma::@1/(byte) c1A#14 )
  (byte) c1A#3 ← (byte) c1A#9 + (number) 3
  (byte) c1B#3 ← (byte) c1B#9 - (number) 5
  (byte) doplasma::c2a#0 ← (byte) c2A#8
  (byte) doplasma::c2b#0 ← (byte) c2B#8
  (byte) doplasma::i1#0 ← (number) 0
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@2 doplasma::@3
  (byte) c1B#24 ← phi( doplasma::@2/(byte) c1B#3 doplasma::@3/(byte) c1B#24 )
  (byte) c1A#24 ← phi( doplasma::@2/(byte) c1A#3 doplasma::@3/(byte) c1A#24 )
  (byte*) doplasma::screen#5 ← phi( doplasma::@2/(byte*) doplasma::screen#6 doplasma::@3/(byte*) doplasma::screen#5 )
  (byte) c2B#15 ← phi( doplasma::@2/(byte) c2B#8 doplasma::@3/(byte) c2B#15 )
  (byte) c2A#15 ← phi( doplasma::@2/(byte) c2A#8 doplasma::@3/(byte) c2A#15 )
  (byte) doplasma::i1#2 ← phi( doplasma::@2/(byte) doplasma::i1#0 doplasma::@3/(byte) doplasma::i1#1 )
  (byte) doplasma::c2b#2 ← phi( doplasma::@2/(byte) doplasma::c2b#0 doplasma::@3/(byte) doplasma::c2b#1 )
  (byte) doplasma::c2a#2 ← phi( doplasma::@2/(byte) doplasma::c2a#0 doplasma::@3/(byte) doplasma::c2a#1 )
  (byte~) doplasma::$3 ← *((byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((byte*) SINTABLE#0 + (byte) doplasma::c2b#2)
  *((byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$3
  (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (number) 3
  (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (number) 7
  (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2
  (bool~) doplasma::$4 ← (byte) doplasma::i1#1 < (number) $28
  if((bool~) doplasma::$4) goto doplasma::@3
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3
  (byte) c1B#22 ← phi( doplasma::@3/(byte) c1B#24 )
  (byte) c1A#22 ← phi( doplasma::@3/(byte) c1A#24 )
  (byte*) doplasma::screen#3 ← phi( doplasma::@3/(byte*) doplasma::screen#5 )
  (byte) c2B#9 ← phi( doplasma::@3/(byte) c2B#15 )
  (byte) c2A#9 ← phi( doplasma::@3/(byte) c2A#15 )
  (byte) c2A#3 ← (byte) c2A#9 + (number) 2
  (byte) c2B#3 ← (byte) c2B#9 - (number) 3
  (byte) doplasma::i2#0 ← (number) 0
  to:doplasma::@5
doplasma::@5: scope:[doplasma]  from doplasma::@4 doplasma::@7
  (byte) c2B#22 ← phi( doplasma::@4/(byte) c2B#3 doplasma::@7/(byte) c2B#16 )
  (byte) c2A#22 ← phi( doplasma::@4/(byte) c2A#3 doplasma::@7/(byte) c2A#16 )
  (byte) c1B#20 ← phi( doplasma::@4/(byte) c1B#22 doplasma::@7/(byte) c1B#15 )
  (byte) c1A#20 ← phi( doplasma::@4/(byte) c1A#22 doplasma::@7/(byte) c1A#15 )
  (byte*) doplasma::screen#2 ← phi( doplasma::@4/(byte*) doplasma::screen#3 doplasma::@7/(byte*) doplasma::screen#4 )
  (byte) doplasma::i2#2 ← phi( doplasma::@4/(byte) doplasma::i2#0 doplasma::@7/(byte) doplasma::i2#1 )
  (byte) doplasma::val#0 ← *((byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2)
  (byte) doplasma::ii#0 ← (number) 0
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@5 doplasma::@6
  (byte) c2B#20 ← phi( doplasma::@5/(byte) c2B#22 doplasma::@6/(byte) c2B#20 )
  (byte) c2A#20 ← phi( doplasma::@5/(byte) c2A#22 doplasma::@6/(byte) c2A#20 )
  (byte) c1B#18 ← phi( doplasma::@5/(byte) c1B#20 doplasma::@6/(byte) c1B#18 )
  (byte) c1A#18 ← phi( doplasma::@5/(byte) c1A#20 doplasma::@6/(byte) c1A#18 )
  (byte) doplasma::i2#3 ← phi( doplasma::@5/(byte) doplasma::i2#2 doplasma::@6/(byte) doplasma::i2#3 )
  (byte*) doplasma::screen#1 ← phi( doplasma::@5/(byte*) doplasma::screen#2 doplasma::@6/(byte*) doplasma::screen#1 )
  (byte) doplasma::ii#2 ← phi( doplasma::@5/(byte) doplasma::ii#0 doplasma::@6/(byte) doplasma::ii#1 )
  (byte) doplasma::val#2 ← phi( doplasma::@5/(byte) doplasma::val#0 doplasma::@6/(byte) doplasma::val#1 )
  (byte) doplasma::val#1 ← (byte) doplasma::val#2 + *((byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#2)
  (number~) doplasma::$5 ← (byte) doplasma::ii#2 * (number) $28
  (byte*~) doplasma::$6 ← (byte*) doplasma::screen#1 + (number~) doplasma::$5
  *((byte*~) doplasma::$6 + (byte) doplasma::i2#3) ← (byte) doplasma::val#1
  (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#2
  (bool~) doplasma::$7 ← (byte) doplasma::ii#1 < (number) $19
  unroll if((bool~) doplasma::$7) goto doplasma::@6
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@6
  (byte*) doplasma::screen#4 ← phi( doplasma::@6/(byte*) doplasma::screen#1 )
  (byte) c2B#16 ← phi( doplasma::@6/(byte) c2B#20 )
  (byte) c2A#16 ← phi( doplasma::@6/(byte) c2A#20 )
  (byte) c1B#15 ← phi( doplasma::@6/(byte) c1B#18 )
  (byte) c1A#15 ← phi( doplasma::@6/(byte) c1A#18 )
  (byte) doplasma::i2#4 ← phi( doplasma::@6/(byte) doplasma::i2#3 )
  (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#4
  (bool~) doplasma::$8 ← (byte) doplasma::i2#1 < (number) $28
  if((bool~) doplasma::$8) goto doplasma::@5
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  (byte) c2B#10 ← phi( doplasma::@7/(byte) c2B#16 )
  (byte) c2A#10 ← phi( doplasma::@7/(byte) c2A#16 )
  (byte) c1B#10 ← phi( doplasma::@7/(byte) c1B#15 )
  (byte) c1A#10 ← phi( doplasma::@7/(byte) c1A#15 )
  (byte) c1A#4 ← (byte) c1A#10
  (byte) c1B#4 ← (byte) c1B#10
  (byte) c2A#4 ← (byte) c2A#10
  (byte) c2B#4 ← (byte) c2B#10
  return 
  to:@return
makecharset: scope:[makecharset]  from main::@2
  (byte*) makecharset::charset#13 ← phi( main::@2/(byte*) makecharset::charset#0 )
  (byte*) print_char_cursor#29 ← phi( main::@2/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#22 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_screen#5 ← phi( main::@2/(byte*) print_screen#6 )
  (byte[8]) makecharset::bittab#0 ← { (number) 1, (number) 2, (number) 4, (number) 8, (number) $10, (number) $20, (number) $40, (number) $80 }
  call sid_rnd_init 
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset
  (byte*) makecharset::charset#10 ← phi( makecharset/(byte*) makecharset::charset#13 )
  (byte*) print_char_cursor#23 ← phi( makecharset/(byte*) print_char_cursor#29 )
  (byte*) print_line_cursor#16 ← phi( makecharset/(byte*) print_line_cursor#22 )
  (byte*) print_screen#4 ← phi( makecharset/(byte*) print_screen#5 )
  call print_cls 
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::@11
  (byte*) makecharset::charset#8 ← phi( makecharset::@11/(byte*) makecharset::charset#10 )
  (byte*) print_char_cursor#16 ← phi( makecharset::@11/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#11 ← phi( makecharset::@11/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#16
  (word) makecharset::c#0 ← (number) 0
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@12 makecharset::@9
  (byte*) print_char_cursor#44 ← phi( makecharset::@12/(byte*) print_char_cursor#7 makecharset::@9/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#39 ← phi( makecharset::@12/(byte*) print_line_cursor#5 makecharset::@9/(byte*) print_line_cursor#17 )
  (byte*) makecharset::charset#7 ← phi( makecharset::@12/(byte*) makecharset::charset#8 makecharset::@9/(byte*) makecharset::charset#9 )
  (word) makecharset::c#2 ← phi( makecharset::@12/(word) makecharset::c#0 makecharset::@9/(word) makecharset::c#1 )
  (byte~) makecharset::$2 ← < (word) makecharset::c#2
  (byte) makecharset::s#0 ← *((byte*) SINTABLE#0 + (byte~) makecharset::$2)
  (byte) makecharset::i#0 ← (number) 0
  to:makecharset::@2
makecharset::@2: scope:[makecharset]  from makecharset::@1 makecharset::@6
  (byte*) print_char_cursor#43 ← phi( makecharset::@1/(byte*) print_char_cursor#44 makecharset::@6/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#38 ← phi( makecharset::@1/(byte*) print_line_cursor#39 makecharset::@6/(byte*) print_line_cursor#30 )
  (byte*) makecharset::charset#6 ← phi( makecharset::@1/(byte*) makecharset::charset#7 makecharset::@6/(byte*) makecharset::charset#1 )
  (byte) makecharset::i#7 ← phi( makecharset::@1/(byte) makecharset::i#0 makecharset::@6/(byte) makecharset::i#1 )
  (word) makecharset::c#12 ← phi( makecharset::@1/(word) makecharset::c#2 makecharset::@6/(word) makecharset::c#3 )
  (byte) makecharset::s#3 ← phi( makecharset::@1/(byte) makecharset::s#0 makecharset::@6/(byte) makecharset::s#5 )
  (byte) makecharset::b#0 ← (number) 0
  (byte) makecharset::ii#0 ← (number) 0
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@4
  (byte*) print_char_cursor#42 ← phi( makecharset::@2/(byte*) print_char_cursor#43 makecharset::@4/(byte*) print_char_cursor#39 )
  (byte*) print_line_cursor#37 ← phi( makecharset::@2/(byte*) print_line_cursor#38 makecharset::@4/(byte*) print_line_cursor#34 )
  (byte*) makecharset::charset#5 ← phi( makecharset::@2/(byte*) makecharset::charset#6 makecharset::@4/(byte*) makecharset::charset#2 )
  (byte) makecharset::i#6 ← phi( makecharset::@2/(byte) makecharset::i#7 makecharset::@4/(byte) makecharset::i#3 )
  (word) makecharset::c#11 ← phi( makecharset::@2/(word) makecharset::c#12 makecharset::@4/(word) makecharset::c#6 )
  (byte) makecharset::b#6 ← phi( makecharset::@2/(byte) makecharset::b#0 makecharset::@4/(byte) makecharset::b#5 )
  (byte) makecharset::ii#5 ← phi( makecharset::@2/(byte) makecharset::ii#0 makecharset::@4/(byte) makecharset::ii#1 )
  (byte) makecharset::s#2 ← phi( makecharset::@2/(byte) makecharset::s#3 makecharset::@4/(byte) makecharset::s#4 )
  call sid_rnd 
  (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#1
  to:makecharset::@13
makecharset::@13: scope:[makecharset]  from makecharset::@3
  (byte*) print_char_cursor#40 ← phi( makecharset::@3/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#35 ← phi( makecharset::@3/(byte*) print_line_cursor#37 )
  (byte*) makecharset::charset#3 ← phi( makecharset::@3/(byte*) makecharset::charset#5 )
  (byte) makecharset::i#4 ← phi( makecharset::@3/(byte) makecharset::i#6 )
  (word) makecharset::c#8 ← phi( makecharset::@3/(word) makecharset::c#11 )
  (byte) makecharset::b#4 ← phi( makecharset::@3/(byte) makecharset::b#6 )
  (byte) makecharset::ii#4 ← phi( makecharset::@3/(byte) makecharset::ii#5 )
  (byte) makecharset::s#1 ← phi( makecharset::@3/(byte) makecharset::s#2 )
  (byte) sid_rnd::return#4 ← phi( makecharset::@3/(byte) sid_rnd::return#2 )
  (byte~) makecharset::$3 ← (byte) sid_rnd::return#4
  (number~) makecharset::$4 ← (byte~) makecharset::$3 & (number) $ff
  (bool~) makecharset::$5 ← (number~) makecharset::$4 > (byte) makecharset::s#1
  (bool~) makecharset::$6 ← ! (bool~) makecharset::$5
  if((bool~) makecharset::$6) goto makecharset::@4
  to:makecharset::@5
makecharset::@4: scope:[makecharset]  from makecharset::@13 makecharset::@5
  (byte*) print_char_cursor#39 ← phi( makecharset::@13/(byte*) print_char_cursor#40 makecharset::@5/(byte*) print_char_cursor#41 )
  (byte*) print_line_cursor#34 ← phi( makecharset::@13/(byte*) print_line_cursor#35 makecharset::@5/(byte*) print_line_cursor#36 )
  (byte) makecharset::s#4 ← phi( makecharset::@13/(byte) makecharset::s#1 makecharset::@5/(byte) makecharset::s#6 )
  (byte*) makecharset::charset#2 ← phi( makecharset::@13/(byte*) makecharset::charset#3 makecharset::@5/(byte*) makecharset::charset#4 )
  (byte) makecharset::b#5 ← phi( makecharset::@13/(byte) makecharset::b#4 makecharset::@5/(byte) makecharset::b#1 )
  (byte) makecharset::i#3 ← phi( makecharset::@13/(byte) makecharset::i#4 makecharset::@5/(byte) makecharset::i#5 )
  (word) makecharset::c#6 ← phi( makecharset::@13/(word) makecharset::c#8 makecharset::@5/(word) makecharset::c#9 )
  (byte) makecharset::ii#2 ← phi( makecharset::@13/(byte) makecharset::ii#4 makecharset::@5/(byte) makecharset::ii#3 )
  (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  (bool~) makecharset::$7 ← (byte) makecharset::ii#1 < (number) 8
  if((bool~) makecharset::$7) goto makecharset::@3
  to:makecharset::@6
makecharset::@5: scope:[makecharset]  from makecharset::@13
  (byte*) print_char_cursor#41 ← phi( makecharset::@13/(byte*) print_char_cursor#40 )
  (byte*) print_line_cursor#36 ← phi( makecharset::@13/(byte*) print_line_cursor#35 )
  (byte) makecharset::s#6 ← phi( makecharset::@13/(byte) makecharset::s#1 )
  (byte*) makecharset::charset#4 ← phi( makecharset::@13/(byte*) makecharset::charset#3 )
  (byte) makecharset::i#5 ← phi( makecharset::@13/(byte) makecharset::i#4 )
  (word) makecharset::c#9 ← phi( makecharset::@13/(word) makecharset::c#8 )
  (byte) makecharset::ii#3 ← phi( makecharset::@13/(byte) makecharset::ii#4 )
  (byte) makecharset::b#2 ← phi( makecharset::@13/(byte) makecharset::b#4 )
  (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#3)
  to:makecharset::@4
makecharset::@6: scope:[makecharset]  from makecharset::@4
  (byte*) print_char_cursor#36 ← phi( makecharset::@4/(byte*) print_char_cursor#39 )
  (byte*) print_line_cursor#30 ← phi( makecharset::@4/(byte*) print_line_cursor#34 )
  (byte) makecharset::s#5 ← phi( makecharset::@4/(byte) makecharset::s#4 )
  (byte*) makecharset::charset#1 ← phi( makecharset::@4/(byte*) makecharset::charset#2 )
  (byte) makecharset::b#3 ← phi( makecharset::@4/(byte) makecharset::b#5 )
  (byte) makecharset::i#2 ← phi( makecharset::@4/(byte) makecharset::i#3 )
  (word) makecharset::c#3 ← phi( makecharset::@4/(word) makecharset::c#6 )
  (number~) makecharset::$8 ← (word) makecharset::c#3 * (number) 8
  (number~) makecharset::$9 ← (number~) makecharset::$8 + (byte) makecharset::i#2
  *((byte*) makecharset::charset#1 + (number~) makecharset::$9) ← (byte) makecharset::b#3
  (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  (bool~) makecharset::$10 ← (byte) makecharset::i#1 < (number) 8
  if((bool~) makecharset::$10) goto makecharset::@2
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  (byte*) makecharset::charset#12 ← phi( makecharset::@6/(byte*) makecharset::charset#1 )
  (byte*) print_char_cursor#30 ← phi( makecharset::@6/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#24 ← phi( makecharset::@6/(byte*) print_line_cursor#30 )
  (word) makecharset::c#4 ← phi( makecharset::@6/(word) makecharset::c#3 )
  (number~) makecharset::$11 ← (word) makecharset::c#4 & (number) 7
  (bool~) makecharset::$12 ← (number~) makecharset::$11 == (number) 0
  (bool~) makecharset::$13 ← ! (bool~) makecharset::$12
  if((bool~) makecharset::$13) goto makecharset::@9
  to:makecharset::@8
makecharset::@9: scope:[makecharset]  from makecharset::@14 makecharset::@7
  (byte*) makecharset::charset#9 ← phi( makecharset::@14/(byte*) makecharset::charset#11 makecharset::@7/(byte*) makecharset::charset#12 )
  (byte*) print_char_cursor#24 ← phi( makecharset::@14/(byte*) print_char_cursor#8 makecharset::@7/(byte*) print_char_cursor#30 )
  (byte*) print_line_cursor#17 ← phi( makecharset::@14/(byte*) print_line_cursor#23 makecharset::@7/(byte*) print_line_cursor#24 )
  (word) makecharset::c#5 ← phi( makecharset::@14/(word) makecharset::c#7 makecharset::@7/(word) makecharset::c#4 )
  (word) makecharset::c#1 ← ++ (word) makecharset::c#5
  (bool~) makecharset::$15 ← (word) makecharset::c#1 < (number) $100
  if((bool~) makecharset::$15) goto makecharset::@1
  to:makecharset::@return
makecharset::@8: scope:[makecharset]  from makecharset::@7
  (byte*) makecharset::charset#14 ← phi( makecharset::@7/(byte*) makecharset::charset#12 )
  (byte*) print_line_cursor#31 ← phi( makecharset::@7/(byte*) print_line_cursor#24 )
  (word) makecharset::c#10 ← phi( makecharset::@7/(word) makecharset::c#4 )
  (byte*) print_char_cursor#20 ← phi( makecharset::@7/(byte*) print_char_cursor#30 )
  (byte) print_char::ch#0 ← (byte) '.'
  call print_char 
  to:makecharset::@14
makecharset::@14: scope:[makecharset]  from makecharset::@8
  (byte*) makecharset::charset#11 ← phi( makecharset::@8/(byte*) makecharset::charset#14 )
  (byte*) print_line_cursor#23 ← phi( makecharset::@8/(byte*) print_line_cursor#31 )
  (word) makecharset::c#7 ← phi( makecharset::@8/(word) makecharset::c#10 )
  (byte*) print_char_cursor#17 ← phi( makecharset::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#17
  to:makecharset::@9
makecharset::@return: scope:[makecharset]  from makecharset::@9
  (byte*) print_char_cursor#18 ← phi( makecharset::@9/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#12 ← phi( makecharset::@9/(byte*) print_line_cursor#17 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#18
  return 
  to:@return
@28: scope:[]  from @26
  (byte*) print_screen#9 ← phi( @26/(byte*) print_screen#10 )
  (byte) c2B#17 ← phi( @26/(byte) c2B#2 )
  (byte) c2A#17 ← phi( @26/(byte) c2A#2 )
  (byte) c1B#16 ← phi( @26/(byte) c1B#2 )
  (byte) c1A#16 ← phi( @26/(byte) c1A#2 )
  (byte*) print_char_cursor#25 ← phi( @26/(byte*) print_char_cursor#31 )
  (byte*) print_line_cursor#18 ← phi( @26/(byte*) print_line_cursor#25 )
  call main 
  to:@29
@29: scope:[]  from @28
  (byte) c2B#11 ← phi( @28/(byte) c2B#1 )
  (byte) c2A#11 ← phi( @28/(byte) c2A#1 )
  (byte) c1B#11 ← phi( @28/(byte) c1B#1 )
  (byte) c1A#11 ← phi( @28/(byte) c1A#1 )
  (byte*) print_char_cursor#19 ← phi( @28/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#13 ← phi( @28/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#19
  (byte) c1A#5 ← (byte) c1A#11
  (byte) c1B#5 ← (byte) c1B#11
  (byte) c2A#5 ← (byte) c2A#11
  (byte) c2B#5 ← (byte) c2B#11
  to:@end
@end: scope:[]  from @29

SYMBOL TABLE SSA
(label) @23
(label) @25
(label) @26
(label) @28
(label) @29
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CHARSET
(byte*) CHARSET#0
(byte*) COLS
(byte*) COLS#0
(byte*) D018
(byte*) D018#0
(byte*) SCREEN1
(byte*) SCREEN1#0
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_NOISE#0
(byte*) SID_VOICE3_CONTROL
(byte*) SID_VOICE3_CONTROL#0
(word*) SID_VOICE3_FREQ
(word*) SID_VOICE3_FREQ#0
(byte*) SID_VOICE3_OSC
(byte*) SID_VOICE3_OSC#0
(byte*) SINTABLE
(byte*) SINTABLE#0
(byte) c1A
(byte) c1A#0
(byte) c1A#1
(byte) c1A#10
(byte) c1A#11
(byte) c1A#12
(byte) c1A#13
(byte) c1A#14
(byte) c1A#15
(byte) c1A#16
(byte) c1A#17
(byte) c1A#18
(byte) c1A#19
(byte) c1A#2
(byte) c1A#20
(byte) c1A#21
(byte) c1A#22
(byte) c1A#23
(byte) c1A#24
(byte) c1A#25
(byte) c1A#26
(byte) c1A#27
(byte) c1A#3
(byte) c1A#4
(byte) c1A#5
(byte) c1A#6
(byte) c1A#7
(byte) c1A#8
(byte) c1A#9
(byte) c1B
(byte) c1B#0
(byte) c1B#1
(byte) c1B#10
(byte) c1B#11
(byte) c1B#12
(byte) c1B#13
(byte) c1B#14
(byte) c1B#15
(byte) c1B#16
(byte) c1B#17
(byte) c1B#18
(byte) c1B#19
(byte) c1B#2
(byte) c1B#20
(byte) c1B#21
(byte) c1B#22
(byte) c1B#23
(byte) c1B#24
(byte) c1B#25
(byte) c1B#26
(byte) c1B#27
(byte) c1B#3
(byte) c1B#4
(byte) c1B#5
(byte) c1B#6
(byte) c1B#7
(byte) c1B#8
(byte) c1B#9
(byte) c2A
(byte) c2A#0
(byte) c2A#1
(byte) c2A#10
(byte) c2A#11
(byte) c2A#12
(byte) c2A#13
(byte) c2A#14
(byte) c2A#15
(byte) c2A#16
(byte) c2A#17
(byte) c2A#18
(byte) c2A#19
(byte) c2A#2
(byte) c2A#20
(byte) c2A#21
(byte) c2A#22
(byte) c2A#23
(byte) c2A#24
(byte) c2A#25
(byte) c2A#26
(byte) c2A#27
(byte) c2A#3
(byte) c2A#4
(byte) c2A#5
(byte) c2A#6
(byte) c2A#7
(byte) c2A#8
(byte) c2A#9
(byte) c2B
(byte) c2B#0
(byte) c2B#1
(byte) c2B#10
(byte) c2B#11
(byte) c2B#12
(byte) c2B#13
(byte) c2B#14
(byte) c2B#15
(byte) c2B#16
(byte) c2B#17
(byte) c2B#18
(byte) c2B#19
(byte) c2B#2
(byte) c2B#20
(byte) c2B#21
(byte) c2B#22
(byte) c2B#23
(byte) c2B#24
(byte) c2B#25
(byte) c2B#26
(byte) c2B#27
(byte) c2B#3
(byte) c2B#4
(byte) c2B#5
(byte) c2B#6
(byte) c2B#7
(byte) c2B#8
(byte) c2B#9
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$0
(byte~) doplasma::$1
(bool~) doplasma::$2
(byte~) doplasma::$3
(bool~) doplasma::$4
(number~) doplasma::$5
(byte*~) doplasma::$6
(bool~) doplasma::$7
(bool~) doplasma::$8
(label) doplasma::@1
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@7
(label) doplasma::@return
(byte) doplasma::c1a
(byte) doplasma::c1a#0
(byte) doplasma::c1a#1
(byte) doplasma::c1a#2
(byte) doplasma::c1b
(byte) doplasma::c1b#0
(byte) doplasma::c1b#1
(byte) doplasma::c1b#2
(byte) doplasma::c2a
(byte) doplasma::c2a#0
(byte) doplasma::c2a#1
(byte) doplasma::c2a#2
(byte) doplasma::c2b
(byte) doplasma::c2b#0
(byte) doplasma::c2b#1
(byte) doplasma::c2b#2
(byte) doplasma::i
(byte) doplasma::i#0
(byte) doplasma::i#1
(byte) doplasma::i#2
(byte) doplasma::i1
(byte) doplasma::i1#0
(byte) doplasma::i1#1
(byte) doplasma::i1#2
(byte) doplasma::i2
(byte) doplasma::i2#0
(byte) doplasma::i2#1
(byte) doplasma::i2#2
(byte) doplasma::i2#3
(byte) doplasma::i2#4
(byte) doplasma::ii
(byte) doplasma::ii#0
(byte) doplasma::ii#1
(byte) doplasma::ii#2
(byte*) doplasma::screen
(byte*) doplasma::screen#0
(byte*) doplasma::screen#1
(byte*) doplasma::screen#2
(byte*) doplasma::screen#3
(byte*) doplasma::screen#4
(byte*) doplasma::screen#5
(byte*) doplasma::screen#6
(byte*) doplasma::screen#7
(byte*) doplasma::screen#8
(byte) doplasma::val
(byte) doplasma::val#0
(byte) doplasma::val#1
(byte) doplasma::val#2
(byte[$28]) doplasma::xbuf
(byte[$28]) doplasma::xbuf#0
(byte[$19]) doplasma::ybuf
(byte[$19]) doplasma::ybuf#0
(byte) doplasma::yprev
(byte) doplasma::yprev#0
(byte) doplasma::yprev#1
(byte) doplasma::yprev#2
(byte) doplasma::yval
(byte) doplasma::yval#0
(void()) main()
(byte~) main::$1
(byte*~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@9
(label) main::@return
(byte*) main::col
(byte*) main::col#0
(byte*) main::col#1
(byte*) main::col#2
(label) main::toD0181
(word~) main::toD0181_$0
(word~) main::toD0181_$0#0
(number~) main::toD0181_$1
(number~) main::toD0181_$1#0
(number~) main::toD0181_$2
(number~) main::toD0181_$2#0
(number~) main::toD0181_$3
(number~) main::toD0181_$3#0
(word~) main::toD0181_$4
(word~) main::toD0181_$4#0
(byte~) main::toD0181_$5
(byte~) main::toD0181_$5#0
(number~) main::toD0181_$6
(number~) main::toD0181_$6#0
(number~) main::toD0181_$7
(number~) main::toD0181_$7#0
(number~) main::toD0181_$8
(number~) main::toD0181_$8#0
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(void()) makecharset((byte*) makecharset::charset)
(bool~) makecharset::$10
(number~) makecharset::$11
(bool~) makecharset::$12
(bool~) makecharset::$13
(bool~) makecharset::$15
(byte~) makecharset::$2
(byte~) makecharset::$3
(number~) makecharset::$4
(bool~) makecharset::$5
(bool~) makecharset::$6
(bool~) makecharset::$7
(number~) makecharset::$8
(number~) makecharset::$9
(label) makecharset::@1
(label) makecharset::@11
(label) makecharset::@12
(label) makecharset::@13
(label) makecharset::@14
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#0
(byte) makecharset::b#1
(byte) makecharset::b#2
(byte) makecharset::b#3
(byte) makecharset::b#4
(byte) makecharset::b#5
(byte) makecharset::b#6
(byte[8]) makecharset::bittab
(byte[8]) makecharset::bittab#0
(word) makecharset::c
(word) makecharset::c#0
(word) makecharset::c#1
(word) makecharset::c#10
(word) makecharset::c#11
(word) makecharset::c#12
(word) makecharset::c#2
(word) makecharset::c#3
(word) makecharset::c#4
(word) makecharset::c#5
(word) makecharset::c#6
(word) makecharset::c#7
(word) makecharset::c#8
(word) makecharset::c#9
(byte*) makecharset::charset
(byte*) makecharset::charset#0
(byte*) makecharset::charset#1
(byte*) makecharset::charset#10
(byte*) makecharset::charset#11
(byte*) makecharset::charset#12
(byte*) makecharset::charset#13
(byte*) makecharset::charset#14
(byte*) makecharset::charset#2
(byte*) makecharset::charset#3
(byte*) makecharset::charset#4
(byte*) makecharset::charset#5
(byte*) makecharset::charset#6
(byte*) makecharset::charset#7
(byte*) makecharset::charset#8
(byte*) makecharset::charset#9
(byte) makecharset::i
(byte) makecharset::i#0
(byte) makecharset::i#1
(byte) makecharset::i#2
(byte) makecharset::i#3
(byte) makecharset::i#4
(byte) makecharset::i#5
(byte) makecharset::i#6
(byte) makecharset::i#7
(byte) makecharset::ii
(byte) makecharset::ii#0
(byte) makecharset::ii#1
(byte) makecharset::ii#2
(byte) makecharset::ii#3
(byte) makecharset::ii#4
(byte) makecharset::ii#5
(byte) makecharset::s
(byte) makecharset::s#0
(byte) makecharset::s#1
(byte) makecharset::s#2
(byte) makecharset::s#3
(byte) makecharset::s#4
(byte) makecharset::s#5
(byte) makecharset::s#6
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0
(byte) sid_rnd::return#1
(byte) sid_rnd::return#2
(byte) sid_rnd::return#3
(byte) sid_rnd::return#4
(void()) sid_rnd_init()
(label) sid_rnd_init::@return

Adding number conversion cast (unumber) 0 in (byte) BLACK#0 ← (number) 0
Adding number conversion cast (unumber) 6 in (byte) BLUE#0 ← (number) 6
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) $80 in (byte) SID_CONTROL_NOISE#0 ← (number) $80
Adding number conversion cast (unumber) $ffff in *((word*) SID_VOICE3_FREQ#0) ← (number) $ffff
Adding number conversion cast (unumber) $3e8 in (byte*~) main::$2 ← (byte*) COLS#0 + (number) $3e8
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$1#0 in (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$2#0 ← (unumber~) main::toD0181_$1#0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$2#0 in (number~) main::toD0181_$2#0 ← (unumber~) main::toD0181_$1#0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$3#0 in (number~) main::toD0181_$3#0 ← > (unumber~) main::toD0181_$2#0
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$6#0 in (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$7#0 ← (unumber~) main::toD0181_$6#0 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$7#0 in (number~) main::toD0181_$7#0 ← (unumber~) main::toD0181_$6#0 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$8#0 in (number~) main::toD0181_$8#0 ← (unumber~) main::toD0181_$3#0 | (unumber~) main::toD0181_$7#0
Adding number conversion cast (unumber) 0 in (byte) c1A#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) c1B#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) c2A#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) c2B#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) doplasma::yprev#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) doplasma::i#0 ← (number) 0
Adding number conversion cast (unumber) 4 in (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (number) 4
Adding number conversion cast (unumber) 9 in (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (number) 9
Adding number conversion cast (unumber) $19 in (bool~) doplasma::$2 ← (byte) doplasma::i#1 < (number) $19
Adding number conversion cast (unumber) 3 in (byte) c1A#3 ← (byte) c1A#9 + (number) 3
Adding number conversion cast (unumber) 5 in (byte) c1B#3 ← (byte) c1B#9 - (number) 5
Adding number conversion cast (unumber) 0 in (byte) doplasma::i1#0 ← (number) 0
Adding number conversion cast (unumber) 3 in (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (number) 3
Adding number conversion cast (unumber) 7 in (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (number) 7
Adding number conversion cast (unumber) $28 in (bool~) doplasma::$4 ← (byte) doplasma::i1#1 < (number) $28
Adding number conversion cast (unumber) 2 in (byte) c2A#3 ← (byte) c2A#9 + (number) 2
Adding number conversion cast (unumber) 3 in (byte) c2B#3 ← (byte) c2B#9 - (number) 3
Adding number conversion cast (unumber) 0 in (byte) doplasma::i2#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) doplasma::ii#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) doplasma::$5 ← (byte) doplasma::ii#2 * (number) $28
Adding number conversion cast (unumber) doplasma::$5 in (number~) doplasma::$5 ← (byte) doplasma::ii#2 * (unumber)(number) $28
Adding number conversion cast (unumber) $19 in (bool~) doplasma::$7 ← (byte) doplasma::ii#1 < (number) $19
Adding number conversion cast (unumber) $28 in (bool~) doplasma::$8 ← (byte) doplasma::i2#1 < (number) $28
Adding number conversion cast (unumber) 0 in (word) makecharset::c#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) makecharset::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) makecharset::b#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) makecharset::ii#0 ← (number) 0
Adding number conversion cast (unumber) $ff in (number~) makecharset::$4 ← (byte~) makecharset::$3 & (number) $ff
Adding number conversion cast (unumber) makecharset::$4 in (number~) makecharset::$4 ← (byte~) makecharset::$3 & (unumber)(number) $ff
Adding number conversion cast (unumber) 8 in (bool~) makecharset::$7 ← (byte) makecharset::ii#1 < (number) 8
Adding number conversion cast (unumber) 8 in (number~) makecharset::$8 ← (word) makecharset::c#3 * (number) 8
Adding number conversion cast (unumber) makecharset::$8 in (number~) makecharset::$8 ← (word) makecharset::c#3 * (unumber)(number) 8
Adding number conversion cast (unumber) makecharset::$9 in (number~) makecharset::$9 ← (unumber~) makecharset::$8 + (byte) makecharset::i#2
Adding number conversion cast (unumber) 8 in (bool~) makecharset::$10 ← (byte) makecharset::i#1 < (number) 8
Adding number conversion cast (unumber) 7 in (number~) makecharset::$11 ← (word) makecharset::c#4 & (number) 7
Adding number conversion cast (unumber) makecharset::$11 in (number~) makecharset::$11 ← (word) makecharset::c#4 & (unumber)(number) 7
Adding number conversion cast (unumber) 0 in (bool~) makecharset::$12 ← (unumber~) makecharset::$11 == (number) 0
Adding number conversion cast (unumber) $100 in (bool~) makecharset::$15 ← (word) makecharset::c#1 < (number) $100
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (byte) to elements in (byte[8]) makecharset::bittab#0 ← { (byte)(number) 1, (byte)(number) 2, (byte)(number) 4, (byte)(number) 8, (byte)(number) $10, (byte)(number) $20, (byte)(number) $40, (byte)(number) $80 }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) BGCOL#0 ← (byte*)(number) $d021
Inlining cast (byte*) D018#0 ← (byte*)(number) $d018
Inlining cast (byte*) COLS#0 ← (byte*)(number) $d800
Inlining cast (byte) BLACK#0 ← (unumber)(number) 0
Inlining cast (byte) BLUE#0 ← (unumber)(number) 6
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word*) SID_VOICE3_FREQ#0 ← (word*)(number) $d40e
Inlining cast (byte*) SID_VOICE3_CONTROL#0 ← (byte*)(number) $d412
Inlining cast (byte) SID_CONTROL_NOISE#0 ← (unumber)(number) $80
Inlining cast (byte*) SID_VOICE3_OSC#0 ← (byte*)(number) $d41b
Inlining cast *((word*) SID_VOICE3_FREQ#0) ← (unumber)(number) $ffff
Inlining cast (byte*) SCREEN1#0 ← (byte*)(number) $2800
Inlining cast (byte*) CHARSET#0 ← (byte*)(number) $2000
Inlining cast (byte*) SINTABLE#0 ← (byte*)(number) $1f00
Inlining cast (word~) main::toD0181_$0#0 ← (word)(byte*) main::toD0181_screen#1
Inlining cast (word~) main::toD0181_$4#0 ← (word)(byte*) main::toD0181_gfx#1
Inlining cast (byte) c1A#2 ← (unumber)(number) 0
Inlining cast (byte) c1B#2 ← (unumber)(number) 0
Inlining cast (byte) c2A#2 ← (unumber)(number) 0
Inlining cast (byte) c2B#2 ← (unumber)(number) 0
Inlining cast (byte) doplasma::yprev#0 ← (unumber)(number) 0
Inlining cast (byte) doplasma::i#0 ← (unumber)(number) 0
Inlining cast (byte) doplasma::i1#0 ← (unumber)(number) 0
Inlining cast (byte) doplasma::i2#0 ← (unumber)(number) 0
Inlining cast (byte) doplasma::ii#0 ← (unumber)(number) 0
Inlining cast (word) makecharset::c#0 ← (unumber)(number) 0
Inlining cast (byte) makecharset::i#0 ← (unumber)(number) 0
Inlining cast (byte) makecharset::b#0 ← (unumber)(number) 0
Inlining cast (byte) makecharset::ii#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 0
Simplifying constant integer cast 6
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3e8
Simplifying constant pointer cast (word*) 54286
Simplifying constant pointer cast (byte*) 54290
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 54299
Simplifying constant integer cast $ffff
Simplifying constant pointer cast (byte*) 10240
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 7936
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $19
Simplifying constant integer cast 3
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast $10
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 6
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $80
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$2#0 ← (word~) main::toD0181_$1#0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$3#0 ← > (word~) main::toD0181_$2#0
Inferred type updated to byte in (unumber~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$7#0 ← (byte~) main::toD0181_$6#0 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$8#0 ← (byte~) main::toD0181_$3#0 | (byte~) main::toD0181_$7#0
Inferred type updated to byte in (unumber~) doplasma::$5 ← (byte) doplasma::ii#2 * (byte) $28
Inferred type updated to byte in (unumber~) makecharset::$4 ← (byte~) makecharset::$3 & (byte) $ff
Inferred type updated to word in (unumber~) makecharset::$8 ← (word) makecharset::c#3 * (byte) 8
Inferred type updated to word in (unumber~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#2
Inferred type updated to byte in (unumber~) makecharset::$11 ← (word) makecharset::c#4 & (byte) 7
Inversing boolean not [185] (bool~) makecharset::$6 ← (byte~) makecharset::$4 <= (byte) makecharset::s#1 from [184] (bool~) makecharset::$5 ← (byte~) makecharset::$4 > (byte) makecharset::s#1
Inversing boolean not [203] (bool~) makecharset::$13 ← (byte~) makecharset::$11 != (byte) 0 from [202] (bool~) makecharset::$12 ← (byte~) makecharset::$11 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#32 (byte*) print_char_cursor#37 (byte*) print_screen#12 (byte*) print_line_cursor#29 (byte*) print_char_cursor#35 (byte*) print_screen#11 (byte*) print_line_cursor#25 (byte*) print_char_cursor#31 (byte*) print_screen#10 (byte*) print_line_cursor#18 (byte*) print_char_cursor#25 (byte*) print_screen#9 
Alias (byte*) print_char_cursor#1 = (byte*) print_char_cursor#12 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_char_cursor#3 (byte*) print_line_cursor#8 (byte*) print_char_cursor#13 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte) sid_rnd::return#0 = (byte) sid_rnd::return#3 (byte) sid_rnd::return#1 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#19 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#26 
Alias (byte*) print_screen#6 = (byte*) print_screen#7 
Alias (byte) c1A#17 = (byte) c1A#25 (byte) c1A#26 (byte) c1A#23 (byte) c1A#21 (byte) c1A#19 
Alias (byte) c1B#17 = (byte) c1B#25 (byte) c1B#26 (byte) c1B#23 (byte) c1B#21 (byte) c1B#19 
Alias (byte) c2A#18 = (byte) c2A#25 (byte) c2A#26 (byte) c2A#24 (byte) c2A#23 (byte) c2A#21 
Alias (byte) c2B#18 = (byte) c2B#25 (byte) c2B#26 (byte) c2B#24 (byte) c2B#23 (byte) c2B#21 
Alias (byte*) print_line_cursor#21 = (byte*) print_line_cursor#3 (byte*) print_line_cursor#9 (byte*) print_line_cursor#33 (byte*) print_line_cursor#27 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#5 (byte*) print_char_cursor#38 (byte*) print_char_cursor#33 (byte*) print_char_cursor#28 
Alias (byte*) main::toD0181_screen#0 = (byte*) main::toD0181_screen#1 
Alias (byte*) main::toD0181_gfx#0 = (byte*) main::toD0181_gfx#1 
Alias (byte) main::toD0181_return#0 = (byte~) main::toD0181_$8#0 (byte) main::toD0181_return#2 (byte) main::toD0181_return#1 (byte) main::toD0181_return#3 (byte~) main::$1 
Alias (byte) c1A#1 = (byte) c1A#12 (byte) c1A#13 (byte) c1A#7 
Alias (byte) c1B#1 = (byte) c1B#12 (byte) c1B#13 (byte) c1B#7 
Alias (byte) c2A#1 = (byte) c2A#12 (byte) c2A#13 (byte) c2A#7 
Alias (byte) c2B#1 = (byte) c2B#12 (byte) c2B#13 (byte) c2B#7 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#28 (byte*) print_line_cursor#15 (byte*) print_line_cursor#20 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#22 (byte*) print_char_cursor#27 (byte*) print_char_cursor#6 
Alias (byte) c1A#0 = (byte) c1A#6 
Alias (byte) c1B#0 = (byte) c1B#6 
Alias (byte) c2A#0 = (byte) c2A#6 
Alias (byte) c2B#0 = (byte) c2B#6 
Alias (byte) doplasma::yval#0 = (byte~) doplasma::$0 (byte) doplasma::yprev#1 
Alias (byte) c1A#14 = (byte) c1A#9 
Alias (byte) c1B#14 = (byte) c1B#9 
Alias (byte) c2A#14 = (byte) c2A#8 
Alias (byte) c2B#14 = (byte) c2B#8 
Alias (byte*) doplasma::screen#6 = (byte*) doplasma::screen#7 
Alias (byte) c2A#15 = (byte) c2A#9 
Alias (byte) c2B#15 = (byte) c2B#9 
Alias (byte*) doplasma::screen#3 = (byte*) doplasma::screen#5 
Alias (byte) c1A#22 = (byte) c1A#24 
Alias (byte) c1B#22 = (byte) c1B#24 
Alias (byte) doplasma::i2#3 = (byte) doplasma::i2#4 
Alias (byte) c1A#10 = (byte) c1A#15 (byte) c1A#18 (byte) c1A#4 
Alias (byte) c1B#10 = (byte) c1B#15 (byte) c1B#18 (byte) c1B#4 
Alias (byte) c2A#10 = (byte) c2A#16 (byte) c2A#20 (byte) c2A#4 
Alias (byte) c2B#10 = (byte) c2B#16 (byte) c2B#20 (byte) c2B#4 
Alias (byte*) doplasma::screen#1 = (byte*) doplasma::screen#4 
Alias (byte*) print_screen#4 = (byte*) print_screen#5 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#22 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#29 
Alias (byte*) makecharset::charset#10 = (byte*) makecharset::charset#13 (byte*) makecharset::charset#8 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#7 
Alias (byte) sid_rnd::return#2 = (byte) sid_rnd::return#4 
Alias (byte) makecharset::s#1 = (byte) makecharset::s#2 (byte) makecharset::s#6 
Alias (byte) makecharset::ii#3 = (byte) makecharset::ii#4 (byte) makecharset::ii#5 
Alias (byte) makecharset::b#2 = (byte) makecharset::b#4 (byte) makecharset::b#6 
Alias (word) makecharset::c#11 = (word) makecharset::c#8 (word) makecharset::c#9 
Alias (byte) makecharset::i#4 = (byte) makecharset::i#6 (byte) makecharset::i#5 
Alias (byte*) makecharset::charset#3 = (byte*) makecharset::charset#5 (byte*) makecharset::charset#4 
Alias (byte*) print_line_cursor#35 = (byte*) print_line_cursor#37 (byte*) print_line_cursor#36 
Alias (byte*) print_char_cursor#40 = (byte*) print_char_cursor#42 (byte*) print_char_cursor#41 
Alias (word) makecharset::c#10 = (word) makecharset::c#3 (word) makecharset::c#6 (word) makecharset::c#4 (word) makecharset::c#7 
Alias (byte) makecharset::i#2 = (byte) makecharset::i#3 
Alias (byte) makecharset::b#3 = (byte) makecharset::b#5 
Alias (byte*) makecharset::charset#1 = (byte*) makecharset::charset#2 (byte*) makecharset::charset#12 (byte*) makecharset::charset#14 (byte*) makecharset::charset#11 
Alias (byte) makecharset::s#4 = (byte) makecharset::s#5 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#30 (byte*) print_line_cursor#34 (byte*) print_line_cursor#24 (byte*) print_line_cursor#31 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#36 (byte*) print_char_cursor#39 (byte*) print_char_cursor#30 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#8 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#17 (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#24 (byte*) print_char_cursor#9 
Alias (byte) c1A#16 = (byte) c1A#2 
Alias (byte) c1B#16 = (byte) c1B#2 
Alias (byte) c2A#17 = (byte) c2A#2 
Alias (byte) c2B#17 = (byte) c2B#2 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#19 
Alias (byte) c1A#11 = (byte) c1A#5 
Alias (byte) c1B#11 = (byte) c1B#5 
Alias (byte) c2A#11 = (byte) c2A#5 
Alias (byte) c2B#11 = (byte) c2B#5 
Successful SSA optimization Pass2AliasElimination
Alias (byte) makecharset::ii#2 = (byte) makecharset::ii#3 
Alias (word) makecharset::c#10 = (word) makecharset::c#11 (word) makecharset::c#5 
Alias (byte) makecharset::i#2 = (byte) makecharset::i#4 
Alias (byte*) makecharset::charset#1 = (byte*) makecharset::charset#3 (byte*) makecharset::charset#9 
Alias (byte) makecharset::s#1 = (byte) makecharset::s#4 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#23 (byte*) print_line_cursor#35 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#40 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_line_cursor#1
Self Phi Eliminated (byte*) print_line_cursor#14
Self Phi Eliminated (byte*) print_char_cursor#21
Self Phi Eliminated (byte*) print_screen#6
Self Phi Eliminated (byte) c1A#17
Self Phi Eliminated (byte) c1B#17
Self Phi Eliminated (byte) c2A#18
Self Phi Eliminated (byte) c2B#18
Self Phi Eliminated (byte*) print_line_cursor#10
Self Phi Eliminated (byte*) print_char_cursor#15
Self Phi Eliminated (byte) c1A#14
Self Phi Eliminated (byte) c1B#14
Self Phi Eliminated (byte) c2A#14
Self Phi Eliminated (byte) c2B#14
Self Phi Eliminated (byte*) doplasma::screen#6
Self Phi Eliminated (byte) c2A#15
Self Phi Eliminated (byte) c2B#15
Self Phi Eliminated (byte*) doplasma::screen#3
Self Phi Eliminated (byte) c1A#22
Self Phi Eliminated (byte) c1B#22
Self Phi Eliminated (byte*) doplasma::screen#1
Self Phi Eliminated (byte) doplasma::i2#3
Self Phi Eliminated (byte) c1A#10
Self Phi Eliminated (byte) c1B#10
Self Phi Eliminated (byte) c2A#10
Self Phi Eliminated (byte) c2B#10
Self Phi Eliminated (byte) makecharset::s#1
Self Phi Eliminated (word) makecharset::c#10
Self Phi Eliminated (byte) makecharset::i#2
Self Phi Eliminated (byte*) makecharset::charset#1
Self Phi Eliminated (byte*) print_line_cursor#12
Self Phi Eliminated (byte*) print_char_cursor#20
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) print_char::ch#1 (byte) print_char::ch#0
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#20
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#1 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_screen#8 (byte*) print_line_cursor#0
Identical Phi Values (byte) c1A#27 (byte) c1A#16
Identical Phi Values (byte) c1B#27 (byte) c1B#16
Identical Phi Values (byte) c2A#27 (byte) c2A#17
Identical Phi Values (byte) c2B#27 (byte) c2B#17
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#26
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_screen#6 (byte*) print_screen#8
Identical Phi Values (byte) c1A#17 (byte) c1A#27
Identical Phi Values (byte) c1B#17 (byte) c1B#27
Identical Phi Values (byte) c2A#18 (byte) c2A#27
Identical Phi Values (byte) c2B#18 (byte) c2B#27
Identical Phi Values (byte*) print_line_cursor#21 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#14
Identical Phi Values (byte) c1A#0 (byte) c1A#10
Identical Phi Values (byte) c1B#0 (byte) c1B#10
Identical Phi Values (byte) c2A#0 (byte) c2A#10
Identical Phi Values (byte) c2B#0 (byte) c2B#10
Identical Phi Values (byte) c1A#8 (byte) c1A#1
Identical Phi Values (byte) c1B#8 (byte) c1B#1
Identical Phi Values (byte) c2A#19 (byte) c2A#1
Identical Phi Values (byte) c2B#19 (byte) c2B#1
Identical Phi Values (byte*) doplasma::screen#8 (byte*) doplasma::screen#0
Identical Phi Values (byte) c1A#14 (byte) c1A#8
Identical Phi Values (byte) c1B#14 (byte) c1B#8
Identical Phi Values (byte) c2A#14 (byte) c2A#19
Identical Phi Values (byte) c2B#14 (byte) c2B#19
Identical Phi Values (byte*) doplasma::screen#6 (byte*) doplasma::screen#8
Identical Phi Values (byte) c2A#15 (byte) c2A#14
Identical Phi Values (byte) c2B#15 (byte) c2B#14
Identical Phi Values (byte*) doplasma::screen#3 (byte*) doplasma::screen#6
Identical Phi Values (byte) c1A#22 (byte) c1A#3
Identical Phi Values (byte) c1B#22 (byte) c1B#3
Identical Phi Values (byte*) doplasma::screen#1 (byte*) doplasma::screen#2
Identical Phi Values (byte) doplasma::i2#3 (byte) doplasma::i2#2
Identical Phi Values (byte) c1A#10 (byte) c1A#20
Identical Phi Values (byte) c1B#10 (byte) c1B#20
Identical Phi Values (byte) c2A#10 (byte) c2A#22
Identical Phi Values (byte) c2B#10 (byte) c2B#22
Identical Phi Values (byte*) print_screen#4 (byte*) print_screen#6
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#21
Identical Phi Values (byte*) makecharset::charset#10 (byte*) makecharset::charset#0
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#1
Identical Phi Values (byte) makecharset::s#1 (byte) makecharset::s#3
Identical Phi Values (word) makecharset::c#10 (word) makecharset::c#12
Identical Phi Values (byte) makecharset::i#2 (byte) makecharset::i#7
Identical Phi Values (byte*) makecharset::charset#1 (byte*) makecharset::charset#6
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#38
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#43
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#15
Identical Phi Values (byte) c1A#11 (byte) c1A#1
Identical Phi Values (byte) c1B#11 (byte) c1B#1
Identical Phi Values (byte) c2A#11 (byte) c2A#1
Identical Phi Values (byte) c2B#11 (byte) c2B#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_cls::$1 [22] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$3 [57] if((byte*) main::col#1!=rangelast(COLS#0,main::$2)) goto main::@1
Simple Condition (bool~) doplasma::$2 [122] if((byte) doplasma::i#1<(byte) $19) goto doplasma::@1
Simple Condition (bool~) doplasma::$4 [136] if((byte) doplasma::i1#1<(byte) $28) goto doplasma::@3
Simple Condition (bool~) doplasma::$7 [151] unroll if((byte) doplasma::ii#1<(byte) $19) goto doplasma::@6
Simple Condition (bool~) doplasma::$8 [155] if((byte) doplasma::i2#1<(byte) $28) goto doplasma::@5
Simple Condition (bool~) makecharset::$6 [186] if((byte~) makecharset::$4<=(byte) makecharset::s#3) goto makecharset::@4
Simple Condition (bool~) makecharset::$7 [190] if((byte) makecharset::ii#1<(byte) 8) goto makecharset::@3
Simple Condition (bool~) makecharset::$10 [199] if((byte) makecharset::i#1<(byte) 8) goto makecharset::@2
Simple Condition (bool~) makecharset::$13 [204] if((byte~) makecharset::$11!=(byte) 0) goto makecharset::@9
Simple Condition (bool~) makecharset::$15 [208] if((word) makecharset::c#1<(word) $100) goto makecharset::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [106] (byte[$28]) doplasma::xbuf#0 ← { fill( $28, 0) }
Constant right-side identified [107] (byte[$19]) doplasma::ybuf#0 ← { fill( $19, 0) }
Constant right-side identified [163] (byte[8]) makecharset::bittab#0 ← { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) BGCOL#0 = (byte*) 53281
Constant (const byte*) D018#0 = (byte*) 53272
Constant (const byte*) COLS#0 = (byte*) 55296
Constant (const byte) BLACK#0 = 0
Constant (const byte) BLUE#0 = 6
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const word*) SID_VOICE3_FREQ#0 = (word*) 54286
Constant (const byte*) SID_VOICE3_CONTROL#0 = (byte*) 54290
Constant (const byte) SID_CONTROL_NOISE#0 = $80
Constant (const byte*) SID_VOICE3_OSC#0 = (byte*) 54299
Constant (const byte*) SCREEN1#0 = (byte*) 10240
Constant (const byte*) CHARSET#0 = (byte*) 8192
Constant (const byte*) SINTABLE#0 = (byte*) 7936
Constant (const byte) c1A#16 = 0
Constant (const byte) c1B#16 = 0
Constant (const byte) c2A#17 = 0
Constant (const byte) c2B#17 = 0
Constant (const byte[$28]) doplasma::xbuf#0 = { fill( $28, 0) }
Constant (const byte[$19]) doplasma::ybuf#0 = { fill( $19, 0) }
Constant (const byte) doplasma::yprev#0 = 0
Constant (const byte) doplasma::i#0 = 0
Constant (const byte) doplasma::i1#0 = 0
Constant (const byte) doplasma::i2#0 = 0
Constant (const byte) doplasma::ii#0 = 0
Constant (const byte[8]) makecharset::bittab#0 = { 1, 2, 4, 8, $10, $20, $40, $80 }
Constant (const word) makecharset::c#0 = 0
Constant (const byte) makecharset::i#0 = 0
Constant (const byte) makecharset::b#0 = 0
Constant (const byte) makecharset::ii#0 = 0
Constant (const byte) print_char::ch#0 = '.'
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) main::col#0 = COLS#0
Constant (const byte*) makecharset::charset#0 = CHARSET#0
Constant (const byte*) main::toD0181_screen#0 = SCREEN1#0
Constant (const byte*) main::toD0181_gfx#0 = CHARSET#0
Constant (const byte*) doplasma::screen#0 = SCREEN1#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_screen#0 in [67] (word~) main::toD0181_$0#0 ← (word)(const byte*) main::toD0181_screen#0
Constant value identified (word)main::toD0181_gfx#0 in [71] (word~) main::toD0181_$4#0 ← (word)(const byte*) main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [83] if(true) goto main::@4
Successful SSA optimization Pass2ConstantIfs
De-inlining pointer[w] to *(pointer+w)   [196] *((byte*) makecharset::charset#6 + (word~) makecharset::$9) ← (byte) makecharset::b#3
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Self Phi Eliminated (byte*) doplasma::screen#2
Self Phi Eliminated (byte) c1A#20
Self Phi Eliminated (byte) c1B#20
Self Phi Eliminated (byte) c2A#22
Self Phi Eliminated (byte) c2B#22
Self Phi Eliminated (byte) makecharset::s#3
Self Phi Eliminated (word) makecharset::c#12
Self Phi Eliminated (byte*) makecharset::charset#6
Self Phi Eliminated (byte*) print_line_cursor#38
Self Phi Eliminated (byte*) print_char_cursor#43
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) doplasma::screen#2 (const byte*) doplasma::screen#0
Identical Phi Values (byte) c1A#20 (byte) c1A#3
Identical Phi Values (byte) c1B#20 (byte) c1B#3
Identical Phi Values (byte) c2A#22 (byte) c2A#3
Identical Phi Values (byte) c2B#22 (byte) c2B#3
Identical Phi Values (byte) makecharset::s#3 (byte) makecharset::s#0
Identical Phi Values (word) makecharset::c#12 (word) makecharset::c#2
Identical Phi Values (byte*) makecharset::charset#6 (byte*) makecharset::charset#7
Identical Phi Values (byte*) print_line_cursor#38 (byte*) print_line_cursor#39
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#44
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [6] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Constant right-side identified [18] (byte*~) main::$2 ← (const byte*) COLS#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const byte*) main::$2 = COLS#0+$3e8
Constant (const word) main::toD0181_$0#0 = (word)main::toD0181_screen#0
Constant (const word) main::toD0181_$4#0 = (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [21] main::col#1 ← ++ main::col#2 to ++
Resolved ranged comparison value [22] if(main::col#1!=rangelast(COLS#0,main::$2)) goto main::@1 to (byte*)(const byte*) main::$2+(number) 1
Eliminating unused variable - keeping the phi block (byte*) print_line_cursor#39
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 1 in if((byte*) main::col#1!=(byte*)(const byte*) main::$2+(number) 1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte*) main::$2+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (byte*) makecharset::charset#7
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) makecharset::charset#7 (const byte*) makecharset::charset#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [22] (word~) main::toD0181_$1#0 ← (const word) main::toD0181_$0#0 & (word) $3fff
Constant right-side identified [25] (byte~) main::toD0181_$5#0 ← > (const word) main::toD0181_$4#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::toD0181_$1#0 = main::toD0181_$0#0&$3fff
Constant (const byte) main::toD0181_$5#0 = >main::toD0181_$4#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [22] (word~) main::toD0181_$2#0 ← (const word) main::toD0181_$1#0 * (byte) 4
Constant right-side identified [24] (byte~) main::toD0181_$6#0 ← (const byte) main::toD0181_$5#0 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::toD0181_$2#0 = main::toD0181_$1#0*4
Constant (const byte) main::toD0181_$6#0 = main::toD0181_$5#0/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [22] (byte~) main::toD0181_$3#0 ← > (const word) main::toD0181_$2#0
Constant right-side identified [23] (byte~) main::toD0181_$7#0 ← (const byte) main::toD0181_$6#0 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_$3#0 = >main::toD0181_$2#0
Constant (const byte) main::toD0181_$7#0 = main::toD0181_$6#0&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [22] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$3#0 | (const byte) main::toD0181_$7#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_return#0 = main::toD0181_$3#0|main::toD0181_$7#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6 tails: doplasma::@6 blocks: doplasma::@6 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#0 = (byte) doplasma::val#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#2 (const byte) doplasma::ii#0
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [56] if((byte) doplasma::ii#1>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [52] (byte~) doplasma::$5 ← (const byte) doplasma::ii#0 * (byte) $28
Constant right-side identified [55] (byte) doplasma::ii#1 ← ++ (const byte) doplasma::ii#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$5 = doplasma::ii#0*$28
Constant (const byte) doplasma::ii#1 = ++doplasma::ii#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [56] if((const byte) doplasma::ii#1>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (const byte) doplasma::ii#0*(byte) $28 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero doplasma::ybuf#0 in [51] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0 + (const byte) doplasma::ii#0)
Simplifying expression containing zero doplasma::screen#0 in [53] (byte*~) doplasma::$6 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$5
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) doplasma::$5
Successful SSA optimization PassNEliminateUnusedVars
Constant (const byte*) doplasma::$6 = doplasma::screen#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_1 tails: doplasma::@6_1 blocks: doplasma::@6_1 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#1 = (byte) doplasma::val#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#3 (const byte) doplasma::ii#1
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [46] if((byte) doplasma::ii#4>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [42] (byte~) doplasma::$9 ← (const byte) doplasma::ii#1 * (byte) $28
Constant right-side identified [45] (byte) doplasma::ii#4 ← ++ (const byte) doplasma::ii#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$9 = doplasma::ii#1*$28
Constant (const byte) doplasma::ii#4 = ++doplasma::ii#1
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [46] if((const byte) doplasma::ii#4>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [41] (byte*~) doplasma::$10 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$9
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$10 = doplasma::screen#0+doplasma::$9
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_2 tails: doplasma::@6_2 blocks: doplasma::@6_2 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#4 = (byte) doplasma::val#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#5 (const byte) doplasma::ii#4
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [48] if((byte) doplasma::ii#6>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [44] (byte~) doplasma::$11 ← (const byte) doplasma::ii#4 * (byte) $28
Constant right-side identified [47] (byte) doplasma::ii#6 ← ++ (const byte) doplasma::ii#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$11 = doplasma::ii#4*$28
Constant (const byte) doplasma::ii#6 = ++doplasma::ii#4
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [48] if((const byte) doplasma::ii#6>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [43] (byte*~) doplasma::$12 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$11
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$12 = doplasma::screen#0+doplasma::$11
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_3 tails: doplasma::@6_3 blocks: doplasma::@6_3 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#6 = (byte) doplasma::val#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#7 (const byte) doplasma::ii#6
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [50] if((byte) doplasma::ii#8>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [46] (byte~) doplasma::$13 ← (const byte) doplasma::ii#6 * (byte) $28
Constant right-side identified [49] (byte) doplasma::ii#8 ← ++ (const byte) doplasma::ii#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$13 = doplasma::ii#6*$28
Constant (const byte) doplasma::ii#8 = ++doplasma::ii#6
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [50] if((const byte) doplasma::ii#8>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [45] (byte*~) doplasma::$14 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$13
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$14 = doplasma::screen#0+doplasma::$13
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_4 tails: doplasma::@6_4 blocks: doplasma::@6_4 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#8 = (byte) doplasma::val#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#9 (const byte) doplasma::ii#8
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [52] if((byte) doplasma::ii#10>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [48] (byte~) doplasma::$15 ← (const byte) doplasma::ii#8 * (byte) $28
Constant right-side identified [51] (byte) doplasma::ii#10 ← ++ (const byte) doplasma::ii#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$15 = doplasma::ii#8*$28
Constant (const byte) doplasma::ii#10 = ++doplasma::ii#8
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [52] if((const byte) doplasma::ii#10>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [47] (byte*~) doplasma::$16 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$16 = doplasma::screen#0+doplasma::$15
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_5 tails: doplasma::@6_5 blocks: doplasma::@6_5 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#10 = (byte) doplasma::val#11 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#11 (const byte) doplasma::ii#10
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [54] if((byte) doplasma::ii#12>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [50] (byte~) doplasma::$17 ← (const byte) doplasma::ii#10 * (byte) $28
Constant right-side identified [53] (byte) doplasma::ii#12 ← ++ (const byte) doplasma::ii#10
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$17 = doplasma::ii#10*$28
Constant (const byte) doplasma::ii#12 = ++doplasma::ii#10
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [54] if((const byte) doplasma::ii#12>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [49] (byte*~) doplasma::$18 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$17
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$18 = doplasma::screen#0+doplasma::$17
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_6 tails: doplasma::@6_6 blocks: doplasma::@6_6 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#12 = (byte) doplasma::val#13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#13 (const byte) doplasma::ii#12
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [56] if((byte) doplasma::ii#14>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [52] (byte~) doplasma::$19 ← (const byte) doplasma::ii#12 * (byte) $28
Constant right-side identified [55] (byte) doplasma::ii#14 ← ++ (const byte) doplasma::ii#12
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$19 = doplasma::ii#12*$28
Constant (const byte) doplasma::ii#14 = ++doplasma::ii#12
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [56] if((const byte) doplasma::ii#14>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [51] (byte*~) doplasma::$20 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$19
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$20 = doplasma::screen#0+doplasma::$19
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_7 tails: doplasma::@6_7 blocks: doplasma::@6_7 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#14 = (byte) doplasma::val#15 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#15 (const byte) doplasma::ii#14
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [58] if((byte) doplasma::ii#16>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [54] (byte~) doplasma::$21 ← (const byte) doplasma::ii#14 * (byte) $28
Constant right-side identified [57] (byte) doplasma::ii#16 ← ++ (const byte) doplasma::ii#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$21 = doplasma::ii#14*$28
Constant (const byte) doplasma::ii#16 = ++doplasma::ii#14
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [58] if((const byte) doplasma::ii#16>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [53] (byte*~) doplasma::$22 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$21
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$22 = doplasma::screen#0+doplasma::$21
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_8 tails: doplasma::@6_8 blocks: doplasma::@6_8 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#16 = (byte) doplasma::val#17 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#17 (const byte) doplasma::ii#16
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [60] if((byte) doplasma::ii#18>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [56] (byte~) doplasma::$23 ← (const byte) doplasma::ii#16 * (byte) $28
Constant right-side identified [59] (byte) doplasma::ii#18 ← ++ (const byte) doplasma::ii#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$23 = doplasma::ii#16*$28
Constant (const byte) doplasma::ii#18 = ++doplasma::ii#16
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [60] if((const byte) doplasma::ii#18>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [55] (byte*~) doplasma::$24 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$23
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$24 = doplasma::screen#0+doplasma::$23
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_9 tails: doplasma::@6_9 blocks: doplasma::@6_9 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#18 = (byte) doplasma::val#19 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#19 (const byte) doplasma::ii#18
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [62] if((byte) doplasma::ii#20>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [58] (byte~) doplasma::$25 ← (const byte) doplasma::ii#18 * (byte) $28
Constant right-side identified [61] (byte) doplasma::ii#20 ← ++ (const byte) doplasma::ii#18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$25 = doplasma::ii#18*$28
Constant (const byte) doplasma::ii#20 = ++doplasma::ii#18
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [62] if((const byte) doplasma::ii#20>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [57] (byte*~) doplasma::$26 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$25
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$26 = doplasma::screen#0+doplasma::$25
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_10 tails: doplasma::@6_10 blocks: doplasma::@6_10 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#20 = (byte) doplasma::val#21 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#21 (const byte) doplasma::ii#20
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [64] if((byte) doplasma::ii#22>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [60] (byte~) doplasma::$27 ← (const byte) doplasma::ii#20 * (byte) $28
Constant right-side identified [63] (byte) doplasma::ii#22 ← ++ (const byte) doplasma::ii#20
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$27 = doplasma::ii#20*$28
Constant (const byte) doplasma::ii#22 = ++doplasma::ii#20
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [64] if((const byte) doplasma::ii#22>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [59] (byte*~) doplasma::$28 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$27
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$28 = doplasma::screen#0+doplasma::$27
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_11 tails: doplasma::@6_11 blocks: doplasma::@6_11 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#22 = (byte) doplasma::val#23 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#23 (const byte) doplasma::ii#22
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [66] if((byte) doplasma::ii#24>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [62] (byte~) doplasma::$29 ← (const byte) doplasma::ii#22 * (byte) $28
Constant right-side identified [65] (byte) doplasma::ii#24 ← ++ (const byte) doplasma::ii#22
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$29 = doplasma::ii#22*$28
Constant (const byte) doplasma::ii#24 = ++doplasma::ii#22
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [66] if((const byte) doplasma::ii#24>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [61] (byte*~) doplasma::$30 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$29
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$30 = doplasma::screen#0+doplasma::$29
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_12 tails: doplasma::@6_12 blocks: doplasma::@6_12 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#24 = (byte) doplasma::val#25 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#25 (const byte) doplasma::ii#24
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [68] if((byte) doplasma::ii#26>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [64] (byte~) doplasma::$31 ← (const byte) doplasma::ii#24 * (byte) $28
Constant right-side identified [67] (byte) doplasma::ii#26 ← ++ (const byte) doplasma::ii#24
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$31 = doplasma::ii#24*$28
Constant (const byte) doplasma::ii#26 = ++doplasma::ii#24
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [68] if((const byte) doplasma::ii#26>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [63] (byte*~) doplasma::$32 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$31
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$32 = doplasma::screen#0+doplasma::$31
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_13 tails: doplasma::@6_13 blocks: doplasma::@6_13 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#26 = (byte) doplasma::val#27 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#27 (const byte) doplasma::ii#26
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [70] if((byte) doplasma::ii#28>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [66] (byte~) doplasma::$33 ← (const byte) doplasma::ii#26 * (byte) $28
Constant right-side identified [69] (byte) doplasma::ii#28 ← ++ (const byte) doplasma::ii#26
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$33 = doplasma::ii#26*$28
Constant (const byte) doplasma::ii#28 = ++doplasma::ii#26
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [70] if((const byte) doplasma::ii#28>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [65] (byte*~) doplasma::$34 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$33
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$34 = doplasma::screen#0+doplasma::$33
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_14 tails: doplasma::@6_14 blocks: doplasma::@6_14 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#28 = (byte) doplasma::val#29 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#29 (const byte) doplasma::ii#28
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [72] if((byte) doplasma::ii#30>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [68] (byte~) doplasma::$35 ← (const byte) doplasma::ii#28 * (byte) $28
Constant right-side identified [71] (byte) doplasma::ii#30 ← ++ (const byte) doplasma::ii#28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$35 = doplasma::ii#28*$28
Constant (const byte) doplasma::ii#30 = ++doplasma::ii#28
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [72] if((const byte) doplasma::ii#30>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [67] (byte*~) doplasma::$36 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$35
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$36 = doplasma::screen#0+doplasma::$35
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_15 tails: doplasma::@6_15 blocks: doplasma::@6_15 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#30 = (byte) doplasma::val#31 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#31 (const byte) doplasma::ii#30
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [74] if((byte) doplasma::ii#32>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [70] (byte~) doplasma::$37 ← (const byte) doplasma::ii#30 * (byte) $28
Constant right-side identified [73] (byte) doplasma::ii#32 ← ++ (const byte) doplasma::ii#30
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$37 = doplasma::ii#30*$28
Constant (const byte) doplasma::ii#32 = ++doplasma::ii#30
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [74] if((const byte) doplasma::ii#32>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [69] (byte*~) doplasma::$38 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$37
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$38 = doplasma::screen#0+doplasma::$37
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_16 tails: doplasma::@6_16 blocks: doplasma::@6_16 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#32 = (byte) doplasma::val#33 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#33 (const byte) doplasma::ii#32
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [76] if((byte) doplasma::ii#34>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [72] (byte~) doplasma::$39 ← (const byte) doplasma::ii#32 * (byte) $28
Constant right-side identified [75] (byte) doplasma::ii#34 ← ++ (const byte) doplasma::ii#32
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$39 = doplasma::ii#32*$28
Constant (const byte) doplasma::ii#34 = ++doplasma::ii#32
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [76] if((const byte) doplasma::ii#34>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [71] (byte*~) doplasma::$40 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$39
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$40 = doplasma::screen#0+doplasma::$39
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_17 tails: doplasma::@6_17 blocks: doplasma::@6_17 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#34 = (byte) doplasma::val#35 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#35 (const byte) doplasma::ii#34
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [78] if((byte) doplasma::ii#36>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [74] (byte~) doplasma::$41 ← (const byte) doplasma::ii#34 * (byte) $28
Constant right-side identified [77] (byte) doplasma::ii#36 ← ++ (const byte) doplasma::ii#34
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$41 = doplasma::ii#34*$28
Constant (const byte) doplasma::ii#36 = ++doplasma::ii#34
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [78] if((const byte) doplasma::ii#36>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [73] (byte*~) doplasma::$42 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$41
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$42 = doplasma::screen#0+doplasma::$41
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_18 tails: doplasma::@6_18 blocks: doplasma::@6_18 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#36 = (byte) doplasma::val#37 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#37 (const byte) doplasma::ii#36
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [80] if((byte) doplasma::ii#38>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [76] (byte~) doplasma::$43 ← (const byte) doplasma::ii#36 * (byte) $28
Constant right-side identified [79] (byte) doplasma::ii#38 ← ++ (const byte) doplasma::ii#36
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$43 = doplasma::ii#36*$28
Constant (const byte) doplasma::ii#38 = ++doplasma::ii#36
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [80] if((const byte) doplasma::ii#38>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [75] (byte*~) doplasma::$44 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$43
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$44 = doplasma::screen#0+doplasma::$43
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_19 tails: doplasma::@6_19 blocks: doplasma::@6_19 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#38 = (byte) doplasma::val#39 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#39 (const byte) doplasma::ii#38
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [82] if((byte) doplasma::ii#40>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [78] (byte~) doplasma::$45 ← (const byte) doplasma::ii#38 * (byte) $28
Constant right-side identified [81] (byte) doplasma::ii#40 ← ++ (const byte) doplasma::ii#38
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$45 = doplasma::ii#38*$28
Constant (const byte) doplasma::ii#40 = ++doplasma::ii#38
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [82] if((const byte) doplasma::ii#40>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [77] (byte*~) doplasma::$46 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$45
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$46 = doplasma::screen#0+doplasma::$45
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_20 tails: doplasma::@6_20 blocks: doplasma::@6_20 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#40 = (byte) doplasma::val#41 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#41 (const byte) doplasma::ii#40
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [84] if((byte) doplasma::ii#42>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [80] (byte~) doplasma::$47 ← (const byte) doplasma::ii#40 * (byte) $28
Constant right-side identified [83] (byte) doplasma::ii#42 ← ++ (const byte) doplasma::ii#40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$47 = doplasma::ii#40*$28
Constant (const byte) doplasma::ii#42 = ++doplasma::ii#40
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [84] if((const byte) doplasma::ii#42>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [79] (byte*~) doplasma::$48 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$47
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$48 = doplasma::screen#0+doplasma::$47
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_21 tails: doplasma::@6_21 blocks: doplasma::@6_21 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#42 = (byte) doplasma::val#43 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#43 (const byte) doplasma::ii#42
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [86] if((byte) doplasma::ii#44>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [82] (byte~) doplasma::$49 ← (const byte) doplasma::ii#42 * (byte) $28
Constant right-side identified [85] (byte) doplasma::ii#44 ← ++ (const byte) doplasma::ii#42
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$49 = doplasma::ii#42*$28
Constant (const byte) doplasma::ii#44 = ++doplasma::ii#42
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [86] if((const byte) doplasma::ii#44>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [81] (byte*~) doplasma::$50 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$49
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$50 = doplasma::screen#0+doplasma::$49
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_22 tails: doplasma::@6_22 blocks: doplasma::@6_22 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#44 = (byte) doplasma::val#45 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#45 (const byte) doplasma::ii#44
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [88] if((byte) doplasma::ii#46>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [84] (byte~) doplasma::$51 ← (const byte) doplasma::ii#44 * (byte) $28
Constant right-side identified [87] (byte) doplasma::ii#46 ← ++ (const byte) doplasma::ii#44
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$51 = doplasma::ii#44*$28
Constant (const byte) doplasma::ii#46 = ++doplasma::ii#44
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [88] if((const byte) doplasma::ii#46>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [83] (byte*~) doplasma::$52 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$51
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$52 = doplasma::screen#0+doplasma::$51
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_23 tails: doplasma::@6_23 blocks: doplasma::@6_23 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#46 = (byte) doplasma::val#47 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#47 (const byte) doplasma::ii#46
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [90] if((byte) doplasma::ii#48>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [86] (byte~) doplasma::$53 ← (const byte) doplasma::ii#46 * (byte) $28
Constant right-side identified [89] (byte) doplasma::ii#48 ← ++ (const byte) doplasma::ii#46
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$53 = doplasma::ii#46*$28
Constant (const byte) doplasma::ii#48 = ++doplasma::ii#46
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [90] if((const byte) doplasma::ii#48>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [85] (byte*~) doplasma::$54 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$53
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$54 = doplasma::screen#0+doplasma::$53
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: doplasma::@6_24 tails: doplasma::@6_24 blocks: doplasma::@6_24 
Successful SSA optimization Pass2LoopUnroll
Alias (byte) doplasma::val#48 = (byte) doplasma::val#49 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) doplasma::ii#49 (const byte) doplasma::ii#48
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [92] if((byte) doplasma::ii#50>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [88] (byte~) doplasma::$55 ← (const byte) doplasma::ii#48 * (byte) $28
Constant right-side identified [91] (byte) doplasma::ii#50 ← ++ (const byte) doplasma::ii#48
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) doplasma::$55 = doplasma::ii#48*$28
Constant (const byte) doplasma::ii#50 = ++doplasma::ii#48
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (doplasma::@6_24) in block doplasma::@6_25
Removing PHI-reference to removed block (doplasma::@6_24) in block doplasma::@6_25
if() condition always true - replacing block destination [92] if((const byte) doplasma::ii#50>=(byte) $19) goto doplasma::@7
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) doplasma::ii#50
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) doplasma::val#51 from unused block doplasma::@6_25
Eliminating variable (byte) doplasma::ii#51 from unused block doplasma::@6_25
Eliminating variable (byte) doplasma::val#52 from unused block doplasma::@6_25
Eliminating variable (byte~) doplasma::$57 from unused block doplasma::@6_25
Eliminating variable (byte*~) doplasma::$58 from unused block doplasma::@6_25
Eliminating variable (byte) doplasma::ii#52 from unused block doplasma::@6_25
Removing unused block doplasma::@6_25
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant right-side identified [87] (byte*~) doplasma::$56 ← (const byte*) doplasma::screen#0 + (const byte) doplasma::$55
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) doplasma::$56 = doplasma::screen#0+doplasma::$55
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [107] (word~) makecharset::$8 ← (word) makecharset::c#2 * (byte) 8
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) main::col#0
Inlining constant with var siblings (const byte) doplasma::yprev#0
Inlining constant with var siblings (const byte) doplasma::i#0
Inlining constant with var siblings (const byte) doplasma::i1#0
Inlining constant with var siblings (const byte) doplasma::i2#0
Inlining constant with different constant siblings (const byte) doplasma::ii#0
Inlining constant with different constant siblings (const byte) doplasma::ii#1
Inlining constant with different constant siblings (const byte) doplasma::ii#4
Inlining constant with different constant siblings (const byte) doplasma::ii#6
Inlining constant with different constant siblings (const byte) doplasma::ii#8
Inlining constant with different constant siblings (const byte) doplasma::ii#10
Inlining constant with different constant siblings (const byte) doplasma::ii#12
Inlining constant with different constant siblings (const byte) doplasma::ii#14
Inlining constant with different constant siblings (const byte) doplasma::ii#16
Inlining constant with different constant siblings (const byte) doplasma::ii#18
Inlining constant with different constant siblings (const byte) doplasma::ii#20
Inlining constant with different constant siblings (const byte) doplasma::ii#22
Inlining constant with different constant siblings (const byte) doplasma::ii#24
Inlining constant with different constant siblings (const byte) doplasma::ii#26
Inlining constant with different constant siblings (const byte) doplasma::ii#28
Inlining constant with different constant siblings (const byte) doplasma::ii#30
Inlining constant with different constant siblings (const byte) doplasma::ii#32
Inlining constant with different constant siblings (const byte) doplasma::ii#34
Inlining constant with different constant siblings (const byte) doplasma::ii#36
Inlining constant with different constant siblings (const byte) doplasma::ii#38
Inlining constant with different constant siblings (const byte) doplasma::ii#40
Inlining constant with different constant siblings (const byte) doplasma::ii#42
Inlining constant with different constant siblings (const byte) doplasma::ii#44
Inlining constant with different constant siblings (const byte) doplasma::ii#46
Inlining constant with different constant siblings (const byte) doplasma::ii#48
Inlining constant with var siblings (const word) makecharset::c#0
Inlining constant with var siblings (const byte) makecharset::i#0
Inlining constant with var siblings (const byte) makecharset::b#0
Inlining constant with var siblings (const byte) makecharset::ii#0
Inlining constant with var siblings (const byte) c1A#16
Inlining constant with var siblings (const byte) c1B#16
Inlining constant with var siblings (const byte) c2A#17
Inlining constant with var siblings (const byte) c2B#17
Constant inlined doplasma::ii#46 = ++++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#48 = ++++++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::col#0 = (const byte*) COLS#0
Constant inlined doplasma::ii#40 = ++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#42 = ++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#44 = ++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#6 = ++++++(byte) 0
Constant inlined doplasma::ii#8 = ++++++++(byte) 0
Constant inlined c1A#16 = (byte) 0
Constant inlined doplasma::ii#0 = (byte) 0
Constant inlined doplasma::ii#1 = ++(byte) 0
Constant inlined doplasma::ii#4 = ++++(byte) 0
Constant inlined main::toD0181_$7#0 = >(word)(const byte*) CHARSET#0/(byte) 4&(byte) $f
Constant inlined main::toD0181_$3#0 = >(word)(const byte*) SCREEN1#0&(word) $3fff*(byte) 4
Constant inlined doplasma::$56 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$53 = ++++++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$52 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$55 = ++++++++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined makecharset::c#0 = (byte) 0
Constant inlined doplasma::$54 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$51 = ++++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$50 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined main::toD0181_screen#0 = (const byte*) SCREEN1#0
Constant inlined doplasma::ii#24 = ++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#26 = ++++++++++++++++++++++++++(byte) 0
Constant inlined print_cls::$0 = (const byte*) print_line_cursor#0+(word) $3e8
Constant inlined doplasma::ii#28 = ++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#20 = ++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#22 = ++++++++++++++++++++++(byte) 0
Constant inlined doplasma::$9 = ++(byte) 0*(byte) $28
Constant inlined doplasma::$6 = (const byte*) SCREEN1#0
Constant inlined doplasma::ii#36 = ++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#38 = ++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::toD0181_$0#0 = (word)(const byte*) SCREEN1#0
Constant inlined doplasma::ii#30 = ++++++++++++++++++++++++++++++(byte) 0
Constant inlined print_cls::sc#0 = (const byte*) print_line_cursor#0
Constant inlined doplasma::ii#32 = ++++++++++++++++++++++++++++++++(byte) 0
Constant inlined doplasma::ii#34 = ++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::$2 = (const byte*) COLS#0+(word) $3e8
Constant inlined main::toD0181_$4#0 = (word)(const byte*) CHARSET#0
Constant inlined c2B#17 = (byte) 0
Constant inlined doplasma::i2#0 = (byte) 0
Constant inlined doplasma::$28 = (const byte*) SCREEN1#0+++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$27 = ++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$29 = ++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$24 = (const byte*) SCREEN1#0+++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$23 = ++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$26 = (const byte*) SCREEN1#0+++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$25 = ++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$20 = (const byte*) SCREEN1#0+++++++++++++(byte) 0*(byte) $28
Constant inlined c2A#17 = (byte) 0
Constant inlined doplasma::$22 = (const byte*) SCREEN1#0+++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$21 = ++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::ii#14 = ++++++++++++++(byte) 0
Constant inlined doplasma::ii#16 = ++++++++++++++++(byte) 0
Constant inlined doplasma::ii#18 = ++++++++++++++++++(byte) 0
Constant inlined main::toD0181_$1#0 = (word)(const byte*) SCREEN1#0&(word) $3fff
Constant inlined doplasma::ii#10 = ++++++++++(byte) 0
Constant inlined doplasma::ii#12 = ++++++++++++(byte) 0
Constant inlined makecharset::ii#0 = (byte) 0
Constant inlined doplasma::$17 = ++++++++++(byte) 0*(byte) $28
Constant inlined makecharset::i#0 = (byte) 0
Constant inlined makecharset::charset#0 = (const byte*) CHARSET#0
Constant inlined doplasma::$16 = (const byte*) SCREEN1#0+++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$19 = ++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$18 = (const byte*) SCREEN1#0+++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::screen#0 = (const byte*) SCREEN1#0
Constant inlined doplasma::$13 = ++++++(byte) 0*(byte) $28
Constant inlined doplasma::$12 = (const byte*) SCREEN1#0+++++(byte) 0*(byte) $28
Constant inlined doplasma::$15 = ++++++++(byte) 0*(byte) $28
Constant inlined main::toD0181_$5#0 = >(word)(const byte*) CHARSET#0
Constant inlined doplasma::$14 = (const byte*) SCREEN1#0+++++++(byte) 0*(byte) $28
Constant inlined doplasma::$11 = ++++(byte) 0*(byte) $28
Constant inlined doplasma::$10 = (const byte*) SCREEN1#0+++(byte) 0*(byte) $28
Constant inlined main::toD0181_gfx#0 = (const byte*) CHARSET#0
Constant inlined doplasma::i#0 = (byte) 0
Constant inlined doplasma::i1#0 = (byte) 0
Constant inlined doplasma::yprev#0 = (byte) 0
Constant inlined doplasma::$49 = ++++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$46 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$45 = ++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$48 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$47 = ++++++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$42 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$41 = ++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$44 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$43 = ++++++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$40 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined main::toD0181_$6#0 = >(word)(const byte*) CHARSET#0/(byte) 4
Constant inlined doplasma::$39 = ++++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$38 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined main::toD0181_$2#0 = (word)(const byte*) SCREEN1#0&(word) $3fff*(byte) 4
Constant inlined doplasma::$35 = ++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined c1B#16 = (byte) 0
Constant inlined doplasma::$34 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$37 = ++++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$36 = (const byte*) SCREEN1#0+++++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$31 = ++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$30 = (const byte*) SCREEN1#0+++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined makecharset::b#0 = (byte) 0
Constant inlined doplasma::$33 = ++++++++++++++++++++++++++(byte) 0*(byte) $28
Constant inlined doplasma::$32 = (const byte*) SCREEN1#0+++++++++++++++++++++++++(byte) 0*(byte) $28
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(doplasma::ybuf#0+++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(doplasma::ybuf#0+++++++++++++++++++++++++++++++++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$13
Simplifying constant integer increment ++$13
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Simplifying constant integer increment ++$16
Simplifying constant integer increment ++$17
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$13
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Simplifying constant integer increment ++$17
Successful SSA optimization Pass2ConstantSimplification
Added new block during phi lifting main::@12(between main::@1 and main::@1)
Added new block during phi lifting doplasma::@9(between doplasma::@1 and doplasma::@1)
Added new block during phi lifting doplasma::@10(between doplasma::@3 and doplasma::@3)
Added new block during phi lifting doplasma::@11(between doplasma::@7 and doplasma::@5)
Added new block during phi lifting makecharset::@15(between makecharset::@9 and makecharset::@1)
Added new block during phi lifting makecharset::@16(between makecharset::@6 and makecharset::@2)
Added new block during phi lifting makecharset::@17(between makecharset::@4 and makecharset::@3)
Added new block during phi lifting makecharset::@18(between makecharset::@13 and makecharset::@4)
Added new block during phi lifting makecharset::@19(between makecharset::@7 and makecharset::@9)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @23
Adding NOP phi() at start of @26
Adding NOP phi() at start of @28
Adding NOP phi() at start of @29
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@11
Adding NOP phi() at start of makecharset::@12
Adding NOP phi() at start of makecharset::@8
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to makecharset:17 doplasma:24 
Calls in [makecharset] to sid_rnd_init:121 print_cls:123 sid_rnd:130 print_char:149 

Created 21 initial phi equivalence classes
Coalesced [25] c1A#28 ← c1A#3
Coalesced [26] c1B#28 ← c1B#3
Coalesced [27] c2A#28 ← c2A#3
Coalesced [28] c2B#28 ← c2B#3
Coalesced [29] main::col#3 ← main::col#1
Coalesced [32] doplasma::c1a#3 ← doplasma::c1a#0
Coalesced [33] doplasma::c1b#3 ← doplasma::c1b#0
Coalesced [46] doplasma::c2a#3 ← doplasma::c2a#0
Coalesced [47] doplasma::c2b#3 ← doplasma::c2b#0
Coalesced [112] doplasma::i2#5 ← doplasma::i2#1
Coalesced [113] doplasma::c2a#4 ← doplasma::c2a#1
Coalesced [114] doplasma::c2b#4 ← doplasma::c2b#1
Coalesced [115] doplasma::i1#3 ← doplasma::i1#1
Coalesced [116] doplasma::c1a#4 ← doplasma::c1a#1
Coalesced [117] doplasma::c1b#4 ← doplasma::c1b#1
Not coalescing [118] doplasma::yprev#3 ← doplasma::yval#0
Coalesced [119] doplasma::i#3 ← doplasma::i#1
Coalesced [136] makecharset::b#9 ← makecharset::b#1
Coalesced [150] print_char_cursor#46 ← print_char_cursor#1
Coalesced [155] makecharset::c#13 ← makecharset::c#1
Coalesced [156] print_char_cursor#45 ← print_char_cursor#18
Coalesced (already) [157] print_char_cursor#47 ← print_char_cursor#44
Coalesced [158] makecharset::i#8 ← makecharset::i#1
Coalesced [159] makecharset::ii#6 ← makecharset::ii#1
Coalesced [160] makecharset::b#7 ← makecharset::b#3
Coalesced (already) [161] makecharset::b#8 ← makecharset::b#2
Coalesced [174] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 20 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @23
Culled Empty Block (label) @26
Culled Empty Block (label) @29
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12
Culled Empty Block (label) doplasma::@11
Culled Empty Block (label) doplasma::@10
Culled Empty Block (label) makecharset::@12
Culled Empty Block (label) makecharset::@14
Culled Empty Block (label) makecharset::@15
Culled Empty Block (label) makecharset::@19
Culled Empty Block (label) makecharset::@16
Culled Empty Block (label) makecharset::@17
Culled Empty Block (label) makecharset::@18
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @25 to @1
Renumbering block @28 to @2
Renumbering block main::@9 to main::@5
Renumbering block doplasma::@9 to doplasma::@8
Renumbering block makecharset::@11 to makecharset::@10
Renumbering block makecharset::@13 to makecharset::@11
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@10
Adding NOP phi() at start of makecharset::@8
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0
  [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [8] (byte*) main::col#2 ← phi( main/(const byte*) COLS#0 main::@1/(byte*) main::col#1 )
  [9] *((byte*) main::col#2) ← (const byte) BLACK#0
  [10] (byte*) main::col#1 ← ++ (byte*) main::col#2
  [11] if((byte*) main::col#1!=(const byte*) COLS#0+(word) $3e8+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call makecharset 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@2
  [14] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@5
  [16] (byte) c2B#1 ← phi( main::@4/(byte) c2B#3 main::@5/(byte) 0 )
  [16] (byte) c2A#1 ← phi( main::@4/(byte) c2A#3 main::@5/(byte) 0 )
  [16] (byte) c1B#1 ← phi( main::@4/(byte) c1B#3 main::@5/(byte) 0 )
  [16] (byte) c1A#1 ← phi( main::@4/(byte) c1A#3 main::@5/(byte) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] phi()
  [18] call doplasma 
  to:main::@3
doplasma: scope:[doplasma]  from main::@4
  [19] (byte) doplasma::c1a#0 ← (byte) c1A#1
  [20] (byte) doplasma::c1b#0 ← (byte) c1B#1
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@8
  [21] (byte) doplasma::i#2 ← phi( doplasma/(byte) 0 doplasma::@8/(byte) doplasma::i#1 )
  [21] (byte) doplasma::yprev#2 ← phi( doplasma/(byte) 0 doplasma::@8/(byte~) doplasma::yprev#3 )
  [21] (byte) doplasma::c1b#2 ← phi( doplasma/(byte) doplasma::c1b#0 doplasma::@8/(byte) doplasma::c1b#1 )
  [21] (byte) doplasma::c1a#2 ← phi( doplasma/(byte) doplasma::c1a#0 doplasma::@8/(byte) doplasma::c1a#1 )
  [22] (byte) doplasma::yval#0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2)
  [23] (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2
  [24] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$1
  [25] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4
  [26] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9
  [27] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2
  [28] if((byte) doplasma::i#1<(byte) $19) goto doplasma::@8
  to:doplasma::@2
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [29] (byte) c1A#3 ← (byte) c1A#1 + (byte) 3
  [30] (byte) c1B#3 ← (byte) c1B#1 - (byte) 5
  [31] (byte) doplasma::c2a#0 ← (byte) c2A#1
  [32] (byte) doplasma::c2b#0 ← (byte) c2B#1
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@2 doplasma::@3
  [33] (byte) doplasma::i1#2 ← phi( doplasma::@2/(byte) 0 doplasma::@3/(byte) doplasma::i1#1 )
  [33] (byte) doplasma::c2b#2 ← phi( doplasma::@2/(byte) doplasma::c2b#0 doplasma::@3/(byte) doplasma::c2b#1 )
  [33] (byte) doplasma::c2a#2 ← phi( doplasma::@2/(byte) doplasma::c2a#0 doplasma::@3/(byte) doplasma::c2a#1 )
  [34] (byte~) doplasma::$3 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2)
  [35] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$3
  [36] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3
  [37] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7
  [38] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2
  [39] if((byte) doplasma::i1#1<(byte) $28) goto doplasma::@3
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3
  [40] (byte) c2A#3 ← (byte) c2A#1 + (byte) 2
  [41] (byte) c2B#3 ← (byte) c2B#1 - (byte) 3
  to:doplasma::@5
doplasma::@5: scope:[doplasma]  from doplasma::@4 doplasma::@7
  [42] (byte) doplasma::i2#2 ← phi( doplasma::@4/(byte) 0 doplasma::@7/(byte) doplasma::i2#1 )
  [43] (byte) doplasma::val#0 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2)
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@5
  [44] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0)
  [45] *((const byte*) SCREEN1#0 + (byte) doplasma::i2#2) ← (byte) doplasma::val#1
  to:doplasma::@6_1
doplasma::@6_1: scope:[doplasma]  from doplasma::@6
  [46] (byte) doplasma::val#4 ← (byte) doplasma::val#1 + *((const byte[$19]) doplasma::ybuf#0+(byte) 1)
  [47] *((const byte*) SCREEN1#0+(byte) 1*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#4
  to:doplasma::@6_2
doplasma::@6_2: scope:[doplasma]  from doplasma::@6_1
  [48] (byte) doplasma::val#6 ← (byte) doplasma::val#4 + *((const byte[$19]) doplasma::ybuf#0+(byte) 2)
  [49] *((const byte*) SCREEN1#0+(byte) 2*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#6
  to:doplasma::@6_3
doplasma::@6_3: scope:[doplasma]  from doplasma::@6_2
  [50] (byte) doplasma::val#8 ← (byte) doplasma::val#6 + *((const byte[$19]) doplasma::ybuf#0+(byte) 3)
  [51] *((const byte*) SCREEN1#0+(byte) 3*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#8
  to:doplasma::@6_4
doplasma::@6_4: scope:[doplasma]  from doplasma::@6_3
  [52] (byte) doplasma::val#10 ← (byte) doplasma::val#8 + *((const byte[$19]) doplasma::ybuf#0+(byte) 4)
  [53] *((const byte*) SCREEN1#0+(byte) 4*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#10
  to:doplasma::@6_5
doplasma::@6_5: scope:[doplasma]  from doplasma::@6_4
  [54] (byte) doplasma::val#12 ← (byte) doplasma::val#10 + *((const byte[$19]) doplasma::ybuf#0+(byte) 5)
  [55] *((const byte*) SCREEN1#0+(byte) 5*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#12
  to:doplasma::@6_6
doplasma::@6_6: scope:[doplasma]  from doplasma::@6_5
  [56] (byte) doplasma::val#14 ← (byte) doplasma::val#12 + *((const byte[$19]) doplasma::ybuf#0+(byte) 6)
  [57] *((const byte*) SCREEN1#0+(byte) 6*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#14
  to:doplasma::@6_7
doplasma::@6_7: scope:[doplasma]  from doplasma::@6_6
  [58] (byte) doplasma::val#16 ← (byte) doplasma::val#14 + *((const byte[$19]) doplasma::ybuf#0+(byte) 7)
  [59] *((const byte*) SCREEN1#0+(byte) 7*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#16
  to:doplasma::@6_8
doplasma::@6_8: scope:[doplasma]  from doplasma::@6_7
  [60] (byte) doplasma::val#18 ← (byte) doplasma::val#16 + *((const byte[$19]) doplasma::ybuf#0+(byte) 8)
  [61] *((const byte*) SCREEN1#0+(byte) 8*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#18
  to:doplasma::@6_9
doplasma::@6_9: scope:[doplasma]  from doplasma::@6_8
  [62] (byte) doplasma::val#20 ← (byte) doplasma::val#18 + *((const byte[$19]) doplasma::ybuf#0+(byte) 9)
  [63] *((const byte*) SCREEN1#0+(byte) 9*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#20
  to:doplasma::@6_10
doplasma::@6_10: scope:[doplasma]  from doplasma::@6_9
  [64] (byte) doplasma::val#22 ← (byte) doplasma::val#20 + *((const byte[$19]) doplasma::ybuf#0+(byte) $a)
  [65] *((const byte*) SCREEN1#0+(byte) $a*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#22
  to:doplasma::@6_11
doplasma::@6_11: scope:[doplasma]  from doplasma::@6_10
  [66] (byte) doplasma::val#24 ← (byte) doplasma::val#22 + *((const byte[$19]) doplasma::ybuf#0+(byte) $b)
  [67] *((const byte*) SCREEN1#0+(byte) $b*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#24
  to:doplasma::@6_12
doplasma::@6_12: scope:[doplasma]  from doplasma::@6_11
  [68] (byte) doplasma::val#26 ← (byte) doplasma::val#24 + *((const byte[$19]) doplasma::ybuf#0+(byte) $c)
  [69] *((const byte*) SCREEN1#0+(byte) $c*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#26
  to:doplasma::@6_13
doplasma::@6_13: scope:[doplasma]  from doplasma::@6_12
  [70] (byte) doplasma::val#28 ← (byte) doplasma::val#26 + *((const byte[$19]) doplasma::ybuf#0+(byte) $d)
  [71] *((const byte*) SCREEN1#0+(byte) $d*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#28
  to:doplasma::@6_14
doplasma::@6_14: scope:[doplasma]  from doplasma::@6_13
  [72] (byte) doplasma::val#30 ← (byte) doplasma::val#28 + *((const byte[$19]) doplasma::ybuf#0+(byte) $e)
  [73] *((const byte*) SCREEN1#0+(byte) $e*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#30
  to:doplasma::@6_15
doplasma::@6_15: scope:[doplasma]  from doplasma::@6_14
  [74] (byte) doplasma::val#32 ← (byte) doplasma::val#30 + *((const byte[$19]) doplasma::ybuf#0+(byte) $f)
  [75] *((const byte*) SCREEN1#0+(byte) $f*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#32
  to:doplasma::@6_16
doplasma::@6_16: scope:[doplasma]  from doplasma::@6_15
  [76] (byte) doplasma::val#34 ← (byte) doplasma::val#32 + *((const byte[$19]) doplasma::ybuf#0+(byte) $10)
  [77] *((const byte*) SCREEN1#0+(byte) $10*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#34
  to:doplasma::@6_17
doplasma::@6_17: scope:[doplasma]  from doplasma::@6_16
  [78] (byte) doplasma::val#36 ← (byte) doplasma::val#34 + *((const byte[$19]) doplasma::ybuf#0+(byte) $11)
  [79] *((const byte*) SCREEN1#0+(byte) $11*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#36
  to:doplasma::@6_18
doplasma::@6_18: scope:[doplasma]  from doplasma::@6_17
  [80] (byte) doplasma::val#38 ← (byte) doplasma::val#36 + *((const byte[$19]) doplasma::ybuf#0+(byte) $12)
  [81] *((const byte*) SCREEN1#0+(byte) $12*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#38
  to:doplasma::@6_19
doplasma::@6_19: scope:[doplasma]  from doplasma::@6_18
  [82] (byte) doplasma::val#40 ← (byte) doplasma::val#38 + *((const byte[$19]) doplasma::ybuf#0+(byte) $13)
  [83] *((const byte*) SCREEN1#0+(byte) $13*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#40
  to:doplasma::@6_20
doplasma::@6_20: scope:[doplasma]  from doplasma::@6_19
  [84] (byte) doplasma::val#42 ← (byte) doplasma::val#40 + *((const byte[$19]) doplasma::ybuf#0+(byte) $14)
  [85] *((const byte*) SCREEN1#0+(byte) $14*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#42
  to:doplasma::@6_21
doplasma::@6_21: scope:[doplasma]  from doplasma::@6_20
  [86] (byte) doplasma::val#44 ← (byte) doplasma::val#42 + *((const byte[$19]) doplasma::ybuf#0+(byte) $15)
  [87] *((const byte*) SCREEN1#0+(byte) $15*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#44
  to:doplasma::@6_22
doplasma::@6_22: scope:[doplasma]  from doplasma::@6_21
  [88] (byte) doplasma::val#46 ← (byte) doplasma::val#44 + *((const byte[$19]) doplasma::ybuf#0+(byte) $16)
  [89] *((const byte*) SCREEN1#0+(byte) $16*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#46
  to:doplasma::@6_23
doplasma::@6_23: scope:[doplasma]  from doplasma::@6_22
  [90] (byte) doplasma::val#48 ← (byte) doplasma::val#46 + *((const byte[$19]) doplasma::ybuf#0+(byte) $17)
  [91] *((const byte*) SCREEN1#0+(byte) $17*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#48
  to:doplasma::@6_24
doplasma::@6_24: scope:[doplasma]  from doplasma::@6_23
  [92] (byte) doplasma::val#50 ← (byte) doplasma::val#48 + *((const byte[$19]) doplasma::ybuf#0+(byte) $18)
  [93] *((const byte*) SCREEN1#0+(byte) $18*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#50
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@6_24
  [94] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2
  [95] if((byte) doplasma::i2#1<(byte) $28) goto doplasma::@5
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  [96] return 
  to:@return
doplasma::@8: scope:[doplasma]  from doplasma::@1
  [97] (byte~) doplasma::yprev#3 ← (byte) doplasma::yval#0
  to:doplasma::@1
makecharset: scope:[makecharset]  from main::@2
  [98] phi()
  [99] call sid_rnd_init 
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset
  [100] phi()
  [101] call print_cls 
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@10 makecharset::@9
  [102] (byte*) print_char_cursor#44 ← phi( makecharset::@10/(const byte*) print_line_cursor#0 makecharset::@9/(byte*) print_char_cursor#18 )
  [102] (word) makecharset::c#2 ← phi( makecharset::@10/(byte) 0 makecharset::@9/(word) makecharset::c#1 )
  [103] (byte~) makecharset::$2 ← < (word) makecharset::c#2
  [104] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2)
  to:makecharset::@2
makecharset::@2: scope:[makecharset]  from makecharset::@1 makecharset::@6
  [105] (byte) makecharset::i#7 ← phi( makecharset::@1/(byte) 0 makecharset::@6/(byte) makecharset::i#1 )
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@4
  [106] (byte) makecharset::b#2 ← phi( makecharset::@2/(byte) 0 makecharset::@4/(byte) makecharset::b#3 )
  [106] (byte) makecharset::ii#2 ← phi( makecharset::@2/(byte) 0 makecharset::@4/(byte) makecharset::ii#1 )
  [107] call sid_rnd 
  [108] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::@3
  [109] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2
  [110] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte) $ff
  [111] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@11
  [112] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2)
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@11 makecharset::@5
  [113] (byte) makecharset::b#3 ← phi( makecharset::@11/(byte) makecharset::b#2 makecharset::@5/(byte) makecharset::b#1 )
  [114] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  [115] if((byte) makecharset::ii#1<(byte) 8) goto makecharset::@3
  to:makecharset::@6
makecharset::@6: scope:[makecharset]  from makecharset::@4
  [116] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte) 3
  [117] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7
  [118] (byte*~) makecharset::$16 ← (const byte*) CHARSET#0 + (word~) makecharset::$9
  [119] *((byte*~) makecharset::$16) ← (byte) makecharset::b#3
  [120] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7
  [121] if((byte) makecharset::i#1<(byte) 8) goto makecharset::@2
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  [122] (byte~) makecharset::$11 ← (word) makecharset::c#2 & (byte) 7
  [123] if((byte~) makecharset::$11!=(byte) 0) goto makecharset::@9
  to:makecharset::@8
makecharset::@8: scope:[makecharset]  from makecharset::@7
  [124] phi()
  [125] call print_char 
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@7 makecharset::@8
  [126] (byte*) print_char_cursor#18 ← phi( makecharset::@8/(byte*) print_char_cursor#1 makecharset::@7/(byte*) print_char_cursor#44 )
  [127] (word) makecharset::c#1 ← ++ (word) makecharset::c#2
  [128] if((word) makecharset::c#1<(word) $100) goto makecharset::@1
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@9
  [129] return 
  to:@return
print_char: scope:[print_char]  from makecharset::@8
  [130] *((byte*) print_char_cursor#44) ← (const byte) print_char::ch#0
  [131] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#44
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [132] return 
  to:@return
sid_rnd: scope:[sid_rnd]  from makecharset::@3
  [133] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [134] return 
  to:@return
print_cls: scope:[print_cls]  from makecharset::@10
  [135] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [136] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) print_line_cursor#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [137] *((byte*) print_cls::sc#2) ← (byte) ' '
  [138] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [139] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [140] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from makecharset
  [141] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff
  [142] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [143] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte*) CHARSET
(byte*) COLS
(byte*) D018
(byte*) SCREEN1
(byte) SID_CONTROL_NOISE
(byte*) SID_VOICE3_CONTROL
(word*) SID_VOICE3_FREQ
(byte*) SID_VOICE3_OSC
(byte*) SINTABLE
(byte) c1A
(byte) c1A#1 1.1538461538461537
(byte) c1A#3 0.18840579710144925
(byte) c1B
(byte) c1B#1 1.0714285714285714
(byte) c1B#3 0.1911764705882353
(byte) c2A
(byte) c2A#1 0.625
(byte) c2A#3 0.22413793103448276
(byte) c2B
(byte) c2B#1 0.6
(byte) c2B#3 0.22807017543859648
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$1 202.0
(byte~) doplasma::$3 202.0
(byte) doplasma::c1a
(byte) doplasma::c1a#0 2.0
(byte) doplasma::c1a#1 40.4
(byte) doplasma::c1a#2 76.25
(byte) doplasma::c1b
(byte) doplasma::c1b#0 4.0
(byte) doplasma::c1b#1 50.5
(byte) doplasma::c1b#2 61.0
(byte) doplasma::c2a
(byte) doplasma::c2a#0 2.0
(byte) doplasma::c2a#1 50.5
(byte) doplasma::c2a#2 101.66666666666666
(byte) doplasma::c2b
(byte) doplasma::c2b#0 4.0
(byte) doplasma::c2b#1 67.33333333333333
(byte) doplasma::c2b#2 76.25
(byte) doplasma::i
(byte) doplasma::i#1 101.0
(byte) doplasma::i#2 50.5
(byte) doplasma::i1
(byte) doplasma::i1#1 151.5
(byte) doplasma::i1#2 60.599999999999994
(byte) doplasma::i2
(byte) doplasma::i2#1 151.5
(byte) doplasma::i2#2 54.3846153846154
(byte) doplasma::ii
(byte*) doplasma::screen
(byte) doplasma::val
(byte) doplasma::val#0 202.0
(byte) doplasma::val#1 151.5
(byte) doplasma::val#10 151.5
(byte) doplasma::val#12 151.5
(byte) doplasma::val#14 151.5
(byte) doplasma::val#16 151.5
(byte) doplasma::val#18 151.5
(byte) doplasma::val#20 151.5
(byte) doplasma::val#22 151.5
(byte) doplasma::val#24 151.5
(byte) doplasma::val#26 151.5
(byte) doplasma::val#28 151.5
(byte) doplasma::val#30 151.5
(byte) doplasma::val#32 151.5
(byte) doplasma::val#34 151.5
(byte) doplasma::val#36 151.5
(byte) doplasma::val#38 151.5
(byte) doplasma::val#4 151.5
(byte) doplasma::val#40 151.5
(byte) doplasma::val#42 151.5
(byte) doplasma::val#44 151.5
(byte) doplasma::val#46 151.5
(byte) doplasma::val#48 151.5
(byte) doplasma::val#50 202.0
(byte) doplasma::val#6 151.5
(byte) doplasma::val#8 151.5
(byte[$28]) doplasma::xbuf
(byte[$19]) doplasma::ybuf
(byte) doplasma::yprev
(byte) doplasma::yprev#2 101.0
(byte~) doplasma::yprev#3 202.0
(byte) doplasma::yval
(byte) doplasma::yval#0 43.285714285714285
(void()) main()
(byte*) main::col
(byte*) main::col#1 16.5
(byte*) main::col#2 16.5
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(void()) makecharset((byte*) makecharset::charset)
(byte~) makecharset::$11 22.0
(byte*~) makecharset::$16 202.0
(byte~) makecharset::$2 22.0
(byte~) makecharset::$3 2002.0
(byte~) makecharset::$4 2002.0
(word~) makecharset::$8 202.0
(word~) makecharset::$9 202.0
(byte) makecharset::b
(byte) makecharset::b#1 2002.0
(byte) makecharset::b#2 500.5
(byte) makecharset::b#3 517.3333333333334
(byte[8]) makecharset::bittab
(word) makecharset::c
(word) makecharset::c#1 16.5
(word) makecharset::c#2 5.800000000000001
(byte*) makecharset::charset
(byte) makecharset::i
(byte) makecharset::i#1 151.5
(byte) makecharset::i#7 20.2
(byte) makecharset::ii
(byte) makecharset::ii#1 1501.5
(byte) makecharset::ii#2 375.375
(byte) makecharset::s
(byte) makecharset::s#0 56.22222222222223
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte*) print_char_cursor
(byte*) print_char_cursor#1 4.333333333333333
(byte*) print_char_cursor#18 11.0
(byte*) print_char_cursor#44 1.0833333333333333
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte*) print_line_cursor
(byte*) print_screen
(byte()) sid_rnd()
(byte) sid_rnd::return
(byte) sid_rnd::return#0 334.33333333333337
(byte) sid_rnd::return#2 2002.0
(void()) sid_rnd_init()

Initial phi equivalence classes
[ main::col#2 main::col#1 ]
[ c1A#1 c1A#3 ]
[ c1B#1 c1B#3 ]
[ c2A#1 c2A#3 ]
[ c2B#1 c2B#3 ]
[ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
[ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
[ doplasma::yprev#2 doplasma::yprev#3 ]
[ doplasma::i#2 doplasma::i#1 ]
[ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
[ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
[ doplasma::i1#2 doplasma::i1#1 ]
[ doplasma::i2#2 doplasma::i2#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ]
[ makecharset::i#7 makecharset::i#1 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable doplasma::yval#0 to zero page equivalence class [ doplasma::yval#0 ]
Added variable doplasma::$1 to zero page equivalence class [ doplasma::$1 ]
Added variable doplasma::$3 to zero page equivalence class [ doplasma::$3 ]
Added variable doplasma::val#0 to zero page equivalence class [ doplasma::val#0 ]
Added variable doplasma::val#1 to zero page equivalence class [ doplasma::val#1 ]
Added variable doplasma::val#4 to zero page equivalence class [ doplasma::val#4 ]
Added variable doplasma::val#6 to zero page equivalence class [ doplasma::val#6 ]
Added variable doplasma::val#8 to zero page equivalence class [ doplasma::val#8 ]
Added variable doplasma::val#10 to zero page equivalence class [ doplasma::val#10 ]
Added variable doplasma::val#12 to zero page equivalence class [ doplasma::val#12 ]
Added variable doplasma::val#14 to zero page equivalence class [ doplasma::val#14 ]
Added variable doplasma::val#16 to zero page equivalence class [ doplasma::val#16 ]
Added variable doplasma::val#18 to zero page equivalence class [ doplasma::val#18 ]
Added variable doplasma::val#20 to zero page equivalence class [ doplasma::val#20 ]
Added variable doplasma::val#22 to zero page equivalence class [ doplasma::val#22 ]
Added variable doplasma::val#24 to zero page equivalence class [ doplasma::val#24 ]
Added variable doplasma::val#26 to zero page equivalence class [ doplasma::val#26 ]
Added variable doplasma::val#28 to zero page equivalence class [ doplasma::val#28 ]
Added variable doplasma::val#30 to zero page equivalence class [ doplasma::val#30 ]
Added variable doplasma::val#32 to zero page equivalence class [ doplasma::val#32 ]
Added variable doplasma::val#34 to zero page equivalence class [ doplasma::val#34 ]
Added variable doplasma::val#36 to zero page equivalence class [ doplasma::val#36 ]
Added variable doplasma::val#38 to zero page equivalence class [ doplasma::val#38 ]
Added variable doplasma::val#40 to zero page equivalence class [ doplasma::val#40 ]
Added variable doplasma::val#42 to zero page equivalence class [ doplasma::val#42 ]
Added variable doplasma::val#44 to zero page equivalence class [ doplasma::val#44 ]
Added variable doplasma::val#46 to zero page equivalence class [ doplasma::val#46 ]
Added variable doplasma::val#48 to zero page equivalence class [ doplasma::val#48 ]
Added variable doplasma::val#50 to zero page equivalence class [ doplasma::val#50 ]
Added variable makecharset::$2 to zero page equivalence class [ makecharset::$2 ]
Added variable makecharset::s#0 to zero page equivalence class [ makecharset::s#0 ]
Added variable sid_rnd::return#2 to zero page equivalence class [ sid_rnd::return#2 ]
Added variable makecharset::$3 to zero page equivalence class [ makecharset::$3 ]
Added variable makecharset::$4 to zero page equivalence class [ makecharset::$4 ]
Added variable makecharset::$8 to zero page equivalence class [ makecharset::$8 ]
Added variable makecharset::$9 to zero page equivalence class [ makecharset::$9 ]
Added variable makecharset::$16 to zero page equivalence class [ makecharset::$16 ]
Added variable makecharset::$11 to zero page equivalence class [ makecharset::$11 ]
Added variable sid_rnd::return#0 to zero page equivalence class [ sid_rnd::return#0 ]
Complete equivalence classes
[ main::col#2 main::col#1 ]
[ c1A#1 c1A#3 ]
[ c1B#1 c1B#3 ]
[ c2A#1 c2A#3 ]
[ c2B#1 c2B#3 ]
[ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
[ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
[ doplasma::yprev#2 doplasma::yprev#3 ]
[ doplasma::i#2 doplasma::i#1 ]
[ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
[ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
[ doplasma::i1#2 doplasma::i1#1 ]
[ doplasma::i2#2 doplasma::i2#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ]
[ makecharset::i#7 makecharset::i#1 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ doplasma::yval#0 ]
[ doplasma::$1 ]
[ doplasma::$3 ]
[ doplasma::val#0 ]
[ doplasma::val#1 ]
[ doplasma::val#4 ]
[ doplasma::val#6 ]
[ doplasma::val#8 ]
[ doplasma::val#10 ]
[ doplasma::val#12 ]
[ doplasma::val#14 ]
[ doplasma::val#16 ]
[ doplasma::val#18 ]
[ doplasma::val#20 ]
[ doplasma::val#22 ]
[ doplasma::val#24 ]
[ doplasma::val#26 ]
[ doplasma::val#28 ]
[ doplasma::val#30 ]
[ doplasma::val#32 ]
[ doplasma::val#34 ]
[ doplasma::val#36 ]
[ doplasma::val#38 ]
[ doplasma::val#40 ]
[ doplasma::val#42 ]
[ doplasma::val#44 ]
[ doplasma::val#46 ]
[ doplasma::val#48 ]
[ doplasma::val#50 ]
[ makecharset::$2 ]
[ makecharset::s#0 ]
[ sid_rnd::return#2 ]
[ makecharset::$3 ]
[ makecharset::$4 ]
[ makecharset::$8 ]
[ makecharset::$9 ]
[ makecharset::$16 ]
[ makecharset::$11 ]
[ sid_rnd::return#0 ]
Allocated zp ZP_WORD:2 [ main::col#2 main::col#1 ]
Allocated zp ZP_BYTE:4 [ c1A#1 c1A#3 ]
Allocated zp ZP_BYTE:5 [ c1B#1 c1B#3 ]
Allocated zp ZP_BYTE:6 [ c2A#1 c2A#3 ]
Allocated zp ZP_BYTE:7 [ c2B#1 c2B#3 ]
Allocated zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Allocated zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Allocated zp ZP_BYTE:10 [ doplasma::yprev#2 doplasma::yprev#3 ]
Allocated zp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ]
Allocated zp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Allocated zp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Allocated zp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ]
Allocated zp ZP_BYTE:15 [ doplasma::i2#2 doplasma::i2#1 ]
Allocated zp ZP_WORD:16 [ makecharset::c#2 makecharset::c#1 ]
Allocated zp ZP_WORD:18 [ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ]
Allocated zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ]
Allocated zp ZP_BYTE:21 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated zp ZP_BYTE:22 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
Allocated zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:25 [ doplasma::yval#0 ]
Allocated zp ZP_BYTE:26 [ doplasma::$1 ]
Allocated zp ZP_BYTE:27 [ doplasma::$3 ]
Allocated zp ZP_BYTE:28 [ doplasma::val#0 ]
Allocated zp ZP_BYTE:29 [ doplasma::val#1 ]
Allocated zp ZP_BYTE:30 [ doplasma::val#4 ]
Allocated zp ZP_BYTE:31 [ doplasma::val#6 ]
Allocated zp ZP_BYTE:32 [ doplasma::val#8 ]
Allocated zp ZP_BYTE:33 [ doplasma::val#10 ]
Allocated zp ZP_BYTE:34 [ doplasma::val#12 ]
Allocated zp ZP_BYTE:35 [ doplasma::val#14 ]
Allocated zp ZP_BYTE:36 [ doplasma::val#16 ]
Allocated zp ZP_BYTE:37 [ doplasma::val#18 ]
Allocated zp ZP_BYTE:38 [ doplasma::val#20 ]
Allocated zp ZP_BYTE:39 [ doplasma::val#22 ]
Allocated zp ZP_BYTE:40 [ doplasma::val#24 ]
Allocated zp ZP_BYTE:41 [ doplasma::val#26 ]
Allocated zp ZP_BYTE:42 [ doplasma::val#28 ]
Allocated zp ZP_BYTE:43 [ doplasma::val#30 ]
Allocated zp ZP_BYTE:44 [ doplasma::val#32 ]
Allocated zp ZP_BYTE:45 [ doplasma::val#34 ]
Allocated zp ZP_BYTE:46 [ doplasma::val#36 ]
Allocated zp ZP_BYTE:47 [ doplasma::val#38 ]
Allocated zp ZP_BYTE:48 [ doplasma::val#40 ]
Allocated zp ZP_BYTE:49 [ doplasma::val#42 ]
Allocated zp ZP_BYTE:50 [ doplasma::val#44 ]
Allocated zp ZP_BYTE:51 [ doplasma::val#46 ]
Allocated zp ZP_BYTE:52 [ doplasma::val#48 ]
Allocated zp ZP_BYTE:53 [ doplasma::val#50 ]
Allocated zp ZP_BYTE:54 [ makecharset::$2 ]
Allocated zp ZP_BYTE:55 [ makecharset::s#0 ]
Allocated zp ZP_BYTE:56 [ sid_rnd::return#2 ]
Allocated zp ZP_BYTE:57 [ makecharset::$3 ]
Allocated zp ZP_BYTE:58 [ makecharset::$4 ]
Allocated zp ZP_WORD:59 [ makecharset::$8 ]
Allocated zp ZP_WORD:61 [ makecharset::$9 ]
Allocated zp ZP_WORD:63 [ makecharset::$16 ]
Allocated zp ZP_BYTE:65 [ makecharset::$11 ]
Allocated zp ZP_BYTE:66 [ sid_rnd::return#0 ]

INITIAL ASM
//SEG0 File Comments
// A KickC version of the plasma routine from the CC65 samples
// This version has an unrolled inner loop to reach 50+FPS
// This version also optimizes the inner loop by calculating the Y buffer as a set of differences
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .label print_line_cursor = $400
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label SCREEN1 = $2800
  .label CHARSET = $2000
  .label SINTABLE = $1f00
  .label print_char_cursor = $12
  .label c1A = 4
  .label c1B = 5
  .label c2A = 6
  .label c2B = 7
//SEG3 @begin
bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)         .byte round(127.5+127.5*sin(toRadians(360*i/256)))  }}
//SEG6 [2] phi from @1 to @2 [phi:@1->@2]
b2_from_b1:
  jmp b2
//SEG7 @2
b2:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BORDERCOL
  //SEG14 [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG15 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG16 [8] phi (byte*) main::col#2 = (const byte*) COLS#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
    jmp b1
  //SEG17 [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG18 [8] phi (byte*) main::col#2 = (byte*) main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG19 main::@1
  b1:
  //SEG20 [9] *((byte*) main::col#2) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
  //SEG21 [10] (byte*) main::col#1 ← ++ (byte*) main::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG22 [11] if((byte*) main::col#1!=(const byte*) COLS#0+(word) $3e8+(byte) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda col+1
    cmp #>COLS+$3e8+1
    bne b1_from_b1
    lda col
    cmp #<COLS+$3e8+1
    bne b1_from_b1
  //SEG23 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG24 main::@2
  b2:
  //SEG25 [13] call makecharset 
  //SEG26 [98] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from_b2:
    jsr makecharset
  //SEG27 [14] phi from main::@2 to main::toD0181 [phi:main::@2->main::toD0181]
  toD0181_from_b2:
    jmp toD0181
  //SEG28 main::toD0181
  toD0181:
    jmp b5
  //SEG29 main::@5
  b5:
  //SEG30 [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG31 [16] phi from main::@5 to main::@3 [phi:main::@5->main::@3]
  b3_from_b5:
  //SEG32 [16] phi (byte) c2B#1 = (byte) 0 [phi:main::@5->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c2B
  //SEG33 [16] phi (byte) c2A#1 = (byte) 0 [phi:main::@5->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta c2A
  //SEG34 [16] phi (byte) c1B#1 = (byte) 0 [phi:main::@5->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta c1B
  //SEG35 [16] phi (byte) c1A#1 = (byte) 0 [phi:main::@5->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta c1A
    jmp b3
  //SEG36 main::@3
  b3:
  //SEG37 [17] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG38 main::@4
  b4:
  //SEG39 [18] call doplasma 
    jsr doplasma
  //SEG40 [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  b3_from_b4:
  //SEG41 [16] phi (byte) c2B#1 = (byte) c2B#3 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG42 [16] phi (byte) c2A#1 = (byte) c2A#3 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG43 [16] phi (byte) c1B#1 = (byte) c1B#3 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG44 [16] phi (byte) c1A#1 = (byte) c1A#3 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b3
}
//SEG45 doplasma
// Render plasma to the passed screen
doplasma: {
    .label _1 = $1a
    .label _3 = $1b
    .label c1a = 8
    .label c1b = 9
    .label yval = $19
    .label i = $b
    .label c2a = $c
    .label c2b = $d
    .label i1 = $e
    .label val = $1c
    .label val_1 = $1d
    .label i2 = $f
    .label yprev = $a
    .label val_4 = $1e
    .label val_6 = $1f
    .label val_8 = $20
    .label val_10 = $21
    .label val_12 = $22
    .label val_14 = $23
    .label val_16 = $24
    .label val_18 = $25
    .label val_20 = $26
    .label val_22 = $27
    .label val_24 = $28
    .label val_26 = $29
    .label val_28 = $2a
    .label val_30 = $2b
    .label val_32 = $2c
    .label val_34 = $2d
    .label val_36 = $2e
    .label val_38 = $2f
    .label val_40 = $30
    .label val_42 = $31
    .label val_44 = $32
    .label val_46 = $33
    .label val_48 = $34
    .label val_50 = $35
  //SEG46 [19] (byte) doplasma::c1a#0 ← (byte) c1A#1 -- vbuz1=vbuz2 
    lda c1A
    sta c1a
  //SEG47 [20] (byte) doplasma::c1b#0 ← (byte) c1B#1 -- vbuz1=vbuz2 
    lda c1B
    sta c1b
  //SEG48 [21] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  b1_from_doplasma:
  //SEG49 [21] phi (byte) doplasma::i#2 = (byte) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG50 [21] phi (byte) doplasma::yprev#2 = (byte) 0 [phi:doplasma->doplasma::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta yprev
  //SEG51 [21] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#0 [phi:doplasma->doplasma::@1#2] -- register_copy 
  //SEG52 [21] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#0 [phi:doplasma->doplasma::@1#3] -- register_copy 
    jmp b1
  // Calculate ybuff as a bunch of differences
  //SEG53 doplasma::@1
  b1:
  //SEG54 [22] (byte) doplasma::yval#0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy c1a
    lda SINTABLE,y
    ldy c1b
    clc
    adc SINTABLE,y
    sta yval
  //SEG55 [23] (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2 -- vbuz1=vbuz2_minus_vbuz3 
    lda yval
    sec
    sbc yprev
    sta _1
  //SEG56 [24] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _1
    ldy i
    sta ybuf,y
  //SEG57 [25] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1a
    axs #-[4]
    stx c1a
  //SEG58 [26] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1b
    axs #-[9]
    stx c1b
  //SEG59 [27] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG60 [28] if((byte) doplasma::i#1<(byte) $19) goto doplasma::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$19
    bcc b8
    jmp b2
  //SEG61 doplasma::@2
  b2:
  //SEG62 [29] (byte) c1A#3 ← (byte) c1A#1 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1A
    axs #-[3]
    stx c1A
  //SEG63 [30] (byte) c1B#3 ← (byte) c1B#1 - (byte) 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax c1B
    axs #5
    stx c1B
  //SEG64 [31] (byte) doplasma::c2a#0 ← (byte) c2A#1 -- vbuz1=vbuz2 
    lda c2A
    sta c2a
  //SEG65 [32] (byte) doplasma::c2b#0 ← (byte) c2B#1 -- vbuz1=vbuz2 
    lda c2B
    sta c2b
  //SEG66 [33] phi from doplasma::@2 to doplasma::@3 [phi:doplasma::@2->doplasma::@3]
  b3_from_b2:
  //SEG67 [33] phi (byte) doplasma::i1#2 = (byte) 0 [phi:doplasma::@2->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG68 [33] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#0 [phi:doplasma::@2->doplasma::@3#1] -- register_copy 
  //SEG69 [33] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#0 [phi:doplasma::@2->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG70 [33] phi from doplasma::@3 to doplasma::@3 [phi:doplasma::@3->doplasma::@3]
  b3_from_b3:
  //SEG71 [33] phi (byte) doplasma::i1#2 = (byte) doplasma::i1#1 [phi:doplasma::@3->doplasma::@3#0] -- register_copy 
  //SEG72 [33] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#1 [phi:doplasma::@3->doplasma::@3#1] -- register_copy 
  //SEG73 [33] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#1 [phi:doplasma::@3->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG74 doplasma::@3
  b3:
  //SEG75 [34] (byte~) doplasma::$3 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy c2a
    lda SINTABLE,y
    ldy c2b
    clc
    adc SINTABLE,y
    sta _3
  //SEG76 [35] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _3
    ldy i1
    sta xbuf,y
  //SEG77 [36] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2a
    axs #-[3]
    stx c2a
  //SEG78 [37] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2b
    axs #-[7]
    stx c2b
  //SEG79 [38] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG80 [39] if((byte) doplasma::i1#1<(byte) $28) goto doplasma::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda i1
    cmp #$28
    bcc b3_from_b3
    jmp b4
  //SEG81 doplasma::@4
  b4:
  //SEG82 [40] (byte) c2A#3 ← (byte) c2A#1 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda c2A
    clc
    adc #2
    sta c2A
  //SEG83 [41] (byte) c2B#3 ← (byte) c2B#1 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax c2B
    axs #3
    stx c2B
  //SEG84 [42] phi from doplasma::@4 to doplasma::@5 [phi:doplasma::@4->doplasma::@5]
  b5_from_b4:
  //SEG85 [42] phi (byte) doplasma::i2#2 = (byte) 0 [phi:doplasma::@4->doplasma::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta i2
    jmp b5
  //SEG86 [42] phi from doplasma::@7 to doplasma::@5 [phi:doplasma::@7->doplasma::@5]
  b5_from_b7:
  //SEG87 [42] phi (byte) doplasma::i2#2 = (byte) doplasma::i2#1 [phi:doplasma::@7->doplasma::@5#0] -- register_copy 
    jmp b5
  //SEG88 doplasma::@5
  b5:
  //SEG89 [43] (byte) doplasma::val#0 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Find the first value on the row
    ldy i2
    lda xbuf,y
    sta val
    jmp b6
  // Calculate the next values as sums of diffs
  // Use experimental loop unrolling to increase the speed
  //SEG90 doplasma::@6
  b6:
  //SEG91 [44] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf
    clc
    adc val
    sta val_1
  //SEG92 [45] *((const byte*) SCREEN1#0 + (byte) doplasma::i2#2) ← (byte) doplasma::val#1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_1
    ldy i2
    sta SCREEN1,y
    jmp b6_1
  //SEG93 doplasma::@6_1
  b6_1:
  //SEG94 [46] (byte) doplasma::val#4 ← (byte) doplasma::val#1 + *((const byte[$19]) doplasma::ybuf#0+(byte) 1) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+1
    clc
    adc val_1
    sta val_4
  //SEG95 [47] *((const byte*) SCREEN1#0+(byte) 1*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#4 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_4
    ldy i2
    sta SCREEN1+1*$28,y
    jmp b6_2
  //SEG96 doplasma::@6_2
  b6_2:
  //SEG97 [48] (byte) doplasma::val#6 ← (byte) doplasma::val#4 + *((const byte[$19]) doplasma::ybuf#0+(byte) 2) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+2
    clc
    adc val_4
    sta val_6
  //SEG98 [49] *((const byte*) SCREEN1#0+(byte) 2*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#6 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_6
    ldy i2
    sta SCREEN1+2*$28,y
    jmp b6_3
  //SEG99 doplasma::@6_3
  b6_3:
  //SEG100 [50] (byte) doplasma::val#8 ← (byte) doplasma::val#6 + *((const byte[$19]) doplasma::ybuf#0+(byte) 3) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+3
    clc
    adc val_6
    sta val_8
  //SEG101 [51] *((const byte*) SCREEN1#0+(byte) 3*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_8
    ldy i2
    sta SCREEN1+3*$28,y
    jmp b6_4
  //SEG102 doplasma::@6_4
  b6_4:
  //SEG103 [52] (byte) doplasma::val#10 ← (byte) doplasma::val#8 + *((const byte[$19]) doplasma::ybuf#0+(byte) 4) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+4
    clc
    adc val_8
    sta val_10
  //SEG104 [53] *((const byte*) SCREEN1#0+(byte) 4*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_10
    ldy i2
    sta SCREEN1+4*$28,y
    jmp b6_5
  //SEG105 doplasma::@6_5
  b6_5:
  //SEG106 [54] (byte) doplasma::val#12 ← (byte) doplasma::val#10 + *((const byte[$19]) doplasma::ybuf#0+(byte) 5) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+5
    clc
    adc val_10
    sta val_12
  //SEG107 [55] *((const byte*) SCREEN1#0+(byte) 5*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#12 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_12
    ldy i2
    sta SCREEN1+5*$28,y
    jmp b6_6
  //SEG108 doplasma::@6_6
  b6_6:
  //SEG109 [56] (byte) doplasma::val#14 ← (byte) doplasma::val#12 + *((const byte[$19]) doplasma::ybuf#0+(byte) 6) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+6
    clc
    adc val_12
    sta val_14
  //SEG110 [57] *((const byte*) SCREEN1#0+(byte) 6*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#14 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_14
    ldy i2
    sta SCREEN1+6*$28,y
    jmp b6_7
  //SEG111 doplasma::@6_7
  b6_7:
  //SEG112 [58] (byte) doplasma::val#16 ← (byte) doplasma::val#14 + *((const byte[$19]) doplasma::ybuf#0+(byte) 7) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+7
    clc
    adc val_14
    sta val_16
  //SEG113 [59] *((const byte*) SCREEN1#0+(byte) 7*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#16 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_16
    ldy i2
    sta SCREEN1+7*$28,y
    jmp b6_8
  //SEG114 doplasma::@6_8
  b6_8:
  //SEG115 [60] (byte) doplasma::val#18 ← (byte) doplasma::val#16 + *((const byte[$19]) doplasma::ybuf#0+(byte) 8) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+8
    clc
    adc val_16
    sta val_18
  //SEG116 [61] *((const byte*) SCREEN1#0+(byte) 8*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#18 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_18
    ldy i2
    sta SCREEN1+8*$28,y
    jmp b6_9
  //SEG117 doplasma::@6_9
  b6_9:
  //SEG118 [62] (byte) doplasma::val#20 ← (byte) doplasma::val#18 + *((const byte[$19]) doplasma::ybuf#0+(byte) 9) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+9
    clc
    adc val_18
    sta val_20
  //SEG119 [63] *((const byte*) SCREEN1#0+(byte) 9*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#20 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_20
    ldy i2
    sta SCREEN1+9*$28,y
    jmp b6_10
  //SEG120 doplasma::@6_10
  b6_10:
  //SEG121 [64] (byte) doplasma::val#22 ← (byte) doplasma::val#20 + *((const byte[$19]) doplasma::ybuf#0+(byte) $a) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$a
    clc
    adc val_20
    sta val_22
  //SEG122 [65] *((const byte*) SCREEN1#0+(byte) $a*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#22 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_22
    ldy i2
    sta SCREEN1+$a*$28,y
    jmp b6_11
  //SEG123 doplasma::@6_11
  b6_11:
  //SEG124 [66] (byte) doplasma::val#24 ← (byte) doplasma::val#22 + *((const byte[$19]) doplasma::ybuf#0+(byte) $b) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$b
    clc
    adc val_22
    sta val_24
  //SEG125 [67] *((const byte*) SCREEN1#0+(byte) $b*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#24 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_24
    ldy i2
    sta SCREEN1+$b*$28,y
    jmp b6_12
  //SEG126 doplasma::@6_12
  b6_12:
  //SEG127 [68] (byte) doplasma::val#26 ← (byte) doplasma::val#24 + *((const byte[$19]) doplasma::ybuf#0+(byte) $c) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$c
    clc
    adc val_24
    sta val_26
  //SEG128 [69] *((const byte*) SCREEN1#0+(byte) $c*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#26 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_26
    ldy i2
    sta SCREEN1+$c*$28,y
    jmp b6_13
  //SEG129 doplasma::@6_13
  b6_13:
  //SEG130 [70] (byte) doplasma::val#28 ← (byte) doplasma::val#26 + *((const byte[$19]) doplasma::ybuf#0+(byte) $d) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$d
    clc
    adc val_26
    sta val_28
  //SEG131 [71] *((const byte*) SCREEN1#0+(byte) $d*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#28 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_28
    ldy i2
    sta SCREEN1+$d*$28,y
    jmp b6_14
  //SEG132 doplasma::@6_14
  b6_14:
  //SEG133 [72] (byte) doplasma::val#30 ← (byte) doplasma::val#28 + *((const byte[$19]) doplasma::ybuf#0+(byte) $e) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$e
    clc
    adc val_28
    sta val_30
  //SEG134 [73] *((const byte*) SCREEN1#0+(byte) $e*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#30 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_30
    ldy i2
    sta SCREEN1+$e*$28,y
    jmp b6_15
  //SEG135 doplasma::@6_15
  b6_15:
  //SEG136 [74] (byte) doplasma::val#32 ← (byte) doplasma::val#30 + *((const byte[$19]) doplasma::ybuf#0+(byte) $f) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$f
    clc
    adc val_30
    sta val_32
  //SEG137 [75] *((const byte*) SCREEN1#0+(byte) $f*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#32 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_32
    ldy i2
    sta SCREEN1+$f*$28,y
    jmp b6_16
  //SEG138 doplasma::@6_16
  b6_16:
  //SEG139 [76] (byte) doplasma::val#34 ← (byte) doplasma::val#32 + *((const byte[$19]) doplasma::ybuf#0+(byte) $10) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$10
    clc
    adc val_32
    sta val_34
  //SEG140 [77] *((const byte*) SCREEN1#0+(byte) $10*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#34 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_34
    ldy i2
    sta SCREEN1+$10*$28,y
    jmp b6_17
  //SEG141 doplasma::@6_17
  b6_17:
  //SEG142 [78] (byte) doplasma::val#36 ← (byte) doplasma::val#34 + *((const byte[$19]) doplasma::ybuf#0+(byte) $11) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$11
    clc
    adc val_34
    sta val_36
  //SEG143 [79] *((const byte*) SCREEN1#0+(byte) $11*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#36 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_36
    ldy i2
    sta SCREEN1+$11*$28,y
    jmp b6_18
  //SEG144 doplasma::@6_18
  b6_18:
  //SEG145 [80] (byte) doplasma::val#38 ← (byte) doplasma::val#36 + *((const byte[$19]) doplasma::ybuf#0+(byte) $12) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$12
    clc
    adc val_36
    sta val_38
  //SEG146 [81] *((const byte*) SCREEN1#0+(byte) $12*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#38 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_38
    ldy i2
    sta SCREEN1+$12*$28,y
    jmp b6_19
  //SEG147 doplasma::@6_19
  b6_19:
  //SEG148 [82] (byte) doplasma::val#40 ← (byte) doplasma::val#38 + *((const byte[$19]) doplasma::ybuf#0+(byte) $13) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$13
    clc
    adc val_38
    sta val_40
  //SEG149 [83] *((const byte*) SCREEN1#0+(byte) $13*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#40 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_40
    ldy i2
    sta SCREEN1+$13*$28,y
    jmp b6_20
  //SEG150 doplasma::@6_20
  b6_20:
  //SEG151 [84] (byte) doplasma::val#42 ← (byte) doplasma::val#40 + *((const byte[$19]) doplasma::ybuf#0+(byte) $14) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$14
    clc
    adc val_40
    sta val_42
  //SEG152 [85] *((const byte*) SCREEN1#0+(byte) $14*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#42 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_42
    ldy i2
    sta SCREEN1+$14*$28,y
    jmp b6_21
  //SEG153 doplasma::@6_21
  b6_21:
  //SEG154 [86] (byte) doplasma::val#44 ← (byte) doplasma::val#42 + *((const byte[$19]) doplasma::ybuf#0+(byte) $15) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$15
    clc
    adc val_42
    sta val_44
  //SEG155 [87] *((const byte*) SCREEN1#0+(byte) $15*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#44 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_44
    ldy i2
    sta SCREEN1+$15*$28,y
    jmp b6_22
  //SEG156 doplasma::@6_22
  b6_22:
  //SEG157 [88] (byte) doplasma::val#46 ← (byte) doplasma::val#44 + *((const byte[$19]) doplasma::ybuf#0+(byte) $16) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$16
    clc
    adc val_44
    sta val_46
  //SEG158 [89] *((const byte*) SCREEN1#0+(byte) $16*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#46 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_46
    ldy i2
    sta SCREEN1+$16*$28,y
    jmp b6_23
  //SEG159 doplasma::@6_23
  b6_23:
  //SEG160 [90] (byte) doplasma::val#48 ← (byte) doplasma::val#46 + *((const byte[$19]) doplasma::ybuf#0+(byte) $17) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$17
    clc
    adc val_46
    sta val_48
  //SEG161 [91] *((const byte*) SCREEN1#0+(byte) $17*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#48 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_48
    ldy i2
    sta SCREEN1+$17*$28,y
    jmp b6_24
  //SEG162 doplasma::@6_24
  b6_24:
  //SEG163 [92] (byte) doplasma::val#50 ← (byte) doplasma::val#48 + *((const byte[$19]) doplasma::ybuf#0+(byte) $18) -- vbuz1=vbuz2_plus__deref_pbuc1 
    lda ybuf+$18
    clc
    adc val_48
    sta val_50
  //SEG164 [93] *((const byte*) SCREEN1#0+(byte) $18*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#50 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val_50
    ldy i2
    sta SCREEN1+$18*$28,y
    jmp b7
  //SEG165 doplasma::@7
  b7:
  //SEG166 [94] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2 -- vbuz1=_inc_vbuz1 
    inc i2
  //SEG167 [95] if((byte) doplasma::i2#1<(byte) $28) goto doplasma::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda i2
    cmp #$28
    bcc b5_from_b7
    jmp breturn
  //SEG168 doplasma::@return
  breturn:
  //SEG169 [96] return 
    rts
  //SEG170 doplasma::@8
  b8:
  //SEG171 [97] (byte~) doplasma::yprev#3 ← (byte) doplasma::yval#0 -- vbuz1=vbuz2 
    lda yval
    sta yprev
  //SEG172 [21] phi from doplasma::@8 to doplasma::@1 [phi:doplasma::@8->doplasma::@1]
  b1_from_b8:
  //SEG173 [21] phi (byte) doplasma::i#2 = (byte) doplasma::i#1 [phi:doplasma::@8->doplasma::@1#0] -- register_copy 
  //SEG174 [21] phi (byte) doplasma::yprev#2 = (byte~) doplasma::yprev#3 [phi:doplasma::@8->doplasma::@1#1] -- register_copy 
  //SEG175 [21] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#1 [phi:doplasma::@8->doplasma::@1#2] -- register_copy 
  //SEG176 [21] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#1 [phi:doplasma::@8->doplasma::@1#3] -- register_copy 
    jmp b1
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
//SEG177 makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label _2 = $36
    .label _3 = $39
    .label _4 = $3a
    .label _8 = $3b
    .label _9 = $3d
    .label _11 = $41
    .label s = $37
    .label ii = $15
    .label b = $16
    .label i = $14
    .label c = $10
    .label _16 = $3f
  //SEG178 [99] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG179 [100] phi from makecharset to makecharset::@10 [phi:makecharset->makecharset::@10]
  b10_from_makecharset:
    jmp b10
  //SEG180 makecharset::@10
  b10:
  //SEG181 [101] call print_cls 
  //SEG182 [135] phi from makecharset::@10 to print_cls [phi:makecharset::@10->print_cls]
  print_cls_from_b10:
    jsr print_cls
  //SEG183 [102] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  b1_from_b10:
  //SEG184 [102] phi (byte*) print_char_cursor#44 = (const byte*) print_line_cursor#0 [phi:makecharset::@10->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG185 [102] phi (word) makecharset::c#2 = (byte) 0 [phi:makecharset::@10->makecharset::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta c
    lda #0
    sta c+1
    jmp b1
  //SEG186 [102] phi from makecharset::@9 to makecharset::@1 [phi:makecharset::@9->makecharset::@1]
  b1_from_b9:
  //SEG187 [102] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#18 [phi:makecharset::@9->makecharset::@1#0] -- register_copy 
  //SEG188 [102] phi (word) makecharset::c#2 = (word) makecharset::c#1 [phi:makecharset::@9->makecharset::@1#1] -- register_copy 
    jmp b1
  //SEG189 makecharset::@1
  b1:
  //SEG190 [103] (byte~) makecharset::$2 ← < (word) makecharset::c#2 -- vbuz1=_lo_vwuz2 
    lda c
    sta _2
  //SEG191 [104] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda SINTABLE,y
    sta s
  //SEG192 [105] phi from makecharset::@1 to makecharset::@2 [phi:makecharset::@1->makecharset::@2]
  b2_from_b1:
  //SEG193 [105] phi (byte) makecharset::i#7 = (byte) 0 [phi:makecharset::@1->makecharset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG194 [105] phi from makecharset::@6 to makecharset::@2 [phi:makecharset::@6->makecharset::@2]
  b2_from_b6:
  //SEG195 [105] phi (byte) makecharset::i#7 = (byte) makecharset::i#1 [phi:makecharset::@6->makecharset::@2#0] -- register_copy 
    jmp b2
  //SEG196 makecharset::@2
  b2:
  //SEG197 [106] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  b3_from_b2:
  //SEG198 [106] phi (byte) makecharset::b#2 = (byte) 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta b
  //SEG199 [106] phi (byte) makecharset::ii#2 = (byte) 0 [phi:makecharset::@2->makecharset::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta ii
    jmp b3
  //SEG200 [106] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  b3_from_b4:
  //SEG201 [106] phi (byte) makecharset::b#2 = (byte) makecharset::b#3 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
  //SEG202 [106] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@4->makecharset::@3#1] -- register_copy 
    jmp b3
  //SEG203 makecharset::@3
  b3:
  //SEG204 [107] call sid_rnd 
    jsr sid_rnd
  //SEG205 [108] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0 -- vbuz1=vbuz2 
    lda sid_rnd.return
    sta sid_rnd.return_2
    jmp b11
  //SEG206 makecharset::@11
  b11:
  //SEG207 [109] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2 -- vbuz1=vbuz2 
    lda sid_rnd.return_2
    sta _3
  //SEG208 [110] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte) $ff -- vbuz1=vbuz2_band_vbuc1 
    lda #$ff
    and _3
    sta _4
  //SEG209 [111] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4 -- vbuz1_le_vbuz2_then_la1 
    lda s
    cmp _4
    bcs b4_from_b11
    jmp b5
  //SEG210 makecharset::@5
  b5:
  //SEG211 [112] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) -- vbuz1=vbuz1_bor_pbuc1_derefidx_vbuz2 
    lda b
    ldy ii
    ora bittab,y
    sta b
  //SEG212 [113] phi from makecharset::@11 makecharset::@5 to makecharset::@4 [phi:makecharset::@11/makecharset::@5->makecharset::@4]
  b4_from_b11:
  b4_from_b5:
  //SEG213 [113] phi (byte) makecharset::b#3 = (byte) makecharset::b#2 [phi:makecharset::@11/makecharset::@5->makecharset::@4#0] -- register_copy 
    jmp b4
  //SEG214 makecharset::@4
  b4:
  //SEG215 [114] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc ii
  //SEG216 [115] if((byte) makecharset::ii#1<(byte) 8) goto makecharset::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda ii
    cmp #8
    bcc b3_from_b4
    jmp b6
  //SEG217 makecharset::@6
  b6:
  //SEG218 [116] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda c
    asl
    sta _8
    lda c+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG219 [117] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 -- vwuz1=vwuz2_plus_vbuz3 
    lda i
    clc
    adc _8
    sta _9
    lda #0
    adc _8+1
    sta _9+1
  //SEG220 [118] (byte*~) makecharset::$16 ← (const byte*) CHARSET#0 + (word~) makecharset::$9 -- pbuz1=pbuc1_plus_vwuz2 
    lda _9
    clc
    adc #<CHARSET
    sta _16
    lda _9+1
    adc #>CHARSET
    sta _16+1
  //SEG221 [119] *((byte*~) makecharset::$16) ← (byte) makecharset::b#3 -- _deref_pbuz1=vbuz2 
    lda b
    ldy #0
    sta (_16),y
  //SEG222 [120] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG223 [121] if((byte) makecharset::i#1<(byte) 8) goto makecharset::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #8
    bcc b2_from_b6
    jmp b7
  //SEG224 makecharset::@7
  b7:
  //SEG225 [122] (byte~) makecharset::$11 ← (word) makecharset::c#2 & (byte) 7 -- vbuz1=vwuz2_band_vbuc1 
    lda c
    and #7
    sta _11
  //SEG226 [123] if((byte~) makecharset::$11!=(byte) 0) goto makecharset::@9 -- vbuz1_neq_0_then_la1 
    lda _11
    cmp #0
    bne b9_from_b7
  //SEG227 [124] phi from makecharset::@7 to makecharset::@8 [phi:makecharset::@7->makecharset::@8]
  b8_from_b7:
    jmp b8
  //SEG228 makecharset::@8
  b8:
  //SEG229 [125] call print_char 
    jsr print_char
  //SEG230 [126] phi from makecharset::@7 makecharset::@8 to makecharset::@9 [phi:makecharset::@7/makecharset::@8->makecharset::@9]
  b9_from_b7:
  b9_from_b8:
  //SEG231 [126] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#44 [phi:makecharset::@7/makecharset::@8->makecharset::@9#0] -- register_copy 
    jmp b9
  //SEG232 makecharset::@9
  b9:
  //SEG233 [127] (word) makecharset::c#1 ← ++ (word) makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG234 [128] if((word) makecharset::c#1<(word) $100) goto makecharset::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda c+1
    cmp #>$100
    bcc b1_from_b9
    bne !+
    lda c
    cmp #<$100
    bcc b1_from_b9
  !:
    jmp breturn
  //SEG235 makecharset::@return
  breturn:
  //SEG236 [129] return 
    rts
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
//SEG237 print_char
// Print a single char
print_char: {
    .const ch = '.'
  //SEG238 [130] *((byte*) print_char_cursor#44) ← (const byte) print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
  //SEG239 [131] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG240 print_char::@return
  breturn:
  //SEG241 [132] return 
    rts
}
//SEG242 sid_rnd
// Get a random number from the SID voice 3,
// Must be initialized with sid_rnd_init()
sid_rnd: {
    .label return = $42
    .label return_2 = $38
  //SEG243 [133] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuz1=_deref_pbuc1 
    lda SID_VOICE3_OSC
    sta return
    jmp breturn
  //SEG244 sid_rnd::@return
  breturn:
  //SEG245 [134] return 
    rts
}
//SEG246 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $17
  //SEG247 [136] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG248 [136] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG249 [136] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG250 [136] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG251 print_cls::@1
  b1:
  //SEG252 [137] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG253 [138] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG254 [139] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG255 print_cls::@return
  breturn:
  //SEG256 [140] return 
    rts
}
//SEG257 sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
  //SEG258 [141] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG259 [142] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG260 sid_rnd_init::@return
  breturn:
  //SEG261 [143] return 
    rts
}
.pc = SINTABLE "SINTABLE"
  .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((byte*) main::col#2) ← (const byte) BLACK#0 [ main::col#2 ] ( main:3 [ main::col#2 ] ) always clobbers reg byte a reg byte y 
Statement [11] if((byte*) main::col#1!=(const byte*) COLS#0+(word) $3e8+(byte) 1) goto main::@1 [ main::col#1 ] ( main:3 [ main::col#1 ] ) always clobbers reg byte a 
Statement [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [22] (byte) doplasma::yval#0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::yprev#2 doplasma::i#2 doplasma::yval#0 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::yprev#2 doplasma::i#2 doplasma::yval#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ c1A#1 c1A#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ c1B#1 c1B#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ c2A#1 c2A#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ c2B#1 c2B#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ doplasma::yprev#2 doplasma::yprev#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ]
Statement [23] (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::yval#0 doplasma::$1 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::yval#0 doplasma::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ doplasma::yval#0 ]
Statement [25] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 doplasma::yval#0 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 doplasma::yval#0 ] ) always clobbers reg byte a 
Statement [26] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 doplasma::yval#0 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 doplasma::yval#0 ] ) always clobbers reg byte a 
Statement [29] (byte) c1A#3 ← (byte) c1A#1 + (byte) 3 [ c1B#1 c2A#1 c2B#1 c1A#3 ] ( main:3::doplasma:18 [ c1B#1 c2A#1 c2B#1 c1A#3 ] ) always clobbers reg byte a 
Statement [30] (byte) c1B#3 ← (byte) c1B#1 - (byte) 5 [ c2A#1 c2B#1 c1A#3 c1B#3 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 ] ) always clobbers reg byte a 
Statement [34] (byte~) doplasma::$3 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$3 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ]
Statement [36] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ) always clobbers reg byte a 
Statement [37] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ) always clobbers reg byte a 
Statement [41] (byte) c2B#3 ← (byte) c2B#1 - (byte) 3 [ c1A#3 c1B#3 c2A#3 c2B#3 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 ] ) always clobbers reg byte a 
Statement [44] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#1 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ doplasma::i2#2 doplasma::i2#1 ]
Statement [46] (byte) doplasma::val#4 ← (byte) doplasma::val#1 + *((const byte[$19]) doplasma::ybuf#0+(byte) 1) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#4 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#4 ] ) always clobbers reg byte a 
Statement [48] (byte) doplasma::val#6 ← (byte) doplasma::val#4 + *((const byte[$19]) doplasma::ybuf#0+(byte) 2) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#6 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#6 ] ) always clobbers reg byte a 
Statement [50] (byte) doplasma::val#8 ← (byte) doplasma::val#6 + *((const byte[$19]) doplasma::ybuf#0+(byte) 3) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#8 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#8 ] ) always clobbers reg byte a 
Statement [52] (byte) doplasma::val#10 ← (byte) doplasma::val#8 + *((const byte[$19]) doplasma::ybuf#0+(byte) 4) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#10 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#10 ] ) always clobbers reg byte a 
Statement [54] (byte) doplasma::val#12 ← (byte) doplasma::val#10 + *((const byte[$19]) doplasma::ybuf#0+(byte) 5) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#12 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#12 ] ) always clobbers reg byte a 
Statement [56] (byte) doplasma::val#14 ← (byte) doplasma::val#12 + *((const byte[$19]) doplasma::ybuf#0+(byte) 6) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#14 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#14 ] ) always clobbers reg byte a 
Statement [58] (byte) doplasma::val#16 ← (byte) doplasma::val#14 + *((const byte[$19]) doplasma::ybuf#0+(byte) 7) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#16 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#16 ] ) always clobbers reg byte a 
Statement [60] (byte) doplasma::val#18 ← (byte) doplasma::val#16 + *((const byte[$19]) doplasma::ybuf#0+(byte) 8) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#18 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#18 ] ) always clobbers reg byte a 
Statement [62] (byte) doplasma::val#20 ← (byte) doplasma::val#18 + *((const byte[$19]) doplasma::ybuf#0+(byte) 9) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#20 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#20 ] ) always clobbers reg byte a 
Statement [64] (byte) doplasma::val#22 ← (byte) doplasma::val#20 + *((const byte[$19]) doplasma::ybuf#0+(byte) $a) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#22 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#22 ] ) always clobbers reg byte a 
Statement [66] (byte) doplasma::val#24 ← (byte) doplasma::val#22 + *((const byte[$19]) doplasma::ybuf#0+(byte) $b) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#24 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#24 ] ) always clobbers reg byte a 
Statement [68] (byte) doplasma::val#26 ← (byte) doplasma::val#24 + *((const byte[$19]) doplasma::ybuf#0+(byte) $c) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#26 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#26 ] ) always clobbers reg byte a 
Statement [70] (byte) doplasma::val#28 ← (byte) doplasma::val#26 + *((const byte[$19]) doplasma::ybuf#0+(byte) $d) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#28 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#28 ] ) always clobbers reg byte a 
Statement [72] (byte) doplasma::val#30 ← (byte) doplasma::val#28 + *((const byte[$19]) doplasma::ybuf#0+(byte) $e) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#30 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#30 ] ) always clobbers reg byte a 
Statement [74] (byte) doplasma::val#32 ← (byte) doplasma::val#30 + *((const byte[$19]) doplasma::ybuf#0+(byte) $f) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#32 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#32 ] ) always clobbers reg byte a 
Statement [76] (byte) doplasma::val#34 ← (byte) doplasma::val#32 + *((const byte[$19]) doplasma::ybuf#0+(byte) $10) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#34 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#34 ] ) always clobbers reg byte a 
Statement [78] (byte) doplasma::val#36 ← (byte) doplasma::val#34 + *((const byte[$19]) doplasma::ybuf#0+(byte) $11) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#36 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#36 ] ) always clobbers reg byte a 
Statement [80] (byte) doplasma::val#38 ← (byte) doplasma::val#36 + *((const byte[$19]) doplasma::ybuf#0+(byte) $12) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#38 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#38 ] ) always clobbers reg byte a 
Statement [82] (byte) doplasma::val#40 ← (byte) doplasma::val#38 + *((const byte[$19]) doplasma::ybuf#0+(byte) $13) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#40 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#40 ] ) always clobbers reg byte a 
Statement [84] (byte) doplasma::val#42 ← (byte) doplasma::val#40 + *((const byte[$19]) doplasma::ybuf#0+(byte) $14) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#42 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#42 ] ) always clobbers reg byte a 
Statement [86] (byte) doplasma::val#44 ← (byte) doplasma::val#42 + *((const byte[$19]) doplasma::ybuf#0+(byte) $15) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#44 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#44 ] ) always clobbers reg byte a 
Statement [88] (byte) doplasma::val#46 ← (byte) doplasma::val#44 + *((const byte[$19]) doplasma::ybuf#0+(byte) $16) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#46 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#46 ] ) always clobbers reg byte a 
Statement [90] (byte) doplasma::val#48 ← (byte) doplasma::val#46 + *((const byte[$19]) doplasma::ybuf#0+(byte) $17) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#48 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#48 ] ) always clobbers reg byte a 
Statement [92] (byte) doplasma::val#50 ← (byte) doplasma::val#48 + *((const byte[$19]) doplasma::ybuf#0+(byte) $18) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#50 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#50 ] ) always clobbers reg byte a 
Statement [103] (byte~) makecharset::$2 ← < (word) makecharset::c#2 [ makecharset::c#2 print_char_cursor#44 makecharset::$2 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::$2 ] ) always clobbers reg byte a 
Statement [112] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:55 [ makecharset::s#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ makecharset::ii#2 makecharset::ii#1 ]
Statement [116] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte) 3 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
Statement [117] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ) always clobbers reg byte a 
Statement [118] (byte*~) makecharset::$16 ← (const byte*) CHARSET#0 + (word~) makecharset::$9 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$16 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$16 ] ) always clobbers reg byte a 
Statement [119] *((byte*~) makecharset::$16) ← (byte) makecharset::b#3 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:55 [ makecharset::s#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ]
Statement [122] (byte~) makecharset::$11 ← (word) makecharset::c#2 & (byte) 7 [ makecharset::c#2 print_char_cursor#44 makecharset::$11 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::$11 ] ) always clobbers reg byte a 
Statement [128] if((word) makecharset::c#1<(word) $100) goto makecharset::@1 [ makecharset::c#1 print_char_cursor#18 ] ( main:3::makecharset:13 [ makecharset::c#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [130] *((byte*) print_char_cursor#44) ← (const byte) print_char::ch#0 [ print_char_cursor#44 ] ( main:3::makecharset:13::print_char:125 [ makecharset::c#2 print_char_cursor#44 ] ) always clobbers reg byte a reg byte y 
Statement [137] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::makecharset:13::print_cls:101 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [139] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::makecharset:13::print_cls:101 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [141] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff [ ] ( main:3::makecharset:13::sid_rnd_init:99 [ ] ) always clobbers reg byte a 
Statement [142] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:3::makecharset:13::sid_rnd_init:99 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((byte*) main::col#2) ← (const byte) BLACK#0 [ main::col#2 ] ( main:3 [ main::col#2 ] ) always clobbers reg byte a reg byte y 
Statement [11] if((byte*) main::col#1!=(const byte*) COLS#0+(word) $3e8+(byte) 1) goto main::@1 [ main::col#1 ] ( main:3 [ main::col#1 ] ) always clobbers reg byte a 
Statement [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [22] (byte) doplasma::yval#0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::yprev#2 doplasma::i#2 doplasma::yval#0 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::yprev#2 doplasma::i#2 doplasma::yval#0 ] ) always clobbers reg byte a 
Statement [23] (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::yval#0 doplasma::$1 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::yval#0 doplasma::$1 ] ) always clobbers reg byte a 
Statement [25] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 doplasma::yval#0 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 doplasma::yval#0 ] ) always clobbers reg byte a 
Statement [26] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 doplasma::yval#0 ] ( main:3::doplasma:18 [ c1A#1 c1B#1 c2A#1 c2B#1 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 doplasma::yval#0 ] ) always clobbers reg byte a 
Statement [29] (byte) c1A#3 ← (byte) c1A#1 + (byte) 3 [ c1B#1 c2A#1 c2B#1 c1A#3 ] ( main:3::doplasma:18 [ c1B#1 c2A#1 c2B#1 c1A#3 ] ) always clobbers reg byte a 
Statement [30] (byte) c1B#3 ← (byte) c1B#1 - (byte) 5 [ c2A#1 c2B#1 c1A#3 c1B#3 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 ] ) always clobbers reg byte a 
Statement [34] (byte~) doplasma::$3 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$3 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$3 ] ) always clobbers reg byte a 
Statement [36] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ) always clobbers reg byte a 
Statement [37] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ( main:3::doplasma:18 [ c2A#1 c2B#1 c1A#3 c1B#3 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ) always clobbers reg byte a 
Statement [41] (byte) c2B#3 ← (byte) c2B#1 - (byte) 3 [ c1A#3 c1B#3 c2A#3 c2B#3 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 ] ) always clobbers reg byte a 
Statement [44] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#1 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#1 ] ) always clobbers reg byte a 
Statement [46] (byte) doplasma::val#4 ← (byte) doplasma::val#1 + *((const byte[$19]) doplasma::ybuf#0+(byte) 1) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#4 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#4 ] ) always clobbers reg byte a 
Statement [48] (byte) doplasma::val#6 ← (byte) doplasma::val#4 + *((const byte[$19]) doplasma::ybuf#0+(byte) 2) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#6 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#6 ] ) always clobbers reg byte a 
Statement [50] (byte) doplasma::val#8 ← (byte) doplasma::val#6 + *((const byte[$19]) doplasma::ybuf#0+(byte) 3) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#8 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#8 ] ) always clobbers reg byte a 
Statement [52] (byte) doplasma::val#10 ← (byte) doplasma::val#8 + *((const byte[$19]) doplasma::ybuf#0+(byte) 4) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#10 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#10 ] ) always clobbers reg byte a 
Statement [54] (byte) doplasma::val#12 ← (byte) doplasma::val#10 + *((const byte[$19]) doplasma::ybuf#0+(byte) 5) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#12 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#12 ] ) always clobbers reg byte a 
Statement [56] (byte) doplasma::val#14 ← (byte) doplasma::val#12 + *((const byte[$19]) doplasma::ybuf#0+(byte) 6) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#14 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#14 ] ) always clobbers reg byte a 
Statement [58] (byte) doplasma::val#16 ← (byte) doplasma::val#14 + *((const byte[$19]) doplasma::ybuf#0+(byte) 7) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#16 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#16 ] ) always clobbers reg byte a 
Statement [60] (byte) doplasma::val#18 ← (byte) doplasma::val#16 + *((const byte[$19]) doplasma::ybuf#0+(byte) 8) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#18 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#18 ] ) always clobbers reg byte a 
Statement [62] (byte) doplasma::val#20 ← (byte) doplasma::val#18 + *((const byte[$19]) doplasma::ybuf#0+(byte) 9) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#20 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#20 ] ) always clobbers reg byte a 
Statement [64] (byte) doplasma::val#22 ← (byte) doplasma::val#20 + *((const byte[$19]) doplasma::ybuf#0+(byte) $a) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#22 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#22 ] ) always clobbers reg byte a 
Statement [66] (byte) doplasma::val#24 ← (byte) doplasma::val#22 + *((const byte[$19]) doplasma::ybuf#0+(byte) $b) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#24 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#24 ] ) always clobbers reg byte a 
Statement [68] (byte) doplasma::val#26 ← (byte) doplasma::val#24 + *((const byte[$19]) doplasma::ybuf#0+(byte) $c) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#26 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#26 ] ) always clobbers reg byte a 
Statement [70] (byte) doplasma::val#28 ← (byte) doplasma::val#26 + *((const byte[$19]) doplasma::ybuf#0+(byte) $d) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#28 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#28 ] ) always clobbers reg byte a 
Statement [72] (byte) doplasma::val#30 ← (byte) doplasma::val#28 + *((const byte[$19]) doplasma::ybuf#0+(byte) $e) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#30 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#30 ] ) always clobbers reg byte a 
Statement [74] (byte) doplasma::val#32 ← (byte) doplasma::val#30 + *((const byte[$19]) doplasma::ybuf#0+(byte) $f) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#32 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#32 ] ) always clobbers reg byte a 
Statement [76] (byte) doplasma::val#34 ← (byte) doplasma::val#32 + *((const byte[$19]) doplasma::ybuf#0+(byte) $10) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#34 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#34 ] ) always clobbers reg byte a 
Statement [78] (byte) doplasma::val#36 ← (byte) doplasma::val#34 + *((const byte[$19]) doplasma::ybuf#0+(byte) $11) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#36 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#36 ] ) always clobbers reg byte a 
Statement [80] (byte) doplasma::val#38 ← (byte) doplasma::val#36 + *((const byte[$19]) doplasma::ybuf#0+(byte) $12) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#38 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#38 ] ) always clobbers reg byte a 
Statement [82] (byte) doplasma::val#40 ← (byte) doplasma::val#38 + *((const byte[$19]) doplasma::ybuf#0+(byte) $13) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#40 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#40 ] ) always clobbers reg byte a 
Statement [84] (byte) doplasma::val#42 ← (byte) doplasma::val#40 + *((const byte[$19]) doplasma::ybuf#0+(byte) $14) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#42 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#42 ] ) always clobbers reg byte a 
Statement [86] (byte) doplasma::val#44 ← (byte) doplasma::val#42 + *((const byte[$19]) doplasma::ybuf#0+(byte) $15) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#44 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#44 ] ) always clobbers reg byte a 
Statement [88] (byte) doplasma::val#46 ← (byte) doplasma::val#44 + *((const byte[$19]) doplasma::ybuf#0+(byte) $16) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#46 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#46 ] ) always clobbers reg byte a 
Statement [90] (byte) doplasma::val#48 ← (byte) doplasma::val#46 + *((const byte[$19]) doplasma::ybuf#0+(byte) $17) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#48 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#48 ] ) always clobbers reg byte a 
Statement [92] (byte) doplasma::val#50 ← (byte) doplasma::val#48 + *((const byte[$19]) doplasma::ybuf#0+(byte) $18) [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#50 ] ( main:3::doplasma:18 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::i2#2 doplasma::val#50 ] ) always clobbers reg byte a 
Statement [103] (byte~) makecharset::$2 ← < (word) makecharset::c#2 [ makecharset::c#2 print_char_cursor#44 makecharset::$2 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::$2 ] ) always clobbers reg byte a 
Statement [112] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ) always clobbers reg byte a 
Statement [116] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte) 3 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ) always clobbers reg byte a 
Statement [117] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ) always clobbers reg byte a 
Statement [118] (byte*~) makecharset::$16 ← (const byte*) CHARSET#0 + (word~) makecharset::$9 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$16 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$16 ] ) always clobbers reg byte a 
Statement [119] *((byte*~) makecharset::$16) ← (byte) makecharset::b#3 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::s#0 makecharset::i#7 ] ) always clobbers reg byte a reg byte y 
Statement [122] (byte~) makecharset::$11 ← (word) makecharset::c#2 & (byte) 7 [ makecharset::c#2 print_char_cursor#44 makecharset::$11 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#44 makecharset::$11 ] ) always clobbers reg byte a 
Statement [128] if((word) makecharset::c#1<(word) $100) goto makecharset::@1 [ makecharset::c#1 print_char_cursor#18 ] ( main:3::makecharset:13 [ makecharset::c#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [130] *((byte*) print_char_cursor#44) ← (const byte) print_char::ch#0 [ print_char_cursor#44 ] ( main:3::makecharset:13::print_char:125 [ makecharset::c#2 print_char_cursor#44 ] ) always clobbers reg byte a reg byte y 
Statement [137] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::makecharset:13::print_cls:101 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [139] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::makecharset:13::print_cls:101 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [141] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff [ ] ( main:3::makecharset:13::sid_rnd_init:99 [ ] ) always clobbers reg byte a 
Statement [142] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:3::makecharset:13::sid_rnd_init:99 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::col#2 main::col#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ c1A#1 c1A#3 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ c1B#1 c1B#3 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ c2A#1 c2A#3 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ c2B#1 c2B#3 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ doplasma::yprev#2 doplasma::yprev#3 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ doplasma::i2#2 doplasma::i2#1 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:16 [ makecharset::c#2 makecharset::c#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ] : zp ZP_BYTE:20 , reg byte x , 
Potential registers zp ZP_BYTE:21 [ makecharset::ii#2 makecharset::ii#1 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ] : zp ZP_BYTE:22 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_BYTE:25 [ doplasma::yval#0 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ doplasma::$1 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ doplasma::$3 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ doplasma::val#0 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ doplasma::val#1 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ doplasma::val#4 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ doplasma::val#6 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ doplasma::val#8 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ doplasma::val#10 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ doplasma::val#12 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ doplasma::val#14 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ doplasma::val#16 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ doplasma::val#18 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ doplasma::val#20 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ doplasma::val#22 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ doplasma::val#24 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ doplasma::val#26 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ doplasma::val#28 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ doplasma::val#30 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ doplasma::val#32 ] : zp ZP_BYTE:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ doplasma::val#34 ] : zp ZP_BYTE:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ doplasma::val#36 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ doplasma::val#38 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ doplasma::val#40 ] : zp ZP_BYTE:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ doplasma::val#42 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ doplasma::val#44 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ doplasma::val#46 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ doplasma::val#48 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ doplasma::val#50 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ makecharset::$2 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ makecharset::s#0 ] : zp ZP_BYTE:55 , reg byte x , 
Potential registers zp ZP_BYTE:56 [ sid_rnd::return#2 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:57 [ makecharset::$3 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ makecharset::$4 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:59 [ makecharset::$8 ] : zp ZP_WORD:59 , 
Potential registers zp ZP_WORD:61 [ makecharset::$9 ] : zp ZP_WORD:61 , 
Potential registers zp ZP_WORD:63 [ makecharset::$16 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_BYTE:65 [ makecharset::$11 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:66 [ sid_rnd::return#0 ] : zp ZP_BYTE:66 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [makecharset] 3,019.83: zp ZP_BYTE:22 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ] 2,002: zp ZP_BYTE:57 [ makecharset::$3 ] 2,002: zp ZP_BYTE:58 [ makecharset::$4 ] 1,876.88: zp ZP_BYTE:21 [ makecharset::ii#2 makecharset::ii#1 ] 202: zp ZP_WORD:59 [ makecharset::$8 ] 202: zp ZP_WORD:61 [ makecharset::$9 ] 202: zp ZP_WORD:63 [ makecharset::$16 ] 171.7: zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ] 56.22: zp ZP_BYTE:55 [ makecharset::s#0 ] 22.3: zp ZP_WORD:16 [ makecharset::c#2 makecharset::c#1 ] 22: zp ZP_BYTE:54 [ makecharset::$2 ] 22: zp ZP_BYTE:65 [ makecharset::$11 ] 
Uplift Scope [doplasma] 303: zp ZP_BYTE:10 [ doplasma::yprev#2 doplasma::yprev#3 ] 212.1: zp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ] 205.88: zp ZP_BYTE:15 [ doplasma::i2#2 doplasma::i2#1 ] 202: zp ZP_BYTE:26 [ doplasma::$1 ] 202: zp ZP_BYTE:27 [ doplasma::$3 ] 202: zp ZP_BYTE:28 [ doplasma::val#0 ] 202: zp ZP_BYTE:53 [ doplasma::val#50 ] 154.17: zp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 151.5: zp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ] 151.5: zp ZP_BYTE:29 [ doplasma::val#1 ] 151.5: zp ZP_BYTE:30 [ doplasma::val#4 ] 151.5: zp ZP_BYTE:31 [ doplasma::val#6 ] 151.5: zp ZP_BYTE:32 [ doplasma::val#8 ] 151.5: zp ZP_BYTE:33 [ doplasma::val#10 ] 151.5: zp ZP_BYTE:34 [ doplasma::val#12 ] 151.5: zp ZP_BYTE:35 [ doplasma::val#14 ] 151.5: zp ZP_BYTE:36 [ doplasma::val#16 ] 151.5: zp ZP_BYTE:37 [ doplasma::val#18 ] 151.5: zp ZP_BYTE:38 [ doplasma::val#20 ] 151.5: zp ZP_BYTE:39 [ doplasma::val#22 ] 151.5: zp ZP_BYTE:40 [ doplasma::val#24 ] 151.5: zp ZP_BYTE:41 [ doplasma::val#26 ] 151.5: zp ZP_BYTE:42 [ doplasma::val#28 ] 151.5: zp ZP_BYTE:43 [ doplasma::val#30 ] 151.5: zp ZP_BYTE:44 [ doplasma::val#32 ] 151.5: zp ZP_BYTE:45 [ doplasma::val#34 ] 151.5: zp ZP_BYTE:46 [ doplasma::val#36 ] 151.5: zp ZP_BYTE:47 [ doplasma::val#38 ] 151.5: zp ZP_BYTE:48 [ doplasma::val#40 ] 151.5: zp ZP_BYTE:49 [ doplasma::val#42 ] 151.5: zp ZP_BYTE:50 [ doplasma::val#44 ] 151.5: zp ZP_BYTE:51 [ doplasma::val#46 ] 151.5: zp ZP_BYTE:52 [ doplasma::val#48 ] 147.58: zp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 118.65: zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] 115.5: zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] 43.29: zp ZP_BYTE:25 [ doplasma::yval#0 ] 
Uplift Scope [sid_rnd] 2,002: zp ZP_BYTE:56 [ sid_rnd::return#2 ] 334.33: zp ZP_BYTE:66 [ sid_rnd::return#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [main] 33: zp ZP_WORD:2 [ main::col#2 main::col#1 ] 
Uplift Scope [] 16.42: zp ZP_WORD:18 [ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ] 1.34: zp ZP_BYTE:4 [ c1A#1 c1A#3 ] 1.26: zp ZP_BYTE:5 [ c1B#1 c1B#3 ] 0.85: zp ZP_BYTE:6 [ c2A#1 c2A#3 ] 0.83: zp ZP_BYTE:7 [ c2B#1 c2B#3 ] 
Uplift Scope [print_char] 
Uplift Scope [sid_rnd_init] 

Uplifting [makecharset] best 165355 combination reg byte y [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ] reg byte a [ makecharset::$3 ] zp ZP_BYTE:58 [ makecharset::$4 ] reg byte x [ makecharset::ii#2 makecharset::ii#1 ] zp ZP_WORD:59 [ makecharset::$8 ] zp ZP_WORD:61 [ makecharset::$9 ] zp ZP_WORD:63 [ makecharset::$16 ] zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ] zp ZP_BYTE:55 [ makecharset::s#0 ] zp ZP_WORD:16 [ makecharset::c#2 makecharset::c#1 ] zp ZP_BYTE:54 [ makecharset::$2 ] zp ZP_BYTE:65 [ makecharset::$11 ] 
Limited combination testing to 100 combinations of 9216 possible.
Uplifting [sid_rnd] best 156352 combination reg byte a [ sid_rnd::return#2 ] reg byte a [ sid_rnd::return#0 ] 
Uplifting [print_cls] best 156352 combination zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [main] best 156352 combination zp ZP_WORD:2 [ main::col#2 main::col#1 ] 
Uplifting [] best 156352 combination zp ZP_WORD:18 [ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ] zp ZP_BYTE:4 [ c1A#1 c1A#3 ] zp ZP_BYTE:5 [ c1B#1 c1B#3 ] zp ZP_BYTE:6 [ c2A#1 c2A#3 ] zp ZP_BYTE:7 [ c2B#1 c2B#3 ] 
Uplifting [print_char] best 156352 combination 
Uplifting [sid_rnd_init] best 156352 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:58 [ makecharset::$4 ]
Uplifting [makecharset] best 156352 combination zp ZP_BYTE:58 [ makecharset::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ doplasma::yprev#2 doplasma::yprev#3 ]
Uplifting [doplasma] best 155852 combination reg byte x [ doplasma::yprev#2 doplasma::yprev#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ]
Uplifting [doplasma] best 155852 combination zp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ doplasma::i2#2 doplasma::i2#1 ]
Uplifting [doplasma] best 147152 combination reg byte x [ doplasma::i2#2 doplasma::i2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ doplasma::$1 ]
Uplifting [doplasma] best 146552 combination reg byte a [ doplasma::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ doplasma::$3 ]
Uplifting [doplasma] best 145952 combination reg byte a [ doplasma::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ doplasma::val#0 ]
Uplifting [doplasma] best 145352 combination reg byte a [ doplasma::val#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ doplasma::val#50 ]
Uplifting [doplasma] best 144752 combination reg byte a [ doplasma::val#50 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ]
Uplifting [makecharset] best 144752 combination zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Uplifting [doplasma] best 144752 combination zp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ]
Uplifting [doplasma] best 144752 combination zp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ doplasma::val#1 ]
Uplifting [doplasma] best 143852 combination reg byte a [ doplasma::val#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ doplasma::val#4 ]
Uplifting [doplasma] best 142952 combination reg byte a [ doplasma::val#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ doplasma::val#6 ]
Uplifting [doplasma] best 142052 combination reg byte a [ doplasma::val#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ doplasma::val#8 ]
Uplifting [doplasma] best 141152 combination reg byte a [ doplasma::val#8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ doplasma::val#10 ]
Uplifting [doplasma] best 140252 combination reg byte a [ doplasma::val#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ doplasma::val#12 ]
Uplifting [doplasma] best 139352 combination reg byte a [ doplasma::val#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ doplasma::val#14 ]
Uplifting [doplasma] best 138452 combination reg byte a [ doplasma::val#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ doplasma::val#16 ]
Uplifting [doplasma] best 137552 combination reg byte a [ doplasma::val#16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ doplasma::val#18 ]
Uplifting [doplasma] best 136652 combination reg byte a [ doplasma::val#18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ doplasma::val#20 ]
Uplifting [doplasma] best 135752 combination reg byte a [ doplasma::val#20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ doplasma::val#22 ]
Uplifting [doplasma] best 134852 combination reg byte a [ doplasma::val#22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ doplasma::val#24 ]
Uplifting [doplasma] best 133952 combination reg byte a [ doplasma::val#24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ doplasma::val#26 ]
Uplifting [doplasma] best 133052 combination reg byte a [ doplasma::val#26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:42 [ doplasma::val#28 ]
Uplifting [doplasma] best 132152 combination reg byte a [ doplasma::val#28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ doplasma::val#30 ]
Uplifting [doplasma] best 131252 combination reg byte a [ doplasma::val#30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ doplasma::val#32 ]
Uplifting [doplasma] best 130352 combination reg byte a [ doplasma::val#32 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ doplasma::val#34 ]
Uplifting [doplasma] best 129452 combination reg byte a [ doplasma::val#34 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ doplasma::val#36 ]
Uplifting [doplasma] best 128552 combination reg byte a [ doplasma::val#36 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ doplasma::val#38 ]
Uplifting [doplasma] best 127652 combination reg byte a [ doplasma::val#38 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ doplasma::val#40 ]
Uplifting [doplasma] best 126752 combination reg byte a [ doplasma::val#40 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ doplasma::val#42 ]
Uplifting [doplasma] best 125852 combination reg byte a [ doplasma::val#42 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ doplasma::val#44 ]
Uplifting [doplasma] best 124952 combination reg byte a [ doplasma::val#44 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ doplasma::val#46 ]
Uplifting [doplasma] best 124052 combination reg byte a [ doplasma::val#46 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:52 [ doplasma::val#48 ]
Uplifting [doplasma] best 123152 combination reg byte a [ doplasma::val#48 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Uplifting [doplasma] best 123152 combination zp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Uplifting [doplasma] best 123152 combination zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Uplifting [doplasma] best 123152 combination zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ makecharset::s#0 ]
Uplifting [makecharset] best 123152 combination zp ZP_BYTE:55 [ makecharset::s#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ doplasma::yval#0 ]
Uplifting [doplasma] best 123152 combination zp ZP_BYTE:25 [ doplasma::yval#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ makecharset::$2 ]
Uplifting [makecharset] best 123112 combination reg byte a [ makecharset::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:65 [ makecharset::$11 ]
Uplifting [makecharset] best 123052 combination reg byte a [ makecharset::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ c1A#1 c1A#3 ]
Uplifting [] best 123052 combination zp ZP_BYTE:4 [ c1A#1 c1A#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ c1B#1 c1B#3 ]
Uplifting [] best 123052 combination zp ZP_BYTE:5 [ c1B#1 c1B#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ c2A#1 c2A#3 ]
Uplifting [] best 123052 combination zp ZP_BYTE:6 [ c2A#1 c2A#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ c2B#1 c2B#3 ]
Uplifting [] best 123052 combination zp ZP_BYTE:7 [ c2B#1 c2B#3 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ makecharset::$8 ] ] with [ zp ZP_WORD:61 [ makecharset::$9 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ makecharset::$8 makecharset::$9 ] ] with [ zp ZP_WORD:63 [ makecharset::$16 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:2 [ main::col#2 main::col#1 ] ] with [ zp ZP_WORD:16 [ makecharset::c#2 makecharset::c#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ main::col#2 main::col#1 makecharset::c#2 makecharset::c#1 ] ] with [ zp ZP_WORD:23 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ c1A#1 c1A#3 ] ] with [ zp ZP_BYTE:20 [ makecharset::i#7 makecharset::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ c1B#1 c1B#3 ] ] with [ zp ZP_BYTE:55 [ makecharset::s#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ c2A#1 c2A#3 ] ] with [ zp ZP_BYTE:58 [ makecharset::$4 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] ] with [ zp ZP_BYTE:12 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] ] with [ zp ZP_BYTE:13 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ doplasma::i#2 doplasma::i#1 ] ] with [ zp ZP_BYTE:14 [ doplasma::i1#2 doplasma::i1#1 ] ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 doplasma::i1#2 doplasma::i1#1 ]
Allocated (was zp ZP_WORD:18) zp ZP_WORD:11 [ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ]
Allocated (was zp ZP_BYTE:25) zp ZP_BYTE:13 [ doplasma::yval#0 ]
Allocated (was zp ZP_WORD:59) zp ZP_WORD:14 [ makecharset::$8 makecharset::$9 makecharset::$16 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// A KickC version of the plasma routine from the CC65 samples
// This version has an unrolled inner loop to reach 50+FPS
// This version also optimizes the inner loop by calculating the Y buffer as a set of differences
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .label print_line_cursor = $400
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label SCREEN1 = $2800
  .label CHARSET = $2000
  .label SINTABLE = $1f00
  .label print_char_cursor = $b
  .label c1A = 4
  .label c1B = 5
  .label c2A = 6
  .label c2B = 7
//SEG3 @begin
bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)         .byte round(127.5+127.5*sin(toRadians(360*i/256)))  }}
//SEG6 [2] phi from @1 to @2 [phi:@1->@2]
b2_from_b1:
  jmp b2
//SEG7 @2
b2:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BORDERCOL
  //SEG14 [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG15 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG16 [8] phi (byte*) main::col#2 = (const byte*) COLS#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
    jmp b1
  //SEG17 [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG18 [8] phi (byte*) main::col#2 = (byte*) main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG19 main::@1
  b1:
  //SEG20 [9] *((byte*) main::col#2) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
  //SEG21 [10] (byte*) main::col#1 ← ++ (byte*) main::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG22 [11] if((byte*) main::col#1!=(const byte*) COLS#0+(word) $3e8+(byte) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda col+1
    cmp #>COLS+$3e8+1
    bne b1_from_b1
    lda col
    cmp #<COLS+$3e8+1
    bne b1_from_b1
  //SEG23 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG24 main::@2
  b2:
  //SEG25 [13] call makecharset 
  //SEG26 [98] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from_b2:
    jsr makecharset
  //SEG27 [14] phi from main::@2 to main::toD0181 [phi:main::@2->main::toD0181]
  toD0181_from_b2:
    jmp toD0181
  //SEG28 main::toD0181
  toD0181:
    jmp b5
  //SEG29 main::@5
  b5:
  //SEG30 [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG31 [16] phi from main::@5 to main::@3 [phi:main::@5->main::@3]
  b3_from_b5:
  //SEG32 [16] phi (byte) c2B#1 = (byte) 0 [phi:main::@5->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c2B
  //SEG33 [16] phi (byte) c2A#1 = (byte) 0 [phi:main::@5->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta c2A
  //SEG34 [16] phi (byte) c1B#1 = (byte) 0 [phi:main::@5->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta c1B
  //SEG35 [16] phi (byte) c1A#1 = (byte) 0 [phi:main::@5->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta c1A
    jmp b3
  //SEG36 main::@3
  b3:
  //SEG37 [17] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG38 main::@4
  b4:
  //SEG39 [18] call doplasma 
    jsr doplasma
  //SEG40 [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  b3_from_b4:
  //SEG41 [16] phi (byte) c2B#1 = (byte) c2B#3 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG42 [16] phi (byte) c2A#1 = (byte) c2A#3 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG43 [16] phi (byte) c1B#1 = (byte) c1B#3 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG44 [16] phi (byte) c1A#1 = (byte) c1A#3 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b3
}
//SEG45 doplasma
// Render plasma to the passed screen
doplasma: {
    .label c1a = 8
    .label c1b = 9
    .label yval = $d
    .label i = $a
    .label c2a = 8
    .label c2b = 9
    .label i1 = $a
  //SEG46 [19] (byte) doplasma::c1a#0 ← (byte) c1A#1 -- vbuz1=vbuz2 
    lda c1A
    sta c1a
  //SEG47 [20] (byte) doplasma::c1b#0 ← (byte) c1B#1 -- vbuz1=vbuz2 
    lda c1B
    sta c1b
  //SEG48 [21] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  b1_from_doplasma:
  //SEG49 [21] phi (byte) doplasma::i#2 = (byte) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG50 [21] phi (byte) doplasma::yprev#2 = (byte) 0 [phi:doplasma->doplasma::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG51 [21] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#0 [phi:doplasma->doplasma::@1#2] -- register_copy 
  //SEG52 [21] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#0 [phi:doplasma->doplasma::@1#3] -- register_copy 
    jmp b1
  // Calculate ybuff as a bunch of differences
  //SEG53 doplasma::@1
  b1:
  //SEG54 [22] (byte) doplasma::yval#0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy c1a
    lda SINTABLE,y
    ldy c1b
    clc
    adc SINTABLE,y
    sta yval
  //SEG55 [23] (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2 -- vbuaa=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc yval
  //SEG56 [24] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i
    sta ybuf,y
  //SEG57 [25] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1a
    axs #-[4]
    stx c1a
  //SEG58 [26] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1b
    axs #-[9]
    stx c1b
  //SEG59 [27] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG60 [28] if((byte) doplasma::i#1<(byte) $19) goto doplasma::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$19
    bcc b8
    jmp b2
  //SEG61 doplasma::@2
  b2:
  //SEG62 [29] (byte) c1A#3 ← (byte) c1A#1 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1A
    axs #-[3]
    stx c1A
  //SEG63 [30] (byte) c1B#3 ← (byte) c1B#1 - (byte) 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax c1B
    axs #5
    stx c1B
  //SEG64 [31] (byte) doplasma::c2a#0 ← (byte) c2A#1 -- vbuz1=vbuz2 
    lda c2A
    sta c2a
  //SEG65 [32] (byte) doplasma::c2b#0 ← (byte) c2B#1 -- vbuz1=vbuz2 
    lda c2B
    sta c2b
  //SEG66 [33] phi from doplasma::@2 to doplasma::@3 [phi:doplasma::@2->doplasma::@3]
  b3_from_b2:
  //SEG67 [33] phi (byte) doplasma::i1#2 = (byte) 0 [phi:doplasma::@2->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG68 [33] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#0 [phi:doplasma::@2->doplasma::@3#1] -- register_copy 
  //SEG69 [33] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#0 [phi:doplasma::@2->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG70 [33] phi from doplasma::@3 to doplasma::@3 [phi:doplasma::@3->doplasma::@3]
  b3_from_b3:
  //SEG71 [33] phi (byte) doplasma::i1#2 = (byte) doplasma::i1#1 [phi:doplasma::@3->doplasma::@3#0] -- register_copy 
  //SEG72 [33] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#1 [phi:doplasma::@3->doplasma::@3#1] -- register_copy 
  //SEG73 [33] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#1 [phi:doplasma::@3->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG74 doplasma::@3
  b3:
  //SEG75 [34] (byte~) doplasma::$3 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy c2a
    lda SINTABLE,y
    ldy c2b
    clc
    adc SINTABLE,y
  //SEG76 [35] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i1
    sta xbuf,y
  //SEG77 [36] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2a
    axs #-[3]
    stx c2a
  //SEG78 [37] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2b
    axs #-[7]
    stx c2b
  //SEG79 [38] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG80 [39] if((byte) doplasma::i1#1<(byte) $28) goto doplasma::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda i1
    cmp #$28
    bcc b3_from_b3
    jmp b4
  //SEG81 doplasma::@4
  b4:
  //SEG82 [40] (byte) c2A#3 ← (byte) c2A#1 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda c2A
    clc
    adc #2
    sta c2A
  //SEG83 [41] (byte) c2B#3 ← (byte) c2B#1 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax c2B
    axs #3
    stx c2B
  //SEG84 [42] phi from doplasma::@4 to doplasma::@5 [phi:doplasma::@4->doplasma::@5]
  b5_from_b4:
  //SEG85 [42] phi (byte) doplasma::i2#2 = (byte) 0 [phi:doplasma::@4->doplasma::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b5
  //SEG86 [42] phi from doplasma::@7 to doplasma::@5 [phi:doplasma::@7->doplasma::@5]
  b5_from_b7:
  //SEG87 [42] phi (byte) doplasma::i2#2 = (byte) doplasma::i2#1 [phi:doplasma::@7->doplasma::@5#0] -- register_copy 
    jmp b5
  //SEG88 doplasma::@5
  b5:
  //SEG89 [43] (byte) doplasma::val#0 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) -- vbuaa=pbuc1_derefidx_vbuxx 
    // Find the first value on the row
    lda xbuf,x
    jmp b6
  // Calculate the next values as sums of diffs
  // Use experimental loop unrolling to increase the speed
  //SEG90 doplasma::@6
  b6:
  //SEG91 [44] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf
  //SEG92 [45] *((const byte*) SCREEN1#0 + (byte) doplasma::i2#2) ← (byte) doplasma::val#1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1,x
    jmp b6_1
  //SEG93 doplasma::@6_1
  b6_1:
  //SEG94 [46] (byte) doplasma::val#4 ← (byte) doplasma::val#1 + *((const byte[$19]) doplasma::ybuf#0+(byte) 1) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+1
  //SEG95 [47] *((const byte*) SCREEN1#0+(byte) 1*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#4 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+1*$28,x
    jmp b6_2
  //SEG96 doplasma::@6_2
  b6_2:
  //SEG97 [48] (byte) doplasma::val#6 ← (byte) doplasma::val#4 + *((const byte[$19]) doplasma::ybuf#0+(byte) 2) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+2
  //SEG98 [49] *((const byte*) SCREEN1#0+(byte) 2*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+2*$28,x
    jmp b6_3
  //SEG99 doplasma::@6_3
  b6_3:
  //SEG100 [50] (byte) doplasma::val#8 ← (byte) doplasma::val#6 + *((const byte[$19]) doplasma::ybuf#0+(byte) 3) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+3
  //SEG101 [51] *((const byte*) SCREEN1#0+(byte) 3*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+3*$28,x
    jmp b6_4
  //SEG102 doplasma::@6_4
  b6_4:
  //SEG103 [52] (byte) doplasma::val#10 ← (byte) doplasma::val#8 + *((const byte[$19]) doplasma::ybuf#0+(byte) 4) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+4
  //SEG104 [53] *((const byte*) SCREEN1#0+(byte) 4*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#10 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+4*$28,x
    jmp b6_5
  //SEG105 doplasma::@6_5
  b6_5:
  //SEG106 [54] (byte) doplasma::val#12 ← (byte) doplasma::val#10 + *((const byte[$19]) doplasma::ybuf#0+(byte) 5) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+5
  //SEG107 [55] *((const byte*) SCREEN1#0+(byte) 5*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#12 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+5*$28,x
    jmp b6_6
  //SEG108 doplasma::@6_6
  b6_6:
  //SEG109 [56] (byte) doplasma::val#14 ← (byte) doplasma::val#12 + *((const byte[$19]) doplasma::ybuf#0+(byte) 6) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+6
  //SEG110 [57] *((const byte*) SCREEN1#0+(byte) 6*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#14 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+6*$28,x
    jmp b6_7
  //SEG111 doplasma::@6_7
  b6_7:
  //SEG112 [58] (byte) doplasma::val#16 ← (byte) doplasma::val#14 + *((const byte[$19]) doplasma::ybuf#0+(byte) 7) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+7
  //SEG113 [59] *((const byte*) SCREEN1#0+(byte) 7*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#16 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+7*$28,x
    jmp b6_8
  //SEG114 doplasma::@6_8
  b6_8:
  //SEG115 [60] (byte) doplasma::val#18 ← (byte) doplasma::val#16 + *((const byte[$19]) doplasma::ybuf#0+(byte) 8) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+8
  //SEG116 [61] *((const byte*) SCREEN1#0+(byte) 8*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#18 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+8*$28,x
    jmp b6_9
  //SEG117 doplasma::@6_9
  b6_9:
  //SEG118 [62] (byte) doplasma::val#20 ← (byte) doplasma::val#18 + *((const byte[$19]) doplasma::ybuf#0+(byte) 9) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+9
  //SEG119 [63] *((const byte*) SCREEN1#0+(byte) 9*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#20 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+9*$28,x
    jmp b6_10
  //SEG120 doplasma::@6_10
  b6_10:
  //SEG121 [64] (byte) doplasma::val#22 ← (byte) doplasma::val#20 + *((const byte[$19]) doplasma::ybuf#0+(byte) $a) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$a
  //SEG122 [65] *((const byte*) SCREEN1#0+(byte) $a*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#22 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$a*$28,x
    jmp b6_11
  //SEG123 doplasma::@6_11
  b6_11:
  //SEG124 [66] (byte) doplasma::val#24 ← (byte) doplasma::val#22 + *((const byte[$19]) doplasma::ybuf#0+(byte) $b) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$b
  //SEG125 [67] *((const byte*) SCREEN1#0+(byte) $b*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#24 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$b*$28,x
    jmp b6_12
  //SEG126 doplasma::@6_12
  b6_12:
  //SEG127 [68] (byte) doplasma::val#26 ← (byte) doplasma::val#24 + *((const byte[$19]) doplasma::ybuf#0+(byte) $c) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$c
  //SEG128 [69] *((const byte*) SCREEN1#0+(byte) $c*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#26 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$c*$28,x
    jmp b6_13
  //SEG129 doplasma::@6_13
  b6_13:
  //SEG130 [70] (byte) doplasma::val#28 ← (byte) doplasma::val#26 + *((const byte[$19]) doplasma::ybuf#0+(byte) $d) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$d
  //SEG131 [71] *((const byte*) SCREEN1#0+(byte) $d*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#28 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$d*$28,x
    jmp b6_14
  //SEG132 doplasma::@6_14
  b6_14:
  //SEG133 [72] (byte) doplasma::val#30 ← (byte) doplasma::val#28 + *((const byte[$19]) doplasma::ybuf#0+(byte) $e) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$e
  //SEG134 [73] *((const byte*) SCREEN1#0+(byte) $e*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#30 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$e*$28,x
    jmp b6_15
  //SEG135 doplasma::@6_15
  b6_15:
  //SEG136 [74] (byte) doplasma::val#32 ← (byte) doplasma::val#30 + *((const byte[$19]) doplasma::ybuf#0+(byte) $f) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$f
  //SEG137 [75] *((const byte*) SCREEN1#0+(byte) $f*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#32 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$f*$28,x
    jmp b6_16
  //SEG138 doplasma::@6_16
  b6_16:
  //SEG139 [76] (byte) doplasma::val#34 ← (byte) doplasma::val#32 + *((const byte[$19]) doplasma::ybuf#0+(byte) $10) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$10
  //SEG140 [77] *((const byte*) SCREEN1#0+(byte) $10*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#34 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$10*$28,x
    jmp b6_17
  //SEG141 doplasma::@6_17
  b6_17:
  //SEG142 [78] (byte) doplasma::val#36 ← (byte) doplasma::val#34 + *((const byte[$19]) doplasma::ybuf#0+(byte) $11) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$11
  //SEG143 [79] *((const byte*) SCREEN1#0+(byte) $11*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#36 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$11*$28,x
    jmp b6_18
  //SEG144 doplasma::@6_18
  b6_18:
  //SEG145 [80] (byte) doplasma::val#38 ← (byte) doplasma::val#36 + *((const byte[$19]) doplasma::ybuf#0+(byte) $12) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$12
  //SEG146 [81] *((const byte*) SCREEN1#0+(byte) $12*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#38 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$12*$28,x
    jmp b6_19
  //SEG147 doplasma::@6_19
  b6_19:
  //SEG148 [82] (byte) doplasma::val#40 ← (byte) doplasma::val#38 + *((const byte[$19]) doplasma::ybuf#0+(byte) $13) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$13
  //SEG149 [83] *((const byte*) SCREEN1#0+(byte) $13*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#40 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$13*$28,x
    jmp b6_20
  //SEG150 doplasma::@6_20
  b6_20:
  //SEG151 [84] (byte) doplasma::val#42 ← (byte) doplasma::val#40 + *((const byte[$19]) doplasma::ybuf#0+(byte) $14) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$14
  //SEG152 [85] *((const byte*) SCREEN1#0+(byte) $14*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#42 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$14*$28,x
    jmp b6_21
  //SEG153 doplasma::@6_21
  b6_21:
  //SEG154 [86] (byte) doplasma::val#44 ← (byte) doplasma::val#42 + *((const byte[$19]) doplasma::ybuf#0+(byte) $15) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$15
  //SEG155 [87] *((const byte*) SCREEN1#0+(byte) $15*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#44 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$15*$28,x
    jmp b6_22
  //SEG156 doplasma::@6_22
  b6_22:
  //SEG157 [88] (byte) doplasma::val#46 ← (byte) doplasma::val#44 + *((const byte[$19]) doplasma::ybuf#0+(byte) $16) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$16
  //SEG158 [89] *((const byte*) SCREEN1#0+(byte) $16*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#46 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$16*$28,x
    jmp b6_23
  //SEG159 doplasma::@6_23
  b6_23:
  //SEG160 [90] (byte) doplasma::val#48 ← (byte) doplasma::val#46 + *((const byte[$19]) doplasma::ybuf#0+(byte) $17) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$17
  //SEG161 [91] *((const byte*) SCREEN1#0+(byte) $17*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#48 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$17*$28,x
    jmp b6_24
  //SEG162 doplasma::@6_24
  b6_24:
  //SEG163 [92] (byte) doplasma::val#50 ← (byte) doplasma::val#48 + *((const byte[$19]) doplasma::ybuf#0+(byte) $18) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$18
  //SEG164 [93] *((const byte*) SCREEN1#0+(byte) $18*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#50 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$18*$28,x
    jmp b7
  //SEG165 doplasma::@7
  b7:
  //SEG166 [94] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG167 [95] if((byte) doplasma::i2#1<(byte) $28) goto doplasma::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b5_from_b7
    jmp breturn
  //SEG168 doplasma::@return
  breturn:
  //SEG169 [96] return 
    rts
  //SEG170 doplasma::@8
  b8:
  //SEG171 [97] (byte~) doplasma::yprev#3 ← (byte) doplasma::yval#0 -- vbuxx=vbuz1 
    ldx yval
  //SEG172 [21] phi from doplasma::@8 to doplasma::@1 [phi:doplasma::@8->doplasma::@1]
  b1_from_b8:
  //SEG173 [21] phi (byte) doplasma::i#2 = (byte) doplasma::i#1 [phi:doplasma::@8->doplasma::@1#0] -- register_copy 
  //SEG174 [21] phi (byte) doplasma::yprev#2 = (byte~) doplasma::yprev#3 [phi:doplasma::@8->doplasma::@1#1] -- register_copy 
  //SEG175 [21] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#1 [phi:doplasma::@8->doplasma::@1#2] -- register_copy 
  //SEG176 [21] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#1 [phi:doplasma::@8->doplasma::@1#3] -- register_copy 
    jmp b1
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
//SEG177 makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label _4 = 6
    .label _8 = $e
    .label _9 = $e
    .label s = 5
    .label i = 4
    .label c = 2
    .label _16 = $e
  //SEG178 [99] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG179 [100] phi from makecharset to makecharset::@10 [phi:makecharset->makecharset::@10]
  b10_from_makecharset:
    jmp b10
  //SEG180 makecharset::@10
  b10:
  //SEG181 [101] call print_cls 
  //SEG182 [135] phi from makecharset::@10 to print_cls [phi:makecharset::@10->print_cls]
  print_cls_from_b10:
    jsr print_cls
  //SEG183 [102] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  b1_from_b10:
  //SEG184 [102] phi (byte*) print_char_cursor#44 = (const byte*) print_line_cursor#0 [phi:makecharset::@10->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG185 [102] phi (word) makecharset::c#2 = (byte) 0 [phi:makecharset::@10->makecharset::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta c
    lda #0
    sta c+1
    jmp b1
  //SEG186 [102] phi from makecharset::@9 to makecharset::@1 [phi:makecharset::@9->makecharset::@1]
  b1_from_b9:
  //SEG187 [102] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#18 [phi:makecharset::@9->makecharset::@1#0] -- register_copy 
  //SEG188 [102] phi (word) makecharset::c#2 = (word) makecharset::c#1 [phi:makecharset::@9->makecharset::@1#1] -- register_copy 
    jmp b1
  //SEG189 makecharset::@1
  b1:
  //SEG190 [103] (byte~) makecharset::$2 ← < (word) makecharset::c#2 -- vbuaa=_lo_vwuz1 
    lda c
  //SEG191 [104] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda SINTABLE,y
    sta s
  //SEG192 [105] phi from makecharset::@1 to makecharset::@2 [phi:makecharset::@1->makecharset::@2]
  b2_from_b1:
  //SEG193 [105] phi (byte) makecharset::i#7 = (byte) 0 [phi:makecharset::@1->makecharset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG194 [105] phi from makecharset::@6 to makecharset::@2 [phi:makecharset::@6->makecharset::@2]
  b2_from_b6:
  //SEG195 [105] phi (byte) makecharset::i#7 = (byte) makecharset::i#1 [phi:makecharset::@6->makecharset::@2#0] -- register_copy 
    jmp b2
  //SEG196 makecharset::@2
  b2:
  //SEG197 [106] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  b3_from_b2:
  //SEG198 [106] phi (byte) makecharset::b#2 = (byte) 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG199 [106] phi (byte) makecharset::ii#2 = (byte) 0 [phi:makecharset::@2->makecharset::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG200 [106] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  b3_from_b4:
  //SEG201 [106] phi (byte) makecharset::b#2 = (byte) makecharset::b#3 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
  //SEG202 [106] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@4->makecharset::@3#1] -- register_copy 
    jmp b3
  //SEG203 makecharset::@3
  b3:
  //SEG204 [107] call sid_rnd 
    jsr sid_rnd
  //SEG205 [108] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
    jmp b11
  //SEG206 makecharset::@11
  b11:
  //SEG207 [109] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2
  //SEG208 [110] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte) $ff -- vbuz1=vbuaa_band_vbuc1 
    and #$ff
    sta _4
  //SEG209 [111] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4 -- vbuz1_le_vbuz2_then_la1 
    lda s
    cmp _4
    bcs b4_from_b11
    jmp b5
  //SEG210 makecharset::@5
  b5:
  //SEG211 [112] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
  //SEG212 [113] phi from makecharset::@11 makecharset::@5 to makecharset::@4 [phi:makecharset::@11/makecharset::@5->makecharset::@4]
  b4_from_b11:
  b4_from_b5:
  //SEG213 [113] phi (byte) makecharset::b#3 = (byte) makecharset::b#2 [phi:makecharset::@11/makecharset::@5->makecharset::@4#0] -- register_copy 
    jmp b4
  //SEG214 makecharset::@4
  b4:
  //SEG215 [114] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG216 [115] if((byte) makecharset::ii#1<(byte) 8) goto makecharset::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc b3_from_b4
    jmp b6
  //SEG217 makecharset::@6
  b6:
  //SEG218 [116] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda c
    asl
    sta _8
    lda c+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG219 [117] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 -- vwuz1=vwuz1_plus_vbuz2 
    lda i
    clc
    adc _9
    sta _9
    bcc !+
    inc _9+1
  !:
  //SEG220 [118] (byte*~) makecharset::$16 ← (const byte*) CHARSET#0 + (word~) makecharset::$9 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _16
    adc #<CHARSET
    sta _16
    lda _16+1
    adc #>CHARSET
    sta _16+1
  //SEG221 [119] *((byte*~) makecharset::$16) ← (byte) makecharset::b#3 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (_16),y
  //SEG222 [120] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG223 [121] if((byte) makecharset::i#1<(byte) 8) goto makecharset::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #8
    bcc b2_from_b6
    jmp b7
  //SEG224 makecharset::@7
  b7:
  //SEG225 [122] (byte~) makecharset::$11 ← (word) makecharset::c#2 & (byte) 7 -- vbuaa=vwuz1_band_vbuc1 
    lda c
    and #7
  //SEG226 [123] if((byte~) makecharset::$11!=(byte) 0) goto makecharset::@9 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b9_from_b7
  //SEG227 [124] phi from makecharset::@7 to makecharset::@8 [phi:makecharset::@7->makecharset::@8]
  b8_from_b7:
    jmp b8
  //SEG228 makecharset::@8
  b8:
  //SEG229 [125] call print_char 
    jsr print_char
  //SEG230 [126] phi from makecharset::@7 makecharset::@8 to makecharset::@9 [phi:makecharset::@7/makecharset::@8->makecharset::@9]
  b9_from_b7:
  b9_from_b8:
  //SEG231 [126] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#44 [phi:makecharset::@7/makecharset::@8->makecharset::@9#0] -- register_copy 
    jmp b9
  //SEG232 makecharset::@9
  b9:
  //SEG233 [127] (word) makecharset::c#1 ← ++ (word) makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG234 [128] if((word) makecharset::c#1<(word) $100) goto makecharset::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda c+1
    cmp #>$100
    bcc b1_from_b9
    bne !+
    lda c
    cmp #<$100
    bcc b1_from_b9
  !:
    jmp breturn
  //SEG235 makecharset::@return
  breturn:
  //SEG236 [129] return 
    rts
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
//SEG237 print_char
// Print a single char
print_char: {
    .const ch = '.'
  //SEG238 [130] *((byte*) print_char_cursor#44) ← (const byte) print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
  //SEG239 [131] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG240 print_char::@return
  breturn:
  //SEG241 [132] return 
    rts
}
//SEG242 sid_rnd
// Get a random number from the SID voice 3,
// Must be initialized with sid_rnd_init()
sid_rnd: {
  //SEG243 [133] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
    jmp breturn
  //SEG244 sid_rnd::@return
  breturn:
  //SEG245 [134] return 
    rts
}
//SEG246 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG247 [136] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG248 [136] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG249 [136] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG250 [136] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG251 print_cls::@1
  b1:
  //SEG252 [137] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG253 [138] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG254 [139] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG255 print_cls::@return
  breturn:
  //SEG256 [140] return 
    rts
}
//SEG257 sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
  //SEG258 [141] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG259 [142] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG260 sid_rnd_init::@return
  breturn:
  //SEG261 [143] return 
    rts
}
.pc = SINTABLE "SINTABLE"
  .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp toD0181
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b6_1
Removing instruction jmp b6_2
Removing instruction jmp b6_3
Removing instruction jmp b6_4
Removing instruction jmp b6_5
Removing instruction jmp b6_6
Removing instruction jmp b6_7
Removing instruction jmp b6_8
Removing instruction jmp b6_9
Removing instruction jmp b6_10
Removing instruction jmp b6_11
Removing instruction jmp b6_12
Removing instruction jmp b6_13
Removing instruction jmp b6_14
Removing instruction jmp b6_15
Removing instruction jmp b6_16
Removing instruction jmp b6_17
Removing instruction jmp b6_18
Removing instruction jmp b6_19
Removing instruction jmp b6_20
Removing instruction jmp b6_21
Removing instruction jmp b6_22
Removing instruction jmp b6_23
Removing instruction jmp b6_24
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b11
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #BLUE
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b3 with b4
Replacing label b3_from_b3 with b3
Replacing label b5_from_b7 with b5
Replacing label b4_from_b11 with b4
Replacing label b3_from_b4 with b3
Replacing label b2_from_b6 with b2
Replacing label b9_from_b7 with b9
Replacing label b1_from_b9 with b1
Replacing label b1_from_b9 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1:
Removing instruction b2_from_b1:
Removing instruction b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction makecharset_from_b2:
Removing instruction toD0181_from_b2:
Removing instruction toD0181:
Removing instruction b3:
Removing instruction b4_from_b3:
Removing instruction b3_from_b3:
Removing instruction b5_from_b7:
Removing instruction b10_from_makecharset:
Removing instruction print_cls_from_b10:
Removing instruction b1_from_b9:
Removing instruction b2_from_b6:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b11:
Removing instruction b4_from_b5:
Removing instruction b8_from_b7:
Removing instruction b9_from_b7:
Removing instruction b9_from_b8:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction b5:
Removing instruction b3_from_b5:
Removing instruction b3_from_b4:
Removing instruction b1_from_doplasma:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b4:
Removing instruction b5_from_b4:
Removing instruction b6:
Removing instruction b6_1:
Removing instruction b6_2:
Removing instruction b6_3:
Removing instruction b6_4:
Removing instruction b6_5:
Removing instruction b6_6:
Removing instruction b6_7:
Removing instruction b6_8:
Removing instruction b6_9:
Removing instruction b6_10:
Removing instruction b6_11:
Removing instruction b6_12:
Removing instruction b6_13:
Removing instruction b6_14:
Removing instruction b6_15:
Removing instruction b6_16:
Removing instruction b6_17:
Removing instruction b6_18:
Removing instruction b6_19:
Removing instruction b6_20:
Removing instruction b6_21:
Removing instruction b6_22:
Removing instruction b6_23:
Removing instruction b6_24:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_b8:
Removing instruction b10:
Removing instruction b1_from_b10:
Removing instruction b2_from_b1:
Removing instruction b11:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [229] bcc b5 to bcs
Fixing long branch [108] bcc b8 to bcs

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte) 0
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) CHARSET
(const byte*) CHARSET#0 CHARSET = (byte*) 8192
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(byte*) SCREEN1
(const byte*) SCREEN1#0 SCREEN1 = (byte*) 10240
(byte) SID_CONTROL_NOISE
(const byte) SID_CONTROL_NOISE#0 SID_CONTROL_NOISE = (byte) $80
(byte*) SID_VOICE3_CONTROL
(const byte*) SID_VOICE3_CONTROL#0 SID_VOICE3_CONTROL = (byte*) 54290
(word*) SID_VOICE3_FREQ
(const word*) SID_VOICE3_FREQ#0 SID_VOICE3_FREQ = (word*) 54286
(byte*) SID_VOICE3_OSC
(const byte*) SID_VOICE3_OSC#0 SID_VOICE3_OSC = (byte*) 54299
(byte*) SINTABLE
(const byte*) SINTABLE#0 SINTABLE = (byte*) 7936
(byte) c1A
(byte) c1A#1 c1A zp ZP_BYTE:4 1.1538461538461537
(byte) c1A#3 c1A zp ZP_BYTE:4 0.18840579710144925
(byte) c1B
(byte) c1B#1 c1B zp ZP_BYTE:5 1.0714285714285714
(byte) c1B#3 c1B zp ZP_BYTE:5 0.1911764705882353
(byte) c2A
(byte) c2A#1 c2A zp ZP_BYTE:6 0.625
(byte) c2A#3 c2A zp ZP_BYTE:6 0.22413793103448276
(byte) c2B
(byte) c2B#1 c2B zp ZP_BYTE:7 0.6
(byte) c2B#3 c2B zp ZP_BYTE:7 0.22807017543859648
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$1 reg byte a 202.0
(byte~) doplasma::$3 reg byte a 202.0
(label) doplasma::@1
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@6_1
(label) doplasma::@6_10
(label) doplasma::@6_11
(label) doplasma::@6_12
(label) doplasma::@6_13
(label) doplasma::@6_14
(label) doplasma::@6_15
(label) doplasma::@6_16
(label) doplasma::@6_17
(label) doplasma::@6_18
(label) doplasma::@6_19
(label) doplasma::@6_2
(label) doplasma::@6_20
(label) doplasma::@6_21
(label) doplasma::@6_22
(label) doplasma::@6_23
(label) doplasma::@6_24
(label) doplasma::@6_3
(label) doplasma::@6_4
(label) doplasma::@6_5
(label) doplasma::@6_6
(label) doplasma::@6_7
(label) doplasma::@6_8
(label) doplasma::@6_9
(label) doplasma::@7
(label) doplasma::@8
(label) doplasma::@return
(byte) doplasma::c1a
(byte) doplasma::c1a#0 c1a zp ZP_BYTE:8 2.0
(byte) doplasma::c1a#1 c1a zp ZP_BYTE:8 40.4
(byte) doplasma::c1a#2 c1a zp ZP_BYTE:8 76.25
(byte) doplasma::c1b
(byte) doplasma::c1b#0 c1b zp ZP_BYTE:9 4.0
(byte) doplasma::c1b#1 c1b zp ZP_BYTE:9 50.5
(byte) doplasma::c1b#2 c1b zp ZP_BYTE:9 61.0
(byte) doplasma::c2a
(byte) doplasma::c2a#0 c2a zp ZP_BYTE:8 2.0
(byte) doplasma::c2a#1 c2a zp ZP_BYTE:8 50.5
(byte) doplasma::c2a#2 c2a zp ZP_BYTE:8 101.66666666666666
(byte) doplasma::c2b
(byte) doplasma::c2b#0 c2b zp ZP_BYTE:9 4.0
(byte) doplasma::c2b#1 c2b zp ZP_BYTE:9 67.33333333333333
(byte) doplasma::c2b#2 c2b zp ZP_BYTE:9 76.25
(byte) doplasma::i
(byte) doplasma::i#1 i zp ZP_BYTE:10 101.0
(byte) doplasma::i#2 i zp ZP_BYTE:10 50.5
(byte) doplasma::i1
(byte) doplasma::i1#1 i1 zp ZP_BYTE:10 151.5
(byte) doplasma::i1#2 i1 zp ZP_BYTE:10 60.599999999999994
(byte) doplasma::i2
(byte) doplasma::i2#1 reg byte x 151.5
(byte) doplasma::i2#2 reg byte x 54.3846153846154
(byte) doplasma::ii
(byte*) doplasma::screen
(byte) doplasma::val
(byte) doplasma::val#0 reg byte a 202.0
(byte) doplasma::val#1 reg byte a 151.5
(byte) doplasma::val#10 reg byte a 151.5
(byte) doplasma::val#12 reg byte a 151.5
(byte) doplasma::val#14 reg byte a 151.5
(byte) doplasma::val#16 reg byte a 151.5
(byte) doplasma::val#18 reg byte a 151.5
(byte) doplasma::val#20 reg byte a 151.5
(byte) doplasma::val#22 reg byte a 151.5
(byte) doplasma::val#24 reg byte a 151.5
(byte) doplasma::val#26 reg byte a 151.5
(byte) doplasma::val#28 reg byte a 151.5
(byte) doplasma::val#30 reg byte a 151.5
(byte) doplasma::val#32 reg byte a 151.5
(byte) doplasma::val#34 reg byte a 151.5
(byte) doplasma::val#36 reg byte a 151.5
(byte) doplasma::val#38 reg byte a 151.5
(byte) doplasma::val#4 reg byte a 151.5
(byte) doplasma::val#40 reg byte a 151.5
(byte) doplasma::val#42 reg byte a 151.5
(byte) doplasma::val#44 reg byte a 151.5
(byte) doplasma::val#46 reg byte a 151.5
(byte) doplasma::val#48 reg byte a 151.5
(byte) doplasma::val#50 reg byte a 202.0
(byte) doplasma::val#6 reg byte a 151.5
(byte) doplasma::val#8 reg byte a 151.5
(byte[$28]) doplasma::xbuf
(const byte[$28]) doplasma::xbuf#0 xbuf = { fill( $28, 0) }
(byte[$19]) doplasma::ybuf
(const byte[$19]) doplasma::ybuf#0 ybuf = { fill( $19, 0) }
(byte) doplasma::yprev
(byte) doplasma::yprev#2 reg byte x 101.0
(byte~) doplasma::yprev#3 reg byte x 202.0
(byte) doplasma::yval
(byte) doplasma::yval#0 yval zp ZP_BYTE:13 43.285714285714285
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(byte*) main::col
(byte*) main::col#1 col zp ZP_WORD:2 16.5
(byte*) main::col#2 col zp ZP_WORD:2 16.5
(label) main::toD0181
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN1#0&(word) $3fff*(byte) 4|>(word)(const byte*) CHARSET#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(void()) makecharset((byte*) makecharset::charset)
(byte~) makecharset::$11 reg byte a 22.0
(byte*~) makecharset::$16 $16 zp ZP_WORD:14 202.0
(byte~) makecharset::$2 reg byte a 22.0
(byte~) makecharset::$3 reg byte a 2002.0
(byte~) makecharset::$4 $4 zp ZP_BYTE:6 2002.0
(word~) makecharset::$8 $8 zp ZP_WORD:14 202.0
(word~) makecharset::$9 $9 zp ZP_WORD:14 202.0
(label) makecharset::@1
(label) makecharset::@10
(label) makecharset::@11
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#1 reg byte y 2002.0
(byte) makecharset::b#2 reg byte y 500.5
(byte) makecharset::b#3 reg byte y 517.3333333333334
(byte[8]) makecharset::bittab
(const byte[8]) makecharset::bittab#0 bittab = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(word) makecharset::c
(word) makecharset::c#1 c zp ZP_WORD:2 16.5
(word) makecharset::c#2 c zp ZP_WORD:2 5.800000000000001
(byte*) makecharset::charset
(byte) makecharset::i
(byte) makecharset::i#1 i zp ZP_BYTE:4 151.5
(byte) makecharset::i#7 i zp ZP_BYTE:4 20.2
(byte) makecharset::ii
(byte) makecharset::ii#1 reg byte x 1501.5
(byte) makecharset::ii#2 reg byte x 375.375
(byte) makecharset::s
(byte) makecharset::s#0 s zp ZP_BYTE:5 56.22222222222223
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(const byte) print_char::ch#0 ch = (byte) '.'
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:11 4.333333333333333
(byte*) print_char_cursor#18 print_char_cursor zp ZP_WORD:11 11.0
(byte*) print_char_cursor#44 print_char_cursor zp ZP_WORD:11 1.0833333333333333
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 16.5
(byte*) print_line_cursor
(const byte*) print_line_cursor#0 print_line_cursor = (byte*) 1024
(byte*) print_screen
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0 reg byte a 334.33333333333337
(byte) sid_rnd::return#2 reg byte a 2002.0
(void()) sid_rnd_init()
(label) sid_rnd_init::@return

zp ZP_WORD:2 [ main::col#2 main::col#1 makecharset::c#2 makecharset::c#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_BYTE:4 [ c1A#1 c1A#3 makecharset::i#7 makecharset::i#1 ]
zp ZP_BYTE:5 [ c1B#1 c1B#3 makecharset::s#0 ]
zp ZP_BYTE:6 [ c2A#1 c2A#3 makecharset::$4 ]
zp ZP_BYTE:7 [ c2B#1 c2B#3 ]
zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
reg byte x [ doplasma::yprev#2 doplasma::yprev#3 ]
zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 doplasma::i1#2 doplasma::i1#1 ]
reg byte x [ doplasma::i2#2 doplasma::i2#1 ]
zp ZP_WORD:11 [ print_char_cursor#44 print_char_cursor#18 print_char_cursor#1 ]
reg byte x [ makecharset::ii#2 makecharset::ii#1 ]
reg byte y [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
zp ZP_BYTE:13 [ doplasma::yval#0 ]
reg byte a [ doplasma::$1 ]
reg byte a [ doplasma::$3 ]
reg byte a [ doplasma::val#0 ]
reg byte a [ doplasma::val#1 ]
reg byte a [ doplasma::val#4 ]
reg byte a [ doplasma::val#6 ]
reg byte a [ doplasma::val#8 ]
reg byte a [ doplasma::val#10 ]
reg byte a [ doplasma::val#12 ]
reg byte a [ doplasma::val#14 ]
reg byte a [ doplasma::val#16 ]
reg byte a [ doplasma::val#18 ]
reg byte a [ doplasma::val#20 ]
reg byte a [ doplasma::val#22 ]
reg byte a [ doplasma::val#24 ]
reg byte a [ doplasma::val#26 ]
reg byte a [ doplasma::val#28 ]
reg byte a [ doplasma::val#30 ]
reg byte a [ doplasma::val#32 ]
reg byte a [ doplasma::val#34 ]
reg byte a [ doplasma::val#36 ]
reg byte a [ doplasma::val#38 ]
reg byte a [ doplasma::val#40 ]
reg byte a [ doplasma::val#42 ]
reg byte a [ doplasma::val#44 ]
reg byte a [ doplasma::val#46 ]
reg byte a [ doplasma::val#48 ]
reg byte a [ doplasma::val#50 ]
reg byte a [ makecharset::$2 ]
reg byte a [ sid_rnd::return#2 ]
reg byte a [ makecharset::$3 ]
zp ZP_WORD:14 [ makecharset::$8 makecharset::$9 makecharset::$16 ]
reg byte a [ makecharset::$11 ]
reg byte a [ sid_rnd::return#0 ]


FINAL ASSEMBLER
Score: 93970

//SEG0 File Comments
// A KickC version of the plasma routine from the CC65 samples
// This version has an unrolled inner loop to reach 50+FPS
// This version also optimizes the inner loop by calculating the Y buffer as a set of differences
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .label print_line_cursor = $400
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label SCREEN1 = $2800
  .label CHARSET = $2000
  .label SINTABLE = $1f00
  .label print_char_cursor = $b
  .label c1A = 4
  .label c1B = 5
  .label c2A = 6
  .label c2B = 7
//SEG3 @begin
//SEG4 @1
//SEG5 kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)         .byte round(127.5+127.5*sin(toRadians(360*i/256)))  }}
//SEG6 [2] phi from @1 to @2 [phi:@1->@2]
//SEG7 @2
//SEG8 [3] call main 
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
//SEG10 @end
//SEG11 main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BORDERCOL
  //SEG14 [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    sta BGCOL
  //SEG15 [8] phi from main to main::@1 [phi:main->main::@1]
  //SEG16 [8] phi (byte*) main::col#2 = (const byte*) COLS#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
  //SEG17 [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG18 [8] phi (byte*) main::col#2 = (byte*) main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG19 main::@1
  b1:
  //SEG20 [9] *((byte*) main::col#2) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
  //SEG21 [10] (byte*) main::col#1 ← ++ (byte*) main::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG22 [11] if((byte*) main::col#1!=(const byte*) COLS#0+(word) $3e8+(byte) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda col+1
    cmp #>COLS+$3e8+1
    bne b1
    lda col
    cmp #<COLS+$3e8+1
    bne b1
  //SEG23 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG24 main::@2
  //SEG25 [13] call makecharset 
  //SEG26 [98] phi from main::@2 to makecharset [phi:main::@2->makecharset]
    jsr makecharset
  //SEG27 [14] phi from main::@2 to main::toD0181 [phi:main::@2->main::toD0181]
  //SEG28 main::toD0181
  //SEG29 main::@5
  //SEG30 [15] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG31 [16] phi from main::@5 to main::@3 [phi:main::@5->main::@3]
  //SEG32 [16] phi (byte) c2B#1 = (byte) 0 [phi:main::@5->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c2B
  //SEG33 [16] phi (byte) c2A#1 = (byte) 0 [phi:main::@5->main::@3#1] -- vbuz1=vbuc1 
    sta c2A
  //SEG34 [16] phi (byte) c1B#1 = (byte) 0 [phi:main::@5->main::@3#2] -- vbuz1=vbuc1 
    sta c1B
  //SEG35 [16] phi (byte) c1A#1 = (byte) 0 [phi:main::@5->main::@3#3] -- vbuz1=vbuc1 
    sta c1A
  //SEG36 main::@3
  //SEG37 [17] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG38 main::@4
  b4:
  //SEG39 [18] call doplasma 
    jsr doplasma
  //SEG40 [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  //SEG41 [16] phi (byte) c2B#1 = (byte) c2B#3 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG42 [16] phi (byte) c2A#1 = (byte) c2A#3 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG43 [16] phi (byte) c1B#1 = (byte) c1B#3 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG44 [16] phi (byte) c1A#1 = (byte) c1A#3 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b4
}
//SEG45 doplasma
// Render plasma to the passed screen
doplasma: {
    .label c1a = 8
    .label c1b = 9
    .label yval = $d
    .label i = $a
    .label c2a = 8
    .label c2b = 9
    .label i1 = $a
  //SEG46 [19] (byte) doplasma::c1a#0 ← (byte) c1A#1 -- vbuz1=vbuz2 
    lda c1A
    sta c1a
  //SEG47 [20] (byte) doplasma::c1b#0 ← (byte) c1B#1 -- vbuz1=vbuz2 
    lda c1B
    sta c1b
  //SEG48 [21] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  //SEG49 [21] phi (byte) doplasma::i#2 = (byte) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG50 [21] phi (byte) doplasma::yprev#2 = (byte) 0 [phi:doplasma->doplasma::@1#1] -- vbuxx=vbuc1 
    tax
  //SEG51 [21] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#0 [phi:doplasma->doplasma::@1#2] -- register_copy 
  //SEG52 [21] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#0 [phi:doplasma->doplasma::@1#3] -- register_copy 
  // Calculate ybuff as a bunch of differences
  //SEG53 doplasma::@1
  b1:
  //SEG54 [22] (byte) doplasma::yval#0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy c1a
    lda SINTABLE,y
    ldy c1b
    clc
    adc SINTABLE,y
    sta yval
  //SEG55 [23] (byte~) doplasma::$1 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2 -- vbuaa=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc yval
  //SEG56 [24] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i
    sta ybuf,y
  //SEG57 [25] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1a
    axs #-[4]
    stx c1a
  //SEG58 [26] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1b
    axs #-[9]
    stx c1b
  //SEG59 [27] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG60 [28] if((byte) doplasma::i#1<(byte) $19) goto doplasma::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$19
    bcs !b8+
    jmp b8
  !b8:
  //SEG61 doplasma::@2
  //SEG62 [29] (byte) c1A#3 ← (byte) c1A#1 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1A
    axs #-[3]
    stx c1A
  //SEG63 [30] (byte) c1B#3 ← (byte) c1B#1 - (byte) 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax c1B
    axs #5
    stx c1B
  //SEG64 [31] (byte) doplasma::c2a#0 ← (byte) c2A#1 -- vbuz1=vbuz2 
    lda c2A
    sta c2a
  //SEG65 [32] (byte) doplasma::c2b#0 ← (byte) c2B#1 -- vbuz1=vbuz2 
    lda c2B
    sta c2b
  //SEG66 [33] phi from doplasma::@2 to doplasma::@3 [phi:doplasma::@2->doplasma::@3]
  //SEG67 [33] phi (byte) doplasma::i1#2 = (byte) 0 [phi:doplasma::@2->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG68 [33] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#0 [phi:doplasma::@2->doplasma::@3#1] -- register_copy 
  //SEG69 [33] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#0 [phi:doplasma::@2->doplasma::@3#2] -- register_copy 
  //SEG70 [33] phi from doplasma::@3 to doplasma::@3 [phi:doplasma::@3->doplasma::@3]
  //SEG71 [33] phi (byte) doplasma::i1#2 = (byte) doplasma::i1#1 [phi:doplasma::@3->doplasma::@3#0] -- register_copy 
  //SEG72 [33] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#1 [phi:doplasma::@3->doplasma::@3#1] -- register_copy 
  //SEG73 [33] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#1 [phi:doplasma::@3->doplasma::@3#2] -- register_copy 
  //SEG74 doplasma::@3
  b3:
  //SEG75 [34] (byte~) doplasma::$3 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy c2a
    lda SINTABLE,y
    ldy c2b
    clc
    adc SINTABLE,y
  //SEG76 [35] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i1
    sta xbuf,y
  //SEG77 [36] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2a
    axs #-[3]
    stx c2a
  //SEG78 [37] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2b
    axs #-[7]
    stx c2b
  //SEG79 [38] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG80 [39] if((byte) doplasma::i1#1<(byte) $28) goto doplasma::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda i1
    cmp #$28
    bcc b3
  //SEG81 doplasma::@4
  //SEG82 [40] (byte) c2A#3 ← (byte) c2A#1 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda c2A
    clc
    adc #2
    sta c2A
  //SEG83 [41] (byte) c2B#3 ← (byte) c2B#1 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax c2B
    axs #3
    stx c2B
  //SEG84 [42] phi from doplasma::@4 to doplasma::@5 [phi:doplasma::@4->doplasma::@5]
  //SEG85 [42] phi (byte) doplasma::i2#2 = (byte) 0 [phi:doplasma::@4->doplasma::@5#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG86 [42] phi from doplasma::@7 to doplasma::@5 [phi:doplasma::@7->doplasma::@5]
  //SEG87 [42] phi (byte) doplasma::i2#2 = (byte) doplasma::i2#1 [phi:doplasma::@7->doplasma::@5#0] -- register_copy 
  //SEG88 doplasma::@5
  b5:
  //SEG89 [43] (byte) doplasma::val#0 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) -- vbuaa=pbuc1_derefidx_vbuxx 
    // Find the first value on the row
    lda xbuf,x
  // Calculate the next values as sums of diffs
  // Use experimental loop unrolling to increase the speed
  //SEG90 doplasma::@6
  //SEG91 [44] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte[$19]) doplasma::ybuf#0) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf
  //SEG92 [45] *((const byte*) SCREEN1#0 + (byte) doplasma::i2#2) ← (byte) doplasma::val#1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1,x
  //SEG93 doplasma::@6_1
  //SEG94 [46] (byte) doplasma::val#4 ← (byte) doplasma::val#1 + *((const byte[$19]) doplasma::ybuf#0+(byte) 1) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+1
  //SEG95 [47] *((const byte*) SCREEN1#0+(byte) 1*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#4 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+1*$28,x
  //SEG96 doplasma::@6_2
  //SEG97 [48] (byte) doplasma::val#6 ← (byte) doplasma::val#4 + *((const byte[$19]) doplasma::ybuf#0+(byte) 2) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+2
  //SEG98 [49] *((const byte*) SCREEN1#0+(byte) 2*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+2*$28,x
  //SEG99 doplasma::@6_3
  //SEG100 [50] (byte) doplasma::val#8 ← (byte) doplasma::val#6 + *((const byte[$19]) doplasma::ybuf#0+(byte) 3) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+3
  //SEG101 [51] *((const byte*) SCREEN1#0+(byte) 3*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+3*$28,x
  //SEG102 doplasma::@6_4
  //SEG103 [52] (byte) doplasma::val#10 ← (byte) doplasma::val#8 + *((const byte[$19]) doplasma::ybuf#0+(byte) 4) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+4
  //SEG104 [53] *((const byte*) SCREEN1#0+(byte) 4*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#10 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+4*$28,x
  //SEG105 doplasma::@6_5
  //SEG106 [54] (byte) doplasma::val#12 ← (byte) doplasma::val#10 + *((const byte[$19]) doplasma::ybuf#0+(byte) 5) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+5
  //SEG107 [55] *((const byte*) SCREEN1#0+(byte) 5*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#12 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+5*$28,x
  //SEG108 doplasma::@6_6
  //SEG109 [56] (byte) doplasma::val#14 ← (byte) doplasma::val#12 + *((const byte[$19]) doplasma::ybuf#0+(byte) 6) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+6
  //SEG110 [57] *((const byte*) SCREEN1#0+(byte) 6*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#14 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+6*$28,x
  //SEG111 doplasma::@6_7
  //SEG112 [58] (byte) doplasma::val#16 ← (byte) doplasma::val#14 + *((const byte[$19]) doplasma::ybuf#0+(byte) 7) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+7
  //SEG113 [59] *((const byte*) SCREEN1#0+(byte) 7*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#16 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+7*$28,x
  //SEG114 doplasma::@6_8
  //SEG115 [60] (byte) doplasma::val#18 ← (byte) doplasma::val#16 + *((const byte[$19]) doplasma::ybuf#0+(byte) 8) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+8
  //SEG116 [61] *((const byte*) SCREEN1#0+(byte) 8*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#18 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+8*$28,x
  //SEG117 doplasma::@6_9
  //SEG118 [62] (byte) doplasma::val#20 ← (byte) doplasma::val#18 + *((const byte[$19]) doplasma::ybuf#0+(byte) 9) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+9
  //SEG119 [63] *((const byte*) SCREEN1#0+(byte) 9*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#20 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+9*$28,x
  //SEG120 doplasma::@6_10
  //SEG121 [64] (byte) doplasma::val#22 ← (byte) doplasma::val#20 + *((const byte[$19]) doplasma::ybuf#0+(byte) $a) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$a
  //SEG122 [65] *((const byte*) SCREEN1#0+(byte) $a*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#22 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$a*$28,x
  //SEG123 doplasma::@6_11
  //SEG124 [66] (byte) doplasma::val#24 ← (byte) doplasma::val#22 + *((const byte[$19]) doplasma::ybuf#0+(byte) $b) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$b
  //SEG125 [67] *((const byte*) SCREEN1#0+(byte) $b*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#24 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$b*$28,x
  //SEG126 doplasma::@6_12
  //SEG127 [68] (byte) doplasma::val#26 ← (byte) doplasma::val#24 + *((const byte[$19]) doplasma::ybuf#0+(byte) $c) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$c
  //SEG128 [69] *((const byte*) SCREEN1#0+(byte) $c*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#26 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$c*$28,x
  //SEG129 doplasma::@6_13
  //SEG130 [70] (byte) doplasma::val#28 ← (byte) doplasma::val#26 + *((const byte[$19]) doplasma::ybuf#0+(byte) $d) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$d
  //SEG131 [71] *((const byte*) SCREEN1#0+(byte) $d*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#28 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$d*$28,x
  //SEG132 doplasma::@6_14
  //SEG133 [72] (byte) doplasma::val#30 ← (byte) doplasma::val#28 + *((const byte[$19]) doplasma::ybuf#0+(byte) $e) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$e
  //SEG134 [73] *((const byte*) SCREEN1#0+(byte) $e*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#30 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$e*$28,x
  //SEG135 doplasma::@6_15
  //SEG136 [74] (byte) doplasma::val#32 ← (byte) doplasma::val#30 + *((const byte[$19]) doplasma::ybuf#0+(byte) $f) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$f
  //SEG137 [75] *((const byte*) SCREEN1#0+(byte) $f*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#32 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$f*$28,x
  //SEG138 doplasma::@6_16
  //SEG139 [76] (byte) doplasma::val#34 ← (byte) doplasma::val#32 + *((const byte[$19]) doplasma::ybuf#0+(byte) $10) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$10
  //SEG140 [77] *((const byte*) SCREEN1#0+(byte) $10*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#34 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$10*$28,x
  //SEG141 doplasma::@6_17
  //SEG142 [78] (byte) doplasma::val#36 ← (byte) doplasma::val#34 + *((const byte[$19]) doplasma::ybuf#0+(byte) $11) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$11
  //SEG143 [79] *((const byte*) SCREEN1#0+(byte) $11*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#36 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$11*$28,x
  //SEG144 doplasma::@6_18
  //SEG145 [80] (byte) doplasma::val#38 ← (byte) doplasma::val#36 + *((const byte[$19]) doplasma::ybuf#0+(byte) $12) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$12
  //SEG146 [81] *((const byte*) SCREEN1#0+(byte) $12*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#38 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$12*$28,x
  //SEG147 doplasma::@6_19
  //SEG148 [82] (byte) doplasma::val#40 ← (byte) doplasma::val#38 + *((const byte[$19]) doplasma::ybuf#0+(byte) $13) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$13
  //SEG149 [83] *((const byte*) SCREEN1#0+(byte) $13*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#40 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$13*$28,x
  //SEG150 doplasma::@6_20
  //SEG151 [84] (byte) doplasma::val#42 ← (byte) doplasma::val#40 + *((const byte[$19]) doplasma::ybuf#0+(byte) $14) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$14
  //SEG152 [85] *((const byte*) SCREEN1#0+(byte) $14*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#42 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$14*$28,x
  //SEG153 doplasma::@6_21
  //SEG154 [86] (byte) doplasma::val#44 ← (byte) doplasma::val#42 + *((const byte[$19]) doplasma::ybuf#0+(byte) $15) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$15
  //SEG155 [87] *((const byte*) SCREEN1#0+(byte) $15*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#44 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$15*$28,x
  //SEG156 doplasma::@6_22
  //SEG157 [88] (byte) doplasma::val#46 ← (byte) doplasma::val#44 + *((const byte[$19]) doplasma::ybuf#0+(byte) $16) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$16
  //SEG158 [89] *((const byte*) SCREEN1#0+(byte) $16*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#46 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$16*$28,x
  //SEG159 doplasma::@6_23
  //SEG160 [90] (byte) doplasma::val#48 ← (byte) doplasma::val#46 + *((const byte[$19]) doplasma::ybuf#0+(byte) $17) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$17
  //SEG161 [91] *((const byte*) SCREEN1#0+(byte) $17*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#48 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$17*$28,x
  //SEG162 doplasma::@6_24
  //SEG163 [92] (byte) doplasma::val#50 ← (byte) doplasma::val#48 + *((const byte[$19]) doplasma::ybuf#0+(byte) $18) -- vbuaa=vbuaa_plus__deref_pbuc1 
    clc
    adc ybuf+$18
  //SEG164 [93] *((const byte*) SCREEN1#0+(byte) $18*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#50 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN1+$18*$28,x
  //SEG165 doplasma::@7
  //SEG166 [94] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG167 [95] if((byte) doplasma::i2#1<(byte) $28) goto doplasma::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcs !b5+
    jmp b5
  !b5:
  //SEG168 doplasma::@return
  //SEG169 [96] return 
    rts
  //SEG170 doplasma::@8
  b8:
  //SEG171 [97] (byte~) doplasma::yprev#3 ← (byte) doplasma::yval#0 -- vbuxx=vbuz1 
    ldx yval
  //SEG172 [21] phi from doplasma::@8 to doplasma::@1 [phi:doplasma::@8->doplasma::@1]
  //SEG173 [21] phi (byte) doplasma::i#2 = (byte) doplasma::i#1 [phi:doplasma::@8->doplasma::@1#0] -- register_copy 
  //SEG174 [21] phi (byte) doplasma::yprev#2 = (byte~) doplasma::yprev#3 [phi:doplasma::@8->doplasma::@1#1] -- register_copy 
  //SEG175 [21] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#1 [phi:doplasma::@8->doplasma::@1#2] -- register_copy 
  //SEG176 [21] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#1 [phi:doplasma::@8->doplasma::@1#3] -- register_copy 
    jmp b1
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
//SEG177 makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label _4 = 6
    .label _8 = $e
    .label _9 = $e
    .label s = 5
    .label i = 4
    .label c = 2
    .label _16 = $e
  //SEG178 [99] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG179 [100] phi from makecharset to makecharset::@10 [phi:makecharset->makecharset::@10]
  //SEG180 makecharset::@10
  //SEG181 [101] call print_cls 
  //SEG182 [135] phi from makecharset::@10 to print_cls [phi:makecharset::@10->print_cls]
    jsr print_cls
  //SEG183 [102] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  //SEG184 [102] phi (byte*) print_char_cursor#44 = (const byte*) print_line_cursor#0 [phi:makecharset::@10->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG185 [102] phi (word) makecharset::c#2 = (byte) 0 [phi:makecharset::@10->makecharset::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta c
    sta c+1
  //SEG186 [102] phi from makecharset::@9 to makecharset::@1 [phi:makecharset::@9->makecharset::@1]
  //SEG187 [102] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#18 [phi:makecharset::@9->makecharset::@1#0] -- register_copy 
  //SEG188 [102] phi (word) makecharset::c#2 = (word) makecharset::c#1 [phi:makecharset::@9->makecharset::@1#1] -- register_copy 
  //SEG189 makecharset::@1
  b1:
  //SEG190 [103] (byte~) makecharset::$2 ← < (word) makecharset::c#2 -- vbuaa=_lo_vwuz1 
    lda c
  //SEG191 [104] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda SINTABLE,y
    sta s
  //SEG192 [105] phi from makecharset::@1 to makecharset::@2 [phi:makecharset::@1->makecharset::@2]
  //SEG193 [105] phi (byte) makecharset::i#7 = (byte) 0 [phi:makecharset::@1->makecharset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG194 [105] phi from makecharset::@6 to makecharset::@2 [phi:makecharset::@6->makecharset::@2]
  //SEG195 [105] phi (byte) makecharset::i#7 = (byte) makecharset::i#1 [phi:makecharset::@6->makecharset::@2#0] -- register_copy 
  //SEG196 makecharset::@2
  b2:
  //SEG197 [106] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  //SEG198 [106] phi (byte) makecharset::b#2 = (byte) 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG199 [106] phi (byte) makecharset::ii#2 = (byte) 0 [phi:makecharset::@2->makecharset::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG200 [106] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  //SEG201 [106] phi (byte) makecharset::b#2 = (byte) makecharset::b#3 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
  //SEG202 [106] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@4->makecharset::@3#1] -- register_copy 
  //SEG203 makecharset::@3
  b3:
  //SEG204 [107] call sid_rnd 
    jsr sid_rnd
  //SEG205 [108] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  //SEG206 makecharset::@11
  //SEG207 [109] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2
  //SEG208 [110] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte) $ff -- vbuz1=vbuaa_band_vbuc1 
    and #$ff
    sta _4
  //SEG209 [111] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4 -- vbuz1_le_vbuz2_then_la1 
    lda s
    cmp _4
    bcs b4
  //SEG210 makecharset::@5
  //SEG211 [112] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
  //SEG212 [113] phi from makecharset::@11 makecharset::@5 to makecharset::@4 [phi:makecharset::@11/makecharset::@5->makecharset::@4]
  //SEG213 [113] phi (byte) makecharset::b#3 = (byte) makecharset::b#2 [phi:makecharset::@11/makecharset::@5->makecharset::@4#0] -- register_copy 
  //SEG214 makecharset::@4
  b4:
  //SEG215 [114] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG216 [115] if((byte) makecharset::ii#1<(byte) 8) goto makecharset::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc b3
  //SEG217 makecharset::@6
  //SEG218 [116] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda c
    asl
    sta _8
    lda c+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG219 [117] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 -- vwuz1=vwuz1_plus_vbuz2 
    lda i
    clc
    adc _9
    sta _9
    bcc !+
    inc _9+1
  !:
  //SEG220 [118] (byte*~) makecharset::$16 ← (const byte*) CHARSET#0 + (word~) makecharset::$9 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _16
    adc #<CHARSET
    sta _16
    lda _16+1
    adc #>CHARSET
    sta _16+1
  //SEG221 [119] *((byte*~) makecharset::$16) ← (byte) makecharset::b#3 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (_16),y
  //SEG222 [120] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG223 [121] if((byte) makecharset::i#1<(byte) 8) goto makecharset::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #8
    bcc b2
  //SEG224 makecharset::@7
  //SEG225 [122] (byte~) makecharset::$11 ← (word) makecharset::c#2 & (byte) 7 -- vbuaa=vwuz1_band_vbuc1 
    lda c
    and #7
  //SEG226 [123] if((byte~) makecharset::$11!=(byte) 0) goto makecharset::@9 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b9
  //SEG227 [124] phi from makecharset::@7 to makecharset::@8 [phi:makecharset::@7->makecharset::@8]
  //SEG228 makecharset::@8
  //SEG229 [125] call print_char 
    jsr print_char
  //SEG230 [126] phi from makecharset::@7 makecharset::@8 to makecharset::@9 [phi:makecharset::@7/makecharset::@8->makecharset::@9]
  //SEG231 [126] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#44 [phi:makecharset::@7/makecharset::@8->makecharset::@9#0] -- register_copy 
  //SEG232 makecharset::@9
  b9:
  //SEG233 [127] (word) makecharset::c#1 ← ++ (word) makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG234 [128] if((word) makecharset::c#1<(word) $100) goto makecharset::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda c+1
    cmp #>$100
    bcc b1
    bne !+
    lda c
    cmp #<$100
    bcc b1
  !:
  //SEG235 makecharset::@return
  //SEG236 [129] return 
    rts
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
//SEG237 print_char
// Print a single char
print_char: {
    .const ch = '.'
  //SEG238 [130] *((byte*) print_char_cursor#44) ← (const byte) print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
  //SEG239 [131] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG240 print_char::@return
  //SEG241 [132] return 
    rts
}
//SEG242 sid_rnd
// Get a random number from the SID voice 3,
// Must be initialized with sid_rnd_init()
sid_rnd: {
  //SEG243 [133] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
  //SEG244 sid_rnd::@return
  //SEG245 [134] return 
    rts
}
//SEG246 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG247 [136] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG248 [136] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
  //SEG249 [136] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG250 [136] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG251 print_cls::@1
  b1:
  //SEG252 [137] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG253 [138] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG254 [139] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1
  //SEG255 print_cls::@return
  //SEG256 [140] return 
    rts
}
//SEG257 sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
  //SEG258 [141] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG259 [142] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
  //SEG260 sid_rnd_init::@return
  //SEG261 [143] return 
    rts
}
.pc = SINTABLE "SINTABLE"
  .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))


