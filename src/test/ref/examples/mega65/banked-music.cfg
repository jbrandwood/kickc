
interrupt(HARDWARE_STACK)(void()) irq()
irq: scope:[irq]  from
  [0] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [1] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [2] call memoryRemapBlock 
  to:irq::@3
irq::@3: scope:[irq]  from irq
  [3] call *((const void()*) musicPlay) 
  [4] call memoryRemap 
  to:irq::@4
irq::@4: scope:[irq]  from irq::@3
  [5] (byte) irq::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:irq::@1
irq::@1: scope:[irq]  from irq::@1 irq::@4
  [6] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)==(byte) irq::raster#0) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq::@1
  [7] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← -- *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@2
  [8] return 
  to:@return

(void()) main()
main: scope:[main]  from
  asm { sei  }
  [10] call memoryRemap 
  to:main::@7
main::@7: scope:[main]  from main
  [11] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47
  [12] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53
  [13] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40
  [14] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40
  [15] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [16] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [17] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1
  [18] call memoryRemapBlock 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@7
  [19] (byte*) main::src#2 ← phi( main::@2/(byte*) main::src#1 main::@7/(const byte*) upperCodeData )
  [19] (byte*) main::dst#2 ← phi( main::@2/(byte*) main::dst#1 main::@7/(const byte*) MUSIC )
  [20] if((byte*) main::dst#2<(const nomodify byte*) MUSIC_END) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [21] call *((const void()*) musicInit) 
  [22] call memoryRemap 
  to:main::@8
main::@8: scope:[main]  from main::@3
  [23] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [24] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (byte) $ff
  [25] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f
  [26] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [27] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq()
  asm { cli  }
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@8
  [29] (byte) main::mem_destroy_i#2 ← phi( main::@5/(byte) main::mem_destroy_i#1 main::@8/(byte) 0 )
  [30] *((const byte*) MUSIC + (byte) main::mem_destroy_i#2) ← ++ *((const byte*) MUSIC + (byte) main::mem_destroy_i#2)
  [31] (byte) main::mem_destroy_i#1 ← ++ (byte) main::mem_destroy_i#2
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@6
  [32] (byte) main::i#2 ← phi( main::@4/(byte) 0 main::@6/(byte) main::i#1 )
  [33] if((byte) main::i#2<(byte) $f0) goto main::@6
  to:main::@4
main::@6: scope:[main]  from main::@5
  [34] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MUSIC + (byte) main::i#2)
  [35] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@5
main::@2: scope:[main]  from main::@1
  [36] *((byte*) main::dst#2) ← *((byte*) main::src#2)
  [37] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  [38] (byte*) main::src#1 ← ++ (byte*) main::src#2
  to:main::@1

(void()) memoryRemapBlock((byte) memoryRemapBlock::blockPage , (word) memoryRemapBlock::memoryPage)
memoryRemapBlock: scope:[memoryRemapBlock]  from irq main::@7
  [39] phi()
  [40] call memoryRemap 
  to:memoryRemapBlock::@return
memoryRemapBlock::@return: scope:[memoryRemapBlock]  from memoryRemapBlock
  [41] return 
  to:@return

(void()) memoryRemap((byte) memoryRemap::remapBlocks , (word) memoryRemap::lowerPageOffset , (word) memoryRemap::upperPageOffset)
memoryRemap: scope:[memoryRemap]  from irq::@3 main main::@3 memoryRemapBlock
  [42] (word) memoryRemap::upperPageOffset#4 ← phi( irq::@3/(byte) 0 main/(byte) 0 main::@3/(byte) 0 memoryRemapBlock/(const word) memoryRemapBlock::pageOffset#0 )
  [42] (byte) memoryRemap::remapBlocks#4 ← phi( irq::@3/(byte) 0 main/(byte) 0 main::@3/(byte) 0 memoryRemapBlock/(const byte) memoryRemapBlock::blockBits#0 )
  [42] (word) memoryRemap::lowerPageOffset#4 ← phi( irq::@3/(byte) 0 main/(byte) 0 main::@3/(byte) 0 memoryRemapBlock/(const word) memoryRemapBlock::pageOffset#0 )
  [43] (byte~) memoryRemap::$0 ← < (word) memoryRemap::lowerPageOffset#4
  [44] *((const byte*) memoryRemap::aVal) ← (byte~) memoryRemap::$0
  [45] (byte~) memoryRemap::$1 ← (byte) memoryRemap::remapBlocks#4 << (byte) 4
  [46] (byte~) memoryRemap::$2 ← > (word) memoryRemap::lowerPageOffset#4
  [47] (byte~) memoryRemap::$3 ← (byte~) memoryRemap::$2 & (byte) $f
  [48] (byte~) memoryRemap::$4 ← (byte~) memoryRemap::$1 | (byte~) memoryRemap::$3
  [49] *((const byte*) memoryRemap::xVal) ← (byte~) memoryRemap::$4
  [50] (byte~) memoryRemap::$5 ← < (word) memoryRemap::upperPageOffset#4
  [51] *((const byte*) memoryRemap::yVal) ← (byte~) memoryRemap::$5
  [52] (byte~) memoryRemap::$6 ← (byte) memoryRemap::remapBlocks#4 & (byte) $f0
  [53] (byte~) memoryRemap::$7 ← > (word) memoryRemap::upperPageOffset#4
  [54] (byte~) memoryRemap::$8 ← (byte~) memoryRemap::$7 & (byte) $f
  [55] (byte~) memoryRemap::$9 ← (byte~) memoryRemap::$6 | (byte~) memoryRemap::$8
  [56] *((const byte*) memoryRemap::zVal) ← (byte~) memoryRemap::$9
  asm { ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap::@return
memoryRemap::@return: scope:[memoryRemap]  from memoryRemap
  [58] return 
  to:@return
