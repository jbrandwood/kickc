
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  print::c#0 = 'a'
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  print::c#1 = 'b'
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void print(nomodify byte print::c)
print: scope:[print]  from main main::@1
  print::c#2 = phi( main/print::c#0, main::@1/print::c#1 )
  *SCREEN = print::c#2
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
void print(nomodify byte print::c)
nomodify byte print::c
nomodify byte print::c#0
nomodify byte print::c#1
nomodify byte print::c#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant print::c#0 = 'a'
Constant print::c#1 = 'b'
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print::c#0
Inlining constant with var siblings print::c#1
Constant inlined print::c#0 = 'a'
Constant inlined print::c#1 = 'b'
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print:1 print:3 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print(nomodify byte print::c)
print: scope:[print]  from main main::@1
  [5] print::c#2 = phi( main/'a', main::@1/'b' )
  [6] *SCREEN = print::c#2
  to:print::@return
print::@return: scope:[print]  from print
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void print(nomodify byte print::c)
nomodify byte print::c
nomodify byte print::c#2 11.0

Initial phi equivalence classes
[ print::c#2 ]
Complete equivalence classes
[ print::c#2 ]
Allocated zp[1]:2 [ print::c#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ print::c#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 11: zp[1]:2 [ print::c#2 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print] best 41 combination reg byte a [ print::c#2 ] 
Uplifting [main] best 41 combination 
Uplifting [] best 41 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that a nomodify parameter works
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call print 
    // [5] phi from main to print [phi:main->print]
  print_from_main:
    // [5] phi print::c#2 = 'a' [phi:main->print#0] -- vbuaa=vbuc1 
    lda #'a'
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [5] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [5] phi print::c#2 = 'b' [phi:main::@1->print#0] -- vbuaa=vbuc1 
    lda #'b'
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print
// print(byte register(A) c)
print: {
    // [6] *SCREEN = print::c#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    jmp __breturn
    // print::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
void print(nomodify byte print::c)
nomodify byte print::c
nomodify byte print::c#2 reg byte a 11.0

reg byte a [ print::c#2 ]


FINAL ASSEMBLER
Score: 32

  // File Comments
// Test that a nomodify parameter works
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // print('a')
    // [1] call print 
    // [5] phi from main to print [phi:main->print]
    // [5] phi print::c#2 = 'a' [phi:main->print#0] -- vbuaa=vbuc1 
    lda #'a'
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print('b')
    // [3] call print 
    // [5] phi from main::@1 to print [phi:main::@1->print]
    // [5] phi print::c#2 = 'b' [phi:main::@1->print#0] -- vbuaa=vbuc1 
    lda #'b'
    jsr print
    // main::@return
    // }
    // [4] return 
    rts
}
  // print
// print(byte register(A) c)
print: {
    // *SCREEN = c
    // [6] *SCREEN = print::c#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // print::@return
    // }
    // [7] return 
    rts
}
  // File Data

