Setting inferred volatile on symbol affected by address-of (word*) main::wp ← &(word) main::w

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (volatile word) main::w ← (word) $d03
  (byte~) main::$0 ← < *((const word*) main::wp)
  *((const byte*) main::screen + (number) 0) ← (byte~) main::$0
  (byte~) main::$1 ← > *((const word*) main::wp)
  *((const byte*) main::screen + (number) 1) ← (byte~) main::$1
  *((const word*) main::wp) ← (number) $210c
  (byte~) main::$2 ← < *((const word*) main::wp)
  *((const byte*) main::screen + (number) 2) ← (byte~) main::$2
  (byte~) main::$3 ← > *((const word*) main::wp)
  *((const byte*) main::screen + (number) 3) ← (byte~) main::$3
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(label) main::@return
(const byte*) main::screen = (byte*)(number) $400
(volatile word) main::w loadstore
(const word*) main::wp = &(volatile word) main::w

Adding number conversion cast (unumber) 0 in *((const byte*) main::screen + (number) 0) ← (byte~) main::$0
Adding number conversion cast (unumber) 1 in *((const byte*) main::screen + (number) 1) ← (byte~) main::$1
Adding number conversion cast (unumber) $210c in *((const word*) main::wp) ← (number) $210c
Adding number conversion cast (unumber) 2 in *((const byte*) main::screen + (number) 2) ← (byte~) main::$2
Adding number conversion cast (unumber) 3 in *((const byte*) main::screen + (number) 3) ← (byte~) main::$3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const word*) main::wp) ← (unumber)(number) $210c
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $210c
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $210c
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero main::screen in [2] *((const byte*) main::screen + (byte) 0) ← (byte~) main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(main::screen+1)
Consolidated array index constant in *(main::screen+2)
Consolidated array index constant in *(main::screen+3)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] (volatile word) main::w ← (word) $d03
  [1] (byte~) main::$0 ← < *((const word*) main::wp)
  [2] *((const byte*) main::screen) ← (byte~) main::$0
  [3] (byte~) main::$1 ← > *((const word*) main::wp)
  [4] *((const byte*) main::screen+(byte) 1) ← (byte~) main::$1
  [5] *((const word*) main::wp) ← (word) $210c
  [6] (byte~) main::$2 ← < *((const word*) main::wp)
  [7] *((const byte*) main::screen+(byte) 2) ← (byte~) main::$2
  [8] (byte~) main::$3 ← > *((const word*) main::wp)
  [9] *((const byte*) main::screen+(byte) 3) ← (byte~) main::$3
  to:main::@return
main::@return: scope:[main]  from main
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 4.0
(byte~) main::$1 4.0
(byte~) main::$2 4.0
(byte~) main::$3 4.0
(volatile word) main::w loadstore 20.0

Initial phi equivalence classes
Added variable main::w to live range equivalence class [ main::w ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Complete equivalence classes
[ main::w ]
[ main::$0 ]
[ main::$1 ]
[ main::$2 ]
[ main::$3 ]
Allocated zp[2]:2 [ main::w ]
Allocated zp[1]:4 [ main::$0 ]
Allocated zp[1]:5 [ main::$1 ]
Allocated zp[1]:6 [ main::$2 ]
Allocated zp[1]:7 [ main::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a constant word pointers (pointing to a word placed on zeropage).
// The result when running is "CML!" on the screen.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label wp = w
    .label w = 2
    .label __0 = 4
    .label __1 = 5
    .label __2 = 6
    .label __3 = 7
    // [0] (volatile word) main::w ← (word) $d03 -- vwuz1=vwuc1 
    lda #<$d03
    sta.z w
    lda #>$d03
    sta.z w+1
    // [1] (byte~) main::$0 ← < *((const word*) main::wp) -- vbuz1=_lo__deref_pwuc1 
    lda.z wp
    sta.z __0
    // [2] *((const byte*) main::screen) ← (byte~) main::$0 -- _deref_pbuc1=vbuz1 
    lda.z __0
    sta screen
    // [3] (byte~) main::$1 ← > *((const word*) main::wp) -- vbuz1=_hi__deref_pwuc1 
    lda.z wp+1
    sta.z __1
    // [4] *((const byte*) main::screen+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta screen+1
    // [5] *((const word*) main::wp) ← (word) $210c -- _deref_pwuc1=vwuc2 
    lda #<$210c
    sta.z wp
    lda #>$210c
    sta.z wp+1
    // [6] (byte~) main::$2 ← < *((const word*) main::wp) -- vbuz1=_lo__deref_pwuc1 
    lda.z wp
    sta.z __2
    // [7] *((const byte*) main::screen+(byte) 2) ← (byte~) main::$2 -- _deref_pbuc1=vbuz1 
    lda.z __2
    sta screen+2
    // [8] (byte~) main::$3 ← > *((const word*) main::wp) -- vbuz1=_hi__deref_pwuc1 
    lda.z wp+1
    sta.z __3
    // [9] *((const byte*) main::screen+(byte) 3) ← (byte~) main::$3 -- _deref_pbuc1=vbuz1 
    lda.z __3
    sta screen+3
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (volatile word) main::w ← (word) $d03 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const word*) main::wp) ← (word) $210c [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::w ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::$0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$3 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[2]:2 [ main::w ] 4: zp[1]:4 [ main::$0 ] 4: zp[1]:5 [ main::$1 ] 4: zp[1]:6 [ main::$2 ] 4: zp[1]:7 [ main::$3 ] 
Uplift Scope [] 

Uplifting [main] best 57 combination zp[2]:2 [ main::w ] reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$2 ] reg byte a [ main::$3 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [] best 57 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a constant word pointers (pointing to a word placed on zeropage).
// The result when running is "CML!" on the screen.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label wp = w
    .label w = 2
    // [0] (volatile word) main::w ← (word) $d03 -- vwuz1=vwuc1 
    lda #<$d03
    sta.z w
    lda #>$d03
    sta.z w+1
    // [1] (byte~) main::$0 ← < *((const word*) main::wp) -- vbuaa=_lo__deref_pwuc1 
    lda.z wp
    // [2] *((const byte*) main::screen) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta screen
    // [3] (byte~) main::$1 ← > *((const word*) main::wp) -- vbuaa=_hi__deref_pwuc1 
    lda.z wp+1
    // [4] *((const byte*) main::screen+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // [5] *((const word*) main::wp) ← (word) $210c -- _deref_pwuc1=vwuc2 
    lda #<$210c
    sta.z wp
    lda #>$210c
    sta.z wp+1
    // [6] (byte~) main::$2 ← < *((const word*) main::wp) -- vbuaa=_lo__deref_pwuc1 
    lda.z wp
    // [7] *((const byte*) main::screen+(byte) 2) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // [8] (byte~) main::$3 ← > *((const word*) main::wp) -- vbuaa=_hi__deref_pwuc1 
    lda.z wp+1
    // [9] *((const byte*) main::screen+(byte) 3) ← (byte~) main::$3 -- _deref_pbuc1=vbuaa 
    sta screen+3
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(byte~) main::$0 reg byte a 4.0
(byte~) main::$1 reg byte a 4.0
(byte~) main::$2 reg byte a 4.0
(byte~) main::$3 reg byte a 4.0
(label) main::@return
(const byte*) main::screen = (byte*) 1024
(volatile word) main::w loadstore zp[2]:2 20.0
(const word*) main::wp = &(volatile word) main::w

zp[2]:2 [ main::w ]
reg byte a [ main::$0 ]
reg byte a [ main::$1 ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 54

  // File Comments
// Test a constant word pointers (pointing to a word placed on zeropage).
// The result when running is "CML!" on the screen.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label wp = w
    .label w = 2
    // w = $0d03
    // [0] (volatile word) main::w ← (word) $d03 -- vwuz1=vwuc1 
    lda #<$d03
    sta.z w
    lda #>$d03
    sta.z w+1
    // <*wp
    // [1] (byte~) main::$0 ← < *((const word*) main::wp) -- vbuaa=_lo__deref_pwuc1 
    lda.z wp
    // screen[0] = <*wp
    // [2] *((const byte*) main::screen) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta screen
    // >*wp
    // [3] (byte~) main::$1 ← > *((const word*) main::wp) -- vbuaa=_hi__deref_pwuc1 
    lda.z wp+1
    // screen[1] = >*wp
    // [4] *((const byte*) main::screen+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // *wp = $210c
    // [5] *((const word*) main::wp) ← (word) $210c -- _deref_pwuc1=vwuc2 
    lda #<$210c
    sta.z wp
    lda #>$210c
    sta.z wp+1
    // <*wp
    // [6] (byte~) main::$2 ← < *((const word*) main::wp) -- vbuaa=_lo__deref_pwuc1 
    lda.z wp
    // screen[2] = <*wp
    // [7] *((const byte*) main::screen+(byte) 2) ← (byte~) main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // >*wp
    // [8] (byte~) main::$3 ← > *((const word*) main::wp) -- vbuaa=_hi__deref_pwuc1 
    lda.z wp+1
    // screen[3] = >*wp
    // [9] *((const byte*) main::screen+(byte) 3) ← (byte~) main::$3 -- _deref_pbuc1=vbuaa 
    sta screen+3
    // main::@return
    // }
    // [10] return 
    rts
}
  // File Data

