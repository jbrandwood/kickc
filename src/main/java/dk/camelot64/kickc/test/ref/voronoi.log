// The screen
byte *SCREEN = $0400;
byte *COLORS = $D800;

byte FILL = 230;

// The total number of voronoi points
byte numpoints = 0;

// Points to create the Voronoi from
byte[$100] XPOS = $1000;
byte[$100] YPOS = $1100;
byte[$100] COLS = $1200;

main();

void main() {
  addpoint(5, 5, 1);
  addpoint(15, 8, 2);
  addpoint(6, 14, 3);
  addpoint(34, 2, 4);
  addpoint(21, 17, 5);
  addpoint(31, 22, 7);
  initscreen();
  do {
    render();
    animate();
  } while(true)
}

void animate() {
    XPOS[0] = XPOS[0]+1;
    if(XPOS[0]==40) {
      XPOS[0] = 0;
    }
    YPOS[0] = YPOS[0]+1;
    if(YPOS[0]==25) {
      YPOS[0] = 0;
    }
    XPOS[1] = XPOS[1]-1;
    if(XPOS[1]==255) {
      XPOS[1] = 40;
    }
    YPOS[2] = YPOS[2]+1;
    if(YPOS[2]==25) {
      YPOS[2] = 0;
    }
    YPOS[3] = YPOS[3]-1;
    if(YPOS[3]==255) {
      YPOS[3] = 25;
      XPOS[3] = XPOS[3]+7;
      if(XPOS[3]>=40) {
        XPOS[3] = XPOS[3]-40;
      }
    }
}

void addpoint(byte x, byte y, byte c) {
  XPOS[numpoints] = x;
  YPOS[numpoints] = y;
  COLS[numpoints] = c;
  numpoints++;
}

void initscreen() {
  for( byte* screen = SCREEN; screen<SCREEN+$03e8; ++screen) {
    *screen = FILL;
  }
}

void render() {
  byte* colline = COLORS;
  for( byte y : 0.. 24) {
    for( byte x : 0..39) {
      byte col = findcol(x, y);
      colline[x] = col;
    }
    colline = colline+40;
  }
}

byte findcol(byte x, byte y) {
  byte mindiff = 255;
  byte mincol = 0;
  for( byte i=0; i<numpoints; ++i) {
     byte xp = XPOS[i];
     byte yp = YPOS[i];
     if(x==xp) {
       if(y==yp) {
         return 0;
       }
     }
     byte diff;
     if(x<xp) {
       diff = xp-x;
     } else {
       diff = x-xp;
     }
     if(y<yp) {
       diff = diff + (yp-y);
     } else {
       diff = diff + (y-yp);
     }
     if(diff<mindiff) {
       mindiff=diff;
       mincol = COLS[i];
     }
  }
  return mincol;
}



Adding pre/post-modifier (byte) numpoints ← ++ (byte) numpoints
Adding pre/post-modifier (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
Adding pre/post-modifier (byte) findcol::i ← ++ (byte) findcol::i
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
proc (void()) main()
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
main::@1:
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) animate()
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
animate::@1:
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
animate::@2:
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
animate::@3:
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
animate::@4:
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
animate::@6:
animate::@5:
animate::@return:
  return 
endproc // animate()
proc (void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
addpoint::@return:
  return 
endproc // addpoint()
proc (void()) initscreen()
  (byte*) initscreen::screen ← (byte*) SCREEN
initscreen::@1:
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
initscreen::@return:
  return 
endproc // initscreen()
proc (void()) render()
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
render::@1:
  (byte) render::x ← (byte) 0
render::@2:
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
render::@return:
  return 
endproc // render()
proc (byte()) findcol((byte) findcol::x , (byte) findcol::y)
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
findcol::@1:
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  (byte) findcol::return ← (byte) 0
  goto findcol::@return
findcol::@3:
findcol::@2:
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  goto findcol::@5
findcol::@4:
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
findcol::@5:
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  goto findcol::@7
findcol::@6:
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
findcol::@7:
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
findcol::@8:
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  (byte) findcol::return ← (byte) findcol::mincol
  goto findcol::@return
findcol::@return:
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
endproc // findcol()

SYMBOLS
(void~) $0
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::x
(byte) addpoint::y
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(boolean~) animate::$13
(boolean~) animate::$14
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(boolean~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(boolean~) animate::$24
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(boolean~) animate::$28
(boolean~) animate::$29
(boolean~) animate::$3
(byte~) animate::$30
(byte~) animate::$31
(boolean~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(boolean~) animate::$8
(boolean~) animate::$9
(label) animate::@1
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(boolean~) findcol::$10
(boolean~) findcol::$11
(byte~) findcol::$12
(byte~) findcol::$13
(byte~) findcol::$14
(byte~) findcol::$15
(boolean~) findcol::$16
(boolean~) findcol::$17
(byte~) findcol::$18
(boolean~) findcol::$19
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(boolean~) findcol::$5
(boolean~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::i
(byte) findcol::mincol
(byte) findcol::mindiff
(byte) findcol::return
(byte) findcol::x
(byte) findcol::xp
(byte) findcol::y
(byte) findcol::yp
(void()) initscreen()
(byte*~) initscreen::$0
(boolean~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(void~) main::$3
(void~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(label) main::@1
(label) main::@return
(byte) numpoints
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@return
(byte) render::col
(byte*) render::colline
(byte) render::x
(byte) render::y

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
animate: scope:[animate]  from
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4 animate::@6
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11 animate::@12
  to:animate::@5
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
  to:animate::@6
animate::@return: scope:[animate]  from animate::@5
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
addpoint: scope:[addpoint]  from
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
initscreen: scope:[initscreen]  from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@2
initscreen::@2: scope:[initscreen]  from initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@2
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
render: scope:[render]  from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@4
render::@4: scope:[render]  from render::@3
  to:render::@return
render::@return: scope:[render]  from render::@4
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
findcol: scope:[findcol]  from
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@11 findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17 findcol::@18
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@11: scope:[findcol]  from
  to:findcol::@3
findcol::@4: scope:[findcol]  from findcol::@13 findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@13: scope:[findcol]  from
  to:findcol::@4
findcol::@6: scope:[findcol]  from findcol::@15 findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@15: scope:[findcol]  from
  to:findcol::@6
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
findcol::@18: scope:[findcol]  from
  to:findcol::@return
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

Removing empty block main::@2
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block initscreen::@2
Removing empty block @4
Removing empty block render::@4
Removing empty block @5
Removing empty block findcol::@11
Removing empty block findcol::@13
Removing empty block findcol::@15
Removing empty block findcol::@18
Removing empty block @6
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
animate: scope:[animate]  from
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS
main modifies numpoints
addpoint modifies numpoints

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints ← (byte) numpoints
  to:@end
main: scope:[main]  from @begin
  (byte) addpoint::x ← (byte) 5
  (byte) addpoint::y ← (byte) 5
  (byte) addpoint::c ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 15
  (byte) addpoint::y ← (byte) 8
  (byte) addpoint::c ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 6
  (byte) addpoint::y ← (byte) 14
  (byte) addpoint::c ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 34
  (byte) addpoint::y ← (byte) 2
  (byte) addpoint::c ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 21
  (byte) addpoint::y ← (byte) 17
  (byte) addpoint::c ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 31
  (byte) addpoint::y ← (byte) 22
  (byte) addpoint::c ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) numpoints ← (byte) numpoints
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints ← (byte) numpoints
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints ← (byte) numpoints
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) findcol::x ← (byte) render::x
  (byte) findcol::y ← (byte) render::y
  (byte) findcol::return ← call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte~) render::$0 ← (byte) findcol::return
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@end: scope:[]  from @7

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#0 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#22 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#2 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#3 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#4 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#5 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#6 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  (byte) findcol::return#0 ← call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return (byte) findcol::return#2
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

INITIAL SSA SYMBOL TABLE
(label) @7
(label) @begin
(label) @end
(byte*) COLORS
(byte*) COLORS#0
(byte*) COLORS#1
(byte*) COLORS#10
(byte*) COLORS#11
(byte*) COLORS#12
(byte*) COLORS#2
(byte*) COLORS#3
(byte*) COLORS#4
(byte*) COLORS#5
(byte*) COLORS#6
(byte*) COLORS#7
(byte*) COLORS#8
(byte*) COLORS#9
(byte[256]) COLS
(byte[256]) COLS#0
(byte[256]) COLS#1
(byte[256]) COLS#10
(byte[256]) COLS#11
(byte[256]) COLS#12
(byte[256]) COLS#13
(byte[256]) COLS#14
(byte[256]) COLS#15
(byte[256]) COLS#16
(byte[256]) COLS#17
(byte[256]) COLS#18
(byte[256]) COLS#19
(byte[256]) COLS#2
(byte[256]) COLS#20
(byte[256]) COLS#21
(byte[256]) COLS#22
(byte[256]) COLS#23
(byte[256]) COLS#24
(byte[256]) COLS#25
(byte[256]) COLS#26
(byte[256]) COLS#27
(byte[256]) COLS#28
(byte[256]) COLS#29
(byte[256]) COLS#3
(byte[256]) COLS#30
(byte[256]) COLS#4
(byte[256]) COLS#5
(byte[256]) COLS#6
(byte[256]) COLS#7
(byte[256]) COLS#8
(byte[256]) COLS#9
(byte) FILL
(byte) FILL#0
(byte) FILL#1
(byte) FILL#2
(byte) FILL#3
(byte) FILL#4
(byte) FILL#5
(byte) FILL#6
(byte) FILL#7
(byte) FILL#8
(byte) FILL#9
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(byte[256]) XPOS
(byte[256]) XPOS#0
(byte[256]) XPOS#1
(byte[256]) XPOS#10
(byte[256]) XPOS#11
(byte[256]) XPOS#12
(byte[256]) XPOS#13
(byte[256]) XPOS#14
(byte[256]) XPOS#15
(byte[256]) XPOS#16
(byte[256]) XPOS#17
(byte[256]) XPOS#18
(byte[256]) XPOS#19
(byte[256]) XPOS#2
(byte[256]) XPOS#20
(byte[256]) XPOS#21
(byte[256]) XPOS#22
(byte[256]) XPOS#23
(byte[256]) XPOS#24
(byte[256]) XPOS#25
(byte[256]) XPOS#26
(byte[256]) XPOS#27
(byte[256]) XPOS#28
(byte[256]) XPOS#29
(byte[256]) XPOS#3
(byte[256]) XPOS#30
(byte[256]) XPOS#31
(byte[256]) XPOS#32
(byte[256]) XPOS#33
(byte[256]) XPOS#34
(byte[256]) XPOS#35
(byte[256]) XPOS#36
(byte[256]) XPOS#37
(byte[256]) XPOS#38
(byte[256]) XPOS#39
(byte[256]) XPOS#4
(byte[256]) XPOS#40
(byte[256]) XPOS#41
(byte[256]) XPOS#5
(byte[256]) XPOS#6
(byte[256]) XPOS#7
(byte[256]) XPOS#8
(byte[256]) XPOS#9
(byte[256]) YPOS
(byte[256]) YPOS#0
(byte[256]) YPOS#1
(byte[256]) YPOS#10
(byte[256]) YPOS#11
(byte[256]) YPOS#12
(byte[256]) YPOS#13
(byte[256]) YPOS#14
(byte[256]) YPOS#15
(byte[256]) YPOS#16
(byte[256]) YPOS#17
(byte[256]) YPOS#18
(byte[256]) YPOS#19
(byte[256]) YPOS#2
(byte[256]) YPOS#20
(byte[256]) YPOS#21
(byte[256]) YPOS#22
(byte[256]) YPOS#23
(byte[256]) YPOS#24
(byte[256]) YPOS#25
(byte[256]) YPOS#26
(byte[256]) YPOS#27
(byte[256]) YPOS#28
(byte[256]) YPOS#29
(byte[256]) YPOS#3
(byte[256]) YPOS#30
(byte[256]) YPOS#31
(byte[256]) YPOS#32
(byte[256]) YPOS#33
(byte[256]) YPOS#34
(byte[256]) YPOS#35
(byte[256]) YPOS#36
(byte[256]) YPOS#37
(byte[256]) YPOS#38
(byte[256]) YPOS#39
(byte[256]) YPOS#4
(byte[256]) YPOS#40
(byte[256]) YPOS#5
(byte[256]) YPOS#6
(byte[256]) YPOS#7
(byte[256]) YPOS#8
(byte[256]) YPOS#9
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#0
(byte) addpoint::c#1
(byte) addpoint::c#2
(byte) addpoint::c#3
(byte) addpoint::c#4
(byte) addpoint::c#5
(byte) addpoint::c#6
(byte) addpoint::x
(byte) addpoint::x#0
(byte) addpoint::x#1
(byte) addpoint::x#2
(byte) addpoint::x#3
(byte) addpoint::x#4
(byte) addpoint::x#5
(byte) addpoint::x#6
(byte) addpoint::y
(byte) addpoint::y#0
(byte) addpoint::y#1
(byte) addpoint::y#2
(byte) addpoint::y#3
(byte) addpoint::y#4
(byte) addpoint::y#5
(byte) addpoint::y#6
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(boolean~) animate::$13
(boolean~) animate::$14
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(boolean~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(boolean~) animate::$24
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(boolean~) animate::$28
(boolean~) animate::$29
(boolean~) animate::$3
(byte~) animate::$30
(byte~) animate::$31
(boolean~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(boolean~) animate::$8
(boolean~) animate::$9
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(boolean~) findcol::$10
(boolean~) findcol::$11
(byte~) findcol::$12
(byte~) findcol::$13
(byte~) findcol::$14
(byte~) findcol::$15
(boolean~) findcol::$16
(boolean~) findcol::$17
(byte~) findcol::$18
(boolean~) findcol::$19
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(boolean~) findcol::$5
(boolean~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@10
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@17
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#5
(byte) findcol::diff#6
(byte) findcol::diff#7
(byte) findcol::diff#8
(byte) findcol::i
(byte) findcol::i#0
(byte) findcol::i#1
(byte) findcol::i#10
(byte) findcol::i#11
(byte) findcol::i#12
(byte) findcol::i#13
(byte) findcol::i#2
(byte) findcol::i#3
(byte) findcol::i#4
(byte) findcol::i#5
(byte) findcol::i#6
(byte) findcol::i#7
(byte) findcol::i#8
(byte) findcol::i#9
(byte) findcol::mincol
(byte) findcol::mincol#0
(byte) findcol::mincol#1
(byte) findcol::mincol#10
(byte) findcol::mincol#11
(byte) findcol::mincol#12
(byte) findcol::mincol#13
(byte) findcol::mincol#2
(byte) findcol::mincol#3
(byte) findcol::mincol#4
(byte) findcol::mincol#5
(byte) findcol::mincol#6
(byte) findcol::mincol#7
(byte) findcol::mincol#8
(byte) findcol::mincol#9
(byte) findcol::mindiff
(byte) findcol::mindiff#0
(byte) findcol::mindiff#1
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::mindiff#12
(byte) findcol::mindiff#2
(byte) findcol::mindiff#3
(byte) findcol::mindiff#4
(byte) findcol::mindiff#5
(byte) findcol::mindiff#6
(byte) findcol::mindiff#7
(byte) findcol::mindiff#8
(byte) findcol::mindiff#9
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::return#1
(byte) findcol::return#2
(byte) findcol::return#3
(byte) findcol::return#4
(byte) findcol::return#5
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::x#1
(byte) findcol::x#10
(byte) findcol::x#11
(byte) findcol::x#12
(byte) findcol::x#13
(byte) findcol::x#2
(byte) findcol::x#3
(byte) findcol::x#4
(byte) findcol::x#5
(byte) findcol::x#6
(byte) findcol::x#7
(byte) findcol::x#8
(byte) findcol::x#9
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::xp#1
(byte) findcol::xp#2
(byte) findcol::xp#3
(byte) findcol::xp#4
(byte) findcol::xp#5
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::y#1
(byte) findcol::y#10
(byte) findcol::y#11
(byte) findcol::y#12
(byte) findcol::y#13
(byte) findcol::y#2
(byte) findcol::y#3
(byte) findcol::y#4
(byte) findcol::y#5
(byte) findcol::y#6
(byte) findcol::y#7
(byte) findcol::y#8
(byte) findcol::y#9
(byte) findcol::yp
(byte) findcol::yp#0
(byte) findcol::yp#1
(byte) findcol::yp#2
(byte) findcol::yp#3
(byte) findcol::yp#4
(byte) findcol::yp#5
(byte) findcol::yp#6
(byte) findcol::yp#7
(byte) findcol::yp#8
(void()) initscreen()
(byte*~) initscreen::$0
(boolean~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#0
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) numpoints
(byte) numpoints#0
(byte) numpoints#1
(byte) numpoints#10
(byte) numpoints#11
(byte) numpoints#12
(byte) numpoints#13
(byte) numpoints#14
(byte) numpoints#15
(byte) numpoints#16
(byte) numpoints#17
(byte) numpoints#18
(byte) numpoints#19
(byte) numpoints#2
(byte) numpoints#20
(byte) numpoints#21
(byte) numpoints#22
(byte) numpoints#23
(byte) numpoints#24
(byte) numpoints#25
(byte) numpoints#26
(byte) numpoints#27
(byte) numpoints#28
(byte) numpoints#29
(byte) numpoints#3
(byte) numpoints#30
(byte) numpoints#31
(byte) numpoints#32
(byte) numpoints#33
(byte) numpoints#34
(byte) numpoints#35
(byte) numpoints#36
(byte) numpoints#37
(byte) numpoints#38
(byte) numpoints#39
(byte) numpoints#4
(byte) numpoints#40
(byte) numpoints#41
(byte) numpoints#42
(byte) numpoints#43
(byte) numpoints#5
(byte) numpoints#6
(byte) numpoints#7
(byte) numpoints#8
(byte) numpoints#9
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#0
(byte*) render::colline#1
(byte*) render::colline#2
(byte*) render::colline#3
(byte*) render::colline#4
(byte*) render::colline#5
(byte) render::x
(byte) render::x#0
(byte) render::x#1
(byte) render::x#2
(byte) render::x#3
(byte) render::y
(byte) render::y#0
(byte) render::y#1
(byte) render::y#2
(byte) render::y#3
(byte) render::y#4
(byte) render::y#5

Culled Empty Block (label) animate::@5
Culled Empty Block (label) animate::@6
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

Inversing boolean not (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40 from (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
Inversing boolean not (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25 from (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
Inversing boolean not (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255 from (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
Inversing boolean not (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25 from (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
Inversing boolean not (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255 from (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
Inversing boolean not (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40 from (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
Inversing boolean not (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0 from (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
Inversing boolean not (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1 from (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
Inversing boolean not (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#1 from (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
Inversing boolean not (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2 from (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
Inversing boolean not (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2 from (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#1
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

Not aliassing across scopes: initscreen::screen#0 SCREEN#1
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::$0 findcol::return#4
Alias (byte) numpoints#1 = (byte) numpoints#11 (byte) numpoints#8 (byte) numpoints#26 (byte) numpoints#29 (byte) numpoints#23 (byte) numpoints#18 (byte) numpoints#42 
Alias (byte) numpoints#0 = (byte) numpoints#22 
Alias (byte[256]) XPOS#0 = (byte[256]) XPOS#13 (byte[256]) XPOS#14 (byte[256]) XPOS#15 (byte[256]) XPOS#16 (byte[256]) XPOS#17 (byte[256]) XPOS#18 (byte[256]) XPOS#33 (byte[256]) XPOS#28 
Alias (byte[256]) YPOS#0 = (byte[256]) YPOS#13 (byte[256]) YPOS#14 (byte[256]) YPOS#15 (byte[256]) YPOS#16 (byte[256]) YPOS#17 (byte[256]) YPOS#18 (byte[256]) YPOS#35 (byte[256]) YPOS#31 
Alias (byte[256]) COLS#0 = (byte[256]) COLS#3 (byte[256]) COLS#4 (byte[256]) COLS#5 (byte[256]) COLS#6 (byte[256]) COLS#7 (byte[256]) COLS#8 (byte[256]) COLS#29 (byte[256]) COLS#28 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#9 (byte*) SCREEN#8 (byte*) SCREEN#7 (byte*) SCREEN#6 (byte*) SCREEN#5 (byte*) SCREEN#4 (byte*) SCREEN#3 (byte*) SCREEN#1 
Alias (byte) FILL#0 = (byte) FILL#9 (byte) FILL#8 (byte) FILL#7 (byte) FILL#6 (byte) FILL#5 (byte) FILL#4 (byte) FILL#3 (byte) FILL#2 
Alias (byte*) COLORS#0 = (byte*) COLORS#12 (byte*) COLORS#11 (byte*) COLORS#10 (byte*) COLORS#9 (byte*) COLORS#8 (byte*) COLORS#7 (byte*) COLORS#5 (byte*) COLORS#4 
Alias (byte) numpoints#10 = (byte) numpoints#12 (byte) numpoints#2 (byte) numpoints#13 (byte) numpoints#3 (byte) numpoints#14 (byte) numpoints#4 (byte) numpoints#15 (byte) numpoints#5 (byte) numpoints#16 (byte) numpoints#6 (byte) numpoints#17 (byte) numpoints#7 (byte) numpoints#31 (byte) numpoints#20 (byte) numpoints#9 
Alias (byte[256]) XPOS#1 = (byte[256]) XPOS#9 (byte[256]) XPOS#21 (byte[256]) XPOS#27 (byte[256]) XPOS#2 (byte[256]) XPOS#34 
Alias (byte[256]) YPOS#10 = (byte[256]) YPOS#21 (byte[256]) YPOS#25 (byte[256]) YPOS#30 (byte[256]) YPOS#9 (byte[256]) YPOS#32 
Alias (byte*) COLORS#1 = (byte*) COLORS#6 (byte*) COLORS#2 (byte*) COLORS#3 
Alias (byte[256]) COLS#24 = (byte[256]) COLS#30 (byte[256]) COLS#26 (byte[256]) COLS#27 
Alias (byte[256]) YPOS#1 = (byte[256]) YPOS#2 
Alias (byte[256]) XPOS#10 = (byte[256]) XPOS#11 
Alias (byte[256]) XPOS#3 = (byte[256]) XPOS#4 
Alias (byte[256]) YPOS#11 = (byte[256]) YPOS#12 
Alias (byte[256]) YPOS#3 = (byte[256]) YPOS#5 
Alias (byte[256]) XPOS#22 = (byte[256]) XPOS#23 
Alias (byte[256]) YPOS#4 = (byte[256]) YPOS#6 
Alias (byte[256]) XPOS#12 = (byte[256]) XPOS#5 (byte[256]) XPOS#6 
Alias (byte) findcol::return#0 = (byte) findcol::return#2 (byte) findcol::return#4 (byte) findcol::return#5 
Alias (byte*) render::colline#2 = (byte*) render::colline#4 (byte*) render::colline#3 
Alias (byte) render::x#2 = (byte) render::x#3 
Alias (byte) render::y#2 = (byte) render::y#5 (byte) render::y#3 
Alias (byte[256]) XPOS#19 = (byte[256]) XPOS#30 (byte[256]) XPOS#24 (byte[256]) XPOS#35 
Alias (byte[256]) YPOS#19 = (byte[256]) YPOS#27 (byte[256]) YPOS#22 (byte[256]) YPOS#33 
Alias (byte) numpoints#37 = (byte) numpoints#41 (byte) numpoints#39 (byte) numpoints#43 
Alias (byte[256]) COLS#18 = (byte[256]) COLS#23 (byte[256]) COLS#21 (byte[256]) COLS#25 
Alias (byte) render::col#0 = (byte~) render::$0 
Alias (byte*) render::colline#1 = (byte*~) render::$2 
Alias (byte) findcol::x#0 = (byte) findcol::x#5 
Alias (byte) findcol::y#0 = (byte) findcol::y#8 
Alias (byte) findcol::xp#0 = (byte~) findcol::$0 (byte) findcol::xp#5 (byte) findcol::xp#4 
Alias (byte) findcol::yp#0 = (byte~) findcol::$1 (byte) findcol::yp#1 (byte) findcol::yp#8 
Alias (byte) findcol::y#1 = (byte) findcol::y#5 (byte) findcol::y#11 
Alias (byte) findcol::x#1 = (byte) findcol::x#8 (byte) findcol::x#7 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#12 (byte) findcol::mindiff#9 
Alias (byte) findcol::i#12 = (byte) findcol::i#13 (byte) findcol::i#2 
Alias (byte) numpoints#35 = (byte) numpoints#38 (byte) numpoints#36 
Alias (byte[256]) COLS#16 = (byte[256]) COLS#20 (byte[256]) COLS#17 
Alias (byte[256]) XPOS#40 = (byte[256]) XPOS#41 (byte[256]) XPOS#8 
Alias (byte[256]) YPOS#39 = (byte[256]) YPOS#40 (byte[256]) YPOS#8 
Alias (byte) findcol::mincol#11 = (byte) findcol::mincol#13 (byte) findcol::mincol#12 
Alias (byte) findcol::x#2 = (byte) findcol::x#3 (byte) findcol::x#4 
Alias (byte) findcol::xp#1 = (byte) findcol::xp#2 (byte) findcol::xp#3 
Alias (byte) findcol::y#10 = (byte) findcol::y#7 (byte) findcol::y#6 
Alias (byte) findcol::yp#5 = (byte) findcol::yp#6 (byte) findcol::yp#7 
Alias (byte) findcol::mindiff#6 = (byte) findcol::mindiff#7 (byte) findcol::mindiff#8 
Alias (byte) findcol::i#10 = (byte) findcol::i#11 (byte) findcol::i#9 
Alias (byte) numpoints#32 = (byte) numpoints#33 (byte) numpoints#34 
Alias (byte[256]) COLS#13 = (byte[256]) COLS#14 (byte[256]) COLS#15 
Alias (byte[256]) XPOS#37 = (byte[256]) XPOS#38 (byte[256]) XPOS#39 
Alias (byte[256]) YPOS#36 = (byte[256]) YPOS#37 (byte[256]) YPOS#38 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#9 (byte) findcol::mincol#8 
Alias (byte) findcol::diff#0 = (byte~) findcol::$9 
Alias (byte) findcol::diff#1 = (byte~) findcol::$8 
Alias (byte) findcol::y#2 = (byte) findcol::y#3 (byte) findcol::y#4 
Alias (byte) findcol::yp#2 = (byte) findcol::yp#3 (byte) findcol::yp#4 
Alias (byte) findcol::diff#4 = (byte) findcol::diff#8 (byte) findcol::diff#5 
Alias (byte) findcol::mindiff#3 = (byte) findcol::mindiff#4 (byte) findcol::mindiff#5 
Alias (byte) findcol::i#6 = (byte) findcol::i#7 (byte) findcol::i#8 
Alias (byte) numpoints#27 = (byte) numpoints#28 (byte) numpoints#30 
Alias (byte[256]) COLS#10 = (byte[256]) COLS#11 (byte[256]) COLS#12 
Alias (byte[256]) XPOS#31 = (byte[256]) XPOS#32 (byte[256]) XPOS#36 
Alias (byte[256]) YPOS#28 = (byte[256]) YPOS#29 (byte[256]) YPOS#34 
Alias (byte) findcol::x#11 = (byte) findcol::x#12 (byte) findcol::x#13 
Alias (byte) findcol::mincol#5 = (byte) findcol::mincol#6 (byte) findcol::mincol#7 
Alias (byte) findcol::diff#2 = (byte~) findcol::$15 
Alias (byte) findcol::diff#3 = (byte~) findcol::$13 
Alias (byte) findcol::diff#6 = (byte) findcol::diff#7 (byte) findcol::mindiff#1 
Alias (byte[256]) COLS#2 = (byte[256]) COLS#9 
Alias (byte) findcol::i#4 = (byte) findcol::i#5 
Alias (byte) numpoints#24 = (byte) numpoints#25 
Alias (byte[256]) XPOS#25 = (byte[256]) XPOS#26 
Alias (byte[256]) YPOS#23 = (byte[256]) YPOS#24 
Alias (byte) findcol::x#10 = (byte) findcol::x#9 
Alias (byte) findcol::y#12 = (byte) findcol::y#13 
Alias (byte) findcol::mincol#1 = (byte~) findcol::$18 
Alias (byte) findcol::mincol#2 = (byte) findcol::mincol#3 (byte) findcol::return#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@11/(byte[256]) COLS#24 main::@9/(byte[256]) COLS#0 )
  (byte[256]) YPOS#10 ← phi( main::@11/(byte[256]) YPOS#10 main::@9/(byte[256]) YPOS#0 )
  (byte) numpoints#1 ← phi( main::@11/(byte) numpoints#1 main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@11/(byte[256]) XPOS#1 main::@9/(byte[256]) XPOS#0 )
  (byte*) COLORS#1 ← phi( main::@11/(byte*) COLORS#1 main::@9/(byte*) COLORS#0 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#1 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#10 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#1 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#10 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#22 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#3 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#11 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#22 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#3 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#12 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#12 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#12 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#12 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#12 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#0 main::@3/(byte[256]) COLS#0 main::@4/(byte[256]) COLS#0 main::@5/(byte[256]) COLS#0 main::@6/(byte[256]) COLS#0 main::@7/(byte[256]) COLS#0 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#0 main::@3/(byte[256]) YPOS#0 main::@4/(byte[256]) YPOS#0 main::@5/(byte[256]) YPOS#0 main::@6/(byte[256]) YPOS#0 main::@7/(byte[256]) YPOS#0 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#0 main::@3/(byte[256]) XPOS#0 main::@4/(byte[256]) XPOS#0 main::@5/(byte[256]) XPOS#0 main::@6/(byte[256]) XPOS#0 main::@7/(byte[256]) XPOS#0 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#0 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#0 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#18 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#37 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#12 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#36 ← phi( findcol::@1/(byte[256]) YPOS#39 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#37 ← phi( findcol::@1/(byte[256]) XPOS#40 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#13 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#16 )
  (byte) numpoints#32 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#35 )
  (byte) findcol::i#10 ← phi( findcol::@1/(byte) findcol::i#12 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#6 ← phi( findcol::@1/(byte) findcol::mindiff#10 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#5 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#0 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#1 findcol::@3/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#0 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#1 )
  (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#2 - (byte) findcol::xp#1
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#1 - (byte) findcol::x#2
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#5 ← phi( findcol::@12/(byte) findcol::mincol#10 findcol::@4/(byte) findcol::mincol#10 )
  (byte) findcol::x#11 ← phi( findcol::@12/(byte) findcol::x#2 findcol::@4/(byte) findcol::x#2 )
  (byte[256]) YPOS#28 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#36 )
  (byte[256]) XPOS#31 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#37 )
  (byte[256]) COLS#10 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#13 )
  (byte) numpoints#27 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#32 )
  (byte) findcol::i#6 ← phi( findcol::@12/(byte) findcol::i#10 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#3 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#6 )
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#5 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#10 findcol::@4/(byte) findcol::y#10 )
  (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#2 - (byte) findcol::yp#2
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#2 - (byte) findcol::y#2
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#12 ← phi( findcol::@14/(byte) findcol::y#2 findcol::@6/(byte) findcol::y#2 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#5 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#11 )
  (byte[256]) YPOS#23 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#28 )
  (byte[256]) XPOS#25 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#31 )
  (byte[256]) COLS#2 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#10 )
  (byte) numpoints#24 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#27 )
  (byte) findcol::i#4 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#6 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#3 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#12 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#10 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#23 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#25 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#24 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#4 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Not aliassing across scopes: initscreen::screen#0 SCREEN#0
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Redundant Phi (byte[256]) YPOS#1 (byte[256]) YPOS#10
Redundant Phi (byte[256]) XPOS#10 (byte[256]) XPOS#1
Redundant Phi (byte[256]) XPOS#3 (byte[256]) XPOS#10
Redundant Phi (byte[256]) YPOS#11 (byte[256]) YPOS#1
Redundant Phi (byte[256]) YPOS#3 (byte[256]) YPOS#11
Redundant Phi (byte[256]) XPOS#22 (byte[256]) XPOS#3
Redundant Phi (byte[256]) YPOS#4 (byte[256]) YPOS#3
Redundant Phi (byte[256]) XPOS#12 (byte[256]) XPOS#22
Redundant Phi (byte[256]) XPOS#7 (byte[256]) XPOS#0
Redundant Phi (byte[256]) YPOS#7 (byte[256]) YPOS#0
Redundant Phi (byte[256]) COLS#1 (byte[256]) COLS#0
Redundant Phi (byte) findcol::x#2 (byte) findcol::x#1
Redundant Phi (byte) findcol::xp#1 (byte) findcol::xp#0
Redundant Phi (byte) findcol::y#10 (byte) findcol::y#1
Redundant Phi (byte) findcol::yp#5 (byte) findcol::yp#0
Redundant Phi (byte) findcol::mindiff#6 (byte) findcol::mindiff#10
Redundant Phi (byte) findcol::i#10 (byte) findcol::i#12
Redundant Phi (byte) numpoints#32 (byte) numpoints#35
Redundant Phi (byte[256]) COLS#13 (byte[256]) COLS#16
Redundant Phi (byte[256]) XPOS#37 (byte[256]) XPOS#40
Redundant Phi (byte[256]) YPOS#36 (byte[256]) YPOS#39
Redundant Phi (byte) findcol::mincol#10 (byte) findcol::mincol#11
Redundant Phi (byte) findcol::y#2 (byte) findcol::y#10
Redundant Phi (byte) findcol::yp#2 (byte) findcol::yp#5
Redundant Phi (byte) findcol::mindiff#3 (byte) findcol::mindiff#6
Redundant Phi (byte) findcol::i#6 (byte) findcol::i#10
Redundant Phi (byte) numpoints#27 (byte) numpoints#32
Redundant Phi (byte[256]) COLS#10 (byte[256]) COLS#13
Redundant Phi (byte[256]) XPOS#31 (byte[256]) XPOS#37
Redundant Phi (byte[256]) YPOS#28 (byte[256]) YPOS#36
Redundant Phi (byte) findcol::x#11 (byte) findcol::x#2
Redundant Phi (byte) findcol::mincol#5 (byte) findcol::mincol#10
Redundant Phi (byte) findcol::mindiff#2 (byte) findcol::mindiff#3
Redundant Phi (byte) findcol::i#4 (byte) findcol::i#6
Redundant Phi (byte) numpoints#24 (byte) numpoints#27
Redundant Phi (byte[256]) COLS#2 (byte[256]) COLS#10
Redundant Phi (byte[256]) XPOS#25 (byte[256]) XPOS#31
Redundant Phi (byte[256]) YPOS#23 (byte[256]) YPOS#28
Redundant Phi (byte) findcol::x#10 (byte) findcol::x#11
Redundant Phi (byte) findcol::mincol#4 (byte) findcol::mincol#5
Redundant Phi (byte) findcol::y#12 (byte) findcol::y#2
Redundant Phi (byte) findcol::i#3 (byte) findcol::i#4
Redundant Phi (byte) numpoints#21 (byte) numpoints#24
Redundant Phi (byte[256]) XPOS#20 (byte[256]) XPOS#25
Redundant Phi (byte[256]) YPOS#20 (byte[256]) YPOS#23
Redundant Phi (byte) findcol::x#6 (byte) findcol::x#10
Redundant Phi (byte) findcol::y#9 (byte) findcol::y#12
Redundant Phi (byte[256]) COLS#19 (byte[256]) COLS#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@11/(byte[256]) COLS#24 main::@9/(byte[256]) COLS#0 )
  (byte[256]) YPOS#10 ← phi( main::@11/(byte[256]) YPOS#10 main::@9/(byte[256]) YPOS#0 )
  (byte) numpoints#1 ← phi( main::@11/(byte) numpoints#1 main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@11/(byte[256]) XPOS#1 main::@9/(byte[256]) XPOS#0 )
  (byte*) COLORS#1 ← phi( main::@11/(byte*) COLORS#1 main::@9/(byte*) COLORS#0 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#0 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#0 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#18 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#37 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#16 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#35 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 findcol::@8/(byte) findcol::y#1 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 findcol::@8/(byte) findcol::x#1 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#39 )
  (byte) findcol::i#12 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#40 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#1 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#1 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#35
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Self Phi Eliminated (byte*) COLORS#1
Self Phi Eliminated (byte[256]) XPOS#1
Self Phi Eliminated (byte) numpoints#1
Self Phi Eliminated (byte[256]) YPOS#10
Self Phi Eliminated (byte[256]) COLS#24
Self Phi Eliminated (byte) FILL#1
Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte) render::y#2
Self Phi Eliminated (byte*) render::colline#2
Self Phi Eliminated (byte[256]) XPOS#19
Self Phi Eliminated (byte[256]) YPOS#19
Self Phi Eliminated (byte) numpoints#37
Self Phi Eliminated (byte[256]) COLS#18
Self Phi Eliminated (byte[256]) XPOS#40
Self Phi Eliminated (byte[256]) YPOS#39
Self Phi Eliminated (byte) findcol::x#1
Self Phi Eliminated (byte) findcol::y#1
Self Phi Eliminated (byte) numpoints#35
Self Phi Eliminated (byte[256]) COLS#16
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@9/(byte[256]) COLS#0 )
  (byte[256]) YPOS#10 ← phi( main::@9/(byte[256]) YPOS#0 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(byte[256]) XPOS#0 )
  (byte*) COLORS#1 ← phi( main::@9/(byte*) COLORS#0 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#0 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#0 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#1 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#1 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#35
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Simple Condition (boolean~) animate::$4 if((byte~) animate::$2!=(byte) 40) goto animate::@1
Simple Condition (boolean~) animate::$9 if((byte~) animate::$7!=(byte) 25) goto animate::@2
Simple Condition (boolean~) animate::$14 if((byte~) animate::$12!=(byte) 255) goto animate::@3
Simple Condition (boolean~) animate::$19 if((byte~) animate::$17!=(byte) 25) goto animate::@4
Simple Condition (boolean~) animate::$24 if((byte~) animate::$22!=(byte) 255) goto animate::@return
Simple Condition (boolean~) animate::$29 if((byte~) animate::$27<(byte) 40) goto animate::@return
Simple Condition (boolean~) initscreen::$1 if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
Simple Condition (boolean~) render::$1 if((byte) render::x#1!=(byte) 40) goto render::@2
Simple Condition (boolean~) render::$3 if((byte) render::y#1!=(byte) 25) goto render::@1
Simple Condition (boolean~) findcol::$3 if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
Simple Condition (boolean~) findcol::$7 if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
Simple Condition (boolean~) findcol::$5 if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
Simple Condition (boolean~) findcol::$11 if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
Simple Condition (boolean~) findcol::$17 if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
Simple Condition (boolean~) findcol::$19 if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@9/(byte[256]) COLS#0 )
  (byte[256]) YPOS#10 ← phi( main::@9/(byte[256]) YPOS#0 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(byte[256]) XPOS#0 )
  (byte*) COLORS#1 ← phi( main::@9/(byte*) COLORS#0 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#0 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#0 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Constant (const byte*) SCREEN#0 = 1024
Constant (const byte*) COLORS#0 = 55296
Constant (const byte) FILL#0 = 230
Constant (const byte) numpoints#0 = 0
Constant (const byte[256]) XPOS#0 = 4096
Constant (const byte[256]) YPOS#0 = 4352
Constant (const byte[256]) COLS#0 = 4608
Constant (const byte) addpoint::x#0 = 5
Constant (const byte) addpoint::y#0 = 5
Constant (const byte) addpoint::c#0 = 1
Constant (const byte) addpoint::x#1 = 15
Constant (const byte) addpoint::y#1 = 8
Constant (const byte) addpoint::c#1 = 2
Constant (const byte) addpoint::x#2 = 6
Constant (const byte) addpoint::y#2 = 14
Constant (const byte) addpoint::c#2 = 3
Constant (const byte) addpoint::x#3 = 34
Constant (const byte) addpoint::y#3 = 2
Constant (const byte) addpoint::c#3 = 4
Constant (const byte) addpoint::x#4 = 21
Constant (const byte) addpoint::y#4 = 17
Constant (const byte) addpoint::c#4 = 5
Constant (const byte) addpoint::x#5 = 31
Constant (const byte) addpoint::y#5 = 22
Constant (const byte) addpoint::c#5 = 7
Constant (const byte) render::y#0 = 0
Constant (const byte) render::x#0 = 0
Constant (const byte) findcol::mindiff#0 = 255
Constant (const byte) findcol::mincol#0 = 0
Constant (const byte) findcol::i#0 = 0
Constant (const byte) findcol::return#1 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@9/(const byte[256]) COLS#0 )
  (byte[256]) YPOS#10 ← phi( main::@9/(const byte[256]) YPOS#0 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(const byte[256]) XPOS#0 )
  (byte*) COLORS#1 ← phi( main::@9/(const byte*) COLORS#0 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (const byte*) SCREEN#0
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(const byte*) SCREEN#0 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(const byte) FILL#0 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Constant (const byte*) COLORS#1 = COLORS#0
Constant (const byte[256]) XPOS#1 = XPOS#0
Constant (const byte[256]) YPOS#10 = YPOS#0
Constant (const byte[256]) COLS#24 = COLS#0
Constant (const byte*) initscreen::screen#0 = SCREEN#0
Constant (const byte) FILL#1 = FILL#0
Constant (const byte*) SCREEN#2 = SCREEN#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (const byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (const byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (const byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (const byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (const byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (const byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (const byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (const byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (const byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (const byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (const byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (const byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (const byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (const byte*) SCREEN#2 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (const byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(const byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(const byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(const byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Constant (const byte*) initscreen::$0 = SCREEN#2+1000
Constant (const byte*) render::colline#0 = COLORS#1
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (const byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (const byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (const byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (const byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (const byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (const byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (const byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (const byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (const byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (const byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (const byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (const byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (const byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(const byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(const byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(const byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Consolidated referenced array index constant in assignment animate::$0
Consolidated assigned array index constant in assignment *(XPOS#1+0)
Consolidated referenced array index constant in assignment animate::$2
Consolidated referenced array index constant in assignment animate::$5
Consolidated assigned array index constant in assignment *(YPOS#10+0)
Consolidated referenced array index constant in assignment animate::$7
Consolidated assigned array index constant in assignment *(XPOS#1+0)
Consolidated referenced array index constant in assignment animate::$10
Consolidated assigned array index constant in assignment *(XPOS#1+1)
Consolidated referenced array index constant in assignment animate::$12
Consolidated assigned array index constant in assignment *(YPOS#10+0)
Consolidated referenced array index constant in assignment animate::$15
Consolidated assigned array index constant in assignment *(YPOS#10+2)
Consolidated referenced array index constant in assignment animate::$17
Consolidated assigned array index constant in assignment *(XPOS#1+1)
Consolidated referenced array index constant in assignment animate::$20
Consolidated assigned array index constant in assignment *(YPOS#10+3)
Consolidated referenced array index constant in assignment animate::$22
Consolidated assigned array index constant in assignment *(YPOS#10+2)
Consolidated assigned array index constant in assignment *(YPOS#10+3)
Consolidated referenced array index constant in assignment animate::$25
Consolidated assigned array index constant in assignment *(XPOS#1+3)
Consolidated referenced array index constant in assignment animate::$27
Consolidated referenced array index constant in assignment animate::$30
Consolidated assigned array index constant in assignment *(XPOS#1+3)
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#1+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#1+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#10+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#10+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#1+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#1+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#10+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#10+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#10+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#10+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#1+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(const byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(const byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(const byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(const byte) findcol::return#1 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Culled Empty Block (label) @7
Culled Empty Block (label) main::@9
Culled Empty Block (label) findcol::@3
Culled Empty Block (label) findcol::@10
Culled Empty Block (label) findcol::@17
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#1+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#1+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#10+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#10+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#1+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#1+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#10+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#10+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#10+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#10+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#1+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(const byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(const byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(const byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Alias (byte) numpoints#1 = (byte) numpoints#10 
Alias (byte) render::y#2 = (byte) render::y#4 
Alias (byte*) render::colline#2 = (byte*) render::colline#5 
Alias (byte[256]) XPOS#19 = (byte[256]) XPOS#29 (byte[256]) XPOS#40 
Alias (byte[256]) YPOS#19 = (byte[256]) YPOS#26 (byte[256]) YPOS#39 
Alias (byte) numpoints#35 = (byte) numpoints#37 (byte) numpoints#40 
Alias (byte[256]) COLS#16 = (byte[256]) COLS#18 (byte[256]) COLS#22 
Alias (byte) findcol::x#0 = (byte) findcol::x#1 
Alias (byte) findcol::y#0 = (byte) findcol::y#1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#1+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#1+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#10+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#10+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#1+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#1+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#10+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#10+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#10+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#10+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#1+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#16 ← phi( render/(const byte[256]) COLS#24 render::@3/(byte[256]) COLS#16 )
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#35 )
  (byte[256]) YPOS#19 ← phi( render/(const byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render/(const byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Self Phi Eliminated (byte[256]) XPOS#19
Self Phi Eliminated (byte[256]) YPOS#19
Self Phi Eliminated (byte) numpoints#35
Self Phi Eliminated (byte[256]) COLS#16
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#1+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#1+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#10+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#10+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#1+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#1+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#10+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#10+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#10+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#10+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#1+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#16 ← phi( render/(const byte[256]) COLS#24 )
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 )
  (byte[256]) YPOS#19 ← phi( render/(const byte[256]) YPOS#10 )
  (byte[256]) XPOS#19 ← phi( render/(const byte[256]) XPOS#1 )
  (byte*) render::colline#2 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Constant (const byte[256]) XPOS#19 = XPOS#1
Constant (const byte[256]) YPOS#19 = YPOS#10
Constant (const byte[256]) COLS#16 = COLS#24
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#1+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#1+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#10+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#10+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#1+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#1+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#10+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#10+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#10+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#10+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#1+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 )
  (byte*) render::colline#2 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (const byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (const byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Alias (byte) numpoints#1 = (byte) numpoints#35 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#1+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#1+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#10+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#10+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#1+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#1+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#1+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#10+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#10+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#10+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#1+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#10+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#10+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#10+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#10+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#1+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#1+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#1+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(const byte) addpoint::c#0 main::@3/(const byte) addpoint::c#1 main::@4/(const byte) addpoint::c#2 main::@5/(const byte) addpoint::c#3 main::@6/(const byte) addpoint::c#4 main::@7/(const byte) addpoint::c#5 )
  (byte) addpoint::y#6 ← phi( main/(const byte) addpoint::y#0 main::@3/(const byte) addpoint::y#1 main::@4/(const byte) addpoint::y#2 main::@5/(const byte) addpoint::y#3 main::@6/(const byte) addpoint::y#4 main::@7/(const byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(const byte) numpoints#0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(const byte) addpoint::x#0 main::@3/(const byte) addpoint::x#1 main::@4/(const byte) addpoint::x#2 main::@5/(const byte) addpoint::x#3 main::@6/(const byte) addpoint::x#4 main::@7/(const byte) addpoint::x#5 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte*) render::colline#2 ← phi( render/(const byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(const byte) render::y#0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(const byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(const byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(const byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(const byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (const byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (const byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(const byte) findcol::return#1 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Constant inlined FILL#1 = (const byte) FILL#0
Constant inlined numpoints#0 = (byte) 0
Constant inlined XPOS#1 = (const byte[256]) XPOS#0
Constant inlined render::colline#0 = (const byte*) COLORS#0
Constant inlined YPOS#10 = (const byte[256]) YPOS#0
Constant inlined addpoint::y#0 = (byte) 5
Constant inlined addpoint::x#1 = (byte) 15
Constant inlined addpoint::x#0 = (byte) 5
Constant inlined initscreen::$0 = (const byte*) SCREEN#0+(word) 1000
Constant inlined initscreen::screen#0 = (const byte*) SCREEN#0
Constant inlined COLS#16 = (const byte[256]) COLS#0
Constant inlined COLORS#1 = (const byte*) COLORS#0
Constant inlined YPOS#19 = (const byte[256]) YPOS#0
Constant inlined addpoint::y#5 = (byte) 22
Constant inlined addpoint::x#5 = (byte) 31
Constant inlined addpoint::y#4 = (byte) 17
Constant inlined addpoint::x#4 = (byte) 21
Constant inlined addpoint::y#3 = (byte) 2
Constant inlined addpoint::y#2 = (byte) 14
Constant inlined addpoint::x#3 = (byte) 34
Constant inlined addpoint::y#1 = (byte) 8
Constant inlined addpoint::x#2 = (byte) 6
Constant inlined addpoint::c#0 = (byte) 1
Constant inlined findcol::mincol#0 = (byte) 0
Constant inlined addpoint::c#2 = (byte) 3
Constant inlined SCREEN#2 = (const byte*) SCREEN#0
Constant inlined addpoint::c#1 = (byte) 2
Constant inlined addpoint::c#4 = (byte) 5
Constant inlined XPOS#19 = (const byte[256]) XPOS#0
Constant inlined addpoint::c#3 = (byte) 4
Constant inlined addpoint::c#5 = (byte) 7
Constant inlined findcol::return#1 = (byte) 0
Constant inlined render::x#0 = (byte) 0
Constant inlined findcol::mindiff#0 = (byte) 255
Constant inlined COLS#24 = (const byte[256]) COLS#0
Constant inlined findcol::i#0 = (byte) 0
Constant inlined render::y#0 = (byte) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte*) render::colline#2 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) COLORS
(const byte*) COLORS#0 = (word) 55296
(byte[256]) COLS
(const byte[256]) COLS#0 = (word) 4608
(byte) FILL
(const byte) FILL#0 = (byte) 230
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(byte[256]) XPOS
(const byte[256]) XPOS#0 = (word) 4096
(byte[256]) YPOS
(const byte[256]) YPOS#0 = (word) 4352
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#6
(byte) addpoint::x
(byte) addpoint::x#6
(byte) addpoint::y
(byte) addpoint::y#6
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(byte~) animate::$30
(byte~) animate::$31
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12
(byte~) findcol::$14
(label) findcol::@1
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@2
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#6
(byte) findcol::i
(byte) findcol::i#1
(byte) findcol::i#12
(byte) findcol::mincol
(byte) findcol::mincol#1
(byte) findcol::mincol#11
(byte) findcol::mincol#2
(byte) findcol::mindiff
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::yp
(byte) findcol::yp#0
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) numpoints
(byte) numpoints#1
(byte) numpoints#19
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#1
(byte*) render::colline#2
(byte) render::x
(byte) render::x#1
(byte) render::x#2
(byte) render::y
(byte) render::y#1
(byte) render::y#2

Block Sequence Planned @begin @end main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return addpoint addpoint::@return 
Added new block during phi lifting render::@6(between render::@3 and render::@1)
Added new block during phi lifting render::@7(between render::@5 and render::@2)
Added new block during phi lifting findcol::@19(between findcol::@8 and findcol::@1)
Added new block during phi lifting findcol::@20(between findcol::@8 and findcol::@return)
Added new block during phi lifting findcol::@21(between findcol::@7 and findcol::@8)
Added new block during phi lifting initscreen::@3(between initscreen::@1 and initscreen::@1)
Block Sequence Planned @begin @end main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return render::@6 render::@7 findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@20 findcol::@19 findcol::@21 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return initscreen::@3 addpoint addpoint::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte~) numpoints#44 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) numpoints#45 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte~) numpoints#46 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte~) numpoints#47 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte~) numpoints#48 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@7: scope:[animate]  from animate
  *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25
  (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@6
  (byte*) render::colline#2 ← phi( render/(const byte*) COLORS#0 render::@6/(byte*~) render::colline#6 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@6/(byte~) render::y#6 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@7
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@7/(byte~) render::x#4 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@7
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@6
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
render::@6: scope:[render]  from render::@3
  (byte~) render::y#6 ← (byte) render::y#1
  (byte*~) render::colline#6 ← (byte*) render::colline#1
  to:render::@1
render::@7: scope:[render]  from render::@5
  (byte~) render::x#4 ← (byte) render::x#1
  to:render::@2
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::mincol#14 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::i#14 )
  (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@20 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@20/(byte~) findcol::mincol#15 )
  return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  (byte~) findcol::diff#9 ← (byte) findcol::diff#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte~) findcol::diff#9 findcol::@4/(byte~) findcol::diff#10 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  (byte~) findcol::diff#11 ← (byte) findcol::diff#3
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte~) findcol::diff#11 findcol::@6/(byte~) findcol::diff#12 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12
  (byte~) findcol::mincol#16 ← (byte) findcol::mincol#1
  (byte~) findcol::diff#13 ← (byte) findcol::diff#6
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte~) findcol::diff#13 findcol::@21/(byte~) findcol::mindiff#14 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte~) findcol::mincol#16 findcol::@21/(byte~) findcol::mincol#17 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19
  to:findcol::@20
findcol::@20: scope:[findcol]  from findcol::@8
  (byte~) findcol::mincol#15 ← (byte) findcol::mincol#2
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  (byte~) findcol::i#14 ← (byte) findcol::i#1
  (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11
  (byte~) findcol::mincol#14 ← (byte) findcol::mincol#2
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  (byte~) findcol::mincol#17 ← (byte) findcol::mincol#11
  (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte~) findcol::diff#12 ← (byte) findcol::diff#2
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  (byte~) findcol::diff#10 ← (byte) findcol::diff#0
  to:findcol::@5
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@3
  (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@3/(byte*~) initscreen::screen#3 )
  *((byte*) initscreen::screen#2) ← (const byte) FILL#0
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@3
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
initscreen::@3: scope:[initscreen]  from initscreen::@1
  (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1
  to:initscreen::@1
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte~) numpoints#44 main::@4/(byte~) numpoints#45 main::@5/(byte~) numpoints#46 main::@6/(byte~) numpoints#47 main::@7/(byte~) numpoints#48 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return

Adding NOP phi() at start of main
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of initscreen
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 2:addpoint 4:addpoint 6:addpoint 8:addpoint 10:addpoint 12:addpoint 13:initscreen 14:render 15:animate 
Calls in [render] to 62:findcol 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  [2] call addpoint param-assignment [ numpoints#1 ]
  to:main::@3
main::@3: scope:[main]  from main
  [3] (byte~) numpoints#44 ← (byte) numpoints#1 [ numpoints#44 ]
  [4] call addpoint param-assignment [ numpoints#1 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [5] (byte~) numpoints#45 ← (byte) numpoints#1 [ numpoints#45 ]
  [6] call addpoint param-assignment [ numpoints#1 ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [7] (byte~) numpoints#46 ← (byte) numpoints#1 [ numpoints#46 ]
  [8] call addpoint param-assignment [ numpoints#1 ]
  to:main::@6
main::@6: scope:[main]  from main::@5
  [9] (byte~) numpoints#47 ← (byte) numpoints#1 [ numpoints#47 ]
  [10] call addpoint param-assignment [ numpoints#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [11] (byte~) numpoints#48 ← (byte) numpoints#1 [ numpoints#48 ]
  [12] call addpoint param-assignment [ numpoints#1 ]
  to:main::@8
main::@8: scope:[main]  from main::@7
  [13] call initscreen param-assignment [ numpoints#1 ]
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  [14] call render param-assignment [ numpoints#1 ]
  to:main::@10
main::@10: scope:[main]  from main::@1
  [15] call animate param-assignment [ numpoints#1 ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [16] if(true) goto main::@1 [ numpoints#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [17] return  [ ]
  to:@return
animate: scope:[animate]  from main::@10
  [18] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ]
  [19] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [20] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ]
  [21] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ]
  [22] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [23] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [24] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ]
  [25] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ]
  [26] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ]
  [27] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ]
  [28] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [29] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [30] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ]
  [31] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ]
  [32] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ]
  [33] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ]
  [34] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [35] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [36] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ]
  [37] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ]
  [38] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ]
  [39] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ]
  [40] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [41] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [42] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ]
  [43] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ]
  [44] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ]
  [45] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ]
  [46] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [47] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ]
  [48] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ]
  [49] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ]
  [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ]
  [51] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ]
  [52] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [53] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ]
  [54] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ]
  [55] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [56] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  [57] phi() [ numpoints#1 ]
  to:render::@1
render::@1: scope:[render]  from render render::@6
  [58] (byte*) render::colline#2 ← phi( render/(const byte*) COLORS#0 render::@6/(byte*~) render::colline#6 ) [ numpoints#1 render::y#2 render::colline#2 ]
  [58] (byte) render::y#2 ← phi( render/(byte) 0 render::@6/(byte~) render::y#6 ) [ numpoints#1 render::y#2 render::colline#2 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@7
  [59] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@7/(byte~) render::x#4 ) [ numpoints#1 render::y#2 render::colline#2 render::x#2 ]
  [60] (byte) findcol::x#0 ← (byte) render::x#2 [ numpoints#1 render::y#2 render::colline#2 render::x#2 findcol::x#0 ]
  [61] (byte) findcol::y#0 ← (byte) render::y#2 [ numpoints#1 render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 ]
  [62] call findcol param-assignment [ numpoints#1 render::y#2 render::colline#2 render::x#2 findcol::return#0 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [63] (byte) render::col#0 ← (byte) findcol::return#0 [ numpoints#1 render::y#2 render::colline#2 render::x#2 render::col#0 ]
  [64] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ numpoints#1 render::y#2 render::colline#2 render::x#2 ]
  [65] (byte) render::x#1 ← ++ (byte) render::x#2 [ numpoints#1 render::y#2 render::colline#2 render::x#1 ]
  [66] if((byte) render::x#1!=(byte) 40) goto render::@7 [ numpoints#1 render::y#2 render::colline#2 render::x#1 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [67] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ numpoints#1 render::y#2 render::colline#1 ]
  [68] (byte) render::y#1 ← ++ (byte) render::y#2 [ numpoints#1 render::colline#1 render::y#1 ]
  [69] if((byte) render::y#1!=(byte) 25) goto render::@6 [ numpoints#1 render::colline#1 render::y#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [70] return  [ numpoints#1 ]
  to:@return
render::@6: scope:[render]  from render::@3
  [71] (byte~) render::y#6 ← (byte) render::y#1 [ numpoints#1 render::y#6 render::colline#1 ]
  [72] (byte*~) render::colline#6 ← (byte*) render::colline#1 [ numpoints#1 render::y#6 render::colline#6 ]
  to:render::@1
render::@7: scope:[render]  from render::@5
  [73] (byte~) render::x#4 ← (byte) render::x#1 [ numpoints#1 render::y#2 render::colline#2 render::x#4 ]
  to:render::@2
findcol: scope:[findcol]  from render::@2
  [74] phi() [ numpoints#1 findcol::x#0 findcol::y#0 ]
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [75] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::mincol#14 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 ]
  [75] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 ]
  [75] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::i#14 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 ]
  [76] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 ]
  [77] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  [78] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [79] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@20 findcol::@9
  [80] (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@20/(byte~) findcol::mincol#15 ) [ numpoints#1 findcol::return#0 ]
  [81] return  [ numpoints#1 findcol::return#0 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [82] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [83] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 ]
  [84] (byte~) findcol::diff#9 ← (byte) findcol::diff#1 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#9 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [85] (byte) findcol::diff#4 ← phi( findcol::@12/(byte~) findcol::diff#9 findcol::@4/(byte~) findcol::diff#10 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 ]
  [86] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [87] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 ]
  [88] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 ]
  [89] (byte~) findcol::diff#11 ← (byte) findcol::diff#3 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#11 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [90] (byte) findcol::diff#6 ← phi( findcol::@14/(byte~) findcol::diff#11 findcol::@6/(byte~) findcol::diff#12 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 ]
  [91] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [92] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 ]
  [93] (byte~) findcol::mincol#16 ← (byte) findcol::mincol#1 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#16 ]
  [94] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#16 findcol::diff#13 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [95] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte~) findcol::diff#13 findcol::@21/(byte~) findcol::mindiff#14 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#2 findcol::mindiff#11 ]
  [95] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte~) findcol::mincol#16 findcol::@21/(byte~) findcol::mincol#17 ) [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#2 findcol::mindiff#11 ]
  [96] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 findcol::i#1 ]
  [97] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 findcol::i#1 ]
  to:findcol::@20
findcol::@20: scope:[findcol]  from findcol::@8
  [98] (byte~) findcol::mincol#15 ← (byte) findcol::mincol#2 [ numpoints#1 findcol::mincol#15 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [99] (byte~) findcol::i#14 ← (byte) findcol::i#1 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#14 findcol::mincol#2 findcol::mindiff#11 ]
  [100] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#14 findcol::mindiff#13 findcol::mincol#2 ]
  [101] (byte~) findcol::mincol#14 ← (byte) findcol::mincol#2 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#14 findcol::mindiff#13 findcol::mincol#14 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [102] (byte~) findcol::mincol#17 ← (byte) findcol::mincol#11 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#17 ]
  [103] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#17 findcol::mindiff#14 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [104] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$14 ]
  [105] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 ]
  [106] (byte~) findcol::diff#12 ← (byte) findcol::diff#2 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#12 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [107] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 ]
  [108] (byte~) findcol::diff#10 ← (byte) findcol::diff#0 [ numpoints#1 findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#10 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main::@8
  [109] phi() [ ]
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@3
  [110] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@3/(byte*~) initscreen::screen#3 ) [ initscreen::screen#2 ]
  [111] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ]
  [112] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [113] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@3 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [114] return  [ ]
  to:@return
initscreen::@3: scope:[initscreen]  from initscreen::@1
  [115] (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1 [ initscreen::screen#3 ]
  to:initscreen::@1
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  [116] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [116] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [116] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte~) numpoints#44 main::@4/(byte~) numpoints#45 main::@5/(byte~) numpoints#46 main::@6/(byte~) numpoints#47 main::@7/(byte~) numpoints#48 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [116] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [117] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [118] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [119] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [120] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ]
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  [121] return  [ numpoints#1 ]
  to:@return

Created 16 initial phi equivalence classes
Coalesced [3] numpoints#44 ← numpoints#1
Coalesced (already) [5] numpoints#45 ← numpoints#1
Coalesced (already) [7] numpoints#46 ← numpoints#1
Coalesced (already) [9] numpoints#47 ← numpoints#1
Coalesced (already) [11] numpoints#48 ← numpoints#1
Coalesced [71] render::y#6 ← render::y#1
Coalesced [72] render::colline#6 ← render::colline#1
Coalesced [73] render::x#4 ← render::x#1
Coalesced [84] findcol::diff#9 ← findcol::diff#1
Coalesced [89] findcol::diff#11 ← findcol::diff#3
Coalesced [93] findcol::mincol#16 ← findcol::mincol#1
Coalesced [94] findcol::diff#13 ← findcol::diff#6
Coalesced [98] findcol::mincol#15 ← findcol::mincol#2
Coalesced [99] findcol::i#14 ← findcol::i#1
Not coalescing [100] findcol::mindiff#13 ← findcol::mindiff#11
Coalesced [101] findcol::mincol#14 ← findcol::mincol#2
Coalesced (already) [102] findcol::mincol#17 ← findcol::mincol#11
Not coalescing [103] findcol::mindiff#14 ← findcol::mindiff#10
Coalesced [106] findcol::diff#12 ← findcol::diff#2
Coalesced [108] findcol::diff#10 ← findcol::diff#0
Coalesced [115] initscreen::screen#3 ← initscreen::screen#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) render::@6
Culled Empty Block (label) render::@7
Culled Empty Block (label) findcol::@20
Culled Empty Block (label) initscreen::@3
Block Sequence Planned @begin @end main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@19 findcol::@21 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return addpoint addpoint::@return 
Adding NOP phi() at start of main
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of initscreen
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  [2] call addpoint param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main
  [3] call addpoint param-assignment [ numpoints#1 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [4] call addpoint param-assignment [ numpoints#1 ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [5] call addpoint param-assignment [ numpoints#1 ]
  to:main::@6
main::@6: scope:[main]  from main::@5
  [6] call addpoint param-assignment [ numpoints#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [7] call addpoint param-assignment [ numpoints#1 ]
  to:main::@8
main::@8: scope:[main]  from main::@7
  [8] call initscreen param-assignment [ numpoints#1 ]
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  [9] call render param-assignment [ numpoints#1 ]
  to:main::@10
main::@10: scope:[main]  from main::@1
  [10] call animate param-assignment [ numpoints#1 ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [11] if(true) goto main::@1 [ numpoints#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [12] return  [ ]
  to:@return
animate: scope:[animate]  from main::@10
  [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ]
  [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ]
  [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ]
  [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ]
  [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ]
  [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ]
  [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ]
  [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ]
  [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ]
  [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ]
  [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ]
  [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ]
  [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ]
  [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ]
  [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ]
  [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ]
  [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ]
  [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ]
  [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ]
  [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ]
  [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ]
  [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ]
  [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ]
  [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ]
  [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ]
  [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ]
  [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [51] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  [52] phi() [ numpoints#1 ]
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [53] (byte*) render::colline#2 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 ) [ render::y#2 render::colline#2 numpoints#1 ]
  [53] (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 ) [ render::y#2 render::colline#2 numpoints#1 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  [54] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 ) [ render::y#2 render::colline#2 render::x#2 numpoints#1 ]
  [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ]
  [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ]
  [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ]
  [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ]
  [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ]
  [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ]
  [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ]
  [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [65] return  [ numpoints#1 ]
  to:@return
findcol: scope:[findcol]  from render::@2
  [66] phi() [ findcol::x#0 findcol::y#0 numpoints#1 ]
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [67] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte) findcol::mincol#2 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [67] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [67] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte) findcol::i#1 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ]
  [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ]
  [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  [72] (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 ) [ findcol::return#0 numpoints#1 ]
  [73] return  [ findcol::return#0 numpoints#1 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [76] (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ]
  [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ]
  [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [80] (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ]
  [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [83] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@21/(byte~) findcol::mindiff#14 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ]
  [83] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@21/(byte) findcol::mincol#11 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ]
  [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ]
  [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ]
  [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main::@8
  [91] phi() [ ]
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [92] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ]
  [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ]
  [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [96] return  [ ]
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  [97] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [97] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [97] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [97] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ addpoint::x#6 numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ]
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  [102] return  [ numpoints#1 ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@3 dominated by  @begin main::@3 main 
main::@4 dominated by  @begin main::@4 main::@3 main 
main::@5 dominated by  @begin main::@4 main::@3 main::@5 main 
main::@6 dominated by  @begin main::@4 main::@3 main::@6 main::@5 main 
main::@7 dominated by  @begin main::@4 main::@3 main::@6 main::@5 main::@7 main 
main::@8 dominated by  @begin main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@1 dominated by  @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@10 dominated by  main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@11 dominated by  main::@10 main::@11 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@return dominated by  main::@return main::@10 main::@11 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate dominated by  animate main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@7 dominated by  animate animate::@7 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@1 dominated by  animate animate::@1 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@8 dominated by  animate animate::@1 animate::@8 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@2 dominated by  animate animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@9 dominated by  animate animate::@1 animate::@2 animate::@9 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@3 dominated by  animate animate::@3 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@10 dominated by  animate animate::@10 animate::@3 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@4 dominated by  animate animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@11 dominated by  animate animate::@11 animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@12 dominated by  animate animate::@11 animate::@12 animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@return dominated by  animate animate::@return animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render dominated by  render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@1 dominated by  render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@2 dominated by  render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@5 dominated by  render::@2 render::@5 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@3 dominated by  render::@3 render::@2 render::@5 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@return dominated by  render::@3 render::@2 render::@5 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 render::@return main 
findcol dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
findcol::@1 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 main 
findcol::@9 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 findcol::@9 main 
findcol::@return dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 findcol::@return main 
findcol::@2 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@2 findcol::@1 main 
findcol::@12 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@2 findcol::@1 findcol::@12 main 
findcol::@5 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@14 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@5 findcol::@2 findcol::@1 findcol::@14 main 
findcol::@7 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@7 main::@8 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@16 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 findcol::@16 main 
findcol::@8 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 findcol::@8 main::@7 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@19 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 findcol::@19 main 
findcol::@21 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 main findcol::@21 
findcol::@6 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@6 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@4 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@4 findcol::@2 findcol::@1 main 
initscreen dominated by  @begin initscreen main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
initscreen::@1 dominated by  @begin main::@4 initscreen main::@3 main::@6 main::@5 main::@7 main::@8 main initscreen::@1 
initscreen::@return dominated by  @begin main::@4 initscreen main::@3 main::@6 main::@5 main::@7 main::@8 initscreen::@return main initscreen::@1 
addpoint dominated by  addpoint @begin main 
addpoint::@return dominated by  addpoint addpoint::@return @begin main 

Found back edge: Loop head: main::@1 tails: main::@11 blocks: null
Found back edge: Loop head: render::@2 tails: render::@5 blocks: null
Found back edge: Loop head: render::@1 tails: render::@3 blocks: null
Found back edge: Loop head: findcol::@1 tails: findcol::@19 blocks: null
Found back edge: Loop head: initscreen::@1 tails: initscreen::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Populated: Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Populated: Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Populated: Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
Populated: Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Found 0 loops in scope [addpoint]
Found 1 loops in scope [initscreen]
  Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
Found 2 loops in scope [render]
  Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
  Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Found 0 loops in scope [animate]
Found 1 loops in scope [findcol]
  Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1  depth: 1
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2  depth: 3
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1  depth: 2
Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9  depth: 4
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(byte) addpoint::c
(byte) addpoint::c#6 0.6666666666666666
(byte) addpoint::x
(byte) addpoint::x#6 2.0
(byte) addpoint::y
(byte) addpoint::y#6 1.0
(void()) animate()
(byte~) animate::$0 4.0
(byte~) animate::$1 4.0
(byte~) animate::$10 4.0
(byte~) animate::$11 4.0
(byte~) animate::$12 4.0
(byte~) animate::$15 4.0
(byte~) animate::$16 4.0
(byte~) animate::$17 4.0
(byte~) animate::$2 4.0
(byte~) animate::$20 4.0
(byte~) animate::$21 4.0
(byte~) animate::$22 4.0
(byte~) animate::$25 4.0
(byte~) animate::$26 4.0
(byte~) animate::$27 4.0
(byte~) animate::$30 4.0
(byte~) animate::$31 4.0
(byte~) animate::$5 4.0
(byte~) animate::$6 4.0
(byte~) animate::$7 4.0
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12 20002.0
(byte~) findcol::$14 20002.0
(byte) findcol::diff
(byte) findcol::diff#0 20002.0
(byte) findcol::diff#1 20002.0
(byte) findcol::diff#2 20002.0
(byte) findcol::diff#3 20002.0
(byte) findcol::diff#4 10001.0
(byte) findcol::diff#6 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 10001.0
(byte) findcol::i#12 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 20002.0
(byte) findcol::mincol#11 1176.5882352941176
(byte) findcol::mincol#2 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 1875.1875
(byte) findcol::mindiff#11 10001.0
(byte~) findcol::mindiff#13 20002.0
(byte~) findcol::mindiff#14 20002.0
(byte) findcol::return
(byte) findcol::return#0 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 10001.0
(byte) findcol::y
(byte) findcol::y#0 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 6250.625
(void()) initscreen()
(byte*) initscreen::screen
(byte*) initscreen::screen#1 16.5
(byte*) initscreen::screen#2 16.5
(void()) main()
(byte) numpoints
(byte) numpoints#1 200.25999999999996
(byte) numpoints#19 4.5
(void()) render()
(byte) render::col
(byte) render::col#0 2002.0
(byte*) render::colline
(byte*) render::colline#1 67.33333333333333
(byte*) render::colline#2 133.66666666666669
(byte) render::x
(byte) render::x#1 1501.5
(byte) render::x#2 667.3333333333334
(byte) render::y
(byte) render::y#1 151.5
(byte) render::y#2 120.29999999999998

Initial phi equivalence classes
[ render::y#2 render::y#1 ]
[ render::colline#2 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#12 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
[ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ addpoint::x#6 ]
[ numpoints#19 numpoints#1 ]
[ addpoint::y#6 ]
[ addpoint::c#6 ]
Added variable animate::$0 to zero page equivalence class [ animate::$0 ]
Added variable animate::$1 to zero page equivalence class [ animate::$1 ]
Added variable animate::$2 to zero page equivalence class [ animate::$2 ]
Added variable animate::$5 to zero page equivalence class [ animate::$5 ]
Added variable animate::$6 to zero page equivalence class [ animate::$6 ]
Added variable animate::$7 to zero page equivalence class [ animate::$7 ]
Added variable animate::$10 to zero page equivalence class [ animate::$10 ]
Added variable animate::$11 to zero page equivalence class [ animate::$11 ]
Added variable animate::$12 to zero page equivalence class [ animate::$12 ]
Added variable animate::$15 to zero page equivalence class [ animate::$15 ]
Added variable animate::$16 to zero page equivalence class [ animate::$16 ]
Added variable animate::$17 to zero page equivalence class [ animate::$17 ]
Added variable animate::$20 to zero page equivalence class [ animate::$20 ]
Added variable animate::$21 to zero page equivalence class [ animate::$21 ]
Added variable animate::$22 to zero page equivalence class [ animate::$22 ]
Added variable animate::$25 to zero page equivalence class [ animate::$25 ]
Added variable animate::$26 to zero page equivalence class [ animate::$26 ]
Added variable animate::$27 to zero page equivalence class [ animate::$27 ]
Added variable animate::$30 to zero page equivalence class [ animate::$30 ]
Added variable animate::$31 to zero page equivalence class [ animate::$31 ]
Added variable findcol::x#0 to zero page equivalence class [ findcol::x#0 ]
Added variable findcol::y#0 to zero page equivalence class [ findcol::y#0 ]
Added variable render::col#0 to zero page equivalence class [ render::col#0 ]
Added variable findcol::xp#0 to zero page equivalence class [ findcol::xp#0 ]
Added variable findcol::yp#0 to zero page equivalence class [ findcol::yp#0 ]
Added variable findcol::$12 to zero page equivalence class [ findcol::$12 ]
Added variable findcol::$14 to zero page equivalence class [ findcol::$14 ]
Complete equivalence classes
[ render::y#2 render::y#1 ]
[ render::colline#2 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#12 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
[ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ addpoint::x#6 ]
[ numpoints#19 numpoints#1 ]
[ addpoint::y#6 ]
[ addpoint::c#6 ]
[ animate::$0 ]
[ animate::$1 ]
[ animate::$2 ]
[ animate::$5 ]
[ animate::$6 ]
[ animate::$7 ]
[ animate::$10 ]
[ animate::$11 ]
[ animate::$12 ]
[ animate::$15 ]
[ animate::$16 ]
[ animate::$17 ]
[ animate::$20 ]
[ animate::$21 ]
[ animate::$22 ]
[ animate::$25 ]
[ animate::$26 ]
[ animate::$27 ]
[ animate::$30 ]
[ animate::$31 ]
[ findcol::x#0 ]
[ findcol::y#0 ]
[ render::col#0 ]
[ findcol::xp#0 ]
[ findcol::yp#0 ]
[ findcol::$12 ]
[ findcol::$14 ]
Allocated zp ZP_BYTE:2 [ render::y#2 render::y#1 ]
Allocated zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ]
Allocated zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Allocated zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ]
Allocated zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
Allocated zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Allocated zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
Allocated zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ]
Allocated zp ZP_BYTE:13 [ addpoint::x#6 ]
Allocated zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ]
Allocated zp ZP_BYTE:15 [ addpoint::y#6 ]
Allocated zp ZP_BYTE:16 [ addpoint::c#6 ]
Allocated zp ZP_BYTE:17 [ animate::$0 ]
Allocated zp ZP_BYTE:18 [ animate::$1 ]
Allocated zp ZP_BYTE:19 [ animate::$2 ]
Allocated zp ZP_BYTE:20 [ animate::$5 ]
Allocated zp ZP_BYTE:21 [ animate::$6 ]
Allocated zp ZP_BYTE:22 [ animate::$7 ]
Allocated zp ZP_BYTE:23 [ animate::$10 ]
Allocated zp ZP_BYTE:24 [ animate::$11 ]
Allocated zp ZP_BYTE:25 [ animate::$12 ]
Allocated zp ZP_BYTE:26 [ animate::$15 ]
Allocated zp ZP_BYTE:27 [ animate::$16 ]
Allocated zp ZP_BYTE:28 [ animate::$17 ]
Allocated zp ZP_BYTE:29 [ animate::$20 ]
Allocated zp ZP_BYTE:30 [ animate::$21 ]
Allocated zp ZP_BYTE:31 [ animate::$22 ]
Allocated zp ZP_BYTE:32 [ animate::$25 ]
Allocated zp ZP_BYTE:33 [ animate::$26 ]
Allocated zp ZP_BYTE:34 [ animate::$27 ]
Allocated zp ZP_BYTE:35 [ animate::$30 ]
Allocated zp ZP_BYTE:36 [ animate::$31 ]
Allocated zp ZP_BYTE:37 [ findcol::x#0 ]
Allocated zp ZP_BYTE:38 [ findcol::y#0 ]
Allocated zp ZP_BYTE:39 [ render::col#0 ]
Allocated zp ZP_BYTE:40 [ findcol::xp#0 ]
Allocated zp ZP_BYTE:41 [ findcol::yp#0 ]
Allocated zp ZP_BYTE:42 [ findcol::$12 ]
Allocated zp ZP_BYTE:43 [ findcol::$14 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const XPOS = $1000
  .const YPOS = $1100
  .const COLS = $1200
  .label numpoints = 14
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main
main_from_bbegin:
  jsr main
  jmp bend
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] call addpoint param-assignment [ ]
  //SEG7 [97] phi from main to addpoint
  addpoint_from_main:
  //SEG8 [97] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #1
    sta addpoint.c
  //SEG9 [97] phi (byte) addpoint::y#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.y
  //SEG10 [97] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta numpoints
  //SEG11 [97] phi (byte) addpoint::x#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.x
    jsr addpoint
    jmp b3
  //SEG12 main::@3
  b3:
  //SEG13 [3] call addpoint param-assignment [ numpoints#1 ]
  //SEG14 [97] phi from main::@3 to addpoint
  addpoint_from_b3:
  //SEG15 [97] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.c
  //SEG16 [97] phi (byte) addpoint::y#6 = (byte) 8 -- zpby1=coby1 
    lda #8
    sta addpoint.y
  //SEG17 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG18 [97] phi (byte) addpoint::x#6 = (byte) 15 -- zpby1=coby1 
    lda #$f
    sta addpoint.x
    jsr addpoint
    jmp b4
  //SEG19 main::@4
  b4:
  //SEG20 [4] call addpoint param-assignment [ numpoints#1 ]
  //SEG21 [97] phi from main::@4 to addpoint
  addpoint_from_b4:
  //SEG22 [97] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #3
    sta addpoint.c
  //SEG23 [97] phi (byte) addpoint::y#6 = (byte) 14 -- zpby1=coby1 
    lda #$e
    sta addpoint.y
  //SEG24 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG25 [97] phi (byte) addpoint::x#6 = (byte) 6 -- zpby1=coby1 
    lda #6
    sta addpoint.x
    jsr addpoint
    jmp b5
  //SEG26 main::@5
  b5:
  //SEG27 [5] call addpoint param-assignment [ numpoints#1 ]
  //SEG28 [97] phi from main::@5 to addpoint
  addpoint_from_b5:
  //SEG29 [97] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #4
    sta addpoint.c
  //SEG30 [97] phi (byte) addpoint::y#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.y
  //SEG31 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG32 [97] phi (byte) addpoint::x#6 = (byte) 34 -- zpby1=coby1 
    lda #$22
    sta addpoint.x
    jsr addpoint
    jmp b6
  //SEG33 main::@6
  b6:
  //SEG34 [6] call addpoint param-assignment [ numpoints#1 ]
  //SEG35 [97] phi from main::@6 to addpoint
  addpoint_from_b6:
  //SEG36 [97] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.c
  //SEG37 [97] phi (byte) addpoint::y#6 = (byte) 17 -- zpby1=coby1 
    lda #$11
    sta addpoint.y
  //SEG38 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG39 [97] phi (byte) addpoint::x#6 = (byte) 21 -- zpby1=coby1 
    lda #$15
    sta addpoint.x
    jsr addpoint
    jmp b7
  //SEG40 main::@7
  b7:
  //SEG41 [7] call addpoint param-assignment [ numpoints#1 ]
  //SEG42 [97] phi from main::@7 to addpoint
  addpoint_from_b7:
  //SEG43 [97] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #7
    sta addpoint.c
  //SEG44 [97] phi (byte) addpoint::y#6 = (byte) 22 -- zpby1=coby1 
    lda #$16
    sta addpoint.y
  //SEG45 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG46 [97] phi (byte) addpoint::x#6 = (byte) 31 -- zpby1=coby1 
    lda #$1f
    sta addpoint.x
    jsr addpoint
    jmp b8
  //SEG47 main::@8
  b8:
  //SEG48 [8] call initscreen param-assignment [ numpoints#1 ]
  //SEG49 [91] phi from main::@8 to initscreen
  initscreen_from_b8:
    jsr initscreen
    jmp b1
  //SEG50 main::@1
  b1:
  //SEG51 [9] call render param-assignment [ numpoints#1 ]
  //SEG52 [52] phi from main::@1 to render
  render_from_b1:
    jsr render
    jmp b10
  //SEG53 main::@10
  b10:
  //SEG54 [10] call animate param-assignment [ numpoints#1 ]
    jsr animate
    jmp b11
  //SEG55 main::@11
  b11:
  //SEG56 [11] if(true) goto main::@1 [ numpoints#1 ] -- true_then_la1 
    jmp b1
    jmp breturn
  //SEG57 main::@return
  breturn:
  //SEG58 [12] return  [ ]
    rts
}
//SEG59 animate
animate: {
    .label _0 = 17
    .label _1 = 18
    .label _2 = 19
    .label _5 = 20
    .label _6 = 21
    .label _7 = 22
    .label _10 = 23
    .label _11 = 24
    .label _12 = 25
    .label _15 = 26
    .label _16 = 27
    .label _17 = 28
    .label _20 = 29
    .label _21 = 30
    .label _22 = 31
    .label _25 = 32
    .label _26 = 33
    .label _27 = 34
    .label _30 = 35
    .label _31 = 36
  //SEG60 [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ] -- zpby1=_star_cowo1 
    lda XPOS+0
    sta _0
  //SEG61 [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- zpby1=zpby2_plus_1 
    lda _0
    clc
    adc #1
    sta _1
  //SEG62 [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ] -- _star_cowo1=zpby1 
    lda _1
    sta XPOS+0
  //SEG63 [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ] -- zpby1=_star_cowo1 
    lda XPOS+0
    sta _2
  //SEG64 [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- zpby1_neq_coby1_then_la1 
    lda _2
    cmp #$28
    bne b1
    jmp b7
  //SEG65 animate::@7
  b7:
  //SEG66 [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta XPOS+0
    jmp b1
  //SEG67 animate::@1
  b1:
  //SEG68 [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ] -- zpby1=_star_cowo1 
    lda YPOS+0
    sta _5
  //SEG69 [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- zpby1=zpby2_plus_1 
    lda _5
    clc
    adc #1
    sta _6
  //SEG70 [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ] -- _star_cowo1=zpby1 
    lda _6
    sta YPOS+0
  //SEG71 [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ] -- zpby1=_star_cowo1 
    lda YPOS+0
    sta _7
  //SEG72 [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- zpby1_neq_coby1_then_la1 
    lda _7
    cmp #$19
    bne b2
    jmp b8
  //SEG73 animate::@8
  b8:
  //SEG74 [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+0
    jmp b2
  //SEG75 animate::@2
  b2:
  //SEG76 [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ] -- zpby1=_star_cowo1 
    lda XPOS+1
    sta _10
  //SEG77 [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- zpby1=zpby2_minus_1 
    lda _10
    sec
    sbc #1
    sta _11
  //SEG78 [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ] -- _star_cowo1=zpby1 
    lda _11
    sta XPOS+1
  //SEG79 [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ] -- zpby1=_star_cowo1 
    lda XPOS+1
    sta _12
  //SEG80 [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- zpby1_neq_coby1_then_la1 
    lda _12
    cmp #$ff
    bne b3
    jmp b9
  //SEG81 animate::@9
  b9:
  //SEG82 [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta XPOS+1
    jmp b3
  //SEG83 animate::@3
  b3:
  //SEG84 [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ] -- zpby1=_star_cowo1 
    lda YPOS+2
    sta _15
  //SEG85 [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- zpby1=zpby2_plus_1 
    lda _15
    clc
    adc #1
    sta _16
  //SEG86 [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ] -- _star_cowo1=zpby1 
    lda _16
    sta YPOS+2
  //SEG87 [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ] -- zpby1=_star_cowo1 
    lda YPOS+2
    sta _17
  //SEG88 [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- zpby1_neq_coby1_then_la1 
    lda _17
    cmp #$19
    bne b4
    jmp b10
  //SEG89 animate::@10
  b10:
  //SEG90 [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+2
    jmp b4
  //SEG91 animate::@4
  b4:
  //SEG92 [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ] -- zpby1=_star_cowo1 
    lda YPOS+3
    sta _20
  //SEG93 [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- zpby1=zpby2_minus_1 
    lda _20
    sec
    sbc #1
    sta _21
  //SEG94 [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ] -- _star_cowo1=zpby1 
    lda _21
    sta YPOS+3
  //SEG95 [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ] -- zpby1=_star_cowo1 
    lda YPOS+3
    sta _22
  //SEG96 [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- zpby1_neq_coby1_then_la1 
    lda _22
    cmp #$ff
    bne breturn
    jmp b11
  //SEG97 animate::@11
  b11:
  //SEG98 [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG99 [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ] -- zpby1=_star_cowo1 
    lda XPOS+3
    sta _25
  //SEG100 [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- zpby1=zpby2_plus_coby1 
    lda _25
    clc
    adc #7
    sta _26
  //SEG101 [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ] -- _star_cowo1=zpby1 
    lda _26
    sta XPOS+3
  //SEG102 [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ] -- zpby1=_star_cowo1 
    lda XPOS+3
    sta _27
  //SEG103 [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- zpby1_lt_coby1_then_la1 
    lda _27
    cmp #$28
    bcc breturn
    jmp b12
  //SEG104 animate::@12
  b12:
  //SEG105 [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ] -- zpby1=_star_cowo1 
    lda XPOS+3
    sta _30
  //SEG106 [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- zpby1=zpby2_minus_coby1 
    lda _30
    sec
    sbc #$28
    sta _31
  //SEG107 [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ] -- _star_cowo1=zpby1 
    lda _31
    sta XPOS+3
    jmp breturn
  //SEG108 animate::@return
  breturn:
  //SEG109 [51] return  [ ]
    rts
}
//SEG110 render
render: {
    .label col = 39
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG111 [53] phi from render to render::@1
  b1_from_render:
  //SEG112 [53] phi (byte*) render::colline#2 = (const byte*) COLORS#0 -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG113 [53] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG114 [53] phi from render::@3 to render::@1
  b1_from_b3:
  //SEG115 [53] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG116 [53] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
    jmp b1
  //SEG117 render::@1
  b1:
  //SEG118 [54] phi from render::@1 to render::@2
  b2_from_b1:
  //SEG119 [54] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG120 [54] phi from render::@5 to render::@2
  b2_from_b5:
  //SEG121 [54] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
    jmp b2
  //SEG122 render::@2
  b2:
  //SEG123 [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG124 [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG125 [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  //SEG126 [66] phi from render::@2 to findcol
  findcol_from_b2:
    jsr findcol
    jmp b5
  //SEG127 render::@5
  b5:
  //SEG128 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ] -- zpby1=zpby2 
    lda findcol.return
    sta col
  //SEG129 [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ] -- zpptrby1_staridx_zpby1=zpby2 
    lda col
    ldy x
    sta (colline),y
  //SEG130 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG131 [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
    jmp b3
  //SEG132 render::@3
  b3:
  //SEG133 [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG134 [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG135 [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG136 render::@return
  breturn:
  //SEG137 [65] return  [ numpoints#1 ]
    rts
}
//SEG138 findcol
findcol: {
    .label _12 = 42
    .label _14 = 43
    .label x = 37
    .label y = 38
    .label return = 8
    .label xp = 40
    .label yp = 41
    .label diff = 9
    .label diff_2 = 10
    .label diff_3 = 10
    .label i = 6
    .label mincol = 8
    .label diff_6 = 10
    .label mindiff = 7
    .label mindiff_11 = 10
    .label mindiff_14 = 10
  //SEG139 [67] phi from findcol to findcol::@1
  b1_from_findcol:
  //SEG140 [67] phi (byte) findcol::mincol#11 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta mincol
  //SEG141 [67] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG142 [67] phi (byte) findcol::i#12 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG143 findcol::@1
  b1:
  //SEG144 [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda XPOS,x
    sta xp
  //SEG145 [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda YPOS,x
    sta yp
  //SEG146 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
    jmp b9
  //SEG147 findcol::@9
  b9:
  //SEG148 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG149 [72] phi from findcol::@9 to findcol::@return
  breturn_from_b9:
  //SEG150 [72] phi (byte) findcol::return#0 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta return
    jmp breturn
  //SEG151 findcol::@return
  breturn:
  //SEG152 [73] return  [ findcol::return#0 numpoints#1 ]
    rts
  //SEG153 findcol::@2
  b2:
  //SEG154 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
    jmp b12
  //SEG155 findcol::@12
  b12:
  //SEG156 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
    lda xp
    sec
    sbc x
    sta diff
  //SEG157 [76] phi from findcol::@12 findcol::@4 to findcol::@5
  b5_from_b12:
  b5_from_b4:
  //SEG158 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
    jmp b5
  //SEG159 findcol::@5
  b5:
  //SEG160 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
    jmp b14
  //SEG161 findcol::@14
  b14:
  //SEG162 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
    lda yp
    sec
    sbc y
    sta _12
  //SEG163 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ] -- zpby1=zpby2_plus_zpby3 
    lda diff
    clc
    adc _12
    sta diff_3
  //SEG164 [80] phi from findcol::@14 findcol::@6 to findcol::@7
  b7_from_b14:
  b7_from_b6:
  //SEG165 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
    jmp b7
  //SEG166 findcol::@7
  b7:
  //SEG167 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda diff_6
    cmp mindiff
    bcs b21
    jmp b16
  //SEG168 findcol::@16
  b16:
  //SEG169 [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda COLS,x
    sta mincol
  //SEG170 [83] phi from findcol::@16 findcol::@21 to findcol::@8
  b8_from_b16:
  b8_from_b21:
  //SEG171 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG172 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
    jmp b8
  //SEG173 findcol::@8
  b8:
  //SEG174 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG175 [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- zpby1_lt_zpby2_then_la1 
    lda i
    cmp numpoints
    bcc b19
  //SEG176 [72] phi from findcol::@8 to findcol::@return
  breturn_from_b8:
  //SEG177 [72] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG178 findcol::@19
  b19:
  //SEG179 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ] -- zpby1=zpby2 
    lda mindiff_11
    sta mindiff
  //SEG180 [67] phi from findcol::@19 to findcol::@1
  b1_from_b19:
  //SEG181 [67] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG182 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG183 [67] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG184 findcol::@21
  b21:
  //SEG185 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- zpby1=zpby2 
    lda mindiff
    sta mindiff_14
    jmp b8_from_b21
  //SEG186 findcol::@6
  b6:
  //SEG187 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] -- zpby1=zpby2_minus_zpby3 
    lda y
    sec
    sbc yp
    sta _14
  //SEG188 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ] -- zpby1=zpby2_plus_zpby3 
    lda diff
    clc
    adc _14
    sta diff_2
    jmp b7_from_b6
  //SEG189 findcol::@4
  b4:
  //SEG190 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x
    sec
    sbc xp
    sta diff
    jmp b5_from_b4
}
//SEG191 initscreen
initscreen: {
    .label screen = 11
  //SEG192 [92] phi from initscreen to initscreen::@1
  b1_from_initscreen:
  //SEG193 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG194 [92] phi from initscreen::@1 to initscreen::@1
  b1_from_b1:
  //SEG195 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
    jmp b1
  //SEG196 initscreen::@1
  b1:
  //SEG197 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG198 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG199 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG200 initscreen::@return
  breturn:
  //SEG201 [96] return  [ ]
    rts
}
//SEG202 addpoint
addpoint: {
    .label x = 13
    .label y = 15
    .label c = 16
  //SEG203 [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=zpby2 
    lda x
    ldx numpoints
    sta XPOS,x
  //SEG204 [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=zpby2 
    lda y
    ldx numpoints
    sta YPOS,x
  //SEG205 [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta COLS,x
  //SEG206 [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ] -- zpby1=_inc_zpby1 
    inc numpoints
    jmp breturn
  //SEG207 addpoint::@return
  breturn:
  //SEG208 [102] return  [ numpoints#1 ]
    rts
}

Statement [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ]
Statement [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] always clobbers reg byte a 
Statement [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] always clobbers reg byte a 
Statement [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] always clobbers reg byte a 
Statement [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] always clobbers reg byte a 
Statement [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render::y#2 render::y#1 ]
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte x [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=zpby2_minus_aby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte a [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=zpby2_minus_xby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte x [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=zpby2_minus_yby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte y [ findcol::x#0 ] 
MISSING FRAGMENTS
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
  zpby1=zpby2_minus_aby
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
Statement [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ findcol::x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ findcol::y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:41 [ findcol::yp#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:42 [ findcol::$12 ] reg byte x [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:42 [ findcol::$12 ] reg byte y [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=zpby2_minus_xby allocation: zp ZP_BYTE:42 [ findcol::$12 ] zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte x [ findcol::y#0 ] 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=zpby2_minus_yby allocation: zp ZP_BYTE:42 [ findcol::$12 ] zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte y [ findcol::y#0 ] 
MISSING FRAGMENTS
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
Statement [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Potential register analysis [85] if(findcol::i#1<numpoints#1) goto findcol::@19 missing fragment zpby1_lt_xby_then_la1 allocation: reg byte x [ numpoints#19 numpoints#1 ] zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] 
Potential register analysis [85] if(findcol::i#1<numpoints#1) goto findcol::@19 missing fragment zpby1_lt_yby_then_la1 allocation: reg byte y [ numpoints#19 numpoints#1 ] zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] 
MISSING FRAGMENTS
  zpby1_lt_xby_then_la1
  zpby1_lt_yby_then_la1
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=zpby2_minus_xby allocation: reg byte x [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=zpby2_minus_yby allocation: reg byte y [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte x [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte y [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
MISSING FRAGMENTS
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
Statement [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] always clobbers reg byte a 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=zpby2_minus_aby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte a [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=zpby2_minus_xby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte x [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=zpby2_minus_yby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte x [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte y [ findcol::x#0 ] 
MISSING FRAGMENTS
  zpby1=zpby2_minus_aby
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
Statement [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] always clobbers reg byte a 
Statement [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ]
Statement [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] always clobbers reg byte a 
Statement [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] always clobbers reg byte a 
Statement [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] always clobbers reg byte a 
Statement [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] always clobbers reg byte a 
Statement [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] always clobbers reg byte a 
Statement [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] always clobbers reg byte a 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte x [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=zpby2_minus_xby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte x [ findcol::x#0 ] 
Potential register analysis [75] findcol::diff#1 ← findcol::xp#0 - findcol::x#0 missing fragment zpby1=zpby2_minus_yby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte y [ findcol::x#0 ] 
MISSING FRAGMENTS
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
Statement [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] always clobbers reg byte a 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:42 [ findcol::$12 ] reg byte x [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:42 [ findcol::$12 ] reg byte y [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=zpby2_minus_xby allocation: zp ZP_BYTE:42 [ findcol::$12 ] zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte x [ findcol::y#0 ] 
Potential register analysis [78] findcol::$12 ← findcol::yp#0 - findcol::y#0 missing fragment zpby1=zpby2_minus_yby allocation: zp ZP_BYTE:42 [ findcol::$12 ] zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte y [ findcol::y#0 ] 
MISSING FRAGMENTS
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
Statement [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] always clobbers reg byte a 
Potential register analysis [85] if(findcol::i#1<numpoints#1) goto findcol::@19 missing fragment zpby1_lt_xby_then_la1 allocation: reg byte x [ numpoints#19 numpoints#1 ] zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] 
MISSING FRAGMENTS
  zpby1_lt_xby_then_la1
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=zpby2_minus_xby allocation: reg byte x [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=zpby2_minus_yby allocation: reg byte y [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte x [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
Potential register analysis [88] findcol::$14 ← findcol::y#0 - findcol::yp#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:41 [ findcol::yp#0 ] reg byte y [ findcol::y#0 ] zp ZP_BYTE:43 [ findcol::$14 ] 
MISSING FRAGMENTS
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
Statement [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] always clobbers reg byte a 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=zpby2_minus_aby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte a [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=zpby2_minus_xby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte x [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=zpby2_minus_yby allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::xp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=xby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte x [ findcol::x#0 ] 
Potential register analysis [90] findcol::diff#0 ← findcol::x#0 - findcol::xp#0 missing fragment zpby1=yby_minus_zpby2 allocation: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] zp ZP_BYTE:40 [ findcol::xp#0 ] reg byte y [ findcol::x#0 ] 
MISSING FRAGMENTS
  zpby1=zpby2_minus_aby
  zpby1=zpby2_minus_xby
  zpby1=zpby2_minus_yby
  zpby1=xby_minus_zpby2
  zpby1=yby_minus_zpby2
Statement [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] always clobbers reg byte a 
Statement [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] always clobbers reg byte a reg byte y 
Statement [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] always clobbers reg byte a 
Equivalence Class zp ZP_BYTE:17 [ animate::$0 ] has ALU potential.
Equivalence Class zp ZP_BYTE:20 [ animate::$5 ] has ALU potential.
Equivalence Class zp ZP_BYTE:26 [ animate::$15 ] has ALU potential.
Equivalence Class zp ZP_BYTE:32 [ animate::$25 ] has ALU potential.
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ render::y#2 render::y#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] : zp ZP_PTR_BYTE:3 , 
Potential registers zp ZP_BYTE:5 [ render::x#2 render::x#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] : zp ZP_PTR_BYTE:11 , 
Potential registers zp ZP_BYTE:13 [ addpoint::x#6 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] : zp ZP_BYTE:14 , reg byte x , 
Potential registers zp ZP_BYTE:15 [ addpoint::y#6 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ addpoint::c#6 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ animate::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:18 [ animate::$1 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ animate::$2 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ animate::$5 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:21 [ animate::$6 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ animate::$7 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ animate::$10 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ animate::$11 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ animate::$12 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ animate::$15 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:27 [ animate::$16 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ animate::$17 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ animate::$20 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ animate::$21 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ animate::$22 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ animate::$25 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:33 [ animate::$26 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ animate::$27 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ animate::$30 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ animate::$31 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ findcol::x#0 ] : zp ZP_BYTE:37 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ findcol::y#0 ] : zp ZP_BYTE:38 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ render::col#0 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ findcol::xp#0 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ findcol::yp#0 ] : zp ZP_BYTE:41 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ findcol::$12 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ findcol::$14 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [findcol] 83,341.67: zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] 50,005: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] 34,846.92: zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] 21,877.19: zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 20,002: zp ZP_BYTE:42 [ findcol::$12 ] 20,002: zp ZP_BYTE:43 [ findcol::$14 ] 12,632.84: zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] 10,001: zp ZP_BYTE:40 [ findcol::xp#0 ] 6,250.62: zp ZP_BYTE:41 [ findcol::yp#0 ] 1,708.54: zp ZP_BYTE:38 [ findcol::y#0 ] 1,640.2: zp ZP_BYTE:37 [ findcol::x#0 ] 
Uplift Scope [render] 2,168.83: zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 2,002: zp ZP_BYTE:39 [ render::col#0 ] 271.8: zp ZP_BYTE:2 [ render::y#2 render::y#1 ] 201: zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] 
Uplift Scope [] 204.76: zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] 
Uplift Scope [animate] 4: zp ZP_BYTE:17 [ animate::$0 ] 4: zp ZP_BYTE:18 [ animate::$1 ] 4: zp ZP_BYTE:19 [ animate::$2 ] 4: zp ZP_BYTE:20 [ animate::$5 ] 4: zp ZP_BYTE:21 [ animate::$6 ] 4: zp ZP_BYTE:22 [ animate::$7 ] 4: zp ZP_BYTE:23 [ animate::$10 ] 4: zp ZP_BYTE:24 [ animate::$11 ] 4: zp ZP_BYTE:25 [ animate::$12 ] 4: zp ZP_BYTE:26 [ animate::$15 ] 4: zp ZP_BYTE:27 [ animate::$16 ] 4: zp ZP_BYTE:28 [ animate::$17 ] 4: zp ZP_BYTE:29 [ animate::$20 ] 4: zp ZP_BYTE:30 [ animate::$21 ] 4: zp ZP_BYTE:31 [ animate::$22 ] 4: zp ZP_BYTE:32 [ animate::$25 ] 4: zp ZP_BYTE:33 [ animate::$26 ] 4: zp ZP_BYTE:34 [ animate::$27 ] 4: zp ZP_BYTE:35 [ animate::$30 ] 4: zp ZP_BYTE:36 [ animate::$31 ] 
Uplift Scope [initscreen] 33: zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplift Scope [addpoint] 2: zp ZP_BYTE:13 [ addpoint::x#6 ] 1: zp ZP_BYTE:15 [ addpoint::y#6 ] 0.67: zp ZP_BYTE:16 [ addpoint::c#6 ] 
Uplift Scope [main] 

Uplift attempts [findcol] 10000/559872 (limiting to 10000)
Uplifting [findcol] best 1715225 combination reg byte a [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] reg byte a [ findcol::$12 ] reg byte a [ findcol::$14 ] reg byte x [ findcol::i#12 findcol::i#1 ] zp ZP_BYTE:40 [ findcol::xp#0 ] zp ZP_BYTE:41 [ findcol::yp#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] 
Limited combination testing to 10000 combinations of 559872 possible.
Uplifting [render] best 1711225 combination zp ZP_BYTE:5 [ render::x#2 render::x#1 ] reg byte a [ render::col#0 ] zp ZP_BYTE:2 [ render::y#2 render::y#1 ] zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] 
Uplifting [] best 1711225 combination zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] 
Uplifting [initscreen] best 1711225 combination zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplifting [addpoint] best 1711185 combination reg byte a [ addpoint::x#6 ] reg byte y [ addpoint::y#6 ] zp ZP_BYTE:16 [ addpoint::c#6 ] 
Uplifting [main] best 1711185 combination 
MISSING FRAGMENTS
  zpby1=zpby2_minus_aby
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Uplifting [findcol] best 1711185 combination zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Uplifting [findcol] best 1711185 combination zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ findcol::xp#0 ]
Uplifting [findcol] best 1711185 combination zp ZP_BYTE:40 [ findcol::xp#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ findcol::yp#0 ]
Uplifting [findcol] best 1711185 combination zp ZP_BYTE:41 [ findcol::yp#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Uplifting [render] best 1711185 combination zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ findcol::y#0 ]
Uplifting [findcol] best 1711185 combination zp ZP_BYTE:38 [ findcol::y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ findcol::x#0 ]
Uplifting [findcol] best 1711185 combination zp ZP_BYTE:37 [ findcol::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ render::y#2 render::y#1 ]
Uplifting [render] best 1711185 combination zp ZP_BYTE:2 [ render::y#2 render::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ numpoints#19 numpoints#1 ]
Uplifting [] best 1711185 combination zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ animate::$0 ]
Uplifting [animate] best 1711179 combination reg byte a [ animate::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ animate::$1 ]
Uplifting [animate] best 1711173 combination reg byte a [ animate::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ animate::$2 ]
Uplifting [animate] best 1711167 combination reg byte a [ animate::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ animate::$5 ]
Uplifting [animate] best 1711161 combination reg byte a [ animate::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ animate::$6 ]
Uplifting [animate] best 1711155 combination reg byte a [ animate::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ animate::$7 ]
Uplifting [animate] best 1711149 combination reg byte a [ animate::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ animate::$10 ]
Uplifting [animate] best 1711143 combination reg byte x [ animate::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ animate::$11 ]
Uplifting [animate] best 1711135 combination reg byte x [ animate::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ animate::$12 ]
Uplifting [animate] best 1711129 combination reg byte a [ animate::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ animate::$15 ]
Uplifting [animate] best 1711123 combination reg byte a [ animate::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ animate::$16 ]
Uplifting [animate] best 1711117 combination reg byte a [ animate::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ animate::$17 ]
Uplifting [animate] best 1711111 combination reg byte a [ animate::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ animate::$20 ]
Uplifting [animate] best 1711105 combination reg byte x [ animate::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ animate::$21 ]
Uplifting [animate] best 1711097 combination reg byte x [ animate::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ animate::$22 ]
Uplifting [animate] best 1711091 combination reg byte a [ animate::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ animate::$25 ]
Uplifting [animate] best 1711085 combination reg byte a [ animate::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ animate::$26 ]
Uplifting [animate] best 1711079 combination reg byte a [ animate::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ animate::$27 ]
Uplifting [animate] best 1711073 combination reg byte a [ animate::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ animate::$30 ]
Uplifting [animate] best 1711067 combination reg byte a [ animate::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ animate::$31 ]
Uplifting [animate] best 1711061 combination reg byte a [ animate::$31 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ addpoint::c#6 ]
Uplifting [addpoint] best 1711061 combination zp ZP_BYTE:16 [ addpoint::c#6 ] 
MISSING FRAGMENTS
  zpby1=zpby2_minus_aby
Coalescing zero page register [ zp ZP_BYTE:2 [ render::y#2 render::y#1 ] ] with [ zp ZP_BYTE:16 [ addpoint::c#6 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] ] with [ zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] ] with [ zp ZP_BYTE:40 [ findcol::xp#0 ] ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:7 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 findcol::xp#0 ]
Allocated (was zp ZP_BYTE:14) zp ZP_BYTE:8 [ numpoints#19 numpoints#1 ]
Allocated (was zp ZP_BYTE:37) zp ZP_BYTE:9 [ findcol::x#0 ]
Allocated (was zp ZP_BYTE:38) zp ZP_BYTE:10 [ findcol::y#0 ]
Allocated (was zp ZP_BYTE:41) zp ZP_BYTE:11 [ findcol::yp#0 ]
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b3
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b12
Removing instruction jmp b5
Removing instruction jmp b14
Removing instruction jmp b7
Removing instruction jmp b16
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const XPOS = $1000
  .const YPOS = $1100
  .const COLS = $1200
  .label numpoints = 8
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main
main_from_bbegin:
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] call addpoint param-assignment [ ]
  //SEG7 [97] phi from main to addpoint
  addpoint_from_main:
  //SEG8 [97] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #1
    sta addpoint.c
  //SEG9 [97] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #5
  //SEG10 [97] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta numpoints
  //SEG11 [97] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #5
    jsr addpoint
  //SEG12 main::@3
  b3:
  //SEG13 [3] call addpoint param-assignment [ numpoints#1 ]
  //SEG14 [97] phi from main::@3 to addpoint
  addpoint_from_b3:
  //SEG15 [97] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.c
  //SEG16 [97] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #8
  //SEG17 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG18 [97] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG19 main::@4
  b4:
  //SEG20 [4] call addpoint param-assignment [ numpoints#1 ]
  //SEG21 [97] phi from main::@4 to addpoint
  addpoint_from_b4:
  //SEG22 [97] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #3
    sta addpoint.c
  //SEG23 [97] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG24 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG25 [97] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #6
    jsr addpoint
  //SEG26 main::@5
  b5:
  //SEG27 [5] call addpoint param-assignment [ numpoints#1 ]
  //SEG28 [97] phi from main::@5 to addpoint
  addpoint_from_b5:
  //SEG29 [97] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #4
    sta addpoint.c
  //SEG30 [97] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #2
  //SEG31 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG32 [97] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG33 main::@6
  b6:
  //SEG34 [6] call addpoint param-assignment [ numpoints#1 ]
  //SEG35 [97] phi from main::@6 to addpoint
  addpoint_from_b6:
  //SEG36 [97] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.c
  //SEG37 [97] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG38 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG39 [97] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG40 main::@7
  b7:
  //SEG41 [7] call addpoint param-assignment [ numpoints#1 ]
  //SEG42 [97] phi from main::@7 to addpoint
  addpoint_from_b7:
  //SEG43 [97] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #7
    sta addpoint.c
  //SEG44 [97] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG45 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG46 [97] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG47 main::@8
  b8:
  //SEG48 [8] call initscreen param-assignment [ numpoints#1 ]
  //SEG49 [91] phi from main::@8 to initscreen
  initscreen_from_b8:
    jsr initscreen
  //SEG50 main::@1
  b1:
  //SEG51 [9] call render param-assignment [ numpoints#1 ]
  //SEG52 [52] phi from main::@1 to render
  render_from_b1:
    jsr render
  //SEG53 main::@10
  b10:
  //SEG54 [10] call animate param-assignment [ numpoints#1 ]
    jsr animate
  //SEG55 main::@11
  b11:
  //SEG56 [11] if(true) goto main::@1 [ numpoints#1 ] -- true_then_la1 
    jmp b1
  //SEG57 main::@return
  breturn:
  //SEG58 [12] return  [ ]
    rts
}
//SEG59 animate
animate: {
  //SEG60 [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG61 [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG62 [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta XPOS+0
  //SEG63 [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG64 [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG65 animate::@7
  b7:
  //SEG66 [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG67 animate::@1
  b1:
  //SEG68 [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG69 [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG70 [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta YPOS+0
  //SEG71 [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG72 [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG73 animate::@8
  b8:
  //SEG74 [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG75 animate::@2
  b2:
  //SEG76 [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ] -- xby=_star_cowo1 
    ldx XPOS+1
  //SEG77 [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG78 [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx XPOS+1
  //SEG79 [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ] -- aby=_star_cowo1 
    lda XPOS+1
  //SEG80 [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG81 animate::@9
  b9:
  //SEG82 [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG83 animate::@3
  b3:
  //SEG84 [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG85 [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG86 [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta YPOS+2
  //SEG87 [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG88 [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG89 animate::@10
  b10:
  //SEG90 [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG91 animate::@4
  b4:
  //SEG92 [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ] -- xby=_star_cowo1 
    ldx YPOS+3
  //SEG93 [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG94 [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx YPOS+3
  //SEG95 [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ] -- aby=_star_cowo1 
    lda YPOS+3
  //SEG96 [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG97 animate::@11
  b11:
  //SEG98 [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG99 [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG100 [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG101 [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG102 [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG103 [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG104 animate::@12
  b12:
  //SEG105 [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG106 [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG107 [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG108 animate::@return
  breturn:
  //SEG109 [51] return  [ ]
    rts
}
//SEG110 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG111 [53] phi from render to render::@1
  b1_from_render:
  //SEG112 [53] phi (byte*) render::colline#2 = (const byte*) COLORS#0 -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG113 [53] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG114 [53] phi from render::@3 to render::@1
  b1_from_b3:
  //SEG115 [53] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG116 [53] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG117 render::@1
  b1:
  //SEG118 [54] phi from render::@1 to render::@2
  b2_from_b1:
  //SEG119 [54] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG120 [54] phi from render::@5 to render::@2
  b2_from_b5:
  //SEG121 [54] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG122 render::@2
  b2:
  //SEG123 [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG124 [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG125 [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  //SEG126 [66] phi from render::@2 to findcol
  findcol_from_b2:
    jsr findcol
  //SEG127 render::@5
  b5:
  //SEG128 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ] -- aby=yby 
    tya
  //SEG129 [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG130 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG131 [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
  //SEG132 render::@3
  b3:
  //SEG133 [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG134 [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG135 [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
  //SEG136 render::@return
  breturn:
  //SEG137 [65] return  [ numpoints#1 ]
    rts
}
//SEG138 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG139 [67] phi from findcol to findcol::@1
  b1_from_findcol:
  //SEG140 [67] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG141 [67] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG142 [67] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #0
  //SEG143 findcol::@1
  b1:
  //SEG144 [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda XPOS,x
    sta xp
  //SEG145 [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda YPOS,x
    sta yp
  //SEG146 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG147 findcol::@9
  b9:
  //SEG148 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG149 [72] phi from findcol::@9 to findcol::@return
  breturn_from_b9:
  //SEG150 [72] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG151 findcol::@return
  breturn:
  //SEG152 [73] return  [ findcol::return#0 numpoints#1 ]
    rts
  //SEG153 findcol::@2
  b2:
  //SEG154 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG155 findcol::@12
  b12:
  //SEG156 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG157 [76] phi from findcol::@12 findcol::@4 to findcol::@5
  b5_from_b12:
  b5_from_b4:
  //SEG158 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG159 findcol::@5
  b5:
  //SEG160 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG161 findcol::@14
  b14:
  //SEG162 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG163 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG164 [80] phi from findcol::@14 findcol::@6 to findcol::@7
  b7_from_b14:
  b7_from_b6:
  //SEG165 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG166 findcol::@7
  b7:
  //SEG167 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG168 findcol::@16
  b16:
  //SEG169 [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy COLS,x
  //SEG170 [83] phi from findcol::@16 findcol::@21 to findcol::@8
  b8_from_b16:
  b8_from_b21:
  //SEG171 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG172 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG173 findcol::@8
  b8:
  //SEG174 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby=_inc_xby 
    inx
  //SEG175 [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG176 [72] phi from findcol::@8 to findcol::@return
  breturn_from_b8:
  //SEG177 [72] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG178 findcol::@19
  b19:
  //SEG179 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG180 [67] phi from findcol::@19 to findcol::@1
  b1_from_b19:
  //SEG181 [67] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG182 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG183 [67] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG184 findcol::@21
  b21:
  //SEG185 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
    jmp b8_from_b21
  //SEG186 findcol::@6
  b6:
  //SEG187 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG188 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7_from_b6
  //SEG189 findcol::@4
  b4:
  //SEG190 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5_from_b4
}
//SEG191 initscreen
initscreen: {
    .label screen = 3
  //SEG192 [92] phi from initscreen to initscreen::@1
  b1_from_initscreen:
  //SEG193 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG194 [92] phi from initscreen::@1 to initscreen::@1
  b1_from_b1:
  //SEG195 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG196 initscreen::@1
  b1:
  //SEG197 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG198 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG199 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
  //SEG200 initscreen::@return
  breturn:
  //SEG201 [96] return  [ ]
    rts
}
//SEG202 addpoint
addpoint: {
    .label c = 2
  //SEG203 [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta XPOS,x
  //SEG204 [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta YPOS,y
  //SEG205 [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta COLS,x
  //SEG206 [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG207 addpoint::@return
  breturn:
  //SEG208 [102] return  [ numpoints#1 ]
    rts
}

Replacing label b2_from_b5 with b2
Replacing label b1_from_b3 with b1
Replacing label b8_from_b21 with b8
Replacing label b7_from_b6 with b7
Replacing label b5_from_b4 with b5
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction main_from_bbegin:
Removing instruction addpoint_from_b3:
Removing instruction addpoint_from_b4:
Removing instruction addpoint_from_b5:
Removing instruction addpoint_from_b6:
Removing instruction addpoint_from_b7:
Removing instruction initscreen_from_b8:
Removing instruction render_from_b1:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b5_from_b12:
Removing instruction b5_from_b4:
Removing instruction b7_from_b14:
Removing instruction b7_from_b6:
Removing instruction b8_from_b16:
Removing instruction b8_from_b21:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const XPOS = $1000
  .const YPOS = $1100
  .const COLS = $1200
  .label numpoints = 8
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] call addpoint param-assignment [ ]
  //SEG7 [97] phi from main to addpoint
  addpoint_from_main:
  //SEG8 [97] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #1
    sta addpoint.c
  //SEG9 [97] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #5
  //SEG10 [97] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta numpoints
  //SEG11 [97] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #5
    jsr addpoint
  //SEG12 main::@3
  b3:
  //SEG13 [3] call addpoint param-assignment [ numpoints#1 ]
  //SEG14 [97] phi from main::@3 to addpoint
  //SEG15 [97] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.c
  //SEG16 [97] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #8
  //SEG17 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG18 [97] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG19 main::@4
  b4:
  //SEG20 [4] call addpoint param-assignment [ numpoints#1 ]
  //SEG21 [97] phi from main::@4 to addpoint
  //SEG22 [97] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #3
    sta addpoint.c
  //SEG23 [97] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG24 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG25 [97] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #6
    jsr addpoint
  //SEG26 main::@5
  b5:
  //SEG27 [5] call addpoint param-assignment [ numpoints#1 ]
  //SEG28 [97] phi from main::@5 to addpoint
  //SEG29 [97] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #4
    sta addpoint.c
  //SEG30 [97] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #2
  //SEG31 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG32 [97] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG33 main::@6
  b6:
  //SEG34 [6] call addpoint param-assignment [ numpoints#1 ]
  //SEG35 [97] phi from main::@6 to addpoint
  //SEG36 [97] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.c
  //SEG37 [97] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG38 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG39 [97] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG40 main::@7
  b7:
  //SEG41 [7] call addpoint param-assignment [ numpoints#1 ]
  //SEG42 [97] phi from main::@7 to addpoint
  //SEG43 [97] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #7
    sta addpoint.c
  //SEG44 [97] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG45 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG46 [97] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG47 main::@8
  b8:
  //SEG48 [8] call initscreen param-assignment [ numpoints#1 ]
  //SEG49 [91] phi from main::@8 to initscreen
    jsr initscreen
  //SEG50 main::@1
  b1:
  //SEG51 [9] call render param-assignment [ numpoints#1 ]
  //SEG52 [52] phi from main::@1 to render
    jsr render
  //SEG53 main::@10
  b10:
  //SEG54 [10] call animate param-assignment [ numpoints#1 ]
    jsr animate
  //SEG55 main::@11
  b11:
  //SEG56 [11] if(true) goto main::@1 [ numpoints#1 ] -- true_then_la1 
    jmp b1
  //SEG57 main::@return
  breturn:
  //SEG58 [12] return  [ ]
    rts
}
//SEG59 animate
animate: {
  //SEG60 [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG61 [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG62 [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta XPOS+0
  //SEG63 [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG64 [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG65 animate::@7
  b7:
  //SEG66 [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG67 animate::@1
  b1:
  //SEG68 [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG69 [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG70 [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta YPOS+0
  //SEG71 [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG72 [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG73 animate::@8
  b8:
  //SEG74 [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG75 animate::@2
  b2:
  //SEG76 [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ] -- xby=_star_cowo1 
    ldx XPOS+1
  //SEG77 [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG78 [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx XPOS+1
  //SEG79 [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ] -- aby=_star_cowo1 
    lda XPOS+1
  //SEG80 [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG81 animate::@9
  b9:
  //SEG82 [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG83 animate::@3
  b3:
  //SEG84 [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG85 [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG86 [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta YPOS+2
  //SEG87 [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG88 [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG89 animate::@10
  b10:
  //SEG90 [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG91 animate::@4
  b4:
  //SEG92 [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ] -- xby=_star_cowo1 
    ldx YPOS+3
  //SEG93 [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG94 [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx YPOS+3
  //SEG95 [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ] -- aby=_star_cowo1 
    lda YPOS+3
  //SEG96 [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG97 animate::@11
  b11:
  //SEG98 [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG99 [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG100 [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG101 [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG102 [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG103 [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG104 animate::@12
  b12:
  //SEG105 [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG106 [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG107 [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG108 animate::@return
  breturn:
  //SEG109 [51] return  [ ]
    rts
}
//SEG110 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG111 [53] phi from render to render::@1
  b1_from_render:
  //SEG112 [53] phi (byte*) render::colline#2 = (const byte*) COLORS#0 -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG113 [53] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG114 [53] phi from render::@3 to render::@1
  //SEG115 [53] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG116 [53] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG117 render::@1
  b1:
  //SEG118 [54] phi from render::@1 to render::@2
  //SEG119 [54] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG120 [54] phi from render::@5 to render::@2
  //SEG121 [54] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG122 render::@2
  b2:
  //SEG123 [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG124 [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG125 [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  //SEG126 [66] phi from render::@2 to findcol
  findcol_from_b2:
    jsr findcol
  //SEG127 render::@5
  b5:
  //SEG128 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ] -- aby=yby 
    tya
  //SEG129 [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG130 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG131 [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG132 render::@3
  b3:
  //SEG133 [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG134 [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG135 [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG136 render::@return
  breturn:
  //SEG137 [65] return  [ numpoints#1 ]
    rts
}
//SEG138 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG139 [67] phi from findcol to findcol::@1
  b1_from_findcol:
  //SEG140 [67] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG141 [67] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG142 [67] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #0
  //SEG143 findcol::@1
  b1:
  //SEG144 [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda XPOS,x
    sta xp
  //SEG145 [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda YPOS,x
    sta yp
  //SEG146 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG147 findcol::@9
  b9:
  //SEG148 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG149 [72] phi from findcol::@9 to findcol::@return
  breturn_from_b9:
  //SEG150 [72] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG151 findcol::@return
  breturn:
  //SEG152 [73] return  [ findcol::return#0 numpoints#1 ]
    rts
  //SEG153 findcol::@2
  b2:
  //SEG154 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG155 findcol::@12
  b12:
  //SEG156 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG157 [76] phi from findcol::@12 findcol::@4 to findcol::@5
  //SEG158 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG159 findcol::@5
  b5:
  //SEG160 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG161 findcol::@14
  b14:
  //SEG162 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG163 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG164 [80] phi from findcol::@14 findcol::@6 to findcol::@7
  //SEG165 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG166 findcol::@7
  b7:
  //SEG167 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG168 findcol::@16
  b16:
  //SEG169 [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy COLS,x
  //SEG170 [83] phi from findcol::@16 findcol::@21 to findcol::@8
  //SEG171 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG172 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG173 findcol::@8
  b8:
  //SEG174 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby=_inc_xby 
    inx
  //SEG175 [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG176 [72] phi from findcol::@8 to findcol::@return
  breturn_from_b8:
  //SEG177 [72] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG178 findcol::@19
  b19:
  //SEG179 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG180 [67] phi from findcol::@19 to findcol::@1
  b1_from_b19:
  //SEG181 [67] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG182 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG183 [67] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG184 findcol::@21
  b21:
  //SEG185 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG186 findcol::@6
  b6:
  //SEG187 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG188 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG189 findcol::@4
  b4:
  //SEG190 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG191 initscreen
initscreen: {
    .label screen = 3
  //SEG192 [92] phi from initscreen to initscreen::@1
  b1_from_initscreen:
  //SEG193 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG194 [92] phi from initscreen::@1 to initscreen::@1
  //SEG195 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG196 initscreen::@1
  b1:
  //SEG197 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG198 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG199 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG200 initscreen::@return
  breturn:
  //SEG201 [96] return  [ ]
    rts
}
//SEG202 addpoint
addpoint: {
    .label c = 2
  //SEG203 [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta XPOS,x
  //SEG204 [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta YPOS,y
  //SEG205 [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta COLS,x
  //SEG206 [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG207 addpoint::@return
  breturn:
  //SEG208 [102] return  [ numpoints#1 ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction addpoint_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_render:
Removing instruction findcol_from_b2:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_findcol:
Removing instruction b9:
Removing instruction breturn_from_b9:
Removing instruction b12:
Removing instruction b14:
Removing instruction b16:
Removing instruction breturn_from_b8:
Removing instruction b1_from_b19:
Removing instruction b1_from_initscreen:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const XPOS = $1000
  .const YPOS = $1100
  .const COLS = $1200
  .label numpoints = 8
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] call addpoint param-assignment [ ]
  //SEG7 [97] phi from main to addpoint
  //SEG8 [97] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #1
    sta addpoint.c
  //SEG9 [97] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #5
  //SEG10 [97] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta numpoints
  //SEG11 [97] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #5
    jsr addpoint
  //SEG12 main::@3
  //SEG13 [3] call addpoint param-assignment [ numpoints#1 ]
  //SEG14 [97] phi from main::@3 to addpoint
  //SEG15 [97] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.c
  //SEG16 [97] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #8
  //SEG17 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG18 [97] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG19 main::@4
  //SEG20 [4] call addpoint param-assignment [ numpoints#1 ]
  //SEG21 [97] phi from main::@4 to addpoint
  //SEG22 [97] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #3
    sta addpoint.c
  //SEG23 [97] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG24 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG25 [97] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #6
    jsr addpoint
  //SEG26 main::@5
  //SEG27 [5] call addpoint param-assignment [ numpoints#1 ]
  //SEG28 [97] phi from main::@5 to addpoint
  //SEG29 [97] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #4
    sta addpoint.c
  //SEG30 [97] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #2
  //SEG31 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG32 [97] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG33 main::@6
  //SEG34 [6] call addpoint param-assignment [ numpoints#1 ]
  //SEG35 [97] phi from main::@6 to addpoint
  //SEG36 [97] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.c
  //SEG37 [97] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG38 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG39 [97] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG40 main::@7
  //SEG41 [7] call addpoint param-assignment [ numpoints#1 ]
  //SEG42 [97] phi from main::@7 to addpoint
  //SEG43 [97] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #7
    sta addpoint.c
  //SEG44 [97] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG45 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG46 [97] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG47 main::@8
  //SEG48 [8] call initscreen param-assignment [ numpoints#1 ]
  //SEG49 [91] phi from main::@8 to initscreen
    jsr initscreen
  //SEG50 main::@1
  b1:
  //SEG51 [9] call render param-assignment [ numpoints#1 ]
  //SEG52 [52] phi from main::@1 to render
    jsr render
  //SEG53 main::@10
  //SEG54 [10] call animate param-assignment [ numpoints#1 ]
    jsr animate
  //SEG55 main::@11
  //SEG56 [11] if(true) goto main::@1 [ numpoints#1 ] -- true_then_la1 
    jmp b1
  //SEG57 main::@return
  //SEG58 [12] return  [ ]
    rts
}
//SEG59 animate
animate: {
  //SEG60 [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG61 [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG62 [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta XPOS+0
  //SEG63 [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG64 [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG65 animate::@7
  //SEG66 [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG67 animate::@1
  b1:
  //SEG68 [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG69 [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG70 [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta YPOS+0
  //SEG71 [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG72 [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG73 animate::@8
  //SEG74 [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG75 animate::@2
  b2:
  //SEG76 [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ] -- xby=_star_cowo1 
    ldx XPOS+1
  //SEG77 [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG78 [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx XPOS+1
  //SEG79 [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ] -- aby=_star_cowo1 
    lda XPOS+1
  //SEG80 [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG81 animate::@9
  //SEG82 [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG83 animate::@3
  b3:
  //SEG84 [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG85 [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG86 [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta YPOS+2
  //SEG87 [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG88 [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG89 animate::@10
  //SEG90 [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG91 animate::@4
  b4:
  //SEG92 [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ] -- xby=_star_cowo1 
    ldx YPOS+3
  //SEG93 [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG94 [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx YPOS+3
  //SEG95 [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ] -- aby=_star_cowo1 
    lda YPOS+3
  //SEG96 [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG97 animate::@11
  //SEG98 [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG99 [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG100 [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG101 [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG102 [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG103 [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG104 animate::@12
  //SEG105 [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG106 [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG107 [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG108 animate::@return
  breturn:
  //SEG109 [51] return  [ ]
    rts
}
//SEG110 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG111 [53] phi from render to render::@1
  //SEG112 [53] phi (byte*) render::colline#2 = (const byte*) COLORS#0 -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG113 [53] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta y
    jmp b1
  //SEG114 [53] phi from render::@3 to render::@1
  //SEG115 [53] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG116 [53] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG117 render::@1
  b1:
  //SEG118 [54] phi from render::@1 to render::@2
  //SEG119 [54] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG120 [54] phi from render::@5 to render::@2
  //SEG121 [54] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG122 render::@2
  b2:
  //SEG123 [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG124 [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG125 [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  //SEG126 [66] phi from render::@2 to findcol
    jsr findcol
  //SEG127 render::@5
  //SEG128 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ] -- aby=yby 
    tya
  //SEG129 [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG130 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG131 [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG132 render::@3
  //SEG133 [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG134 [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG135 [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG136 render::@return
  //SEG137 [65] return  [ numpoints#1 ]
    rts
}
//SEG138 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG139 [67] phi from findcol to findcol::@1
  //SEG140 [67] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG141 [67] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG142 [67] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #0
  //SEG143 findcol::@1
  b1:
  //SEG144 [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda XPOS,x
    sta xp
  //SEG145 [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda YPOS,x
    sta yp
  //SEG146 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG147 findcol::@9
  //SEG148 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG149 [72] phi from findcol::@9 to findcol::@return
  //SEG150 [72] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG151 findcol::@return
  breturn:
  //SEG152 [73] return  [ findcol::return#0 numpoints#1 ]
    rts
  //SEG153 findcol::@2
  b2:
  //SEG154 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG155 findcol::@12
  //SEG156 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG157 [76] phi from findcol::@12 findcol::@4 to findcol::@5
  //SEG158 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG159 findcol::@5
  b5:
  //SEG160 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG161 findcol::@14
  //SEG162 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG163 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG164 [80] phi from findcol::@14 findcol::@6 to findcol::@7
  //SEG165 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG166 findcol::@7
  b7:
  //SEG167 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG168 findcol::@16
  //SEG169 [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy COLS,x
  //SEG170 [83] phi from findcol::@16 findcol::@21 to findcol::@8
  //SEG171 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG172 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG173 findcol::@8
  b8:
  //SEG174 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby=_inc_xby 
    inx
  //SEG175 [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG176 [72] phi from findcol::@8 to findcol::@return
  //SEG177 [72] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG178 findcol::@19
  b19:
  //SEG179 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG180 [67] phi from findcol::@19 to findcol::@1
  //SEG181 [67] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG182 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG183 [67] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG184 findcol::@21
  b21:
  //SEG185 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG186 findcol::@6
  b6:
  //SEG187 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG188 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG189 findcol::@4
  b4:
  //SEG190 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG191 initscreen
initscreen: {
    .label screen = 3
  //SEG192 [92] phi from initscreen to initscreen::@1
  //SEG193 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
    jmp b1
  //SEG194 [92] phi from initscreen::@1 to initscreen::@1
  //SEG195 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG196 initscreen::@1
  b1:
  //SEG197 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG198 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG199 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG200 initscreen::@return
  //SEG201 [96] return  [ ]
    rts
}
//SEG202 addpoint
addpoint: {
    .label c = 2
  //SEG203 [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta XPOS,x
  //SEG204 [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta YPOS,y
  //SEG205 [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta COLS,x
  //SEG206 [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG207 addpoint::@return
  //SEG208 [102] return  [ numpoints#1 ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const XPOS = $1000
  .const YPOS = $1100
  .const COLS = $1200
  .label numpoints = 8
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] call addpoint param-assignment [ ]
  //SEG7 [97] phi from main to addpoint
  //SEG8 [97] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #1
    sta addpoint.c
  //SEG9 [97] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #5
  //SEG10 [97] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta numpoints
  //SEG11 [97] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #5
    jsr addpoint
  //SEG12 main::@3
  //SEG13 [3] call addpoint param-assignment [ numpoints#1 ]
  //SEG14 [97] phi from main::@3 to addpoint
  //SEG15 [97] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.c
  //SEG16 [97] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #8
  //SEG17 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG18 [97] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG19 main::@4
  //SEG20 [4] call addpoint param-assignment [ numpoints#1 ]
  //SEG21 [97] phi from main::@4 to addpoint
  //SEG22 [97] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #3
    sta addpoint.c
  //SEG23 [97] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG24 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG25 [97] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #6
    jsr addpoint
  //SEG26 main::@5
  //SEG27 [5] call addpoint param-assignment [ numpoints#1 ]
  //SEG28 [97] phi from main::@5 to addpoint
  //SEG29 [97] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #4
    sta addpoint.c
  //SEG30 [97] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #2
  //SEG31 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG32 [97] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG33 main::@6
  //SEG34 [6] call addpoint param-assignment [ numpoints#1 ]
  //SEG35 [97] phi from main::@6 to addpoint
  //SEG36 [97] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.c
  //SEG37 [97] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG38 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG39 [97] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG40 main::@7
  //SEG41 [7] call addpoint param-assignment [ numpoints#1 ]
  //SEG42 [97] phi from main::@7 to addpoint
  //SEG43 [97] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #7
    sta addpoint.c
  //SEG44 [97] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG45 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG46 [97] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG47 main::@8
  //SEG48 [8] call initscreen param-assignment [ numpoints#1 ]
  //SEG49 [91] phi from main::@8 to initscreen
    jsr initscreen
  //SEG50 main::@1
  b1:
  //SEG51 [9] call render param-assignment [ numpoints#1 ]
  //SEG52 [52] phi from main::@1 to render
    jsr render
  //SEG53 main::@10
  //SEG54 [10] call animate param-assignment [ numpoints#1 ]
    jsr animate
  //SEG55 main::@11
  //SEG56 [11] if(true) goto main::@1 [ numpoints#1 ] -- true_then_la1 
    jmp b1
  //SEG57 main::@return
  //SEG58 [12] return  [ ]
    rts
}
//SEG59 animate
animate: {
  //SEG60 [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG61 [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG62 [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta XPOS+0
  //SEG63 [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG64 [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG65 animate::@7
  //SEG66 [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG67 animate::@1
  b1:
  //SEG68 [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG69 [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG70 [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta YPOS+0
  //SEG71 [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG72 [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG73 animate::@8
  //SEG74 [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG75 animate::@2
  b2:
  //SEG76 [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ] -- xby=_star_cowo1 
    ldx XPOS+1
  //SEG77 [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG78 [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx XPOS+1
  //SEG79 [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ] -- aby=_star_cowo1 
    lda XPOS+1
  //SEG80 [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG81 animate::@9
  //SEG82 [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG83 animate::@3
  b3:
  //SEG84 [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG85 [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG86 [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta YPOS+2
  //SEG87 [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG88 [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG89 animate::@10
  //SEG90 [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG91 animate::@4
  b4:
  //SEG92 [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ] -- xby=_star_cowo1 
    ldx YPOS+3
  //SEG93 [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG94 [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx YPOS+3
  //SEG95 [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ] -- aby=_star_cowo1 
    lda YPOS+3
  //SEG96 [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG97 animate::@11
  //SEG98 [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG99 [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG100 [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG101 [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG102 [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG103 [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG104 animate::@12
  //SEG105 [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG106 [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG107 [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG108 animate::@return
  breturn:
  //SEG109 [51] return  [ ]
    rts
}
//SEG110 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG111 [53] phi from render to render::@1
  //SEG112 [53] phi (byte*) render::colline#2 = (const byte*) COLORS#0 -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG113 [53] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta y
  //SEG114 [53] phi from render::@3 to render::@1
  //SEG115 [53] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG116 [53] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG117 render::@1
  b1:
  //SEG118 [54] phi from render::@1 to render::@2
  //SEG119 [54] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta x
  //SEG120 [54] phi from render::@5 to render::@2
  //SEG121 [54] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG122 render::@2
  b2:
  //SEG123 [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG124 [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG125 [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  //SEG126 [66] phi from render::@2 to findcol
    jsr findcol
  //SEG127 render::@5
  //SEG128 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ] -- aby=yby 
    tya
  //SEG129 [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG130 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG131 [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG132 render::@3
  //SEG133 [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG134 [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG135 [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG136 render::@return
  //SEG137 [65] return  [ numpoints#1 ]
    rts
}
//SEG138 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG139 [67] phi from findcol to findcol::@1
  //SEG140 [67] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG141 [67] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG142 [67] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #0
  //SEG143 findcol::@1
  b1:
  //SEG144 [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda XPOS,x
    sta xp
  //SEG145 [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda YPOS,x
    sta yp
  //SEG146 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG147 findcol::@9
  //SEG148 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG149 [72] phi from findcol::@9 to findcol::@return
  //SEG150 [72] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG151 findcol::@return
  breturn:
  //SEG152 [73] return  [ findcol::return#0 numpoints#1 ]
    rts
  //SEG153 findcol::@2
  b2:
  //SEG154 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG155 findcol::@12
  //SEG156 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG157 [76] phi from findcol::@12 findcol::@4 to findcol::@5
  //SEG158 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG159 findcol::@5
  b5:
  //SEG160 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG161 findcol::@14
  //SEG162 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG163 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG164 [80] phi from findcol::@14 findcol::@6 to findcol::@7
  //SEG165 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG166 findcol::@7
  b7:
  //SEG167 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG168 findcol::@16
  //SEG169 [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy COLS,x
  //SEG170 [83] phi from findcol::@16 findcol::@21 to findcol::@8
  //SEG171 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG172 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG173 findcol::@8
  b8:
  //SEG174 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby=_inc_xby 
    inx
  //SEG175 [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG176 [72] phi from findcol::@8 to findcol::@return
  //SEG177 [72] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG178 findcol::@19
  b19:
  //SEG179 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG180 [67] phi from findcol::@19 to findcol::@1
  //SEG181 [67] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG182 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG183 [67] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG184 findcol::@21
  b21:
  //SEG185 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG186 findcol::@6
  b6:
  //SEG187 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG188 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG189 findcol::@4
  b4:
  //SEG190 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG191 initscreen
initscreen: {
    .label screen = 3
  //SEG192 [92] phi from initscreen to initscreen::@1
  //SEG193 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG194 [92] phi from initscreen::@1 to initscreen::@1
  //SEG195 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG196 initscreen::@1
  b1:
  //SEG197 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG198 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG199 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG200 initscreen::@return
  //SEG201 [96] return  [ ]
    rts
}
//SEG202 addpoint
addpoint: {
    .label c = 2
  //SEG203 [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta XPOS,x
  //SEG204 [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta YPOS,y
  //SEG205 [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta COLS,x
  //SEG206 [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG207 addpoint::@return
  //SEG208 [102] return  [ numpoints#1 ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) COLORS
(const byte*) COLORS#0 = (word) 55296
(byte[256]) COLS
(const byte[256]) COLS#0 = (word) 4608
(byte) FILL
(const byte) FILL#0 = (byte) 230
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(byte[256]) XPOS
(const byte[256]) XPOS#0 = (word) 4096
(byte[256]) YPOS
(const byte[256]) YPOS#0 = (word) 4352
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#6 c zp ZP_BYTE:2 0.6666666666666666
(byte) addpoint::x
(byte) addpoint::x#6 reg byte a 2.0
(byte) addpoint::y
(byte) addpoint::y#6 reg byte y 1.0
(void()) animate()
(byte~) animate::$0 reg byte a 4.0
(byte~) animate::$1 reg byte a 4.0
(byte~) animate::$10 reg byte x 4.0
(byte~) animate::$11 reg byte x 4.0
(byte~) animate::$12 reg byte a 4.0
(byte~) animate::$15 reg byte a 4.0
(byte~) animate::$16 reg byte a 4.0
(byte~) animate::$17 reg byte a 4.0
(byte~) animate::$2 reg byte a 4.0
(byte~) animate::$20 reg byte x 4.0
(byte~) animate::$21 reg byte x 4.0
(byte~) animate::$22 reg byte a 4.0
(byte~) animate::$25 reg byte a 4.0
(byte~) animate::$26 reg byte a 4.0
(byte~) animate::$27 reg byte a 4.0
(byte~) animate::$30 reg byte a 4.0
(byte~) animate::$31 reg byte a 4.0
(byte~) animate::$5 reg byte a 4.0
(byte~) animate::$6 reg byte a 4.0
(byte~) animate::$7 reg byte a 4.0
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12 reg byte a 20002.0
(byte~) findcol::$14 reg byte a 20002.0
(label) findcol::@1
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@19
(label) findcol::@2
(label) findcol::@21
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0 diff zp ZP_BYTE:7 20002.0
(byte) findcol::diff#1 diff zp ZP_BYTE:7 20002.0
(byte) findcol::diff#2 reg byte a 20002.0
(byte) findcol::diff#3 reg byte a 20002.0
(byte) findcol::diff#4 diff zp ZP_BYTE:7 10001.0
(byte) findcol::diff#6 reg byte a 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 reg byte x 10001.0
(byte) findcol::i#12 reg byte x 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 reg byte y 20002.0
(byte) findcol::mincol#11 reg byte y 1176.5882352941176
(byte) findcol::mincol#2 reg byte y 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 mindiff zp ZP_BYTE:6 1875.1875
(byte) findcol::mindiff#11 reg byte a 10001.0
(byte~) findcol::mindiff#13 mindiff zp ZP_BYTE:6 20002.0
(byte~) findcol::mindiff#14 reg byte a 20002.0
(byte) findcol::return
(byte) findcol::return#0 reg byte y 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 x zp ZP_BYTE:9 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 xp zp ZP_BYTE:7 10001.0
(byte) findcol::y
(byte) findcol::y#0 y zp ZP_BYTE:10 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 yp zp ZP_BYTE:11 6250.625
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 screen zp ZP_PTR_BYTE:3 16.5
(byte*) initscreen::screen#2 screen zp ZP_PTR_BYTE:3 16.5
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) numpoints
(byte) numpoints#1 numpoints zp ZP_BYTE:8 200.25999999999996
(byte) numpoints#19 numpoints zp ZP_BYTE:8 4.5
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2002.0
(byte*) render::colline
(byte*) render::colline#1 colline zp ZP_PTR_BYTE:3 67.33333333333333
(byte*) render::colline#2 colline zp ZP_PTR_BYTE:3 133.66666666666669
(byte) render::x
(byte) render::x#1 x zp ZP_BYTE:5 1501.5
(byte) render::x#2 x zp ZP_BYTE:5 667.3333333333334
(byte) render::y
(byte) render::y#1 y zp ZP_BYTE:2 151.5
(byte) render::y#2 y zp ZP_BYTE:2 120.29999999999998

zp ZP_BYTE:2 [ render::y#2 render::y#1 addpoint::c#6 ]
zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
reg byte x [ findcol::i#12 findcol::i#1 ]
zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte y [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
zp ZP_BYTE:7 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 findcol::xp#0 ]
reg byte a [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
reg byte a [ addpoint::x#6 ]
zp ZP_BYTE:8 [ numpoints#19 numpoints#1 ]
reg byte y [ addpoint::y#6 ]
reg byte a [ animate::$0 ]
reg byte a [ animate::$1 ]
reg byte a [ animate::$2 ]
reg byte a [ animate::$5 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$7 ]
reg byte x [ animate::$10 ]
reg byte x [ animate::$11 ]
reg byte a [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$16 ]
reg byte a [ animate::$17 ]
reg byte x [ animate::$20 ]
reg byte x [ animate::$21 ]
reg byte a [ animate::$22 ]
reg byte a [ animate::$25 ]
reg byte a [ animate::$26 ]
reg byte a [ animate::$27 ]
reg byte a [ animate::$30 ]
reg byte a [ animate::$31 ]
zp ZP_BYTE:9 [ findcol::x#0 ]
zp ZP_BYTE:10 [ findcol::y#0 ]
reg byte a [ render::col#0 ]
zp ZP_BYTE:11 [ findcol::yp#0 ]
reg byte a [ findcol::$12 ]
reg byte a [ findcol::$14 ]

FINAL CODE
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const COLORS = $d800
  .const FILL = $e6
  .const XPOS = $1000
  .const YPOS = $1100
  .const COLS = $1200
  .label numpoints = 8
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] call addpoint param-assignment [ ]
  //SEG7 [97] phi from main to addpoint
  //SEG8 [97] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #1
    sta addpoint.c
  //SEG9 [97] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #5
  //SEG10 [97] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta numpoints
  //SEG11 [97] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #5
    jsr addpoint
  //SEG12 main::@3
  //SEG13 [3] call addpoint param-assignment [ numpoints#1 ]
  //SEG14 [97] phi from main::@3 to addpoint
  //SEG15 [97] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #2
    sta addpoint.c
  //SEG16 [97] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #8
  //SEG17 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG18 [97] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG19 main::@4
  //SEG20 [4] call addpoint param-assignment [ numpoints#1 ]
  //SEG21 [97] phi from main::@4 to addpoint
  //SEG22 [97] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #3
    sta addpoint.c
  //SEG23 [97] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG24 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG25 [97] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #6
    jsr addpoint
  //SEG26 main::@5
  //SEG27 [5] call addpoint param-assignment [ numpoints#1 ]
  //SEG28 [97] phi from main::@5 to addpoint
  //SEG29 [97] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #4
    sta addpoint.c
  //SEG30 [97] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #2
  //SEG31 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG32 [97] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG33 main::@6
  //SEG34 [6] call addpoint param-assignment [ numpoints#1 ]
  //SEG35 [97] phi from main::@6 to addpoint
  //SEG36 [97] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #5
    sta addpoint.c
  //SEG37 [97] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG38 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG39 [97] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG40 main::@7
  //SEG41 [7] call addpoint param-assignment [ numpoints#1 ]
  //SEG42 [97] phi from main::@7 to addpoint
  //SEG43 [97] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #7
    sta addpoint.c
  //SEG44 [97] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG45 [97] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG46 [97] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG47 main::@8
  //SEG48 [8] call initscreen param-assignment [ numpoints#1 ]
  //SEG49 [91] phi from main::@8 to initscreen
    jsr initscreen
  //SEG50 main::@1
  b1:
  //SEG51 [9] call render param-assignment [ numpoints#1 ]
  //SEG52 [52] phi from main::@1 to render
    jsr render
  //SEG53 main::@10
  //SEG54 [10] call animate param-assignment [ numpoints#1 ]
    jsr animate
  //SEG55 main::@11
  //SEG56 [11] if(true) goto main::@1 [ numpoints#1 ] -- true_then_la1 
    jmp b1
  //SEG57 main::@return
  //SEG58 [12] return  [ ]
    rts
}
//SEG59 animate
animate: {
  //SEG60 [13] (byte~) animate::$0 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$0 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG61 [14] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG62 [15] *((const byte[256]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta XPOS+0
  //SEG63 [16] (byte~) animate::$2 ← * (const byte[256]) XPOS#0+(byte) 0 [ animate::$2 ] -- aby=_star_cowo1 
    lda XPOS+0
  //SEG64 [17] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG65 animate::@7
  //SEG66 [18] *((const byte[256]) XPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta XPOS+0
  //SEG67 animate::@1
  b1:
  //SEG68 [19] (byte~) animate::$5 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$5 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG69 [20] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG70 [21] *((const byte[256]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta YPOS+0
  //SEG71 [22] (byte~) animate::$7 ← * (const byte[256]) YPOS#0+(byte) 0 [ animate::$7 ] -- aby=_star_cowo1 
    lda YPOS+0
  //SEG72 [23] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG73 animate::@8
  //SEG74 [24] *((const byte[256]) YPOS#0+(byte) 0) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+0
  //SEG75 animate::@2
  b2:
  //SEG76 [25] (byte~) animate::$10 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$10 ] -- xby=_star_cowo1 
    ldx XPOS+1
  //SEG77 [26] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG78 [27] *((const byte[256]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx XPOS+1
  //SEG79 [28] (byte~) animate::$12 ← * (const byte[256]) XPOS#0+(byte) 1 [ animate::$12 ] -- aby=_star_cowo1 
    lda XPOS+1
  //SEG80 [29] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG81 animate::@9
  //SEG82 [30] *((const byte[256]) XPOS#0+(byte) 1) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta XPOS+1
  //SEG83 animate::@3
  b3:
  //SEG84 [31] (byte~) animate::$15 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$15 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG85 [32] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG86 [33] *((const byte[256]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta YPOS+2
  //SEG87 [34] (byte~) animate::$17 ← * (const byte[256]) YPOS#0+(byte) 2 [ animate::$17 ] -- aby=_star_cowo1 
    lda YPOS+2
  //SEG88 [35] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG89 animate::@10
  //SEG90 [36] *((const byte[256]) YPOS#0+(byte) 2) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #0
    sta YPOS+2
  //SEG91 animate::@4
  b4:
  //SEG92 [37] (byte~) animate::$20 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$20 ] -- xby=_star_cowo1 
    ldx YPOS+3
  //SEG93 [38] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG94 [39] *((const byte[256]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx YPOS+3
  //SEG95 [40] (byte~) animate::$22 ← * (const byte[256]) YPOS#0+(byte) 3 [ animate::$22 ] -- aby=_star_cowo1 
    lda YPOS+3
  //SEG96 [41] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG97 animate::@11
  //SEG98 [42] *((const byte[256]) YPOS#0+(byte) 3) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta YPOS+3
  //SEG99 [43] (byte~) animate::$25 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$25 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG100 [44] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #7
  //SEG101 [45] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG102 [46] (byte~) animate::$27 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$27 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG103 [47] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG104 animate::@12
  //SEG105 [48] (byte~) animate::$30 ← * (const byte[256]) XPOS#0+(byte) 3 [ animate::$30 ] -- aby=_star_cowo1 
    lda XPOS+3
  //SEG106 [49] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG107 [50] *((const byte[256]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta XPOS+3
  //SEG108 animate::@return
  breturn:
  //SEG109 [51] return  [ ]
    rts
}
//SEG110 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG111 [53] phi from render to render::@1
  //SEG112 [53] phi (byte*) render::colline#2 = (const byte*) COLORS#0 -- zpptrby1=cowo1 
    lda #<COLORS
    sta colline
    lda #>COLORS
    sta colline+1
  //SEG113 [53] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta y
  //SEG114 [53] phi from render::@3 to render::@1
  //SEG115 [53] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG116 [53] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG117 render::@1
  b1:
  //SEG118 [54] phi from render::@1 to render::@2
  //SEG119 [54] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #0
    sta x
  //SEG120 [54] phi from render::@5 to render::@2
  //SEG121 [54] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG122 render::@2
  b2:
  //SEG123 [55] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 numpoints#1 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG124 [56] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG125 [57] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 numpoints#1 ]
  //SEG126 [66] phi from render::@2 to findcol
    jsr findcol
  //SEG127 render::@5
  //SEG128 [58] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 numpoints#1 ] -- aby=yby 
    tya
  //SEG129 [59] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 numpoints#1 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG130 [60] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG131 [61] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG132 render::@3
  //SEG133 [62] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 numpoints#1 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+1
  !:
  //SEG134 [63] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG135 [64] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 numpoints#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG136 render::@return
  //SEG137 [65] return  [ numpoints#1 ]
    rts
}
//SEG138 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG139 [67] phi from findcol to findcol::@1
  //SEG140 [67] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG141 [67] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG142 [67] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #0
  //SEG143 findcol::@1
  b1:
  //SEG144 [68] (byte) findcol::xp#0 ← (const byte[256]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda XPOS,x
    sta xp
  //SEG145 [69] (byte) findcol::yp#0 ← (const byte[256]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda YPOS,x
    sta yp
  //SEG146 [70] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG147 findcol::@9
  //SEG148 [71] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG149 [72] phi from findcol::@9 to findcol::@return
  //SEG150 [72] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #0
  //SEG151 findcol::@return
  breturn:
  //SEG152 [73] return  [ findcol::return#0 numpoints#1 ]
    rts
  //SEG153 findcol::@2
  b2:
  //SEG154 [74] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG155 findcol::@12
  //SEG156 [75] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG157 [76] phi from findcol::@12 findcol::@4 to findcol::@5
  //SEG158 [76] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG159 findcol::@5
  b5:
  //SEG160 [77] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG161 findcol::@14
  //SEG162 [78] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG163 [79] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG164 [80] phi from findcol::@14 findcol::@6 to findcol::@7
  //SEG165 [80] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG166 findcol::@7
  b7:
  //SEG167 [81] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG168 findcol::@16
  //SEG169 [82] (byte) findcol::mincol#1 ← (const byte[256]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy COLS,x
  //SEG170 [83] phi from findcol::@16 findcol::@21 to findcol::@8
  //SEG171 [83] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG172 [83] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG173 findcol::@8
  b8:
  //SEG174 [84] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby=_inc_xby 
    inx
  //SEG175 [85] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 numpoints#1 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG176 [72] phi from findcol::@8 to findcol::@return
  //SEG177 [72] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG178 findcol::@19
  b19:
  //SEG179 [86] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG180 [67] phi from findcol::@19 to findcol::@1
  //SEG181 [67] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG182 [67] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG183 [67] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG184 findcol::@21
  b21:
  //SEG185 [87] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
    jmp b8
  //SEG186 findcol::@6
  b6:
  //SEG187 [88] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG188 [89] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
    jmp b7
  //SEG189 findcol::@4
  b4:
  //SEG190 [90] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
    jmp b5
}
//SEG191 initscreen
initscreen: {
    .label screen = 3
  //SEG192 [92] phi from initscreen to initscreen::@1
  //SEG193 [92] phi (byte*) initscreen::screen#2 = (const byte*) SCREEN#0 -- zpptrby1=cowo1 
    lda #<SCREEN
    sta screen
    lda #>SCREEN
    sta screen+1
  //SEG194 [92] phi from initscreen::@1 to initscreen::@1
  //SEG195 [92] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG196 initscreen::@1
  b1:
  //SEG197 [93] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #0
    lda #FILL
    sta (screen),y
  //SEG198 [94] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG199 [95] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda screen
    cmp #<SCREEN+$3e8
    bcc b1
  !:
  //SEG200 initscreen::@return
  //SEG201 [96] return  [ ]
    rts
}
//SEG202 addpoint
addpoint: {
    .label c = 2
  //SEG203 [98] *((const byte[256]) XPOS#0 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta XPOS,x
  //SEG204 [99] *((const byte[256]) YPOS#0 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta YPOS,y
  //SEG205 [100] *((const byte[256]) COLS#0 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta COLS,x
  //SEG206 [101] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG207 addpoint::@return
  //SEG208 [102] return  [ numpoints#1 ]
    rts
}

