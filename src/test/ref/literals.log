Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  SCREEN[0] = ch
  SCREEN[2] = num
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = 4 + main::i#2
  SCREEN[main::$0] = str[main::i#2]
  main::$1 = 9 + main::i#2
  SCREEN[main::$1] = nums[main::i#2]
  main::i#1 = main::i#2 + rangenext(0,3)
  main::$2 = main::i#1 != rangelast(0,3)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char *SCREEN = (char *)$400
void __start()
__constant char ch = 'a'
void main()
number main::$0
number main::$1
bool main::$2
char main::i
char main::i#0
char main::i#1
char main::i#2
__constant char num = 1
__constant char nums[] = { 2, 3, 4, 5 }
__constant char str[] = "bcde"

Adding number conversion cast (unumber) 0 in SCREEN[0] = ch
Adding number conversion cast (unumber) 2 in SCREEN[2] = num
Adding number conversion cast (unumber) 4 in main::$0 = 4 + main::i#2
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)4 + main::i#2
Adding number conversion cast (unumber) 9 in main::$1 = 9 + main::i#2
Adding number conversion cast (unumber) main::$1 in main::$1 = (unumber)9 + main::i#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$0 = 4 + main::i#2
Inferred type updated to char in main::$1 = 9 + main::i#2
Simple Condition main::$2 [10] if(main::i#1!=rangelast(0,3)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,3)) goto main::@1 to 4
Simplifying expression containing zero SCREEN in [0] SCREEN[0] = ch
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4 in [8] if(main::i#1!=4) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+2)
Consolidated array index constant in assignment (SCREEN+4)[main::$0]
Consolidated array index constant in assignment (SCREEN+9)[main::$1]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias main::i#2 = main::$0 main::$1 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = ch
  [1] *(SCREEN+2) = num
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [3] (SCREEN+4)[main::i#2] = str[main::i#2]
  [4] (SCREEN+9)[main::i#2] = nums[main::i#2]
  [5] main::i#1 = ++ main::i#2
  [6] if(main::i#1!=4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 16.5
char main::i#2 // 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = ch [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(SCREEN+2) = num [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (SCREEN+4)[main::i#2] = str[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [4] (SCREEN+9)[main::i#2] = nums[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [0] *SCREEN = ch [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(SCREEN+2) = num [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (SCREEN+4)[main::i#2] = str[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (SCREEN+9)[main::i#2] = nums[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 383 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 383 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="literals.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const ch = 'a'
  .const num = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [0] *SCREEN = ch -- _deref_pbuc1=vbuc2 
    lda #ch
    sta SCREEN
    // [1] *(SCREEN+2) = num -- _deref_pbuc1=vbuc2 
    lda #num
    sta SCREEN+2
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [2] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (SCREEN+4)[main::i#2] = str[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda str,x
    sta SCREEN+4,x
    // [4] (SCREEN+9)[main::i#2] = nums[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda nums,x
    sta SCREEN+9,x
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data
.segment Data
  str: .text "bcde"
  .byte 0
  nums: .byte 2, 3, 4, 5

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char *SCREEN = (char *) 1024
__constant char ch = 'a'
void main()
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 22.0
__constant char num = 1
__constant char nums[] = { 2, 3, 4, 5 }
__constant char str[] = "bcde"

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 293

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="literals.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const ch = 'a'
  .const num = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    // SCREEN[0] = ch
    // [0] *SCREEN = ch -- _deref_pbuc1=vbuc2 
    lda #ch
    sta SCREEN
    // SCREEN[2] = num
    // [1] *(SCREEN+2) = num -- _deref_pbuc1=vbuc2 
    lda #num
    sta SCREEN+2
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [2] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[4+i] = str[i]
    // [3] (SCREEN+4)[main::i#2] = str[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda str,x
    sta SCREEN+4,x
    // SCREEN[9+i] = nums[i]
    // [4] (SCREEN+9)[main::i#2] = nums[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda nums,x
    sta SCREEN+9,x
    // for(byte i : 0..3)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data
.segment Data
  str: .text "bcde"
  .byte 0
  nums: .byte 2, 3, 4, 5

