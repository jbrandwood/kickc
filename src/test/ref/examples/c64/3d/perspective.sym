const signed byte* PERSP_Z[$100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void __start()
void do_perspective(signed byte do_perspective::x , signed byte do_perspective::y , signed byte do_perspective::z)
const byte* do_perspective::str[2]  = "("
const byte* do_perspective::str1[2]  = ","
const byte* do_perspective::str3[7]  = ") -> ("
const byte* do_perspective::str5[2]  = ")"
signed byte do_perspective::x
const signed byte do_perspective::x#0 x = $39
signed byte do_perspective::y
const signed byte do_perspective::y#0 y = -$47
signed byte do_perspective::z
const signed byte do_perspective::z#0 z = $36
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:4 20002.0
byte* memset::dst#2 dst zp[2]:4 13334.666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void mulf_init()
byte~ mulf_init::$2 reg byte x 1501.5
byte~ mulf_init::$6 reg byte x 1501.5
signed word mulf_init::add
signed word mulf_init::add#1 add zp[2]:2 667.3333333333334
signed word mulf_init::add#2 add zp[2]:2 231.0
byte mulf_init::i
byte mulf_init::i#1 reg byte y 1501.5
byte mulf_init::i#2 reg byte y 572.0
signed word mulf_init::sqr
signed word mulf_init::sqr#1 sqr zp[2]:4 500.5
signed word mulf_init::sqr#2 sqr zp[2]:4 250.25
byte mulf_init::val
byte mulf_init::val#0 val zp[1]:15 900.9000000000001
const byte* mulf_sqr1[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2[$200]  = { fill( $200, 0) }
void perspective(signed byte perspective::x , signed byte perspective::y , signed byte perspective::z)
signed byte perspective::x
signed byte perspective::y
signed byte perspective::z
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#3 reg byte a 20002.0
byte print_char::ch#4 reg byte a 20002.0
byte print_char::ch#5 reg byte a 130004.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:6 1277.230769230769
byte* print_char_cursor#11 print_char_cursor zp[2]:6 4673.423076923077
byte* print_char_cursor#45 print_char_cursor zp[2]:6 116003.5
byte* print_char_cursor#72 print_char_cursor zp[2]:6 3734.6666666666665
byte* print_char_cursor#77 print_char_cursor zp[2]:6 1506.0
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:4 15001.5
byte* print_line_cursor#12 print_line_cursor zp[2]:4 20002.0
void print_ln()
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 2002.0
signed byte print_schar::b#4 reg byte x 500.5
signed byte print_schar::b#6 reg byte x 2002.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:2 20002.0
byte* print_str::str#10 str zp[2]:2 1001.0
byte* print_str::str#7 str zp[2]:2 10251.25
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 202.0
byte print_uchar::b#2 reg byte x 202.0
byte print_uchar::b#3 reg byte x 5301.25
volatile word psp1 loadstore zp[2]:11 0.5909090909090909
volatile word psp2 loadstore zp[2]:13 0.6190476190476191
volatile signed byte xr loadstore zp[1]:8 167.16666666666669
volatile signed byte yr loadstore zp[1]:9 111.44444444444446
volatile signed byte zr loadstore zp[1]:10 1003.0

reg byte y [ mulf_init::i#2 mulf_init::i#1 ]
zp[2]:2 [ print_str::str#7 print_str::str#10 print_str::str#0 mulf_init::add#2 mulf_init::add#1 ]
reg byte x [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
reg byte x [ print_uchar::b#3 print_uchar::b#2 print_uchar::b#1 print_uchar::b#0 ]
zp[2]:4 [ print_line_cursor#12 print_line_cursor#0 memset::dst#2 memset::dst#1 mulf_init::sqr#2 mulf_init::sqr#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:6 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
zp[1]:8 [ xr ]
zp[1]:9 [ yr ]
zp[1]:10 [ zr ]
zp[2]:11 [ psp1 ]
zp[2]:13 [ psp2 ]
zp[1]:15 [ mulf_init::val#0 ]
reg byte x [ mulf_init::$2 ]
reg byte x [ mulf_init::$6 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
