__constant char * const COLORRAM = (char *) 55296
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant char DIGITS[] = "0123456789abcdef"z
__constant const char LIGHT_BLUE = $e
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant unsigned long RADIX_DECIMAL_VALUES_LONG[] = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
__constant char RADIX_HEXADECIMAL_VALUES_CHAR[] = { $10 }
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void __start()
__constant char board[$14] = { fill( $14, 0) }
void clrscr()
char clrscr::c
char clrscr::c#1 // reg byte z 20002.0
char clrscr::c#2 // reg byte z 12501.25
char clrscr::l
char clrscr::l#1 // reg byte x 2002.0
char clrscr::l#2 // reg byte x 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // line_cols zp[2]:3 1001.0
char *clrscr::line_cols#5 // line_cols zp[2]:3 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // line_text zp[2]:21 667.3333333333334
char *clrscr::line_text#5 // line_text zp[2]:21 1714.7142857142858
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte x 11.0
char conio_c64_init::line#2 // reg byte x 22.0
__loadstore char conio_cursor_x // zp[1]:39 20025.000000000004
__loadstore char conio_cursor_y // zp[1]:44 4366.478260869564
__loadstore char *conio_line_color // zp[2]:42 4560.454545454545
__loadstore char *conio_line_text // zp[2]:40 4777.619047619047
unsigned long count
unsigned long count#10 // count zp[4]:47 445.5
unsigned long count#2 // count zp[4]:47 387.19354838709677
__stackcall void cputc(char c)
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // reg byte a 3.0
void cputln()
void cscroll()
void gotoxy(char x , char y)
char *gotoxy::$5 // zp[2]:33 200002.0
char *gotoxy::$6 // zp[2]:28 200002.0
unsigned int gotoxy::$7 // zp[2]:28 150001.5
unsigned int gotoxy::$8 // zp[2]:31 200002.0
unsigned int gotoxy::$9 // zp[2]:28 200002.0
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:28 100001.0
char gotoxy::x
char gotoxy::y
char gotoxy::y#2 // reg byte x 22.0
char gotoxy::y#4 // reg byte x 66671.0
char gotoxy::y#5 // reg byte x 66667.33333333333
char legal(char row , char column)
char legal::$0 // reg byte x 2000002.0
char legal::column
char legal::column#0 // column zp[1]:25 235353.23529411765
char legal::diff1_a
char legal::diff1_a#0 // reg byte a 2000002.0
char legal::diff1_b
char legal::diff1_return
char legal::diff1_return#0 // diff1_return zp[1]:24 2000002.0
char legal::diff1_return#1 // diff1_return zp[1]:24 2000002.0
char legal::diff1_return#2 // diff1_return zp[1]:24 600000.6000000001
char legal::diff2_a
char legal::diff2_b
char legal::diff2_return
char legal::diff2_return#0 // reg byte a 2000002.0
char legal::diff2_return#1 // reg byte a 2000002.0
char legal::diff2_return#2 // reg byte a 3000003.0
char legal::i
char legal::i#1 // reg byte y 2000002.0
char legal::i#10 // reg byte y 571429.1428571428
char legal::return
char legal::return#0 // reg byte a 2002.0
char legal::return#4 // reg byte a 333.6666666666667
char legal::row
char legal::row#0 // row zp[1]:30 222278.05555555556
void main()
__constant char main::s[$29] = " - n queens problem using backtracking -"
__constant char main::s1[$13] = "
number of queens:"
__constant char main::s2[$e] = "

solutions: "
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#2 // destination zp[2]:37
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:37 10001.0
char *memcpy::dst#2 // dst zp[2]:37 10334.666666666666
char *memcpy::dst#4 // dst zp[2]:37 2002.0
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
void *memcpy::source#2 // source zp[2]:35
char *memcpy::src
char *memcpy::src#1 // src zp[2]:35 20002.0
char *memcpy::src#2 // src zp[2]:35 10251.25
char *memcpy::src#4 // src zp[2]:35 1001.0
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:45 1375.25
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte z 1428.7142857142858
char *memset::dst
char *memset::dst#1 // dst zp[2]:35 20002.0
char *memset::dst#2 // dst zp[2]:35 13668.333333333332
char *memset::dst#4 // dst zp[2]:35 2002.0
char *memset::end
char *memset::end#0 // end zp[2]:37 1833.6666666666665
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:35
void print()
char print::i
char print::i#1 // i zp[1]:26 2000002.0
char print::i#2 // i zp[1]:26 1000001.0
char print::i1
char print::i1#1 // i1 zp[1]:27 2000002.0
char print::i1#2 // i1 zp[1]:27 1000000.357142857
char print::j
char print::j#1 // j zp[1]:23 2.0000002E7
char print::j#2 // j zp[1]:23 5714286.285714285
__constant char print::s[3] = "
#"
__constant char print::s1[4] = ":
 "
__constant char print::s3[2] = "Q"
__constant char print::s4[2] = "-"
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
unsigned int printf_number_buffer::$19 // zp[2]:12 1.00000001E8
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // buffer_sign zp[1]:18 200002.0
char printf_number_buffer::buffer_sign#1 // buffer_sign zp[1]:18 202.0
char printf_number_buffer::buffer_sign#10 // buffer_sign zp[1]:18 1.4766671714285715E7
char printf_number_buffer::buffer_sign#2 // buffer_sign zp[1]:18 2.0000002E7
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_justify_left#10 // format_justify_left zp[1]:24 6060606.121212121
char printf_number_buffer::format_min_length
char printf_number_buffer::format_min_length#3 // reg byte z 1.00000001E7
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_upper_case#10 // format_upper_case zp[1]:25 3571428.6071428573
char printf_number_buffer::format_zero_padding
char printf_number_buffer::format_zero_padding#10 // format_zero_padding zp[1]:23 8823529.5
signed char printf_number_buffer::len
signed char printf_number_buffer::len#0 // reg byte x 1.500000015E8
signed char printf_number_buffer::len#1 // reg byte x 2.00000002E8
signed char printf_number_buffer::len#2 // reg byte x 3.00000003E8
signed char printf_number_buffer::padding
signed char printf_number_buffer::padding#1 // padding zp[1]:2 1.00000001E8
signed char printf_number_buffer::padding#10 // padding zp[1]:2 1.6666666833333334E7
void (*printf_number_buffer::putc)(char)
void (*printf_number_buffer::putc#10)(char) // putc zp[2]:21 1.1111111222222222E7
void printf_padding(void (*putc)(char) , char pad , char length)
char printf_padding::i
char printf_padding::i#1 // i zp[1]:5 2.000000000002E12
char printf_padding::i#2 // i zp[1]:5 1.000000000001E12
char printf_padding::length
char printf_padding::length#0 // length zp[1]:19 2.00000002E8
char printf_padding::length#1 // length zp[1]:19 2.00000002E8
char printf_padding::length#2 // length zp[1]:19 2.00000002E8
char printf_padding::length#4 // length zp[1]:19 2.0006000000080002E11
char printf_padding::pad
char printf_padding::pad#5 // pad zp[1]:20 1.6666666666683334E11
void (*printf_padding::putc)(char)
void (*printf_padding::putc#0)(char) // putc zp[2]:21 1.00000001E8
void (*printf_padding::putc#1)(char) // putc zp[2]:21 1.00000001E8
void (*printf_padding::putc#2)(char) // putc zp[2]:21 1.00000001E8
void (*printf_padding::putc#5)(char) // putc zp[2]:21 3.00000003E9
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1.0000000001E10
void (*printf_str::putc)(char)
void (*printf_str::putc#0)(char) // putc zp[2]:21 2.00000002E8
void (*printf_str::putc#12)(char) // putc zp[2]:21 1.00000001E9
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:3 1.0000000001E10
const char *printf_str::s#11 // s zp[2]:3 1.5500000002E10
const char *printf_str::s#12 // s zp[2]:3 1.000000001E9
void printf_uchar(void (*putc)(char) , char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uchar::format
char printf_uchar::format_justify_left
char printf_uchar::format_min_length
char printf_uchar::format_radix
char printf_uchar::format_sign_always
char printf_uchar::format_upper_case
char printf_uchar::format_zero_padding
void (*printf_uchar::putc)(char)
char printf_uchar::uvalue
char printf_uchar::uvalue#0 // reg byte x 2000002.0
char printf_uchar::uvalue#1 // reg byte x 2000002.0
char printf_uchar::uvalue#2 // reg byte x 6000001.5
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
__constant char printf_uint::format_justify_left#0 = 0 // format_justify_left
char printf_uint::format_min_length
__constant char printf_uint::format_min_length#0 = 0 // format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
__constant char printf_uint::format_upper_case#0 = 0 // format_upper_case
char printf_uint::format_zero_padding
__constant char printf_uint::format_zero_padding#0 = 0 // format_zero_padding
void (*printf_uint::putc)(char)
__constant void (*printf_uint::putc#0)(char) = &cputc // putc
unsigned int printf_uint::uvalue
__constant unsigned int printf_uint::uvalue#0 = 8 // uvalue
void printf_ulong(void (*putc)(char) , unsigned long uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_ulong::format
char printf_ulong::format_justify_left
char printf_ulong::format_min_length
char printf_ulong::format_radix
char printf_ulong::format_sign_always
char printf_ulong::format_upper_case
char printf_ulong::format_zero_padding
void (*printf_ulong::putc)(char)
unsigned long printf_ulong::uvalue
unsigned long printf_ulong::uvalue#0 // uvalue zp[4]:8 22.0
unsigned long printf_ulong::uvalue#1 // uvalue zp[4]:8 20002.0
unsigned long printf_ulong::uvalue#2 // uvalue zp[4]:8 55006.5
void queens()
char queens::$2 // reg byte a 2002.0
char queens::row
char queens::row#1 // row zp[1]:30 2002.0
char queens::row#10 // row zp[1]:30 1144.0
char queens::row#2 // row zp[1]:30 2002.0
__constant char s3[2] = "
"
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:12 1.000000000001E12
unsigned int strlen::len#2 // len zp[2]:12 5.0002500000075E11
unsigned int strlen::return
unsigned int strlen::return#2 // return zp[2]:12 2.00000002E8
char *strlen::str
char *strlen::str#0 // str zp[2]:3 2.000000000002E12
char *strlen::str#2 // str zp[2]:3 1.000000000001E12
char * strupr(char *str)
char strupr::$0 // reg byte a 2.000000000002E12
char *strupr::return
char *strupr::src
char *strupr::src#1 // src zp[2]:6 2.000000000002E12
char *strupr::src#2 // src zp[2]:6 7.142857142864285E11
char *strupr::str
__constant char *strupr::str#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // str
char toupper(char ch)
char toupper::ch
char toupper::ch#0 // reg byte a 1.7000000000001998E13
char toupper::return
char toupper::return#0 // reg byte a 2.0000000000002E13
char toupper::return#2 // reg byte a 1.0333333333334666E13
char toupper::return#3 // reg byte a 2.000000000002E12
void uctoa(char value , char *buffer , char radix)
char *uctoa::buffer
char *uctoa::buffer#11 // buffer zp[2]:12 3.3350000000500004E10
char *uctoa::buffer#14 // buffer zp[2]:12 1.500000000015E11
char *uctoa::buffer#3 // buffer zp[2]:12 2.00000002E8
char *uctoa::buffer#4 // buffer zp[2]:12 2.00000000002E11
char uctoa::digit
char uctoa::digit#1 // digit zp[1]:18 2.00000000002E11
char uctoa::digit#2 // digit zp[1]:18 3.076923076953846E10
char uctoa::digit_value
char uctoa::digit_value#0 // digit_value zp[1]:2 6.0000000000600006E10
char *uctoa::digit_values
char uctoa::max_digits
char uctoa::radix
char uctoa::started
char uctoa::started#2 // reg byte x 6.0000000000600006E10
char uctoa::started#4 // reg byte x 1.00000000001E11
char uctoa::value
char uctoa::value#0 // reg byte z 1.00000000001E11
char uctoa::value#1 // reg byte z 5.5000001E7
char uctoa::value#2 // reg byte z 6.670000000100001E10
char uctoa::value#6 // reg byte z 1.500000000015E11
char uctoa_append(char *buffer , char value , char sub)
char *uctoa_append::buffer
char *uctoa_append::buffer#0 // buffer zp[2]:12 1.3750000000025E11
char uctoa_append::digit
char uctoa_append::digit#1 // reg byte x 1.0E16
char uctoa_append::digit#2 // reg byte x 1.00005E16
char uctoa_append::return
char uctoa_append::return#0 // reg byte a 2.00000000002E11
char uctoa_append::sub
char uctoa_append::sub#0 // sub zp[1]:2 3.33335E15
char uctoa_append::value
char uctoa_append::value#0 // reg byte z 3.666666666673334E11
char uctoa_append::value#1 // reg byte z 2.0E16
char uctoa_append::value#2 // reg byte z 5.000183333333334E15
void ultoa(unsigned long value , char *buffer , char radix)
char ultoa::$10 // reg byte a 2.00000002E8
char ultoa::$11 // reg byte a 2000002.0
char *ultoa::buffer
char *ultoa::buffer#11 // buffer zp[2]:21 2.871428614285714E7
char *ultoa::buffer#14 // buffer zp[2]:21 1.500000015E8
char *ultoa::buffer#3 // buffer zp[2]:21 2000002.0
char *ultoa::buffer#4 // buffer zp[2]:21 2.00000002E8
char ultoa::digit
char ultoa::digit#1 // reg byte x 2.00000002E8
char ultoa::digit#2 // reg byte x 2.857142885714286E7
unsigned long ultoa::digit_value
unsigned long ultoa::digit_value#0 // digit_value zp[4]:14 6.0000000599999994E7
unsigned long *ultoa::digit_values
char ultoa::max_digits
char ultoa::radix
char ultoa::started
char ultoa::started#2 // reg byte z 5.00000005E7
char ultoa::started#4 // reg byte z 1.00000001E8
unsigned long ultoa::value
unsigned long ultoa::value#0 // value zp[4]:8 1.00000001E8
unsigned long ultoa::value#1 // value zp[4]:8 550001.0
unsigned long ultoa::value#2 // value zp[4]:8 5.7285715E7
unsigned long ultoa::value#6 // value zp[4]:8 1.500000015E8
unsigned long ultoa_append(char *buffer , unsigned long value , unsigned long sub)
char *ultoa_append::buffer
char *ultoa_append::buffer#0 // buffer zp[2]:21 1.3750000025E8
char ultoa_append::digit
char ultoa_append::digit#1 // reg byte z 1.000000000001E12
char ultoa_append::digit#2 // reg byte z 1.0005000000015E12
unsigned long ultoa_append::return
unsigned long ultoa_append::return#0 // return zp[4]:8 2.00000002E8
unsigned long ultoa_append::sub
unsigned long ultoa_append::sub#0 // sub zp[4]:14 3.333500000005E11
unsigned long ultoa_append::value
unsigned long ultoa_append::value#0 // value zp[4]:8 3.666666673333334E8
unsigned long ultoa_append::value#1 // value zp[4]:8 2.000000000002E12
unsigned long ultoa_append::value#2 // value zp[4]:8 5.0018333333416675E11
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 20002.0
char utoa::$11 // reg byte x 2002.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:3 3000.4285714285716
char *utoa::buffer#14 // buffer zp[2]:3 15001.5
char *utoa::buffer#3 // buffer zp[2]:3 2002.0
char *utoa::buffer#4 // buffer zp[2]:3 20002.0
char utoa::digit
char utoa::digit#1 // reg byte x 20002.0
char utoa::digit#2 // reg byte x 2857.4285714285716
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:6 6000.6
unsigned int *utoa::digit_values
char utoa::max_digits
__constant char utoa::max_digits#1 = 5 // max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte z 5000.5
char utoa::started#4 // reg byte z 10001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:21 10001.0
unsigned int utoa::value#2 // value zp[2]:21 5714.857142857143
unsigned int utoa::value#6 // value zp[2]:21 15001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:3 13750.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte z 1.0000001E7
char utoa_append::digit#2 // reg byte z 1.00500015E7
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:21 20002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:6 3335000.5
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:21 36667.33333333333
unsigned int utoa_append::value#1 // value zp[2]:21 2.0000002E7
unsigned int utoa_append::value#2 // value zp[2]:21 5018334.166666666

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte z [ clrscr::c#2 clrscr::c#1 ]
zp[1]:30 [ queens::row#10 queens::row#1 queens::row#2 legal::row#0 ]
zp[4]:47 [ count#10 count#2 ]
zp[4]:8 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
reg byte x [ utoa::digit#2 utoa::digit#1 ]
reg byte z [ utoa::started#2 utoa::started#4 ]
reg byte z [ printf_number_buffer::format_min_length#3 ]
reg byte x [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
reg byte y [ legal::i#10 legal::i#1 ]
reg byte a [ legal::return#4 ]
zp[1]:24 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 printf_number_buffer::format_justify_left#10 ]
reg byte a [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ]
zp[1]:26 [ print::i#2 print::i#1 ]
zp[1]:27 [ print::i1#2 print::i1#1 ]
zp[1]:23 [ print::j#2 print::j#1 printf_number_buffer::format_zero_padding#10 ]
reg byte x [ ultoa::digit#2 ultoa::digit#1 ]
reg byte z [ ultoa::started#2 ultoa::started#4 ]
zp[2]:21 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_str::putc#12 printf_str::putc#0 printf_number_buffer::putc#10 printf_padding::putc#5 printf_padding::putc#1 printf_padding::putc#2 printf_padding::putc#0 clrscr::line_text#5 clrscr::line_text#1 ]
zp[2]:35 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
reg byte z [ memset::c#4 ]
reg byte z [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:3 [ strlen::str#2 strlen::str#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 printf_str::s#11 printf_str::s#12 printf_str::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[1]:19 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[1]:20 [ printf_padding::pad#5 ]
zp[1]:5 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
reg byte z [ ultoa_append::digit#2 ultoa_append::digit#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[1]:18 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte z [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
reg byte x [ uctoa::started#2 uctoa::started#4 ]
zp[2]:12 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ]
reg byte z [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte x [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[1]:39 [ conio_cursor_x ]
zp[1]:44 [ conio_cursor_y ]
zp[2]:40 [ conio_line_text ]
zp[2]:42 [ conio_line_color ]
reg byte a [ cputc::c#0 ]
zp[2]:28 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:31 [ gotoxy::$8 ]
zp[2]:33 [ gotoxy::$5 ]
reg byte a [ printf_str::c#1 ]
zp[1]:25 [ legal::column#0 printf_number_buffer::format_upper_case#10 ]
reg byte a [ legal::return#0 ]
reg byte a [ queens::$2 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:6 [ utoa::digit_value#0 utoa_append::sub#0 strupr::src#2 strupr::src#1 ]
reg byte x [ legal::$0 ]
reg byte a [ legal::diff1_a#0 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:14 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
zp[2]:45 [ memcpy::src_end#0 ]
zp[2]:37 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
zp[1]:2 [ uctoa::digit_value#0 uctoa_append::sub#0 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
reg byte a [ uctoa_append::return#0 ]
mem[12] [ printf_buffer ]
