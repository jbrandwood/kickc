
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::screen#0 = (byte*)$400
  main::cols#0 = (byte*)$d800
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::cols#2 = phi( main/main::cols#0, main::@1/main::cols#1 )
  main::screen#2 = phi( main/main::screen#0, main::@1/main::screen#1 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::sin#0 = sintab[main::i#2]
  main::screen#2[main::sin#0] = '*'
  main::screen#1 = main::screen#2 + $28
  main::cols#2[main::sin#0] = 1
  main::cols#1 = main::cols#2 + $28
  main::i#1 = main::i#2 + rangenext(0,$18)
  main::$0 = main::i#1 != rangelast(0,$18)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
bool~ main::$0
label main::@1
label main::@return
byte* main::cols
byte* main::cols#0
byte* main::cols#1
byte* main::cols#2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte* main::screen
byte* main::screen#0
byte* main::screen#1
byte* main::screen#2
byte main::sin
byte main::sin#0
const byte* sintab[]  = kickasm {{ .fill 25, 20 + 20*sin(toRadians(i*360/25))
 }}

Adding number conversion cast (unumber) $28 in main::screen#1 = main::screen#2 + $28
Adding number conversion cast (unumber) 1 in main::cols#2[main::sin#0] = 1
Adding number conversion cast (unumber) $28 in main::cols#1 = main::cols#2 + $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::cols#2[main::sin#0] = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $28
Finalized unsigned number type 1
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [11] if(main::i#1!=rangelast(0,$18)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::screen#0 = (byte*) 1024
Constant main::cols#0 = (byte*) 55296
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [11] if(main::i#1!=rangelast(0,$18)) goto main::@1 to $19
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $19 in [7] if(main::i#1!=$19) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::screen#0
Inlining constant with var siblings main::cols#0
Inlining constant with var siblings main::i#0
Constant inlined main::screen#0 = (byte*) 1024
Constant inlined main::i#0 = 0
Constant inlined main::cols#0 = (byte*) 55296
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [10] main::i#3 = main::i#1
Coalesced [11] main::screen#3 = main::screen#1
Coalesced [12] main::cols#3 = main::cols#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::cols#2 = phi( main/(byte*) 55296, main::@1/main::cols#1 )
  [1] main::screen#2 = phi( main/(byte*) 1024, main::@1/main::screen#1 )
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::sin#0 = sintab[main::i#2]
  [3] main::screen#2[main::sin#0] = '*'
  [4] main::screen#1 = main::screen#2 + $28
  [5] main::cols#2[main::sin#0] = 1
  [6] main::cols#1 = main::cols#2 + $28
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=$19) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte* main::cols
byte* main::cols#1 7.333333333333333
byte* main::cols#2 6.6000000000000005
byte main::i
byte main::i#1 16.5
byte main::i#2 5.5
byte* main::screen
byte* main::screen#1 4.4
byte* main::screen#2 11.0
byte main::sin
byte main::sin#0 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::screen#2 main::screen#1 ]
[ main::cols#2 main::cols#1 ]
Added variable main::sin#0 to live range equivalence class [ main::sin#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::screen#2 main::screen#1 ]
[ main::cols#2 main::cols#1 ]
[ main::sin#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::screen#2 main::screen#1 ]
Allocated zp[2]:5 [ main::cols#2 main::cols#1 ]
Allocated zp[1]:7 [ main::sin#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::screen#2[main::sin#0] = '*' [ main::i#2 main::screen#2 main::cols#2 main::sin#0 ] (  [ main::i#2 main::screen#2 main::cols#2 main::sin#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::sin#0 ]
Statement [4] main::screen#1 = main::screen#2 + $28 [ main::i#2 main::cols#2 main::screen#1 main::sin#0 ] (  [ main::i#2 main::cols#2 main::screen#1 main::sin#0 ] { }  ) always clobbers reg byte a 
Statement [5] main::cols#2[main::sin#0] = 1 [ main::i#2 main::cols#2 main::screen#1 ] (  [ main::i#2 main::cols#2 main::screen#1 ] { }  ) always clobbers reg byte a 
Statement [6] main::cols#1 = main::cols#2 + $28 [ main::i#2 main::screen#1 main::cols#1 ] (  [ main::i#2 main::screen#1 main::cols#1 ] { }  ) always clobbers reg byte a 
Statement [3] main::screen#2[main::sin#0] = '*' [ main::i#2 main::screen#2 main::cols#2 main::sin#0 ] (  [ main::i#2 main::screen#2 main::cols#2 main::sin#0 ] { }  ) always clobbers reg byte a 
Statement [4] main::screen#1 = main::screen#2 + $28 [ main::i#2 main::cols#2 main::screen#1 main::sin#0 ] (  [ main::i#2 main::cols#2 main::screen#1 main::sin#0 ] { }  ) always clobbers reg byte a 
Statement [5] main::cols#2[main::sin#0] = 1 [ main::i#2 main::cols#2 main::screen#1 ] (  [ main::i#2 main::cols#2 main::screen#1 ] { }  ) always clobbers reg byte a 
Statement [6] main::cols#1 = main::cols#2 + $28 [ main::i#2 main::screen#1 main::cols#1 ] (  [ main::i#2 main::screen#1 main::cols#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::screen#2 main::screen#1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ main::cols#2 main::cols#1 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ main::sin#0 ] : zp[1]:7 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:2 [ main::i#2 main::i#1 ] 15.4: zp[2]:3 [ main::screen#2 main::screen#1 ] 13.93: zp[2]:5 [ main::cols#2 main::cols#1 ] 11: zp[1]:7 [ main::sin#0 ] 
Uplift Scope [] 

Uplifting [main] best 936 combination reg byte x [ main::i#2 main::i#1 ] zp[2]:3 [ main::screen#2 main::screen#1 ] zp[2]:5 [ main::cols#2 main::cols#1 ] reg byte y [ main::sin#0 ] 
Uplifting [] best 936 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::screen#2 main::screen#1 ]
Allocated (was zp[2]:5) zp[2]:4 [ main::cols#2 main::cols#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of inline kickasm data
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 2
    .label cols = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::cols#2 = (byte*) 55296 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$d800
    sta.z cols
    lda #>$d800
    sta.z cols+1
    // [1] phi main::screen#2 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::cols#2 = main::cols#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::screen#2 = main::screen#1 [phi:main::@1->main::@1#1] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::sin#0 = sintab[main::i#2] -- vbuyy=pbuc1_derefidx_vbuxx 
    ldy sintab,x
    // [3] main::screen#2[main::sin#0] = '*' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #'*'
    sta (screen),y
    // [4] main::screen#1 = main::screen#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [5] main::cols#2[main::sin#0] = 1 -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #1
    sta (cols),y
    // [6] main::cols#1 = main::cols#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=$19) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
.pc = $1000 "sintab"
sintab:
.fill 25, 20 + 20*sin(toRadians(i*360/25))


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
label main::@1
label main::@return
byte* main::cols
byte* main::cols#1 cols zp[2]:4 7.333333333333333
byte* main::cols#2 cols zp[2]:4 6.6000000000000005
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 5.5
byte* main::screen
byte* main::screen#1 screen zp[2]:2 4.4
byte* main::screen#2 screen zp[2]:2 11.0
byte main::sin
byte main::sin#0 reg byte y 11.0
const byte* sintab[]  = kickasm {{ .fill 25, 20 + 20*sin(toRadians(i*360/25))
 }}

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::screen#2 main::screen#1 ]
zp[2]:4 [ main::cols#2 main::cols#1 ]
reg byte y [ main::sin#0 ]


FINAL ASSEMBLER
Score: 846

  // File Comments
// Example of inline kickasm data
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 2
    .label cols = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::cols#2 = (byte*) 55296 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$d800
    sta.z cols
    lda #>$d800
    sta.z cols+1
    // [1] phi main::screen#2 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::cols#2 = main::cols#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::screen#2 = main::screen#1 [phi:main::@1->main::@1#1] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#2] -- register_copy 
    // main::@1
  __b1:
    // sin = sintab[i]
    // [2] main::sin#0 = sintab[main::i#2] -- vbuyy=pbuc1_derefidx_vbuxx 
    ldy sintab,x
    // screen[sin] = '*'
    // [3] main::screen#2[main::sin#0] = '*' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #'*'
    sta (screen),y
    // screen += 40
    // [4] main::screen#1 = main::screen#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // cols[sin] = 1
    // [5] main::cols#2[main::sin#0] = 1 -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #1
    sta (cols),y
    // cols += 40
    // [6] main::cols#1 = main::cols#2 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // for(byte i:0..24)
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=$19) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data
.pc = $1000 "sintab"
sintab:
.fill 25, 20 + 20*sin(toRadians(i*360/25))


