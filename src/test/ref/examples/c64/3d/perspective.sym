__constant signed char PERSP_Z[$100] = kickasm {{ {
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void __start()
void do_perspective(signed char x , signed char y , signed char z)
__constant char do_perspective::str[2] = "("
__constant char do_perspective::str1[2] = ","
__constant char do_perspective::str3[7] = ") -> ("
__constant char do_perspective::str5[2] = ")"
signed char do_perspective::x
__constant signed char do_perspective::x#0 = $39 // x
signed char do_perspective::y
__constant signed char do_perspective::y#0 = -$47 // y
signed char do_perspective::z
__constant signed char do_perspective::z#0 = $36 // z
void main()
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:4 20002.0
char *memset::dst#2 // dst zp[2]:4 13334.666666666666
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
void mulf_init()
char mulf_init::$2 // reg byte x 1501.5
char mulf_init::$6 // reg byte x 1501.5
int mulf_init::add
int mulf_init::add#1 // add zp[2]:2 667.3333333333334
int mulf_init::add#2 // add zp[2]:2 231.0
char mulf_init::i
char mulf_init::i#1 // reg byte y 1501.5
char mulf_init::i#2 // reg byte y 572.0
int mulf_init::sqr
int mulf_init::sqr#1 // sqr zp[2]:4 500.5
int mulf_init::sqr#2 // sqr zp[2]:4 250.25
char mulf_init::val
char mulf_init::val#0 // val zp[1]:15 900.9000000000001
__constant char mulf_sqr1[$200] = { fill( $200, 0) }
__constant char mulf_sqr2[$200] = { fill( $200, 0) }
void perspective(signed char x , signed char y , signed char z)
signed char perspective::x
signed char perspective::y
signed char perspective::z
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 20002.0
char print_char::ch#4 // reg byte a 20002.0
char print_char::ch#5 // reg byte a 130004.0
char *print_char_cursor
char *print_char_cursor#1 // print_char_cursor zp[2]:6 1277.230769230769
char *print_char_cursor#11 // print_char_cursor zp[2]:6 4673.423076923077
char *print_char_cursor#45 // print_char_cursor zp[2]:6 116003.5
char *print_char_cursor#72 // print_char_cursor zp[2]:6 3734.6666666666665
char *print_char_cursor#77 // print_char_cursor zp[2]:6 1506.0
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:4 15001.5
char *print_line_cursor#12 // print_line_cursor zp[2]:4 20002.0
void print_ln()
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // reg byte x 2002.0
signed char print_schar::b#4 // reg byte x 500.5
signed char print_schar::b#6 // reg byte x 2002.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:2 20002.0
char *print_str::str#10 // str zp[2]:2 1001.0
char *print_str::str#7 // str zp[2]:2 10251.25
void print_uchar(char b)
char print_uchar::$0 // reg byte a 20002.0
char print_uchar::$2 // reg byte x 20002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 2002.0
char print_uchar::b#1 // reg byte x 202.0
char print_uchar::b#2 // reg byte x 202.0
char print_uchar::b#3 // reg byte x 5301.25
__loadstore volatile unsigned int psp1 // zp[2]:11 0.5909090909090909
__loadstore volatile unsigned int psp2 // zp[2]:13 0.6190476190476191
__loadstore volatile signed char xr // zp[1]:8 167.16666666666669
__loadstore volatile signed char yr // zp[1]:9 111.44444444444446
__loadstore volatile signed char zr // zp[1]:10 1003.0

reg byte y [ mulf_init::i#2 mulf_init::i#1 ]
zp[2]:2 [ print_str::str#7 print_str::str#10 print_str::str#0 mulf_init::add#2 mulf_init::add#1 ]
reg byte x [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
reg byte x [ print_uchar::b#3 print_uchar::b#2 print_uchar::b#1 print_uchar::b#0 ]
zp[2]:4 [ print_line_cursor#12 print_line_cursor#0 memset::dst#2 memset::dst#1 mulf_init::sqr#2 mulf_init::sqr#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:6 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
zp[1]:8 [ xr ]
zp[1]:9 [ yr ]
zp[1]:10 [ zr ]
zp[2]:11 [ psp1 ]
zp[2]:13 [ psp2 ]
zp[1]:15 [ mulf_init::val#0 ]
reg byte x [ mulf_init::$2 ]
reg byte x [ mulf_init::$6 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
