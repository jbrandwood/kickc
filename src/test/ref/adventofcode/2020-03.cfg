
void main()
main: scope:[main]  from
  [0] phi()
  [1] call clrscr 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call test_slope 
  [4] test_slope::return#0 = test_slope::trees#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] printf_uint::uvalue#0 = test_slope::return#0
  [6] call cputs 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [7] phi()
  [8] call printf_uint 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [9] phi()
  [10] call cputs 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [11] phi()
  [12] call test_slope 
  [13] test_slope::return#1 = test_slope::trees#2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [14] printf_uint::uvalue#1 = test_slope::return#1
  [15] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [16] phi()
  [17] call printf_uint 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [18] phi()
  [19] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [20] phi()
  [21] call test_slope 
  [22] test_slope::return#10 = test_slope::trees#2
  to:main::@11
main::@11: scope:[main]  from main::@10
  [23] printf_uint::uvalue#2 = test_slope::return#10
  [24] call cputs 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [25] phi()
  [26] call printf_uint 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [27] phi()
  [28] call cputs 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [29] phi()
  [30] call test_slope 
  [31] test_slope::return#11 = test_slope::trees#2
  to:main::@15
main::@15: scope:[main]  from main::@14
  [32] printf_uint::uvalue#3 = test_slope::return#11
  [33] call cputs 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [34] phi()
  [35] call printf_uint 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [36] phi()
  [37] call cputs 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [38] phi()
  [39] call test_slope 
  [40] test_slope::return#12 = test_slope::trees#2
  to:main::@19
main::@19: scope:[main]  from main::@18
  [41] printf_uint::uvalue#4 = test_slope::return#12
  [42] call cputs 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [43] phi()
  [44] call printf_uint 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [45] phi()
  [46] call cputs 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [47] phi()
  [48] call test_slope 
  [49] test_slope::return#13 = test_slope::trees#2
  to:main::@23
main::@23: scope:[main]  from main::@22
  [50] printf_uint::uvalue#5 = test_slope::return#13
  [51] call cputs 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [52] phi()
  [53] call printf_uint 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [54] phi()
  [55] call cputs 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@25
  [56] phi()
  to:main::@1

void clrscr()
clrscr: scope:[clrscr]  from main
  [57] memset::str#7 = (void*)*SAVMSC
  [58] call memset 
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  [59] *OLDCHR = 0
  [60] call gotoxy 
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [61] return 
  to:@return

word test_slope(byte test_slope::x_inc , byte test_slope::y_inc)
test_slope: scope:[test_slope]  from main::@10 main::@14 main::@18 main::@2 main::@22 main::@6
  [62] test_slope::y_inc#12 = phi( main::@10/1, main::@14/1, main::@18/1, main::@2/1, main::@22/2, main::@6/1 )
  [62] test_slope::x_inc#10 = phi( main::@10/3, main::@14/5, main::@18/7, main::@2/3, main::@22/1, main::@6/1 )
  to:test_slope::@1
test_slope::@1: scope:[test_slope]  from test_slope test_slope::@4
  [63] test_slope::trees#2 = phi( test_slope/0, test_slope::@4/test_slope::trees#6 )
  [63] test_slope::x#3 = phi( test_slope/0, test_slope::@4/test_slope::x#8 )
  [63] test_slope::mapline#2 = phi( test_slope/map, test_slope::@4/test_slope::mapline#1 )
  [63] test_slope::y#2 = phi( test_slope/0, test_slope::@4/test_slope::y#1 )
  [64] if(test_slope::y#2<$143) goto test_slope::@2
  to:test_slope::@return
test_slope::@return: scope:[test_slope]  from test_slope::@1
  [65] return 
  to:@return
test_slope::@2: scope:[test_slope]  from test_slope::@1
  [66] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@3
  to:test_slope::@5
test_slope::@5: scope:[test_slope]  from test_slope::@2
  [67] test_slope::trees#1 = ++ test_slope::trees#2
  to:test_slope::@3
test_slope::@3: scope:[test_slope]  from test_slope::@2 test_slope::@5
  [68] test_slope::trees#6 = phi( test_slope::@2/test_slope::trees#2, test_slope::@5/test_slope::trees#1 )
  [69] test_slope::x#1 = test_slope::x#3 + test_slope::x_inc#10
  [70] if(test_slope::x#1<$1f) goto test_slope::@4
  to:test_slope::@6
test_slope::@6: scope:[test_slope]  from test_slope::@3
  [71] test_slope::x#2 = test_slope::x#1 - $1f
  to:test_slope::@4
test_slope::@4: scope:[test_slope]  from test_slope::@3 test_slope::@6
  [72] test_slope::x#8 = phi( test_slope::@3/test_slope::x#1, test_slope::@6/test_slope::x#2 )
  [73] test_slope::$6 = test_slope::y_inc#12 << 1
  [74] test_slope::$7 = test_slope::$6 + test_slope::y_inc#12
  [75] test_slope::$8 = test_slope::$7 << 1
  [76] test_slope::$9 = test_slope::$8 + test_slope::y_inc#12
  [77] test_slope::$10 = test_slope::$9 << 1
  [78] test_slope::$11 = test_slope::$10 + test_slope::y_inc#12
  [79] test_slope::$12 = test_slope::$11 << 1
  [80] test_slope::$5 = test_slope::$12 + test_slope::y_inc#12
  [81] test_slope::mapline#1 = test_slope::mapline#2 + test_slope::$5
  [82] test_slope::y#1 = test_slope::y#2 + test_slope::y_inc#12
  to:test_slope::@1

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main::@11 main::@13 main::@15 main::@17 main::@19 main::@21 main::@23 main::@25 main::@3 main::@5 main::@7 main::@9 printf_number_buffer::@2
  [83] cputs::s#15 = phi( main::@11/main::s4, main::@13/main::s1, main::@15/main::s6, main::@17/main::s1, main::@19/main::s8, main::@21/main::s1, main::@23/main::s10, main::@25/main::s1, main::@3/main::s, main::@5/main::s1, main::@7/main::s2, main::@9/main::s1, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [84] cputs::s#14 = phi( cputs/cputs::s#15, cputs::@2/cputs::s#0 )
  [85] cputs::c#1 = *cputs::s#14
  [86] cputs::s#0 = ++ cputs::s#14
  [87] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [88] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [89] cputc::c = cputs::c#1
  [90] call cputc 
  to:cputs::@1

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@12 main::@16 main::@20 main::@24 main::@4 main::@8
  [91] printf_uint::uvalue#6 = phi( main::@12/printf_uint::uvalue#2, main::@16/printf_uint::uvalue#3, main::@20/printf_uint::uvalue#4, main::@24/printf_uint::uvalue#5, main::@4/printf_uint::uvalue#0, main::@8/printf_uint::uvalue#1 )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [92] *((byte*)&printf_buffer) = 0
  [93] utoa::value#1 = printf_uint::uvalue#6
  [94] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [95] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [96] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [97] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from clrscr newline::@4
  [98] memset::str#3 = phi( clrscr/memset::str#7, newline::@4/memset::str#8 )
  [98] memset::num#2 = phi( clrscr/(word)$28*$18, newline::@4/$28 )
  [99] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [100] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [101] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [102] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [103] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [104] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [105] *memset::dst#2 = 0
  [106] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from clrscr::@1
  [107] *COLCRS = gotoxy::x#1
  [108] *ROWCRS = gotoxy::y#1
  [109] call setcursor 
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy
  [110] return 
  to:@return

void cputc(volatile byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [111] if(cputc::c==''at) goto cputc::@1
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc
  [112] if(cputc::c=='
'at) goto cputc::@2
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@3
  [113] if(cputc::c==$9b) goto cputc::@2
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@8
  [114] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0]
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::convertToScreenCode1
  [115] phi()
  [116] call putchar 
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::@6
  [117] *COLCRS = ++ *COLCRS
  [118] if(*COLCRS==$28) goto cputc::@5
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@7
  [119] phi()
  [120] call setcursor 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@4 cputc::@5
  [121] return 
  to:@return
cputc::@5: scope:[cputc]  from cputc::@7
  [122] *COLCRS = 0
  [123] call newline 
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc::@3 cputc::@8
  [124] *COLCRS = 0
  [125] call newline 
  to:cputc::@return
cputc::@1: scope:[cputc]  from cputc
  [126] *COLCRS = 0
  [127] call setcursor 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [128] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [129] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [129] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [129] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [129] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [130] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [131] utoa::$11 = (byte)utoa::value#2
  [132] *utoa::buffer#11 = DIGITS[utoa::$11]
  [133] utoa::buffer#3 = ++ utoa::buffer#11
  [134] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [135] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [136] utoa::$10 = utoa::digit#2 << 1
  [137] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [138] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [139] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [140] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [140] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [140] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [141] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [142] utoa_append::buffer#0 = utoa::buffer#11
  [143] utoa_append::value#0 = utoa::value#2
  [144] utoa_append::sub#0 = utoa::digit_value#0
  [145] call utoa_append 
  [146] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [147] utoa::value#0 = utoa_append::return#0
  [148] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [149] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [150] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [151] cputc::c = printf_number_buffer::buffer_sign#0
  [152] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [153] phi()
  [154] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [155] return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@4 gotoxy newline::@1 putchar::@1
  [156] *(*OLDADR) = *OLDCHR
  [157] call cursorLocation 
  [158] cursorLocation::return#3 = cursorLocation::return#1
  to:setcursor::@3
setcursor::@3: scope:[setcursor]  from setcursor
  [159] setcursor::loc#0 = cursorLocation::return#3
  [160] setcursor::c#0 = *setcursor::loc#0
  [161] *OLDCHR = setcursor::c#0
  [162] *OLDADR = setcursor::loc#0
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@3
  [163] *CRSINH = 0
  [164] setcursor::c#1 = setcursor::c#0 ^ $80
  to:setcursor::@1
setcursor::@1: scope:[setcursor]  from setcursor::@2
  [165] *(*OLDADR) = setcursor::c#1
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@1
  [166] return 
  to:@return

void putchar(byte putchar::code)
putchar: scope:[putchar]  from cputc::@6
  [167] *(*OLDADR) = *OLDCHR
  [168] call cursorLocation 
  [169] cursorLocation::return#0 = cursorLocation::return#1
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  [170] putchar::loc#0 = cursorLocation::return#0
  [171] putchar::newChar#0 = cputc::convertToScreenCode1_return#0
  [172] *putchar::loc#0 = putchar::newChar#0
  [173] *OLDCHR = putchar::newChar#0
  [174] call setcursor 
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@1
  [175] return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@5
  [176] *ROWCRS = ++ *ROWCRS
  [177] if(*ROWCRS!=$18) goto newline::@1
  to:newline::@3
newline::@3: scope:[newline]  from newline
  [178] *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@2
newline::@2: scope:[newline]  from newline::@3
  [179] newline::start#0 = *SAVMSC
  [180] memcpy::source#0 = newline::start#0 + $28
  [181] memcpy::destination#0 = (void*)newline::start#0
  [182] call memcpy 
  to:newline::@4
newline::@4: scope:[newline]  from newline::@2
  [183] memset::str#0 = newline::start#0 + (word)$28*$17
  [184] memset::str#8 = (void*)memset::str#0
  [185] call memset 
  to:newline::@5
newline::@5: scope:[newline]  from newline::@4
  [186] *ROWCRS = $18-1
  to:newline::@1
newline::@1: scope:[newline]  from newline newline::@5
  [187] phi()
  [188] call setcursor 
  to:newline::@return
newline::@return: scope:[newline]  from newline::@1
  [189] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [190] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [191] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [191] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [192] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [193] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [194] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [195] utoa_append::digit#1 = ++ utoa_append::digit#2
  [196] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

byte* cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  [197] cursorLocation::$3 = (word)*ROWCRS
  [198] cursorLocation::$4 = cursorLocation::$3 << 2
  [199] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3
  [200] cursorLocation::$0 = cursorLocation::$5 << 3
  [201] cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  [202] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  [203] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from newline::@2
  [204] memcpy::src_end#0 = (byte*)(void*)memcpy::source#0 + memcpy::num#0
  [205] memcpy::src#4 = (byte*)(void*)memcpy::source#0
  [206] memcpy::dst#4 = (byte*)memcpy::destination#0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [207] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [207] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [208] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [209] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [210] *memcpy::dst#2 = *memcpy::src#2
  [211] memcpy::dst#1 = ++ memcpy::dst#2
  [212] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1
