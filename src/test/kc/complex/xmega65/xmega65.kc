// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP

#pragma link("xmega65.ld")

const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* COLS = 0xd800;
const char WHITE = 1;

char[] MESSAGE = "hello world!";

void main() {
    // Initialize screen memory
    *VIC_MEMORY = 0x14;

    // Print message in white
    char* sc = SCREEN;
    char* cols = COLS;
    for(char* msg = MESSAGE; *msg; msg++, sc++, cols++) {
        *sc = *msg;
        *cols = WHITE;
    }

    // Loop forever
    while(true) {
    }
}

void syscall1() {
    const char* BORDERCOL = $d020;
    (*BORDERCOL)++;
}

void syscall2() {
    const char* BGCOL = $d021;
    (*BGCOL)++;
}

#pragma data_seg(Syscall)

struct SysCall {
    char xjmp;
    void()* syscall;
    char xnop;
};

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
    { JMP, &syscall1, NOP },
    { JMP, &syscall2, NOP }
    };

export align(0x100) struct SysCall[] SYSCALL_RESET = {
    { JMP, &main, NOP }
};
