@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const word*) VXSIN#0) {{ .for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }
 }}
  kickasm(location (const word*) VYSIN#0) {{ .for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }
 }}
  to:@2
@2: scope:[]  from @1
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @2
  [5] phi()
main: scope:[main]  from @2
  [6] phi()
  [7] call initSquareTables 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [8] (byte*) main::dst#2 ← phi( main::@1/(byte*) main::dst#1 main/(const byte[$3e8]) SCREEN_COPY#0 )
  [8] (byte*) main::src#2 ← phi( main::@1/(byte*) main::src#1 main/(const byte*) SCREEN#0 )
  [9] *((byte*) main::dst#2) ← *((byte*) main::src#2)
  [10] (byte*) main::src#1 ← ++ (byte*) main::src#2
  [11] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  [12] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [13] (byte) main::i#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i#1 )
  [14] (byte) main::$25 ← (byte) main::i#2 << (byte) 1
  [15] (byte) main::$26 ← (byte) main::$25 + (byte) main::i#2
  [16] (byte) main::$27 ← (byte) main::$26 << (byte) 2
  [17] (byte~) main::$16 ← (byte) main::$27 + (byte) main::i#2
  [18] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0
  [19] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0
  [20] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0
  [21] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0
  [22] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0
  [23] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0
  [24] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE#0
  [25] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0
  [26] (byte) main::i#1 ← ++ (byte) main::i#2
  [27] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [28] phi()
  [29] call initSprites 
  to:main::@8
main::@8: scope:[main]  from main::@3
  [30] phi()
  [31] call setupRasterIrq 
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@8
  [32] phi()
  [33] call getCharToProcess 
  [34] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1
  [35] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1
  [36] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1
  to:main::@9
main::@9: scope:[main]  from main::@4
  [37] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  [38] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0
  [39] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0
  [40] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@9
  [41] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.'
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  [42] *((const byte*) COLS#0+(word) $3e7) ← ++ *((const byte*) COLS#0+(word) $3e7)
  to:main::@7
main::@5: scope:[main]  from main::@9
  [43] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0
  [44] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  [45] call startProcessing 
  to:main::@4
startProcessing: scope:[startProcessing]  from main::@5
  [46] phi()
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@8
  [47] (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) $ff startProcessing::@8/(byte~) startProcessing::freeIdx#7 )
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  [48] (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) 0 startProcessing::@3/(byte) startProcessing::i#1 )
  [49] (byte) startProcessing::$38 ← (byte) startProcessing::i#2 << (byte) 1
  [50] (byte) startProcessing::$39 ← (byte) startProcessing::$38 + (byte) startProcessing::i#2
  [51] (byte) startProcessing::$40 ← (byte) startProcessing::$39 << (byte) 2
  [52] (byte~) startProcessing::$27 ← (byte) startProcessing::$40 + (byte) startProcessing::i#2
  [53] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$27)!=(const byte) STATUS_FREE#0) goto startProcessing::@3
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@2 startProcessing::@9
  [54] (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@9/(byte~) startProcessing::freeIdx#8 startProcessing::@2/(byte) startProcessing::i#2 )
  [55] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@8
  to:startProcessing::@5
startProcessing::@5: scope:[startProcessing]  from startProcessing::@4
  [56] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0
  [57] (word) startProcessing::$42 ← (word~) startProcessing::$0 << (byte) 2
  [58] (word) startProcessing::$43 ← (word) startProcessing::$42 + (word~) startProcessing::$0
  [59] (word~) startProcessing::$1 ← (word) startProcessing::$43 << (byte) 3
  [60] (byte*~) startProcessing::$2 ← (const byte*) SCREEN#0 + (word~) startProcessing::$1
  [61] (byte*) startProcessing::screenPtr#0 ← (byte*~) startProcessing::$2 + (byte) startProcessing::center_x#0
  [62] (word~) startProcessing::$4 ← (word)(byte) startProcessing::freeIdx#2
  [63] (word~) startProcessing::$5 ← (word~) startProcessing::$4 << (byte) 6
  [64] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$5
  [65] (byte) startProcessing::ch#0 ← *((byte*~) startProcessing::$2 + (byte) startProcessing::center_x#0)
  [66] (word~) startProcessing::$7 ← (word)(byte) startProcessing::ch#0
  [67] (word~) startProcessing::$8 ← (word~) startProcessing::$7 << (byte) 3
  [68] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$8
  asm { sei  }
  [70] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0
  to:startProcessing::@6
startProcessing::@6: scope:[startProcessing]  from startProcessing::@5 startProcessing::@6
  [71] (byte) startProcessing::i1#2 ← phi( startProcessing::@5/(byte) 0 startProcessing::@6/(byte) startProcessing::i1#1 )
  [71] (byte*) startProcessing::spriteData#2 ← phi( startProcessing::@5/(byte*) startProcessing::spriteData#0 startProcessing::@6/(byte*) startProcessing::spriteData#1 )
  [71] (byte*) startProcessing::chargenData#2 ← phi( startProcessing::@5/(byte*) startProcessing::chargenData#0 startProcessing::@6/(byte*) startProcessing::chargenData#1 )
  [72] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2)
  [73] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3
  [74] (byte*) startProcessing::chargenData#1 ← ++ (byte*) startProcessing::chargenData#2
  [75] (byte) startProcessing::i1#1 ← ++ (byte) startProcessing::i1#2
  [76] if((byte) startProcessing::i1#1!=(byte) 8) goto startProcessing::@6
  to:startProcessing::@7
startProcessing::@7: scope:[startProcessing]  from startProcessing::@6
  [77] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  asm { cli  }
  [79] (word~) startProcessing::$10 ← (word)(byte) startProcessing::center_x#0
  [80] (word~) startProcessing::$11 ← (word~) startProcessing::$10 << (byte) 3
  [81] (word~) startProcessing::$12 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$11
  [82] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$12 << (byte) 4
  [83] (word~) startProcessing::$14 ← (word)(byte) startProcessing::center_y#0
  [84] (word~) startProcessing::$15 ← (word~) startProcessing::$14 << (byte) 3
  [85] (word~) startProcessing::$16 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$15
  [86] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$16 << (byte) 4
  [87] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2
  [88] (byte) startProcessing::$45 ← (byte) startProcessing::freeIdx#2 << (byte) 1
  [89] (byte) startProcessing::$46 ← (byte) startProcessing::$45 + (byte) startProcessing::freeIdx#2
  [90] (byte) startProcessing::$47 ← (byte) startProcessing::$46 << (byte) 2
  [91] (byte~) startProcessing::$28 ← (byte) startProcessing::$47 + (byte) startProcessing::freeIdx#2
  [92] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$28) ← (word) startProcessing::spriteX#0
  [93] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$28) ← (word) startProcessing::spriteY#0
  [94] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$28) ← (byte) $3c
  [95] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$28) ← (byte) $3c
  [96] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$28) ← (byte) startProcessing::freeIdx#2
  [97] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$28) ← (byte) startProcessing::spritePtr#0
  [98] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$28) ← (const byte) STATUS_NEW#0
  [99] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$28) ← (byte*) startProcessing::screenPtr#0
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@7
  [100] return 
  to:@return
startProcessing::@8: scope:[startProcessing]  from startProcessing::@4
  [101] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2
  to:startProcessing::@1
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  [102] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2
  [103] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2
  to:startProcessing::@9
startProcessing::@9: scope:[startProcessing]  from startProcessing::@3
  [104] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6
  to:startProcessing::@4
getCharToProcess: scope:[getCharToProcess]  from main::@4
  [105] phi()
  to:getCharToProcess::@1
getCharToProcess::@1: scope:[getCharToProcess]  from getCharToProcess getCharToProcess::@9
  [106] (byte) getCharToProcess::closest_y#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_y#1 )
  [106] (byte) getCharToProcess::closest_x#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_x#1 )
  [106] (word) getCharToProcess::closest_dist#8 ← phi( getCharToProcess/(const word) NOT_FOUND#0 getCharToProcess::@9/(word~) getCharToProcess::closest_dist#10 )
  [106] (byte) getCharToProcess::y#7 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::y#1 )
  [106] (byte*) getCharToProcess::screen_line#4 ← phi( getCharToProcess/(const byte[$3e8]) SCREEN_COPY#0 getCharToProcess::@9/(byte*) getCharToProcess::screen_line#1 )
  to:getCharToProcess::@2
getCharToProcess::@2: scope:[getCharToProcess]  from getCharToProcess::@1 getCharToProcess::@10
  [107] (byte) getCharToProcess::closest_y#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_y#9 getCharToProcess::@10/(byte) getCharToProcess::return_y#1 )
  [107] (byte) getCharToProcess::closest_x#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_x#9 getCharToProcess::@10/(byte) getCharToProcess::return_x#1 )
  [107] (word) getCharToProcess::closest_dist#2 ← phi( getCharToProcess::@1/(word) getCharToProcess::closest_dist#8 getCharToProcess::@10/(word~) getCharToProcess::closest_dist#12 )
  [107] (byte) getCharToProcess::x#2 ← phi( getCharToProcess::@1/(byte) 0 getCharToProcess::@10/(byte) getCharToProcess::x#1 )
  [108] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11
  to:getCharToProcess::@4
getCharToProcess::@4: scope:[getCharToProcess]  from getCharToProcess::@2
  [109] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1
  [110] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1
  [111] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14)
  [112] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12
  to:getCharToProcess::@5
getCharToProcess::@5: scope:[getCharToProcess]  from getCharToProcess::@4
  [113] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2
  [114] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7
  to:getCharToProcess::@3
getCharToProcess::@3: scope:[getCharToProcess]  from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5
  [115] (byte) getCharToProcess::return_y#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_y#7 getCharToProcess::@12/(byte) getCharToProcess::closest_y#7 getCharToProcess::@5/(byte~) getCharToProcess::return_y#7 )
  [115] (byte) getCharToProcess::return_x#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_x#7 getCharToProcess::@12/(byte) getCharToProcess::closest_x#7 getCharToProcess::@5/(byte~) getCharToProcess::return_x#7 )
  [115] (word) getCharToProcess::return_dist#1 ← phi( getCharToProcess::@11/(word~) getCharToProcess::return_dist#5 getCharToProcess::@12/(word~) getCharToProcess::return_dist#6 getCharToProcess::@5/(word) getCharToProcess::dist#0 )
  [116] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2
  [117] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10
  to:getCharToProcess::@6
getCharToProcess::@6: scope:[getCharToProcess]  from getCharToProcess::@3
  [118] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28
  [119] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7
  [120] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9
  to:getCharToProcess::@7
getCharToProcess::@7: scope:[getCharToProcess]  from getCharToProcess::@6
  [121] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return
  to:getCharToProcess::@8
getCharToProcess::@8: scope:[getCharToProcess]  from getCharToProcess::@7
  [122] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1
  [123] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2
  [124] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9
  [125] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3
  [126] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10
  [127] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' '
  to:getCharToProcess::@return
getCharToProcess::@return: scope:[getCharToProcess]  from getCharToProcess::@7 getCharToProcess::@8
  [128] return 
  to:@return
getCharToProcess::@9: scope:[getCharToProcess]  from getCharToProcess::@6
  [129] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1
  to:getCharToProcess::@1
getCharToProcess::@10: scope:[getCharToProcess]  from getCharToProcess::@3
  [130] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1
  to:getCharToProcess::@2
getCharToProcess::@12: scope:[getCharToProcess]  from getCharToProcess::@4
  [131] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
getCharToProcess::@11: scope:[getCharToProcess]  from getCharToProcess::@2
  [132] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
setupRasterIrq: scope:[setupRasterIrq]  from main::@8
  asm { sei  }
  [134] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [135] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [136] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  to:setupRasterIrq::@1
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  [137] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1
  [138] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0
  [139] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [140] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  [142] return 
  to:@return
initSprites: scope:[initSprites]  from main::@3
  [143] phi()
  to:initSprites::@1
initSprites::@1: scope:[initSprites]  from initSprites initSprites::@1
  [144] (byte*) initSprites::sp#2 ← phi( initSprites/(const byte*) SPRITE_DATA#0 initSprites::@1/(byte*) initSprites::sp#1 )
  [145] *((byte*) initSprites::sp#2) ← (byte) 0
  [146] (byte*) initSprites::sp#1 ← ++ (byte*) initSprites::sp#2
  [147] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1
  to:initSprites::@2
initSprites::@2: scope:[initSprites]  from initSprites::@1 initSprites::@2
  [148] (byte) initSprites::i#2 ← phi( initSprites::@1/(byte) 0 initSprites::@2/(byte) initSprites::i#1 )
  [149] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0
  [150] (byte) initSprites::i#1 ← ++ (byte) initSprites::i#2
  [151] if((byte) initSprites::i#1!=(byte) 8) goto initSprites::@2
  to:initSprites::@3
initSprites::@3: scope:[initSprites]  from initSprites::@2
  [152] *((const byte*) SPRITES_MC#0) ← (byte) 0
  [153] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0
  [154] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0
  to:initSprites::@return
initSprites::@return: scope:[initSprites]  from initSprites::@3
  [155] return 
  to:@return
initSquareTables: scope:[initSquareTables]  from main
  [156] phi()
  to:initSquareTables::@1
initSquareTables::@1: scope:[initSquareTables]  from initSquareTables initSquareTables::@9
  [157] (byte) initSquareTables::x#2 ← phi( initSquareTables/(byte) 0 initSquareTables::@9/(byte) initSquareTables::x#1 )
  [158] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2
  to:initSquareTables::@3
initSquareTables::@3: scope:[initSquareTables]  from initSquareTables::@1
  [159] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14
  to:initSquareTables::@4
initSquareTables::@4: scope:[initSquareTables]  from initSquareTables::@2 initSquareTables::@3
  [160] (byte) initSquareTables::x_dist#0 ← phi( initSquareTables::@2/(byte~) initSquareTables::$4 initSquareTables::@3/(byte~) initSquareTables::$2 )
  [161] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0
  [162] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  [163] call mul8u 
  [164] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:initSquareTables::@9
initSquareTables::@9: scope:[initSquareTables]  from initSquareTables::@4
  [165] (word~) initSquareTables::$6 ← (word) mul8u::return#2
  [166] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1
  [167] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6
  [168] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2
  [169] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1
  to:initSquareTables::@5
initSquareTables::@5: scope:[initSquareTables]  from initSquareTables::@10 initSquareTables::@9
  [170] (byte) initSquareTables::y#2 ← phi( initSquareTables::@10/(byte) initSquareTables::y#1 initSquareTables::@9/(byte) 0 )
  [171] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6
  to:initSquareTables::@7
initSquareTables::@7: scope:[initSquareTables]  from initSquareTables::@5
  [172] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c
  to:initSquareTables::@8
initSquareTables::@8: scope:[initSquareTables]  from initSquareTables::@6 initSquareTables::@7
  [173] (byte) initSquareTables::y_dist#0 ← phi( initSquareTables::@6/(byte~) initSquareTables::$12 initSquareTables::@7/(byte~) initSquareTables::$10 )
  [174] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0
  [175] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  [176] call mul8u 
  [177] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:initSquareTables::@10
initSquareTables::@10: scope:[initSquareTables]  from initSquareTables::@8
  [178] (word~) initSquareTables::$14 ← (word) mul8u::return#3
  [179] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1
  [180] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14
  [181] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2
  [182] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5
  to:initSquareTables::@return
initSquareTables::@return: scope:[initSquareTables]  from initSquareTables::@10
  [183] return 
  to:@return
initSquareTables::@6: scope:[initSquareTables]  from initSquareTables::@5
  [184] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2
  to:initSquareTables::@8
initSquareTables::@2: scope:[initSquareTables]  from initSquareTables::@1
  [185] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2
  to:initSquareTables::@4
mul8u: scope:[mul8u]  from initSquareTables::@4 initSquareTables::@8
  [186] (byte) mul8u::a#6 ← phi( initSquareTables::@8/(byte) mul8u::a#2 initSquareTables::@4/(byte) mul8u::a#1 )
  [186] (word) mul8u::mb#0 ← phi( initSquareTables::@8/(byte) mul8u::b#1 initSquareTables::@4/(byte) mul8u::b#0 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [187] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [187] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [187] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [188] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [189] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [190] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [191] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [192] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [193] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [194] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [195] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
irqBottom: scope:[irqBottom]  from
  [196] phi()
  to:irqBottom::@1
irqBottom::@1: scope:[irqBottom]  from irqBottom irqBottom::@1
  [197] (byte) irqBottom::i#2 ← phi( irqBottom/(byte) 0 irqBottom::@1/(byte) irqBottom::i#1 )
  [198] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2
  [199] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1
  to:irqBottom::@2
irqBottom::@2: scope:[irqBottom]  from irqBottom::@1
  [200] phi()
  [201] call processChars 
  to:irqBottom::@3
irqBottom::@3: scope:[irqBottom]  from irqBottom::@2
  [202] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0
  [203] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop()
  [204] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@return: scope:[irqBottom]  from irqBottom::@3
  [205] return 
  to:@return
processChars: scope:[processChars]  from irqBottom::@2
  [206] phi()
  to:processChars::@1
processChars::@1: scope:[processChars]  from processChars processChars::@2
  [207] (byte) processChars::i#10 ← phi( processChars/(byte) 0 processChars::@2/(byte) processChars::i#1 )
  [208] (byte) processChars::$64 ← (byte) processChars::i#10 << (byte) 1
  [209] (byte) processChars::$65 ← (byte) processChars::$64 + (byte) processChars::i#10
  [210] (byte) processChars::$66 ← (byte) processChars::$65 << (byte) 2
  [211] (byte~) processChars::$36 ← (byte) processChars::$66 + (byte) processChars::i#10
  [212] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$36
  [213] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)
  [214] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE#0) goto processChars::@2
  to:processChars::@9
processChars::@9: scope:[processChars]  from processChars::@1
  [215] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW#0) goto processChars::@3
  to:processChars::@10
processChars::@10: scope:[processChars]  from processChars::@9
  [216] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' '
  [217] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0
  [218] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR)
  [219] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING#0
  to:processChars::@3
processChars::@3: scope:[processChars]  from processChars::@10 processChars::@9
  [220] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4
  [221] (byte~) processChars::$10 ← > (word) processChars::xpos#0
  [222] if((byte) 0!=(byte~) processChars::$10) goto processChars::@4
  to:processChars::@7
processChars::@7: scope:[processChars]  from processChars::@3
  [223] (byte~) processChars::$11 ← (byte) $ff ^ (byte) processChars::bitmask#0
  [224] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$11
  to:processChars::@5
processChars::@5: scope:[processChars]  from processChars::@4 processChars::@7
  [225] (byte~) processChars::$16 ← (byte) processChars::i#10 << (byte) 1
  [226] (byte~) processChars::$13 ← (byte)(word) processChars::xpos#0
  [227] *((const byte*) SPRITES_XPOS#0 + (byte~) processChars::$16) ← (byte~) processChars::$13
  [228] (word~) processChars::$14 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4
  [229] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$14
  [230] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$16) ← (byte) processChars::ypos#0
  [231] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6
  to:processChars::@13
processChars::@13: scope:[processChars]  from processChars::@5
  [232] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6
  to:processChars::@12
processChars::@12: scope:[processChars]  from processChars::@13
  [233] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6
  to:processChars::@11
processChars::@11: scope:[processChars]  from processChars::@12
  [234] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6
  to:processChars::@8
processChars::@8: scope:[processChars]  from processChars::@11
  [235] (word~) processChars::$24 ← (word) processChars::xpos#0 >> (byte) 3
  [236] (byte~) processChars::$25 ← (byte)(word~) processChars::$24
  [237] (byte) processChars::xchar#0 ← (byte~) processChars::$25 - (const byte) BORDER_XPOS_LEFT#0/(byte) 8
  [238] (byte~) processChars::$37 ← (byte) processChars::xchar#0 << (byte) 1
  [239] (word~) processChars::$28 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word*) VXSIN#0 + (byte~) processChars::$37)
  [240] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← (word~) processChars::$28
  [241] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX)
  [242] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3
  [243] (byte) processChars::ychar#0 ← (byte~) processChars::$30 - (const byte) BORDER_YPOS_TOP#0/(byte) 8
  [244] (byte~) processChars::$38 ← (byte) processChars::ychar#0 << (byte) 1
  [245] (word~) processChars::$33 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word*) VYSIN#0 + (byte~) processChars::$38)
  [246] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← (word~) processChars::$33
  [247] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY)
  to:processChars::@2
processChars::@2: scope:[processChars]  from processChars::@1 processChars::@6 processChars::@8
  [248] (byte) processChars::i#1 ← ++ (byte) processChars::i#10
  [249] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1
  to:processChars::@return
processChars::@return: scope:[processChars]  from processChars::@2
  [250] return 
  to:@return
processChars::@6: scope:[processChars]  from processChars::@11 processChars::@12 processChars::@13 processChars::@5
  [251] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE#0
  [252] (byte~) processChars::$34 ← (byte) $ff ^ (byte) processChars::bitmask#0
  [253] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$34
  to:processChars::@2
processChars::@4: scope:[processChars]  from processChars::@3
  [254] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0
  to:processChars::@5
irqTop: scope:[irqTop]  from
  [255] phi()
  to:irqTop::@1
irqTop::@1: scope:[irqTop]  from irqTop irqTop::@1
  [256] (byte) irqTop::i#2 ← phi( irqTop/(byte) 0 irqTop::@1/(byte) irqTop::i#1 )
  [257] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2
  [258] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1
  to:irqTop::@2
irqTop::@2: scope:[irqTop]  from irqTop::@1 irqTop::@2
  [259] (byte) irqTop::i1#2 ← phi( irqTop::@1/(byte) 0 irqTop::@2/(byte) irqTop::i1#1 )
  [260] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2
  [261] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@2
  to:irqTop::@3
irqTop::@3: scope:[irqTop]  from irqTop::@2
  [262] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0
  [263] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom()
  [264] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@return: scope:[irqTop]  from irqTop::@3
  [265] return 
  to:@return
