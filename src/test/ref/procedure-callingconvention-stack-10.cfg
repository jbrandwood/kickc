@begin: scope:[]  from
  [0] (byte) idx ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] callprepare main 
  [2] callexecute main 
  [3] callfinalize main 
  to:@end
@end: scope:[]  from @1
  [4] phi()

__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from
  [5] (byte) print::p_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_P_X)
  [6] (byte) print::p_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_P_Y)
  [7] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0
  [8] (byte) idx ← ++ (byte) idx
  [9] *((const byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0
  [10] (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  [11] return 
  to:@return

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  [12] (byte) get::i#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I)
  [13] (byte~) get::$0 ← (byte) get::i#0 >> (byte) 1
  [14] *((byte*)&(struct Point) get::p) ← (byte) get::i#0
  [15] *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) get::$0
  [16] (byte) get::return_x#0 ← *((byte*)&(struct Point) get::p)
  [17] (byte) get::return_y#0 ← *((byte*)&(struct Point) get::p+(const byte) OFFSET_STRUCT_POINT_Y)
  to:get::@return
get::@return: scope:[get]  from get
  [18] return { (byte) get::return_x#0, (byte) get::return_y#0 }
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [19] (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [20] if((byte) main::i<(byte) 5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [21] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [22] callprepare get (byte) main::i 
  [23] callexecute get 
  [24] { (byte~) main::$1_x, (byte~) main::$1_y } ← callfinalize get 
  [25] *((byte*)&(struct Point) main::p) ← (byte~) main::$1_x
  [26] *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte~) main::$1_y
  [27] callprepare print *((byte*)&(struct Point) main::p) *((byte*)&(struct Point) main::p+(const byte) OFFSET_STRUCT_POINT_Y) 
  [28] callexecute print 
  [29] callfinalize print 
  [30] (byte) main::i ← ++ (byte) main::i
  to:main::@1
