
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [2] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [3] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [4] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [5] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::@2
main::@2: scope:[main]  from main::vicSelectGfxBank1_@1
  [7] *((const nomodify byte*) D016) ← (const nomodify byte) VIC_CSEL
  to:main::toD0181
main::toD0181: scope:[main]  from main::@2
  [8] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [9] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [10] call bitmap_init 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] phi()
  [12] call bitmap_clear 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] phi()
  [14] call sin16s_gen2 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [15] phi()
  [16] call render_sine 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@6
  [17] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR)
  to:main::@1

(void()) render_sine()
render_sine: scope:[render_sine]  from main::@6
  [18] phi()
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@3
  [19] (word) render_sine::xpos#3 ← phi( render_sine/(word) 0 render_sine::@3/(word) render_sine::xpos#9 )
  [19] (word) render_sine::sin_idx#2 ← phi( render_sine/(word) 0 render_sine::@3/(word) render_sine::sin_idx#1 )
  [20] if((word) render_sine::sin_idx#2<(const nomodify word) SIN_SIZE) goto render_sine::@2
  to:render_sine::@return
render_sine::@return: scope:[render_sine]  from render_sine::@1
  [21] return 
  to:@return
render_sine::@2: scope:[render_sine]  from render_sine::@1
  [22] (word~) render_sine::$10 ← (word) render_sine::sin_idx#2 << (byte) 1
  [23] (signed word*~) render_sine::$1 ← (const signed word*) sin + (word~) render_sine::$10
  [24] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1)
  [25] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0
  [26] call wrap_y 
  [27] (byte) wrap_y::return#0 ← (byte) wrap_y::return#2
  to:render_sine::@4
render_sine::@4: scope:[render_sine]  from render_sine::@2
  [28] (byte) render_sine::ypos#0 ← (byte) wrap_y::return#0
  [29] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3
  [30] (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0
  [31] call bitmap_plot 
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@4
  [32] (word~) render_sine::$11 ← (word) render_sine::sin_idx#2 << (byte) 1
  [33] (signed word*~) render_sine::$4 ← (const signed word*) sin2 + (word~) render_sine::$11
  [34] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$4)
  [35] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (signed byte) $a
  [36] call wrap_y 
  [37] (byte) wrap_y::return#1 ← (byte) wrap_y::return#2
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  [38] (byte) render_sine::ypos2#0 ← (byte) wrap_y::return#1
  [39] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3
  [40] (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0
  [41] call bitmap_plot 
  to:render_sine::@7
render_sine::@7: scope:[render_sine]  from render_sine::@6
  [42] (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#3
  [43] if((word) render_sine::xpos#1!=(word) $140) goto render_sine::@8
  to:render_sine::@3
render_sine::@8: scope:[render_sine]  from render_sine::@7
  [44] phi()
  to:render_sine::@3
render_sine::@3: scope:[render_sine]  from render_sine::@7 render_sine::@8
  [45] (word) render_sine::xpos#9 ← phi( render_sine::@7/(byte) 0 render_sine::@8/(word) render_sine::xpos#1 )
  [46] (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#2
  to:render_sine::@1

(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from render_sine::@4 render_sine::@6
  [47] (word) bitmap_plot::x#2 ← phi( render_sine::@4/(word) bitmap_plot::x#0 render_sine::@6/(word) bitmap_plot::x#1 )
  [47] (byte) bitmap_plot::y#2 ← phi( render_sine::@4/(byte) bitmap_plot::y#0 render_sine::@6/(byte) bitmap_plot::y#1 )
  [48] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#2) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#2)
  [49] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#2 & (word) $fff8
  [50] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0
  [51] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#2
  [52] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [53] return 
  to:@return

(byte()) wrap_y((signed word) wrap_y::y)
wrap_y: scope:[wrap_y]  from render_sine::@2 render_sine::@5
  [54] (signed word) wrap_y::y#9 ← phi( render_sine::@2/(signed word) wrap_y::y#0 render_sine::@5/(signed word) wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  [55] (signed word) wrap_y::y#4 ← phi( wrap_y/(signed word) wrap_y::y#9 wrap_y::@2/(signed word) wrap_y::y#2 )
  [56] if((signed word) wrap_y::y#4>=(signed word) $c8) goto wrap_y::@2
  to:wrap_y::@3
wrap_y::@3: scope:[wrap_y]  from wrap_y::@1 wrap_y::@4
  [57] (signed word) wrap_y::y#6 ← phi( wrap_y::@1/(signed word) wrap_y::y#4 wrap_y::@4/(signed word) wrap_y::y#3 )
  [58] if((signed word) wrap_y::y#6<(signed byte) 0) goto wrap_y::@4
  to:wrap_y::@5
wrap_y::@5: scope:[wrap_y]  from wrap_y::@3
  [59] (byte) wrap_y::return#2 ← (byte)(signed word) wrap_y::y#6
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@5
  [60] return 
  to:@return
wrap_y::@4: scope:[wrap_y]  from wrap_y::@3
  [61] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (signed word) $c8
  to:wrap_y::@3
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  [62] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (signed word) $c8
  to:wrap_y::@1

(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
sin16s_gen2: scope:[sin16s_gen2]  from main::@5
  [63] phi()
  [64] call div32u16u 
  [65] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [66] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [67] (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@3/(const signed word*) sin sin16s_gen2::@5/(signed word*) sin16s_gen2::sintab#0 )
  [67] (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@3/(dword) 0 sin16s_gen2::@5/(dword) sin16s_gen2::x#1 )
  [67] (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@3/(word) 0 sin16s_gen2::@5/(word) sin16s_gen2::i#1 )
  [68] if((word) sin16s_gen2::i#2<(const nomodify word) SIN_SIZE) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [69] return 
  to:@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [70] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  [71] call sin16s 
  [72] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  [73] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  [74] call mul16s 
  [75] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [76] (signed dword~) sin16s_gen2::$6 ← (signed dword) mul16s::return#2
  [77] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$6
  [78] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8
  [79] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [80] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0
  [81] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  to:sin16s_gen2::@1

(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  [82] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0
  [83] call mul16u 
  [84] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s
  [85] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [86] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@4
  [87] (word~) mul16s::$6 ← > (dword) mul16s::m#0
  [88] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(const signed word) sin16s_gen2::ampl#0
  [89] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@4
  [90] (dword) mul16s::m#4 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@4/(dword) mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [91] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [92] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [93] (word) mul16u::a#6 ← phi( mul16s/(word) mul16u::a#1 mulu16_sel/(word) mul16u::a#2 )
  [93] (word) mul16u::b#2 ← phi( mul16s/(word)(const signed word) sin16s_gen2::ampl#0 mulu16_sel/(word) mul16u::b#1 )
  [94] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [95] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [95] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [95] (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@3/(word) mul16u::a#0 )
  [96] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [97] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [98] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1
  [99] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [100] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [101] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [102] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte) 1
  [103] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  [104] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [105] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [106] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [106] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [107] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [108] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [109] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [110] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [111] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [112] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [113] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [114] call mulu16_sel 
  [115] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [116] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [117] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [118] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [119] call mulu16_sel 
  [120] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [121] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [122] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [123] call mulu16_sel 
  [124] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [125] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [126] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [127] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [128] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [129] call mulu16_sel 
  [130] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [131] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [132] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [133] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [134] call mulu16_sel 
  [135] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [136] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [137] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [138] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [139] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [140] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [141] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [142] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [143] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [144] (byte) mulu16_sel::select#5 ← phi( sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 sin16s::@9/(byte) 0 )
  [144] (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 sin16s::@9/(word) mulu16_sel::v2#3 )
  [144] (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16s::@9/(word) mulu16_sel::v1#3 )
  [145] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  [146] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  [147] call mul16u 
  [148] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [149] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  [150] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [151] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [152] return 
  to:@return

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [153] phi()
  [154] call divr16u 
  [155] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [156] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [157] (word) divr16u::rem#4 ← (word) rem16u#0
  [158] call divr16u 
  [159] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [160] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [161] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [162] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [163] (word) divr16u::dividend#5 ← phi( div32u16u/>(const nomodify dword) PI2_u4f28 div32u16u::@1/<(const nomodify dword) PI2_u4f28 )
  [163] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [164] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [164] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [164] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [164] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [165] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [166] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [167] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [168] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [169] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [170] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [171] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [172] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [173] if((word) divr16u::rem#6<(const nomodify word) SIN_SIZE) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [174] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [175] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const nomodify word) SIN_SIZE
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [176] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [176] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [177] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [178] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [179] (word) rem16u#0 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [180] return 
  to:@return

(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@4
  [181] phi()
  [182] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [183] phi()
  [184] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [185] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [186] (byte) memset::c#4 ← phi( bitmap_clear/(const byte) bitmap_clear::col#0 bitmap_clear::@1/(byte) 0 )
  [186] (void*) memset::str#3 ← phi( bitmap_clear/(void*)(const byte*) SCREEN bitmap_clear::@1/(void*)(const byte*) BITMAP )
  [186] (word) memset::num#2 ← phi( bitmap_clear/(word) $3e8 bitmap_clear::@1/(word) $1f40 )
  [187] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [188] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [189] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [190] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [191] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [192] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [193] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [194] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@3
  [195] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [196] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [196] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [197] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [198] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [199] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [200] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [201] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [202] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [203] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [204] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(const byte*) BITMAP bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [204] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [205] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
  [206] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [207] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4
  [208] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [209] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [210] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [211] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [212] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [213] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [214] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [215] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [216] return 
  to:@return
