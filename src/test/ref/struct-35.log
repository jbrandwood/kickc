Setting struct to load/store in variable affected by address-of main::p2 = &point2

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *main::p2 = memcpy(*(&point1), struct Point, SIZEOF_STRUCT_POINT)
  SCREEN[0] = *((byte*)&point2+OFFSET_STRUCT_POINT_X)
  SCREEN[1] = *((byte*)&point2+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte OFFSET_STRUCT_POINT_X = 0
constant byte OFFSET_STRUCT_POINT_Y = 1
constant byte* const SCREEN = (byte*)$400
constant byte SIZEOF_STRUCT_POINT = 2
void __start()
void main()
constant struct Point* main::p2 = &point2
struct Point point1 loadstore = { x: 2, y: 3 }
volatile struct Point point2 loadstore = {}

Adding number conversion cast (unumber) 0 in SCREEN[0] = *((byte*)&point2+OFFSET_STRUCT_POINT_X)
Adding number conversion cast (unumber) 1 in SCREEN[1] = *((byte*)&point2+OFFSET_STRUCT_POINT_Y)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero (byte*)&point2 in [1] SCREEN[0] = *((byte*)&point2+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero SCREEN in [1] SCREEN[0] = *((byte*)&point2)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::p2 = memcpy(*(&point1), struct Point, SIZEOF_STRUCT_POINT)
  [1] *SCREEN = *((byte*)&point2)
  [2] *(SCREEN+1) = *((byte*)&point2+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
struct Point point1 loadstore = { x: 2, y: 3 }
volatile struct Point point2 loadstore = {}

Initial phi equivalence classes
Added variable point1 to live range equivalence class [ point1 ]
Added variable point2 to live range equivalence class [ point2 ]
Complete equivalence classes
[ point1 ]
[ point2 ]
Allocated mem[2] [ point1 ]
Allocated mem[2] [ point2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::p2 = memcpy(*(&point1), struct Point, SIZEOF_STRUCT_POINT) [ point2 ] (  [ point2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] *SCREEN = *((byte*)&point2) [ point2 ] (  [ point2 ] { }  ) always clobbers reg byte a 
Statement [2] *(SCREEN+1) = *((byte*)&point2+OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers mem[2] [ point1 ] : mem[2] , 
Potential registers mem[2] [ point2 ] : mem[2] , 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 0: mem[2] [ point1 ] 0: mem[2] [ point2 ] 

Uplifting [Point] best 41 combination 
Uplifting [main] best 41 combination 
Uplifting [] best 41 combination mem[2] [ point1 ] mem[2] [ point2 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - copy assignment through struct pointer
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-35.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label p2 = point2
    // [0] *main::p2 = memcpy(*(&point1), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda point1-1,y
    sta p2-1,y
    dey
    bne !-
    // [1] *SCREEN = *((byte*)&point2) -- _deref_pbuc1=_deref_pbuc2 
    lda point2
    sta SCREEN
    // [2] *(SCREEN+1) = *((byte*)&point2+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda point2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
.segment Data
  point1: .byte 2, 3
  point2: .fill SIZEOF_STRUCT_POINT, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte OFFSET_STRUCT_POINT_Y = 1
constant byte* const SCREEN = (byte*) 1024
constant byte SIZEOF_STRUCT_POINT = 2
void main()
constant struct Point* main::p2 = &point2
struct Point point1 loadstore mem[2] = { x: 2, y: 3 }
volatile struct Point point2 loadstore mem[2] = {}

mem[2] [ point1 ]
mem[2] [ point2 ]


FINAL ASSEMBLER
Score: 38

  // File Comments
// Minimal struct with C-Standard behavior - copy assignment through struct pointer
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-35.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label p2 = point2
    // *p2 = point1
    // [0] *main::p2 = memcpy(*(&point1), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda point1-1,y
    sta p2-1,y
    dey
    bne !-
    // SCREEN[0] = point2.x
    // [1] *SCREEN = *((byte*)&point2) -- _deref_pbuc1=_deref_pbuc2 
    lda point2
    sta SCREEN
    // SCREEN[1] = point2.y
    // [2] *(SCREEN+1) = *((byte*)&point2+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda point2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data
.segment Data
  point1: .byte 2, 3
  point2: .fill SIZEOF_STRUCT_POINT, 0

