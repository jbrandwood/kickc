Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  nxt#17 = phi( __start::@1/nxt#16 )
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#3 = phi( main/main::i#0, main::@2/main::i#1 )
  nxt#15 = phi( main/nxt#17, main::@2/nxt#0 )
  call next_char
  next_char::return#0 = next_char::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::i#2 = phi( main::@1/main::i#3 )
  nxt#8 = phi( main::@1/nxt#4 )
  next_char::return#3 = phi( main::@1/next_char::return#0 )
  main::$0 = next_char::return#3
  nxt#0 = nxt#8
  main::SCREEN[main::i#2] = main::$0
  main::i#1 = main::i#2 + rangenext(0,$ff)
  main::$1 = main::i#1 != rangelast(0,$ff)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  nxt#9 = phi( main::@2/nxt#0 )
  nxt#1 = nxt#9
  return 
  to:@return

char next_char()
next_char: scope:[next_char]  from main::@1
  nxt#10 = phi( main::@1/nxt#15 )
  next_char::c#0 = *nxt#10
  next_char::$0 = next_char::c#0 == 0
  next_char::$1 = ! next_char::$0
  if(next_char::$1) goto next_char::@1
  to:next_char::@2
next_char::@1: scope:[next_char]  from next_char next_char::@2
  next_char::c#2 = phi( next_char/next_char::c#0, next_char::@2/next_char::c#1 )
  nxt#11 = phi( next_char/nxt#10, next_char::@2/nxt#3 )
  nxt#2 = ++ nxt#11
  next_char::return#1 = next_char::c#2
  to:next_char::@return
next_char::@2: scope:[next_char]  from next_char
  nxt#3 = TEXT
  next_char::c#1 = *nxt#3
  to:next_char::@1
next_char::@return: scope:[next_char]  from next_char::@1
  nxt#12 = phi( next_char::@1/nxt#2 )
  next_char::return#4 = phi( next_char::@1/next_char::return#1 )
  next_char::return#2 = next_char::return#4
  nxt#4 = nxt#12
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  nxt#5 = TEXT
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  nxt#16 = phi( __start::__init1/nxt#5 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  nxt#13 = phi( __start::@1/nxt#1 )
  nxt#6 = nxt#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  nxt#14 = phi( __start::@2/nxt#6 )
  nxt#7 = nxt#14
  return 
  to:@return

SYMBOL TABLE SSA
__constant char *TEXT = "cml "
void __start()
void main()
char main::$0
bool main::$1
__constant char *main::SCREEN = (char *)$400
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char next_char()
bool next_char::$0
bool next_char::$1
char next_char::c
char next_char::c#0
char next_char::c#1
char next_char::c#2
char next_char::return
char next_char::return#0
char next_char::return#1
char next_char::return#2
char next_char::return#3
char next_char::return#4
char *nxt
char *nxt#0
char *nxt#1
char *nxt#10
char *nxt#11
char *nxt#12
char *nxt#13
char *nxt#14
char *nxt#15
char *nxt#16
char *nxt#17
char *nxt#2
char *nxt#3
char *nxt#4
char *nxt#5
char *nxt#6
char *nxt#7
char *nxt#8
char *nxt#9

Adding number conversion cast (unumber) 0 in next_char::$0 = next_char::c#0 == 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [18] next_char::$1 = next_char::c#0 != 0 from [17] next_char::$0 = next_char::c#0 == 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias next_char::return#0 = next_char::return#3 
Alias main::i#2 = main::i#3 
Alias nxt#0 = nxt#8 nxt#9 nxt#1 
Alias next_char::return#1 = next_char::c#2 next_char::return#4 next_char::return#2 
Alias nxt#12 = nxt#2 nxt#4 
Alias nxt#16 = nxt#5 
Alias nxt#13 = nxt#6 nxt#14 nxt#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values nxt#17 nxt#16
Identical Phi Values nxt#0 nxt#12
Identical Phi Values nxt#10 nxt#15
Identical Phi Values nxt#13 nxt#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [10] if(main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition next_char::$1 [15] if(next_char::c#0!=0) goto next_char::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant nxt#3 = TEXT
Constant nxt#16 = TEXT
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to 0
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [6] if(main::i#1!=0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings nxt#3
Inlining constant with var siblings nxt#16
Constant inlined nxt#3 = TEXT
Constant inlined main::i#0 = 0
Constant inlined nxt#16 = TEXT
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Added new block during phi lifting next_char::@3(between next_char and next_char::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to next_char:2 

Created 4 initial phi equivalence classes
Coalesced [9] nxt#18 = nxt#12
Coalesced [10] main::i#4 = main::i#1
Coalesced [14] next_char::return#6 = next_char::c#1
Coalesced [18] nxt#19 = nxt#15
Coalesced [19] next_char::return#5 = next_char::c#0
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label next_char::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [1] nxt#15 = phi( main/TEXT, main::@2/nxt#12 )
  [2] call next_char
  [3] next_char::return#0 = next_char::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] main::$0 = next_char::return#0
  [5] main::SCREEN[main::i#2] = main::$0
  [6] main::i#1 = ++ main::i#2
  [7] if(main::i#1!=0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return 
  to:@return

char next_char()
next_char: scope:[next_char]  from main::@1
  [9] next_char::c#0 = *nxt#15
  [10] if(next_char::c#0!=0) goto next_char::@1
  to:next_char::@2
next_char::@2: scope:[next_char]  from next_char
  [11] next_char::c#1 = *TEXT
  to:next_char::@1
next_char::@1: scope:[next_char]  from next_char next_char::@2
  [12] next_char::return#1 = phi( next_char/next_char::c#0, next_char::@2/next_char::c#1 )
  [12] nxt#11 = phi( next_char/nxt#15, next_char::@2/TEXT )
  [13] nxt#12 = ++ nxt#11
  to:next_char::@return
next_char::@return: scope:[next_char]  from next_char::@1
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$0 // 22.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 6.6000000000000005
char next_char()
char next_char::c
char next_char::c#0 // 151.5
char next_char::c#1 // 202.0
char next_char::return
char next_char::return#0 // 22.0
char next_char::return#1 // 53.25
char *nxt
char *nxt#11 // 202.0
char *nxt#12 // 14.0
char *nxt#15 // 71.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ nxt#11 nxt#15 nxt#12 ]
[ next_char::return#1 next_char::c#0 next_char::c#1 ]
Added variable next_char::return#0 to live range equivalence class [ next_char::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ nxt#11 nxt#15 nxt#12 ]
[ next_char::return#1 next_char::c#0 next_char::c#1 ]
[ next_char::return#0 ]
[ main::$0 ]
Allocated zp[1]:2 [ next_char::return#1 next_char::c#0 next_char::c#1 ]
Allocated zp[2]:3 [ nxt#11 nxt#15 nxt#12 ]
Allocated zp[1]:5 [ main::i#2 main::i#1 ]
Allocated zp[1]:6 [ next_char::return#0 ]
Allocated zp[1]:7 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] next_char::c#0 = *nxt#15 [ nxt#15 next_char::c#0 ] ( next_char:2 [ main::i#2 nxt#15 next_char::c#0 ] { { next_char::return#0 = next_char::return#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::i#2 main::i#1 ]
Statement [9] next_char::c#0 = *nxt#15 [ nxt#15 next_char::c#0 ] ( next_char:2 [ main::i#2 nxt#15 next_char::c#0 ] { { next_char::return#0 = next_char::return#1 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:5 [ main::i#2 main::i#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:3 [ nxt#11 nxt#15 nxt#12 ] : zp[2]:3 , 
Potential registers zp[1]:2 [ next_char::return#1 next_char::c#0 next_char::c#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ next_char::return#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [next_char] 406.75: zp[1]:2 [ next_char::return#1 next_char::c#0 next_char::c#1 ] 22: zp[1]:6 [ next_char::return#0 ] 
Uplift Scope [] 287: zp[2]:3 [ nxt#11 nxt#15 nxt#12 ] 
Uplift Scope [main] 23.1: zp[1]:5 [ main::i#2 main::i#1 ] 22: zp[1]:7 [ main::$0 ] 

Uplifting [next_char] best 638 combination reg byte x [ next_char::return#1 next_char::c#0 next_char::c#1 ] reg byte x [ next_char::return#0 ] 
Uplifting [] best 638 combination zp[2]:3 [ nxt#11 nxt#15 nxt#12 ] 
Uplifting [main] best 598 combination zp[1]:5 [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::i#2 main::i#1 ]
Uplifting [main] best 598 combination zp[1]:5 [ main::i#2 main::i#1 ] 
Allocated (was zp[2]:3) zp[2]:2 [ nxt#11 nxt#15 nxt#12 ]
Allocated (was zp[1]:5) zp[1]:4 [ main::i#2 main::i#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Clobber problem in next_char return value
  // Upstart
  // Commodore 64 PRG executable file
.file [name="scrollbig-clobber.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label nxt = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label i = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi nxt#15 = TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi nxt#15 = nxt#12 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] call next_char
    jsr next_char
    // [3] next_char::return#0 = next_char::return#1
    jmp __b2
    // main::@2
  __b2:
    // [4] main::$0 = next_char::return#0 -- vbuaa=vbuxx 
    txa
    // [5] main::SCREEN[main::i#2] = main::$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta SCREEN,y
    // [6] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] if(main::i#1!=0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // next_char
// Find the next char of the text
next_char: {
    // [9] next_char::c#0 = *nxt#15 -- vbuxx=_deref_pbuz1 
    ldy #0
    lda (nxt),y
    tax
    // [10] if(next_char::c#0!=0) goto next_char::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from_next_char
    jmp __b2
    // next_char::@2
  __b2:
    // [11] next_char::c#1 = *TEXT -- vbuxx=_deref_pbuc1 
    ldx TEXT
    // [12] phi from next_char::@2 to next_char::@1 [phi:next_char::@2->next_char::@1]
  __b1_from___b2:
    // [12] phi next_char::return#1 = next_char::c#1 [phi:next_char::@2->next_char::@1#0] -- register_copy 
    // [12] phi nxt#11 = TEXT [phi:next_char::@2->next_char::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // [12] phi from next_char to next_char::@1 [phi:next_char->next_char::@1]
  __b1_from_next_char:
    // [12] phi next_char::return#1 = next_char::c#0 [phi:next_char->next_char::@1#0] -- register_copy 
    // [12] phi nxt#11 = nxt#15 [phi:next_char->next_char::@1#1] -- register_copy 
    jmp __b1
    // next_char::@1
  __b1:
    // [13] nxt#12 = ++ nxt#11 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    jmp __breturn
    // next_char::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
.segment Data
  TEXT: .text "cml "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_next_char with __b1
Removing instruction __b1_from___b2:
Removing instruction __b1_from_next_char:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char *TEXT = "cml "
void main()
char main::$0 // reg byte a 22.0
__constant char *main::SCREEN = (char *) 1024
char main::i
char main::i#1 // i zp[1]:4 16.5
char main::i#2 // i zp[1]:4 6.6000000000000005
char next_char()
char next_char::c
char next_char::c#0 // reg byte x 151.5
char next_char::c#1 // reg byte x 202.0
char next_char::return
char next_char::return#0 // reg byte x 22.0
char next_char::return#1 // reg byte x 53.25
char *nxt
char *nxt#11 // nxt zp[2]:2 202.0
char *nxt#12 // nxt zp[2]:2 14.0
char *nxt#15 // nxt zp[2]:2 71.0

zp[1]:4 [ main::i#2 main::i#1 ]
zp[2]:2 [ nxt#11 nxt#15 nxt#12 ]
reg byte x [ next_char::return#1 next_char::c#0 next_char::c#1 ]
reg byte x [ next_char::return#0 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 466

  // File Comments
// Clobber problem in next_char return value
  // Upstart
  // Commodore 64 PRG executable file
.file [name="scrollbig-clobber.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label nxt = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label i = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi nxt#15 = TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi nxt#15 = nxt#12 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // next_char()
    // [2] call next_char
    jsr next_char
    // [3] next_char::return#0 = next_char::return#1
    // main::@2
    // [4] main::$0 = next_char::return#0 -- vbuaa=vbuxx 
    txa
    // SCREEN[i] = next_char()
    // [5] main::SCREEN[main::i#2] = main::$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta SCREEN,y
    // for( byte i: 0..255)
    // [6] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] if(main::i#1!=0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    bne __b1
    // main::@return
    // }
    // [8] return 
    rts
}
  // next_char
// Find the next char of the text
next_char: {
    // byte c = *nxt
    // [9] next_char::c#0 = *nxt#15 -- vbuxx=_deref_pbuz1 
    ldy #0
    lda (nxt),y
    tax
    // if(c==0)
    // [10] if(next_char::c#0!=0) goto next_char::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // next_char::@2
    // c = *nxt
    // [11] next_char::c#1 = *TEXT -- vbuxx=_deref_pbuc1 
    ldx TEXT
    // [12] phi from next_char::@2 to next_char::@1 [phi:next_char::@2->next_char::@1]
    // [12] phi next_char::return#1 = next_char::c#1 [phi:next_char::@2->next_char::@1#0] -- register_copy 
    // [12] phi nxt#11 = TEXT [phi:next_char::@2->next_char::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // [12] phi from next_char to next_char::@1 [phi:next_char->next_char::@1]
    // [12] phi next_char::return#1 = next_char::c#0 [phi:next_char->next_char::@1#0] -- register_copy 
    // [12] phi nxt#11 = nxt#15 [phi:next_char->next_char::@1#1] -- register_copy 
    // next_char::@1
  __b1:
    // nxt++;
    // [13] nxt#12 = ++ nxt#11 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    // next_char::@return
    // }
    // [14] return 
    rts
}
  // File Data
.segment Data
  TEXT: .text "cml "
  .byte 0

