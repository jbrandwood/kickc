
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] scroll_y = 0
  [2] vblank_hit = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

interrupt(HARDWARE_STACK) void vblank()
vblank: scope:[vblank]  from
  [6] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = 0
  [7] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) = scroll_y
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  [8] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR) = 0
  [9] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA) = >SPRITE_BUFFER
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  [10] vblank_hit = ++ vblank_hit
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1
  [11] return 
  to:@return

signed word main()
main: scope:[main]  from __start::@1
  [12] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [14] *((byte*)PPU) = 0
  [15] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [16] *FR_COUNTER = $40
  [17] *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) = $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [19] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [20] main::initNES1_waitForVBlank1_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80
  [21] if(0==main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [22] main::initNES1_i#2 = phi( main::initNES1_@1/main::initNES1_i#1, main::initNES1_waitForVBlank1_@1/0 )
  [23] MEMORY[main::initNES1_i#2] = 0
  [24] (MEMORY+$100)[main::initNES1_i#2] = 0
  [25] (MEMORY+$200)[main::initNES1_i#2] = 0
  [26] (MEMORY+$300)[main::initNES1_i#2] = 0
  [27] (MEMORY+$400)[main::initNES1_i#2] = 0
  [28] (MEMORY+$500)[main::initNES1_i#2] = 0
  [29] (MEMORY+$600)[main::initNES1_i#2] = 0
  [30] (MEMORY+$700)[main::initNES1_i#2] = 0
  [31] main::initNES1_i#1 = ++ main::initNES1_i#2
  [32] if(0!=main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [33] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [34] main::initNES1_waitForVBlank2_$0 = *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & $80
  [35] if(0==main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@17
main::@17: scope:[main]  from main::initNES1_@7
  [37] phi()
  [38] call ppuDataTransfer 
  to:main::@19
main::@19: scope:[main]  from main::@17
  [39] phi()
  [40] call ppuDataFill 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [41] phi()
  [42] call ppuDataFill 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [43] phi()
  [44] call ppuDataTransfer 
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@21
  [45] *((byte*)PPU) = $80
  [46] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK) = $1e
  to:main::@18
main::@18: scope:[main]  from main::enableVideoOutput1
  [47] *((byte*)PPU) = $88
  to:main::@1
main::@1: scope:[main]  from main::@18 main::@23
  [48] rand_state#17 = phi( main::@18/1, main::@23/rand_state#11 )
  [48] main::i#14 = phi( main::@18/0, main::@23/main::i#2 )
  [49] if(main::i#14<$32) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@14
  [50] main::timer#3 = phi( main::@1/0, main::@14/main::timer#15 )
  [50] main::active_balls#2 = phi( main::@1/0, main::@14/main::active_balls#8 )
  [50] main::timer_2#2 = phi( main::@1/0, main::@14/main::timer_2#1 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [51] main::timer_2#1 = ++ main::timer_2#2
  [52] main::h_bar#1 = sine_table[main::timer_2#1] + $60
  [53] main::$14 = main::h_bar#1 ^ $ff
  [54] scroll_y = main::$14
  [55] if(main::active_balls#2>=$32) goto main::@5
  to:main::@15
main::@15: scope:[main]  from main::@4
  [56] main::timer#1 = ++ main::timer#3
  [57] if(main::timer#3!=9) goto main::@25
  to:main::@16
main::@16: scope:[main]  from main::@15
  [58] main::active_balls#1 = ++ main::active_balls#2
  [59] main::$38 = main::active_balls#1 << 3
  [60] main::$58 = (word*)balls + main::$38
  [61] *main::$58 = 0
  [62] main::$58[2] = 0
  to:main::@5
main::@5: scope:[main]  from main::@16 main::@25 main::@4
  [63] main::timer#15 = phi( main::@25/main::timer#21, main::@16/0, main::@4/main::timer#3 )
  [63] main::active_balls#8 = phi( main::@25/main::active_balls#2, main::@16/main::active_balls#1, main::@4/main::active_balls#2 )
  to:main::@6
main::@6: scope:[main]  from main::@10 main::@5
  [64] main::sprite_idx#3 = phi( main::@10/main::sprite_idx#2, main::@5/0 )
  [64] main::i#10 = phi( main::@10/main::i#4, main::@5/0 )
  [65] if(main::i#10<main::active_balls#8) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@6
  [66] *((byte*) 8193) = $98
  to:main::@13
main::@13: scope:[main]  from main::@13 main::@8
  [67] if(0==vblank_hit) goto main::@13
  to:main::@14
main::@14: scope:[main]  from main::@13
  [68] vblank_hit = 0
  [69] *((byte*) 8193) = $18
  to:main::@3
main::@7: scope:[main]  from main::@6
  [70] main::$44 = main::i#10 << 3
  [71] main::$63 = (word*)balls + main::$44
  [72] *main::$63 = *main::$63 + main::$63[4]
  [73] main::$63[6] = main::$63[6] + $10
  [74] main::$63[2] = main::$63[2] + main::$63[6]
  [75] main::$20 = *main::$63 >> 8
  [76] if(main::$20>=8) goto main::@9
  to:main::@11
main::@11: scope:[main]  from main::@7
  [77] main::$71 = (word*)balls + main::$44
  [78] main::$71[4] = main::$71[4] ^ $ffff
  to:main::@9
main::@9: scope:[main]  from main::@11 main::@7
  [79] main::$69 = (word*)balls + main::$44
  [80] main::$23 = main::$69[2] >> 8
  [81] main::$25 = main::$69[2] >> 8
  [82] main::$26 = main::h_bar#1 + 8
  [83] if(main::$23<main::h_bar#1) goto main::@10
  to:main::@24
main::@24: scope:[main]  from main::@9
  [84] if(main::$25>=main::$26) goto main::@10
  to:main::@12
main::@12: scope:[main]  from main::@24
  [85] main::$76 = (word*)balls + main::$44
  [86] main::$76[6] = main::$76[6] ^ $ffff
  [87] main::$30 = main::h_bar#1 - 2
  [88] main::$78 = (word)main::$30
  [89] main::$31 = main::$78 << 8
  [90] main::$76[2] = main::$31
  to:main::@10
main::@10: scope:[main]  from main::@12 main::@24 main::@9
  [91] main::$73 = (word*)balls + main::$44
  [92] main::$32 = main::$73[2] >> 8
  [93] main::$48 = main::sprite_idx#3 << 2
  [94] ((byte*)SPRITE_BUFFER)[main::$48] = (byte)main::$32
  [95] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE)[main::$48] = $a
  [96] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES)[main::$48] = 3
  [97] main::$33 = *main::$73 >> 8
  [98] ((byte*)SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X)[main::$48] = (byte)main::$33
  [99] main::sprite_idx#2 = ++ main::sprite_idx#3
  [100] main::i#4 = ++ main::i#10
  to:main::@6
main::@25: scope:[main]  from main::@15
  [101] main::timer#21 = main::timer#1
  to:main::@5
main::@2: scope:[main]  from main::@1
  [102] phi()
  [103] call rand 
  [104] rand::return#2 = rand::return#0
  to:main::@22
main::@22: scope:[main]  from main::@2
  [105] main::$9 = rand::return#2
  [106] main::$10 = main::$9 & $3ff
  [107] main::$36 = main::i#14 << 3
  [108] main::$55 = (word*)balls + main::$36
  [109] main::$55[4] = main::$10
  [110] call rand 
  [111] rand::return#3 = rand::return#0
  to:main::@23
main::@23: scope:[main]  from main::@22
  [112] main::$11 = rand::return#3
  [113] main::$12 = main::$11 & $ff
  [114] main::$56 = (word*)balls + main::$36
  [115] main::$56[6] = main::$12
  [116] main::i#2 = ++ main::i#14
  to:main::@1

void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@17 main::@21
  [117] ppuDataTransfer::cpuData#2 = phi( main::@17/(void*)palette, main::@21/(void*)h_bar_tilemap )
  [117] ppuDataTransfer::ppuDataPrepare1_ppuData#0 = phi( main::@17/(void*)PPU_PALETTE, main::@21/(void*) 8256 )
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [118] ppuDataTransfer::ppuDataPrepare1_$0 = > ppuDataTransfer::ppuDataPrepare1_ppuData#0
  [119] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$0
  [120] ppuDataTransfer::ppuDataPrepare1_$1 = < ppuDataTransfer::ppuDataPrepare1_ppuData#0
  [121] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  [122] ppuDataTransfer::cpuSrc#6 = (byte*)ppuDataTransfer::cpuData#2
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  [123] ppuDataTransfer::cpuSrc#2 = phi( ppuDataTransfer::@3/ppuDataTransfer::cpuSrc#6, ppuDataTransfer::@4/ppuDataTransfer::cpuSrc#1 )
  [123] ppuDataTransfer::i#2 = phi( ppuDataTransfer::@3/0, ppuDataTransfer::@4/ppuDataTransfer::i#1 )
  [124] if(ppuDataTransfer::i#2<$20*SIZEOF_BYTE) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [125] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [126] ppuDataTransfer::ppuDataPut1_val#0 = *ppuDataTransfer::cpuSrc#2
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [127] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [128] ppuDataTransfer::cpuSrc#1 = ++ ppuDataTransfer::cpuSrc#2
  [129] ppuDataTransfer::i#1 = ++ ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@19 main::@20
  [130] ppuDataFill::size#3 = phi( main::@19/(word)$20*$1e, main::@20/$40 )
  [130] ppuDataFill::ppuDataPrepare1_ppuData#0 = phi( main::@19/(void*)PPU_NAME_TABLE_0, main::@20/(void*)PPU_ATTRIBUTE_TABLE_0 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [131] ppuDataFill::ppuDataPrepare1_$0 = > ppuDataFill::ppuDataPrepare1_ppuData#0
  [132] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$0
  [133] ppuDataFill::ppuDataPrepare1_$1 = < ppuDataFill::ppuDataPrepare1_ppuData#0
  [134] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR) = ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [135] ppuDataFill::i#2 = phi( ppuDataFill::ppuDataPrepare1/0, ppuDataFill::@2/ppuDataFill::i#1 )
  [136] if(ppuDataFill::i#2<ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [137] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [138] *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA) = 0
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [139] ppuDataFill::i#1 = ++ ppuDataFill::i#2
  to:ppuDataFill::@1

word rand()
rand: scope:[rand]  from main::@2 main::@22
  [140] rand_state#10 = phi( main::@2/rand_state#17, main::@22/rand_state#11 )
  [141] rand::$0 = rand_state#10 << 7
  [142] rand_state#0 = rand_state#10 ^ rand::$0
  [143] rand::$1 = rand_state#0 >> 9
  [144] rand_state#1 = rand_state#0 ^ rand::$1
  [145] rand::$2 = rand_state#1 << 8
  [146] rand_state#11 = rand_state#1 ^ rand::$2
  [147] rand::return#0 = rand_state#11
  to:rand::@return
rand::@return: scope:[rand]  from rand
  [148] return 
  to:@return
