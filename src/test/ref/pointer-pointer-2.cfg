@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (byte) main::i#5 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  [5] (byte*) main::screen#4 ← phi( main/(byte*) 1024 main::@4/(byte*) main::screen#2 )
  [5] (byte) textid#11 ← phi( main/(byte) 0 main::@4/(byte) textid#13 )
  [5] (byte*) main::text#2 ← phi( main/(byte*) 0 main::@4/(byte*) main::text#3 )
  [6] call nexttext 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [7] (byte*) main::screen#2 ← phi( main::@3/(byte*) main::screen#1 main::@1/(byte*) main::screen#4 )
  [7] (byte*) main::text#3 ← phi( main::@3/(byte*) main::text#1 main::@1/(byte*) main::text#2 )
  [8] if(*((byte*) main::text#3)!=(byte) '@') goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [9] (byte) main::i#1 ← ++ (byte) main::i#5
  [10] if((byte) main::i#1!=(byte) $15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [11] return 
  to:@return
main::@3: scope:[main]  from main::@2
  [12] *((byte*) main::screen#2) ← *((byte*) main::text#3)
  [13] (byte*) main::screen#1 ← ++ (byte*) main::screen#2
  [14] (byte*) main::text#1 ← ++ (byte*) main::text#3
  to:main::@2
nexttext: scope:[nexttext]  from main::@1
  [15] (byte~) nexttext::$0 ← (byte) textid#11 & (byte) 1
  [16] (byte) textid#13 ← ++ (byte) textid#11
  [17] if((byte~) nexttext::$0==(byte) 0) goto nexttext::@1
  to:nexttext::@2
nexttext::@2: scope:[nexttext]  from nexttext
  [18] *((const byte**) nexttext::textp#0) ← (const byte[]) text2#0
  to:nexttext::@return
nexttext::@return: scope:[nexttext]  from nexttext::@1 nexttext::@2
  [19] return 
  to:@return
nexttext::@1: scope:[nexttext]  from nexttext
  [20] *((const byte**) nexttext::textp#0) ← (const byte[]) text1#0
  to:nexttext::@return
