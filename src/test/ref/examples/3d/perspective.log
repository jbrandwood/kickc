Resolved forward reference mulf_sqr1 to mulf_sqr1
Resolved forward reference mulf_sqr2 to mulf_sqr2
Resolved forward reference PERSP_Z to PERSP_Z
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from do_perspective do_perspective::@11 do_perspective::@2 do_perspective::@4 do_perspective::@6 do_perspective::@9
  print_char_cursor#77 = phi( do_perspective/print_char_cursor#74, do_perspective::@11/print_char_cursor#27, do_perspective::@2/print_char_cursor#19, do_perspective::@4/print_char_cursor#21, do_perspective::@6/print_char_cursor#23, do_perspective::@9/print_char_cursor#25 )
  print_str::str#10 = phi( do_perspective/print_str::str#1, do_perspective::@11/print_str::str#6, do_perspective::@2/print_str::str#2, do_perspective::@4/print_str::str#3, do_perspective::@6/print_str::str#4, do_perspective::@9/print_str::str#5 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  print_char_cursor#67 = phi( print_str/print_char_cursor#77, print_str::@3/print_char_cursor#0 )
  print_str::str#7 = phi( print_str/print_str::str#10, print_str::@3/print_str::str#0 )
  print_str::$1 = 0 != *print_str::str#7
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  print_char_cursor#66 = phi( print_str::@1/print_char_cursor#67 )
  print_str::str#8 = phi( print_str::@1/print_str::str#7 )
  print_char::ch#0 = *print_str::str#8
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#9 = phi( print_str::@2/print_str::str#8 )
  print_char_cursor#34 = phi( print_str::@2/print_char_cursor#12 )
  print_char_cursor#0 = print_char_cursor#34
  print_str::str#0 = ++ print_str::str#9
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  print_char_cursor#35 = phi( print_str::@1/print_char_cursor#67 )
  print_char_cursor#1 = print_char_cursor#35
  return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from do_perspective::@12
  print_char_cursor#68 = phi( do_perspective::@12/print_char_cursor#28 )
  print_line_cursor#23 = phi( do_perspective::@12/print_line_cursor#25 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#36 = phi( print_ln/print_char_cursor#68, print_ln::@1/print_char_cursor#36 )
  print_line_cursor#12 = phi( print_ln/print_line_cursor#23, print_ln::@1/print_line_cursor#0 )
  print_ln::$0 = print_line_cursor#12 + $28
  print_line_cursor#0 = print_ln::$0
  print_ln::$1 = print_line_cursor#0 < print_char_cursor#36
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#13 = phi( print_ln::@1/print_line_cursor#0 )
  print_char_cursor#2 = print_line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#37 = phi( print_ln::@2/print_char_cursor#2 )
  print_line_cursor#14 = phi( print_ln::@2/print_line_cursor#13 )
  print_line_cursor#1 = print_line_cursor#14
  print_char_cursor#3 = print_char_cursor#37
  return 
  to:@return

void print_schar(signed byte print_schar::b)
print_schar: scope:[print_schar]  from do_perspective::@1 do_perspective::@3 do_perspective::@5
  print_char_cursor#78 = phi( do_perspective::@1/print_char_cursor#18, do_perspective::@3/print_char_cursor#20, do_perspective::@5/print_char_cursor#22 )
  print_schar::b#4 = phi( do_perspective::@1/print_schar::b#1, do_perspective::@3/print_schar::b#2, do_perspective::@5/print_schar::b#3 )
  print_schar::$0 = print_schar::b#4 < 0
  if(print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  print_schar::b#7 = phi( print_schar/print_schar::b#4 )
  print_char_cursor#69 = phi( print_schar/print_char_cursor#78 )
  print_char::ch#1 = '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  print_schar::b#5 = phi( print_schar::@1/print_schar::b#7 )
  print_char_cursor#38 = phi( print_schar::@1/print_char_cursor#12 )
  print_char_cursor#4 = print_char_cursor#38
  print_schar::$4 = - print_schar::b#5
  print_schar::b#0 = print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  print_schar::b#9 = phi( print_schar/print_schar::b#4 )
  print_char_cursor#70 = phi( print_schar/print_char_cursor#78 )
  print_char::ch#2 = ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  print_schar::b#8 = phi( print_schar::@3/print_schar::b#9 )
  print_char_cursor#39 = phi( print_schar::@3/print_char_cursor#12 )
  print_char_cursor#5 = print_char_cursor#39
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  print_char_cursor#71 = phi( print_schar::@4/print_char_cursor#4, print_schar::@5/print_char_cursor#5 )
  print_schar::b#6 = phi( print_schar::@4/print_schar::b#0, print_schar::@5/print_schar::b#8 )
  print_uchar::b#0 = (byte)print_schar::b#6
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  print_char_cursor#40 = phi( print_schar::@2/print_char_cursor#10 )
  print_char_cursor#6 = print_char_cursor#40
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  print_char_cursor#41 = phi( print_schar::@6/print_char_cursor#6 )
  print_char_cursor#7 = print_char_cursor#41
  return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from do_perspective::@10 do_perspective::@8 print_schar::@2
  print_char_cursor#72 = phi( do_perspective::@10/print_char_cursor#26, do_perspective::@8/print_char_cursor#75, print_schar::@2/print_char_cursor#71 )
  print_uchar::b#3 = phi( do_perspective::@10/print_uchar::b#2, do_perspective::@8/print_uchar::b#1, print_schar::@2/print_uchar::b#0 )
  print_uchar::$0 = print_uchar::b#3 >> 4
  print_char::ch#3 = print_hextab[print_uchar::$0]
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::b#4 = phi( print_uchar/print_uchar::b#3 )
  print_char_cursor#42 = phi( print_uchar/print_char_cursor#12 )
  print_char_cursor#8 = print_char_cursor#42
  print_uchar::$2 = print_uchar::b#4 & $f
  print_char::ch#4 = print_hextab[print_uchar::$2]
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  print_char_cursor#43 = phi( print_uchar::@1/print_char_cursor#12 )
  print_char_cursor#9 = print_char_cursor#43
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  print_char_cursor#44 = phi( print_uchar::@2/print_char_cursor#9 )
  print_char_cursor#10 = print_char_cursor#44
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  print_char_cursor#45 = phi( print_schar::@1/print_char_cursor#69, print_schar::@3/print_char_cursor#70, print_str::@2/print_char_cursor#66, print_uchar/print_char_cursor#72, print_uchar::@1/print_char_cursor#8 )
  print_char::ch#5 = phi( print_schar::@1/print_char::ch#1, print_schar::@3/print_char::ch#2, print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  *print_char_cursor#45 = print_char::ch#5
  print_char_cursor#11 = ++ print_char_cursor#45
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#46 = phi( print_char/print_char_cursor#11 )
  print_char_cursor#12 = print_char_cursor#46
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@1
  print_screen#2 = phi( main::@1/print_screen#5 )
  memset::str#0 = (void*)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#2 = print_screen#3
  print_char_cursor#13 = print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#47 = phi( print_cls::@1/print_char_cursor#13 )
  print_line_cursor#15 = phi( print_cls::@1/print_line_cursor#2 )
  print_line_cursor#3 = print_line_cursor#15
  print_char_cursor#14 = print_char_cursor#47
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#79 = phi( __start::@1/print_char_cursor#76 )
  print_line_cursor#27 = phi( __start::@1/print_line_cursor#26 )
  print_screen#7 = phi( __start::@1/print_screen#8 )
  asm { sei  }
  call mulf_init 
  to:main::@1
main::@1: scope:[main]  from main
  print_char_cursor#73 = phi( main/print_char_cursor#79 )
  print_line_cursor#24 = phi( main/print_line_cursor#27 )
  print_screen#5 = phi( main/print_screen#7 )
  *psp1 = (word)mulf_sqr1
  *psp2 = (word)mulf_sqr2
  call print_cls 
  to:main::@2
main::@2: scope:[main]  from main::@1
  print_char_cursor#48 = phi( main::@1/print_char_cursor#14 )
  print_line_cursor#16 = phi( main::@1/print_line_cursor#3 )
  print_line_cursor#4 = print_line_cursor#16
  print_char_cursor#15 = print_char_cursor#48
  do_perspective::x#0 = $39
  do_perspective::y#0 = -$47
  do_perspective::z#0 = $36
  call do_perspective 
  to:main::@3
main::@3: scope:[main]  from main::@2
  print_line_cursor#17 = phi( main::@2/print_line_cursor#8 )
  print_char_cursor#49 = phi( main::@2/print_char_cursor#30 )
  print_char_cursor#16 = print_char_cursor#49
  print_line_cursor#5 = print_line_cursor#17
  to:main::@return
main::@return: scope:[main]  from main::@3
  print_char_cursor#50 = phi( main::@3/print_char_cursor#16 )
  print_line_cursor#18 = phi( main::@3/print_line_cursor#5 )
  print_line_cursor#6 = print_line_cursor#18
  print_char_cursor#17 = print_char_cursor#50
  return 
  to:@return

void do_perspective(signed byte do_perspective::x , signed byte do_perspective::y , signed byte do_perspective::z)
do_perspective: scope:[do_perspective]  from main::@2
  print_line_cursor#39 = phi( main::@2/print_line_cursor#4 )
  do_perspective::z#8 = phi( main::@2/do_perspective::z#0 )
  do_perspective::y#7 = phi( main::@2/do_perspective::y#0 )
  do_perspective::x#3 = phi( main::@2/do_perspective::x#0 )
  print_char_cursor#74 = phi( main::@2/print_char_cursor#15 )
  print_str::str#1 = do_perspective::str
  call print_str 
  to:do_perspective::@1
do_perspective::@1: scope:[do_perspective]  from do_perspective
  print_line_cursor#38 = phi( do_perspective/print_line_cursor#39 )
  do_perspective::z#7 = phi( do_perspective/do_perspective::z#8 )
  do_perspective::y#5 = phi( do_perspective/do_perspective::y#7 )
  do_perspective::x#1 = phi( do_perspective/do_perspective::x#3 )
  print_char_cursor#51 = phi( do_perspective/print_char_cursor#1 )
  print_char_cursor#18 = print_char_cursor#51
  print_schar::b#1 = do_perspective::x#1
  call print_schar 
  to:do_perspective::@2
do_perspective::@2: scope:[do_perspective]  from do_perspective::@1
  print_line_cursor#37 = phi( do_perspective::@1/print_line_cursor#38 )
  do_perspective::x#8 = phi( do_perspective::@1/do_perspective::x#1 )
  do_perspective::z#6 = phi( do_perspective::@1/do_perspective::z#7 )
  do_perspective::y#3 = phi( do_perspective::@1/do_perspective::y#5 )
  print_char_cursor#52 = phi( do_perspective::@1/print_char_cursor#7 )
  print_char_cursor#19 = print_char_cursor#52
  print_str::str#2 = do_perspective::str1
  call print_str 
  to:do_perspective::@3
do_perspective::@3: scope:[do_perspective]  from do_perspective::@2
  print_line_cursor#36 = phi( do_perspective::@2/print_line_cursor#37 )
  do_perspective::x#7 = phi( do_perspective::@2/do_perspective::x#8 )
  do_perspective::z#5 = phi( do_perspective::@2/do_perspective::z#6 )
  do_perspective::y#1 = phi( do_perspective::@2/do_perspective::y#3 )
  print_char_cursor#53 = phi( do_perspective::@2/print_char_cursor#1 )
  print_char_cursor#20 = print_char_cursor#53
  print_schar::b#2 = do_perspective::y#1
  call print_schar 
  to:do_perspective::@4
do_perspective::@4: scope:[do_perspective]  from do_perspective::@3
  print_line_cursor#35 = phi( do_perspective::@3/print_line_cursor#36 )
  do_perspective::y#8 = phi( do_perspective::@3/do_perspective::y#1 )
  do_perspective::x#6 = phi( do_perspective::@3/do_perspective::x#7 )
  do_perspective::z#3 = phi( do_perspective::@3/do_perspective::z#5 )
  print_char_cursor#54 = phi( do_perspective::@3/print_char_cursor#7 )
  print_char_cursor#21 = print_char_cursor#54
  print_str::str#3 = do_perspective::str2
  call print_str 
  to:do_perspective::@5
do_perspective::@5: scope:[do_perspective]  from do_perspective::@4
  print_line_cursor#34 = phi( do_perspective::@4/print_line_cursor#35 )
  do_perspective::y#6 = phi( do_perspective::@4/do_perspective::y#8 )
  do_perspective::x#5 = phi( do_perspective::@4/do_perspective::x#6 )
  do_perspective::z#1 = phi( do_perspective::@4/do_perspective::z#3 )
  print_char_cursor#55 = phi( do_perspective::@4/print_char_cursor#1 )
  print_char_cursor#22 = print_char_cursor#55
  print_schar::b#3 = do_perspective::z#1
  call print_schar 
  to:do_perspective::@6
do_perspective::@6: scope:[do_perspective]  from do_perspective::@5
  print_line_cursor#33 = phi( do_perspective::@5/print_line_cursor#34 )
  do_perspective::z#4 = phi( do_perspective::@5/do_perspective::z#1 )
  do_perspective::y#4 = phi( do_perspective::@5/do_perspective::y#6 )
  do_perspective::x#4 = phi( do_perspective::@5/do_perspective::x#5 )
  print_char_cursor#56 = phi( do_perspective::@5/print_char_cursor#7 )
  print_char_cursor#23 = print_char_cursor#56
  print_str::str#4 = do_perspective::str3
  call print_str 
  to:do_perspective::@7
do_perspective::@7: scope:[do_perspective]  from do_perspective::@6
  print_line_cursor#32 = phi( do_perspective::@6/print_line_cursor#33 )
  do_perspective::z#2 = phi( do_perspective::@6/do_perspective::z#4 )
  do_perspective::y#2 = phi( do_perspective::@6/do_perspective::y#4 )
  do_perspective::x#2 = phi( do_perspective::@6/do_perspective::x#4 )
  print_char_cursor#57 = phi( do_perspective::@6/print_char_cursor#1 )
  print_char_cursor#24 = print_char_cursor#57
  perspective::x#0 = do_perspective::x#2
  perspective::y#0 = do_perspective::y#2
  perspective::z#0 = do_perspective::z#2
  call perspective 
  to:do_perspective::@8
do_perspective::@8: scope:[do_perspective]  from do_perspective::@7
  print_line_cursor#31 = phi( do_perspective::@7/print_line_cursor#32 )
  print_char_cursor#75 = phi( do_perspective::@7/print_char_cursor#24 )
  print_uchar::b#1 = (byte)*xr
  call print_uchar 
  to:do_perspective::@9
do_perspective::@9: scope:[do_perspective]  from do_perspective::@8
  print_line_cursor#30 = phi( do_perspective::@8/print_line_cursor#31 )
  print_char_cursor#58 = phi( do_perspective::@8/print_char_cursor#10 )
  print_char_cursor#25 = print_char_cursor#58
  print_str::str#5 = do_perspective::str4
  call print_str 
  to:do_perspective::@10
do_perspective::@10: scope:[do_perspective]  from do_perspective::@9
  print_line_cursor#29 = phi( do_perspective::@9/print_line_cursor#30 )
  print_char_cursor#59 = phi( do_perspective::@9/print_char_cursor#1 )
  print_char_cursor#26 = print_char_cursor#59
  print_uchar::b#2 = (byte)*yr
  call print_uchar 
  to:do_perspective::@11
do_perspective::@11: scope:[do_perspective]  from do_perspective::@10
  print_line_cursor#28 = phi( do_perspective::@10/print_line_cursor#29 )
  print_char_cursor#60 = phi( do_perspective::@10/print_char_cursor#10 )
  print_char_cursor#27 = print_char_cursor#60
  print_str::str#6 = do_perspective::str5
  call print_str 
  to:do_perspective::@12
do_perspective::@12: scope:[do_perspective]  from do_perspective::@11
  print_line_cursor#25 = phi( do_perspective::@11/print_line_cursor#28 )
  print_char_cursor#61 = phi( do_perspective::@11/print_char_cursor#1 )
  print_char_cursor#28 = print_char_cursor#61
  call print_ln 
  to:do_perspective::@13
do_perspective::@13: scope:[do_perspective]  from do_perspective::@12
  print_char_cursor#62 = phi( do_perspective::@12/print_char_cursor#3 )
  print_line_cursor#19 = phi( do_perspective::@12/print_line_cursor#1 )
  print_line_cursor#7 = print_line_cursor#19
  print_char_cursor#29 = print_char_cursor#62
  to:do_perspective::@return
do_perspective::@return: scope:[do_perspective]  from do_perspective::@13
  print_line_cursor#20 = phi( do_perspective::@13/print_line_cursor#7 )
  print_char_cursor#63 = phi( do_perspective::@13/print_char_cursor#29 )
  print_char_cursor#30 = print_char_cursor#63
  print_line_cursor#8 = print_line_cursor#20
  return 
  to:@return

void perspective(signed byte perspective::x , signed byte perspective::y , signed byte perspective::z)
perspective: scope:[perspective]  from do_perspective::@7
  perspective::z#1 = phi( do_perspective::@7/perspective::z#0 )
  perspective::y#1 = phi( do_perspective::@7/perspective::y#0 )
  perspective::x#1 = phi( do_perspective::@7/perspective::x#0 )
  *xr = perspective::x#1
  *yr = perspective::y#1
  *zr = perspective::z#1
  asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  }
  to:perspective::@return
perspective::@return: scope:[perspective]  from perspective
  return 
  to:@return

void mulf_init()
mulf_init: scope:[mulf_init]  from main
  mulf_init::sqr#0 = 0
  mulf_init::add#0 = 1
  mulf_init::i#0 = 0
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  mulf_init::add#2 = phi( mulf_init/mulf_init::add#0, mulf_init::@1/mulf_init::add#1 )
  mulf_init::i#2 = phi( mulf_init/mulf_init::i#0, mulf_init::@1/mulf_init::i#1 )
  mulf_init::sqr#2 = phi( mulf_init/mulf_init::sqr#0, mulf_init::@1/mulf_init::sqr#1 )
  mulf_init::$0 = > mulf_init::sqr#2
  mulf_init::val#0 = mulf_init::$0
  mulf_sqr1[mulf_init::i#2] = mulf_init::val#0
  (mulf_sqr1+$100)[mulf_init::i#2] = mulf_init::val#0
  mulf_init::$1 = - mulf_init::i#2
  mulf_sqr1[mulf_init::$1] = mulf_init::val#0
  mulf_init::$2 = - mulf_init::i#2
  (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0
  mulf_init::$3 = mulf_init::i#2 + 1
  mulf_sqr2[mulf_init::$3] = mulf_init::val#0
  mulf_init::$4 = mulf_init::i#2 + 1
  (mulf_sqr2+$100)[mulf_init::$4] = mulf_init::val#0
  mulf_init::$5 = 1 - mulf_init::i#2
  mulf_sqr2[mulf_init::$5] = mulf_init::val#0
  mulf_init::$6 = 1 - mulf_init::i#2
  (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0
  mulf_init::sqr#1 = mulf_init::sqr#2 + mulf_init::add#2
  mulf_init::add#1 = mulf_init::add#2 + 2
  mulf_init::i#1 = mulf_init::i#2 + rangenext(0,$80)
  mulf_init::$7 = mulf_init::i#1 != rangelast(0,$80)
  if(mulf_init::$7) goto mulf_init::@1
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (byte*)$400
  print_line_cursor#9 = print_screen#0
  print_char_cursor#31 = print_line_cursor#9
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#8 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#76 = phi( __start::__init1/print_char_cursor#31 )
  print_line_cursor#26 = phi( __start::__init1/print_line_cursor#9 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#8 )
  print_char_cursor#64 = phi( __start::@1/print_char_cursor#17 )
  print_line_cursor#21 = phi( __start::@1/print_line_cursor#6 )
  print_line_cursor#10 = print_line_cursor#21
  print_char_cursor#32 = print_char_cursor#64
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#65 = phi( __start::@2/print_char_cursor#32 )
  print_line_cursor#22 = phi( __start::@2/print_line_cursor#10 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  print_screen#1 = print_screen#4
  print_line_cursor#11 = print_line_cursor#22
  print_char_cursor#33 = print_char_cursor#65
  return 
  to:@return

SYMBOL TABLE SSA
const signed byte* PERSP_Z[$100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void __start()
void do_perspective(signed byte do_perspective::x , signed byte do_perspective::y , signed byte do_perspective::z)
const byte* do_perspective::str[2]  = "("
const byte* do_perspective::str1[2]  = ","
const byte* do_perspective::str2[2]  = ","
const byte* do_perspective::str3[7]  = ") -> ("
const byte* do_perspective::str4[2]  = ","
const byte* do_perspective::str5[2]  = ")"
signed byte do_perspective::x
signed byte do_perspective::x#0
signed byte do_perspective::x#1
signed byte do_perspective::x#2
signed byte do_perspective::x#3
signed byte do_perspective::x#4
signed byte do_perspective::x#5
signed byte do_perspective::x#6
signed byte do_perspective::x#7
signed byte do_perspective::x#8
signed byte do_perspective::y
signed byte do_perspective::y#0
signed byte do_perspective::y#1
signed byte do_perspective::y#2
signed byte do_perspective::y#3
signed byte do_perspective::y#4
signed byte do_perspective::y#5
signed byte do_perspective::y#6
signed byte do_perspective::y#7
signed byte do_perspective::y#8
signed byte do_perspective::z
signed byte do_perspective::z#0
signed byte do_perspective::z#1
signed byte do_perspective::z#2
signed byte do_perspective::z#3
signed byte do_perspective::z#4
signed byte do_perspective::z#5
signed byte do_perspective::z#6
signed byte do_perspective::z#7
signed byte do_perspective::z#8
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void mulf_init()
byte~ mulf_init::$0
byte~ mulf_init::$1
byte~ mulf_init::$2
number~ mulf_init::$3
number~ mulf_init::$4
number~ mulf_init::$5
number~ mulf_init::$6
bool~ mulf_init::$7
signed word mulf_init::add
signed word mulf_init::add#0
signed word mulf_init::add#1
signed word mulf_init::add#2
byte mulf_init::i
byte mulf_init::i#0
byte mulf_init::i#1
byte mulf_init::i#2
signed word mulf_init::sqr
signed word mulf_init::sqr#0
signed word mulf_init::sqr#1
signed word mulf_init::sqr#2
byte mulf_init::val
byte mulf_init::val#0
const byte* mulf_sqr1[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2[$200]  = { fill( $200, 0) }
void perspective(signed byte perspective::x , signed byte perspective::y , signed byte perspective::z)
signed byte perspective::x
signed byte perspective::x#0
signed byte perspective::x#1
signed byte perspective::y
signed byte perspective::y#0
signed byte perspective::y#1
signed byte perspective::z
signed byte perspective::z#0
signed byte perspective::z#1
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte print_char::ch#2
byte print_char::ch#3
byte print_char::ch#4
byte print_char::ch#5
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#51
byte* print_char_cursor#52
byte* print_char_cursor#53
byte* print_char_cursor#54
byte* print_char_cursor#55
byte* print_char_cursor#56
byte* print_char_cursor#57
byte* print_char_cursor#58
byte* print_char_cursor#59
byte* print_char_cursor#6
byte* print_char_cursor#60
byte* print_char_cursor#61
byte* print_char_cursor#62
byte* print_char_cursor#63
byte* print_char_cursor#64
byte* print_char_cursor#65
byte* print_char_cursor#66
byte* print_char_cursor#67
byte* print_char_cursor#68
byte* print_char_cursor#69
byte* print_char_cursor#7
byte* print_char_cursor#70
byte* print_char_cursor#71
byte* print_char_cursor#72
byte* print_char_cursor#73
byte* print_char_cursor#74
byte* print_char_cursor#75
byte* print_char_cursor#76
byte* print_char_cursor#77
byte* print_char_cursor#78
byte* print_char_cursor#79
byte* print_char_cursor#8
byte* print_char_cursor#9
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#19
byte* print_line_cursor#2
byte* print_line_cursor#20
byte* print_line_cursor#21
byte* print_line_cursor#22
byte* print_line_cursor#23
byte* print_line_cursor#24
byte* print_line_cursor#25
byte* print_line_cursor#26
byte* print_line_cursor#27
byte* print_line_cursor#28
byte* print_line_cursor#29
byte* print_line_cursor#3
byte* print_line_cursor#30
byte* print_line_cursor#31
byte* print_line_cursor#32
byte* print_line_cursor#33
byte* print_line_cursor#34
byte* print_line_cursor#35
byte* print_line_cursor#36
byte* print_line_cursor#37
byte* print_line_cursor#38
byte* print_line_cursor#39
byte* print_line_cursor#4
byte* print_line_cursor#5
byte* print_line_cursor#6
byte* print_line_cursor#7
byte* print_line_cursor#8
byte* print_line_cursor#9
void print_ln()
byte*~ print_ln::$0
bool~ print_ln::$1
void print_schar(signed byte print_schar::b)
bool~ print_schar::$0
signed byte~ print_schar::$4
signed byte print_schar::b
signed byte print_schar::b#0
signed byte print_schar::b#1
signed byte print_schar::b#2
signed byte print_schar::b#3
signed byte print_schar::b#4
signed byte print_schar::b#5
signed byte print_schar::b#6
signed byte print_schar::b#7
signed byte print_schar::b#8
signed byte print_schar::b#9
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#2
byte* print_screen#3
byte* print_screen#4
byte* print_screen#5
byte* print_screen#6
byte* print_screen#7
byte* print_screen#8
void print_str(byte* print_str::str)
bool~ print_str::$1
byte* print_str::str
byte* print_str::str#0
byte* print_str::str#1
byte* print_str::str#10
byte* print_str::str#2
byte* print_str::str#3
byte* print_str::str#4
byte* print_str::str#5
byte* print_str::str#6
byte* print_str::str#7
byte* print_str::str#8
byte* print_str::str#9
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0
number~ print_uchar::$2
byte print_uchar::b
byte print_uchar::b#0
byte print_uchar::b#1
byte print_uchar::b#2
byte print_uchar::b#3
byte print_uchar::b#4
const word* psp1 = (word*)$f3
const word* psp2 = (word*)$f5
const signed byte* xr = (signed byte*)$f0
const signed byte* yr = (signed byte*)$f1
const signed byte* zr = (signed byte*)$f2

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#7
Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#12 + $28
Adding number conversion cast (snumber) 0 in print_schar::$0 = print_schar::b#4 < 0
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::b#3 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::b#4 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::b#4 & (unumber)$f
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (snumber) $39 in do_perspective::x#0 = $39
Adding number conversion cast (snumber) -$47 in do_perspective::y#0 = -$47
Adding number conversion cast (snumber) $36 in do_perspective::z#0 = $36
Adding number conversion cast (unumber) $100 in (mulf_sqr1+$100)[mulf_init::i#2] = mulf_init::val#0
Adding number conversion cast (unumber) $100 in (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0
Adding number conversion cast (unumber) 1 in mulf_init::$3 = mulf_init::i#2 + 1
Adding number conversion cast (unumber) mulf_init::$3 in mulf_init::$3 = mulf_init::i#2 + (unumber)1
Adding number conversion cast (unumber) 1 in mulf_init::$4 = mulf_init::i#2 + 1
Adding number conversion cast (unumber) mulf_init::$4 in mulf_init::$4 = mulf_init::i#2 + (unumber)1
Adding number conversion cast (unumber) $100 in (mulf_sqr2+$100)[mulf_init::$4] = mulf_init::val#0
Adding number conversion cast (unumber) 1 in mulf_init::$5 = 1 - mulf_init::i#2
Adding number conversion cast (unumber) mulf_init::$5 in mulf_init::$5 = (unumber)1 - mulf_init::i#2
Adding number conversion cast (unumber) 1 in mulf_init::$6 = 1 - mulf_init::i#2
Adding number conversion cast (unumber) mulf_init::$6 in mulf_init::$6 = (unumber)1 - mulf_init::i#2
Adding number conversion cast (unumber) $100 in (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0
Adding number conversion cast (snumber) 2 in mulf_init::add#1 = mulf_init::add#2 + 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast do_perspective::x#0 = (snumber)$39
Inlining cast do_perspective::y#0 = (snumber)-$47
Inlining cast do_perspective::z#0 = (snumber)$36
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (signed byte*) 240
Simplifying constant pointer cast (signed byte*) 241
Simplifying constant pointer cast (signed byte*) 242
Simplifying constant pointer cast (word*) 243
Simplifying constant pointer cast (word*) 245
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $39
Simplifying constant integer cast -$47
Simplifying constant integer cast $36
Simplifying constant integer cast $100
Simplifying constant integer cast $100
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $100
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $100
Simplifying constant integer cast 2
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized signed number type (signed byte) $39
Finalized signed number type (signed byte) -$47
Finalized signed number type (signed byte) $36
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $100
Finalized signed number type (signed byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in print_uchar::$2 = print_uchar::b#4 & $f
Inferred type updated to byte in mulf_init::$3 = mulf_init::i#2 + 1
Inferred type updated to byte in mulf_init::$4 = mulf_init::i#2 + 1
Inferred type updated to byte in mulf_init::$5 = 1 - mulf_init::i#2
Inferred type updated to byte in mulf_init::$6 = 1 - mulf_init::i#2
Inversing boolean not [2] memset::$1 = memset::num#1 <= 0 from [1] memset::$0 = memset::num#1 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#7 = print_str::str#8 print_str::str#9 
Alias print_char_cursor#1 = print_char_cursor#66 print_char_cursor#67 print_char_cursor#35 
Alias print_char_cursor#0 = print_char_cursor#34 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#13 print_char_cursor#2 print_line_cursor#14 print_char_cursor#37 print_line_cursor#1 print_char_cursor#3 
Alias print_char_cursor#69 = print_char_cursor#78 print_char_cursor#70 
Alias print_schar::b#4 = print_schar::b#7 print_schar::b#5 print_schar::b#9 print_schar::b#8 
Alias print_char_cursor#38 = print_char_cursor#4 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#39 = print_char_cursor#5 
Alias print_char_cursor#40 = print_char_cursor#6 print_char_cursor#41 print_char_cursor#7 
Alias print_uchar::b#3 = print_uchar::b#4 
Alias print_char_cursor#42 = print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#9 print_char_cursor#43 print_char_cursor#44 
Alias print_char_cursor#11 = print_char_cursor#46 print_char_cursor#12 
Alias print_line_cursor#15 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#13 print_char_cursor#47 print_line_cursor#3 print_char_cursor#14 
Alias print_screen#5 = print_screen#7 
Alias print_line_cursor#24 = print_line_cursor#27 
Alias print_char_cursor#73 = print_char_cursor#79 
Alias print_line_cursor#16 = print_line_cursor#4 
Alias print_char_cursor#15 = print_char_cursor#48 
Alias print_char_cursor#16 = print_char_cursor#49 print_char_cursor#50 print_char_cursor#17 
Alias print_line_cursor#17 = print_line_cursor#5 print_line_cursor#18 print_line_cursor#6 
Alias do_perspective::x#1 = do_perspective::x#3 do_perspective::x#8 do_perspective::x#7 do_perspective::x#6 do_perspective::x#5 do_perspective::x#4 do_perspective::x#2 
Alias do_perspective::y#1 = do_perspective::y#5 do_perspective::y#7 do_perspective::y#3 do_perspective::y#8 do_perspective::y#6 do_perspective::y#4 do_perspective::y#2 
Alias do_perspective::z#1 = do_perspective::z#7 do_perspective::z#8 do_perspective::z#6 do_perspective::z#5 do_perspective::z#3 do_perspective::z#4 do_perspective::z#2 
Alias print_line_cursor#25 = print_line_cursor#38 print_line_cursor#39 print_line_cursor#37 print_line_cursor#36 print_line_cursor#35 print_line_cursor#34 print_line_cursor#33 print_line_cursor#32 print_line_cursor#31 print_line_cursor#30 print_line_cursor#29 print_line_cursor#28 
Alias print_char_cursor#18 = print_char_cursor#51 
Alias print_char_cursor#19 = print_char_cursor#52 
Alias print_char_cursor#20 = print_char_cursor#53 
Alias print_char_cursor#21 = print_char_cursor#54 
Alias print_char_cursor#22 = print_char_cursor#55 
Alias print_char_cursor#23 = print_char_cursor#56 
Alias print_char_cursor#24 = print_char_cursor#57 print_char_cursor#75 
Alias print_char_cursor#25 = print_char_cursor#58 
Alias print_char_cursor#26 = print_char_cursor#59 
Alias print_char_cursor#27 = print_char_cursor#60 
Alias print_char_cursor#28 = print_char_cursor#61 
Alias print_line_cursor#19 = print_line_cursor#7 print_line_cursor#20 print_line_cursor#8 
Alias print_char_cursor#29 = print_char_cursor#62 print_char_cursor#63 print_char_cursor#30 
Alias mulf_init::val#0 = mulf_init::$0 
Alias print_screen#0 = print_line_cursor#9 print_char_cursor#31 print_line_cursor#26 print_char_cursor#76 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#10 = print_line_cursor#21 print_line_cursor#22 print_line_cursor#11 
Alias print_char_cursor#32 = print_char_cursor#64 print_char_cursor#65 print_char_cursor#33 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_char_cursor#0 print_char_cursor#11
Identical Phi Values print_line_cursor#23 print_line_cursor#25
Identical Phi Values print_char_cursor#68 print_char_cursor#28
Identical Phi Values print_char_cursor#36 print_char_cursor#68
Identical Phi Values print_char_cursor#38 print_char_cursor#11
Identical Phi Values print_char_cursor#39 print_char_cursor#11
Identical Phi Values print_char_cursor#40 print_char_cursor#10
Identical Phi Values print_char_cursor#42 print_char_cursor#11
Identical Phi Values print_char_cursor#10 print_char_cursor#11
Identical Phi Values print_line_cursor#15 print_screen#5
Identical Phi Values print_screen#5 print_screen#0
Identical Phi Values print_line_cursor#24 print_screen#0
Identical Phi Values print_char_cursor#73 print_screen#0
Identical Phi Values print_line_cursor#16 print_line_cursor#15
Identical Phi Values print_char_cursor#15 print_line_cursor#15
Identical Phi Values print_char_cursor#16 print_char_cursor#29
Identical Phi Values print_line_cursor#17 print_line_cursor#19
Identical Phi Values print_char_cursor#74 print_char_cursor#15
Identical Phi Values do_perspective::x#1 do_perspective::x#0
Identical Phi Values do_perspective::y#1 do_perspective::y#0
Identical Phi Values do_perspective::z#1 do_perspective::z#0
Identical Phi Values print_line_cursor#25 print_line_cursor#16
Identical Phi Values print_char_cursor#18 print_char_cursor#1
Identical Phi Values print_char_cursor#19 print_char_cursor#40
Identical Phi Values print_char_cursor#20 print_char_cursor#1
Identical Phi Values print_char_cursor#21 print_char_cursor#40
Identical Phi Values print_char_cursor#22 print_char_cursor#1
Identical Phi Values print_char_cursor#23 print_char_cursor#40
Identical Phi Values print_char_cursor#24 print_char_cursor#1
Identical Phi Values print_char_cursor#25 print_char_cursor#10
Identical Phi Values print_char_cursor#26 print_char_cursor#1
Identical Phi Values print_char_cursor#27 print_char_cursor#10
Identical Phi Values print_char_cursor#28 print_char_cursor#1
Identical Phi Values print_line_cursor#19 print_line_cursor#0
Identical Phi Values print_char_cursor#29 print_line_cursor#0
Identical Phi Values perspective::x#1 perspective::x#0
Identical Phi Values perspective::y#1 perspective::y#0
Identical Phi Values perspective::z#1 perspective::z#0
Identical Phi Values print_line_cursor#10 print_line_cursor#17
Identical Phi Values print_char_cursor#32 print_char_cursor#16
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values print_char_cursor#69 print_char_cursor#1
Identical Phi Values print_char_cursor#71 print_char_cursor#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [196] mulf_init::$2 = - mulf_init::i#2
Identified duplicate assignment right side [204] mulf_init::$6 = 1 - mulf_init::i#2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition memset::$1 [2] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition print_str::$1 [16] if(0!=*print_str::str#7) goto print_str::@2
Simple Condition print_ln::$1 [26] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1
Simple Condition print_schar::$0 [30] if(print_schar::b#4<0) goto print_schar::@1
Simple Condition mulf_init::$7 [147] if(mulf_init::i#1!=rangelast(0,$80)) goto mulf_init::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [67] *psp1 = (word)mulf_sqr1
Constant right-side identified [68] *psp2 = (word)mulf_sqr2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant print_char::ch#1 = '-'
Constant print_char::ch#2 = ' '
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant do_perspective::x#0 = $39
Constant do_perspective::y#0 = -$47
Constant do_perspective::z#0 = $36
Constant print_str::str#1 = do_perspective::str
Constant print_str::str#2 = do_perspective::str1
Constant print_str::str#3 = do_perspective::str2
Constant print_str::str#4 = do_perspective::str3
Constant print_str::str#5 = do_perspective::str4
Constant print_str::str#6 = do_perspective::str5
Constant mulf_init::sqr#0 = 0
Constant mulf_init::add#0 = 1
Constant mulf_init::i#0 = 0
Constant print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant memset::str#0 = (void*)print_screen#0
Constant print_schar::b#1 = do_perspective::x#0
Constant print_schar::b#2 = do_perspective::y#0
Constant print_schar::b#3 = do_perspective::z#0
Constant perspective::x#0 = do_perspective::x#0
Constant perspective::y#0 = do_perspective::y#0
Constant perspective::z#0 = do_perspective::z#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into do_perspective::str1
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [145] mulf_init::i#1 = ++ mulf_init::i#2 to ++
Resolved ranged comparison value [147] if(mulf_init::i#1!=rangelast(0,$80)) goto mulf_init::@1 to $81
Eliminating unused constant memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $81 in [87] if(mulf_init::i#1!=$81) goto mulf_init::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $81
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $81
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias mulf_init::$2 = mulf_init::$1 
Alias mulf_init::$6 = mulf_init::$5 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] memset::end#0 = memset::$4 + memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [54] print_uchar::b#1 = (byte)*xr keeping *xr
Inlining Noop Cast [57] print_uchar::b#2 = (byte)*yr keeping *yr
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_str::str#2
Inlining constant with var siblings print_str::str#3
Inlining constant with var siblings print_str::str#4
Inlining constant with var siblings print_str::str#5
Inlining constant with var siblings print_str::str#6
Inlining constant with var siblings print_schar::b#1
Inlining constant with var siblings print_schar::b#2
Inlining constant with var siblings print_schar::b#3
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings print_char::ch#2
Inlining constant with var siblings mulf_init::sqr#0
Inlining constant with var siblings mulf_init::add#0
Inlining constant with var siblings mulf_init::i#0
Constant inlined mulf_init::sqr#0 = 0
Constant inlined do_perspective::str4 = do_perspective::str1
Constant inlined do_perspective::str2 = do_perspective::str1
Constant inlined mulf_init::i#0 = 0
Constant inlined print_schar::b#1 = do_perspective::x#0
Constant inlined print_char::ch#2 = ' '
Constant inlined print_schar::b#3 = do_perspective::z#0
Constant inlined mulf_init::add#0 = 1
Constant inlined print_schar::b#2 = do_perspective::y#0
Constant inlined perspective::z#0 = do_perspective::z#0
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined perspective::y#0 = do_perspective::y#0
Constant inlined perspective::x#0 = do_perspective::x#0
Constant inlined print_char::ch#1 = '-'
Constant inlined print_str::str#4 = do_perspective::str3
Constant inlined print_str::str#3 = do_perspective::str1
Constant inlined print_str::str#2 = do_perspective::str1
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined print_str::str#1 = do_perspective::str
Constant inlined print_str::str#6 = do_perspective::str5
Constant inlined print_str::str#5 = do_perspective::str1
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment (mulf_sqr2+1)[mulf_init::$3]
Consolidated array index constant in assignment (mulf_sqr2+$100+1)[mulf_init::$4]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias mulf_init::i#2 = mulf_init::$3 mulf_init::$4 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting mulf_init::@2(between mulf_init::@1 and mulf_init::@1)
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of do_perspective
Adding NOP phi() at start of do_perspective::@1
Adding NOP phi() at start of do_perspective::@3
Adding NOP phi() at start of do_perspective::@5
Adding NOP phi() at start of do_perspective::@7
Adding NOP phi() at start of do_perspective::@12
Adding NOP phi() at start of do_perspective::@13
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_ln::@2
CALL GRAPH
Calls in [main] to mulf_init:1 print_cls:4 do_perspective:6 
Calls in [print_cls] to memset:31 
Calls in [do_perspective] to print_str:35 print_schar:37 print_str:39 print_schar:41 print_str:43 print_schar:45 print_str:47 perspective:49 print_uchar:52 print_str:54 print_uchar:57 print_str:59 print_ln:61 
Calls in [print_str] to print_char:82 
Calls in [print_schar] to print_char:89 print_uchar:95 print_char:99 
Calls in [print_uchar] to print_char:112 print_char:117 

Created 15 initial phi equivalence classes
Coalesced [27] mulf_init::sqr#3 = mulf_init::sqr#1
Coalesced [28] mulf_init::i#3 = mulf_init::i#1
Coalesced [29] mulf_init::add#3 = mulf_init::add#1
Coalesced [38] print_char_cursor#81 = print_char_cursor#11
Coalesced (already) [42] print_char_cursor#82 = print_char_cursor#11
Coalesced (already) [46] print_char_cursor#83 = print_char_cursor#11
Coalesced [51] print_char_cursor#88 = print_char_cursor#1
Coalesced (already) [53] print_char_cursor#84 = print_char_cursor#11
Coalesced (already) [56] print_char_cursor#87 = print_char_cursor#1
Coalesced (already) [58] print_char_cursor#80 = print_char_cursor#11
Coalesced [72] memset::dst#4 = memset::dst#1
Coalesced [74] print_str::str#11 = print_str::str#10
Coalesced [75] print_char_cursor#85 = print_char_cursor#77
Coalesced [80] print_char::ch#6 = print_char::ch#0
Coalesced [81] print_char_cursor#92 = print_char_cursor#1
Coalesced [84] print_str::str#12 = print_str::str#0
Coalesced (already) [85] print_char_cursor#86 = print_char_cursor#11
Coalesced (already) [88] print_char_cursor#91 = print_char_cursor#1
Coalesced [90] print_schar::b#11 = print_schar::b#4
Coalesced [93] print_uchar::b#7 = print_uchar::b#0
Coalesced (already) [94] print_char_cursor#89 = print_char_cursor#11
Coalesced (already) [98] print_char_cursor#90 = print_char_cursor#1
Coalesced [101] print_schar::b#10 = print_schar::b#0
Coalesced [110] print_char::ch#7 = print_char::ch#3
Coalesced (already) [111] print_char_cursor#93 = print_char_cursor#72
Coalesced [115] print_char::ch#8 = print_char::ch#4
Coalesced (already) [116] print_char_cursor#94 = print_char_cursor#11
Coalesced [126] print_line_cursor#40 = print_line_cursor#0
Coalesced down to 10 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label mulf_init::@2
Culled Empty Block label print_cls::@1
Culled Empty Block label do_perspective::@13
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_schar::@5
Culled Empty Block label print_schar::@6
Culled Empty Block label print_uchar::@2
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of do_perspective
Adding NOP phi() at start of do_perspective::@1
Adding NOP phi() at start of do_perspective::@2
Adding NOP phi() at start of do_perspective::@3
Adding NOP phi() at start of do_perspective::@4
Adding NOP phi() at start of do_perspective::@5
Adding NOP phi() at start of do_perspective::@6
Adding NOP phi() at start of do_perspective::@7
Adding NOP phi() at start of do_perspective::@9
Adding NOP phi() at start of do_perspective::@11
Adding NOP phi() at start of do_perspective::@12
Adding NOP phi() at start of memset
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of print_ln

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] call mulf_init 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *psp1 = (word)mulf_sqr1
  [3] *psp2 = (word)mulf_sqr2
  [4] call print_cls 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] phi()
  [6] call do_perspective 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [7] return 
  to:@return

void mulf_init()
mulf_init: scope:[mulf_init]  from main
  [8] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  [9] mulf_init::add#2 = phi( mulf_init/1, mulf_init::@1/mulf_init::add#1 )
  [9] mulf_init::i#2 = phi( mulf_init/0, mulf_init::@1/mulf_init::i#1 )
  [9] mulf_init::sqr#2 = phi( mulf_init/0, mulf_init::@1/mulf_init::sqr#1 )
  [10] mulf_init::val#0 = > mulf_init::sqr#2
  [11] mulf_sqr1[mulf_init::i#2] = mulf_init::val#0
  [12] (mulf_sqr1+$100)[mulf_init::i#2] = mulf_init::val#0
  [13] mulf_init::$2 = - mulf_init::i#2
  [14] mulf_sqr1[mulf_init::$2] = mulf_init::val#0
  [15] (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0
  [16] (mulf_sqr2+1)[mulf_init::i#2] = mulf_init::val#0
  [17] (mulf_sqr2+$100+1)[mulf_init::i#2] = mulf_init::val#0
  [18] mulf_init::$6 = 1 - mulf_init::i#2
  [19] mulf_sqr2[mulf_init::$6] = mulf_init::val#0
  [20] (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0
  [21] mulf_init::sqr#1 = mulf_init::sqr#2 + mulf_init::add#2
  [22] mulf_init::add#1 = mulf_init::add#2 + 2
  [23] mulf_init::i#1 = ++ mulf_init::i#2
  [24] if(mulf_init::i#1!=$81) goto mulf_init::@1
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  [25] return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@1
  [26] phi()
  [27] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [28] return 
  to:@return

void do_perspective(signed byte do_perspective::x , signed byte do_perspective::y , signed byte do_perspective::z)
do_perspective: scope:[do_perspective]  from main::@2
  [29] phi()
  [30] call print_str 
  to:do_perspective::@1
do_perspective::@1: scope:[do_perspective]  from do_perspective
  [31] phi()
  [32] call print_schar 
  to:do_perspective::@2
do_perspective::@2: scope:[do_perspective]  from do_perspective::@1
  [33] phi()
  [34] call print_str 
  to:do_perspective::@3
do_perspective::@3: scope:[do_perspective]  from do_perspective::@2
  [35] phi()
  [36] call print_schar 
  to:do_perspective::@4
do_perspective::@4: scope:[do_perspective]  from do_perspective::@3
  [37] phi()
  [38] call print_str 
  to:do_perspective::@5
do_perspective::@5: scope:[do_perspective]  from do_perspective::@4
  [39] phi()
  [40] call print_schar 
  to:do_perspective::@6
do_perspective::@6: scope:[do_perspective]  from do_perspective::@5
  [41] phi()
  [42] call print_str 
  to:do_perspective::@7
do_perspective::@7: scope:[do_perspective]  from do_perspective::@6
  [43] phi()
  [44] call perspective 
  to:do_perspective::@8
do_perspective::@8: scope:[do_perspective]  from do_perspective::@7
  [45] print_uchar::b#6 = (byte)*xr
  [46] call print_uchar 
  to:do_perspective::@9
do_perspective::@9: scope:[do_perspective]  from do_perspective::@8
  [47] phi()
  [48] call print_str 
  to:do_perspective::@10
do_perspective::@10: scope:[do_perspective]  from do_perspective::@9
  [49] print_uchar::b#5 = (byte)*yr
  [50] call print_uchar 
  to:do_perspective::@11
do_perspective::@11: scope:[do_perspective]  from do_perspective::@10
  [51] phi()
  [52] call print_str 
  to:do_perspective::@12
do_perspective::@12: scope:[do_perspective]  from do_perspective::@11
  [53] phi()
  [54] call print_ln 
  to:do_perspective::@return
do_perspective::@return: scope:[do_perspective]  from do_perspective::@12
  [55] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  [56] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [57] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [58] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [59] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [60] *memset::dst#2 = memset::c#0
  [61] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from do_perspective do_perspective::@11 do_perspective::@2 do_perspective::@4 do_perspective::@6 do_perspective::@9
  [62] print_char_cursor#77 = phi( do_perspective/print_screen#0, do_perspective::@11/print_char_cursor#11, do_perspective::@2/print_char_cursor#11, do_perspective::@4/print_char_cursor#11, do_perspective::@6/print_char_cursor#11, do_perspective::@9/print_char_cursor#11 )
  [62] print_str::str#10 = phi( do_perspective/do_perspective::str, do_perspective::@11/do_perspective::str5, do_perspective::@2/do_perspective::str1, do_perspective::@4/do_perspective::str1, do_perspective::@6/do_perspective::str3, do_perspective::@9/do_perspective::str1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [63] print_char_cursor#1 = phi( print_str/print_char_cursor#77, print_str::@3/print_char_cursor#11 )
  [63] print_str::str#7 = phi( print_str/print_str::str#10, print_str::@3/print_str::str#0 )
  [64] if(0!=*print_str::str#7) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [65] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [66] print_char::ch#0 = *print_str::str#7
  [67] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [68] print_str::str#0 = ++ print_str::str#7
  to:print_str::@1

void print_schar(signed byte print_schar::b)
print_schar: scope:[print_schar]  from do_perspective::@1 do_perspective::@3 do_perspective::@5
  [69] print_schar::b#4 = phi( do_perspective::@1/do_perspective::x#0, do_perspective::@3/do_perspective::y#0, do_perspective::@5/do_perspective::z#0 )
  [70] if(print_schar::b#4<0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [71] phi()
  [72] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [73] print_schar::b#6 = phi( print_schar::@4/print_schar::b#0, print_schar::@3/print_schar::b#4 )
  [74] print_uchar::b#0 = (byte)print_schar::b#6
  [75] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [76] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [77] phi()
  [78] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [79] print_schar::b#0 = - print_schar::b#4
  to:print_schar::@2

void perspective(signed byte perspective::x , signed byte perspective::y , signed byte perspective::z)
perspective: scope:[perspective]  from do_perspective::@7
  [80] *xr = do_perspective::x#0
  [81] *yr = do_perspective::y#0
  [82] *zr = do_perspective::z#0
  asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  }
  to:perspective::@return
perspective::@return: scope:[perspective]  from perspective
  [84] return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from do_perspective::@10 do_perspective::@8 print_schar::@2
  [85] print_char_cursor#72 = phi( do_perspective::@10/print_char_cursor#1, do_perspective::@8/print_char_cursor#1, print_schar::@2/print_char_cursor#11 )
  [85] print_uchar::b#3 = phi( do_perspective::@10/print_uchar::b#5, do_perspective::@8/print_uchar::b#6, print_schar::@2/print_uchar::b#0 )
  [86] print_uchar::$0 = print_uchar::b#3 >> 4
  [87] print_char::ch#3 = print_hextab[print_uchar::$0]
  [88] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [89] print_uchar::$2 = print_uchar::b#3 & $f
  [90] print_char::ch#4 = print_hextab[print_uchar::$2]
  [91] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [92] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from do_perspective::@12
  [93] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [94] print_line_cursor#12 = phi( print_ln/print_screen#0, print_ln::@1/print_line_cursor#0 )
  [95] print_line_cursor#0 = print_line_cursor#12 + $28
  [96] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [97] return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  [98] print_char_cursor#45 = phi( print_schar::@1/print_char_cursor#1, print_schar::@3/print_char_cursor#1, print_str::@2/print_char_cursor#1, print_uchar/print_char_cursor#72, print_uchar::@1/print_char_cursor#11 )
  [98] print_char::ch#5 = phi( print_schar::@1/'-', print_schar::@3/' ', print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  [99] *print_char_cursor#45 = print_char::ch#5
  [100] print_char_cursor#11 = ++ print_char_cursor#45
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [101] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void do_perspective(signed byte do_perspective::x , signed byte do_perspective::y , signed byte do_perspective::z)
signed byte do_perspective::x
signed byte do_perspective::y
signed byte do_perspective::z
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 2002.0
byte* memset::dst#2 1334.6666666666667
byte* memset::end
word memset::num
void* memset::return
void* memset::str
void mulf_init()
byte~ mulf_init::$2 151.5
byte~ mulf_init::$6 151.5
signed word mulf_init::add
signed word mulf_init::add#1 67.33333333333333
signed word mulf_init::add#2 23.307692307692307
byte mulf_init::i
byte mulf_init::i#1 151.5
byte mulf_init::i#2 57.714285714285715
signed word mulf_init::sqr
signed word mulf_init::sqr#1 50.5
signed word mulf_init::sqr#2 25.25
byte mulf_init::val
byte mulf_init::val#0 90.89999999999999
void perspective(signed byte perspective::x , signed byte perspective::y , signed byte perspective::z)
signed byte perspective::x
signed byte perspective::y
signed byte perspective::z
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 2002.0
byte print_char::ch#3 2002.0
byte print_char::ch#4 2002.0
byte print_char::ch#5 13004.0
byte* print_char_cursor
byte* print_char_cursor#1 128.0
byte* print_char_cursor#11 467.65384615384613
byte* print_char_cursor#45 11603.5
byte* print_char_cursor#72 374.6666666666667
byte* print_char_cursor#77 156.0
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0 1501.5
byte* print_line_cursor#12 2002.0
void print_ln()
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 202.0
signed byte print_schar::b#4 50.5
signed byte print_schar::b#6 202.0
byte* print_screen
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 2002.0
byte* print_str::str#10 101.0
byte* print_str::str#7 1026.25
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 2002.0
byte~ print_uchar::$2 2002.0
byte print_uchar::b
byte print_uchar::b#0 202.0
byte print_uchar::b#3 531.25
byte print_uchar::b#5 22.0
byte print_uchar::b#6 22.0

Initial phi equivalence classes
[ mulf_init::sqr#2 mulf_init::sqr#1 ]
[ mulf_init::i#2 mulf_init::i#1 ]
[ mulf_init::add#2 mulf_init::add#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_str::str#7 print_str::str#10 print_str::str#0 ]
[ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
[ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
[ print_line_cursor#12 print_line_cursor#0 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
Added variable mulf_init::val#0 to live range equivalence class [ mulf_init::val#0 ]
Added variable mulf_init::$2 to live range equivalence class [ mulf_init::$2 ]
Added variable mulf_init::$6 to live range equivalence class [ mulf_init::$6 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ mulf_init::sqr#2 mulf_init::sqr#1 ]
[ mulf_init::i#2 mulf_init::i#1 ]
[ mulf_init::add#2 mulf_init::add#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_str::str#7 print_str::str#10 print_str::str#0 ]
[ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
[ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
[ print_line_cursor#12 print_line_cursor#0 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
[ mulf_init::val#0 ]
[ mulf_init::$2 ]
[ mulf_init::$6 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[2]:2 [ mulf_init::sqr#2 mulf_init::sqr#1 ]
Allocated zp[1]:4 [ mulf_init::i#2 mulf_init::i#1 ]
Allocated zp[2]:5 [ mulf_init::add#2 mulf_init::add#1 ]
Allocated zp[2]:7 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:9 [ print_str::str#7 print_str::str#10 print_str::str#0 ]
Allocated zp[1]:11 [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
Allocated zp[1]:12 [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
Allocated zp[2]:13 [ print_line_cursor#12 print_line_cursor#0 ]
Allocated zp[1]:15 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
Allocated zp[2]:16 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
Allocated zp[1]:18 [ mulf_init::val#0 ]
Allocated zp[1]:19 [ mulf_init::$2 ]
Allocated zp[1]:20 [ mulf_init::$6 ]
Allocated zp[1]:21 [ print_uchar::$0 ]
Allocated zp[1]:22 [ print_uchar::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *psp1 = (word)mulf_sqr1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *psp2 = (word)mulf_sqr2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] mulf_init::$2 = - mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ mulf_init::i#2 mulf_init::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ mulf_init::val#0 ]
Statement [14] mulf_sqr1[mulf_init::$2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ mulf_init::$2 ]
Statement [15] (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [16] (mulf_sqr2+1)[mulf_init::i#2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [17] (mulf_sqr2+$100+1)[mulf_init::i#2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [18] mulf_init::$6 = 1 - mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] { }  ) always clobbers reg byte a 
Statement [19] mulf_sqr2[mulf_init::$6] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ mulf_init::$6 ]
Statement [20] (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] { }  ) always clobbers reg byte a 
Statement [21] mulf_init::sqr#1 = mulf_init::sqr#2 + mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( mulf_init:1 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] { }  ) always clobbers reg byte a 
Statement [22] mulf_init::add#1 = mulf_init::add#2 + 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( mulf_init:1 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] { }  ) always clobbers reg byte a 
Statement [58] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:4::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [60] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:4::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [64] if(0!=*print_str::str#7) goto print_str::@2 [ print_str::str#7 print_char_cursor#1 ] ( do_perspective:6::print_str:30 [ print_str::str#7 print_char_cursor#1 ] { }  do_perspective:6::print_str:34 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:38 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:42 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:48 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:52 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  ) always clobbers reg byte a reg byte y 
Statement [66] print_char::ch#0 = *print_str::str#7 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] ( do_perspective:6::print_str:30 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:34 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:38 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:42 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:48 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:52 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  ) always clobbers reg byte a reg byte y 
Statement [79] print_schar::b#0 = - print_schar::b#4 [ print_char_cursor#11 print_schar::b#0 ] ( do_perspective:6::print_schar:32 [ print_char_cursor#11 print_schar::b#0 ] { }  do_perspective:6::print_schar:36 [ print_char_cursor#11 print_schar::b#0 ] { }  do_perspective:6::print_schar:40 [ print_char_cursor#11 print_schar::b#0 ] { }  ) always clobbers reg byte a 
Statement [80] *xr = do_perspective::x#0 [ ] ( do_perspective:6::perspective:44 [ print_char_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [81] *yr = do_perspective::y#0 [ ] ( do_perspective:6::perspective:44 [ print_char_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [82] *zr = do_perspective::z#0 [ ] ( do_perspective:6::perspective:44 [ print_char_cursor#1 ] { }  ) always clobbers reg byte a 
Statement asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  } always clobbers reg byte a reg byte y 
Statement [86] print_uchar::$0 = print_uchar::b#3 >> 4 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] ( do_perspective:6::print_uchar:46 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_uchar:50 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:32::print_uchar:75 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
Statement [89] print_uchar::$2 = print_uchar::b#3 & $f [ print_char_cursor#11 print_uchar::$2 ] ( do_perspective:6::print_uchar:46 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_uchar:50 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_uchar:75 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [95] print_line_cursor#0 = print_line_cursor#12 + $28 [ print_char_cursor#1 print_line_cursor#0 ] ( do_perspective:6::print_ln:54 [ print_char_cursor#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [96] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 [ print_char_cursor#1 print_line_cursor#0 ] ( do_perspective:6::print_ln:54 [ print_char_cursor#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [99] *print_char_cursor#45 = print_char::ch#5 [ print_char_cursor#45 ] ( do_perspective:6::print_str:30::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:34::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:38::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:42::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:48::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:52::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_char:72 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:36::print_char:72 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:40::print_char:72 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_char:78 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:36::print_char:78 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:40::print_char:78 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_uchar:46::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_uchar:50::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:32::print_uchar:75::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_uchar:46::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_uchar:50::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_uchar:75::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:11 [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
Statement [2] *psp1 = (word)mulf_sqr1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *psp2 = (word)mulf_sqr2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] mulf_sqr1[mulf_init::i#2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [12] (mulf_sqr1+$100)[mulf_init::i#2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [13] mulf_init::$2 = - mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] { }  ) always clobbers reg byte a 
Statement [14] mulf_sqr1[mulf_init::$2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] { }  ) always clobbers reg byte a 
Statement [15] (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [16] (mulf_sqr2+1)[mulf_init::i#2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [17] (mulf_sqr2+$100+1)[mulf_init::i#2] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] { }  ) always clobbers reg byte a 
Statement [18] mulf_init::$6 = 1 - mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] { }  ) always clobbers reg byte a 
Statement [19] mulf_sqr2[mulf_init::$6] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$6 ] { }  ) always clobbers reg byte a 
Statement [20] (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( mulf_init:1 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] { }  ) always clobbers reg byte a 
Statement [21] mulf_init::sqr#1 = mulf_init::sqr#2 + mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( mulf_init:1 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] { }  ) always clobbers reg byte a 
Statement [22] mulf_init::add#1 = mulf_init::add#2 + 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( mulf_init:1 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] { }  ) always clobbers reg byte a 
Statement [58] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:4::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [60] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:4::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [64] if(0!=*print_str::str#7) goto print_str::@2 [ print_str::str#7 print_char_cursor#1 ] ( do_perspective:6::print_str:30 [ print_str::str#7 print_char_cursor#1 ] { }  do_perspective:6::print_str:34 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:38 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:42 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:48 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  do_perspective:6::print_str:52 [ print_str::str#7 print_char_cursor#1 ] { { print_char_cursor#11 = print_char_cursor#77 } }  ) always clobbers reg byte a reg byte y 
Statement [66] print_char::ch#0 = *print_str::str#7 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] ( do_perspective:6::print_str:30 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:34 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:38 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:42 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:48 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:52 [ print_str::str#7 print_char_cursor#1 print_char::ch#0 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  ) always clobbers reg byte a reg byte y 
Statement [79] print_schar::b#0 = - print_schar::b#4 [ print_char_cursor#11 print_schar::b#0 ] ( do_perspective:6::print_schar:32 [ print_char_cursor#11 print_schar::b#0 ] { }  do_perspective:6::print_schar:36 [ print_char_cursor#11 print_schar::b#0 ] { }  do_perspective:6::print_schar:40 [ print_char_cursor#11 print_schar::b#0 ] { }  ) always clobbers reg byte a 
Statement [80] *xr = do_perspective::x#0 [ ] ( do_perspective:6::perspective:44 [ print_char_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [81] *yr = do_perspective::y#0 [ ] ( do_perspective:6::perspective:44 [ print_char_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [82] *zr = do_perspective::z#0 [ ] ( do_perspective:6::perspective:44 [ print_char_cursor#1 ] { }  ) always clobbers reg byte a 
Statement asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  } always clobbers reg byte a reg byte y 
Statement [86] print_uchar::$0 = print_uchar::b#3 >> 4 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] ( do_perspective:6::print_uchar:46 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_uchar:50 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:32::print_uchar:75 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75 [ print_uchar::b#3 print_char_cursor#72 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [89] print_uchar::$2 = print_uchar::b#3 & $f [ print_char_cursor#11 print_uchar::$2 ] ( do_perspective:6::print_uchar:46 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_uchar:50 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_uchar:75 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75 [ print_char_cursor#11 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [95] print_line_cursor#0 = print_line_cursor#12 + $28 [ print_char_cursor#1 print_line_cursor#0 ] ( do_perspective:6::print_ln:54 [ print_char_cursor#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [96] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 [ print_char_cursor#1 print_line_cursor#0 ] ( do_perspective:6::print_ln:54 [ print_char_cursor#1 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [99] *print_char_cursor#45 = print_char::ch#5 [ print_char_cursor#45 ] ( do_perspective:6::print_str:30::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:34::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:38::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:42::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:48::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_str:52::print_char:67 [ print_str::str#7 print_char_cursor#45 ] { { print_char_cursor#11 = print_char_cursor#77 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_char:72 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:36::print_char:72 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:40::print_char:72 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_char:78 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:36::print_char:78 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_schar:40::print_char:78 [ print_schar::b#4 print_char_cursor#45 ] { { print_char_cursor#1 = print_char_cursor#45 } }  do_perspective:6::print_uchar:46::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_uchar:50::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:32::print_uchar:75::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75::print_char:88 [ print_uchar::b#3 print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#3 = print_char::ch#5 } }  do_perspective:6::print_uchar:46::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#6 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_uchar:50::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#3 = print_uchar::b#5 } { print_char_cursor#1 = print_char_cursor#72 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#11 = print_char_cursor#45 } }  do_perspective:6::print_schar:32::print_uchar:75::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:36::print_uchar:75::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  do_perspective:6::print_schar:40::print_uchar:75::print_char:91 [ print_char_cursor#45 ] { { print_uchar::b#0 = print_uchar::b#3 } { print_char_cursor#11 = print_char_cursor#72 print_char_cursor#45 } { print_char::ch#4 = print_char::ch#5 } }  ) always clobbers reg byte y 
Potential registers zp[2]:2 [ mulf_init::sqr#2 mulf_init::sqr#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ mulf_init::i#2 mulf_init::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ mulf_init::add#2 mulf_init::add#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ memset::dst#2 memset::dst#1 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ print_str::str#7 print_str::str#10 print_str::str#0 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ] : zp[1]:11 , reg byte a , reg byte x , 
Potential registers zp[1]:12 [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ print_line_cursor#12 print_line_cursor#0 ] : zp[2]:13 , 
Potential registers zp[1]:15 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:16 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ mulf_init::val#0 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ mulf_init::$2 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ mulf_init::$6 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ print_uchar::$0 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ print_uchar::$2 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 19,010: zp[1]:15 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplift Scope [] 12,729.82: zp[2]:16 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ] 3,503.5: zp[2]:13 [ print_line_cursor#12 print_line_cursor#0 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:21 [ print_uchar::$0 ] 2,002: zp[1]:22 [ print_uchar::$2 ] 777.25: zp[1]:12 [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ] 
Uplift Scope [memset] 3,336.67: zp[2]:7 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_str] 3,129.25: zp[2]:9 [ print_str::str#7 print_str::str#10 print_str::str#0 ] 
Uplift Scope [mulf_init] 209.21: zp[1]:4 [ mulf_init::i#2 mulf_init::i#1 ] 151.5: zp[1]:19 [ mulf_init::$2 ] 151.5: zp[1]:20 [ mulf_init::$6 ] 90.9: zp[1]:18 [ mulf_init::val#0 ] 90.64: zp[2]:5 [ mulf_init::add#2 mulf_init::add#1 ] 75.75: zp[2]:2 [ mulf_init::sqr#2 mulf_init::sqr#1 ] 
Uplift Scope [print_schar] 454.5: zp[1]:11 [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 
Uplift Scope [do_perspective] 
Uplift Scope [perspective] 

Uplifting [print_char] best 4122 combination reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplifting [] best 4122 combination zp[2]:16 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ] zp[2]:13 [ print_line_cursor#12 print_line_cursor#0 ] 
Uplifting [print_uchar] best 4101 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ] 
Uplifting [memset] best 4101 combination zp[2]:7 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_str] best 4101 combination zp[2]:9 [ print_str::str#7 print_str::str#10 print_str::str#0 ] 
Uplifting [mulf_init] best 3711 combination reg byte y [ mulf_init::i#2 mulf_init::i#1 ] reg byte x [ mulf_init::$2 ] reg byte x [ mulf_init::$6 ] zp[1]:18 [ mulf_init::val#0 ] zp[2]:5 [ mulf_init::add#2 mulf_init::add#1 ] zp[2]:2 [ mulf_init::sqr#2 mulf_init::sqr#1 ] 
Uplifting [print_schar] best 3696 combination reg byte x [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ] 
Uplifting [MOS6526_CIA] best 3696 combination 
Uplifting [MOS6569_VICII] best 3696 combination 
Uplifting [MOS6581_SID] best 3696 combination 
Uplifting [RADIX] best 3696 combination 
Uplifting [print_ln] best 3696 combination 
Uplifting [print_cls] best 3696 combination 
Uplifting [main] best 3696 combination 
Uplifting [do_perspective] best 3696 combination 
Uplifting [perspective] best 3696 combination 
Attempting to uplift remaining variables inzp[1]:18 [ mulf_init::val#0 ]
Uplifting [mulf_init] best 3696 combination zp[1]:18 [ mulf_init::val#0 ] 
Coalescing zero page register [ zp[2]:7 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:2 [ mulf_init::sqr#2 mulf_init::sqr#1 ] ]
Coalescing zero page register [ zp[2]:9 [ print_str::str#7 print_str::str#10 print_str::str#0 ] ] with [ zp[2]:5 [ mulf_init::add#2 mulf_init::add#1 ] ]
Coalescing zero page register [ zp[2]:13 [ print_line_cursor#12 print_line_cursor#0 ] ] with [ zp[2]:7 [ memset::dst#2 memset::dst#1 mulf_init::sqr#2 mulf_init::sqr#1 ] ]
Allocated (was zp[2]:9) zp[2]:2 [ print_str::str#7 print_str::str#10 print_str::str#0 mulf_init::add#2 mulf_init::add#1 ]
Allocated (was zp[2]:13) zp[2]:4 [ print_line_cursor#12 print_line_cursor#0 memset::dst#2 memset::dst#1 mulf_init::sqr#2 mulf_init::sqr#1 ]
Allocated (was zp[2]:16) zp[2]:6 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
Allocated (was zp[1]:18) zp[1]:8 [ mulf_init::val#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// 3D Rotation using a Rotation Matrix
// Based on: 
// - C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// - Codebase64 Article http://codebase64.org/doku.php?id=base:3d_rotation  
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The rotated point - updated by calling rotate()
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  // Pointers used to multiply perspective (d/z0-z) onto x- & y-coordinates. Points into mulf_sqr1 / mulf_sqr2.  
  .label psp1 = $f3
  .label psp2 = $f5
  .label print_screen = $400
  .label print_char_cursor = 6
  .label print_line_cursor = 4
  // main
main: {
    // asm { sei  }
    sei
    // [1] call mulf_init 
    // [8] phi from main to mulf_init [phi:main->mulf_init]
  mulf_init_from_main:
    jsr mulf_init
    jmp __b1
    // main::@1
  __b1:
    // [2] *psp1 = (word)mulf_sqr1 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
    // [3] *psp2 = (word)mulf_sqr2 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
    // [4] call print_cls 
    // [26] phi from main::@1 to print_cls [phi:main::@1->print_cls]
  print_cls_from___b1:
    jsr print_cls
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] call do_perspective 
    // [29] phi from main::@2 to do_perspective [phi:main::@2->do_perspective]
  do_perspective_from___b2:
    jsr do_perspective
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x) and g(x) = f(1-x) 
mulf_init: {
    .label val = 8
    .label sqr = 4
    .label add = 2
    // [9] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [9] phi mulf_init::add#2 = 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vwsc1 
    lda #<1
    sta.z add
    lda #>1
    sta.z add+1
    // [9] phi mulf_init::i#2 = 0 [phi:mulf_init->mulf_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [9] phi mulf_init::sqr#2 = 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vwsc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    jmp __b1
    // [9] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  __b1_from___b1:
    // [9] phi mulf_init::add#2 = mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
    // [9] phi mulf_init::i#2 = mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
    // [9] phi mulf_init::sqr#2 = mulf_init::sqr#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
    jmp __b1
    // mulf_init::@1
  __b1:
    // [10] mulf_init::val#0 = > mulf_init::sqr#2 -- vbuz1=_hi_vwsz2 
    lda.z sqr+1
    sta.z val
    // [11] mulf_sqr1[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z val
    sta mulf_sqr1,y
    // [12] (mulf_sqr1+$100)[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z val
    sta mulf_sqr1+$100,y
    // [13] mulf_init::$2 = - mulf_init::i#2 -- vbuxx=_neg_vbuyy 
    tya
    eor #$ff
    tax
    inx
    // [14] mulf_sqr1[mulf_init::$2] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta mulf_sqr1,x
    // [15] (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta mulf_sqr1+$100,x
    // [16] (mulf_sqr2+1)[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z val
    sta mulf_sqr2+1,y
    // [17] (mulf_sqr2+$100+1)[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z val
    sta mulf_sqr2+$100+1,y
    // [18] mulf_init::$6 = 1 - mulf_init::i#2 -- vbuxx=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    tax
    axs #-1-1
    // [19] mulf_sqr2[mulf_init::$6] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta mulf_sqr2,x
    // [20] (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta mulf_sqr2+$100,x
    // [21] mulf_init::sqr#1 = mulf_init::sqr#2 + mulf_init::add#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z sqr
    clc
    adc.z add
    sta.z sqr
    lda.z sqr+1
    adc.z add+1
    sta.z sqr+1
    // [22] mulf_init::add#1 = mulf_init::add#2 + 2 -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z add
    adc #<2
    sta.z add
    lda.z add+1
    adc #>2
    sta.z add+1
    // [23] mulf_init::i#1 = ++ mulf_init::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [24] if(mulf_init::i#1!=$81) goto mulf_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$81
    bne __b1_from___b1
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [25] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [27] call memset 
    // [56] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [28] return 
    rts
}
  // do_perspective
do_perspective: {
    .label x = $39
    .label y = -$47
    .label z = $36
    // [30] call print_str 
    // [62] phi from do_perspective to print_str [phi:do_perspective->print_str]
  print_str_from_do_perspective:
    // [62] phi print_char_cursor#77 = print_screen#0 [phi:do_perspective->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [62] phi print_str::str#10 = do_perspective::str [phi:do_perspective->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [31] phi from do_perspective to do_perspective::@1 [phi:do_perspective->do_perspective::@1]
  __b1_from_do_perspective:
    jmp __b1
    // do_perspective::@1
  __b1:
    // [32] call print_schar 
    // [69] phi from do_perspective::@1 to print_schar [phi:do_perspective::@1->print_schar]
  print_schar_from___b1:
    // [69] phi print_schar::b#4 = do_perspective::x#0 [phi:do_perspective::@1->print_schar#0] -- vbsxx=vbsc1 
    ldx #x
    jsr print_schar
    // [33] phi from do_perspective::@1 to do_perspective::@2 [phi:do_perspective::@1->do_perspective::@2]
  __b2_from___b1:
    jmp __b2
    // do_perspective::@2
  __b2:
    // [34] call print_str 
    // [62] phi from do_perspective::@2 to print_str [phi:do_perspective::@2->print_str]
  print_str_from___b2:
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@2->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str1 [phi:do_perspective::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [35] phi from do_perspective::@2 to do_perspective::@3 [phi:do_perspective::@2->do_perspective::@3]
  __b3_from___b2:
    jmp __b3
    // do_perspective::@3
  __b3:
    // [36] call print_schar 
    // [69] phi from do_perspective::@3 to print_schar [phi:do_perspective::@3->print_schar]
  print_schar_from___b3:
    // [69] phi print_schar::b#4 = do_perspective::y#0 [phi:do_perspective::@3->print_schar#0] -- vbsxx=vbsc1 
    ldx #y
    jsr print_schar
    // [37] phi from do_perspective::@3 to do_perspective::@4 [phi:do_perspective::@3->do_perspective::@4]
  __b4_from___b3:
    jmp __b4
    // do_perspective::@4
  __b4:
    // [38] call print_str 
    // [62] phi from do_perspective::@4 to print_str [phi:do_perspective::@4->print_str]
  print_str_from___b4:
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@4->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str1 [phi:do_perspective::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [39] phi from do_perspective::@4 to do_perspective::@5 [phi:do_perspective::@4->do_perspective::@5]
  __b5_from___b4:
    jmp __b5
    // do_perspective::@5
  __b5:
    // [40] call print_schar 
    // [69] phi from do_perspective::@5 to print_schar [phi:do_perspective::@5->print_schar]
  print_schar_from___b5:
    // [69] phi print_schar::b#4 = do_perspective::z#0 [phi:do_perspective::@5->print_schar#0] -- vbsxx=vbsc1 
    ldx #z
    jsr print_schar
    // [41] phi from do_perspective::@5 to do_perspective::@6 [phi:do_perspective::@5->do_perspective::@6]
  __b6_from___b5:
    jmp __b6
    // do_perspective::@6
  __b6:
    // [42] call print_str 
    // [62] phi from do_perspective::@6 to print_str [phi:do_perspective::@6->print_str]
  print_str_from___b6:
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@6->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str3 [phi:do_perspective::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [43] phi from do_perspective::@6 to do_perspective::@7 [phi:do_perspective::@6->do_perspective::@7]
  __b7_from___b6:
    jmp __b7
    // do_perspective::@7
  __b7:
    // [44] call perspective 
    jsr perspective
    jmp __b8
    // do_perspective::@8
  __b8:
    // [45] print_uchar::b#6 = (byte)*xr -- vbuxx=_deref_pbuc1 
    ldx xr
    // [46] call print_uchar 
    // [85] phi from do_perspective::@8 to print_uchar [phi:do_perspective::@8->print_uchar]
  print_uchar_from___b8:
    // [85] phi print_char_cursor#72 = print_char_cursor#1 [phi:do_perspective::@8->print_uchar#0] -- register_copy 
    // [85] phi print_uchar::b#3 = print_uchar::b#6 [phi:do_perspective::@8->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [47] phi from do_perspective::@8 to do_perspective::@9 [phi:do_perspective::@8->do_perspective::@9]
  __b9_from___b8:
    jmp __b9
    // do_perspective::@9
  __b9:
    // [48] call print_str 
    // [62] phi from do_perspective::@9 to print_str [phi:do_perspective::@9->print_str]
  print_str_from___b9:
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@9->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str1 [phi:do_perspective::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b10
    // do_perspective::@10
  __b10:
    // [49] print_uchar::b#5 = (byte)*yr -- vbuxx=_deref_pbuc1 
    ldx yr
    // [50] call print_uchar 
    // [85] phi from do_perspective::@10 to print_uchar [phi:do_perspective::@10->print_uchar]
  print_uchar_from___b10:
    // [85] phi print_char_cursor#72 = print_char_cursor#1 [phi:do_perspective::@10->print_uchar#0] -- register_copy 
    // [85] phi print_uchar::b#3 = print_uchar::b#5 [phi:do_perspective::@10->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [51] phi from do_perspective::@10 to do_perspective::@11 [phi:do_perspective::@10->do_perspective::@11]
  __b11_from___b10:
    jmp __b11
    // do_perspective::@11
  __b11:
    // [52] call print_str 
    // [62] phi from do_perspective::@11 to print_str [phi:do_perspective::@11->print_str]
  print_str_from___b11:
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@11->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str5 [phi:do_perspective::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    // [53] phi from do_perspective::@11 to do_perspective::@12 [phi:do_perspective::@11->do_perspective::@12]
  __b12_from___b11:
    jmp __b12
    // do_perspective::@12
  __b12:
    // [54] call print_ln 
    // [93] phi from do_perspective::@12 to print_ln [phi:do_perspective::@12->print_ln]
  print_ln_from___b12:
    jsr print_ln
    jmp __breturn
    // do_perspective::@return
  __breturn:
    // [55] return 
    rts
    str: .text "("
    .byte 0
    str1: .text ","
    .byte 0
    str3: .text ") -> ("
    .byte 0
    str5: .text ")"
    .byte 0
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 4
    // [57] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [57] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [58] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [59] return 
    rts
    // memset::@2
  __b2:
    // [60] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [61] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [57] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [57] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(2) str)
print_str: {
    .label str = 2
    // [63] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [63] phi print_char_cursor#1 = print_char_cursor#77 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [63] phi print_str::str#7 = print_str::str#10 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [64] if(0!=*print_str::str#7) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [65] return 
    rts
    // print_str::@2
  __b2:
    // [66] print_char::ch#0 = *print_str::str#7 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [67] call print_char 
    // [98] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [98] phi print_char_cursor#45 = print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [68] print_str::str#0 = ++ print_str::str#7 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // [70] if(print_schar::b#4<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [71] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [72] call print_char 
    // [98] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [98] phi print_char_cursor#45 = print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [73] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [73] phi print_schar::b#6 = print_schar::b#4 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [74] print_uchar::b#0 = (byte)print_schar::b#6
    // [75] call print_uchar 
    // [85] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [85] phi print_char_cursor#72 = print_char_cursor#11 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [85] phi print_uchar::b#3 = print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [76] return 
    rts
    // [77] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [78] call print_char 
    // [98] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [98] phi print_char_cursor#45 = print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [79] print_schar::b#0 = - print_schar::b#4 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // perspective
// Apply perspective to a 3d-point. Result is returned in (*xr,*yr) 
// Implemented in assembler to utilize seriously fast multiplication 
perspective: {
    // [80] *xr = do_perspective::x#0 -- _deref_pbsc1=vbsc2 
    lda #do_perspective.x
    sta xr
    // [81] *yr = do_perspective::y#0 -- _deref_pbsc1=vbsc2 
    lda #do_perspective.y
    sta yr
    // [82] *zr = do_perspective::z#0 -- _deref_pbsc1=vbsc2 
    lda #do_perspective.z
    sta zr
    // asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  }
    lda zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta psp1
    eor #$ff
    sta psp2
    clc
    ldy yr
    lda (psp1),y
    sbc (psp2),y
    adc #$80
    sta yr
    clc
    ldy xr
    lda (psp1),y
    sbc (psp2),y
    adc #$80
    sta xr
    jmp __breturn
    // perspective::@return
  __breturn:
    // [84] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [86] print_uchar::$0 = print_uchar::b#3 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [87] print_char::ch#3 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [88] call print_char 
  // Table of hexadecimal digits
    // [98] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [98] phi print_char_cursor#45 = print_char_cursor#72 [phi:print_uchar->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [89] print_uchar::$2 = print_uchar::b#3 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [90] print_char::ch#4 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [91] call print_char 
    // [98] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [98] phi print_char_cursor#45 = print_char_cursor#11 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [92] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [94] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
  __b1_from_print_ln:
    // [94] phi print_line_cursor#12 = print_screen#0 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jmp __b1
    // [94] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
  __b1_from___b1:
    // [94] phi print_line_cursor#12 = print_line_cursor#0 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [95] print_line_cursor#0 = print_line_cursor#12 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [96] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [97] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [99] *print_char_cursor#45 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [100] print_char_cursor#11 = ++ print_char_cursor#45 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [101] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Multiplication tables for seriously fast multiplication. 
  // This version is optimized for speed over accuracy
  // - It can multiply signed numbers with no extra code - but only for numbers in [-$3f;$3f]  
  // - It throws away the low part of the 32-bit result
  // - It return >a*b*4 to maximize precision (when passed maximal input values $3f*$3f the result is $3e) 
  // See the following for information about the method
  // - http://codebase64.org/doku.php?id=base:seriously_fast_multiplication 
  // - http://codebase64.org/doku.php?id=magazines:chacking16
  // mulf_sqr tables will contain f(x)=int(x*x) and g(x) = f(1-x).
  // f(x) = >(( x * x ))
  .align $100
  mulf_sqr1: .fill $200, 0
  // g(x) =  >((( 1 - x ) * ( 1 - x )))
  .align $100
  mulf_sqr2: .fill $200, 0
  // Perspective multiplication table containing (d/(z0-z)[z] for each z-value   
  .align $100
PERSP_Z:
{
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda.z val
Removing instruction lda.z val
Removing instruction lda.z val
Removing instruction lda.z val
Removing instruction lda.z val
Removing instruction lda.z val
Removing instruction lda zr
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b2_from___b1:
Removing instruction do_perspective_from___b2:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_do_perspective:
Removing instruction print_schar_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_str_from___b2:
Removing instruction __b3_from___b2:
Removing instruction print_schar_from___b3:
Removing instruction __b4_from___b3:
Removing instruction print_str_from___b4:
Removing instruction __b5_from___b4:
Removing instruction print_schar_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_str_from___b6:
Removing instruction __b7_from___b6:
Removing instruction __b9_from___b8:
Removing instruction print_str_from___b9:
Removing instruction __b11_from___b10:
Removing instruction print_str_from___b11:
Removing instruction __b12_from___b11:
Removing instruction print_ln_from___b12:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uchar_from___b2:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction mulf_init_from_main:
Removing instruction __b1:
Removing instruction print_cls_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_mulf_init:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction print_str_from_do_perspective:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction print_uchar_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction print_uchar_from___b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_print_ln:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const signed byte* PERSP_Z[$100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void do_perspective(signed byte do_perspective::x , signed byte do_perspective::y , signed byte do_perspective::z)
const byte* do_perspective::str[2]  = "("
const byte* do_perspective::str1[2]  = ","
const byte* do_perspective::str3[7]  = ") -> ("
const byte* do_perspective::str5[2]  = ")"
signed byte do_perspective::x
const signed byte do_perspective::x#0 x = $39
signed byte do_perspective::y
const signed byte do_perspective::y#0 y = -$47
signed byte do_perspective::z
const signed byte do_perspective::z#0 z = $36
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:4 2002.0
byte* memset::dst#2 dst zp[2]:4 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void mulf_init()
byte~ mulf_init::$2 reg byte x 151.5
byte~ mulf_init::$6 reg byte x 151.5
signed word mulf_init::add
signed word mulf_init::add#1 add zp[2]:2 67.33333333333333
signed word mulf_init::add#2 add zp[2]:2 23.307692307692307
byte mulf_init::i
byte mulf_init::i#1 reg byte y 151.5
byte mulf_init::i#2 reg byte y 57.714285714285715
signed word mulf_init::sqr
signed word mulf_init::sqr#1 sqr zp[2]:4 50.5
signed word mulf_init::sqr#2 sqr zp[2]:4 25.25
byte mulf_init::val
byte mulf_init::val#0 val zp[1]:8 90.89999999999999
const byte* mulf_sqr1[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2[$200]  = { fill( $200, 0) }
void perspective(signed byte perspective::x , signed byte perspective::y , signed byte perspective::z)
signed byte perspective::x
signed byte perspective::y
signed byte perspective::z
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 2002.0
byte print_char::ch#3 reg byte a 2002.0
byte print_char::ch#4 reg byte a 2002.0
byte print_char::ch#5 reg byte a 13004.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:6 128.0
byte* print_char_cursor#11 print_char_cursor zp[2]:6 467.65384615384613
byte* print_char_cursor#45 print_char_cursor zp[2]:6 11603.5
byte* print_char_cursor#72 print_char_cursor zp[2]:6 374.6666666666667
byte* print_char_cursor#77 print_char_cursor zp[2]:6 156.0
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:4 1501.5
byte* print_line_cursor#12 print_line_cursor zp[2]:4 2002.0
void print_ln()
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 202.0
signed byte print_schar::b#4 reg byte x 50.5
signed byte print_schar::b#6 reg byte x 202.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:2 2002.0
byte* print_str::str#10 str zp[2]:2 101.0
byte* print_str::str#7 str zp[2]:2 1026.25
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 202.0
byte print_uchar::b#3 reg byte x 531.25
byte print_uchar::b#5 reg byte x 22.0
byte print_uchar::b#6 reg byte x 22.0
const word* psp1 = (word*) 243
const word* psp2 = (word*) 245
const signed byte* xr = (signed byte*) 240
const signed byte* yr = (signed byte*) 241
const signed byte* zr = (signed byte*) 242

reg byte y [ mulf_init::i#2 mulf_init::i#1 ]
zp[2]:2 [ print_str::str#7 print_str::str#10 print_str::str#0 mulf_init::add#2 mulf_init::add#1 ]
reg byte x [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
reg byte x [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
zp[2]:4 [ print_line_cursor#12 print_line_cursor#0 memset::dst#2 memset::dst#1 mulf_init::sqr#2 mulf_init::sqr#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:6 [ print_char_cursor#45 print_char_cursor#72 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 ]
zp[1]:8 [ mulf_init::val#0 ]
reg byte x [ mulf_init::$2 ]
reg byte x [ mulf_init::$6 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 3091

  // File Comments
// 3D Rotation using a Rotation Matrix
// Based on: 
// - C= Hacking Magazine Issue 8. http://www.ffd2.com/fridge/chacking/c=hacking8.txt
// - Codebase64 Article http://codebase64.org/doku.php?id=base:3d_rotation  
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The rotated point - updated by calling rotate()
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  // Pointers used to multiply perspective (d/z0-z) onto x- & y-coordinates. Points into mulf_sqr1 / mulf_sqr2.  
  .label psp1 = $f3
  .label psp2 = $f5
  .label print_screen = $400
  .label print_char_cursor = 6
  .label print_line_cursor = 4
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // mulf_init()
    // [1] call mulf_init 
    // [8] phi from main to mulf_init [phi:main->mulf_init]
    jsr mulf_init
    // main::@1
    // *psp1 = (unsigned int)mulf_sqr1
    // [2] *psp1 = (word)mulf_sqr1 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
    // *psp2 = (unsigned int)mulf_sqr2
    // [3] *psp2 = (word)mulf_sqr2 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
    // print_cls()
    // [4] call print_cls 
    // [26] phi from main::@1 to print_cls [phi:main::@1->print_cls]
    jsr print_cls
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // do_perspective($39, -$47, $36)
    // [6] call do_perspective 
    // [29] phi from main::@2 to do_perspective [phi:main::@2->do_perspective]
    jsr do_perspective
    // main::@return
    // }
    // [7] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x) and g(x) = f(1-x) 
mulf_init: {
    .label val = 8
    .label sqr = 4
    .label add = 2
    // [9] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
    // [9] phi mulf_init::add#2 = 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vwsc1 
    lda #<1
    sta.z add
    lda #>1
    sta.z add+1
    // [9] phi mulf_init::i#2 = 0 [phi:mulf_init->mulf_init::@1#1] -- vbuyy=vbuc1 
    tay
    // [9] phi mulf_init::sqr#2 = 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vwsc1 
    sta.z sqr
    sta.z sqr+1
    // [9] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
    // [9] phi mulf_init::add#2 = mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
    // [9] phi mulf_init::i#2 = mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
    // [9] phi mulf_init::sqr#2 = mulf_init::sqr#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
    // mulf_init::@1
  __b1:
    // val = >sqr
    // [10] mulf_init::val#0 = > mulf_init::sqr#2 -- vbuz1=_hi_vwsz2 
    lda.z sqr+1
    sta.z val
    // mulf_sqr1[i] = val
    // [11] mulf_sqr1[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    sta mulf_sqr1,y
    // (mulf_sqr1+$100)[i] = val
    // [12] (mulf_sqr1+$100)[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    sta mulf_sqr1+$100,y
    // -i
    // [13] mulf_init::$2 = - mulf_init::i#2 -- vbuxx=_neg_vbuyy 
    tya
    eor #$ff
    tax
    inx
    // mulf_sqr1[-i] = val
    // [14] mulf_sqr1[mulf_init::$2] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta mulf_sqr1,x
    // (mulf_sqr1+$100)[-i] = val
    // [15] (mulf_sqr1+$100)[mulf_init::$2] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    sta mulf_sqr1+$100,x
    // mulf_sqr2[i+1] = val
    // [16] (mulf_sqr2+1)[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    sta mulf_sqr2+1,y
    // (mulf_sqr2+$100)[i+1] = val
    // [17] (mulf_sqr2+$100+1)[mulf_init::i#2] = mulf_init::val#0 -- pbuc1_derefidx_vbuyy=vbuz1 
    sta mulf_sqr2+$100+1,y
    // 1-i
    // [18] mulf_init::$6 = 1 - mulf_init::i#2 -- vbuxx=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    tax
    axs #-1-1
    // mulf_sqr2[1-i] = val
    // [19] mulf_sqr2[mulf_init::$6] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta mulf_sqr2,x
    // (mulf_sqr2+$100)[1-i] = val
    // [20] (mulf_sqr2+$100)[mulf_init::$6] = mulf_init::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    sta mulf_sqr2+$100,x
    // sqr += add
    // [21] mulf_init::sqr#1 = mulf_init::sqr#2 + mulf_init::add#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z sqr
    clc
    adc.z add
    sta.z sqr
    lda.z sqr+1
    adc.z add+1
    sta.z sqr+1
    // add +=2
    // [22] mulf_init::add#1 = mulf_init::add#2 + 2 -- vwsz1=vwsz1_plus_vbsc1 
    clc
    lda.z add
    adc #<2
    sta.z add
    lda.z add+1
    adc #>2
    sta.z add+1
    // for( char i:0..128)
    // [23] mulf_init::i#1 = ++ mulf_init::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [24] if(mulf_init::i#1!=$81) goto mulf_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$81
    bne __b1
    // mulf_init::@return
    // }
    // [25] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [27] call memset 
    // [56] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [28] return 
    rts
}
  // do_perspective
do_perspective: {
    .label x = $39
    .label y = -$47
    .label z = $36
    // print_str("(")
    // [30] call print_str 
    // [62] phi from do_perspective to print_str [phi:do_perspective->print_str]
    // [62] phi print_char_cursor#77 = print_screen#0 [phi:do_perspective->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [62] phi print_str::str#10 = do_perspective::str [phi:do_perspective->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [31] phi from do_perspective to do_perspective::@1 [phi:do_perspective->do_perspective::@1]
    // do_perspective::@1
    // print_schar(x)
    // [32] call print_schar 
    // [69] phi from do_perspective::@1 to print_schar [phi:do_perspective::@1->print_schar]
    // [69] phi print_schar::b#4 = do_perspective::x#0 [phi:do_perspective::@1->print_schar#0] -- vbsxx=vbsc1 
    ldx #x
    jsr print_schar
    // [33] phi from do_perspective::@1 to do_perspective::@2 [phi:do_perspective::@1->do_perspective::@2]
    // do_perspective::@2
    // print_str(",")
    // [34] call print_str 
    // [62] phi from do_perspective::@2 to print_str [phi:do_perspective::@2->print_str]
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@2->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str1 [phi:do_perspective::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [35] phi from do_perspective::@2 to do_perspective::@3 [phi:do_perspective::@2->do_perspective::@3]
    // do_perspective::@3
    // print_schar(y)
    // [36] call print_schar 
    // [69] phi from do_perspective::@3 to print_schar [phi:do_perspective::@3->print_schar]
    // [69] phi print_schar::b#4 = do_perspective::y#0 [phi:do_perspective::@3->print_schar#0] -- vbsxx=vbsc1 
    ldx #y
    jsr print_schar
    // [37] phi from do_perspective::@3 to do_perspective::@4 [phi:do_perspective::@3->do_perspective::@4]
    // do_perspective::@4
    // print_str(",")
    // [38] call print_str 
    // [62] phi from do_perspective::@4 to print_str [phi:do_perspective::@4->print_str]
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@4->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str1 [phi:do_perspective::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [39] phi from do_perspective::@4 to do_perspective::@5 [phi:do_perspective::@4->do_perspective::@5]
    // do_perspective::@5
    // print_schar(z)
    // [40] call print_schar 
    // [69] phi from do_perspective::@5 to print_schar [phi:do_perspective::@5->print_schar]
    // [69] phi print_schar::b#4 = do_perspective::z#0 [phi:do_perspective::@5->print_schar#0] -- vbsxx=vbsc1 
    ldx #z
    jsr print_schar
    // [41] phi from do_perspective::@5 to do_perspective::@6 [phi:do_perspective::@5->do_perspective::@6]
    // do_perspective::@6
    // print_str(") -> (")
    // [42] call print_str 
    // [62] phi from do_perspective::@6 to print_str [phi:do_perspective::@6->print_str]
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@6->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str3 [phi:do_perspective::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // [43] phi from do_perspective::@6 to do_perspective::@7 [phi:do_perspective::@6->do_perspective::@7]
    // do_perspective::@7
    // perspective(x, y, z)
    // [44] call perspective 
    jsr perspective
    // do_perspective::@8
    // [45] print_uchar::b#6 = (byte)*xr -- vbuxx=_deref_pbuc1 
    ldx xr
    // print_uchar((byte)*xr)
    // [46] call print_uchar 
    // [85] phi from do_perspective::@8 to print_uchar [phi:do_perspective::@8->print_uchar]
    // [85] phi print_char_cursor#72 = print_char_cursor#1 [phi:do_perspective::@8->print_uchar#0] -- register_copy 
    // [85] phi print_uchar::b#3 = print_uchar::b#6 [phi:do_perspective::@8->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [47] phi from do_perspective::@8 to do_perspective::@9 [phi:do_perspective::@8->do_perspective::@9]
    // do_perspective::@9
    // print_str(",")
    // [48] call print_str 
    // [62] phi from do_perspective::@9 to print_str [phi:do_perspective::@9->print_str]
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@9->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str1 [phi:do_perspective::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // do_perspective::@10
    // [49] print_uchar::b#5 = (byte)*yr -- vbuxx=_deref_pbuc1 
    ldx yr
    // print_uchar((byte)*yr)
    // [50] call print_uchar 
    // [85] phi from do_perspective::@10 to print_uchar [phi:do_perspective::@10->print_uchar]
    // [85] phi print_char_cursor#72 = print_char_cursor#1 [phi:do_perspective::@10->print_uchar#0] -- register_copy 
    // [85] phi print_uchar::b#3 = print_uchar::b#5 [phi:do_perspective::@10->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [51] phi from do_perspective::@10 to do_perspective::@11 [phi:do_perspective::@10->do_perspective::@11]
    // do_perspective::@11
    // print_str(")")
    // [52] call print_str 
    // [62] phi from do_perspective::@11 to print_str [phi:do_perspective::@11->print_str]
    // [62] phi print_char_cursor#77 = print_char_cursor#11 [phi:do_perspective::@11->print_str#0] -- register_copy 
    // [62] phi print_str::str#10 = do_perspective::str5 [phi:do_perspective::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str5
    sta.z print_str.str
    lda #>str5
    sta.z print_str.str+1
    jsr print_str
    // [53] phi from do_perspective::@11 to do_perspective::@12 [phi:do_perspective::@11->do_perspective::@12]
    // do_perspective::@12
    // print_ln()
    // [54] call print_ln 
    // [93] phi from do_perspective::@12 to print_ln [phi:do_perspective::@12->print_ln]
    jsr print_ln
    // do_perspective::@return
    // }
    // [55] return 
    rts
    str: .text "("
    .byte 0
    str1: .text ","
    .byte 0
    str3: .text ") -> ("
    .byte 0
    str5: .text ")"
    .byte 0
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 4
    // [57] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [57] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [58] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [59] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [60] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [61] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [57] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [57] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(2) str)
print_str: {
    .label str = 2
    // [63] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [63] phi print_char_cursor#1 = print_char_cursor#77 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [63] phi print_str::str#7 = print_str::str#10 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [64] if(0!=*print_str::str#7) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [65] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [66] print_char::ch#0 = *print_str::str#7 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [67] call print_char 
    // [98] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [98] phi print_char_cursor#45 = print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [68] print_str::str#0 = ++ print_str::str#7 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // if(b<0)
    // [70] if(print_schar::b#4<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [71] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [72] call print_char 
    // [98] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [98] phi print_char_cursor#45 = print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [73] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [73] phi print_schar::b#6 = print_schar::b#4 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [74] print_uchar::b#0 = (byte)print_schar::b#6
    // [75] call print_uchar 
    // [85] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
    // [85] phi print_char_cursor#72 = print_char_cursor#11 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [85] phi print_uchar::b#3 = print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_schar::@return
    // }
    // [76] return 
    rts
    // [77] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [78] call print_char 
    // [98] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [98] phi print_char_cursor#45 = print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [79] print_schar::b#0 = - print_schar::b#4 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // perspective
// Apply perspective to a 3d-point. Result is returned in (*xr,*yr) 
// Implemented in assembler to utilize seriously fast multiplication 
perspective: {
    // *xr = x
    // [80] *xr = do_perspective::x#0 -- _deref_pbsc1=vbsc2 
    lda #do_perspective.x
    sta xr
    // *yr = y
    // [81] *yr = do_perspective::y#0 -- _deref_pbsc1=vbsc2 
    lda #do_perspective.y
    sta yr
    // *zr = z
    // [82] *zr = do_perspective::z#0 -- _deref_pbsc1=vbsc2 
    lda #do_perspective.z
    sta zr
    // asm
    // asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  }
    sta PP+1
  PP:
    lda PERSP_Z
    sta psp1
    eor #$ff
    sta psp2
    clc
    ldy yr
    lda (psp1),y
    sbc (psp2),y
    adc #$80
    sta yr
    clc
    ldy xr
    lda (psp1),y
    sbc (psp2),y
    adc #$80
    sta xr
    // perspective::@return
    // }
    // [84] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [86] print_uchar::$0 = print_uchar::b#3 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [87] print_char::ch#3 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [88] call print_char 
  // Table of hexadecimal digits
    // [98] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [98] phi print_char_cursor#45 = print_char_cursor#72 [phi:print_uchar->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [89] print_uchar::$2 = print_uchar::b#3 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [90] print_char::ch#4 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [91] call print_char 
    // [98] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [98] phi print_char_cursor#45 = print_char_cursor#11 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [98] phi print_char::ch#5 = print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [92] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [94] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
    // [94] phi print_line_cursor#12 = print_screen#0 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [94] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
    // [94] phi print_line_cursor#12 = print_line_cursor#0 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [95] print_line_cursor#0 = print_line_cursor#12 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [96] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [97] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [99] *print_char_cursor#45 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [100] print_char_cursor#11 = ++ print_char_cursor#45 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [101] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Multiplication tables for seriously fast multiplication. 
  // This version is optimized for speed over accuracy
  // - It can multiply signed numbers with no extra code - but only for numbers in [-$3f;$3f]  
  // - It throws away the low part of the 32-bit result
  // - It return >a*b*4 to maximize precision (when passed maximal input values $3f*$3f the result is $3e) 
  // See the following for information about the method
  // - http://codebase64.org/doku.php?id=base:seriously_fast_multiplication 
  // - http://codebase64.org/doku.php?id=magazines:chacking16
  // mulf_sqr tables will contain f(x)=int(x*x) and g(x) = f(1-x).
  // f(x) = >(( x * x ))
  .align $100
  mulf_sqr1: .fill $200, 0
  // g(x) =  >((( 1 - x ) * ( 1 - x )))
  .align $100
  mulf_sqr2: .fill $200, 0
  // Perspective multiplication table containing (d/(z0-z)[z] for each z-value   
  .align $100
PERSP_Z:
{
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}


