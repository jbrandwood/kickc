@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  to:toD0181
toD0181: scope:[]  from @1
  [6] phi()
  to:@3
@3: scope:[]  from toD0181
  [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0
  [8] (volatile byte) canvas_show_flag ← (byte) 0
  to:@2
@2: scope:[]  from @3
  [9] phi()
  [10] call main 
  to:@end
@end: scope:[]  from @2
  [11] phi()

(void()) main()
main: scope:[main]  from @2
  [12] phi()
  [13] call memset 
  to:main::@11
main::@11: scope:[main]  from main
  [14] phi()
  [15] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@6
  [16] (byte*) main::screen#5 ← phi( main::@11/(const nomodify byte*) SCREEN+(byte) $c main::@6/(byte*) main::screen#1 )
  [16] (byte*) main::cols#5 ← phi( main::@11/(const nomodify byte*) COLS+(byte) $c main::@6/(byte*) main::cols#1 )
  [16] (byte) main::y#2 ← phi( main::@11/(byte) 0 main::@6/(byte) main::y#1 )
  [17] if((byte) main::y#2<(byte) $10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [18] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [19] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK
  [20] call setup_irq 
  to:main::@12
main::@12: scope:[main]  from main::@3
  [21] phi()
  [22] call textcolor 
  to:main::@7
main::@7: scope:[main]  from main::@12 main::@26
  [23] (byte*) main::canvas#10 ← phi( main::@12/(const nomodify byte*) CANVAS1 main::@26/(byte*) main::canvas#25 )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [24] phi()
  [25] call clock_start 
  to:main::@13
main::@13: scope:[main]  from main::@8
  [26] (void*) memset::str#4 ← (void*)(byte*) main::canvas#10
  [27] call memset 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [28] (byte) main::x0#0 ← *((const byte*) COSTAB+(const byte) main::p0_idx)
  [29] (byte) main::y0#0 ← *((const byte*) SINTAB+(const byte) main::p0_idx)
  [30] (byte) main::x1#0 ← *((const byte*) COSTAB+(const byte) main::p1_idx#0)
  [31] (byte) main::y1#0 ← *((const byte*) SINTAB+(const byte) main::p1_idx#0)
  [32] (byte*) line::canvas#0 ← (byte*) main::canvas#10
  [33] (byte) line::x1#0 ← (byte) main::x0#0
  [34] (byte) line::y1#0 ← (byte) main::y0#0
  [35] (byte) line::x2#0 ← (byte) main::x1#0
  [36] (byte) line::y2#0 ← (byte) main::y1#0
  [37] call line 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@14
  [38] phi()
  to:main::toD0182
main::toD0182: scope:[main]  from main::toD0181
  [39] phi()
  to:main::@10
main::@10: scope:[main]  from main::toD0182
  [40] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0
  [41] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2
  [42] call clock 
  to:main::@15
main::@15: scope:[main]  from main::@10
  [43] phi()
  [44] call gotoxy 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [45] phi()
  [46] call cputs 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [47] (byte) printf_uchar::uvalue#0 ← (byte) main::x0#0
  [48] call printf_uchar 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [49] phi()
  [50] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [51] (byte) printf_uchar::uvalue#1 ← (byte) main::y0#0
  [52] call printf_uchar 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [53] phi()
  [54] call cputs 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [55] (byte) printf_uchar::uvalue#2 ← (byte) main::x1#0
  [56] call printf_uchar 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [57] phi()
  [58] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [59] (byte) printf_uchar::uvalue#3 ← (byte) main::y1#0
  [60] call printf_uchar 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [61] phi()
  [62] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [63] (volatile byte) canvas_show_flag ← (byte) 1
  to:main::@9
main::@9: scope:[main]  from main::@25 main::@9
  [64] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9
  to:main::@26
main::@26: scope:[main]  from main::@9
  [65] (byte*) main::canvas#25 ← (byte*)(word) main::canvas#1
  to:main::@7
main::@2: scope:[main]  from main::@1
  [66] (byte) main::c#4 ← (byte) main::y#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [67] (byte) main::c#2 ← phi( main::@2/(byte) main::c#4 main::@5/(byte) main::c#1 )
  [67] (byte) main::x#2 ← phi( main::@2/(byte) 0 main::@5/(byte) main::x#1 )
  [68] if((byte) main::x#2<(byte) $10) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [69] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28
  [70] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28
  [71] (byte) main::y#1 ← ++ (byte) main::y#2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [72] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE
  [73] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2
  [74] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10
  [75] (byte) main::x#1 ← ++ (byte) main::x#2
  to:main::@4

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from line::@10 line::@25 line::@27 line::@29 line::@31 line::@35 line::@37 line::@40 line::@42 line::@45 line::@47 line::@49 line::@51 line::@53 main::@16 main::@18 main::@20 main::@22 main::@24 printf_number_buffer::@3
  [76] (to_nomodify byte*) cputs::s#22 ← phi( line::@10/(const byte*) line::s6 line::@25/(const byte*) line::s line::@27/(const byte*) line::s1 line::@29/(const byte*) line::s2 line::@31/(const byte*) line::s3 line::@35/(const byte*) line::s4 line::@37/(const byte*) line::s4 line::@40/(const byte*) line::s4 line::@42/(const byte*) line::s4 line::@45/(const byte*) s line::@47/(const byte*) s1 line::@49/(const byte*) s4 line::@51/(const byte*) line::s4 line::@53/(const byte*) line::s4 main::@16/(const byte*) s main::@18/(const byte*) s1 main::@20/(const byte*) main::s2 main::@22/(const byte*) s1 main::@24/(const byte*) s4 printf_number_buffer::@3/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [77] (to_nomodify byte*) cputs::s#21 ← phi( cputs/(to_nomodify byte*) cputs::s#22 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [78] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#21)
  [79] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#21
  [80] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [81] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [82] (byte) cputc::c#0 ← (byte) cputs::c#1
  [83] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@6 printf_padding::@2
  [84] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@6/(byte) cputc::c#2 printf_padding::@2/(byte) '0' )
  [85] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [86] *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  [87] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [88] *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  [89] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [90] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [91] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [92] (byte) conio_cursor_x ← (byte) 0
  [93] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [94] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [95] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [96] phi()
  [97] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [98] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [99] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [100] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [101] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [102] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [103] (byte) conio_cursor_x ← (byte) 0
  [104] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [105] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [106] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [107] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [108] phi()
  [109] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [110] phi()
  [111] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [112] phi()
  [113] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [114] (byte) memset::c#1 ← (byte) conio_textcolor
  [115] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [116] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [117] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [118] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [119] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [120] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [121] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4 main main::@11 main::@13
  [122] (byte) memset::c#7 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(byte) memset::c#1 main/(byte) 0 main::@11/(const nomodify byte) BLACK main::@13/(byte) 0 )
  [122] (void*) memset::str#6 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 main/(void*)(const nomodify byte*) SCREEN main::@11/(void*)(const nomodify byte*) COLS main::@13/(void*) memset::str#4 )
  [122] (word) memset::num#5 ← phi( cscroll::@3/(byte) $28 cscroll::@4/(byte) $28 main/(word)(number) $28*(number) $19 main::@11/(word)(number) $28*(number) $19 main::@13/(word) $800 )
  [123] if((word) memset::num#5<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [124] (byte*) memset::end#0 ← (byte*)(void*) memset::str#6 + (word) memset::num#5
  [125] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#6
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [126] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [127] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [128] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [129] *((byte*) memset::dst#2) ← (byte) memset::c#7
  [130] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [131] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [131] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [132] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [133] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [134] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [135] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [135] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [136] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [137] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [138] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [139] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [140] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from line::@26 line::@28 line::@30 line::@32 line::@34 line::@36 line::@38 line::@39 line::@41 line::@43 line::@46 line::@48 line::@50 line::@52 line::@54 main::@17 main::@19 main::@21 main::@23
  [141] (byte) printf_uchar::uvalue#19 ← phi( line::@26/(byte) printf_uchar::uvalue#4 line::@28/(byte) printf_uchar::uvalue#5 line::@30/(byte) printf_uchar::uvalue#6 line::@32/(byte) printf_uchar::uvalue#7 line::@34/(byte) printf_uchar::uvalue#8 line::@36/(byte) printf_uchar::uvalue#9 line::@38/(byte) printf_uchar::uvalue#10 line::@39/(byte) printf_uchar::uvalue#11 line::@41/(byte) printf_uchar::uvalue#12 line::@43/(byte) printf_uchar::uvalue#13 line::@46/(byte) printf_uchar::uvalue#14 line::@48/(byte) printf_uchar::uvalue#15 line::@50/(byte) printf_uchar::uvalue#16 line::@52/(byte) printf_uchar::uvalue#17 line::@54/(byte) printf_uchar::uvalue#18 main::@17/(byte) printf_uchar::uvalue#0 main::@19/(byte) printf_uchar::uvalue#1 main::@21/(byte) printf_uchar::uvalue#2 main::@23/(byte) printf_uchar::uvalue#3 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [142] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [143] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#19
  [144] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [145] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [146] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [147] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [148] phi()
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer
  [149] phi()
  [150] call strlen 
  [151] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [152] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [153] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [154] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@8
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@9
  [155] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@8
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@5 printf_number_buffer::@9
  [156] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@5/(signed byte) printf_number_buffer::len#1 )
  [157] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(const byte) printf_number_buffer::format_min_length#0 - (signed byte) printf_number_buffer::len#2
  [158] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@11
  to:printf_number_buffer::@1
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@8
  [159] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@8
  [160] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@8/(signed byte) 0 )
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [161] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@10
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [162] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
  [163] call cputc 
  to:printf_number_buffer::@10
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@6
  [164] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@7
  to:printf_number_buffer::@3
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@10
  [165] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [166] call printf_padding 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@7
  [167] phi()
  [168] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [169] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@7
  [170] phi()
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [171] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [172] if((byte) printf_padding::i#2<(byte) printf_padding::length#1) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [173] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [174] phi()
  [175] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [176] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@4
  [177] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [178] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [178] (byte*) strlen::str#2 ← phi( strlen/(const byte*) printf_number_buffer::buffer_digits#0 strlen::@2/(byte*) strlen::str#0 )
  [179] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [180] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [181] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [182] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [183] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [184] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [184] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [184] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [184] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [185] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [186] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [187] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [188] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [189] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [190] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [191] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [192] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [193] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [193] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [193] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [194] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [195] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [196] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [197] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [198] call uctoa_append 
  [199] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [200] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [201] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [202] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [203] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [203] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [204] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [205] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [206] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [207] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [208] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from line::@1 line::@11 line::@13 line::@17 line::@5 main::@15
  [209] (byte) gotoxy::x#10 ← phi( line::@1/(byte) 0 line::@11/(byte) gotoxy::x#5 line::@13/(byte) $14 line::@17/(byte) gotoxy::x#7 line::@5/(byte) 0 main::@15/(byte) 0 )
  [209] (byte) gotoxy::y#8 ← phi( line::@1/(byte) 0 line::@11/(byte) gotoxy::y#5 line::@13/(byte) $18 line::@17/(byte) gotoxy::y#7 line::@5/(byte) 1 main::@15/(byte) $18 )
  [210] if((byte) gotoxy::y#8<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [211] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [212] (byte) gotoxy::y#10 ← phi( gotoxy::@3/(byte) gotoxy::y#8 gotoxy/(byte) 0 )
  [213] if((byte) gotoxy::x#10<(byte) $28) goto gotoxy::@4
  to:gotoxy::@2
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  [214] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  [215] (byte) gotoxy::x#9 ← phi( gotoxy::@4/(byte) gotoxy::x#10 gotoxy::@1/(byte) 0 )
  [216] (byte) conio_cursor_x ← (byte) gotoxy::x#9
  [217] (byte) conio_cursor_y ← (byte) gotoxy::y#10
  [218] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#10
  [219] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2
  [220] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8
  [221] (word~) gotoxy::$4 ← (word~) gotoxy::$10 << (byte) 3
  [222] (word) gotoxy::offset#0 ← (word~) gotoxy::$4 + (byte) gotoxy::x#9
  [223] (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  [224] (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  [225] (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  [226] (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [227] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@10
  [228] phi()
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [229] return 
  to:@return

(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
line: scope:[line]  from main::@14
  [230] (byte) abs_u8::u#0 ← (byte) line::x2#0 - (byte) line::x1#0
  [231] call abs_u8 
  [232] (byte) abs_u8::return#0 ← (byte) abs_u8::return#4
  to:line::@21
line::@21: scope:[line]  from line
  [233] (byte) line::dx#0 ← (byte) abs_u8::return#0
  [234] (byte) abs_u8::u#1 ← (byte) line::y2#0 - (byte) line::y1#0
  [235] call abs_u8 
  [236] (byte) abs_u8::return#1 ← (byte) abs_u8::return#4
  to:line::@22
line::@22: scope:[line]  from line::@21
  [237] (byte) line::dy#0 ← (byte) abs_u8::return#1
  [238] (byte) sgn_u8::u#0 ← (byte) line::x2#0 - (byte) line::x1#0
  [239] call sgn_u8 
  [240] (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4
  to:line::@23
line::@23: scope:[line]  from line::@22
  [241] (byte) line::sx#0 ← (byte) sgn_u8::return#0
  [242] (byte) sgn_u8::u#1 ← (byte) line::y2#0 - (byte) line::y1#0
  [243] call sgn_u8 
  [244] (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4
  to:line::@24
line::@24: scope:[line]  from line::@23
  [245] (byte) line::sy#0 ← (byte) sgn_u8::return#1
  [246] if((byte) line::sx#0!=(byte) $ff) goto line::@1
  to:line::@3
line::@3: scope:[line]  from line::@24
  [247] (byte) line::y#1 ← ++ (byte) line::y1#0
  [248] (byte) line::y2#1 ← ++ (byte) line::y2#0
  to:line::@1
line::@1: scope:[line]  from line::@24 line::@3
  [249] (byte) line::y2#17 ← phi( line::@24/(byte) line::y2#0 line::@3/(byte) line::y2#1 )
  [249] (byte) line::plot1_y#0 ← phi( line::@24/(byte) line::y1#0 line::@3/(byte) line::y#1 )
  [250] call gotoxy 
  to:line::@25
line::@25: scope:[line]  from line::@1
  [251] phi()
  [252] call cputs 
  to:line::@26
line::@26: scope:[line]  from line::@25
  [253] (byte) printf_uchar::uvalue#4 ← (byte) line::dx#0
  [254] call printf_uchar 
  to:line::@27
line::@27: scope:[line]  from line::@26
  [255] phi()
  [256] call cputs 
  to:line::@28
line::@28: scope:[line]  from line::@27
  [257] (byte) printf_uchar::uvalue#5 ← (byte) line::dy#0
  [258] call printf_uchar 
  to:line::@29
line::@29: scope:[line]  from line::@28
  [259] phi()
  [260] call cputs 
  to:line::@30
line::@30: scope:[line]  from line::@29
  [261] (byte) printf_uchar::uvalue#6 ← (byte) line::sx#0
  [262] call printf_uchar 
  to:line::@31
line::@31: scope:[line]  from line::@30
  [263] phi()
  [264] call cputs 
  to:line::@32
line::@32: scope:[line]  from line::@31
  [265] (byte) printf_uchar::uvalue#7 ← (byte) line::sy#0
  [266] call printf_uchar 
  to:line::@33
line::@33: scope:[line]  from line::@32
  [267] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2
  to:line::@4
line::@4: scope:[line]  from line::@33
  [268] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1
  to:line::@5
line::@5: scope:[line]  from line::@4
  [269] phi()
  [270] call gotoxy 
  to:line::@34
line::@34: scope:[line]  from line::@5
  [271] (byte) printf_uchar::uvalue#8 ← (byte) line::x1#0
  [272] call printf_uchar 
  to:line::@35
line::@35: scope:[line]  from line::@34
  [273] phi()
  [274] call cputs 
  to:line::@36
line::@36: scope:[line]  from line::@35
  [275] (byte) printf_uchar::uvalue#9 ← (byte) line::plot1_y#0
  [276] call printf_uchar 
  to:line::@37
line::@37: scope:[line]  from line::@36
  [277] phi()
  [278] call cputs 
  to:line::@38
line::@38: scope:[line]  from line::@37
  [279] (byte) printf_uchar::uvalue#10 ← (byte) line::e#0
  [280] call printf_uchar 
  to:line::plot1
line::plot1: scope:[line]  from line::@38
  [281] (byte~) line::plot1_$0 ← (byte) line::x1#0 >> (byte) 3
  [282] (byte~) line::plot1_$3 ← (byte~) line::plot1_$0 << (byte) 1
  [283] (byte*) line::plot1_column#0 ← (byte*) line::canvas#0 + *((const word*) plot_column + (byte~) line::plot1_$3)
  [284] (byte~) line::plot1_$2 ← (byte) line::x1#0 & (byte) 7
  [285] *((byte*) line::plot1_column#0 + (byte) line::plot1_y#0) ← *((byte*) line::plot1_column#0 + (byte) line::plot1_y#0) | *((const byte*) plot_bit + (byte~) line::plot1_$2)
  to:line::@6
line::@6: scope:[line]  from line::@8 line::plot1
  [286] (byte) line::print_row#10 ← phi( line::@8/(byte) line::print_row#26 line::plot1/(byte) 2 )
  [286] (byte) line::print_col#14 ← phi( line::@8/(byte) line::print_col#20 line::plot1/(byte) 0 )
  [286] (byte) line::x#18 ← phi( line::@8/(byte) line::x#22 line::plot1/(byte) line::x1#0 )
  [286] (byte) line::e#4 ← phi( line::@8/(byte) line::e#8 line::plot1/(byte) line::e#0 )
  [286] (byte) line::y#7 ← phi( line::@8/(byte) line::y#11 line::plot1/(byte) line::plot1_y#0 )
  [287] (byte) line::y#11 ← (byte) line::y#7 + (byte) line::sy#0
  [288] (byte) line::e#1 ← (byte) line::e#4 + (byte) line::dx#0
  [289] if((byte) line::dy#0<(byte) line::e#1) goto line::@7
  to:line::@10
line::@10: scope:[line]  from line::@6
  [290] phi()
  [291] call cputs 
  to:line::@8
line::@8: scope:[line]  from line::@10 line::plot2
  [292] (byte) line::print_row#26 ← phi( line::@10/(byte) line::print_row#10 line::plot2/(byte) line::print_row#35 )
  [292] (byte) line::print_col#20 ← phi( line::@10/(byte) line::print_col#14 line::plot2/(byte) line::print_col#29 )
  [292] (byte) line::x#22 ← phi( line::@10/(byte) line::x#18 line::plot2/(byte) line::plot2_x#0 )
  [292] (byte) line::e#8 ← phi( line::@10/(byte) line::e#1 line::plot2/(byte) line::e#10 )
  [293] if((byte) line::y#11!=(byte) line::y2#17) goto line::@6
  to:line::@13
line::@13: scope:[line]  from line::@8
  [294] phi()
  [295] call gotoxy 
  to:line::@45
line::@45: scope:[line]  from line::@13
  [296] phi()
  [297] call cputs 
  to:line::@46
line::@46: scope:[line]  from line::@45
  [298] (byte) printf_uchar::uvalue#14 ← (byte) line::x#22
  [299] call printf_uchar 
  to:line::@47
line::@47: scope:[line]  from line::@46
  [300] phi()
  [301] call cputs 
  to:line::@48
line::@48: scope:[line]  from line::@47
  [302] (byte) printf_uchar::uvalue#15 ← (byte) line::y#11
  [303] call printf_uchar 
  to:line::@49
line::@49: scope:[line]  from line::@48
  [304] phi()
  [305] call cputs 
  to:line::@return
line::@return: scope:[line]  from line::@49 line::plot4
  [306] return 
  to:@return
line::@7: scope:[line]  from line::@6
  [307] (byte) line::plot2_x#0 ← (byte) line::x#18 + (byte) line::sx#0
  [308] (byte) line::e#10 ← (byte) line::e#1 - (byte) line::dy#0
  [309] if((byte) line::print_col#14>=(byte)(number) $28-(number) 8) goto line::@9
  to:line::@11
line::@11: scope:[line]  from line::@7
  [310] (byte) gotoxy::x#5 ← (byte) line::print_col#14
  [311] (byte) gotoxy::y#5 ← (byte) line::print_row#10
  [312] call gotoxy 
  to:line::@39
line::@39: scope:[line]  from line::@11
  [313] (byte) printf_uchar::uvalue#11 ← (byte) line::plot2_x#0
  [314] call printf_uchar 
  to:line::@40
line::@40: scope:[line]  from line::@39
  [315] phi()
  [316] call cputs 
  to:line::@41
line::@41: scope:[line]  from line::@40
  [317] (byte) printf_uchar::uvalue#12 ← (byte) line::y#11
  [318] call printf_uchar 
  to:line::@42
line::@42: scope:[line]  from line::@41
  [319] phi()
  [320] call cputs 
  to:line::@43
line::@43: scope:[line]  from line::@42
  [321] (byte) printf_uchar::uvalue#13 ← (byte) line::e#10
  [322] call printf_uchar 
  to:line::@44
line::@44: scope:[line]  from line::@43
  [323] (byte) line::print_row#3 ← ++ (byte) line::print_row#10
  [324] if((byte) line::print_row#3!=(byte) $18) goto line::@9
  to:line::@12
line::@12: scope:[line]  from line::@44
  [325] (byte) line::print_col#2 ← (byte) line::print_col#14 + (byte) 9
  to:line::@9
line::@9: scope:[line]  from line::@12 line::@44 line::@7
  [326] (byte) line::print_row#35 ← phi( line::@12/(byte) 1 line::@44/(byte) line::print_row#3 line::@7/(byte) line::print_row#10 )
  [326] (byte) line::print_col#29 ← phi( line::@12/(byte) line::print_col#2 line::@44/(byte) line::print_col#14 line::@7/(byte) line::print_col#14 )
  to:line::plot2
line::plot2: scope:[line]  from line::@9
  [327] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3
  [328] (byte~) line::plot2_$3 ← (byte~) line::plot2_$0 << (byte) 1
  [329] (byte*) line::plot2_column#0 ← (byte*) line::canvas#0 + *((const word*) plot_column + (byte~) line::plot2_$3)
  [330] (byte~) line::plot2_$2 ← (byte) line::plot2_x#0 & (byte) 7
  [331] *((byte*) line::plot2_column#0 + (byte) line::y#11) ← *((byte*) line::plot2_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot2_$2)
  to:line::@8
line::@2: scope:[line]  from line::@33
  [332] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1
  to:line::@14
line::@14: scope:[line]  from line::@16 line::@2
  [333] (byte) line::e1#10 ← phi( line::@16/(byte) line::e1#14 line::@2/(byte) line::e1#0 )
  [333] (byte) line::print_row#11 ← phi( line::@16/(byte) line::print_row#22 line::@2/(byte) 1 )
  [333] (byte) line::y#12 ← phi( line::@16/(byte) line::y#15 line::@2/(byte) line::plot1_y#0 )
  [333] (byte) line::x#10 ← phi( line::@16/(byte) line::x#12 line::@2/(byte) line::x1#0 )
  [333] (byte) line::print_col#10 ← phi( line::@16/(byte) line::print_col#16 line::@2/(byte) 0 )
  [334] if((byte) line::print_col#10>=(byte)(number) $28-(number) 8) goto line::@15
  to:line::@17
line::@17: scope:[line]  from line::@14
  [335] (byte) gotoxy::x#7 ← (byte) line::print_col#10
  [336] (byte) gotoxy::y#7 ← (byte) line::print_row#11
  [337] call gotoxy 
  to:line::@50
line::@50: scope:[line]  from line::@17
  [338] (byte) printf_uchar::uvalue#16 ← (byte) line::x#10
  [339] call printf_uchar 
  to:line::@51
line::@51: scope:[line]  from line::@50
  [340] phi()
  [341] call cputs 
  to:line::@52
line::@52: scope:[line]  from line::@51
  [342] (byte) printf_uchar::uvalue#17 ← (byte) line::y#12
  [343] call printf_uchar 
  to:line::@53
line::@53: scope:[line]  from line::@52
  [344] phi()
  [345] call cputs 
  to:line::@54
line::@54: scope:[line]  from line::@53
  [346] (byte) printf_uchar::uvalue#18 ← (byte) line::e1#10
  [347] call printf_uchar 
  to:line::@55
line::@55: scope:[line]  from line::@54
  [348] (byte) line::print_row#5 ← ++ (byte) line::print_row#11
  [349] if((byte) line::print_row#5!=(byte) $18) goto line::@15
  to:line::@18
line::@18: scope:[line]  from line::@55
  [350] (byte) line::print_col#3 ← (byte) line::print_col#10 + (byte) 9
  to:line::@15
line::@15: scope:[line]  from line::@14 line::@18 line::@55
  [351] (byte) line::print_row#22 ← phi( line::@14/(byte) line::print_row#11 line::@18/(byte) 1 line::@55/(byte) line::print_row#5 )
  [351] (byte) line::print_col#16 ← phi( line::@14/(byte) line::print_col#10 line::@18/(byte) line::print_col#3 line::@55/(byte) line::print_col#10 )
  to:line::plot3
line::plot3: scope:[line]  from line::@15
  [352] (byte~) line::plot3_$0 ← (byte) line::x#10 >> (byte) 3
  [353] (byte~) line::plot3_$3 ← (byte~) line::plot3_$0 << (byte) 1
  [354] (byte*) line::plot3_column#0 ← (byte*) line::canvas#0 + *((const word*) plot_column + (byte~) line::plot3_$3)
  [355] (byte~) line::plot3_$2 ← (byte) line::x#10 & (byte) 7
  [356] *((byte*) line::plot3_column#0 + (byte) line::y#12) ← *((byte*) line::plot3_column#0 + (byte) line::y#12) | *((const byte*) plot_bit + (byte~) line::plot3_$2)
  to:line::@20
line::@20: scope:[line]  from line::plot3
  [357] (byte) line::x#12 ← (byte) line::x#10 + (byte) line::sx#0
  [358] (byte) line::e1#1 ← (byte) line::e1#10 + (byte) line::dy#0
  [359] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@16
  to:line::@19
line::@19: scope:[line]  from line::@20
  [360] (byte) line::y#3 ← (byte) line::y#12 + (byte) line::sy#0
  [361] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0
  to:line::@16
line::@16: scope:[line]  from line::@19 line::@20
  [362] (byte) line::e1#14 ← phi( line::@19/(byte) line::e1#2 line::@20/(byte) line::e1#1 )
  [362] (byte) line::y#15 ← phi( line::@19/(byte) line::y#3 line::@20/(byte) line::y#12 )
  [363] if((byte) line::x#12!=(byte) line::x2#0) goto line::@14
  to:line::plot4
line::plot4: scope:[line]  from line::@16
  [364] (byte~) line::plot4_$0 ← (byte) line::x#12 >> (byte) 3
  [365] (byte~) line::plot4_$3 ← (byte~) line::plot4_$0 << (byte) 1
  [366] (byte*) line::plot4_column#0 ← (byte*) line::canvas#0 + *((const word*) plot_column + (byte~) line::plot4_$3)
  [367] (byte~) line::plot4_$2 ← (byte) line::x#12 & (byte) 7
  [368] *((byte*) line::plot4_column#0 + (byte) line::y#15) ← *((byte*) line::plot4_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot4_$2)
  to:line::@return

(byte()) sgn_u8((byte) sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@22 line::@23
  [369] (byte) sgn_u8::u#2 ← phi( line::@22/(byte) sgn_u8::u#0 line::@23/(byte) sgn_u8::u#1 )
  [370] (byte~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80
  [371] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1
  to:sgn_u8::@return
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  [372] phi()
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8 sgn_u8::@1
  [373] (byte) sgn_u8::return#4 ← phi( sgn_u8::@1/(byte) -1 sgn_u8/(byte) 1 )
  [374] return 
  to:@return

(byte()) abs_u8((byte) abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@21
  [375] (byte) abs_u8::u#2 ← phi( line/(byte) abs_u8::u#0 line::@21/(byte) abs_u8::u#1 )
  [376] (byte~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80
  [377] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1
  to:abs_u8::@return
abs_u8::@1: scope:[abs_u8]  from abs_u8
  [378] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8 abs_u8::@1
  [379] (byte) abs_u8::return#4 ← phi( abs_u8::@1/(byte) abs_u8::return#2 abs_u8/(byte) abs_u8::u#2 )
  [380] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main::@8
  [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0
  [382] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [383] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [385] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [386] return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from main::@12
  [387] (byte) conio_textcolor ← (const nomodify byte) WHITE
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [388] return 
  to:@return

(void()) setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  [390] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f
  [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8
  [393] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [394] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  [396] return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  [397] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [398] call kbhit 
  [399] (byte) kbhit::return#2 ← (byte) kbhit::return#0
  to:irq_bottom_2::@3
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2
  [400] (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#2
  [401] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1
  to:irq_bottom_2::@2
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@3
  [402] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory
  to:irq_bottom_2::@1
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@2 irq_bottom_2::@3
  [403] (volatile byte) canvas_show_flag ← (byte) 0
  [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [405] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8
  [406] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@1
  [407] return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  [408] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0
  [409] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [410] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  [411] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  [412] phi()
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0
  [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [415] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM
  [416] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  [417] return 
  to:@return
