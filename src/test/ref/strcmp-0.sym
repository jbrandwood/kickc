__constant char * const COLORRAM = (char *) 55296
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant char DIGITS[] = "0123456789abcdef"z
__constant const char GREEN = 5
__constant const char LIGHT_BLUE = $e
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char RADIX_DECIMAL_VALUES_CHAR[] = { $64, $a }
__constant const char RED = 2
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void __start()
void assert_cmp(signed char expect , signed char actual , char *message)
bool assert_cmp::$0 // reg byte a 101.0
bool assert_cmp::$1 // reg byte a 101.0
bool assert_cmp::$2 // reg byte a 101.0
signed char assert_cmp::actual
signed char assert_cmp::actual#0 // actual zp[1]:3 22.0
signed char assert_cmp::actual#1 // actual zp[1]:3 22.0
signed char assert_cmp::actual#10 // actual zp[1]:3 22.0
signed char assert_cmp::actual#11 // actual zp[1]:3 22.0
signed char assert_cmp::actual#12 // actual zp[1]:3 22.0
signed char assert_cmp::actual#13 // actual zp[1]:3 22.0
signed char assert_cmp::actual#14 // actual zp[1]:3 22.0
signed char assert_cmp::actual#15 // actual zp[1]:3 22.0
signed char assert_cmp::actual#16 // actual zp[1]:3 22.0
signed char assert_cmp::actual#17 // actual zp[1]:3 29.55
signed char assert_cmp::actual#2 // actual zp[1]:3 22.0
signed char assert_cmp::actual#3 // actual zp[1]:3 22.0
signed char assert_cmp::actual#4 // actual zp[1]:3 22.0
signed char assert_cmp::actual#5 // actual zp[1]:3 22.0
signed char assert_cmp::actual#6 // actual zp[1]:3 22.0
signed char assert_cmp::actual#7 // actual zp[1]:3 22.0
signed char assert_cmp::actual#8 // actual zp[1]:3 22.0
signed char assert_cmp::actual#9 // actual zp[1]:3 22.0
signed char assert_cmp::expect
signed char assert_cmp::expect#17 // expect zp[1]:2 25.25
char *assert_cmp::message
char *assert_cmp::message#17 // message zp[2]:4 7.214285714285714
char assert_cmp::ok
char assert_cmp::ok#1 // reg byte a 202.0
char assert_cmp::ok#2 // reg byte a 202.0
char assert_cmp::ok#3 // reg byte a 202.0
char assert_cmp::ok#4 // reg byte a 404.0
__constant char assert_cmp::s[5] = "ok! "
__constant char assert_cmp::s1[2] = "
"
__constant char assert_cmp::s2[$19] = "Assert failed. expected:"
__constant char assert_cmp::s3[9] = " actual:"
__constant char assert_cmp::s4[3] = ". "
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte x 11.0
char conio_c64_init::line#2 // reg byte x 22.0
__loadstore char conio_cursor_x // zp[1]:16 8929.220238095239
__loadstore char conio_cursor_y // zp[1]:17 173913.6304347826
__loadstore char *conio_line_color // zp[2]:20 125568.79545454546
__loadstore char *conio_line_text // zp[2]:18 124157.91011235955
__loadstore char conio_textcolor // zp[1]:22 171203.47457627117
__stackcall void cputc(char c)
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // reg byte a 150001.5
void cputln()
void cscroll()
void gotoxy(char x , char y)
char *gotoxy::$5 // zp[2]:27 202.0
char *gotoxy::$6 // zp[2]:23 202.0
unsigned int gotoxy::$7 // zp[2]:23 151.5
unsigned int gotoxy::$8 // zp[2]:25 202.0
unsigned int gotoxy::$9 // zp[2]:23 202.0
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:23 101.0
char gotoxy::x
__constant char gotoxy::x#2 = 0 // x
char gotoxy::y
char gotoxy::y#2 // reg byte x 71.0
char gotoxy::y#4 // reg byte x 67.33333333333333
void main()
__constant char main::$35[4] = "aba"
__constant char main::$38[3] = "xy"
__constant char main::$39[3] = "xz"
__constant char main::message[$d] = "a<b strcmp()"
__constant char main::message1[$11] = "aaa<aab strcmp()"
__constant char main::message10[$13] = "aab=aac strncmp(2)"
__constant char main::message11[$15] = "qwex=qwea strncmp(3)"
__constant char main::message12[$13] = "aa<aacx strncmp(3)"
__constant char main::message13[$10] = "aa<ab memcmp(2)"
__constant char main::message14[$e] = "x=x memcmp(2)"
__constant char main::message15[$10] = "xy=xz memcmp(1)"
__constant char main::message16[$14] = "qwez>qwex memcmp(4)"
__constant char main::message2[$10] = "aa<aaa strcmp()"
__constant char main::message3[$d] = "x=x strcmp()"
__constant char main::message4[$13] = "qwez=qwez strcmp()"
__constant char main::message5[$d] = "q>k strcmp()"
__constant char main::message6[$13] = "kkkq>kkkp strcmp()"
__constant char main::message7[$12] = "kkkq>kkk strcmp()"
__constant char main::message8[$15] = "aaax<aabx strncmp(3)"
__constant char main::message9[$13] = "qwe>qee strncmp(2)"
__constant char main::str1[2] = "a"
__constant char main::str11[4] = "aaa"
__constant char main::str111[5] = "qwex"
__constant char main::str12[3] = "aa"
__constant char main::str13[2] = "x"
__constant char main::str14[5] = "qwez"
__constant char main::str15[2] = "q"
__constant char main::str16[5] = "kkkq"
__constant char main::str18[5] = "aaax"
__constant char main::str19[4] = "qwe"
__constant char main::str2[2] = "b"
__constant char main::str21[4] = "aab"
__constant char main::str210[4] = "aac"
__constant char main::str211[5] = "qwea"
__constant char main::str212[5] = "aacx"
__constant char main::str25[2] = "k"
__constant char main::str26[5] = "kkkp"
__constant char main::str27[4] = "kkk"
__constant char main::str28[5] = "aabx"
__constant char main::str29[4] = "qee"
int memcmp(const void *str1 , const void *str2 , unsigned int n)
char memcmp::$3 // reg byte a 101.0
unsigned int memcmp::n
unsigned int memcmp::n#0 // n zp[2]:6 667.3333333333334
unsigned int memcmp::n#5 // n zp[2]:6 1034.6666666666667
unsigned int memcmp::n#7 // n zp[2]:6 33.666666666666664
int memcmp::return
int memcmp::return#1 // return zp[2]:8 202.0
int memcmp::return#10 // return zp[2]:8 22.0
int memcmp::return#11 // return zp[2]:8 22.0
int memcmp::return#2 // return zp[2]:8 24.166666666666664
int memcmp::return#3 // return zp[2]:8 22.0
int memcmp::return#4 // return zp[2]:8 22.0
char *memcmp::s1
char *memcmp::s1#1 // s1 zp[2]:4 1001.0
char *memcmp::s1#2 // s1 zp[2]:4 801.25
char *memcmp::s1#6 // s1 zp[2]:4 101.0
char *memcmp::s2
char *memcmp::s2#1 // s2 zp[2]:14 2002.0
char *memcmp::s2#2 // s2 zp[2]:14 641.0
char *memcmp::s2#6 // s2 zp[2]:14 202.0
const void *memcmp::str1
const void *memcmp::str1#4 // str1 zp[2]:4
const void *memcmp::str2
const void *memcmp::str2#4 // str2 zp[2]:14
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#2 // destination zp[2]:31
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:31 1.000000001E9
char *memcpy::dst#2 // dst zp[2]:31 1.0333333346666667E9
char *memcpy::dst#4 // dst zp[2]:31 2.00000002E8
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
void *memcpy::source#2 // source zp[2]:10
char *memcpy::src
char *memcpy::src#1 // src zp[2]:10 2.000000002E9
char *memcpy::src#2 // src zp[2]:10 1.02500000125E9
char *memcpy::src#4 // src zp[2]:10 1.00000001E8
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:29 1.3750000025E8
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#1 // reg byte x 2.0000002E7
char memset::c#4 // reg byte x 1.4428571457142857E8
char *memset::dst
char *memset::dst#1 // dst zp[2]:10 2.000000002E9
char *memset::dst#2 // dst zp[2]:10 1.3666666683333335E9
char *memset::dst#4 // dst zp[2]:10 2.00000002E8
char *memset::end
char *memset::end#0 // end zp[2]:31 1.833333336666667E8
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:10
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
__constant void (*printf_number_buffer::putc#0)(char) = &cputc // putc
void printf_schar(void (*putc)(char) , signed char value , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_schar::format
char printf_schar::format_justify_left
char printf_schar::format_min_length
char printf_schar::format_radix
char printf_schar::format_sign_always
char printf_schar::format_upper_case
char printf_schar::format_zero_padding
void (*printf_schar::putc)(char)
char printf_schar::uvalue
signed char printf_schar::value
signed char printf_schar::value#0 // reg byte x 1001.0
signed char printf_schar::value#1 // reg byte x 202.0
signed char printf_schar::value#2 // reg byte x 202.0
signed char printf_schar::value#3 // reg byte x 1068.3333333333335
signed char printf_schar::value#5 // reg byte x 2002.0
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1000001.0
void (*printf_str::putc)(char)
void (*printf_str::putc#10)(char) // putc zp[2]:6
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:8 1000001.0
const char *printf_str::s#10 // s zp[2]:8 101002.0
const char *printf_str::s#2 // s zp[2]:8 2002.0
const char *printf_str::s#9 // s zp[2]:8 1550002.0
void printf_string(void (*putc)(char) , char *str , char format_min_length , char format_justify_left)
struct printf_format_string printf_string::format
char printf_string::format_justify_left
char printf_string::format_min_length
signed char printf_string::len
signed char printf_string::padding
void (*printf_string::putc)(char)
char *printf_string::str
char *printf_string::str#0 // str zp[2]:4 202.0
char *printf_string::str#1 // str zp[2]:4 202.0
char *printf_string::str#2 // str zp[2]:4 1203.0
int strcmp(const char *str1 , const char *str2)
char strcmp::$0 // reg byte a 101.0
int strcmp::return
int strcmp::return#0 // return zp[2]:8 202.0
int strcmp::return#10 // return zp[2]:8 22.0
int strcmp::return#11 // return zp[2]:8 18.9
int strcmp::return#12 // return zp[2]:8 22.0
int strcmp::return#13 // return zp[2]:8 22.0
int strcmp::return#14 // return zp[2]:8 22.0
int strcmp::return#15 // return zp[2]:8 22.0
int strcmp::return#16 // return zp[2]:8 22.0
int strcmp::return#17 // return zp[2]:8 22.0
int strcmp::return#18 // return zp[2]:8 22.0
char *strcmp::s1
char *strcmp::s1#0 // s1 zp[2]:4 101.0
char *strcmp::s1#1 // s1 zp[2]:4 1001.0
char *strcmp::s1#2 // s1 zp[2]:4 1402.0
char *strcmp::s2
char *strcmp::s2#0 // s2 zp[2]:6 101.0
char *strcmp::s2#1 // s2 zp[2]:6 2002.0
char *strcmp::s2#2 // s2 zp[2]:6 801.25
const char *strcmp::str1
const char *strcmp::str2
int strncmp(const char *str1 , const char *str2 , unsigned int n)
char strncmp::$0 // reg byte a 101.0
unsigned int strncmp::n
unsigned int strncmp::n#0 // n zp[2]:4 600.5999999999999
unsigned int strncmp::n#6 // n zp[2]:4 1051.5
unsigned int strncmp::n#8 // n zp[2]:4 101.0
int strncmp::return
int strncmp::return#0 // return zp[2]:14 202.0
int strncmp::return#10 // return zp[2]:14 22.0
int strncmp::return#11 // return zp[2]:14 22.0
int strncmp::return#12 // return zp[2]:14 22.0
int strncmp::return#13 // return zp[2]:14 22.0
int strncmp::return#2 // return zp[2]:14 22.285714285714285
int strncmp::return#3 // return zp[2]:14 22.0
char *strncmp::s1
char *strncmp::s1#0 // s1 zp[2]:6 101.0
char *strncmp::s1#1 // s1 zp[2]:6 1001.0
char *strncmp::s1#2 // s1 zp[2]:6 841.2
char *strncmp::s2
char *strncmp::s2#0 // s2 zp[2]:8 101.0
char *strncmp::s2#1 // s2 zp[2]:8 2002.0
char *strncmp::s2#2 // s2 zp[2]:8 534.1666666666666
const char *strncmp::str1
const char *strncmp::str2
char textcolor(char color)
char textcolor::color
char textcolor::color#2 // reg byte a 1001.0
char textcolor::old
char textcolor::return
void uctoa(char value , char *buffer , char radix)
char *uctoa::buffer
char *uctoa::buffer#11 // buffer zp[2]:14 35000.49999999999
char *uctoa::buffer#14 // buffer zp[2]:14 150001.5
char *uctoa::buffer#3 // buffer zp[2]:14 20002.0
char *uctoa::buffer#4 // buffer zp[2]:14 200002.0
char uctoa::digit
char uctoa::digit#1 // digit zp[1]:12 200002.0
char uctoa::digit#2 // digit zp[1]:12 30769.53846153846
char uctoa::digit_value
char uctoa::digit_value#0 // digit_value zp[1]:33 60000.600000000006
char *uctoa::digit_values
char uctoa::max_digits
char uctoa::radix
char uctoa::started
char uctoa::started#2 // started zp[1]:13 60000.600000000006
char uctoa::started#4 // started zp[1]:13 100001.0
char uctoa::value
char uctoa::value#0 // reg byte x 100001.0
char uctoa::value#1 // reg byte x 5501.0
char uctoa::value#2 // reg byte x 70000.99999999999
char uctoa::value#6 // reg byte x 150001.5
char uctoa_append(char *buffer , char value , char sub)
char *uctoa_append::buffer
char *uctoa_append::buffer#0 // buffer zp[2]:14 137500.25
char uctoa_append::digit
char uctoa_append::digit#1 // reg byte y 1.00000001E8
char uctoa_append::digit#2 // reg byte y 1.005000015E8
char uctoa_append::return
char uctoa_append::return#0 // reg byte x 200002.0
char uctoa_append::sub
char uctoa_append::sub#0 // sub zp[1]:33 3.33500005E7
char uctoa_append::value
char uctoa_append::value#0 // reg byte x 366667.3333333334
char uctoa_append::value#1 // reg byte x 2.00000002E8
char uctoa_append::value#2 // reg byte x 5.018333416666667E7

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
zp[1]:2 [ assert_cmp::expect#17 ]
zp[1]:3 [ assert_cmp::actual#17 assert_cmp::actual#4 assert_cmp::actual#5 assert_cmp::actual#6 assert_cmp::actual#7 assert_cmp::actual#8 assert_cmp::actual#0 assert_cmp::actual#9 assert_cmp::actual#10 assert_cmp::actual#11 assert_cmp::actual#12 assert_cmp::actual#13 assert_cmp::actual#14 assert_cmp::actual#15 assert_cmp::actual#16 assert_cmp::actual#1 assert_cmp::actual#2 assert_cmp::actual#3 ]
reg byte a [ assert_cmp::ok#4 assert_cmp::ok#1 assert_cmp::ok#2 assert_cmp::ok#3 ]
zp[2]:4 [ memcmp::str1#4 memcmp::s1#2 memcmp::s1#6 memcmp::s1#1 strncmp::n#6 strncmp::n#8 strncmp::n#0 assert_cmp::message#17 printf_string::str#2 printf_string::str#0 printf_string::str#1 strcmp::s1#2 strcmp::s1#0 strcmp::s1#1 ]
reg byte a [ textcolor::color#2 ]
zp[2]:6 [ printf_str::putc#10 memcmp::n#5 memcmp::n#7 memcmp::n#0 strncmp::s1#2 strncmp::s1#0 strncmp::s1#1 strcmp::s2#2 strcmp::s2#0 strcmp::s2#1 ]
zp[2]:8 [ printf_str::s#9 printf_str::s#10 printf_str::s#2 printf_str::s#0 memcmp::return#2 memcmp::return#1 memcmp::return#3 memcmp::return#4 memcmp::return#10 memcmp::return#11 strncmp::s2#2 strncmp::s2#0 strncmp::s2#1 strcmp::return#11 strcmp::return#0 strcmp::return#12 strcmp::return#13 strcmp::return#14 strcmp::return#15 strcmp::return#16 strcmp::return#17 strcmp::return#18 strcmp::return#10 ]
reg byte x [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 printf_schar::value#1 printf_schar::value#2 ]
zp[2]:10 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
reg byte x [ memset::c#4 memset::c#1 ]
zp[1]:12 [ uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:13 [ uctoa::started#2 uctoa::started#4 ]
zp[2]:14 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 memcmp::str2#4 memcmp::s2#2 memcmp::s2#6 memcmp::s2#1 strncmp::return#2 strncmp::return#0 strncmp::return#3 strncmp::return#10 strncmp::return#11 strncmp::return#12 strncmp::return#13 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[1]:16 [ conio_cursor_x ]
zp[1]:17 [ conio_cursor_y ]
zp[2]:18 [ conio_line_text ]
zp[2]:20 [ conio_line_color ]
zp[1]:22 [ conio_textcolor ]
reg byte a [ cputc::c#0 ]
zp[2]:23 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:25 [ gotoxy::$8 ]
zp[2]:27 [ gotoxy::$5 ]
reg byte a [ strcmp::$0 ]
reg byte a [ assert_cmp::$2 ]
reg byte a [ assert_cmp::$1 ]
reg byte a [ assert_cmp::$0 ]
reg byte a [ strncmp::$0 ]
reg byte a [ memcmp::$3 ]
reg byte a [ printf_str::c#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[2]:29 [ memcpy::src_end#0 ]
zp[2]:31 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
zp[1]:33 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
mem[12] [ printf_buffer ]
