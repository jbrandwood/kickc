Setting inferred volatile on symbol affected by address-of: main::i in asm { lda#'a' ldxi staSCREEN,x  }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  asm { lda#'a' ldxi staSCREEN,x  }
  main::i = main::i + rangenext(0,$a)
  main::$0 = main::i != rangelast(0,$a)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte* const SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
volatile byte main::i loadstore

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$0 [4] if(main::i!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Resolved ranged next value [2] main::i = ++ main::i to ++
Resolved ranged comparison value [4] if(main::i!=rangelast(0,$a)) goto main::@1 to $b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [3] if(main::i!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::i = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  asm { lda#'a' ldxi staSCREEN,x  }
  [2] main::i = ++ main::i
  [3] if(main::i!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
volatile byte main::i loadstore 8.75

Initial phi equivalence classes
Added variable main::i to live range equivalence class [ main::i ]
Complete equivalence classes
[ main::i ]
Allocated zp[1]:2 [ main::i ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::i = 0 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement asm { lda#'a' ldxi staSCREEN,x  } always clobbers reg byte a reg byte x 
Statement [3] if(main::i!=$b) goto main::@1 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 8.75: zp[1]:2 [ main::i ] 
Uplift Scope [] 

Uplifting [main] best 279 combination zp[1]:2 [ main::i ] 
Uplifting [] best 279 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i ]
Uplifting [main] best 279 combination zp[1]:2 [ main::i ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates how inline assembler referencing variables is automatically converted to __ma
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-asm-refout-var.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label i = 2
    // [0] main::i = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // asm { lda#'a' ldxi staSCREEN,x  }
    lda #'a'
    ldx i
    sta SCREEN,x
    // [2] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [3] if(main::i!=$b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne __b1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte* const SCREEN = (byte*) 1024
void main()
volatile byte main::i loadstore zp[1]:2 8.75

zp[1]:2 [ main::i ]


FINAL ASSEMBLER
Score: 246

  // File Comments
// Illustrates how inline assembler referencing variables is automatically converted to __ma
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-asm-refout-var.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label i = 2
    // for(byte i: 0..10)
    // [0] main::i = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // asm
    // asm { lda#'a' ldxi staSCREEN,x  }
    lda #'a'
    ldx i
    sta SCREEN,x
    // for(byte i: 0..10)
    // [2] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [3] if(main::i!=$b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

