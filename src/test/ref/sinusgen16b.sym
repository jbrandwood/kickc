const nomodify dword PI2_u4f28 = $6487ed51
const nomodify word PI_HALF_u4f12 = $1922
const nomodify dword PI_HALF_u4f28 = $1921fb54
const nomodify word PI_u4f12 = $3244
const nomodify dword PI_u4f28 = $3243f6a9
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte SIZEOF_SIGNED_WORD = 2
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:39 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:41 202.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:31 30.75
dword div32u16u::return#2 return zp[4]:31 22.0
dword div32u16u::return#3 return zp[4]:31 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:25 2500.25
word divr16u::dividend#3 dividend zp[2]:25 4429.142857142857
word divr16u::dividend#5 dividend zp[2]:25 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:41 15001.5
word divr16u::quotient#2 quotient zp[2]:41 10001.0
word divr16u::quotient#3 quotient zp[2]:41 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:23 7500.75
word divr16u::rem#1 rem zp[2]:23 20002.0
word divr16u::rem#10 rem zp[2]:23 1102.0
word divr16u::rem#11 rem zp[2]:23 10334.666666666666
word divr16u::rem#2 rem zp[2]:23 20002.0
word divr16u::rem#4 rem zp[2]:23 202.0
word divr16u::rem#5 rem zp[2]:23 21003.0
word divr16u::rem#6 rem zp[2]:23 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:41 4315.0
word divr16u::return#2 return zp[2]:41 202.0
word divr16u::return#3 return zp[2]:41 202.0
void main()
byte main::i
byte main::i#1 i zp[1]:6 16.5
byte main::i#2 i zp[1]:6 1.8333333333333333
const signed word* main::sintab1[$78]  = { fill( $78, 0) }
const signed word* main::sintab2[$78]  = { fill( $78, 0) }
signed word* main::st1
signed word* main::st1#1 st1 zp[2]:2 5.5
signed word* main::st1#2 st1 zp[2]:2 3.3000000000000003
signed word* main::st2
signed word* main::st2#1 st2 zp[2]:4 7.333333333333333
signed word* main::st2#2 st2 zp[2]:4 3.0
const byte* main::str[4]  = "   "
const byte* main::str1[2]  = " "
signed word main::sw
signed word main::sw#0 sw zp[2]:13 6.6000000000000005
const word main::wavelength = $78
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:19 2002.0
byte* memset::dst#2 dst zp[2]:19 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.0000002E7
word mul16u::a
word mul16u::a#0 a zp[2]:41 1.0000001E7
word mul16u::a#1 a zp[2]:41 36667.33333333333
word mul16u::a#2 a zp[2]:41 6683334.166666666
word mul16u::b
word mul16u::b#0 b zp[2]:25 10001.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:27 200002.0
dword mul16u::mb#1 mb zp[4]:27 2.0000002E7
dword mul16u::mb#2 mb zp[4]:27 4300000.571428571
dword mul16u::res
dword mul16u::res#1 res zp[4]:35 2.0000002E7
dword mul16u::res#2 res zp[4]:35 5001667.333333333
dword mul16u::res#6 res zp[4]:35 1.0000001E7
dword mul16u::return
dword mul16u::return#2 return zp[4]:35 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 zp[4]:35 20002.0
dword~ mulu16_sel::$1 zp[4]:35 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 return zp[2]:41 2002.0
word mulu16_sel::return#1 return_1 zp[2]:23 2002.0
word mulu16_sel::return#10 return_1 zp[2]:23 2002.0
word mulu16_sel::return#11 return zp[2]:41 2002.0
word mulu16_sel::return#14 return zp[2]:41 2002.0
word mulu16_sel::return#15 return_1 zp[2]:23 2002.0
word mulu16_sel::return#16 return zp[2]:41 2002.0
word mulu16_sel::return#17 return zp[2]:41 1667.5833333333333
word mulu16_sel::return#18 return_1 zp[2]:23 2002.0
word mulu16_sel::return#19 return_1 zp[2]:23 2002.0
word mulu16_sel::return#20 return zp[2]:41 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#10 reg byte x 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 v1 zp[2]:23 1001.0
word mulu16_sel::v1#1 v1 zp[2]:23 1001.0
word mulu16_sel::v1#10 v1 zp[2]:23 20011.0
word mulu16_sel::v1#2 v1 zp[2]:23 2002.0
word mulu16_sel::v1#3 v1 zp[2]:23 1001.0
word mulu16_sel::v1#4 v1 zp[2]:23 1001.0
word mulu16_sel::v1#5 v1 zp[2]:23 1001.0
word mulu16_sel::v1#6 v1 zp[2]:23 1001.0
word mulu16_sel::v1#7 v1 zp[2]:23 2002.0
word mulu16_sel::v1#8 v1 zp[2]:23 1001.0
word mulu16_sel::v1#9 v1 zp[2]:23 1001.0
word mulu16_sel::v2
word mulu16_sel::v2#0 v2 zp[2]:25 2002.0
word mulu16_sel::v2#1 v2 zp[2]:25 2002.0
word mulu16_sel::v2#10 v2 zp[2]:25 9004.5
word mulu16_sel::v2#3 v2 zp[2]:25 2002.0
word mulu16_sel::v2#4 v2 zp[2]:25 2002.0
word mulu16_sel::v2#5 v2 zp[2]:25 2002.0
word mulu16_sel::v2#6 v2 zp[2]:25 2002.0
word mulu16_sel::v2#8 v2 zp[2]:25 2002.0
word mulu16_sel::v2#9 v2 zp[2]:25 2002.0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#3 reg byte a 20002.0
byte print_char::ch#4 reg byte a 20002.0
byte print_char::ch#5 reg byte a 130004.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:21 2012.5
byte* print_char_cursor#12 print_char_cursor zp[2]:21 5000.576923076923
byte* print_char_cursor#36 print_char_cursor zp[2]:21 115103.5
byte* print_char_cursor#54 print_char_cursor zp[2]:21 44.8
byte* print_char_cursor#55 print_char_cursor zp[2]:21 8.25
byte* print_char_cursor#57 print_char_cursor zp[2]:21 123.0
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:13 202.0
signed word print_sint::w#1 w zp[2]:13 52.33333333333333
signed word print_sint::w#4 w zp[2]:13 202.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:19 20002.0
byte* print_str::str#3 str zp[2]:19 10026.25
byte* print_str::str#6 str zp[2]:19 101.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 2002.0
byte print_uchar::b#2 reg byte x 5501.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:13 701.0
word rem16u
word rem16u#0 rem16u zp[2]:23 220.39999999999998
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 zp[4]:35 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 reg byte y 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 return zp[2]:19 202.0
signed word sin16s::return#1 return zp[2]:19 701.0
signed word sin16s::return#5 return zp[2]:19 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 sinx zp[2]:19 2002.0
word sin16s::usinx
word sin16s::usinx#0 usinx zp[2]:19 166.83333333333334
word sin16s::usinx#1 usinx zp[2]:19 500.5
dword sin16s::x
dword sin16s::x#0 x zp[4]:15 1552.0
dword sin16s::x#1 x zp[4]:15 2002.0
dword sin16s::x#2 x zp[4]:15 2002.0
dword sin16s::x#4 x zp[4]:15 2502.5
dword sin16s::x#6 x zp[4]:15 3003.0
word sin16s::x1
word sin16s::x1#0 x1 zp[2]:39 318.5
word sin16s::x2
word sin16s::x2#0 x2 zp[2]:23 2002.0
word sin16s::x3
word sin16s::x3#0 x3 zp[2]:23 500.5
word sin16s::x3_6
word sin16s::x3_6#0 x3_6 zp[2]:41 2002.0
word sin16s::x4
word sin16s::x4#0 x4 zp[2]:23 2002.0
word sin16s::x5
word sin16s::x5#0 x5 zp[2]:41 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 x5_128 zp[2]:41 2002.0
void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
signed word~ sin16s_gen::$2 zp[2]:19 202.0
word sin16s_gen::i
word sin16s_gen::i#1 i zp[2]:13 202.0
word sin16s_gen::i#2 i zp[2]:13 33.666666666666664
signed word* sin16s_gen::sintab
signed word* sin16s_gen::sintab#0 sintab zp[2]:11 67.33333333333333
signed word* sin16s_gen::sintab#2 sintab zp[2]:11 43.285714285714285
dword sin16s_gen::step
dword sin16s_gen::step#0 step zp[4]:31 10.181818181818182
word sin16s_gen::wavelength
dword sin16s_gen::x
dword sin16s_gen::x#1 x zp[4]:7 101.0
dword sin16s_gen::x#2 x zp[4]:7 37.875
void sin16s_genb(signed word* sin16s_genb::sintab , word sin16s_genb::wavelength)
signed word~ sin16s_genb::$3 zp[2]:21 202.0
word sin16s_genb::i
word sin16s_genb::i#1 i zp[2]:13 202.0
word sin16s_genb::i#2 i zp[2]:13 33.666666666666664
signed word* sin16s_genb::sintab
signed word* sin16s_genb::sintab#0 sintab zp[2]:11 67.33333333333333
signed word* sin16s_genb::sintab#2 sintab zp[2]:11 43.285714285714285
dword sin16s_genb::step
dword sin16s_genb::step#0 step zp[4]:31 10.181818181818182
word sin16s_genb::wavelength
dword sin16s_genb::x
dword sin16s_genb::x#1 x zp[4]:7 101.0
dword sin16s_genb::x#2 x zp[4]:7 37.875
signed word sin16sb(word sin16sb::x)
byte sin16sb::isUpper
byte sin16sb::isUpper#2 reg byte y 31.28125
signed word sin16sb::return
signed word sin16sb::return#0 return zp[2]:21 202.0
signed word sin16sb::return#1 return zp[2]:21 701.0
signed word sin16sb::return#5 return zp[2]:21 2002.0
signed word sin16sb::sinx
signed word sin16sb::sinx#1 sinx zp[2]:21 2002.0
word sin16sb::usinx
word sin16sb::usinx#0 usinx zp[2]:21 166.83333333333334
word sin16sb::usinx#1 usinx zp[2]:21 500.5
word sin16sb::x
word sin16sb::x#0 x zp[2]:19 1552.0
word sin16sb::x#1 x zp[2]:19 2002.0
word sin16sb::x#2 x zp[2]:19 2002.0
word sin16sb::x#4 x zp[2]:19 2502.5
word sin16sb::x#6 x zp[2]:19 3003.0
word sin16sb::x1
word sin16sb::x1#0 x1 zp[2]:19 318.5
word sin16sb::x2
word sin16sb::x2#0 x2 zp[2]:23 2002.0
word sin16sb::x3
word sin16sb::x3#0 x3 zp[2]:23 500.5
word sin16sb::x3_6
word sin16sb::x3_6#0 x3_6 zp[2]:41 2002.0
word sin16sb::x4
word sin16sb::x4#0 x4 zp[2]:23 2002.0
word sin16sb::x5
word sin16sb::x5#0 x5 zp[2]:41 2002.0
word sin16sb::x5_128
word sin16sb::x5_128#0 x5_128 zp[2]:41 2002.0

zp[2]:2 [ main::st1#2 main::st1#1 ]
zp[2]:4 [ main::st2#2 main::st2#1 ]
zp[1]:6 [ main::i#2 main::i#1 ]
zp[4]:7 [ sin16s_genb::x#2 sin16s_genb::x#1 sin16s_gen::x#2 sin16s_gen::x#1 ]
zp[2]:11 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
zp[2]:13 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 main::sw#0 print_uint::w#0 sin16s_genb::i#2 sin16s_genb::i#1 sin16s_gen::i#2 sin16s_gen::i#1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:15 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
reg byte y [ sin16sb::isUpper#2 ]
zp[2]:19 [ memset::dst#2 memset::dst#1 sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 print_str::str#3 print_str::str#6 print_str::str#0 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:21 [ print_char_cursor#36 print_char_cursor#57 print_char_cursor#54 print_char_cursor#55 print_char_cursor#1 print_char_cursor#12 sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$3 sin16sb::usinx#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:23 [ mulu16_sel::v1#10 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 mulu16_sel::v1#8 sin16s::x3#0 sin16sb::x3#0 sin16s::x2#0 sin16s::x4#0 sin16sb::x2#0 sin16sb::x4#0 mulu16_sel::return#1 mulu16_sel::return#15 mulu16_sel::return#18 mulu16_sel::return#19 mulu16_sel::return#10 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ]
zp[2]:25 [ mulu16_sel::v2#10 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 mulu16_sel::v2#8 mul16u::b#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
reg byte x [ mulu16_sel::select#10 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[4]:27 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[4]:31 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 div32u16u::return#3 sin16s_genb::step#0 ]
zp[4]:35 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
zp[2]:39 [ sin16s::x1#0 div32u16u::quotient_hi#0 ]
zp[2]:41 [ mulu16_sel::return#0 mulu16_sel::return#17 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 sin16s::x5_128#0 sin16sb::x5_128#0 mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ mul16u::$1 ]
