@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call cputs 
  to:main::@return
main::@return: scope:[main]  from main
  [10] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main
  [11] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [12] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(const byte*) main::s cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [13] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [14] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [15] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [16] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [17] (byte) cputc::c#0 ← (byte) cputs::c#1
  [18] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [19] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [20] *((byte*) conio_cursor_text) ← (byte) cputc::c#0
  [21] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [22] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [23] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [24] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [25] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [26] (byte) conio_cursor_x ← (byte) 0
  [27] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [28] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [29] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [30] phi()
  [31] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [32] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [33] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [34] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [35] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [36] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [37] (byte) conio_cursor_x ← (byte) 0
  [38] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [39] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [40] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [41] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [42] phi()
  [43] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [44] phi()
  [45] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [46] phi()
  [47] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [48] phi()
  [49] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [50] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [51] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [52] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [53] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [54] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [55] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [56] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [56] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [57] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [58] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [59] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [60] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [61] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [62] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [63] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [64] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [64] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [65] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [66] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [67] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [68] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [68] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [69] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [70] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [71] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [72] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [73] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1
