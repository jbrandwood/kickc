
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::b#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::b#2 = phi( main/main::b#0, main::@4/main::b#1 )
  main::$0 = main::b#2 == 0
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::b#5 = phi( main::@1/main::b#2 )
  main::$6 = 'a'
  to:main::@4
main::@3: scope:[main]  from main::@1
  main::b#3 = phi( main::@1/main::b#2 )
  main::$1 = main::b#3 == 1
  if(main::$1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@3
  main::b#7 = phi( main::@3/main::b#3 )
  main::$3 = 'b'
  to:main::@7
main::@6: scope:[main]  from main::@3
  main::b#8 = phi( main::@3/main::b#3 )
  main::$2 = 'c'
  to:main::@7
main::@7: scope:[main]  from main::@5 main::@6
  main::b#6 = phi( main::@5/main::b#7, main::@6/main::b#8 )
  main::$4 = phi( main::@5/main::$3, main::@6/main::$2 )
  main::$5 = main::$4
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@7
  main::b#4 = phi( main::@2/main::b#5, main::@7/main::b#6 )
  main::$7 = phi( main::@2/main::$6, main::@7/main::$5 )
  *main::SCREEN = main::$7
  main::b#1 = main::b#4 + rangenext(0,2)
  main::$8 = main::b#1 != rangelast(0,2)
  if(main::$8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
bool~ main::$1
byte~ main::$2
byte~ main::$3
byte~ main::$4
byte~ main::$5
byte~ main::$6
byte~ main::$7
bool~ main::$8
const nomodify byte* main::SCREEN = (byte*)$400
byte main::b
byte main::b#0
byte main::b#1
byte main::b#2
byte main::b#3
byte main::b#4
byte main::b#5
byte main::b#6
byte main::b#7
byte main::b#8

Adding number conversion cast (unumber) 0 in main::$0 = main::b#2 == 0
Adding number conversion cast (unumber) 1 in main::$1 = main::b#3 == 1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::b#2 = main::b#5 main::b#3 main::b#7 main::b#8 
Alias main::$5 = main::$4 
Successful SSA optimization Pass2AliasElimination
Alias main::b#2 = main::b#6 
Successful SSA optimization Pass2AliasElimination
Alias main::b#2 = main::b#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [3] if(main::b#2==0) goto main::@2
Simple Condition main::$1 [6] if(main::b#2==1) goto main::@5
Simple Condition main::$8 [14] if(main::b#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::b#0 = 0
Constant main::$6 = 'a'
Constant main::$3 = 'b'
Constant main::$2 = 'c'
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [12] main::b#1 = ++ main::b#2 to ++
Resolved ranged comparison value [14] if(main::b#1!=rangelast(0,2)) goto main::@1 to 3
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [7] if(main::b#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::b#0
Constant inlined main::$6 = 'a'
Constant inlined main::$3 = 'b'
Constant inlined main::b#0 = 0
Constant inlined main::$2 = 'c'
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@8(between main::@4 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [6] main::$9 = main::$5
Coalesced [12] main::b#9 = main::b#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@6
Culled Empty Block label main::@8
Culled Empty Block label main::@2
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@7 to main::@5
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::b#2 = phi( main/0, main::@3/main::b#1 )
  [2] if(main::b#2==0) goto main::@3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [3] if(main::b#2==1) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@2
  [4] phi()
  to:main::@5
main::@5: scope:[main]  from main::@2 main::@4
  [5] main::$5 = phi( main::@4/'b', main::@2/'c' )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@5
  [6] main::$7 = phi( main::@1/'a', main::@5/main::$5 )
  [7] *main::SCREEN = main::$7
  [8] main::b#1 = ++ main::b#2
  [9] if(main::b#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$5 11.0
byte~ main::$7 22.0
byte main::b
byte main::b#1 16.5
byte main::b#2 6.285714285714286

Initial phi equivalence classes
[ main::b#2 main::b#1 ]
[ main::$7 main::$5 ]
Complete equivalence classes
[ main::b#2 main::b#1 ]
[ main::$7 main::$5 ]
Allocated zp[1]:2 [ main::b#2 main::b#1 ]
Allocated zp[1]:3 [ main::$7 main::$5 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::b#2 main::b#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$7 main::$5 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[1]:3 [ main::$7 main::$5 ] 22.79: zp[1]:2 [ main::b#2 main::b#1 ] 
Uplift Scope [] 

Uplifting [main] best 551 combination reg byte a [ main::$7 main::$5 ] reg byte x [ main::b#2 main::b#1 ] 
Uplifting [] best 551 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates error with nested ternary operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::b#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::b#2 = main::b#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::b#2==0) goto main::@3 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __b3_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [3] if(main::b#2==1) goto main::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b4_from___b2
    // [5] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  __b5_from___b2:
    // [5] phi main::$5 = 'c' [phi:main::@2->main::@5#0] -- vbuaa=vbuc1 
    lda #'c'
    jmp __b5
    // [4] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [5] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    // [5] phi main::$5 = 'b' [phi:main::@4->main::@5#0] -- vbuaa=vbuc1 
    lda #'b'
    jmp __b5
    // main::@5
  __b5:
    // [6] phi from main::@5 to main::@3 [phi:main::@5->main::@3]
  __b3_from___b5:
    // [6] phi main::$7 = main::$5 [phi:main::@5->main::@3#0] -- register_copy 
    jmp __b3
    // [6] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [6] phi main::$7 = 'a' [phi:main::@1->main::@3#0] -- vbuaa=vbuc1 
    lda #'a'
    jmp __b3
    // main::@3
  __b3:
    // [7] *main::SCREEN = main::$7 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [8] main::b#1 = ++ main::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::b#1!=3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b4_from___b2 with __b4
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Removing instruction __b4_from___b2:
Removing instruction __b5_from___b4:
Removing instruction __b3_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b5_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b3 in jmp __b5
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b5:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$5 reg byte a 11.0
byte~ main::$7 reg byte a 22.0
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::b
byte main::b#1 reg byte x 16.5
byte main::b#2 reg byte x 6.285714285714286

reg byte x [ main::b#2 main::b#1 ]
reg byte a [ main::$7 main::$5 ]


FINAL ASSEMBLER
Score: 341

  // File Comments
// Demonstrates error with nested ternary operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::b#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::b#2 = main::b#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (b == 0) ? 'a' : ((b == 1) ? 'b' : 'c')
    // [2] if(main::b#2==0) goto main::@3 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __b2
    // main::@2
    // (b == 1) ? 'b' : 'c'
    // [3] if(main::b#2==1) goto main::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b4
    // [5] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
    // [5] phi main::$5 = 'c' [phi:main::@2->main::@5#0] -- vbuaa=vbuc1 
    lda #'c'
    jmp __b3
    // [4] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // main::@4
  __b4:
    // (b == 1) ? 'b' : 'c'
    // [5] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // [5] phi main::$5 = 'b' [phi:main::@4->main::@5#0] -- vbuaa=vbuc1 
    lda #'b'
    // main::@5
    // (b == 0) ? 'a' : ((b == 1) ? 'b' : 'c')
    // [6] phi from main::@5 to main::@3 [phi:main::@5->main::@3]
    // [6] phi main::$7 = main::$5 [phi:main::@5->main::@3#0] -- register_copy 
    jmp __b3
    // [6] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b2:
    // [6] phi main::$7 = 'a' [phi:main::@1->main::@3#0] -- vbuaa=vbuc1 
    lda #'a'
    // main::@3
  __b3:
    // *SCREEN = (b == 0) ? 'a' : ((b == 1) ? 'b' : 'c')
    // [7] *main::SCREEN = main::$7 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // for ( byte b: 0..2 )
    // [8] main::b#1 = ++ main::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::b#1!=3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1
    // main::@return
    // }
    // [10] return 
    rts
}
  // File Data

