@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call out 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call out 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call out 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi()
  [13] call out 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [14] phi()
  [15] call out 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [16] phi()
  [17] call out 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [18] phi()
  [19] call out 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [20] phi()
  [21] call out 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [22] phi()
  [23] call out 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [24] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main main::@1 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [25] (byte) i#26 ← phi( main/(byte) 0 main::@1/(byte) i#12 main::@2/(byte) i#12 main::@3/(byte) i#12 main::@4/(byte) i#12 main::@5/(byte) i#12 main::@6/(byte) i#12 main::@7/(byte) i#12 main::@8/(byte) i#12 main::@9/(byte) i#12 )
  [25] (byte) out::c#10 ← phi( main/(const byte) main::reg_zp_flex main::@1/(const byte) main::reg_zp_abs main::@2/(const byte) main::reg_mem_flex main::@3/(const byte) main::reg_mem_abs main::@4/(const byte) main::default_default main::@5/(const byte) main::reg_default main::@6/(const byte) main::default_zp_flex main::@7/(const byte) main::default_zp_abs main::@8/(const byte) main::default_mem_flex main::@9/(const byte) main::default_mem_abs )
  [26] *((const nomodify byte*) SCREEN + (byte) i#26) ← (byte) out::c#10
  [27] (byte) i#12 ← ++ (byte) i#26
  to:out::@return
out::@return: scope:[out]  from out
  [28] return 
  to:@return
