@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call sin16s_gen 
  to:main::@5
main::@5: scope:[main]  from main
  [6] phi()
  [7] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  [8] (byte*) print_char_cursor#21 ← phi( main::@5/(const byte*) print_line_cursor#0 main::@7/(byte*) print_char_cursor#2 )
  [8] (signed word*) main::st1#2 ← phi( main::@5/(const signed word[$78]) main::sintab1 main::@7/(signed word*) main::st1#1 )
  [9] if((signed word*) main::st1#2<(const signed word[$78]) main::sintab1+(const word) main::wavelength*(const byte) SIZEOF_SIGNED_WORD) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2)
  [12] if((signed word) main::sw#0<(signed byte) 0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [13] phi()
  [14] call print_str 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [15] (byte*) print_char_cursor#51 ← phi( main::@4/(byte*) print_char_cursor#2 main::@2/(byte*) print_char_cursor#21 )
  [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0
  [17] call print_sword 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [18] phi()
  [19] call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (const byte) SIZEOF_SIGNED_WORD
  to:main::@1

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@4 main::@6
  [21] (byte*) print_char_cursor#55 ← phi( main::@6/(byte*) print_char_cursor#13 main::@4/(byte*) print_char_cursor#21 )
  [21] (byte*) print_str::str#5 ← phi( main::@6/(const string) main::str main::@4/(const string) main::str1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [22] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#55 print_str::@2/(byte*) print_char_cursor#1 )
  [22] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [24] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3)
  [26] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1

(void()) print_sword((signed word) print_sword::w)
print_sword: scope:[print_sword]  from main::@3
  [28] if((signed word) print_sword::w#1<(signed byte) 0) goto print_sword::@1
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword
  [29] phi()
  [30] call print_char 
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword::@3 print_sword::@4
  [31] (signed word) print_sword::w#4 ← phi( print_sword::@4/(signed word) print_sword::w#0 print_sword::@3/(signed word) print_sword::w#1 )
  [32] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4
  [33] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@2
  [34] return 
  to:@return
print_sword::@1: scope:[print_sword]  from print_sword
  [35] phi()
  [36] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@1
  [37] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sword::@1 print_sword::@3
  [38] (byte*) print_char_cursor#35 ← phi( print_byte/(byte*) print_char_cursor#13 print_byte::@1/(byte*) print_char_cursor#13 print_sword::@1/(byte*) print_char_cursor#51 print_sword::@3/(byte*) print_char_cursor#51 )
  [38] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sword::@1/(byte) '-' print_sword::@3/(byte) ' ' )
  [39] *((byte*) print_char_cursor#35) ← (byte) print_char::ch#4
  [40] (byte*) print_char_cursor#13 ← ++ (byte*) print_char_cursor#35
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [41] return 
  to:@return

(void()) print_word((word) print_word::w)
print_word: scope:[print_word]  from print_sword::@2
  [42] (byte) print_byte::b#0 ← > (word) print_word::w#0
  [43] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [44] (byte) print_byte::b#1 ← < (word) print_word::w#0
  [45] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [46] return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_word print_word::@1
  [47] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [48] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [49] (byte) print_char::ch#2 ← *((const byte[]) print_hextab + (byte~) print_byte::$0)
  [50] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [51] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [52] (byte) print_char::ch#3 ← *((const byte[]) print_hextab + (byte~) print_byte::$2)
  [53] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [54] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@5
  [55] phi()
  [56] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [57] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [58] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [59] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [60] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [61] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [62] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [63] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main
  [64] phi()
  [65] call div32u16u 
  [66] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [67] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [68] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@3/(const signed word[$78]) main::sintab1 sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  [68] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(byte) 0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  [68] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@3/(byte) 0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  [69] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  [70] return 
  to:@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  [71] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [72] call sin16s 
  [73] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  [74] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0
  [75] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2
  [76] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [77] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [78] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  to:sin16s_gen::@1

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  [79] if((dword) sin16s::x#0<(const dword) PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [80] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [81] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [81] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [82] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [83] (dword) sin16s::x#2 ← (const dword) PI_u4f28 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [84] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [85] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [86] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [87] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [88] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [89] call mulu16_sel 
  [90] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [91] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [92] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [93] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [94] call mulu16_sel 
  [95] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [96] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [97] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [98] call mulu16_sel 
  [99] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [100] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [101] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [102] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [103] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [104] call mulu16_sel 
  [105] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [106] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [107] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [108] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [109] call mulu16_sel 
  [110] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [111] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [112] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [113] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [114] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [115] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [116] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [117] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [118] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [119] (byte) mulu16_sel::select#5 ← phi( sin16s::@9/(byte) 0 sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 )
  [119] (word) mulu16_sel::v2#5 ← phi( sin16s::@9/(word) mulu16_sel::v2#3 sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 )
  [119] (word) mulu16_sel::v1#5 ← phi( sin16s::@9/(word) mulu16_sel::v1#3 sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 )
  [120] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5
  [121] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  [122] call mul16u 
  [123] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [124] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [125] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [126] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [127] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  [128] phi()
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [129] (dword) mul16u::mb#2 ← phi( mul16u/(word) mul16u::b#0 mul16u::@3/(dword) mul16u::mb#1 )
  [129] (dword) mul16u::res#2 ← phi( mul16u/(byte) 0 mul16u::@3/(dword) mul16u::res#6 )
  [129] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [130] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [131] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [132] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [133] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [134] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [135] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [136] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [137] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen
  [138] phi()
  [139] call divr16u 
  [140] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [141] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [142] (word) divr16u::rem#4 ← (word) rem16u#1
  [143] call divr16u 
  [144] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [145] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [146] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [147] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [148] (word) divr16u::dividend#5 ← phi( div32u16u/>(const dword) PI2_u4f28 div32u16u::@1/<(const dword) PI2_u4f28 )
  [148] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [149] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [149] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [149] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [149] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [150] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [151] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [152] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [153] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [154] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [155] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [156] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [157] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [158] if((word) divr16u::rem#6<(const word) main::wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [159] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [160] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [161] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [161] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [162] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [163] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [164] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [165] return 
  to:@return
