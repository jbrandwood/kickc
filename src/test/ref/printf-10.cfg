@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call printf_str 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call printf_str 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call printf_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi()
  [13] call printf_uint 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [14] phi()
  [15] call printf_str 
  to:main::@return
main::@return: scope:[main]  from main::@5
  [16] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main main::@2 main::@3 main::@5 printf_string
  [17] (byte*) screen#36 ← phi( main/(byte*) 1024 main::@2/(byte*) screen#18 main::@3/(byte*) screen#18 main::@5/(byte*) screen#23 printf_string/(byte*) screen#18 )
  [17] (byte*) printf_str::str#8 ← phi( main/(const byte*) main::str main::@2/(const byte*) main::str2 main::@3/(const byte*) main::str3 main::@5/(const byte*) main::str4 printf_string/(const byte*) main::str1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [18] (byte*) screen#18 ← phi( printf_str/(byte*) screen#36 printf_str::@2/(byte*) screen#1 )
  [18] (byte*) printf_str::str#6 ← phi( printf_str/(byte*) printf_str::str#8 printf_str::@2/(byte*) printf_str::str#0 )
  [19] if((byte) 0!=*((byte*) printf_str::str#6)) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [20] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [21] *((byte*) screen#18) ← *((byte*) printf_str::str#6)
  [22] (byte*) screen#1 ← ++ (byte*) screen#18
  [23] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#6
  to:printf_str::@1

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@4
  [24] *((byte*) screen#18) ← *((const to_nomodify byte*) printf_hextab)
  [25] (byte*) screen#5 ← ++ (byte*) screen#18
  [26] *((byte*) screen#5) ← *((const to_nomodify byte*) printf_hextab)
  [27] (byte*) screen#6 ← ++ (byte*) screen#5
  [28] *((byte*) screen#6) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::age>>(byte) 4)
  [29] (byte*) screen#7 ← ++ (byte*) screen#6
  [30] *((byte*) screen#7) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::age&(byte) $f)
  [31] (byte*) screen#23 ← ++ (byte*) screen#7
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint
  [32] return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1
  [33] phi()
  [34] call printf_str 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string
  [35] return 
  to:@return
