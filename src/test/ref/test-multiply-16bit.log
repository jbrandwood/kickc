Inlined call call mulf8s_prepare (signed byte) mulf8s::a 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@12
print_str: scope:[print_str]  from mul16s_compare::@1 mul16s_compare::@17 mul16s_error mul16s_error::@2 mul16s_error::@4 mul16s_error::@6 mul16s_error::@8 mul16u_compare::@1 mul16u_compare::@17 mul16u_error mul16u_error::@2 mul16u_error::@4 mul16u_error::@6 mul16u_error::@8
  (byte*) print_char_cursor#148 ← phi( mul16s_compare::@1/(byte*) print_char_cursor#143 mul16s_compare::@17/(byte*) print_char_cursor#49 mul16s_error/(byte*) print_char_cursor#146 mul16s_error::@2/(byte*) print_char_cursor#53 mul16s_error::@4/(byte*) print_char_cursor#55 mul16s_error::@6/(byte*) print_char_cursor#57 mul16s_error::@8/(byte*) print_char_cursor#59 mul16u_compare::@1/(byte*) print_char_cursor#139 mul16u_compare::@17/(byte*) print_char_cursor#31 mul16u_error/(byte*) print_char_cursor#142 mul16u_error::@2/(byte*) print_char_cursor#35 mul16u_error::@4/(byte*) print_char_cursor#37 mul16u_error::@6/(byte*) print_char_cursor#39 mul16u_error::@8/(byte*) print_char_cursor#41 )
  (byte*) print_str::str#17 ← phi( mul16s_compare::@1/(byte*) print_str::str#8 mul16s_compare::@17/(byte*) print_str::str#9 mul16s_error/(byte*) print_str::str#10 mul16s_error::@2/(byte*) print_str::str#11 mul16s_error::@4/(byte*) print_str::str#12 mul16s_error::@6/(byte*) print_str::str#13 mul16s_error::@8/(byte*) print_str::str#14 mul16u_compare::@1/(byte*) print_str::str#1 mul16u_compare::@17/(byte*) print_str::str#2 mul16u_error/(byte*) print_str::str#3 mul16u_error::@2/(byte*) print_str::str#4 mul16u_error::@4/(byte*) print_str::str#5 mul16u_error::@6/(byte*) print_str::str#6 mul16u_error::@8/(byte*) print_str::str#7 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#128 ← phi( print_str/(byte*) print_char_cursor#148 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#15 ← phi( print_str/(byte*) print_str::str#17 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#15) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#65 ← phi( print_str::@1/(byte*) print_char_cursor#128 )
  (byte*) print_str::str#16 ← phi( print_str::@1/(byte*) print_str::str#15 )
  *((byte*) print_char_cursor#65) ← *((byte*) print_str::str#16)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#65
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#16
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#66 ← phi( print_str::@1/(byte*) print_char_cursor#128 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#66
  return 
  to:@return
print_ln: scope:[print_ln]  from mul16s_compare::@11 mul16s_compare::@18 mul16s_error::@10 mul16u_compare::@11 mul16u_compare::@18 mul16u_error::@10
  (byte*) print_char_cursor#129 ← phi( mul16s_compare::@11/(byte*) print_char_cursor#145 mul16s_compare::@18/(byte*) print_char_cursor#50 mul16s_error::@10/(byte*) print_char_cursor#61 mul16u_compare::@11/(byte*) print_char_cursor#141 mul16u_compare::@18/(byte*) print_char_cursor#32 mul16u_error::@10/(byte*) print_char_cursor#43 )
  (byte*) print_line_cursor#43 ← phi( mul16s_compare::@11/(byte*) print_line_cursor#51 mul16s_compare::@18/(byte*) print_line_cursor#52 mul16s_error::@10/(byte*) print_line_cursor#53 mul16u_compare::@11/(byte*) print_line_cursor#47 mul16u_compare::@18/(byte*) print_line_cursor#48 mul16u_error::@10/(byte*) print_line_cursor#49 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#67 ← phi( print_ln/(byte*) print_char_cursor#129 print_ln::@1/(byte*) print_char_cursor#67 )
  (byte*) print_line_cursor#22 ← phi( print_ln/(byte*) print_line_cursor#43 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#67
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#23 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#23
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#68 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#24 ← phi( print_ln::@2/(byte*) print_line_cursor#23 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#68
  return 
  to:@return
print_sword: scope:[print_sword]  from mul16s_error::@1 mul16s_error::@3
  (byte*) print_char_cursor#149 ← phi( mul16s_error::@1/(byte*) print_char_cursor#52 mul16s_error::@3/(byte*) print_char_cursor#54 )
  (signed word) print_sword::w#3 ← phi( mul16s_error::@1/(signed word) print_sword::w#1 mul16s_error::@3/(signed word) print_sword::w#2 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#130 ← phi( print_sword/(byte*) print_char_cursor#149 print_sword::@4/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#4 ← phi( print_sword/(signed word) print_sword::w#3 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w#4
  (word) print_word::w#0 ← (word~) print_sword::$4
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#69 ← phi( print_sword::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#69
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#131 ← phi( print_sword/(byte*) print_char_cursor#149 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#5 ← phi( print_sword::@2/(signed word) print_sword::w#6 )
  (byte*) print_char_cursor#70 ← phi( print_sword::@2/(byte*) print_char_cursor#21 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#70
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w#5
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#71 ← phi( print_sword::@3/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#71
  return 
  to:@return
print_word: scope:[print_word]  from mul16u_error::@1 mul16u_error::@3 print_dword print_dword::@1 print_sword::@1
  (byte*) print_char_cursor#132 ← phi( mul16u_error::@1/(byte*) print_char_cursor#34 mul16u_error::@3/(byte*) print_char_cursor#36 print_dword/(byte*) print_char_cursor#133 print_dword::@1/(byte*) print_char_cursor#11 print_sword::@1/(byte*) print_char_cursor#130 )
  (word) print_word::w#5 ← phi( mul16u_error::@1/(word) print_word::w#3 mul16u_error::@3/(word) print_word::w#4 print_dword/(word) print_word::w#1 print_dword::@1/(word) print_word::w#2 print_sword::@1/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#5
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#6 ← phi( print_word/(word) print_word::w#5 )
  (byte*) print_char_cursor#72 ← phi( print_word/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#72
  (byte~) print_word::$2 ← < (word) print_word::w#6
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#73 ← phi( print_word::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#73
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#74 ← phi( print_word::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#74
  return 
  to:@return
print_dword: scope:[print_dword]  from mul16u_error::@5 mul16u_error::@7 mul16u_error::@9 print_sdword::@1
  (byte*) print_char_cursor#133 ← phi( mul16u_error::@5/(byte*) print_char_cursor#38 mul16u_error::@7/(byte*) print_char_cursor#40 mul16u_error::@9/(byte*) print_char_cursor#42 print_sdword::@1/(byte*) print_char_cursor#134 )
  (dword) print_dword::dw#4 ← phi( mul16u_error::@5/(dword) print_dword::dw#1 mul16u_error::@7/(dword) print_dword::dw#2 mul16u_error::@9/(dword) print_dword::dw#3 print_sdword::@1/(dword) print_dword::dw#0 )
  (word~) print_dword::$0 ← > (dword) print_dword::dw#4
  (word) print_word::w#1 ← (word~) print_dword::$0
  call print_word 
  to:print_dword::@1
print_dword::@1: scope:[print_dword]  from print_dword
  (dword) print_dword::dw#5 ← phi( print_dword/(dword) print_dword::dw#4 )
  (byte*) print_char_cursor#75 ← phi( print_dword/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#75
  (word~) print_dword::$2 ← < (dword) print_dword::dw#5
  (word) print_word::w#2 ← (word~) print_dword::$2
  call print_word 
  to:print_dword::@2
print_dword::@2: scope:[print_dword]  from print_dword::@1
  (byte*) print_char_cursor#76 ← phi( print_dword::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#76
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword::@2
  (byte*) print_char_cursor#77 ← phi( print_dword::@2/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#77
  return 
  to:@return
print_sdword: scope:[print_sdword]  from mul16s_error::@5 mul16s_error::@7 mul16s_error::@9
  (byte*) print_char_cursor#150 ← phi( mul16s_error::@5/(byte*) print_char_cursor#56 mul16s_error::@7/(byte*) print_char_cursor#58 mul16s_error::@9/(byte*) print_char_cursor#60 )
  (signed dword) print_sdword::dw#4 ← phi( mul16s_error::@5/(signed dword) print_sdword::dw#1 mul16s_error::@7/(signed dword) print_sdword::dw#2 mul16s_error::@9/(signed dword) print_sdword::dw#3 )
  (bool~) print_sdword::$0 ← (signed dword) print_sdword::dw#4 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) print_sdword::$1 ← ! (bool~) print_sdword::$0
  if((bool~) print_sdword::$1) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@4
  (byte*) print_char_cursor#134 ← phi( print_sdword/(byte*) print_char_cursor#150 print_sdword::@4/(byte*) print_char_cursor#15 )
  (signed dword) print_sdword::dw#5 ← phi( print_sdword/(signed dword) print_sdword::dw#4 print_sdword::@4/(signed dword) print_sdword::dw#0 )
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw#5
  (dword) print_dword::dw#0 ← (dword~) print_sdword::$4
  call print_dword 
  to:print_sdword::@3
print_sdword::@3: scope:[print_sdword]  from print_sdword::@1
  (byte*) print_char_cursor#78 ← phi( print_sdword::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#78
  to:print_sdword::@return
print_sdword::@2: scope:[print_sdword]  from print_sdword
  (signed dword) print_sdword::dw#7 ← phi( print_sdword/(signed dword) print_sdword::dw#4 )
  (byte*) print_char_cursor#135 ← phi( print_sdword/(byte*) print_char_cursor#150 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_sdword::@4
print_sdword::@4: scope:[print_sdword]  from print_sdword::@2
  (signed dword) print_sdword::dw#6 ← phi( print_sdword::@2/(signed dword) print_sdword::dw#7 )
  (byte*) print_char_cursor#79 ← phi( print_sdword::@2/(byte*) print_char_cursor#21 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#79
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw#6
  (signed dword) print_sdword::dw#0 ← (signed dword~) print_sdword::$3
  to:print_sdword::@1
print_sdword::@return: scope:[print_sdword]  from print_sdword::@3
  (byte*) print_char_cursor#80 ← phi( print_sdword::@3/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#80
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#8 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#165 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#71 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@24
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#136 ← phi( print_word/(byte*) print_char_cursor#132 print_word::@1/(byte*) print_char_cursor#8 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#81 ← phi( print_byte/(byte*) print_char_cursor#21 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#81
  (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) print_char::ch#3 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#82 ← phi( print_byte::@1/(byte*) print_char_cursor#21 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#82
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#83 ← phi( print_byte::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#83
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sdword::@2 print_sword::@2
  (byte*) print_char_cursor#84 ← phi( print_byte/(byte*) print_char_cursor#136 print_byte::@1/(byte*) print_char_cursor#17 print_sdword::@2/(byte*) print_char_cursor#135 print_sword::@2/(byte*) print_char_cursor#131 )
  (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sdword::@2/(byte) print_char::ch#1 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#20 ← ++ (byte*) print_char_cursor#84
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#85 ← phi( print_char/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#85
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#22 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#86 ← phi( print_cls::@2/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#25 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#86
  return 
  to:@return
mul16u: scope:[mul16u]  from mul16s mul16u_compare::@13
  (word) mul16u::a#6 ← phi( mul16s/(word) mul16u::a#1 mul16u_compare::@13/(word) mul16u::a#2 )
  (word) mul16u::b#2 ← phi( mul16s/(word) mul16u::b#0 mul16u_compare::@13/(word) mul16u::b#1 )
  (dword) mul16u::res#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#4 ← phi( mul16u::@1/(word) mul16u::a#3 )
  (byte/word~) mul16u::$1 ← (word) mul16u::a#4 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@7/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@7/(dword) mul16u::mb#3 )
  (word) mul16u::a#5 ← phi( mul16u::@2/(word) mul16u::a#4 mul16u::@7/(word) mul16u::a#7 )
  (word~) mul16u::$5 ← (word) mul16u::a#5 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#7 ← phi( mul16u::@2/(word) mul16u::a#4 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#4 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#4
  return 
  to:@return
mul16s: scope:[mul16s]  from mul16s_compare::@13
  (signed word) mul16s::b#1 ← phi( mul16s_compare::@13/(signed word) mul16s::b#0 )
  (signed word) mul16s::a#1 ← phi( mul16s_compare::@13/(signed word) mul16s::a#0 )
  (word~) mul16s::$0 ← ((word)) (signed word) mul16s::a#1
  (word~) mul16s::$1 ← ((word)) (signed word) mul16s::b#1
  (word) mul16u::a#1 ← (word~) mul16s::$0
  (word) mul16u::b#0 ← (word~) mul16s::$1
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mul16s::@6
mul16s::@6: scope:[mul16s]  from mul16s
  (signed word) mul16s::b#4 ← phi( mul16s/(signed word) mul16s::b#1 )
  (signed word) mul16s::a#2 ← phi( mul16s/(signed word) mul16s::a#1 )
  (dword) mul16u::return#5 ← phi( mul16s/(dword) mul16u::return#2 )
  (dword~) mul16s::$2 ← (dword) mul16u::return#5
  (dword) mul16s::m#0 ← (dword~) mul16s::$2
  (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s::$4 ← ! (bool~) mul16s::$3
  if((bool~) mul16s::$4) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@6
  (signed word) mul16s::a#4 ← phi( mul16s::@3/(signed word) mul16s::a#5 mul16s::@6/(signed word) mul16s::a#2 )
  (dword) mul16s::m#6 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@6/(dword) mul16s::m#0 )
  (signed word) mul16s::b#2 ← phi( mul16s::@3/(signed word) mul16s::b#3 mul16s::@6/(signed word) mul16s::b#4 )
  (bool~) mul16s::$9 ← (signed word) mul16s::b#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s::$10 ← ! (bool~) mul16s::$9
  if((bool~) mul16s::$10) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@6
  (signed word) mul16s::a#5 ← phi( mul16s::@6/(signed word) mul16s::a#2 )
  (signed word) mul16s::b#3 ← phi( mul16s::@6/(signed word) mul16s::b#4 )
  (dword) mul16s::m#3 ← phi( mul16s::@6/(dword) mul16s::m#0 )
  (word~) mul16s::$6 ← > (dword) mul16s::m#3
  (word~) mul16s::$7 ← ((word)) (signed word) mul16s::b#3
  (word~) mul16s::$8 ← (word~) mul16s::$6 - (word~) mul16s::$7
  (word~) mul16s::$16 ← (word~) mul16s::$8
  (dword) mul16s::m#1 ← (dword) mul16s::m#3 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#6 mul16s::@4/(dword) mul16s::m#2 )
  (signed dword~) mul16s::$15 ← ((signed dword)) (dword) mul16s::m#4
  (signed dword) mul16s::return#0 ← (signed dword~) mul16s::$15
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  (signed word) mul16s::a#3 ← phi( mul16s::@1/(signed word) mul16s::a#4 )
  (dword) mul16s::m#5 ← phi( mul16s::@1/(dword) mul16s::m#6 )
  (word~) mul16s::$12 ← > (dword) mul16s::m#5
  (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a#3
  (word~) mul16s::$14 ← (word~) mul16s::$12 - (word~) mul16s::$13
  (word~) mul16s::$17 ← (word~) mul16s::$14
  (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  (signed dword) mul16s::return#3 ← phi( mul16s::@2/(signed dword) mul16s::return#0 )
  (signed dword) mul16s::return#1 ← (signed dword) mul16s::return#3
  return 
  to:@return
@24: scope:[]  from @12
  (byte*) print_screen#7 ← phi( @12/(byte*) print_screen#8 )
  (byte*) print_char_cursor#158 ← phi( @12/(byte*) print_char_cursor#165 )
  (byte*) print_line_cursor#62 ← phi( @12/(byte*) print_line_cursor#71 )
  (byte[$200]) mulf_sqr1_lo#0 ← { fill( $200, 0) }
  (byte[$200]) mulf_sqr1_hi#0 ← { fill( $200, 0) }
  (byte[$200]) mulf_sqr2_lo#0 ← { fill( $200, 0) }
  (byte[$200]) mulf_sqr2_hi#0 ← { fill( $200, 0) }
  to:@33
mulf_init: scope:[mulf_init]  from main::@1
  (word) mulf_init::sqr#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mulf_init::x_2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mulf_init::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) mulf_init::$0 ← (byte[$200]) mulf_sqr1_hi#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) mulf_init::sqr1_hi#0 ← (byte*~) mulf_init::$0
  (byte*~) mulf_init::$1 ← (byte[$200]) mulf_sqr1_lo#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) mulf_init::sqr1_lo#0 ← (byte*~) mulf_init::$1
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@2
  (byte) mulf_init::x_2#4 ← phi( mulf_init/(byte) mulf_init::x_2#0 mulf_init::@2/(byte) mulf_init::x_2#2 )
  (byte*) mulf_init::sqr1_hi#3 ← phi( mulf_init/(byte*) mulf_init::sqr1_hi#0 mulf_init::@2/(byte*) mulf_init::sqr1_hi#1 )
  (byte*) mulf_init::sqr1_lo#3 ← phi( mulf_init/(byte*) mulf_init::sqr1_lo#0 mulf_init::@2/(byte*) mulf_init::sqr1_lo#1 )
  (word) mulf_init::sqr#5 ← phi( mulf_init/(word) mulf_init::sqr#0 mulf_init::@2/(word) mulf_init::sqr#1 )
  (byte) mulf_init::c#2 ← phi( mulf_init/(byte) mulf_init::c#0 mulf_init::@2/(byte) mulf_init::c#3 )
  (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mulf_init::$3 ← (byte~) mulf_init::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf_init::$4 ← ! (bool~) mulf_init::$3
  if((bool~) mulf_init::$4) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1 mulf_init::@5
  (byte) mulf_init::c#3 ← phi( mulf_init::@1/(byte) mulf_init::c#1 mulf_init::@5/(byte) mulf_init::c#4 )
  (byte) mulf_init::x_2#2 ← phi( mulf_init::@1/(byte) mulf_init::x_2#4 mulf_init::@5/(byte) mulf_init::x_2#1 )
  (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#3 mulf_init::@5/(byte*) mulf_init::sqr1_hi#4 )
  (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#3 mulf_init::@5/(byte*) mulf_init::sqr1_lo#4 )
  (word) mulf_init::sqr#3 ← phi( mulf_init::@1/(word) mulf_init::sqr#5 mulf_init::@5/(word) mulf_init::sqr#2 )
  (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5
  (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6
  (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  (word~) mulf_init::$7 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  (word) mulf_init::sqr#1 ← (word~) mulf_init::$7
  (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  (byte*~) mulf_init::$8 ← (byte[$200]) mulf_sqr1_lo#0 + (word/signed word/dword/signed dword) $200
  (bool~) mulf_init::$9 ← (byte*) mulf_init::sqr1_lo#1 != (byte*~) mulf_init::$8
  if((bool~) mulf_init::$9) goto mulf_init::@1
  to:mulf_init::@6
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::c#4 ← phi( mulf_init::@1/(byte) mulf_init::c#1 )
  (byte*) mulf_init::sqr1_hi#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#3 )
  (byte*) mulf_init::sqr1_lo#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#3 )
  (word) mulf_init::sqr#4 ← phi( mulf_init::@1/(word) mulf_init::sqr#5 )
  (byte) mulf_init::x_2#3 ← phi( mulf_init::@1/(byte) mulf_init::x_2#4 )
  (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@2
mulf_init::@6: scope:[mulf_init]  from mulf_init::@2
  (signed byte/signed word/signed dword~) mulf_init::$10 ← - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) mulf_init::$11 ← ((byte)) (signed byte/signed word/signed dword~) mulf_init::$10
  (byte) mulf_init::x_255#0 ← (byte~) mulf_init::$11
  (byte) mulf_init::dir#0 ← (byte/word/signed word/dword/signed dword) $ff
  (byte*) mulf_init::sqr2_hi#0 ← (byte[$200]) mulf_sqr2_hi#0
  (byte*) mulf_init::sqr2_lo#0 ← (byte[$200]) mulf_sqr2_lo#0
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@4 mulf_init::@6
  (byte) mulf_init::dir#2 ← phi( mulf_init::@4/(byte) mulf_init::dir#3 mulf_init::@6/(byte) mulf_init::dir#0 )
  (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_hi#3 mulf_init::@6/(byte*) mulf_init::sqr2_hi#0 )
  (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_lo#1 mulf_init::@6/(byte*) mulf_init::sqr2_lo#0 )
  (byte) mulf_init::x_255#2 ← phi( mulf_init::@4/(byte) mulf_init::x_255#3 mulf_init::@6/(byte) mulf_init::x_255#0 )
  *((byte*) mulf_init::sqr2_lo#2) ← *((byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2)
  *((byte*) mulf_init::sqr2_hi#2) ← *((byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2)
  (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  (byte~) mulf_init::$12 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  (byte) mulf_init::x_255#1 ← (byte~) mulf_init::$12
  (bool~) mulf_init::$13 ← (byte) mulf_init::x_255#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf_init::$14 ← ! (bool~) mulf_init::$13
  if((bool~) mulf_init::$14) goto mulf_init::@4
  to:mulf_init::@7
mulf_init::@4: scope:[mulf_init]  from mulf_init::@3 mulf_init::@7
  (byte) mulf_init::dir#3 ← phi( mulf_init::@3/(byte) mulf_init::dir#2 mulf_init::@7/(byte) mulf_init::dir#1 )
  (byte*) mulf_init::sqr2_hi#3 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_hi#1 mulf_init::@7/(byte*) mulf_init::sqr2_hi#4 )
  (byte) mulf_init::x_255#3 ← phi( mulf_init::@3/(byte) mulf_init::x_255#1 mulf_init::@7/(byte) mulf_init::x_255#4 )
  (byte*) mulf_init::sqr2_lo#3 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_lo#2 mulf_init::@7/(byte*) mulf_init::sqr2_lo#4 )
  (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#3
  (byte*~) mulf_init::$15 ← (byte[$200]) mulf_sqr2_lo#0 + (word/signed word/dword/signed dword) $1ff
  (bool~) mulf_init::$16 ← (byte*) mulf_init::sqr2_lo#1 != (byte*~) mulf_init::$15
  if((bool~) mulf_init::$16) goto mulf_init::@3
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@3
  (byte*) mulf_init::sqr2_hi#4 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#4 ← phi( mulf_init::@3/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#4 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_lo#2 )
  (byte) mulf_init::dir#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mulf_init::@4
mulf_init::@8: scope:[mulf_init]  from mulf_init::@4
  (byte*~) mulf_init::$17 ← (byte[$200]) mulf_sqr2_lo#0 + (word/signed word/dword/signed dword) $1ff
  (byte*~) mulf_init::$18 ← (byte[$200]) mulf_sqr1_lo#0 + (word/signed word/dword/signed dword) $100
  *((byte*~) mulf_init::$17) ← *((byte*~) mulf_init::$18)
  (byte*~) mulf_init::$19 ← (byte[$200]) mulf_sqr2_hi#0 + (word/signed word/dword/signed dword) $1ff
  (byte*~) mulf_init::$20 ← (byte[$200]) mulf_sqr1_hi#0 + (word/signed word/dword/signed dword) $100
  *((byte*~) mulf_init::$19) ← *((byte*~) mulf_init::$20)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return
mulf16u: scope:[mulf16u]  from mul16u_compare::@14 mulf16s
  (word) mulf16u::b#2 ← phi( mul16u_compare::@14/(word) mulf16u::b#1 mulf16s/(word) mulf16u::b#0 )
  (word) mulf16u::a#2 ← phi( mul16u_compare::@14/(word) mulf16u::a#1 mulf16s/(word) mulf16u::a#0 )
  (word*) mulf16u::memA#0 ← ((word*)) (byte/word/signed word/dword/signed dword) $f8
  (word*) mulf16u::memB#0 ← ((word*)) (byte/word/signed word/dword/signed dword) $fa
  (dword*) mulf16u::memR#0 ← ((dword*)) (byte/word/signed word/dword/signed dword) $fc
  *((word*) mulf16u::memA#0) ← (word) mulf16u::a#2
  *((word*) mulf16u::memB#0) ← (word) mulf16u::b#2
  asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
  (dword) mulf16u::return#0 ← *((dword*) mulf16u::memR#0)
  to:mulf16u::@return
mulf16u::@return: scope:[mulf16u]  from mulf16u
  (dword) mulf16u::return#4 ← phi( mulf16u/(dword) mulf16u::return#0 )
  (dword) mulf16u::return#1 ← (dword) mulf16u::return#4
  return 
  to:@return
mulf16s: scope:[mulf16s]  from mul16s_compare::@14
  (signed word) mulf16s::b#1 ← phi( mul16s_compare::@14/(signed word) mulf16s::b#0 )
  (signed word) mulf16s::a#1 ← phi( mul16s_compare::@14/(signed word) mulf16s::a#0 )
  (word~) mulf16s::$0 ← ((word)) (signed word) mulf16s::a#1
  (word~) mulf16s::$1 ← ((word)) (signed word) mulf16s::b#1
  (word) mulf16u::a#0 ← (word~) mulf16s::$0
  (word) mulf16u::b#0 ← (word~) mulf16s::$1
  call mulf16u 
  (dword) mulf16u::return#2 ← (dword) mulf16u::return#1
  to:mulf16s::@6
mulf16s::@6: scope:[mulf16s]  from mulf16s
  (signed word) mulf16s::b#4 ← phi( mulf16s/(signed word) mulf16s::b#1 )
  (signed word) mulf16s::a#2 ← phi( mulf16s/(signed word) mulf16s::a#1 )
  (dword) mulf16u::return#5 ← phi( mulf16s/(dword) mulf16u::return#2 )
  (dword~) mulf16s::$2 ← (dword) mulf16u::return#5
  (dword) mulf16s::m#0 ← (dword~) mulf16s::$2
  (bool~) mulf16s::$3 ← (signed word) mulf16s::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf16s::$4 ← ! (bool~) mulf16s::$3
  if((bool~) mulf16s::$4) goto mulf16s::@1
  to:mulf16s::@3
mulf16s::@1: scope:[mulf16s]  from mulf16s::@3 mulf16s::@6
  (signed word) mulf16s::a#4 ← phi( mulf16s::@3/(signed word) mulf16s::a#5 mulf16s::@6/(signed word) mulf16s::a#2 )
  (dword) mulf16s::m#6 ← phi( mulf16s::@3/(dword) mulf16s::m#1 mulf16s::@6/(dword) mulf16s::m#0 )
  (signed word) mulf16s::b#2 ← phi( mulf16s::@3/(signed word) mulf16s::b#3 mulf16s::@6/(signed word) mulf16s::b#4 )
  (bool~) mulf16s::$9 ← (signed word) mulf16s::b#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mulf16s::$10 ← ! (bool~) mulf16s::$9
  if((bool~) mulf16s::$10) goto mulf16s::@2
  to:mulf16s::@4
mulf16s::@3: scope:[mulf16s]  from mulf16s::@6
  (signed word) mulf16s::a#5 ← phi( mulf16s::@6/(signed word) mulf16s::a#2 )
  (signed word) mulf16s::b#3 ← phi( mulf16s::@6/(signed word) mulf16s::b#4 )
  (dword) mulf16s::m#3 ← phi( mulf16s::@6/(dword) mulf16s::m#0 )
  (word~) mulf16s::$6 ← > (dword) mulf16s::m#3
  (word~) mulf16s::$7 ← ((word)) (signed word) mulf16s::b#3
  (word~) mulf16s::$8 ← (word~) mulf16s::$6 - (word~) mulf16s::$7
  (word~) mulf16s::$16 ← (word~) mulf16s::$8
  (dword) mulf16s::m#1 ← (dword) mulf16s::m#3 hi= (word~) mulf16s::$16
  to:mulf16s::@1
mulf16s::@2: scope:[mulf16s]  from mulf16s::@1 mulf16s::@4
  (dword) mulf16s::m#4 ← phi( mulf16s::@1/(dword) mulf16s::m#6 mulf16s::@4/(dword) mulf16s::m#2 )
  (signed dword~) mulf16s::$15 ← ((signed dword)) (dword) mulf16s::m#4
  (signed dword) mulf16s::return#0 ← (signed dword~) mulf16s::$15
  to:mulf16s::@return
mulf16s::@4: scope:[mulf16s]  from mulf16s::@1
  (signed word) mulf16s::a#3 ← phi( mulf16s::@1/(signed word) mulf16s::a#4 )
  (dword) mulf16s::m#5 ← phi( mulf16s::@1/(dword) mulf16s::m#6 )
  (word~) mulf16s::$12 ← > (dword) mulf16s::m#5
  (word~) mulf16s::$13 ← ((word)) (signed word) mulf16s::a#3
  (word~) mulf16s::$14 ← (word~) mulf16s::$12 - (word~) mulf16s::$13
  (word~) mulf16s::$17 ← (word~) mulf16s::$14
  (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17
  to:mulf16s::@2
mulf16s::@return: scope:[mulf16s]  from mulf16s::@2
  (signed dword) mulf16s::return#3 ← phi( mulf16s::@2/(signed dword) mulf16s::return#0 )
  (signed dword) mulf16s::return#1 ← (signed dword) mulf16s::return#3
  return 
  to:@return
@33: scope:[]  from @24
  (byte*) print_screen#6 ← phi( @24/(byte*) print_screen#7 )
  (byte*) print_char_cursor#157 ← phi( @24/(byte*) print_char_cursor#158 )
  (byte*) print_line_cursor#61 ← phi( @24/(byte*) print_line_cursor#62 )
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  to:@40
main: scope:[main]  from @40
  (byte*) print_char_cursor#137 ← phi( @40/(byte*) print_char_cursor#147 )
  (byte*) print_line_cursor#44 ← phi( @40/(byte*) print_line_cursor#54 )
  (byte*) print_screen#4 ← phi( @40/(byte*) print_screen#5 )
  (byte*) BGCOL#1 ← phi( @40/(byte*) BGCOL#4 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word/dword/signed dword) 5
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#33 ← phi( main/(byte*) BGCOL#1 )
  (byte*) print_char_cursor#87 ← phi( main/(byte*) print_char_cursor#23 )
  (byte*) print_line_cursor#26 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#87
  call mulf_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#31 ← phi( main::@1/(byte*) BGCOL#33 )
  (byte*) print_line_cursor#45 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#138 ← phi( main::@1/(byte*) print_char_cursor#24 )
  call mul16u_compare 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) BGCOL#32 ← phi( main::@2/(byte*) BGCOL#31 )
  (byte*) print_line_cursor#27 ← phi( main::@2/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#88 ← phi( main::@2/(byte*) print_char_cursor#30 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#88
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#27
  call mul16s_compare 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_line_cursor#28 ← phi( main::@3/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#89 ← phi( main::@3/(byte*) print_char_cursor#48 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#89
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#28
  to:main::@return
main::@return: scope:[main]  from main::@4
  (byte*) print_char_cursor#90 ← phi( main::@4/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#29 ← phi( main::@4/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#90
  return 
  to:@return
muls16u: scope:[muls16u]  from mul16u_compare::@2
  (word) muls16u::b#3 ← phi( mul16u_compare::@2/(word) muls16u::b#0 )
  (word) muls16u::a#1 ← phi( mul16u_compare::@2/(word) muls16u::a#0 )
  (dword) muls16u::m#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) muls16u::$0 ← (word) muls16u::a#1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) muls16u::$1 ← ! (bool~) muls16u::$0
  if((bool~) muls16u::$1) goto muls16u::@1
  to:muls16u::@3
muls16u::@1: scope:[muls16u]  from muls16u muls16u::@2
  (dword) muls16u::m#2 ← phi( muls16u/(dword) muls16u::m#0 muls16u::@2/(dword) muls16u::m#1 )
  (dword) muls16u::return#0 ← (dword) muls16u::m#2
  to:muls16u::@return
muls16u::@3: scope:[muls16u]  from muls16u
  (word) muls16u::a#3 ← phi( muls16u/(word) muls16u::a#1 )
  (word) muls16u::b#2 ← phi( muls16u/(word) muls16u::b#3 )
  (dword) muls16u::m#4 ← phi( muls16u/(dword) muls16u::m#0 )
  (word) muls16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:muls16u::@2
muls16u::@2: scope:[muls16u]  from muls16u::@2 muls16u::@3
  (word) muls16u::a#2 ← phi( muls16u::@2/(word) muls16u::a#2 muls16u::@3/(word) muls16u::a#3 )
  (word) muls16u::i#2 ← phi( muls16u::@2/(word) muls16u::i#1 muls16u::@3/(word) muls16u::i#0 )
  (word) muls16u::b#1 ← phi( muls16u::@2/(word) muls16u::b#1 muls16u::@3/(word) muls16u::b#2 )
  (dword) muls16u::m#3 ← phi( muls16u::@2/(dword) muls16u::m#1 muls16u::@3/(dword) muls16u::m#4 )
  (dword~) muls16u::$2 ← (dword) muls16u::m#3 + (word) muls16u::b#1
  (dword) muls16u::m#1 ← (dword~) muls16u::$2
  (word) muls16u::i#1 ← ++ (word) muls16u::i#2
  (bool~) muls16u::$3 ← (word) muls16u::i#1 != (word) muls16u::a#2
  if((bool~) muls16u::$3) goto muls16u::@2
  to:muls16u::@1
muls16u::@return: scope:[muls16u]  from muls16u::@1
  (dword) muls16u::return#3 ← phi( muls16u::@1/(dword) muls16u::return#0 )
  (dword) muls16u::return#1 ← (dword) muls16u::return#3
  return 
  to:@return
muls16s: scope:[muls16s]  from mul16s_compare::@2
  (signed word) muls16s::b#5 ← phi( mul16s_compare::@2/(signed word) muls16s::b#0 )
  (signed word) muls16s::a#1 ← phi( mul16s_compare::@2/(signed word) muls16s::a#0 )
  (signed dword) muls16s::m#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) muls16s::$0 ← (signed word) muls16s::a#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) muls16s::$0) goto muls16s::@1
  to:muls16s::@6
muls16s::@1: scope:[muls16s]  from muls16s
  (signed word) muls16s::a#6 ← phi( muls16s/(signed word) muls16s::a#1 )
  (signed word) muls16s::b#4 ← phi( muls16s/(signed word) muls16s::b#5 )
  (signed dword) muls16s::m#8 ← phi( muls16s/(signed dword) muls16s::m#0 )
  (signed word) muls16s::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:muls16s::@5
muls16s::@6: scope:[muls16s]  from muls16s
  (signed word) muls16s::b#6 ← phi( muls16s/(signed word) muls16s::b#5 )
  (signed dword) muls16s::m#9 ← phi( muls16s/(signed dword) muls16s::m#0 )
  (signed word) muls16s::a#2 ← phi( muls16s/(signed word) muls16s::a#1 )
  (bool~) muls16s::$1 ← (signed word) muls16s::a#2 > (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) muls16s::$2 ← ! (bool~) muls16s::$1
  if((bool~) muls16s::$2) goto muls16s::@2
  to:muls16s::@7
muls16s::@2: scope:[muls16s]  from muls16s::@6
  (signed dword) muls16s::m#7 ← phi( muls16s::@6/(signed dword) muls16s::m#9 )
  to:muls16s::@4
muls16s::@7: scope:[muls16s]  from muls16s::@6
  (signed word) muls16s::a#5 ← phi( muls16s::@6/(signed word) muls16s::a#2 )
  (signed word) muls16s::b#3 ← phi( muls16s::@6/(signed word) muls16s::b#6 )
  (signed dword) muls16s::m#6 ← phi( muls16s::@6/(signed dword) muls16s::m#9 )
  (signed word) muls16s::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:muls16s::@3
muls16s::@3: scope:[muls16s]  from muls16s::@3 muls16s::@7
  (signed word) muls16s::a#3 ← phi( muls16s::@3/(signed word) muls16s::a#3 muls16s::@7/(signed word) muls16s::a#5 )
  (signed word) muls16s::j#2 ← phi( muls16s::@3/(signed word) muls16s::j#1 muls16s::@7/(signed word) muls16s::j#0 )
  (signed word) muls16s::b#1 ← phi( muls16s::@3/(signed word) muls16s::b#1 muls16s::@7/(signed word) muls16s::b#3 )
  (signed dword) muls16s::m#3 ← phi( muls16s::@3/(signed dword) muls16s::m#1 muls16s::@7/(signed dword) muls16s::m#6 )
  (signed dword~) muls16s::$3 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#1
  (signed dword) muls16s::m#1 ← (signed dword~) muls16s::$3
  (signed word) muls16s::j#1 ← ++ (signed word) muls16s::j#2
  (bool~) muls16s::$4 ← (signed word) muls16s::j#1 != (signed word) muls16s::a#3
  if((bool~) muls16s::$4) goto muls16s::@3
  to:muls16s::@4
muls16s::@4: scope:[muls16s]  from muls16s::@2 muls16s::@3 muls16s::@5
  (signed dword) muls16s::m#4 ← phi( muls16s::@2/(signed dword) muls16s::m#7 muls16s::@3/(signed dword) muls16s::m#1 muls16s::@5/(signed dword) muls16s::m#2 )
  (signed dword) muls16s::return#0 ← (signed dword) muls16s::m#4
  to:muls16s::@return
muls16s::@5: scope:[muls16s]  from muls16s::@1 muls16s::@5
  (signed word) muls16s::a#4 ← phi( muls16s::@1/(signed word) muls16s::a#6 muls16s::@5/(signed word) muls16s::a#4 )
  (signed word) muls16s::i#2 ← phi( muls16s::@1/(signed word) muls16s::i#0 muls16s::@5/(signed word) muls16s::i#1 )
  (signed word) muls16s::b#2 ← phi( muls16s::@1/(signed word) muls16s::b#4 muls16s::@5/(signed word) muls16s::b#2 )
  (signed dword) muls16s::m#5 ← phi( muls16s::@1/(signed dword) muls16s::m#8 muls16s::@5/(signed dword) muls16s::m#2 )
  (signed dword~) muls16s::$5 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#2
  (signed dword) muls16s::m#2 ← (signed dword~) muls16s::$5
  (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2
  (bool~) muls16s::$6 ← (signed word) muls16s::i#1 != (signed word) muls16s::a#4
  if((bool~) muls16s::$6) goto muls16s::@5
  to:muls16s::@4
muls16s::@return: scope:[muls16s]  from muls16s::@4
  (signed dword) muls16s::return#3 ← phi( muls16s::@4/(signed dword) muls16s::return#0 )
  (signed dword) muls16s::return#1 ← (signed dword) muls16s::return#3
  return 
  to:@return
mul16u_compare: scope:[mul16u_compare]  from main::@2
  (byte*) print_line_cursor#98 ← phi( main::@2/(byte*) print_line_cursor#45 )
  (byte*) BGCOL#27 ← phi( main::@2/(byte*) BGCOL#31 )
  (byte*) print_char_cursor#151 ← phi( main::@2/(byte*) print_char_cursor#138 )
  (word) mul16u_compare::a#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) mul16u_compare::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) mul16u_compare::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16u_compare::@1
mul16u_compare::@1: scope:[mul16u_compare]  from mul16u_compare mul16u_compare::@10
  (byte*) print_line_cursor#94 ← phi( mul16u_compare/(byte*) print_line_cursor#98 mul16u_compare::@10/(byte*) print_line_cursor#56 )
  (byte) mul16u_compare::i#13 ← phi( mul16u_compare/(byte) mul16u_compare::i#0 mul16u_compare::@10/(byte) mul16u_compare::i#1 )
  (byte*) BGCOL#25 ← phi( mul16u_compare/(byte*) BGCOL#27 mul16u_compare::@10/(byte*) BGCOL#28 )
  (word) mul16u_compare::b#9 ← phi( mul16u_compare/(word) mul16u_compare::b#0 mul16u_compare::@10/(word) mul16u_compare::b#12 )
  (word) mul16u_compare::a#9 ← phi( mul16u_compare/(word) mul16u_compare::a#0 mul16u_compare::@10/(word) mul16u_compare::a#12 )
  (byte*) print_char_cursor#139 ← phi( mul16u_compare/(byte*) print_char_cursor#151 mul16u_compare::@10/(byte*) print_char_cursor#152 )
  (byte*) print_str::str#1 ← (const string) mul16u_compare::str
  call print_str 
  to:mul16u_compare::@12
mul16u_compare::@12: scope:[mul16u_compare]  from mul16u_compare::@1
  (byte*) print_line_cursor#90 ← phi( mul16u_compare::@1/(byte*) print_line_cursor#94 )
  (byte) mul16u_compare::i#12 ← phi( mul16u_compare::@1/(byte) mul16u_compare::i#13 )
  (byte*) BGCOL#21 ← phi( mul16u_compare::@1/(byte*) BGCOL#25 )
  (word) mul16u_compare::b#6 ← phi( mul16u_compare::@1/(word) mul16u_compare::b#9 )
  (word) mul16u_compare::a#6 ← phi( mul16u_compare::@1/(word) mul16u_compare::a#9 )
  (byte*) print_char_cursor#91 ← phi( mul16u_compare::@1/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#91
  (byte) mul16u_compare::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16u_compare::@2
mul16u_compare::@2: scope:[mul16u_compare]  from mul16u_compare::@12 mul16u_compare::@5
  (byte*) print_line_cursor#86 ← phi( mul16u_compare::@12/(byte*) print_line_cursor#90 mul16u_compare::@5/(byte*) print_line_cursor#65 )
  (byte*) print_char_cursor#174 ← phi( mul16u_compare::@12/(byte*) print_char_cursor#28 mul16u_compare::@5/(byte*) print_char_cursor#161 )
  (byte) mul16u_compare::i#11 ← phi( mul16u_compare::@12/(byte) mul16u_compare::i#12 mul16u_compare::@5/(byte) mul16u_compare::i#3 )
  (byte*) BGCOL#19 ← phi( mul16u_compare::@12/(byte*) BGCOL#21 mul16u_compare::@5/(byte*) BGCOL#22 )
  (byte) mul16u_compare::j#10 ← phi( mul16u_compare::@12/(byte) mul16u_compare::j#0 mul16u_compare::@5/(byte) mul16u_compare::j#1 )
  (word) mul16u_compare::b#2 ← phi( mul16u_compare::@12/(word) mul16u_compare::b#6 mul16u_compare::@5/(word) mul16u_compare::b#7 )
  (word) mul16u_compare::a#2 ← phi( mul16u_compare::@12/(word) mul16u_compare::a#6 mul16u_compare::@5/(word) mul16u_compare::a#7 )
  (word/signed dword/dword~) mul16u_compare::$1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b
  (word) mul16u_compare::a#1 ← (word/signed dword/dword~) mul16u_compare::$1
  (word/signed dword/dword~) mul16u_compare::$2 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd
  (word) mul16u_compare::b#1 ← (word/signed dword/dword~) mul16u_compare::$2
  (word) muls16u::a#0 ← (word) mul16u_compare::a#1
  (word) muls16u::b#0 ← (word) mul16u_compare::b#1
  call muls16u 
  (dword) muls16u::return#2 ← (dword) muls16u::return#1
  to:mul16u_compare::@13
mul16u_compare::@13: scope:[mul16u_compare]  from mul16u_compare::@2
  (byte*) print_line_cursor#82 ← phi( mul16u_compare::@2/(byte*) print_line_cursor#86 )
  (byte*) print_char_cursor#172 ← phi( mul16u_compare::@2/(byte*) print_char_cursor#174 )
  (byte) mul16u_compare::i#10 ← phi( mul16u_compare::@2/(byte) mul16u_compare::i#11 )
  (byte*) BGCOL#17 ← phi( mul16u_compare::@2/(byte*) BGCOL#19 )
  (byte) mul16u_compare::j#9 ← phi( mul16u_compare::@2/(byte) mul16u_compare::j#10 )
  (word) mul16u_compare::b#3 ← phi( mul16u_compare::@2/(word) mul16u_compare::b#1 )
  (word) mul16u_compare::a#3 ← phi( mul16u_compare::@2/(word) mul16u_compare::a#1 )
  (dword) muls16u::return#4 ← phi( mul16u_compare::@2/(dword) muls16u::return#2 )
  (dword~) mul16u_compare::$3 ← (dword) muls16u::return#4
  (dword) mul16u_compare::ms#0 ← (dword~) mul16u_compare::$3
  (word) mul16u::a#2 ← (word) mul16u_compare::a#3
  (word) mul16u::b#1 ← (word) mul16u_compare::b#3
  call mul16u 
  (dword) mul16u::return#3 ← (dword) mul16u::return#1
  to:mul16u_compare::@14
mul16u_compare::@14: scope:[mul16u_compare]  from mul16u_compare::@13
  (byte*) print_line_cursor#78 ← phi( mul16u_compare::@13/(byte*) print_line_cursor#82 )
  (byte*) print_char_cursor#170 ← phi( mul16u_compare::@13/(byte*) print_char_cursor#172 )
  (byte) mul16u_compare::i#9 ← phi( mul16u_compare::@13/(byte) mul16u_compare::i#10 )
  (byte*) BGCOL#15 ← phi( mul16u_compare::@13/(byte*) BGCOL#17 )
  (byte) mul16u_compare::j#8 ← phi( mul16u_compare::@13/(byte) mul16u_compare::j#9 )
  (dword) mul16u_compare::ms#4 ← phi( mul16u_compare::@13/(dword) mul16u_compare::ms#0 )
  (word) mul16u_compare::b#4 ← phi( mul16u_compare::@13/(word) mul16u_compare::b#3 )
  (word) mul16u_compare::a#4 ← phi( mul16u_compare::@13/(word) mul16u_compare::a#3 )
  (dword) mul16u::return#6 ← phi( mul16u_compare::@13/(dword) mul16u::return#3 )
  (dword~) mul16u_compare::$4 ← (dword) mul16u::return#6
  (dword) mul16u_compare::mn#0 ← (dword~) mul16u_compare::$4
  (word) mulf16u::a#1 ← (word) mul16u_compare::a#4
  (word) mulf16u::b#1 ← (word) mul16u_compare::b#4
  call mulf16u 
  (dword) mulf16u::return#3 ← (dword) mulf16u::return#1
  to:mul16u_compare::@15
mul16u_compare::@15: scope:[mul16u_compare]  from mul16u_compare::@14
  (byte*) print_line_cursor#72 ← phi( mul16u_compare::@14/(byte*) print_line_cursor#78 )
  (byte*) print_char_cursor#166 ← phi( mul16u_compare::@14/(byte*) print_char_cursor#170 )
  (byte) mul16u_compare::i#7 ← phi( mul16u_compare::@14/(byte) mul16u_compare::i#9 )
  (word) mul16u_compare::b#13 ← phi( mul16u_compare::@14/(word) mul16u_compare::b#4 )
  (word) mul16u_compare::a#13 ← phi( mul16u_compare::@14/(word) mul16u_compare::a#4 )
  (byte*) BGCOL#11 ← phi( mul16u_compare::@14/(byte*) BGCOL#15 )
  (byte) mul16u_compare::j#6 ← phi( mul16u_compare::@14/(byte) mul16u_compare::j#8 )
  (dword) mul16u_compare::mn#3 ← phi( mul16u_compare::@14/(dword) mul16u_compare::mn#0 )
  (dword) mul16u_compare::ms#1 ← phi( mul16u_compare::@14/(dword) mul16u_compare::ms#4 )
  (dword) mulf16u::return#6 ← phi( mul16u_compare::@14/(dword) mulf16u::return#3 )
  (dword~) mul16u_compare::$5 ← (dword) mulf16u::return#6
  (dword) mul16u_compare::mf#0 ← (dword~) mul16u_compare::$5
  (byte) mul16u_compare::ok#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul16u_compare::$6 ← (dword) mul16u_compare::ms#1 != (dword) mul16u_compare::mf#0
  (bool~) mul16u_compare::$7 ← ! (bool~) mul16u_compare::$6
  if((bool~) mul16u_compare::$7) goto mul16u_compare::@3
  to:mul16u_compare::@6
mul16u_compare::@3: scope:[mul16u_compare]  from mul16u_compare::@15 mul16u_compare::@6
  (byte*) print_line_cursor#63 ← phi( mul16u_compare::@15/(byte*) print_line_cursor#72 mul16u_compare::@6/(byte*) print_line_cursor#73 )
  (byte*) print_char_cursor#159 ← phi( mul16u_compare::@15/(byte*) print_char_cursor#166 mul16u_compare::@6/(byte*) print_char_cursor#167 )
  (byte) mul16u_compare::i#5 ← phi( mul16u_compare::@15/(byte) mul16u_compare::i#7 mul16u_compare::@6/(byte) mul16u_compare::i#8 )
  (dword) mul16u_compare::mf#3 ← phi( mul16u_compare::@15/(dword) mul16u_compare::mf#0 mul16u_compare::@6/(dword) mul16u_compare::mf#5 )
  (word) mul16u_compare::b#10 ← phi( mul16u_compare::@15/(word) mul16u_compare::b#13 mul16u_compare::@6/(word) mul16u_compare::b#14 )
  (word) mul16u_compare::a#10 ← phi( mul16u_compare::@15/(word) mul16u_compare::a#13 mul16u_compare::@6/(word) mul16u_compare::a#14 )
  (byte*) BGCOL#7 ← phi( mul16u_compare::@15/(byte*) BGCOL#11 mul16u_compare::@6/(byte*) BGCOL#12 )
  (byte) mul16u_compare::j#4 ← phi( mul16u_compare::@15/(byte) mul16u_compare::j#6 mul16u_compare::@6/(byte) mul16u_compare::j#7 )
  (byte) mul16u_compare::ok#4 ← phi( mul16u_compare::@15/(byte) mul16u_compare::ok#0 mul16u_compare::@6/(byte) mul16u_compare::ok#1 )
  (dword) mul16u_compare::mn#1 ← phi( mul16u_compare::@15/(dword) mul16u_compare::mn#3 mul16u_compare::@6/(dword) mul16u_compare::mn#4 )
  (dword) mul16u_compare::ms#2 ← phi( mul16u_compare::@15/(dword) mul16u_compare::ms#1 mul16u_compare::@6/(dword) mul16u_compare::ms#5 )
  (bool~) mul16u_compare::$8 ← (dword) mul16u_compare::ms#2 != (dword) mul16u_compare::mn#1
  (bool~) mul16u_compare::$9 ← ! (bool~) mul16u_compare::$8
  if((bool~) mul16u_compare::$9) goto mul16u_compare::@4
  to:mul16u_compare::@7
mul16u_compare::@6: scope:[mul16u_compare]  from mul16u_compare::@15
  (byte*) print_line_cursor#73 ← phi( mul16u_compare::@15/(byte*) print_line_cursor#72 )
  (byte*) print_char_cursor#167 ← phi( mul16u_compare::@15/(byte*) print_char_cursor#166 )
  (byte) mul16u_compare::i#8 ← phi( mul16u_compare::@15/(byte) mul16u_compare::i#7 )
  (dword) mul16u_compare::mf#5 ← phi( mul16u_compare::@15/(dword) mul16u_compare::mf#0 )
  (word) mul16u_compare::b#14 ← phi( mul16u_compare::@15/(word) mul16u_compare::b#13 )
  (word) mul16u_compare::a#14 ← phi( mul16u_compare::@15/(word) mul16u_compare::a#13 )
  (byte*) BGCOL#12 ← phi( mul16u_compare::@15/(byte*) BGCOL#11 )
  (byte) mul16u_compare::j#7 ← phi( mul16u_compare::@15/(byte) mul16u_compare::j#6 )
  (dword) mul16u_compare::mn#4 ← phi( mul16u_compare::@15/(dword) mul16u_compare::mn#3 )
  (dword) mul16u_compare::ms#5 ← phi( mul16u_compare::@15/(dword) mul16u_compare::ms#1 )
  (byte) mul16u_compare::ok#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16u_compare::@3
mul16u_compare::@4: scope:[mul16u_compare]  from mul16u_compare::@3 mul16u_compare::@7
  (byte*) print_line_cursor#55 ← phi( mul16u_compare::@3/(byte*) print_line_cursor#63 mul16u_compare::@7/(byte*) print_line_cursor#64 )
  (byte*) print_char_cursor#153 ← phi( mul16u_compare::@3/(byte*) print_char_cursor#159 mul16u_compare::@7/(byte*) print_char_cursor#160 )
  (byte) mul16u_compare::i#4 ← phi( mul16u_compare::@3/(byte) mul16u_compare::i#5 mul16u_compare::@7/(byte) mul16u_compare::i#6 )
  (dword) mul16u_compare::mf#2 ← phi( mul16u_compare::@3/(dword) mul16u_compare::mf#3 mul16u_compare::@7/(dword) mul16u_compare::mf#4 )
  (dword) mul16u_compare::mn#5 ← phi( mul16u_compare::@3/(dword) mul16u_compare::mn#1 mul16u_compare::@7/(dword) mul16u_compare::mn#6 )
  (dword) mul16u_compare::ms#6 ← phi( mul16u_compare::@3/(dword) mul16u_compare::ms#2 mul16u_compare::@7/(dword) mul16u_compare::ms#7 )
  (word) mul16u_compare::b#8 ← phi( mul16u_compare::@3/(word) mul16u_compare::b#10 mul16u_compare::@7/(word) mul16u_compare::b#11 )
  (word) mul16u_compare::a#8 ← phi( mul16u_compare::@3/(word) mul16u_compare::a#10 mul16u_compare::@7/(word) mul16u_compare::a#11 )
  (byte*) BGCOL#5 ← phi( mul16u_compare::@3/(byte*) BGCOL#7 mul16u_compare::@7/(byte*) BGCOL#8 )
  (byte) mul16u_compare::j#3 ← phi( mul16u_compare::@3/(byte) mul16u_compare::j#4 mul16u_compare::@7/(byte) mul16u_compare::j#5 )
  (byte) mul16u_compare::ok#3 ← phi( mul16u_compare::@3/(byte) mul16u_compare::ok#4 mul16u_compare::@7/(byte) mul16u_compare::ok#2 )
  (bool~) mul16u_compare::$10 ← (byte) mul16u_compare::ok#3 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16u_compare::$11 ← ! (bool~) mul16u_compare::$10
  if((bool~) mul16u_compare::$11) goto mul16u_compare::@5
  to:mul16u_compare::@8
mul16u_compare::@7: scope:[mul16u_compare]  from mul16u_compare::@3
  (byte*) print_line_cursor#64 ← phi( mul16u_compare::@3/(byte*) print_line_cursor#63 )
  (byte*) print_char_cursor#160 ← phi( mul16u_compare::@3/(byte*) print_char_cursor#159 )
  (byte) mul16u_compare::i#6 ← phi( mul16u_compare::@3/(byte) mul16u_compare::i#5 )
  (dword) mul16u_compare::mf#4 ← phi( mul16u_compare::@3/(dword) mul16u_compare::mf#3 )
  (dword) mul16u_compare::mn#6 ← phi( mul16u_compare::@3/(dword) mul16u_compare::mn#1 )
  (dword) mul16u_compare::ms#7 ← phi( mul16u_compare::@3/(dword) mul16u_compare::ms#2 )
  (word) mul16u_compare::b#11 ← phi( mul16u_compare::@3/(word) mul16u_compare::b#10 )
  (word) mul16u_compare::a#11 ← phi( mul16u_compare::@3/(word) mul16u_compare::a#10 )
  (byte*) BGCOL#8 ← phi( mul16u_compare::@3/(byte*) BGCOL#7 )
  (byte) mul16u_compare::j#5 ← phi( mul16u_compare::@3/(byte) mul16u_compare::j#4 )
  (byte) mul16u_compare::ok#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16u_compare::@4
mul16u_compare::@5: scope:[mul16u_compare]  from mul16u_compare::@4
  (byte*) BGCOL#22 ← phi( mul16u_compare::@4/(byte*) BGCOL#5 )
  (byte*) print_line_cursor#65 ← phi( mul16u_compare::@4/(byte*) print_line_cursor#55 )
  (byte*) print_char_cursor#161 ← phi( mul16u_compare::@4/(byte*) print_char_cursor#153 )
  (byte) mul16u_compare::i#3 ← phi( mul16u_compare::@4/(byte) mul16u_compare::i#4 )
  (word) mul16u_compare::b#7 ← phi( mul16u_compare::@4/(word) mul16u_compare::b#8 )
  (word) mul16u_compare::a#7 ← phi( mul16u_compare::@4/(word) mul16u_compare::a#8 )
  (byte) mul16u_compare::j#2 ← phi( mul16u_compare::@4/(byte) mul16u_compare::j#3 )
  (byte) mul16u_compare::j#1 ← (byte) mul16u_compare::j#2 + rangenext(0,$f)
  (bool~) mul16u_compare::$13 ← (byte) mul16u_compare::j#1 != rangelast(0,$f)
  if((bool~) mul16u_compare::$13) goto mul16u_compare::@2
  to:mul16u_compare::@10
mul16u_compare::@8: scope:[mul16u_compare]  from mul16u_compare::@4
  (byte*) print_line_cursor#46 ← phi( mul16u_compare::@4/(byte*) print_line_cursor#55 )
  (byte*) print_char_cursor#140 ← phi( mul16u_compare::@4/(byte*) print_char_cursor#153 )
  (dword) mul16u_compare::mf#1 ← phi( mul16u_compare::@4/(dword) mul16u_compare::mf#2 )
  (dword) mul16u_compare::mn#2 ← phi( mul16u_compare::@4/(dword) mul16u_compare::mn#5 )
  (dword) mul16u_compare::ms#3 ← phi( mul16u_compare::@4/(dword) mul16u_compare::ms#6 )
  (word) mul16u_compare::b#5 ← phi( mul16u_compare::@4/(word) mul16u_compare::b#8 )
  (word) mul16u_compare::a#5 ← phi( mul16u_compare::@4/(word) mul16u_compare::a#8 )
  (byte*) BGCOL#2 ← phi( mul16u_compare::@4/(byte*) BGCOL#5 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (word) mul16u_error::a#0 ← (word) mul16u_compare::a#5
  (word) mul16u_error::b#0 ← (word) mul16u_compare::b#5
  (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#3
  (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#2
  (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#1
  call mul16u_error 
  to:mul16u_compare::@16
mul16u_compare::@16: scope:[mul16u_compare]  from mul16u_compare::@8
  (byte*) print_line_cursor#30 ← phi( mul16u_compare::@8/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#92 ← phi( mul16u_compare::@8/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#92
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#30
  to:mul16u_compare::@return
mul16u_compare::@return: scope:[mul16u_compare]  from mul16u_compare::@16 mul16u_compare::@19
  (byte*) print_line_cursor#31 ← phi( mul16u_compare::@16/(byte*) print_line_cursor#9 mul16u_compare::@19/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#93 ← phi( mul16u_compare::@16/(byte*) print_char_cursor#29 mul16u_compare::@19/(byte*) print_char_cursor#33 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#93
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#31
  return 
  to:@return
mul16u_compare::@10: scope:[mul16u_compare]  from mul16u_compare::@5
  (byte*) BGCOL#28 ← phi( mul16u_compare::@5/(byte*) BGCOL#22 )
  (word) mul16u_compare::b#12 ← phi( mul16u_compare::@5/(word) mul16u_compare::b#7 )
  (word) mul16u_compare::a#12 ← phi( mul16u_compare::@5/(word) mul16u_compare::a#7 )
  (byte*) print_line_cursor#56 ← phi( mul16u_compare::@5/(byte*) print_line_cursor#65 )
  (byte*) print_char_cursor#152 ← phi( mul16u_compare::@5/(byte*) print_char_cursor#161 )
  (byte) mul16u_compare::i#2 ← phi( mul16u_compare::@5/(byte) mul16u_compare::i#3 )
  (byte) mul16u_compare::i#1 ← (byte) mul16u_compare::i#2 + rangenext(0,$f)
  (bool~) mul16u_compare::$14 ← (byte) mul16u_compare::i#1 != rangelast(0,$f)
  if((bool~) mul16u_compare::$14) goto mul16u_compare::@1
  to:mul16u_compare::@11
mul16u_compare::@11: scope:[mul16u_compare]  from mul16u_compare::@10
  (byte*) print_char_cursor#141 ← phi( mul16u_compare::@10/(byte*) print_char_cursor#152 )
  (byte*) print_line_cursor#47 ← phi( mul16u_compare::@10/(byte*) print_line_cursor#56 )
  call print_ln 
  to:mul16u_compare::@17
mul16u_compare::@17: scope:[mul16u_compare]  from mul16u_compare::@11
  (byte*) print_char_cursor#94 ← phi( mul16u_compare::@11/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#32 ← phi( mul16u_compare::@11/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#94
  (byte*) print_str::str#2 ← (const string) mul16u_compare::str1
  call print_str 
  to:mul16u_compare::@18
mul16u_compare::@18: scope:[mul16u_compare]  from mul16u_compare::@17
  (byte*) print_line_cursor#48 ← phi( mul16u_compare::@17/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#95 ← phi( mul16u_compare::@17/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#95
  call print_ln 
  to:mul16u_compare::@19
mul16u_compare::@19: scope:[mul16u_compare]  from mul16u_compare::@18
  (byte*) print_char_cursor#96 ← phi( mul16u_compare::@18/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#33 ← phi( mul16u_compare::@18/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#33
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#96
  to:mul16u_compare::@return
mul16u_error: scope:[mul16u_error]  from mul16u_compare::@8
  (byte*) print_line_cursor#102 ← phi( mul16u_compare::@8/(byte*) print_line_cursor#46 )
  (dword) mul16u_error::mf#10 ← phi( mul16u_compare::@8/(dword) mul16u_error::mf#0 )
  (dword) mul16u_error::mn#8 ← phi( mul16u_compare::@8/(dword) mul16u_error::mn#0 )
  (dword) mul16u_error::ms#6 ← phi( mul16u_compare::@8/(dword) mul16u_error::ms#0 )
  (word) mul16u_error::b#4 ← phi( mul16u_compare::@8/(word) mul16u_error::b#0 )
  (word) mul16u_error::a#2 ← phi( mul16u_compare::@8/(word) mul16u_error::a#0 )
  (byte*) print_char_cursor#142 ← phi( mul16u_compare::@8/(byte*) print_char_cursor#140 )
  (byte*) print_str::str#3 ← (const string) mul16u_error::str
  call print_str 
  to:mul16u_error::@1
mul16u_error::@1: scope:[mul16u_error]  from mul16u_error
  (byte*) print_line_cursor#99 ← phi( mul16u_error/(byte*) print_line_cursor#102 )
  (dword) mul16u_error::mf#9 ← phi( mul16u_error/(dword) mul16u_error::mf#10 )
  (dword) mul16u_error::mn#7 ← phi( mul16u_error/(dword) mul16u_error::mn#8 )
  (dword) mul16u_error::ms#5 ← phi( mul16u_error/(dword) mul16u_error::ms#6 )
  (word) mul16u_error::b#3 ← phi( mul16u_error/(word) mul16u_error::b#4 )
  (word) mul16u_error::a#1 ← phi( mul16u_error/(word) mul16u_error::a#2 )
  (byte*) print_char_cursor#97 ← phi( mul16u_error/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#97
  (word) print_word::w#3 ← (word) mul16u_error::a#1
  call print_word 
  to:mul16u_error::@2
mul16u_error::@2: scope:[mul16u_error]  from mul16u_error::@1
  (byte*) print_line_cursor#95 ← phi( mul16u_error::@1/(byte*) print_line_cursor#99 )
  (dword) mul16u_error::mf#8 ← phi( mul16u_error::@1/(dword) mul16u_error::mf#9 )
  (dword) mul16u_error::mn#6 ← phi( mul16u_error::@1/(dword) mul16u_error::mn#7 )
  (dword) mul16u_error::ms#4 ← phi( mul16u_error::@1/(dword) mul16u_error::ms#5 )
  (word) mul16u_error::b#2 ← phi( mul16u_error::@1/(word) mul16u_error::b#3 )
  (byte*) print_char_cursor#98 ← phi( mul16u_error::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#98
  (byte*) print_str::str#4 ← (const string) mul16u_error::str1
  call print_str 
  to:mul16u_error::@3
mul16u_error::@3: scope:[mul16u_error]  from mul16u_error::@2
  (byte*) print_line_cursor#91 ← phi( mul16u_error::@2/(byte*) print_line_cursor#95 )
  (dword) mul16u_error::mf#7 ← phi( mul16u_error::@2/(dword) mul16u_error::mf#8 )
  (dword) mul16u_error::mn#5 ← phi( mul16u_error::@2/(dword) mul16u_error::mn#6 )
  (dword) mul16u_error::ms#3 ← phi( mul16u_error::@2/(dword) mul16u_error::ms#4 )
  (word) mul16u_error::b#1 ← phi( mul16u_error::@2/(word) mul16u_error::b#2 )
  (byte*) print_char_cursor#99 ← phi( mul16u_error::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#99
  (word) print_word::w#4 ← (word) mul16u_error::b#1
  call print_word 
  to:mul16u_error::@4
mul16u_error::@4: scope:[mul16u_error]  from mul16u_error::@3
  (byte*) print_line_cursor#87 ← phi( mul16u_error::@3/(byte*) print_line_cursor#91 )
  (dword) mul16u_error::mf#6 ← phi( mul16u_error::@3/(dword) mul16u_error::mf#7 )
  (dword) mul16u_error::mn#4 ← phi( mul16u_error::@3/(dword) mul16u_error::mn#5 )
  (dword) mul16u_error::ms#2 ← phi( mul16u_error::@3/(dword) mul16u_error::ms#3 )
  (byte*) print_char_cursor#100 ← phi( mul16u_error::@3/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#100
  (byte*) print_str::str#5 ← (const string) mul16u_error::str2
  call print_str 
  to:mul16u_error::@5
mul16u_error::@5: scope:[mul16u_error]  from mul16u_error::@4
  (byte*) print_line_cursor#83 ← phi( mul16u_error::@4/(byte*) print_line_cursor#87 )
  (dword) mul16u_error::mf#5 ← phi( mul16u_error::@4/(dword) mul16u_error::mf#6 )
  (dword) mul16u_error::mn#3 ← phi( mul16u_error::@4/(dword) mul16u_error::mn#4 )
  (dword) mul16u_error::ms#1 ← phi( mul16u_error::@4/(dword) mul16u_error::ms#2 )
  (byte*) print_char_cursor#101 ← phi( mul16u_error::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#101
  (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#1
  call print_dword 
  to:mul16u_error::@6
mul16u_error::@6: scope:[mul16u_error]  from mul16u_error::@5
  (byte*) print_line_cursor#79 ← phi( mul16u_error::@5/(byte*) print_line_cursor#83 )
  (dword) mul16u_error::mf#4 ← phi( mul16u_error::@5/(dword) mul16u_error::mf#5 )
  (dword) mul16u_error::mn#2 ← phi( mul16u_error::@5/(dword) mul16u_error::mn#3 )
  (byte*) print_char_cursor#102 ← phi( mul16u_error::@5/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#102
  (byte*) print_str::str#6 ← (const string) mul16u_error::str3
  call print_str 
  to:mul16u_error::@7
mul16u_error::@7: scope:[mul16u_error]  from mul16u_error::@6
  (byte*) print_line_cursor#74 ← phi( mul16u_error::@6/(byte*) print_line_cursor#79 )
  (dword) mul16u_error::mf#3 ← phi( mul16u_error::@6/(dword) mul16u_error::mf#4 )
  (dword) mul16u_error::mn#1 ← phi( mul16u_error::@6/(dword) mul16u_error::mn#2 )
  (byte*) print_char_cursor#103 ← phi( mul16u_error::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#103
  (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#1
  call print_dword 
  to:mul16u_error::@8
mul16u_error::@8: scope:[mul16u_error]  from mul16u_error::@7
  (byte*) print_line_cursor#66 ← phi( mul16u_error::@7/(byte*) print_line_cursor#74 )
  (dword) mul16u_error::mf#2 ← phi( mul16u_error::@7/(dword) mul16u_error::mf#3 )
  (byte*) print_char_cursor#104 ← phi( mul16u_error::@7/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#104
  (byte*) print_str::str#7 ← (const string) mul16u_error::str4
  call print_str 
  to:mul16u_error::@9
mul16u_error::@9: scope:[mul16u_error]  from mul16u_error::@8
  (byte*) print_line_cursor#57 ← phi( mul16u_error::@8/(byte*) print_line_cursor#66 )
  (dword) mul16u_error::mf#1 ← phi( mul16u_error::@8/(dword) mul16u_error::mf#2 )
  (byte*) print_char_cursor#105 ← phi( mul16u_error::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#105
  (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#1
  call print_dword 
  to:mul16u_error::@10
mul16u_error::@10: scope:[mul16u_error]  from mul16u_error::@9
  (byte*) print_line_cursor#49 ← phi( mul16u_error::@9/(byte*) print_line_cursor#57 )
  (byte*) print_char_cursor#106 ← phi( mul16u_error::@9/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#106
  call print_ln 
  to:mul16u_error::@11
mul16u_error::@11: scope:[mul16u_error]  from mul16u_error::@10
  (byte*) print_char_cursor#107 ← phi( mul16u_error::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#34 ← phi( mul16u_error::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#107
  to:mul16u_error::@return
mul16u_error::@return: scope:[mul16u_error]  from mul16u_error::@11
  (byte*) print_line_cursor#35 ← phi( mul16u_error::@11/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#108 ← phi( mul16u_error::@11/(byte*) print_char_cursor#44 )
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#108
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#35
  return 
  to:@return
mul16s_compare: scope:[mul16s_compare]  from main::@3
  (byte*) print_line_cursor#100 ← phi( main::@3/(byte*) print_line_cursor#6 )
  (byte*) BGCOL#29 ← phi( main::@3/(byte*) BGCOL#32 )
  (byte*) print_char_cursor#154 ← phi( main::@3/(byte*) print_char_cursor#25 )
  (signed word/signed dword~) mul16s_compare::$0 ← - (word/signed word/dword/signed dword) $7fff
  (signed word) mul16s_compare::a#0 ← (signed word/signed dword~) mul16s_compare::$0
  (signed word/signed dword~) mul16s_compare::$1 ← - (word/signed word/dword/signed dword) $7fff
  (signed word) mul16s_compare::b#0 ← (signed word/signed dword~) mul16s_compare::$1
  (byte) mul16s_compare::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16s_compare::@1
mul16s_compare::@1: scope:[mul16s_compare]  from mul16s_compare mul16s_compare::@10
  (byte*) print_line_cursor#96 ← phi( mul16s_compare/(byte*) print_line_cursor#100 mul16s_compare::@10/(byte*) print_line_cursor#59 )
  (byte) mul16s_compare::i#13 ← phi( mul16s_compare/(byte) mul16s_compare::i#0 mul16s_compare::@10/(byte) mul16s_compare::i#1 )
  (byte*) BGCOL#26 ← phi( mul16s_compare/(byte*) BGCOL#29 mul16s_compare::@10/(byte*) BGCOL#30 )
  (signed word) mul16s_compare::b#9 ← phi( mul16s_compare/(signed word) mul16s_compare::b#0 mul16s_compare::@10/(signed word) mul16s_compare::b#12 )
  (signed word) mul16s_compare::a#9 ← phi( mul16s_compare/(signed word) mul16s_compare::a#0 mul16s_compare::@10/(signed word) mul16s_compare::a#12 )
  (byte*) print_char_cursor#143 ← phi( mul16s_compare/(byte*) print_char_cursor#154 mul16s_compare::@10/(byte*) print_char_cursor#155 )
  (byte*) print_str::str#8 ← (const string) mul16s_compare::str
  call print_str 
  to:mul16s_compare::@12
mul16s_compare::@12: scope:[mul16s_compare]  from mul16s_compare::@1
  (byte*) print_line_cursor#92 ← phi( mul16s_compare::@1/(byte*) print_line_cursor#96 )
  (byte) mul16s_compare::i#12 ← phi( mul16s_compare::@1/(byte) mul16s_compare::i#13 )
  (byte*) BGCOL#23 ← phi( mul16s_compare::@1/(byte*) BGCOL#26 )
  (signed word) mul16s_compare::b#6 ← phi( mul16s_compare::@1/(signed word) mul16s_compare::b#9 )
  (signed word) mul16s_compare::a#6 ← phi( mul16s_compare::@1/(signed word) mul16s_compare::a#9 )
  (byte*) print_char_cursor#109 ← phi( mul16s_compare::@1/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#109
  (byte) mul16s_compare::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16s_compare::@2
mul16s_compare::@2: scope:[mul16s_compare]  from mul16s_compare::@12 mul16s_compare::@5
  (byte*) print_line_cursor#88 ← phi( mul16s_compare::@12/(byte*) print_line_cursor#92 mul16s_compare::@5/(byte*) print_line_cursor#69 )
  (byte*) print_char_cursor#175 ← phi( mul16s_compare::@12/(byte*) print_char_cursor#46 mul16s_compare::@5/(byte*) print_char_cursor#164 )
  (byte) mul16s_compare::i#11 ← phi( mul16s_compare::@12/(byte) mul16s_compare::i#12 mul16s_compare::@5/(byte) mul16s_compare::i#3 )
  (byte*) BGCOL#20 ← phi( mul16s_compare::@12/(byte*) BGCOL#23 mul16s_compare::@5/(byte*) BGCOL#24 )
  (byte) mul16s_compare::j#10 ← phi( mul16s_compare::@12/(byte) mul16s_compare::j#0 mul16s_compare::@5/(byte) mul16s_compare::j#1 )
  (signed word) mul16s_compare::b#2 ← phi( mul16s_compare::@12/(signed word) mul16s_compare::b#6 mul16s_compare::@5/(signed word) mul16s_compare::b#7 )
  (signed word) mul16s_compare::a#2 ← phi( mul16s_compare::@12/(signed word) mul16s_compare::a#6 mul16s_compare::@5/(signed word) mul16s_compare::a#7 )
  (signed dword/signed word~) mul16s_compare::$3 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b
  (signed word) mul16s_compare::a#1 ← (signed dword/signed word~) mul16s_compare::$3
  (signed dword/signed word~) mul16s_compare::$4 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd
  (signed word) mul16s_compare::b#1 ← (signed dword/signed word~) mul16s_compare::$4
  (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1
  (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1
  call muls16s 
  (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#1
  to:mul16s_compare::@13
mul16s_compare::@13: scope:[mul16s_compare]  from mul16s_compare::@2
  (byte*) print_line_cursor#84 ← phi( mul16s_compare::@2/(byte*) print_line_cursor#88 )
  (byte*) print_char_cursor#173 ← phi( mul16s_compare::@2/(byte*) print_char_cursor#175 )
  (byte) mul16s_compare::i#10 ← phi( mul16s_compare::@2/(byte) mul16s_compare::i#11 )
  (byte*) BGCOL#18 ← phi( mul16s_compare::@2/(byte*) BGCOL#20 )
  (byte) mul16s_compare::j#9 ← phi( mul16s_compare::@2/(byte) mul16s_compare::j#10 )
  (signed word) mul16s_compare::b#3 ← phi( mul16s_compare::@2/(signed word) mul16s_compare::b#1 )
  (signed word) mul16s_compare::a#3 ← phi( mul16s_compare::@2/(signed word) mul16s_compare::a#1 )
  (signed dword) muls16s::return#4 ← phi( mul16s_compare::@2/(signed dword) muls16s::return#2 )
  (signed dword~) mul16s_compare::$5 ← (signed dword) muls16s::return#4
  (signed dword) mul16s_compare::ms#0 ← (signed dword~) mul16s_compare::$5
  (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#3
  (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#3
  call mul16s 
  (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#1
  to:mul16s_compare::@14
mul16s_compare::@14: scope:[mul16s_compare]  from mul16s_compare::@13
  (byte*) print_line_cursor#80 ← phi( mul16s_compare::@13/(byte*) print_line_cursor#84 )
  (byte*) print_char_cursor#171 ← phi( mul16s_compare::@13/(byte*) print_char_cursor#173 )
  (byte) mul16s_compare::i#9 ← phi( mul16s_compare::@13/(byte) mul16s_compare::i#10 )
  (byte*) BGCOL#16 ← phi( mul16s_compare::@13/(byte*) BGCOL#18 )
  (byte) mul16s_compare::j#8 ← phi( mul16s_compare::@13/(byte) mul16s_compare::j#9 )
  (signed dword) mul16s_compare::ms#4 ← phi( mul16s_compare::@13/(signed dword) mul16s_compare::ms#0 )
  (signed word) mul16s_compare::b#4 ← phi( mul16s_compare::@13/(signed word) mul16s_compare::b#3 )
  (signed word) mul16s_compare::a#4 ← phi( mul16s_compare::@13/(signed word) mul16s_compare::a#3 )
  (signed dword) mul16s::return#4 ← phi( mul16s_compare::@13/(signed dword) mul16s::return#2 )
  (signed dword~) mul16s_compare::$6 ← (signed dword) mul16s::return#4
  (signed dword) mul16s_compare::mn#0 ← (signed dword~) mul16s_compare::$6
  (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#4
  (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#4
  call mulf16s 
  (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#1
  to:mul16s_compare::@15
mul16s_compare::@15: scope:[mul16s_compare]  from mul16s_compare::@14
  (byte*) print_line_cursor#75 ← phi( mul16s_compare::@14/(byte*) print_line_cursor#80 )
  (byte*) print_char_cursor#168 ← phi( mul16s_compare::@14/(byte*) print_char_cursor#171 )
  (byte) mul16s_compare::i#7 ← phi( mul16s_compare::@14/(byte) mul16s_compare::i#9 )
  (signed word) mul16s_compare::b#13 ← phi( mul16s_compare::@14/(signed word) mul16s_compare::b#4 )
  (signed word) mul16s_compare::a#13 ← phi( mul16s_compare::@14/(signed word) mul16s_compare::a#4 )
  (byte*) BGCOL#13 ← phi( mul16s_compare::@14/(byte*) BGCOL#16 )
  (byte) mul16s_compare::j#6 ← phi( mul16s_compare::@14/(byte) mul16s_compare::j#8 )
  (signed dword) mul16s_compare::mn#3 ← phi( mul16s_compare::@14/(signed dword) mul16s_compare::mn#0 )
  (signed dword) mul16s_compare::ms#1 ← phi( mul16s_compare::@14/(signed dword) mul16s_compare::ms#4 )
  (signed dword) mulf16s::return#4 ← phi( mul16s_compare::@14/(signed dword) mulf16s::return#2 )
  (signed dword~) mul16s_compare::$7 ← (signed dword) mulf16s::return#4
  (signed dword) mul16s_compare::mf#0 ← (signed dword~) mul16s_compare::$7
  (byte) mul16s_compare::ok#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul16s_compare::$8 ← (signed dword) mul16s_compare::ms#1 != (signed dword) mul16s_compare::mf#0
  (bool~) mul16s_compare::$9 ← ! (bool~) mul16s_compare::$8
  if((bool~) mul16s_compare::$9) goto mul16s_compare::@3
  to:mul16s_compare::@6
mul16s_compare::@3: scope:[mul16s_compare]  from mul16s_compare::@15 mul16s_compare::@6
  (byte*) print_line_cursor#67 ← phi( mul16s_compare::@15/(byte*) print_line_cursor#75 mul16s_compare::@6/(byte*) print_line_cursor#76 )
  (byte*) print_char_cursor#162 ← phi( mul16s_compare::@15/(byte*) print_char_cursor#168 mul16s_compare::@6/(byte*) print_char_cursor#169 )
  (byte) mul16s_compare::i#5 ← phi( mul16s_compare::@15/(byte) mul16s_compare::i#7 mul16s_compare::@6/(byte) mul16s_compare::i#8 )
  (signed dword) mul16s_compare::mf#3 ← phi( mul16s_compare::@15/(signed dword) mul16s_compare::mf#0 mul16s_compare::@6/(signed dword) mul16s_compare::mf#5 )
  (signed word) mul16s_compare::b#10 ← phi( mul16s_compare::@15/(signed word) mul16s_compare::b#13 mul16s_compare::@6/(signed word) mul16s_compare::b#14 )
  (signed word) mul16s_compare::a#10 ← phi( mul16s_compare::@15/(signed word) mul16s_compare::a#13 mul16s_compare::@6/(signed word) mul16s_compare::a#14 )
  (byte*) BGCOL#9 ← phi( mul16s_compare::@15/(byte*) BGCOL#13 mul16s_compare::@6/(byte*) BGCOL#14 )
  (byte) mul16s_compare::j#4 ← phi( mul16s_compare::@15/(byte) mul16s_compare::j#6 mul16s_compare::@6/(byte) mul16s_compare::j#7 )
  (byte) mul16s_compare::ok#4 ← phi( mul16s_compare::@15/(byte) mul16s_compare::ok#0 mul16s_compare::@6/(byte) mul16s_compare::ok#1 )
  (signed dword) mul16s_compare::mn#1 ← phi( mul16s_compare::@15/(signed dword) mul16s_compare::mn#3 mul16s_compare::@6/(signed dword) mul16s_compare::mn#4 )
  (signed dword) mul16s_compare::ms#2 ← phi( mul16s_compare::@15/(signed dword) mul16s_compare::ms#1 mul16s_compare::@6/(signed dword) mul16s_compare::ms#5 )
  (bool~) mul16s_compare::$10 ← (signed dword) mul16s_compare::ms#2 != (signed dword) mul16s_compare::mn#1
  (bool~) mul16s_compare::$11 ← ! (bool~) mul16s_compare::$10
  if((bool~) mul16s_compare::$11) goto mul16s_compare::@4
  to:mul16s_compare::@7
mul16s_compare::@6: scope:[mul16s_compare]  from mul16s_compare::@15
  (byte*) print_line_cursor#76 ← phi( mul16s_compare::@15/(byte*) print_line_cursor#75 )
  (byte*) print_char_cursor#169 ← phi( mul16s_compare::@15/(byte*) print_char_cursor#168 )
  (byte) mul16s_compare::i#8 ← phi( mul16s_compare::@15/(byte) mul16s_compare::i#7 )
  (signed dword) mul16s_compare::mf#5 ← phi( mul16s_compare::@15/(signed dword) mul16s_compare::mf#0 )
  (signed word) mul16s_compare::b#14 ← phi( mul16s_compare::@15/(signed word) mul16s_compare::b#13 )
  (signed word) mul16s_compare::a#14 ← phi( mul16s_compare::@15/(signed word) mul16s_compare::a#13 )
  (byte*) BGCOL#14 ← phi( mul16s_compare::@15/(byte*) BGCOL#13 )
  (byte) mul16s_compare::j#7 ← phi( mul16s_compare::@15/(byte) mul16s_compare::j#6 )
  (signed dword) mul16s_compare::mn#4 ← phi( mul16s_compare::@15/(signed dword) mul16s_compare::mn#3 )
  (signed dword) mul16s_compare::ms#5 ← phi( mul16s_compare::@15/(signed dword) mul16s_compare::ms#1 )
  (byte) mul16s_compare::ok#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16s_compare::@3
mul16s_compare::@4: scope:[mul16s_compare]  from mul16s_compare::@3 mul16s_compare::@7
  (byte*) print_line_cursor#58 ← phi( mul16s_compare::@3/(byte*) print_line_cursor#67 mul16s_compare::@7/(byte*) print_line_cursor#68 )
  (byte*) print_char_cursor#156 ← phi( mul16s_compare::@3/(byte*) print_char_cursor#162 mul16s_compare::@7/(byte*) print_char_cursor#163 )
  (byte) mul16s_compare::i#4 ← phi( mul16s_compare::@3/(byte) mul16s_compare::i#5 mul16s_compare::@7/(byte) mul16s_compare::i#6 )
  (signed dword) mul16s_compare::mf#2 ← phi( mul16s_compare::@3/(signed dword) mul16s_compare::mf#3 mul16s_compare::@7/(signed dword) mul16s_compare::mf#4 )
  (signed dword) mul16s_compare::mn#5 ← phi( mul16s_compare::@3/(signed dword) mul16s_compare::mn#1 mul16s_compare::@7/(signed dword) mul16s_compare::mn#6 )
  (signed dword) mul16s_compare::ms#6 ← phi( mul16s_compare::@3/(signed dword) mul16s_compare::ms#2 mul16s_compare::@7/(signed dword) mul16s_compare::ms#7 )
  (signed word) mul16s_compare::b#8 ← phi( mul16s_compare::@3/(signed word) mul16s_compare::b#10 mul16s_compare::@7/(signed word) mul16s_compare::b#11 )
  (signed word) mul16s_compare::a#8 ← phi( mul16s_compare::@3/(signed word) mul16s_compare::a#10 mul16s_compare::@7/(signed word) mul16s_compare::a#11 )
  (byte*) BGCOL#6 ← phi( mul16s_compare::@3/(byte*) BGCOL#9 mul16s_compare::@7/(byte*) BGCOL#10 )
  (byte) mul16s_compare::j#3 ← phi( mul16s_compare::@3/(byte) mul16s_compare::j#4 mul16s_compare::@7/(byte) mul16s_compare::j#5 )
  (byte) mul16s_compare::ok#3 ← phi( mul16s_compare::@3/(byte) mul16s_compare::ok#4 mul16s_compare::@7/(byte) mul16s_compare::ok#2 )
  (bool~) mul16s_compare::$12 ← (byte) mul16s_compare::ok#3 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s_compare::$13 ← ! (bool~) mul16s_compare::$12
  if((bool~) mul16s_compare::$13) goto mul16s_compare::@5
  to:mul16s_compare::@8
mul16s_compare::@7: scope:[mul16s_compare]  from mul16s_compare::@3
  (byte*) print_line_cursor#68 ← phi( mul16s_compare::@3/(byte*) print_line_cursor#67 )
  (byte*) print_char_cursor#163 ← phi( mul16s_compare::@3/(byte*) print_char_cursor#162 )
  (byte) mul16s_compare::i#6 ← phi( mul16s_compare::@3/(byte) mul16s_compare::i#5 )
  (signed dword) mul16s_compare::mf#4 ← phi( mul16s_compare::@3/(signed dword) mul16s_compare::mf#3 )
  (signed dword) mul16s_compare::mn#6 ← phi( mul16s_compare::@3/(signed dword) mul16s_compare::mn#1 )
  (signed dword) mul16s_compare::ms#7 ← phi( mul16s_compare::@3/(signed dword) mul16s_compare::ms#2 )
  (signed word) mul16s_compare::b#11 ← phi( mul16s_compare::@3/(signed word) mul16s_compare::b#10 )
  (signed word) mul16s_compare::a#11 ← phi( mul16s_compare::@3/(signed word) mul16s_compare::a#10 )
  (byte*) BGCOL#10 ← phi( mul16s_compare::@3/(byte*) BGCOL#9 )
  (byte) mul16s_compare::j#5 ← phi( mul16s_compare::@3/(byte) mul16s_compare::j#4 )
  (byte) mul16s_compare::ok#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mul16s_compare::@4
mul16s_compare::@5: scope:[mul16s_compare]  from mul16s_compare::@4
  (byte*) BGCOL#24 ← phi( mul16s_compare::@4/(byte*) BGCOL#6 )
  (byte*) print_line_cursor#69 ← phi( mul16s_compare::@4/(byte*) print_line_cursor#58 )
  (byte*) print_char_cursor#164 ← phi( mul16s_compare::@4/(byte*) print_char_cursor#156 )
  (byte) mul16s_compare::i#3 ← phi( mul16s_compare::@4/(byte) mul16s_compare::i#4 )
  (signed word) mul16s_compare::b#7 ← phi( mul16s_compare::@4/(signed word) mul16s_compare::b#8 )
  (signed word) mul16s_compare::a#7 ← phi( mul16s_compare::@4/(signed word) mul16s_compare::a#8 )
  (byte) mul16s_compare::j#2 ← phi( mul16s_compare::@4/(byte) mul16s_compare::j#3 )
  (byte) mul16s_compare::j#1 ← (byte) mul16s_compare::j#2 + rangenext(0,$f)
  (bool~) mul16s_compare::$15 ← (byte) mul16s_compare::j#1 != rangelast(0,$f)
  if((bool~) mul16s_compare::$15) goto mul16s_compare::@2
  to:mul16s_compare::@10
mul16s_compare::@8: scope:[mul16s_compare]  from mul16s_compare::@4
  (byte*) print_line_cursor#50 ← phi( mul16s_compare::@4/(byte*) print_line_cursor#58 )
  (byte*) print_char_cursor#144 ← phi( mul16s_compare::@4/(byte*) print_char_cursor#156 )
  (signed dword) mul16s_compare::mf#1 ← phi( mul16s_compare::@4/(signed dword) mul16s_compare::mf#2 )
  (signed dword) mul16s_compare::mn#2 ← phi( mul16s_compare::@4/(signed dword) mul16s_compare::mn#5 )
  (signed dword) mul16s_compare::ms#3 ← phi( mul16s_compare::@4/(signed dword) mul16s_compare::ms#6 )
  (signed word) mul16s_compare::b#5 ← phi( mul16s_compare::@4/(signed word) mul16s_compare::b#8 )
  (signed word) mul16s_compare::a#5 ← phi( mul16s_compare::@4/(signed word) mul16s_compare::a#8 )
  (byte*) BGCOL#3 ← phi( mul16s_compare::@4/(byte*) BGCOL#6 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#5
  (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#5
  (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#3
  (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#2
  (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#1
  call mul16s_error 
  to:mul16s_compare::@16
mul16s_compare::@16: scope:[mul16s_compare]  from mul16s_compare::@8
  (byte*) print_line_cursor#36 ← phi( mul16s_compare::@8/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#110 ← phi( mul16s_compare::@8/(byte*) print_char_cursor#63 )
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#110
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#36
  to:mul16s_compare::@return
mul16s_compare::@return: scope:[mul16s_compare]  from mul16s_compare::@16 mul16s_compare::@19
  (byte*) print_line_cursor#37 ← phi( mul16s_compare::@16/(byte*) print_line_cursor#15 mul16s_compare::@19/(byte*) print_line_cursor#18 )
  (byte*) print_char_cursor#111 ← phi( mul16s_compare::@16/(byte*) print_char_cursor#47 mul16s_compare::@19/(byte*) print_char_cursor#51 )
  (byte*) print_char_cursor#48 ← (byte*) print_char_cursor#111
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#37
  return 
  to:@return
mul16s_compare::@10: scope:[mul16s_compare]  from mul16s_compare::@5
  (byte*) BGCOL#30 ← phi( mul16s_compare::@5/(byte*) BGCOL#24 )
  (signed word) mul16s_compare::b#12 ← phi( mul16s_compare::@5/(signed word) mul16s_compare::b#7 )
  (signed word) mul16s_compare::a#12 ← phi( mul16s_compare::@5/(signed word) mul16s_compare::a#7 )
  (byte*) print_line_cursor#59 ← phi( mul16s_compare::@5/(byte*) print_line_cursor#69 )
  (byte*) print_char_cursor#155 ← phi( mul16s_compare::@5/(byte*) print_char_cursor#164 )
  (byte) mul16s_compare::i#2 ← phi( mul16s_compare::@5/(byte) mul16s_compare::i#3 )
  (byte) mul16s_compare::i#1 ← (byte) mul16s_compare::i#2 + rangenext(0,$f)
  (bool~) mul16s_compare::$16 ← (byte) mul16s_compare::i#1 != rangelast(0,$f)
  if((bool~) mul16s_compare::$16) goto mul16s_compare::@1
  to:mul16s_compare::@11
mul16s_compare::@11: scope:[mul16s_compare]  from mul16s_compare::@10
  (byte*) print_char_cursor#145 ← phi( mul16s_compare::@10/(byte*) print_char_cursor#155 )
  (byte*) print_line_cursor#51 ← phi( mul16s_compare::@10/(byte*) print_line_cursor#59 )
  call print_ln 
  to:mul16s_compare::@17
mul16s_compare::@17: scope:[mul16s_compare]  from mul16s_compare::@11
  (byte*) print_char_cursor#112 ← phi( mul16s_compare::@11/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#38 ← phi( mul16s_compare::@11/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#38
  (byte*) print_char_cursor#49 ← (byte*) print_char_cursor#112
  (byte*) print_str::str#9 ← (const string) mul16s_compare::str1
  call print_str 
  to:mul16s_compare::@18
mul16s_compare::@18: scope:[mul16s_compare]  from mul16s_compare::@17
  (byte*) print_line_cursor#52 ← phi( mul16s_compare::@17/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#113 ← phi( mul16s_compare::@17/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#50 ← (byte*) print_char_cursor#113
  call print_ln 
  to:mul16s_compare::@19
mul16s_compare::@19: scope:[mul16s_compare]  from mul16s_compare::@18
  (byte*) print_char_cursor#114 ← phi( mul16s_compare::@18/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#39 ← phi( mul16s_compare::@18/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#39
  (byte*) print_char_cursor#51 ← (byte*) print_char_cursor#114
  to:mul16s_compare::@return
mul16s_error: scope:[mul16s_error]  from mul16s_compare::@8
  (byte*) print_line_cursor#103 ← phi( mul16s_compare::@8/(byte*) print_line_cursor#50 )
  (signed dword) mul16s_error::mf#10 ← phi( mul16s_compare::@8/(signed dword) mul16s_error::mf#0 )
  (signed dword) mul16s_error::mn#8 ← phi( mul16s_compare::@8/(signed dword) mul16s_error::mn#0 )
  (signed dword) mul16s_error::ms#6 ← phi( mul16s_compare::@8/(signed dword) mul16s_error::ms#0 )
  (signed word) mul16s_error::b#4 ← phi( mul16s_compare::@8/(signed word) mul16s_error::b#0 )
  (signed word) mul16s_error::a#2 ← phi( mul16s_compare::@8/(signed word) mul16s_error::a#0 )
  (byte*) print_char_cursor#146 ← phi( mul16s_compare::@8/(byte*) print_char_cursor#144 )
  (byte*) print_str::str#10 ← (const string) mul16s_error::str
  call print_str 
  to:mul16s_error::@1
mul16s_error::@1: scope:[mul16s_error]  from mul16s_error
  (byte*) print_line_cursor#101 ← phi( mul16s_error/(byte*) print_line_cursor#103 )
  (signed dword) mul16s_error::mf#9 ← phi( mul16s_error/(signed dword) mul16s_error::mf#10 )
  (signed dword) mul16s_error::mn#7 ← phi( mul16s_error/(signed dword) mul16s_error::mn#8 )
  (signed dword) mul16s_error::ms#5 ← phi( mul16s_error/(signed dword) mul16s_error::ms#6 )
  (signed word) mul16s_error::b#3 ← phi( mul16s_error/(signed word) mul16s_error::b#4 )
  (signed word) mul16s_error::a#1 ← phi( mul16s_error/(signed word) mul16s_error::a#2 )
  (byte*) print_char_cursor#115 ← phi( mul16s_error/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#52 ← (byte*) print_char_cursor#115
  (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#1
  call print_sword 
  to:mul16s_error::@2
mul16s_error::@2: scope:[mul16s_error]  from mul16s_error::@1
  (byte*) print_line_cursor#97 ← phi( mul16s_error::@1/(byte*) print_line_cursor#101 )
  (signed dword) mul16s_error::mf#8 ← phi( mul16s_error::@1/(signed dword) mul16s_error::mf#9 )
  (signed dword) mul16s_error::mn#6 ← phi( mul16s_error::@1/(signed dword) mul16s_error::mn#7 )
  (signed dword) mul16s_error::ms#4 ← phi( mul16s_error::@1/(signed dword) mul16s_error::ms#5 )
  (signed word) mul16s_error::b#2 ← phi( mul16s_error::@1/(signed word) mul16s_error::b#3 )
  (byte*) print_char_cursor#116 ← phi( mul16s_error::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#53 ← (byte*) print_char_cursor#116
  (byte*) print_str::str#11 ← (const string) mul16s_error::str1
  call print_str 
  to:mul16s_error::@3
mul16s_error::@3: scope:[mul16s_error]  from mul16s_error::@2
  (byte*) print_line_cursor#93 ← phi( mul16s_error::@2/(byte*) print_line_cursor#97 )
  (signed dword) mul16s_error::mf#7 ← phi( mul16s_error::@2/(signed dword) mul16s_error::mf#8 )
  (signed dword) mul16s_error::mn#5 ← phi( mul16s_error::@2/(signed dword) mul16s_error::mn#6 )
  (signed dword) mul16s_error::ms#3 ← phi( mul16s_error::@2/(signed dword) mul16s_error::ms#4 )
  (signed word) mul16s_error::b#1 ← phi( mul16s_error::@2/(signed word) mul16s_error::b#2 )
  (byte*) print_char_cursor#117 ← phi( mul16s_error::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#54 ← (byte*) print_char_cursor#117
  (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#1
  call print_sword 
  to:mul16s_error::@4
mul16s_error::@4: scope:[mul16s_error]  from mul16s_error::@3
  (byte*) print_line_cursor#89 ← phi( mul16s_error::@3/(byte*) print_line_cursor#93 )
  (signed dword) mul16s_error::mf#6 ← phi( mul16s_error::@3/(signed dword) mul16s_error::mf#7 )
  (signed dword) mul16s_error::mn#4 ← phi( mul16s_error::@3/(signed dword) mul16s_error::mn#5 )
  (signed dword) mul16s_error::ms#2 ← phi( mul16s_error::@3/(signed dword) mul16s_error::ms#3 )
  (byte*) print_char_cursor#118 ← phi( mul16s_error::@3/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#55 ← (byte*) print_char_cursor#118
  (byte*) print_str::str#12 ← (const string) mul16s_error::str2
  call print_str 
  to:mul16s_error::@5
mul16s_error::@5: scope:[mul16s_error]  from mul16s_error::@4
  (byte*) print_line_cursor#85 ← phi( mul16s_error::@4/(byte*) print_line_cursor#89 )
  (signed dword) mul16s_error::mf#5 ← phi( mul16s_error::@4/(signed dword) mul16s_error::mf#6 )
  (signed dword) mul16s_error::mn#3 ← phi( mul16s_error::@4/(signed dword) mul16s_error::mn#4 )
  (signed dword) mul16s_error::ms#1 ← phi( mul16s_error::@4/(signed dword) mul16s_error::ms#2 )
  (byte*) print_char_cursor#119 ← phi( mul16s_error::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#56 ← (byte*) print_char_cursor#119
  (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#1
  call print_sdword 
  to:mul16s_error::@6
mul16s_error::@6: scope:[mul16s_error]  from mul16s_error::@5
  (byte*) print_line_cursor#81 ← phi( mul16s_error::@5/(byte*) print_line_cursor#85 )
  (signed dword) mul16s_error::mf#4 ← phi( mul16s_error::@5/(signed dword) mul16s_error::mf#5 )
  (signed dword) mul16s_error::mn#2 ← phi( mul16s_error::@5/(signed dword) mul16s_error::mn#3 )
  (byte*) print_char_cursor#120 ← phi( mul16s_error::@5/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#57 ← (byte*) print_char_cursor#120
  (byte*) print_str::str#13 ← (const string) mul16s_error::str3
  call print_str 
  to:mul16s_error::@7
mul16s_error::@7: scope:[mul16s_error]  from mul16s_error::@6
  (byte*) print_line_cursor#77 ← phi( mul16s_error::@6/(byte*) print_line_cursor#81 )
  (signed dword) mul16s_error::mf#3 ← phi( mul16s_error::@6/(signed dword) mul16s_error::mf#4 )
  (signed dword) mul16s_error::mn#1 ← phi( mul16s_error::@6/(signed dword) mul16s_error::mn#2 )
  (byte*) print_char_cursor#121 ← phi( mul16s_error::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#58 ← (byte*) print_char_cursor#121
  (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#1
  call print_sdword 
  to:mul16s_error::@8
mul16s_error::@8: scope:[mul16s_error]  from mul16s_error::@7
  (byte*) print_line_cursor#70 ← phi( mul16s_error::@7/(byte*) print_line_cursor#77 )
  (signed dword) mul16s_error::mf#2 ← phi( mul16s_error::@7/(signed dword) mul16s_error::mf#3 )
  (byte*) print_char_cursor#122 ← phi( mul16s_error::@7/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#59 ← (byte*) print_char_cursor#122
  (byte*) print_str::str#14 ← (const string) mul16s_error::str4
  call print_str 
  to:mul16s_error::@9
mul16s_error::@9: scope:[mul16s_error]  from mul16s_error::@8
  (byte*) print_line_cursor#60 ← phi( mul16s_error::@8/(byte*) print_line_cursor#70 )
  (signed dword) mul16s_error::mf#1 ← phi( mul16s_error::@8/(signed dword) mul16s_error::mf#2 )
  (byte*) print_char_cursor#123 ← phi( mul16s_error::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#60 ← (byte*) print_char_cursor#123
  (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#1
  call print_sdword 
  to:mul16s_error::@10
mul16s_error::@10: scope:[mul16s_error]  from mul16s_error::@9
  (byte*) print_line_cursor#53 ← phi( mul16s_error::@9/(byte*) print_line_cursor#60 )
  (byte*) print_char_cursor#124 ← phi( mul16s_error::@9/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#61 ← (byte*) print_char_cursor#124
  call print_ln 
  to:mul16s_error::@11
mul16s_error::@11: scope:[mul16s_error]  from mul16s_error::@10
  (byte*) print_char_cursor#125 ← phi( mul16s_error::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#40 ← phi( mul16s_error::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#40
  (byte*) print_char_cursor#62 ← (byte*) print_char_cursor#125
  to:mul16s_error::@return
mul16s_error::@return: scope:[mul16s_error]  from mul16s_error::@11
  (byte*) print_line_cursor#41 ← phi( mul16s_error::@11/(byte*) print_line_cursor#19 )
  (byte*) print_char_cursor#126 ← phi( mul16s_error::@11/(byte*) print_char_cursor#62 )
  (byte*) print_char_cursor#63 ← (byte*) print_char_cursor#126
  (byte*) print_line_cursor#20 ← (byte*) print_line_cursor#41
  return 
  to:@return
@40: scope:[]  from @33
  (byte*) print_screen#5 ← phi( @33/(byte*) print_screen#6 )
  (byte*) print_char_cursor#147 ← phi( @33/(byte*) print_char_cursor#157 )
  (byte*) print_line_cursor#54 ← phi( @33/(byte*) print_line_cursor#61 )
  (byte*) BGCOL#4 ← phi( @33/(byte*) BGCOL#0 )
  call main 
  to:@41
@41: scope:[]  from @40
  (byte*) print_char_cursor#127 ← phi( @40/(byte*) print_char_cursor#27 )
  (byte*) print_line_cursor#42 ← phi( @40/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#21 ← (byte*) print_line_cursor#42
  (byte*) print_char_cursor#64 ← (byte*) print_char_cursor#127
  to:@end
@end: scope:[]  from @41

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @12
(label) @24
(label) @33
(label) @40
(label) @41
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#10
(byte*) BGCOL#11
(byte*) BGCOL#12
(byte*) BGCOL#13
(byte*) BGCOL#14
(byte*) BGCOL#15
(byte*) BGCOL#16
(byte*) BGCOL#17
(byte*) BGCOL#18
(byte*) BGCOL#19
(byte*) BGCOL#2
(byte*) BGCOL#20
(byte*) BGCOL#21
(byte*) BGCOL#22
(byte*) BGCOL#23
(byte*) BGCOL#24
(byte*) BGCOL#25
(byte*) BGCOL#26
(byte*) BGCOL#27
(byte*) BGCOL#28
(byte*) BGCOL#29
(byte*) BGCOL#3
(byte*) BGCOL#30
(byte*) BGCOL#31
(byte*) BGCOL#32
(byte*) BGCOL#33
(byte*) BGCOL#4
(byte*) BGCOL#5
(byte*) BGCOL#6
(byte*) BGCOL#7
(byte*) BGCOL#8
(byte*) BGCOL#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$0
(word~) mul16s::$1
(bool~) mul16s::$10
(word~) mul16s::$12
(word~) mul16s::$13
(word~) mul16s::$14
(signed dword~) mul16s::$15
(word~) mul16s::$16
(word~) mul16s::$17
(dword~) mul16s::$2
(bool~) mul16s::$3
(bool~) mul16s::$4
(word~) mul16s::$6
(word~) mul16s::$7
(word~) mul16s::$8
(bool~) mul16s::$9
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@6
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0
(signed word) mul16s::a#1
(signed word) mul16s::a#2
(signed word) mul16s::a#3
(signed word) mul16s::a#4
(signed word) mul16s::a#5
(signed word) mul16s::b
(signed word) mul16s::b#0
(signed word) mul16s::b#1
(signed word) mul16s::b#2
(signed word) mul16s::b#3
(signed word) mul16s::b#4
(dword) mul16s::m
(dword) mul16s::m#0
(dword) mul16s::m#1
(dword) mul16s::m#2
(dword) mul16s::m#3
(dword) mul16s::m#4
(dword) mul16s::m#5
(dword) mul16s::m#6
(signed dword) mul16s::return
(signed dword) mul16s::return#0
(signed dword) mul16s::return#1
(signed dword) mul16s::return#2
(signed dword) mul16s::return#3
(signed dword) mul16s::return#4
(void()) mul16s_compare()
(signed word/signed dword~) mul16s_compare::$0
(signed word/signed dword~) mul16s_compare::$1
(bool~) mul16s_compare::$10
(bool~) mul16s_compare::$11
(bool~) mul16s_compare::$12
(bool~) mul16s_compare::$13
(bool~) mul16s_compare::$15
(bool~) mul16s_compare::$16
(signed dword/signed word~) mul16s_compare::$3
(signed dword/signed word~) mul16s_compare::$4
(signed dword~) mul16s_compare::$5
(signed dword~) mul16s_compare::$6
(signed dword~) mul16s_compare::$7
(bool~) mul16s_compare::$8
(bool~) mul16s_compare::$9
(label) mul16s_compare::@1
(label) mul16s_compare::@10
(label) mul16s_compare::@11
(label) mul16s_compare::@12
(label) mul16s_compare::@13
(label) mul16s_compare::@14
(label) mul16s_compare::@15
(label) mul16s_compare::@16
(label) mul16s_compare::@17
(label) mul16s_compare::@18
(label) mul16s_compare::@19
(label) mul16s_compare::@2
(label) mul16s_compare::@3
(label) mul16s_compare::@4
(label) mul16s_compare::@5
(label) mul16s_compare::@6
(label) mul16s_compare::@7
(label) mul16s_compare::@8
(label) mul16s_compare::@return
(signed word) mul16s_compare::a
(signed word) mul16s_compare::a#0
(signed word) mul16s_compare::a#1
(signed word) mul16s_compare::a#10
(signed word) mul16s_compare::a#11
(signed word) mul16s_compare::a#12
(signed word) mul16s_compare::a#13
(signed word) mul16s_compare::a#14
(signed word) mul16s_compare::a#2
(signed word) mul16s_compare::a#3
(signed word) mul16s_compare::a#4
(signed word) mul16s_compare::a#5
(signed word) mul16s_compare::a#6
(signed word) mul16s_compare::a#7
(signed word) mul16s_compare::a#8
(signed word) mul16s_compare::a#9
(signed word) mul16s_compare::b
(signed word) mul16s_compare::b#0
(signed word) mul16s_compare::b#1
(signed word) mul16s_compare::b#10
(signed word) mul16s_compare::b#11
(signed word) mul16s_compare::b#12
(signed word) mul16s_compare::b#13
(signed word) mul16s_compare::b#14
(signed word) mul16s_compare::b#2
(signed word) mul16s_compare::b#3
(signed word) mul16s_compare::b#4
(signed word) mul16s_compare::b#5
(signed word) mul16s_compare::b#6
(signed word) mul16s_compare::b#7
(signed word) mul16s_compare::b#8
(signed word) mul16s_compare::b#9
(byte) mul16s_compare::i
(byte) mul16s_compare::i#0
(byte) mul16s_compare::i#1
(byte) mul16s_compare::i#10
(byte) mul16s_compare::i#11
(byte) mul16s_compare::i#12
(byte) mul16s_compare::i#13
(byte) mul16s_compare::i#2
(byte) mul16s_compare::i#3
(byte) mul16s_compare::i#4
(byte) mul16s_compare::i#5
(byte) mul16s_compare::i#6
(byte) mul16s_compare::i#7
(byte) mul16s_compare::i#8
(byte) mul16s_compare::i#9
(byte) mul16s_compare::j
(byte) mul16s_compare::j#0
(byte) mul16s_compare::j#1
(byte) mul16s_compare::j#10
(byte) mul16s_compare::j#2
(byte) mul16s_compare::j#3
(byte) mul16s_compare::j#4
(byte) mul16s_compare::j#5
(byte) mul16s_compare::j#6
(byte) mul16s_compare::j#7
(byte) mul16s_compare::j#8
(byte) mul16s_compare::j#9
(signed dword) mul16s_compare::mf
(signed dword) mul16s_compare::mf#0
(signed dword) mul16s_compare::mf#1
(signed dword) mul16s_compare::mf#2
(signed dword) mul16s_compare::mf#3
(signed dword) mul16s_compare::mf#4
(signed dword) mul16s_compare::mf#5
(signed dword) mul16s_compare::mn
(signed dword) mul16s_compare::mn#0
(signed dword) mul16s_compare::mn#1
(signed dword) mul16s_compare::mn#2
(signed dword) mul16s_compare::mn#3
(signed dword) mul16s_compare::mn#4
(signed dword) mul16s_compare::mn#5
(signed dword) mul16s_compare::mn#6
(signed dword) mul16s_compare::ms
(signed dword) mul16s_compare::ms#0
(signed dword) mul16s_compare::ms#1
(signed dword) mul16s_compare::ms#2
(signed dword) mul16s_compare::ms#3
(signed dword) mul16s_compare::ms#4
(signed dword) mul16s_compare::ms#5
(signed dword) mul16s_compare::ms#6
(signed dword) mul16s_compare::ms#7
(byte) mul16s_compare::ok
(byte) mul16s_compare::ok#0
(byte) mul16s_compare::ok#1
(byte) mul16s_compare::ok#2
(byte) mul16s_compare::ok#3
(byte) mul16s_compare::ok#4
(const string) mul16s_compare::str = (string) ".@"
(const string) mul16s_compare::str1 = (string) "signed word multiply results match!@"
(void()) mul16s_error((signed word) mul16s_error::a , (signed word) mul16s_error::b , (signed dword) mul16s_error::ms , (signed dword) mul16s_error::mn , (signed dword) mul16s_error::mf)
(label) mul16s_error::@1
(label) mul16s_error::@10
(label) mul16s_error::@11
(label) mul16s_error::@2
(label) mul16s_error::@3
(label) mul16s_error::@4
(label) mul16s_error::@5
(label) mul16s_error::@6
(label) mul16s_error::@7
(label) mul16s_error::@8
(label) mul16s_error::@9
(label) mul16s_error::@return
(signed word) mul16s_error::a
(signed word) mul16s_error::a#0
(signed word) mul16s_error::a#1
(signed word) mul16s_error::a#2
(signed word) mul16s_error::b
(signed word) mul16s_error::b#0
(signed word) mul16s_error::b#1
(signed word) mul16s_error::b#2
(signed word) mul16s_error::b#3
(signed word) mul16s_error::b#4
(signed dword) mul16s_error::mf
(signed dword) mul16s_error::mf#0
(signed dword) mul16s_error::mf#1
(signed dword) mul16s_error::mf#10
(signed dword) mul16s_error::mf#2
(signed dword) mul16s_error::mf#3
(signed dword) mul16s_error::mf#4
(signed dword) mul16s_error::mf#5
(signed dword) mul16s_error::mf#6
(signed dword) mul16s_error::mf#7
(signed dword) mul16s_error::mf#8
(signed dword) mul16s_error::mf#9
(signed dword) mul16s_error::mn
(signed dword) mul16s_error::mn#0
(signed dword) mul16s_error::mn#1
(signed dword) mul16s_error::mn#2
(signed dword) mul16s_error::mn#3
(signed dword) mul16s_error::mn#4
(signed dword) mul16s_error::mn#5
(signed dword) mul16s_error::mn#6
(signed dword) mul16s_error::mn#7
(signed dword) mul16s_error::mn#8
(signed dword) mul16s_error::ms
(signed dword) mul16s_error::ms#0
(signed dword) mul16s_error::ms#1
(signed dword) mul16s_error::ms#2
(signed dword) mul16s_error::ms#3
(signed dword) mul16s_error::ms#4
(signed dword) mul16s_error::ms#5
(signed dword) mul16s_error::ms#6
(const string) mul16s_error::str = (string) "signed word multiply mismatch @"
(const string) mul16s_error::str1 = (string) "*@"
(const string) mul16s_error::str2 = (string) " slow:@"
(const string) mul16s_error::str3 = (string) " / normal:@"
(const string) mul16s_error::str4 = (string) " / fast:@"
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(byte/word~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::a#7
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(word) mul16u::b#2
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(dword) mul16u::return#5
(dword) mul16u::return#6
(void()) mul16u_compare()
(word/signed dword/dword~) mul16u_compare::$1
(bool~) mul16u_compare::$10
(bool~) mul16u_compare::$11
(bool~) mul16u_compare::$13
(bool~) mul16u_compare::$14
(word/signed dword/dword~) mul16u_compare::$2
(dword~) mul16u_compare::$3
(dword~) mul16u_compare::$4
(dword~) mul16u_compare::$5
(bool~) mul16u_compare::$6
(bool~) mul16u_compare::$7
(bool~) mul16u_compare::$8
(bool~) mul16u_compare::$9
(label) mul16u_compare::@1
(label) mul16u_compare::@10
(label) mul16u_compare::@11
(label) mul16u_compare::@12
(label) mul16u_compare::@13
(label) mul16u_compare::@14
(label) mul16u_compare::@15
(label) mul16u_compare::@16
(label) mul16u_compare::@17
(label) mul16u_compare::@18
(label) mul16u_compare::@19
(label) mul16u_compare::@2
(label) mul16u_compare::@3
(label) mul16u_compare::@4
(label) mul16u_compare::@5
(label) mul16u_compare::@6
(label) mul16u_compare::@7
(label) mul16u_compare::@8
(label) mul16u_compare::@return
(word) mul16u_compare::a
(word) mul16u_compare::a#0
(word) mul16u_compare::a#1
(word) mul16u_compare::a#10
(word) mul16u_compare::a#11
(word) mul16u_compare::a#12
(word) mul16u_compare::a#13
(word) mul16u_compare::a#14
(word) mul16u_compare::a#2
(word) mul16u_compare::a#3
(word) mul16u_compare::a#4
(word) mul16u_compare::a#5
(word) mul16u_compare::a#6
(word) mul16u_compare::a#7
(word) mul16u_compare::a#8
(word) mul16u_compare::a#9
(word) mul16u_compare::b
(word) mul16u_compare::b#0
(word) mul16u_compare::b#1
(word) mul16u_compare::b#10
(word) mul16u_compare::b#11
(word) mul16u_compare::b#12
(word) mul16u_compare::b#13
(word) mul16u_compare::b#14
(word) mul16u_compare::b#2
(word) mul16u_compare::b#3
(word) mul16u_compare::b#4
(word) mul16u_compare::b#5
(word) mul16u_compare::b#6
(word) mul16u_compare::b#7
(word) mul16u_compare::b#8
(word) mul16u_compare::b#9
(byte) mul16u_compare::i
(byte) mul16u_compare::i#0
(byte) mul16u_compare::i#1
(byte) mul16u_compare::i#10
(byte) mul16u_compare::i#11
(byte) mul16u_compare::i#12
(byte) mul16u_compare::i#13
(byte) mul16u_compare::i#2
(byte) mul16u_compare::i#3
(byte) mul16u_compare::i#4
(byte) mul16u_compare::i#5
(byte) mul16u_compare::i#6
(byte) mul16u_compare::i#7
(byte) mul16u_compare::i#8
(byte) mul16u_compare::i#9
(byte) mul16u_compare::j
(byte) mul16u_compare::j#0
(byte) mul16u_compare::j#1
(byte) mul16u_compare::j#10
(byte) mul16u_compare::j#2
(byte) mul16u_compare::j#3
(byte) mul16u_compare::j#4
(byte) mul16u_compare::j#5
(byte) mul16u_compare::j#6
(byte) mul16u_compare::j#7
(byte) mul16u_compare::j#8
(byte) mul16u_compare::j#9
(dword) mul16u_compare::mf
(dword) mul16u_compare::mf#0
(dword) mul16u_compare::mf#1
(dword) mul16u_compare::mf#2
(dword) mul16u_compare::mf#3
(dword) mul16u_compare::mf#4
(dword) mul16u_compare::mf#5
(dword) mul16u_compare::mn
(dword) mul16u_compare::mn#0
(dword) mul16u_compare::mn#1
(dword) mul16u_compare::mn#2
(dword) mul16u_compare::mn#3
(dword) mul16u_compare::mn#4
(dword) mul16u_compare::mn#5
(dword) mul16u_compare::mn#6
(dword) mul16u_compare::ms
(dword) mul16u_compare::ms#0
(dword) mul16u_compare::ms#1
(dword) mul16u_compare::ms#2
(dword) mul16u_compare::ms#3
(dword) mul16u_compare::ms#4
(dword) mul16u_compare::ms#5
(dword) mul16u_compare::ms#6
(dword) mul16u_compare::ms#7
(byte) mul16u_compare::ok
(byte) mul16u_compare::ok#0
(byte) mul16u_compare::ok#1
(byte) mul16u_compare::ok#2
(byte) mul16u_compare::ok#3
(byte) mul16u_compare::ok#4
(const string) mul16u_compare::str = (string) ".@"
(const string) mul16u_compare::str1 = (string) "word multiply results match!@"
(void()) mul16u_error((word) mul16u_error::a , (word) mul16u_error::b , (dword) mul16u_error::ms , (dword) mul16u_error::mn , (dword) mul16u_error::mf)
(label) mul16u_error::@1
(label) mul16u_error::@10
(label) mul16u_error::@11
(label) mul16u_error::@2
(label) mul16u_error::@3
(label) mul16u_error::@4
(label) mul16u_error::@5
(label) mul16u_error::@6
(label) mul16u_error::@7
(label) mul16u_error::@8
(label) mul16u_error::@9
(label) mul16u_error::@return
(word) mul16u_error::a
(word) mul16u_error::a#0
(word) mul16u_error::a#1
(word) mul16u_error::a#2
(word) mul16u_error::b
(word) mul16u_error::b#0
(word) mul16u_error::b#1
(word) mul16u_error::b#2
(word) mul16u_error::b#3
(word) mul16u_error::b#4
(dword) mul16u_error::mf
(dword) mul16u_error::mf#0
(dword) mul16u_error::mf#1
(dword) mul16u_error::mf#10
(dword) mul16u_error::mf#2
(dword) mul16u_error::mf#3
(dword) mul16u_error::mf#4
(dword) mul16u_error::mf#5
(dword) mul16u_error::mf#6
(dword) mul16u_error::mf#7
(dword) mul16u_error::mf#8
(dword) mul16u_error::mf#9
(dword) mul16u_error::mn
(dword) mul16u_error::mn#0
(dword) mul16u_error::mn#1
(dword) mul16u_error::mn#2
(dword) mul16u_error::mn#3
(dword) mul16u_error::mn#4
(dword) mul16u_error::mn#5
(dword) mul16u_error::mn#6
(dword) mul16u_error::mn#7
(dword) mul16u_error::mn#8
(dword) mul16u_error::ms
(dword) mul16u_error::ms#0
(dword) mul16u_error::ms#1
(dword) mul16u_error::ms#2
(dword) mul16u_error::ms#3
(dword) mul16u_error::ms#4
(dword) mul16u_error::ms#5
(dword) mul16u_error::ms#6
(const string) mul16u_error::str = (string) "multiply mismatch @"
(const string) mul16u_error::str1 = (string) "*@"
(const string) mul16u_error::str2 = (string) " slow:@"
(const string) mul16u_error::str3 = (string) " / normal:@"
(const string) mul16u_error::str4 = (string) " / fast:@"
(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
(word~) mulf16s::$0
(word~) mulf16s::$1
(bool~) mulf16s::$10
(word~) mulf16s::$12
(word~) mulf16s::$13
(word~) mulf16s::$14
(signed dword~) mulf16s::$15
(word~) mulf16s::$16
(word~) mulf16s::$17
(dword~) mulf16s::$2
(bool~) mulf16s::$3
(bool~) mulf16s::$4
(word~) mulf16s::$6
(word~) mulf16s::$7
(word~) mulf16s::$8
(bool~) mulf16s::$9
(label) mulf16s::@1
(label) mulf16s::@2
(label) mulf16s::@3
(label) mulf16s::@4
(label) mulf16s::@6
(label) mulf16s::@return
(signed word) mulf16s::a
(signed word) mulf16s::a#0
(signed word) mulf16s::a#1
(signed word) mulf16s::a#2
(signed word) mulf16s::a#3
(signed word) mulf16s::a#4
(signed word) mulf16s::a#5
(signed word) mulf16s::b
(signed word) mulf16s::b#0
(signed word) mulf16s::b#1
(signed word) mulf16s::b#2
(signed word) mulf16s::b#3
(signed word) mulf16s::b#4
(dword) mulf16s::m
(dword) mulf16s::m#0
(dword) mulf16s::m#1
(dword) mulf16s::m#2
(dword) mulf16s::m#3
(dword) mulf16s::m#4
(dword) mulf16s::m#5
(dword) mulf16s::m#6
(signed dword) mulf16s::return
(signed dword) mulf16s::return#0
(signed dword) mulf16s::return#1
(signed dword) mulf16s::return#2
(signed dword) mulf16s::return#3
(signed dword) mulf16s::return#4
(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
(label) mulf16u::@return
(word) mulf16u::a
(word) mulf16u::a#0
(word) mulf16u::a#1
(word) mulf16u::a#2
(word) mulf16u::b
(word) mulf16u::b#0
(word) mulf16u::b#1
(word) mulf16u::b#2
(word*) mulf16u::memA
(word*) mulf16u::memA#0
(word*) mulf16u::memB
(word*) mulf16u::memB#0
(dword*) mulf16u::memR
(dword*) mulf16u::memR#0
(dword) mulf16u::return
(dword) mulf16u::return#0
(dword) mulf16u::return#1
(dword) mulf16u::return#2
(dword) mulf16u::return#3
(dword) mulf16u::return#4
(dword) mulf16u::return#5
(dword) mulf16u::return#6
(void()) mulf_init()
(byte*~) mulf_init::$0
(byte*~) mulf_init::$1
(signed byte/signed word/signed dword~) mulf_init::$10
(byte~) mulf_init::$11
(byte~) mulf_init::$12
(bool~) mulf_init::$13
(bool~) mulf_init::$14
(byte*~) mulf_init::$15
(bool~) mulf_init::$16
(byte*~) mulf_init::$17
(byte*~) mulf_init::$18
(byte*~) mulf_init::$19
(byte~) mulf_init::$2
(byte*~) mulf_init::$20
(bool~) mulf_init::$3
(bool~) mulf_init::$4
(byte~) mulf_init::$5
(byte~) mulf_init::$6
(word~) mulf_init::$7
(byte*~) mulf_init::$8
(bool~) mulf_init::$9
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#0
(byte) mulf_init::c#1
(byte) mulf_init::c#2
(byte) mulf_init::c#3
(byte) mulf_init::c#4
(byte) mulf_init::dir
(byte) mulf_init::dir#0
(byte) mulf_init::dir#1
(byte) mulf_init::dir#2
(byte) mulf_init::dir#3
(word) mulf_init::sqr
(word) mulf_init::sqr#0
(word) mulf_init::sqr#1
(word) mulf_init::sqr#2
(word) mulf_init::sqr#3
(word) mulf_init::sqr#4
(word) mulf_init::sqr#5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#0
(byte*) mulf_init::sqr1_hi#1
(byte*) mulf_init::sqr1_hi#2
(byte*) mulf_init::sqr1_hi#3
(byte*) mulf_init::sqr1_hi#4
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#0
(byte*) mulf_init::sqr1_lo#1
(byte*) mulf_init::sqr1_lo#2
(byte*) mulf_init::sqr1_lo#3
(byte*) mulf_init::sqr1_lo#4
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#0
(byte*) mulf_init::sqr2_hi#1
(byte*) mulf_init::sqr2_hi#2
(byte*) mulf_init::sqr2_hi#3
(byte*) mulf_init::sqr2_hi#4
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#0
(byte*) mulf_init::sqr2_lo#1
(byte*) mulf_init::sqr2_lo#2
(byte*) mulf_init::sqr2_lo#3
(byte*) mulf_init::sqr2_lo#4
(byte) mulf_init::x_2
(byte) mulf_init::x_2#0
(byte) mulf_init::x_2#1
(byte) mulf_init::x_2#2
(byte) mulf_init::x_2#3
(byte) mulf_init::x_2#4
(byte) mulf_init::x_255
(byte) mulf_init::x_255#0
(byte) mulf_init::x_255#1
(byte) mulf_init::x_255#2
(byte) mulf_init::x_255#3
(byte) mulf_init::x_255#4
(byte[$200]) mulf_sqr1_hi
(byte[$200]) mulf_sqr1_hi#0
(byte[$200]) mulf_sqr1_lo
(byte[$200]) mulf_sqr1_lo#0
(byte[$200]) mulf_sqr2_hi
(byte[$200]) mulf_sqr2_hi#0
(byte[$200]) mulf_sqr2_lo
(byte[$200]) mulf_sqr2_lo#0
(signed dword()) muls16s((signed word) muls16s::a , (signed word) muls16s::b)
(bool~) muls16s::$0
(bool~) muls16s::$1
(bool~) muls16s::$2
(signed dword~) muls16s::$3
(bool~) muls16s::$4
(signed dword~) muls16s::$5
(bool~) muls16s::$6
(label) muls16s::@1
(label) muls16s::@2
(label) muls16s::@3
(label) muls16s::@4
(label) muls16s::@5
(label) muls16s::@6
(label) muls16s::@7
(label) muls16s::@return
(signed word) muls16s::a
(signed word) muls16s::a#0
(signed word) muls16s::a#1
(signed word) muls16s::a#2
(signed word) muls16s::a#3
(signed word) muls16s::a#4
(signed word) muls16s::a#5
(signed word) muls16s::a#6
(signed word) muls16s::b
(signed word) muls16s::b#0
(signed word) muls16s::b#1
(signed word) muls16s::b#2
(signed word) muls16s::b#3
(signed word) muls16s::b#4
(signed word) muls16s::b#5
(signed word) muls16s::b#6
(signed word) muls16s::i
(signed word) muls16s::i#0
(signed word) muls16s::i#1
(signed word) muls16s::i#2
(signed word) muls16s::j
(signed word) muls16s::j#0
(signed word) muls16s::j#1
(signed word) muls16s::j#2
(signed dword) muls16s::m
(signed dword) muls16s::m#0
(signed dword) muls16s::m#1
(signed dword) muls16s::m#2
(signed dword) muls16s::m#3
(signed dword) muls16s::m#4
(signed dword) muls16s::m#5
(signed dword) muls16s::m#6
(signed dword) muls16s::m#7
(signed dword) muls16s::m#8
(signed dword) muls16s::m#9
(signed dword) muls16s::return
(signed dword) muls16s::return#0
(signed dword) muls16s::return#1
(signed dword) muls16s::return#2
(signed dword) muls16s::return#3
(signed dword) muls16s::return#4
(dword()) muls16u((word) muls16u::a , (word) muls16u::b)
(bool~) muls16u::$0
(bool~) muls16u::$1
(dword~) muls16u::$2
(bool~) muls16u::$3
(label) muls16u::@1
(label) muls16u::@2
(label) muls16u::@3
(label) muls16u::@return
(word) muls16u::a
(word) muls16u::a#0
(word) muls16u::a#1
(word) muls16u::a#2
(word) muls16u::a#3
(word) muls16u::b
(word) muls16u::b#0
(word) muls16u::b#1
(word) muls16u::b#2
(word) muls16u::b#3
(word) muls16u::i
(word) muls16u::i#0
(word) muls16u::i#1
(word) muls16u::i#2
(dword) muls16u::m
(dword) muls16u::m#0
(dword) muls16u::m#1
(dword) muls16u::m#2
(dword) muls16u::m#3
(dword) muls16u::m#4
(dword) muls16u::return
(dword) muls16u::return#0
(dword) muls16u::return#1
(dword) muls16u::return#2
(dword) muls16u::return#3
(dword) muls16u::return#4
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#141
(byte*) print_char_cursor#142
(byte*) print_char_cursor#143
(byte*) print_char_cursor#144
(byte*) print_char_cursor#145
(byte*) print_char_cursor#146
(byte*) print_char_cursor#147
(byte*) print_char_cursor#148
(byte*) print_char_cursor#149
(byte*) print_char_cursor#15
(byte*) print_char_cursor#150
(byte*) print_char_cursor#151
(byte*) print_char_cursor#152
(byte*) print_char_cursor#153
(byte*) print_char_cursor#154
(byte*) print_char_cursor#155
(byte*) print_char_cursor#156
(byte*) print_char_cursor#157
(byte*) print_char_cursor#158
(byte*) print_char_cursor#159
(byte*) print_char_cursor#16
(byte*) print_char_cursor#160
(byte*) print_char_cursor#161
(byte*) print_char_cursor#162
(byte*) print_char_cursor#163
(byte*) print_char_cursor#164
(byte*) print_char_cursor#165
(byte*) print_char_cursor#166
(byte*) print_char_cursor#167
(byte*) print_char_cursor#168
(byte*) print_char_cursor#169
(byte*) print_char_cursor#17
(byte*) print_char_cursor#170
(byte*) print_char_cursor#171
(byte*) print_char_cursor#172
(byte*) print_char_cursor#173
(byte*) print_char_cursor#174
(byte*) print_char_cursor#175
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(word~) print_dword::$2
(label) print_dword::@1
(label) print_dword::@2
(label) print_dword::@return
(dword) print_dword::dw
(dword) print_dword::dw#0
(dword) print_dword::dw#1
(dword) print_dword::dw#2
(dword) print_dword::dw#3
(dword) print_dword::dw#4
(dword) print_dword::dw#5
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#100
(byte*) print_line_cursor#101
(byte*) print_line_cursor#102
(byte*) print_line_cursor#103
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#84
(byte*) print_line_cursor#85
(byte*) print_line_cursor#86
(byte*) print_line_cursor#87
(byte*) print_line_cursor#88
(byte*) print_line_cursor#89
(byte*) print_line_cursor#9
(byte*) print_line_cursor#90
(byte*) print_line_cursor#91
(byte*) print_line_cursor#92
(byte*) print_line_cursor#93
(byte*) print_line_cursor#94
(byte*) print_line_cursor#95
(byte*) print_line_cursor#96
(byte*) print_line_cursor#97
(byte*) print_line_cursor#98
(byte*) print_line_cursor#99
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(void()) print_sdword((signed dword) print_sdword::dw)
(bool~) print_sdword::$0
(bool~) print_sdword::$1
(signed dword~) print_sdword::$3
(dword~) print_sdword::$4
(label) print_sdword::@1
(label) print_sdword::@2
(label) print_sdword::@3
(label) print_sdword::@4
(label) print_sdword::@return
(signed dword) print_sdword::dw
(signed dword) print_sdword::dw#0
(signed dword) print_sdword::dw#1
(signed dword) print_sdword::dw#2
(signed dword) print_sdword::dw#3
(signed dword) print_sdword::dw#4
(signed dword) print_sdword::dw#5
(signed dword) print_sdword::dw#6
(signed dword) print_sdword::dw#7
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#14
(byte*) print_str::str#15
(byte*) print_str::str#16
(byte*) print_str::str#17
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(signed word~) print_sword::$3
(word~) print_sword::$4
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5
(word) print_word::w#6

Inversing boolean not [28] (bool~) print_sword::$1 ← (signed word) print_sword::w#3 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [27] (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [76] (bool~) print_sdword::$1 ← (signed dword) print_sdword::dw#4 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [75] (bool~) print_sdword::$0 ← (signed dword) print_sdword::dw#4 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [140] (bool~) mul16u::$3 ← (byte/word~) mul16u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [139] (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [166] (bool~) mul16s::$4 ← (signed word) mul16s::a#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [165] (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [170] (bool~) mul16s::$10 ← (signed word) mul16s::b#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [169] (bool~) mul16s::$9 ← (signed word) mul16s::b#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [206] (bool~) mulf_init::$4 ← (byte~) mulf_init::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [205] (bool~) mulf_init::$3 ← (byte~) mulf_init::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [236] (bool~) mulf_init::$14 ← (byte) mulf_init::x_255#1 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [235] (bool~) mulf_init::$13 ← (byte) mulf_init::x_255#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [274] (bool~) mulf16s::$4 ← (signed word) mulf16s::a#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [273] (bool~) mulf16s::$3 ← (signed word) mulf16s::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [278] (bool~) mulf16s::$10 ← (signed word) mulf16s::b#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [277] (bool~) mulf16s::$9 ← (signed word) mulf16s::b#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [323] (bool~) muls16u::$1 ← (word) muls16u::a#1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [322] (bool~) muls16u::$0 ← (word) muls16u::a#1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [346] (bool~) muls16s::$2 ← (signed word) muls16s::a#2 <= (byte/signed byte/word/signed word/dword/signed dword) 0 from [345] (bool~) muls16s::$1 ← (signed word) muls16s::a#2 > (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [406] (bool~) mul16u_compare::$7 ← (dword) mul16u_compare::ms#1 == (dword) mul16u_compare::mf#0 from [405] (bool~) mul16u_compare::$6 ← (dword) mul16u_compare::ms#1 != (dword) mul16u_compare::mf#0
Inversing boolean not [410] (bool~) mul16u_compare::$9 ← (dword) mul16u_compare::ms#2 == (dword) mul16u_compare::mn#1 from [409] (bool~) mul16u_compare::$8 ← (dword) mul16u_compare::ms#2 != (dword) mul16u_compare::mn#1
Inversing boolean not [416] (bool~) mul16u_compare::$11 ← (byte) mul16u_compare::ok#3 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [415] (bool~) mul16u_compare::$10 ← (byte) mul16u_compare::ok#3 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [545] (bool~) mul16s_compare::$9 ← (signed dword) mul16s_compare::ms#1 == (signed dword) mul16s_compare::mf#0 from [544] (bool~) mul16s_compare::$8 ← (signed dword) mul16s_compare::ms#1 != (signed dword) mul16s_compare::mf#0
Inversing boolean not [549] (bool~) mul16s_compare::$11 ← (signed dword) mul16s_compare::ms#2 == (signed dword) mul16s_compare::mn#1 from [548] (bool~) mul16s_compare::$10 ← (signed dword) mul16s_compare::ms#2 != (signed dword) mul16s_compare::mn#1
Inversing boolean not [555] (bool~) mul16s_compare::$13 ← (byte) mul16s_compare::ok#3 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [554] (bool~) mul16s_compare::$12 ← (byte) mul16s_compare::ok#3 == (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#71 (byte*) print_char_cursor#165 (byte*) print_screen#8 (byte*) print_line_cursor#62 (byte*) print_char_cursor#158 (byte*) print_screen#7 (byte*) print_line_cursor#61 (byte*) print_char_cursor#157 (byte*) print_screen#6 (byte*) print_line_cursor#54 (byte*) print_char_cursor#147 (byte*) print_screen#5 
Alias (byte*) print_str::str#15 = (byte*) print_str::str#16 
Alias (byte*) print_char_cursor#128 = (byte*) print_char_cursor#65 (byte*) print_char_cursor#66 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#23 (byte*) print_char_cursor#3 (byte*) print_line_cursor#24 (byte*) print_char_cursor#68 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (word) print_word::w#0 = (word~) print_sword::$4 
Alias (byte*) print_char_cursor#5 = (byte*) print_char_cursor#69 (byte*) print_char_cursor#71 (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#131 = (byte*) print_char_cursor#149 
Alias (signed word) print_sword::w#3 = (signed word) print_sword::w#6 (signed word) print_sword::w#5 
Alias (byte*) print_char_cursor#6 = (byte*) print_char_cursor#70 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$3 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#5 = (word) print_word::w#6 
Alias (byte*) print_char_cursor#72 = (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#9 (byte*) print_char_cursor#73 (byte*) print_char_cursor#74 
Alias (word) print_word::w#1 = (word~) print_dword::$0 
Alias (dword) print_dword::dw#4 = (dword) print_dword::dw#5 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#75 
Alias (word) print_word::w#2 = (word~) print_dword::$2 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#76 (byte*) print_char_cursor#77 (byte*) print_char_cursor#13 
Alias (dword) print_dword::dw#0 = (dword~) print_sdword::$4 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#78 (byte*) print_char_cursor#80 (byte*) print_char_cursor#16 
Alias (byte*) print_char_cursor#135 = (byte*) print_char_cursor#150 
Alias (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#7 (signed dword) print_sdword::dw#6 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#79 
Alias (signed dword) print_sdword::dw#0 = (signed dword~) print_sdword::$3 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#81 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#82 (byte*) print_char_cursor#83 (byte*) print_char_cursor#19 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#85 (byte*) print_char_cursor#21 
Alias (byte*) print_line_cursor#25 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#22 (byte*) print_char_cursor#86 (byte*) print_line_cursor#4 (byte*) print_char_cursor#23 
Alias (word) mul16u::a#3 = (word) mul16u::a#4 (word) mul16u::a#7 
Alias (dword) mul16u::mb#3 = (dword) mul16u::mb#4 (dword) mul16u::mb#5 
Alias (dword) mul16u::res#2 = (dword) mul16u::res#5 (dword) mul16u::res#4 (dword) mul16u::return#0 (dword) mul16u::res#3 (dword) mul16u::return#4 (dword) mul16u::return#1 
Alias (word) mul16u::a#0 = (word~) mul16u::$5 
Alias (dword) mul16u::mb#1 = (dword~) mul16u::$6 
Alias (dword) mul16u::res#1 = (dword~) mul16u::$4 
Alias (word) mul16u::a#1 = (word~) mul16s::$0 
Alias (word) mul16u::b#0 = (word~) mul16s::$1 
Alias (dword) mul16u::return#2 = (dword) mul16u::return#5 
Alias (signed word) mul16s::a#1 = (signed word) mul16s::a#2 (signed word) mul16s::a#5 
Alias (signed word) mul16s::b#1 = (signed word) mul16s::b#4 (signed word) mul16s::b#3 
Alias (dword) mul16s::m#0 = (dword~) mul16s::$2 (dword) mul16s::m#3 
Alias (word~) mul16s::$16 = (word~) mul16s::$8 
Alias (signed dword) mul16s::return#0 = (signed dword~) mul16s::$15 (signed dword) mul16s::return#3 (signed dword) mul16s::return#1 
Alias (dword) mul16s::m#5 = (dword) mul16s::m#6 
Alias (signed word) mul16s::a#3 = (signed word) mul16s::a#4 
Alias (word~) mul16s::$17 = (word~) mul16s::$14 
Alias (byte*) mulf_init::sqr1_hi#0 = (byte*~) mulf_init::$0 
Alias (byte*) mulf_init::sqr1_lo#0 = (byte*~) mulf_init::$1 
Alias (word) mulf_init::sqr#1 = (word~) mulf_init::$7 
Alias (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#4 
Alias (word) mulf_init::sqr#4 = (word) mulf_init::sqr#5 
Alias (byte*) mulf_init::sqr1_lo#3 = (byte*) mulf_init::sqr1_lo#4 
Alias (byte*) mulf_init::sqr1_hi#3 = (byte*) mulf_init::sqr1_hi#4 
Alias (byte) mulf_init::c#1 = (byte) mulf_init::c#4 
Alias (byte) mulf_init::x_255#0 = (byte~) mulf_init::$11 
Alias (byte) mulf_init::x_255#1 = (byte~) mulf_init::$12 (byte) mulf_init::x_255#4 
Alias (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#4 
Alias (byte*) mulf_init::sqr2_hi#1 = (byte*) mulf_init::sqr2_hi#4 
Alias (dword) mulf16u::return#0 = (dword) mulf16u::return#4 (dword) mulf16u::return#1 
Alias (word) mulf16u::a#0 = (word~) mulf16s::$0 
Alias (word) mulf16u::b#0 = (word~) mulf16s::$1 
Alias (dword) mulf16u::return#2 = (dword) mulf16u::return#5 
Alias (signed word) mulf16s::a#1 = (signed word) mulf16s::a#2 (signed word) mulf16s::a#5 
Alias (signed word) mulf16s::b#1 = (signed word) mulf16s::b#4 (signed word) mulf16s::b#3 
Alias (dword) mulf16s::m#0 = (dword~) mulf16s::$2 (dword) mulf16s::m#3 
Alias (word~) mulf16s::$16 = (word~) mulf16s::$8 
Alias (signed dword) mulf16s::return#0 = (signed dword~) mulf16s::$15 (signed dword) mulf16s::return#3 (signed dword) mulf16s::return#1 
Alias (dword) mulf16s::m#5 = (dword) mulf16s::m#6 
Alias (signed word) mulf16s::a#3 = (signed word) mulf16s::a#4 
Alias (word~) mulf16s::$17 = (word~) mulf16s::$14 
Alias (byte*) BGCOL#1 = (byte*) BGCOL#33 (byte*) BGCOL#31 (byte*) BGCOL#32 
Alias (byte*) print_line_cursor#26 = (byte*) print_line_cursor#5 (byte*) print_line_cursor#45 
Alias (byte*) print_char_cursor#138 = (byte*) print_char_cursor#24 (byte*) print_char_cursor#87 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#88 
Alias (byte*) print_line_cursor#27 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#89 (byte*) print_char_cursor#90 (byte*) print_char_cursor#27 
Alias (byte*) print_line_cursor#28 = (byte*) print_line_cursor#7 (byte*) print_line_cursor#29 (byte*) print_line_cursor#8 
Alias (dword) muls16u::return#0 = (dword) muls16u::m#2 (dword) muls16u::return#3 (dword) muls16u::return#1 
Alias (dword) muls16u::m#0 = (dword) muls16u::m#4 
Alias (word) muls16u::b#2 = (word) muls16u::b#3 
Alias (word) muls16u::a#1 = (word) muls16u::a#3 
Alias (dword) muls16u::m#1 = (dword~) muls16u::$2 
Alias (signed dword) muls16s::m#0 = (signed dword) muls16s::m#8 (signed dword) muls16s::m#9 (signed dword) muls16s::m#7 (signed dword) muls16s::m#6 
Alias (signed word) muls16s::b#3 = (signed word) muls16s::b#4 (signed word) muls16s::b#5 (signed word) muls16s::b#6 
Alias (signed word) muls16s::a#1 = (signed word) muls16s::a#6 (signed word) muls16s::a#2 (signed word) muls16s::a#5 
Alias (signed dword) muls16s::m#1 = (signed dword~) muls16s::$3 
Alias (signed dword) muls16s::return#0 = (signed dword) muls16s::m#4 (signed dword) muls16s::return#3 (signed dword) muls16s::return#1 
Alias (signed dword) muls16s::m#2 = (signed dword~) muls16s::$5 
Alias (word) mul16u_compare::a#6 = (word) mul16u_compare::a#9 
Alias (word) mul16u_compare::b#6 = (word) mul16u_compare::b#9 
Alias (byte*) BGCOL#21 = (byte*) BGCOL#25 
Alias (byte) mul16u_compare::i#12 = (byte) mul16u_compare::i#13 
Alias (byte*) print_line_cursor#90 = (byte*) print_line_cursor#94 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#91 
Alias (word) mul16u_compare::a#1 = (word/signed dword/dword~) mul16u_compare::$1 (word) mul16u_compare::a#3 (word) mul16u_compare::a#4 (word) mul16u_compare::a#13 (word) mul16u_compare::a#14 
Alias (word) mul16u_compare::b#1 = (word/signed dword/dword~) mul16u_compare::$2 (word) mul16u_compare::b#3 (word) mul16u_compare::b#4 (word) mul16u_compare::b#13 (word) mul16u_compare::b#14 
Alias (dword) muls16u::return#2 = (dword) muls16u::return#4 
Alias (byte) mul16u_compare::j#10 = (byte) mul16u_compare::j#9 (byte) mul16u_compare::j#8 (byte) mul16u_compare::j#6 (byte) mul16u_compare::j#7 
Alias (byte*) BGCOL#11 = (byte*) BGCOL#17 (byte*) BGCOL#19 (byte*) BGCOL#15 (byte*) BGCOL#12 
Alias (byte) mul16u_compare::i#10 = (byte) mul16u_compare::i#11 (byte) mul16u_compare::i#9 (byte) mul16u_compare::i#7 (byte) mul16u_compare::i#8 
Alias (byte*) print_char_cursor#166 = (byte*) print_char_cursor#172 (byte*) print_char_cursor#174 (byte*) print_char_cursor#170 (byte*) print_char_cursor#167 
Alias (byte*) print_line_cursor#72 = (byte*) print_line_cursor#82 (byte*) print_line_cursor#86 (byte*) print_line_cursor#78 (byte*) print_line_cursor#73 
Alias (dword) mul16u_compare::ms#0 = (dword~) mul16u_compare::$3 (dword) mul16u_compare::ms#4 (dword) mul16u_compare::ms#1 (dword) mul16u_compare::ms#5 
Alias (dword) mul16u::return#3 = (dword) mul16u::return#6 
Alias (dword) mul16u_compare::mn#0 = (dword~) mul16u_compare::$4 (dword) mul16u_compare::mn#3 (dword) mul16u_compare::mn#4 
Alias (dword) mulf16u::return#3 = (dword) mulf16u::return#6 
Alias (dword) mul16u_compare::mf#0 = (dword~) mul16u_compare::$5 (dword) mul16u_compare::mf#5 
Alias (byte) mul16u_compare::j#4 = (byte) mul16u_compare::j#5 
Alias (byte*) BGCOL#7 = (byte*) BGCOL#8 
Alias (word) mul16u_compare::a#10 = (word) mul16u_compare::a#11 
Alias (word) mul16u_compare::b#10 = (word) mul16u_compare::b#11 
Alias (dword) mul16u_compare::ms#2 = (dword) mul16u_compare::ms#7 
Alias (dword) mul16u_compare::mn#1 = (dword) mul16u_compare::mn#6 
Alias (dword) mul16u_compare::mf#3 = (dword) mul16u_compare::mf#4 
Alias (byte) mul16u_compare::i#5 = (byte) mul16u_compare::i#6 
Alias (byte*) print_char_cursor#159 = (byte*) print_char_cursor#160 
Alias (byte*) print_line_cursor#63 = (byte*) print_line_cursor#64 
Alias (byte) mul16u_compare::j#2 = (byte) mul16u_compare::j#3 
Alias (word) mul16u_compare::a#12 = (word) mul16u_compare::a#7 (word) mul16u_compare::a#8 (word) mul16u_compare::a#5 
Alias (word) mul16u_compare::b#12 = (word) mul16u_compare::b#7 (word) mul16u_compare::b#8 (word) mul16u_compare::b#5 
Alias (byte) mul16u_compare::i#2 = (byte) mul16u_compare::i#3 (byte) mul16u_compare::i#4 
Alias (byte*) print_char_cursor#140 = (byte*) print_char_cursor#161 (byte*) print_char_cursor#153 (byte*) print_char_cursor#152 (byte*) print_char_cursor#141 
Alias (byte*) print_line_cursor#46 = (byte*) print_line_cursor#65 (byte*) print_line_cursor#55 (byte*) print_line_cursor#56 (byte*) print_line_cursor#47 
Alias (byte*) BGCOL#2 = (byte*) BGCOL#22 (byte*) BGCOL#5 (byte*) BGCOL#28 
Alias (dword) mul16u_compare::ms#3 = (dword) mul16u_compare::ms#6 
Alias (dword) mul16u_compare::mn#2 = (dword) mul16u_compare::mn#5 
Alias (dword) mul16u_compare::mf#1 = (dword) mul16u_compare::mf#2 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#92 
Alias (byte*) print_line_cursor#30 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#93 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#31 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#32 (byte*) print_line_cursor#48 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#94 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#95 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#33 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#96 
Alias (word) mul16u_error::a#1 = (word) mul16u_error::a#2 
Alias (word) mul16u_error::b#1 = (word) mul16u_error::b#3 (word) mul16u_error::b#4 (word) mul16u_error::b#2 
Alias (dword) mul16u_error::ms#1 = (dword) mul16u_error::ms#5 (dword) mul16u_error::ms#6 (dword) mul16u_error::ms#4 (dword) mul16u_error::ms#3 (dword) mul16u_error::ms#2 
Alias (dword) mul16u_error::mn#1 = (dword) mul16u_error::mn#7 (dword) mul16u_error::mn#8 (dword) mul16u_error::mn#6 (dword) mul16u_error::mn#5 (dword) mul16u_error::mn#4 (dword) mul16u_error::mn#3 (dword) mul16u_error::mn#2 
Alias (dword) mul16u_error::mf#1 = (dword) mul16u_error::mf#9 (dword) mul16u_error::mf#10 (dword) mul16u_error::mf#8 (dword) mul16u_error::mf#7 (dword) mul16u_error::mf#6 (dword) mul16u_error::mf#5 (dword) mul16u_error::mf#4 (dword) mul16u_error::mf#3 (dword) mul16u_error::mf#2 
Alias (byte*) print_line_cursor#102 = (byte*) print_line_cursor#99 (byte*) print_line_cursor#95 (byte*) print_line_cursor#91 (byte*) print_line_cursor#87 (byte*) print_line_cursor#83 (byte*) print_line_cursor#79 (byte*) print_line_cursor#74 (byte*) print_line_cursor#66 (byte*) print_line_cursor#57 (byte*) print_line_cursor#49 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#97 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#98 
Alias (byte*) print_char_cursor#36 = (byte*) print_char_cursor#99 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#37 
Alias (byte*) print_char_cursor#101 = (byte*) print_char_cursor#38 
Alias (byte*) print_char_cursor#102 = (byte*) print_char_cursor#39 
Alias (byte*) print_char_cursor#103 = (byte*) print_char_cursor#40 
Alias (byte*) print_char_cursor#104 = (byte*) print_char_cursor#41 
Alias (byte*) print_char_cursor#105 = (byte*) print_char_cursor#42 
Alias (byte*) print_char_cursor#106 = (byte*) print_char_cursor#43 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#34 (byte*) print_line_cursor#35 (byte*) print_line_cursor#14 
Alias (byte*) print_char_cursor#107 = (byte*) print_char_cursor#44 (byte*) print_char_cursor#108 (byte*) print_char_cursor#45 
Alias (signed word) mul16s_compare::a#0 = (signed word/signed dword~) mul16s_compare::$0 
Alias (signed word) mul16s_compare::b#0 = (signed word/signed dword~) mul16s_compare::$1 
Alias (signed word) mul16s_compare::a#6 = (signed word) mul16s_compare::a#9 
Alias (signed word) mul16s_compare::b#6 = (signed word) mul16s_compare::b#9 
Alias (byte*) BGCOL#23 = (byte*) BGCOL#26 
Alias (byte) mul16s_compare::i#12 = (byte) mul16s_compare::i#13 
Alias (byte*) print_line_cursor#92 = (byte*) print_line_cursor#96 
Alias (byte*) print_char_cursor#109 = (byte*) print_char_cursor#46 
Alias (signed word) mul16s_compare::a#1 = (signed dword/signed word~) mul16s_compare::$3 (signed word) mul16s_compare::a#3 (signed word) mul16s_compare::a#4 (signed word) mul16s_compare::a#13 (signed word) mul16s_compare::a#14 
Alias (signed word) mul16s_compare::b#1 = (signed dword/signed word~) mul16s_compare::$4 (signed word) mul16s_compare::b#3 (signed word) mul16s_compare::b#4 (signed word) mul16s_compare::b#13 (signed word) mul16s_compare::b#14 
Alias (signed dword) muls16s::return#2 = (signed dword) muls16s::return#4 
Alias (byte) mul16s_compare::j#10 = (byte) mul16s_compare::j#9 (byte) mul16s_compare::j#8 (byte) mul16s_compare::j#6 (byte) mul16s_compare::j#7 
Alias (byte*) BGCOL#13 = (byte*) BGCOL#18 (byte*) BGCOL#20 (byte*) BGCOL#16 (byte*) BGCOL#14 
Alias (byte) mul16s_compare::i#10 = (byte) mul16s_compare::i#11 (byte) mul16s_compare::i#9 (byte) mul16s_compare::i#7 (byte) mul16s_compare::i#8 
Alias (byte*) print_char_cursor#168 = (byte*) print_char_cursor#173 (byte*) print_char_cursor#175 (byte*) print_char_cursor#171 (byte*) print_char_cursor#169 
Alias (byte*) print_line_cursor#75 = (byte*) print_line_cursor#84 (byte*) print_line_cursor#88 (byte*) print_line_cursor#80 (byte*) print_line_cursor#76 
Alias (signed dword) mul16s_compare::ms#0 = (signed dword~) mul16s_compare::$5 (signed dword) mul16s_compare::ms#4 (signed dword) mul16s_compare::ms#1 (signed dword) mul16s_compare::ms#5 
Alias (signed dword) mul16s::return#2 = (signed dword) mul16s::return#4 
Alias (signed dword) mul16s_compare::mn#0 = (signed dword~) mul16s_compare::$6 (signed dword) mul16s_compare::mn#3 (signed dword) mul16s_compare::mn#4 
Alias (signed dword) mulf16s::return#2 = (signed dword) mulf16s::return#4 
Alias (signed dword) mul16s_compare::mf#0 = (signed dword~) mul16s_compare::$7 (signed dword) mul16s_compare::mf#5 
Alias (byte) mul16s_compare::j#4 = (byte) mul16s_compare::j#5 
Alias (byte*) BGCOL#10 = (byte*) BGCOL#9 
Alias (signed word) mul16s_compare::a#10 = (signed word) mul16s_compare::a#11 
Alias (signed word) mul16s_compare::b#10 = (signed word) mul16s_compare::b#11 
Alias (signed dword) mul16s_compare::ms#2 = (signed dword) mul16s_compare::ms#7 
Alias (signed dword) mul16s_compare::mn#1 = (signed dword) mul16s_compare::mn#6 
Alias (signed dword) mul16s_compare::mf#3 = (signed dword) mul16s_compare::mf#4 
Alias (byte) mul16s_compare::i#5 = (byte) mul16s_compare::i#6 
Alias (byte*) print_char_cursor#162 = (byte*) print_char_cursor#163 
Alias (byte*) print_line_cursor#67 = (byte*) print_line_cursor#68 
Alias (byte) mul16s_compare::j#2 = (byte) mul16s_compare::j#3 
Alias (signed word) mul16s_compare::a#12 = (signed word) mul16s_compare::a#7 (signed word) mul16s_compare::a#8 (signed word) mul16s_compare::a#5 
Alias (signed word) mul16s_compare::b#12 = (signed word) mul16s_compare::b#7 (signed word) mul16s_compare::b#8 (signed word) mul16s_compare::b#5 
Alias (byte) mul16s_compare::i#2 = (byte) mul16s_compare::i#3 (byte) mul16s_compare::i#4 
Alias (byte*) print_char_cursor#144 = (byte*) print_char_cursor#164 (byte*) print_char_cursor#156 (byte*) print_char_cursor#155 (byte*) print_char_cursor#145 
Alias (byte*) print_line_cursor#50 = (byte*) print_line_cursor#69 (byte*) print_line_cursor#58 (byte*) print_line_cursor#59 (byte*) print_line_cursor#51 
Alias (byte*) BGCOL#24 = (byte*) BGCOL#6 (byte*) BGCOL#3 (byte*) BGCOL#30 
Alias (signed dword) mul16s_compare::ms#3 = (signed dword) mul16s_compare::ms#6 
Alias (signed dword) mul16s_compare::mn#2 = (signed dword) mul16s_compare::mn#5 
Alias (signed dword) mul16s_compare::mf#1 = (signed dword) mul16s_compare::mf#2 
Alias (byte*) print_char_cursor#110 = (byte*) print_char_cursor#47 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#36 
Alias (byte*) print_char_cursor#111 = (byte*) print_char_cursor#48 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#37 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#38 (byte*) print_line_cursor#52 
Alias (byte*) print_char_cursor#112 = (byte*) print_char_cursor#49 
Alias (byte*) print_char_cursor#113 = (byte*) print_char_cursor#50 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#39 
Alias (byte*) print_char_cursor#114 = (byte*) print_char_cursor#51 
Alias (signed word) mul16s_error::a#1 = (signed word) mul16s_error::a#2 
Alias (signed word) mul16s_error::b#1 = (signed word) mul16s_error::b#3 (signed word) mul16s_error::b#4 (signed word) mul16s_error::b#2 
Alias (signed dword) mul16s_error::ms#1 = (signed dword) mul16s_error::ms#5 (signed dword) mul16s_error::ms#6 (signed dword) mul16s_error::ms#4 (signed dword) mul16s_error::ms#3 (signed dword) mul16s_error::ms#2 
Alias (signed dword) mul16s_error::mn#1 = (signed dword) mul16s_error::mn#7 (signed dword) mul16s_error::mn#8 (signed dword) mul16s_error::mn#6 (signed dword) mul16s_error::mn#5 (signed dword) mul16s_error::mn#4 (signed dword) mul16s_error::mn#3 (signed dword) mul16s_error::mn#2 
Alias (signed dword) mul16s_error::mf#1 = (signed dword) mul16s_error::mf#9 (signed dword) mul16s_error::mf#10 (signed dword) mul16s_error::mf#8 (signed dword) mul16s_error::mf#7 (signed dword) mul16s_error::mf#6 (signed dword) mul16s_error::mf#5 (signed dword) mul16s_error::mf#4 (signed dword) mul16s_error::mf#3 (signed dword) mul16s_error::mf#2 
Alias (byte*) print_line_cursor#101 = (byte*) print_line_cursor#103 (byte*) print_line_cursor#97 (byte*) print_line_cursor#93 (byte*) print_line_cursor#89 (byte*) print_line_cursor#85 (byte*) print_line_cursor#81 (byte*) print_line_cursor#77 (byte*) print_line_cursor#70 (byte*) print_line_cursor#60 (byte*) print_line_cursor#53 
Alias (byte*) print_char_cursor#115 = (byte*) print_char_cursor#52 
Alias (byte*) print_char_cursor#116 = (byte*) print_char_cursor#53 
Alias (byte*) print_char_cursor#117 = (byte*) print_char_cursor#54 
Alias (byte*) print_char_cursor#118 = (byte*) print_char_cursor#55 
Alias (byte*) print_char_cursor#119 = (byte*) print_char_cursor#56 
Alias (byte*) print_char_cursor#120 = (byte*) print_char_cursor#57 
Alias (byte*) print_char_cursor#121 = (byte*) print_char_cursor#58 
Alias (byte*) print_char_cursor#122 = (byte*) print_char_cursor#59 
Alias (byte*) print_char_cursor#123 = (byte*) print_char_cursor#60 
Alias (byte*) print_char_cursor#124 = (byte*) print_char_cursor#61 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#40 (byte*) print_line_cursor#41 (byte*) print_line_cursor#20 
Alias (byte*) print_char_cursor#125 = (byte*) print_char_cursor#62 (byte*) print_char_cursor#126 (byte*) print_char_cursor#63 
Alias (byte*) BGCOL#0 = (byte*) BGCOL#4 
Alias (byte*) print_line_cursor#21 = (byte*) print_line_cursor#42 
Alias (byte*) print_char_cursor#127 = (byte*) print_char_cursor#64 
Successful SSA optimization Pass2AliasElimination
Alias (word) mul16u::a#3 = (word) mul16u::a#5 
Alias (dword) mul16u::mb#2 = (dword) mul16u::mb#3 
Alias (signed word) mul16s::b#1 = (signed word) mul16s::b#2 
Alias (signed word) mul16s::a#1 = (signed word) mul16s::a#3 
Alias (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#3 
Alias (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#3 
Alias (byte) mulf_init::c#1 = (byte) mulf_init::c#3 
Alias (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#3 
Alias (byte) mulf_init::x_255#1 = (byte) mulf_init::x_255#3 
Alias (byte*) mulf_init::sqr2_hi#1 = (byte*) mulf_init::sqr2_hi#3 
Alias (signed word) mulf16s::b#1 = (signed word) mulf16s::b#2 
Alias (signed word) mulf16s::a#1 = (signed word) mulf16s::a#3 
Alias (dword) mul16u_compare::ms#0 = (dword) mul16u_compare::ms#2 (dword) mul16u_compare::ms#3 
Alias (dword) mul16u_compare::mn#0 = (dword) mul16u_compare::mn#1 (dword) mul16u_compare::mn#2 
Alias (byte) mul16u_compare::j#10 = (byte) mul16u_compare::j#4 (byte) mul16u_compare::j#2 
Alias (byte*) BGCOL#11 = (byte*) BGCOL#7 (byte*) BGCOL#2 
Alias (word) mul16u_compare::a#1 = (word) mul16u_compare::a#10 (word) mul16u_compare::a#12 
Alias (word) mul16u_compare::b#1 = (word) mul16u_compare::b#10 (word) mul16u_compare::b#12 
Alias (dword) mul16u_compare::mf#0 = (dword) mul16u_compare::mf#3 (dword) mul16u_compare::mf#1 
Alias (byte) mul16u_compare::i#10 = (byte) mul16u_compare::i#5 (byte) mul16u_compare::i#2 
Alias (byte*) print_char_cursor#140 = (byte*) print_char_cursor#159 (byte*) print_char_cursor#166 
Alias (byte*) print_line_cursor#46 = (byte*) print_line_cursor#63 (byte*) print_line_cursor#72 
Alias (signed dword) mul16s_compare::ms#0 = (signed dword) mul16s_compare::ms#2 (signed dword) mul16s_compare::ms#3 
Alias (signed dword) mul16s_compare::mn#0 = (signed dword) mul16s_compare::mn#1 (signed dword) mul16s_compare::mn#2 
Alias (byte) mul16s_compare::j#10 = (byte) mul16s_compare::j#4 (byte) mul16s_compare::j#2 
Alias (byte*) BGCOL#10 = (byte*) BGCOL#13 (byte*) BGCOL#24 
Alias (signed word) mul16s_compare::a#1 = (signed word) mul16s_compare::a#10 (signed word) mul16s_compare::a#12 
Alias (signed word) mul16s_compare::b#1 = (signed word) mul16s_compare::b#10 (signed word) mul16s_compare::b#12 
Alias (signed dword) mul16s_compare::mf#0 = (signed dword) mul16s_compare::mf#3 (signed dword) mul16s_compare::mf#1 
Alias (byte) mul16s_compare::i#10 = (byte) mul16s_compare::i#5 (byte) mul16s_compare::i#2 
Alias (byte*) print_char_cursor#144 = (byte*) print_char_cursor#162 (byte*) print_char_cursor#168 
Alias (byte*) print_line_cursor#50 = (byte*) print_line_cursor#67 (byte*) print_line_cursor#75 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#67
Self Phi Eliminated (byte*) print_line_cursor#25
Self Phi Eliminated (word) muls16u::b#1
Self Phi Eliminated (word) muls16u::a#2
Self Phi Eliminated (signed word) muls16s::b#1
Self Phi Eliminated (signed word) muls16s::a#3
Self Phi Eliminated (signed word) muls16s::b#2
Self Phi Eliminated (signed word) muls16s::a#4
Self Phi Eliminated (byte*) BGCOL#11
Self Phi Eliminated (byte) mul16u_compare::i#10
Self Phi Eliminated (byte*) print_char_cursor#140
Self Phi Eliminated (byte*) print_line_cursor#46
Self Phi Eliminated (byte*) BGCOL#10
Self Phi Eliminated (byte) mul16s_compare::i#10
Self Phi Eliminated (byte*) print_char_cursor#144
Self Phi Eliminated (byte*) print_line_cursor#50
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_char_cursor#67 (byte*) print_char_cursor#129
Redundant Phi (byte*) print_char_cursor#5 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#6 (byte*) print_char_cursor#20
Redundant Phi (byte*) print_char_cursor#72 (byte*) print_char_cursor#18
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#18
Redundant Phi (byte*) print_char_cursor#11 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#12 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_char_cursor#20
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_char_cursor#20
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_char_cursor#20
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#4
Redundant Phi (byte*) print_line_cursor#25 (byte*) print_screen#1
Redundant Phi (signed word) mul16s::a#1 (signed word) mul16s::a#0
Redundant Phi (signed word) mul16s::b#1 (signed word) mul16s::b#0
Redundant Phi (signed word) mulf16s::a#1 (signed word) mulf16s::a#0
Redundant Phi (signed word) mulf16s::b#1 (signed word) mulf16s::b#0
Redundant Phi (byte*) BGCOL#1 (byte*) BGCOL#0
Redundant Phi (byte*) print_screen#4 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#44 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_char_cursor#137 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#26 (byte*) print_line_cursor#25
Redundant Phi (byte*) print_char_cursor#138 (byte*) print_line_cursor#25
Redundant Phi (byte*) print_char_cursor#25 (byte*) print_char_cursor#30
Redundant Phi (byte*) print_line_cursor#27 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#26 (byte*) print_char_cursor#111
Redundant Phi (byte*) print_line_cursor#28 (byte*) print_line_cursor#16
Redundant Phi (word) muls16u::a#1 (word) muls16u::a#0
Redundant Phi (word) muls16u::b#2 (word) muls16u::b#0
Redundant Phi (word) muls16u::b#1 (word) muls16u::b#2
Redundant Phi (word) muls16u::a#2 (word) muls16u::a#1
Redundant Phi (signed word) muls16s::a#1 (signed word) muls16s::a#0
Redundant Phi (signed word) muls16s::b#3 (signed word) muls16s::b#0
Redundant Phi (signed word) muls16s::b#1 (signed word) muls16s::b#3
Redundant Phi (signed word) muls16s::a#3 (signed word) muls16s::a#1
Redundant Phi (signed word) muls16s::b#2 (signed word) muls16s::b#3
Redundant Phi (signed word) muls16s::a#4 (signed word) muls16s::a#1
Redundant Phi (byte*) print_char_cursor#151 (byte*) print_char_cursor#138
Redundant Phi (byte*) BGCOL#27 (byte*) BGCOL#1
Redundant Phi (byte*) print_line_cursor#98 (byte*) print_line_cursor#26
Redundant Phi (byte*) print_char_cursor#28 (byte*) print_char_cursor#128
Redundant Phi (byte*) BGCOL#11 (byte*) BGCOL#21
Redundant Phi (byte) mul16u_compare::i#10 (byte) mul16u_compare::i#12
Redundant Phi (byte*) print_char_cursor#140 (byte*) print_char_cursor#28
Redundant Phi (byte*) print_line_cursor#46 (byte*) print_line_cursor#90
Redundant Phi (byte*) print_char_cursor#29 (byte*) print_char_cursor#107
Redundant Phi (byte*) print_line_cursor#30 (byte*) print_line_cursor#13
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#31 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#32 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#33 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#142 (byte*) print_char_cursor#140
Redundant Phi (word) mul16u_error::a#1 (word) mul16u_error::a#0
Redundant Phi (word) mul16u_error::b#1 (word) mul16u_error::b#0
Redundant Phi (dword) mul16u_error::ms#1 (dword) mul16u_error::ms#0
Redundant Phi (dword) mul16u_error::mn#1 (dword) mul16u_error::mn#0
Redundant Phi (dword) mul16u_error::mf#1 (dword) mul16u_error::mf#0
Redundant Phi (byte*) print_line_cursor#102 (byte*) print_line_cursor#46
Redundant Phi (byte*) print_char_cursor#34 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#35 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#36 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#100 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#101 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#102 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#103 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#104 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#105 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#106 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#107 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#154 (byte*) print_char_cursor#25
Redundant Phi (byte*) BGCOL#29 (byte*) BGCOL#1
Redundant Phi (byte*) print_line_cursor#100 (byte*) print_line_cursor#27
Redundant Phi (byte*) print_char_cursor#109 (byte*) print_char_cursor#128
Redundant Phi (byte*) BGCOL#10 (byte*) BGCOL#23
Redundant Phi (byte) mul16s_compare::i#10 (byte) mul16s_compare::i#12
Redundant Phi (byte*) print_char_cursor#144 (byte*) print_char_cursor#109
Redundant Phi (byte*) print_line_cursor#50 (byte*) print_line_cursor#92
Redundant Phi (byte*) print_char_cursor#110 (byte*) print_char_cursor#125
Redundant Phi (byte*) print_line_cursor#15 (byte*) print_line_cursor#19
Redundant Phi (byte*) print_line_cursor#17 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#112 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#113 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_line_cursor#18 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#114 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#146 (byte*) print_char_cursor#144
Redundant Phi (signed word) mul16s_error::a#1 (signed word) mul16s_error::a#0
Redundant Phi (signed word) mul16s_error::b#1 (signed word) mul16s_error::b#0
Redundant Phi (signed dword) mul16s_error::ms#1 (signed dword) mul16s_error::ms#0
Redundant Phi (signed dword) mul16s_error::mn#1 (signed dword) mul16s_error::mn#0
Redundant Phi (signed dword) mul16s_error::mf#1 (signed dword) mul16s_error::mf#0
Redundant Phi (byte*) print_line_cursor#101 (byte*) print_line_cursor#50
Redundant Phi (byte*) print_char_cursor#115 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#116 (byte*) print_char_cursor#5
Redundant Phi (byte*) print_char_cursor#117 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#118 (byte*) print_char_cursor#5
Redundant Phi (byte*) print_char_cursor#119 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#120 (byte*) print_char_cursor#14
Redundant Phi (byte*) print_char_cursor#121 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#122 (byte*) print_char_cursor#14
Redundant Phi (byte*) print_char_cursor#123 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#124 (byte*) print_char_cursor#14
Redundant Phi (byte*) print_line_cursor#19 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#125 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#21 (byte*) print_line_cursor#28
Redundant Phi (byte*) print_char_cursor#127 (byte*) print_char_cursor#26
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) print_char_cursor#131 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#135 (byte*) print_char_cursor#128
Redundant Phi (byte*) print_char_cursor#30 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#111 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#16 (byte*) print_line_cursor#1
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_str::$0 [6] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [19] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1
Simple Condition (bool~) print_sword::$1 [29] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
Simple Condition (bool~) print_sdword::$1 [77] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1
Simple Condition (bool~) print_cls::$1 [123] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) mul16u::$0 [136] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [141] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
Simple Condition (bool~) mul16s::$4 [167] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1
Simple Condition (bool~) mul16s::$10 [171] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2
Simple Condition (bool~) mulf_init::$4 [207] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2
Simple Condition (bool~) mulf_init::$9 [219] if((byte*) mulf_init::sqr1_lo#1!=(byte*~) mulf_init::$8) goto mulf_init::@1
Simple Condition (bool~) mulf_init::$14 [237] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@4
Simple Condition (bool~) mulf_init::$16 [242] if((byte*) mulf_init::sqr2_lo#1!=(byte*~) mulf_init::$15) goto mulf_init::@3
Simple Condition (bool~) mulf16s::$4 [275] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1
Simple Condition (bool~) mulf16s::$10 [279] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2
Simple Condition (bool~) muls16u::$1 [324] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1
Simple Condition (bool~) muls16u::$3 [334] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2
Simple Condition (bool~) muls16s::$0 [341] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@1
Simple Condition (bool~) muls16s::$2 [347] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@2
Simple Condition (bool~) muls16s::$4 [356] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3
Simple Condition (bool~) muls16s::$6 [364] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5
Simple Condition (bool~) mul16u_compare::$7 [407] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3
Simple Condition (bool~) mul16u_compare::$9 [411] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@4
Simple Condition (bool~) mul16u_compare::$11 [417] if((byte) mul16u_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u_compare::@5
Simple Condition (bool~) mul16u_compare::$13 [423] if((byte) mul16u_compare::j#1!=rangelast(0,$f)) goto mul16u_compare::@2
Simple Condition (bool~) mul16u_compare::$14 [442] if((byte) mul16u_compare::i#1!=rangelast(0,$f)) goto mul16u_compare::@1
Simple Condition (bool~) mul16s_compare::$9 [546] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3
Simple Condition (bool~) mul16s_compare::$11 [550] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@4
Simple Condition (bool~) mul16s_compare::$13 [556] if((byte) mul16s_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s_compare::@5
Simple Condition (bool~) mul16s_compare::$15 [562] if((byte) mul16s_compare::j#1!=rangelast(0,$f)) goto mul16s_compare::@2
Simple Condition (bool~) mul16s_compare::$16 [581] if((byte) mul16s_compare::i#1!=rangelast(0,$f)) goto mul16s_compare::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = ((byte*))$400
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte[]) print_hextab#0 = $0
Constant (const dword) mul16u::res#0 = 0
Constant (const byte[$200]) mulf_sqr1_lo#0 = { fill( $200, 0) }
Constant (const byte[$200]) mulf_sqr1_hi#0 = { fill( $200, 0) }
Constant (const byte[$200]) mulf_sqr2_lo#0 = { fill( $200, 0) }
Constant (const byte[$200]) mulf_sqr2_hi#0 = { fill( $200, 0) }
Constant (const word) mulf_init::sqr#0 = 0
Constant (const byte) mulf_init::x_2#0 = 0
Constant (const byte) mulf_init::c#0 = 0
Constant (const signed byte/signed word/signed dword) mulf_init::$10 = -1
Constant (const byte) mulf_init::dir#0 = $ff
Constant (const byte) mulf_init::dir#1 = 1
Constant (const word*) mulf16u::memA#0 = ((word*))$f8
Constant (const word*) mulf16u::memB#0 = ((word*))$fa
Constant (const dword*) mulf16u::memR#0 = ((dword*))$fc
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const dword) muls16u::m#0 = 0
Constant (const word) muls16u::i#0 = 0
Constant (const signed dword) muls16s::m#0 = 0
Constant (const signed word) muls16s::i#0 = 0
Constant (const signed word) muls16s::j#0 = 0
Constant (const word) mul16u_compare::a#0 = 0
Constant (const word) mul16u_compare::b#0 = 0
Constant (const byte) mul16u_compare::i#0 = 0
Constant (const byte*) print_str::str#1 = mul16u_compare::str
Constant (const byte) mul16u_compare::j#0 = 0
Constant (const byte) mul16u_compare::ok#0 = 1
Constant (const byte) mul16u_compare::ok#1 = 0
Constant (const byte) mul16u_compare::ok#2 = 0
Constant (const byte*) print_str::str#2 = mul16u_compare::str1
Constant (const byte*) print_str::str#3 = mul16u_error::str
Constant (const byte*) print_str::str#4 = mul16u_error::str1
Constant (const byte*) print_str::str#5 = mul16u_error::str2
Constant (const byte*) print_str::str#6 = mul16u_error::str3
Constant (const byte*) print_str::str#7 = mul16u_error::str4
Constant (const signed word) mul16s_compare::a#0 = -$7fff
Constant (const signed word) mul16s_compare::b#0 = -$7fff
Constant (const byte) mul16s_compare::i#0 = 0
Constant (const byte*) print_str::str#8 = mul16s_compare::str
Constant (const byte) mul16s_compare::j#0 = 0
Constant (const byte) mul16s_compare::ok#0 = 1
Constant (const byte) mul16s_compare::ok#1 = 0
Constant (const byte) mul16s_compare::ok#2 = 0
Constant (const byte*) print_str::str#9 = mul16s_compare::str1
Constant (const byte*) print_str::str#10 = mul16s_error::str
Constant (const byte*) print_str::str#11 = mul16s_error::str1
Constant (const byte*) print_str::str#12 = mul16s_error::str2
Constant (const byte*) print_str::str#13 = mul16s_error::str3
Constant (const byte*) print_str::str#14 = mul16s_error::str4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const byte*) mulf_init::sqr1_hi#0 = mulf_sqr1_hi#0+1
Constant (const byte*) mulf_init::sqr1_lo#0 = mulf_sqr1_lo#0+1
Constant (const byte*) mulf_init::$8 = mulf_sqr1_lo#0+$200
Constant (const byte) mulf_init::x_255#0 = ((byte))mulf_init::$10
Constant (const byte*) mulf_init::sqr2_hi#0 = mulf_sqr2_hi#0
Constant (const byte*) mulf_init::sqr2_lo#0 = mulf_sqr2_lo#0
Constant (const byte*) mulf_init::$15 = mulf_sqr2_lo#0+$1ff
Constant (const byte*) mulf_init::$17 = mulf_sqr2_lo#0+$1ff
Constant (const byte*) mulf_init::$18 = mulf_sqr1_lo#0+$100
Constant (const byte*) mulf_init::$19 = mulf_sqr2_hi#0+$1ff
Constant (const byte*) mulf_init::$20 = mulf_sqr1_hi#0+$100
Successful SSA optimization Pass2ConstantIdentification
Successful SSA optimization Pass2ConstantStringConsolidation
Eliminating Noop Cast (word) print_word::w#0 ← ((word)) (signed word) print_sword::w#4
Eliminating Noop Cast (word) mul16u::a#1 ← ((word)) (signed word) mul16s::a#0
Eliminating Noop Cast (word) mul16u::b#0 ← ((word)) (signed word) mul16s::b#0
Eliminating Noop Cast (word~) mul16s::$7 ← ((word)) (signed word) mul16s::b#0
Eliminating Noop Cast (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a#0
Eliminating Noop Cast (word) mulf16u::a#0 ← ((word)) (signed word) mulf16s::a#0
Eliminating Noop Cast (word) mulf16u::b#0 ← ((word)) (signed word) mulf16s::b#0
Eliminating Noop Cast (word~) mulf16s::$7 ← ((word)) (signed word) mulf16s::b#0
Eliminating Noop Cast (word~) mulf16s::$13 ← ((word)) (signed word) mulf16s::a#0
Successful SSA optimization Pass2NopCastElimination
Resolved ranged next value mul16u_compare::j#1 ← ++ mul16u_compare::j#10 to ++
Resolved ranged comparison value if(mul16u_compare::j#1!=rangelast(0,$f)) goto mul16u_compare::@2 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mul16u_compare::i#1 ← ++ mul16u_compare::i#12 to ++
Resolved ranged comparison value if(mul16u_compare::i#1!=rangelast(0,$f)) goto mul16u_compare::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mul16s_compare::j#1 ← ++ mul16s_compare::j#10 to ++
Resolved ranged comparison value if(mul16s_compare::j#1!=rangelast(0,$f)) goto mul16s_compare::@2 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value mul16s_compare::i#1 ← ++ mul16s_compare::i#12 to ++
Resolved ranged comparison value if(mul16s_compare::i#1!=rangelast(0,$f)) goto mul16s_compare::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_dword::@2
Culled Empty Block (label) print_sdword::@3
Culled Empty Block (label) @12
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) @24
Culled Empty Block (label) mulf_init::@6
Culled Empty Block (label) @33
Culled Empty Block (label) main::@4
Culled Empty Block (label) muls16u::@3
Culled Empty Block (label) muls16s::@1
Culled Empty Block (label) muls16s::@2
Culled Empty Block (label) muls16s::@7
Culled Empty Block (label) mul16u_compare::@12
Culled Empty Block (label) mul16u_compare::@16
Culled Empty Block (label) mul16u_compare::@19
Culled Empty Block (label) mul16u_error::@11
Culled Empty Block (label) mul16s_compare::@12
Culled Empty Block (label) mul16s_compare::@16
Culled Empty Block (label) mul16s_compare::@19
Culled Empty Block (label) mul16s_error::@11
Culled Empty Block (label) @41
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (byte*) BGCOL#21
Self Phi Eliminated (byte*) print_line_cursor#90
Self Phi Eliminated (byte*) BGCOL#23
Self Phi Eliminated (byte*) print_line_cursor#92
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) BGCOL#21 (const byte*) BGCOL#0
Redundant Phi (byte*) print_line_cursor#90 (const byte*) print_line_cursor#0
Redundant Phi (byte*) BGCOL#23 (const byte*) BGCOL#0
Redundant Phi (byte*) print_line_cursor#92 (byte*) print_line_cursor#1
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte*) print_str::str#10
Inlining constant with var siblings (const byte*) print_str::str#11
Inlining constant with var siblings (const byte*) print_str::str#12
Inlining constant with var siblings (const byte*) print_str::str#13
Inlining constant with var siblings (const byte*) print_str::str#14
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const word) mulf_init::sqr#0
Inlining constant with var siblings (const byte) mulf_init::x_2#0
Inlining constant with var siblings (const byte) mulf_init::c#0
Inlining constant with var siblings (const byte) mulf_init::dir#0
Inlining constant with var siblings (const byte) mulf_init::dir#1
Inlining constant with var siblings (const byte*) mulf_init::sqr1_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_lo#0
Inlining constant with var siblings (const byte) mulf_init::x_255#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_lo#0
Inlining constant with var siblings (const dword) muls16u::m#0
Inlining constant with var siblings (const word) muls16u::i#0
Inlining constant with var siblings (const signed dword) muls16s::m#0
Inlining constant with var siblings (const signed word) muls16s::i#0
Inlining constant with var siblings (const signed word) muls16s::j#0
Inlining constant with var siblings (const word) mul16u_compare::a#0
Inlining constant with var siblings (const word) mul16u_compare::b#0
Inlining constant with var siblings (const byte) mul16u_compare::i#0
Inlining constant with var siblings (const byte) mul16u_compare::j#0
Inlining constant with var siblings (const byte) mul16u_compare::ok#0
Inlining constant with var siblings (const byte) mul16u_compare::ok#1
Inlining constant with var siblings (const byte) mul16u_compare::ok#2
Inlining constant with var siblings (const signed word) mul16s_compare::a#0
Inlining constant with var siblings (const signed word) mul16s_compare::b#0
Inlining constant with var siblings (const byte) mul16s_compare::i#0
Inlining constant with var siblings (const byte) mul16s_compare::j#0
Inlining constant with var siblings (const byte) mul16s_compare::ok#0
Inlining constant with var siblings (const byte) mul16s_compare::ok#1
Inlining constant with var siblings (const byte) mul16s_compare::ok#2
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined mulf_init::sqr2_lo#0 = (const byte[$200]) mulf_sqr2_lo#0
Constant inlined mul16u_error::str1 = (const string) str1
Constant inlined mul16u_error::str3 = (const string) str3
Constant inlined mulf_init::sqr2_hi#0 = (const byte[$200]) mulf_sqr2_hi#0
Constant inlined mul16u_error::str2 = (const string) str2
Constant inlined mul16u_error::str4 = (const string) str4
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined muls16s::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u_compare::ok#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::dir#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::dir#0 = (byte/word/signed word/dword/signed dword) $ff
Constant inlined muls16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u_compare::ok#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::$20 = (const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100
Constant inlined mul16u_compare::ok#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s_error::str1 = (const string) str1
Constant inlined muls16u::m#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s_compare::a#0 = -(word/signed word/dword/signed dword) $7fff
Constant inlined mulf_init::x_255#0 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mul16s_error::str4 = (const string) str4
Constant inlined mul16s_error::str3 = (const string) str3
Constant inlined mul16s_error::str2 = (const string) str2
Constant inlined mulf_init::x_2#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u_compare::a#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s_compare::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u_compare::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_line_cursor#0 = ((byte*))(word/signed word/dword/signed dword) $400
Constant inlined print_str::str#9 = (const string) mul16s_compare::str1
Constant inlined mulf_init::sqr1_hi#0 = (const byte[$200]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::$10 = -(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulf_init::sqr1_lo#0 = (const byte[$200]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined print_str::str#4 = (const string) str1
Constant inlined mulf_init::$15 = (const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff
Constant inlined print_str::str#3 = (const string) mul16u_error::str
Constant inlined print_str::str#2 = (const string) mul16u_compare::str1
Constant inlined print_str::str#1 = (const string) str
Constant inlined mulf_init::$18 = (const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100
Constant inlined print_str::str#8 = (const string) str
Constant inlined mulf_init::$19 = (const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff
Constant inlined print_str::str#7 = (const string) str4
Constant inlined print_str::str#6 = (const string) str3
Constant inlined mulf_init::$17 = (const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff
Constant inlined print_str::str#5 = (const string) str2
Constant inlined mulf_init::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined muls16s::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::$0 = ((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8
Constant inlined mul16s_compare::str = (const string) str
Constant inlined print_str::str#13 = (const string) str3
Constant inlined print_str::str#12 = (const string) str2
Constant inlined print_str::str#11 = (const string) str1
Constant inlined print_str::str#10 = (const string) mul16s_error::str
Constant inlined muls16s::m#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s_compare::ok#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mul16s_compare::ok#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#14 = (const string) str4
Constant inlined mul16s_compare::ok#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u::res#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s_compare::b#0 = -(word/signed word/dword/signed dword) $7fff
Constant inlined mul16u_compare::b#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s_compare::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::sqr#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u_compare::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::sc#0 = ((byte*))(word/signed word/dword/signed dword) $400
Constant inlined mulf_init::$8 = (const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined mul16u_compare::str = (const string) str
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting mul16s_compare::@20(between mul16s_compare::@10 and mul16s_compare::@1)
Added new block during phi lifting mul16s_compare::@21(between mul16s_compare::@5 and mul16s_compare::@2)
Added new block during phi lifting mul16s_compare::@22(between mul16s_compare::@3 and mul16s_compare::@4)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sdword::@5(between print_sdword and print_sdword::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting mulf16s::@7(between mulf16s::@6 and mulf16s::@1)
Added new block during phi lifting mulf16s::@8(between mulf16s::@1 and mulf16s::@2)
Added new block during phi lifting mul16s::@7(between mul16s::@6 and mul16s::@1)
Added new block during phi lifting mul16s::@8(between mul16s::@1 and mul16s::@2)
Added new block during phi lifting mul16u::@10(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting muls16s::@12(between muls16s::@3 and muls16s::@3)
Added new block during phi lifting muls16s::@13(between muls16s::@3 and muls16s::@4)
Added new block during phi lifting muls16s::@14(between muls16s::@5 and muls16s::@4)
Added new block during phi lifting muls16s::@15(between muls16s::@5 and muls16s::@5)
Added new block during phi lifting mul16u_compare::@20(between mul16u_compare::@10 and mul16u_compare::@1)
Added new block during phi lifting mul16u_compare::@21(between mul16u_compare::@5 and mul16u_compare::@2)
Added new block during phi lifting mul16u_compare::@22(between mul16u_compare::@3 and mul16u_compare::@4)
Added new block during phi lifting muls16u::@6(between muls16u::@2 and muls16u::@2)
Added new block during phi lifting muls16u::@7(between muls16u::@2 and muls16u::@1)
Added new block during phi lifting mulf_init::@9(between mulf_init::@2 and mulf_init::@1)
Added new block during phi lifting mulf_init::@10(between mulf_init::@1 and mulf_init::@2)
Added new block during phi lifting mulf_init::@11(between mulf_init::@4 and mulf_init::@3)
Added new block during phi lifting mulf_init::@12(between mulf_init::@3 and mulf_init::@4)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @40
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of mul16s_compare::@6
Adding NOP phi() at start of mul16s_compare::@7
Adding NOP phi() at start of mul16u_compare
Adding NOP phi() at start of mul16u_compare::@6
Adding NOP phi() at start of mul16u_compare::@7
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@7
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 mulf_init:7 mul16u_compare:9 mul16s_compare:11 
Calls in [mul16s_compare] to print_str:16 muls16s:24 mul16s:29 mulf16s:34 mul16s_error:50 print_ln:58 print_str:60 print_ln:63 
Calls in [mul16s_error] to print_str:91 print_sword:94 print_str:96 print_sword:99 print_str:101 print_sdword:104 print_str:106 print_sdword:109 print_str:111 print_sdword:114 print_ln:117 
Calls in [print_sdword] to print_char:122 print_dword:130 
Calls in [print_dword] to print_word:138 print_word:142 
Calls in [print_word] to print_byte:148 print_byte:152 
Calls in [print_byte] to print_char:159 print_char:164 
Calls in [print_sword] to print_char:173 print_word:180 
Calls in [mulf16s] to mulf16u:186 
Calls in [mul16s] to mul16u:213 
Calls in [mul16u_compare] to print_str:271 muls16u:279 mul16u:286 mulf16u:293 mul16u_error:309 print_ln:316 print_str:318 print_ln:321 
Calls in [mul16u_error] to print_str:331 print_word:335 print_str:337 print_word:341 print_str:343 print_dword:347 print_str:349 print_dword:353 print_str:355 print_dword:359 print_ln:361 

Created 72 initial phi equivalence classes
Not coalescing [13] print_char_cursor#176 ← print_line_cursor#1
Coalesced [15] print_char_cursor#184 ← print_char_cursor#143
Coalesced [17] mul16s_compare::a#16 ← mul16s_compare::a#6
Coalesced [18] mul16s_compare::b#16 ← mul16s_compare::b#6
Coalesced [56] print_line_cursor#104 ← print_line_cursor#1
Coalesced [57] print_char_cursor#178 ← print_char_cursor#128
Not coalescing [59] print_char_cursor#185 ← print_line_cursor#1
Coalesced (already) [61] print_line_cursor#105 ← print_line_cursor#1
Coalesced (already) [62] print_char_cursor#179 ← print_char_cursor#128
Coalesced [64] print_char_cursor#177 ← print_char_cursor#128
Coalesced [65] mul16s_compare::a#15 ← mul16s_compare::a#1
Coalesced [66] mul16s_compare::b#15 ← mul16s_compare::b#1
Coalesced [67] mul16s_compare::i#14 ← mul16s_compare::i#1
Coalesced (already) [68] mul16s_compare::a#17 ← mul16s_compare::a#1
Coalesced (already) [69] mul16s_compare::b#17 ← mul16s_compare::b#1
Coalesced [70] mul16s_compare::j#11 ← mul16s_compare::j#1
Coalesced [71] mul16s_compare::ok#5 ← mul16s_compare::ok#4
Coalesced [73] print_line_cursor#108 ← print_line_cursor#43
Coalesced (already) [78] print_line_cursor#109 ← print_line_cursor#1
Coalesced [80] print_str::str#18 ← print_str::str#17
Coalesced (already) [81] print_char_cursor#198 ← print_char_cursor#148
Coalesced [88] print_str::str#19 ← print_str::str#0
Coalesced [89] print_char_cursor#199 ← print_char_cursor#1
Coalesced (already) [90] print_char_cursor#186 ← print_char_cursor#128
Coalesced [93] print_sword::w#7 ← print_sword::w#1
Coalesced [95] print_char_cursor#187 ← print_char_cursor#20
Coalesced [98] print_sword::w#8 ← print_sword::w#2
Coalesced (already) [100] print_char_cursor#188 ← print_char_cursor#20
Coalesced [103] print_sdword::dw#8 ← print_sdword::dw#1
Coalesced (already) [105] print_char_cursor#189 ← print_char_cursor#20
Coalesced [108] print_sdword::dw#9 ← print_sdword::dw#2
Coalesced (already) [110] print_char_cursor#190 ← print_char_cursor#20
Coalesced [113] print_sdword::dw#10 ← print_sdword::dw#3
Coalesced (already) [115] print_line_cursor#106 ← print_line_cursor#1
Coalesced (already) [116] print_char_cursor#180 ← print_char_cursor#20
Coalesced [121] print_char_cursor#215 ← print_char_cursor#128
Coalesced [124] print_sdword::dw#12 ← print_sdword::dw#0
Coalesced [125] print_char_cursor#201 ← print_char_cursor#20
Coalesced [128] print_dword::dw#9 ← print_dword::dw#0
Coalesced [129] print_char_cursor#205 ← print_char_cursor#134
Coalesced [132] print_sdword::dw#11 ← print_sdword::dw#4
Coalesced (already) [133] print_char_cursor#200 ← print_char_cursor#128
Coalesced [136] print_word::w#9 ← print_word::w#1
Coalesced [137] print_char_cursor#208 ← print_char_cursor#133
Coalesced [140] print_word::w#10 ← print_word::w#2
Coalesced (already) [141] print_char_cursor#209 ← print_char_cursor#20
Coalesced [146] print_byte::b#4 ← print_byte::b#0
Coalesced [147] print_char_cursor#211 ← print_char_cursor#132
Coalesced [150] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [151] print_char_cursor#212 ← print_char_cursor#20
Coalesced [157] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [158] print_char_cursor#213 ← print_char_cursor#136
Coalesced [162] print_char::ch#6 ← print_char::ch#3
Coalesced (already) [163] print_char_cursor#214 ← print_char_cursor#20
Coalesced (already) [172] print_char_cursor#216 ← print_char_cursor#128
Coalesced [175] print_sword::w#10 ← print_sword::w#0
Coalesced [176] print_char_cursor#218 ← print_char_cursor#20
Coalesced (already) [179] print_char_cursor#210 ← print_char_cursor#130
Coalesced [182] print_sword::w#9 ← print_sword::w#3
Coalesced (already) [183] print_char_cursor#217 ← print_char_cursor#128
Coalesced [193] mulf16s::m#7 ← mulf16s::m#1
Coalesced [199] mulf16s::m#10 ← mulf16s::m#2
Coalesced [203] mulf16s::m#9 ← mulf16s::m#5
Coalesced [204] mulf16s::m#8 ← mulf16s::m#0
Coalesced [220] mul16s::m#7 ← mul16s::m#1
Coalesced [226] mul16s::m#10 ← mul16s::m#2
Coalesced [230] mul16s::m#9 ← mul16s::m#5
Coalesced [231] mul16s::m#8 ← mul16s::m#0
Coalesced [234] mul16u::a#10 ← mul16u::a#6
Coalesced [235] mul16u::mb#6 ← mul16u::mb#0
Coalesced [242] mul16u::res#9 ← mul16u::res#1
Coalesced [246] mul16u::a#11 ← mul16u::a#0
Coalesced [247] mul16u::res#7 ← mul16u::res#6
Coalesced [248] mul16u::mb#7 ← mul16u::mb#1
Coalesced (already) [249] mul16u::res#8 ← mul16u::res#2
Coalesced [256] muls16s::return#5 ← muls16s::m#1
Coalesced [259] muls16s::m#10 ← muls16s::m#1
Coalesced [260] muls16s::j#3 ← muls16s::j#1
Coalesced [265] muls16s::return#6 ← muls16s::m#2
Coalesced [266] muls16s::m#11 ← muls16s::m#2
Coalesced [267] muls16s::i#3 ← muls16s::i#1
Coalesced [270] print_char_cursor#191 ← print_char_cursor#139
Coalesced [272] mul16u_compare::a#16 ← mul16u_compare::a#6
Coalesced [273] mul16u_compare::b#16 ← mul16u_compare::b#6
Coalesced [284] mul16u::b#4 ← mul16u::b#1
Coalesced [285] mul16u::a#9 ← mul16u::a#2
Coalesced [291] mulf16u::a#3 ← mulf16u::a#1
Coalesced [292] mulf16u::b#3 ← mulf16u::b#1
Coalesced (already) [315] print_char_cursor#181 ← print_char_cursor#128
Not coalescing [317] print_char_cursor#192 ← print_line_cursor#1
Coalesced (already) [319] print_line_cursor#107 ← print_line_cursor#1
Coalesced (already) [320] print_char_cursor#182 ← print_char_cursor#128
Coalesced (already) [322] print_char_cursor#219 ← print_char_cursor#128
Coalesced [323] mul16u_compare::a#15 ← mul16u_compare::a#1
Coalesced [324] mul16u_compare::b#15 ← mul16u_compare::b#1
Coalesced [325] mul16u_compare::i#14 ← mul16u_compare::i#1
Coalesced (already) [326] mul16u_compare::a#17 ← mul16u_compare::a#1
Coalesced (already) [327] mul16u_compare::b#17 ← mul16u_compare::b#1
Coalesced [328] mul16u_compare::j#11 ← mul16u_compare::j#1
Coalesced [329] mul16u_compare::ok#5 ← mul16u_compare::ok#4
Coalesced (already) [330] print_char_cursor#193 ← print_char_cursor#128
Coalesced [333] print_word::w#7 ← print_word::w#3
Coalesced (already) [334] print_char_cursor#206 ← print_char_cursor#128
Coalesced (already) [336] print_char_cursor#194 ← print_char_cursor#20
Coalesced [339] print_word::w#8 ← print_word::w#4
Coalesced (already) [340] print_char_cursor#207 ← print_char_cursor#128
Coalesced (already) [342] print_char_cursor#195 ← print_char_cursor#20
Coalesced [345] print_dword::dw#6 ← print_dword::dw#1
Coalesced (already) [346] print_char_cursor#202 ← print_char_cursor#128
Coalesced (already) [348] print_char_cursor#196 ← print_char_cursor#20
Coalesced [351] print_dword::dw#7 ← print_dword::dw#2
Coalesced (already) [352] print_char_cursor#203 ← print_char_cursor#128
Coalesced (already) [354] print_char_cursor#197 ← print_char_cursor#20
Coalesced [357] print_dword::dw#8 ← print_dword::dw#3
Coalesced (already) [358] print_char_cursor#204 ← print_char_cursor#128
Coalesced (already) [360] print_char_cursor#183 ← print_char_cursor#20
Coalesced [368] muls16u::return#5 ← muls16u::m#1
Coalesced [371] muls16u::m#5 ← muls16u::m#1
Coalesced [372] muls16u::i#3 ← muls16u::i#1
Coalesced [380] mulf_init::sqr#8 ← mulf_init::sqr#2
Coalesced [381] mulf_init::x_2#7 ← mulf_init::x_2#1
Coalesced [404] mulf_init::x_255#5 ← mulf_init::x_255#1
Coalesced [405] mulf_init::sqr2_lo#5 ← mulf_init::sqr2_lo#1
Coalesced [406] mulf_init::sqr2_hi#5 ← mulf_init::sqr2_hi#1
Coalesced [407] mulf_init::dir#4 ← mulf_init::dir#3
Coalesced (already) [408] mulf_init::dir#5 ← mulf_init::dir#2
Coalesced [409] mulf_init::c#5 ← mulf_init::c#1
Coalesced [410] mulf_init::sqr#6 ← mulf_init::sqr#1
Coalesced [411] mulf_init::sqr1_lo#5 ← mulf_init::sqr1_lo#1
Coalesced [412] mulf_init::sqr1_hi#5 ← mulf_init::sqr1_hi#1
Coalesced [413] mulf_init::x_2#5 ← mulf_init::x_2#2
Coalesced [414] mulf_init::sqr#7 ← mulf_init::sqr#4
Coalesced (already) [415] mulf_init::x_2#6 ← mulf_init::x_2#3
Coalesced [422] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 42 phi equivalence classes
Culled Empty Block (label) mul16s_compare::@7
Culled Empty Block (label) mul16s_compare::@20
Culled Empty Block (label) mul16s_compare::@21
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sdword::@5
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) mulf16s::@8
Culled Empty Block (label) mulf16s::@7
Culled Empty Block (label) mul16s::@8
Culled Empty Block (label) mul16s::@7
Culled Empty Block (label) mul16u::@10
Culled Empty Block (label) muls16s::@13
Culled Empty Block (label) muls16s::@12
Culled Empty Block (label) muls16s::@14
Culled Empty Block (label) muls16s::@15
Culled Empty Block (label) mul16u_compare::@7
Culled Empty Block (label) mul16u_compare::@20
Culled Empty Block (label) mul16u_compare::@21
Culled Empty Block (label) muls16u::@7
Culled Empty Block (label) muls16u::@6
Culled Empty Block (label) mulf_init::@7
Culled Empty Block (label) mulf_init::@11
Culled Empty Block (label) mulf_init::@9
Culled Empty Block (label) mulf_init::@10
Culled Empty Block (label) print_cls::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @40
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of mul16s_compare::@6
Adding NOP phi() at start of mul16s_compare::@11
Adding NOP phi() at start of mul16s_compare::@18
Adding NOP phi() at start of mul16s_compare::@22
Adding NOP phi() at start of mul16s_error
Adding NOP phi() at start of mul16s_error::@2
Adding NOP phi() at start of mul16s_error::@4
Adding NOP phi() at start of mul16s_error::@6
Adding NOP phi() at start of mul16s_error::@8
Adding NOP phi() at start of mul16s_error::@10
Adding NOP phi() at start of print_sdword::@2
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of mul16u_compare
Adding NOP phi() at start of mul16u_compare::@6
Adding NOP phi() at start of mul16u_compare::@11
Adding NOP phi() at start of mul16u_compare::@18
Adding NOP phi() at start of mul16u_compare::@22
Adding NOP phi() at start of mul16u_error
Adding NOP phi() at start of mul16u_error::@2
Adding NOP phi() at start of mul16u_error::@4
Adding NOP phi() at start of mul16u_error::@6
Adding NOP phi() at start of mul16u_error::@8
Adding NOP phi() at start of mul16u_error::@10
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@12
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@40
@40: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @40
  [3] phi()
main: scope:[main]  from @40
  [4] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call mulf_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call mul16u_compare 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call mul16s_compare 
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return
mul16s_compare: scope:[mul16s_compare]  from main::@3
  [13] (byte*~) print_char_cursor#176 ← (byte*) print_line_cursor#1
  to:mul16s_compare::@1
mul16s_compare::@1: scope:[mul16s_compare]  from mul16s_compare mul16s_compare::@10
  [14] (byte) mul16s_compare::i#12 ← phi( mul16s_compare/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16s_compare::@10/(byte) mul16s_compare::i#1 )
  [14] (signed word) mul16s_compare::b#6 ← phi( mul16s_compare/-(word/signed word/dword/signed dword) $7fff mul16s_compare::@10/(signed word) mul16s_compare::b#1 )
  [14] (signed word) mul16s_compare::a#6 ← phi( mul16s_compare/-(word/signed word/dword/signed dword) $7fff mul16s_compare::@10/(signed word) mul16s_compare::a#1 )
  [14] (byte*) print_char_cursor#143 ← phi( mul16s_compare/(byte*~) print_char_cursor#176 mul16s_compare::@10/(byte*) print_char_cursor#128 )
  [15] call print_str 
  to:mul16s_compare::@2
mul16s_compare::@2: scope:[mul16s_compare]  from mul16s_compare::@1 mul16s_compare::@5
  [16] (byte) mul16s_compare::j#10 ← phi( mul16s_compare::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16s_compare::@5/(byte) mul16s_compare::j#1 )
  [16] (signed word) mul16s_compare::b#2 ← phi( mul16s_compare::@1/(signed word) mul16s_compare::b#6 mul16s_compare::@5/(signed word) mul16s_compare::b#1 )
  [16] (signed word) mul16s_compare::a#2 ← phi( mul16s_compare::@1/(signed word) mul16s_compare::a#6 mul16s_compare::@5/(signed word) mul16s_compare::a#1 )
  [17] (signed word) mul16s_compare::a#1 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b
  [18] (signed word) mul16s_compare::b#1 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd
  [19] (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1
  [20] (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1
  [21] call muls16s 
  [22] (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#0
  to:mul16s_compare::@13
mul16s_compare::@13: scope:[mul16s_compare]  from mul16s_compare::@2
  [23] (signed dword) mul16s_compare::ms#0 ← (signed dword) muls16s::return#2
  [24] (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#1
  [25] (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#1
  [26] call mul16s 
  [27] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:mul16s_compare::@14
mul16s_compare::@14: scope:[mul16s_compare]  from mul16s_compare::@13
  [28] (signed dword) mul16s_compare::mn#0 ← (signed dword) mul16s::return#2
  [29] (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#1
  [30] (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#1
  [31] call mulf16s 
  [32] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0
  to:mul16s_compare::@15
mul16s_compare::@15: scope:[mul16s_compare]  from mul16s_compare::@14
  [33] (signed dword) mul16s_compare::mf#0 ← (signed dword) mulf16s::return#2
  [34] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3
  to:mul16s_compare::@6
mul16s_compare::@6: scope:[mul16s_compare]  from mul16s_compare::@15
  [35] phi()
  to:mul16s_compare::@3
mul16s_compare::@3: scope:[mul16s_compare]  from mul16s_compare::@15 mul16s_compare::@6
  [36] (byte) mul16s_compare::ok#4 ← phi( mul16s_compare::@15/(byte/signed byte/word/signed word/dword/signed dword) 1 mul16s_compare::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [37] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@22
  to:mul16s_compare::@4
mul16s_compare::@4: scope:[mul16s_compare]  from mul16s_compare::@22 mul16s_compare::@3
  [38] (byte) mul16s_compare::ok#3 ← phi( mul16s_compare::@22/(byte) mul16s_compare::ok#4 mul16s_compare::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [39] if((byte) mul16s_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s_compare::@5
  to:mul16s_compare::@8
mul16s_compare::@8: scope:[mul16s_compare]  from mul16s_compare::@4
  [40] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2
  [41] (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#1
  [42] (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#1
  [43] (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#0
  [44] (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#0
  [45] (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#0
  [46] call mul16s_error 
  to:mul16s_compare::@return
mul16s_compare::@return: scope:[mul16s_compare]  from mul16s_compare::@18 mul16s_compare::@8
  [47] return 
  to:@return
mul16s_compare::@5: scope:[mul16s_compare]  from mul16s_compare::@4
  [48] (byte) mul16s_compare::j#1 ← ++ (byte) mul16s_compare::j#10
  [49] if((byte) mul16s_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@2
  to:mul16s_compare::@10
mul16s_compare::@10: scope:[mul16s_compare]  from mul16s_compare::@5
  [50] (byte) mul16s_compare::i#1 ← ++ (byte) mul16s_compare::i#12
  [51] if((byte) mul16s_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@1
  to:mul16s_compare::@11
mul16s_compare::@11: scope:[mul16s_compare]  from mul16s_compare::@10
  [52] phi()
  [53] call print_ln 
  to:mul16s_compare::@17
mul16s_compare::@17: scope:[mul16s_compare]  from mul16s_compare::@11
  [54] (byte*~) print_char_cursor#185 ← (byte*) print_line_cursor#1
  [55] call print_str 
  to:mul16s_compare::@18
mul16s_compare::@18: scope:[mul16s_compare]  from mul16s_compare::@17
  [56] phi()
  [57] call print_ln 
  to:mul16s_compare::@return
mul16s_compare::@22: scope:[mul16s_compare]  from mul16s_compare::@3
  [58] phi()
  to:mul16s_compare::@4
print_ln: scope:[print_ln]  from mul16s_compare::@11 mul16s_compare::@18 mul16s_error::@10 mul16u_compare::@11 mul16u_compare::@18 mul16u_error::@10
  [59] (byte*) print_char_cursor#129 ← phi( mul16s_compare::@11/(byte*) print_char_cursor#128 mul16s_compare::@18/(byte*) print_char_cursor#128 mul16s_error::@10/(byte*) print_char_cursor#20 mul16u_compare::@11/(byte*) print_char_cursor#128 mul16u_compare::@18/(byte*) print_char_cursor#128 mul16u_error::@10/(byte*) print_char_cursor#20 )
  [59] (byte*) print_line_cursor#43 ← phi( mul16s_compare::@11/(byte*) print_line_cursor#1 mul16s_compare::@18/(byte*) print_line_cursor#1 mul16s_error::@10/(byte*) print_line_cursor#1 mul16u_compare::@11/((byte*))(word/signed word/dword/signed dword) $400 mul16u_compare::@18/(byte*) print_line_cursor#1 mul16u_error::@10/((byte*))(word/signed word/dword/signed dword) $400 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [60] (byte*) print_line_cursor#22 ← phi( print_ln/(byte*) print_line_cursor#43 print_ln::@1/(byte*) print_line_cursor#1 )
  [61] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [62] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [63] return 
  to:@return
print_str: scope:[print_str]  from mul16s_compare::@1 mul16s_compare::@17 mul16s_error mul16s_error::@2 mul16s_error::@4 mul16s_error::@6 mul16s_error::@8 mul16u_compare::@1 mul16u_compare::@17 mul16u_error mul16u_error::@2 mul16u_error::@4 mul16u_error::@6 mul16u_error::@8
  [64] (byte*) print_char_cursor#148 ← phi( mul16s_compare::@1/(byte*) print_char_cursor#143 mul16s_compare::@17/(byte*~) print_char_cursor#185 mul16s_error/(byte*) print_char_cursor#128 mul16s_error::@2/(byte*) print_char_cursor#20 mul16s_error::@4/(byte*) print_char_cursor#20 mul16s_error::@6/(byte*) print_char_cursor#20 mul16s_error::@8/(byte*) print_char_cursor#20 mul16u_compare::@1/(byte*) print_char_cursor#139 mul16u_compare::@17/(byte*~) print_char_cursor#192 mul16u_error/(byte*) print_char_cursor#128 mul16u_error::@2/(byte*) print_char_cursor#20 mul16u_error::@4/(byte*) print_char_cursor#20 mul16u_error::@6/(byte*) print_char_cursor#20 mul16u_error::@8/(byte*) print_char_cursor#20 )
  [64] (byte*) print_str::str#17 ← phi( mul16s_compare::@1/(const string) str mul16s_compare::@17/(const string) mul16s_compare::str1 mul16s_error/(const string) mul16s_error::str mul16s_error::@2/(const string) str1 mul16s_error::@4/(const string) str2 mul16s_error::@6/(const string) str3 mul16s_error::@8/(const string) str4 mul16u_compare::@1/(const string) str mul16u_compare::@17/(const string) mul16u_compare::str1 mul16u_error/(const string) mul16u_error::str mul16u_error::@2/(const string) str1 mul16u_error::@4/(const string) str2 mul16u_error::@6/(const string) str3 mul16u_error::@8/(const string) str4 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [65] (byte*) print_char_cursor#128 ← phi( print_str/(byte*) print_char_cursor#148 print_str::@2/(byte*) print_char_cursor#1 )
  [65] (byte*) print_str::str#15 ← phi( print_str/(byte*) print_str::str#17 print_str::@2/(byte*) print_str::str#0 )
  [66] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [67] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [68] *((byte*) print_char_cursor#128) ← *((byte*) print_str::str#15)
  [69] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#128
  [70] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#15
  to:print_str::@1
mul16s_error: scope:[mul16s_error]  from mul16s_compare::@8
  [71] phi()
  [72] call print_str 
  to:mul16s_error::@1
mul16s_error::@1: scope:[mul16s_error]  from mul16s_error
  [73] (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#0
  [74] call print_sword 
  to:mul16s_error::@2
mul16s_error::@2: scope:[mul16s_error]  from mul16s_error::@1
  [75] phi()
  [76] call print_str 
  to:mul16s_error::@3
mul16s_error::@3: scope:[mul16s_error]  from mul16s_error::@2
  [77] (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#0
  [78] call print_sword 
  to:mul16s_error::@4
mul16s_error::@4: scope:[mul16s_error]  from mul16s_error::@3
  [79] phi()
  [80] call print_str 
  to:mul16s_error::@5
mul16s_error::@5: scope:[mul16s_error]  from mul16s_error::@4
  [81] (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#0
  [82] call print_sdword 
  to:mul16s_error::@6
mul16s_error::@6: scope:[mul16s_error]  from mul16s_error::@5
  [83] phi()
  [84] call print_str 
  to:mul16s_error::@7
mul16s_error::@7: scope:[mul16s_error]  from mul16s_error::@6
  [85] (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#0
  [86] call print_sdword 
  to:mul16s_error::@8
mul16s_error::@8: scope:[mul16s_error]  from mul16s_error::@7
  [87] phi()
  [88] call print_str 
  to:mul16s_error::@9
mul16s_error::@9: scope:[mul16s_error]  from mul16s_error::@8
  [89] (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#0
  [90] call print_sdword 
  to:mul16s_error::@10
mul16s_error::@10: scope:[mul16s_error]  from mul16s_error::@9
  [91] phi()
  [92] call print_ln 
  to:mul16s_error::@return
mul16s_error::@return: scope:[mul16s_error]  from mul16s_error::@10
  [93] return 
  to:@return
print_sdword: scope:[print_sdword]  from mul16s_error::@5 mul16s_error::@7 mul16s_error::@9
  [94] (signed dword) print_sdword::dw#4 ← phi( mul16s_error::@5/(signed dword) print_sdword::dw#1 mul16s_error::@7/(signed dword) print_sdword::dw#2 mul16s_error::@9/(signed dword) print_sdword::dw#3 )
  [95] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@2: scope:[print_sdword]  from print_sdword
  [96] phi()
  [97] call print_char 
  to:print_sdword::@4
print_sdword::@4: scope:[print_sdword]  from print_sdword::@2
  [98] (signed dword) print_sdword::dw#0 ← - (signed dword) print_sdword::dw#4
  to:print_sdword::@1
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@4
  [99] (byte*) print_char_cursor#134 ← phi( print_sdword/(byte*) print_char_cursor#128 print_sdword::@4/(byte*) print_char_cursor#20 )
  [99] (signed dword) print_sdword::dw#5 ← phi( print_sdword/(signed dword) print_sdword::dw#4 print_sdword::@4/(signed dword) print_sdword::dw#0 )
  [100] (dword) print_dword::dw#0 ← ((dword)) (signed dword) print_sdword::dw#5
  [101] call print_dword 
  to:print_sdword::@return
print_sdword::@return: scope:[print_sdword]  from print_sdword::@1
  [102] return 
  to:@return
print_dword: scope:[print_dword]  from mul16u_error::@5 mul16u_error::@7 mul16u_error::@9 print_sdword::@1
  [103] (byte*) print_char_cursor#133 ← phi( mul16u_error::@5/(byte*) print_char_cursor#128 mul16u_error::@7/(byte*) print_char_cursor#128 mul16u_error::@9/(byte*) print_char_cursor#128 print_sdword::@1/(byte*) print_char_cursor#134 )
  [103] (dword) print_dword::dw#4 ← phi( mul16u_error::@5/(dword) print_dword::dw#1 mul16u_error::@7/(dword) print_dword::dw#2 mul16u_error::@9/(dword) print_dword::dw#3 print_sdword::@1/(dword) print_dword::dw#0 )
  [104] (word) print_word::w#1 ← > (dword) print_dword::dw#4
  [105] call print_word 
  to:print_dword::@1
print_dword::@1: scope:[print_dword]  from print_dword
  [106] (word) print_word::w#2 ← < (dword) print_dword::dw#4
  [107] call print_word 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword::@1
  [108] return 
  to:@return
print_word: scope:[print_word]  from mul16u_error::@1 mul16u_error::@3 print_dword print_dword::@1 print_sword::@1
  [109] (byte*) print_char_cursor#132 ← phi( mul16u_error::@1/(byte*) print_char_cursor#128 mul16u_error::@3/(byte*) print_char_cursor#128 print_dword/(byte*) print_char_cursor#133 print_dword::@1/(byte*) print_char_cursor#20 print_sword::@1/(byte*) print_char_cursor#130 )
  [109] (word) print_word::w#5 ← phi( mul16u_error::@1/(word) print_word::w#3 mul16u_error::@3/(word) print_word::w#4 print_dword/(word) print_word::w#1 print_dword::@1/(word) print_word::w#2 print_sword::@1/(word~) print_word::w#11 )
  [110] (byte) print_byte::b#0 ← > (word) print_word::w#5
  [111] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [112] (byte) print_byte::b#1 ← < (word) print_word::w#5
  [113] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [114] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [115] (byte*) print_char_cursor#136 ← phi( print_word/(byte*) print_char_cursor#132 print_word::@1/(byte*) print_char_cursor#20 )
  [115] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [116] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [117] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [118] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [119] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [120] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [121] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [122] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sdword::@2 print_sword::@2
  [123] (byte*) print_char_cursor#84 ← phi( print_byte/(byte*) print_char_cursor#136 print_byte::@1/(byte*) print_char_cursor#20 print_sdword::@2/(byte*) print_char_cursor#128 print_sword::@2/(byte*) print_char_cursor#128 )
  [123] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sdword::@2/(byte) '-' print_sword::@2/(byte) '-' )
  [124] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4
  [125] (byte*) print_char_cursor#20 ← ++ (byte*) print_char_cursor#84
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [126] return 
  to:@return
print_sword: scope:[print_sword]  from mul16s_error::@1 mul16s_error::@3
  [127] (signed word) print_sword::w#3 ← phi( mul16s_error::@1/(signed word) print_sword::w#1 mul16s_error::@3/(signed word) print_sword::w#2 )
  [128] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [129] phi()
  [130] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  [131] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  [132] (byte*) print_char_cursor#130 ← phi( print_sword/(byte*) print_char_cursor#128 print_sword::@4/(byte*) print_char_cursor#20 )
  [132] (signed word) print_sword::w#4 ← phi( print_sword/(signed word) print_sword::w#3 print_sword::@4/(signed word) print_sword::w#0 )
  [133] (word~) print_word::w#11 ← (word)(signed word) print_sword::w#4
  [134] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [135] return 
  to:@return
mulf16s: scope:[mulf16s]  from mul16s_compare::@14
  [136] (word~) mulf16u::a#4 ← (word)(signed word) mulf16s::a#0
  [137] (word~) mulf16u::b#4 ← (word)(signed word) mulf16s::b#0
  [138] call mulf16u 
  [139] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0
  to:mulf16s::@6
mulf16s::@6: scope:[mulf16s]  from mulf16s
  [140] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2
  [141] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1
  to:mulf16s::@3
mulf16s::@3: scope:[mulf16s]  from mulf16s::@6
  [142] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0
  [143] (word~) mulf16s::$16 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#0
  [144] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$16
  to:mulf16s::@1
mulf16s::@1: scope:[mulf16s]  from mulf16s::@3 mulf16s::@6
  [145] (dword) mulf16s::m#5 ← phi( mulf16s::@3/(dword) mulf16s::m#1 mulf16s::@6/(dword) mulf16s::m#0 )
  [146] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2
  to:mulf16s::@4
mulf16s::@4: scope:[mulf16s]  from mulf16s::@1
  [147] (word~) mulf16s::$12 ← > (dword) mulf16s::m#5
  [148] (word~) mulf16s::$17 ← (word~) mulf16s::$12 - (word)(signed word) mulf16s::a#0
  [149] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17
  to:mulf16s::@2
mulf16s::@2: scope:[mulf16s]  from mulf16s::@1 mulf16s::@4
  [150] (dword) mulf16s::m#4 ← phi( mulf16s::@1/(dword) mulf16s::m#5 mulf16s::@4/(dword) mulf16s::m#2 )
  [151] (signed dword) mulf16s::return#0 ← ((signed dword)) (dword) mulf16s::m#4
  to:mulf16s::@return
mulf16s::@return: scope:[mulf16s]  from mulf16s::@2
  [152] return 
  to:@return
mulf16u: scope:[mulf16u]  from mul16u_compare::@14 mulf16s
  [153] (word) mulf16u::b#2 ← phi( mul16u_compare::@14/(word) mulf16u::b#1 mulf16s/(word~) mulf16u::b#4 )
  [153] (word) mulf16u::a#2 ← phi( mul16u_compare::@14/(word) mulf16u::a#1 mulf16s/(word~) mulf16u::a#4 )
  [154] *((const word*) mulf16u::memA#0) ← (word) mulf16u::a#2
  [155] *((const word*) mulf16u::memB#0) ← (word) mulf16u::b#2
  asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
  [157] (dword) mulf16u::return#0 ← *((const dword*) mulf16u::memR#0)
  to:mulf16u::@return
mulf16u::@return: scope:[mulf16u]  from mulf16u
  [158] return 
  to:@return
mul16s: scope:[mul16s]  from mul16s_compare::@13
  [159] (word~) mul16u::b#3 ← (word)(signed word) mul16s::b#0
  [160] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0
  [161] call mul16u 
  [162] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@6
mul16s::@6: scope:[mul16s]  from mul16s
  [163] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [164] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@6
  [165] (word~) mul16s::$6 ← > (dword) mul16s::m#0
  [166] (word~) mul16s::$16 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0
  [167] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@6
  [168] (dword) mul16s::m#5 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@6/(dword) mul16s::m#0 )
  [169] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s::@1
  [170] (word~) mul16s::$12 ← > (dword) mul16s::m#5
  [171] (word~) mul16s::$17 ← (word~) mul16s::$12 - (word)(signed word) mul16s::a#0
  [172] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  [173] (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#5 mul16s::@4/(dword) mul16s::m#2 )
  [174] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [175] return 
  to:@return
mul16u: scope:[mul16u]  from mul16s mul16u_compare::@13
  [176] (word) mul16u::a#6 ← phi( mul16s/(word~) mul16u::a#8 mul16u_compare::@13/(word) mul16u::a#2 )
  [176] (word) mul16u::b#2 ← phi( mul16s/(word~) mul16u::b#3 mul16u_compare::@13/(word) mul16u::b#1 )
  [177] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  [178] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  [178] (dword) mul16u::res#2 ← phi( mul16u/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u::@4/(dword) mul16u::res#6 )
  [178] (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@4/(word) mul16u::a#0 )
  [179] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [180] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [181] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [182] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
  to:mul16u::@7
mul16u::@7: scope:[mul16u]  from mul16u::@2
  [183] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  [184] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@7/(dword) mul16u::res#1 )
  [185] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [186] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mul16u::@1
muls16s: scope:[muls16s]  from mul16s_compare::@2
  [187] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@5
  to:muls16s::@6
muls16s::@6: scope:[muls16s]  from muls16s
  [188] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@4
  to:muls16s::@3
muls16s::@3: scope:[muls16s]  from muls16s::@3 muls16s::@6
  [189] (signed word) muls16s::j#2 ← phi( muls16s::@3/(signed word) muls16s::j#1 muls16s::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [189] (signed dword) muls16s::m#3 ← phi( muls16s::@3/(signed dword) muls16s::m#1 muls16s::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [190] (signed dword) muls16s::m#1 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#0
  [191] (signed word) muls16s::j#1 ← ++ (signed word) muls16s::j#2
  [192] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3
  to:muls16s::@4
muls16s::@4: scope:[muls16s]  from muls16s::@3 muls16s::@5 muls16s::@6
  [193] (signed dword) muls16s::return#0 ← phi( muls16s::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 muls16s::@3/(signed dword) muls16s::m#1 muls16s::@5/(signed dword) muls16s::m#2 )
  to:muls16s::@return
muls16s::@return: scope:[muls16s]  from muls16s::@4
  [194] return 
  to:@return
muls16s::@5: scope:[muls16s]  from muls16s muls16s::@5
  [195] (signed word) muls16s::i#2 ← phi( muls16s/(byte/signed byte/word/signed word/dword/signed dword) 0 muls16s::@5/(signed word) muls16s::i#1 )
  [195] (signed dword) muls16s::m#5 ← phi( muls16s/(byte/signed byte/word/signed word/dword/signed dword) 0 muls16s::@5/(signed dword) muls16s::m#2 )
  [196] (signed dword) muls16s::m#2 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#0
  [197] (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2
  [198] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5
  to:muls16s::@4
mul16u_compare: scope:[mul16u_compare]  from main::@2
  [199] phi()
  to:mul16u_compare::@1
mul16u_compare::@1: scope:[mul16u_compare]  from mul16u_compare mul16u_compare::@10
  [200] (byte) mul16u_compare::i#12 ← phi( mul16u_compare/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u_compare::@10/(byte) mul16u_compare::i#1 )
  [200] (word) mul16u_compare::b#6 ← phi( mul16u_compare/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u_compare::@10/(word) mul16u_compare::b#1 )
  [200] (word) mul16u_compare::a#6 ← phi( mul16u_compare/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u_compare::@10/(word) mul16u_compare::a#1 )
  [200] (byte*) print_char_cursor#139 ← phi( mul16u_compare/((byte*))(word/signed word/dword/signed dword) $400 mul16u_compare::@10/(byte*) print_char_cursor#128 )
  [201] call print_str 
  to:mul16u_compare::@2
mul16u_compare::@2: scope:[mul16u_compare]  from mul16u_compare::@1 mul16u_compare::@5
  [202] (byte) mul16u_compare::j#10 ← phi( mul16u_compare::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u_compare::@5/(byte) mul16u_compare::j#1 )
  [202] (word) mul16u_compare::b#2 ← phi( mul16u_compare::@1/(word) mul16u_compare::b#6 mul16u_compare::@5/(word) mul16u_compare::b#1 )
  [202] (word) mul16u_compare::a#2 ← phi( mul16u_compare::@1/(word) mul16u_compare::a#6 mul16u_compare::@5/(word) mul16u_compare::a#1 )
  [203] (word) mul16u_compare::a#1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b
  [204] (word) mul16u_compare::b#1 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd
  [205] (word) muls16u::a#0 ← (word) mul16u_compare::a#1
  [206] (word) muls16u::b#0 ← (word) mul16u_compare::b#1
  [207] call muls16u 
  [208] (dword) muls16u::return#2 ← (dword) muls16u::return#0
  to:mul16u_compare::@13
mul16u_compare::@13: scope:[mul16u_compare]  from mul16u_compare::@2
  [209] (dword) mul16u_compare::ms#0 ← (dword) muls16u::return#2
  [210] (word) mul16u::a#2 ← (word) mul16u_compare::a#1
  [211] (word) mul16u::b#1 ← (word) mul16u_compare::b#1
  [212] call mul16u 
  [213] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  to:mul16u_compare::@14
mul16u_compare::@14: scope:[mul16u_compare]  from mul16u_compare::@13
  [214] (dword) mul16u_compare::mn#0 ← (dword) mul16u::return#3
  [215] (word) mulf16u::a#1 ← (word) mul16u_compare::a#1
  [216] (word) mulf16u::b#1 ← (word) mul16u_compare::b#1
  [217] call mulf16u 
  [218] (dword) mulf16u::return#3 ← (dword) mulf16u::return#0
  to:mul16u_compare::@15
mul16u_compare::@15: scope:[mul16u_compare]  from mul16u_compare::@14
  [219] (dword) mul16u_compare::mf#0 ← (dword) mulf16u::return#3
  [220] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3
  to:mul16u_compare::@6
mul16u_compare::@6: scope:[mul16u_compare]  from mul16u_compare::@15
  [221] phi()
  to:mul16u_compare::@3
mul16u_compare::@3: scope:[mul16u_compare]  from mul16u_compare::@15 mul16u_compare::@6
  [222] (byte) mul16u_compare::ok#4 ← phi( mul16u_compare::@15/(byte/signed byte/word/signed word/dword/signed dword) 1 mul16u_compare::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [223] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@22
  to:mul16u_compare::@4
mul16u_compare::@4: scope:[mul16u_compare]  from mul16u_compare::@22 mul16u_compare::@3
  [224] (byte) mul16u_compare::ok#3 ← phi( mul16u_compare::@22/(byte) mul16u_compare::ok#4 mul16u_compare::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [225] if((byte) mul16u_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u_compare::@5
  to:mul16u_compare::@8
mul16u_compare::@8: scope:[mul16u_compare]  from mul16u_compare::@4
  [226] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2
  [227] (word) mul16u_error::a#0 ← (word) mul16u_compare::a#1
  [228] (word) mul16u_error::b#0 ← (word) mul16u_compare::b#1
  [229] (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#0
  [230] (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#0
  [231] (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#0
  [232] call mul16u_error 
  to:mul16u_compare::@return
mul16u_compare::@return: scope:[mul16u_compare]  from mul16u_compare::@18 mul16u_compare::@8
  [233] return 
  to:@return
mul16u_compare::@5: scope:[mul16u_compare]  from mul16u_compare::@4
  [234] (byte) mul16u_compare::j#1 ← ++ (byte) mul16u_compare::j#10
  [235] if((byte) mul16u_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@2
  to:mul16u_compare::@10
mul16u_compare::@10: scope:[mul16u_compare]  from mul16u_compare::@5
  [236] (byte) mul16u_compare::i#1 ← ++ (byte) mul16u_compare::i#12
  [237] if((byte) mul16u_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@1
  to:mul16u_compare::@11
mul16u_compare::@11: scope:[mul16u_compare]  from mul16u_compare::@10
  [238] phi()
  [239] call print_ln 
  to:mul16u_compare::@17
mul16u_compare::@17: scope:[mul16u_compare]  from mul16u_compare::@11
  [240] (byte*~) print_char_cursor#192 ← (byte*) print_line_cursor#1
  [241] call print_str 
  to:mul16u_compare::@18
mul16u_compare::@18: scope:[mul16u_compare]  from mul16u_compare::@17
  [242] phi()
  [243] call print_ln 
  to:mul16u_compare::@return
mul16u_compare::@22: scope:[mul16u_compare]  from mul16u_compare::@3
  [244] phi()
  to:mul16u_compare::@4
mul16u_error: scope:[mul16u_error]  from mul16u_compare::@8
  [245] phi()
  [246] call print_str 
  to:mul16u_error::@1
mul16u_error::@1: scope:[mul16u_error]  from mul16u_error
  [247] (word) print_word::w#3 ← (word) mul16u_error::a#0
  [248] call print_word 
  to:mul16u_error::@2
mul16u_error::@2: scope:[mul16u_error]  from mul16u_error::@1
  [249] phi()
  [250] call print_str 
  to:mul16u_error::@3
mul16u_error::@3: scope:[mul16u_error]  from mul16u_error::@2
  [251] (word) print_word::w#4 ← (word) mul16u_error::b#0
  [252] call print_word 
  to:mul16u_error::@4
mul16u_error::@4: scope:[mul16u_error]  from mul16u_error::@3
  [253] phi()
  [254] call print_str 
  to:mul16u_error::@5
mul16u_error::@5: scope:[mul16u_error]  from mul16u_error::@4
  [255] (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#0
  [256] call print_dword 
  to:mul16u_error::@6
mul16u_error::@6: scope:[mul16u_error]  from mul16u_error::@5
  [257] phi()
  [258] call print_str 
  to:mul16u_error::@7
mul16u_error::@7: scope:[mul16u_error]  from mul16u_error::@6
  [259] (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#0
  [260] call print_dword 
  to:mul16u_error::@8
mul16u_error::@8: scope:[mul16u_error]  from mul16u_error::@7
  [261] phi()
  [262] call print_str 
  to:mul16u_error::@9
mul16u_error::@9: scope:[mul16u_error]  from mul16u_error::@8
  [263] (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#0
  [264] call print_dword 
  to:mul16u_error::@10
mul16u_error::@10: scope:[mul16u_error]  from mul16u_error::@9
  [265] phi()
  [266] call print_ln 
  to:mul16u_error::@return
mul16u_error::@return: scope:[mul16u_error]  from mul16u_error::@10
  [267] return 
  to:@return
muls16u: scope:[muls16u]  from mul16u_compare::@2
  [268] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1
  to:muls16u::@2
muls16u::@2: scope:[muls16u]  from muls16u muls16u::@2
  [269] (word) muls16u::i#2 ← phi( muls16u::@2/(word) muls16u::i#1 muls16u/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [269] (dword) muls16u::m#3 ← phi( muls16u::@2/(dword) muls16u::m#1 muls16u/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [270] (dword) muls16u::m#1 ← (dword) muls16u::m#3 + (word) muls16u::b#0
  [271] (word) muls16u::i#1 ← ++ (word) muls16u::i#2
  [272] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2
  to:muls16u::@1
muls16u::@1: scope:[muls16u]  from muls16u muls16u::@2
  [273] (dword) muls16u::return#0 ← phi( muls16u/(byte/signed byte/word/signed word/dword/signed dword) 0 muls16u::@2/(dword) muls16u::m#1 )
  to:muls16u::@return
muls16u::@return: scope:[muls16u]  from muls16u::@1
  [274] return 
  to:@return
mulf_init: scope:[mulf_init]  from main::@1
  [275] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@2
  [276] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@2/(byte) mulf_init::x_2#2 )
  [276] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte[$200]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 mulf_init::@2/(byte*) mulf_init::sqr1_hi#1 )
  [276] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte[$200]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 mulf_init::@2/(byte*) mulf_init::sqr1_lo#1 )
  [276] (word) mulf_init::sqr#4 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@2/(word) mulf_init::sqr#1 )
  [276] (byte) mulf_init::c#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@2/(byte) mulf_init::c#1 )
  [277] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [278] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [279] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1
  [280] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [281] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@2
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1 mulf_init::@5
  [282] (byte) mulf_init::x_2#2 ← phi( mulf_init::@1/(byte) mulf_init::x_2#3 mulf_init::@5/(byte) mulf_init::x_2#1 )
  [282] (word) mulf_init::sqr#3 ← phi( mulf_init::@1/(word) mulf_init::sqr#4 mulf_init::@5/(word) mulf_init::sqr#2 )
  [283] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3
  [284] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5
  [285] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3
  [286] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6
  [287] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [288] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [289] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  [290] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200) goto mulf_init::@1
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [291] (byte) mulf_init::dir#2 ← phi( mulf_init::@4/(byte) mulf_init::dir#3 mulf_init::@2/(byte/word/signed word/dword/signed dword) $ff )
  [291] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_hi#1 mulf_init::@2/(const byte[$200]) mulf_sqr2_hi#0 )
  [291] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_lo#1 mulf_init::@2/(const byte[$200]) mulf_sqr2_lo#0 )
  [291] (byte) mulf_init::x_255#2 ← phi( mulf_init::@4/(byte) mulf_init::x_255#1 mulf_init::@2/((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [292] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2)
  [293] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2)
  [294] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [295] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [296] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@12 mulf_init::@3
  [297] (byte) mulf_init::dir#3 ← phi( mulf_init::@12/(byte) mulf_init::dir#2 mulf_init::@3/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [298] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  [299] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) goto mulf_init::@3
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@4
  [300] *((const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100)
  [301] *((const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  [302] return 
  to:@return
mulf_init::@12: scope:[mulf_init]  from mulf_init::@3
  [303] phi()
  to:mulf_init::@4
print_cls: scope:[print_cls]  from main
  [304] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [305] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) $400 print_cls::@1/(byte*) print_cls::sc#1 )
  [306] *((byte*) print_cls::sc#2) ← (byte) ' '
  [307] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [308] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [309] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(void()) main()
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$12 4.0
(word~) mul16s::$16 4.0
(word~) mul16s::$17 4.0
(word~) mul16s::$6 4.0
(signed word) mul16s::a
(signed word) mul16s::a#0 7.357142857142858
(signed word) mul16s::b
(signed word) mul16s::b#0 9.363636363636363
(dword) mul16s::m
(dword) mul16s::m#0 2.0
(dword) mul16s::m#1 4.0
(dword) mul16s::m#2 4.0
(dword) mul16s::m#4 6.0
(dword) mul16s::m#5 2.5
(signed dword) mul16s::return
(signed dword) mul16s::return#0 34.33333333333333
(signed dword) mul16s::return#2 202.0
(void()) mul16s_compare()
(signed word) mul16s_compare::a
(signed word) mul16s_compare::a#1 17.862068965517242
(signed word) mul16s_compare::a#2 213.0
(signed word) mul16s_compare::a#6 11.0
(signed word) mul16s_compare::b
(signed word) mul16s_compare::b#1 17.862068965517242
(signed word) mul16s_compare::b#2 106.5
(signed word) mul16s_compare::b#6 11.0
(byte) mul16s_compare::i
(byte) mul16s_compare::i#1 16.5
(byte) mul16s_compare::i#12 0.7586206896551724
(byte) mul16s_compare::j
(byte) mul16s_compare::j#1 151.5
(byte) mul16s_compare::j#10 8.08
(signed dword) mul16s_compare::mf
(signed dword) mul16s_compare::mf#0 15.692307692307692
(signed dword) mul16s_compare::mn
(signed dword) mul16s_compare::mn#0 12.0
(signed dword) mul16s_compare::ms
(signed dword) mul16s_compare::ms#0 14.523809523809522
(byte) mul16s_compare::ok
(byte) mul16s_compare::ok#3 202.0
(byte) mul16s_compare::ok#4 33.666666666666664
(void()) mul16s_error((signed word) mul16s_error::a , (signed word) mul16s_error::b , (signed dword) mul16s_error::ms , (signed dword) mul16s_error::mn , (signed dword) mul16s_error::mf)
(signed word) mul16s_error::a
(signed word) mul16s_error::a#0 0.5714285714285714
(signed word) mul16s_error::b
(signed word) mul16s_error::b#0 0.4
(signed dword) mul16s_error::mf
(signed dword) mul16s_error::mf#0 0.21052631578947367
(signed dword) mul16s_error::mn
(signed dword) mul16s_error::mn#0 0.25
(signed dword) mul16s_error::ms
(signed dword) mul16s_error::ms#0 0.3076923076923077
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte/word~) mul16u::$1 2002.0
(word) mul16u::a
(word) mul16u::a#0 1001.0
(word) mul16u::a#2 101.0
(word) mul16u::a#3 667.6666666666667
(word) mul16u::a#6 52.5
(word~) mul16u::a#8 4.0
(word) mul16u::b
(word) mul16u::b#1 202.0
(word) mul16u::b#2 105.0
(word~) mul16u::b#3 2.0
(dword) mul16u::mb
(dword) mul16u::mb#0 4.0
(dword) mul16u::mb#1 2002.0
(dword) mul16u::mb#2 429.2857142857143
(dword) mul16u::res
(dword) mul16u::res#1 2002.0
(dword) mul16u::res#2 443.7142857142857
(dword) mul16u::res#6 1001.0
(dword) mul16u::return
(dword) mul16u::return#2 4.0
(dword) mul16u::return#3 202.0
(void()) mul16u_compare()
(word) mul16u_compare::a
(word) mul16u_compare::a#1 17.862068965517242
(word) mul16u_compare::a#2 213.0
(word) mul16u_compare::a#6 11.0
(word) mul16u_compare::b
(word) mul16u_compare::b#1 17.862068965517242
(word) mul16u_compare::b#2 106.5
(word) mul16u_compare::b#6 11.0
(byte) mul16u_compare::i
(byte) mul16u_compare::i#1 16.5
(byte) mul16u_compare::i#12 0.7586206896551724
(byte) mul16u_compare::j
(byte) mul16u_compare::j#1 151.5
(byte) mul16u_compare::j#10 8.08
(dword) mul16u_compare::mf
(dword) mul16u_compare::mf#0 15.692307692307692
(dword) mul16u_compare::mn
(dword) mul16u_compare::mn#0 12.0
(dword) mul16u_compare::ms
(dword) mul16u_compare::ms#0 14.523809523809522
(byte) mul16u_compare::ok
(byte) mul16u_compare::ok#3 202.0
(byte) mul16u_compare::ok#4 33.666666666666664
(void()) mul16u_error((word) mul16u_error::a , (word) mul16u_error::b , (dword) mul16u_error::ms , (dword) mul16u_error::mn , (dword) mul16u_error::mf)
(word) mul16u_error::a
(word) mul16u_error::a#0 0.5714285714285714
(word) mul16u_error::b
(word) mul16u_error::b#0 0.4
(dword) mul16u_error::mf
(dword) mul16u_error::mf#0 0.21052631578947367
(dword) mul16u_error::mn
(dword) mul16u_error::mn#0 0.25
(dword) mul16u_error::ms
(dword) mul16u_error::ms#0 0.3076923076923077
(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
(word~) mulf16s::$12 4.0
(word~) mulf16s::$16 4.0
(word~) mulf16s::$17 4.0
(word~) mulf16s::$6 4.0
(signed word) mulf16s::a
(signed word) mulf16s::a#0 7.357142857142858
(signed word) mulf16s::b
(signed word) mulf16s::b#0 9.363636363636363
(dword) mulf16s::m
(dword) mulf16s::m#0 2.0
(dword) mulf16s::m#1 4.0
(dword) mulf16s::m#2 4.0
(dword) mulf16s::m#4 6.0
(dword) mulf16s::m#5 2.5
(signed dword) mulf16s::return
(signed dword) mulf16s::return#0 34.33333333333333
(signed dword) mulf16s::return#2 202.0
(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
(word) mulf16u::a
(word) mulf16u::a#1 101.0
(word) mulf16u::a#2 105.0
(word~) mulf16u::a#4 2.0
(word) mulf16u::b
(word) mulf16u::b#1 202.0
(word) mulf16u::b#2 52.5
(word~) mulf16u::b#4 4.0
(word*) mulf16u::memA
(word*) mulf16u::memB
(dword*) mulf16u::memR
(dword) mulf16u::return
(dword) mulf16u::return#0 26.25
(dword) mulf16u::return#2 4.0
(dword) mulf16u::return#3 202.0
(void()) mulf_init()
(byte~) mulf_init::$2 22.0
(byte~) mulf_init::$5 22.0
(byte~) mulf_init::$6 22.0
(byte) mulf_init::c
(byte) mulf_init::c#1 2.357142857142857
(byte) mulf_init::c#2 22.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 4.714285714285714
(byte) mulf_init::dir#3 7.333333333333333
(word) mulf_init::sqr
(word) mulf_init::sqr#1 7.333333333333333
(word) mulf_init::sqr#2 22.0
(word) mulf_init::sqr#3 9.166666666666666
(word) mulf_init::sqr#4 6.6000000000000005
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 5.5
(byte*) mulf_init::sqr1_hi#2 3.0
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 16.5
(byte*) mulf_init::sqr1_lo#2 2.5384615384615383
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 3.142857142857143
(byte*) mulf_init::sqr2_hi#2 11.0
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 16.5
(byte*) mulf_init::sqr2_lo#2 4.125
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 11.0
(byte) mulf_init::x_2#2 4.888888888888889
(byte) mulf_init::x_2#3 8.25
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 5.5
(byte) mulf_init::x_255#2 11.0
(byte[$200]) mulf_sqr1_hi
(byte[$200]) mulf_sqr1_lo
(byte[$200]) mulf_sqr2_hi
(byte[$200]) mulf_sqr2_lo
(signed dword()) muls16s((signed word) muls16s::a , (signed word) muls16s::b)
(signed word) muls16s::a
(signed word) muls16s::a#0 175.58333333333334
(signed word) muls16s::b
(signed word) muls16s::b#0 191.1818181818182
(signed word) muls16s::i
(signed word) muls16s::i#1 1501.5
(signed word) muls16s::i#2 1001.0
(signed word) muls16s::j
(signed word) muls16s::j#1 1501.5
(signed word) muls16s::j#2 1001.0
(signed dword) muls16s::m
(signed dword) muls16s::m#1 1001.0
(signed dword) muls16s::m#2 1001.0
(signed dword) muls16s::m#3 2002.0
(signed dword) muls16s::m#5 2002.0
(signed dword) muls16s::return
(signed dword) muls16s::return#0 701.0
(signed dword) muls16s::return#2 202.0
(dword()) muls16u((word) muls16u::a , (word) muls16u::b)
(word) muls16u::a
(word) muls16u::a#0 157.71428571428572
(word) muls16u::b
(word) muls16u::b#0 183.66666666666669
(word) muls16u::i
(word) muls16u::i#1 1501.5
(word) muls16u::i#2 1001.0
(dword) muls16u::m
(dword) muls16u::m#1 1001.0
(dword) muls16u::m#3 2002.0
(dword) muls16u::return
(dword) muls16u::return#0 367.33333333333337
(dword) muls16u::return#2 202.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#128 3.2454545454545443
(byte*) print_char_cursor#129 5.75
(byte*) print_char_cursor#130 3.0
(byte*) print_char_cursor#132 6.0
(byte*) print_char_cursor#133 5.0
(byte*) print_char_cursor#134 3.0
(byte*) print_char_cursor#136 2.0
(byte*) print_char_cursor#139 22.0
(byte*) print_char_cursor#143 24.0
(byte*) print_char_cursor#148 48.0
(byte*~) print_char_cursor#176 4.0
(byte*~) print_char_cursor#185 4.0
(byte*~) print_char_cursor#192 4.0
(byte*) print_char_cursor#20 0.7441860465116277
(byte*) print_char_cursor#84 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(void()) print_dword((dword) print_dword::dw)
(dword) print_dword::dw
(dword) print_dword::dw#0 4.0
(dword) print_dword::dw#1 4.0
(dword) print_dword::dw#2 4.0
(dword) print_dword::dw#3 4.0
(dword) print_dword::dw#4 3.9999999999999996
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 0.6025641025641025
(byte*) print_line_cursor#22 24.0
(byte*) print_line_cursor#43 10.0
(void()) print_ln()
(byte*) print_screen
(void()) print_sdword((signed dword) print_sdword::dw)
(signed dword) print_sdword::dw
(signed dword) print_sdword::dw#0 4.0
(signed dword) print_sdword::dw#1 4.0
(signed dword) print_sdword::dw#2 4.0
(signed dword) print_sdword::dw#3 4.0
(signed dword) print_sdword::dw#4 3.0
(signed dword) print_sdword::dw#5 6.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#15 101.5
(byte*) print_str::str#17 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 4.0
(signed word) print_sword::w#2 4.0
(signed word) print_sword::w#3 2.5
(signed word) print_sword::w#4 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#1 4.0
(word~) print_word::w#11 4.0
(word) print_word::w#2 4.0
(word) print_word::w#3 4.0
(word) print_word::w#4 4.0
(word) print_word::w#5 4.666666666666666

Initial phi equivalence classes
[ mul16s_compare::i#12 mul16s_compare::i#1 ]
[ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ]
[ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ]
[ mul16s_compare::j#10 mul16s_compare::j#1 ]
[ mul16s_compare::ok#3 mul16s_compare::ok#4 ]
[ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ]
[ print_str::str#15 print_str::str#17 print_str::str#0 ]
[ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ]
[ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ]
[ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ]
[ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
[ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ]
[ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ]
[ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ mul16u::b#2 mul16u::b#3 mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ muls16s::j#2 muls16s::j#1 ]
[ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ]
[ muls16s::i#2 muls16s::i#1 ]
[ mul16u_compare::i#12 mul16u_compare::i#1 ]
[ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ]
[ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ]
[ mul16u_compare::j#10 mul16u_compare::j#1 ]
[ mul16u_compare::ok#3 mul16u_compare::ok#4 ]
[ muls16u::i#2 muls16u::i#1 ]
[ muls16u::return#0 muls16u::m#3 muls16u::m#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#3 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable muls16s::a#0 to zero page equivalence class [ muls16s::a#0 ]
Added variable muls16s::b#0 to zero page equivalence class [ muls16s::b#0 ]
Added variable muls16s::return#2 to zero page equivalence class [ muls16s::return#2 ]
Added variable mul16s_compare::ms#0 to zero page equivalence class [ mul16s_compare::ms#0 ]
Added variable mul16s::a#0 to zero page equivalence class [ mul16s::a#0 ]
Added variable mul16s::b#0 to zero page equivalence class [ mul16s::b#0 ]
Added variable mul16s::return#2 to zero page equivalence class [ mul16s::return#2 ]
Added variable mul16s_compare::mn#0 to zero page equivalence class [ mul16s_compare::mn#0 ]
Added variable mulf16s::a#0 to zero page equivalence class [ mulf16s::a#0 ]
Added variable mulf16s::b#0 to zero page equivalence class [ mulf16s::b#0 ]
Added variable mulf16s::return#2 to zero page equivalence class [ mulf16s::return#2 ]
Added variable mul16s_compare::mf#0 to zero page equivalence class [ mul16s_compare::mf#0 ]
Added variable mul16s_error::a#0 to zero page equivalence class [ mul16s_error::a#0 ]
Added variable mul16s_error::b#0 to zero page equivalence class [ mul16s_error::b#0 ]
Added variable mul16s_error::ms#0 to zero page equivalence class [ mul16s_error::ms#0 ]
Added variable mul16s_error::mn#0 to zero page equivalence class [ mul16s_error::mn#0 ]
Added variable mul16s_error::mf#0 to zero page equivalence class [ mul16s_error::mf#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable mulf16u::return#2 to zero page equivalence class [ mulf16u::return#2 ]
Added variable mulf16s::$6 to zero page equivalence class [ mulf16s::$6 ]
Added variable mulf16s::$16 to zero page equivalence class [ mulf16s::$16 ]
Added variable mulf16s::$12 to zero page equivalence class [ mulf16s::$12 ]
Added variable mulf16s::$17 to zero page equivalence class [ mulf16s::$17 ]
Added variable mulf16s::return#0 to zero page equivalence class [ mulf16s::return#0 ]
Added variable mulf16u::return#0 to zero page equivalence class [ mulf16u::return#0 ]
Added variable mul16u::return#2 to zero page equivalence class [ mul16u::return#2 ]
Added variable mul16s::$6 to zero page equivalence class [ mul16s::$6 ]
Added variable mul16s::$16 to zero page equivalence class [ mul16s::$16 ]
Added variable mul16s::$12 to zero page equivalence class [ mul16s::$12 ]
Added variable mul16s::$17 to zero page equivalence class [ mul16s::$17 ]
Added variable mul16s::return#0 to zero page equivalence class [ mul16s::return#0 ]
Added variable mul16u::$1 to zero page equivalence class [ mul16u::$1 ]
Added variable muls16u::a#0 to zero page equivalence class [ muls16u::a#0 ]
Added variable muls16u::b#0 to zero page equivalence class [ muls16u::b#0 ]
Added variable muls16u::return#2 to zero page equivalence class [ muls16u::return#2 ]
Added variable mul16u_compare::ms#0 to zero page equivalence class [ mul16u_compare::ms#0 ]
Added variable mul16u::return#3 to zero page equivalence class [ mul16u::return#3 ]
Added variable mul16u_compare::mn#0 to zero page equivalence class [ mul16u_compare::mn#0 ]
Added variable mulf16u::return#3 to zero page equivalence class [ mulf16u::return#3 ]
Added variable mul16u_compare::mf#0 to zero page equivalence class [ mul16u_compare::mf#0 ]
Added variable mul16u_error::a#0 to zero page equivalence class [ mul16u_error::a#0 ]
Added variable mul16u_error::b#0 to zero page equivalence class [ mul16u_error::b#0 ]
Added variable mul16u_error::ms#0 to zero page equivalence class [ mul16u_error::ms#0 ]
Added variable mul16u_error::mn#0 to zero page equivalence class [ mul16u_error::mn#0 ]
Added variable mul16u_error::mf#0 to zero page equivalence class [ mul16u_error::mf#0 ]
Added variable mulf_init::$2 to zero page equivalence class [ mulf_init::$2 ]
Added variable mulf_init::$5 to zero page equivalence class [ mulf_init::$5 ]
Added variable mulf_init::$6 to zero page equivalence class [ mulf_init::$6 ]
Complete equivalence classes
[ mul16s_compare::i#12 mul16s_compare::i#1 ]
[ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ]
[ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ]
[ mul16s_compare::j#10 mul16s_compare::j#1 ]
[ mul16s_compare::ok#3 mul16s_compare::ok#4 ]
[ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ]
[ print_str::str#15 print_str::str#17 print_str::str#0 ]
[ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ]
[ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ]
[ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ]
[ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
[ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ]
[ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ]
[ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ mul16u::b#2 mul16u::b#3 mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ muls16s::j#2 muls16s::j#1 ]
[ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ]
[ muls16s::i#2 muls16s::i#1 ]
[ mul16u_compare::i#12 mul16u_compare::i#1 ]
[ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ]
[ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ]
[ mul16u_compare::j#10 mul16u_compare::j#1 ]
[ mul16u_compare::ok#3 mul16u_compare::ok#4 ]
[ muls16u::i#2 muls16u::i#1 ]
[ muls16u::return#0 muls16u::m#3 muls16u::m#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#3 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ muls16s::a#0 ]
[ muls16s::b#0 ]
[ muls16s::return#2 ]
[ mul16s_compare::ms#0 ]
[ mul16s::a#0 ]
[ mul16s::b#0 ]
[ mul16s::return#2 ]
[ mul16s_compare::mn#0 ]
[ mulf16s::a#0 ]
[ mulf16s::b#0 ]
[ mulf16s::return#2 ]
[ mul16s_compare::mf#0 ]
[ mul16s_error::a#0 ]
[ mul16s_error::b#0 ]
[ mul16s_error::ms#0 ]
[ mul16s_error::mn#0 ]
[ mul16s_error::mf#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ mulf16u::return#2 ]
[ mulf16s::$6 ]
[ mulf16s::$16 ]
[ mulf16s::$12 ]
[ mulf16s::$17 ]
[ mulf16s::return#0 ]
[ mulf16u::return#0 ]
[ mul16u::return#2 ]
[ mul16s::$6 ]
[ mul16s::$16 ]
[ mul16s::$12 ]
[ mul16s::$17 ]
[ mul16s::return#0 ]
[ mul16u::$1 ]
[ muls16u::a#0 ]
[ muls16u::b#0 ]
[ muls16u::return#2 ]
[ mul16u_compare::ms#0 ]
[ mul16u::return#3 ]
[ mul16u_compare::mn#0 ]
[ mulf16u::return#3 ]
[ mul16u_compare::mf#0 ]
[ mul16u_error::a#0 ]
[ mul16u_error::b#0 ]
[ mul16u_error::ms#0 ]
[ mul16u_error::mn#0 ]
[ mul16u_error::mf#0 ]
[ mulf_init::$2 ]
[ mulf_init::$5 ]
[ mulf_init::$6 ]
Allocated zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ]
Allocated zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ]
Allocated zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ]
Allocated zp ZP_BYTE:7 [ mul16s_compare::j#10 mul16s_compare::j#1 ]
Allocated zp ZP_BYTE:8 [ mul16s_compare::ok#3 mul16s_compare::ok#4 ]
Allocated zp ZP_WORD:9 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ]
Allocated zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 ]
Allocated zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ]
Allocated zp ZP_DWORD:17 [ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ]
Allocated zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ]
Allocated zp ZP_BYTE:23 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:24 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp ZP_WORD:25 [ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ]
Allocated zp ZP_WORD:27 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
Allocated zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ]
Allocated zp ZP_WORD:33 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ]
Allocated zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ]
Allocated zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
Allocated zp ZP_WORD:41 [ mul16u::b#2 mul16u::b#3 mul16u::b#1 ]
Allocated zp ZP_WORD:43 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ]
Allocated zp ZP_DWORD:45 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp ZP_DWORD:49 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp ZP_WORD:53 [ muls16s::j#2 muls16s::j#1 ]
Allocated zp ZP_DWORD:55 [ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ]
Allocated zp ZP_WORD:59 [ muls16s::i#2 muls16s::i#1 ]
Allocated zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ]
Allocated zp ZP_WORD:62 [ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ]
Allocated zp ZP_WORD:64 [ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ]
Allocated zp ZP_BYTE:66 [ mul16u_compare::j#10 mul16u_compare::j#1 ]
Allocated zp ZP_BYTE:67 [ mul16u_compare::ok#3 mul16u_compare::ok#4 ]
Allocated zp ZP_WORD:68 [ muls16u::i#2 muls16u::i#1 ]
Allocated zp ZP_DWORD:70 [ muls16u::return#0 muls16u::m#3 muls16u::m#1 ]
Allocated zp ZP_BYTE:74 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp ZP_WORD:75 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp ZP_WORD:77 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp ZP_WORD:80 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp ZP_WORD:83 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp ZP_WORD:85 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ]
Allocated zp ZP_WORD:88 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:90 [ muls16s::a#0 ]
Allocated zp ZP_WORD:92 [ muls16s::b#0 ]
Allocated zp ZP_DWORD:94 [ muls16s::return#2 ]
Allocated zp ZP_DWORD:98 [ mul16s_compare::ms#0 ]
Allocated zp ZP_WORD:102 [ mul16s::a#0 ]
Allocated zp ZP_WORD:104 [ mul16s::b#0 ]
Allocated zp ZP_DWORD:106 [ mul16s::return#2 ]
Allocated zp ZP_DWORD:110 [ mul16s_compare::mn#0 ]
Allocated zp ZP_WORD:114 [ mulf16s::a#0 ]
Allocated zp ZP_WORD:116 [ mulf16s::b#0 ]
Allocated zp ZP_DWORD:118 [ mulf16s::return#2 ]
Allocated zp ZP_DWORD:122 [ mul16s_compare::mf#0 ]
Allocated zp ZP_WORD:126 [ mul16s_error::a#0 ]
Allocated zp ZP_WORD:128 [ mul16s_error::b#0 ]
Allocated zp ZP_DWORD:130 [ mul16s_error::ms#0 ]
Allocated zp ZP_DWORD:134 [ mul16s_error::mn#0 ]
Allocated zp ZP_DWORD:138 [ mul16s_error::mf#0 ]
Allocated zp ZP_BYTE:142 [ print_byte::$0 ]
Allocated zp ZP_BYTE:143 [ print_byte::$2 ]
Allocated zp ZP_DWORD:144 [ mulf16u::return#2 ]
Allocated zp ZP_WORD:148 [ mulf16s::$6 ]
Allocated zp ZP_WORD:150 [ mulf16s::$16 ]
Allocated zp ZP_WORD:152 [ mulf16s::$12 ]
Allocated zp ZP_WORD:154 [ mulf16s::$17 ]
Allocated zp ZP_DWORD:156 [ mulf16s::return#0 ]
Allocated zp ZP_DWORD:160 [ mulf16u::return#0 ]
Allocated zp ZP_DWORD:164 [ mul16u::return#2 ]
Allocated zp ZP_WORD:168 [ mul16s::$6 ]
Allocated zp ZP_WORD:170 [ mul16s::$16 ]
Allocated zp ZP_WORD:172 [ mul16s::$12 ]
Allocated zp ZP_WORD:174 [ mul16s::$17 ]
Allocated zp ZP_DWORD:176 [ mul16s::return#0 ]
Allocated zp ZP_BYTE:180 [ mul16u::$1 ]
Allocated zp ZP_WORD:181 [ muls16u::a#0 ]
Allocated zp ZP_WORD:183 [ muls16u::b#0 ]
Allocated zp ZP_DWORD:185 [ muls16u::return#2 ]
Allocated zp ZP_DWORD:189 [ mul16u_compare::ms#0 ]
Allocated zp ZP_DWORD:193 [ mul16u::return#3 ]
Allocated zp ZP_DWORD:197 [ mul16u_compare::mn#0 ]
Allocated zp ZP_DWORD:201 [ mulf16u::return#3 ]
Allocated zp ZP_DWORD:205 [ mul16u_compare::mf#0 ]
Allocated zp ZP_WORD:209 [ mul16u_error::a#0 ]
Allocated zp ZP_WORD:211 [ mul16u_error::b#0 ]
Allocated zp ZP_DWORD:213 [ mul16u_error::ms#0 ]
Allocated zp ZP_DWORD:217 [ mul16u_error::mn#0 ]
Allocated zp ZP_DWORD:221 [ mul16u_error::mf#0 ]
Allocated zp ZP_BYTE:225 [ mulf_init::$2 ]
Allocated zp ZP_BYTE:226 [ mulf_init::$5 ]
Allocated zp ZP_BYTE:227 [ mulf_init::$6 ]

INITIAL ASM
//SEG0 File Comments
// Test the fast multiplication library
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BGCOL = $d021
  .label print_char_cursor = $19
  .label print_line_cursor = 9
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @40 [phi:@begin->@40]
b40_from_bbegin:
  jmp b40
//SEG5 @40
b40:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @40 to @end [phi:@40->@end]
bend_from_b40:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG11 [5] call print_cls 
  //SEG12 [304] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call mulf_init 
  //SEG16 [275] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
  mulf_init_from_b1:
    jsr mulf_init
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [9] call mul16u_compare 
  //SEG20 [199] phi from main::@2 to mul16u_compare [phi:main::@2->mul16u_compare]
  mul16u_compare_from_b2:
    jsr mul16u_compare
  //SEG21 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [11] call mul16s_compare 
    jsr mul16s_compare
    jmp breturn
  //SEG24 main::@return
  breturn:
  //SEG25 [12] return 
    rts
}
//SEG26 mul16s_compare
// Perform many possible word multiplications (slow and fast) and compare the results
mul16s_compare: {
    .label a = 3
    .label b = 5
    .label ms = $62
    .label mn = $6e
    .label mf = $7a
    .label j = 7
    .label i = 2
    .label ok = 8
  //SEG27 [13] (byte*~) print_char_cursor#176 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG28 [14] phi from mul16s_compare to mul16s_compare::@1 [phi:mul16s_compare->mul16s_compare::@1]
  b1_from_mul16s_compare:
  //SEG29 [14] phi (byte) mul16s_compare::i#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare->mul16s_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG30 [14] phi (signed word) mul16s_compare::b#6 = -(word/signed word/dword/signed dword) $7fff [phi:mul16s_compare->mul16s_compare::@1#1] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta b
    lda #>-$7fff
    sta b+1
  //SEG31 [14] phi (signed word) mul16s_compare::a#6 = -(word/signed word/dword/signed dword) $7fff [phi:mul16s_compare->mul16s_compare::@1#2] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta a
    lda #>-$7fff
    sta a+1
  //SEG32 [14] phi (byte*) print_char_cursor#143 = (byte*~) print_char_cursor#176 [phi:mul16s_compare->mul16s_compare::@1#3] -- register_copy 
    jmp b1
  //SEG33 [14] phi from mul16s_compare::@10 to mul16s_compare::@1 [phi:mul16s_compare::@10->mul16s_compare::@1]
  b1_from_b10:
  //SEG34 [14] phi (byte) mul16s_compare::i#12 = (byte) mul16s_compare::i#1 [phi:mul16s_compare::@10->mul16s_compare::@1#0] -- register_copy 
  //SEG35 [14] phi (signed word) mul16s_compare::b#6 = (signed word) mul16s_compare::b#1 [phi:mul16s_compare::@10->mul16s_compare::@1#1] -- register_copy 
  //SEG36 [14] phi (signed word) mul16s_compare::a#6 = (signed word) mul16s_compare::a#1 [phi:mul16s_compare::@10->mul16s_compare::@1#2] -- register_copy 
  //SEG37 [14] phi (byte*) print_char_cursor#143 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@10->mul16s_compare::@1#3] -- register_copy 
    jmp b1
  //SEG38 mul16s_compare::@1
  b1:
  //SEG39 [15] call print_str 
  //SEG40 [64] phi from mul16s_compare::@1 to print_str [phi:mul16s_compare::@1->print_str]
  print_str_from_b1:
  //SEG41 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#143 [phi:mul16s_compare::@1->print_str#0] -- register_copy 
  //SEG42 [64] phi (byte*) print_str::str#17 = (const string) str [phi:mul16s_compare::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG43 [16] phi from mul16s_compare::@1 to mul16s_compare::@2 [phi:mul16s_compare::@1->mul16s_compare::@2]
  b2_from_b1:
  //SEG44 [16] phi (byte) mul16s_compare::j#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@1->mul16s_compare::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG45 [16] phi (signed word) mul16s_compare::b#2 = (signed word) mul16s_compare::b#6 [phi:mul16s_compare::@1->mul16s_compare::@2#1] -- register_copy 
  //SEG46 [16] phi (signed word) mul16s_compare::a#2 = (signed word) mul16s_compare::a#6 [phi:mul16s_compare::@1->mul16s_compare::@2#2] -- register_copy 
    jmp b2
  //SEG47 [16] phi from mul16s_compare::@5 to mul16s_compare::@2 [phi:mul16s_compare::@5->mul16s_compare::@2]
  b2_from_b5:
  //SEG48 [16] phi (byte) mul16s_compare::j#10 = (byte) mul16s_compare::j#1 [phi:mul16s_compare::@5->mul16s_compare::@2#0] -- register_copy 
  //SEG49 [16] phi (signed word) mul16s_compare::b#2 = (signed word) mul16s_compare::b#1 [phi:mul16s_compare::@5->mul16s_compare::@2#1] -- register_copy 
  //SEG50 [16] phi (signed word) mul16s_compare::a#2 = (signed word) mul16s_compare::a#1 [phi:mul16s_compare::@5->mul16s_compare::@2#2] -- register_copy 
    jmp b2
  //SEG51 mul16s_compare::@2
  b2:
  //SEG52 [17] (signed word) mul16s_compare::a#1 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda a
    adc #<$d2b
    sta a
    lda a+1
    adc #>$d2b
    sta a+1
  //SEG53 [18] (signed word) mul16s_compare::b#1 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda b
    adc #<$ffd
    sta b
    lda b+1
    adc #>$ffd
    sta b+1
  //SEG54 [19] (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1 -- vwsz1=vwsz2 
    lda a
    sta muls16s.a
    lda a+1
    sta muls16s.a+1
  //SEG55 [20] (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1 -- vwsz1=vwsz2 
    lda b
    sta muls16s.b
    lda b+1
    sta muls16s.b+1
  //SEG56 [21] call muls16s 
    jsr muls16s
  //SEG57 [22] (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#0 -- vdsz1=vdsz2 
    lda muls16s.return
    sta muls16s.return_2
    lda muls16s.return+1
    sta muls16s.return_2+1
    lda muls16s.return+2
    sta muls16s.return_2+2
    lda muls16s.return+3
    sta muls16s.return_2+3
    jmp b13
  //SEG58 mul16s_compare::@13
  b13:
  //SEG59 [23] (signed dword) mul16s_compare::ms#0 ← (signed dword) muls16s::return#2 -- vdsz1=vdsz2 
    lda muls16s.return_2
    sta ms
    lda muls16s.return_2+1
    sta ms+1
    lda muls16s.return_2+2
    sta ms+2
    lda muls16s.return_2+3
    sta ms+3
  //SEG60 [24] (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#1 -- vwsz1=vwsz2 
    lda a
    sta mul16s.a
    lda a+1
    sta mul16s.a+1
  //SEG61 [25] (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#1 -- vwsz1=vwsz2 
    lda b
    sta mul16s.b
    lda b+1
    sta mul16s.b+1
  //SEG62 [26] call mul16s 
    jsr mul16s
  //SEG63 [27] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 -- vdsz1=vdsz2 
    lda mul16s.return
    sta mul16s.return_2
    lda mul16s.return+1
    sta mul16s.return_2+1
    lda mul16s.return+2
    sta mul16s.return_2+2
    lda mul16s.return+3
    sta mul16s.return_2+3
    jmp b14
  //SEG64 mul16s_compare::@14
  b14:
  //SEG65 [28] (signed dword) mul16s_compare::mn#0 ← (signed dword) mul16s::return#2 -- vdsz1=vdsz2 
    lda mul16s.return_2
    sta mn
    lda mul16s.return_2+1
    sta mn+1
    lda mul16s.return_2+2
    sta mn+2
    lda mul16s.return_2+3
    sta mn+3
  //SEG66 [29] (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#1 -- vwsz1=vwsz2 
    lda a
    sta mulf16s.a
    lda a+1
    sta mulf16s.a+1
  //SEG67 [30] (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#1 -- vwsz1=vwsz2 
    lda b
    sta mulf16s.b
    lda b+1
    sta mulf16s.b+1
  //SEG68 [31] call mulf16s 
    jsr mulf16s
  //SEG69 [32] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0 -- vdsz1=vdsz2 
    lda mulf16s.return
    sta mulf16s.return_2
    lda mulf16s.return+1
    sta mulf16s.return_2+1
    lda mulf16s.return+2
    sta mulf16s.return_2+2
    lda mulf16s.return+3
    sta mulf16s.return_2+3
    jmp b15
  //SEG70 mul16s_compare::@15
  b15:
  //SEG71 [33] (signed dword) mul16s_compare::mf#0 ← (signed dword) mulf16s::return#2 -- vdsz1=vdsz2 
    lda mulf16s.return_2
    sta mf
    lda mulf16s.return_2+1
    sta mf+1
    lda mulf16s.return_2+2
    sta mf+2
    lda mulf16s.return_2+3
    sta mf+3
  //SEG72 [34] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3 -- vdsz1_eq_vdsz2_then_la1 
    lda ms
    cmp mf
    bne !+
    lda ms+1
    cmp mf+1
    bne !+
    lda ms+2
    cmp mf+2
    bne !+
    lda ms+3
    cmp mf+3
    beq b3_from_b15
  !:
  //SEG73 [35] phi from mul16s_compare::@15 to mul16s_compare::@6 [phi:mul16s_compare::@15->mul16s_compare::@6]
  b6_from_b15:
    jmp b6
  //SEG74 mul16s_compare::@6
  b6:
  //SEG75 [36] phi from mul16s_compare::@6 to mul16s_compare::@3 [phi:mul16s_compare::@6->mul16s_compare::@3]
  b3_from_b6:
  //SEG76 [36] phi (byte) mul16s_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@6->mul16s_compare::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta ok
    jmp b3
  //SEG77 [36] phi from mul16s_compare::@15 to mul16s_compare::@3 [phi:mul16s_compare::@15->mul16s_compare::@3]
  b3_from_b15:
  //SEG78 [36] phi (byte) mul16s_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mul16s_compare::@15->mul16s_compare::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta ok
    jmp b3
  //SEG79 mul16s_compare::@3
  b3:
  //SEG80 [37] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@22 -- vdsz1_eq_vdsz2_then_la1 
    lda ms
    cmp mn
    bne !+
    lda ms+1
    cmp mn+1
    bne !+
    lda ms+2
    cmp mn+2
    bne !+
    lda ms+3
    cmp mn+3
    beq b22_from_b3
  !:
  //SEG81 [38] phi from mul16s_compare::@3 to mul16s_compare::@4 [phi:mul16s_compare::@3->mul16s_compare::@4]
  b4_from_b3:
  //SEG82 [38] phi (byte) mul16s_compare::ok#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@3->mul16s_compare::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta ok
    jmp b4
  //SEG83 mul16s_compare::@4
  b4:
  //SEG84 [39] if((byte) mul16s_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s_compare::@5 -- vbuz1_neq_0_then_la1 
    lda ok
    cmp #0
    bne b5
    jmp b8
  //SEG85 mul16s_compare::@8
  b8:
  //SEG86 [40] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG87 [41] (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#1 -- vwsz1=vwsz2 
    lda a
    sta mul16s_error.a
    lda a+1
    sta mul16s_error.a+1
  //SEG88 [42] (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#1 -- vwsz1=vwsz2 
    lda b
    sta mul16s_error.b
    lda b+1
    sta mul16s_error.b+1
  //SEG89 [43] (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#0 -- vdsz1=vdsz2 
    lda ms
    sta mul16s_error.ms
    lda ms+1
    sta mul16s_error.ms+1
    lda ms+2
    sta mul16s_error.ms+2
    lda ms+3
    sta mul16s_error.ms+3
  //SEG90 [44] (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#0 -- vdsz1=vdsz2 
    lda mn
    sta mul16s_error.mn
    lda mn+1
    sta mul16s_error.mn+1
    lda mn+2
    sta mul16s_error.mn+2
    lda mn+3
    sta mul16s_error.mn+3
  //SEG91 [45] (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#0 -- vdsz1=vdsz2 
    lda mf
    sta mul16s_error.mf
    lda mf+1
    sta mul16s_error.mf+1
    lda mf+2
    sta mul16s_error.mf+2
    lda mf+3
    sta mul16s_error.mf+3
  //SEG92 [46] call mul16s_error 
  //SEG93 [71] phi from mul16s_compare::@8 to mul16s_error [phi:mul16s_compare::@8->mul16s_error]
  mul16s_error_from_b8:
    jsr mul16s_error
    jmp breturn
  //SEG94 mul16s_compare::@return
  breturn:
  //SEG95 [47] return 
    rts
  //SEG96 mul16s_compare::@5
  b5:
  //SEG97 [48] (byte) mul16s_compare::j#1 ← ++ (byte) mul16s_compare::j#10 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG98 [49] if((byte) mul16s_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$10
    bne b2_from_b5
    jmp b10
  //SEG99 mul16s_compare::@10
  b10:
  //SEG100 [50] (byte) mul16s_compare::i#1 ← ++ (byte) mul16s_compare::i#12 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG101 [51] if((byte) mul16s_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b10
  //SEG102 [52] phi from mul16s_compare::@10 to mul16s_compare::@11 [phi:mul16s_compare::@10->mul16s_compare::@11]
  b11_from_b10:
    jmp b11
  //SEG103 mul16s_compare::@11
  b11:
  //SEG104 [53] call print_ln 
  //SEG105 [59] phi from mul16s_compare::@11 to print_ln [phi:mul16s_compare::@11->print_ln]
  print_ln_from_b11:
  //SEG106 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@11->print_ln#0] -- register_copy 
  //SEG107 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_compare::@11->print_ln#1] -- register_copy 
    jsr print_ln
    jmp b17
  //SEG108 mul16s_compare::@17
  b17:
  //SEG109 [54] (byte*~) print_char_cursor#185 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG110 [55] call print_str 
  //SEG111 [64] phi from mul16s_compare::@17 to print_str [phi:mul16s_compare::@17->print_str]
  print_str_from_b17:
  //SEG112 [64] phi (byte*) print_char_cursor#148 = (byte*~) print_char_cursor#185 [phi:mul16s_compare::@17->print_str#0] -- register_copy 
  //SEG113 [64] phi (byte*) print_str::str#17 = (const string) mul16s_compare::str1 [phi:mul16s_compare::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG114 [56] phi from mul16s_compare::@17 to mul16s_compare::@18 [phi:mul16s_compare::@17->mul16s_compare::@18]
  b18_from_b17:
    jmp b18
  //SEG115 mul16s_compare::@18
  b18:
  //SEG116 [57] call print_ln 
  //SEG117 [59] phi from mul16s_compare::@18 to print_ln [phi:mul16s_compare::@18->print_ln]
  print_ln_from_b18:
  //SEG118 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@18->print_ln#0] -- register_copy 
  //SEG119 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_compare::@18->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG120 [58] phi from mul16s_compare::@3 to mul16s_compare::@22 [phi:mul16s_compare::@3->mul16s_compare::@22]
  b22_from_b3:
    jmp b22
  //SEG121 mul16s_compare::@22
  b22:
  //SEG122 [38] phi from mul16s_compare::@22 to mul16s_compare::@4 [phi:mul16s_compare::@22->mul16s_compare::@4]
  b4_from_b22:
  //SEG123 [38] phi (byte) mul16s_compare::ok#3 = (byte) mul16s_compare::ok#4 [phi:mul16s_compare::@22->mul16s_compare::@4#0] -- register_copy 
    jmp b4
    str1: .text "signed word multiply results match!@"
}
//SEG124 print_ln
// Print a newline
print_ln: {
  //SEG125 [60] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG126 [60] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#43 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG127 print_ln::@1
  b1:
  //SEG128 [61] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG129 [62] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG130 print_ln::@return
  breturn:
  //SEG131 [63] return 
    rts
}
//SEG132 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($b) str)
print_str: {
    .label str = $b
  //SEG133 [65] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG134 [65] phi (byte*) print_char_cursor#128 = (byte*) print_char_cursor#148 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG135 [65] phi (byte*) print_str::str#15 = (byte*) print_str::str#17 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG136 print_str::@1
  b1:
  //SEG137 [66] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG138 print_str::@return
  breturn:
  //SEG139 [67] return 
    rts
  //SEG140 print_str::@2
  b2:
  //SEG141 [68] *((byte*) print_char_cursor#128) ← *((byte*) print_str::str#15) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG142 [69] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#128 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG143 [70] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#15 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG144 mul16s_error
// mul16s_error(signed word zeropage($7e) a, signed word zeropage($80) b, signed dword zeropage($82) ms, signed dword zeropage($86) mn, signed dword zeropage($8a) mf)
mul16s_error: {
    .label a = $7e
    .label b = $80
    .label ms = $82
    .label mn = $86
    .label mf = $8a
  //SEG145 [72] call print_str 
  //SEG146 [64] phi from mul16s_error to print_str [phi:mul16s_error->print_str]
  print_str_from_mul16s_error:
  //SEG147 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#128 [phi:mul16s_error->print_str#0] -- register_copy 
  //SEG148 [64] phi (byte*) print_str::str#17 = (const string) mul16s_error::str [phi:mul16s_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b1
  //SEG149 mul16s_error::@1
  b1:
  //SEG150 [73] (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#0 -- vwsz1=vwsz2 
    lda a
    sta print_sword.w
    lda a+1
    sta print_sword.w+1
  //SEG151 [74] call print_sword 
  //SEG152 [127] phi from mul16s_error::@1 to print_sword [phi:mul16s_error::@1->print_sword]
  print_sword_from_b1:
  //SEG153 [127] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:mul16s_error::@1->print_sword#0] -- register_copy 
    jsr print_sword
  //SEG154 [75] phi from mul16s_error::@1 to mul16s_error::@2 [phi:mul16s_error::@1->mul16s_error::@2]
  b2_from_b1:
    jmp b2
  //SEG155 mul16s_error::@2
  b2:
  //SEG156 [76] call print_str 
  //SEG157 [64] phi from mul16s_error::@2 to print_str [phi:mul16s_error::@2->print_str]
  print_str_from_b2:
  //SEG158 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@2->print_str#0] -- register_copy 
  //SEG159 [64] phi (byte*) print_str::str#17 = (const string) str1 [phi:mul16s_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b3
  //SEG160 mul16s_error::@3
  b3:
  //SEG161 [77] (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#0 -- vwsz1=vwsz2 
    lda b
    sta print_sword.w
    lda b+1
    sta print_sword.w+1
  //SEG162 [78] call print_sword 
  //SEG163 [127] phi from mul16s_error::@3 to print_sword [phi:mul16s_error::@3->print_sword]
  print_sword_from_b3:
  //SEG164 [127] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:mul16s_error::@3->print_sword#0] -- register_copy 
    jsr print_sword
  //SEG165 [79] phi from mul16s_error::@3 to mul16s_error::@4 [phi:mul16s_error::@3->mul16s_error::@4]
  b4_from_b3:
    jmp b4
  //SEG166 mul16s_error::@4
  b4:
  //SEG167 [80] call print_str 
  //SEG168 [64] phi from mul16s_error::@4 to print_str [phi:mul16s_error::@4->print_str]
  print_str_from_b4:
  //SEG169 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@4->print_str#0] -- register_copy 
  //SEG170 [64] phi (byte*) print_str::str#17 = (const string) str2 [phi:mul16s_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG171 mul16s_error::@5
  b5:
  //SEG172 [81] (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#0 -- vdsz1=vdsz2 
    lda ms
    sta print_sdword.dw
    lda ms+1
    sta print_sdword.dw+1
    lda ms+2
    sta print_sdword.dw+2
    lda ms+3
    sta print_sdword.dw+3
  //SEG173 [82] call print_sdword 
  //SEG174 [94] phi from mul16s_error::@5 to print_sdword [phi:mul16s_error::@5->print_sdword]
  print_sdword_from_b5:
  //SEG175 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#1 [phi:mul16s_error::@5->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG176 [83] phi from mul16s_error::@5 to mul16s_error::@6 [phi:mul16s_error::@5->mul16s_error::@6]
  b6_from_b5:
    jmp b6
  //SEG177 mul16s_error::@6
  b6:
  //SEG178 [84] call print_str 
  //SEG179 [64] phi from mul16s_error::@6 to print_str [phi:mul16s_error::@6->print_str]
  print_str_from_b6:
  //SEG180 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@6->print_str#0] -- register_copy 
  //SEG181 [64] phi (byte*) print_str::str#17 = (const string) str3 [phi:mul16s_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG182 mul16s_error::@7
  b7:
  //SEG183 [85] (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#0 -- vdsz1=vdsz2 
    lda mn
    sta print_sdword.dw
    lda mn+1
    sta print_sdword.dw+1
    lda mn+2
    sta print_sdword.dw+2
    lda mn+3
    sta print_sdword.dw+3
  //SEG184 [86] call print_sdword 
  //SEG185 [94] phi from mul16s_error::@7 to print_sdword [phi:mul16s_error::@7->print_sdword]
  print_sdword_from_b7:
  //SEG186 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#2 [phi:mul16s_error::@7->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG187 [87] phi from mul16s_error::@7 to mul16s_error::@8 [phi:mul16s_error::@7->mul16s_error::@8]
  b8_from_b7:
    jmp b8
  //SEG188 mul16s_error::@8
  b8:
  //SEG189 [88] call print_str 
  //SEG190 [64] phi from mul16s_error::@8 to print_str [phi:mul16s_error::@8->print_str]
  print_str_from_b8:
  //SEG191 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@8->print_str#0] -- register_copy 
  //SEG192 [64] phi (byte*) print_str::str#17 = (const string) str4 [phi:mul16s_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG193 mul16s_error::@9
  b9:
  //SEG194 [89] (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#0 -- vdsz1=vdsz2 
    lda mf
    sta print_sdword.dw
    lda mf+1
    sta print_sdword.dw+1
    lda mf+2
    sta print_sdword.dw+2
    lda mf+3
    sta print_sdword.dw+3
  //SEG195 [90] call print_sdword 
  //SEG196 [94] phi from mul16s_error::@9 to print_sdword [phi:mul16s_error::@9->print_sdword]
  print_sdword_from_b9:
  //SEG197 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#3 [phi:mul16s_error::@9->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG198 [91] phi from mul16s_error::@9 to mul16s_error::@10 [phi:mul16s_error::@9->mul16s_error::@10]
  b10_from_b9:
    jmp b10
  //SEG199 mul16s_error::@10
  b10:
  //SEG200 [92] call print_ln 
  //SEG201 [59] phi from mul16s_error::@10 to print_ln [phi:mul16s_error::@10->print_ln]
  print_ln_from_b10:
  //SEG202 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#20 [phi:mul16s_error::@10->print_ln#0] -- register_copy 
  //SEG203 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG204 mul16s_error::@return
  breturn:
  //SEG205 [93] return 
    rts
    str: .text "signed word multiply mismatch @"
}
//SEG206 print_sdword
// Print a signed dword as HEX
// print_sdword(signed dword zeropage($d) dw)
print_sdword: {
    .label dw = $d
  //SEG207 [95] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1 -- vdsz1_ge_0_then_la1 
    lda dw+3
    bpl b1_from_print_sdword
  //SEG208 [96] phi from print_sdword to print_sdword::@2 [phi:print_sdword->print_sdword::@2]
  b2_from_print_sdword:
    jmp b2
  //SEG209 print_sdword::@2
  b2:
  //SEG210 [97] call print_char 
  //SEG211 [123] phi from print_sdword::@2 to print_char [phi:print_sdword::@2->print_char]
  print_char_from_b2:
  //SEG212 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#128 [phi:print_sdword::@2->print_char#0] -- register_copy 
  //SEG213 [123] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sdword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG214 print_sdword::@4
  b4:
  //SEG215 [98] (signed dword) print_sdword::dw#0 ← - (signed dword) print_sdword::dw#4 -- vdsz1=_neg_vdsz1 
    sec
    lda dw
    eor #$ff
    adc #0
    sta dw
    lda dw+1
    eor #$ff
    adc #0
    sta dw+1
    lda dw+2
    eor #$ff
    adc #0
    sta dw+2
    lda dw+3
    eor #$ff
    adc #0
    sta dw+3
  //SEG216 [99] phi from print_sdword print_sdword::@4 to print_sdword::@1 [phi:print_sdword/print_sdword::@4->print_sdword::@1]
  b1_from_print_sdword:
  b1_from_b4:
  //SEG217 [99] phi (byte*) print_char_cursor#134 = (byte*) print_char_cursor#128 [phi:print_sdword/print_sdword::@4->print_sdword::@1#0] -- register_copy 
  //SEG218 [99] phi (signed dword) print_sdword::dw#5 = (signed dword) print_sdword::dw#4 [phi:print_sdword/print_sdword::@4->print_sdword::@1#1] -- register_copy 
    jmp b1
  //SEG219 print_sdword::@1
  b1:
  //SEG220 [100] (dword) print_dword::dw#0 ← ((dword)) (signed dword) print_sdword::dw#5 -- vduz1=_dword_vdsz2 
    lda dw
    sta print_dword.dw
    lda dw+1
    sta print_dword.dw+1
    lda dw+2
    sta print_dword.dw+2
    lda dw+3
    sta print_dword.dw+3
  //SEG221 [101] call print_dword 
  //SEG222 [103] phi from print_sdword::@1 to print_dword [phi:print_sdword::@1->print_dword]
  print_dword_from_b1:
  //SEG223 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#134 [phi:print_sdword::@1->print_dword#0] -- register_copy 
  //SEG224 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#0 [phi:print_sdword::@1->print_dword#1] -- register_copy 
    jsr print_dword
    jmp breturn
  //SEG225 print_sdword::@return
  breturn:
  //SEG226 [102] return 
    rts
}
//SEG227 print_dword
// Print a dword as HEX
// print_dword(dword zeropage($11) dw)
print_dword: {
    .label dw = $11
  //SEG228 [104] (word) print_word::w#1 ← > (dword) print_dword::dw#4 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word.w
    lda dw+3
    sta print_word.w+1
  //SEG229 [105] call print_word 
  //SEG230 [109] phi from print_dword to print_word [phi:print_dword->print_word]
  print_word_from_print_dword:
  //SEG231 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#133 [phi:print_dword->print_word#0] -- register_copy 
  //SEG232 [109] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    jmp b1
  //SEG233 print_dword::@1
  b1:
  //SEG234 [106] (word) print_word::w#2 ← < (dword) print_dword::dw#4 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word.w
    lda dw+1
    sta print_word.w+1
  //SEG235 [107] call print_word 
  //SEG236 [109] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  print_word_from_b1:
  //SEG237 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#20 [phi:print_dword::@1->print_word#0] -- register_copy 
  //SEG238 [109] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG239 print_dword::@return
  breturn:
  //SEG240 [108] return 
    rts
}
//SEG241 print_word
// Print a word as HEX
// print_word(word zeropage($15) w)
print_word: {
    .label w = $15
  //SEG242 [110] (byte) print_byte::b#0 ← > (word) print_word::w#5 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG243 [111] call print_byte 
  //SEG244 [115] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG245 [115] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG246 [115] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG247 print_word::@1
  b1:
  //SEG248 [112] (byte) print_byte::b#1 ← < (word) print_word::w#5 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG249 [113] call print_byte 
  //SEG250 [115] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG251 [115] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#20 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG252 [115] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG253 print_word::@return
  breturn:
  //SEG254 [114] return 
    rts
}
//SEG255 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($17) b)
print_byte: {
    .label _0 = $8e
    .label _2 = $8f
    .label b = $17
  //SEG256 [116] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG257 [117] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG258 [118] call print_char 
  //SEG259 [123] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG260 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#136 [phi:print_byte->print_char#0] -- register_copy 
  //SEG261 [123] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG262 print_byte::@1
  b1:
  //SEG263 [119] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG264 [120] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG265 [121] call print_char 
  //SEG266 [123] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG267 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#20 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG268 [123] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG269 print_byte::@return
  breturn:
  //SEG270 [122] return 
    rts
}
//SEG271 print_char
// Print a single char
// print_char(byte zeropage($18) ch)
print_char: {
    .label ch = $18
  //SEG272 [124] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG273 [125] (byte*) print_char_cursor#20 ← ++ (byte*) print_char_cursor#84 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG274 print_char::@return
  breturn:
  //SEG275 [126] return 
    rts
}
//SEG276 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($1b) w)
print_sword: {
    .label w = $1b
  //SEG277 [128] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG278 [129] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG279 print_sword::@2
  b2:
  //SEG280 [130] call print_char 
  //SEG281 [123] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG282 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#128 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG283 [123] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG284 print_sword::@4
  b4:
  //SEG285 [131] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG286 [132] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG287 [132] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#128 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG288 [132] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG289 print_sword::@1
  b1:
  //SEG290 [133] (word~) print_word::w#11 ← (word)(signed word) print_sword::w#4 -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG291 [134] call print_word 
  //SEG292 [109] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG293 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG294 [109] phi (word) print_word::w#5 = (word~) print_word::w#11 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG295 print_sword::@return
  breturn:
  //SEG296 [135] return 
    rts
}
//SEG297 mulf16s
// Fast multiply two signed words to a signed double word result
// Fixes offsets introduced by using unsigned multiplication
// mulf16s(signed word zeropage($72) a, signed word zeropage($74) b)
mulf16s: {
    .label _6 = $94
    .label _12 = $98
    .label _16 = $96
    .label _17 = $9a
    .label m = $1d
    .label return = $9c
    .label a = $72
    .label b = $74
    .label return_2 = $76
  //SEG298 [136] (word~) mulf16u::a#4 ← (word)(signed word) mulf16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mulf16u.a
    lda a+1
    sta mulf16u.a+1
  //SEG299 [137] (word~) mulf16u::b#4 ← (word)(signed word) mulf16s::b#0 -- vwuz1=vwuz2 
    lda b
    sta mulf16u.b
    lda b+1
    sta mulf16u.b+1
  //SEG300 [138] call mulf16u 
  //SEG301 [153] phi from mulf16s to mulf16u [phi:mulf16s->mulf16u]
  mulf16u_from_mulf16s:
  //SEG302 [153] phi (word) mulf16u::b#2 = (word~) mulf16u::b#4 [phi:mulf16s->mulf16u#0] -- register_copy 
  //SEG303 [153] phi (word) mulf16u::a#2 = (word~) mulf16u::a#4 [phi:mulf16s->mulf16u#1] -- register_copy 
    jsr mulf16u
  //SEG304 [139] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0 -- vduz1=vduz2 
    lda mulf16u.return
    sta mulf16u.return_2
    lda mulf16u.return+1
    sta mulf16u.return_2+1
    lda mulf16u.return+2
    sta mulf16u.return_2+2
    lda mulf16u.return+3
    sta mulf16u.return_2+3
    jmp b6
  //SEG305 mulf16s::@6
  b6:
  //SEG306 [140] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2 -- vduz1=vduz2 
    lda mulf16u.return_2
    sta m
    lda mulf16u.return_2+1
    sta m+1
    lda mulf16u.return_2+2
    sta m+2
    lda mulf16u.return_2+3
    sta m+3
  //SEG307 [141] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b6
    jmp b3
  //SEG308 mulf16s::@3
  b3:
  //SEG309 [142] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG310 [143] (word~) mulf16s::$16 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda _6
    sec
    sbc b
    sta _16
    lda _6+1
    sbc b+1
    sta _16+1
  //SEG311 [144] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG312 [145] phi from mulf16s::@3 mulf16s::@6 to mulf16s::@1 [phi:mulf16s::@3/mulf16s::@6->mulf16s::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG313 [145] phi (dword) mulf16s::m#5 = (dword) mulf16s::m#1 [phi:mulf16s::@3/mulf16s::@6->mulf16s::@1#0] -- register_copy 
    jmp b1
  //SEG314 mulf16s::@1
  b1:
  //SEG315 [146] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2 -- vwsz1_ge_0_then_la1 
    lda b+1
    bpl b2_from_b1
    jmp b4
  //SEG316 mulf16s::@4
  b4:
  //SEG317 [147] (word~) mulf16s::$12 ← > (dword) mulf16s::m#5 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _12
    lda m+3
    sta _12+1
  //SEG318 [148] (word~) mulf16s::$17 ← (word~) mulf16s::$12 - (word)(signed word) mulf16s::a#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda _12
    sec
    sbc a
    sta _17
    lda _12+1
    sbc a+1
    sta _17+1
  //SEG319 [149] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17 -- vduz1=vduz1_sethi_vwuz2 
    lda _17
    sta m+2
    lda _17+1
    sta m+3
  //SEG320 [150] phi from mulf16s::@1 mulf16s::@4 to mulf16s::@2 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG321 [150] phi (dword) mulf16s::m#4 = (dword) mulf16s::m#5 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2#0] -- register_copy 
    jmp b2
  //SEG322 mulf16s::@2
  b2:
  //SEG323 [151] (signed dword) mulf16s::return#0 ← ((signed dword)) (dword) mulf16s::m#4 -- vdsz1=_sdword_vduz2 
    lda m
    sta return
    lda m+1
    sta return+1
    lda m+2
    sta return+2
    lda m+3
    sta return+3
    jmp breturn
  //SEG324 mulf16s::@return
  breturn:
  //SEG325 [152] return 
    rts
}
//SEG326 mulf16u
// Fast multiply two unsigned words to a double word result
// Done in assembler to utilize fast addition A+X
// mulf16u(word zeropage($21) a, word zeropage($23) b)
mulf16u: {
    .label memA = $f8
    .label memB = $fa
    .label memR = $fc
    .label return = $a0
    .label return_2 = $90
    .label a = $21
    .label b = $23
    .label return_3 = $c9
  //SEG327 [154] *((const word*) mulf16u::memA#0) ← (word) mulf16u::a#2 -- _deref_pwuc1=vwuz1 
    lda a
    sta memA
    lda a+1
    sta memA+1
  //SEG328 [155] *((const word*) mulf16u::memB#0) ← (word) mulf16u::b#2 -- _deref_pwuc1=vwuz1 
    lda b
    sta memB
    lda b+1
    sta memB+1
  //SEG329 asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
    lda memA
    sta sm1a+1
    sta sm3a+1
    sta sm5a+1
    sta sm7a+1
    eor #$ff
    sta sm2a+1
    sta sm4a+1
    sta sm6a+1
    sta sm8a+1
    lda memA+1
    sta sm1b+1
    sta sm3b+1
    sta sm5b+1
    sta sm7b+1
    eor #$ff
    sta sm2b+1
    sta sm4b+1
    sta sm6b+1
    sta sm8b+1
    ldx memB
    sec
  sm1a:
    lda mulf_sqr1_lo,x
  sm2a:
    sbc mulf_sqr2_lo,x
    sta memR+0
  sm3a:
    lda mulf_sqr1_hi,x
  sm4a:
    sbc mulf_sqr2_hi,x
    sta _AA+1
    sec
  sm1b:
    lda mulf_sqr1_lo,x
  sm2b:
    sbc mulf_sqr2_lo,x
    sta _cc+1
  sm3b:
    lda mulf_sqr1_hi,x
  sm4b:
    sbc mulf_sqr2_hi,x
    sta _CC+1
    ldx memB+1
    sec
  sm5a:
    lda mulf_sqr1_lo,x
  sm6a:
    sbc mulf_sqr2_lo,x
    sta _bb+1
  sm7a:
    lda mulf_sqr1_hi,x
  sm8a:
    sbc mulf_sqr2_hi,x
    sta _BB+1
    sec
  sm5b:
    lda mulf_sqr1_lo,x
  sm6b:
    sbc mulf_sqr2_lo,x
    sta _dd+1
  sm7b:
    lda mulf_sqr1_hi,x
  sm8b:
    sbc mulf_sqr2_hi,x
    sta memR+3
    clc
  _AA:
    lda #0
  _bb:
    adc #0
    sta memR+1
  _BB:
    lda #0
  _CC:
    adc #0
    sta memR+2
    bcc !+
    inc memR+3
    clc
  !:
  _cc:
    lda #0
    adc memR+1
    sta memR+1
  _dd:
    lda #0
    adc memR+2
    sta memR+2
    bcc !+
    inc memR+3
  !:
  //SEG330 [157] (dword) mulf16u::return#0 ← *((const dword*) mulf16u::memR#0) -- vduz1=_deref_pduc1 
    lda memR
    sta return
    lda memR+1
    sta return+1
    lda memR+2
    sta return+2
    lda memR+3
    sta return+3
    jmp breturn
  //SEG331 mulf16u::@return
  breturn:
  //SEG332 [158] return 
    rts
}
//SEG333 mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($66) a, signed word zeropage($68) b)
mul16s: {
    .label _6 = $a8
    .label _12 = $ac
    .label _16 = $aa
    .label _17 = $ae
    .label m = $25
    .label return = $b0
    .label a = $66
    .label b = $68
    .label return_2 = $6a
  //SEG334 [159] (word~) mul16u::b#3 ← (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2 
    lda b
    sta mul16u.b
    lda b+1
    sta mul16u.b+1
  //SEG335 [160] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG336 [161] call mul16u 
  //SEG337 [176] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
  //SEG338 [176] phi (word) mul16u::a#6 = (word~) mul16u::a#8 [phi:mul16s->mul16u#0] -- register_copy 
  //SEG339 [176] phi (word) mul16u::b#2 = (word~) mul16u::b#3 [phi:mul16s->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG340 [162] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return
    lda mul16u.res+1
    sta mul16u.return+1
    lda mul16u.res+2
    sta mul16u.return+2
    lda mul16u.res+3
    sta mul16u.return+3
    jmp b6
  //SEG341 mul16s::@6
  b6:
  //SEG342 [163] (dword) mul16s::m#0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda mul16u.return
    sta m
    lda mul16u.return+1
    sta m+1
    lda mul16u.return+2
    sta m+2
    lda mul16u.return+3
    sta m+3
  //SEG343 [164] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b6
    jmp b3
  //SEG344 mul16s::@3
  b3:
  //SEG345 [165] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG346 [166] (word~) mul16s::$16 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda _6
    sec
    sbc b
    sta _16
    lda _6+1
    sbc b+1
    sta _16+1
  //SEG347 [167] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG348 [168] phi from mul16s::@3 mul16s::@6 to mul16s::@1 [phi:mul16s::@3/mul16s::@6->mul16s::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG349 [168] phi (dword) mul16s::m#5 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@6->mul16s::@1#0] -- register_copy 
    jmp b1
  //SEG350 mul16s::@1
  b1:
  //SEG351 [169] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda b+1
    bpl b2_from_b1
    jmp b4
  //SEG352 mul16s::@4
  b4:
  //SEG353 [170] (word~) mul16s::$12 ← > (dword) mul16s::m#5 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _12
    lda m+3
    sta _12+1
  //SEG354 [171] (word~) mul16s::$17 ← (word~) mul16s::$12 - (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda _12
    sec
    sbc a
    sta _17
    lda _12+1
    sbc a+1
    sta _17+1
  //SEG355 [172] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17 -- vduz1=vduz1_sethi_vwuz2 
    lda _17
    sta m+2
    lda _17+1
    sta m+3
  //SEG356 [173] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG357 [173] phi (dword) mul16s::m#4 = (dword) mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    jmp b2
  //SEG358 mul16s::@2
  b2:
  //SEG359 [174] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 -- vdsz1=_sdword_vduz2 
    lda m
    sta return
    lda m+1
    sta return+1
    lda m+2
    sta return+2
    lda m+3
    sta return+3
    jmp breturn
  //SEG360 mul16s::@return
  breturn:
  //SEG361 [175] return 
    rts
}
//SEG362 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($2b) a, word zeropage($29) b)
mul16u: {
    .label _1 = $b4
    .label mb = $31
    .label a = $2b
    .label res = $2d
    .label return = $a4
    .label b = $29
    .label return_3 = $c1
  //SEG363 [177] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG364 [178] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG365 [178] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG366 [178] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG367 [178] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG368 mul16u::@1
  b1:
  //SEG369 [179] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG370 mul16u::@return
  breturn:
  //SEG371 [180] return 
    rts
  //SEG372 mul16u::@2
  b2:
  //SEG373 [181] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda a
    and #1
    sta _1
  //SEG374 [182] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG375 mul16u::@7
  b7:
  //SEG376 [183] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG377 [184] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG378 [184] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
    jmp b4
  //SEG379 mul16u::@4
  b4:
  //SEG380 [185] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG381 [186] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG382 [178] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  b1_from_b4:
  //SEG383 [178] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG384 [178] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG385 [178] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG386 muls16s
// Slow multiplication of signed words
// Perform a signed multiplication by repeated addition/subtraction
// muls16s(signed word zeropage($5a) a, signed word zeropage($5c) b)
muls16s: {
    .label m = $37
    .label j = $35
    .label return = $37
    .label i = $3b
    .label a = $5a
    .label b = $5c
    .label return_2 = $5e
  //SEG387 [187] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@5 -- vwsz1_lt_0_then_la1 
    lda a+1
    bmi b5_from_muls16s
    jmp b6
  //SEG388 muls16s::@6
  b6:
  //SEG389 [188] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@4 -- vwsz1_le_0_then_la1 
    lda a+1
    bmi b4_from_b6
    bne !+
    lda a
    beq b4_from_b6
  !:
  //SEG390 [189] phi from muls16s::@6 to muls16s::@3 [phi:muls16s::@6->muls16s::@3]
  b3_from_b6:
  //SEG391 [189] phi (signed word) muls16s::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@3#0] -- vwsz1=vbuc1 
    lda #<0
    sta j
    lda #>0
    sta j+1
  //SEG392 [189] phi (signed dword) muls16s::m#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@3#1] -- vdsz1=vbuc1 
    lda #<0
    sta m
    lda #>0
    sta m+1
    lda #<0>>$10
    sta m+2
    lda #>0>>$10
    sta m+3
    jmp b3
  //SEG393 [189] phi from muls16s::@3 to muls16s::@3 [phi:muls16s::@3->muls16s::@3]
  b3_from_b3:
  //SEG394 [189] phi (signed word) muls16s::j#2 = (signed word) muls16s::j#1 [phi:muls16s::@3->muls16s::@3#0] -- register_copy 
  //SEG395 [189] phi (signed dword) muls16s::m#3 = (signed dword) muls16s::m#1 [phi:muls16s::@3->muls16s::@3#1] -- register_copy 
    jmp b3
  //SEG396 muls16s::@3
  b3:
  //SEG397 [190] (signed dword) muls16s::m#1 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#0 -- vdsz1=vdsz1_plus_vwsz2 
    lda b+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    lda m
    clc
    adc b
    sta m
    lda m+1
    adc b+1
    sta m+1
    lda m+2
    adc $ff
    sta m+2
    lda m+3
    adc $ff
    sta m+3
  //SEG398 [191] (signed word) muls16s::j#1 ← ++ (signed word) muls16s::j#2 -- vwsz1=_inc_vwsz1 
    inc j
    bne !+
    inc j+1
  !:
  //SEG399 [192] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3 -- vwsz1_neq_vwsz2_then_la1 
    lda j+1
    cmp a+1
    bne b3_from_b3
    lda j
    cmp a
    bne b3_from_b3
  //SEG400 [193] phi from muls16s::@3 muls16s::@5 to muls16s::@4 [phi:muls16s::@3/muls16s::@5->muls16s::@4]
  b4_from_b3:
  b4_from_b5:
  //SEG401 [193] phi (signed dword) muls16s::return#0 = (signed dword) muls16s::m#1 [phi:muls16s::@3/muls16s::@5->muls16s::@4#0] -- register_copy 
    jmp b4
  //SEG402 [193] phi from muls16s::@6 to muls16s::@4 [phi:muls16s::@6->muls16s::@4]
  b4_from_b6:
  //SEG403 [193] phi (signed dword) muls16s::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@4#0] -- vdsz1=vbuc1 
    lda #<0
    sta return
    lda #>0
    sta return+1
    lda #<0>>$10
    sta return+2
    lda #>0>>$10
    sta return+3
    jmp b4
  //SEG404 muls16s::@4
  b4:
    jmp breturn
  //SEG405 muls16s::@return
  breturn:
  //SEG406 [194] return 
    rts
  //SEG407 [195] phi from muls16s to muls16s::@5 [phi:muls16s->muls16s::@5]
  b5_from_muls16s:
  //SEG408 [195] phi (signed word) muls16s::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s->muls16s::@5#0] -- vwsz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG409 [195] phi (signed dword) muls16s::m#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s->muls16s::@5#1] -- vdsz1=vbuc1 
    lda #<0
    sta m
    lda #>0
    sta m+1
    lda #<0>>$10
    sta m+2
    lda #>0>>$10
    sta m+3
    jmp b5
  //SEG410 [195] phi from muls16s::@5 to muls16s::@5 [phi:muls16s::@5->muls16s::@5]
  b5_from_b5:
  //SEG411 [195] phi (signed word) muls16s::i#2 = (signed word) muls16s::i#1 [phi:muls16s::@5->muls16s::@5#0] -- register_copy 
  //SEG412 [195] phi (signed dword) muls16s::m#5 = (signed dword) muls16s::m#2 [phi:muls16s::@5->muls16s::@5#1] -- register_copy 
    jmp b5
  //SEG413 muls16s::@5
  b5:
  //SEG414 [196] (signed dword) muls16s::m#2 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#0 -- vdsz1=vdsz1_minus_vwsz2 
    lda b+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    sec
    lda m
    sbc b
    sta m
    lda m+1
    sbc b+1
    sta m+1
    lda m+2
    sbc $ff
    sta m+2
    lda m+3
    sbc $ff
    sta m+3
  //SEG415 [197] (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2 -- vwsz1=_dec_vwsz1 
    lda i
    bne !+
    dec i+1
  !:
    dec i
  //SEG416 [198] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5 -- vwsz1_neq_vwsz2_then_la1 
    lda i+1
    cmp a+1
    bne b5_from_b5
    lda i
    cmp a
    bne b5_from_b5
    jmp b4_from_b5
}
//SEG417 mul16u_compare
// Perform many possible word multiplications (slow and fast) and compare the results
mul16u_compare: {
    .label a = $3e
    .label b = $40
    .label ms = $bd
    .label mn = $c5
    .label mf = $cd
    .label j = $42
    .label i = $3d
    .label ok = $43
  //SEG418 [200] phi from mul16u_compare to mul16u_compare::@1 [phi:mul16u_compare->mul16u_compare::@1]
  b1_from_mul16u_compare:
  //SEG419 [200] phi (byte) mul16u_compare::i#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG420 [200] phi (word) mul16u_compare::b#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta b
    lda #>0
    sta b+1
  //SEG421 [200] phi (word) mul16u_compare::a#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta a
    lda #>0
    sta a+1
  //SEG422 [200] phi (byte*) print_char_cursor#139 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_compare->mul16u_compare::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
    jmp b1
  //SEG423 [200] phi from mul16u_compare::@10 to mul16u_compare::@1 [phi:mul16u_compare::@10->mul16u_compare::@1]
  b1_from_b10:
  //SEG424 [200] phi (byte) mul16u_compare::i#12 = (byte) mul16u_compare::i#1 [phi:mul16u_compare::@10->mul16u_compare::@1#0] -- register_copy 
  //SEG425 [200] phi (word) mul16u_compare::b#6 = (word) mul16u_compare::b#1 [phi:mul16u_compare::@10->mul16u_compare::@1#1] -- register_copy 
  //SEG426 [200] phi (word) mul16u_compare::a#6 = (word) mul16u_compare::a#1 [phi:mul16u_compare::@10->mul16u_compare::@1#2] -- register_copy 
  //SEG427 [200] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@10->mul16u_compare::@1#3] -- register_copy 
    jmp b1
  //SEG428 mul16u_compare::@1
  b1:
  //SEG429 [201] call print_str 
  //SEG430 [64] phi from mul16u_compare::@1 to print_str [phi:mul16u_compare::@1->print_str]
  print_str_from_b1:
  //SEG431 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#139 [phi:mul16u_compare::@1->print_str#0] -- register_copy 
  //SEG432 [64] phi (byte*) print_str::str#17 = (const string) str [phi:mul16u_compare::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG433 [202] phi from mul16u_compare::@1 to mul16u_compare::@2 [phi:mul16u_compare::@1->mul16u_compare::@2]
  b2_from_b1:
  //SEG434 [202] phi (byte) mul16u_compare::j#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@1->mul16u_compare::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG435 [202] phi (word) mul16u_compare::b#2 = (word) mul16u_compare::b#6 [phi:mul16u_compare::@1->mul16u_compare::@2#1] -- register_copy 
  //SEG436 [202] phi (word) mul16u_compare::a#2 = (word) mul16u_compare::a#6 [phi:mul16u_compare::@1->mul16u_compare::@2#2] -- register_copy 
    jmp b2
  //SEG437 [202] phi from mul16u_compare::@5 to mul16u_compare::@2 [phi:mul16u_compare::@5->mul16u_compare::@2]
  b2_from_b5:
  //SEG438 [202] phi (byte) mul16u_compare::j#10 = (byte) mul16u_compare::j#1 [phi:mul16u_compare::@5->mul16u_compare::@2#0] -- register_copy 
  //SEG439 [202] phi (word) mul16u_compare::b#2 = (word) mul16u_compare::b#1 [phi:mul16u_compare::@5->mul16u_compare::@2#1] -- register_copy 
  //SEG440 [202] phi (word) mul16u_compare::a#2 = (word) mul16u_compare::a#1 [phi:mul16u_compare::@5->mul16u_compare::@2#2] -- register_copy 
    jmp b2
  //SEG441 mul16u_compare::@2
  b2:
  //SEG442 [203] (word) mul16u_compare::a#1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda a
    adc #<$d2b
    sta a
    lda a+1
    adc #>$d2b
    sta a+1
  //SEG443 [204] (word) mul16u_compare::b#1 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda b
    adc #<$ffd
    sta b
    lda b+1
    adc #>$ffd
    sta b+1
  //SEG444 [205] (word) muls16u::a#0 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta muls16u.a
    lda a+1
    sta muls16u.a+1
  //SEG445 [206] (word) muls16u::b#0 ← (word) mul16u_compare::b#1 -- vwuz1=vwuz2 
    lda b
    sta muls16u.b
    lda b+1
    sta muls16u.b+1
  //SEG446 [207] call muls16u 
    jsr muls16u
  //SEG447 [208] (dword) muls16u::return#2 ← (dword) muls16u::return#0 -- vduz1=vduz2 
    lda muls16u.return
    sta muls16u.return_2
    lda muls16u.return+1
    sta muls16u.return_2+1
    lda muls16u.return+2
    sta muls16u.return_2+2
    lda muls16u.return+3
    sta muls16u.return_2+3
    jmp b13
  //SEG448 mul16u_compare::@13
  b13:
  //SEG449 [209] (dword) mul16u_compare::ms#0 ← (dword) muls16u::return#2 -- vduz1=vduz2 
    lda muls16u.return_2
    sta ms
    lda muls16u.return_2+1
    sta ms+1
    lda muls16u.return_2+2
    sta ms+2
    lda muls16u.return_2+3
    sta ms+3
  //SEG450 [210] (word) mul16u::a#2 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG451 [211] (word) mul16u::b#1 ← (word) mul16u_compare::b#1 -- vwuz1=vwuz2 
    lda b
    sta mul16u.b
    lda b+1
    sta mul16u.b+1
  //SEG452 [212] call mul16u 
  //SEG453 [176] phi from mul16u_compare::@13 to mul16u [phi:mul16u_compare::@13->mul16u]
  mul16u_from_b13:
  //SEG454 [176] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mul16u_compare::@13->mul16u#0] -- register_copy 
  //SEG455 [176] phi (word) mul16u::b#2 = (word) mul16u::b#1 [phi:mul16u_compare::@13->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG456 [213] (dword) mul16u::return#3 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return_3
    lda mul16u.res+1
    sta mul16u.return_3+1
    lda mul16u.res+2
    sta mul16u.return_3+2
    lda mul16u.res+3
    sta mul16u.return_3+3
    jmp b14
  //SEG457 mul16u_compare::@14
  b14:
  //SEG458 [214] (dword) mul16u_compare::mn#0 ← (dword) mul16u::return#3 -- vduz1=vduz2 
    lda mul16u.return_3
    sta mn
    lda mul16u.return_3+1
    sta mn+1
    lda mul16u.return_3+2
    sta mn+2
    lda mul16u.return_3+3
    sta mn+3
  //SEG459 [215] (word) mulf16u::a#1 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mulf16u.a
    lda a+1
    sta mulf16u.a+1
  //SEG460 [216] (word) mulf16u::b#1 ← (word) mul16u_compare::b#1 -- vwuz1=vwuz2 
    lda b
    sta mulf16u.b
    lda b+1
    sta mulf16u.b+1
  //SEG461 [217] call mulf16u 
  //SEG462 [153] phi from mul16u_compare::@14 to mulf16u [phi:mul16u_compare::@14->mulf16u]
  mulf16u_from_b14:
  //SEG463 [153] phi (word) mulf16u::b#2 = (word) mulf16u::b#1 [phi:mul16u_compare::@14->mulf16u#0] -- register_copy 
  //SEG464 [153] phi (word) mulf16u::a#2 = (word) mulf16u::a#1 [phi:mul16u_compare::@14->mulf16u#1] -- register_copy 
    jsr mulf16u
  //SEG465 [218] (dword) mulf16u::return#3 ← (dword) mulf16u::return#0 -- vduz1=vduz2 
    lda mulf16u.return
    sta mulf16u.return_3
    lda mulf16u.return+1
    sta mulf16u.return_3+1
    lda mulf16u.return+2
    sta mulf16u.return_3+2
    lda mulf16u.return+3
    sta mulf16u.return_3+3
    jmp b15
  //SEG466 mul16u_compare::@15
  b15:
  //SEG467 [219] (dword) mul16u_compare::mf#0 ← (dword) mulf16u::return#3 -- vduz1=vduz2 
    lda mulf16u.return_3
    sta mf
    lda mulf16u.return_3+1
    sta mf+1
    lda mulf16u.return_3+2
    sta mf+2
    lda mulf16u.return_3+3
    sta mf+3
  //SEG468 [220] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3 -- vduz1_eq_vduz2_then_la1 
    lda ms
    cmp mf
    bne !+
    lda ms+1
    cmp mf+1
    bne !+
    lda ms+2
    cmp mf+2
    bne !+
    lda ms+3
    cmp mf+3
    beq b3_from_b15
  !:
  //SEG469 [221] phi from mul16u_compare::@15 to mul16u_compare::@6 [phi:mul16u_compare::@15->mul16u_compare::@6]
  b6_from_b15:
    jmp b6
  //SEG470 mul16u_compare::@6
  b6:
  //SEG471 [222] phi from mul16u_compare::@6 to mul16u_compare::@3 [phi:mul16u_compare::@6->mul16u_compare::@3]
  b3_from_b6:
  //SEG472 [222] phi (byte) mul16u_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@6->mul16u_compare::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta ok
    jmp b3
  //SEG473 [222] phi from mul16u_compare::@15 to mul16u_compare::@3 [phi:mul16u_compare::@15->mul16u_compare::@3]
  b3_from_b15:
  //SEG474 [222] phi (byte) mul16u_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mul16u_compare::@15->mul16u_compare::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta ok
    jmp b3
  //SEG475 mul16u_compare::@3
  b3:
  //SEG476 [223] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@22 -- vduz1_eq_vduz2_then_la1 
    lda ms
    cmp mn
    bne !+
    lda ms+1
    cmp mn+1
    bne !+
    lda ms+2
    cmp mn+2
    bne !+
    lda ms+3
    cmp mn+3
    beq b22_from_b3
  !:
  //SEG477 [224] phi from mul16u_compare::@3 to mul16u_compare::@4 [phi:mul16u_compare::@3->mul16u_compare::@4]
  b4_from_b3:
  //SEG478 [224] phi (byte) mul16u_compare::ok#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@3->mul16u_compare::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta ok
    jmp b4
  //SEG479 mul16u_compare::@4
  b4:
  //SEG480 [225] if((byte) mul16u_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u_compare::@5 -- vbuz1_neq_0_then_la1 
    lda ok
    cmp #0
    bne b5
    jmp b8
  //SEG481 mul16u_compare::@8
  b8:
  //SEG482 [226] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG483 [227] (word) mul16u_error::a#0 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mul16u_error.a
    lda a+1
    sta mul16u_error.a+1
  //SEG484 [228] (word) mul16u_error::b#0 ← (word) mul16u_compare::b#1 -- vwuz1=vwuz2 
    lda b
    sta mul16u_error.b
    lda b+1
    sta mul16u_error.b+1
  //SEG485 [229] (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#0 -- vduz1=vduz2 
    lda ms
    sta mul16u_error.ms
    lda ms+1
    sta mul16u_error.ms+1
    lda ms+2
    sta mul16u_error.ms+2
    lda ms+3
    sta mul16u_error.ms+3
  //SEG486 [230] (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#0 -- vduz1=vduz2 
    lda mn
    sta mul16u_error.mn
    lda mn+1
    sta mul16u_error.mn+1
    lda mn+2
    sta mul16u_error.mn+2
    lda mn+3
    sta mul16u_error.mn+3
  //SEG487 [231] (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#0 -- vduz1=vduz2 
    lda mf
    sta mul16u_error.mf
    lda mf+1
    sta mul16u_error.mf+1
    lda mf+2
    sta mul16u_error.mf+2
    lda mf+3
    sta mul16u_error.mf+3
  //SEG488 [232] call mul16u_error 
  //SEG489 [245] phi from mul16u_compare::@8 to mul16u_error [phi:mul16u_compare::@8->mul16u_error]
  mul16u_error_from_b8:
    jsr mul16u_error
    jmp breturn
  //SEG490 mul16u_compare::@return
  breturn:
  //SEG491 [233] return 
    rts
  //SEG492 mul16u_compare::@5
  b5:
  //SEG493 [234] (byte) mul16u_compare::j#1 ← ++ (byte) mul16u_compare::j#10 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG494 [235] if((byte) mul16u_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$10
    bne b2_from_b5
    jmp b10
  //SEG495 mul16u_compare::@10
  b10:
  //SEG496 [236] (byte) mul16u_compare::i#1 ← ++ (byte) mul16u_compare::i#12 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG497 [237] if((byte) mul16u_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b10
  //SEG498 [238] phi from mul16u_compare::@10 to mul16u_compare::@11 [phi:mul16u_compare::@10->mul16u_compare::@11]
  b11_from_b10:
    jmp b11
  //SEG499 mul16u_compare::@11
  b11:
  //SEG500 [239] call print_ln 
  //SEG501 [59] phi from mul16u_compare::@11 to print_ln [phi:mul16u_compare::@11->print_ln]
  print_ln_from_b11:
  //SEG502 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@11->print_ln#0] -- register_copy 
  //SEG503 [59] phi (byte*) print_line_cursor#43 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_compare::@11->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
    jmp b17
  //SEG504 mul16u_compare::@17
  b17:
  //SEG505 [240] (byte*~) print_char_cursor#192 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG506 [241] call print_str 
  //SEG507 [64] phi from mul16u_compare::@17 to print_str [phi:mul16u_compare::@17->print_str]
  print_str_from_b17:
  //SEG508 [64] phi (byte*) print_char_cursor#148 = (byte*~) print_char_cursor#192 [phi:mul16u_compare::@17->print_str#0] -- register_copy 
  //SEG509 [64] phi (byte*) print_str::str#17 = (const string) mul16u_compare::str1 [phi:mul16u_compare::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG510 [242] phi from mul16u_compare::@17 to mul16u_compare::@18 [phi:mul16u_compare::@17->mul16u_compare::@18]
  b18_from_b17:
    jmp b18
  //SEG511 mul16u_compare::@18
  b18:
  //SEG512 [243] call print_ln 
  //SEG513 [59] phi from mul16u_compare::@18 to print_ln [phi:mul16u_compare::@18->print_ln]
  print_ln_from_b18:
  //SEG514 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@18->print_ln#0] -- register_copy 
  //SEG515 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16u_compare::@18->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG516 [244] phi from mul16u_compare::@3 to mul16u_compare::@22 [phi:mul16u_compare::@3->mul16u_compare::@22]
  b22_from_b3:
    jmp b22
  //SEG517 mul16u_compare::@22
  b22:
  //SEG518 [224] phi from mul16u_compare::@22 to mul16u_compare::@4 [phi:mul16u_compare::@22->mul16u_compare::@4]
  b4_from_b22:
  //SEG519 [224] phi (byte) mul16u_compare::ok#3 = (byte) mul16u_compare::ok#4 [phi:mul16u_compare::@22->mul16u_compare::@4#0] -- register_copy 
    jmp b4
    str1: .text "word multiply results match!@"
}
//SEG520 mul16u_error
// mul16u_error(word zeropage($d1) a, word zeropage($d3) b, dword zeropage($d5) ms, dword zeropage($d9) mn, dword zeropage($dd) mf)
mul16u_error: {
    .label a = $d1
    .label b = $d3
    .label ms = $d5
    .label mn = $d9
    .label mf = $dd
  //SEG521 [246] call print_str 
  //SEG522 [64] phi from mul16u_error to print_str [phi:mul16u_error->print_str]
  print_str_from_mul16u_error:
  //SEG523 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#128 [phi:mul16u_error->print_str#0] -- register_copy 
  //SEG524 [64] phi (byte*) print_str::str#17 = (const string) mul16u_error::str [phi:mul16u_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b1
  //SEG525 mul16u_error::@1
  b1:
  //SEG526 [247] (word) print_word::w#3 ← (word) mul16u_error::a#0 -- vwuz1=vwuz2 
    lda a
    sta print_word.w
    lda a+1
    sta print_word.w+1
  //SEG527 [248] call print_word 
  //SEG528 [109] phi from mul16u_error::@1 to print_word [phi:mul16u_error::@1->print_word]
  print_word_from_b1:
  //SEG529 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:mul16u_error::@1->print_word#0] -- register_copy 
  //SEG530 [109] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:mul16u_error::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG531 [249] phi from mul16u_error::@1 to mul16u_error::@2 [phi:mul16u_error::@1->mul16u_error::@2]
  b2_from_b1:
    jmp b2
  //SEG532 mul16u_error::@2
  b2:
  //SEG533 [250] call print_str 
  //SEG534 [64] phi from mul16u_error::@2 to print_str [phi:mul16u_error::@2->print_str]
  print_str_from_b2:
  //SEG535 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@2->print_str#0] -- register_copy 
  //SEG536 [64] phi (byte*) print_str::str#17 = (const string) str1 [phi:mul16u_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b3
  //SEG537 mul16u_error::@3
  b3:
  //SEG538 [251] (word) print_word::w#4 ← (word) mul16u_error::b#0 -- vwuz1=vwuz2 
    lda b
    sta print_word.w
    lda b+1
    sta print_word.w+1
  //SEG539 [252] call print_word 
  //SEG540 [109] phi from mul16u_error::@3 to print_word [phi:mul16u_error::@3->print_word]
  print_word_from_b3:
  //SEG541 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:mul16u_error::@3->print_word#0] -- register_copy 
  //SEG542 [109] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:mul16u_error::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG543 [253] phi from mul16u_error::@3 to mul16u_error::@4 [phi:mul16u_error::@3->mul16u_error::@4]
  b4_from_b3:
    jmp b4
  //SEG544 mul16u_error::@4
  b4:
  //SEG545 [254] call print_str 
  //SEG546 [64] phi from mul16u_error::@4 to print_str [phi:mul16u_error::@4->print_str]
  print_str_from_b4:
  //SEG547 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@4->print_str#0] -- register_copy 
  //SEG548 [64] phi (byte*) print_str::str#17 = (const string) str2 [phi:mul16u_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG549 mul16u_error::@5
  b5:
  //SEG550 [255] (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#0 -- vduz1=vduz2 
    lda ms
    sta print_dword.dw
    lda ms+1
    sta print_dword.dw+1
    lda ms+2
    sta print_dword.dw+2
    lda ms+3
    sta print_dword.dw+3
  //SEG551 [256] call print_dword 
  //SEG552 [103] phi from mul16u_error::@5 to print_dword [phi:mul16u_error::@5->print_dword]
  print_dword_from_b5:
  //SEG553 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@5->print_dword#0] -- register_copy 
  //SEG554 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#1 [phi:mul16u_error::@5->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG555 [257] phi from mul16u_error::@5 to mul16u_error::@6 [phi:mul16u_error::@5->mul16u_error::@6]
  b6_from_b5:
    jmp b6
  //SEG556 mul16u_error::@6
  b6:
  //SEG557 [258] call print_str 
  //SEG558 [64] phi from mul16u_error::@6 to print_str [phi:mul16u_error::@6->print_str]
  print_str_from_b6:
  //SEG559 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@6->print_str#0] -- register_copy 
  //SEG560 [64] phi (byte*) print_str::str#17 = (const string) str3 [phi:mul16u_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG561 mul16u_error::@7
  b7:
  //SEG562 [259] (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#0 -- vduz1=vduz2 
    lda mn
    sta print_dword.dw
    lda mn+1
    sta print_dword.dw+1
    lda mn+2
    sta print_dword.dw+2
    lda mn+3
    sta print_dword.dw+3
  //SEG563 [260] call print_dword 
  //SEG564 [103] phi from mul16u_error::@7 to print_dword [phi:mul16u_error::@7->print_dword]
  print_dword_from_b7:
  //SEG565 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@7->print_dword#0] -- register_copy 
  //SEG566 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#2 [phi:mul16u_error::@7->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG567 [261] phi from mul16u_error::@7 to mul16u_error::@8 [phi:mul16u_error::@7->mul16u_error::@8]
  b8_from_b7:
    jmp b8
  //SEG568 mul16u_error::@8
  b8:
  //SEG569 [262] call print_str 
  //SEG570 [64] phi from mul16u_error::@8 to print_str [phi:mul16u_error::@8->print_str]
  print_str_from_b8:
  //SEG571 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@8->print_str#0] -- register_copy 
  //SEG572 [64] phi (byte*) print_str::str#17 = (const string) str4 [phi:mul16u_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG573 mul16u_error::@9
  b9:
  //SEG574 [263] (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#0 -- vduz1=vduz2 
    lda mf
    sta print_dword.dw
    lda mf+1
    sta print_dword.dw+1
    lda mf+2
    sta print_dword.dw+2
    lda mf+3
    sta print_dword.dw+3
  //SEG575 [264] call print_dword 
  //SEG576 [103] phi from mul16u_error::@9 to print_dword [phi:mul16u_error::@9->print_dword]
  print_dword_from_b9:
  //SEG577 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@9->print_dword#0] -- register_copy 
  //SEG578 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#3 [phi:mul16u_error::@9->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG579 [265] phi from mul16u_error::@9 to mul16u_error::@10 [phi:mul16u_error::@9->mul16u_error::@10]
  b10_from_b9:
    jmp b10
  //SEG580 mul16u_error::@10
  b10:
  //SEG581 [266] call print_ln 
  //SEG582 [59] phi from mul16u_error::@10 to print_ln [phi:mul16u_error::@10->print_ln]
  print_ln_from_b10:
  //SEG583 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#20 [phi:mul16u_error::@10->print_ln#0] -- register_copy 
  //SEG584 [59] phi (byte*) print_line_cursor#43 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_error::@10->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
    jmp breturn
  //SEG585 mul16u_error::@return
  breturn:
  //SEG586 [267] return 
    rts
    str: .text "multiply mismatch @"
}
//SEG587 muls16u
// Slow multiplication of unsigned words
// Calculate an unsigned multiplication by repeated addition
// muls16u(word zeropage($b5) a, word zeropage($b7) b)
muls16u: {
    .label return = $46
    .label m = $46
    .label i = $44
    .label a = $b5
    .label b = $b7
    .label return_2 = $b9
  //SEG588 [268] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1 -- vwuz1_eq_0_then_la1 
    lda a
    bne !+
    lda a+1
    beq b1_from_muls16u
  !:
  //SEG589 [269] phi from muls16u to muls16u::@2 [phi:muls16u->muls16u::@2]
  b2_from_muls16u:
  //SEG590 [269] phi (word) muls16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@2#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG591 [269] phi (dword) muls16u::m#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@2#1] -- vduz1=vbuc1 
    lda #0
    sta m
    lda #0
    sta m+1
    sta m+2
    sta m+3
    jmp b2
  //SEG592 [269] phi from muls16u::@2 to muls16u::@2 [phi:muls16u::@2->muls16u::@2]
  b2_from_b2:
  //SEG593 [269] phi (word) muls16u::i#2 = (word) muls16u::i#1 [phi:muls16u::@2->muls16u::@2#0] -- register_copy 
  //SEG594 [269] phi (dword) muls16u::m#3 = (dword) muls16u::m#1 [phi:muls16u::@2->muls16u::@2#1] -- register_copy 
    jmp b2
  //SEG595 muls16u::@2
  b2:
  //SEG596 [270] (dword) muls16u::m#1 ← (dword) muls16u::m#3 + (word) muls16u::b#0 -- vduz1=vduz1_plus_vwuz2 
    lda m
    clc
    adc b
    sta m
    lda m+1
    adc b+1
    sta m+1
    lda m+2
    adc #0
    sta m+2
    lda m+3
    adc #0
    sta m+3
  //SEG597 [271] (word) muls16u::i#1 ← ++ (word) muls16u::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG598 [272] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2 -- vwuz1_neq_vwuz2_then_la1 
    lda i+1
    cmp a+1
    bne b2_from_b2
    lda i
    cmp a
    bne b2_from_b2
  //SEG599 [273] phi from muls16u::@2 to muls16u::@1 [phi:muls16u::@2->muls16u::@1]
  b1_from_b2:
  //SEG600 [273] phi (dword) muls16u::return#0 = (dword) muls16u::m#1 [phi:muls16u::@2->muls16u::@1#0] -- register_copy 
    jmp b1
  //SEG601 [273] phi from muls16u to muls16u::@1 [phi:muls16u->muls16u::@1]
  b1_from_muls16u:
  //SEG602 [273] phi (dword) muls16u::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@1#0] -- vduz1=vbuc1 
    lda #0
    sta return
    lda #0
    sta return+1
    sta return+2
    sta return+3
    jmp b1
  //SEG603 muls16u::@1
  b1:
    jmp breturn
  //SEG604 muls16u::@return
  breturn:
  //SEG605 [274] return 
    rts
}
//SEG606 mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label _2 = $e1
    .label _5 = $e2
    .label _6 = $e3
    .label c = $4a
    .label sqr1_hi = $4d
    .label sqr = $50
    .label sqr1_lo = $4b
    .label x_2 = $4f
    .label sqr2_hi = $55
    .label x_255 = $52
    .label sqr2_lo = $53
    .label dir = $57
  //SEG607 [276] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG608 [276] phi (byte) mulf_init::x_2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG609 [276] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[$200]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
  //SEG610 [276] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[$200]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
  //SEG611 [276] phi (word) mulf_init::sqr#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
  //SEG612 [276] phi (byte) mulf_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b1
  //SEG613 [276] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  b1_from_b2:
  //SEG614 [276] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
  //SEG615 [276] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
  //SEG616 [276] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
  //SEG617 [276] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
  //SEG618 [276] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    jmp b1
  //SEG619 mulf_init::@1
  b1:
  //SEG620 [277] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG621 [278] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and c
    sta _2
  //SEG622 [279] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 -- vbuz1_neq_0_then_la1 
    lda _2
    cmp #0
    bne b2_from_b1
    jmp b5
  //SEG623 mulf_init::@5
  b5:
  //SEG624 [280] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG625 [281] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG626 [282] phi from mulf_init::@1 mulf_init::@5 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG627 [282] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#0] -- register_copy 
  //SEG628 [282] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#1] -- register_copy 
    jmp b2
  //SEG629 mulf_init::@2
  b2:
  //SEG630 [283] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 -- vbuz1=_lo_vwuz2 
    lda sqr
    sta _5
  //SEG631 [284] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuz2 
    lda _5
    ldy #0
    sta (sqr1_lo),y
  //SEG632 [285] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 -- vbuz1=_hi_vwuz2 
    lda sqr+1
    sta _6
  //SEG633 [286] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 -- _deref_pbuz1=vbuz2 
    lda _6
    ldy #0
    sta (sqr1_hi),y
  //SEG634 [287] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
  //SEG635 [288] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    lda #0
    adc sqr+1
    sta sqr+1
  //SEG636 [289] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
  //SEG637 [290] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200) goto mulf_init::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1_from_b2
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1_from_b2
  //SEG638 [291] phi from mulf_init::@2 to mulf_init::@3 [phi:mulf_init::@2->mulf_init::@3]
  b3_from_b2:
  //SEG639 [291] phi (byte) mulf_init::dir#2 = (byte/word/signed word/dword/signed dword) $ff [phi:mulf_init::@2->mulf_init::@3#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
  //SEG640 [291] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[$200]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@3#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
  //SEG641 [291] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[$200]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@3#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
  //SEG642 [291] phi (byte) mulf_init::x_255#2 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@2->mulf_init::@3#3] -- vbuz1=vbuc1 
    lda #-1
    sta x_255
    jmp b3
  //SEG643 [291] phi from mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@4->mulf_init::@3]
  b3_from_b4:
  //SEG644 [291] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@4->mulf_init::@3#0] -- register_copy 
  //SEG645 [291] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@4->mulf_init::@3#1] -- register_copy 
  //SEG646 [291] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@4->mulf_init::@3#2] -- register_copy 
  //SEG647 [291] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@4->mulf_init::@3#3] -- register_copy 
    jmp b3
  //SEG648 mulf_init::@3
  b3:
  //SEG649 [292] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy x_255
    lda mulf_sqr1_lo,y
    ldy #0
    sta (sqr2_lo),y
  //SEG650 [293] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy x_255
    lda mulf_sqr1_hi,y
    ldy #0
    sta (sqr2_hi),y
  //SEG651 [294] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
  //SEG652 [295] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda x_255
    clc
    adc dir
    sta x_255
  //SEG653 [296] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 -- vbuz1_neq_0_then_la1 
    lda x_255
    cmp #0
    bne b12_from_b3
  //SEG654 [297] phi from mulf_init::@3 to mulf_init::@4 [phi:mulf_init::@3->mulf_init::@4]
  b4_from_b3:
  //SEG655 [297] phi (byte) mulf_init::dir#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@3->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    jmp b4
  //SEG656 mulf_init::@4
  b4:
  //SEG657 [298] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
  //SEG658 [299] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) goto mulf_init::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b3_from_b4
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b3_from_b4
    jmp b8
  //SEG659 mulf_init::@8
  b8:
  //SEG660 [300] *((const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
  //SEG661 [301] *((const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp breturn
  //SEG662 mulf_init::@return
  breturn:
  //SEG663 [302] return 
    rts
  //SEG664 [303] phi from mulf_init::@3 to mulf_init::@12 [phi:mulf_init::@3->mulf_init::@12]
  b12_from_b3:
    jmp b12
  //SEG665 mulf_init::@12
  b12:
  //SEG666 [297] phi from mulf_init::@12 to mulf_init::@4 [phi:mulf_init::@12->mulf_init::@4]
  b4_from_b12:
  //SEG667 [297] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@12->mulf_init::@4#0] -- register_copy 
    jmp b4
}
//SEG668 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $58
  //SEG669 [305] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG670 [305] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG671 [305] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG672 [305] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG673 print_cls::@1
  b1:
  //SEG674 [306] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG675 [307] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG676 [308] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG677 print_cls::@return
  breturn:
  //SEG678 [309] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  str: .text ".@"
  str4: .text " / fast:@"
  str3: .text " / normal:@"
  str1: .text "*@"
  str2: .text " slow:@"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] (byte*~) print_char_cursor#176 ← (byte*) print_line_cursor#1 [ print_char_cursor#176 print_line_cursor#1 ] ( main:2::mul16s_compare:11 [ print_char_cursor#176 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [17] (signed word) mul16s_compare::a#1 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#2 mul16s_compare::j#10 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#2 mul16s_compare::j#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ mul16s_compare::j#10 mul16s_compare::j#1 ]
Statement [18] (signed word) mul16s_compare::b#1 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 ] ) always clobbers reg byte a 
Statement [19] (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 ] ) always clobbers reg byte a 
Statement [20] (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ) always clobbers reg byte a 
Statement [22] (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#0 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::return#2 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::return#2 ] ) always clobbers reg byte a 
Statement [23] (signed dword) mul16s_compare::ms#0 ← (signed dword) muls16s::return#2 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 ] ) always clobbers reg byte a 
Statement [24] (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 ] ) always clobbers reg byte a 
Statement [25] (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 ] ) always clobbers reg byte a 
Statement [27] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::return#2 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::return#2 ] ) always clobbers reg byte a 
Statement [28] (signed dword) mul16s_compare::mn#0 ← (signed dword) mul16s::return#2 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 ] ) always clobbers reg byte a 
Statement [29] (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 ] ) always clobbers reg byte a 
Statement [30] (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 ] ) always clobbers reg byte a 
Statement [32] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::return#2 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::return#2 ] ) always clobbers reg byte a 
Statement [33] (signed dword) mul16s_compare::mf#0 ← (signed dword) mulf16s::return#2 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ) always clobbers reg byte a 
Statement [34] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ) always clobbers reg byte a 
Statement [37] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@22 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_compare::ok#4 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_compare::ok#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ mul16s_compare::ok#3 mul16s_compare::ok#4 ]
Statement [40] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ) always clobbers reg byte a 
Statement [41] (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 ] ) always clobbers reg byte a 
Statement [42] (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 ] ) always clobbers reg byte a 
Statement [43] (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 ] ) always clobbers reg byte a 
Statement [44] (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 ] ) always clobbers reg byte a 
Statement [45] (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 ] ) always clobbers reg byte a 
Statement [54] (byte*~) print_char_cursor#185 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#185 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#185 ] ) always clobbers reg byte a 
Statement [61] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#1 print_char_cursor#129 ] ( main:2::mul16s_compare:11::print_ln:53 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::print_ln:57 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::mul16s_error:46::print_ln:92 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:239 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:243 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::mul16u_error:232::print_ln:266 [ print_line_cursor#1 print_char_cursor#129 ] ) always clobbers reg byte a 
Statement [62] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#129 ] ( main:2::mul16s_compare:11::print_ln:53 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::print_ln:57 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::mul16s_error:46::print_ln:92 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:239 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:243 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::mul16u_error:232::print_ln:266 [ print_line_cursor#1 print_char_cursor#129 ] ) always clobbers reg byte a 
Statement [66] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2 [ print_char_cursor#128 print_str::str#15 ] ( main:2::mul16s_compare:11::print_str:15 [ print_line_cursor#1 mul16s_compare::a#6 mul16s_compare::b#6 mul16s_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::print_str:55 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:72 [ print_line_cursor#1 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:76 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:80 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:84 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:88 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:201 [ mul16u_compare::a#6 mul16u_compare::b#6 mul16u_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:241 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:246 [ mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:250 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:254 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:258 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:262 [ mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ]
Statement [68] *((byte*) print_char_cursor#128) ← *((byte*) print_str::str#15) [ print_char_cursor#128 print_str::str#15 ] ( main:2::mul16s_compare:11::print_str:15 [ print_line_cursor#1 mul16s_compare::a#6 mul16s_compare::b#6 mul16s_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::print_str:55 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:72 [ print_line_cursor#1 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:76 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:80 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:84 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:88 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:201 [ mul16u_compare::a#6 mul16u_compare::b#6 mul16u_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:241 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:246 [ mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:250 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:254 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:258 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:262 [ mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] ) always clobbers reg byte a reg byte y 
Statement [73] (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#1 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [77] (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#2 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#2 ] ) always clobbers reg byte a 
Statement [81] (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mn#0 mul16s_error::mf#0 print_sdword::dw#1 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mn#0 mul16s_error::mf#0 print_sdword::dw#1 ] ) always clobbers reg byte a 
Statement [85] (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mf#0 print_sdword::dw#2 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mf#0 print_sdword::dw#2 ] ) always clobbers reg byte a 
Statement [89] (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#0 [ print_line_cursor#1 print_char_cursor#128 print_sdword::dw#3 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 print_sdword::dw#3 ] ) always clobbers reg byte a 
Statement [95] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1 [ print_char_cursor#128 print_sdword::dw#4 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_sdword::dw#4 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#128 print_sdword::dw#4 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90 [ print_line_cursor#1 print_char_cursor#128 print_sdword::dw#4 ] ) always clobbers reg byte a 
Statement [98] (signed dword) print_sdword::dw#0 ← - (signed dword) print_sdword::dw#4 [ print_char_cursor#20 print_sdword::dw#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_sdword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_sdword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90 [ print_line_cursor#1 print_char_cursor#20 print_sdword::dw#0 ] ) always clobbers reg byte a 
Statement [100] (dword) print_dword::dw#0 ← ((dword)) (signed dword) print_sdword::dw#5 [ print_char_cursor#134 print_dword::dw#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#134 print_dword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#134 print_dword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90 [ print_line_cursor#1 print_char_cursor#134 print_dword::dw#0 ] ) always clobbers reg byte a 
Statement [104] (word) print_word::w#1 ← > (dword) print_dword::dw#4 [ print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264 [ print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] ) always clobbers reg byte a 
Statement [106] (word) print_word::w#2 ← < (dword) print_dword::dw#4 [ print_char_cursor#20 print_word::w#2 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101 [ print_line_cursor#1 print_char_cursor#20 print_word::w#2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260 [ mul16u_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264 [ print_char_cursor#20 print_word::w#2 ] ) always clobbers reg byte a 
Statement [110] (byte) print_byte::b#0 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105 [ print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107 [ print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107 [ mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107 [ print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [112] (byte) print_byte::b#1 ← < (word) print_word::w#5 [ print_char_cursor#20 print_byte::b#1 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105 [ print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107 [ print_line_cursor#1 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107 [ mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107 [ print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [116] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#2 print_char_cursor#136 print_byte::$0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111 [ print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111 [ mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111 [ print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113 [ mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113 [ print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113 [ mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113 [ print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [119] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ print_char_cursor#20 print_byte::$2 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111 [ print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111 [ mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111 [ print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113 [ print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113 [ mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113 [ print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] ) always clobbers reg byte a 
Statement [124] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4 [ print_char_cursor#84 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_char:97 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_sdword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_char:97 [ print_line_cursor#1 mul16s_error::mf#0 print_sdword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_char:97 [ print_line_cursor#1 print_sdword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111::print_char:118 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111::print_char:118 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111::print_char:118 [ print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111::print_char:118 [ print_line_cursor#1 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111::print_char:118 [ mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111::print_char:118 [ print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111::print_char:118 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111::print_char:118 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113::print_char:118 [ print_line_cursor#1 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113::print_char:118 [ mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113::print_char:118 [ print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113::print_char:118 [ print_line_cursor#1 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113::print_char:118 [ mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113::print_char:118 [ print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113::print_char:118 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113::print_char:118 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111::print_char:121 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111::print_char:121 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111::print_char:121 [ print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111::print_char:121 [ print_line_cursor#1 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111::print_char:121 [ mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111::print_char:121 [ print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111::print_char:121 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111::print_char:121 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113::print_char:121 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113::print_char:121 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113::print_char:121 [ print_dword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113::print_char:121 [ print_line_cursor#1 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113::print_char:121 [ mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113::print_char:121 [ print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113::print_char:121 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113::print_char:121 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_char:130 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#3 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_char:130 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#3 print_char_cursor#84 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:23 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [128] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_char_cursor#128 print_sword::w#3 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sword:74 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_sword::w#3 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_sword::w#3 ] ) always clobbers reg byte a 
Statement [131] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#20 print_sword::w#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sword:74 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_sword::w#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [133] (word~) print_word::w#11 ← (word)(signed word) print_sword::w#4 [ print_word::w#11 print_char_cursor#130 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sword:74 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#11 print_char_cursor#130 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [136] (word~) mulf16u::a#4 ← (word)(signed word) mulf16s::a#0 [ mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 ] ) always clobbers reg byte a 
Statement [137] (word~) mulf16u::b#4 ← (word)(signed word) mulf16s::b#0 [ mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 mulf16u::b#4 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 mulf16u::b#4 ] ) always clobbers reg byte a 
Statement [139] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0 [ mulf16s::a#0 mulf16s::b#0 mulf16u::return#2 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::return#2 ] ) always clobbers reg byte a 
Statement [140] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ) always clobbers reg byte a 
Statement [141] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ) always clobbers reg byte a 
Statement [142] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$6 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$6 ] ) always clobbers reg byte a 
Statement [143] (word~) mulf16s::$16 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#0 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$16 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$16 ] ) always clobbers reg byte a 
Statement [144] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$16 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#1 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#1 ] ) always clobbers reg byte a 
Statement [146] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2 [ mulf16s::a#0 mulf16s::m#5 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::m#5 ] ) always clobbers reg byte a 
Statement [147] (word~) mulf16s::$12 ← > (dword) mulf16s::m#5 [ mulf16s::a#0 mulf16s::m#5 mulf16s::$12 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::m#5 mulf16s::$12 ] ) always clobbers reg byte a 
Statement [148] (word~) mulf16s::$17 ← (word~) mulf16s::$12 - (word)(signed word) mulf16s::a#0 [ mulf16s::m#5 mulf16s::$17 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::m#5 mulf16s::$17 ] ) always clobbers reg byte a 
Statement [149] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17 [ mulf16s::m#2 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::m#2 ] ) always clobbers reg byte a 
Statement [151] (signed dword) mulf16s::return#0 ← ((signed dword)) (dword) mulf16s::m#4 [ mulf16s::return#0 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::return#0 ] ) always clobbers reg byte a 
Statement [154] *((const word*) mulf16u::memA#0) ← (word) mulf16u::a#2 [ mulf16u::b#2 ] ( main:2::mul16s_compare:11::mulf16s:31::mulf16u:138 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::b#2 ] main:2::mul16u_compare:9::mulf16u:217 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::b#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:66 [ mul16u_compare::j#10 mul16u_compare::j#1 ]
Statement [155] *((const word*) mulf16u::memB#0) ← (word) mulf16u::b#2 [ ] ( main:2::mul16s_compare:11::mulf16s:31::mulf16u:138 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 ] main:2::mul16u_compare:9::mulf16u:217 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:7 [ mul16s_compare::j#10 mul16s_compare::j#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:66 [ mul16u_compare::j#10 mul16u_compare::j#1 ]
Statement [157] (dword) mulf16u::return#0 ← *((const dword*) mulf16u::memR#0) [ mulf16u::return#0 ] ( main:2::mul16s_compare:11::mulf16s:31::mulf16u:138 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::return#0 ] main:2::mul16u_compare:9::mulf16u:217 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::return#0 ] ) always clobbers reg byte a 
Statement [159] (word~) mul16u::b#3 ← (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16u::b#3 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::b#3 ] ) always clobbers reg byte a 
Statement [160] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16s::b#0 mul16u::b#3 mul16u::a#8 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::b#3 mul16u::a#8 ] ) always clobbers reg byte a 
Statement [162] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [163] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [164] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [165] (word~) mul16s::$6 ← > (dword) mul16s::m#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ) always clobbers reg byte a 
Statement [166] (word~) mul16s::$16 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$16 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$16 ] ) always clobbers reg byte a 
Statement [167] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 [ mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ) always clobbers reg byte a 
Statement [169] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2 [ mul16s::a#0 mul16s::m#5 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::m#5 ] ) always clobbers reg byte a 
Statement [170] (word~) mul16s::$12 ← > (dword) mul16s::m#5 [ mul16s::a#0 mul16s::m#5 mul16s::$12 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::m#5 mul16s::$12 ] ) always clobbers reg byte a 
Statement [171] (word~) mul16s::$17 ← (word~) mul16s::$12 - (word)(signed word) mul16s::a#0 [ mul16s::m#5 mul16s::$17 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::m#5 mul16s::$17 ] ) always clobbers reg byte a 
Statement [172] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17 [ mul16s::m#2 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::m#2 ] ) always clobbers reg byte a 
Statement [174] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 [ mul16s::return#0 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::return#0 ] ) always clobbers reg byte a 
Statement [177] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::a#6 mul16u::mb#0 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::a#6 mul16u::mb#0 ] ) always clobbers reg byte a 
Statement [179] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [181] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [183] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [187] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@5 [ muls16s::a#0 muls16s::b#0 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ) always clobbers reg byte a 
Statement [188] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@4 [ muls16s::a#0 muls16s::b#0 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ) always clobbers reg byte a 
Statement [190] (signed dword) muls16s::m#1 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#0 [ muls16s::a#0 muls16s::b#0 muls16s::j#2 muls16s::m#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::j#2 muls16s::m#1 ] ) always clobbers reg byte a 
Statement [192] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3 [ muls16s::a#0 muls16s::b#0 muls16s::m#1 muls16s::j#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#1 muls16s::j#1 ] ) always clobbers reg byte a 
Statement [196] (signed dword) muls16s::m#2 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#0 [ muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#2 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#2 ] ) always clobbers reg byte a 
Statement [197] (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2 [ muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ) always clobbers reg byte a 
Statement [198] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5 [ muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ) always clobbers reg byte a 
Statement [203] (word) mul16u_compare::a#1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#2 mul16u_compare::j#10 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#2 mul16u_compare::j#10 ] ) always clobbers reg byte a 
Statement [204] (word) mul16u_compare::b#1 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 ] ) always clobbers reg byte a 
Statement [205] (word) muls16u::a#0 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 ] ) always clobbers reg byte a 
Statement [206] (word) muls16u::b#0 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 ] ) always clobbers reg byte a 
Statement [208] (dword) muls16u::return#2 ← (dword) muls16u::return#0 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::return#2 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::return#2 ] ) always clobbers reg byte a 
Statement [209] (dword) mul16u_compare::ms#0 ← (dword) muls16u::return#2 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ) always clobbers reg byte a 
Statement [210] (word) mul16u::a#2 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ) always clobbers reg byte a 
Statement [211] (word) mul16u::b#1 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mul16u::b#1 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u::b#1 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ) always clobbers reg byte a 
Statement [213] (dword) mul16u::return#3 ← (dword) mul16u::res#2 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::return#3 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::return#3 ] ) always clobbers reg byte a 
Statement [214] (dword) mul16u_compare::mn#0 ← (dword) mul16u::return#3 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement [215] (word) mulf16u::a#1 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mulf16u::a#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mulf16u::a#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement [216] (word) mulf16u::b#1 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mulf16u::a#1 mulf16u::b#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mulf16u::a#1 mulf16u::b#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement [218] (dword) mulf16u::return#3 ← (dword) mulf16u::return#0 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::return#3 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::return#3 ] ) always clobbers reg byte a 
Statement [219] (dword) mul16u_compare::mf#0 ← (dword) mulf16u::return#3 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ) always clobbers reg byte a 
Statement [220] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ) always clobbers reg byte a 
Statement [223] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@22 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_compare::ok#4 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_compare::ok#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:67 [ mul16u_compare::ok#3 mul16u_compare::ok#4 ]
Statement [226] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ) always clobbers reg byte a 
Statement [227] (word) mul16u_error::a#0 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 ] ) always clobbers reg byte a 
Statement [228] (word) mul16u_error::b#0 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 ] ) always clobbers reg byte a 
Statement [229] (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#0 [ print_char_cursor#128 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 ] ) always clobbers reg byte a 
Statement [230] (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#0 [ print_char_cursor#128 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 ] ) always clobbers reg byte a 
Statement [231] (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#0 [ print_char_cursor#128 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [237] if((byte) mul16u_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@1 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::i#1 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::i#1 ] ) always clobbers reg byte a 
Statement [240] (byte*~) print_char_cursor#192 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#192 ] ( main:2::mul16u_compare:9 [ print_line_cursor#1 print_char_cursor#192 ] ) always clobbers reg byte a 
Statement [247] (word) print_word::w#3 ← (word) mul16u_error::a#0 [ print_char_cursor#128 print_word::w#3 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_word::w#3 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [251] (word) print_word::w#4 ← (word) mul16u_error::b#0 [ print_char_cursor#128 print_word::w#4 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_word::w#4 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [255] (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#0 [ print_char_cursor#128 print_dword::dw#1 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_dword::dw#1 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [259] (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#0 [ print_char_cursor#128 print_dword::dw#2 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_dword::dw#2 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [263] (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#0 [ print_char_cursor#128 print_dword::dw#3 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_dword::dw#3 ] ) always clobbers reg byte a 
Statement [268] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1 [ muls16u::a#0 muls16u::b#0 ] ( main:2::mul16u_compare:9::muls16u:207 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 ] ) always clobbers reg byte a 
Statement [270] (dword) muls16u::m#1 ← (dword) muls16u::m#3 + (word) muls16u::b#0 [ muls16u::a#0 muls16u::b#0 muls16u::i#2 muls16u::m#1 ] ( main:2::mul16u_compare:9::muls16u:207 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 muls16u::i#2 muls16u::m#1 ] ) always clobbers reg byte a 
Statement [272] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2 [ muls16u::a#0 muls16u::b#0 muls16u::m#1 muls16u::i#1 ] ( main:2::mul16u_compare:9::muls16u:207 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 muls16u::m#1 muls16u::i#1 ] ) always clobbers reg byte a 
Statement [278] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:2::mulf_init:7 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:74 [ mulf_init::c#2 mulf_init::c#1 ]
Statement [283] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) always clobbers reg byte a 
Statement [284] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:74 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [285] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) always clobbers reg byte a 
Statement [286] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [288] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [290] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::mulf_init:7 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [292] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::mulf_init:7 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ]
Statement [293] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::mulf_init:7 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [295] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:2::mulf_init:7 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) always clobbers reg byte a 
Statement [299] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:2::mulf_init:7 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) always clobbers reg byte a 
Statement [300] *((const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100) [ ] ( main:2::mulf_init:7 [ ] ) always clobbers reg byte a 
Statement [301] *((const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100) [ ] ( main:2::mulf_init:7 [ ] ) always clobbers reg byte a 
Statement [306] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [308] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [4] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] (byte*~) print_char_cursor#176 ← (byte*) print_line_cursor#1 [ print_char_cursor#176 print_line_cursor#1 ] ( main:2::mul16s_compare:11 [ print_char_cursor#176 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [17] (signed word) mul16s_compare::a#1 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#2 mul16s_compare::j#10 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#2 mul16s_compare::j#10 ] ) always clobbers reg byte a 
Statement [18] (signed word) mul16s_compare::b#1 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 ] ) always clobbers reg byte a 
Statement [19] (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 ] ) always clobbers reg byte a 
Statement [20] (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ) always clobbers reg byte a 
Statement [22] (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#0 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::return#2 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::return#2 ] ) always clobbers reg byte a 
Statement [23] (signed dword) mul16s_compare::ms#0 ← (signed dword) muls16s::return#2 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 ] ) always clobbers reg byte a 
Statement [24] (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 ] ) always clobbers reg byte a 
Statement [25] (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 ] ) always clobbers reg byte a 
Statement [27] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::return#2 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::return#2 ] ) always clobbers reg byte a 
Statement [28] (signed dword) mul16s_compare::mn#0 ← (signed dword) mul16s::return#2 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 ] ) always clobbers reg byte a 
Statement [29] (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 ] ) always clobbers reg byte a 
Statement [30] (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 ] ) always clobbers reg byte a 
Statement [32] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::return#2 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::return#2 ] ) always clobbers reg byte a 
Statement [33] (signed dword) mul16s_compare::mf#0 ← (signed dword) mulf16s::return#2 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ) always clobbers reg byte a 
Statement [34] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ) always clobbers reg byte a 
Statement [37] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@22 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_compare::ok#4 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_compare::ok#4 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 ] ) always clobbers reg byte a 
Statement [41] (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#1 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::b#1 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 ] ) always clobbers reg byte a 
Statement [42] (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#1 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::ms#0 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 ] ) always clobbers reg byte a 
Statement [43] (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mn#0 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 ] ) always clobbers reg byte a 
Statement [44] (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::mf#0 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 ] ) always clobbers reg byte a 
Statement [45] (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 ] ) always clobbers reg byte a 
Statement [51] if((byte) mul16s_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@1 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::i#1 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::i#1 ] ) always clobbers reg byte a 
Statement [54] (byte*~) print_char_cursor#185 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#185 ] ( main:2::mul16s_compare:11 [ print_line_cursor#1 print_char_cursor#185 ] ) always clobbers reg byte a 
Statement [61] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#1 print_char_cursor#129 ] ( main:2::mul16s_compare:11::print_ln:53 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::print_ln:57 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::mul16s_error:46::print_ln:92 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:239 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:243 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::mul16u_error:232::print_ln:266 [ print_line_cursor#1 print_char_cursor#129 ] ) always clobbers reg byte a 
Statement [62] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#129 ] ( main:2::mul16s_compare:11::print_ln:53 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::print_ln:57 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16s_compare:11::mul16s_error:46::print_ln:92 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:239 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::print_ln:243 [ print_line_cursor#1 print_char_cursor#129 ] main:2::mul16u_compare:9::mul16u_error:232::print_ln:266 [ print_line_cursor#1 print_char_cursor#129 ] ) always clobbers reg byte a 
Statement [66] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2 [ print_char_cursor#128 print_str::str#15 ] ( main:2::mul16s_compare:11::print_str:15 [ print_line_cursor#1 mul16s_compare::a#6 mul16s_compare::b#6 mul16s_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::print_str:55 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:72 [ print_line_cursor#1 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:76 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:80 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:84 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:88 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:201 [ mul16u_compare::a#6 mul16u_compare::b#6 mul16u_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:241 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:246 [ mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:250 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:254 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:258 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:262 [ mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] ) always clobbers reg byte a reg byte y 
Statement [68] *((byte*) print_char_cursor#128) ← *((byte*) print_str::str#15) [ print_char_cursor#128 print_str::str#15 ] ( main:2::mul16s_compare:11::print_str:15 [ print_line_cursor#1 mul16s_compare::a#6 mul16s_compare::b#6 mul16s_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::print_str:55 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:72 [ print_line_cursor#1 mul16s_error::a#0 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:76 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:80 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:84 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16s_compare:11::mul16s_error:46::print_str:88 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:201 [ mul16u_compare::a#6 mul16u_compare::b#6 mul16u_compare::i#12 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::print_str:241 [ print_line_cursor#1 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:246 [ mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:250 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:254 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:258 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] main:2::mul16u_compare:9::mul16u_error:232::print_str:262 [ mul16u_error::mf#0 print_char_cursor#128 print_str::str#15 ] ) always clobbers reg byte a reg byte y 
Statement [73] (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#1 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [77] (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#2 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#2 ] ) always clobbers reg byte a 
Statement [81] (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mn#0 mul16s_error::mf#0 print_sdword::dw#1 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mn#0 mul16s_error::mf#0 print_sdword::dw#1 ] ) always clobbers reg byte a 
Statement [85] (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#0 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mf#0 print_sdword::dw#2 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 mul16s_error::mf#0 print_sdword::dw#2 ] ) always clobbers reg byte a 
Statement [89] (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#0 [ print_line_cursor#1 print_char_cursor#128 print_sdword::dw#3 ] ( main:2::mul16s_compare:11::mul16s_error:46 [ print_line_cursor#1 print_char_cursor#128 print_sdword::dw#3 ] ) always clobbers reg byte a 
Statement [95] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1 [ print_char_cursor#128 print_sdword::dw#4 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_sdword::dw#4 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#128 print_sdword::dw#4 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90 [ print_line_cursor#1 print_char_cursor#128 print_sdword::dw#4 ] ) always clobbers reg byte a 
Statement [98] (signed dword) print_sdword::dw#0 ← - (signed dword) print_sdword::dw#4 [ print_char_cursor#20 print_sdword::dw#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_sdword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_sdword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90 [ print_line_cursor#1 print_char_cursor#20 print_sdword::dw#0 ] ) always clobbers reg byte a 
Statement [100] (dword) print_dword::dw#0 ← ((dword)) (signed dword) print_sdword::dw#5 [ print_char_cursor#134 print_dword::dw#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#134 print_dword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#134 print_dword::dw#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90 [ print_line_cursor#1 print_char_cursor#134 print_dword::dw#0 ] ) always clobbers reg byte a 
Statement [104] (word) print_word::w#1 ← > (dword) print_dword::dw#4 [ print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264 [ print_dword::dw#4 print_char_cursor#133 print_word::w#1 ] ) always clobbers reg byte a 
Statement [106] (word) print_word::w#2 ← < (dword) print_dword::dw#4 [ print_char_cursor#20 print_word::w#2 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101 [ print_line_cursor#1 print_char_cursor#20 print_word::w#2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260 [ mul16u_error::mf#0 print_char_cursor#20 print_word::w#2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264 [ print_char_cursor#20 print_word::w#2 ] ) always clobbers reg byte a 
Statement [110] (byte) print_byte::b#0 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105 [ print_dword::dw#4 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107 [ print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107 [ mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107 [ print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#132 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [112] (byte) print_byte::b#1 ← < (word) print_word::w#5 [ print_char_cursor#20 print_byte::b#1 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105 [ print_dword::dw#4 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107 [ print_line_cursor#1 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107 [ mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107 [ print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [116] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#2 print_char_cursor#136 print_byte::$0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111 [ print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111 [ mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111 [ print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113 [ mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113 [ print_dword::dw#4 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113 [ mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113 [ print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#136 print_byte::$0 ] ) always clobbers reg byte a 
Statement [119] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ print_char_cursor#20 print_byte::$2 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111 [ print_dword::dw#4 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111 [ print_line_cursor#1 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111 [ mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111 [ print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113 [ print_dword::dw#4 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113 [ print_line_cursor#1 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113 [ mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113 [ print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#20 print_byte::$2 ] ) always clobbers reg byte a 
Statement [124] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4 [ print_char_cursor#84 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_char:97 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_sdword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_char:97 [ print_line_cursor#1 mul16s_error::mf#0 print_sdword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_char:97 [ print_line_cursor#1 print_sdword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111::print_char:118 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111::print_char:118 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111::print_char:118 [ print_dword::dw#4 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111::print_char:118 [ print_line_cursor#1 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111::print_char:118 [ mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111::print_char:118 [ print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111::print_char:118 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111::print_char:118 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111::print_char:118 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113::print_char:118 [ print_line_cursor#1 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113::print_char:118 [ mul16u_error::mf#0 print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113::print_char:118 [ print_dword::dw#4 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113::print_char:118 [ print_line_cursor#1 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113::print_char:118 [ mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113::print_char:118 [ mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113::print_char:118 [ print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113::print_char:118 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113::print_char:118 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113::print_char:118 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_byte::b#2 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:111::print_char:121 [ print_line_cursor#1 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:111::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:111::print_char:121 [ mul16u_error::mf#0 print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:111::print_char:121 [ print_dword::dw#4 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:111::print_char:121 [ print_line_cursor#1 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:111::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:111::print_char:121 [ mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:111::print_char:121 [ print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:111::print_char:121 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:111::print_char:121 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:111::print_char:121 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_word::w#5 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:105::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:105::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:105::print_byte:113::print_char:121 [ print_line_cursor#1 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:105::print_byte:113::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:105::print_byte:113::print_char:121 [ mul16u_error::mf#0 print_dword::dw#4 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:105::print_byte:113::print_char:121 [ print_dword::dw#4 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:82::print_dword:101::print_word:107::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:86::print_dword:101::print_word:107::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sdword:90::print_dword:101::print_word:107::print_byte:113::print_char:121 [ print_line_cursor#1 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:256::print_word:107::print_byte:113::print_char:121 [ mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:260::print_word:107::print_byte:113::print_char:121 [ mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_dword:264::print_word:107::print_byte:113::print_char:121 [ print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_word:134::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_word:134::print_byte:113::print_char:121 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:248::print_byte:113::print_char:121 [ mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16u_compare:9::mul16u_error:232::print_word:252::print_byte:113::print_char:121 [ mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:74::print_char:130 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#3 print_char_cursor#84 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78::print_char:130 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_sword::w#3 print_char_cursor#84 ] ) always clobbers reg byte y 
Statement [128] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_char_cursor#128 print_sword::w#3 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sword:74 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_sword::w#3 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#128 print_sword::w#3 ] ) always clobbers reg byte a 
Statement [131] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#20 print_sword::w#0 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sword:74 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_sword::w#0 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_char_cursor#20 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [133] (word~) print_word::w#11 ← (word)(signed word) print_sword::w#4 [ print_word::w#11 print_char_cursor#130 ] ( main:2::mul16s_compare:11::mul16s_error:46::print_sword:74 [ print_line_cursor#1 mul16s_error::b#0 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#11 print_char_cursor#130 ] main:2::mul16s_compare:11::mul16s_error:46::print_sword:78 [ print_line_cursor#1 mul16s_error::ms#0 mul16s_error::mn#0 mul16s_error::mf#0 print_word::w#11 print_char_cursor#130 ] ) always clobbers reg byte a 
Statement [136] (word~) mulf16u::a#4 ← (word)(signed word) mulf16s::a#0 [ mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 ] ) always clobbers reg byte a 
Statement [137] (word~) mulf16u::b#4 ← (word)(signed word) mulf16s::b#0 [ mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 mulf16u::b#4 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::a#4 mulf16u::b#4 ] ) always clobbers reg byte a 
Statement [139] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0 [ mulf16s::a#0 mulf16s::b#0 mulf16u::return#2 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::return#2 ] ) always clobbers reg byte a 
Statement [140] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ) always clobbers reg byte a 
Statement [141] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 ] ) always clobbers reg byte a 
Statement [142] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$6 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$6 ] ) always clobbers reg byte a 
Statement [143] (word~) mulf16s::$16 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#0 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$16 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#0 mulf16s::$16 ] ) always clobbers reg byte a 
Statement [144] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$16 [ mulf16s::a#0 mulf16s::b#0 mulf16s::m#1 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16s::m#1 ] ) always clobbers reg byte a 
Statement [146] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2 [ mulf16s::a#0 mulf16s::m#5 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::m#5 ] ) always clobbers reg byte a 
Statement [147] (word~) mulf16s::$12 ← > (dword) mulf16s::m#5 [ mulf16s::a#0 mulf16s::m#5 mulf16s::$12 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::m#5 mulf16s::$12 ] ) always clobbers reg byte a 
Statement [148] (word~) mulf16s::$17 ← (word~) mulf16s::$12 - (word)(signed word) mulf16s::a#0 [ mulf16s::m#5 mulf16s::$17 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::m#5 mulf16s::$17 ] ) always clobbers reg byte a 
Statement [149] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17 [ mulf16s::m#2 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::m#2 ] ) always clobbers reg byte a 
Statement [151] (signed dword) mulf16s::return#0 ← ((signed dword)) (dword) mulf16s::m#4 [ mulf16s::return#0 ] ( main:2::mul16s_compare:11::mulf16s:31 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::return#0 ] ) always clobbers reg byte a 
Statement [154] *((const word*) mulf16u::memA#0) ← (word) mulf16u::a#2 [ mulf16u::b#2 ] ( main:2::mul16s_compare:11::mulf16s:31::mulf16u:138 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::b#2 ] main:2::mul16u_compare:9::mulf16u:217 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::b#2 ] ) always clobbers reg byte a 
Statement [155] *((const word*) mulf16u::memB#0) ← (word) mulf16u::b#2 [ ] ( main:2::mul16s_compare:11::mulf16s:31::mulf16u:138 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 ] main:2::mul16u_compare:9::mulf16u:217 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  } always clobbers reg byte a reg byte x 
Statement [157] (dword) mulf16u::return#0 ← *((const dword*) mulf16u::memR#0) [ mulf16u::return#0 ] ( main:2::mul16s_compare:11::mulf16s:31::mulf16u:138 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s_compare::mn#0 mulf16s::a#0 mulf16s::b#0 mulf16u::return#0 ] main:2::mul16u_compare:9::mulf16u:217 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::return#0 ] ) always clobbers reg byte a 
Statement [159] (word~) mul16u::b#3 ← (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16u::b#3 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::b#3 ] ) always clobbers reg byte a 
Statement [160] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16s::b#0 mul16u::b#3 mul16u::a#8 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::b#3 mul16u::a#8 ] ) always clobbers reg byte a 
Statement [162] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [163] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [164] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [165] (word~) mul16s::$6 ← > (dword) mul16s::m#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ) always clobbers reg byte a 
Statement [166] (word~) mul16s::$16 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$16 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$16 ] ) always clobbers reg byte a 
Statement [167] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 [ mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ) always clobbers reg byte a 
Statement [169] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2 [ mul16s::a#0 mul16s::m#5 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::m#5 ] ) always clobbers reg byte a 
Statement [170] (word~) mul16s::$12 ← > (dword) mul16s::m#5 [ mul16s::a#0 mul16s::m#5 mul16s::$12 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::m#5 mul16s::$12 ] ) always clobbers reg byte a 
Statement [171] (word~) mul16s::$17 ← (word~) mul16s::$12 - (word)(signed word) mul16s::a#0 [ mul16s::m#5 mul16s::$17 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::m#5 mul16s::$17 ] ) always clobbers reg byte a 
Statement [172] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17 [ mul16s::m#2 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::m#2 ] ) always clobbers reg byte a 
Statement [174] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 [ mul16s::return#0 ] ( main:2::mul16s_compare:11::mul16s:26 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::return#0 ] ) always clobbers reg byte a 
Statement [177] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::a#6 mul16u::mb#0 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::a#6 mul16u::mb#0 ] ) always clobbers reg byte a 
Statement [179] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [181] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [183] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:2::mul16s_compare:11::mul16s:26::mul16u:161 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 mul16s_compare::ms#0 mul16s::a#0 mul16s::b#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:2::mul16u_compare:9::mul16u:212 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [187] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@5 [ muls16s::a#0 muls16s::b#0 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ) always clobbers reg byte a 
Statement [188] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@4 [ muls16s::a#0 muls16s::b#0 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 ] ) always clobbers reg byte a 
Statement [190] (signed dword) muls16s::m#1 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#0 [ muls16s::a#0 muls16s::b#0 muls16s::j#2 muls16s::m#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::j#2 muls16s::m#1 ] ) always clobbers reg byte a 
Statement [192] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3 [ muls16s::a#0 muls16s::b#0 muls16s::m#1 muls16s::j#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#1 muls16s::j#1 ] ) always clobbers reg byte a 
Statement [196] (signed dword) muls16s::m#2 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#0 [ muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#2 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#2 ] ) always clobbers reg byte a 
Statement [197] (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2 [ muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ) always clobbers reg byte a 
Statement [198] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5 [ muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ( main:2::mul16s_compare:11::muls16s:21 [ print_line_cursor#1 mul16s_compare::i#12 print_char_cursor#128 mul16s_compare::a#1 mul16s_compare::b#1 mul16s_compare::j#10 muls16s::a#0 muls16s::b#0 muls16s::m#2 muls16s::i#1 ] ) always clobbers reg byte a 
Statement [203] (word) mul16u_compare::a#1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#2 mul16u_compare::j#10 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#2 mul16u_compare::j#10 ] ) always clobbers reg byte a 
Statement [204] (word) mul16u_compare::b#1 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 ] ) always clobbers reg byte a 
Statement [205] (word) muls16u::a#0 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 ] ) always clobbers reg byte a 
Statement [206] (word) muls16u::b#0 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 ] ) always clobbers reg byte a 
Statement [208] (dword) muls16u::return#2 ← (dword) muls16u::return#0 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::return#2 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::return#2 ] ) always clobbers reg byte a 
Statement [209] (dword) mul16u_compare::ms#0 ← (dword) muls16u::return#2 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ) always clobbers reg byte a 
Statement [210] (word) mul16u::a#2 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ) always clobbers reg byte a 
Statement [211] (word) mul16u::b#1 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mul16u::b#1 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u::b#1 mul16u::a#2 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 ] ) always clobbers reg byte a 
Statement [213] (dword) mul16u::return#3 ← (dword) mul16u::res#2 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::return#3 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u::return#3 ] ) always clobbers reg byte a 
Statement [214] (dword) mul16u_compare::mn#0 ← (dword) mul16u::return#3 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement [215] (word) mulf16u::a#1 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mulf16u::a#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mulf16u::a#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement [216] (word) mulf16u::b#1 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mulf16u::a#1 mulf16u::b#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mulf16u::a#1 mulf16u::b#1 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 ] ) always clobbers reg byte a 
Statement [218] (dword) mulf16u::return#3 ← (dword) mulf16u::return#0 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::return#3 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mulf16u::return#3 ] ) always clobbers reg byte a 
Statement [219] (dword) mul16u_compare::mf#0 ← (dword) mulf16u::return#3 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ) always clobbers reg byte a 
Statement [220] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ) always clobbers reg byte a 
Statement [223] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@22 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_compare::ok#4 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_compare::ok#4 ] ) always clobbers reg byte a 
Statement [226] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 ] ) always clobbers reg byte a 
Statement [227] (word) mul16u_error::a#0 ← (word) mul16u_compare::a#1 [ print_char_cursor#128 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::b#1 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 ] ) always clobbers reg byte a 
Statement [228] (word) mul16u_error::b#0 ← (word) mul16u_compare::b#1 [ print_char_cursor#128 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::ms#0 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 ] ) always clobbers reg byte a 
Statement [229] (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#0 [ print_char_cursor#128 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::mn#0 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 ] ) always clobbers reg byte a 
Statement [230] (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#0 [ print_char_cursor#128 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::mf#0 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 ] ) always clobbers reg byte a 
Statement [231] (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#0 [ print_char_cursor#128 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_error::a#0 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [237] if((byte) mul16u_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@1 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::i#1 ] ( main:2::mul16u_compare:9 [ print_char_cursor#128 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::i#1 ] ) always clobbers reg byte a 
Statement [240] (byte*~) print_char_cursor#192 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#192 ] ( main:2::mul16u_compare:9 [ print_line_cursor#1 print_char_cursor#192 ] ) always clobbers reg byte a 
Statement [247] (word) print_word::w#3 ← (word) mul16u_error::a#0 [ print_char_cursor#128 print_word::w#3 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_word::w#3 mul16u_error::b#0 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [251] (word) print_word::w#4 ← (word) mul16u_error::b#0 [ print_char_cursor#128 print_word::w#4 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_word::w#4 mul16u_error::ms#0 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [255] (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#0 [ print_char_cursor#128 print_dword::dw#1 mul16u_error::mn#0 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_dword::dw#1 mul16u_error::mn#0 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [259] (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#0 [ print_char_cursor#128 print_dword::dw#2 mul16u_error::mf#0 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_dword::dw#2 mul16u_error::mf#0 ] ) always clobbers reg byte a 
Statement [263] (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#0 [ print_char_cursor#128 print_dword::dw#3 ] ( main:2::mul16u_compare:9::mul16u_error:232 [ print_char_cursor#128 print_dword::dw#3 ] ) always clobbers reg byte a 
Statement [268] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1 [ muls16u::a#0 muls16u::b#0 ] ( main:2::mul16u_compare:9::muls16u:207 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 ] ) always clobbers reg byte a 
Statement [270] (dword) muls16u::m#1 ← (dword) muls16u::m#3 + (word) muls16u::b#0 [ muls16u::a#0 muls16u::b#0 muls16u::i#2 muls16u::m#1 ] ( main:2::mul16u_compare:9::muls16u:207 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 muls16u::i#2 muls16u::m#1 ] ) always clobbers reg byte a 
Statement [272] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2 [ muls16u::a#0 muls16u::b#0 muls16u::m#1 muls16u::i#1 ] ( main:2::mul16u_compare:9::muls16u:207 [ print_char_cursor#128 mul16u_compare::i#12 mul16u_compare::a#1 mul16u_compare::b#1 mul16u_compare::j#10 muls16u::a#0 muls16u::b#0 muls16u::m#1 muls16u::i#1 ] ) always clobbers reg byte a 
Statement [278] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ( main:2::mulf_init:7 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$2 ] ) always clobbers reg byte a 
Statement [283] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$5 ] ) always clobbers reg byte a 
Statement [284] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [285] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$6 ] ) always clobbers reg byte a 
Statement [286] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [288] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::mulf_init:7 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [290] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::mulf_init:7 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [292] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::mulf_init:7 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [293] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::mulf_init:7 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [295] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:2::mulf_init:7 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) always clobbers reg byte a 
Statement [299] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) goto mulf_init::@3 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:2::mulf_init:7 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) always clobbers reg byte a 
Statement [300] *((const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100) [ ] ( main:2::mulf_init:7 [ ] ) always clobbers reg byte a 
Statement [301] *((const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100) [ ] ( main:2::mulf_init:7 [ ] ) always clobbers reg byte a 
Statement [306] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [308] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ mul16s_compare::j#10 mul16s_compare::j#1 ] : zp ZP_BYTE:7 , reg byte y , 
Potential registers zp ZP_BYTE:8 [ mul16s_compare::ok#3 mul16s_compare::ok#4 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:9 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ] : zp ZP_DWORD:13 , 
Potential registers zp ZP_DWORD:17 [ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ] : zp ZP_DWORD:17 , 
Potential registers zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:23 , reg byte x , 
Potential registers zp ZP_BYTE:24 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:25 [ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] : zp ZP_DWORD:29 , 
Potential registers zp ZP_WORD:33 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ] : zp ZP_WORD:33 , 
Potential registers zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ] : zp ZP_WORD:35 , 
Potential registers zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] : zp ZP_DWORD:37 , 
Potential registers zp ZP_WORD:41 [ mul16u::b#2 mul16u::b#3 mul16u::b#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_WORD:43 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_DWORD:45 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp ZP_DWORD:45 , 
Potential registers zp ZP_DWORD:49 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp ZP_DWORD:49 , 
Potential registers zp ZP_WORD:53 [ muls16s::j#2 muls16s::j#1 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_DWORD:55 [ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ] : zp ZP_DWORD:55 , 
Potential registers zp ZP_WORD:59 [ muls16s::i#2 muls16s::i#1 ] : zp ZP_WORD:59 , 
Potential registers zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ] : zp ZP_BYTE:61 , 
Potential registers zp ZP_WORD:62 [ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ] : zp ZP_WORD:62 , 
Potential registers zp ZP_WORD:64 [ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ] : zp ZP_WORD:64 , 
Potential registers zp ZP_BYTE:66 [ mul16u_compare::j#10 mul16u_compare::j#1 ] : zp ZP_BYTE:66 , reg byte y , 
Potential registers zp ZP_BYTE:67 [ mul16u_compare::ok#3 mul16u_compare::ok#4 ] : zp ZP_BYTE:67 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:68 [ muls16u::i#2 muls16u::i#1 ] : zp ZP_WORD:68 , 
Potential registers zp ZP_DWORD:70 [ muls16u::return#0 muls16u::m#3 muls16u::m#1 ] : zp ZP_DWORD:70 , 
Potential registers zp ZP_BYTE:74 [ mulf_init::c#2 mulf_init::c#1 ] : zp ZP_BYTE:74 , reg byte x , 
Potential registers zp ZP_WORD:75 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_WORD:77 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp ZP_BYTE:79 , reg byte x , 
Potential registers zp ZP_WORD:80 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp ZP_WORD:80 , 
Potential registers zp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp ZP_BYTE:82 , reg byte x , 
Potential registers zp ZP_WORD:83 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp ZP_WORD:83 , 
Potential registers zp ZP_WORD:85 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp ZP_WORD:85 , 
Potential registers zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ] : zp ZP_BYTE:87 , reg byte x , 
Potential registers zp ZP_WORD:88 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:88 , 
Potential registers zp ZP_WORD:90 [ muls16s::a#0 ] : zp ZP_WORD:90 , 
Potential registers zp ZP_WORD:92 [ muls16s::b#0 ] : zp ZP_WORD:92 , 
Potential registers zp ZP_DWORD:94 [ muls16s::return#2 ] : zp ZP_DWORD:94 , 
Potential registers zp ZP_DWORD:98 [ mul16s_compare::ms#0 ] : zp ZP_DWORD:98 , 
Potential registers zp ZP_WORD:102 [ mul16s::a#0 ] : zp ZP_WORD:102 , 
Potential registers zp ZP_WORD:104 [ mul16s::b#0 ] : zp ZP_WORD:104 , 
Potential registers zp ZP_DWORD:106 [ mul16s::return#2 ] : zp ZP_DWORD:106 , 
Potential registers zp ZP_DWORD:110 [ mul16s_compare::mn#0 ] : zp ZP_DWORD:110 , 
Potential registers zp ZP_WORD:114 [ mulf16s::a#0 ] : zp ZP_WORD:114 , 
Potential registers zp ZP_WORD:116 [ mulf16s::b#0 ] : zp ZP_WORD:116 , 
Potential registers zp ZP_DWORD:118 [ mulf16s::return#2 ] : zp ZP_DWORD:118 , 
Potential registers zp ZP_DWORD:122 [ mul16s_compare::mf#0 ] : zp ZP_DWORD:122 , 
Potential registers zp ZP_WORD:126 [ mul16s_error::a#0 ] : zp ZP_WORD:126 , 
Potential registers zp ZP_WORD:128 [ mul16s_error::b#0 ] : zp ZP_WORD:128 , 
Potential registers zp ZP_DWORD:130 [ mul16s_error::ms#0 ] : zp ZP_DWORD:130 , 
Potential registers zp ZP_DWORD:134 [ mul16s_error::mn#0 ] : zp ZP_DWORD:134 , 
Potential registers zp ZP_DWORD:138 [ mul16s_error::mf#0 ] : zp ZP_DWORD:138 , 
Potential registers zp ZP_BYTE:142 [ print_byte::$0 ] : zp ZP_BYTE:142 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:143 [ print_byte::$2 ] : zp ZP_BYTE:143 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:144 [ mulf16u::return#2 ] : zp ZP_DWORD:144 , 
Potential registers zp ZP_WORD:148 [ mulf16s::$6 ] : zp ZP_WORD:148 , 
Potential registers zp ZP_WORD:150 [ mulf16s::$16 ] : zp ZP_WORD:150 , 
Potential registers zp ZP_WORD:152 [ mulf16s::$12 ] : zp ZP_WORD:152 , 
Potential registers zp ZP_WORD:154 [ mulf16s::$17 ] : zp ZP_WORD:154 , 
Potential registers zp ZP_DWORD:156 [ mulf16s::return#0 ] : zp ZP_DWORD:156 , 
Potential registers zp ZP_DWORD:160 [ mulf16u::return#0 ] : zp ZP_DWORD:160 , 
Potential registers zp ZP_DWORD:164 [ mul16u::return#2 ] : zp ZP_DWORD:164 , 
Potential registers zp ZP_WORD:168 [ mul16s::$6 ] : zp ZP_WORD:168 , 
Potential registers zp ZP_WORD:170 [ mul16s::$16 ] : zp ZP_WORD:170 , 
Potential registers zp ZP_WORD:172 [ mul16s::$12 ] : zp ZP_WORD:172 , 
Potential registers zp ZP_WORD:174 [ mul16s::$17 ] : zp ZP_WORD:174 , 
Potential registers zp ZP_DWORD:176 [ mul16s::return#0 ] : zp ZP_DWORD:176 , 
Potential registers zp ZP_BYTE:180 [ mul16u::$1 ] : zp ZP_BYTE:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:181 [ muls16u::a#0 ] : zp ZP_WORD:181 , 
Potential registers zp ZP_WORD:183 [ muls16u::b#0 ] : zp ZP_WORD:183 , 
Potential registers zp ZP_DWORD:185 [ muls16u::return#2 ] : zp ZP_DWORD:185 , 
Potential registers zp ZP_DWORD:189 [ mul16u_compare::ms#0 ] : zp ZP_DWORD:189 , 
Potential registers zp ZP_DWORD:193 [ mul16u::return#3 ] : zp ZP_DWORD:193 , 
Potential registers zp ZP_DWORD:197 [ mul16u_compare::mn#0 ] : zp ZP_DWORD:197 , 
Potential registers zp ZP_DWORD:201 [ mulf16u::return#3 ] : zp ZP_DWORD:201 , 
Potential registers zp ZP_DWORD:205 [ mul16u_compare::mf#0 ] : zp ZP_DWORD:205 , 
Potential registers zp ZP_WORD:209 [ mul16u_error::a#0 ] : zp ZP_WORD:209 , 
Potential registers zp ZP_WORD:211 [ mul16u_error::b#0 ] : zp ZP_WORD:211 , 
Potential registers zp ZP_DWORD:213 [ mul16u_error::ms#0 ] : zp ZP_DWORD:213 , 
Potential registers zp ZP_DWORD:217 [ mul16u_error::mn#0 ] : zp ZP_DWORD:217 , 
Potential registers zp ZP_DWORD:221 [ mul16u_error::mf#0 ] : zp ZP_DWORD:221 , 
Potential registers zp ZP_BYTE:225 [ mulf_init::$2 ] : zp ZP_BYTE:225 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:226 [ mulf_init::$5 ] : zp ZP_BYTE:226 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:227 [ mulf_init::$6 ] : zp ZP_BYTE:227 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [muls16s] 6,707: zp ZP_DWORD:55 [ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ] 2,502.5: zp ZP_WORD:53 [ muls16s::j#2 muls16s::j#1 ] 2,502.5: zp ZP_WORD:59 [ muls16s::i#2 muls16s::i#1 ] 202: zp ZP_DWORD:94 [ muls16s::return#2 ] 191.18: zp ZP_WORD:92 [ muls16s::b#0 ] 175.58: zp ZP_WORD:90 [ muls16s::a#0 ] 
Uplift Scope [mul16u] 3,446.71: zp ZP_DWORD:45 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 2,435.29: zp ZP_DWORD:49 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 2,002: zp ZP_BYTE:180 [ mul16u::$1 ] 1,826.17: zp ZP_WORD:43 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] 309: zp ZP_WORD:41 [ mul16u::b#2 mul16u::b#3 mul16u::b#1 ] 202: zp ZP_DWORD:193 [ mul16u::return#3 ] 4: zp ZP_DWORD:164 [ mul16u::return#2 ] 
Uplift Scope [muls16u] 3,370.33: zp ZP_DWORD:70 [ muls16u::return#0 muls16u::m#3 muls16u::m#1 ] 2,502.5: zp ZP_WORD:68 [ muls16u::i#2 muls16u::i#1 ] 202: zp ZP_DWORD:185 [ muls16u::return#2 ] 183.67: zp ZP_WORD:183 [ muls16u::b#0 ] 157.71: zp ZP_WORD:181 [ muls16u::a#0 ] 
Uplift Scope [mul16u_compare] 241.86: zp ZP_WORD:62 [ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ] 235.67: zp ZP_BYTE:67 [ mul16u_compare::ok#3 mul16u_compare::ok#4 ] 159.58: zp ZP_BYTE:66 [ mul16u_compare::j#10 mul16u_compare::j#1 ] 135.36: zp ZP_WORD:64 [ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ] 17.26: zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ] 15.69: zp ZP_DWORD:205 [ mul16u_compare::mf#0 ] 14.52: zp ZP_DWORD:189 [ mul16u_compare::ms#0 ] 12: zp ZP_DWORD:197 [ mul16u_compare::mn#0 ] 
Uplift Scope [mul16s_compare] 241.86: zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ] 235.67: zp ZP_BYTE:8 [ mul16s_compare::ok#3 mul16s_compare::ok#4 ] 159.58: zp ZP_BYTE:7 [ mul16s_compare::j#10 mul16s_compare::j#1 ] 135.36: zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ] 17.26: zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ] 15.69: zp ZP_DWORD:122 [ mul16s_compare::mf#0 ] 14.52: zp ZP_DWORD:98 [ mul16s_compare::ms#0 ] 12: zp ZP_DWORD:110 [ mul16s_compare::mn#0 ] 
Uplift Scope [mulf16u] 258.5: zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ] 208: zp ZP_WORD:33 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ] 202: zp ZP_DWORD:201 [ mulf16u::return#3 ] 26.25: zp ZP_DWORD:160 [ mulf16u::return#0 ] 4: zp ZP_DWORD:144 [ mulf16u::return#2 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 ] 
Uplift Scope [mul16s] 202: zp ZP_DWORD:106 [ mul16s::return#2 ] 34.33: zp ZP_DWORD:176 [ mul16s::return#0 ] 18.5: zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] 9.36: zp ZP_WORD:104 [ mul16s::b#0 ] 7.36: zp ZP_WORD:102 [ mul16s::a#0 ] 4: zp ZP_WORD:168 [ mul16s::$6 ] 4: zp ZP_WORD:170 [ mul16s::$16 ] 4: zp ZP_WORD:172 [ mul16s::$12 ] 4: zp ZP_WORD:174 [ mul16s::$17 ] 
Uplift Scope [mulf16s] 202: zp ZP_DWORD:118 [ mulf16s::return#2 ] 34.33: zp ZP_DWORD:156 [ mulf16s::return#0 ] 18.5: zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] 9.36: zp ZP_WORD:116 [ mulf16s::b#0 ] 7.36: zp ZP_WORD:114 [ mulf16s::a#0 ] 4: zp ZP_WORD:148 [ mulf16s::$6 ] 4: zp ZP_WORD:150 [ mulf16s::$16 ] 4: zp ZP_WORD:152 [ mulf16s::$12 ] 4: zp ZP_WORD:154 [ mulf16s::$17 ] 
Uplift Scope [] 241.74: zp ZP_WORD:25 [ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ] 34.6: zp ZP_WORD:9 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ] 
Uplift Scope [mulf_init] 45.1: zp ZP_WORD:80 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 24.36: zp ZP_BYTE:74 [ mulf_init::c#2 mulf_init::c#1 ] 24.14: zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 22: zp ZP_BYTE:225 [ mulf_init::$2 ] 22: zp ZP_BYTE:226 [ mulf_init::$5 ] 22: zp ZP_BYTE:227 [ mulf_init::$6 ] 20.62: zp ZP_WORD:83 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 19.04: zp ZP_WORD:75 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 16.5: zp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 14.14: zp ZP_WORD:85 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 12.05: zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ] 8.5: zp ZP_WORD:77 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:88 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_sdword] 25: zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ] 
Uplift Scope [print_word] 24.67: zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ] 
Uplift Scope [print_dword] 20: zp ZP_DWORD:17 [ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ] 
Uplift Scope [print_sword] 18.5: zp ZP_WORD:27 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:23 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:142 [ print_byte::$0 ] 4: zp ZP_BYTE:143 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:24 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [mul16u_error] 0.57: zp ZP_WORD:209 [ mul16u_error::a#0 ] 0.4: zp ZP_WORD:211 [ mul16u_error::b#0 ] 0.31: zp ZP_DWORD:213 [ mul16u_error::ms#0 ] 0.25: zp ZP_DWORD:217 [ mul16u_error::mn#0 ] 0.21: zp ZP_DWORD:221 [ mul16u_error::mf#0 ] 
Uplift Scope [mul16s_error] 0.57: zp ZP_WORD:126 [ mul16s_error::a#0 ] 0.4: zp ZP_WORD:128 [ mul16s_error::b#0 ] 0.31: zp ZP_DWORD:130 [ mul16s_error::ms#0 ] 0.25: zp ZP_DWORD:134 [ mul16s_error::mn#0 ] 0.21: zp ZP_DWORD:138 [ mul16s_error::mf#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [muls16s] best 558895 combination zp ZP_DWORD:55 [ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ] zp ZP_WORD:53 [ muls16s::j#2 muls16s::j#1 ] zp ZP_WORD:59 [ muls16s::i#2 muls16s::i#1 ] zp ZP_DWORD:94 [ muls16s::return#2 ] zp ZP_WORD:92 [ muls16s::b#0 ] zp ZP_WORD:90 [ muls16s::a#0 ] 
Uplifting [mul16u] best 552895 combination zp ZP_DWORD:45 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp ZP_DWORD:49 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp ZP_WORD:43 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] zp ZP_WORD:41 [ mul16u::b#2 mul16u::b#3 mul16u::b#1 ] zp ZP_DWORD:193 [ mul16u::return#3 ] zp ZP_DWORD:164 [ mul16u::return#2 ] 
Uplifting [muls16u] best 552895 combination zp ZP_DWORD:70 [ muls16u::return#0 muls16u::m#3 muls16u::m#1 ] zp ZP_WORD:68 [ muls16u::i#2 muls16u::i#1 ] zp ZP_DWORD:185 [ muls16u::return#2 ] zp ZP_WORD:183 [ muls16u::b#0 ] zp ZP_WORD:181 [ muls16u::a#0 ] 
Uplifting [mul16u_compare] best 550795 combination zp ZP_WORD:62 [ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ] reg byte x [ mul16u_compare::ok#3 mul16u_compare::ok#4 ] reg byte y [ mul16u_compare::j#10 mul16u_compare::j#1 ] zp ZP_WORD:64 [ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ] zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ] zp ZP_DWORD:205 [ mul16u_compare::mf#0 ] zp ZP_DWORD:189 [ mul16u_compare::ms#0 ] zp ZP_DWORD:197 [ mul16u_compare::mn#0 ] 
Uplifting [mul16s_compare] best 548695 combination zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ] reg byte x [ mul16s_compare::ok#3 mul16s_compare::ok#4 ] reg byte y [ mul16s_compare::j#10 mul16s_compare::j#1 ] zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ] zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ] zp ZP_DWORD:122 [ mul16s_compare::mf#0 ] zp ZP_DWORD:98 [ mul16s_compare::ms#0 ] zp ZP_DWORD:110 [ mul16s_compare::mn#0 ] 
Uplifting [mulf16u] best 548695 combination zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ] zp ZP_WORD:33 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ] zp ZP_DWORD:201 [ mulf16u::return#3 ] zp ZP_DWORD:160 [ mulf16u::return#0 ] zp ZP_DWORD:144 [ mulf16u::return#2 ] 
Uplifting [print_str] best 548695 combination zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 ] 
Uplifting [mul16s] best 548695 combination zp ZP_DWORD:106 [ mul16s::return#2 ] zp ZP_DWORD:176 [ mul16s::return#0 ] zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] zp ZP_WORD:104 [ mul16s::b#0 ] zp ZP_WORD:102 [ mul16s::a#0 ] zp ZP_WORD:168 [ mul16s::$6 ] zp ZP_WORD:170 [ mul16s::$16 ] zp ZP_WORD:172 [ mul16s::$12 ] zp ZP_WORD:174 [ mul16s::$17 ] 
Uplifting [mulf16s] best 548695 combination zp ZP_DWORD:118 [ mulf16s::return#2 ] zp ZP_DWORD:156 [ mulf16s::return#0 ] zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] zp ZP_WORD:116 [ mulf16s::b#0 ] zp ZP_WORD:114 [ mulf16s::a#0 ] zp ZP_WORD:148 [ mulf16s::$6 ] zp ZP_WORD:150 [ mulf16s::$16 ] zp ZP_WORD:152 [ mulf16s::$12 ] zp ZP_WORD:154 [ mulf16s::$17 ] 
Uplifting [] best 548695 combination zp ZP_WORD:25 [ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ] zp ZP_WORD:9 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ] 
Uplifting [mulf_init] best 548445 combination zp ZP_WORD:80 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] reg byte x [ mulf_init::c#2 mulf_init::c#1 ] zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$2 ] reg byte a [ mulf_init::$5 ] reg byte a [ mulf_init::$6 ] zp ZP_WORD:83 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp ZP_WORD:75 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] zp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp ZP_WORD:85 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ] zp ZP_WORD:77 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [print_cls] best 548445 combination zp ZP_WORD:88 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_sdword] best 548445 combination zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ] 
Uplifting [print_word] best 548445 combination zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ] 
Uplifting [print_dword] best 548445 combination zp ZP_DWORD:17 [ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ] 
Uplifting [print_sword] best 548445 combination zp ZP_WORD:27 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] 
Uplifting [print_byte] best 548433 combination reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_char] best 548418 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [mul16u_error] best 548418 combination zp ZP_WORD:209 [ mul16u_error::a#0 ] zp ZP_WORD:211 [ mul16u_error::b#0 ] zp ZP_DWORD:213 [ mul16u_error::ms#0 ] zp ZP_DWORD:217 [ mul16u_error::mn#0 ] zp ZP_DWORD:221 [ mul16u_error::mf#0 ] 
Uplifting [mul16s_error] best 548418 combination zp ZP_WORD:126 [ mul16s_error::a#0 ] zp ZP_WORD:128 [ mul16s_error::b#0 ] zp ZP_DWORD:130 [ mul16s_error::ms#0 ] zp ZP_DWORD:134 [ mul16s_error::mn#0 ] zp ZP_DWORD:138 [ mul16s_error::mf#0 ] 
Uplifting [print_ln] best 548418 combination 
Uplifting [main] best 548418 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Uplifting [mulf_init] best 548418 combination zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ]
Uplifting [mul16s_compare] best 548418 combination zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ]
Uplifting [mul16u_compare] best 548418 combination zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:82 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 548278 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ]
Uplifting [mulf_init] best 548278 combination zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 ] ] with [ zp ZP_WORD:90 [ muls16s::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 ] ] with [ zp ZP_WORD:102 [ mul16s::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 ] ] with [ zp ZP_WORD:114 [ mulf16s::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 ] ] with [ zp ZP_WORD:126 [ mul16s_error::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 ] ] with [ zp ZP_WORD:92 [ muls16s::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 muls16s::b#0 ] ] with [ zp ZP_WORD:104 [ mul16s::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 muls16s::b#0 mul16s::b#0 ] ] with [ zp ZP_WORD:116 [ mulf16s::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 muls16s::b#0 mul16s::b#0 mulf16s::b#0 ] ] with [ zp ZP_WORD:128 [ mul16s_error::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 ] ] with [ zp ZP_DWORD:17 [ print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 ] ] with [ zp ZP_DWORD:130 [ mul16s_error::ms#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 ] ] with [ zp ZP_WORD:27 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] ] with [ zp ZP_WORD:209 [ mul16u_error::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] ] with [ zp ZP_DWORD:144 [ mulf16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 ] ] with [ zp ZP_DWORD:156 [ mulf16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:33 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 ] ] with [ zp ZP_WORD:62 [ mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 ] ] with [ zp ZP_WORD:64 [ mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] ] with [ zp ZP_DWORD:164 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 ] ] with [ zp ZP_DWORD:176 [ mul16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:45 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp ZP_DWORD:193 [ mul16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:55 [ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 ] ] with [ zp ZP_DWORD:94 [ muls16s::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:70 [ muls16u::return#0 muls16u::m#3 muls16u::m#1 ] ] with [ zp ZP_DWORD:185 [ muls16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:106 [ mul16s::return#2 ] ] with [ zp ZP_DWORD:110 [ mul16s_compare::mn#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:118 [ mulf16s::return#2 ] ] with [ zp ZP_DWORD:122 [ mul16s_compare::mf#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:148 [ mulf16s::$6 ] ] with [ zp ZP_WORD:150 [ mulf16s::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:152 [ mulf16s::$12 ] ] with [ zp ZP_WORD:154 [ mulf16s::$17 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:160 [ mulf16u::return#0 ] ] with [ zp ZP_DWORD:201 [ mulf16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:168 [ mul16s::$6 ] ] with [ zp ZP_WORD:170 [ mul16s::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:172 [ mul16s::$12 ] ] with [ zp ZP_WORD:174 [ mul16s::$17 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:189 [ mul16u_compare::ms#0 ] ] with [ zp ZP_DWORD:213 [ mul16u_error::ms#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:197 [ mul16u_compare::mn#0 ] ] with [ zp ZP_DWORD:217 [ mul16u_error::mn#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:205 [ mul16u_compare::mf#0 ] ] with [ zp ZP_DWORD:221 [ mul16u_error::mf#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 mul16s_error::a#0 ] ] with [ zp ZP_WORD:21 [ print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 mul16u_error::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 mul16s_error::ms#0 ] ] with [ zp ZP_DWORD:98 [ mul16s_compare::ms#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 mul16s_error::ms#0 mul16s_compare::ms#0 ] ] with [ zp ZP_DWORD:189 [ mul16u_compare::ms#0 mul16u_error::ms#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 ] ] with [ zp ZP_DWORD:118 [ mulf16s::return#2 mul16s_compare::mf#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 mul16s_compare::mf#0 ] ] with [ zp ZP_DWORD:160 [ mulf16u::return#0 mulf16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:33 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 ] ] with [ zp ZP_WORD:181 [ muls16u::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 ] ] with [ zp ZP_WORD:41 [ mul16u::b#2 mul16u::b#3 mul16u::b#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 mul16u::b#2 mul16u::b#3 mul16u::b#1 ] ] with [ zp ZP_WORD:183 [ muls16u::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:35 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 mul16u::b#2 mul16u::b#3 mul16u::b#1 muls16u::b#0 ] ] with [ zp ZP_WORD:211 [ mul16u_error::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 ] ] with [ zp ZP_DWORD:45 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] with [ zp ZP_DWORD:106 [ mul16s::return#2 mul16s_compare::mn#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 mul16s_error::ms#0 mul16s_compare::ms#0 mul16u_compare::ms#0 mul16u_error::ms#0 ] ] with [ zp ZP_DWORD:55 [ muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 muls16s::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:13 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 mul16s_error::ms#0 mul16s_compare::ms#0 mul16u_compare::ms#0 mul16u_error::ms#0 muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 muls16s::return#2 ] ] with [ zp ZP_DWORD:70 [ muls16u::return#0 muls16u::m#3 muls16u::m#1 muls16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 mul16s_compare::mf#0 mulf16u::return#0 mulf16u::return#3 ] ] with [ zp ZP_DWORD:138 [ mul16s_error::mf#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 mul16s_compare::mf#0 mulf16u::return#0 mulf16u::return#3 mul16s_error::mf#0 ] ] with [ zp ZP_DWORD:205 [ mul16u_compare::mf#0 mul16u_error::mf#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 mul16s_compare::mn#0 ] ] with [ zp ZP_DWORD:134 [ mul16s_error::mn#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 mul16s_compare::mn#0 mul16s_error::mn#0 ] ] with [ zp ZP_DWORD:197 [ mul16u_compare::mn#0 mul16u_error::mn#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 ] ] with [ zp ZP_BYTE:61 [ mul16u_compare::i#12 mul16u_compare::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 mul16u_compare::i#12 mul16u_compare::i#1 ] ] with [ zp ZP_BYTE:79 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 mul16u_compare::i#12 mul16u_compare::i#1 mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] ] with [ zp ZP_BYTE:87 [ mulf_init::dir#2 mulf_init::dir#3 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 mul16s_error::a#0 print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 mul16u_error::a#0 ] ] with [ zp ZP_WORD:68 [ muls16u::i#2 muls16u::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 mul16s_error::a#0 print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 mul16u_error::a#0 muls16u::i#2 muls16u::i#1 ] ] with [ zp ZP_WORD:75 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 mul16s_error::a#0 print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 mul16u_error::a#0 muls16u::i#2 muls16u::i#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ] with [ zp ZP_WORD:83 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 mul16s_error::a#0 print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 mul16u_error::a#0 muls16u::i#2 muls16u::i#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ] with [ zp ZP_WORD:88 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 muls16s::b#0 mul16s::b#0 mulf16s::b#0 mul16s_error::b#0 ] ] with [ zp ZP_WORD:77 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 muls16s::b#0 mul16s::b#0 mulf16s::b#0 mul16s_error::b#0 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ] with [ zp ZP_WORD:85 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 ] ] with [ zp ZP_WORD:80 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 ] ] with [ zp ZP_WORD:43 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] ] with [ zp ZP_WORD:53 [ muls16s::j#2 muls16s::j#1 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 ] ] with [ zp ZP_WORD:59 [ muls16s::i#2 muls16s::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 muls16s::i#2 muls16s::i#1 ] ] with [ zp ZP_WORD:148 [ mulf16s::$6 mulf16s::$16 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 muls16s::i#2 muls16s::i#1 mulf16s::$6 mulf16s::$16 ] ] with [ zp ZP_WORD:152 [ mulf16s::$12 mulf16s::$17 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 muls16s::i#2 muls16s::i#1 mulf16s::$6 mulf16s::$16 mulf16s::$12 mulf16s::$17 ] ] with [ zp ZP_WORD:168 [ mul16s::$6 mul16s::$16 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 muls16s::i#2 muls16s::i#1 mulf16s::$6 mulf16s::$16 mulf16s::$12 mulf16s::$17 mul16s::$6 mul16s::$16 ] ] with [ zp ZP_WORD:172 [ mul16s::$12 mul16s::$17 ] ]
Coalescing zero page register [ zp ZP_DWORD:29 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 mul16s_compare::mf#0 mulf16u::return#0 mulf16u::return#3 mul16s_error::mf#0 mul16u_compare::mf#0 mul16u_error::mf#0 ] ] with [ zp ZP_DWORD:49 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated (was zp ZP_WORD:11) zp ZP_WORD:9 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 muls16s::i#2 muls16s::i#1 mulf16s::$6 mulf16s::$16 mulf16s::$12 mulf16s::$17 mul16s::$6 mul16s::$16 mul16s::$12 mul16s::$17 ]
Allocated (was zp ZP_DWORD:13) zp ZP_DWORD:11 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 mul16s_error::ms#0 mul16s_compare::ms#0 mul16u_compare::ms#0 mul16u_error::ms#0 muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 muls16s::return#2 muls16u::return#0 muls16u::m#3 muls16u::m#1 muls16u::return#2 ]
Allocated (was zp ZP_WORD:25) zp ZP_WORD:15 [ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ]
Allocated (was zp ZP_DWORD:29) zp ZP_DWORD:17 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 mul16s_compare::mf#0 mulf16u::return#0 mulf16u::return#3 mul16s_error::mf#0 mul16u_compare::mf#0 mul16u_error::mf#0 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp ZP_WORD:33) zp ZP_WORD:21 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 muls16u::a#0 ]
Allocated (was zp ZP_WORD:35) zp ZP_WORD:23 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 mul16u::b#2 mul16u::b#3 mul16u::b#1 muls16u::b#0 mul16u_error::b#0 ]
Allocated (was zp ZP_DWORD:37) zp ZP_DWORD:25 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 mul16s_compare::mn#0 mul16s_error::mn#0 mul16u_compare::mn#0 mul16u_error::mn#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test the fast multiplication library
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BGCOL = $d021
  .label print_char_cursor = $f
  .label print_line_cursor = 7
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @40 [phi:@begin->@40]
b40_from_bbegin:
  jmp b40
//SEG5 @40
b40:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @40 to @end [phi:@40->@end]
bend_from_b40:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG11 [5] call print_cls 
  //SEG12 [304] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call mulf_init 
  //SEG16 [275] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
  mulf_init_from_b1:
    jsr mulf_init
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [9] call mul16u_compare 
  //SEG20 [199] phi from main::@2 to mul16u_compare [phi:main::@2->mul16u_compare]
  mul16u_compare_from_b2:
    jsr mul16u_compare
  //SEG21 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG22 main::@3
  b3:
  //SEG23 [11] call mul16s_compare 
    jsr mul16s_compare
    jmp breturn
  //SEG24 main::@return
  breturn:
  //SEG25 [12] return 
    rts
}
//SEG26 mul16s_compare
// Perform many possible word multiplications (slow and fast) and compare the results
mul16s_compare: {
    .label a = 3
    .label b = 5
    .label ms = $b
    .label mn = $19
    .label mf = $11
    .label i = 2
  //SEG27 [13] (byte*~) print_char_cursor#176 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG28 [14] phi from mul16s_compare to mul16s_compare::@1 [phi:mul16s_compare->mul16s_compare::@1]
  b1_from_mul16s_compare:
  //SEG29 [14] phi (byte) mul16s_compare::i#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare->mul16s_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG30 [14] phi (signed word) mul16s_compare::b#6 = -(word/signed word/dword/signed dword) $7fff [phi:mul16s_compare->mul16s_compare::@1#1] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta b
    lda #>-$7fff
    sta b+1
  //SEG31 [14] phi (signed word) mul16s_compare::a#6 = -(word/signed word/dword/signed dword) $7fff [phi:mul16s_compare->mul16s_compare::@1#2] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta a
    lda #>-$7fff
    sta a+1
  //SEG32 [14] phi (byte*) print_char_cursor#143 = (byte*~) print_char_cursor#176 [phi:mul16s_compare->mul16s_compare::@1#3] -- register_copy 
    jmp b1
  //SEG33 [14] phi from mul16s_compare::@10 to mul16s_compare::@1 [phi:mul16s_compare::@10->mul16s_compare::@1]
  b1_from_b10:
  //SEG34 [14] phi (byte) mul16s_compare::i#12 = (byte) mul16s_compare::i#1 [phi:mul16s_compare::@10->mul16s_compare::@1#0] -- register_copy 
  //SEG35 [14] phi (signed word) mul16s_compare::b#6 = (signed word) mul16s_compare::b#1 [phi:mul16s_compare::@10->mul16s_compare::@1#1] -- register_copy 
  //SEG36 [14] phi (signed word) mul16s_compare::a#6 = (signed word) mul16s_compare::a#1 [phi:mul16s_compare::@10->mul16s_compare::@1#2] -- register_copy 
  //SEG37 [14] phi (byte*) print_char_cursor#143 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@10->mul16s_compare::@1#3] -- register_copy 
    jmp b1
  //SEG38 mul16s_compare::@1
  b1:
  //SEG39 [15] call print_str 
  //SEG40 [64] phi from mul16s_compare::@1 to print_str [phi:mul16s_compare::@1->print_str]
  print_str_from_b1:
  //SEG41 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#143 [phi:mul16s_compare::@1->print_str#0] -- register_copy 
  //SEG42 [64] phi (byte*) print_str::str#17 = (const string) str [phi:mul16s_compare::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG43 [16] phi from mul16s_compare::@1 to mul16s_compare::@2 [phi:mul16s_compare::@1->mul16s_compare::@2]
  b2_from_b1:
  //SEG44 [16] phi (byte) mul16s_compare::j#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@1->mul16s_compare::@2#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG45 [16] phi (signed word) mul16s_compare::b#2 = (signed word) mul16s_compare::b#6 [phi:mul16s_compare::@1->mul16s_compare::@2#1] -- register_copy 
  //SEG46 [16] phi (signed word) mul16s_compare::a#2 = (signed word) mul16s_compare::a#6 [phi:mul16s_compare::@1->mul16s_compare::@2#2] -- register_copy 
    jmp b2
  //SEG47 [16] phi from mul16s_compare::@5 to mul16s_compare::@2 [phi:mul16s_compare::@5->mul16s_compare::@2]
  b2_from_b5:
  //SEG48 [16] phi (byte) mul16s_compare::j#10 = (byte) mul16s_compare::j#1 [phi:mul16s_compare::@5->mul16s_compare::@2#0] -- register_copy 
  //SEG49 [16] phi (signed word) mul16s_compare::b#2 = (signed word) mul16s_compare::b#1 [phi:mul16s_compare::@5->mul16s_compare::@2#1] -- register_copy 
  //SEG50 [16] phi (signed word) mul16s_compare::a#2 = (signed word) mul16s_compare::a#1 [phi:mul16s_compare::@5->mul16s_compare::@2#2] -- register_copy 
    jmp b2
  //SEG51 mul16s_compare::@2
  b2:
  //SEG52 [17] (signed word) mul16s_compare::a#1 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda a
    adc #<$d2b
    sta a
    lda a+1
    adc #>$d2b
    sta a+1
  //SEG53 [18] (signed word) mul16s_compare::b#1 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda b
    adc #<$ffd
    sta b
    lda b+1
    adc #>$ffd
    sta b+1
  //SEG54 [19] (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1
  //SEG55 [20] (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1
  //SEG56 [21] call muls16s 
    jsr muls16s
  //SEG57 [22] (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#0
    jmp b13
  //SEG58 mul16s_compare::@13
  b13:
  //SEG59 [23] (signed dword) mul16s_compare::ms#0 ← (signed dword) muls16s::return#2
  //SEG60 [24] (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#1
  //SEG61 [25] (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#1
  //SEG62 [26] call mul16s 
    jsr mul16s
  //SEG63 [27] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
    jmp b14
  //SEG64 mul16s_compare::@14
  b14:
  //SEG65 [28] (signed dword) mul16s_compare::mn#0 ← (signed dword) mul16s::return#2
  //SEG66 [29] (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#1
  //SEG67 [30] (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#1
  //SEG68 [31] call mulf16s 
    jsr mulf16s
  //SEG69 [32] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0
    jmp b15
  //SEG70 mul16s_compare::@15
  b15:
  //SEG71 [33] (signed dword) mul16s_compare::mf#0 ← (signed dword) mulf16s::return#2
  //SEG72 [34] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3 -- vdsz1_eq_vdsz2_then_la1 
    lda ms
    cmp mf
    bne !+
    lda ms+1
    cmp mf+1
    bne !+
    lda ms+2
    cmp mf+2
    bne !+
    lda ms+3
    cmp mf+3
    beq b3_from_b15
  !:
  //SEG73 [35] phi from mul16s_compare::@15 to mul16s_compare::@6 [phi:mul16s_compare::@15->mul16s_compare::@6]
  b6_from_b15:
    jmp b6
  //SEG74 mul16s_compare::@6
  b6:
  //SEG75 [36] phi from mul16s_compare::@6 to mul16s_compare::@3 [phi:mul16s_compare::@6->mul16s_compare::@3]
  b3_from_b6:
  //SEG76 [36] phi (byte) mul16s_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@6->mul16s_compare::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG77 [36] phi from mul16s_compare::@15 to mul16s_compare::@3 [phi:mul16s_compare::@15->mul16s_compare::@3]
  b3_from_b15:
  //SEG78 [36] phi (byte) mul16s_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mul16s_compare::@15->mul16s_compare::@3#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b3
  //SEG79 mul16s_compare::@3
  b3:
  //SEG80 [37] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@22 -- vdsz1_eq_vdsz2_then_la1 
    lda ms
    cmp mn
    bne !+
    lda ms+1
    cmp mn+1
    bne !+
    lda ms+2
    cmp mn+2
    bne !+
    lda ms+3
    cmp mn+3
    beq b22_from_b3
  !:
  //SEG81 [38] phi from mul16s_compare::@3 to mul16s_compare::@4 [phi:mul16s_compare::@3->mul16s_compare::@4]
  b4_from_b3:
  //SEG82 [38] phi (byte) mul16s_compare::ok#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@3->mul16s_compare::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b4
  //SEG83 mul16s_compare::@4
  b4:
  //SEG84 [39] if((byte) mul16s_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s_compare::@5 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b5
    jmp b8
  //SEG85 mul16s_compare::@8
  b8:
  //SEG86 [40] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG87 [41] (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#1
  //SEG88 [42] (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#1
  //SEG89 [43] (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#0
  //SEG90 [44] (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#0
  //SEG91 [45] (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#0
  //SEG92 [46] call mul16s_error 
  //SEG93 [71] phi from mul16s_compare::@8 to mul16s_error [phi:mul16s_compare::@8->mul16s_error]
  mul16s_error_from_b8:
    jsr mul16s_error
    jmp breturn
  //SEG94 mul16s_compare::@return
  breturn:
  //SEG95 [47] return 
    rts
  //SEG96 mul16s_compare::@5
  b5:
  //SEG97 [48] (byte) mul16s_compare::j#1 ← ++ (byte) mul16s_compare::j#10 -- vbuyy=_inc_vbuyy 
    iny
  //SEG98 [49] if((byte) mul16s_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$10
    bne b2_from_b5
    jmp b10
  //SEG99 mul16s_compare::@10
  b10:
  //SEG100 [50] (byte) mul16s_compare::i#1 ← ++ (byte) mul16s_compare::i#12 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG101 [51] if((byte) mul16s_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b10
  //SEG102 [52] phi from mul16s_compare::@10 to mul16s_compare::@11 [phi:mul16s_compare::@10->mul16s_compare::@11]
  b11_from_b10:
    jmp b11
  //SEG103 mul16s_compare::@11
  b11:
  //SEG104 [53] call print_ln 
  //SEG105 [59] phi from mul16s_compare::@11 to print_ln [phi:mul16s_compare::@11->print_ln]
  print_ln_from_b11:
  //SEG106 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@11->print_ln#0] -- register_copy 
  //SEG107 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_compare::@11->print_ln#1] -- register_copy 
    jsr print_ln
    jmp b17
  //SEG108 mul16s_compare::@17
  b17:
  //SEG109 [54] (byte*~) print_char_cursor#185 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG110 [55] call print_str 
  //SEG111 [64] phi from mul16s_compare::@17 to print_str [phi:mul16s_compare::@17->print_str]
  print_str_from_b17:
  //SEG112 [64] phi (byte*) print_char_cursor#148 = (byte*~) print_char_cursor#185 [phi:mul16s_compare::@17->print_str#0] -- register_copy 
  //SEG113 [64] phi (byte*) print_str::str#17 = (const string) mul16s_compare::str1 [phi:mul16s_compare::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG114 [56] phi from mul16s_compare::@17 to mul16s_compare::@18 [phi:mul16s_compare::@17->mul16s_compare::@18]
  b18_from_b17:
    jmp b18
  //SEG115 mul16s_compare::@18
  b18:
  //SEG116 [57] call print_ln 
  //SEG117 [59] phi from mul16s_compare::@18 to print_ln [phi:mul16s_compare::@18->print_ln]
  print_ln_from_b18:
  //SEG118 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@18->print_ln#0] -- register_copy 
  //SEG119 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_compare::@18->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG120 [58] phi from mul16s_compare::@3 to mul16s_compare::@22 [phi:mul16s_compare::@3->mul16s_compare::@22]
  b22_from_b3:
    jmp b22
  //SEG121 mul16s_compare::@22
  b22:
  //SEG122 [38] phi from mul16s_compare::@22 to mul16s_compare::@4 [phi:mul16s_compare::@22->mul16s_compare::@4]
  b4_from_b22:
  //SEG123 [38] phi (byte) mul16s_compare::ok#3 = (byte) mul16s_compare::ok#4 [phi:mul16s_compare::@22->mul16s_compare::@4#0] -- register_copy 
    jmp b4
    str1: .text "signed word multiply results match!@"
}
//SEG124 print_ln
// Print a newline
print_ln: {
  //SEG125 [60] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG126 [60] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#43 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG127 print_ln::@1
  b1:
  //SEG128 [61] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG129 [62] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG130 print_ln::@return
  breturn:
  //SEG131 [63] return 
    rts
}
//SEG132 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(9) str)
print_str: {
    .label str = 9
  //SEG133 [65] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG134 [65] phi (byte*) print_char_cursor#128 = (byte*) print_char_cursor#148 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG135 [65] phi (byte*) print_str::str#15 = (byte*) print_str::str#17 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG136 print_str::@1
  b1:
  //SEG137 [66] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG138 print_str::@return
  breturn:
  //SEG139 [67] return 
    rts
  //SEG140 print_str::@2
  b2:
  //SEG141 [68] *((byte*) print_char_cursor#128) ← *((byte*) print_str::str#15) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG142 [69] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#128 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG143 [70] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#15 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG144 mul16s_error
// mul16s_error(signed word zeropage(3) a, signed word zeropage(5) b, signed dword zeropage($b) ms, signed dword zeropage($19) mn, signed dword zeropage($11) mf)
mul16s_error: {
    .label a = 3
    .label b = 5
    .label ms = $b
    .label mn = $19
    .label mf = $11
  //SEG145 [72] call print_str 
  //SEG146 [64] phi from mul16s_error to print_str [phi:mul16s_error->print_str]
  print_str_from_mul16s_error:
  //SEG147 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#128 [phi:mul16s_error->print_str#0] -- register_copy 
  //SEG148 [64] phi (byte*) print_str::str#17 = (const string) mul16s_error::str [phi:mul16s_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b1
  //SEG149 mul16s_error::@1
  b1:
  //SEG150 [73] (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#0
  //SEG151 [74] call print_sword 
  //SEG152 [127] phi from mul16s_error::@1 to print_sword [phi:mul16s_error::@1->print_sword]
  print_sword_from_b1:
  //SEG153 [127] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:mul16s_error::@1->print_sword#0] -- register_copy 
    jsr print_sword
  //SEG154 [75] phi from mul16s_error::@1 to mul16s_error::@2 [phi:mul16s_error::@1->mul16s_error::@2]
  b2_from_b1:
    jmp b2
  //SEG155 mul16s_error::@2
  b2:
  //SEG156 [76] call print_str 
  //SEG157 [64] phi from mul16s_error::@2 to print_str [phi:mul16s_error::@2->print_str]
  print_str_from_b2:
  //SEG158 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@2->print_str#0] -- register_copy 
  //SEG159 [64] phi (byte*) print_str::str#17 = (const string) str1 [phi:mul16s_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b3
  //SEG160 mul16s_error::@3
  b3:
  //SEG161 [77] (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#0 -- vwsz1=vwsz2 
    lda b
    sta print_sword.w
    lda b+1
    sta print_sword.w+1
  //SEG162 [78] call print_sword 
  //SEG163 [127] phi from mul16s_error::@3 to print_sword [phi:mul16s_error::@3->print_sword]
  print_sword_from_b3:
  //SEG164 [127] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:mul16s_error::@3->print_sword#0] -- register_copy 
    jsr print_sword
  //SEG165 [79] phi from mul16s_error::@3 to mul16s_error::@4 [phi:mul16s_error::@3->mul16s_error::@4]
  b4_from_b3:
    jmp b4
  //SEG166 mul16s_error::@4
  b4:
  //SEG167 [80] call print_str 
  //SEG168 [64] phi from mul16s_error::@4 to print_str [phi:mul16s_error::@4->print_str]
  print_str_from_b4:
  //SEG169 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@4->print_str#0] -- register_copy 
  //SEG170 [64] phi (byte*) print_str::str#17 = (const string) str2 [phi:mul16s_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG171 mul16s_error::@5
  b5:
  //SEG172 [81] (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#0
  //SEG173 [82] call print_sdword 
  //SEG174 [94] phi from mul16s_error::@5 to print_sdword [phi:mul16s_error::@5->print_sdword]
  print_sdword_from_b5:
  //SEG175 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#1 [phi:mul16s_error::@5->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG176 [83] phi from mul16s_error::@5 to mul16s_error::@6 [phi:mul16s_error::@5->mul16s_error::@6]
  b6_from_b5:
    jmp b6
  //SEG177 mul16s_error::@6
  b6:
  //SEG178 [84] call print_str 
  //SEG179 [64] phi from mul16s_error::@6 to print_str [phi:mul16s_error::@6->print_str]
  print_str_from_b6:
  //SEG180 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@6->print_str#0] -- register_copy 
  //SEG181 [64] phi (byte*) print_str::str#17 = (const string) str3 [phi:mul16s_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG182 mul16s_error::@7
  b7:
  //SEG183 [85] (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#0 -- vdsz1=vdsz2 
    lda mn
    sta print_sdword.dw
    lda mn+1
    sta print_sdword.dw+1
    lda mn+2
    sta print_sdword.dw+2
    lda mn+3
    sta print_sdword.dw+3
  //SEG184 [86] call print_sdword 
  //SEG185 [94] phi from mul16s_error::@7 to print_sdword [phi:mul16s_error::@7->print_sdword]
  print_sdword_from_b7:
  //SEG186 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#2 [phi:mul16s_error::@7->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG187 [87] phi from mul16s_error::@7 to mul16s_error::@8 [phi:mul16s_error::@7->mul16s_error::@8]
  b8_from_b7:
    jmp b8
  //SEG188 mul16s_error::@8
  b8:
  //SEG189 [88] call print_str 
  //SEG190 [64] phi from mul16s_error::@8 to print_str [phi:mul16s_error::@8->print_str]
  print_str_from_b8:
  //SEG191 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@8->print_str#0] -- register_copy 
  //SEG192 [64] phi (byte*) print_str::str#17 = (const string) str4 [phi:mul16s_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG193 mul16s_error::@9
  b9:
  //SEG194 [89] (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#0 -- vdsz1=vdsz2 
    lda mf
    sta print_sdword.dw
    lda mf+1
    sta print_sdword.dw+1
    lda mf+2
    sta print_sdword.dw+2
    lda mf+3
    sta print_sdword.dw+3
  //SEG195 [90] call print_sdword 
  //SEG196 [94] phi from mul16s_error::@9 to print_sdword [phi:mul16s_error::@9->print_sdword]
  print_sdword_from_b9:
  //SEG197 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#3 [phi:mul16s_error::@9->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG198 [91] phi from mul16s_error::@9 to mul16s_error::@10 [phi:mul16s_error::@9->mul16s_error::@10]
  b10_from_b9:
    jmp b10
  //SEG199 mul16s_error::@10
  b10:
  //SEG200 [92] call print_ln 
  //SEG201 [59] phi from mul16s_error::@10 to print_ln [phi:mul16s_error::@10->print_ln]
  print_ln_from_b10:
  //SEG202 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#20 [phi:mul16s_error::@10->print_ln#0] -- register_copy 
  //SEG203 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG204 mul16s_error::@return
  breturn:
  //SEG205 [93] return 
    rts
    str: .text "signed word multiply mismatch @"
}
//SEG206 print_sdword
// Print a signed dword as HEX
// print_sdword(signed dword zeropage($b) dw)
print_sdword: {
    .label dw = $b
  //SEG207 [95] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1 -- vdsz1_ge_0_then_la1 
    lda dw+3
    bpl b1_from_print_sdword
  //SEG208 [96] phi from print_sdword to print_sdword::@2 [phi:print_sdword->print_sdword::@2]
  b2_from_print_sdword:
    jmp b2
  //SEG209 print_sdword::@2
  b2:
  //SEG210 [97] call print_char 
  //SEG211 [123] phi from print_sdword::@2 to print_char [phi:print_sdword::@2->print_char]
  print_char_from_b2:
  //SEG212 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#128 [phi:print_sdword::@2->print_char#0] -- register_copy 
  //SEG213 [123] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sdword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG214 print_sdword::@4
  b4:
  //SEG215 [98] (signed dword) print_sdword::dw#0 ← - (signed dword) print_sdword::dw#4 -- vdsz1=_neg_vdsz1 
    sec
    lda dw
    eor #$ff
    adc #0
    sta dw
    lda dw+1
    eor #$ff
    adc #0
    sta dw+1
    lda dw+2
    eor #$ff
    adc #0
    sta dw+2
    lda dw+3
    eor #$ff
    adc #0
    sta dw+3
  //SEG216 [99] phi from print_sdword print_sdword::@4 to print_sdword::@1 [phi:print_sdword/print_sdword::@4->print_sdword::@1]
  b1_from_print_sdword:
  b1_from_b4:
  //SEG217 [99] phi (byte*) print_char_cursor#134 = (byte*) print_char_cursor#128 [phi:print_sdword/print_sdword::@4->print_sdword::@1#0] -- register_copy 
  //SEG218 [99] phi (signed dword) print_sdword::dw#5 = (signed dword) print_sdword::dw#4 [phi:print_sdword/print_sdword::@4->print_sdword::@1#1] -- register_copy 
    jmp b1
  //SEG219 print_sdword::@1
  b1:
  //SEG220 [100] (dword) print_dword::dw#0 ← ((dword)) (signed dword) print_sdword::dw#5 -- vduz1=_dword_vdsz1 
  //SEG221 [101] call print_dword 
  //SEG222 [103] phi from print_sdword::@1 to print_dword [phi:print_sdword::@1->print_dword]
  print_dword_from_b1:
  //SEG223 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#134 [phi:print_sdword::@1->print_dword#0] -- register_copy 
  //SEG224 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#0 [phi:print_sdword::@1->print_dword#1] -- register_copy 
    jsr print_dword
    jmp breturn
  //SEG225 print_sdword::@return
  breturn:
  //SEG226 [102] return 
    rts
}
//SEG227 print_dword
// Print a dword as HEX
// print_dword(dword zeropage($b) dw)
print_dword: {
    .label dw = $b
  //SEG228 [104] (word) print_word::w#1 ← > (dword) print_dword::dw#4 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word.w
    lda dw+3
    sta print_word.w+1
  //SEG229 [105] call print_word 
  //SEG230 [109] phi from print_dword to print_word [phi:print_dword->print_word]
  print_word_from_print_dword:
  //SEG231 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#133 [phi:print_dword->print_word#0] -- register_copy 
  //SEG232 [109] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    jmp b1
  //SEG233 print_dword::@1
  b1:
  //SEG234 [106] (word) print_word::w#2 ← < (dword) print_dword::dw#4 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word.w
    lda dw+1
    sta print_word.w+1
  //SEG235 [107] call print_word 
  //SEG236 [109] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  print_word_from_b1:
  //SEG237 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#20 [phi:print_dword::@1->print_word#0] -- register_copy 
  //SEG238 [109] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG239 print_dword::@return
  breturn:
  //SEG240 [108] return 
    rts
}
//SEG241 print_word
// Print a word as HEX
// print_word(word zeropage(3) w)
print_word: {
    .label w = 3
  //SEG242 [110] (byte) print_byte::b#0 ← > (word) print_word::w#5 -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
  //SEG243 [111] call print_byte 
  //SEG244 [115] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG245 [115] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG246 [115] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG247 print_word::@1
  b1:
  //SEG248 [112] (byte) print_byte::b#1 ← < (word) print_word::w#5 -- vbuxx=_lo_vwuz1 
    lda w
    tax
  //SEG249 [113] call print_byte 
  //SEG250 [115] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG251 [115] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#20 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG252 [115] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG253 print_word::@return
  breturn:
  //SEG254 [114] return 
    rts
}
//SEG255 print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
  //SEG256 [116] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG257 [117] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG258 [118] call print_char 
  //SEG259 [123] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG260 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#136 [phi:print_byte->print_char#0] -- register_copy 
  //SEG261 [123] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG262 print_byte::@1
  b1:
  //SEG263 [119] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG264 [120] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG265 [121] call print_char 
  //SEG266 [123] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG267 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#20 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG268 [123] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG269 print_byte::@return
  breturn:
  //SEG270 [122] return 
    rts
}
//SEG271 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG272 [124] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG273 [125] (byte*) print_char_cursor#20 ← ++ (byte*) print_char_cursor#84 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG274 print_char::@return
  breturn:
  //SEG275 [126] return 
    rts
}
//SEG276 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(3) w)
print_sword: {
    .label w = 3
  //SEG277 [128] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG278 [129] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG279 print_sword::@2
  b2:
  //SEG280 [130] call print_char 
  //SEG281 [123] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG282 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#128 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG283 [123] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG284 print_sword::@4
  b4:
  //SEG285 [131] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG286 [132] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG287 [132] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#128 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG288 [132] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG289 print_sword::@1
  b1:
  //SEG290 [133] (word~) print_word::w#11 ← (word)(signed word) print_sword::w#4
  //SEG291 [134] call print_word 
  //SEG292 [109] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG293 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG294 [109] phi (word) print_word::w#5 = (word~) print_word::w#11 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG295 print_sword::@return
  breturn:
  //SEG296 [135] return 
    rts
}
//SEG297 mulf16s
// Fast multiply two signed words to a signed double word result
// Fixes offsets introduced by using unsigned multiplication
// mulf16s(signed word zeropage(3) a, signed word zeropage(5) b)
mulf16s: {
    .label _6 = 9
    .label _12 = 9
    .label _16 = 9
    .label _17 = 9
    .label m = $11
    .label return = $11
    .label a = 3
    .label b = 5
  //SEG298 [136] (word~) mulf16u::a#4 ← (word)(signed word) mulf16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mulf16u.a
    lda a+1
    sta mulf16u.a+1
  //SEG299 [137] (word~) mulf16u::b#4 ← (word)(signed word) mulf16s::b#0 -- vwuz1=vwuz2 
    lda b
    sta mulf16u.b
    lda b+1
    sta mulf16u.b+1
  //SEG300 [138] call mulf16u 
  //SEG301 [153] phi from mulf16s to mulf16u [phi:mulf16s->mulf16u]
  mulf16u_from_mulf16s:
  //SEG302 [153] phi (word) mulf16u::b#2 = (word~) mulf16u::b#4 [phi:mulf16s->mulf16u#0] -- register_copy 
  //SEG303 [153] phi (word) mulf16u::a#2 = (word~) mulf16u::a#4 [phi:mulf16s->mulf16u#1] -- register_copy 
    jsr mulf16u
  //SEG304 [139] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0
    jmp b6
  //SEG305 mulf16s::@6
  b6:
  //SEG306 [140] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2
  //SEG307 [141] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b6
    jmp b3
  //SEG308 mulf16s::@3
  b3:
  //SEG309 [142] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG310 [143] (word~) mulf16s::$16 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _16
    sec
    sbc b
    sta _16
    lda _16+1
    sbc b+1
    sta _16+1
  //SEG311 [144] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG312 [145] phi from mulf16s::@3 mulf16s::@6 to mulf16s::@1 [phi:mulf16s::@3/mulf16s::@6->mulf16s::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG313 [145] phi (dword) mulf16s::m#5 = (dword) mulf16s::m#1 [phi:mulf16s::@3/mulf16s::@6->mulf16s::@1#0] -- register_copy 
    jmp b1
  //SEG314 mulf16s::@1
  b1:
  //SEG315 [146] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2 -- vwsz1_ge_0_then_la1 
    lda b+1
    bpl b2_from_b1
    jmp b4
  //SEG316 mulf16s::@4
  b4:
  //SEG317 [147] (word~) mulf16s::$12 ← > (dword) mulf16s::m#5 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _12
    lda m+3
    sta _12+1
  //SEG318 [148] (word~) mulf16s::$17 ← (word~) mulf16s::$12 - (word)(signed word) mulf16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _17
    sec
    sbc a
    sta _17
    lda _17+1
    sbc a+1
    sta _17+1
  //SEG319 [149] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17 -- vduz1=vduz1_sethi_vwuz2 
    lda _17
    sta m+2
    lda _17+1
    sta m+3
  //SEG320 [150] phi from mulf16s::@1 mulf16s::@4 to mulf16s::@2 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG321 [150] phi (dword) mulf16s::m#4 = (dword) mulf16s::m#5 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2#0] -- register_copy 
    jmp b2
  //SEG322 mulf16s::@2
  b2:
  //SEG323 [151] (signed dword) mulf16s::return#0 ← ((signed dword)) (dword) mulf16s::m#4 -- vdsz1=_sdword_vduz1 
    jmp breturn
  //SEG324 mulf16s::@return
  breturn:
  //SEG325 [152] return 
    rts
}
//SEG326 mulf16u
// Fast multiply two unsigned words to a double word result
// Done in assembler to utilize fast addition A+X
// mulf16u(word zeropage($15) a, word zeropage($17) b)
mulf16u: {
    .label memA = $f8
    .label memB = $fa
    .label memR = $fc
    .label return = $11
    .label a = $15
    .label b = $17
  //SEG327 [154] *((const word*) mulf16u::memA#0) ← (word) mulf16u::a#2 -- _deref_pwuc1=vwuz1 
    lda a
    sta memA
    lda a+1
    sta memA+1
  //SEG328 [155] *((const word*) mulf16u::memB#0) ← (word) mulf16u::b#2 -- _deref_pwuc1=vwuz1 
    lda b
    sta memB
    lda b+1
    sta memB+1
  //SEG329 asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
    lda memA
    sta sm1a+1
    sta sm3a+1
    sta sm5a+1
    sta sm7a+1
    eor #$ff
    sta sm2a+1
    sta sm4a+1
    sta sm6a+1
    sta sm8a+1
    lda memA+1
    sta sm1b+1
    sta sm3b+1
    sta sm5b+1
    sta sm7b+1
    eor #$ff
    sta sm2b+1
    sta sm4b+1
    sta sm6b+1
    sta sm8b+1
    ldx memB
    sec
  sm1a:
    lda mulf_sqr1_lo,x
  sm2a:
    sbc mulf_sqr2_lo,x
    sta memR+0
  sm3a:
    lda mulf_sqr1_hi,x
  sm4a:
    sbc mulf_sqr2_hi,x
    sta _AA+1
    sec
  sm1b:
    lda mulf_sqr1_lo,x
  sm2b:
    sbc mulf_sqr2_lo,x
    sta _cc+1
  sm3b:
    lda mulf_sqr1_hi,x
  sm4b:
    sbc mulf_sqr2_hi,x
    sta _CC+1
    ldx memB+1
    sec
  sm5a:
    lda mulf_sqr1_lo,x
  sm6a:
    sbc mulf_sqr2_lo,x
    sta _bb+1
  sm7a:
    lda mulf_sqr1_hi,x
  sm8a:
    sbc mulf_sqr2_hi,x
    sta _BB+1
    sec
  sm5b:
    lda mulf_sqr1_lo,x
  sm6b:
    sbc mulf_sqr2_lo,x
    sta _dd+1
  sm7b:
    lda mulf_sqr1_hi,x
  sm8b:
    sbc mulf_sqr2_hi,x
    sta memR+3
    clc
  _AA:
    lda #0
  _bb:
    adc #0
    sta memR+1
  _BB:
    lda #0
  _CC:
    adc #0
    sta memR+2
    bcc !+
    inc memR+3
    clc
  !:
  _cc:
    lda #0
    adc memR+1
    sta memR+1
  _dd:
    lda #0
    adc memR+2
    sta memR+2
    bcc !+
    inc memR+3
  !:
  //SEG330 [157] (dword) mulf16u::return#0 ← *((const dword*) mulf16u::memR#0) -- vduz1=_deref_pduc1 
    lda memR
    sta return
    lda memR+1
    sta return+1
    lda memR+2
    sta return+2
    lda memR+3
    sta return+3
    jmp breturn
  //SEG331 mulf16u::@return
  breturn:
  //SEG332 [158] return 
    rts
}
//SEG333 mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage(3) a, signed word zeropage(5) b)
mul16s: {
    .label _6 = 9
    .label _12 = 9
    .label _16 = 9
    .label _17 = 9
    .label m = $19
    .label return = $19
    .label a = 3
    .label b = 5
  //SEG334 [159] (word~) mul16u::b#3 ← (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2 
    lda b
    sta mul16u.b
    lda b+1
    sta mul16u.b+1
  //SEG335 [160] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG336 [161] call mul16u 
  //SEG337 [176] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
  //SEG338 [176] phi (word) mul16u::a#6 = (word~) mul16u::a#8 [phi:mul16s->mul16u#0] -- register_copy 
  //SEG339 [176] phi (word) mul16u::b#2 = (word~) mul16u::b#3 [phi:mul16s->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG340 [162] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp b6
  //SEG341 mul16s::@6
  b6:
  //SEG342 [163] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  //SEG343 [164] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b6
    jmp b3
  //SEG344 mul16s::@3
  b3:
  //SEG345 [165] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG346 [166] (word~) mul16s::$16 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _16
    sec
    sbc b
    sta _16
    lda _16+1
    sbc b+1
    sta _16+1
  //SEG347 [167] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG348 [168] phi from mul16s::@3 mul16s::@6 to mul16s::@1 [phi:mul16s::@3/mul16s::@6->mul16s::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG349 [168] phi (dword) mul16s::m#5 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@6->mul16s::@1#0] -- register_copy 
    jmp b1
  //SEG350 mul16s::@1
  b1:
  //SEG351 [169] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda b+1
    bpl b2_from_b1
    jmp b4
  //SEG352 mul16s::@4
  b4:
  //SEG353 [170] (word~) mul16s::$12 ← > (dword) mul16s::m#5 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _12
    lda m+3
    sta _12+1
  //SEG354 [171] (word~) mul16s::$17 ← (word~) mul16s::$12 - (word)(signed word) mul16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _17
    sec
    sbc a
    sta _17
    lda _17+1
    sbc a+1
    sta _17+1
  //SEG355 [172] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17 -- vduz1=vduz1_sethi_vwuz2 
    lda _17
    sta m+2
    lda _17+1
    sta m+3
  //SEG356 [173] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG357 [173] phi (dword) mul16s::m#4 = (dword) mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    jmp b2
  //SEG358 mul16s::@2
  b2:
  //SEG359 [174] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 -- vdsz1=_sdword_vduz1 
    jmp breturn
  //SEG360 mul16s::@return
  breturn:
  //SEG361 [175] return 
    rts
}
//SEG362 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage(9) a, word zeropage($17) b)
mul16u: {
    .label mb = $11
    .label a = 9
    .label res = $19
    .label return = $19
    .label b = $17
  //SEG363 [177] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG364 [178] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG365 [178] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG366 [178] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG367 [178] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG368 mul16u::@1
  b1:
  //SEG369 [179] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG370 mul16u::@return
  breturn:
  //SEG371 [180] return 
    rts
  //SEG372 mul16u::@2
  b2:
  //SEG373 [181] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG374 [182] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG375 mul16u::@7
  b7:
  //SEG376 [183] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG377 [184] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG378 [184] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
    jmp b4
  //SEG379 mul16u::@4
  b4:
  //SEG380 [185] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG381 [186] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG382 [178] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  b1_from_b4:
  //SEG383 [178] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG384 [178] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG385 [178] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG386 muls16s
// Slow multiplication of signed words
// Perform a signed multiplication by repeated addition/subtraction
// muls16s(signed word zeropage(3) a, signed word zeropage(5) b)
muls16s: {
    .label m = $b
    .label j = 9
    .label return = $b
    .label i = 9
    .label a = 3
    .label b = 5
  //SEG387 [187] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@5 -- vwsz1_lt_0_then_la1 
    lda a+1
    bmi b5_from_muls16s
    jmp b6
  //SEG388 muls16s::@6
  b6:
  //SEG389 [188] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@4 -- vwsz1_le_0_then_la1 
    lda a+1
    bmi b4_from_b6
    bne !+
    lda a
    beq b4_from_b6
  !:
  //SEG390 [189] phi from muls16s::@6 to muls16s::@3 [phi:muls16s::@6->muls16s::@3]
  b3_from_b6:
  //SEG391 [189] phi (signed word) muls16s::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@3#0] -- vwsz1=vbuc1 
    lda #<0
    sta j
    lda #>0
    sta j+1
  //SEG392 [189] phi (signed dword) muls16s::m#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@3#1] -- vdsz1=vbuc1 
    lda #<0
    sta m
    lda #>0
    sta m+1
    lda #<0>>$10
    sta m+2
    lda #>0>>$10
    sta m+3
    jmp b3
  //SEG393 [189] phi from muls16s::@3 to muls16s::@3 [phi:muls16s::@3->muls16s::@3]
  b3_from_b3:
  //SEG394 [189] phi (signed word) muls16s::j#2 = (signed word) muls16s::j#1 [phi:muls16s::@3->muls16s::@3#0] -- register_copy 
  //SEG395 [189] phi (signed dword) muls16s::m#3 = (signed dword) muls16s::m#1 [phi:muls16s::@3->muls16s::@3#1] -- register_copy 
    jmp b3
  //SEG396 muls16s::@3
  b3:
  //SEG397 [190] (signed dword) muls16s::m#1 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#0 -- vdsz1=vdsz1_plus_vwsz2 
    lda b+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    lda m
    clc
    adc b
    sta m
    lda m+1
    adc b+1
    sta m+1
    lda m+2
    adc $ff
    sta m+2
    lda m+3
    adc $ff
    sta m+3
  //SEG398 [191] (signed word) muls16s::j#1 ← ++ (signed word) muls16s::j#2 -- vwsz1=_inc_vwsz1 
    inc j
    bne !+
    inc j+1
  !:
  //SEG399 [192] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3 -- vwsz1_neq_vwsz2_then_la1 
    lda j+1
    cmp a+1
    bne b3_from_b3
    lda j
    cmp a
    bne b3_from_b3
  //SEG400 [193] phi from muls16s::@3 muls16s::@5 to muls16s::@4 [phi:muls16s::@3/muls16s::@5->muls16s::@4]
  b4_from_b3:
  b4_from_b5:
  //SEG401 [193] phi (signed dword) muls16s::return#0 = (signed dword) muls16s::m#1 [phi:muls16s::@3/muls16s::@5->muls16s::@4#0] -- register_copy 
    jmp b4
  //SEG402 [193] phi from muls16s::@6 to muls16s::@4 [phi:muls16s::@6->muls16s::@4]
  b4_from_b6:
  //SEG403 [193] phi (signed dword) muls16s::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@4#0] -- vdsz1=vbuc1 
    lda #<0
    sta return
    lda #>0
    sta return+1
    lda #<0>>$10
    sta return+2
    lda #>0>>$10
    sta return+3
    jmp b4
  //SEG404 muls16s::@4
  b4:
    jmp breturn
  //SEG405 muls16s::@return
  breturn:
  //SEG406 [194] return 
    rts
  //SEG407 [195] phi from muls16s to muls16s::@5 [phi:muls16s->muls16s::@5]
  b5_from_muls16s:
  //SEG408 [195] phi (signed word) muls16s::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s->muls16s::@5#0] -- vwsz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG409 [195] phi (signed dword) muls16s::m#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s->muls16s::@5#1] -- vdsz1=vbuc1 
    lda #<0
    sta m
    lda #>0
    sta m+1
    lda #<0>>$10
    sta m+2
    lda #>0>>$10
    sta m+3
    jmp b5
  //SEG410 [195] phi from muls16s::@5 to muls16s::@5 [phi:muls16s::@5->muls16s::@5]
  b5_from_b5:
  //SEG411 [195] phi (signed word) muls16s::i#2 = (signed word) muls16s::i#1 [phi:muls16s::@5->muls16s::@5#0] -- register_copy 
  //SEG412 [195] phi (signed dword) muls16s::m#5 = (signed dword) muls16s::m#2 [phi:muls16s::@5->muls16s::@5#1] -- register_copy 
    jmp b5
  //SEG413 muls16s::@5
  b5:
  //SEG414 [196] (signed dword) muls16s::m#2 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#0 -- vdsz1=vdsz1_minus_vwsz2 
    lda b+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    sec
    lda m
    sbc b
    sta m
    lda m+1
    sbc b+1
    sta m+1
    lda m+2
    sbc $ff
    sta m+2
    lda m+3
    sbc $ff
    sta m+3
  //SEG415 [197] (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2 -- vwsz1=_dec_vwsz1 
    lda i
    bne !+
    dec i+1
  !:
    dec i
  //SEG416 [198] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5 -- vwsz1_neq_vwsz2_then_la1 
    lda i+1
    cmp a+1
    bne b5_from_b5
    lda i
    cmp a
    bne b5_from_b5
    jmp b4_from_b5
}
//SEG417 mul16u_compare
// Perform many possible word multiplications (slow and fast) and compare the results
mul16u_compare: {
    .label a = $15
    .label b = $17
    .label ms = $b
    .label mn = $19
    .label mf = $11
    .label i = 2
  //SEG418 [200] phi from mul16u_compare to mul16u_compare::@1 [phi:mul16u_compare->mul16u_compare::@1]
  b1_from_mul16u_compare:
  //SEG419 [200] phi (byte) mul16u_compare::i#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG420 [200] phi (word) mul16u_compare::b#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta b
    lda #>0
    sta b+1
  //SEG421 [200] phi (word) mul16u_compare::a#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#2] -- vwuz1=vbuc1 
    lda #<0
    sta a
    lda #>0
    sta a+1
  //SEG422 [200] phi (byte*) print_char_cursor#139 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_compare->mul16u_compare::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
    jmp b1
  //SEG423 [200] phi from mul16u_compare::@10 to mul16u_compare::@1 [phi:mul16u_compare::@10->mul16u_compare::@1]
  b1_from_b10:
  //SEG424 [200] phi (byte) mul16u_compare::i#12 = (byte) mul16u_compare::i#1 [phi:mul16u_compare::@10->mul16u_compare::@1#0] -- register_copy 
  //SEG425 [200] phi (word) mul16u_compare::b#6 = (word) mul16u_compare::b#1 [phi:mul16u_compare::@10->mul16u_compare::@1#1] -- register_copy 
  //SEG426 [200] phi (word) mul16u_compare::a#6 = (word) mul16u_compare::a#1 [phi:mul16u_compare::@10->mul16u_compare::@1#2] -- register_copy 
  //SEG427 [200] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@10->mul16u_compare::@1#3] -- register_copy 
    jmp b1
  //SEG428 mul16u_compare::@1
  b1:
  //SEG429 [201] call print_str 
  //SEG430 [64] phi from mul16u_compare::@1 to print_str [phi:mul16u_compare::@1->print_str]
  print_str_from_b1:
  //SEG431 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#139 [phi:mul16u_compare::@1->print_str#0] -- register_copy 
  //SEG432 [64] phi (byte*) print_str::str#17 = (const string) str [phi:mul16u_compare::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG433 [202] phi from mul16u_compare::@1 to mul16u_compare::@2 [phi:mul16u_compare::@1->mul16u_compare::@2]
  b2_from_b1:
  //SEG434 [202] phi (byte) mul16u_compare::j#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@1->mul16u_compare::@2#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG435 [202] phi (word) mul16u_compare::b#2 = (word) mul16u_compare::b#6 [phi:mul16u_compare::@1->mul16u_compare::@2#1] -- register_copy 
  //SEG436 [202] phi (word) mul16u_compare::a#2 = (word) mul16u_compare::a#6 [phi:mul16u_compare::@1->mul16u_compare::@2#2] -- register_copy 
    jmp b2
  //SEG437 [202] phi from mul16u_compare::@5 to mul16u_compare::@2 [phi:mul16u_compare::@5->mul16u_compare::@2]
  b2_from_b5:
  //SEG438 [202] phi (byte) mul16u_compare::j#10 = (byte) mul16u_compare::j#1 [phi:mul16u_compare::@5->mul16u_compare::@2#0] -- register_copy 
  //SEG439 [202] phi (word) mul16u_compare::b#2 = (word) mul16u_compare::b#1 [phi:mul16u_compare::@5->mul16u_compare::@2#1] -- register_copy 
  //SEG440 [202] phi (word) mul16u_compare::a#2 = (word) mul16u_compare::a#1 [phi:mul16u_compare::@5->mul16u_compare::@2#2] -- register_copy 
    jmp b2
  //SEG441 mul16u_compare::@2
  b2:
  //SEG442 [203] (word) mul16u_compare::a#1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda a
    adc #<$d2b
    sta a
    lda a+1
    adc #>$d2b
    sta a+1
  //SEG443 [204] (word) mul16u_compare::b#1 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda b
    adc #<$ffd
    sta b
    lda b+1
    adc #>$ffd
    sta b+1
  //SEG444 [205] (word) muls16u::a#0 ← (word) mul16u_compare::a#1
  //SEG445 [206] (word) muls16u::b#0 ← (word) mul16u_compare::b#1
  //SEG446 [207] call muls16u 
    jsr muls16u
  //SEG447 [208] (dword) muls16u::return#2 ← (dword) muls16u::return#0
    jmp b13
  //SEG448 mul16u_compare::@13
  b13:
  //SEG449 [209] (dword) mul16u_compare::ms#0 ← (dword) muls16u::return#2
  //SEG450 [210] (word) mul16u::a#2 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG451 [211] (word) mul16u::b#1 ← (word) mul16u_compare::b#1
  //SEG452 [212] call mul16u 
  //SEG453 [176] phi from mul16u_compare::@13 to mul16u [phi:mul16u_compare::@13->mul16u]
  mul16u_from_b13:
  //SEG454 [176] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mul16u_compare::@13->mul16u#0] -- register_copy 
  //SEG455 [176] phi (word) mul16u::b#2 = (word) mul16u::b#1 [phi:mul16u_compare::@13->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG456 [213] (dword) mul16u::return#3 ← (dword) mul16u::res#2
    jmp b14
  //SEG457 mul16u_compare::@14
  b14:
  //SEG458 [214] (dword) mul16u_compare::mn#0 ← (dword) mul16u::return#3
  //SEG459 [215] (word) mulf16u::a#1 ← (word) mul16u_compare::a#1
  //SEG460 [216] (word) mulf16u::b#1 ← (word) mul16u_compare::b#1
  //SEG461 [217] call mulf16u 
  //SEG462 [153] phi from mul16u_compare::@14 to mulf16u [phi:mul16u_compare::@14->mulf16u]
  mulf16u_from_b14:
  //SEG463 [153] phi (word) mulf16u::b#2 = (word) mulf16u::b#1 [phi:mul16u_compare::@14->mulf16u#0] -- register_copy 
  //SEG464 [153] phi (word) mulf16u::a#2 = (word) mulf16u::a#1 [phi:mul16u_compare::@14->mulf16u#1] -- register_copy 
    jsr mulf16u
  //SEG465 [218] (dword) mulf16u::return#3 ← (dword) mulf16u::return#0
    jmp b15
  //SEG466 mul16u_compare::@15
  b15:
  //SEG467 [219] (dword) mul16u_compare::mf#0 ← (dword) mulf16u::return#3
  //SEG468 [220] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3 -- vduz1_eq_vduz2_then_la1 
    lda ms
    cmp mf
    bne !+
    lda ms+1
    cmp mf+1
    bne !+
    lda ms+2
    cmp mf+2
    bne !+
    lda ms+3
    cmp mf+3
    beq b3_from_b15
  !:
  //SEG469 [221] phi from mul16u_compare::@15 to mul16u_compare::@6 [phi:mul16u_compare::@15->mul16u_compare::@6]
  b6_from_b15:
    jmp b6
  //SEG470 mul16u_compare::@6
  b6:
  //SEG471 [222] phi from mul16u_compare::@6 to mul16u_compare::@3 [phi:mul16u_compare::@6->mul16u_compare::@3]
  b3_from_b6:
  //SEG472 [222] phi (byte) mul16u_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@6->mul16u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG473 [222] phi from mul16u_compare::@15 to mul16u_compare::@3 [phi:mul16u_compare::@15->mul16u_compare::@3]
  b3_from_b15:
  //SEG474 [222] phi (byte) mul16u_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mul16u_compare::@15->mul16u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b3
  //SEG475 mul16u_compare::@3
  b3:
  //SEG476 [223] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@22 -- vduz1_eq_vduz2_then_la1 
    lda ms
    cmp mn
    bne !+
    lda ms+1
    cmp mn+1
    bne !+
    lda ms+2
    cmp mn+2
    bne !+
    lda ms+3
    cmp mn+3
    beq b22_from_b3
  !:
  //SEG477 [224] phi from mul16u_compare::@3 to mul16u_compare::@4 [phi:mul16u_compare::@3->mul16u_compare::@4]
  b4_from_b3:
  //SEG478 [224] phi (byte) mul16u_compare::ok#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@3->mul16u_compare::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b4
  //SEG479 mul16u_compare::@4
  b4:
  //SEG480 [225] if((byte) mul16u_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u_compare::@5 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b5
    jmp b8
  //SEG481 mul16u_compare::@8
  b8:
  //SEG482 [226] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG483 [227] (word) mul16u_error::a#0 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mul16u_error.a
    lda a+1
    sta mul16u_error.a+1
  //SEG484 [228] (word) mul16u_error::b#0 ← (word) mul16u_compare::b#1
  //SEG485 [229] (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#0
  //SEG486 [230] (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#0
  //SEG487 [231] (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#0
  //SEG488 [232] call mul16u_error 
  //SEG489 [245] phi from mul16u_compare::@8 to mul16u_error [phi:mul16u_compare::@8->mul16u_error]
  mul16u_error_from_b8:
    jsr mul16u_error
    jmp breturn
  //SEG490 mul16u_compare::@return
  breturn:
  //SEG491 [233] return 
    rts
  //SEG492 mul16u_compare::@5
  b5:
  //SEG493 [234] (byte) mul16u_compare::j#1 ← ++ (byte) mul16u_compare::j#10 -- vbuyy=_inc_vbuyy 
    iny
  //SEG494 [235] if((byte) mul16u_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$10
    bne b2_from_b5
    jmp b10
  //SEG495 mul16u_compare::@10
  b10:
  //SEG496 [236] (byte) mul16u_compare::i#1 ← ++ (byte) mul16u_compare::i#12 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG497 [237] if((byte) mul16u_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b10
  //SEG498 [238] phi from mul16u_compare::@10 to mul16u_compare::@11 [phi:mul16u_compare::@10->mul16u_compare::@11]
  b11_from_b10:
    jmp b11
  //SEG499 mul16u_compare::@11
  b11:
  //SEG500 [239] call print_ln 
  //SEG501 [59] phi from mul16u_compare::@11 to print_ln [phi:mul16u_compare::@11->print_ln]
  print_ln_from_b11:
  //SEG502 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@11->print_ln#0] -- register_copy 
  //SEG503 [59] phi (byte*) print_line_cursor#43 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_compare::@11->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
    jmp b17
  //SEG504 mul16u_compare::@17
  b17:
  //SEG505 [240] (byte*~) print_char_cursor#192 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG506 [241] call print_str 
  //SEG507 [64] phi from mul16u_compare::@17 to print_str [phi:mul16u_compare::@17->print_str]
  print_str_from_b17:
  //SEG508 [64] phi (byte*) print_char_cursor#148 = (byte*~) print_char_cursor#192 [phi:mul16u_compare::@17->print_str#0] -- register_copy 
  //SEG509 [64] phi (byte*) print_str::str#17 = (const string) mul16u_compare::str1 [phi:mul16u_compare::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG510 [242] phi from mul16u_compare::@17 to mul16u_compare::@18 [phi:mul16u_compare::@17->mul16u_compare::@18]
  b18_from_b17:
    jmp b18
  //SEG511 mul16u_compare::@18
  b18:
  //SEG512 [243] call print_ln 
  //SEG513 [59] phi from mul16u_compare::@18 to print_ln [phi:mul16u_compare::@18->print_ln]
  print_ln_from_b18:
  //SEG514 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@18->print_ln#0] -- register_copy 
  //SEG515 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16u_compare::@18->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG516 [244] phi from mul16u_compare::@3 to mul16u_compare::@22 [phi:mul16u_compare::@3->mul16u_compare::@22]
  b22_from_b3:
    jmp b22
  //SEG517 mul16u_compare::@22
  b22:
  //SEG518 [224] phi from mul16u_compare::@22 to mul16u_compare::@4 [phi:mul16u_compare::@22->mul16u_compare::@4]
  b4_from_b22:
  //SEG519 [224] phi (byte) mul16u_compare::ok#3 = (byte) mul16u_compare::ok#4 [phi:mul16u_compare::@22->mul16u_compare::@4#0] -- register_copy 
    jmp b4
    str1: .text "word multiply results match!@"
}
//SEG520 mul16u_error
// mul16u_error(word zeropage(3) a, word zeropage($17) b, dword zeropage($b) ms, dword zeropage($19) mn, dword zeropage($11) mf)
mul16u_error: {
    .label a = 3
    .label b = $17
    .label ms = $b
    .label mn = $19
    .label mf = $11
  //SEG521 [246] call print_str 
  //SEG522 [64] phi from mul16u_error to print_str [phi:mul16u_error->print_str]
  print_str_from_mul16u_error:
  //SEG523 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#128 [phi:mul16u_error->print_str#0] -- register_copy 
  //SEG524 [64] phi (byte*) print_str::str#17 = (const string) mul16u_error::str [phi:mul16u_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b1
  //SEG525 mul16u_error::@1
  b1:
  //SEG526 [247] (word) print_word::w#3 ← (word) mul16u_error::a#0
  //SEG527 [248] call print_word 
  //SEG528 [109] phi from mul16u_error::@1 to print_word [phi:mul16u_error::@1->print_word]
  print_word_from_b1:
  //SEG529 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:mul16u_error::@1->print_word#0] -- register_copy 
  //SEG530 [109] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:mul16u_error::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG531 [249] phi from mul16u_error::@1 to mul16u_error::@2 [phi:mul16u_error::@1->mul16u_error::@2]
  b2_from_b1:
    jmp b2
  //SEG532 mul16u_error::@2
  b2:
  //SEG533 [250] call print_str 
  //SEG534 [64] phi from mul16u_error::@2 to print_str [phi:mul16u_error::@2->print_str]
  print_str_from_b2:
  //SEG535 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@2->print_str#0] -- register_copy 
  //SEG536 [64] phi (byte*) print_str::str#17 = (const string) str1 [phi:mul16u_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b3
  //SEG537 mul16u_error::@3
  b3:
  //SEG538 [251] (word) print_word::w#4 ← (word) mul16u_error::b#0 -- vwuz1=vwuz2 
    lda b
    sta print_word.w
    lda b+1
    sta print_word.w+1
  //SEG539 [252] call print_word 
  //SEG540 [109] phi from mul16u_error::@3 to print_word [phi:mul16u_error::@3->print_word]
  print_word_from_b3:
  //SEG541 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:mul16u_error::@3->print_word#0] -- register_copy 
  //SEG542 [109] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:mul16u_error::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG543 [253] phi from mul16u_error::@3 to mul16u_error::@4 [phi:mul16u_error::@3->mul16u_error::@4]
  b4_from_b3:
    jmp b4
  //SEG544 mul16u_error::@4
  b4:
  //SEG545 [254] call print_str 
  //SEG546 [64] phi from mul16u_error::@4 to print_str [phi:mul16u_error::@4->print_str]
  print_str_from_b4:
  //SEG547 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@4->print_str#0] -- register_copy 
  //SEG548 [64] phi (byte*) print_str::str#17 = (const string) str2 [phi:mul16u_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG549 mul16u_error::@5
  b5:
  //SEG550 [255] (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#0
  //SEG551 [256] call print_dword 
  //SEG552 [103] phi from mul16u_error::@5 to print_dword [phi:mul16u_error::@5->print_dword]
  print_dword_from_b5:
  //SEG553 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@5->print_dword#0] -- register_copy 
  //SEG554 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#1 [phi:mul16u_error::@5->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG555 [257] phi from mul16u_error::@5 to mul16u_error::@6 [phi:mul16u_error::@5->mul16u_error::@6]
  b6_from_b5:
    jmp b6
  //SEG556 mul16u_error::@6
  b6:
  //SEG557 [258] call print_str 
  //SEG558 [64] phi from mul16u_error::@6 to print_str [phi:mul16u_error::@6->print_str]
  print_str_from_b6:
  //SEG559 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@6->print_str#0] -- register_copy 
  //SEG560 [64] phi (byte*) print_str::str#17 = (const string) str3 [phi:mul16u_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG561 mul16u_error::@7
  b7:
  //SEG562 [259] (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#0 -- vduz1=vduz2 
    lda mn
    sta print_dword.dw
    lda mn+1
    sta print_dword.dw+1
    lda mn+2
    sta print_dword.dw+2
    lda mn+3
    sta print_dword.dw+3
  //SEG563 [260] call print_dword 
  //SEG564 [103] phi from mul16u_error::@7 to print_dword [phi:mul16u_error::@7->print_dword]
  print_dword_from_b7:
  //SEG565 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@7->print_dword#0] -- register_copy 
  //SEG566 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#2 [phi:mul16u_error::@7->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG567 [261] phi from mul16u_error::@7 to mul16u_error::@8 [phi:mul16u_error::@7->mul16u_error::@8]
  b8_from_b7:
    jmp b8
  //SEG568 mul16u_error::@8
  b8:
  //SEG569 [262] call print_str 
  //SEG570 [64] phi from mul16u_error::@8 to print_str [phi:mul16u_error::@8->print_str]
  print_str_from_b8:
  //SEG571 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@8->print_str#0] -- register_copy 
  //SEG572 [64] phi (byte*) print_str::str#17 = (const string) str4 [phi:mul16u_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG573 mul16u_error::@9
  b9:
  //SEG574 [263] (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#0 -- vduz1=vduz2 
    lda mf
    sta print_dword.dw
    lda mf+1
    sta print_dword.dw+1
    lda mf+2
    sta print_dword.dw+2
    lda mf+3
    sta print_dword.dw+3
  //SEG575 [264] call print_dword 
  //SEG576 [103] phi from mul16u_error::@9 to print_dword [phi:mul16u_error::@9->print_dword]
  print_dword_from_b9:
  //SEG577 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@9->print_dword#0] -- register_copy 
  //SEG578 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#3 [phi:mul16u_error::@9->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG579 [265] phi from mul16u_error::@9 to mul16u_error::@10 [phi:mul16u_error::@9->mul16u_error::@10]
  b10_from_b9:
    jmp b10
  //SEG580 mul16u_error::@10
  b10:
  //SEG581 [266] call print_ln 
  //SEG582 [59] phi from mul16u_error::@10 to print_ln [phi:mul16u_error::@10->print_ln]
  print_ln_from_b10:
  //SEG583 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#20 [phi:mul16u_error::@10->print_ln#0] -- register_copy 
  //SEG584 [59] phi (byte*) print_line_cursor#43 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_error::@10->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
    jmp breturn
  //SEG585 mul16u_error::@return
  breturn:
  //SEG586 [267] return 
    rts
    str: .text "multiply mismatch @"
}
//SEG587 muls16u
// Slow multiplication of unsigned words
// Calculate an unsigned multiplication by repeated addition
// muls16u(word zeropage($15) a, word zeropage($17) b)
muls16u: {
    .label return = $b
    .label m = $b
    .label i = 3
    .label a = $15
    .label b = $17
  //SEG588 [268] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1 -- vwuz1_eq_0_then_la1 
    lda a
    bne !+
    lda a+1
    beq b1_from_muls16u
  !:
  //SEG589 [269] phi from muls16u to muls16u::@2 [phi:muls16u->muls16u::@2]
  b2_from_muls16u:
  //SEG590 [269] phi (word) muls16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@2#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
  //SEG591 [269] phi (dword) muls16u::m#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@2#1] -- vduz1=vbuc1 
    lda #0
    sta m
    lda #0
    sta m+1
    sta m+2
    sta m+3
    jmp b2
  //SEG592 [269] phi from muls16u::@2 to muls16u::@2 [phi:muls16u::@2->muls16u::@2]
  b2_from_b2:
  //SEG593 [269] phi (word) muls16u::i#2 = (word) muls16u::i#1 [phi:muls16u::@2->muls16u::@2#0] -- register_copy 
  //SEG594 [269] phi (dword) muls16u::m#3 = (dword) muls16u::m#1 [phi:muls16u::@2->muls16u::@2#1] -- register_copy 
    jmp b2
  //SEG595 muls16u::@2
  b2:
  //SEG596 [270] (dword) muls16u::m#1 ← (dword) muls16u::m#3 + (word) muls16u::b#0 -- vduz1=vduz1_plus_vwuz2 
    lda m
    clc
    adc b
    sta m
    lda m+1
    adc b+1
    sta m+1
    lda m+2
    adc #0
    sta m+2
    lda m+3
    adc #0
    sta m+3
  //SEG597 [271] (word) muls16u::i#1 ← ++ (word) muls16u::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG598 [272] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2 -- vwuz1_neq_vwuz2_then_la1 
    lda i+1
    cmp a+1
    bne b2_from_b2
    lda i
    cmp a
    bne b2_from_b2
  //SEG599 [273] phi from muls16u::@2 to muls16u::@1 [phi:muls16u::@2->muls16u::@1]
  b1_from_b2:
  //SEG600 [273] phi (dword) muls16u::return#0 = (dword) muls16u::m#1 [phi:muls16u::@2->muls16u::@1#0] -- register_copy 
    jmp b1
  //SEG601 [273] phi from muls16u to muls16u::@1 [phi:muls16u->muls16u::@1]
  b1_from_muls16u:
  //SEG602 [273] phi (dword) muls16u::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@1#0] -- vduz1=vbuc1 
    lda #0
    sta return
    lda #0
    sta return+1
    sta return+2
    sta return+3
    jmp b1
  //SEG603 muls16u::@1
  b1:
    jmp breturn
  //SEG604 muls16u::@return
  breturn:
  //SEG605 [274] return 
    rts
}
//SEG606 mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label sqr1_hi = 5
    .label sqr = 7
    .label sqr1_lo = 3
    .label x_2 = 2
    .label sqr2_hi = 5
    .label sqr2_lo = 3
    .label dir = 2
  //SEG607 [276] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG608 [276] phi (byte) mulf_init::x_2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG609 [276] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[$200]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
  //SEG610 [276] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[$200]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
  //SEG611 [276] phi (word) mulf_init::sqr#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
  //SEG612 [276] phi (byte) mulf_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG613 [276] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  b1_from_b2:
  //SEG614 [276] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
  //SEG615 [276] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
  //SEG616 [276] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
  //SEG617 [276] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
  //SEG618 [276] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    jmp b1
  //SEG619 mulf_init::@1
  b1:
  //SEG620 [277] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG621 [278] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG622 [279] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2_from_b1
    jmp b5
  //SEG623 mulf_init::@5
  b5:
  //SEG624 [280] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG625 [281] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG626 [282] phi from mulf_init::@1 mulf_init::@5 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG627 [282] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#0] -- register_copy 
  //SEG628 [282] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#1] -- register_copy 
    jmp b2
  //SEG629 mulf_init::@2
  b2:
  //SEG630 [283] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG631 [284] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
  //SEG632 [285] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG633 [286] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
  //SEG634 [287] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
  //SEG635 [288] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    lda #0
    adc sqr+1
    sta sqr+1
  //SEG636 [289] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
  //SEG637 [290] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200) goto mulf_init::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1_from_b2
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1_from_b2
  //SEG638 [291] phi from mulf_init::@2 to mulf_init::@3 [phi:mulf_init::@2->mulf_init::@3]
  b3_from_b2:
  //SEG639 [291] phi (byte) mulf_init::dir#2 = (byte/word/signed word/dword/signed dword) $ff [phi:mulf_init::@2->mulf_init::@3#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
  //SEG640 [291] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[$200]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@3#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
  //SEG641 [291] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[$200]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@3#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
  //SEG642 [291] phi (byte) mulf_init::x_255#2 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@2->mulf_init::@3#3] -- vbuxx=vbuc1 
    ldx #-1
    jmp b3
  //SEG643 [291] phi from mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@4->mulf_init::@3]
  b3_from_b4:
  //SEG644 [291] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@4->mulf_init::@3#0] -- register_copy 
  //SEG645 [291] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@4->mulf_init::@3#1] -- register_copy 
  //SEG646 [291] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@4->mulf_init::@3#2] -- register_copy 
  //SEG647 [291] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@4->mulf_init::@3#3] -- register_copy 
    jmp b3
  //SEG648 mulf_init::@3
  b3:
  //SEG649 [292] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
  //SEG650 [293] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
  //SEG651 [294] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
  //SEG652 [295] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc dir
    tax
  //SEG653 [296] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b12_from_b3
  //SEG654 [297] phi from mulf_init::@3 to mulf_init::@4 [phi:mulf_init::@3->mulf_init::@4]
  b4_from_b3:
  //SEG655 [297] phi (byte) mulf_init::dir#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@3->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    jmp b4
  //SEG656 mulf_init::@4
  b4:
  //SEG657 [298] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
  //SEG658 [299] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) goto mulf_init::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b3_from_b4
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b3_from_b4
    jmp b8
  //SEG659 mulf_init::@8
  b8:
  //SEG660 [300] *((const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
  //SEG661 [301] *((const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp breturn
  //SEG662 mulf_init::@return
  breturn:
  //SEG663 [302] return 
    rts
  //SEG664 [303] phi from mulf_init::@3 to mulf_init::@12 [phi:mulf_init::@3->mulf_init::@12]
  b12_from_b3:
    jmp b12
  //SEG665 mulf_init::@12
  b12:
  //SEG666 [297] phi from mulf_init::@12 to mulf_init::@4 [phi:mulf_init::@12->mulf_init::@4]
  b4_from_b12:
  //SEG667 [297] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@12->mulf_init::@4#0] -- register_copy 
    jmp b4
}
//SEG668 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 3
  //SEG669 [305] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG670 [305] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG671 [305] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG672 [305] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG673 print_cls::@1
  b1:
  //SEG674 [306] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG675 [307] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG676 [308] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG677 print_cls::@return
  breturn:
  //SEG678 [309] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  str: .text ".@"
  str4: .text " / fast:@"
  str3: .text " / normal:@"
  str1: .text "*@"
  str2: .text " slow:@"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b40
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b22
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b22
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b22_from_b3 with b22
Replacing label b2_from_b5 with b2
Replacing label b1_from_b10 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_print_sdword with b1
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b6 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b6 with b1
Replacing label b2_from_b1 with b2
Replacing label b4_from_b2 with b4
Replacing label b3_from_b3 with b3
Replacing label b3_from_b3 with b3
Replacing label b5_from_b5 with b5
Replacing label b5_from_b5 with b5
Replacing label b22_from_b3 with b22
Replacing label b2_from_b5 with b2
Replacing label b1_from_b10 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Replacing label b12_from_b3 with b12
Replacing label b3_from_b4 with b3
Replacing label b3_from_b4 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b40_from_bbegin:
Removing instruction b40:
Removing instruction bend_from_b40:
Removing instruction b1_from_main:
Removing instruction mulf_init_from_b1:
Removing instruction b2_from_b1:
Removing instruction mul16u_compare_from_b2:
Removing instruction b3_from_b2:
Removing instruction b1_from_b10:
Removing instruction print_str_from_b1:
Removing instruction b2_from_b5:
Removing instruction b6_from_b15:
Removing instruction b3_from_b6:
Removing instruction b11_from_b10:
Removing instruction print_ln_from_b11:
Removing instruction b18_from_b17:
Removing instruction print_ln_from_b18:
Removing instruction b22_from_b3:
Removing instruction b4_from_b22:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction print_sword_from_b1:
Removing instruction b2_from_b1:
Removing instruction print_str_from_b2:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction print_sdword_from_b5:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b2_from_print_sdword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sdword:
Removing instruction b1_from_b4:
Removing instruction print_dword_from_b1:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b4:
Removing instruction print_word_from_b1:
Removing instruction b1_from_b3:
Removing instruction b1_from_b6:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b1_from_b6:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction breturn:
Removing instruction b4_from_b2:
Removing instruction b4_from_b7:
Removing instruction b3_from_b3:
Removing instruction b4_from_b3:
Removing instruction breturn:
Removing instruction b5_from_b5:
Removing instruction b1_from_b10:
Removing instruction print_str_from_b1:
Removing instruction b2_from_b5:
Removing instruction mulf16u_from_b14:
Removing instruction b6_from_b15:
Removing instruction b3_from_b6:
Removing instruction b11_from_b10:
Removing instruction print_ln_from_b11:
Removing instruction b18_from_b17:
Removing instruction print_ln_from_b18:
Removing instruction b22_from_b3:
Removing instruction b4_from_b22:
Removing instruction print_word_from_b1:
Removing instruction b2_from_b1:
Removing instruction print_str_from_b2:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction print_dword_from_b5:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b2_from_b2:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b4:
Removing instruction b12_from_b3:
Removing instruction b4_from_b12:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_mul16s_compare:
Removing instruction b2_from_b1:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction b6:
Removing instruction b4_from_b3:
Removing instruction b8:
Removing instruction mul16s_error_from_b8:
Removing instruction b10:
Removing instruction b11:
Removing instruction b17:
Removing instruction print_str_from_b17:
Removing instruction b18:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_str_from_mul16s_error:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction print_sword_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_sdword_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_sdword_from_b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction breturn:
Removing instruction print_word_from_print_dword:
Removing instruction b1:
Removing instruction print_word_from_b1:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction breturn:
Removing instruction mulf16u_from_mulf16s:
Removing instruction b6:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction mul16u_from_mul16s:
Removing instruction b6:
Removing instruction b3:
Removing instruction b4:
Removing instruction b1_from_mul16u:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b1_from_b4:
Removing instruction b6:
Removing instruction b3_from_b6:
Removing instruction b1_from_mul16u_compare:
Removing instruction b2_from_b1:
Removing instruction b13:
Removing instruction mul16u_from_b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction b6:
Removing instruction b4_from_b3:
Removing instruction b8:
Removing instruction mul16u_error_from_b8:
Removing instruction b10:
Removing instruction b11:
Removing instruction b17:
Removing instruction print_str_from_b17:
Removing instruction b18:
Removing instruction print_str_from_mul16u_error:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction print_word_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_dword_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_dword_from_b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b2_from_muls16u:
Removing instruction b1_from_b2:
Removing instruction b1_from_mulf_init:
Removing instruction b5:
Removing instruction b3_from_b2:
Removing instruction b4_from_b3:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b4 in beq b22
Skipping double jump to b4 in jmp b4_from_b5
Skipping double jump to b4 in beq b22
Skipping double jump to b4 in bne b12
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b3_from_b15 to b6
Relabelling long label b4_from_b5 to b1
Relabelling long label b4_from_b6 to b2
Relabelling long label b5_from_muls16s to b6
Relabelling long label b3_from_b15 to b6
Relabelling long label b1_from_muls16u to b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda a+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Removing instruction b22:
Removing instruction b1:
Removing instruction b22:
Removing instruction b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b4
Removing unreachable instruction jmp b4
Removing unreachable instruction jmp b4
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [110] bne b1 to beq
Fixing long branch [838] bne b1 to beq

FINAL SYMBOL TABLE
(label) @40
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$12 $12 zp ZP_WORD:9 4.0
(word~) mul16s::$16 $16 zp ZP_WORD:9 4.0
(word~) mul16s::$17 $17 zp ZP_WORD:9 4.0
(word~) mul16s::$6 $6 zp ZP_WORD:9 4.0
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@6
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0 a zp ZP_WORD:3 7.357142857142858
(signed word) mul16s::b
(signed word) mul16s::b#0 b zp ZP_WORD:5 9.363636363636363
(dword) mul16s::m
(dword) mul16s::m#0 m zp ZP_DWORD:25 2.0
(dword) mul16s::m#1 m zp ZP_DWORD:25 4.0
(dword) mul16s::m#2 m zp ZP_DWORD:25 4.0
(dword) mul16s::m#4 m zp ZP_DWORD:25 6.0
(dword) mul16s::m#5 m zp ZP_DWORD:25 2.5
(signed dword) mul16s::return
(signed dword) mul16s::return#0 return zp ZP_DWORD:25 34.33333333333333
(signed dword) mul16s::return#2 return zp ZP_DWORD:25 202.0
(void()) mul16s_compare()
(label) mul16s_compare::@1
(label) mul16s_compare::@10
(label) mul16s_compare::@11
(label) mul16s_compare::@13
(label) mul16s_compare::@14
(label) mul16s_compare::@15
(label) mul16s_compare::@17
(label) mul16s_compare::@18
(label) mul16s_compare::@2
(label) mul16s_compare::@22
(label) mul16s_compare::@3
(label) mul16s_compare::@4
(label) mul16s_compare::@5
(label) mul16s_compare::@6
(label) mul16s_compare::@8
(label) mul16s_compare::@return
(signed word) mul16s_compare::a
(signed word) mul16s_compare::a#1 a zp ZP_WORD:3 17.862068965517242
(signed word) mul16s_compare::a#2 a zp ZP_WORD:3 213.0
(signed word) mul16s_compare::a#6 a zp ZP_WORD:3 11.0
(signed word) mul16s_compare::b
(signed word) mul16s_compare::b#1 b zp ZP_WORD:5 17.862068965517242
(signed word) mul16s_compare::b#2 b zp ZP_WORD:5 106.5
(signed word) mul16s_compare::b#6 b zp ZP_WORD:5 11.0
(byte) mul16s_compare::i
(byte) mul16s_compare::i#1 i zp ZP_BYTE:2 16.5
(byte) mul16s_compare::i#12 i zp ZP_BYTE:2 0.7586206896551724
(byte) mul16s_compare::j
(byte) mul16s_compare::j#1 reg byte y 151.5
(byte) mul16s_compare::j#10 reg byte y 8.08
(signed dword) mul16s_compare::mf
(signed dword) mul16s_compare::mf#0 mf zp ZP_DWORD:17 15.692307692307692
(signed dword) mul16s_compare::mn
(signed dword) mul16s_compare::mn#0 mn zp ZP_DWORD:25 12.0
(signed dword) mul16s_compare::ms
(signed dword) mul16s_compare::ms#0 ms zp ZP_DWORD:11 14.523809523809522
(byte) mul16s_compare::ok
(byte) mul16s_compare::ok#3 reg byte x 202.0
(byte) mul16s_compare::ok#4 reg byte x 33.666666666666664
(const string) mul16s_compare::str1 str1 = (string) "signed word multiply results match!@"
(void()) mul16s_error((signed word) mul16s_error::a , (signed word) mul16s_error::b , (signed dword) mul16s_error::ms , (signed dword) mul16s_error::mn , (signed dword) mul16s_error::mf)
(label) mul16s_error::@1
(label) mul16s_error::@10
(label) mul16s_error::@2
(label) mul16s_error::@3
(label) mul16s_error::@4
(label) mul16s_error::@5
(label) mul16s_error::@6
(label) mul16s_error::@7
(label) mul16s_error::@8
(label) mul16s_error::@9
(label) mul16s_error::@return
(signed word) mul16s_error::a
(signed word) mul16s_error::a#0 a zp ZP_WORD:3 0.5714285714285714
(signed word) mul16s_error::b
(signed word) mul16s_error::b#0 b zp ZP_WORD:5 0.4
(signed dword) mul16s_error::mf
(signed dword) mul16s_error::mf#0 mf zp ZP_DWORD:17 0.21052631578947367
(signed dword) mul16s_error::mn
(signed dword) mul16s_error::mn#0 mn zp ZP_DWORD:25 0.25
(signed dword) mul16s_error::ms
(signed dword) mul16s_error::ms#0 ms zp ZP_DWORD:11 0.3076923076923077
(const string) mul16s_error::str str = (string) "signed word multiply mismatch @"
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte/word~) mul16u::$1 reg byte a 2002.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:9 1001.0
(word) mul16u::a#2 a zp ZP_WORD:9 101.0
(word) mul16u::a#3 a zp ZP_WORD:9 667.6666666666667
(word) mul16u::a#6 a zp ZP_WORD:9 52.5
(word~) mul16u::a#8 a zp ZP_WORD:9 4.0
(word) mul16u::b
(word) mul16u::b#1 b zp ZP_WORD:23 202.0
(word) mul16u::b#2 b zp ZP_WORD:23 105.0
(word~) mul16u::b#3 b zp ZP_WORD:23 2.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp ZP_DWORD:17 4.0
(dword) mul16u::mb#1 mb zp ZP_DWORD:17 2002.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:17 429.2857142857143
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:25 2002.0
(dword) mul16u::res#2 res zp ZP_DWORD:25 443.7142857142857
(dword) mul16u::res#6 res zp ZP_DWORD:25 1001.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:25 4.0
(dword) mul16u::return#3 return zp ZP_DWORD:25 202.0
(void()) mul16u_compare()
(label) mul16u_compare::@1
(label) mul16u_compare::@10
(label) mul16u_compare::@11
(label) mul16u_compare::@13
(label) mul16u_compare::@14
(label) mul16u_compare::@15
(label) mul16u_compare::@17
(label) mul16u_compare::@18
(label) mul16u_compare::@2
(label) mul16u_compare::@22
(label) mul16u_compare::@3
(label) mul16u_compare::@4
(label) mul16u_compare::@5
(label) mul16u_compare::@6
(label) mul16u_compare::@8
(label) mul16u_compare::@return
(word) mul16u_compare::a
(word) mul16u_compare::a#1 a zp ZP_WORD:21 17.862068965517242
(word) mul16u_compare::a#2 a zp ZP_WORD:21 213.0
(word) mul16u_compare::a#6 a zp ZP_WORD:21 11.0
(word) mul16u_compare::b
(word) mul16u_compare::b#1 b zp ZP_WORD:23 17.862068965517242
(word) mul16u_compare::b#2 b zp ZP_WORD:23 106.5
(word) mul16u_compare::b#6 b zp ZP_WORD:23 11.0
(byte) mul16u_compare::i
(byte) mul16u_compare::i#1 i zp ZP_BYTE:2 16.5
(byte) mul16u_compare::i#12 i zp ZP_BYTE:2 0.7586206896551724
(byte) mul16u_compare::j
(byte) mul16u_compare::j#1 reg byte y 151.5
(byte) mul16u_compare::j#10 reg byte y 8.08
(dword) mul16u_compare::mf
(dword) mul16u_compare::mf#0 mf zp ZP_DWORD:17 15.692307692307692
(dword) mul16u_compare::mn
(dword) mul16u_compare::mn#0 mn zp ZP_DWORD:25 12.0
(dword) mul16u_compare::ms
(dword) mul16u_compare::ms#0 ms zp ZP_DWORD:11 14.523809523809522
(byte) mul16u_compare::ok
(byte) mul16u_compare::ok#3 reg byte x 202.0
(byte) mul16u_compare::ok#4 reg byte x 33.666666666666664
(const string) mul16u_compare::str1 str1 = (string) "word multiply results match!@"
(void()) mul16u_error((word) mul16u_error::a , (word) mul16u_error::b , (dword) mul16u_error::ms , (dword) mul16u_error::mn , (dword) mul16u_error::mf)
(label) mul16u_error::@1
(label) mul16u_error::@10
(label) mul16u_error::@2
(label) mul16u_error::@3
(label) mul16u_error::@4
(label) mul16u_error::@5
(label) mul16u_error::@6
(label) mul16u_error::@7
(label) mul16u_error::@8
(label) mul16u_error::@9
(label) mul16u_error::@return
(word) mul16u_error::a
(word) mul16u_error::a#0 a zp ZP_WORD:3 0.5714285714285714
(word) mul16u_error::b
(word) mul16u_error::b#0 b zp ZP_WORD:23 0.4
(dword) mul16u_error::mf
(dword) mul16u_error::mf#0 mf zp ZP_DWORD:17 0.21052631578947367
(dword) mul16u_error::mn
(dword) mul16u_error::mn#0 mn zp ZP_DWORD:25 0.25
(dword) mul16u_error::ms
(dword) mul16u_error::ms#0 ms zp ZP_DWORD:11 0.3076923076923077
(const string) mul16u_error::str str = (string) "multiply mismatch @"
(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
(word~) mulf16s::$12 $12 zp ZP_WORD:9 4.0
(word~) mulf16s::$16 $16 zp ZP_WORD:9 4.0
(word~) mulf16s::$17 $17 zp ZP_WORD:9 4.0
(word~) mulf16s::$6 $6 zp ZP_WORD:9 4.0
(label) mulf16s::@1
(label) mulf16s::@2
(label) mulf16s::@3
(label) mulf16s::@4
(label) mulf16s::@6
(label) mulf16s::@return
(signed word) mulf16s::a
(signed word) mulf16s::a#0 a zp ZP_WORD:3 7.357142857142858
(signed word) mulf16s::b
(signed word) mulf16s::b#0 b zp ZP_WORD:5 9.363636363636363
(dword) mulf16s::m
(dword) mulf16s::m#0 m zp ZP_DWORD:17 2.0
(dword) mulf16s::m#1 m zp ZP_DWORD:17 4.0
(dword) mulf16s::m#2 m zp ZP_DWORD:17 4.0
(dword) mulf16s::m#4 m zp ZP_DWORD:17 6.0
(dword) mulf16s::m#5 m zp ZP_DWORD:17 2.5
(signed dword) mulf16s::return
(signed dword) mulf16s::return#0 return zp ZP_DWORD:17 34.33333333333333
(signed dword) mulf16s::return#2 return zp ZP_DWORD:17 202.0
(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
(label) mulf16u::@return
(word) mulf16u::a
(word) mulf16u::a#1 a zp ZP_WORD:21 101.0
(word) mulf16u::a#2 a zp ZP_WORD:21 105.0
(word~) mulf16u::a#4 a zp ZP_WORD:21 2.0
(word) mulf16u::b
(word) mulf16u::b#1 b zp ZP_WORD:23 202.0
(word) mulf16u::b#2 b zp ZP_WORD:23 52.5
(word~) mulf16u::b#4 b zp ZP_WORD:23 4.0
(word*) mulf16u::memA
(const word*) mulf16u::memA#0 memA = ((word*))(byte/word/signed word/dword/signed dword) $f8
(word*) mulf16u::memB
(const word*) mulf16u::memB#0 memB = ((word*))(byte/word/signed word/dword/signed dword) $fa
(dword*) mulf16u::memR
(const dword*) mulf16u::memR#0 memR = ((dword*))(byte/word/signed word/dword/signed dword) $fc
(dword) mulf16u::return
(dword) mulf16u::return#0 return zp ZP_DWORD:17 26.25
(dword) mulf16u::return#2 return zp ZP_DWORD:17 4.0
(dword) mulf16u::return#3 return zp ZP_DWORD:17 202.0
(void()) mulf_init()
(byte~) mulf_init::$2 reg byte a 22.0
(byte~) mulf_init::$5 reg byte a 22.0
(byte~) mulf_init::$6 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@12
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@8
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 reg byte x 2.357142857142857
(byte) mulf_init::c#2 reg byte x 22.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp ZP_BYTE:2 4.714285714285714
(byte) mulf_init::dir#3 dir zp ZP_BYTE:2 7.333333333333333
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp ZP_WORD:7 7.333333333333333
(word) mulf_init::sqr#2 sqr zp ZP_WORD:7 22.0
(word) mulf_init::sqr#3 sqr zp ZP_WORD:7 9.166666666666666
(word) mulf_init::sqr#4 sqr zp ZP_WORD:7 6.6000000000000005
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp ZP_WORD:5 5.5
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp ZP_WORD:5 3.0
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp ZP_WORD:3 16.5
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp ZP_WORD:3 2.5384615384615383
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp ZP_WORD:5 3.142857142857143
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp ZP_WORD:5 11.0
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp ZP_WORD:3 16.5
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp ZP_WORD:3 4.125
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 x_2 zp ZP_BYTE:2 11.0
(byte) mulf_init::x_2#2 x_2 zp ZP_BYTE:2 4.888888888888889
(byte) mulf_init::x_2#3 x_2 zp ZP_BYTE:2 8.25
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 5.5
(byte) mulf_init::x_255#2 reg byte x 11.0
(byte[$200]) mulf_sqr1_hi
(const byte[$200]) mulf_sqr1_hi#0 mulf_sqr1_hi = { fill( $200, 0) }
(byte[$200]) mulf_sqr1_lo
(const byte[$200]) mulf_sqr1_lo#0 mulf_sqr1_lo = { fill( $200, 0) }
(byte[$200]) mulf_sqr2_hi
(const byte[$200]) mulf_sqr2_hi#0 mulf_sqr2_hi = { fill( $200, 0) }
(byte[$200]) mulf_sqr2_lo
(const byte[$200]) mulf_sqr2_lo#0 mulf_sqr2_lo = { fill( $200, 0) }
(signed dword()) muls16s((signed word) muls16s::a , (signed word) muls16s::b)
(label) muls16s::@3
(label) muls16s::@4
(label) muls16s::@5
(label) muls16s::@6
(label) muls16s::@return
(signed word) muls16s::a
(signed word) muls16s::a#0 a zp ZP_WORD:3 175.58333333333334
(signed word) muls16s::b
(signed word) muls16s::b#0 b zp ZP_WORD:5 191.1818181818182
(signed word) muls16s::i
(signed word) muls16s::i#1 i zp ZP_WORD:9 1501.5
(signed word) muls16s::i#2 i zp ZP_WORD:9 1001.0
(signed word) muls16s::j
(signed word) muls16s::j#1 j zp ZP_WORD:9 1501.5
(signed word) muls16s::j#2 j zp ZP_WORD:9 1001.0
(signed dword) muls16s::m
(signed dword) muls16s::m#1 m zp ZP_DWORD:11 1001.0
(signed dword) muls16s::m#2 m zp ZP_DWORD:11 1001.0
(signed dword) muls16s::m#3 m zp ZP_DWORD:11 2002.0
(signed dword) muls16s::m#5 m zp ZP_DWORD:11 2002.0
(signed dword) muls16s::return
(signed dword) muls16s::return#0 return zp ZP_DWORD:11 701.0
(signed dword) muls16s::return#2 return zp ZP_DWORD:11 202.0
(dword()) muls16u((word) muls16u::a , (word) muls16u::b)
(label) muls16u::@1
(label) muls16u::@2
(label) muls16u::@return
(word) muls16u::a
(word) muls16u::a#0 a zp ZP_WORD:21 157.71428571428572
(word) muls16u::b
(word) muls16u::b#0 b zp ZP_WORD:23 183.66666666666669
(word) muls16u::i
(word) muls16u::i#1 i zp ZP_WORD:3 1501.5
(word) muls16u::i#2 i zp ZP_WORD:3 1001.0
(dword) muls16u::m
(dword) muls16u::m#1 m zp ZP_DWORD:11 1001.0
(dword) muls16u::m#3 m zp ZP_DWORD:11 2002.0
(dword) muls16u::return
(dword) muls16u::return#0 return zp ZP_DWORD:11 367.33333333333337
(dword) muls16u::return#2 return zp ZP_DWORD:11 202.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:15 101.0
(byte*) print_char_cursor#128 print_char_cursor zp ZP_WORD:15 3.2454545454545443
(byte*) print_char_cursor#129 print_char_cursor zp ZP_WORD:15 5.75
(byte*) print_char_cursor#130 print_char_cursor zp ZP_WORD:15 3.0
(byte*) print_char_cursor#132 print_char_cursor zp ZP_WORD:15 6.0
(byte*) print_char_cursor#133 print_char_cursor zp ZP_WORD:15 5.0
(byte*) print_char_cursor#134 print_char_cursor zp ZP_WORD:15 3.0
(byte*) print_char_cursor#136 print_char_cursor zp ZP_WORD:15 2.0
(byte*) print_char_cursor#139 print_char_cursor zp ZP_WORD:15 22.0
(byte*) print_char_cursor#143 print_char_cursor zp ZP_WORD:15 24.0
(byte*) print_char_cursor#148 print_char_cursor zp ZP_WORD:15 48.0
(byte*~) print_char_cursor#176 print_char_cursor zp ZP_WORD:15 4.0
(byte*~) print_char_cursor#185 print_char_cursor zp ZP_WORD:15 4.0
(byte*~) print_char_cursor#192 print_char_cursor zp ZP_WORD:15 4.0
(byte*) print_char_cursor#20 print_char_cursor zp ZP_WORD:15 0.7441860465116277
(byte*) print_char_cursor#84 print_char_cursor zp ZP_WORD:15 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(void()) print_dword((dword) print_dword::dw)
(label) print_dword::@1
(label) print_dword::@return
(dword) print_dword::dw
(dword) print_dword::dw#0 dw zp ZP_DWORD:11 4.0
(dword) print_dword::dw#1 dw zp ZP_DWORD:11 4.0
(dword) print_dword::dw#2 dw zp ZP_DWORD:11 4.0
(dword) print_dword::dw#3 dw zp ZP_DWORD:11 4.0
(dword) print_dword::dw#4 dw zp ZP_DWORD:11 3.9999999999999996
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:7 0.6025641025641025
(byte*) print_line_cursor#22 print_line_cursor zp ZP_WORD:7 24.0
(byte*) print_line_cursor#43 print_line_cursor zp ZP_WORD:7 10.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_sdword((signed dword) print_sdword::dw)
(label) print_sdword::@1
(label) print_sdword::@2
(label) print_sdword::@4
(label) print_sdword::@return
(signed dword) print_sdword::dw
(signed dword) print_sdword::dw#0 dw zp ZP_DWORD:11 4.0
(signed dword) print_sdword::dw#1 dw zp ZP_DWORD:11 4.0
(signed dword) print_sdword::dw#2 dw zp ZP_DWORD:11 4.0
(signed dword) print_sdword::dw#3 dw zp ZP_DWORD:11 4.0
(signed dword) print_sdword::dw#4 dw zp ZP_DWORD:11 3.0
(signed dword) print_sdword::dw#5 dw zp ZP_DWORD:11 6.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:9 202.0
(byte*) print_str::str#15 str zp ZP_WORD:9 101.5
(byte*) print_str::str#17 str zp ZP_WORD:9 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:3 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:3 4.0
(signed word) print_sword::w#2 w zp ZP_WORD:3 4.0
(signed word) print_sword::w#3 w zp ZP_WORD:3 2.5
(signed word) print_sword::w#4 w zp ZP_WORD:3 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:3 4.0
(word~) print_word::w#11 w zp ZP_WORD:3 4.0
(word) print_word::w#2 w zp ZP_WORD:3 4.0
(word) print_word::w#3 w zp ZP_WORD:3 4.0
(word) print_word::w#4 w zp ZP_WORD:3 4.0
(word) print_word::w#5 w zp ZP_WORD:3 4.666666666666666
(const string) str str = (string) ".@"
(const string) str1 str1 = (string) "*@"
(const string) str2 str2 = (string) " slow:@"
(const string) str3 str3 = (string) " / normal:@"
(const string) str4 str4 = (string) " / fast:@"

zp ZP_BYTE:2 [ mul16s_compare::i#12 mul16s_compare::i#1 mul16u_compare::i#12 mul16u_compare::i#1 mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 mulf_init::dir#2 mulf_init::dir#3 ]
zp ZP_WORD:3 [ mul16s_compare::a#2 mul16s_compare::a#6 mul16s_compare::a#1 muls16s::a#0 mul16s::a#0 mulf16s::a#0 mul16s_error::a#0 print_word::w#5 print_word::w#3 print_word::w#4 print_word::w#1 print_word::w#2 print_word::w#11 print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 mul16u_error::a#0 muls16u::i#2 muls16u::i#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:5 [ mul16s_compare::b#2 mul16s_compare::b#6 mul16s_compare::b#1 muls16s::b#0 mul16s::b#0 mulf16s::b#0 mul16s_error::b#0 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
reg byte y [ mul16s_compare::j#10 mul16s_compare::j#1 ]
reg byte x [ mul16s_compare::ok#3 mul16s_compare::ok#4 ]
zp ZP_WORD:7 [ print_line_cursor#22 print_line_cursor#43 print_line_cursor#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp ZP_WORD:9 [ print_str::str#15 print_str::str#17 print_str::str#0 mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 muls16s::j#2 muls16s::j#1 muls16s::i#2 muls16s::i#1 mulf16s::$6 mulf16s::$16 mulf16s::$12 mulf16s::$17 mul16s::$6 mul16s::$16 mul16s::$12 mul16s::$17 ]
zp ZP_DWORD:11 [ print_sdword::dw#5 print_sdword::dw#4 print_sdword::dw#1 print_sdword::dw#2 print_sdword::dw#3 print_sdword::dw#0 print_dword::dw#4 print_dword::dw#1 print_dword::dw#2 print_dword::dw#3 print_dword::dw#0 mul16s_error::ms#0 mul16s_compare::ms#0 mul16u_compare::ms#0 mul16u_error::ms#0 muls16s::m#5 muls16s::return#0 muls16s::m#3 muls16s::m#1 muls16s::m#2 muls16s::return#2 muls16u::return#0 muls16u::m#3 muls16u::m#1 muls16u::return#2 ]
reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp ZP_WORD:15 [ print_char_cursor#84 print_char_cursor#136 print_char_cursor#132 print_char_cursor#133 print_char_cursor#134 print_char_cursor#148 print_char_cursor#129 print_char_cursor#143 print_char_cursor#176 print_char_cursor#128 print_char_cursor#20 print_char_cursor#185 print_char_cursor#139 print_char_cursor#192 print_char_cursor#1 print_char_cursor#130 ]
zp ZP_DWORD:17 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 mul16s_compare::mf#0 mulf16u::return#0 mulf16u::return#3 mul16s_error::mf#0 mul16u_compare::mf#0 mul16u_error::mf#0 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp ZP_WORD:21 [ mulf16u::a#2 mulf16u::a#1 mulf16u::a#4 mul16u_compare::a#2 mul16u_compare::a#6 mul16u_compare::a#1 muls16u::a#0 ]
zp ZP_WORD:23 [ mulf16u::b#2 mulf16u::b#1 mulf16u::b#4 mul16u_compare::b#2 mul16u_compare::b#6 mul16u_compare::b#1 mul16u::b#2 mul16u::b#3 mul16u::b#1 muls16u::b#0 mul16u_error::b#0 ]
zp ZP_DWORD:25 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 mul16s_compare::mn#0 mul16s_error::mn#0 mul16u_compare::mn#0 mul16u_error::mn#0 ]
reg byte y [ mul16u_compare::j#10 mul16u_compare::j#1 ]
reg byte x [ mul16u_compare::ok#3 mul16u_compare::ok#4 ]
reg byte x [ mulf_init::c#2 mulf_init::c#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ mul16u::$1 ]
reg byte a [ mulf_init::$2 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ mulf_init::$6 ]


FINAL ASSEMBLER
Score: 444919

//SEG0 File Comments
// Test the fast multiplication library
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BGCOL = $d021
  .label print_char_cursor = $f
  .label print_line_cursor = 7
//SEG3 @begin
//SEG4 [1] phi from @begin to @40 [phi:@begin->@40]
//SEG5 @40
//SEG6 [2] call main 
//SEG7 [3] phi from @40 to @end [phi:@40->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [4] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG11 [5] call print_cls 
  //SEG12 [304] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 main::@1
  //SEG15 [7] call mulf_init 
  //SEG16 [275] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
    jsr mulf_init
  //SEG17 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG18 main::@2
  //SEG19 [9] call mul16u_compare 
  //SEG20 [199] phi from main::@2 to mul16u_compare [phi:main::@2->mul16u_compare]
    jsr mul16u_compare
  //SEG21 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG22 main::@3
  //SEG23 [11] call mul16s_compare 
    jsr mul16s_compare
  //SEG24 main::@return
  //SEG25 [12] return 
    rts
}
//SEG26 mul16s_compare
// Perform many possible word multiplications (slow and fast) and compare the results
mul16s_compare: {
    .label a = 3
    .label b = 5
    .label ms = $b
    .label mn = $19
    .label mf = $11
    .label i = 2
  //SEG27 [13] (byte*~) print_char_cursor#176 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG28 [14] phi from mul16s_compare to mul16s_compare::@1 [phi:mul16s_compare->mul16s_compare::@1]
  //SEG29 [14] phi (byte) mul16s_compare::i#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare->mul16s_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG30 [14] phi (signed word) mul16s_compare::b#6 = -(word/signed word/dword/signed dword) $7fff [phi:mul16s_compare->mul16s_compare::@1#1] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta b
    lda #>-$7fff
    sta b+1
  //SEG31 [14] phi (signed word) mul16s_compare::a#6 = -(word/signed word/dword/signed dword) $7fff [phi:mul16s_compare->mul16s_compare::@1#2] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta a
    lda #>-$7fff
    sta a+1
  //SEG32 [14] phi (byte*) print_char_cursor#143 = (byte*~) print_char_cursor#176 [phi:mul16s_compare->mul16s_compare::@1#3] -- register_copy 
  //SEG33 [14] phi from mul16s_compare::@10 to mul16s_compare::@1 [phi:mul16s_compare::@10->mul16s_compare::@1]
  //SEG34 [14] phi (byte) mul16s_compare::i#12 = (byte) mul16s_compare::i#1 [phi:mul16s_compare::@10->mul16s_compare::@1#0] -- register_copy 
  //SEG35 [14] phi (signed word) mul16s_compare::b#6 = (signed word) mul16s_compare::b#1 [phi:mul16s_compare::@10->mul16s_compare::@1#1] -- register_copy 
  //SEG36 [14] phi (signed word) mul16s_compare::a#6 = (signed word) mul16s_compare::a#1 [phi:mul16s_compare::@10->mul16s_compare::@1#2] -- register_copy 
  //SEG37 [14] phi (byte*) print_char_cursor#143 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@10->mul16s_compare::@1#3] -- register_copy 
  //SEG38 mul16s_compare::@1
  b1:
  //SEG39 [15] call print_str 
  //SEG40 [64] phi from mul16s_compare::@1 to print_str [phi:mul16s_compare::@1->print_str]
  //SEG41 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#143 [phi:mul16s_compare::@1->print_str#0] -- register_copy 
  //SEG42 [64] phi (byte*) print_str::str#17 = (const string) str [phi:mul16s_compare::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG43 [16] phi from mul16s_compare::@1 to mul16s_compare::@2 [phi:mul16s_compare::@1->mul16s_compare::@2]
  //SEG44 [16] phi (byte) mul16s_compare::j#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@1->mul16s_compare::@2#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG45 [16] phi (signed word) mul16s_compare::b#2 = (signed word) mul16s_compare::b#6 [phi:mul16s_compare::@1->mul16s_compare::@2#1] -- register_copy 
  //SEG46 [16] phi (signed word) mul16s_compare::a#2 = (signed word) mul16s_compare::a#6 [phi:mul16s_compare::@1->mul16s_compare::@2#2] -- register_copy 
  //SEG47 [16] phi from mul16s_compare::@5 to mul16s_compare::@2 [phi:mul16s_compare::@5->mul16s_compare::@2]
  //SEG48 [16] phi (byte) mul16s_compare::j#10 = (byte) mul16s_compare::j#1 [phi:mul16s_compare::@5->mul16s_compare::@2#0] -- register_copy 
  //SEG49 [16] phi (signed word) mul16s_compare::b#2 = (signed word) mul16s_compare::b#1 [phi:mul16s_compare::@5->mul16s_compare::@2#1] -- register_copy 
  //SEG50 [16] phi (signed word) mul16s_compare::a#2 = (signed word) mul16s_compare::a#1 [phi:mul16s_compare::@5->mul16s_compare::@2#2] -- register_copy 
  //SEG51 mul16s_compare::@2
  b2:
  //SEG52 [17] (signed word) mul16s_compare::a#1 ← (signed word) mul16s_compare::a#2 + (word/signed word/dword/signed dword) $d2b -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda a
    adc #<$d2b
    sta a
    lda a+1
    adc #>$d2b
    sta a+1
  //SEG53 [18] (signed word) mul16s_compare::b#1 ← (signed word) mul16s_compare::b#2 + (word/signed word/dword/signed dword) $ffd -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda b
    adc #<$ffd
    sta b
    lda b+1
    adc #>$ffd
    sta b+1
  //SEG54 [19] (signed word) muls16s::a#0 ← (signed word) mul16s_compare::a#1
  //SEG55 [20] (signed word) muls16s::b#0 ← (signed word) mul16s_compare::b#1
  //SEG56 [21] call muls16s 
    jsr muls16s
  //SEG57 [22] (signed dword) muls16s::return#2 ← (signed dword) muls16s::return#0
  //SEG58 mul16s_compare::@13
  //SEG59 [23] (signed dword) mul16s_compare::ms#0 ← (signed dword) muls16s::return#2
  //SEG60 [24] (signed word) mul16s::a#0 ← (signed word) mul16s_compare::a#1
  //SEG61 [25] (signed word) mul16s::b#0 ← (signed word) mul16s_compare::b#1
  //SEG62 [26] call mul16s 
    jsr mul16s
  //SEG63 [27] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  //SEG64 mul16s_compare::@14
  //SEG65 [28] (signed dword) mul16s_compare::mn#0 ← (signed dword) mul16s::return#2
  //SEG66 [29] (signed word) mulf16s::a#0 ← (signed word) mul16s_compare::a#1
  //SEG67 [30] (signed word) mulf16s::b#0 ← (signed word) mul16s_compare::b#1
  //SEG68 [31] call mulf16s 
    jsr mulf16s
  //SEG69 [32] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0
  //SEG70 mul16s_compare::@15
  //SEG71 [33] (signed dword) mul16s_compare::mf#0 ← (signed dword) mulf16s::return#2
  //SEG72 [34] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mf#0) goto mul16s_compare::@3 -- vdsz1_eq_vdsz2_then_la1 
    lda ms
    cmp mf
    bne !+
    lda ms+1
    cmp mf+1
    bne !+
    lda ms+2
    cmp mf+2
    bne !+
    lda ms+3
    cmp mf+3
    beq b6
  !:
  //SEG73 [35] phi from mul16s_compare::@15 to mul16s_compare::@6 [phi:mul16s_compare::@15->mul16s_compare::@6]
  //SEG74 mul16s_compare::@6
  //SEG75 [36] phi from mul16s_compare::@6 to mul16s_compare::@3 [phi:mul16s_compare::@6->mul16s_compare::@3]
  //SEG76 [36] phi (byte) mul16s_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@6->mul16s_compare::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG77 [36] phi from mul16s_compare::@15 to mul16s_compare::@3 [phi:mul16s_compare::@15->mul16s_compare::@3]
  b6:
  //SEG78 [36] phi (byte) mul16s_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mul16s_compare::@15->mul16s_compare::@3#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG79 mul16s_compare::@3
  b3:
  //SEG80 [37] if((signed dword) mul16s_compare::ms#0==(signed dword) mul16s_compare::mn#0) goto mul16s_compare::@22 -- vdsz1_eq_vdsz2_then_la1 
    lda ms
    cmp mn
    bne !+
    lda ms+1
    cmp mn+1
    bne !+
    lda ms+2
    cmp mn+2
    bne !+
    lda ms+3
    cmp mn+3
    beq b4
  !:
  //SEG81 [38] phi from mul16s_compare::@3 to mul16s_compare::@4 [phi:mul16s_compare::@3->mul16s_compare::@4]
  //SEG82 [38] phi (byte) mul16s_compare::ok#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16s_compare::@3->mul16s_compare::@4#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG83 mul16s_compare::@4
  b4:
  //SEG84 [39] if((byte) mul16s_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s_compare::@5 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b5
  //SEG85 mul16s_compare::@8
  //SEG86 [40] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG87 [41] (signed word) mul16s_error::a#0 ← (signed word) mul16s_compare::a#1
  //SEG88 [42] (signed word) mul16s_error::b#0 ← (signed word) mul16s_compare::b#1
  //SEG89 [43] (signed dword) mul16s_error::ms#0 ← (signed dword) mul16s_compare::ms#0
  //SEG90 [44] (signed dword) mul16s_error::mn#0 ← (signed dword) mul16s_compare::mn#0
  //SEG91 [45] (signed dword) mul16s_error::mf#0 ← (signed dword) mul16s_compare::mf#0
  //SEG92 [46] call mul16s_error 
  //SEG93 [71] phi from mul16s_compare::@8 to mul16s_error [phi:mul16s_compare::@8->mul16s_error]
    jsr mul16s_error
  //SEG94 mul16s_compare::@return
  breturn:
  //SEG95 [47] return 
    rts
  //SEG96 mul16s_compare::@5
  b5:
  //SEG97 [48] (byte) mul16s_compare::j#1 ← ++ (byte) mul16s_compare::j#10 -- vbuyy=_inc_vbuyy 
    iny
  //SEG98 [49] if((byte) mul16s_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$10
    bne b2
  //SEG99 mul16s_compare::@10
  //SEG100 [50] (byte) mul16s_compare::i#1 ← ++ (byte) mul16s_compare::i#12 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG101 [51] if((byte) mul16s_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16s_compare::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    beq !b1+
    jmp b1
  !b1:
  //SEG102 [52] phi from mul16s_compare::@10 to mul16s_compare::@11 [phi:mul16s_compare::@10->mul16s_compare::@11]
  //SEG103 mul16s_compare::@11
  //SEG104 [53] call print_ln 
  //SEG105 [59] phi from mul16s_compare::@11 to print_ln [phi:mul16s_compare::@11->print_ln]
  //SEG106 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@11->print_ln#0] -- register_copy 
  //SEG107 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_compare::@11->print_ln#1] -- register_copy 
    jsr print_ln
  //SEG108 mul16s_compare::@17
  //SEG109 [54] (byte*~) print_char_cursor#185 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG110 [55] call print_str 
  //SEG111 [64] phi from mul16s_compare::@17 to print_str [phi:mul16s_compare::@17->print_str]
  //SEG112 [64] phi (byte*) print_char_cursor#148 = (byte*~) print_char_cursor#185 [phi:mul16s_compare::@17->print_str#0] -- register_copy 
  //SEG113 [64] phi (byte*) print_str::str#17 = (const string) mul16s_compare::str1 [phi:mul16s_compare::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG114 [56] phi from mul16s_compare::@17 to mul16s_compare::@18 [phi:mul16s_compare::@17->mul16s_compare::@18]
  //SEG115 mul16s_compare::@18
  //SEG116 [57] call print_ln 
  //SEG117 [59] phi from mul16s_compare::@18 to print_ln [phi:mul16s_compare::@18->print_ln]
  //SEG118 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16s_compare::@18->print_ln#0] -- register_copy 
  //SEG119 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_compare::@18->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG120 [58] phi from mul16s_compare::@3 to mul16s_compare::@22 [phi:mul16s_compare::@3->mul16s_compare::@22]
  //SEG121 mul16s_compare::@22
  //SEG122 [38] phi from mul16s_compare::@22 to mul16s_compare::@4 [phi:mul16s_compare::@22->mul16s_compare::@4]
  //SEG123 [38] phi (byte) mul16s_compare::ok#3 = (byte) mul16s_compare::ok#4 [phi:mul16s_compare::@22->mul16s_compare::@4#0] -- register_copy 
    str1: .text "signed word multiply results match!@"
}
//SEG124 print_ln
// Print a newline
print_ln: {
  //SEG125 [60] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG126 [60] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#43 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG127 print_ln::@1
  b1:
  //SEG128 [61] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#22 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG129 [62] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#129) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG130 print_ln::@return
  //SEG131 [63] return 
    rts
}
//SEG132 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(9) str)
print_str: {
    .label str = 9
  //SEG133 [65] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG134 [65] phi (byte*) print_char_cursor#128 = (byte*) print_char_cursor#148 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG135 [65] phi (byte*) print_str::str#15 = (byte*) print_str::str#17 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG136 print_str::@1
  b1:
  //SEG137 [66] if(*((byte*) print_str::str#15)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG138 print_str::@return
  //SEG139 [67] return 
    rts
  //SEG140 print_str::@2
  b2:
  //SEG141 [68] *((byte*) print_char_cursor#128) ← *((byte*) print_str::str#15) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG142 [69] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#128 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG143 [70] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#15 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG144 mul16s_error
// mul16s_error(signed word zeropage(3) a, signed word zeropage(5) b, signed dword zeropage($b) ms, signed dword zeropage($19) mn, signed dword zeropage($11) mf)
mul16s_error: {
    .label a = 3
    .label b = 5
    .label ms = $b
    .label mn = $19
    .label mf = $11
  //SEG145 [72] call print_str 
  //SEG146 [64] phi from mul16s_error to print_str [phi:mul16s_error->print_str]
  //SEG147 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#128 [phi:mul16s_error->print_str#0] -- register_copy 
  //SEG148 [64] phi (byte*) print_str::str#17 = (const string) mul16s_error::str [phi:mul16s_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG149 mul16s_error::@1
  //SEG150 [73] (signed word) print_sword::w#1 ← (signed word) mul16s_error::a#0
  //SEG151 [74] call print_sword 
  //SEG152 [127] phi from mul16s_error::@1 to print_sword [phi:mul16s_error::@1->print_sword]
  //SEG153 [127] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:mul16s_error::@1->print_sword#0] -- register_copy 
    jsr print_sword
  //SEG154 [75] phi from mul16s_error::@1 to mul16s_error::@2 [phi:mul16s_error::@1->mul16s_error::@2]
  //SEG155 mul16s_error::@2
  //SEG156 [76] call print_str 
  //SEG157 [64] phi from mul16s_error::@2 to print_str [phi:mul16s_error::@2->print_str]
  //SEG158 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@2->print_str#0] -- register_copy 
  //SEG159 [64] phi (byte*) print_str::str#17 = (const string) str1 [phi:mul16s_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG160 mul16s_error::@3
  //SEG161 [77] (signed word) print_sword::w#2 ← (signed word) mul16s_error::b#0 -- vwsz1=vwsz2 
    lda b
    sta print_sword.w
    lda b+1
    sta print_sword.w+1
  //SEG162 [78] call print_sword 
  //SEG163 [127] phi from mul16s_error::@3 to print_sword [phi:mul16s_error::@3->print_sword]
  //SEG164 [127] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:mul16s_error::@3->print_sword#0] -- register_copy 
    jsr print_sword
  //SEG165 [79] phi from mul16s_error::@3 to mul16s_error::@4 [phi:mul16s_error::@3->mul16s_error::@4]
  //SEG166 mul16s_error::@4
  //SEG167 [80] call print_str 
  //SEG168 [64] phi from mul16s_error::@4 to print_str [phi:mul16s_error::@4->print_str]
  //SEG169 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@4->print_str#0] -- register_copy 
  //SEG170 [64] phi (byte*) print_str::str#17 = (const string) str2 [phi:mul16s_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG171 mul16s_error::@5
  //SEG172 [81] (signed dword) print_sdword::dw#1 ← (signed dword) mul16s_error::ms#0
  //SEG173 [82] call print_sdword 
  //SEG174 [94] phi from mul16s_error::@5 to print_sdword [phi:mul16s_error::@5->print_sdword]
  //SEG175 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#1 [phi:mul16s_error::@5->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG176 [83] phi from mul16s_error::@5 to mul16s_error::@6 [phi:mul16s_error::@5->mul16s_error::@6]
  //SEG177 mul16s_error::@6
  //SEG178 [84] call print_str 
  //SEG179 [64] phi from mul16s_error::@6 to print_str [phi:mul16s_error::@6->print_str]
  //SEG180 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@6->print_str#0] -- register_copy 
  //SEG181 [64] phi (byte*) print_str::str#17 = (const string) str3 [phi:mul16s_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG182 mul16s_error::@7
  //SEG183 [85] (signed dword) print_sdword::dw#2 ← (signed dword) mul16s_error::mn#0 -- vdsz1=vdsz2 
    lda mn
    sta print_sdword.dw
    lda mn+1
    sta print_sdword.dw+1
    lda mn+2
    sta print_sdword.dw+2
    lda mn+3
    sta print_sdword.dw+3
  //SEG184 [86] call print_sdword 
  //SEG185 [94] phi from mul16s_error::@7 to print_sdword [phi:mul16s_error::@7->print_sdword]
  //SEG186 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#2 [phi:mul16s_error::@7->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG187 [87] phi from mul16s_error::@7 to mul16s_error::@8 [phi:mul16s_error::@7->mul16s_error::@8]
  //SEG188 mul16s_error::@8
  //SEG189 [88] call print_str 
  //SEG190 [64] phi from mul16s_error::@8 to print_str [phi:mul16s_error::@8->print_str]
  //SEG191 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16s_error::@8->print_str#0] -- register_copy 
  //SEG192 [64] phi (byte*) print_str::str#17 = (const string) str4 [phi:mul16s_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG193 mul16s_error::@9
  //SEG194 [89] (signed dword) print_sdword::dw#3 ← (signed dword) mul16s_error::mf#0 -- vdsz1=vdsz2 
    lda mf
    sta print_sdword.dw
    lda mf+1
    sta print_sdword.dw+1
    lda mf+2
    sta print_sdword.dw+2
    lda mf+3
    sta print_sdword.dw+3
  //SEG195 [90] call print_sdword 
  //SEG196 [94] phi from mul16s_error::@9 to print_sdword [phi:mul16s_error::@9->print_sdword]
  //SEG197 [94] phi (signed dword) print_sdword::dw#4 = (signed dword) print_sdword::dw#3 [phi:mul16s_error::@9->print_sdword#0] -- register_copy 
    jsr print_sdword
  //SEG198 [91] phi from mul16s_error::@9 to mul16s_error::@10 [phi:mul16s_error::@9->mul16s_error::@10]
  //SEG199 mul16s_error::@10
  //SEG200 [92] call print_ln 
  //SEG201 [59] phi from mul16s_error::@10 to print_ln [phi:mul16s_error::@10->print_ln]
  //SEG202 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#20 [phi:mul16s_error::@10->print_ln#0] -- register_copy 
  //SEG203 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16s_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
  //SEG204 mul16s_error::@return
  //SEG205 [93] return 
    rts
    str: .text "signed word multiply mismatch @"
}
//SEG206 print_sdword
// Print a signed dword as HEX
// print_sdword(signed dword zeropage($b) dw)
print_sdword: {
    .label dw = $b
  //SEG207 [95] if((signed dword) print_sdword::dw#4>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sdword::@1 -- vdsz1_ge_0_then_la1 
    lda dw+3
    bpl b1
  //SEG208 [96] phi from print_sdword to print_sdword::@2 [phi:print_sdword->print_sdword::@2]
  //SEG209 print_sdword::@2
  //SEG210 [97] call print_char 
  //SEG211 [123] phi from print_sdword::@2 to print_char [phi:print_sdword::@2->print_char]
  //SEG212 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#128 [phi:print_sdword::@2->print_char#0] -- register_copy 
  //SEG213 [123] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sdword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG214 print_sdword::@4
  //SEG215 [98] (signed dword) print_sdword::dw#0 ← - (signed dword) print_sdword::dw#4 -- vdsz1=_neg_vdsz1 
    sec
    lda dw
    eor #$ff
    adc #0
    sta dw
    lda dw+1
    eor #$ff
    adc #0
    sta dw+1
    lda dw+2
    eor #$ff
    adc #0
    sta dw+2
    lda dw+3
    eor #$ff
    adc #0
    sta dw+3
  //SEG216 [99] phi from print_sdword print_sdword::@4 to print_sdword::@1 [phi:print_sdword/print_sdword::@4->print_sdword::@1]
  //SEG217 [99] phi (byte*) print_char_cursor#134 = (byte*) print_char_cursor#128 [phi:print_sdword/print_sdword::@4->print_sdword::@1#0] -- register_copy 
  //SEG218 [99] phi (signed dword) print_sdword::dw#5 = (signed dword) print_sdword::dw#4 [phi:print_sdword/print_sdword::@4->print_sdword::@1#1] -- register_copy 
  //SEG219 print_sdword::@1
  b1:
  //SEG220 [100] (dword) print_dword::dw#0 ← ((dword)) (signed dword) print_sdword::dw#5 -- vduz1=_dword_vdsz1 
  //SEG221 [101] call print_dword 
  //SEG222 [103] phi from print_sdword::@1 to print_dword [phi:print_sdword::@1->print_dword]
  //SEG223 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#134 [phi:print_sdword::@1->print_dword#0] -- register_copy 
  //SEG224 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#0 [phi:print_sdword::@1->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG225 print_sdword::@return
  //SEG226 [102] return 
    rts
}
//SEG227 print_dword
// Print a dword as HEX
// print_dword(dword zeropage($b) dw)
print_dword: {
    .label dw = $b
  //SEG228 [104] (word) print_word::w#1 ← > (dword) print_dword::dw#4 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word.w
    lda dw+3
    sta print_word.w+1
  //SEG229 [105] call print_word 
  //SEG230 [109] phi from print_dword to print_word [phi:print_dword->print_word]
  //SEG231 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#133 [phi:print_dword->print_word#0] -- register_copy 
  //SEG232 [109] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
  //SEG233 print_dword::@1
  //SEG234 [106] (word) print_word::w#2 ← < (dword) print_dword::dw#4 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word.w
    lda dw+1
    sta print_word.w+1
  //SEG235 [107] call print_word 
  //SEG236 [109] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  //SEG237 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#20 [phi:print_dword::@1->print_word#0] -- register_copy 
  //SEG238 [109] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG239 print_dword::@return
  //SEG240 [108] return 
    rts
}
//SEG241 print_word
// Print a word as HEX
// print_word(word zeropage(3) w)
print_word: {
    .label w = 3
  //SEG242 [110] (byte) print_byte::b#0 ← > (word) print_word::w#5 -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
  //SEG243 [111] call print_byte 
  //SEG244 [115] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG245 [115] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG246 [115] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG247 print_word::@1
  //SEG248 [112] (byte) print_byte::b#1 ← < (word) print_word::w#5 -- vbuxx=_lo_vwuz1 
    lda w
    tax
  //SEG249 [113] call print_byte 
  //SEG250 [115] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG251 [115] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#20 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG252 [115] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG253 print_word::@return
  //SEG254 [114] return 
    rts
}
//SEG255 print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
  //SEG256 [116] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG257 [117] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG258 [118] call print_char 
  //SEG259 [123] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG260 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#136 [phi:print_byte->print_char#0] -- register_copy 
  //SEG261 [123] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG262 print_byte::@1
  //SEG263 [119] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG264 [120] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG265 [121] call print_char 
  //SEG266 [123] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG267 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#20 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG268 [123] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG269 print_byte::@return
  //SEG270 [122] return 
    rts
}
//SEG271 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG272 [124] *((byte*) print_char_cursor#84) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG273 [125] (byte*) print_char_cursor#20 ← ++ (byte*) print_char_cursor#84 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG274 print_char::@return
  //SEG275 [126] return 
    rts
}
//SEG276 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(3) w)
print_sword: {
    .label w = 3
  //SEG277 [128] if((signed word) print_sword::w#3>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG278 [129] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG279 print_sword::@2
  //SEG280 [130] call print_char 
  //SEG281 [123] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG282 [123] phi (byte*) print_char_cursor#84 = (byte*) print_char_cursor#128 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG283 [123] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG284 print_sword::@4
  //SEG285 [131] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG286 [132] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  //SEG287 [132] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#128 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG288 [132] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
  //SEG289 print_sword::@1
  b1:
  //SEG290 [133] (word~) print_word::w#11 ← (word)(signed word) print_sword::w#4
  //SEG291 [134] call print_word 
  //SEG292 [109] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  //SEG293 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#130 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG294 [109] phi (word) print_word::w#5 = (word~) print_word::w#11 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG295 print_sword::@return
  //SEG296 [135] return 
    rts
}
//SEG297 mulf16s
// Fast multiply two signed words to a signed double word result
// Fixes offsets introduced by using unsigned multiplication
// mulf16s(signed word zeropage(3) a, signed word zeropage(5) b)
mulf16s: {
    .label _6 = 9
    .label _12 = 9
    .label _16 = 9
    .label _17 = 9
    .label m = $11
    .label return = $11
    .label a = 3
    .label b = 5
  //SEG298 [136] (word~) mulf16u::a#4 ← (word)(signed word) mulf16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mulf16u.a
    lda a+1
    sta mulf16u.a+1
  //SEG299 [137] (word~) mulf16u::b#4 ← (word)(signed word) mulf16s::b#0 -- vwuz1=vwuz2 
    lda b
    sta mulf16u.b
    lda b+1
    sta mulf16u.b+1
  //SEG300 [138] call mulf16u 
  //SEG301 [153] phi from mulf16s to mulf16u [phi:mulf16s->mulf16u]
  //SEG302 [153] phi (word) mulf16u::b#2 = (word~) mulf16u::b#4 [phi:mulf16s->mulf16u#0] -- register_copy 
  //SEG303 [153] phi (word) mulf16u::a#2 = (word~) mulf16u::a#4 [phi:mulf16s->mulf16u#1] -- register_copy 
    jsr mulf16u
  //SEG304 [139] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0
  //SEG305 mulf16s::@6
  //SEG306 [140] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2
  //SEG307 [141] if((signed word) mulf16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1
  //SEG308 mulf16s::@3
  //SEG309 [142] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG310 [143] (word~) mulf16s::$16 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _16
    sec
    sbc b
    sta _16
    lda _16+1
    sbc b+1
    sta _16+1
  //SEG311 [144] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG312 [145] phi from mulf16s::@3 mulf16s::@6 to mulf16s::@1 [phi:mulf16s::@3/mulf16s::@6->mulf16s::@1]
  //SEG313 [145] phi (dword) mulf16s::m#5 = (dword) mulf16s::m#1 [phi:mulf16s::@3/mulf16s::@6->mulf16s::@1#0] -- register_copy 
  //SEG314 mulf16s::@1
  b1:
  //SEG315 [146] if((signed word) mulf16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf16s::@2 -- vwsz1_ge_0_then_la1 
    lda b+1
    bpl b2
  //SEG316 mulf16s::@4
  //SEG317 [147] (word~) mulf16s::$12 ← > (dword) mulf16s::m#5 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _12
    lda m+3
    sta _12+1
  //SEG318 [148] (word~) mulf16s::$17 ← (word~) mulf16s::$12 - (word)(signed word) mulf16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _17
    sec
    sbc a
    sta _17
    lda _17+1
    sbc a+1
    sta _17+1
  //SEG319 [149] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$17 -- vduz1=vduz1_sethi_vwuz2 
    lda _17
    sta m+2
    lda _17+1
    sta m+3
  //SEG320 [150] phi from mulf16s::@1 mulf16s::@4 to mulf16s::@2 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2]
  //SEG321 [150] phi (dword) mulf16s::m#4 = (dword) mulf16s::m#5 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2#0] -- register_copy 
  //SEG322 mulf16s::@2
  b2:
  //SEG323 [151] (signed dword) mulf16s::return#0 ← ((signed dword)) (dword) mulf16s::m#4 -- vdsz1=_sdword_vduz1 
  //SEG324 mulf16s::@return
  //SEG325 [152] return 
    rts
}
//SEG326 mulf16u
// Fast multiply two unsigned words to a double word result
// Done in assembler to utilize fast addition A+X
// mulf16u(word zeropage($15) a, word zeropage($17) b)
mulf16u: {
    .label memA = $f8
    .label memB = $fa
    .label memR = $fc
    .label return = $11
    .label a = $15
    .label b = $17
  //SEG327 [154] *((const word*) mulf16u::memA#0) ← (word) mulf16u::a#2 -- _deref_pwuc1=vwuz1 
    lda a
    sta memA
    lda a+1
    sta memA+1
  //SEG328 [155] *((const word*) mulf16u::memB#0) ← (word) mulf16u::b#2 -- _deref_pwuc1=vwuz1 
    lda b
    sta memB
    lda b+1
    sta memB+1
  //SEG329 asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
    lda memA
    sta sm1a+1
    sta sm3a+1
    sta sm5a+1
    sta sm7a+1
    eor #$ff
    sta sm2a+1
    sta sm4a+1
    sta sm6a+1
    sta sm8a+1
    lda memA+1
    sta sm1b+1
    sta sm3b+1
    sta sm5b+1
    sta sm7b+1
    eor #$ff
    sta sm2b+1
    sta sm4b+1
    sta sm6b+1
    sta sm8b+1
    ldx memB
    sec
  sm1a:
    lda mulf_sqr1_lo,x
  sm2a:
    sbc mulf_sqr2_lo,x
    sta memR+0
  sm3a:
    lda mulf_sqr1_hi,x
  sm4a:
    sbc mulf_sqr2_hi,x
    sta _AA+1
    sec
  sm1b:
    lda mulf_sqr1_lo,x
  sm2b:
    sbc mulf_sqr2_lo,x
    sta _cc+1
  sm3b:
    lda mulf_sqr1_hi,x
  sm4b:
    sbc mulf_sqr2_hi,x
    sta _CC+1
    ldx memB+1
    sec
  sm5a:
    lda mulf_sqr1_lo,x
  sm6a:
    sbc mulf_sqr2_lo,x
    sta _bb+1
  sm7a:
    lda mulf_sqr1_hi,x
  sm8a:
    sbc mulf_sqr2_hi,x
    sta _BB+1
    sec
  sm5b:
    lda mulf_sqr1_lo,x
  sm6b:
    sbc mulf_sqr2_lo,x
    sta _dd+1
  sm7b:
    lda mulf_sqr1_hi,x
  sm8b:
    sbc mulf_sqr2_hi,x
    sta memR+3
    clc
  _AA:
    lda #0
  _bb:
    adc #0
    sta memR+1
  _BB:
    lda #0
  _CC:
    adc #0
    sta memR+2
    bcc !+
    inc memR+3
    clc
  !:
  _cc:
    lda #0
    adc memR+1
    sta memR+1
  _dd:
    lda #0
    adc memR+2
    sta memR+2
    bcc !+
    inc memR+3
  !:
  //SEG330 [157] (dword) mulf16u::return#0 ← *((const dword*) mulf16u::memR#0) -- vduz1=_deref_pduc1 
    lda memR
    sta return
    lda memR+1
    sta return+1
    lda memR+2
    sta return+2
    lda memR+3
    sta return+3
  //SEG331 mulf16u::@return
  //SEG332 [158] return 
    rts
}
//SEG333 mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage(3) a, signed word zeropage(5) b)
mul16s: {
    .label _6 = 9
    .label _12 = 9
    .label _16 = 9
    .label _17 = 9
    .label m = $19
    .label return = $19
    .label a = 3
    .label b = 5
  //SEG334 [159] (word~) mul16u::b#3 ← (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2 
    lda b
    sta mul16u.b
    lda b+1
    sta mul16u.b+1
  //SEG335 [160] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG336 [161] call mul16u 
  //SEG337 [176] phi from mul16s to mul16u [phi:mul16s->mul16u]
  //SEG338 [176] phi (word) mul16u::a#6 = (word~) mul16u::a#8 [phi:mul16s->mul16u#0] -- register_copy 
  //SEG339 [176] phi (word) mul16u::b#2 = (word~) mul16u::b#3 [phi:mul16s->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG340 [162] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  //SEG341 mul16s::@6
  //SEG342 [163] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  //SEG343 [164] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1
  //SEG344 mul16s::@3
  //SEG345 [165] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG346 [166] (word~) mul16s::$16 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _16
    sec
    sbc b
    sta _16
    lda _16+1
    sbc b+1
    sta _16+1
  //SEG347 [167] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG348 [168] phi from mul16s::@3 mul16s::@6 to mul16s::@1 [phi:mul16s::@3/mul16s::@6->mul16s::@1]
  //SEG349 [168] phi (dword) mul16s::m#5 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@6->mul16s::@1#0] -- register_copy 
  //SEG350 mul16s::@1
  b1:
  //SEG351 [169] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda b+1
    bpl b2
  //SEG352 mul16s::@4
  //SEG353 [170] (word~) mul16s::$12 ← > (dword) mul16s::m#5 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _12
    lda m+3
    sta _12+1
  //SEG354 [171] (word~) mul16s::$17 ← (word~) mul16s::$12 - (word)(signed word) mul16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda _17
    sec
    sbc a
    sta _17
    lda _17+1
    sbc a+1
    sta _17+1
  //SEG355 [172] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17 -- vduz1=vduz1_sethi_vwuz2 
    lda _17
    sta m+2
    lda _17+1
    sta m+3
  //SEG356 [173] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  //SEG357 [173] phi (dword) mul16s::m#4 = (dword) mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
  //SEG358 mul16s::@2
  b2:
  //SEG359 [174] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 -- vdsz1=_sdword_vduz1 
  //SEG360 mul16s::@return
  //SEG361 [175] return 
    rts
}
//SEG362 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage(9) a, word zeropage($17) b)
mul16u: {
    .label mb = $11
    .label a = 9
    .label res = $19
    .label return = $19
    .label b = $17
  //SEG363 [177] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG364 [178] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  //SEG365 [178] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG366 [178] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    sta res
    sta res+1
    sta res+2
    sta res+3
  //SEG367 [178] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
  //SEG368 mul16u::@1
  b1:
  //SEG369 [179] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
  //SEG370 mul16u::@return
  //SEG371 [180] return 
    rts
  //SEG372 mul16u::@2
  b2:
  //SEG373 [181] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG374 [182] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG375 mul16u::@7
  //SEG376 [183] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG377 [184] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  //SEG378 [184] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
  //SEG379 mul16u::@4
  b4:
  //SEG380 [185] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG381 [186] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG382 [178] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  //SEG383 [178] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG384 [178] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG385 [178] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG386 muls16s
// Slow multiplication of signed words
// Perform a signed multiplication by repeated addition/subtraction
// muls16s(signed word zeropage(3) a, signed word zeropage(5) b)
muls16s: {
    .label m = $b
    .label j = 9
    .label return = $b
    .label i = 9
    .label a = 3
    .label b = 5
  //SEG387 [187] if((signed word) muls16s::a#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@5 -- vwsz1_lt_0_then_la1 
    lda a+1
    bmi b6
  //SEG388 muls16s::@6
  //SEG389 [188] if((signed word) muls16s::a#0<=(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16s::@4 -- vwsz1_le_0_then_la1 
    bmi b2
    bne !+
    lda a
    beq b2
  !:
  //SEG390 [189] phi from muls16s::@6 to muls16s::@3 [phi:muls16s::@6->muls16s::@3]
  //SEG391 [189] phi (signed word) muls16s::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@3#0] -- vwsz1=vbuc1 
    lda #<0
    sta j
    sta j+1
  //SEG392 [189] phi (signed dword) muls16s::m#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@3#1] -- vdsz1=vbuc1 
    sta m
    sta m+1
    lda #<0>>$10
    sta m+2
    lda #>0>>$10
    sta m+3
  //SEG393 [189] phi from muls16s::@3 to muls16s::@3 [phi:muls16s::@3->muls16s::@3]
  //SEG394 [189] phi (signed word) muls16s::j#2 = (signed word) muls16s::j#1 [phi:muls16s::@3->muls16s::@3#0] -- register_copy 
  //SEG395 [189] phi (signed dword) muls16s::m#3 = (signed dword) muls16s::m#1 [phi:muls16s::@3->muls16s::@3#1] -- register_copy 
  //SEG396 muls16s::@3
  b3:
  //SEG397 [190] (signed dword) muls16s::m#1 ← (signed dword) muls16s::m#3 + (signed word) muls16s::b#0 -- vdsz1=vdsz1_plus_vwsz2 
    lda b+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    lda m
    clc
    adc b
    sta m
    lda m+1
    adc b+1
    sta m+1
    lda m+2
    adc $ff
    sta m+2
    lda m+3
    adc $ff
    sta m+3
  //SEG398 [191] (signed word) muls16s::j#1 ← ++ (signed word) muls16s::j#2 -- vwsz1=_inc_vwsz1 
    inc j
    bne !+
    inc j+1
  !:
  //SEG399 [192] if((signed word) muls16s::j#1!=(signed word) muls16s::a#0) goto muls16s::@3 -- vwsz1_neq_vwsz2_then_la1 
    lda j+1
    cmp a+1
    bne b3
    lda j
    cmp a
    bne b3
  //SEG400 [193] phi from muls16s::@3 muls16s::@5 to muls16s::@4 [phi:muls16s::@3/muls16s::@5->muls16s::@4]
  //SEG401 [193] phi (signed dword) muls16s::return#0 = (signed dword) muls16s::m#1 [phi:muls16s::@3/muls16s::@5->muls16s::@4#0] -- register_copy 
    jmp b4
  //SEG402 [193] phi from muls16s::@6 to muls16s::@4 [phi:muls16s::@6->muls16s::@4]
  b2:
  //SEG403 [193] phi (signed dword) muls16s::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s::@6->muls16s::@4#0] -- vdsz1=vbuc1 
    lda #<0
    sta return
    sta return+1
    lda #<0>>$10
    sta return+2
    lda #>0>>$10
    sta return+3
  //SEG404 muls16s::@4
  b4:
  //SEG405 muls16s::@return
  //SEG406 [194] return 
    rts
  //SEG407 [195] phi from muls16s to muls16s::@5 [phi:muls16s->muls16s::@5]
  b6:
  //SEG408 [195] phi (signed word) muls16s::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s->muls16s::@5#0] -- vwsz1=vbuc1 
    lda #<0
    sta i
    sta i+1
  //SEG409 [195] phi (signed dword) muls16s::m#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16s->muls16s::@5#1] -- vdsz1=vbuc1 
    sta m
    sta m+1
    lda #<0>>$10
    sta m+2
    lda #>0>>$10
    sta m+3
  //SEG410 [195] phi from muls16s::@5 to muls16s::@5 [phi:muls16s::@5->muls16s::@5]
  //SEG411 [195] phi (signed word) muls16s::i#2 = (signed word) muls16s::i#1 [phi:muls16s::@5->muls16s::@5#0] -- register_copy 
  //SEG412 [195] phi (signed dword) muls16s::m#5 = (signed dword) muls16s::m#2 [phi:muls16s::@5->muls16s::@5#1] -- register_copy 
  //SEG413 muls16s::@5
  b5:
  //SEG414 [196] (signed dword) muls16s::m#2 ← (signed dword) muls16s::m#5 - (signed word) muls16s::b#0 -- vdsz1=vdsz1_minus_vwsz2 
    lda b+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    sec
    lda m
    sbc b
    sta m
    lda m+1
    sbc b+1
    sta m+1
    lda m+2
    sbc $ff
    sta m+2
    lda m+3
    sbc $ff
    sta m+3
  //SEG415 [197] (signed word) muls16s::i#1 ← -- (signed word) muls16s::i#2 -- vwsz1=_dec_vwsz1 
    lda i
    bne !+
    dec i+1
  !:
    dec i
  //SEG416 [198] if((signed word) muls16s::i#1!=(signed word) muls16s::a#0) goto muls16s::@5 -- vwsz1_neq_vwsz2_then_la1 
    lda i+1
    cmp a+1
    bne b5
    lda i
    cmp a
    bne b5
    jmp b4
}
//SEG417 mul16u_compare
// Perform many possible word multiplications (slow and fast) and compare the results
mul16u_compare: {
    .label a = $15
    .label b = $17
    .label ms = $b
    .label mn = $19
    .label mf = $11
    .label i = 2
  //SEG418 [200] phi from mul16u_compare to mul16u_compare::@1 [phi:mul16u_compare->mul16u_compare::@1]
  //SEG419 [200] phi (byte) mul16u_compare::i#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG420 [200] phi (word) mul16u_compare::b#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#1] -- vwuz1=vbuc1 
    sta b
    sta b+1
  //SEG421 [200] phi (word) mul16u_compare::a#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare->mul16u_compare::@1#2] -- vwuz1=vbuc1 
    sta a
    sta a+1
  //SEG422 [200] phi (byte*) print_char_cursor#139 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_compare->mul16u_compare::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG423 [200] phi from mul16u_compare::@10 to mul16u_compare::@1 [phi:mul16u_compare::@10->mul16u_compare::@1]
  //SEG424 [200] phi (byte) mul16u_compare::i#12 = (byte) mul16u_compare::i#1 [phi:mul16u_compare::@10->mul16u_compare::@1#0] -- register_copy 
  //SEG425 [200] phi (word) mul16u_compare::b#6 = (word) mul16u_compare::b#1 [phi:mul16u_compare::@10->mul16u_compare::@1#1] -- register_copy 
  //SEG426 [200] phi (word) mul16u_compare::a#6 = (word) mul16u_compare::a#1 [phi:mul16u_compare::@10->mul16u_compare::@1#2] -- register_copy 
  //SEG427 [200] phi (byte*) print_char_cursor#139 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@10->mul16u_compare::@1#3] -- register_copy 
  //SEG428 mul16u_compare::@1
  b1:
  //SEG429 [201] call print_str 
  //SEG430 [64] phi from mul16u_compare::@1 to print_str [phi:mul16u_compare::@1->print_str]
  //SEG431 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#139 [phi:mul16u_compare::@1->print_str#0] -- register_copy 
  //SEG432 [64] phi (byte*) print_str::str#17 = (const string) str [phi:mul16u_compare::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG433 [202] phi from mul16u_compare::@1 to mul16u_compare::@2 [phi:mul16u_compare::@1->mul16u_compare::@2]
  //SEG434 [202] phi (byte) mul16u_compare::j#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@1->mul16u_compare::@2#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG435 [202] phi (word) mul16u_compare::b#2 = (word) mul16u_compare::b#6 [phi:mul16u_compare::@1->mul16u_compare::@2#1] -- register_copy 
  //SEG436 [202] phi (word) mul16u_compare::a#2 = (word) mul16u_compare::a#6 [phi:mul16u_compare::@1->mul16u_compare::@2#2] -- register_copy 
  //SEG437 [202] phi from mul16u_compare::@5 to mul16u_compare::@2 [phi:mul16u_compare::@5->mul16u_compare::@2]
  //SEG438 [202] phi (byte) mul16u_compare::j#10 = (byte) mul16u_compare::j#1 [phi:mul16u_compare::@5->mul16u_compare::@2#0] -- register_copy 
  //SEG439 [202] phi (word) mul16u_compare::b#2 = (word) mul16u_compare::b#1 [phi:mul16u_compare::@5->mul16u_compare::@2#1] -- register_copy 
  //SEG440 [202] phi (word) mul16u_compare::a#2 = (word) mul16u_compare::a#1 [phi:mul16u_compare::@5->mul16u_compare::@2#2] -- register_copy 
  //SEG441 mul16u_compare::@2
  b2:
  //SEG442 [203] (word) mul16u_compare::a#1 ← (word) mul16u_compare::a#2 + (word/signed word/dword/signed dword) $d2b -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda a
    adc #<$d2b
    sta a
    lda a+1
    adc #>$d2b
    sta a+1
  //SEG443 [204] (word) mul16u_compare::b#1 ← (word) mul16u_compare::b#2 + (word/signed word/dword/signed dword) $ffd -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda b
    adc #<$ffd
    sta b
    lda b+1
    adc #>$ffd
    sta b+1
  //SEG444 [205] (word) muls16u::a#0 ← (word) mul16u_compare::a#1
  //SEG445 [206] (word) muls16u::b#0 ← (word) mul16u_compare::b#1
  //SEG446 [207] call muls16u 
    jsr muls16u
  //SEG447 [208] (dword) muls16u::return#2 ← (dword) muls16u::return#0
  //SEG448 mul16u_compare::@13
  //SEG449 [209] (dword) mul16u_compare::ms#0 ← (dword) muls16u::return#2
  //SEG450 [210] (word) mul16u::a#2 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG451 [211] (word) mul16u::b#1 ← (word) mul16u_compare::b#1
  //SEG452 [212] call mul16u 
  //SEG453 [176] phi from mul16u_compare::@13 to mul16u [phi:mul16u_compare::@13->mul16u]
  //SEG454 [176] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mul16u_compare::@13->mul16u#0] -- register_copy 
  //SEG455 [176] phi (word) mul16u::b#2 = (word) mul16u::b#1 [phi:mul16u_compare::@13->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG456 [213] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  //SEG457 mul16u_compare::@14
  //SEG458 [214] (dword) mul16u_compare::mn#0 ← (dword) mul16u::return#3
  //SEG459 [215] (word) mulf16u::a#1 ← (word) mul16u_compare::a#1
  //SEG460 [216] (word) mulf16u::b#1 ← (word) mul16u_compare::b#1
  //SEG461 [217] call mulf16u 
  //SEG462 [153] phi from mul16u_compare::@14 to mulf16u [phi:mul16u_compare::@14->mulf16u]
  //SEG463 [153] phi (word) mulf16u::b#2 = (word) mulf16u::b#1 [phi:mul16u_compare::@14->mulf16u#0] -- register_copy 
  //SEG464 [153] phi (word) mulf16u::a#2 = (word) mulf16u::a#1 [phi:mul16u_compare::@14->mulf16u#1] -- register_copy 
    jsr mulf16u
  //SEG465 [218] (dword) mulf16u::return#3 ← (dword) mulf16u::return#0
  //SEG466 mul16u_compare::@15
  //SEG467 [219] (dword) mul16u_compare::mf#0 ← (dword) mulf16u::return#3
  //SEG468 [220] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mf#0) goto mul16u_compare::@3 -- vduz1_eq_vduz2_then_la1 
    lda ms
    cmp mf
    bne !+
    lda ms+1
    cmp mf+1
    bne !+
    lda ms+2
    cmp mf+2
    bne !+
    lda ms+3
    cmp mf+3
    beq b6
  !:
  //SEG469 [221] phi from mul16u_compare::@15 to mul16u_compare::@6 [phi:mul16u_compare::@15->mul16u_compare::@6]
  //SEG470 mul16u_compare::@6
  //SEG471 [222] phi from mul16u_compare::@6 to mul16u_compare::@3 [phi:mul16u_compare::@6->mul16u_compare::@3]
  //SEG472 [222] phi (byte) mul16u_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@6->mul16u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG473 [222] phi from mul16u_compare::@15 to mul16u_compare::@3 [phi:mul16u_compare::@15->mul16u_compare::@3]
  b6:
  //SEG474 [222] phi (byte) mul16u_compare::ok#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mul16u_compare::@15->mul16u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG475 mul16u_compare::@3
  b3:
  //SEG476 [223] if((dword) mul16u_compare::ms#0==(dword) mul16u_compare::mn#0) goto mul16u_compare::@22 -- vduz1_eq_vduz2_then_la1 
    lda ms
    cmp mn
    bne !+
    lda ms+1
    cmp mn+1
    bne !+
    lda ms+2
    cmp mn+2
    bne !+
    lda ms+3
    cmp mn+3
    beq b4
  !:
  //SEG477 [224] phi from mul16u_compare::@3 to mul16u_compare::@4 [phi:mul16u_compare::@3->mul16u_compare::@4]
  //SEG478 [224] phi (byte) mul16u_compare::ok#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u_compare::@3->mul16u_compare::@4#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG479 mul16u_compare::@4
  b4:
  //SEG480 [225] if((byte) mul16u_compare::ok#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u_compare::@5 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b5
  //SEG481 mul16u_compare::@8
  //SEG482 [226] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG483 [227] (word) mul16u_error::a#0 ← (word) mul16u_compare::a#1 -- vwuz1=vwuz2 
    lda a
    sta mul16u_error.a
    lda a+1
    sta mul16u_error.a+1
  //SEG484 [228] (word) mul16u_error::b#0 ← (word) mul16u_compare::b#1
  //SEG485 [229] (dword) mul16u_error::ms#0 ← (dword) mul16u_compare::ms#0
  //SEG486 [230] (dword) mul16u_error::mn#0 ← (dword) mul16u_compare::mn#0
  //SEG487 [231] (dword) mul16u_error::mf#0 ← (dword) mul16u_compare::mf#0
  //SEG488 [232] call mul16u_error 
  //SEG489 [245] phi from mul16u_compare::@8 to mul16u_error [phi:mul16u_compare::@8->mul16u_error]
    jsr mul16u_error
  //SEG490 mul16u_compare::@return
  breturn:
  //SEG491 [233] return 
    rts
  //SEG492 mul16u_compare::@5
  b5:
  //SEG493 [234] (byte) mul16u_compare::j#1 ← ++ (byte) mul16u_compare::j#10 -- vbuyy=_inc_vbuyy 
    iny
  //SEG494 [235] if((byte) mul16u_compare::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$10
    bne b2
  //SEG495 mul16u_compare::@10
  //SEG496 [236] (byte) mul16u_compare::i#1 ← ++ (byte) mul16u_compare::i#12 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG497 [237] if((byte) mul16u_compare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto mul16u_compare::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    beq !b1+
    jmp b1
  !b1:
  //SEG498 [238] phi from mul16u_compare::@10 to mul16u_compare::@11 [phi:mul16u_compare::@10->mul16u_compare::@11]
  //SEG499 mul16u_compare::@11
  //SEG500 [239] call print_ln 
  //SEG501 [59] phi from mul16u_compare::@11 to print_ln [phi:mul16u_compare::@11->print_ln]
  //SEG502 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@11->print_ln#0] -- register_copy 
  //SEG503 [59] phi (byte*) print_line_cursor#43 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_compare::@11->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG504 mul16u_compare::@17
  //SEG505 [240] (byte*~) print_char_cursor#192 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG506 [241] call print_str 
  //SEG507 [64] phi from mul16u_compare::@17 to print_str [phi:mul16u_compare::@17->print_str]
  //SEG508 [64] phi (byte*) print_char_cursor#148 = (byte*~) print_char_cursor#192 [phi:mul16u_compare::@17->print_str#0] -- register_copy 
  //SEG509 [64] phi (byte*) print_str::str#17 = (const string) mul16u_compare::str1 [phi:mul16u_compare::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG510 [242] phi from mul16u_compare::@17 to mul16u_compare::@18 [phi:mul16u_compare::@17->mul16u_compare::@18]
  //SEG511 mul16u_compare::@18
  //SEG512 [243] call print_ln 
  //SEG513 [59] phi from mul16u_compare::@18 to print_ln [phi:mul16u_compare::@18->print_ln]
  //SEG514 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#128 [phi:mul16u_compare::@18->print_ln#0] -- register_copy 
  //SEG515 [59] phi (byte*) print_line_cursor#43 = (byte*) print_line_cursor#1 [phi:mul16u_compare::@18->print_ln#1] -- register_copy 
    jsr print_ln
    jmp breturn
  //SEG516 [244] phi from mul16u_compare::@3 to mul16u_compare::@22 [phi:mul16u_compare::@3->mul16u_compare::@22]
  //SEG517 mul16u_compare::@22
  //SEG518 [224] phi from mul16u_compare::@22 to mul16u_compare::@4 [phi:mul16u_compare::@22->mul16u_compare::@4]
  //SEG519 [224] phi (byte) mul16u_compare::ok#3 = (byte) mul16u_compare::ok#4 [phi:mul16u_compare::@22->mul16u_compare::@4#0] -- register_copy 
    str1: .text "word multiply results match!@"
}
//SEG520 mul16u_error
// mul16u_error(word zeropage(3) a, word zeropage($17) b, dword zeropage($b) ms, dword zeropage($19) mn, dword zeropage($11) mf)
mul16u_error: {
    .label a = 3
    .label b = $17
    .label ms = $b
    .label mn = $19
    .label mf = $11
  //SEG521 [246] call print_str 
  //SEG522 [64] phi from mul16u_error to print_str [phi:mul16u_error->print_str]
  //SEG523 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#128 [phi:mul16u_error->print_str#0] -- register_copy 
  //SEG524 [64] phi (byte*) print_str::str#17 = (const string) mul16u_error::str [phi:mul16u_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG525 mul16u_error::@1
  //SEG526 [247] (word) print_word::w#3 ← (word) mul16u_error::a#0
  //SEG527 [248] call print_word 
  //SEG528 [109] phi from mul16u_error::@1 to print_word [phi:mul16u_error::@1->print_word]
  //SEG529 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:mul16u_error::@1->print_word#0] -- register_copy 
  //SEG530 [109] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:mul16u_error::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG531 [249] phi from mul16u_error::@1 to mul16u_error::@2 [phi:mul16u_error::@1->mul16u_error::@2]
  //SEG532 mul16u_error::@2
  //SEG533 [250] call print_str 
  //SEG534 [64] phi from mul16u_error::@2 to print_str [phi:mul16u_error::@2->print_str]
  //SEG535 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@2->print_str#0] -- register_copy 
  //SEG536 [64] phi (byte*) print_str::str#17 = (const string) str1 [phi:mul16u_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG537 mul16u_error::@3
  //SEG538 [251] (word) print_word::w#4 ← (word) mul16u_error::b#0 -- vwuz1=vwuz2 
    lda b
    sta print_word.w
    lda b+1
    sta print_word.w+1
  //SEG539 [252] call print_word 
  //SEG540 [109] phi from mul16u_error::@3 to print_word [phi:mul16u_error::@3->print_word]
  //SEG541 [109] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:mul16u_error::@3->print_word#0] -- register_copy 
  //SEG542 [109] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:mul16u_error::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG543 [253] phi from mul16u_error::@3 to mul16u_error::@4 [phi:mul16u_error::@3->mul16u_error::@4]
  //SEG544 mul16u_error::@4
  //SEG545 [254] call print_str 
  //SEG546 [64] phi from mul16u_error::@4 to print_str [phi:mul16u_error::@4->print_str]
  //SEG547 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@4->print_str#0] -- register_copy 
  //SEG548 [64] phi (byte*) print_str::str#17 = (const string) str2 [phi:mul16u_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG549 mul16u_error::@5
  //SEG550 [255] (dword) print_dword::dw#1 ← (dword) mul16u_error::ms#0
  //SEG551 [256] call print_dword 
  //SEG552 [103] phi from mul16u_error::@5 to print_dword [phi:mul16u_error::@5->print_dword]
  //SEG553 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@5->print_dword#0] -- register_copy 
  //SEG554 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#1 [phi:mul16u_error::@5->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG555 [257] phi from mul16u_error::@5 to mul16u_error::@6 [phi:mul16u_error::@5->mul16u_error::@6]
  //SEG556 mul16u_error::@6
  //SEG557 [258] call print_str 
  //SEG558 [64] phi from mul16u_error::@6 to print_str [phi:mul16u_error::@6->print_str]
  //SEG559 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@6->print_str#0] -- register_copy 
  //SEG560 [64] phi (byte*) print_str::str#17 = (const string) str3 [phi:mul16u_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta print_str.str
    lda #>str3
    sta print_str.str+1
    jsr print_str
  //SEG561 mul16u_error::@7
  //SEG562 [259] (dword) print_dword::dw#2 ← (dword) mul16u_error::mn#0 -- vduz1=vduz2 
    lda mn
    sta print_dword.dw
    lda mn+1
    sta print_dword.dw+1
    lda mn+2
    sta print_dword.dw+2
    lda mn+3
    sta print_dword.dw+3
  //SEG563 [260] call print_dword 
  //SEG564 [103] phi from mul16u_error::@7 to print_dword [phi:mul16u_error::@7->print_dword]
  //SEG565 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@7->print_dword#0] -- register_copy 
  //SEG566 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#2 [phi:mul16u_error::@7->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG567 [261] phi from mul16u_error::@7 to mul16u_error::@8 [phi:mul16u_error::@7->mul16u_error::@8]
  //SEG568 mul16u_error::@8
  //SEG569 [262] call print_str 
  //SEG570 [64] phi from mul16u_error::@8 to print_str [phi:mul16u_error::@8->print_str]
  //SEG571 [64] phi (byte*) print_char_cursor#148 = (byte*) print_char_cursor#20 [phi:mul16u_error::@8->print_str#0] -- register_copy 
  //SEG572 [64] phi (byte*) print_str::str#17 = (const string) str4 [phi:mul16u_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta print_str.str
    lda #>str4
    sta print_str.str+1
    jsr print_str
  //SEG573 mul16u_error::@9
  //SEG574 [263] (dword) print_dword::dw#3 ← (dword) mul16u_error::mf#0 -- vduz1=vduz2 
    lda mf
    sta print_dword.dw
    lda mf+1
    sta print_dword.dw+1
    lda mf+2
    sta print_dword.dw+2
    lda mf+3
    sta print_dword.dw+3
  //SEG575 [264] call print_dword 
  //SEG576 [103] phi from mul16u_error::@9 to print_dword [phi:mul16u_error::@9->print_dword]
  //SEG577 [103] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#128 [phi:mul16u_error::@9->print_dword#0] -- register_copy 
  //SEG578 [103] phi (dword) print_dword::dw#4 = (dword) print_dword::dw#3 [phi:mul16u_error::@9->print_dword#1] -- register_copy 
    jsr print_dword
  //SEG579 [265] phi from mul16u_error::@9 to mul16u_error::@10 [phi:mul16u_error::@9->mul16u_error::@10]
  //SEG580 mul16u_error::@10
  //SEG581 [266] call print_ln 
  //SEG582 [59] phi from mul16u_error::@10 to print_ln [phi:mul16u_error::@10->print_ln]
  //SEG583 [59] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#20 [phi:mul16u_error::@10->print_ln#0] -- register_copy 
  //SEG584 [59] phi (byte*) print_line_cursor#43 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:mul16u_error::@10->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jsr print_ln
  //SEG585 mul16u_error::@return
  //SEG586 [267] return 
    rts
    str: .text "multiply mismatch @"
}
//SEG587 muls16u
// Slow multiplication of unsigned words
// Calculate an unsigned multiplication by repeated addition
// muls16u(word zeropage($15) a, word zeropage($17) b)
muls16u: {
    .label return = $b
    .label m = $b
    .label i = 3
    .label a = $15
    .label b = $17
  //SEG588 [268] if((word) muls16u::a#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto muls16u::@1 -- vwuz1_eq_0_then_la1 
    lda a
    bne !+
    lda a+1
    beq b3
  !:
  //SEG589 [269] phi from muls16u to muls16u::@2 [phi:muls16u->muls16u::@2]
  //SEG590 [269] phi (word) muls16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@2#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    sta i+1
  //SEG591 [269] phi (dword) muls16u::m#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@2#1] -- vduz1=vbuc1 
    sta m
    sta m+1
    sta m+2
    sta m+3
  //SEG592 [269] phi from muls16u::@2 to muls16u::@2 [phi:muls16u::@2->muls16u::@2]
  //SEG593 [269] phi (word) muls16u::i#2 = (word) muls16u::i#1 [phi:muls16u::@2->muls16u::@2#0] -- register_copy 
  //SEG594 [269] phi (dword) muls16u::m#3 = (dword) muls16u::m#1 [phi:muls16u::@2->muls16u::@2#1] -- register_copy 
  //SEG595 muls16u::@2
  b2:
  //SEG596 [270] (dword) muls16u::m#1 ← (dword) muls16u::m#3 + (word) muls16u::b#0 -- vduz1=vduz1_plus_vwuz2 
    lda m
    clc
    adc b
    sta m
    lda m+1
    adc b+1
    sta m+1
    lda m+2
    adc #0
    sta m+2
    lda m+3
    adc #0
    sta m+3
  //SEG597 [271] (word) muls16u::i#1 ← ++ (word) muls16u::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG598 [272] if((word) muls16u::i#1!=(word) muls16u::a#0) goto muls16u::@2 -- vwuz1_neq_vwuz2_then_la1 
    lda i+1
    cmp a+1
    bne b2
    lda i
    cmp a
    bne b2
  //SEG599 [273] phi from muls16u::@2 to muls16u::@1 [phi:muls16u::@2->muls16u::@1]
  //SEG600 [273] phi (dword) muls16u::return#0 = (dword) muls16u::m#1 [phi:muls16u::@2->muls16u::@1#0] -- register_copy 
    jmp b1
  //SEG601 [273] phi from muls16u to muls16u::@1 [phi:muls16u->muls16u::@1]
  b3:
  //SEG602 [273] phi (dword) muls16u::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:muls16u->muls16u::@1#0] -- vduz1=vbuc1 
    lda #0
    sta return
    sta return+1
    sta return+2
    sta return+3
  //SEG603 muls16u::@1
  b1:
  //SEG604 muls16u::@return
  //SEG605 [274] return 
    rts
}
//SEG606 mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label sqr1_hi = 5
    .label sqr = 7
    .label sqr1_lo = 3
    .label x_2 = 2
    .label sqr2_hi = 5
    .label sqr2_lo = 3
    .label dir = 2
  //SEG607 [276] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  //SEG608 [276] phi (byte) mulf_init::x_2#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG609 [276] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[$200]) mulf_sqr1_hi#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
  //SEG610 [276] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[$200]) mulf_sqr1_lo#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
  //SEG611 [276] phi (word) mulf_init::sqr#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    sta sqr+1
  //SEG612 [276] phi (byte) mulf_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuxx=vbuc1 
    tax
  //SEG613 [276] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  //SEG614 [276] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
  //SEG615 [276] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
  //SEG616 [276] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
  //SEG617 [276] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
  //SEG618 [276] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
  //SEG619 mulf_init::@1
  b1:
  //SEG620 [277] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG621 [278] (byte~) mulf_init::$2 ← (byte) mulf_init::c#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG622 [279] if((byte~) mulf_init::$2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
  //SEG623 mulf_init::@5
  //SEG624 [280] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG625 [281] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG626 [282] phi from mulf_init::@1 mulf_init::@5 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2]
  //SEG627 [282] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#0] -- register_copy 
  //SEG628 [282] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@5->mulf_init::@2#1] -- register_copy 
  //SEG629 mulf_init::@2
  b2:
  //SEG630 [283] (byte~) mulf_init::$5 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG631 [284] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
  //SEG632 [285] (byte~) mulf_init::$6 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG633 [286] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$6 -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
  //SEG634 [287] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
  //SEG635 [288] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    lda #0
    adc sqr+1
    sta sqr+1
  //SEG636 [289] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
  //SEG637 [290] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $200) goto mulf_init::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1
  //SEG638 [291] phi from mulf_init::@2 to mulf_init::@3 [phi:mulf_init::@2->mulf_init::@3]
  //SEG639 [291] phi (byte) mulf_init::dir#2 = (byte/word/signed word/dword/signed dword) $ff [phi:mulf_init::@2->mulf_init::@3#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
  //SEG640 [291] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[$200]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@3#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
  //SEG641 [291] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[$200]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@3#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
  //SEG642 [291] phi (byte) mulf_init::x_255#2 = ((byte))-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@2->mulf_init::@3#3] -- vbuxx=vbuc1 
    ldx #-1
  //SEG643 [291] phi from mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@4->mulf_init::@3]
  //SEG644 [291] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@4->mulf_init::@3#0] -- register_copy 
  //SEG645 [291] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@4->mulf_init::@3#1] -- register_copy 
  //SEG646 [291] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@4->mulf_init::@3#2] -- register_copy 
  //SEG647 [291] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@4->mulf_init::@3#3] -- register_copy 
  //SEG648 mulf_init::@3
  b3:
  //SEG649 [292] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
  //SEG650 [293] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
  //SEG651 [294] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
  //SEG652 [295] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc dir
    tax
  //SEG653 [296] if((byte) mulf_init::x_255#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mulf_init::@12 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b4
  //SEG654 [297] phi from mulf_init::@3 to mulf_init::@4 [phi:mulf_init::@3->mulf_init::@4]
  //SEG655 [297] phi (byte) mulf_init::dir#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init::@3->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
  //SEG656 mulf_init::@4
  b4:
  //SEG657 [298] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
  //SEG658 [299] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) goto mulf_init::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b3
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b3
  //SEG659 mulf_init::@8
  //SEG660 [300] *((const byte[$200]) mulf_sqr2_lo#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word/signed word/dword/signed dword) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
  //SEG661 [301] *((const byte[$200]) mulf_sqr2_hi#0+(word/signed word/dword/signed dword) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word/signed word/dword/signed dword) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
  //SEG662 mulf_init::@return
  //SEG663 [302] return 
    rts
  //SEG664 [303] phi from mulf_init::@3 to mulf_init::@12 [phi:mulf_init::@3->mulf_init::@12]
  //SEG665 mulf_init::@12
  //SEG666 [297] phi from mulf_init::@12 to mulf_init::@4 [phi:mulf_init::@12->mulf_init::@4]
  //SEG667 [297] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@12->mulf_init::@4#0] -- register_copy 
}
//SEG668 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 3
  //SEG669 [305] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG670 [305] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) $400 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG671 [305] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG672 [305] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG673 print_cls::@1
  b1:
  //SEG674 [306] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG675 [307] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG676 [308] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG677 print_cls::@return
  //SEG678 [309] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  str: .text ".@"
  str4: .text " / fast:@"
  str3: .text " / normal:@"
  str1: .text "*@"
  str2: .text " slow:@"

