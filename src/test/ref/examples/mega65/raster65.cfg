
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile byte) sin_idx ← (byte) 0
  [2] (volatile byte) scroll_soft ← (byte) 7
  [3] (volatile byte*) scroll_ptr ← (const byte*) SCROLL_TEXT
  [4] (volatile byte) greet_zoomx ← (byte) 0
  [5] (volatile byte) greet_idx ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

interrupt(HARDWARE_STACK)(void()) irq()
irq: scope:[irq]  from
  [9] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_RASLINE0) | (byte) $80
  [10] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [11] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) 0
  [12] (volatile byte) sin_idx ← ++ (volatile byte) sin_idx
  [13] (byte) irq::wobble_idx#0 ← (volatile byte) sin_idx
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@9
  [14] (byte) irq::wobble_idx#10 ← phi( irq/(byte) irq::wobble_idx#0 irq::@9/(byte) irq::wobble_idx#7 )
  [14] (byte) irq::line#10 ← phi( irq/(byte) 0 irq::@9/(byte) irq::line#1 )
  [15] if((byte) irq::line#10!=(const nomodify byte) RASTER_LINES) goto irq::@2
  to:irq::@3
irq::@3: scope:[irq]  from irq::@1
  [16] call *((const void()*) songPlay) 
  [17] (byte) irq::sin_col#0 ← (volatile byte) sin_idx
  to:irq::@16
irq::@16: scope:[irq]  from irq::@17 irq::@3
  [18] (byte) irq::sin_col#2 ← phi( irq::@17/(byte) irq::sin_col#1 irq::@3/(byte) irq::sin_col#0 )
  [18] (byte) irq::i#2 ← phi( irq::@17/(byte) irq::i#1 irq::@3/(byte) 0 )
  [19] if((byte) irq::i#2<(byte) $28) goto irq::@17
  to:irq::@18
irq::@18: scope:[irq]  from irq::@16 irq::@19
  [20] (byte) irq::l#2 ← phi( irq::@16/(byte) 0 irq::@19/(byte) irq::l#1 )
  [21] if((byte) irq::l#2!=(const nomodify byte) RASTER_LINES) goto irq::@19
  to:irq::@20
irq::@20: scope:[irq]  from irq::@18
  [22] (byte) irq::sin_bar#0 ← (volatile byte) sin_idx
  to:irq::@21
irq::@21: scope:[irq]  from irq::@20 irq::@27
  [23] (byte) irq::sin_bar#2 ← phi( irq::@20/(byte) irq::sin_bar#0 irq::@27/(byte) irq::sin_bar#1 )
  [23] (byte) irq::barcnt#2 ← phi( irq::@20/(byte) 0 irq::@27/(byte) irq::barcnt#1 )
  [24] if((byte) irq::barcnt#2<(byte) $10) goto irq::@22
  to:irq::@28
irq::@28: scope:[irq]  from irq::@21 irq::@29
  [25] (byte) irq::i3#2 ← phi( irq::@21/(byte) 0 irq::@29/(byte) irq::i3#1 )
  [26] if((byte) irq::i3#2<(byte) $13) goto irq::@29
  to:irq::@30
irq::@30: scope:[irq]  from irq::@28
  [27] (byte) irq::greet_offset#0 ← (volatile byte) greet_idx << (byte) 4
  to:irq::@31
irq::@31: scope:[irq]  from irq::@30 irq::@32
  [28] (byte) irq::greet_offset#2 ← phi( irq::@30/(byte) irq::greet_offset#0 irq::@32/(byte) irq::greet_offset#1 )
  [28] (byte) irq::i4#2 ← phi( irq::@30/(byte) 0 irq::@32/(byte) irq::i4#1 )
  [29] if((byte) irq::i4#2<(byte) $10) goto irq::@32
  to:irq::@33
irq::@33: scope:[irq]  from irq::@31
  [30] (volatile byte) scroll_soft ← -- (volatile byte) scroll_soft
  [31] if((volatile byte) scroll_soft!=(byte) $ff) goto irq::@return
  to:irq::@34
irq::@34: scope:[irq]  from irq::@33
  [32] (volatile byte) scroll_soft ← (byte) 7
  to:irq::@35
irq::@35: scope:[irq]  from irq::@34 irq::@36
  [33] (byte) irq::i5#2 ← phi( irq::@34/(byte) 0 irq::@36/(byte) irq::i5#1 )
  [34] if((byte) irq::i5#2<(byte) $27) goto irq::@36
  to:irq::@37
irq::@37: scope:[irq]  from irq::@35
  [35] (byte) irq::nxt#0 ← *((volatile byte*) scroll_ptr)
  [36] (volatile byte*) scroll_ptr ← ++ (volatile byte*) scroll_ptr
  [37] if((byte) irq::nxt#0!=(byte) 0) goto irq::@39
  to:irq::@38
irq::@38: scope:[irq]  from irq::@37
  [38] (volatile byte*) scroll_ptr ← (const byte*) SCROLL_TEXT
  [39] (byte) irq::nxt#1 ← *((volatile byte*) scroll_ptr)
  to:irq::@39
irq::@39: scope:[irq]  from irq::@37 irq::@38
  [40] (byte) irq::nxt#2 ← phi( irq::@37/(byte) irq::nxt#0 irq::@38/(byte) irq::nxt#1 )
  [41] (byte~) irq::$33 ← (byte) irq::nxt#2 & (byte) $bf
  [42] *((const nomodify byte*) DEFAULT_SCREEN+(const nomodify byte) SCROLL_ROW*(byte) $28+(byte) $27) ← (byte~) irq::$33
  to:irq::@return
irq::@return: scope:[irq]  from irq::@33 irq::@39
  [43] return 
  to:@return
irq::@36: scope:[irq]  from irq::@35
  [44] *((const nomodify byte*) DEFAULT_SCREEN+(const nomodify byte) SCROLL_ROW*(byte) $28 + (byte) irq::i5#2) ← *((const nomodify byte*) DEFAULT_SCREEN+(const nomodify byte) SCROLL_ROW*(byte) $28+(byte) 1 + (byte) irq::i5#2)
  [45] (byte) irq::i5#1 ← ++ (byte) irq::i5#2
  to:irq::@35
irq::@32: scope:[irq]  from irq::@31
  [46] (byte~) irq::$29 ← *((const byte*) GREETING + (byte) irq::greet_offset#2) & (byte) $bf
  [47] *((const nomodify byte*) DEFAULT_SCREEN+(const nomodify byte) GREET_ROW*(byte) $28+(byte) $d + (byte) irq::i4#2) ← (byte~) irq::$29
  [48] (byte) irq::greet_offset#1 ← ++ (byte) irq::greet_offset#2
  [49] (byte) irq::i4#1 ← ++ (byte) irq::i4#2
  to:irq::@31
irq::@29: scope:[irq]  from irq::@28
  [50] (byte~) irq::$26 ← *((const byte*) rasters+(const nomodify byte) SCROLL_Y + (byte) irq::i3#2) >> (byte) 1
  [51] (byte~) irq::$27 ← (byte~) irq::$26 & (byte) 7
  [52] *((const byte*) rasters+(const nomodify byte) SCROLL_Y + (byte) irq::i3#2) ← (byte~) irq::$27
  [53] (byte) irq::i3#1 ← ++ (byte) irq::i3#2
  to:irq::@28
irq::@22: scope:[irq]  from irq::@21
  [54] (byte) irq::idx#0 ← *((const byte*) SINUS + (byte) irq::sin_bar#2)
  [55] (byte) irq::barcol#0 ← (byte) irq::barcnt#2 << (byte) 4
  to:irq::@23
irq::@23: scope:[irq]  from irq::@22 irq::@24
  [56] (byte) irq::idx#3 ← phi( irq::@22/(byte) irq::idx#0 irq::@24/(byte) irq::idx#1 )
  [56] (byte) irq::barcol#3 ← phi( irq::@22/(byte) irq::barcol#0 irq::@24/(byte) irq::barcol#1 )
  [56] (byte) irq::i1#2 ← phi( irq::@22/(byte) 0 irq::@24/(byte) irq::i1#1 )
  [57] if((byte) irq::i1#2<(byte) $10) goto irq::@24
  to:irq::@25
irq::@25: scope:[irq]  from irq::@23 irq::@26
  [58] (byte) irq::idx#4 ← phi( irq::@23/(byte) irq::idx#3 irq::@26/(byte) irq::idx#2 )
  [58] (byte) irq::barcol#4 ← phi( irq::@23/(byte) irq::barcol#3 irq::@26/(byte) irq::barcol#2 )
  [58] (byte) irq::i2#2 ← phi( irq::@23/(byte) 0 irq::@26/(byte) irq::i2#1 )
  [59] if((byte) irq::i2#2<(byte) $f) goto irq::@26
  to:irq::@27
irq::@27: scope:[irq]  from irq::@25
  [60] (byte) irq::sin_bar#1 ← (byte) irq::sin_bar#2 + (byte) $a
  [61] (byte) irq::barcnt#1 ← ++ (byte) irq::barcnt#2
  to:irq::@21
irq::@26: scope:[irq]  from irq::@25
  [62] (byte) irq::barcol#2 ← -- (byte) irq::barcol#4
  [63] *((const byte*) rasters + (byte) irq::idx#4) ← (byte) irq::barcol#2
  [64] (byte) irq::idx#2 ← ++ (byte) irq::idx#4
  [65] (byte) irq::i2#1 ← ++ (byte) irq::i2#2
  to:irq::@25
irq::@24: scope:[irq]  from irq::@23
  [66] *((const byte*) rasters + (byte) irq::idx#3) ← (byte) irq::barcol#3
  [67] (byte) irq::idx#1 ← ++ (byte) irq::idx#3
  [68] (byte) irq::barcol#1 ← ++ (byte) irq::barcol#3
  [69] (byte) irq::i1#1 ← ++ (byte) irq::i1#2
  to:irq::@23
irq::@19: scope:[irq]  from irq::@18
  [70] *((const byte*) rasters + (byte) irq::l#2) ← (byte) 0
  [71] (byte) irq::l#1 ← ++ (byte) irq::l#2
  to:irq::@18
irq::@17: scope:[irq]  from irq::@16
  [72] (byte) irq::col1#0 ← *((const byte*) SINUS + (byte) irq::sin_col#2) >> (byte) 2
  [73] *((const nomodify byte*) COLORRAM+(const nomodify byte) GREET_ROW*(byte) $28 + (byte) irq::i#2) ← (byte) irq::col1#0
  [74] (byte) irq::col1#1 ← (byte) irq::col1#0 >> (byte) 1
  [75] *((const nomodify byte*) COLORRAM+(const nomodify byte) LOGO_ROW*(byte) $28-(byte) 1 + (byte) irq::i#2) ← (byte) irq::col1#1
  [76] *((const nomodify byte*) COLORRAM+(const nomodify byte) LOGO_ROW*(byte) $28+(byte)(number) 1*(number) $28-(byte) 2 + (byte) irq::i#2) ← (byte) irq::col1#1
  [77] *((const nomodify byte*) COLORRAM+(const nomodify byte) LOGO_ROW*(byte) $28+(byte)(number) 2*(number) $28-(byte) 3 + (byte) irq::i#2) ← (byte) irq::col1#1
  [78] *((const nomodify byte*) COLORRAM+(const nomodify byte) LOGO_ROW*(byte) $28+(byte)(number) 3*(number) $28-(byte) 4 + (byte) irq::i#2) ← (byte) irq::col1#1
  [79] *((const nomodify byte*) COLORRAM+(const nomodify byte) LOGO_ROW*(byte) $28+(byte)(number) 4*(number) $28-(byte) 5 + (byte) irq::i#2) ← (byte) irq::col1#1
  [80] *((const nomodify byte*) COLORRAM+(const nomodify byte) LOGO_ROW*(byte) $28+(byte)(number) 5*(number) $28-(byte) 6 + (byte) irq::i#2) ← (byte) irq::col1#1
  [81] *((const nomodify byte*) COLORRAM+(const nomodify byte) SCROLL_ROW*(byte) $28 + (byte) irq::i#2) ← *((const byte*) PAL_GREEN + (byte) irq::sin_col#2)
  [82] (byte) irq::sin_col#1 ← ++ (byte) irq::sin_col#2
  [83] (byte) irq::i#1 ← ++ (byte) irq::i#2
  to:irq::@16
irq::@2: scope:[irq]  from irq::@1
  [84] (byte) irq::col#0 ← *((const byte*) rasters + (byte) irq::line#10)
  [85] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BORDER_COLOR) ← (byte) irq::col#0
  [86] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_BG_COLOR) ← (byte) irq::col#0
  [87] if((byte) irq::line#10<(const nomodify byte) SCROLL_Y) goto irq::@4
  to:irq::@10
irq::@10: scope:[irq]  from irq::@2
  [88] if((byte) irq::line#10==(const nomodify byte) SCROLL_Y) goto irq::@5
  to:irq::@11
irq::@11: scope:[irq]  from irq::@10
  [89] if((byte) irq::line#10==(const nomodify byte) SCROLL_Y+(const nomodify byte) SCROLL_BLACKBARS) goto irq::@6
  to:irq::@12
irq::@12: scope:[irq]  from irq::@11
  [90] if((byte) irq::line#10!=(const nomodify byte) SCROLL_Y+(const nomodify byte) SCROLL_BLACKBARS+(byte) 1) goto irq::@7
  to:irq::@13
irq::@13: scope:[irq]  from irq::@12
  [91] (byte) irq::zoomval#0 ← *((const byte*) SINUS + (volatile byte) greet_zoomx)
  [92] (volatile byte) greet_zoomx ← ++ (volatile byte) greet_zoomx
  [93] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) irq::zoomval#0
  [94] (byte~) irq::$10 ← (byte) irq::zoomval#0 + (byte) 1
  [95] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte~) irq::$10
  [96] if((volatile byte) greet_zoomx!=(byte) 0) goto irq::@7
  to:irq::@14
irq::@14: scope:[irq]  from irq::@13
  [97] (volatile byte) greet_idx ← ++ (volatile byte) greet_idx
  [98] if((volatile byte) greet_idx!=(const nomodify byte) GREET_COUNT) goto irq::@7
  to:irq::@15
irq::@15: scope:[irq]  from irq::@14
  [99] (volatile byte) greet_idx ← (byte) 0
  to:irq::@7
irq::@7: scope:[irq]  from irq::@12 irq::@13 irq::@14 irq::@15 irq::@4 irq::@5 irq::@6
  [100] (byte) irq::wobble_idx#7 ← phi( irq::@12/(byte) irq::wobble_idx#10 irq::@13/(byte) irq::wobble_idx#10 irq::@14/(byte) irq::wobble_idx#10 irq::@15/(byte) irq::wobble_idx#10 irq::@4/(byte) irq::wobble_idx#1 irq::@5/(byte) irq::wobble_idx#10 irq::@6/(byte) irq::wobble_idx#10 )
  [101] (byte) irq::raster#0 ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:irq::@8
irq::@8: scope:[irq]  from irq::@7 irq::@8
  [102] if((byte) irq::raster#0==*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)) goto irq::@8
  to:irq::@9
irq::@9: scope:[irq]  from irq::@8
  [103] (byte) irq::line#1 ← ++ (byte) irq::line#10
  to:irq::@1
irq::@6: scope:[irq]  from irq::@11
  [104] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50
  to:irq::@7
irq::@5: scope:[irq]  from irq::@10
  [105] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← (byte) $50
  [106] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (volatile byte) scroll_soft
  to:irq::@7
irq::@4: scope:[irq]  from irq::@2
  [107] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) ← *((const byte*) SINUS + (byte) irq::wobble_idx#10)
  [108] (byte) irq::wobble_idx#1 ← ++ (byte) irq::wobble_idx#10
  [109] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CHRXSCL) ← (byte) $66
  to:irq::@7

(void()) main()
main: scope:[main]  from __start::@1
  [110] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $47
  [111] *((byte*)(const nomodify struct MOS4569_VICIII*) VICIII+(const byte) OFFSET_STRUCT_MOS4569_VICIII_KEY) ← (byte) $53
  [112] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | (byte) $40
  [113] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) ← *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | (byte) $40
  asm { lda#0  }
  [115] call *((const void()*) songInit) 
  [116] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [117] (byte) main::i1#2 ← phi( main/(byte) 0 main::@2/(byte) main::i1#1 )
  [118] if((byte) main::i1#2<(byte) $bc*(const byte) SIZEOF_BYTE) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [119] (byte) main::i2#2 ← phi( main::@1/(byte) 0 main::@4/(byte) main::i2#1 )
  [120] if((byte) main::i2#2<(byte) $28) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@5
  [121] (byte) main::i#2 ← phi( main::@3/(byte) 0 main::@5/(byte) main::i#1 )
  [122] *((const nomodify byte*) PALETTE_RED + (byte) main::i#2) ← *((const byte*) PAL_RED + (byte) main::i#2)
  [123] *((const nomodify byte*) PALETTE_GREEN + (byte) main::i#2) ← *((const byte*) PAL_GREEN + (byte) main::i#2)
  [124] *((const nomodify byte*) PALETTE_BLUE + (byte) main::i#2) ← *((const byte*) PAL_BLUE + (byte) main::i#2)
  [125] (byte) main::i#1 ← ++ (byte) main::i#2
  [126] if((byte) main::i#1!=(byte) 0) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  asm { sei  }
  [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [129] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) IRQ_Y
  [130] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f
  [131] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [132] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_STACK)(void()) irq()
  [133] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [134] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [135] *((byte*)(const nomodify struct MEGA65_VICIV*) VICIV+(const byte) OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) ← (byte) 1
  asm { cli  }
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  [137] phi()
  to:main::@7
main::@4: scope:[main]  from main::@3
  [138] *((const nomodify byte*) DEFAULT_SCREEN+(const nomodify byte) GREET_ROW*(byte) $28 + (byte) main::i2#2) ← (byte) '*'
  [139] (byte) main::i2#1 ← ++ (byte) main::i2#2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [140] *((const nomodify byte*) DEFAULT_SCREEN+(const nomodify byte) LOGO_ROW*(byte) $28 + (byte) main::i1#2) ← *((const byte*) MEGA_LOGO + (byte) main::i1#2)
  [141] (byte) main::i1#1 ← ++ (byte) main::i1#2
  to:main::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main
  [142] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [143] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [144] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [145] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [146] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [147] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
