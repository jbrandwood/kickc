
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@2

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main
  (byte*) print_char_cursor#23 ← phi( main/(byte*) print_char_cursor#25 )
  (word) print_uint::w#1 ← phi( main/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#1
  (byte) print_uchar::b#0 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#2 ← phi( print_uint/(word) print_uint::w#1 )
  (byte*) print_char_cursor#12 ← phi( print_uint/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#12
  (byte~) print_uint::$2 ← < (word) print_uint::w#2
  (byte) print_uchar::b#1 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#13 ← phi( print_uint::@1/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#13
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#14 ← phi( print_uint::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#14
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  (byte*) print_char_cursor#24 ← phi( print_uint/(byte*) print_char_cursor#23 print_uint::@1/(byte*) print_char_cursor#1 )
  (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#15 ← phi( print_uchar/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#15
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#16 ← phi( print_uchar::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#16
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#17 ← phi( print_uchar::@2/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#17
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  (byte*) print_char_cursor#18 ← phi( print_uchar/(byte*) print_char_cursor#24 print_uchar::@1/(byte*) print_char_cursor#4 )
  (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#7 ← ++ (byte*) print_char_cursor#18
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#19 ← phi( print_char/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#19
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  (byte*) print_char_cursor#25 ← phi( @2/(byte*) print_char_cursor#26 )
  (struct fileentry*) main::file#0 ← (struct fileentry*) 0
  (word) main::uSize#0 ← (word) 0
  (struct fileentry*) main::file#1 ← ((struct fileentry*)) (number) $4000
  (byte**~) main::$4 ← (byte**)(struct fileentry*) main::file#1
  (byte**~) main::$2 ← (byte**~) main::$4 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT
  *((byte**~) main::$2) ← ((byte*)) (number) 4
  (byte**~) main::$5 ← (byte**)(struct fileentry*) main::file#1
  (byte**~) main::$3 ← (byte**~) main::$5 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT
  (byte*~) main::$0 ← *((byte**~) main::$3) + (number) $1e
  (word*) main::ptrw#0 ← (word*)(byte*~) main::$0
  (word) main::uSize#1 ← *((word*) main::ptrw#0)
  (word) print_uint::w#0 ← (word) main::uSize#1
  call print_uint 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#20 ← phi( main/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#20
  to:main::@return
main::@return: scope:[main]  from main::@1
  (byte*) print_char_cursor#21 ← phi( main::@1/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#21
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) print_char_cursor#26 ← phi( @1/(byte*) print_char_cursor#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte*) print_char_cursor#22 ← phi( @2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#22
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(byte) fileentry::bError
(byte) fileentry::bFlag
(byte*) fileentry::bufEdit
(void()) main()
(byte*~) main::$0
(byte**~) main::$2
(byte**~) main::$3
(byte**~) main::$4
(byte**~) main::$5
(label) main::@1
(label) main::@return
(struct fileentry*) main::file
(struct fileentry*) main::file#0
(struct fileentry*) main::file#1
(word*) main::ptrw
(word*) main::ptrw#0
(word) main::uSize
(word) main::uSize#0
(word) main::uSize#1
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#3
(byte*) print_char_cursor#4
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_screen
(byte*) print_screen#0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2

Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $1e in (byte*~) main::$0 ← *((byte**~) main::$3) + (number) $1e
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (struct fileentry*) main::file#1 ← (struct fileentry*)(number) $4000
Inlining cast *((byte**~) main::$2) ← (byte*)(number) 4
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant pointer cast (struct fileentry*) 16384
Simplifying constant pointer cast (byte*) 4
Simplifying constant integer cast $1e
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $1e
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Alias print_char_cursor#0 = print_line_cursor#0 print_screen#0 print_char_cursor#26 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#1 = print_uint::w#2 
Alias print_char_cursor#1 = print_char_cursor#12 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#13 = print_char_cursor#2 print_char_cursor#14 print_char_cursor#3 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#15 = print_char_cursor#4 
Alias print_char_cursor#16 = print_char_cursor#5 print_char_cursor#17 print_char_cursor#6 
Alias print_char_cursor#19 = print_char_cursor#7 print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#9 print_char_cursor#20 print_char_cursor#21 
Alias print_char_cursor#11 = print_char_cursor#22 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) print_uint::w#1 (word) print_uint::w#0
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#0
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) print_char_cursor#0 = (byte*) 1024
Constant (const struct fileentry*) main::file#0 = (struct fileentry*) 0
Constant (const word) main::uSize#0 = 0
Constant (const struct fileentry*) main::file#1 = (struct fileentry*) 16384
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte**) main::$4 = (byte**)main::file#1
Constant (const byte**) main::$5 = (byte**)main::file#1
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [29] *((byte**~) main::$2) ← (byte*) 4  -- *(main::$4 + OFFSET_STRUCT_FILEENTRY_BUFEDIT)
Converting *(pointer+n) to pointer[n] [32] (byte*~) main::$0 ← *((byte**~) main::$3) + (byte) $1e  -- *(main::$5 + OFFSET_STRUCT_FILEENTRY_BUFEDIT)
Converting *(pointer+n) to pointer[n] [34] (word) main::uSize#1 ← *((word*) main::ptrw#0)  -- *((word*)*(main::$5 + OFFSET_STRUCT_FILEENTRY_BUFEDIT) + $1e)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$4 in [28] (byte**~) main::$2 ← (const byte**) main::$4 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT
Simplifying expression containing zero main::$4 in [29] *((const byte**) main::$4 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT) ← (byte*) 4
Simplifying expression containing zero main::$5 in [31] (byte**~) main::$3 ← (const byte**) main::$5 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT
Simplifying expression containing zero main::$5 in [32] (byte*~) main::$0 ← *((const byte**) main::$5 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT) + (byte) $1e
Simplifying expression containing zero main::$5 in [34] (word) main::uSize#1 ← *((word*)*((const byte**) main::$5 + (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT) + (byte) $1e)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte**~) main::$2 and assignment [17] (byte**~) main::$2 ← (const byte**) main::$4
Eliminating unused variable (byte**~) main::$3 and assignment [19] (byte**~) main::$3 ← (const byte**) main::$5
Eliminating unused variable (word*) main::ptrw#0 and assignment [21] (word*) main::ptrw#0 ← (word*)(byte*~) main::$0
Eliminating unused constant (const struct fileentry*) main::file#0
Eliminating unused constant (const word) main::uSize#0
Eliminating unused constant (const byte) OFFSET_STRUCT_FILEENTRY_BUFEDIT
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte*~) main::$0 and assignment [18] (byte*~) main::$0 ← *((const byte**) main::$5) + (byte) $1e
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) print_char_cursor#0
Constant inlined main::$5 = (byte**)(const struct fileentry*) main::file#1
Constant inlined print_char_cursor#0 = (byte*) 1024
Constant inlined main::$4 = (byte**)(const struct fileentry*) main::file#1
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_uint:9 
Calls in [print_uint] to print_uchar:14 print_uchar:18 
Calls in [print_uchar] to print_char:26 print_char:31 

Created 4 initial phi equivalence classes
Coalesced [13] print_uchar::b#4 ← print_uchar::b#0
Coalesced [16] print_uchar::b#5 ← print_uchar::b#1
Coalesced [17] print_char_cursor#27 ← print_char_cursor#19
Coalesced [24] print_char::ch#3 ← print_char::ch#0
Coalesced [25] print_char_cursor#28 ← print_char_cursor#24
Coalesced [29] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [30] print_char_cursor#29 ← print_char_cursor#19
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@1
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte**)(const struct fileentry*) main::file#1) ← (byte*) 4
  [5] (word) main::uSize#1 ← *((word*)*((byte**)(const struct fileentry*) main::file#1) + (byte) $1e)
  [6] (word) print_uint::w#0 ← (word) main::uSize#1
  [7] call print_uint 
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main
  [9] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [10] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [11] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [12] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [13] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [14] (byte*) print_char_cursor#24 ← phi( print_uint/(byte*) 1024 print_uint::@1/(byte*) print_char_cursor#19 )
  [14] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [15] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [16] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [17] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [18] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [19] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [20] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [21] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  [22] (byte*) print_char_cursor#18 ← phi( print_uchar/(byte*) print_char_cursor#24 print_uchar::@1/(byte*) print_char_cursor#19 )
  [22] (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [23] *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2
  [24] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#18
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [25] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) fileentry::bError
(byte) fileentry::bFlag
(byte*) fileentry::bufEdit
(void()) main()
(struct fileentry*) main::file
(word*) main::ptrw
(word) main::uSize
(word) main::uSize#1 22.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 2002.0
(byte) print_char::ch#1 2002.0
(byte) print_char::ch#2 12003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#18 11002.0
(byte*) print_char_cursor#19 1233.6666666666665
(byte*) print_char_cursor#24 367.33333333333337
(byte*) print_line_cursor
(byte*) print_screen
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 2002.0
(byte~) print_uchar::$2 2002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 202.0
(byte) print_uchar::b#1 202.0
(byte) print_uchar::b#2 551.0
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 71.0

Initial phi equivalence classes
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ]
Added variable main::uSize#1 to live range equivalence class [ main::uSize#1 ]
Added variable print_uint::w#0 to live range equivalence class [ print_uint::w#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ]
[ main::uSize#1 ]
[ print_uint::w#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[1]:2 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[1]:3 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp[2]:4 [ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ]
Allocated zp[2]:6 [ main::uSize#1 ]
Allocated zp[2]:8 [ print_uint::w#0 ]
Allocated zp[1]:10 [ print_uchar::$0 ]
Allocated zp[1]:11 [ print_uchar::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_char_cursor = 4
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label file = $4000
    .label uSize = 6
    // [4] *((byte**)(const struct fileentry*) main::file#1) ← (byte*) 4 -- _deref_pptc1=pbuc2 
    lda #<4
    sta file
    lda #>4
    sta file+1
    // [5] (word) main::uSize#1 ← *((word*)*((byte**)(const struct fileentry*) main::file#1) + (byte) $1e) -- vwuz1=(_deref_pptc1)_derefidx_vbuc2 
    ldy #$1e
    lda file
    sta.z $fe
    lda file+1
    sta.z $ff
    lda ($fe),y
    sta.z uSize
    iny
    lda ($fe),y
    sta.z uSize+1
    // [6] (word) print_uint::w#0 ← (word) main::uSize#1 -- vwuz1=vwuz2 
    lda.z uSize
    sta.z print_uint.w
    lda.z uSize+1
    sta.z print_uint.w+1
    // [7] call print_uint 
    jsr print_uint
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(8) w)
print_uint: {
    .label w = 8
    // [9] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [10] call print_uchar 
    // [14] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [14] phi (byte*) print_char_cursor#24 = (byte*) 1024 [phi:print_uint->print_uchar#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [14] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [11] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [12] call print_uchar 
    // [14] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [14] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [14] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [13] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp(2) b)
print_uchar: {
    .label __0 = $a
    .label __2 = $b
    .label b = 2
    // [15] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [16] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [17] call print_char 
  // Table of hexadecimal digits
    // [22] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [22] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#24 [phi:print_uchar->print_char#0] -- register_copy 
    // [22] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [18] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [19] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [20] call print_char 
    // [22] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [22] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#19 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [22] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [21] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp(3) ch)
print_char: {
    .label ch = 3
    // [23] *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [24] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#18 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [25] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte**)(const struct fileentry*) main::file#1) ← (byte*) 4 [ ] ( main:2 [ ] { { print_uint::w#0 = main::uSize#1 } }  ) always clobbers reg byte a 
Statement [5] (word) main::uSize#1 ← *((word*)*((byte**)(const struct fileentry*) main::file#1) + (byte) $1e) [ main::uSize#1 ] ( main:2 [ main::uSize#1 ] { { print_uint::w#0 = main::uSize#1 } }  ) always clobbers reg byte a reg byte y 
Statement [6] (word) print_uint::w#0 ← (word) main::uSize#1 [ print_uint::w#0 ] ( main:2 [ print_uint::w#0 ] { { print_uint::w#0 = main::uSize#1 } }  ) always clobbers reg byte a 
Statement [15] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#24 print_uchar::$0 ] ( main:2::print_uint:7::print_uchar:10 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#24 print_uchar::$0 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#24 } }  main:2::print_uint:7::print_uchar:12 [ print_uchar::b#2 print_char_cursor#24 print_uchar::$0 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [18] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#19 print_uchar::$2 ] ( main:2::print_uint:7::print_uchar:10 [ print_uint::w#0 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#19 } }  main:2::print_uint:7::print_uchar:12 [ print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [23] *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2 [ print_char_cursor#18 ] ( main:2::print_uint:7::print_uchar:10::print_char:17 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#24 } }  main:2::print_uint:7::print_uchar:12::print_char:17 [ print_uchar::b#2 print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#0 = print_char::ch#2 } }  main:2::print_uint:7::print_uchar:10::print_char:20 [ print_uint::w#0 print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#19 } }  main:2::print_uint:7::print_uchar:12::print_char:20 [ print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [4] *((byte**)(const struct fileentry*) main::file#1) ← (byte*) 4 [ ] ( main:2 [ ] { { print_uint::w#0 = main::uSize#1 } }  ) always clobbers reg byte a 
Statement [5] (word) main::uSize#1 ← *((word*)*((byte**)(const struct fileentry*) main::file#1) + (byte) $1e) [ main::uSize#1 ] ( main:2 [ main::uSize#1 ] { { print_uint::w#0 = main::uSize#1 } }  ) always clobbers reg byte a reg byte y 
Statement [6] (word) print_uint::w#0 ← (word) main::uSize#1 [ print_uint::w#0 ] ( main:2 [ print_uint::w#0 ] { { print_uint::w#0 = main::uSize#1 } }  ) always clobbers reg byte a 
Statement [15] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#24 print_uchar::$0 ] ( main:2::print_uint:7::print_uchar:10 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#24 print_uchar::$0 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#24 } }  main:2::print_uint:7::print_uchar:12 [ print_uchar::b#2 print_char_cursor#24 print_uchar::$0 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [18] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#19 print_uchar::$2 ] ( main:2::print_uint:7::print_uchar:10 [ print_uint::w#0 print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#19 } }  main:2::print_uint:7::print_uchar:12 [ print_char_cursor#19 print_uchar::$2 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [23] *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2 [ print_char_cursor#18 ] ( main:2::print_uint:7::print_uchar:10::print_char:17 [ print_uint::w#0 print_uchar::b#2 print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#0 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#24 } }  main:2::print_uint:7::print_uchar:12::print_char:17 [ print_uchar::b#2 print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#0 = print_char::ch#2 } }  main:2::print_uint:7::print_uchar:10::print_char:20 [ print_uint::w#0 print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#2 } { print_char_cursor#18 = print_char_cursor#19 } }  main:2::print_uint:7::print_uchar:12::print_char:20 [ print_char_cursor#18 ] { { print_uint::w#0 = main::uSize#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#18 = print_char_cursor#24 print_char_cursor#19 } { print_char::ch#1 = print_char::ch#2 } }  ) always clobbers reg byte y 
Potential registers zp[1]:2 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::uSize#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ print_uint::w#0 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ print_uchar::$0 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ print_uchar::$2 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 16,007: zp[1]:3 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [] 12,603: zp[2]:4 [ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:10 [ print_uchar::$0 ] 2,002: zp[1]:11 [ print_uchar::$2 ] 955: zp[1]:2 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [print_uint] 71: zp[2]:8 [ print_uint::w#0 ] 
Uplift Scope [main] 22: zp[2]:6 [ main::uSize#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [fileentry] 

Uplifting [print_char] best 221 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [] best 221 combination zp[2]:4 [ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ] 
Uplifting [print_uchar] best 203 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [print_uint] best 203 combination zp[2]:8 [ print_uint::w#0 ] 
Uplifting [main] best 203 combination zp[2]:6 [ main::uSize#1 ] 
Uplifting [RADIX] best 203 combination 
Uplifting [fileentry] best 203 combination 
Coalescing zero page register [ zp[2]:6 [ main::uSize#1 ] ] with [ zp[2]:8 [ print_uint::w#0 ] ] - score: 1
Allocated (was zp[2]:4) zp[2]:2 [ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ]
Allocated (was zp[2]:6) zp[2]:4 [ main::uSize#1 print_uint::w#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_char_cursor = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label file = $4000
    .label uSize = 4
    // [4] *((byte**)(const struct fileentry*) main::file#1) ← (byte*) 4 -- _deref_pptc1=pbuc2 
    lda #<4
    sta file
    lda #>4
    sta file+1
    // [5] (word) main::uSize#1 ← *((word*)*((byte**)(const struct fileentry*) main::file#1) + (byte) $1e) -- vwuz1=(_deref_pptc1)_derefidx_vbuc2 
    ldy #$1e
    lda file
    sta.z $fe
    lda file+1
    sta.z $ff
    lda ($fe),y
    sta.z uSize
    iny
    lda ($fe),y
    sta.z uSize+1
    // [6] (word) print_uint::w#0 ← (word) main::uSize#1
    // [7] call print_uint 
    jsr print_uint
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(4) w)
print_uint: {
    .label w = 4
    // [9] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [10] call print_uchar 
    // [14] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [14] phi (byte*) print_char_cursor#24 = (byte*) 1024 [phi:print_uint->print_uchar#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [14] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [11] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [12] call print_uchar 
    // [14] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [14] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [14] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [13] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [15] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [16] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [17] call print_char 
  // Table of hexadecimal digits
    // [22] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [22] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#24 [phi:print_uchar->print_char#0] -- register_copy 
    // [22] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [18] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [19] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [20] call print_char 
    // [22] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [22] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#19 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [22] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [21] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [23] *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [24] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#18 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [25] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(byte) fileentry::bError
(byte) fileentry::bFlag
(byte*) fileentry::bufEdit
(void()) main()
(label) main::@return
(struct fileentry*) main::file
(const struct fileentry*) main::file#1 file = (struct fileentry*) 16384
(word*) main::ptrw
(word) main::uSize
(word) main::uSize#1 uSize zp[2]:4 22.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2002.0
(byte) print_char::ch#1 reg byte a 2002.0
(byte) print_char::ch#2 reg byte a 12003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#18 print_char_cursor zp[2]:2 11002.0
(byte*) print_char_cursor#19 print_char_cursor zp[2]:2 1233.6666666666665
(byte*) print_char_cursor#24 print_char_cursor zp[2]:2 367.33333333333337
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_screen
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2002.0
(byte~) print_uchar::$2 reg byte x 2002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 202.0
(byte) print_uchar::b#1 reg byte x 202.0
(byte) print_uchar::b#2 reg byte x 551.0
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:4 71.0

reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:2 [ print_char_cursor#18 print_char_cursor#24 print_char_cursor#19 ]
zp[2]:4 [ main::uSize#1 print_uint::w#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 161

  // File Comments
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_char_cursor = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label file = $4000
    .label uSize = 4
    // file->bufEdit = 4
    // [4] *((byte**)(const struct fileentry*) main::file#1) ← (byte*) 4 -- _deref_pptc1=pbuc2 
    lda #<4
    sta file
    lda #>4
    sta file+1
    // uSize = *ptrw
    // [5] (word) main::uSize#1 ← *((word*)*((byte**)(const struct fileentry*) main::file#1) + (byte) $1e) -- vwuz1=(_deref_pptc1)_derefidx_vbuc2 
    ldy #$1e
    lda file
    sta.z $fe
    lda file+1
    sta.z $ff
    lda ($fe),y
    sta.z uSize
    iny
    lda ($fe),y
    sta.z uSize+1
    // print_uint(uSize)
    // [6] (word) print_uint::w#0 ← (word) main::uSize#1
    // [7] call print_uint 
    jsr print_uint
    // main::@return
    // }
    // [8] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(4) w)
print_uint: {
    .label w = 4
    // print_uchar(>w)
    // [9] (byte) print_uchar::b#0 ← > (word) print_uint::w#0 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [10] call print_uchar 
    // [14] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [14] phi (byte*) print_char_cursor#24 = (byte*) 1024 [phi:print_uint->print_uchar#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [14] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [11] (byte) print_uchar::b#1 ← < (word) print_uint::w#0 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [12] call print_uchar 
    // [14] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [14] phi (byte*) print_char_cursor#24 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [14] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [13] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [15] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [16] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [17] call print_char 
  // Table of hexadecimal digits
    // [22] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [22] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#24 [phi:print_uchar->print_char#0] -- register_copy 
    // [22] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [18] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [19] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [20] call print_char 
    // [22] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [22] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#19 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [22] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [21] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [23] *((byte*) print_char_cursor#18) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [24] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#18 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [25] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

