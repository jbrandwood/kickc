
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  to:@1
main: scope:[main]  from @1
  (byte) main::idx#0 ← (number) 0
  *((byte*) SCREEN#0 + (byte) main::idx#0) ← (byte) '0'+(const byte) SIZEOF_VOID
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((byte*) SCREEN#0 + (byte) main::idx#2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((byte*) SCREEN#0 + (byte) main::idx#3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  *((byte*) SCREEN#0 + (byte) main::idx#4) ← (byte) '0'+(const byte) SIZEOF_BYTE
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  *((byte*) SCREEN#0 + (byte) main::idx#5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  *((byte*) SCREEN#0 + (byte) main::idx#6) ← (byte) '0'+(const byte) SIZEOF_BOOL
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  *((byte*) SCREEN#0 + (byte) main::idx#8) ← (byte) '0'+(const byte) SIZEOF_WORD
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  *((byte*) SCREEN#0 + (byte) main::idx#9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  *((byte*) SCREEN#0 + (byte) main::idx#10) ← (byte) '0'+(const byte) SIZEOF_WORD
  (byte) main::idx#11 ← ++ (byte) main::idx#10
  *((byte*) SCREEN#0 + (byte) main::idx#11) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  (byte) main::idx#12 ← ++ (byte) main::idx#11
  *((byte*) SCREEN#0 + (byte) main::idx#12) ← (byte) '0'+(const byte) SIZEOF_WORD
  (byte) main::idx#13 ← ++ (byte) main::idx#12
  *((byte*) SCREEN#0 + (byte) main::idx#13) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  (byte) main::idx#14 ← ++ (byte) main::idx#13
  (byte) main::idx#15 ← ++ (byte) main::idx#14
  *((byte*) SCREEN#0 + (byte) main::idx#15) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#16 ← ++ (byte) main::idx#15
  *((byte*) SCREEN#0 + (byte) main::idx#16) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#17 ← ++ (byte) main::idx#16
  *((byte*) SCREEN#0 + (byte) main::idx#17) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#18 ← ++ (byte) main::idx#17
  *((byte*) SCREEN#0 + (byte) main::idx#18) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#19 ← ++ (byte) main::idx#18
  *((byte*) SCREEN#0 + (byte) main::idx#19) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#20 ← ++ (byte) main::idx#19
  (byte) main::idx#21 ← ++ (byte) main::idx#20
  *((byte*) SCREEN#0 + (byte) main::idx#21) ← (byte) '0'+(const byte) SIZEOF_DWORD
  (byte) main::idx#22 ← ++ (byte) main::idx#21
  *((byte*) SCREEN#0 + (byte) main::idx#22) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  (byte) main::idx#23 ← ++ (byte) main::idx#22
  *((byte*) SCREEN#0 + (byte) main::idx#23) ← (byte) '0'+(const byte) SIZEOF_DWORD
  (byte) main::idx#24 ← ++ (byte) main::idx#23
  *((byte*) SCREEN#0 + (byte) main::idx#24) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  (byte) main::idx#25 ← ++ (byte) main::idx#24
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(const byte) SIZEOF_BOOL = (byte) 1
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_SIGNED_BYTE = (byte) 1
(const byte) SIZEOF_SIGNED_DWORD = (byte) 4
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_VOID = (byte) 0
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#11
(byte) main::idx#12
(byte) main::idx#13
(byte) main::idx#14
(byte) main::idx#15
(byte) main::idx#16
(byte) main::idx#17
(byte) main::idx#18
(byte) main::idx#19
(byte) main::idx#2
(byte) main::idx#20
(byte) main::idx#21
(byte) main::idx#22
(byte) main::idx#23
(byte) main::idx#24
(byte) main::idx#25
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9

Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte) main::idx#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero '0' in [2] *((const byte*) SCREEN#0 + (const byte) main::idx#0) ← (byte) '0'+(const byte) SIZEOF_VOID
Simplifying expression containing zero SCREEN#0 in [2] *((const byte*) SCREEN#0 + (const byte) main::idx#0) ← (byte) '0'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#25 and assignment [45] (byte) main::idx#25 ← ++ (byte) main::idx#24
Eliminating unused constant (const byte) SIZEOF_VOID
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [1] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [1] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [3] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] (byte) main::idx#6 ← ++ (const byte) main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#7 ← ++ (const byte) main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#8 ← ++ (const byte) main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] (byte) main::idx#9 ← ++ (const byte) main::idx#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [8] (byte) main::idx#10 ← ++ (const byte) main::idx#9
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [9] (byte) main::idx#11 ← ++ (const byte) main::idx#10
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [10] (byte) main::idx#12 ← ++ (const byte) main::idx#11
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte) main::idx#13 ← ++ (const byte) main::idx#12
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] (byte) main::idx#14 ← ++ (const byte) main::idx#13
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] (byte) main::idx#15 ← ++ (const byte) main::idx#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] (byte) main::idx#16 ← ++ (const byte) main::idx#15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] (byte) main::idx#17 ← ++ (const byte) main::idx#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [15] (byte) main::idx#18 ← ++ (const byte) main::idx#17
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#18 = ++main::idx#17
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] (byte) main::idx#19 ← ++ (const byte) main::idx#18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#19 = ++main::idx#18
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [17] (byte) main::idx#20 ← ++ (const byte) main::idx#19
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#20 = ++main::idx#19
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [17] (byte) main::idx#21 ← ++ (const byte) main::idx#20
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#21 = ++main::idx#20
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [18] (byte) main::idx#22 ← ++ (const byte) main::idx#21
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#22 = ++main::idx#21
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [19] (byte) main::idx#23 ← ++ (const byte) main::idx#22
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#23 = ++main::idx#22
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] (byte) main::idx#24 ← ++ (const byte) main::idx#23
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#24 = ++main::idx#23
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Inlining constant with different constant siblings (const byte) main::idx#10
Inlining constant with different constant siblings (const byte) main::idx#11
Inlining constant with different constant siblings (const byte) main::idx#12
Inlining constant with different constant siblings (const byte) main::idx#13
Inlining constant with different constant siblings (const byte) main::idx#14
Inlining constant with different constant siblings (const byte) main::idx#15
Inlining constant with different constant siblings (const byte) main::idx#16
Inlining constant with different constant siblings (const byte) main::idx#17
Inlining constant with different constant siblings (const byte) main::idx#18
Inlining constant with different constant siblings (const byte) main::idx#19
Inlining constant with different constant siblings (const byte) main::idx#20
Inlining constant with different constant siblings (const byte) main::idx#21
Inlining constant with different constant siblings (const byte) main::idx#22
Inlining constant with different constant siblings (const byte) main::idx#23
Inlining constant with different constant siblings (const byte) main::idx#24
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#17 = ++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#18 = ++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#19 = ++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#12 = ++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#20 = ++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#21 = ++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#22 = ++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#23 = ++++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#24 = ++++++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined main::idx#6 = ++++++++++++(byte) 0
Constant inlined main::idx#7 = ++++++++++++++(byte) 0
Constant inlined main::idx#8 = ++++++++++++++++(byte) 0
Constant inlined main::idx#9 = ++++++++++++++++++(byte) 0
Constant inlined main::idx#10 = ++++++++++++++++++++(byte) 0
Constant inlined main::idx#11 = ++++++++++++++++++++++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN#0+++++0)
Consolidated array index constant in *(SCREEN#0+++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++++++++++++++++++++++++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$13
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Simplifying constant integer increment ++$17
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (byte) '0'
  [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  [7] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  [9] *((const byte*) SCREEN#0+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL
  [10] *((const byte*) SCREEN#0+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD
  [11] *((const byte*) SCREEN#0+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [12] *((const byte*) SCREEN#0+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD
  [13] *((const byte*) SCREEN#0+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [14] *((const byte*) SCREEN#0+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD
  [15] *((const byte*) SCREEN#0+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [16] *((const byte*) SCREEN#0+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [17] *((const byte*) SCREEN#0+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [18] *((const byte*) SCREEN#0+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [19] *((const byte*) SCREEN#0+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [20] *((const byte*) SCREEN#0+(byte) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [21] *((const byte*) SCREEN#0+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD
  [22] *((const byte*) SCREEN#0+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  [23] *((const byte*) SCREEN#0+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD
  [24] *((const byte*) SCREEN#0+(byte) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  to:main::@return
main::@return: scope:[main]  from main
  [25] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
  // File Comments
// Tests the sizeof() operator on types
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [4] *((const byte*) SCREEN#0) ← (byte) '0' -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
    // [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
    // [7] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
    // [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
    // [9] *((const byte*) SCREEN#0+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
    // [10] *((const byte*) SCREEN#0+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
    // [11] *((const byte*) SCREEN#0+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
    // [12] *((const byte*) SCREEN#0+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
    // [13] *((const byte*) SCREEN#0+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
    // [14] *((const byte*) SCREEN#0+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
    // [15] *((const byte*) SCREEN#0+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
    // [16] *((const byte*) SCREEN#0+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
    // [17] *((const byte*) SCREEN#0+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$10
    // [18] *((const byte*) SCREEN#0+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$11
    // [19] *((const byte*) SCREEN#0+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$12
    // [20] *((const byte*) SCREEN#0+(byte) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$13
    // [21] *((const byte*) SCREEN#0+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$15
    // [22] *((const byte*) SCREEN#0+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$16
    // [23] *((const byte*) SCREEN#0+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$17
    // [24] *((const byte*) SCREEN#0+(byte) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$18
    jmp breturn
    // main::@return
  breturn:
    // [25] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← (byte) '0' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN#0+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN#0+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) SCREEN#0+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN#0+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) SCREEN#0+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) SCREEN#0+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) SCREEN#0+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) SCREEN#0+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) SCREEN#0+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) SCREEN#0+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) SCREEN#0+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SCREEN#0+(byte) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) SCREEN#0+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) SCREEN#0+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) SCREEN#0+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) SCREEN#0+(byte) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 147 combination 
Uplifting [] best 147 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the sizeof() operator on types
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [4] *((const byte*) SCREEN#0) ← (byte) '0' -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
    // [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
    // [7] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
    // [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
    // [9] *((const byte*) SCREEN#0+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
    // [10] *((const byte*) SCREEN#0+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
    // [11] *((const byte*) SCREEN#0+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
    // [12] *((const byte*) SCREEN#0+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
    // [13] *((const byte*) SCREEN#0+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
    // [14] *((const byte*) SCREEN#0+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
    // [15] *((const byte*) SCREEN#0+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
    // [16] *((const byte*) SCREEN#0+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
    // [17] *((const byte*) SCREEN#0+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$10
    // [18] *((const byte*) SCREEN#0+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$11
    // [19] *((const byte*) SCREEN#0+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$12
    // [20] *((const byte*) SCREEN#0+(byte) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$13
    // [21] *((const byte*) SCREEN#0+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$15
    // [22] *((const byte*) SCREEN#0+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$16
    // [23] *((const byte*) SCREEN#0+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$17
    // [24] *((const byte*) SCREEN#0+(byte) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$18
    jmp breturn
    // main::@return
  breturn:
    // [25] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(const byte) SIZEOF_BOOL SIZEOF_BOOL = (byte) 1
(const byte) SIZEOF_BYTE SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_DWORD SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_SIGNED_BYTE SIZEOF_SIGNED_BYTE = (byte) 1
(const byte) SIZEOF_SIGNED_DWORD SIZEOF_SIGNED_DWORD = (byte) 4
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(byte) main::idx



FINAL ASSEMBLER
Score: 124

  // File Comments
// Tests the sizeof() operator on types
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // SCREEN[idx++] = '0'+sizeof(void)
    // [4] *((const byte*) SCREEN#0) ← (byte) '0' -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
    // SCREEN[idx++] = '0'+sizeof(byte)
    // [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // SCREEN[idx++] = '0'+sizeof(signed byte)
    // [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
    // SCREEN[idx++] = '0'+sizeof(unsigned char)
    // [7] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
    // SCREEN[idx++] = '0'+sizeof(signed char)
    // [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
    // SCREEN[idx++] = '0'+sizeof(bool)
    // [9] *((const byte*) SCREEN#0+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
    // SCREEN[idx++] = '0'+sizeof(word)
    // [10] *((const byte*) SCREEN#0+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
    // SCREEN[idx++] = '0'+sizeof(signed word)
    // [11] *((const byte*) SCREEN#0+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
    // SCREEN[idx++] = '0'+sizeof(unsigned int)
    // [12] *((const byte*) SCREEN#0+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
    // SCREEN[idx++] = '0'+sizeof(signed int)
    // [13] *((const byte*) SCREEN#0+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
    // SCREEN[idx++] = '0'+sizeof(unsigned short)
    // [14] *((const byte*) SCREEN#0+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
    // SCREEN[idx++] = '0'+sizeof(signed short)
    // [15] *((const byte*) SCREEN#0+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
    // SCREEN[idx++] = '0'+sizeof(byte*)
    // [16] *((const byte*) SCREEN#0+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
    // SCREEN[idx++] = '0'+sizeof(word*)
    // [17] *((const byte*) SCREEN#0+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$10
    // SCREEN[idx++] = '0'+sizeof(int**)
    // [18] *((const byte*) SCREEN#0+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$11
    // SCREEN[idx++] = '0'+sizeof(int***)
    // [19] *((const byte*) SCREEN#0+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$12
    // SCREEN[idx++] = '0'+sizeof(byte[])
    // [20] *((const byte*) SCREEN#0+(byte) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$13
    // SCREEN[idx++] = '0'+sizeof(dword)
    // [21] *((const byte*) SCREEN#0+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$15
    // SCREEN[idx++] = '0'+sizeof(signed dword)
    // [22] *((const byte*) SCREEN#0+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$16
    // SCREEN[idx++] = '0'+sizeof(unsigned long)
    // [23] *((const byte*) SCREEN#0+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$17
    // SCREEN[idx++] = '0'+sizeof(signed long)
    // [24] *((const byte*) SCREEN#0+(byte) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$18
    // main::@return
    // }
    // [25] return 
    rts
}
  // File Data

