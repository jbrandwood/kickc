@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::x#2 ← phi( main/(byte) 0 main::@1/(byte) main::x#1 )
  [6] *((const byte*) SCREEN + (byte) main::x#2) ← *((const byte[$3e8]) MAPDATA + (byte) main::x#2)
  [7] *((const byte*) COLS + (byte) main::x#2) ← *((const byte[$100]) COLORMAP1 + *((const byte[$3e8]) MAPDATA + (byte) main::x#2))
  [8] *((const byte*) SCREEN+(byte) $c8 + (byte) main::x#2) ← *((const byte[$3e8]) MAPDATA+(byte) $c8 + (byte) main::x#2)
  [9] *((const byte*) COLS+(byte) $c8 + (byte) main::x#2) ← *((const byte[$100]) COLORMAP1 + *((const byte[$3e8]) MAPDATA+(byte) $c8 + (byte) main::x#2))
  [10] *((const byte*) SCREEN+(word) $190 + (byte) main::x#2) ← *((const byte[$3e8]) MAPDATA+(word) $190 + (byte) main::x#2)
  [11] *((const byte*) COLS+(word) $190 + (byte) main::x#2) ← *((const byte[$100]) COLORMAP1 + *((const byte[$3e8]) MAPDATA+(word) $190 + (byte) main::x#2))
  [12] *((const byte*) SCREEN+(word) $258 + (byte) main::x#2) ← *((const byte[$3e8]) MAPDATA+(word) $258 + (byte) main::x#2)
  [13] *((const byte*) COLS+(word) $258 + (byte) main::x#2) ← *((const byte[$100]) COLORMAP2 + *((const byte[$3e8]) MAPDATA+(word) $258 + (byte) main::x#2))
  [14] *((const byte*) SCREEN+(word) $320 + (byte) main::x#2) ← *((const byte[$3e8]) MAPDATA+(word) $320 + (byte) main::x#2)
  [15] *((const byte*) COLS+(word) $320 + (byte) main::x#2) ← *((const byte[$100]) COLORMAP2 + *((const byte[$3e8]) MAPDATA+(word) $320 + (byte) main::x#2))
  [16] (byte) main::x#1 ← ++ (byte) main::x#2
  [17] if((byte) main::x#1!=(byte) $c9) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [18] return 
  to:@return
