Adding pointer type conversion cast (byte*) SCREEN in (byte*) SCREEN ← (number) $400
Identified constant variable (byte*) SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[3]) b#0 ← { fill( 3, 0) }
  (byte[]) c#0 ← { (byte) 'c', (byte) 'm', (byte) 'l' }
  (byte[]) d#0 ← (const string) $0
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  to:@1
main: scope:[main]  from @1
  *((byte[3]) b#0 + (number) 0) ← (byte) 'c'
  *((byte*) SCREEN#0) ← *((byte[3]) b#0 + (number) 0)
  (byte*~) main::$0 ← (byte*) SCREEN#0 + (number) 1
  *((byte*~) main::$0) ← *((byte[]) c#0 + (number) 1)
  (byte*~) main::$1 ← (byte*) SCREEN#0 + (number) 2
  *((byte*~) main::$1) ← *((byte[]) d#0 + (number) 2)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(const string) $0 = (string) "cml"
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte[3]) b
(byte[3]) b#0
(byte[]) c
(byte[]) c#0
(byte[]) d
(byte[]) d#0
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(label) main::@return

Adding number conversion cast (unumber) 0 in *((byte[3]) b#0 + (number) 0) ← (byte) 'c'
Adding number conversion cast (unumber) 0 in *((byte*) SCREEN#0) ← *((byte[3]) b#0 + (number) 0)
Adding number conversion cast (unumber) 1 in (byte*~) main::$0 ← (byte*) SCREEN#0 + (number) 1
Adding number conversion cast (unumber) 1 in *((byte*~) main::$0) ← *((byte[]) c#0 + (number) 1)
Adding number conversion cast (unumber) 2 in (byte*~) main::$1 ← (byte*) SCREEN#0 + (number) 2
Adding number conversion cast (unumber) 2 in *((byte*~) main::$1) ← *((byte[]) d#0 + (number) 2)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte[3]) b#0 ← { fill( 3, 0) }
Constant right-side identified [1] (byte[]) c#0 ← { (byte) 'c', (byte) 'm', (byte) 'l' }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte[3]) b#0 = { fill( 3, 0) }
Constant (const byte[]) c#0 = { 'c', 'm', 'l' }
Constant (const byte[]) d#0 = $0
Constant (const byte*) SCREEN#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [7] *((byte*~) main::$0) ← *((const byte[]) c#0 + (byte) 1)  -- *(SCREEN#0 + 1)
Converting *(pointer+n) to pointer[n] [9] *((byte*~) main::$1) ← *((const byte[]) d#0 + (byte) 2)  -- *(SCREEN#0 + 2)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero b#0 in [4] *((const byte[3]) b#0 + (byte) 0) ← (byte) 'c'
Simplifying expression containing zero b#0 in [5] *((const byte*) SCREEN#0) ← *((const byte[3]) b#0 + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::$0 and assignment [2] (byte*~) main::$0 ← (const byte*) SCREEN#0 + (byte) 1
Eliminating unused variable (byte*~) main::$1 and assignment [4] (byte*~) main::$1 ← (const byte*) SCREEN#0 + (byte) 2
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined $0 = (const byte[]) d#0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(c#0+1)
Consolidated array index constant in *(SCREEN#0+1)
Consolidated array index constant in *(d#0+2)
Consolidated array index constant in *(SCREEN#0+2)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte[3]) b#0) ← (byte) 'c'
  [5] *((const byte*) SCREEN#0) ← *((const byte[3]) b#0)
  [6] *((const byte*) SCREEN#0+(byte) 1) ← *((const byte[]) c#0+(byte) 1)
  [7] *((const byte*) SCREEN#0+(byte) 2) ← *((const byte[]) d#0+(byte) 2)
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte[3]) b
(byte[]) c
(byte[]) d
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte[3]) b#0) ← (byte) 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta b
  //SEG11 [5] *((const byte*) SCREEN#0) ← *((const byte[3]) b#0) -- _deref_pbuc1=_deref_pbuc2 
    lda b
    sta SCREEN
  //SEG12 [6] *((const byte*) SCREEN#0+(byte) 1) ← *((const byte[]) c#0+(byte) 1) -- _deref_pbuc1=_deref_pbuc2 
    lda c+1
    sta SCREEN+1
  //SEG13 [7] *((const byte*) SCREEN#0+(byte) 2) ← *((const byte[]) d#0+(byte) 2) -- _deref_pbuc1=_deref_pbuc2 
    lda d+2
    sta SCREEN+2
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}
//SEG16 File Data
  b: .fill 3, 0
  c: .byte 'c', 'm', 'l'
  d: .text "cml"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte[3]) b#0) ← (byte) 'c' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN#0) ← *((const byte[3]) b#0) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0+(byte) 1) ← *((const byte[]) c#0+(byte) 1) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte) 2) ← *((const byte[]) d#0+(byte) 2) [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 51 combination 
Uplifting [] best 51 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte[3]) b#0) ← (byte) 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta b
  //SEG11 [5] *((const byte*) SCREEN#0) ← *((const byte[3]) b#0) -- _deref_pbuc1=_deref_pbuc2 
    lda b
    sta SCREEN
  //SEG12 [6] *((const byte*) SCREEN#0+(byte) 1) ← *((const byte[]) c#0+(byte) 1) -- _deref_pbuc1=_deref_pbuc2 
    lda c+1
    sta SCREEN+1
  //SEG13 [7] *((const byte*) SCREEN#0+(byte) 2) ← *((const byte[]) d#0+(byte) 2) -- _deref_pbuc1=_deref_pbuc2 
    lda d+2
    sta SCREEN+2
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}
//SEG16 File Data
  b: .fill 3, 0
  c: .byte 'c', 'm', 'l'
  d: .text "cml"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda b
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte[3]) b
(const byte[3]) b#0 b = { fill( 3, 0) }
(byte[]) c
(const byte[]) c#0 c = { (byte) 'c', (byte) 'm', (byte) 'l' }
(byte[]) d
(const byte[]) d#0 d = (string) "cml"
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 32

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [4] *((const byte[3]) b#0) ← (byte) 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta b
  //SEG11 [5] *((const byte*) SCREEN#0) ← *((const byte[3]) b#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SCREEN
  //SEG12 [6] *((const byte*) SCREEN#0+(byte) 1) ← *((const byte[]) c#0+(byte) 1) -- _deref_pbuc1=_deref_pbuc2 
    lda c+1
    sta SCREEN+1
  //SEG13 [7] *((const byte*) SCREEN#0+(byte) 2) ← *((const byte[]) d#0+(byte) 2) -- _deref_pbuc1=_deref_pbuc2 
    lda d+2
    sta SCREEN+2
  //SEG14 main::@return
  //SEG15 [8] return 
    rts
}
//SEG16 File Data
  b: .fill 3, 0
  c: .byte 'c', 'm', 'l'
  d: .text "cml"

