@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@2
main::@2: scope:[main]  from main main::@1
  [5] (byte) y#16 ← phi( main::@1/(byte) y#1 main/(byte) 0 )
  [5] (byte) idx#15 ← phi( main::@1/(byte) idx#1 main/(byte) 0 )
  [5] (byte) x#17 ← phi( main::@1/(byte) x#10 main/(byte) 0 )
  [5] (byte) line#15 ← phi( main::@1/(byte) line#11 main/(byte) 0 )
  [6] (byte) x#1 ← ++ (byte) x#17
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [7] (byte) x#15 ← phi( main::@3/(byte) x#10 main::@2/(byte) x#1 )
  [7] (byte) idx#14 ← phi( main::@3/(byte) idx#1 main::@2/(byte) idx#15 )
  [7] (byte) row#13 ← phi( main::@3/(byte) row#12 main::@2/(byte) 0 )
  [8] (byte~) main::$3 ← (byte) idx#14 << (byte) 1
  [9] *((byte*)(const struct pos[$40]) p#0+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#16
  [10] *((byte*)(const struct pos[$40]) p#0 + (byte~) main::$3) ← (byte) x#15
  [11] (byte) idx#1 ← ++ (byte) idx#14
  [12] (byte) x#10 ← (byte) x#15 + (const byte) XSPACE#0
  [13] (byte) row#12 ← ++ (byte) row#13
  to:main::@3
main::@3: scope:[main]  from main::@4
  [14] if((byte) row#12<(byte) 8) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [15] (byte) y#1 ← (byte) y#16 + (const byte) YSPACE#0
  [16] (byte) line#11 ← ++ (byte) line#15
  to:main::@1
main::@1: scope:[main]  from main::@5
  [17] if((byte) line#11<(byte) 8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [18] return 
  to:@return
