Culled Empty Block (label) @1
Culled Empty Block (label) bool_and::@5
Culled Empty Block (label) bool_and::@6
Culled Empty Block (label) @2
Culled Empty Block (label) bool_or::@5
Culled Empty Block (label) bool_or::@6
Culled Empty Block (label) @3
Culled Empty Block (label) bool_not::@5
Culled Empty Block (label) bool_not::@6
Culled Empty Block (label) @4
Culled Empty Block (label) bool_complex::@5
Culled Empty Block (label) bool_complex::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
bool_and: scope:[bool_and]  from main
  (byte*) bool_and::screen#0 ← ((byte*)) (number) $400
  (byte) bool_and::i#0 ← (byte) 0
  to:bool_and::@1
bool_and::@1: scope:[bool_and]  from bool_and bool_and::@3
  (byte) bool_and::i#2 ← phi( bool_and/(byte) bool_and::i#0 bool_and::@3/(byte) bool_and::i#1 )
  (bool~) bool_and::$0 ← (byte) bool_and::i#2 < (number) $a
  (bool) bool_and::o1#0 ← (bool~) bool_and::$0
  (number~) bool_and::$1 ← (byte) bool_and::i#2 & (number) 1
  (bool~) bool_and::$2 ← (number~) bool_and::$1 == (number) 0
  (bool) bool_and::o2#0 ← (bool~) bool_and::$2
  (bool~) bool_and::$3 ← (bool) bool_and::o1#0 && (bool) bool_and::o2#0
  (bool) bool_and::o3#0 ← (bool~) bool_and::$3
  if((bool) bool_and::o3#0) goto bool_and::@2
  to:bool_and::@4
bool_and::@2: scope:[bool_and]  from bool_and::@1
  (byte) bool_and::i#3 ← phi( bool_and::@1/(byte) bool_and::i#2 )
  *((byte*) bool_and::screen#0 + (byte) bool_and::i#3) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1
  (byte) bool_and::i#4 ← phi( bool_and::@1/(byte) bool_and::i#2 )
  *((byte*) bool_and::screen#0 + (byte) bool_and::i#4) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#5 ← phi( bool_and::@2/(byte) bool_and::i#3 bool_and::@4/(byte) bool_and::i#4 )
  (byte) bool_and::i#1 ← (byte) bool_and::i#5 + rangenext(0,$14)
  (bool~) bool_and::$4 ← (byte) bool_and::i#1 != rangelast(0,$14)
  if((bool~) bool_and::$4) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  (byte*) bool_or::screen#0 ← ((byte*)) (number) $428
  (byte) bool_or::i#0 ← (byte) 0
  to:bool_or::@1
bool_or::@1: scope:[bool_or]  from bool_or bool_or::@3
  (byte) bool_or::i#2 ← phi( bool_or/(byte) bool_or::i#0 bool_or::@3/(byte) bool_or::i#1 )
  (bool~) bool_or::$0 ← (byte) bool_or::i#2 < (number) $a
  (bool) bool_or::o1#0 ← (bool~) bool_or::$0
  (number~) bool_or::$1 ← (byte) bool_or::i#2 & (number) 1
  (bool~) bool_or::$2 ← (number~) bool_or::$1 == (number) 0
  (bool) bool_or::o2#0 ← (bool~) bool_or::$2
  (bool~) bool_or::$3 ← (bool) bool_or::o1#0 || (bool) bool_or::o2#0
  (bool) bool_or::o3#0 ← (bool~) bool_or::$3
  if((bool) bool_or::o3#0) goto bool_or::@2
  to:bool_or::@4
bool_or::@2: scope:[bool_or]  from bool_or::@1
  (byte) bool_or::i#3 ← phi( bool_or::@1/(byte) bool_or::i#2 )
  *((byte*) bool_or::screen#0 + (byte) bool_or::i#3) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@1
  (byte) bool_or::i#4 ← phi( bool_or::@1/(byte) bool_or::i#2 )
  *((byte*) bool_or::screen#0 + (byte) bool_or::i#4) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  (byte) bool_or::i#5 ← phi( bool_or::@2/(byte) bool_or::i#3 bool_or::@4/(byte) bool_or::i#4 )
  (byte) bool_or::i#1 ← (byte) bool_or::i#5 + rangenext(0,$14)
  (bool~) bool_or::$4 ← (byte) bool_or::i#1 != rangelast(0,$14)
  if((bool~) bool_or::$4) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  (byte*) bool_not::screen#0 ← ((byte*)) (number) $450
  (byte) bool_not::i#0 ← (byte) 0
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  (byte) bool_not::i#2 ← phi( bool_not/(byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  (bool~) bool_not::$0 ← (byte) bool_not::i#2 < (number) $a
  (bool) bool_not::o1#0 ← (bool~) bool_not::$0
  (number~) bool_not::$1 ← (byte) bool_not::i#2 & (number) 1
  (bool~) bool_not::$2 ← (number~) bool_not::$1 == (number) 0
  (bool) bool_not::o2#0 ← (bool~) bool_not::$2
  (bool~) bool_not::$3 ← (bool) bool_not::o1#0 || (bool) bool_not::o2#0
  (bool~) bool_not::$4 ← ! (bool~) bool_not::$3
  (bool) bool_not::o3#0 ← (bool~) bool_not::$4
  if((bool) bool_not::o3#0) goto bool_not::@2
  to:bool_not::@4
bool_not::@2: scope:[bool_not]  from bool_not::@1
  (byte) bool_not::i#3 ← phi( bool_not::@1/(byte) bool_not::i#2 )
  *((byte*) bool_not::screen#0 + (byte) bool_not::i#3) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1
  (byte) bool_not::i#4 ← phi( bool_not::@1/(byte) bool_not::i#2 )
  *((byte*) bool_not::screen#0 + (byte) bool_not::i#4) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  (byte) bool_not::i#5 ← phi( bool_not::@2/(byte) bool_not::i#3 bool_not::@4/(byte) bool_not::i#4 )
  (byte) bool_not::i#1 ← (byte) bool_not::i#5 + rangenext(0,$14)
  (bool~) bool_not::$5 ← (byte) bool_not::i#1 != rangelast(0,$14)
  if((bool~) bool_not::$5) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  (byte*) bool_complex::screen#0 ← ((byte*)) (number) $478
  (byte) bool_complex::i#0 ← (byte) 0
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  (byte) bool_complex::i#2 ← phi( bool_complex/(byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  (bool~) bool_complex::$0 ← (byte) bool_complex::i#2 < (number) $a
  (bool) bool_complex::o1#0 ← (bool~) bool_complex::$0
  (number~) bool_complex::$1 ← (byte) bool_complex::i#2 & (number) 1
  (bool~) bool_complex::$2 ← (number~) bool_complex::$1 == (number) 0
  (bool) bool_complex::o2#0 ← (bool~) bool_complex::$2
  (bool~) bool_complex::$3 ← (bool) bool_complex::o1#0 && (bool) bool_complex::o2#0
  (bool) bool_complex::o3#0 ← (bool~) bool_complex::$3
  (bool~) bool_complex::$4 ← (bool) bool_complex::o1#0 || (bool) bool_complex::o2#0
  (bool~) bool_complex::$5 ← ! (bool~) bool_complex::$4
  (bool) bool_complex::o4#0 ← (bool~) bool_complex::$5
  (bool~) bool_complex::$6 ← (bool) bool_complex::o3#0 || (bool) bool_complex::o4#0
  (bool) bool_complex::o5#0 ← (bool~) bool_complex::$6
  if((bool) bool_complex::o5#0) goto bool_complex::@2
  to:bool_complex::@4
bool_complex::@2: scope:[bool_complex]  from bool_complex::@1
  (byte) bool_complex::i#3 ← phi( bool_complex::@1/(byte) bool_complex::i#2 )
  *((byte*) bool_complex::screen#0 + (byte) bool_complex::i#3) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@1
  (byte) bool_complex::i#4 ← phi( bool_complex::@1/(byte) bool_complex::i#2 )
  *((byte*) bool_complex::screen#0 + (byte) bool_complex::i#4) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  (byte) bool_complex::i#5 ← phi( bool_complex::@2/(byte) bool_complex::i#3 bool_complex::@4/(byte) bool_complex::i#4 )
  (byte) bool_complex::i#1 ← (byte) bool_complex::i#5 + rangenext(0,$14)
  (bool~) bool_complex::$7 ← (byte) bool_complex::i#1 != rangelast(0,$14)
  if((bool~) bool_complex::$7) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  return 
  to:@return
@5: scope:[]  from @begin
  call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

SYMBOL TABLE SSA
(label) @5
(label) @6
(label) @begin
(label) @end
(void()) bool_and()
(bool~) bool_and::$0
(number~) bool_and::$1
(bool~) bool_and::$2
(bool~) bool_and::$3
(bool~) bool_and::$4
(label) bool_and::@1
(label) bool_and::@2
(label) bool_and::@3
(label) bool_and::@4
(label) bool_and::@return
(byte) bool_and::i
(byte) bool_and::i#0
(byte) bool_and::i#1
(byte) bool_and::i#2
(byte) bool_and::i#3
(byte) bool_and::i#4
(byte) bool_and::i#5
(bool) bool_and::o1
(bool) bool_and::o1#0
(bool) bool_and::o2
(bool) bool_and::o2#0
(bool) bool_and::o3
(bool) bool_and::o3#0
(byte*) bool_and::screen
(byte*) bool_and::screen#0
(void()) bool_complex()
(bool~) bool_complex::$0
(number~) bool_complex::$1
(bool~) bool_complex::$2
(bool~) bool_complex::$3
(bool~) bool_complex::$4
(bool~) bool_complex::$5
(bool~) bool_complex::$6
(bool~) bool_complex::$7
(label) bool_complex::@1
(label) bool_complex::@2
(label) bool_complex::@3
(label) bool_complex::@4
(label) bool_complex::@return
(byte) bool_complex::i
(byte) bool_complex::i#0
(byte) bool_complex::i#1
(byte) bool_complex::i#2
(byte) bool_complex::i#3
(byte) bool_complex::i#4
(byte) bool_complex::i#5
(bool) bool_complex::o1
(bool) bool_complex::o1#0
(bool) bool_complex::o2
(bool) bool_complex::o2#0
(bool) bool_complex::o3
(bool) bool_complex::o3#0
(bool) bool_complex::o4
(bool) bool_complex::o4#0
(bool) bool_complex::o5
(bool) bool_complex::o5#0
(byte*) bool_complex::screen
(byte*) bool_complex::screen#0
(void()) bool_not()
(bool~) bool_not::$0
(number~) bool_not::$1
(bool~) bool_not::$2
(bool~) bool_not::$3
(bool~) bool_not::$4
(bool~) bool_not::$5
(label) bool_not::@1
(label) bool_not::@2
(label) bool_not::@3
(label) bool_not::@4
(label) bool_not::@return
(byte) bool_not::i
(byte) bool_not::i#0
(byte) bool_not::i#1
(byte) bool_not::i#2
(byte) bool_not::i#3
(byte) bool_not::i#4
(byte) bool_not::i#5
(bool) bool_not::o1
(bool) bool_not::o1#0
(bool) bool_not::o2
(bool) bool_not::o2#0
(bool) bool_not::o3
(bool) bool_not::o3#0
(byte*) bool_not::screen
(byte*) bool_not::screen#0
(void()) bool_or()
(bool~) bool_or::$0
(number~) bool_or::$1
(bool~) bool_or::$2
(bool~) bool_or::$3
(bool~) bool_or::$4
(label) bool_or::@1
(label) bool_or::@2
(label) bool_or::@3
(label) bool_or::@4
(label) bool_or::@return
(byte) bool_or::i
(byte) bool_or::i#0
(byte) bool_or::i#1
(byte) bool_or::i#2
(byte) bool_or::i#3
(byte) bool_or::i#4
(byte) bool_or::i#5
(bool) bool_or::o1
(bool) bool_or::o1#0
(bool) bool_or::o2
(bool) bool_or::o2#0
(bool) bool_or::o3
(bool) bool_or::o3#0
(byte*) bool_or::screen
(byte*) bool_or::screen#0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return

Adding number conversion cast (unumber) $a in (bool~) bool_and::$0 ← (byte) bool_and::i#2 < (number) $a
Adding number conversion cast (unumber) 1 in (number~) bool_and::$1 ← (byte) bool_and::i#2 & (number) 1
Adding number conversion cast (unumber) bool_and::$1 in (number~) bool_and::$1 ← (byte) bool_and::i#2 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) bool_and::$2 ← (unumber~) bool_and::$1 == (number) 0
Adding number conversion cast (unumber) $a in (bool~) bool_or::$0 ← (byte) bool_or::i#2 < (number) $a
Adding number conversion cast (unumber) 1 in (number~) bool_or::$1 ← (byte) bool_or::i#2 & (number) 1
Adding number conversion cast (unumber) bool_or::$1 in (number~) bool_or::$1 ← (byte) bool_or::i#2 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) bool_or::$2 ← (unumber~) bool_or::$1 == (number) 0
Adding number conversion cast (unumber) $a in (bool~) bool_not::$0 ← (byte) bool_not::i#2 < (number) $a
Adding number conversion cast (unumber) 1 in (number~) bool_not::$1 ← (byte) bool_not::i#2 & (number) 1
Adding number conversion cast (unumber) bool_not::$1 in (number~) bool_not::$1 ← (byte) bool_not::i#2 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) bool_not::$2 ← (unumber~) bool_not::$1 == (number) 0
Adding number conversion cast (unumber) $a in (bool~) bool_complex::$0 ← (byte) bool_complex::i#2 < (number) $a
Adding number conversion cast (unumber) 1 in (number~) bool_complex::$1 ← (byte) bool_complex::i#2 & (number) 1
Adding number conversion cast (unumber) bool_complex::$1 in (number~) bool_complex::$1 ← (byte) bool_complex::i#2 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) bool_complex::$2 ← (unumber~) bool_complex::$1 == (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) bool_and::screen#0 ← (byte*)(number) $400
Inlining cast (byte*) bool_or::screen#0 ← (byte*)(number) $428
Inlining cast (byte*) bool_not::screen#0 ← (byte*)(number) $450
Inlining cast (byte*) bool_complex::screen#0 ← (byte*)(number) $478
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1064
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1104
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1144
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
Inferred type updated to byte in (unumber~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
Inferred type updated to byte in (unumber~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
Inferred type updated to byte in (unumber~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
Alias (bool) bool_and::o1#0 = (bool~) bool_and::$0 
Alias (bool) bool_and::o2#0 = (bool~) bool_and::$2 
Alias (bool) bool_and::o3#0 = (bool~) bool_and::$3 
Alias (byte) bool_and::i#2 = (byte) bool_and::i#3 (byte) bool_and::i#4 
Alias (bool) bool_or::o1#0 = (bool~) bool_or::$0 
Alias (bool) bool_or::o2#0 = (bool~) bool_or::$2 
Alias (bool) bool_or::o3#0 = (bool~) bool_or::$3 
Alias (byte) bool_or::i#2 = (byte) bool_or::i#3 (byte) bool_or::i#4 
Alias (bool) bool_not::o1#0 = (bool~) bool_not::$0 
Alias (bool) bool_not::o2#0 = (bool~) bool_not::$2 
Alias (bool) bool_not::o3#0 = (bool~) bool_not::$4 
Alias (byte) bool_not::i#2 = (byte) bool_not::i#3 (byte) bool_not::i#4 
Alias (bool) bool_complex::o1#0 = (bool~) bool_complex::$0 
Alias (bool) bool_complex::o2#0 = (bool~) bool_complex::$2 
Alias (bool) bool_complex::o3#0 = (bool~) bool_complex::$3 
Alias (bool) bool_complex::o4#0 = (bool~) bool_complex::$5 
Alias (bool) bool_complex::o5#0 = (bool~) bool_complex::$6 
Alias (byte) bool_complex::i#2 = (byte) bool_complex::i#3 (byte) bool_complex::i#4 
Successful SSA optimization Pass2AliasElimination
Alias (byte) bool_and::i#2 = (byte) bool_and::i#5 
Alias (byte) bool_or::i#2 = (byte) bool_or::i#5 
Alias (byte) bool_not::i#2 = (byte) bool_not::i#5 
Alias (byte) bool_complex::i#2 = (byte) bool_complex::i#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) bool_and::$4 [23] if((byte) bool_and::i#1!=rangelast(0,$14)) goto bool_and::@1
Simple Condition (bool~) bool_or::$4 [43] if((byte) bool_or::i#1!=rangelast(0,$14)) goto bool_or::@1
Simple Condition (bool~) bool_not::$5 [64] if((byte) bool_not::i#1!=rangelast(0,$14)) goto bool_not::@1
Simple Condition (bool~) bool_complex::$7 [89] if((byte) bool_complex::i#1!=rangelast(0,$14)) goto bool_complex::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [13] (bool) bool_and::o3#0 ← (bool) bool_and::o1#0 && (bool) bool_and::o2#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [33] (bool) bool_or::o3#0 ← (bool) bool_or::o1#0 || (bool) bool_or::o2#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting ! if()-condition to reversed if() [54] (bool) bool_not::o3#0 ← ! (bool~) bool_not::$3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [53] (bool~) bool_not::$3 ← (bool) bool_not::o1#0 || (bool) bool_not::o2#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [79] (bool) bool_complex::o5#0 ← (bool) bool_complex::o3#0 || (bool) bool_complex::o4#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting && if()-condition to two if()s [74] (bool) bool_complex::o3#0 ← (bool) bool_complex::o1#0 && (bool) bool_complex::o2#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting ! if()-condition to reversed if() [77] (bool) bool_complex::o4#0 ← ! (bool~) bool_complex::$4
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [76] (bool~) bool_complex::$4 ← (bool) bool_complex::o1#0 || (bool) bool_complex::o2#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte*) bool_and::screen#0 = (byte*) 1024
Constant (const byte) bool_and::i#0 = 0
Constant (const byte*) bool_or::screen#0 = (byte*) 1064
Constant (const byte) bool_or::i#0 = 0
Constant (const byte*) bool_not::screen#0 = (byte*) 1104
Constant (const byte) bool_not::i#0 = 0
Constant (const byte*) bool_complex::screen#0 = (byte*) 1144
Constant (const byte) bool_complex::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [21] bool_and::i#1 ← ++ bool_and::i#2 to ++
Resolved ranged comparison value [23] if(bool_and::i#1!=rangelast(0,$14)) goto bool_and::@1 to (number) $15
Resolved ranged next value [41] bool_or::i#1 ← ++ bool_or::i#2 to ++
Resolved ranged comparison value [43] if(bool_or::i#1!=rangelast(0,$14)) goto bool_or::@1 to (number) $15
Resolved ranged next value [62] bool_not::i#1 ← ++ bool_not::i#2 to ++
Resolved ranged comparison value [64] if(bool_not::i#1!=rangelast(0,$14)) goto bool_not::@1 to (number) $15
Resolved ranged next value [87] bool_complex::i#1 ← ++ bool_complex::i#2 to ++
Resolved ranged comparison value [89] if(bool_complex::i#1!=rangelast(0,$14)) goto bool_complex::@1 to (number) $15
Adding number conversion cast (unumber) $15 in if((byte) bool_and::i#1!=(number) $15) goto bool_and::@1
Adding number conversion cast (unumber) $15 in if((byte) bool_or::i#1!=(number) $15) goto bool_or::@1
Adding number conversion cast (unumber) $15 in if((byte) bool_not::i#1!=(number) $15) goto bool_not::@1
Adding number conversion cast (unumber) $15 in if((byte) bool_complex::i#1!=(number) $15) goto bool_complex::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $15
Simplifying constant integer cast $15
Simplifying constant integer cast $15
Simplifying constant integer cast $15
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $15
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool) bool_and::o1#0 [9] if((byte) bool_and::i#2<(byte) $a) goto bool_and::@7
Simple Condition (bool) bool_or::o1#0 [19] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
Simple Condition (bool) bool_not::o1#0 [29] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
Simple Condition (bool) bool_and::o2#0 [46] if((byte~) bool_and::$1==(byte) 0) goto bool_and::@2
Simple Condition (bool) bool_or::o2#0 [47] if((byte~) bool_or::$1==(byte) 0) goto bool_or::@2
Simple Condition (bool) bool_not::o2#0 [48] if((byte~) bool_not::$1==(byte) 0) goto bool_not::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [9] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
GRAPH (NEW VERSIONS for bool_and::i#2)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1
bool_and::@1: scope:[bool_and]  from bool_and bool_and::@3
  [5] (byte) bool_and::i#2 ← phi( bool_and/(const byte) bool_and::i#0 bool_and::@3/(byte) bool_and::i#1 )
  [6] (byte~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
  [7] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#6 ← phi( )
  [8] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#6) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@7
  (byte) bool_and::i#7 ← phi( )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#8 ← phi( )
  [10] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [11] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [12] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1
bool_or::@1: scope:[bool_or]  from bool_or bool_or::@3
  [13] (byte) bool_or::i#2 ← phi( bool_or/(const byte) bool_or::i#0 bool_or::@3/(byte) bool_or::i#1 )
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
  [15] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@7
  [16] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#2) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#2) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  [18] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#2
  [19] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [20] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  [21] (byte) bool_not::i#2 ← phi( bool_not/(const byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  [22] (byte~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
  [23] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  [24] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@7
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  [26] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#2
  [27] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [28] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [29] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [30] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [31] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [32] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [33] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [34] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [35] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [36] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [37] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [38] return 
  to:@return
@5: scope:[]  from @begin
  [39] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1
  [40] if((byte~) bool_and::$1==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1
  [41] if((byte~) bool_or::$1==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  [42] if((byte~) bool_not::$1==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [43] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [44] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [45] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2

GRAPH (NEW VERSIONS for bool_and::$1)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1
bool_and::@1: scope:[bool_and]  from bool_and bool_and::@3
  [5] (byte) bool_and::i#2 ← phi( bool_and/(const byte) bool_and::i#0 bool_and::@3/(byte) bool_and::i#1 )
  [6] (byte~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
  [7] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#6 ← phi( bool_and::@7/(byte) bool_and::i#9 )
  [8] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#6) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@7
  (byte) bool_and::i#7 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@7/(byte) bool_and::i#9 )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#6 bool_and::@4/(byte) bool_and::i#7 )
  [10] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [11] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [12] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1
bool_or::@1: scope:[bool_or]  from bool_or bool_or::@3
  [13] (byte) bool_or::i#2 ← phi( bool_or/(const byte) bool_or::i#0 bool_or::@3/(byte) bool_or::i#1 )
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
  [15] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@7
  [16] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#2) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#2) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  [18] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#2
  [19] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [20] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  [21] (byte) bool_not::i#2 ← phi( bool_not/(const byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  [22] (byte~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
  [23] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  [24] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@7
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  [26] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#2
  [27] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [28] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [29] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [30] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [31] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [32] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [33] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [34] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [35] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [36] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [37] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [38] return 
  to:@return
@5: scope:[]  from @begin
  [39] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1
  (var) bool_and::$5 ← phi( )
  (byte) bool_and::i#9 ← phi( bool_and::@1/(byte) bool_and::i#2 )
  [40] if((var) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1
  [41] if((byte~) bool_or::$1==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  [42] if((byte~) bool_not::$1==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [43] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [44] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [45] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2

Successful SSA optimization Pass2LoopHeadConstantIdentification
GRAPH (NEW VERSIONS for bool_or::i#2)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1_1
bool_and::@1: scope:[bool_and]  from bool_and::@3
  [5] (byte) bool_and::i#2 ← phi( bool_and::@3/(byte) bool_and::i#1 )
  [6] (byte~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
  [7] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#6 ← phi( bool_and::@7/(byte) bool_and::i#9 )
  [8] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#6) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@1_1 bool_and::@7
  (byte) bool_and::i#7 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 bool_and::@7/(byte) bool_and::i#9 )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#6 bool_and::@4/(byte) bool_and::i#7 )
  [10] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [11] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [12] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1
bool_or::@1: scope:[bool_or]  from bool_or bool_or::@3
  [13] (byte) bool_or::i#2 ← phi( bool_or/(const byte) bool_or::i#0 bool_or::@3/(byte) bool_or::i#1 )
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
  [15] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@7
  (byte) bool_or::i#6 ← phi( )
  [16] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  (byte) bool_or::i#7 ← phi( )
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#7) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  (byte) bool_or::i#8 ← phi( )
  [18] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8
  [19] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [20] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  [21] (byte) bool_not::i#2 ← phi( bool_not/(const byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  [22] (byte~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
  [23] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  [24] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@7
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  [26] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#2
  [27] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [28] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [29] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [30] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [31] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [32] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [33] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [34] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [35] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [36] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [37] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [38] return 
  to:@return
@5: scope:[]  from @begin
  [39] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1 bool_and::@1_1
  (var) bool_and::$5 ← phi( bool_and::@1/(byte~) bool_and::$1 bool_and::@1_1/(byte~) bool_and::$6 )
  (byte) bool_and::i#9 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 )
  [40] if((var) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1
  [41] if((byte~) bool_or::$1==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  [42] if((byte~) bool_not::$1==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [43] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [44] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [45] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2
bool_and::@1_1: scope:[bool_and]  from bool_and
  (byte) bool_and::i#10 ← phi( bool_and/(const byte) bool_and::i#0 )
  (byte~) bool_and::$6 ← (byte) bool_and::i#10 & (byte) 1
  if((byte) bool_and::i#10>=(byte) $a) goto bool_and::@4
  to:bool_and::@7

GRAPH (NEW VERSIONS for bool_or::$1)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1_1
bool_and::@1: scope:[bool_and]  from bool_and::@3
  [5] (byte) bool_and::i#2 ← phi( bool_and::@3/(byte) bool_and::i#1 )
  [6] (byte~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
  [7] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#6 ← phi( bool_and::@7/(byte) bool_and::i#9 )
  [8] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#6) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@1_1 bool_and::@7
  (byte) bool_and::i#7 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 bool_and::@7/(byte) bool_and::i#9 )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#6 bool_and::@4/(byte) bool_and::i#7 )
  [10] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [11] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [12] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1
bool_or::@1: scope:[bool_or]  from bool_or bool_or::@3
  [13] (byte) bool_or::i#2 ← phi( bool_or/(const byte) bool_or::i#0 bool_or::@3/(byte) bool_or::i#1 )
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
  [15] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@7
  (byte) bool_or::i#6 ← phi( bool_or::@1/(byte) bool_or::i#2 bool_or::@7/(byte) bool_or::i#9 )
  [16] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  (byte) bool_or::i#7 ← phi( bool_or::@7/(byte) bool_or::i#9 )
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#7) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  (byte) bool_or::i#8 ← phi( bool_or::@2/(byte) bool_or::i#6 bool_or::@4/(byte) bool_or::i#7 )
  [18] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8
  [19] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [20] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  [21] (byte) bool_not::i#2 ← phi( bool_not/(const byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  [22] (byte~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
  [23] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  [24] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@7
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#2) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  [26] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#2
  [27] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [28] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [29] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [30] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [31] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [32] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [33] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [34] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [35] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [36] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [37] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [38] return 
  to:@return
@5: scope:[]  from @begin
  [39] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1 bool_and::@1_1
  (var) bool_and::$5 ← phi( bool_and::@1/(byte~) bool_and::$1 bool_and::@1_1/(byte~) bool_and::$6 )
  (byte) bool_and::i#9 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 )
  [40] if((var) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1
  (var) bool_or::$5 ← phi( )
  (byte) bool_or::i#9 ← phi( bool_or::@1/(byte) bool_or::i#2 )
  [41] if((var) bool_or::$5==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  [42] if((byte~) bool_not::$1==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [43] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [44] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [45] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2
bool_and::@1_1: scope:[bool_and]  from bool_and
  (byte) bool_and::i#10 ← phi( bool_and/(const byte) bool_and::i#0 )
  (byte~) bool_and::$6 ← (byte) bool_and::i#10 & (byte) 1
  if((byte) bool_and::i#10>=(byte) $a) goto bool_and::@4
  to:bool_and::@7

Successful SSA optimization Pass2LoopHeadConstantIdentification
GRAPH (NEW VERSIONS for bool_not::i#2)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1_1
bool_and::@1: scope:[bool_and]  from bool_and::@3
  [5] (byte) bool_and::i#2 ← phi( bool_and::@3/(byte) bool_and::i#1 )
  [6] (byte~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
  [7] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#6 ← phi( bool_and::@7/(byte) bool_and::i#9 )
  [8] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#6) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@1_1 bool_and::@7
  (byte) bool_and::i#7 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 bool_and::@7/(byte) bool_and::i#9 )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#6 bool_and::@4/(byte) bool_and::i#7 )
  [10] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [11] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [12] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1_1
bool_or::@1: scope:[bool_or]  from bool_or::@3
  [13] (byte) bool_or::i#2 ← phi( bool_or::@3/(byte) bool_or::i#1 )
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
  [15] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@1_1 bool_or::@7
  (byte) bool_or::i#6 ← phi( bool_or::@1/(byte) bool_or::i#2 bool_or::@1_1/(byte) bool_or::i#10 bool_or::@7/(byte) bool_or::i#9 )
  [16] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  (byte) bool_or::i#7 ← phi( bool_or::@7/(byte) bool_or::i#9 )
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#7) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  (byte) bool_or::i#8 ← phi( bool_or::@2/(byte) bool_or::i#6 bool_or::@4/(byte) bool_or::i#7 )
  [18] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8
  [19] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [20] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  [21] (byte) bool_not::i#2 ← phi( bool_not/(const byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  [22] (byte~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
  [23] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  (byte) bool_not::i#6 ← phi( )
  [24] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#6) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@7
  (byte) bool_not::i#7 ← phi( )
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  (byte) bool_not::i#8 ← phi( )
  [26] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8
  [27] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [28] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [29] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [30] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [31] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [32] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [33] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [34] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [35] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [36] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [37] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [38] return 
  to:@return
@5: scope:[]  from @begin
  [39] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1 bool_and::@1_1
  (var) bool_and::$5 ← phi( bool_and::@1/(byte~) bool_and::$1 bool_and::@1_1/(byte~) bool_and::$6 )
  (byte) bool_and::i#9 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 )
  [40] if((var) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1 bool_or::@1_1
  (var) bool_or::$5 ← phi( bool_or::@1/(byte~) bool_or::$1 bool_or::@1_1/(byte~) bool_or::$6 )
  (byte) bool_or::i#9 ← phi( bool_or::@1/(byte) bool_or::i#2 bool_or::@1_1/(byte) bool_or::i#10 )
  [41] if((var) bool_or::$5==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  [42] if((byte~) bool_not::$1==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [43] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [44] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [45] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2
bool_and::@1_1: scope:[bool_and]  from bool_and
  (byte) bool_and::i#10 ← phi( bool_and/(const byte) bool_and::i#0 )
  (byte~) bool_and::$6 ← (byte) bool_and::i#10 & (byte) 1
  if((byte) bool_and::i#10>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_or::@1_1: scope:[bool_or]  from bool_or
  (byte) bool_or::i#10 ← phi( bool_or/(const byte) bool_or::i#0 )
  (byte~) bool_or::$6 ← (byte) bool_or::i#10 & (byte) 1
  if((byte) bool_or::i#10<(byte) $a) goto bool_or::@2
  to:bool_or::@7

GRAPH (NEW VERSIONS for bool_not::$1)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1_1
bool_and::@1: scope:[bool_and]  from bool_and::@3
  [5] (byte) bool_and::i#2 ← phi( bool_and::@3/(byte) bool_and::i#1 )
  [6] (byte~) bool_and::$1 ← (byte) bool_and::i#2 & (byte) 1
  [7] if((byte) bool_and::i#2>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#6 ← phi( bool_and::@7/(byte) bool_and::i#9 )
  [8] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#6) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@1_1 bool_and::@7
  (byte) bool_and::i#7 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 bool_and::@7/(byte) bool_and::i#9 )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#6 bool_and::@4/(byte) bool_and::i#7 )
  [10] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [11] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [12] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1_1
bool_or::@1: scope:[bool_or]  from bool_or::@3
  [13] (byte) bool_or::i#2 ← phi( bool_or::@3/(byte) bool_or::i#1 )
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#2 & (byte) 1
  [15] if((byte) bool_or::i#2<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@1_1 bool_or::@7
  (byte) bool_or::i#6 ← phi( bool_or::@1/(byte) bool_or::i#2 bool_or::@1_1/(byte) bool_or::i#10 bool_or::@7/(byte) bool_or::i#9 )
  [16] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  (byte) bool_or::i#7 ← phi( bool_or::@7/(byte) bool_or::i#9 )
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#7) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  (byte) bool_or::i#8 ← phi( bool_or::@2/(byte) bool_or::i#6 bool_or::@4/(byte) bool_or::i#7 )
  [18] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8
  [19] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [20] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1
bool_not::@1: scope:[bool_not]  from bool_not bool_not::@3
  [21] (byte) bool_not::i#2 ← phi( bool_not/(const byte) bool_not::i#0 bool_not::@3/(byte) bool_not::i#1 )
  [22] (byte~) bool_not::$1 ← (byte) bool_not::i#2 & (byte) 1
  [23] if((byte) bool_not::i#2<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  (byte) bool_not::i#6 ← phi( bool_not::@7/(byte) bool_not::i#9 )
  [24] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#6) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@7
  (byte) bool_not::i#7 ← phi( bool_not::@1/(byte) bool_not::i#2 bool_not::@7/(byte) bool_not::i#9 )
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  (byte) bool_not::i#8 ← phi( bool_not::@2/(byte) bool_not::i#6 bool_not::@4/(byte) bool_not::i#7 )
  [26] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8
  [27] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [28] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [29] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [30] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [31] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [32] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [33] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [34] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [35] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [36] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [37] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [38] return 
  to:@return
@5: scope:[]  from @begin
  [39] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1 bool_and::@1_1
  (var) bool_and::$5 ← phi( bool_and::@1/(byte~) bool_and::$1 bool_and::@1_1/(byte~) bool_and::$6 )
  (byte) bool_and::i#9 ← phi( bool_and::@1/(byte) bool_and::i#2 bool_and::@1_1/(byte) bool_and::i#10 )
  [40] if((var) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1 bool_or::@1_1
  (var) bool_or::$5 ← phi( bool_or::@1/(byte~) bool_or::$1 bool_or::@1_1/(byte~) bool_or::$6 )
  (byte) bool_or::i#9 ← phi( bool_or::@1/(byte) bool_or::i#2 bool_or::@1_1/(byte) bool_or::i#10 )
  [41] if((var) bool_or::$5==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  (var) bool_not::$6 ← phi( )
  (byte) bool_not::i#9 ← phi( bool_not::@1/(byte) bool_not::i#2 )
  [42] if((var) bool_not::$6==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [43] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [44] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [45] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2
bool_and::@1_1: scope:[bool_and]  from bool_and
  (byte) bool_and::i#10 ← phi( bool_and/(const byte) bool_and::i#0 )
  (byte~) bool_and::$6 ← (byte) bool_and::i#10 & (byte) 1
  if((byte) bool_and::i#10>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_or::@1_1: scope:[bool_or]  from bool_or
  (byte) bool_or::i#10 ← phi( bool_or/(const byte) bool_or::i#0 )
  (byte~) bool_or::$6 ← (byte) bool_or::i#10 & (byte) 1
  if((byte) bool_or::i#10<(byte) $a) goto bool_or::@2
  to:bool_or::@7

Successful SSA optimization Pass2LoopHeadConstantIdentification
Alias (byte) bool_and::i#1 = (byte) bool_and::i#2 
Alias (byte) bool_and::i#6 = (byte) bool_and::i#9 
Alias (byte) bool_or::i#1 = (byte) bool_or::i#2 
Alias (byte) bool_or::i#7 = (byte) bool_or::i#9 
Alias (byte) bool_not::i#1 = (byte) bool_not::i#2 
Alias (byte) bool_not::i#6 = (byte) bool_not::i#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) bool_and::i#10 (const byte) bool_and::i#0
Identical Phi Values (byte) bool_or::i#10 (const byte) bool_or::i#0
Identical Phi Values (byte) bool_not::i#10 (const byte) bool_not::i#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [59] (byte~) bool_and::$6 ← (const byte) bool_and::i#0 & (byte) 1
Constant right-side identified [62] (byte~) bool_or::$6 ← (const byte) bool_or::i#0 & (byte) 1
Constant right-side identified [65] (byte~) bool_not::$7 ← (const byte) bool_not::i#0 & (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) bool_and::$6 = bool_and::i#0&1
Constant (const byte) bool_or::$6 = bool_or::i#0&1
Constant (const byte) bool_not::$7 = bool_not::i#0&1
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (bool_and::@1_1) in block bool_and::@4
if() condition always false - eliminating [60] if((const byte) bool_and::i#0>=(byte) $a) goto bool_and::@4
Removing PHI-reference to removed block (bool_or::@1_1) in block bool_or::@7
Removing PHI-reference to removed block (bool_or::@1_1) in block bool_or::@7
if() condition always true - replacing block destination [63] if((const byte) bool_or::i#0<(byte) $a) goto bool_or::@2
Removing PHI-reference to removed block (bool_not::@1_1) in block bool_not::@7
Removing PHI-reference to removed block (bool_not::@1_1) in block bool_not::@7
if() condition always true - replacing block destination [66] if((const byte) bool_not::i#0<(byte) $a) goto bool_not::@4
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (const byte) bool_and::i#0&(byte) 1 in 
Simplifying constant evaluating to zero (const byte) bool_or::i#0&(byte) 1 in 
Simplifying constant evaluating to zero (const byte) bool_not::i#0&(byte) 1 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const byte) bool_or::$6
Eliminating unused constant (const byte) bool_not::$7
Successful SSA optimization PassNEliminateUnusedVars
GRAPH (NEW VERSIONS for bool_and::i#6)
@begin: scope:[]  from
  to:@5
main: scope:[main]  from @5
  [0] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [1] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] call bool_complex 
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  [4] return 
  to:@return
bool_and: scope:[bool_and]  from main
  to:bool_and::@1_1
bool_and::@1: scope:[bool_and]  from bool_and::@3
  [5] (byte~) bool_and::$1 ← (byte) bool_and::i#1 & (byte) 1
  [6] if((byte) bool_and::i#1>=(byte) $a) goto bool_and::@4
  to:bool_and::@7
bool_and::@2: scope:[bool_and]  from bool_and::@7
  (byte) bool_and::i#11 ← phi( )
  [7] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*'
  to:bool_and::@3
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@7
  [8] (byte) bool_and::i#7 ← phi( bool_and::@1/(byte) bool_and::i#1 bool_and::@7/(byte) bool_and::i#6 )
  [9] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#7) ← (byte) ' '
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  [10] (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#11 bool_and::@4/(byte) bool_and::i#7 )
  [11] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [12] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [13] return 
  to:@return
bool_or: scope:[bool_or]  from main::@1
  to:bool_or::@1_1
bool_or::@1: scope:[bool_or]  from bool_or::@3
  [14] (byte~) bool_or::$1 ← (byte) bool_or::i#1 & (byte) 1
  [15] if((byte) bool_or::i#1<(byte) $a) goto bool_or::@2
  to:bool_or::@7
bool_or::@2: scope:[bool_or]  from bool_or::@1 bool_or::@1_1 bool_or::@7
  [16] (byte) bool_or::i#6 ← phi( bool_or::@1/(byte) bool_or::i#1 bool_or::@1_1/(const byte) bool_or::i#0 bool_or::@7/(byte) bool_or::i#7 )
  [17] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*'
  to:bool_or::@3
bool_or::@4: scope:[bool_or]  from bool_or::@7
  [18] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#7) ← (byte) ' '
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  [19] (byte) bool_or::i#8 ← phi( bool_or::@2/(byte) bool_or::i#6 bool_or::@4/(byte) bool_or::i#7 )
  [20] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8
  [21] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [22] return 
  to:@return
bool_not: scope:[bool_not]  from main::@2
  to:bool_not::@1_1
bool_not::@1: scope:[bool_not]  from bool_not::@3
  [23] (byte~) bool_not::$1 ← (byte) bool_not::i#1 & (byte) 1
  [24] if((byte) bool_not::i#1<(byte) $a) goto bool_not::@4
  to:bool_not::@7
bool_not::@2: scope:[bool_not]  from bool_not::@7
  [25] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#6) ← (byte) '*'
  to:bool_not::@3
bool_not::@4: scope:[bool_not]  from bool_not::@1 bool_not::@1_1 bool_not::@7
  [26] (byte) bool_not::i#7 ← phi( bool_not::@1/(byte) bool_not::i#1 bool_not::@1_1/(const byte) bool_not::i#0 bool_not::@7/(byte) bool_not::i#6 )
  [27] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  [28] (byte) bool_not::i#8 ← phi( bool_not::@2/(byte) bool_not::i#6 bool_not::@4/(byte) bool_not::i#7 )
  [29] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8
  [30] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [31] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [32] (byte) bool_complex::i#2 ← phi( bool_complex/(const byte) bool_complex::i#0 bool_complex::@3/(byte) bool_complex::i#1 )
  [33] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [34] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [35] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [36] if((bool) bool_complex::o1#0) goto bool_complex::@8
  to:bool_complex::@7
bool_complex::@2: scope:[bool_complex]  from bool_complex::@8 bool_complex::@9
  [37] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@4: scope:[bool_complex]  from bool_complex::@7 bool_complex::@9
  [38] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [39] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [40] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [41] return 
  to:@return
@5: scope:[]  from @begin
  [42] call main 
  to:@6
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6
bool_and::@7: scope:[bool_and]  from bool_and::@1 bool_and::@1_1
  [43] (byte~) bool_and::$5 ← phi( bool_and::@1/(byte~) bool_and::$1 bool_and::@1_1/(const byte) bool_and::$6 )
  [43] (byte) bool_and::i#6 ← phi( bool_and::@1/(byte) bool_and::i#1 bool_and::@1_1/(const byte) bool_and::i#0 )
  [44] if((byte~) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_or::@7: scope:[bool_or]  from bool_or::@1
  [45] (byte~) bool_or::$5 ← phi( bool_or::@1/(byte~) bool_or::$1 )
  [45] (byte) bool_or::i#7 ← phi( bool_or::@1/(byte) bool_or::i#1 )
  [46] if((byte~) bool_or::$5==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_not::@7: scope:[bool_not]  from bool_not::@1
  [47] (byte~) bool_not::$6 ← phi( bool_not::@1/(byte~) bool_not::$1 )
  [47] (byte) bool_not::i#6 ← phi( bool_not::@1/(byte) bool_not::i#1 )
  [48] if((byte~) bool_not::$6==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_complex::@7: scope:[bool_complex]  from bool_complex::@1 bool_complex::@8
  [49] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@9
bool_complex::@8: scope:[bool_complex]  from bool_complex::@1
  [50] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@7
bool_complex::@9: scope:[bool_complex]  from bool_complex::@7
  [51] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2
bool_and::@1_1: scope:[bool_and]  from bool_and
  to:bool_and::@7
bool_or::@1_1: scope:[bool_or]  from bool_or
  to:bool_or::@2
bool_not::@1_1: scope:[bool_not]  from bool_not
  to:bool_not::@4

Successful SSA optimization Pass2LoopHeadConstantIdentification
Alias (byte) bool_and::i#1 = (byte) bool_and::i#6 
Alias (byte~) bool_and::$5 = (byte~) bool_and::$1 
Alias (byte) bool_or::i#1 = (byte) bool_or::i#7 
Alias (byte~) bool_or::$5 = (byte~) bool_or::$1 
Alias (byte) bool_not::i#1 = (byte) bool_not::i#6 
Alias (byte~) bool_not::$6 = (byte~) bool_not::$1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) bool_and::i#12 (const byte) bool_and::i#0
Identical Phi Values (byte~) bool_and::$7 (const byte) bool_and::$6
Successful SSA optimization Pass2IdenticalPhiElimination
Removing PHI-reference to removed block (bool_and::@7_1) in block bool_and::@4
if() condition always true - replacing block destination [54] if((const byte) bool_and::$6==(byte) 0) goto bool_and::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) bool_and::$6
Successful SSA optimization PassNEliminateUnusedVars
Alias (byte) bool_and::i#1 = (byte) bool_and::i#7 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const byte) bool_and::i#0
Inlining constant with var siblings (const byte) bool_or::i#0
Inlining constant with var siblings (const byte) bool_not::i#0
Inlining constant with var siblings (const byte) bool_complex::i#0
Constant inlined bool_complex::i#0 = (byte) 0
Constant inlined bool_or::i#0 = (byte) 0
Constant inlined bool_not::i#0 = (byte) 0
Constant inlined bool_and::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting bool_and::@8(between bool_and::@7 and bool_and::@2)
Added new block during phi lifting bool_or::@8(between bool_or::@1 and bool_or::@2)
Added new block during phi lifting bool_or::@9(between bool_or::@7 and bool_or::@2)
Added new block during phi lifting bool_not::@8(between bool_not::@1 and bool_not::@4)
Added new block during phi lifting bool_not::@9(between bool_not::@7 and bool_not::@4)
Added new block during phi lifting bool_complex::@10(between bool_complex::@3 and bool_complex::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of bool_complex
Adding NOP phi() at start of bool_not
Adding NOP phi() at start of bool_not::@1_1
Adding NOP phi() at start of bool_or
Adding NOP phi() at start of bool_or::@1_1
Adding NOP phi() at start of bool_and
Adding NOP phi() at start of bool_and::@1_1
Adding NOP phi() at start of bool_and::@7_1
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to bool_and:6 bool_or:8 bool_not:10 bool_complex:12 

Created 7 initial phi equivalence classes
Coalesced [28] bool_complex::i#6 ← bool_complex::i#1
Coalesced [34] bool_not::i#14 ← bool_not::i#7
Coalesced [43] bool_not::i#13 ← bool_not::i#1
Coalesced (already) [44] bool_not::i#12 ← bool_not::i#1
Coalesced (already) [45] bool_not::i#11 ← bool_not::i#1
Coalesced [50] bool_or::i#13 ← bool_or::i#6
Coalesced [59] bool_or::i#14 ← bool_or::i#1
Coalesced (already) [60] bool_or::i#12 ← bool_or::i#1
Coalesced (already) [61] bool_or::i#11 ← bool_or::i#1
Coalesced [67] bool_and::i#14 ← bool_and::i#11
Coalesced [76] bool_and::i#15 ← bool_and::i#1
Coalesced (already) [77] bool_and::i#13 ← bool_and::i#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) @6
Culled Empty Block (label) main::@4
Culled Empty Block (label) bool_complex::@10
Culled Empty Block (label) bool_not::@1_1
Culled Empty Block (label) bool_not::@9
Culled Empty Block (label) bool_not::@8
Culled Empty Block (label) bool_or::@1_1
Culled Empty Block (label) bool_or::@9
Culled Empty Block (label) bool_or::@8
Culled Empty Block (label) bool_and::@1_1
Culled Empty Block (label) bool_and::@7_1
Culled Empty Block (label) bool_and::@8
Renumbering block @5 to @1
Renumbering block bool_and::@7 to bool_and::@5
Renumbering block bool_or::@7 to bool_or::@5
Renumbering block bool_not::@7 to bool_not::@5
Renumbering block bool_complex::@7 to bool_complex::@5
Renumbering block bool_complex::@8 to bool_complex::@6
Renumbering block bool_complex::@9 to bool_complex::@7
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of bool_complex
Adding NOP phi() at start of bool_not
Adding NOP phi() at start of bool_or
Adding NOP phi() at start of bool_and

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call bool_and 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call bool_or 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call bool_not 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call bool_complex 
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return
bool_complex: scope:[bool_complex]  from main::@3
  [13] phi()
  to:bool_complex::@1
bool_complex::@1: scope:[bool_complex]  from bool_complex bool_complex::@3
  [14] (byte) bool_complex::i#2 ← phi( bool_complex/(byte) 0 bool_complex::@3/(byte) bool_complex::i#1 )
  [15] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a
  [16] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1
  [17] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0
  [18] if((bool) bool_complex::o1#0) goto bool_complex::@6
  to:bool_complex::@5
bool_complex::@6: scope:[bool_complex]  from bool_complex::@1
  [19] if((bool) bool_complex::o2#0) goto bool_complex::@2
  to:bool_complex::@5
bool_complex::@5: scope:[bool_complex]  from bool_complex::@1 bool_complex::@6
  [20] if((bool) bool_complex::o1#0) goto bool_complex::@4
  to:bool_complex::@7
bool_complex::@7: scope:[bool_complex]  from bool_complex::@5
  [21] if((bool) bool_complex::o2#0) goto bool_complex::@4
  to:bool_complex::@2
bool_complex::@2: scope:[bool_complex]  from bool_complex::@6 bool_complex::@7
  [22] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*'
  to:bool_complex::@3
bool_complex::@3: scope:[bool_complex]  from bool_complex::@2 bool_complex::@4
  [23] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2
  [24] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1
  to:bool_complex::@return
bool_complex::@return: scope:[bool_complex]  from bool_complex::@3
  [25] return 
  to:@return
bool_complex::@4: scope:[bool_complex]  from bool_complex::@5 bool_complex::@7
  [26] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' '
  to:bool_complex::@3
bool_not: scope:[bool_not]  from main::@2
  [27] phi()
  to:bool_not::@4
bool_not::@4: scope:[bool_not]  from bool_not bool_not::@1 bool_not::@5
  [28] (byte) bool_not::i#7 ← phi( bool_not::@1/(byte) bool_not::i#1 bool_not/(byte) 0 bool_not::@5/(byte) bool_not::i#1 )
  [29] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' '
  to:bool_not::@3
bool_not::@3: scope:[bool_not]  from bool_not::@2 bool_not::@4
  [30] (byte) bool_not::i#8 ← phi( bool_not::@2/(byte) bool_not::i#1 bool_not::@4/(byte) bool_not::i#7 )
  [31] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8
  [32] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1
  to:bool_not::@return
bool_not::@return: scope:[bool_not]  from bool_not::@3
  [33] return 
  to:@return
bool_not::@1: scope:[bool_not]  from bool_not::@3
  [34] (byte~) bool_not::$6 ← (byte) bool_not::i#1 & (byte) 1
  [35] if((byte) bool_not::i#1<(byte) $a) goto bool_not::@4
  to:bool_not::@5
bool_not::@5: scope:[bool_not]  from bool_not::@1
  [36] if((byte~) bool_not::$6==(byte) 0) goto bool_not::@4
  to:bool_not::@2
bool_not::@2: scope:[bool_not]  from bool_not::@5
  [37] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#1) ← (byte) '*'
  to:bool_not::@3
bool_or: scope:[bool_or]  from main::@1
  [38] phi()
  to:bool_or::@2
bool_or::@2: scope:[bool_or]  from bool_or bool_or::@1 bool_or::@5
  [39] (byte) bool_or::i#6 ← phi( bool_or::@1/(byte) bool_or::i#1 bool_or/(byte) 0 bool_or::@5/(byte) bool_or::i#1 )
  [40] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*'
  to:bool_or::@3
bool_or::@3: scope:[bool_or]  from bool_or::@2 bool_or::@4
  [41] (byte) bool_or::i#8 ← phi( bool_or::@2/(byte) bool_or::i#6 bool_or::@4/(byte) bool_or::i#1 )
  [42] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8
  [43] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1
  to:bool_or::@return
bool_or::@return: scope:[bool_or]  from bool_or::@3
  [44] return 
  to:@return
bool_or::@1: scope:[bool_or]  from bool_or::@3
  [45] (byte~) bool_or::$5 ← (byte) bool_or::i#1 & (byte) 1
  [46] if((byte) bool_or::i#1<(byte) $a) goto bool_or::@2
  to:bool_or::@5
bool_or::@5: scope:[bool_or]  from bool_or::@1
  [47] if((byte~) bool_or::$5==(byte) 0) goto bool_or::@2
  to:bool_or::@4
bool_or::@4: scope:[bool_or]  from bool_or::@5
  [48] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#1) ← (byte) ' '
  to:bool_or::@3
bool_and: scope:[bool_and]  from main
  [49] phi()
  to:bool_and::@2
bool_and::@2: scope:[bool_and]  from bool_and bool_and::@5
  [50] (byte) bool_and::i#11 ← phi( bool_and::@5/(byte) bool_and::i#1 bool_and/(byte) 0 )
  [51] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*'
  to:bool_and::@3
bool_and::@3: scope:[bool_and]  from bool_and::@2 bool_and::@4
  [52] (byte) bool_and::i#8 ← phi( bool_and::@2/(byte) bool_and::i#11 bool_and::@4/(byte) bool_and::i#1 )
  [53] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8
  [54] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1
  to:bool_and::@return
bool_and::@return: scope:[bool_and]  from bool_and::@3
  [55] return 
  to:@return
bool_and::@1: scope:[bool_and]  from bool_and::@3
  [56] (byte~) bool_and::$5 ← (byte) bool_and::i#1 & (byte) 1
  [57] if((byte) bool_and::i#1>=(byte) $a) goto bool_and::@4
  to:bool_and::@5
bool_and::@5: scope:[bool_and]  from bool_and::@1
  [58] if((byte~) bool_and::$5==(byte) 0) goto bool_and::@2
  to:bool_and::@4
bool_and::@4: scope:[bool_and]  from bool_and::@1 bool_and::@5
  [59] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#1) ← (byte) ' '
  to:bool_and::@3


VARIABLE REGISTER WEIGHTS
(void()) bool_and()
(byte~) bool_and::$5 101.0
(byte) bool_and::i
(byte) bool_and::i#1 117.83333333333331
(byte) bool_and::i#11 61.5
(byte) bool_and::i#8 213.0
(bool) bool_and::o1
(bool) bool_and::o2
(bool) bool_and::o3
(byte*) bool_and::screen
(void()) bool_complex()
(byte~) bool_complex::$1 22.0
(byte) bool_complex::i
(byte) bool_complex::i#1 16.5
(byte) bool_complex::i#2 6.6
(bool) bool_complex::o1
(bool) bool_complex::o1#0 6.6000000000000005
(bool) bool_complex::o2
(bool) bool_complex::o2#0 8.25
(bool) bool_complex::o3
(bool) bool_complex::o4
(bool) bool_complex::o5
(byte*) bool_complex::screen
(void()) bool_not()
(byte~) bool_not::$6 101.0
(byte) bool_not::i
(byte) bool_not::i#1 134.66666666666666
(byte) bool_not::i#7 112.0
(byte) bool_not::i#8 213.0
(bool) bool_not::o1
(bool) bool_not::o2
(bool) bool_not::o3
(byte*) bool_not::screen
(void()) bool_or()
(byte~) bool_or::$5 101.0
(byte) bool_or::i
(byte) bool_or::i#1 134.66666666666666
(byte) bool_or::i#6 112.0
(byte) bool_or::i#8 213.0
(bool) bool_or::o1
(bool) bool_or::o2
(bool) bool_or::o3
(byte*) bool_or::screen
(void()) main()

Initial phi equivalence classes
[ bool_complex::i#2 bool_complex::i#1 ]
[ bool_not::i#8 bool_not::i#7 bool_not::i#1 ]
[ bool_or::i#8 bool_or::i#6 bool_or::i#1 ]
[ bool_and::i#8 bool_and::i#11 bool_and::i#1 ]
Added variable bool_complex::o1#0 to zero page equivalence class [ bool_complex::o1#0 ]
Added variable bool_complex::$1 to zero page equivalence class [ bool_complex::$1 ]
Added variable bool_complex::o2#0 to zero page equivalence class [ bool_complex::o2#0 ]
Added variable bool_not::$6 to zero page equivalence class [ bool_not::$6 ]
Added variable bool_or::$5 to zero page equivalence class [ bool_or::$5 ]
Added variable bool_and::$5 to zero page equivalence class [ bool_and::$5 ]
Complete equivalence classes
[ bool_complex::i#2 bool_complex::i#1 ]
[ bool_not::i#8 bool_not::i#7 bool_not::i#1 ]
[ bool_or::i#8 bool_or::i#6 bool_or::i#1 ]
[ bool_and::i#8 bool_and::i#11 bool_and::i#1 ]
[ bool_complex::o1#0 ]
[ bool_complex::$1 ]
[ bool_complex::o2#0 ]
[ bool_not::$6 ]
[ bool_or::$5 ]
[ bool_and::$5 ]
Allocated zp ZP_BYTE:2 [ bool_complex::i#2 bool_complex::i#1 ]
Allocated zp ZP_BYTE:3 [ bool_not::i#8 bool_not::i#7 bool_not::i#1 ]
Allocated zp ZP_BYTE:4 [ bool_or::i#8 bool_or::i#6 bool_or::i#1 ]
Allocated zp ZP_BYTE:5 [ bool_and::i#8 bool_and::i#11 bool_and::i#1 ]
Allocated zp ZP_BOOL:6 [ bool_complex::o1#0 ]
Allocated zp ZP_BYTE:7 [ bool_complex::$1 ]
Allocated zp ZP_BOOL:8 [ bool_complex::o2#0 ]
Allocated zp ZP_BYTE:9 [ bool_not::$6 ]
Allocated zp ZP_BYTE:10 [ bool_or::$5 ]
Allocated zp ZP_BYTE:11 [ bool_and::$5 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
// A test of boolean conditions using && || and !
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] call bool_and 
    // [49] phi from main to bool_and [phi:main->bool_and]
  bool_and_from_main:
    jsr bool_and
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
    // main::@1
  b1:
    // [7] call bool_or 
    // [38] phi from main::@1 to bool_or [phi:main::@1->bool_or]
  bool_or_from_b1:
    jsr bool_or
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [9] call bool_not 
    // [27] phi from main::@2 to bool_not [phi:main::@2->bool_not]
  bool_not_from_b2:
    jsr bool_not
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [11] call bool_complex 
    // [13] phi from main::@3 to bool_complex [phi:main::@3->bool_complex]
  bool_complex_from_b3:
    jsr bool_complex
    jmp breturn
    // main::@return
  breturn:
    // [12] return 
    rts
}
  // bool_complex
bool_complex: {
    .label screen = $478
    .label _1 = 7
    .label o1 = 6
    .label o2 = 8
    .label i = 2
    // [14] phi from bool_complex to bool_complex::@1 [phi:bool_complex->bool_complex::@1]
  b1_from_bool_complex:
    // [14] phi (byte) bool_complex::i#2 = (byte) 0 [phi:bool_complex->bool_complex::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [14] phi from bool_complex::@3 to bool_complex::@1 [phi:bool_complex::@3->bool_complex::@1]
  b1_from_b3:
    // [14] phi (byte) bool_complex::i#2 = (byte) bool_complex::i#1 [phi:bool_complex::@3->bool_complex::@1#0] -- register_copy 
    jmp b1
    // bool_complex::@1
  b1:
    // [15] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a -- vboz1=vbuz2_lt_vbuc1 
    lda i
    cmp #$a
    lda #0
    rol
    eor #1
    sta o1
    // [16] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and i
    sta _1
    // [17] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0 -- vboz1=vbuz2_eq_vbuc1 
    lda _1
    eor #0
    beq !+
    lda #1
  !:
    eor #1
    sta o2
    // [18] if((bool) bool_complex::o1#0) goto bool_complex::@6 -- vboz1_then_la1 
    lda o1
    cmp #0
    bne b6
    jmp b5
    // bool_complex::@6
  b6:
    // [19] if((bool) bool_complex::o2#0) goto bool_complex::@2 -- vboz1_then_la1 
    lda o2
    cmp #0
    bne b2
    jmp b5
    // bool_complex::@5
  b5:
    // [20] if((bool) bool_complex::o1#0) goto bool_complex::@4 -- vboz1_then_la1 
    lda o1
    cmp #0
    bne b4
    jmp b7
    // bool_complex::@7
  b7:
    // [21] if((bool) bool_complex::o2#0) goto bool_complex::@4 -- vboz1_then_la1 
    lda o2
    cmp #0
    bne b4
    jmp b2
    // bool_complex::@2
  b2:
    // [22] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy i
    sta screen,y
    jmp b3
    // bool_complex::@3
  b3:
    // [23] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [24] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp i
    bne b1_from_b3
    jmp breturn
    // bool_complex::@return
  breturn:
    // [25] return 
    rts
    // bool_complex::@4
  b4:
    // [26] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy i
    sta screen,y
    jmp b3
}
  // bool_not
bool_not: {
    .label screen = $450
    .label i = 3
    .label _6 = 9
    // [28] phi from bool_not to bool_not::@4 [phi:bool_not->bool_not::@4]
  b4_from_bool_not:
    // [28] phi (byte) bool_not::i#7 = (byte) 0 [phi:bool_not->bool_not::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b4
    // [28] phi from bool_not::@1 bool_not::@5 to bool_not::@4 [phi:bool_not::@1/bool_not::@5->bool_not::@4]
  b4_from_b1:
  b4_from_b5:
    // [28] phi (byte) bool_not::i#7 = (byte) bool_not::i#1 [phi:bool_not::@1/bool_not::@5->bool_not::@4#0] -- register_copy 
    jmp b4
    // bool_not::@4
  b4:
    // [29] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy i
    sta screen,y
    // [30] phi from bool_not::@2 bool_not::@4 to bool_not::@3 [phi:bool_not::@2/bool_not::@4->bool_not::@3]
  b3_from_b2:
  b3_from_b4:
    // [30] phi (byte) bool_not::i#8 = (byte) bool_not::i#1 [phi:bool_not::@2/bool_not::@4->bool_not::@3#0] -- register_copy 
    jmp b3
    // bool_not::@3
  b3:
    // [31] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8 -- vbuz1=_inc_vbuz1 
    inc i
    // [32] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp i
    bne b1
    jmp breturn
    // bool_not::@return
  breturn:
    // [33] return 
    rts
    // bool_not::@1
  b1:
    // [34] (byte~) bool_not::$6 ← (byte) bool_not::i#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and i
    sta _6
    // [35] if((byte) bool_not::i#1<(byte) $a) goto bool_not::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$a
    bcc b4_from_b1
    jmp b5
    // bool_not::@5
  b5:
    // [36] if((byte~) bool_not::$6==(byte) 0) goto bool_not::@4 -- vbuz1_eq_0_then_la1 
    lda _6
    cmp #0
    beq b4_from_b5
    jmp b2
    // bool_not::@2
  b2:
    // [37] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#1) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy i
    sta screen,y
    jmp b3_from_b2
}
  // bool_or
bool_or: {
    .label screen = $428
    .label i = 4
    .label _5 = $a
    // [39] phi from bool_or to bool_or::@2 [phi:bool_or->bool_or::@2]
  b2_from_bool_or:
    // [39] phi (byte) bool_or::i#6 = (byte) 0 [phi:bool_or->bool_or::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
    // [39] phi from bool_or::@1 bool_or::@5 to bool_or::@2 [phi:bool_or::@1/bool_or::@5->bool_or::@2]
  b2_from_b1:
  b2_from_b5:
    // [39] phi (byte) bool_or::i#6 = (byte) bool_or::i#1 [phi:bool_or::@1/bool_or::@5->bool_or::@2#0] -- register_copy 
    jmp b2
    // bool_or::@2
  b2:
    // [40] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy i
    sta screen,y
    // [41] phi from bool_or::@2 bool_or::@4 to bool_or::@3 [phi:bool_or::@2/bool_or::@4->bool_or::@3]
  b3_from_b2:
  b3_from_b4:
    // [41] phi (byte) bool_or::i#8 = (byte) bool_or::i#6 [phi:bool_or::@2/bool_or::@4->bool_or::@3#0] -- register_copy 
    jmp b3
    // bool_or::@3
  b3:
    // [42] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8 -- vbuz1=_inc_vbuz1 
    inc i
    // [43] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp i
    bne b1
    jmp breturn
    // bool_or::@return
  breturn:
    // [44] return 
    rts
    // bool_or::@1
  b1:
    // [45] (byte~) bool_or::$5 ← (byte) bool_or::i#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and i
    sta _5
    // [46] if((byte) bool_or::i#1<(byte) $a) goto bool_or::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$a
    bcc b2_from_b1
    jmp b5
    // bool_or::@5
  b5:
    // [47] if((byte~) bool_or::$5==(byte) 0) goto bool_or::@2 -- vbuz1_eq_0_then_la1 
    lda _5
    cmp #0
    beq b2_from_b5
    jmp b4
    // bool_or::@4
  b4:
    // [48] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#1) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy i
    sta screen,y
    jmp b3_from_b4
}
  // bool_and
bool_and: {
    .label screen = $400
    .label i = 5
    .label _5 = $b
    // [50] phi from bool_and to bool_and::@2 [phi:bool_and->bool_and::@2]
  b2_from_bool_and:
    // [50] phi (byte) bool_and::i#11 = (byte) 0 [phi:bool_and->bool_and::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
    // [50] phi from bool_and::@5 to bool_and::@2 [phi:bool_and::@5->bool_and::@2]
  b2_from_b5:
    // [50] phi (byte) bool_and::i#11 = (byte) bool_and::i#1 [phi:bool_and::@5->bool_and::@2#0] -- register_copy 
    jmp b2
    // bool_and::@2
  b2:
    // [51] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy i
    sta screen,y
    // [52] phi from bool_and::@2 bool_and::@4 to bool_and::@3 [phi:bool_and::@2/bool_and::@4->bool_and::@3]
  b3_from_b2:
  b3_from_b4:
    // [52] phi (byte) bool_and::i#8 = (byte) bool_and::i#11 [phi:bool_and::@2/bool_and::@4->bool_and::@3#0] -- register_copy 
    jmp b3
    // bool_and::@3
  b3:
    // [53] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8 -- vbuz1=_inc_vbuz1 
    inc i
    // [54] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp i
    bne b1
    jmp breturn
    // bool_and::@return
  breturn:
    // [55] return 
    rts
    // bool_and::@1
  b1:
    // [56] (byte~) bool_and::$5 ← (byte) bool_and::i#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and i
    sta _5
    // [57] if((byte) bool_and::i#1>=(byte) $a) goto bool_and::@4 -- vbuz1_ge_vbuc1_then_la1 
    lda i
    cmp #$a
    bcs b4
    jmp b5
    // bool_and::@5
  b5:
    // [58] if((byte~) bool_and::$5==(byte) 0) goto bool_and::@2 -- vbuz1_eq_0_then_la1 
    lda _5
    cmp #0
    beq b2_from_b5
    jmp b4
    // bool_and::@4
  b4:
    // [59] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#1) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy i
    sta screen,y
    jmp b3_from_b4
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a [ bool_complex::i#2 bool_complex::o1#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ bool_complex::i#2 bool_complex::i#1 ]
Statement [16] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::$1 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BOOL:6 [ bool_complex::o1#0 ]
Statement [17] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [18] if((bool) bool_complex::o1#0) goto bool_complex::@6 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BOOL:8 [ bool_complex::o2#0 ]
Statement [19] if((bool) bool_complex::o2#0) goto bool_complex::@2 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [20] if((bool) bool_complex::o1#0) goto bool_complex::@4 [ bool_complex::i#2 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [21] if((bool) bool_complex::o2#0) goto bool_complex::@4 [ bool_complex::i#2 ] ( main:2::bool_complex:11 [ bool_complex::i#2 ] ) always clobbers reg byte a 
Statement [22] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*' [ bool_complex::i#2 ] ( main:2::bool_complex:11 [ bool_complex::i#2 ] ) always clobbers reg byte a 
Statement [26] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' ' [ bool_complex::i#2 ] ( main:2::bool_complex:11 [ bool_complex::i#2 ] ) always clobbers reg byte a 
Statement [29] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' ' [ bool_not::i#7 ] ( main:2::bool_not:9 [ bool_not::i#7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ bool_not::i#8 bool_not::i#7 bool_not::i#1 ]
Statement [34] (byte~) bool_not::$6 ← (byte) bool_not::i#1 & (byte) 1 [ bool_not::i#1 bool_not::$6 ] ( main:2::bool_not:9 [ bool_not::i#1 bool_not::$6 ] ) always clobbers reg byte a 
Statement [37] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#1) ← (byte) '*' [ bool_not::i#1 ] ( main:2::bool_not:9 [ bool_not::i#1 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*' [ bool_or::i#6 ] ( main:2::bool_or:7 [ bool_or::i#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ bool_or::i#8 bool_or::i#6 bool_or::i#1 ]
Statement [45] (byte~) bool_or::$5 ← (byte) bool_or::i#1 & (byte) 1 [ bool_or::i#1 bool_or::$5 ] ( main:2::bool_or:7 [ bool_or::i#1 bool_or::$5 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#1) ← (byte) ' ' [ bool_or::i#1 ] ( main:2::bool_or:7 [ bool_or::i#1 ] ) always clobbers reg byte a 
Statement [51] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*' [ bool_and::i#11 ] ( main:2::bool_and:5 [ bool_and::i#11 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ bool_and::i#8 bool_and::i#11 bool_and::i#1 ]
Statement [56] (byte~) bool_and::$5 ← (byte) bool_and::i#1 & (byte) 1 [ bool_and::i#1 bool_and::$5 ] ( main:2::bool_and:5 [ bool_and::i#1 bool_and::$5 ] ) always clobbers reg byte a 
Statement [59] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#1) ← (byte) ' ' [ bool_and::i#1 ] ( main:2::bool_and:5 [ bool_and::i#1 ] ) always clobbers reg byte a 
Statement [15] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a [ bool_complex::i#2 bool_complex::o1#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 ] ) always clobbers reg byte a 
Statement [16] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::$1 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::$1 ] ) always clobbers reg byte a 
Statement [17] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [18] if((bool) bool_complex::o1#0) goto bool_complex::@6 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [19] if((bool) bool_complex::o2#0) goto bool_complex::@2 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o1#0 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [20] if((bool) bool_complex::o1#0) goto bool_complex::@4 [ bool_complex::i#2 bool_complex::o2#0 ] ( main:2::bool_complex:11 [ bool_complex::i#2 bool_complex::o2#0 ] ) always clobbers reg byte a 
Statement [21] if((bool) bool_complex::o2#0) goto bool_complex::@4 [ bool_complex::i#2 ] ( main:2::bool_complex:11 [ bool_complex::i#2 ] ) always clobbers reg byte a 
Statement [22] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*' [ bool_complex::i#2 ] ( main:2::bool_complex:11 [ bool_complex::i#2 ] ) always clobbers reg byte a 
Statement [26] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' ' [ bool_complex::i#2 ] ( main:2::bool_complex:11 [ bool_complex::i#2 ] ) always clobbers reg byte a 
Statement [29] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' ' [ bool_not::i#7 ] ( main:2::bool_not:9 [ bool_not::i#7 ] ) always clobbers reg byte a 
Statement [34] (byte~) bool_not::$6 ← (byte) bool_not::i#1 & (byte) 1 [ bool_not::i#1 bool_not::$6 ] ( main:2::bool_not:9 [ bool_not::i#1 bool_not::$6 ] ) always clobbers reg byte a 
Statement [37] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#1) ← (byte) '*' [ bool_not::i#1 ] ( main:2::bool_not:9 [ bool_not::i#1 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*' [ bool_or::i#6 ] ( main:2::bool_or:7 [ bool_or::i#6 ] ) always clobbers reg byte a 
Statement [45] (byte~) bool_or::$5 ← (byte) bool_or::i#1 & (byte) 1 [ bool_or::i#1 bool_or::$5 ] ( main:2::bool_or:7 [ bool_or::i#1 bool_or::$5 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#1) ← (byte) ' ' [ bool_or::i#1 ] ( main:2::bool_or:7 [ bool_or::i#1 ] ) always clobbers reg byte a 
Statement [51] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*' [ bool_and::i#11 ] ( main:2::bool_and:5 [ bool_and::i#11 ] ) always clobbers reg byte a 
Statement [56] (byte~) bool_and::$5 ← (byte) bool_and::i#1 & (byte) 1 [ bool_and::i#1 bool_and::$5 ] ( main:2::bool_and:5 [ bool_and::i#1 bool_and::$5 ] ) always clobbers reg byte a 
Statement [59] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#1) ← (byte) ' ' [ bool_and::i#1 ] ( main:2::bool_and:5 [ bool_and::i#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ bool_complex::i#2 bool_complex::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ bool_not::i#8 bool_not::i#7 bool_not::i#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ bool_or::i#8 bool_or::i#6 bool_or::i#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ bool_and::i#8 bool_and::i#11 bool_and::i#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BOOL:6 [ bool_complex::o1#0 ] : zp ZP_BOOL:6 , 
Potential registers zp ZP_BYTE:7 [ bool_complex::$1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BOOL:8 [ bool_complex::o2#0 ] : zp ZP_BOOL:8 , 
Potential registers zp ZP_BYTE:9 [ bool_not::$6 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ bool_or::$5 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ bool_and::$5 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bool_or] 459.67: zp ZP_BYTE:4 [ bool_or::i#8 bool_or::i#6 bool_or::i#1 ] 101: zp ZP_BYTE:10 [ bool_or::$5 ] 
Uplift Scope [bool_not] 459.67: zp ZP_BYTE:3 [ bool_not::i#8 bool_not::i#7 bool_not::i#1 ] 101: zp ZP_BYTE:9 [ bool_not::$6 ] 
Uplift Scope [bool_and] 392.33: zp ZP_BYTE:5 [ bool_and::i#8 bool_and::i#11 bool_and::i#1 ] 101: zp ZP_BYTE:11 [ bool_and::$5 ] 
Uplift Scope [bool_complex] 23.1: zp ZP_BYTE:2 [ bool_complex::i#2 bool_complex::i#1 ] 22: zp ZP_BYTE:7 [ bool_complex::$1 ] 8.25: zp ZP_BOOL:8 [ bool_complex::o2#0 ] 6.6: zp ZP_BOOL:6 [ bool_complex::o1#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [bool_or] best 18208 combination reg byte x [ bool_or::i#8 bool_or::i#6 bool_or::i#1 ] reg byte a [ bool_or::$5 ] 
Uplifting [bool_not] best 16248 combination reg byte x [ bool_not::i#8 bool_not::i#7 bool_not::i#1 ] reg byte a [ bool_not::$6 ] 
Uplifting [bool_and] best 14288 combination reg byte x [ bool_and::i#8 bool_and::i#11 bool_and::i#1 ] reg byte a [ bool_and::$5 ] 
Uplifting [bool_complex] best 14038 combination reg byte x [ bool_complex::i#2 bool_complex::i#1 ] reg byte a [ bool_complex::$1 ] zp ZP_BOOL:8 [ bool_complex::o2#0 ] zp ZP_BOOL:6 [ bool_complex::o1#0 ] 
Uplifting [main] best 14038 combination 
Uplifting [] best 14038 combination 
Allocated (was zp ZP_BOOL:6) zp ZP_BOOL:2 [ bool_complex::o1#0 ]
Allocated (was zp ZP_BOOL:8) zp ZP_BOOL:3 [ bool_complex::o2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A test of boolean conditions using && || and !
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] call bool_and 
    // [49] phi from main to bool_and [phi:main->bool_and]
  bool_and_from_main:
    jsr bool_and
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
    // main::@1
  b1:
    // [7] call bool_or 
    // [38] phi from main::@1 to bool_or [phi:main::@1->bool_or]
  bool_or_from_b1:
    jsr bool_or
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [9] call bool_not 
    // [27] phi from main::@2 to bool_not [phi:main::@2->bool_not]
  bool_not_from_b2:
    jsr bool_not
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [11] call bool_complex 
    // [13] phi from main::@3 to bool_complex [phi:main::@3->bool_complex]
  bool_complex_from_b3:
    jsr bool_complex
    jmp breturn
    // main::@return
  breturn:
    // [12] return 
    rts
}
  // bool_complex
bool_complex: {
    .label screen = $478
    .label o1 = 2
    .label o2 = 3
    // [14] phi from bool_complex to bool_complex::@1 [phi:bool_complex->bool_complex::@1]
  b1_from_bool_complex:
    // [14] phi (byte) bool_complex::i#2 = (byte) 0 [phi:bool_complex->bool_complex::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [14] phi from bool_complex::@3 to bool_complex::@1 [phi:bool_complex::@3->bool_complex::@1]
  b1_from_b3:
    // [14] phi (byte) bool_complex::i#2 = (byte) bool_complex::i#1 [phi:bool_complex::@3->bool_complex::@1#0] -- register_copy 
    jmp b1
    // bool_complex::@1
  b1:
    // [15] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a -- vboz1=vbuxx_lt_vbuc1 
    cpx #$a
    lda #0
    rol
    eor #1
    sta o1
    // [16] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [17] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0 -- vboz1=vbuaa_eq_vbuc1 
    eor #0
    beq !+
    lda #1
  !:
    eor #1
    sta o2
    // [18] if((bool) bool_complex::o1#0) goto bool_complex::@6 -- vboz1_then_la1 
    lda o1
    cmp #0
    bne b6
    jmp b5
    // bool_complex::@6
  b6:
    // [19] if((bool) bool_complex::o2#0) goto bool_complex::@2 -- vboz1_then_la1 
    lda o2
    cmp #0
    bne b2
    jmp b5
    // bool_complex::@5
  b5:
    // [20] if((bool) bool_complex::o1#0) goto bool_complex::@4 -- vboz1_then_la1 
    lda o1
    cmp #0
    bne b4
    jmp b7
    // bool_complex::@7
  b7:
    // [21] if((bool) bool_complex::o2#0) goto bool_complex::@4 -- vboz1_then_la1 
    lda o2
    cmp #0
    bne b4
    jmp b2
    // bool_complex::@2
  b2:
    // [22] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp b3
    // bool_complex::@3
  b3:
    // [23] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [24] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1_from_b3
    jmp breturn
    // bool_complex::@return
  breturn:
    // [25] return 
    rts
    // bool_complex::@4
  b4:
    // [26] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3
}
  // bool_not
bool_not: {
    .label screen = $450
    // [28] phi from bool_not to bool_not::@4 [phi:bool_not->bool_not::@4]
  b4_from_bool_not:
    // [28] phi (byte) bool_not::i#7 = (byte) 0 [phi:bool_not->bool_not::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b4
    // [28] phi from bool_not::@1 bool_not::@5 to bool_not::@4 [phi:bool_not::@1/bool_not::@5->bool_not::@4]
  b4_from_b1:
  b4_from_b5:
    // [28] phi (byte) bool_not::i#7 = (byte) bool_not::i#1 [phi:bool_not::@1/bool_not::@5->bool_not::@4#0] -- register_copy 
    jmp b4
    // bool_not::@4
  b4:
    // [29] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    // [30] phi from bool_not::@2 bool_not::@4 to bool_not::@3 [phi:bool_not::@2/bool_not::@4->bool_not::@3]
  b3_from_b2:
  b3_from_b4:
    // [30] phi (byte) bool_not::i#8 = (byte) bool_not::i#1 [phi:bool_not::@2/bool_not::@4->bool_not::@3#0] -- register_copy 
    jmp b3
    // bool_not::@3
  b3:
    // [31] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8 -- vbuxx=_inc_vbuxx 
    inx
    // [32] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    jmp breturn
    // bool_not::@return
  breturn:
    // [33] return 
    rts
    // bool_not::@1
  b1:
    // [34] (byte~) bool_not::$6 ← (byte) bool_not::i#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [35] if((byte) bool_not::i#1<(byte) $a) goto bool_not::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc b4_from_b1
    jmp b5
    // bool_not::@5
  b5:
    // [36] if((byte~) bool_not::$6==(byte) 0) goto bool_not::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b5
    jmp b2
    // bool_not::@2
  b2:
    // [37] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#1) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp b3_from_b2
}
  // bool_or
bool_or: {
    .label screen = $428
    // [39] phi from bool_or to bool_or::@2 [phi:bool_or->bool_or::@2]
  b2_from_bool_or:
    // [39] phi (byte) bool_or::i#6 = (byte) 0 [phi:bool_or->bool_or::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
    // [39] phi from bool_or::@1 bool_or::@5 to bool_or::@2 [phi:bool_or::@1/bool_or::@5->bool_or::@2]
  b2_from_b1:
  b2_from_b5:
    // [39] phi (byte) bool_or::i#6 = (byte) bool_or::i#1 [phi:bool_or::@1/bool_or::@5->bool_or::@2#0] -- register_copy 
    jmp b2
    // bool_or::@2
  b2:
    // [40] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // [41] phi from bool_or::@2 bool_or::@4 to bool_or::@3 [phi:bool_or::@2/bool_or::@4->bool_or::@3]
  b3_from_b2:
  b3_from_b4:
    // [41] phi (byte) bool_or::i#8 = (byte) bool_or::i#6 [phi:bool_or::@2/bool_or::@4->bool_or::@3#0] -- register_copy 
    jmp b3
    // bool_or::@3
  b3:
    // [42] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8 -- vbuxx=_inc_vbuxx 
    inx
    // [43] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    jmp breturn
    // bool_or::@return
  breturn:
    // [44] return 
    rts
    // bool_or::@1
  b1:
    // [45] (byte~) bool_or::$5 ← (byte) bool_or::i#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [46] if((byte) bool_or::i#1<(byte) $a) goto bool_or::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc b2_from_b1
    jmp b5
    // bool_or::@5
  b5:
    // [47] if((byte~) bool_or::$5==(byte) 0) goto bool_or::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b5
    jmp b4
    // bool_or::@4
  b4:
    // [48] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#1) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3_from_b4
}
  // bool_and
bool_and: {
    .label screen = $400
    // [50] phi from bool_and to bool_and::@2 [phi:bool_and->bool_and::@2]
  b2_from_bool_and:
    // [50] phi (byte) bool_and::i#11 = (byte) 0 [phi:bool_and->bool_and::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
    // [50] phi from bool_and::@5 to bool_and::@2 [phi:bool_and::@5->bool_and::@2]
  b2_from_b5:
    // [50] phi (byte) bool_and::i#11 = (byte) bool_and::i#1 [phi:bool_and::@5->bool_and::@2#0] -- register_copy 
    jmp b2
    // bool_and::@2
  b2:
    // [51] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // [52] phi from bool_and::@2 bool_and::@4 to bool_and::@3 [phi:bool_and::@2/bool_and::@4->bool_and::@3]
  b3_from_b2:
  b3_from_b4:
    // [52] phi (byte) bool_and::i#8 = (byte) bool_and::i#11 [phi:bool_and::@2/bool_and::@4->bool_and::@3#0] -- register_copy 
    jmp b3
    // bool_and::@3
  b3:
    // [53] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8 -- vbuxx=_inc_vbuxx 
    inx
    // [54] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    jmp breturn
    // bool_and::@return
  breturn:
    // [55] return 
    rts
    // bool_and::@1
  b1:
    // [56] (byte~) bool_and::$5 ← (byte) bool_and::i#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [57] if((byte) bool_and::i#1>=(byte) $a) goto bool_and::@4 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$a
    bcs b4
    jmp b5
    // bool_and::@5
  b5:
    // [58] if((byte~) bool_and::$5==(byte) 0) goto bool_and::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b5
    jmp b4
    // bool_and::@4
  b4:
    // [59] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#1) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3_from_b4
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b5
Removing instruction jmp b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b3 with b1
Replacing label b4_from_b1 with b4
Replacing label b4_from_b5 with b4
Replacing label b3_from_b2 with b3
Replacing label b2_from_b1 with b2
Replacing label b2_from_b5 with b2
Replacing label b3_from_b4 with b3
Replacing label b2_from_b5 with b2
Replacing label b3_from_b4 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction bool_or_from_b1:
Removing instruction b2_from_b1:
Removing instruction bool_not_from_b2:
Removing instruction b3_from_b2:
Removing instruction bool_complex_from_b3:
Removing instruction b1_from_b3:
Removing instruction b4_from_b1:
Removing instruction b4_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction bool_and_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bool_complex:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b4_from_bool_not:
Removing instruction breturn:
Removing instruction b5:
Removing instruction b2:
Removing instruction b2_from_bool_or:
Removing instruction breturn:
Removing instruction b5:
Removing instruction b4:
Removing instruction b2_from_bool_and:
Removing instruction breturn:
Removing instruction b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) bool_and()
(byte~) bool_and::$5 reg byte a 101.0
(label) bool_and::@1
(label) bool_and::@2
(label) bool_and::@3
(label) bool_and::@4
(label) bool_and::@5
(label) bool_and::@return
(byte) bool_and::i
(byte) bool_and::i#1 reg byte x 117.83333333333331
(byte) bool_and::i#11 reg byte x 61.5
(byte) bool_and::i#8 reg byte x 213.0
(bool) bool_and::o1
(bool) bool_and::o2
(bool) bool_and::o3
(byte*) bool_and::screen
(const byte*) bool_and::screen#0 screen = (byte*) 1024
(void()) bool_complex()
(byte~) bool_complex::$1 reg byte a 22.0
(label) bool_complex::@1
(label) bool_complex::@2
(label) bool_complex::@3
(label) bool_complex::@4
(label) bool_complex::@5
(label) bool_complex::@6
(label) bool_complex::@7
(label) bool_complex::@return
(byte) bool_complex::i
(byte) bool_complex::i#1 reg byte x 16.5
(byte) bool_complex::i#2 reg byte x 6.6
(bool) bool_complex::o1
(bool) bool_complex::o1#0 o1 zp ZP_BOOL:2 6.6000000000000005
(bool) bool_complex::o2
(bool) bool_complex::o2#0 o2 zp ZP_BOOL:3 8.25
(bool) bool_complex::o3
(bool) bool_complex::o4
(bool) bool_complex::o5
(byte*) bool_complex::screen
(const byte*) bool_complex::screen#0 screen = (byte*) 1144
(void()) bool_not()
(byte~) bool_not::$6 reg byte a 101.0
(label) bool_not::@1
(label) bool_not::@2
(label) bool_not::@3
(label) bool_not::@4
(label) bool_not::@5
(label) bool_not::@return
(byte) bool_not::i
(byte) bool_not::i#1 reg byte x 134.66666666666666
(byte) bool_not::i#7 reg byte x 112.0
(byte) bool_not::i#8 reg byte x 213.0
(bool) bool_not::o1
(bool) bool_not::o2
(bool) bool_not::o3
(byte*) bool_not::screen
(const byte*) bool_not::screen#0 screen = (byte*) 1104
(void()) bool_or()
(byte~) bool_or::$5 reg byte a 101.0
(label) bool_or::@1
(label) bool_or::@2
(label) bool_or::@3
(label) bool_or::@4
(label) bool_or::@5
(label) bool_or::@return
(byte) bool_or::i
(byte) bool_or::i#1 reg byte x 134.66666666666666
(byte) bool_or::i#6 reg byte x 112.0
(byte) bool_or::i#8 reg byte x 213.0
(bool) bool_or::o1
(bool) bool_or::o2
(bool) bool_or::o3
(byte*) bool_or::screen
(const byte*) bool_or::screen#0 screen = (byte*) 1064
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return

reg byte x [ bool_complex::i#2 bool_complex::i#1 ]
reg byte x [ bool_not::i#8 bool_not::i#7 bool_not::i#1 ]
reg byte x [ bool_or::i#8 bool_or::i#6 bool_or::i#1 ]
reg byte x [ bool_and::i#8 bool_and::i#11 bool_and::i#1 ]
zp ZP_BOOL:2 [ bool_complex::o1#0 ]
reg byte a [ bool_complex::$1 ]
zp ZP_BOOL:3 [ bool_complex::o2#0 ]
reg byte a [ bool_not::$6 ]
reg byte a [ bool_or::$5 ]
reg byte a [ bool_and::$5 ]


FINAL ASSEMBLER
Score: 10024

  // File Comments
// A test of boolean conditions using && || and !
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // bool_and()
    // [5] call bool_and 
    // [49] phi from main to bool_and [phi:main->bool_and]
    jsr bool_and
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // bool_or()
    // [7] call bool_or 
    // [38] phi from main::@1 to bool_or [phi:main::@1->bool_or]
    jsr bool_or
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // bool_not()
    // [9] call bool_not 
    // [27] phi from main::@2 to bool_not [phi:main::@2->bool_not]
    jsr bool_not
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // bool_complex()
    // [11] call bool_complex 
    // [13] phi from main::@3 to bool_complex [phi:main::@3->bool_complex]
    jsr bool_complex
    // main::@return
    // }
    // [12] return 
    rts
}
  // bool_complex
bool_complex: {
    .label screen = $478
    .label o1 = 2
    .label o2 = 3
    // [14] phi from bool_complex to bool_complex::@1 [phi:bool_complex->bool_complex::@1]
    // [14] phi (byte) bool_complex::i#2 = (byte) 0 [phi:bool_complex->bool_complex::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [14] phi from bool_complex::@3 to bool_complex::@1 [phi:bool_complex::@3->bool_complex::@1]
    // [14] phi (byte) bool_complex::i#2 = (byte) bool_complex::i#1 [phi:bool_complex::@3->bool_complex::@1#0] -- register_copy 
    // bool_complex::@1
  b1:
    // o1 = (i<10)
    // [15] (bool) bool_complex::o1#0 ← (byte) bool_complex::i#2 < (byte) $a -- vboz1=vbuxx_lt_vbuc1 
    cpx #$a
    lda #0
    rol
    eor #1
    sta o1
    // i&1
    // [16] (byte~) bool_complex::$1 ← (byte) bool_complex::i#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // o2 = (i&1)==0
    // [17] (bool) bool_complex::o2#0 ← (byte~) bool_complex::$1 == (byte) 0 -- vboz1=vbuaa_eq_vbuc1 
    eor #0
    beq !+
    lda #1
  !:
    eor #1
    sta o2
    // if( o5 )
    // [18] if((bool) bool_complex::o1#0) goto bool_complex::@6 -- vboz1_then_la1 
    lda o1
    cmp #0
    bne b6
    jmp b5
    // bool_complex::@6
  b6:
    // [19] if((bool) bool_complex::o2#0) goto bool_complex::@2 -- vboz1_then_la1 
    lda o2
    cmp #0
    bne b2
    // bool_complex::@5
  b5:
    // [20] if((bool) bool_complex::o1#0) goto bool_complex::@4 -- vboz1_then_la1 
    lda o1
    cmp #0
    bne b4
    // bool_complex::@7
    // [21] if((bool) bool_complex::o2#0) goto bool_complex::@4 -- vboz1_then_la1 
    lda o2
    cmp #0
    bne b4
    // bool_complex::@2
  b2:
    // screen[i] = '*'
    // [22] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // bool_complex::@3
  b3:
    // for( byte i : 0..20)
    // [23] (byte) bool_complex::i#1 ← ++ (byte) bool_complex::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [24] if((byte) bool_complex::i#1!=(byte) $15) goto bool_complex::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    // bool_complex::@return
    // }
    // [25] return 
    rts
    // bool_complex::@4
  b4:
    // screen[i] = ' '
    // [26] *((const byte*) bool_complex::screen#0 + (byte) bool_complex::i#2) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3
}
  // bool_not
bool_not: {
    .label screen = $450
    // [28] phi from bool_not to bool_not::@4 [phi:bool_not->bool_not::@4]
    // [28] phi (byte) bool_not::i#7 = (byte) 0 [phi:bool_not->bool_not::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [28] phi from bool_not::@1 bool_not::@5 to bool_not::@4 [phi:bool_not::@1/bool_not::@5->bool_not::@4]
    // [28] phi (byte) bool_not::i#7 = (byte) bool_not::i#1 [phi:bool_not::@1/bool_not::@5->bool_not::@4#0] -- register_copy 
    // bool_not::@4
  b4:
    // screen[i] = ' '
    // [29] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#7) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    // [30] phi from bool_not::@2 bool_not::@4 to bool_not::@3 [phi:bool_not::@2/bool_not::@4->bool_not::@3]
    // [30] phi (byte) bool_not::i#8 = (byte) bool_not::i#1 [phi:bool_not::@2/bool_not::@4->bool_not::@3#0] -- register_copy 
    // bool_not::@3
  b3:
    // for( byte i : 0..20)
    // [31] (byte) bool_not::i#1 ← ++ (byte) bool_not::i#8 -- vbuxx=_inc_vbuxx 
    inx
    // [32] if((byte) bool_not::i#1!=(byte) $15) goto bool_not::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    // bool_not::@return
    // }
    // [33] return 
    rts
    // bool_not::@1
  b1:
    // i&1
    // [34] (byte~) bool_not::$6 ← (byte) bool_not::i#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if(o3)
    // [35] if((byte) bool_not::i#1<(byte) $a) goto bool_not::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc b4
    // bool_not::@5
    // [36] if((byte~) bool_not::$6==(byte) 0) goto bool_not::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
    // bool_not::@2
    // screen[i] = '*'
    // [37] *((const byte*) bool_not::screen#0 + (byte) bool_not::i#1) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp b3
}
  // bool_or
bool_or: {
    .label screen = $428
    // [39] phi from bool_or to bool_or::@2 [phi:bool_or->bool_or::@2]
    // [39] phi (byte) bool_or::i#6 = (byte) 0 [phi:bool_or->bool_or::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [39] phi from bool_or::@1 bool_or::@5 to bool_or::@2 [phi:bool_or::@1/bool_or::@5->bool_or::@2]
    // [39] phi (byte) bool_or::i#6 = (byte) bool_or::i#1 [phi:bool_or::@1/bool_or::@5->bool_or::@2#0] -- register_copy 
    // bool_or::@2
  b2:
    // screen[i] = '*'
    // [40] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#6) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // [41] phi from bool_or::@2 bool_or::@4 to bool_or::@3 [phi:bool_or::@2/bool_or::@4->bool_or::@3]
    // [41] phi (byte) bool_or::i#8 = (byte) bool_or::i#6 [phi:bool_or::@2/bool_or::@4->bool_or::@3#0] -- register_copy 
    // bool_or::@3
  b3:
    // for( byte i : 0..20)
    // [42] (byte) bool_or::i#1 ← ++ (byte) bool_or::i#8 -- vbuxx=_inc_vbuxx 
    inx
    // [43] if((byte) bool_or::i#1!=(byte) $15) goto bool_or::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    // bool_or::@return
    // }
    // [44] return 
    rts
    // bool_or::@1
  b1:
    // i&1
    // [45] (byte~) bool_or::$5 ← (byte) bool_or::i#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if(o3)
    // [46] if((byte) bool_or::i#1<(byte) $a) goto bool_or::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc b2
    // bool_or::@5
    // [47] if((byte~) bool_or::$5==(byte) 0) goto bool_or::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
    // bool_or::@4
    // screen[i] = ' '
    // [48] *((const byte*) bool_or::screen#0 + (byte) bool_or::i#1) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3
}
  // bool_and
bool_and: {
    .label screen = $400
    // [50] phi from bool_and to bool_and::@2 [phi:bool_and->bool_and::@2]
    // [50] phi (byte) bool_and::i#11 = (byte) 0 [phi:bool_and->bool_and::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [50] phi from bool_and::@5 to bool_and::@2 [phi:bool_and::@5->bool_and::@2]
    // [50] phi (byte) bool_and::i#11 = (byte) bool_and::i#1 [phi:bool_and::@5->bool_and::@2#0] -- register_copy 
    // bool_and::@2
  b2:
    // screen[i] = '*'
    // [51] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#11) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // [52] phi from bool_and::@2 bool_and::@4 to bool_and::@3 [phi:bool_and::@2/bool_and::@4->bool_and::@3]
    // [52] phi (byte) bool_and::i#8 = (byte) bool_and::i#11 [phi:bool_and::@2/bool_and::@4->bool_and::@3#0] -- register_copy 
    // bool_and::@3
  b3:
    // for( byte i : 0..20)
    // [53] (byte) bool_and::i#1 ← ++ (byte) bool_and::i#8 -- vbuxx=_inc_vbuxx 
    inx
    // [54] if((byte) bool_and::i#1!=(byte) $15) goto bool_and::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne b1
    // bool_and::@return
    // }
    // [55] return 
    rts
    // bool_and::@1
  b1:
    // i&1
    // [56] (byte~) bool_and::$5 ← (byte) bool_and::i#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if(o3)
    // [57] if((byte) bool_and::i#1>=(byte) $a) goto bool_and::@4 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$a
    bcs b4
    // bool_and::@5
    // [58] if((byte~) bool_and::$5==(byte) 0) goto bool_and::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
    // bool_and::@4
  b4:
    // screen[i] = ' '
    // [59] *((const byte*) bool_and::screen#0 + (byte) bool_and::i#1) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp b3
}
  // File Data

