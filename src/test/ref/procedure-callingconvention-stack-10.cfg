
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (byte) idx ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] callexecute main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

__stackcall (void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from
  [5] (byte) print::p_x#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_P_X)
  [6] (byte) print::p_y#0 ← stackidx(byte,(const byte) print::OFFSET_STACK_P_Y)
  [7] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::p_x#0
  [8] (byte) idx ← ++ (byte) idx
  [9] *((const nomodify byte*) SCREEN + (byte) idx) ← (byte) print::p_y#0
  [10] (byte) idx ← ++ (byte) idx
  to:print::@return
print::@return: scope:[print]  from print
  [11] return 
  to:@return

__stackcall (struct Point()) get((byte) get::i)
get: scope:[get]  from
  [12] (byte) get::return_x#0 ← stackidx(byte,(const byte) get::OFFSET_STACK_I)
  [13] (byte) get::return_y#0 ← (byte) get::return_x#0 >> (byte) 1
  to:get::@return
get::@return: scope:[get]  from get
  [14] stackidx(byte,(byte) 0) ← (byte) get::return_x#0
  [15] stackidx(byte,(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) get::return_y#0
  [16] return 
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [17] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [18] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [19] if((byte) main::i#2<(byte) 5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [20] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [21] stackpush(byte) ← (byte) main::i#2
  sideeffect stackpushbytes((number) 1)
  [23] callexecute get 
  [24] (byte) main::p_x#0 ← stackpull(byte)
  [25] (byte) main::p_y#0 ← stackpull(byte)
  [26] stackpush(byte) ← (byte) main::p_x#0
  [27] stackpush(byte) ← (byte) main::p_y#0
  [28] callexecute print 
  sideeffect stackpullbytes((number) 2)
  [30] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
