Inlined call (byte~) main::$1 ← call wherey 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) conio_cursor_x#0 ← (byte) 0
  (byte) conio_cursor_y#0 ← (byte) 0
  (byte*) conio_cursor_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor#0 ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  to:@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  (byte) conio_textcolor#12 ← phi( main/(byte) conio_textcolor#14 )
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte) conio_textcolor#8 ← phi( clrscr/(byte) conio_textcolor#12 clrscr::@6/(byte) conio_textcolor#13 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (const nomodify byte) CONIO_HEIGHT
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte) conio_textcolor#5 ← phi( clrscr::@1/(byte) conio_textcolor#8 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x#1 ← (number) 0
  (byte) conio_cursor_y#1 ← (number) 0
  (byte*) conio_cursor_text#1 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color#1 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte) conio_textcolor#3 ← phi( clrscr::@2/(byte) conio_textcolor#5 clrscr::@5/(byte) conio_textcolor#1 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (const nomodify byte) CONIO_WIDTH
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) conio_textcolor#1 ← phi( clrscr::@4/(byte) conio_textcolor#3 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor#1
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) conio_textcolor#13 ← phi( clrscr::@4/(byte) conio_textcolor#3 )
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (const nomodify byte) CONIO_WIDTH
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (const nomodify byte) CONIO_WIDTH
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  (byte*) conio_cursor_color#15 ← phi( clrscr::@3/(byte*) conio_cursor_color#1 )
  (byte*) conio_cursor_text#15 ← phi( clrscr::@3/(byte*) conio_cursor_text#1 )
  (byte) conio_cursor_y#15 ← phi( clrscr::@3/(byte) conio_cursor_y#1 )
  (byte) conio_cursor_x#16 ← phi( clrscr::@3/(byte) conio_cursor_x#1 )
  (byte) conio_cursor_x#2 ← (byte) conio_cursor_x#16
  (byte) conio_cursor_y#2 ← (byte) conio_cursor_y#15
  (byte*) conio_cursor_text#2 ← (byte*) conio_cursor_text#15
  (byte*) conio_cursor_color#2 ← (byte*) conio_cursor_color#15
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cputc::@1 cputc::@4 main::@3
  (byte) gotoxy::y#6 ← phi( cputc::@1/(byte) gotoxy::y#1 cputc::@4/(byte) gotoxy::y#2 main::@3/(byte) gotoxy::y#3 )
  (byte) gotoxy::x#4 ← phi( cputc::@1/(byte) gotoxy::x#1 cputc::@4/(byte) gotoxy::x#2 main::@3/(byte) gotoxy::x#3 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::x#4 >= (const nomodify byte) CONIO_WIDTH
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::x#6 ← phi( gotoxy/(byte) gotoxy::x#4 gotoxy::@3/(byte) gotoxy::x#0 )
  (byte) gotoxy::y#4 ← phi( gotoxy/(byte) gotoxy::y#6 gotoxy::@3/(byte) gotoxy::y#7 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::y#4 >= (const nomodify byte) CONIO_HEIGHT
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::y#7 ← phi( gotoxy/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#5 ← phi( gotoxy::@1/(byte) gotoxy::y#4 gotoxy::@4/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#5 ← phi( gotoxy::@1/(byte) gotoxy::x#6 gotoxy::@4/(byte) gotoxy::x#7 )
  (byte) conio_cursor_x#3 ← (byte) gotoxy::x#5
  (byte) conio_cursor_y#3 ← (byte) gotoxy::y#5
  (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5
  (word~) gotoxy::$4 ← (word~) gotoxy::$8 * (const nomodify byte) CONIO_WIDTH
  (word~) gotoxy::$5 ← (word~) gotoxy::$4 + (byte) gotoxy::x#5
  (word) gotoxy::offset#0 ← (word~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text#3 ← (byte*~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color#3 ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::x#7 ← phi( gotoxy::@1/(byte) gotoxy::x#6 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  (byte*) conio_cursor_color#16 ← phi( gotoxy::@2/(byte*) conio_cursor_color#3 )
  (byte*) conio_cursor_text#16 ← phi( gotoxy::@2/(byte*) conio_cursor_text#3 )
  (byte) conio_cursor_y#16 ← phi( gotoxy::@2/(byte) conio_cursor_y#3 )
  (byte) conio_cursor_x#17 ← phi( gotoxy::@2/(byte) conio_cursor_x#3 )
  (byte) conio_cursor_x#4 ← (byte) conio_cursor_x#17
  (byte) conio_cursor_y#4 ← (byte) conio_cursor_y#16
  (byte*) conio_cursor_text#4 ← (byte*) conio_cursor_text#16
  (byte*) conio_cursor_color#4 ← (byte*) conio_cursor_color#16
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from main::@1 main::@7
  (byte) conio_cursor_x#29 ← phi( main::@1/(byte) conio_cursor_x#32 main::@7/(byte) conio_cursor_x#34 )
  (byte*) conio_cursor_color#28 ← phi( main::@1/(byte*) conio_cursor_color#32 main::@7/(byte*) conio_cursor_color#34 )
  (byte) conio_textcolor#4 ← phi( main::@1/(byte) conio_textcolor#6 main::@7/(byte) conio_textcolor#7 )
  (byte*) conio_cursor_text#28 ← phi( main::@1/(byte*) conio_cursor_text#32 main::@7/(byte*) conio_cursor_text#34 )
  (byte) conio_cursor_y#29 ← phi( main::@1/(byte) conio_cursor_y#33 main::@7/(byte) conio_cursor_y#35 )
  (byte) cputc::c#2 ← phi( main::@1/(byte) cputc::c#0 main::@7/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#2 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  (byte*) conio_cursor_color#27 ← phi( cputc/(byte*) conio_cursor_color#28 )
  (byte*) conio_cursor_text#27 ← phi( cputc/(byte*) conio_cursor_text#28 )
  (byte) conio_cursor_x#28 ← phi( cputc/(byte) conio_cursor_x#29 )
  (byte) conio_cursor_y#17 ← phi( cputc/(byte) conio_cursor_y#29 )
  (number~) cputc::$6 ← (byte) conio_cursor_y#17 + (number) 1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number~) cputc::$6
  call gotoxy 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@1
  (byte*) conio_cursor_color#17 ← phi( cputc::@1/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#17 ← phi( cputc::@1/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#18 ← phi( cputc::@1/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#18 ← phi( cputc::@1/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#5 ← (byte) conio_cursor_x#18
  (byte) conio_cursor_y#5 ← (byte) conio_cursor_y#18
  (byte*) conio_cursor_text#5 ← (byte*) conio_cursor_text#17
  (byte*) conio_cursor_color#5 ← (byte*) conio_cursor_color#17
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) conio_cursor_y#30 ← phi( cputc/(byte) conio_cursor_y#29 )
  (byte) conio_cursor_x#19 ← phi( cputc/(byte) conio_cursor_x#29 )
  (byte*) conio_cursor_color#18 ← phi( cputc/(byte*) conio_cursor_color#28 )
  (byte) conio_textcolor#2 ← phi( cputc/(byte) conio_textcolor#4 )
  (byte*) conio_cursor_text#18 ← phi( cputc/(byte*) conio_cursor_text#28 )
  (byte) cputc::c#3 ← phi( cputc/(byte) cputc::c#2 )
  *((byte*) conio_cursor_text#18) ← (byte) cputc::c#3
  (byte*) conio_cursor_text#6 ← ++ (byte*) conio_cursor_text#18
  *((byte*) conio_cursor_color#18) ← (byte) conio_textcolor#2
  (byte*) conio_cursor_color#6 ← ++ (byte*) conio_cursor_color#18
  (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#19
  (bool~) cputc::$1 ← (byte) conio_cursor_x#6 == (const nomodify byte) CONIO_WIDTH
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  (byte*) conio_cursor_color#30 ← phi( cputc::@2/(byte*) conio_cursor_color#6 )
  (byte*) conio_cursor_text#30 ← phi( cputc::@2/(byte*) conio_cursor_text#6 )
  (byte) conio_cursor_y#19 ← phi( cputc::@2/(byte) conio_cursor_y#30 )
  (byte) conio_cursor_x#7 ← (number) 0
  (byte) conio_cursor_y#6 ← ++ (byte) conio_cursor_y#19
  (bool~) cputc::$3 ← (byte) conio_cursor_y#6 == (const nomodify byte) CONIO_HEIGHT
  (bool~) cputc::$4 ← ! (bool~) cputc::$3
  if((bool~) cputc::$4) goto cputc::@return
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@3
  (byte*) conio_cursor_color#29 ← phi( cputc::@3/(byte*) conio_cursor_color#30 )
  (byte*) conio_cursor_text#29 ← phi( cputc::@3/(byte*) conio_cursor_text#30 )
  (byte) conio_cursor_y#31 ← phi( cputc::@3/(byte) conio_cursor_y#6 )
  (byte) conio_cursor_x#30 ← phi( cputc::@3/(byte) conio_cursor_x#7 )
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) 0
  call gotoxy 
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::@4
  (byte*) conio_cursor_color#19 ← phi( cputc::@4/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#19 ← phi( cputc::@4/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#20 ← phi( cputc::@4/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#20 ← phi( cputc::@4/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#8 ← (byte) conio_cursor_x#20
  (byte) conio_cursor_y#7 ← (byte) conio_cursor_y#20
  (byte*) conio_cursor_text#7 ← (byte*) conio_cursor_text#19
  (byte*) conio_cursor_color#7 ← (byte*) conio_cursor_color#19
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@3 cputc::@5 cputc::@6
  (byte*) conio_cursor_color#20 ← phi( cputc::@2/(byte*) conio_cursor_color#6 cputc::@3/(byte*) conio_cursor_color#30 cputc::@5/(byte*) conio_cursor_color#5 cputc::@6/(byte*) conio_cursor_color#7 )
  (byte*) conio_cursor_text#20 ← phi( cputc::@2/(byte*) conio_cursor_text#6 cputc::@3/(byte*) conio_cursor_text#30 cputc::@5/(byte*) conio_cursor_text#5 cputc::@6/(byte*) conio_cursor_text#7 )
  (byte) conio_cursor_y#21 ← phi( cputc::@2/(byte) conio_cursor_y#30 cputc::@3/(byte) conio_cursor_y#6 cputc::@5/(byte) conio_cursor_y#5 cputc::@6/(byte) conio_cursor_y#7 )
  (byte) conio_cursor_x#21 ← phi( cputc::@2/(byte) conio_cursor_x#6 cputc::@3/(byte) conio_cursor_x#7 cputc::@5/(byte) conio_cursor_x#5 cputc::@6/(byte) conio_cursor_x#8 )
  (byte) conio_cursor_x#9 ← (byte) conio_cursor_x#21
  (byte) conio_cursor_y#8 ← (byte) conio_cursor_y#21
  (byte*) conio_cursor_text#8 ← (byte*) conio_cursor_text#20
  (byte*) conio_cursor_color#8 ← (byte*) conio_cursor_color#20
  return 
  to:@return

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from main::@2
  (byte) toupper::ch#1 ← phi( main::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void()) main()
main: scope:[main]  from @1
  (byte) conio_textcolor#14 ← phi( @1/(byte) conio_textcolor#17 )
  (byte*) conio_cursor_color#31 ← phi( @1/(byte*) conio_cursor_color#35 )
  (byte*) conio_cursor_text#31 ← phi( @1/(byte*) conio_cursor_text#35 )
  (byte) conio_cursor_y#32 ← phi( @1/(byte) conio_cursor_y#36 )
  (byte) conio_cursor_x#31 ← phi( @1/(byte) conio_cursor_x#35 )
  *((byte*)(number) $d018) ← (number) $17
  call clrscr 
  to:main::@4
main::@4: scope:[main]  from main
  (byte) conio_textcolor#9 ← phi( main/(byte) conio_textcolor#14 )
  (byte*) conio_cursor_color#21 ← phi( main/(byte*) conio_cursor_color#2 )
  (byte*) conio_cursor_text#21 ← phi( main/(byte*) conio_cursor_text#2 )
  (byte) conio_cursor_y#22 ← phi( main/(byte) conio_cursor_y#2 )
  (byte) conio_cursor_x#22 ← phi( main/(byte) conio_cursor_x#2 )
  (byte) conio_cursor_x#10 ← (byte) conio_cursor_x#22
  (byte) conio_cursor_y#9 ← (byte) conio_cursor_y#22
  (byte*) conio_cursor_text#9 ← (byte*) conio_cursor_text#21
  (byte*) conio_cursor_color#9 ← (byte*) conio_cursor_color#21
  (byte) main::c#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  (byte) conio_textcolor#6 ← phi( main::@4/(byte) conio_textcolor#9 main::@5/(byte) conio_textcolor#10 )
  (byte*) conio_cursor_color#32 ← phi( main::@4/(byte*) conio_cursor_color#9 main::@5/(byte*) conio_cursor_color#10 )
  (byte*) conio_cursor_text#32 ← phi( main::@4/(byte*) conio_cursor_text#9 main::@5/(byte*) conio_cursor_text#10 )
  (byte) conio_cursor_y#33 ← phi( main::@4/(byte) conio_cursor_y#9 main::@5/(byte) conio_cursor_y#10 )
  (byte) conio_cursor_x#32 ← phi( main::@4/(byte) conio_cursor_x#10 main::@5/(byte) conio_cursor_x#11 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#0 main::@5/(byte) main::c#1 )
  (byte) cputc::c#0 ← (byte) main::c#2
  call cputc 
  to:main::@5
main::@5: scope:[main]  from main::@1
  (byte) conio_textcolor#10 ← phi( main::@1/(byte) conio_textcolor#6 )
  (byte) main::c#3 ← phi( main::@1/(byte) main::c#2 )
  (byte*) conio_cursor_color#22 ← phi( main::@1/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#22 ← phi( main::@1/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#23 ← phi( main::@1/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#23 ← phi( main::@1/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#11 ← (byte) conio_cursor_x#23
  (byte) conio_cursor_y#10 ← (byte) conio_cursor_y#23
  (byte*) conio_cursor_text#10 ← (byte*) conio_cursor_text#22
  (byte*) conio_cursor_color#10 ← (byte*) conio_cursor_color#22
  (byte) main::c#1 ← (byte) main::c#3 + rangenext(0,$ff)
  (bool~) main::$5 ← (byte) main::c#1 != rangelast(0,$ff)
  if((bool~) main::$5) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@5
  (byte) conio_textcolor#20 ← phi( main::@5/(byte) conio_textcolor#10 )
  (byte*) conio_cursor_color#38 ← phi( main::@5/(byte*) conio_cursor_color#10 )
  (byte*) conio_cursor_text#38 ← phi( main::@5/(byte*) conio_cursor_text#10 )
  (byte) conio_cursor_x#38 ← phi( main::@5/(byte) conio_cursor_x#11 )
  (byte) conio_cursor_y#24 ← phi( main::@5/(byte) conio_cursor_y#10 )
  (byte) main::wherey1_return#0 ← (byte) conio_cursor_y#24
  to:main::wherey1_@return
main::wherey1_@return: scope:[main]  from main::wherey1
  (byte) conio_textcolor#19 ← phi( main::wherey1/(byte) conio_textcolor#20 )
  (byte*) conio_cursor_color#36 ← phi( main::wherey1/(byte*) conio_cursor_color#38 )
  (byte*) conio_cursor_text#36 ← phi( main::wherey1/(byte*) conio_cursor_text#38 )
  (byte) conio_cursor_y#37 ← phi( main::wherey1/(byte) conio_cursor_y#24 )
  (byte) conio_cursor_x#36 ← phi( main::wherey1/(byte) conio_cursor_x#38 )
  (byte) main::wherey1_return#2 ← phi( main::wherey1/(byte) main::wherey1_return#0 )
  (byte) main::wherey1_return#1 ← (byte) main::wherey1_return#2
  to:main::@3
main::@3: scope:[main]  from main::wherey1_@return
  (byte) conio_textcolor#18 ← phi( main::wherey1_@return/(byte) conio_textcolor#19 )
  (byte*) conio_cursor_color#33 ← phi( main::wherey1_@return/(byte*) conio_cursor_color#36 )
  (byte*) conio_cursor_text#33 ← phi( main::wherey1_@return/(byte*) conio_cursor_text#36 )
  (byte) conio_cursor_y#34 ← phi( main::wherey1_@return/(byte) conio_cursor_y#37 )
  (byte) conio_cursor_x#33 ← phi( main::wherey1_@return/(byte) conio_cursor_x#36 )
  (byte) main::wherey1_return#3 ← phi( main::wherey1_@return/(byte) main::wherey1_return#1 )
  (byte~) main::$1 ← (byte) main::wherey1_return#3
  (number~) main::$2 ← (byte~) main::$1 + (number) 2
  (byte) gotoxy::x#3 ← (number) 0
  (byte) gotoxy::y#3 ← (number~) main::$2
  call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  (byte) conio_textcolor#15 ← phi( main::@3/(byte) conio_textcolor#18 )
  (byte*) conio_cursor_color#23 ← phi( main::@3/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#23 ← phi( main::@3/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#25 ← phi( main::@3/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#24 ← phi( main::@3/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#12 ← (byte) conio_cursor_x#24
  (byte) conio_cursor_y#11 ← (byte) conio_cursor_y#25
  (byte*) conio_cursor_text#11 ← (byte*) conio_cursor_text#23
  (byte*) conio_cursor_color#11 ← (byte*) conio_cursor_color#23
  (byte) main::c1#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@6 main::@8
  (byte) conio_textcolor#11 ← phi( main::@6/(byte) conio_textcolor#15 main::@8/(byte) conio_textcolor#16 )
  (byte*) conio_cursor_color#37 ← phi( main::@6/(byte*) conio_cursor_color#11 main::@8/(byte*) conio_cursor_color#12 )
  (byte*) conio_cursor_text#37 ← phi( main::@6/(byte*) conio_cursor_text#11 main::@8/(byte*) conio_cursor_text#12 )
  (byte) conio_cursor_y#38 ← phi( main::@6/(byte) conio_cursor_y#11 main::@8/(byte) conio_cursor_y#12 )
  (byte) conio_cursor_x#37 ← phi( main::@6/(byte) conio_cursor_x#12 main::@8/(byte) conio_cursor_x#13 )
  (byte) main::c1#2 ← phi( main::@6/(byte) main::c1#0 main::@8/(byte) main::c1#1 )
  (byte) toupper::ch#0 ← (byte) main::c1#2
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) conio_textcolor#7 ← phi( main::@2/(byte) conio_textcolor#11 )
  (byte) main::c1#4 ← phi( main::@2/(byte) main::c1#2 )
  (byte*) conio_cursor_color#34 ← phi( main::@2/(byte*) conio_cursor_color#37 )
  (byte*) conio_cursor_text#34 ← phi( main::@2/(byte*) conio_cursor_text#37 )
  (byte) conio_cursor_y#35 ← phi( main::@2/(byte) conio_cursor_y#38 )
  (byte) conio_cursor_x#34 ← phi( main::@2/(byte) conio_cursor_x#37 )
  (byte) toupper::return#5 ← phi( main::@2/(byte) toupper::return#3 )
  (byte~) main::$6 ← (byte) toupper::return#5
  (byte) cputc::c#1 ← (byte~) main::$6
  call cputc 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) conio_textcolor#16 ← phi( main::@7/(byte) conio_textcolor#7 )
  (byte) main::c1#3 ← phi( main::@7/(byte) main::c1#4 )
  (byte*) conio_cursor_color#24 ← phi( main::@7/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#24 ← phi( main::@7/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#26 ← phi( main::@7/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#25 ← phi( main::@7/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#13 ← (byte) conio_cursor_x#25
  (byte) conio_cursor_y#12 ← (byte) conio_cursor_y#26
  (byte*) conio_cursor_text#12 ← (byte*) conio_cursor_text#24
  (byte*) conio_cursor_color#12 ← (byte*) conio_cursor_color#24
  (byte) main::c1#1 ← (byte) main::c1#3 + rangenext(0,$ff)
  (bool~) main::$8 ← (byte) main::c1#1 != rangelast(0,$ff)
  if((bool~) main::$8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@8
  (byte*) conio_cursor_color#25 ← phi( main::@8/(byte*) conio_cursor_color#12 )
  (byte*) conio_cursor_text#25 ← phi( main::@8/(byte*) conio_cursor_text#12 )
  (byte) conio_cursor_y#27 ← phi( main::@8/(byte) conio_cursor_y#12 )
  (byte) conio_cursor_x#26 ← phi( main::@8/(byte) conio_cursor_x#13 )
  (byte) conio_cursor_x#14 ← (byte) conio_cursor_x#26
  (byte) conio_cursor_y#13 ← (byte) conio_cursor_y#27
  (byte*) conio_cursor_text#13 ← (byte*) conio_cursor_text#25
  (byte*) conio_cursor_color#13 ← (byte*) conio_cursor_color#25
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_textcolor#17 ← phi( @begin/(byte) conio_textcolor#0 )
  (byte*) conio_cursor_color#35 ← phi( @begin/(byte*) conio_cursor_color#0 )
  (byte*) conio_cursor_text#35 ← phi( @begin/(byte*) conio_cursor_text#0 )
  (byte) conio_cursor_y#36 ← phi( @begin/(byte) conio_cursor_y#0 )
  (byte) conio_cursor_x#35 ← phi( @begin/(byte) conio_cursor_x#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (byte*) conio_cursor_color#26 ← phi( @1/(byte*) conio_cursor_color#13 )
  (byte*) conio_cursor_text#26 ← phi( @1/(byte*) conio_cursor_text#13 )
  (byte) conio_cursor_y#28 ← phi( @1/(byte) conio_cursor_y#13 )
  (byte) conio_cursor_x#27 ← phi( @1/(byte) conio_cursor_x#14 )
  (byte) conio_cursor_x#15 ← (byte) conio_cursor_x#27
  (byte) conio_cursor_y#14 ← (byte) conio_cursor_y#28
  (byte*) conio_cursor_text#14 ← (byte*) conio_cursor_text#26
  (byte*) conio_cursor_color#14 ← (byte*) conio_cursor_color#26
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte) CONIO_HEIGHT = (byte) $19
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const nomodify byte) CONIO_WIDTH = (byte) $28
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte*) conio_cursor_color
(byte*) conio_cursor_color#0
(byte*) conio_cursor_color#1
(byte*) conio_cursor_color#10
(byte*) conio_cursor_color#11
(byte*) conio_cursor_color#12
(byte*) conio_cursor_color#13
(byte*) conio_cursor_color#14
(byte*) conio_cursor_color#15
(byte*) conio_cursor_color#16
(byte*) conio_cursor_color#17
(byte*) conio_cursor_color#18
(byte*) conio_cursor_color#19
(byte*) conio_cursor_color#2
(byte*) conio_cursor_color#20
(byte*) conio_cursor_color#21
(byte*) conio_cursor_color#22
(byte*) conio_cursor_color#23
(byte*) conio_cursor_color#24
(byte*) conio_cursor_color#25
(byte*) conio_cursor_color#26
(byte*) conio_cursor_color#27
(byte*) conio_cursor_color#28
(byte*) conio_cursor_color#29
(byte*) conio_cursor_color#3
(byte*) conio_cursor_color#30
(byte*) conio_cursor_color#31
(byte*) conio_cursor_color#32
(byte*) conio_cursor_color#33
(byte*) conio_cursor_color#34
(byte*) conio_cursor_color#35
(byte*) conio_cursor_color#36
(byte*) conio_cursor_color#37
(byte*) conio_cursor_color#38
(byte*) conio_cursor_color#4
(byte*) conio_cursor_color#5
(byte*) conio_cursor_color#6
(byte*) conio_cursor_color#7
(byte*) conio_cursor_color#8
(byte*) conio_cursor_color#9
(byte*) conio_cursor_text
(byte*) conio_cursor_text#0
(byte*) conio_cursor_text#1
(byte*) conio_cursor_text#10
(byte*) conio_cursor_text#11
(byte*) conio_cursor_text#12
(byte*) conio_cursor_text#13
(byte*) conio_cursor_text#14
(byte*) conio_cursor_text#15
(byte*) conio_cursor_text#16
(byte*) conio_cursor_text#17
(byte*) conio_cursor_text#18
(byte*) conio_cursor_text#19
(byte*) conio_cursor_text#2
(byte*) conio_cursor_text#20
(byte*) conio_cursor_text#21
(byte*) conio_cursor_text#22
(byte*) conio_cursor_text#23
(byte*) conio_cursor_text#24
(byte*) conio_cursor_text#25
(byte*) conio_cursor_text#26
(byte*) conio_cursor_text#27
(byte*) conio_cursor_text#28
(byte*) conio_cursor_text#29
(byte*) conio_cursor_text#3
(byte*) conio_cursor_text#30
(byte*) conio_cursor_text#31
(byte*) conio_cursor_text#32
(byte*) conio_cursor_text#33
(byte*) conio_cursor_text#34
(byte*) conio_cursor_text#35
(byte*) conio_cursor_text#36
(byte*) conio_cursor_text#37
(byte*) conio_cursor_text#38
(byte*) conio_cursor_text#4
(byte*) conio_cursor_text#5
(byte*) conio_cursor_text#6
(byte*) conio_cursor_text#7
(byte*) conio_cursor_text#8
(byte*) conio_cursor_text#9
(byte) conio_cursor_x
(byte) conio_cursor_x#0
(byte) conio_cursor_x#1
(byte) conio_cursor_x#10
(byte) conio_cursor_x#11
(byte) conio_cursor_x#12
(byte) conio_cursor_x#13
(byte) conio_cursor_x#14
(byte) conio_cursor_x#15
(byte) conio_cursor_x#16
(byte) conio_cursor_x#17
(byte) conio_cursor_x#18
(byte) conio_cursor_x#19
(byte) conio_cursor_x#2
(byte) conio_cursor_x#20
(byte) conio_cursor_x#21
(byte) conio_cursor_x#22
(byte) conio_cursor_x#23
(byte) conio_cursor_x#24
(byte) conio_cursor_x#25
(byte) conio_cursor_x#26
(byte) conio_cursor_x#27
(byte) conio_cursor_x#28
(byte) conio_cursor_x#29
(byte) conio_cursor_x#3
(byte) conio_cursor_x#30
(byte) conio_cursor_x#31
(byte) conio_cursor_x#32
(byte) conio_cursor_x#33
(byte) conio_cursor_x#34
(byte) conio_cursor_x#35
(byte) conio_cursor_x#36
(byte) conio_cursor_x#37
(byte) conio_cursor_x#38
(byte) conio_cursor_x#4
(byte) conio_cursor_x#5
(byte) conio_cursor_x#6
(byte) conio_cursor_x#7
(byte) conio_cursor_x#8
(byte) conio_cursor_x#9
(byte) conio_cursor_y
(byte) conio_cursor_y#0
(byte) conio_cursor_y#1
(byte) conio_cursor_y#10
(byte) conio_cursor_y#11
(byte) conio_cursor_y#12
(byte) conio_cursor_y#13
(byte) conio_cursor_y#14
(byte) conio_cursor_y#15
(byte) conio_cursor_y#16
(byte) conio_cursor_y#17
(byte) conio_cursor_y#18
(byte) conio_cursor_y#19
(byte) conio_cursor_y#2
(byte) conio_cursor_y#20
(byte) conio_cursor_y#21
(byte) conio_cursor_y#22
(byte) conio_cursor_y#23
(byte) conio_cursor_y#24
(byte) conio_cursor_y#25
(byte) conio_cursor_y#26
(byte) conio_cursor_y#27
(byte) conio_cursor_y#28
(byte) conio_cursor_y#29
(byte) conio_cursor_y#3
(byte) conio_cursor_y#30
(byte) conio_cursor_y#31
(byte) conio_cursor_y#32
(byte) conio_cursor_y#33
(byte) conio_cursor_y#34
(byte) conio_cursor_y#35
(byte) conio_cursor_y#36
(byte) conio_cursor_y#37
(byte) conio_cursor_y#38
(byte) conio_cursor_y#4
(byte) conio_cursor_y#5
(byte) conio_cursor_y#6
(byte) conio_cursor_y#7
(byte) conio_cursor_y#8
(byte) conio_cursor_y#9
(byte) conio_textcolor
(byte) conio_textcolor#0
(byte) conio_textcolor#1
(byte) conio_textcolor#10
(byte) conio_textcolor#11
(byte) conio_textcolor#12
(byte) conio_textcolor#13
(byte) conio_textcolor#14
(byte) conio_textcolor#15
(byte) conio_textcolor#16
(byte) conio_textcolor#17
(byte) conio_textcolor#18
(byte) conio_textcolor#19
(byte) conio_textcolor#2
(byte) conio_textcolor#20
(byte) conio_textcolor#3
(byte) conio_textcolor#4
(byte) conio_textcolor#5
(byte) conio_textcolor#6
(byte) conio_textcolor#7
(byte) conio_textcolor#8
(byte) conio_textcolor#9
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(bool~) cputc::$3
(bool~) cputc::$4
(number~) cputc::$6
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@6
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(word~) gotoxy::$4
(word~) gotoxy::$5
(byte*~) gotoxy::$6
(byte*~) gotoxy::$7
(word~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::x#7
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(byte) gotoxy::y#7
(void()) main()
(byte~) main::$1
(number~) main::$2
(bool~) main::$5
(byte~) main::$6
(bool~) main::$8
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c1
(byte) main::c1#0
(byte) main::c1#1
(byte) main::c1#2
(byte) main::c1#3
(byte) main::c1#4
(label) main::wherey1
(label) main::wherey1_@return
(byte) main::wherey1_return
(byte) main::wherey1_return#0
(byte) main::wherey1_return#1
(byte) main::wherey1_return#2
(byte) main::wherey1_return#3
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5

Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) cputc::$6 ← (byte) conio_cursor_y#17 + (number) 1
Adding number conversion cast (unumber) cputc::$6 in (number~) cputc::$6 ← (byte) conio_cursor_y#17 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x#7 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#2 ← (number) 0
Adding number conversion cast (unumber) $17 in *((byte*)(number) $d018) ← (number) $17
Adding number conversion cast (unumber) 2 in (number~) main::$2 ← (byte~) main::$1 + (number) 2
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte~) main::$1 + (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#3 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) conio_cursor_x#1 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x#7 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) 0
Inlining cast *((byte*)(number) $d018) ← (unumber)(number) $17
Inlining cast (byte) gotoxy::x#3 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $17
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) cputc::$6 ← (byte) conio_cursor_y#17 + (byte) 1
Inferred type updated to byte in (unumber~) main::$2 ← (byte~) main::$1 + (byte) 2
Inversing boolean not [37] (bool~) gotoxy::$1 ← (byte) gotoxy::x#4 < (const nomodify byte) CONIO_WIDTH from [36] (bool~) gotoxy::$0 ← (byte) gotoxy::x#4 >= (const nomodify byte) CONIO_WIDTH
Inversing boolean not [41] (bool~) gotoxy::$3 ← (byte) gotoxy::y#4 < (const nomodify byte) CONIO_HEIGHT from [40] (bool~) gotoxy::$2 ← (byte) gotoxy::y#4 >= (const nomodify byte) CONIO_HEIGHT
Inversing boolean not [84] (bool~) cputc::$2 ← (byte) conio_cursor_x#6 != (const nomodify byte) CONIO_WIDTH from [83] (bool~) cputc::$1 ← (byte) conio_cursor_x#6 == (const nomodify byte) CONIO_WIDTH
Inversing boolean not [90] (bool~) cputc::$4 ← (byte) conio_cursor_y#6 != (const nomodify byte) CONIO_HEIGHT from [89] (bool~) cputc::$3 ← (byte) conio_cursor_y#6 == (const nomodify byte) CONIO_HEIGHT
Successful SSA optimization Pass2UnaryNotSimplification
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias conio_textcolor#5 = conio_textcolor#8 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias conio_textcolor#1 = conio_textcolor#3 conio_textcolor#13 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias conio_cursor_x#1 = conio_cursor_x#16 conio_cursor_x#2 
Alias conio_cursor_y#1 = conio_cursor_y#15 conio_cursor_y#2 
Alias conio_cursor_text#1 = conio_cursor_text#15 conio_cursor_text#2 
Alias conio_cursor_color#1 = conio_cursor_color#15 conio_cursor_color#2 
Alias gotoxy::y#6 = gotoxy::y#7 
Alias gotoxy::offset#0 = gotoxy::$5 
Alias conio_cursor_text#16 = conio_cursor_text#3 gotoxy::$6 conio_cursor_text#4 
Alias conio_cursor_color#16 = conio_cursor_color#3 gotoxy::$7 conio_cursor_color#4 
Alias gotoxy::x#6 = gotoxy::x#7 
Alias conio_cursor_x#17 = conio_cursor_x#3 conio_cursor_x#4 
Alias conio_cursor_y#16 = conio_cursor_y#3 conio_cursor_y#4 
Alias conio_cursor_y#17 = conio_cursor_y#29 conio_cursor_y#30 conio_cursor_y#19 
Alias conio_cursor_x#19 = conio_cursor_x#28 conio_cursor_x#29 
Alias conio_cursor_text#18 = conio_cursor_text#27 conio_cursor_text#28 
Alias conio_cursor_color#18 = conio_cursor_color#27 conio_cursor_color#28 
Alias gotoxy::y#1 = cputc::$6 
Alias conio_cursor_x#18 = conio_cursor_x#5 
Alias conio_cursor_y#18 = conio_cursor_y#5 
Alias conio_cursor_text#17 = conio_cursor_text#5 
Alias conio_cursor_color#17 = conio_cursor_color#5 
Alias cputc::c#2 = cputc::c#3 
Alias conio_textcolor#2 = conio_textcolor#4 
Alias conio_cursor_text#29 = conio_cursor_text#30 conio_cursor_text#6 
Alias conio_cursor_color#29 = conio_cursor_color#30 conio_cursor_color#6 
Alias conio_cursor_x#30 = conio_cursor_x#7 
Alias conio_cursor_y#31 = conio_cursor_y#6 
Alias conio_cursor_x#20 = conio_cursor_x#8 
Alias conio_cursor_y#20 = conio_cursor_y#7 
Alias conio_cursor_text#19 = conio_cursor_text#7 
Alias conio_cursor_color#19 = conio_cursor_color#7 
Alias conio_cursor_x#21 = conio_cursor_x#9 
Alias conio_cursor_y#21 = conio_cursor_y#8 
Alias conio_cursor_text#20 = conio_cursor_text#8 
Alias conio_cursor_color#20 = conio_cursor_color#8 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias conio_textcolor#14 = conio_textcolor#9 
Alias conio_cursor_x#10 = conio_cursor_x#22 
Alias conio_cursor_y#22 = conio_cursor_y#9 
Alias conio_cursor_text#21 = conio_cursor_text#9 
Alias conio_cursor_color#21 = conio_cursor_color#9 
Alias main::c#2 = main::c#3 
Alias conio_textcolor#10 = conio_textcolor#6 conio_textcolor#20 conio_textcolor#19 conio_textcolor#18 conio_textcolor#15 
Alias conio_cursor_x#11 = conio_cursor_x#23 conio_cursor_x#38 conio_cursor_x#36 conio_cursor_x#33 
Alias conio_cursor_y#10 = conio_cursor_y#23 conio_cursor_y#24 conio_cursor_y#37 conio_cursor_y#34 
Alias conio_cursor_text#10 = conio_cursor_text#22 conio_cursor_text#38 conio_cursor_text#36 conio_cursor_text#33 
Alias conio_cursor_color#10 = conio_cursor_color#22 conio_cursor_color#38 conio_cursor_color#36 conio_cursor_color#33 
Alias main::wherey1_return#0 = main::wherey1_return#2 main::wherey1_return#1 main::wherey1_return#3 main::$1 
Alias gotoxy::y#3 = main::$2 
Alias conio_cursor_x#12 = conio_cursor_x#24 
Alias conio_cursor_y#11 = conio_cursor_y#25 
Alias conio_cursor_text#11 = conio_cursor_text#23 
Alias conio_cursor_color#11 = conio_cursor_color#23 
Alias toupper::return#3 = toupper::return#5 
Alias conio_cursor_x#34 = conio_cursor_x#37 
Alias conio_cursor_y#35 = conio_cursor_y#38 
Alias conio_cursor_text#34 = conio_cursor_text#37 
Alias conio_cursor_color#34 = conio_cursor_color#37 
Alias main::c1#2 = main::c1#4 main::c1#3 
Alias conio_textcolor#11 = conio_textcolor#7 conio_textcolor#16 
Alias cputc::c#1 = main::$6 
Alias conio_cursor_x#13 = conio_cursor_x#25 conio_cursor_x#26 conio_cursor_x#14 
Alias conio_cursor_y#12 = conio_cursor_y#26 conio_cursor_y#27 conio_cursor_y#13 
Alias conio_cursor_text#12 = conio_cursor_text#24 conio_cursor_text#25 conio_cursor_text#13 
Alias conio_cursor_color#12 = conio_cursor_color#24 conio_cursor_color#25 conio_cursor_color#13 
Alias conio_cursor_x#0 = conio_cursor_x#35 
Alias conio_cursor_y#0 = conio_cursor_y#36 
Alias conio_cursor_text#0 = conio_cursor_text#35 
Alias conio_cursor_color#0 = conio_cursor_color#35 
Alias conio_textcolor#0 = conio_textcolor#17 
Alias conio_cursor_x#15 = conio_cursor_x#27 
Alias conio_cursor_y#14 = conio_cursor_y#28 
Alias conio_cursor_text#14 = conio_cursor_text#26 
Alias conio_cursor_color#14 = conio_cursor_color#26 
Successful SSA optimization Pass2AliasElimination
Alias gotoxy::y#4 = gotoxy::y#6 
Alias gotoxy::x#5 = gotoxy::x#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) conio_textcolor#12 (byte) conio_textcolor#14
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte) conio_textcolor#1 (byte) conio_textcolor#5
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Identical Phi Values (byte) conio_cursor_x#18 (byte) conio_cursor_x#17
Identical Phi Values (byte) conio_cursor_y#18 (byte) conio_cursor_y#16
Identical Phi Values (byte*) conio_cursor_text#17 (byte*) conio_cursor_text#16
Identical Phi Values (byte*) conio_cursor_color#17 (byte*) conio_cursor_color#16
Identical Phi Values (byte) conio_cursor_x#20 (byte) conio_cursor_x#17
Identical Phi Values (byte) conio_cursor_y#20 (byte) conio_cursor_y#16
Identical Phi Values (byte*) conio_cursor_text#19 (byte*) conio_cursor_text#16
Identical Phi Values (byte*) conio_cursor_color#19 (byte*) conio_cursor_color#16
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte) conio_cursor_x#31 (byte) conio_cursor_x#0
Identical Phi Values (byte) conio_cursor_y#32 (byte) conio_cursor_y#0
Identical Phi Values (byte*) conio_cursor_text#31 (byte*) conio_cursor_text#0
Identical Phi Values (byte*) conio_cursor_color#31 (byte*) conio_cursor_color#0
Identical Phi Values (byte) conio_textcolor#14 (byte) conio_textcolor#0
Identical Phi Values (byte) conio_cursor_x#10 (byte) conio_cursor_x#1
Identical Phi Values (byte) conio_cursor_y#22 (byte) conio_cursor_y#1
Identical Phi Values (byte*) conio_cursor_text#21 (byte*) conio_cursor_text#1
Identical Phi Values (byte*) conio_cursor_color#21 (byte*) conio_cursor_color#1
Identical Phi Values (byte) conio_textcolor#10 (byte) conio_textcolor#14
Identical Phi Values (byte) conio_cursor_x#11 (byte) conio_cursor_x#21
Identical Phi Values (byte) conio_cursor_y#10 (byte) conio_cursor_y#21
Identical Phi Values (byte*) conio_cursor_text#10 (byte*) conio_cursor_text#20
Identical Phi Values (byte*) conio_cursor_color#10 (byte*) conio_cursor_color#20
Identical Phi Values (byte) conio_cursor_x#12 (byte) conio_cursor_x#17
Identical Phi Values (byte) conio_cursor_y#11 (byte) conio_cursor_y#16
Identical Phi Values (byte*) conio_cursor_text#11 (byte*) conio_cursor_text#16
Identical Phi Values (byte*) conio_cursor_color#11 (byte*) conio_cursor_color#16
Identical Phi Values (byte) conio_textcolor#11 (byte) conio_textcolor#10
Identical Phi Values (byte) conio_cursor_x#13 (byte) conio_cursor_x#21
Identical Phi Values (byte) conio_cursor_y#12 (byte) conio_cursor_y#21
Identical Phi Values (byte*) conio_cursor_text#12 (byte*) conio_cursor_text#20
Identical Phi Values (byte*) conio_cursor_color#12 (byte*) conio_cursor_color#20
Identical Phi Values (byte) conio_cursor_x#15 (byte) conio_cursor_x#13
Identical Phi Values (byte) conio_cursor_y#14 (byte) conio_cursor_y#12
Identical Phi Values (byte*) conio_cursor_text#14 (byte*) conio_cursor_text#12
Identical Phi Values (byte*) conio_cursor_color#14 (byte*) conio_cursor_color#12
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) conio_textcolor#5 (byte) conio_textcolor#0
Identical Phi Values (byte) conio_textcolor#2 (byte) conio_textcolor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) clrscr::$0 [11] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [19] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [29] if((byte) gotoxy::x#4<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [32] if((byte) gotoxy::y#4<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [46] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [57] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return
Simple Condition (bool~) cputc::$4 [61] if((byte) conio_cursor_y#31!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return
Simple Condition (bool~) main::$5 [87] if((byte) main::c#1!=rangelast(0,$ff)) goto main::@1
Simple Condition (bool~) main::$8 [103] if((byte) main::c1#1!=rangelast(0,$ff)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [71] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte) conio_cursor_x#0 = 0
Constant (const byte) conio_cursor_y#0 = 0
Constant (const byte*) conio_cursor_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) conio_cursor_color#0 = CONIO_SCREEN_COLORS
Constant (const byte) conio_textcolor#0 = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) conio_cursor_x#1 = 0
Constant (const byte) conio_cursor_y#1 = 0
Constant (const byte*) conio_cursor_text#1 = CONIO_SCREEN_TEXT
Constant (const byte*) conio_cursor_color#1 = CONIO_SCREEN_COLORS
Constant (const byte) gotoxy::x#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) conio_cursor_x#30 = 0
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = 0
Constant (const byte) main::c#0 = 0
Constant (const byte) gotoxy::x#3 = 0
Constant (const byte) main::c1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [85] main::c#1 ← ++ main::c#2 to ++
Resolved ranged comparison value [87] if(main::c#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
Resolved ranged next value [101] main::c1#1 ← ++ main::c1#2 to ++
Resolved ranged comparison value [103] if(main::c1#1!=rangelast(0,$ff)) goto main::@2 to (number) 0
Eliminating unused constant (const byte) conio_cursor_x#0
Eliminating unused constant (const byte) conio_cursor_y#0
Eliminating unused constant (const byte*) conio_cursor_text#0
Eliminating unused constant (const byte*) conio_cursor_color#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in if((byte) main::c#1!=(number) 0) goto main::@1
Adding number conversion cast (unumber) 0 in if((byte) main::c1#1!=(number) 0) goto main::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) toupper::$0 [41] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) toupper::$1 [65] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [41] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Rewriting multiplication to use shift and addition[19] (word~) gotoxy::$4 ← (word~) gotoxy::$8 * (const nomodify byte) CONIO_WIDTH
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const byte) gotoxy::x#0
Inlining constant with var siblings (const byte) gotoxy::y#0
Inlining constant with var siblings (const byte) gotoxy::x#1
Inlining constant with var siblings (const byte) gotoxy::x#2
Inlining constant with var siblings (const byte) gotoxy::y#2
Inlining constant with var siblings (const byte) gotoxy::x#3
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) main::c1#0
Inlining constant with var siblings (const byte) conio_cursor_x#1
Inlining constant with var siblings (const byte) conio_cursor_y#1
Inlining constant with var siblings (const byte*) conio_cursor_text#1
Inlining constant with var siblings (const byte*) conio_cursor_color#1
Inlining constant with var siblings (const byte) conio_cursor_x#30
Constant inlined main::c1#0 = (byte) 0
Constant inlined conio_cursor_x#30 = (byte) 0
Constant inlined clrscr::line_text#0 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined conio_cursor_color#1 = (const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined conio_cursor_x#1 = (byte) 0
Constant inlined conio_cursor_y#1 = (byte) 0
Constant inlined gotoxy::y#2 = (byte) 0
Constant inlined gotoxy::x#3 = (byte) 0
Constant inlined main::c#0 = (byte) 0
Constant inlined gotoxy::x#0 = (byte) 0
Constant inlined gotoxy::y#0 = (byte) 0
Constant inlined gotoxy::x#1 = (byte) 0
Constant inlined conio_textcolor#0 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined gotoxy::x#2 = (byte) 0
Constant inlined conio_cursor_text#1 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) CONIO_SCREEN_COLORS
Successful SSA optimization Pass2ConstantInlining
Alias gotoxy::$4 = gotoxy::$11 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) gotoxy::x#4 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) gotoxy::x#5 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) conio_cursor_x#17 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [12] if((byte) 0<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero gotoxy::$4 in [22] (word) gotoxy::offset#0 ← (word~) gotoxy::$4 + (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused block gotoxy::@3
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte) conio_cursor_x#17
Constant inlined conio_cursor_x#17 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Alias gotoxy::offset#0 = gotoxy::$4 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting gotoxy::@5(between gotoxy::@1 and gotoxy::@2)
Added new block during phi lifting cputc::@7(between cputc::@2 and cputc::@return)
Added new block during phi lifting cputc::@8(between cputc::@3 and cputc::@return)
Fixing phi predecessor for conio_cursor_x#21 to new block ( cputc::@3 -> cputc::@8 ) during phi lifting.
Added new block during phi lifting main::@9(between main::@5 and main::@1)
Added new block during phi lifting main::@10(between main::@8 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::wherey1_@return
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of gotoxy::@4
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@3
Adding NOP phi() at start of clrscr::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to clrscr:6 cputc:15 gotoxy:22 toupper:28 cputc:36 
Calls in [cputc] to gotoxy:61 gotoxy:76 

Created 26 initial phi equivalence classes
Coalesced [10] cputc::c#4 ← cputc::c#0
Coalesced [11] conio_cursor_y#39 ← conio_cursor_y#33
Coalesced [12] conio_cursor_text#39 ← conio_cursor_text#32
Coalesced [13] conio_cursor_color#39 ← conio_cursor_color#32
Coalesced [14] conio_cursor_x#39 ← conio_cursor_x#32
Coalesced [21] gotoxy::y#9 ← gotoxy::y#3
Coalesced [23] conio_cursor_y#46 ← conio_cursor_y#16
Coalesced [24] conio_cursor_text#46 ← conio_cursor_text#16
Coalesced [25] conio_cursor_color#46 ← conio_cursor_color#16
Coalesced [31] cputc::c#5 ← cputc::c#1
Coalesced [32] conio_cursor_y#40 ← conio_cursor_y#35
Coalesced [33] conio_cursor_text#40 ← conio_cursor_text#34
Coalesced [34] conio_cursor_color#40 ← conio_cursor_color#34
Coalesced [35] conio_cursor_x#40 ← conio_cursor_x#34
Coalesced [40] main::c1#5 ← main::c1#1
Coalesced [41] conio_cursor_x#43 ← conio_cursor_x#21
Coalesced [42] conio_cursor_y#47 ← conio_cursor_y#21
Coalesced [43] conio_cursor_text#47 ← conio_cursor_text#20
Coalesced [44] conio_cursor_color#47 ← conio_cursor_color#20
Coalesced [45] main::c#4 ← main::c#1
Coalesced (already) [46] conio_cursor_x#42 ← conio_cursor_x#21
Coalesced (already) [47] conio_cursor_y#45 ← conio_cursor_y#21
Coalesced (already) [48] conio_cursor_text#45 ← conio_cursor_text#20
Coalesced (already) [49] conio_cursor_color#45 ← conio_cursor_color#20
Coalesced (already) [62] conio_cursor_y#44 ← conio_cursor_y#16
Coalesced (already) [63] conio_cursor_text#44 ← conio_cursor_text#16
Coalesced (already) [64] conio_cursor_color#44 ← conio_cursor_color#16
Coalesced [67] conio_cursor_y#42 ← conio_cursor_y#31
Coalesced [68] conio_cursor_text#42 ← conio_cursor_text#29
Coalesced [69] conio_cursor_color#42 ← conio_cursor_color#29
Coalesced [70] conio_cursor_x#41 ← conio_cursor_x#6
Coalesced (already) [71] conio_cursor_y#41 ← conio_cursor_y#17
Coalesced (already) [72] conio_cursor_text#41 ← conio_cursor_text#29
Coalesced (already) [73] conio_cursor_color#41 ← conio_cursor_color#29
Coalesced [75] gotoxy::y#8 ← gotoxy::y#1
Coalesced (already) [77] conio_cursor_y#43 ← conio_cursor_y#16
Coalesced (already) [78] conio_cursor_text#43 ← conio_cursor_text#16
Coalesced (already) [79] conio_cursor_color#43 ← conio_cursor_color#16
Not coalescing [84] conio_cursor_y#16 ← gotoxy::y#5
Coalesced [92] gotoxy::y#10 ← gotoxy::y#4
Coalesced [95] toupper::return#7 ← toupper::ch#0
Coalesced [99] toupper::return#6 ← toupper::return#0
Coalesced [111] clrscr::l#7 ← clrscr::l#1
Coalesced [112] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [113] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [117] clrscr::c#4 ← clrscr::c#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::wherey1_@return
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@9
Culled Empty Block (label) cputc::@6
Culled Empty Block (label) cputc::@8
Culled Empty Block (label) cputc::@7
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) gotoxy::@4
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) clrscr::@3
Culled Empty Block (label) clrscr::@2
Renumbering block clrscr::@4 to clrscr::@2
Renumbering block clrscr::@5 to clrscr::@3
Renumbering block clrscr::@6 to clrscr::@4
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block toupper::@3 to toupper::@2
Renumbering block main::@5 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of clrscr

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*) 53272) ← (byte) $17
  [5] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [6] (byte*) conio_cursor_color#32 ← phi( main/(const nomodify byte*) CONIO_SCREEN_COLORS main::@4/(byte*) conio_cursor_color#20 )
  [6] (byte*) conio_cursor_text#32 ← phi( main/(const nomodify byte*) CONIO_SCREEN_TEXT main::@4/(byte*) conio_cursor_text#20 )
  [6] (byte) conio_cursor_y#33 ← phi( main/(byte) 0 main::@4/(byte) conio_cursor_y#21 )
  [6] (byte) conio_cursor_x#32 ← phi( main/(byte) 0 main::@4/(byte) conio_cursor_x#21 )
  [6] (byte) main::c#2 ← phi( main/(byte) 0 main::@4/(byte) main::c#1 )
  [7] (byte) cputc::c#0 ← (byte) main::c#2
  [8] call cputc 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [9] (byte) main::c#1 ← ++ (byte) main::c#2
  [10] if((byte) main::c#1!=(byte) 0) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@4
  [11] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y#21
  to:main::@3
main::@3: scope:[main]  from main::wherey1
  [12] (byte) gotoxy::y#3 ← (byte) main::wherey1_return#0 + (byte) 2
  [13] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [14] (byte*) conio_cursor_color#34 ← phi( main::@3/(byte*) conio_cursor_color#16 main::@6/(byte*) conio_cursor_color#20 )
  [14] (byte*) conio_cursor_text#34 ← phi( main::@3/(byte*) conio_cursor_text#16 main::@6/(byte*) conio_cursor_text#20 )
  [14] (byte) conio_cursor_y#35 ← phi( main::@3/(byte) conio_cursor_y#16 main::@6/(byte) conio_cursor_y#21 )
  [14] (byte) conio_cursor_x#34 ← phi( main::@3/(byte) 0 main::@6/(byte) conio_cursor_x#21 )
  [14] (byte) main::c1#2 ← phi( main::@3/(byte) 0 main::@6/(byte) main::c1#1 )
  [15] (byte) toupper::ch#0 ← (byte) main::c1#2
  [16] call toupper 
  [17] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:main::@5
main::@5: scope:[main]  from main::@2
  [18] (byte) cputc::c#1 ← (byte) toupper::return#3
  [19] call cputc 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] (byte) main::c1#1 ← ++ (byte) main::c1#2
  [21] if((byte) main::c1#1!=(byte) 0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@6
  [22] return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from main::@1 main::@5
  [23] (byte) conio_cursor_x#19 ← phi( main::@1/(byte) conio_cursor_x#32 main::@5/(byte) conio_cursor_x#34 )
  [23] (byte*) conio_cursor_color#18 ← phi( main::@1/(byte*) conio_cursor_color#32 main::@5/(byte*) conio_cursor_color#34 )
  [23] (byte*) conio_cursor_text#18 ← phi( main::@1/(byte*) conio_cursor_text#32 main::@5/(byte*) conio_cursor_text#34 )
  [23] (byte) conio_cursor_y#17 ← phi( main::@1/(byte) conio_cursor_y#33 main::@5/(byte) conio_cursor_y#35 )
  [23] (byte) cputc::c#2 ← phi( main::@1/(byte) cputc::c#0 main::@5/(byte) cputc::c#1 )
  [24] if((byte) cputc::c#2==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [25] *((byte*) conio_cursor_text#18) ← (byte) cputc::c#2
  [26] (byte*) conio_cursor_text#29 ← ++ (byte*) conio_cursor_text#18
  [27] *((byte*) conio_cursor_color#18) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [28] (byte*) conio_cursor_color#29 ← ++ (byte*) conio_cursor_color#18
  [29] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#19
  [30] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [31] (byte) conio_cursor_y#31 ← ++ (byte) conio_cursor_y#17
  [32] if((byte) conio_cursor_y#31!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@3
  [33] phi()
  [34] call gotoxy 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3 cputc::@4
  [35] (byte*) conio_cursor_color#20 ← phi( cputc::@2/(byte*) conio_cursor_color#29 cputc::@3/(byte*) conio_cursor_color#29 cputc::@1/(byte*) conio_cursor_color#16 cputc::@4/(byte*) conio_cursor_color#16 )
  [35] (byte*) conio_cursor_text#20 ← phi( cputc::@2/(byte*) conio_cursor_text#29 cputc::@3/(byte*) conio_cursor_text#29 cputc::@1/(byte*) conio_cursor_text#16 cputc::@4/(byte*) conio_cursor_text#16 )
  [35] (byte) conio_cursor_y#21 ← phi( cputc::@2/(byte) conio_cursor_y#17 cputc::@3/(byte) conio_cursor_y#31 cputc::@1/(byte) conio_cursor_y#16 cputc::@4/(byte) conio_cursor_y#16 )
  [35] (byte) conio_cursor_x#21 ← phi( cputc::@2/(byte) conio_cursor_x#6 cputc::@3/(byte) 0 cputc::@1/(byte) 0 cputc::@4/(byte) 0 )
  [36] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [37] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#17 + (byte) 1
  [38] call gotoxy 
  to:cputc::@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cputc::@1 cputc::@4 main::@3
  [39] (byte) gotoxy::y#4 ← phi( cputc::@1/(byte) gotoxy::y#1 cputc::@4/(byte) 0 main::@3/(byte) gotoxy::y#3 )
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [40] if((byte) gotoxy::y#4<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@3
  to:gotoxy::@2
gotoxy::@3: scope:[gotoxy]  from gotoxy::@1
  [41] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@3
  [42] (byte) gotoxy::y#5 ← phi( gotoxy::@3/(byte) gotoxy::y#4 gotoxy::@1/(byte) 0 )
  [43] (byte) conio_cursor_y#16 ← (byte) gotoxy::y#5
  [44] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5
  [45] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2
  [46] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8
  [47] (word) gotoxy::offset#0 ← (word~) gotoxy::$10 << (byte) 3
  [48] (byte*) conio_cursor_text#16 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  [49] (byte*) conio_cursor_color#16 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [50] return 
  to:@return

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from main::@2
  [51] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [52] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [53] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [54] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [55] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [56] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@4
  [57] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@4/(byte*) clrscr::line_cols#1 )
  [57] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@4/(byte*) clrscr::line_text#1 )
  [57] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@4/(byte) clrscr::l#1 )
  [58] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [59] return 
  to:@return
clrscr::@2: scope:[clrscr]  from clrscr::@1 clrscr::@3
  [60] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@3/(byte) clrscr::c#1 )
  [61] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3
  to:clrscr::@4
clrscr::@4: scope:[clrscr]  from clrscr::@2
  [62] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH
  [63] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH
  [64] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@3: scope:[clrscr]  from clrscr::@2
  [65] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [66] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [67] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@2


VARIABLE REGISTER WEIGHTS
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 20002.0
(byte) clrscr::c#2 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 2002.0
(byte) clrscr::l#2 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 1001.0
(byte*) clrscr::line_cols#5 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 667.3333333333334
(byte*) clrscr::line_text#5 1714.7142857142858
(byte*) conio_cursor_color
(byte*) conio_cursor_color#16 2402.8
(byte*) conio_cursor_color#18 440.79999999999995
(byte*) conio_cursor_color#20 525.75
(byte*) conio_cursor_color#29 600.5999999999999
(byte*) conio_cursor_color#32 101.0
(byte*) conio_cursor_color#34 42.599999999999994
(byte*) conio_cursor_text
(byte*) conio_cursor_text#16 2002.3333333333333
(byte*) conio_cursor_text#18 734.6666666666667
(byte*) conio_cursor_text#20 525.75
(byte*) conio_cursor_text#29 429.0
(byte*) conio_cursor_text#32 101.0
(byte*) conio_cursor_text#34 42.599999999999994
(byte) conio_cursor_x
(byte) conio_cursor_x#19 200.5
(byte) conio_cursor_x#21 150.375
(byte) conio_cursor_x#32 101.0
(byte) conio_cursor_x#34 40.4
(byte) conio_cursor_x#6 1501.5
(byte) conio_cursor_y
(byte) conio_cursor_y#16 1092.181818181818
(byte) conio_cursor_y#17 400.625
(byte) conio_cursor_y#21 527.125
(byte) conio_cursor_y#31 1501.5
(byte) conio_cursor_y#33 101.0
(byte) conio_cursor_y#35 42.599999999999994
(byte) conio_textcolor
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 202.0
(byte) cputc::c#1 202.0
(byte) cputc::c#2 1102.0
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word~) gotoxy::$10 20002.0
(word~) gotoxy::$8 15001.5
(word~) gotoxy::$9 20002.0
(word) gotoxy::offset
(word) gotoxy::offset#0 15001.5
(byte) gotoxy::x
(byte) gotoxy::y
(byte) gotoxy::y#1 2002.0
(byte) gotoxy::y#3 22.0
(byte) gotoxy::y#4 7004.666666666666
(byte) gotoxy::y#5 10001.0
(void()) main()
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#2 101.0
(byte) main::c1
(byte) main::c1#1 151.5
(byte) main::c1#2 50.5
(byte) main::wherey1_return
(byte) main::wherey1_return#0 22.0
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1702.0000000000002
(byte) toupper::return
(byte) toupper::return#0 2002.0
(byte) toupper::return#2 1034.6666666666667
(byte) toupper::return#3 202.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ main::c1#2 main::c1#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
[ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ]
[ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ]
[ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
[ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
Added variable main::wherey1_return#0 to live range equivalence class [ main::wherey1_return#0 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::$10 to live range equivalence class [ gotoxy::$10 ]
Added variable gotoxy::offset#0 to live range equivalence class [ gotoxy::offset#0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ main::c1#2 main::c1#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
[ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ]
[ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ]
[ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
[ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ main::wherey1_return#0 ]
[ toupper::return#3 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::$10 ]
[ gotoxy::offset#0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ main::c1#2 main::c1#1 ]
Allocated zp[1]:4 [ cputc::c#2 cputc::c#0 cputc::c#1 ]
Allocated zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
Allocated zp[2]:6 [ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ]
Allocated zp[2]:8 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ]
Allocated zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
Allocated zp[1]:11 [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ]
Allocated zp[1]:12 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[1]:13 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:18 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:19 [ main::wherey1_return#0 ]
Allocated zp[1]:20 [ toupper::return#3 ]
Allocated zp[2]:21 [ gotoxy::$8 ]
Allocated zp[2]:23 [ gotoxy::$9 ]
Allocated zp[2]:25 [ gotoxy::$10 ]
Allocated zp[2]:27 [ gotoxy::offset#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The screen width
  .const CONIO_WIDTH = $28
  // The screen height
  .const CONIO_HEIGHT = $19
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  // The current cursor x-position
  .label conio_cursor_x = $a
  // The current cursor y-position
  .label conio_cursor_y = 5
  // The current cursor address
  .label conio_cursor_text = 6
  // The current cursor address
  .label conio_cursor_color = 8
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label c = 2
    .label wherey1_return = $13
    .label c1 = 3
    // [4] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [5] call clrscr 
  // Clear screen
    // [56] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) conio_cursor_color#32 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // [6] phi (byte*) conio_cursor_text#32 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [6] phi (byte) conio_cursor_y#33 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [6] phi (byte) conio_cursor_x#32 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [6] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
  // Output un-modified chars
    // [6] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [6] phi (byte*) conio_cursor_color#32 = (byte*) conio_cursor_color#20 [phi:main::@4->main::@1#0] -- register_copy 
    // [6] phi (byte*) conio_cursor_text#32 = (byte*) conio_cursor_text#20 [phi:main::@4->main::@1#1] -- register_copy 
    // [6] phi (byte) conio_cursor_y#33 = (byte) conio_cursor_y#21 [phi:main::@4->main::@1#2] -- register_copy 
    // [6] phi (byte) conio_cursor_x#32 = (byte) conio_cursor_x#21 [phi:main::@4->main::@1#3] -- register_copy 
    // [6] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@4->main::@1#4] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] (byte) cputc::c#0 ← (byte) main::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [8] call cputc 
    // [23] phi from main::@1 to cputc [phi:main::@1->cputc]
  cputc_from___b1:
    // [23] phi (byte) conio_cursor_x#19 = (byte) conio_cursor_x#32 [phi:main::@1->cputc#0] -- register_copy 
    // [23] phi (byte*) conio_cursor_color#18 = (byte*) conio_cursor_color#32 [phi:main::@1->cputc#1] -- register_copy 
    // [23] phi (byte*) conio_cursor_text#18 = (byte*) conio_cursor_text#32 [phi:main::@1->cputc#2] -- register_copy 
    // [23] phi (byte) conio_cursor_y#17 = (byte) conio_cursor_y#33 [phi:main::@1->cputc#3] -- register_copy 
    // [23] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:main::@1->cputc#4] -- register_copy 
    jsr cputc
    jmp __b4
    // main::@4
  __b4:
    // [9] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [10] if((byte) main::c#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b4
    jmp wherey1
    // main::wherey1
  wherey1:
    // [11] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y#21 -- vbuz1=vbuz2 
    lda.z conio_cursor_y
    sta.z wherey1_return
    jmp __b3
    // main::@3
  __b3:
    // [12] (byte) gotoxy::y#3 ← (byte) main::wherey1_return#0 + (byte) 2 -- vbuz1=vbuz2_plus_2 
    lda.z wherey1_return
    clc
    adc #2
    sta.z gotoxy.y
    // [13] call gotoxy 
    // [39] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
  gotoxy_from___b3:
    // [39] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#3 [phi:main::@3->gotoxy#0] -- register_copy 
    jsr gotoxy
    // [14] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [14] phi (byte*) conio_cursor_color#34 = (byte*) conio_cursor_color#16 [phi:main::@3->main::@2#0] -- register_copy 
    // [14] phi (byte*) conio_cursor_text#34 = (byte*) conio_cursor_text#16 [phi:main::@3->main::@2#1] -- register_copy 
    // [14] phi (byte) conio_cursor_y#35 = (byte) conio_cursor_y#16 [phi:main::@3->main::@2#2] -- register_copy 
    // [14] phi (byte) conio_cursor_x#34 = (byte) 0 [phi:main::@3->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [14] phi (byte) main::c1#2 = (byte) 0 [phi:main::@3->main::@2#4] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
    jmp __b2
  // Output toupper-chars chars
    // [14] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [14] phi (byte*) conio_cursor_color#34 = (byte*) conio_cursor_color#20 [phi:main::@6->main::@2#0] -- register_copy 
    // [14] phi (byte*) conio_cursor_text#34 = (byte*) conio_cursor_text#20 [phi:main::@6->main::@2#1] -- register_copy 
    // [14] phi (byte) conio_cursor_y#35 = (byte) conio_cursor_y#21 [phi:main::@6->main::@2#2] -- register_copy 
    // [14] phi (byte) conio_cursor_x#34 = (byte) conio_cursor_x#21 [phi:main::@6->main::@2#3] -- register_copy 
    // [14] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@2#4] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [15] (byte) toupper::ch#0 ← (byte) main::c1#2 -- vbuz1=vbuz2 
    lda.z c1
    sta.z toupper.ch
    // [16] call toupper 
    jsr toupper
    // [17] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b5
    // main::@5
  __b5:
    // [18] (byte) cputc::c#1 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z cputc.c
    // [19] call cputc 
    // [23] phi from main::@5 to cputc [phi:main::@5->cputc]
  cputc_from___b5:
    // [23] phi (byte) conio_cursor_x#19 = (byte) conio_cursor_x#34 [phi:main::@5->cputc#0] -- register_copy 
    // [23] phi (byte*) conio_cursor_color#18 = (byte*) conio_cursor_color#34 [phi:main::@5->cputc#1] -- register_copy 
    // [23] phi (byte*) conio_cursor_text#18 = (byte*) conio_cursor_text#34 [phi:main::@5->cputc#2] -- register_copy 
    // [23] phi (byte) conio_cursor_y#17 = (byte) conio_cursor_y#35 [phi:main::@5->cputc#3] -- register_copy 
    // [23] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:main::@5->cputc#4] -- register_copy 
    jsr cputc
    jmp __b6
    // main::@6
  __b6:
    // [20] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [21] if((byte) main::c1#1!=(byte) 0) goto main::@2 -- vbuz1_neq_0_then_la1 
    lda.z c1
    cmp #0
    bne __b2_from___b6
    jmp __breturn
    // main::@return
  __breturn:
    // [22] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward
// cputc(byte zp(4) c)
cputc: {
    .label c = 4
    // [24] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1
    jmp __b2
    // cputc::@2
  __b2:
    // [25] *((byte*) conio_cursor_text#18) ← (byte) cputc::c#2 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [26] (byte*) conio_cursor_text#29 ← ++ (byte*) conio_cursor_text#18 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [27] *((byte*) conio_cursor_color#18) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [28] (byte*) conio_cursor_color#29 ← ++ (byte*) conio_cursor_color#18 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [29] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#19 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [30] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_WIDTH
    cmp.z conio_cursor_x
    bne __breturn_from___b2
    jmp __b3
    // cputc::@3
  __b3:
    // [31] (byte) conio_cursor_y#31 ← ++ (byte) conio_cursor_y#17 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [32] if((byte) conio_cursor_y#31!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_HEIGHT
    cmp.z conio_cursor_y
    bne __breturn_from___b3
    // [33] phi from cputc::@3 to cputc::@4 [phi:cputc::@3->cputc::@4]
  __b4_from___b3:
    jmp __b4
    // cputc::@4
  __b4:
    // [34] call gotoxy 
    // [39] phi from cputc::@4 to gotoxy [phi:cputc::@4->gotoxy]
  gotoxy_from___b4:
    // [39] phi (byte) gotoxy::y#4 = (byte) 0 [phi:cputc::@4->gotoxy#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gotoxy.y
    jsr gotoxy
    // [35] phi from cputc::@1 cputc::@3 cputc::@4 to cputc::@return [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return]
  __breturn_from___b1:
  __breturn_from___b3:
  __breturn_from___b4:
    // [35] phi (byte*) conio_cursor_color#20 = (byte*) conio_cursor_color#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#0] -- register_copy 
    // [35] phi (byte*) conio_cursor_text#20 = (byte*) conio_cursor_text#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#1] -- register_copy 
    // [35] phi (byte) conio_cursor_y#21 = (byte) conio_cursor_y#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#2] -- register_copy 
    // [35] phi (byte) conio_cursor_x#21 = (byte) 0 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    jmp __breturn
    // [35] phi from cputc::@2 to cputc::@return [phi:cputc::@2->cputc::@return]
  __breturn_from___b2:
    // [35] phi (byte*) conio_cursor_color#20 = (byte*) conio_cursor_color#29 [phi:cputc::@2->cputc::@return#0] -- register_copy 
    // [35] phi (byte*) conio_cursor_text#20 = (byte*) conio_cursor_text#29 [phi:cputc::@2->cputc::@return#1] -- register_copy 
    // [35] phi (byte) conio_cursor_y#21 = (byte) conio_cursor_y#17 [phi:cputc::@2->cputc::@return#2] -- register_copy 
    // [35] phi (byte) conio_cursor_x#21 = (byte) conio_cursor_x#6 [phi:cputc::@2->cputc::@return#3] -- register_copy 
    jmp __breturn
    // cputc::@return
  __breturn:
    // [36] return 
    rts
    // cputc::@1
  __b1:
    // [37] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#17 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z conio_cursor_y
    iny
    sty.z gotoxy.y
    // [38] call gotoxy 
    // [39] phi from cputc::@1 to gotoxy [phi:cputc::@1->gotoxy]
  gotoxy_from___b1:
    // [39] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#1 [phi:cputc::@1->gotoxy#0] -- register_copy 
    jsr gotoxy
    jmp __breturn_from___b1
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte zp($b) y)
gotoxy: {
    .label __8 = $15
    .label offset = $1b
    .label y = $b
    .label __9 = $17
    .label __10 = $19
    jmp __b1
    // gotoxy::@1
  __b1:
    // [40] if((byte) gotoxy::y#4<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #CONIO_HEIGHT
    bcc __b3_from___b1
    // [42] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
  __b2_from___b1:
    // [42] phi (byte) gotoxy::y#5 = (byte) 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b2
    // [41] phi from gotoxy::@1 to gotoxy::@3 [phi:gotoxy::@1->gotoxy::@3]
  __b3_from___b1:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [42] phi from gotoxy::@3 to gotoxy::@2 [phi:gotoxy::@3->gotoxy::@2]
  __b2_from___b3:
    // [42] phi (byte) gotoxy::y#5 = (byte) gotoxy::y#4 [phi:gotoxy::@3->gotoxy::@2#0] -- register_copy 
    jmp __b2
    // gotoxy::@2
  __b2:
    // [43] (byte) conio_cursor_y#16 ← (byte) gotoxy::y#5 -- vbuz1=vbuz2 
    lda.z y
    sta.z conio_cursor_y
    // [44] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __8
    lda #0
    sta.z __8+1
    // [45] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __8
    asl
    sta.z __9
    lda.z __8+1
    rol
    sta.z __9+1
    asl.z __9
    rol.z __9+1
    // [46] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z __9
    clc
    adc.z __8
    sta.z __10
    lda.z __9+1
    adc.z __8+1
    sta.z __10+1
    // [47] (word) gotoxy::offset#0 ← (word~) gotoxy::$10 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z __10
    asl
    sta.z offset
    lda.z __10+1
    rol
    sta.z offset+1
    asl.z offset
    rol.z offset+1
    asl.z offset
    rol.z offset+1
    // [48] (byte*) conio_cursor_text#16 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda.z offset+1
    adc #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [49] (byte*) conio_cursor_color#16 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda.z offset+1
    adc #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [50] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($c) ch)
toupper: {
    .label return = $c
    .label ch = $c
    .label return_1 = $14
    // [51] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [52] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [54] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [54] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [53] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [55] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = $12
    .label line_text = $e
    .label line_cols = $10
    .label l = $d
    // [57] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [57] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [57] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [57] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [58] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #CONIO_HEIGHT
    bcc __b2_from___b1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [59] return 
    rts
    // [60] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b2_from___b1:
    // [60] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b2
    // clrscr::@2
  __b2:
    // [61] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #CONIO_WIDTH
    bcc __b3
    jmp __b4
    // clrscr::@4
  __b4:
    // [62] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [63] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [64] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [57] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
  __b1_from___b4:
    // [57] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [57] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [57] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // [65] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [66] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy.z c
    sta (line_cols),y
    // [67] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [60] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
  __b2_from___b3:
    // [60] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*) 53272) ← (byte) $17 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*) conio_cursor_text#18) ← (byte) cputc::c#2 [ conio_cursor_y#17 conio_cursor_text#18 conio_cursor_color#18 conio_cursor_x#19 ] ( main:2::cputc:8 [ main::c#2 conio_cursor_y#17 conio_cursor_text#18 conio_cursor_color#18 conio_cursor_x#19 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19 [ main::c1#2 conio_cursor_y#17 conio_cursor_text#18 conio_cursor_color#18 conio_cursor_x#19 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::c1#2 main::c1#1 ]
Statement [27] *((byte*) conio_cursor_color#18) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_y#17 conio_cursor_color#18 conio_cursor_x#19 conio_cursor_text#29 ] ( main:2::cputc:8 [ main::c#2 conio_cursor_y#17 conio_cursor_color#18 conio_cursor_x#19 conio_cursor_text#29 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19 [ main::c1#2 conio_cursor_y#17 conio_cursor_color#18 conio_cursor_x#19 conio_cursor_text#29 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::c1#2 main::c1#1 ]
Statement [44] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5 [ conio_cursor_y#16 gotoxy::$8 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::$8 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [45] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2 [ conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [46] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8 [ conio_cursor_y#16 gotoxy::$10 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::$10 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [47] (word) gotoxy::offset#0 ← (word~) gotoxy::$10 << (byte) 3 [ conio_cursor_y#16 gotoxy::offset#0 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::offset#0 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [48] (byte*) conio_cursor_text#16 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 [ conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [49] (byte*) conio_cursor_color#16 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 [ conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [53] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:2::toupper:16 [ main::c1#2 conio_cursor_x#34 conio_cursor_y#35 conio_cursor_text#34 conio_cursor_color#34 toupper::return#0 ] { { toupper::ch#0 = main::c1#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [62] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ clrscr::l#2 clrscr::l#1 ]
Statement [63] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [65] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ clrscr::c#2 clrscr::c#1 ]
Statement [66] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*) 53272) ← (byte) $17 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*) conio_cursor_text#18) ← (byte) cputc::c#2 [ conio_cursor_y#17 conio_cursor_text#18 conio_cursor_color#18 conio_cursor_x#19 ] ( main:2::cputc:8 [ main::c#2 conio_cursor_y#17 conio_cursor_text#18 conio_cursor_color#18 conio_cursor_x#19 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19 [ main::c1#2 conio_cursor_y#17 conio_cursor_text#18 conio_cursor_color#18 conio_cursor_x#19 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  ) always clobbers reg byte y 
Statement [27] *((byte*) conio_cursor_color#18) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_y#17 conio_cursor_color#18 conio_cursor_x#19 conio_cursor_text#29 ] ( main:2::cputc:8 [ main::c#2 conio_cursor_y#17 conio_cursor_color#18 conio_cursor_x#19 conio_cursor_text#29 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19 [ main::c1#2 conio_cursor_y#17 conio_cursor_color#18 conio_cursor_x#19 conio_cursor_text#29 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  ) always clobbers reg byte a reg byte y 
Statement [44] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5 [ conio_cursor_y#16 gotoxy::$8 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::$8 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [45] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2 [ conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::$8 gotoxy::$9 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [46] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8 [ conio_cursor_y#16 gotoxy::$10 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::$10 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::$10 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [47] (word) gotoxy::offset#0 ← (word~) gotoxy::$10 << (byte) 3 [ conio_cursor_y#16 gotoxy::offset#0 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 gotoxy::offset#0 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [48] (byte*) conio_cursor_text#16 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 [ conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 gotoxy::offset#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [49] (byte*) conio_cursor_color#16 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 [ conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] ( main:2::gotoxy:13 [ conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { gotoxy::y#3 = gotoxy::y#4 } }  main:2::cputc:8::gotoxy:34 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } }  main:2::cputc:19::gotoxy:34 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } }  main:2::cputc:8::gotoxy:38 [ main::c#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#0 = cputc::c#2 main::c#2 } { conio_cursor_y#17 = conio_cursor_y#33 } { conio_cursor_text#18 = conio_cursor_text#32 } { conio_cursor_color#18 = conio_cursor_color#32 } { conio_cursor_x#19 = conio_cursor_x#32 } { gotoxy::y#1 = gotoxy::y#4 } }  main:2::cputc:19::gotoxy:38 [ main::c1#2 conio_cursor_y#16 conio_cursor_text#16 conio_cursor_color#16 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } { conio_cursor_y#17 = conio_cursor_y#35 } { conio_cursor_text#18 = conio_cursor_text#34 } { conio_cursor_color#18 = conio_cursor_color#34 } { conio_cursor_x#19 = conio_cursor_x#34 } { gotoxy::y#1 = gotoxy::y#4 } }  ) always clobbers reg byte a 
Statement [53] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:2::toupper:16 [ main::c1#2 conio_cursor_x#34 conio_cursor_y#35 conio_cursor_text#34 conio_cursor_color#34 toupper::return#0 ] { { toupper::ch#0 = main::c1#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [62] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [63] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [65] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [66] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:2::clrscr:5 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::c1#2 main::c1#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ cputc::c#2 cputc::c#0 cputc::c#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ main::wherey1_return#0 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ toupper::return#3 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ gotoxy::$8 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ gotoxy::$9 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ gotoxy::$10 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ gotoxy::offset#0 ] : zp[2]:27 , 

REGISTER UPLIFT SCOPES
Uplift Scope [gotoxy] 20,002: zp[2]:23 [ gotoxy::$9 ] 20,002: zp[2]:25 [ gotoxy::$10 ] 19,029.67: zp[1]:11 [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ] 15,001.5: zp[2]:21 [ gotoxy::$8 ] 15,001.5: zp[2]:27 [ gotoxy::offset#0 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:18 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:13 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [] 4,113.55: zp[2]:8 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ] 3,835.35: zp[2]:6 [ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ] 3,665.03: zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ] 1,993.78: zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ] 
Uplift Scope [toupper] 4,738.67: zp[1]:12 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 202: zp[1]:20 [ toupper::return#3 ] 
Uplift Scope [cputc] 1,506: zp[1]:4 [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::c#2 main::c#1 ] 202: zp[1]:3 [ main::c1#2 main::c1#1 ] 22: zp[1]:19 [ main::wherey1_return#0 ] 

Uplifting [gotoxy] best 7297 combination zp[2]:23 [ gotoxy::$9 ] zp[2]:25 [ gotoxy::$10 ] reg byte a [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ] zp[2]:21 [ gotoxy::$8 ] zp[2]:27 [ gotoxy::offset#0 ] 
Uplifting [clrscr] best 5707 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [] best 5707 combination zp[2]:8 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ] zp[2]:6 [ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ] zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ] zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ] 
Uplifting [toupper] best 5580 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [cputc] best 5514 combination reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplifting [main] best 5308 combination reg byte x [ main::c#2 main::c#1 ] reg byte x [ main::c1#2 main::c1#1 ] reg byte a [ main::wherey1_return#0 ] 
Attempting to uplift remaining variables inzp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
Uplifting [] best 5308 combination zp[1]:5 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ] 
Attempting to uplift remaining variables inzp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
Uplifting [] best 5308 combination zp[1]:10 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ] 
Coalescing zero page register [ zp[2]:8 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 ] ] with [ zp[2]:27 [ gotoxy::offset#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ gotoxy::$8 ] ] with [ zp[2]:25 [ gotoxy::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 gotoxy::offset#0 ] ] with [ zp[2]:21 [ gotoxy::$8 gotoxy::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ gotoxy::$9 ] ] with [ zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] ]
Allocated (was zp[1]:5) zp[1]:2 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
Allocated (was zp[2]:6) zp[2]:3 [ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ]
Allocated (was zp[2]:8) zp[2]:5 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 gotoxy::offset#0 gotoxy::$8 gotoxy::$10 ]
Allocated (was zp[1]:10) zp[1]:7 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
Allocated (was zp[2]:16) zp[2]:8 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[2]:23) zp[2]:10 [ gotoxy::$9 clrscr::line_text#5 clrscr::line_text#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The screen width
  .const CONIO_WIDTH = $28
  // The screen height
  .const CONIO_HEIGHT = $19
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  // The current cursor x-position
  .label conio_cursor_x = 7
  // The current cursor y-position
  .label conio_cursor_y = 2
  // The current cursor address
  .label conio_cursor_text = 3
  // The current cursor address
  .label conio_cursor_color = 5
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [5] call clrscr 
  // Clear screen
    // [56] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) conio_cursor_color#32 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // [6] phi (byte*) conio_cursor_text#32 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [6] phi (byte) conio_cursor_y#33 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [6] phi (byte) conio_cursor_x#32 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [6] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#4] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // Output un-modified chars
    // [6] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [6] phi (byte*) conio_cursor_color#32 = (byte*) conio_cursor_color#20 [phi:main::@4->main::@1#0] -- register_copy 
    // [6] phi (byte*) conio_cursor_text#32 = (byte*) conio_cursor_text#20 [phi:main::@4->main::@1#1] -- register_copy 
    // [6] phi (byte) conio_cursor_y#33 = (byte) conio_cursor_y#21 [phi:main::@4->main::@1#2] -- register_copy 
    // [6] phi (byte) conio_cursor_x#32 = (byte) conio_cursor_x#21 [phi:main::@4->main::@1#3] -- register_copy 
    // [6] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@4->main::@1#4] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] (byte) cputc::c#0 ← (byte) main::c#2 -- vbuaa=vbuxx 
    txa
    // [8] call cputc 
    // [23] phi from main::@1 to cputc [phi:main::@1->cputc]
  cputc_from___b1:
    // [23] phi (byte) conio_cursor_x#19 = (byte) conio_cursor_x#32 [phi:main::@1->cputc#0] -- register_copy 
    // [23] phi (byte*) conio_cursor_color#18 = (byte*) conio_cursor_color#32 [phi:main::@1->cputc#1] -- register_copy 
    // [23] phi (byte*) conio_cursor_text#18 = (byte*) conio_cursor_text#32 [phi:main::@1->cputc#2] -- register_copy 
    // [23] phi (byte) conio_cursor_y#17 = (byte) conio_cursor_y#33 [phi:main::@1->cputc#3] -- register_copy 
    // [23] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:main::@1->cputc#4] -- register_copy 
    jsr cputc
    jmp __b4
    // main::@4
  __b4:
    // [9] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::c#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b4
    jmp wherey1
    // main::wherey1
  wherey1:
    // [11] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y#21 -- vbuaa=vbuz1 
    lda.z conio_cursor_y
    jmp __b3
    // main::@3
  __b3:
    // [12] (byte) gotoxy::y#3 ← (byte) main::wherey1_return#0 + (byte) 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    // [13] call gotoxy 
    // [39] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
  gotoxy_from___b3:
    // [39] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#3 [phi:main::@3->gotoxy#0] -- register_copy 
    jsr gotoxy
    // [14] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [14] phi (byte*) conio_cursor_color#34 = (byte*) conio_cursor_color#16 [phi:main::@3->main::@2#0] -- register_copy 
    // [14] phi (byte*) conio_cursor_text#34 = (byte*) conio_cursor_text#16 [phi:main::@3->main::@2#1] -- register_copy 
    // [14] phi (byte) conio_cursor_y#35 = (byte) conio_cursor_y#16 [phi:main::@3->main::@2#2] -- register_copy 
    // [14] phi (byte) conio_cursor_x#34 = (byte) 0 [phi:main::@3->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [14] phi (byte) main::c1#2 = (byte) 0 [phi:main::@3->main::@2#4] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
  // Output toupper-chars chars
    // [14] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [14] phi (byte*) conio_cursor_color#34 = (byte*) conio_cursor_color#20 [phi:main::@6->main::@2#0] -- register_copy 
    // [14] phi (byte*) conio_cursor_text#34 = (byte*) conio_cursor_text#20 [phi:main::@6->main::@2#1] -- register_copy 
    // [14] phi (byte) conio_cursor_y#35 = (byte) conio_cursor_y#21 [phi:main::@6->main::@2#2] -- register_copy 
    // [14] phi (byte) conio_cursor_x#34 = (byte) conio_cursor_x#21 [phi:main::@6->main::@2#3] -- register_copy 
    // [14] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@2#4] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [15] (byte) toupper::ch#0 ← (byte) main::c1#2 -- vbuaa=vbuxx 
    txa
    // [16] call toupper 
    jsr toupper
    // [17] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b5
    // main::@5
  __b5:
    // [18] (byte) cputc::c#1 ← (byte) toupper::return#3
    // [19] call cputc 
    // [23] phi from main::@5 to cputc [phi:main::@5->cputc]
  cputc_from___b5:
    // [23] phi (byte) conio_cursor_x#19 = (byte) conio_cursor_x#34 [phi:main::@5->cputc#0] -- register_copy 
    // [23] phi (byte*) conio_cursor_color#18 = (byte*) conio_cursor_color#34 [phi:main::@5->cputc#1] -- register_copy 
    // [23] phi (byte*) conio_cursor_text#18 = (byte*) conio_cursor_text#34 [phi:main::@5->cputc#2] -- register_copy 
    // [23] phi (byte) conio_cursor_y#17 = (byte) conio_cursor_y#35 [phi:main::@5->cputc#3] -- register_copy 
    // [23] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:main::@5->cputc#4] -- register_copy 
    jsr cputc
    jmp __b6
    // main::@6
  __b6:
    // [20] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] if((byte) main::c1#1!=(byte) 0) goto main::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2_from___b6
    jmp __breturn
    // main::@return
  __breturn:
    // [22] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward
// cputc(byte register(A) c)
cputc: {
    // [24] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    jmp __b2
    // cputc::@2
  __b2:
    // [25] *((byte*) conio_cursor_text#18) ← (byte) cputc::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [26] (byte*) conio_cursor_text#29 ← ++ (byte*) conio_cursor_text#18 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [27] *((byte*) conio_cursor_color#18) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [28] (byte*) conio_cursor_color#29 ← ++ (byte*) conio_cursor_color#18 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [29] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#19 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [30] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_WIDTH
    cmp.z conio_cursor_x
    bne __breturn_from___b2
    jmp __b3
    // cputc::@3
  __b3:
    // [31] (byte) conio_cursor_y#31 ← ++ (byte) conio_cursor_y#17 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [32] if((byte) conio_cursor_y#31!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_HEIGHT
    cmp.z conio_cursor_y
    bne __breturn_from___b3
    // [33] phi from cputc::@3 to cputc::@4 [phi:cputc::@3->cputc::@4]
  __b4_from___b3:
    jmp __b4
    // cputc::@4
  __b4:
    // [34] call gotoxy 
    // [39] phi from cputc::@4 to gotoxy [phi:cputc::@4->gotoxy]
  gotoxy_from___b4:
    // [39] phi (byte) gotoxy::y#4 = (byte) 0 [phi:cputc::@4->gotoxy#0] -- vbuaa=vbuc1 
    lda #0
    jsr gotoxy
    // [35] phi from cputc::@1 cputc::@3 cputc::@4 to cputc::@return [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return]
  __breturn_from___b1:
  __breturn_from___b3:
  __breturn_from___b4:
    // [35] phi (byte*) conio_cursor_color#20 = (byte*) conio_cursor_color#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#0] -- register_copy 
    // [35] phi (byte*) conio_cursor_text#20 = (byte*) conio_cursor_text#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#1] -- register_copy 
    // [35] phi (byte) conio_cursor_y#21 = (byte) conio_cursor_y#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#2] -- register_copy 
    // [35] phi (byte) conio_cursor_x#21 = (byte) 0 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    jmp __breturn
    // [35] phi from cputc::@2 to cputc::@return [phi:cputc::@2->cputc::@return]
  __breturn_from___b2:
    // [35] phi (byte*) conio_cursor_color#20 = (byte*) conio_cursor_color#29 [phi:cputc::@2->cputc::@return#0] -- register_copy 
    // [35] phi (byte*) conio_cursor_text#20 = (byte*) conio_cursor_text#29 [phi:cputc::@2->cputc::@return#1] -- register_copy 
    // [35] phi (byte) conio_cursor_y#21 = (byte) conio_cursor_y#17 [phi:cputc::@2->cputc::@return#2] -- register_copy 
    // [35] phi (byte) conio_cursor_x#21 = (byte) conio_cursor_x#6 [phi:cputc::@2->cputc::@return#3] -- register_copy 
    jmp __breturn
    // cputc::@return
  __breturn:
    // [36] return 
    rts
    // cputc::@1
  __b1:
    // [37] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#17 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z conio_cursor_y
    clc
    adc #1
    // [38] call gotoxy 
    // [39] phi from cputc::@1 to gotoxy [phi:cputc::@1->gotoxy]
  gotoxy_from___b1:
    // [39] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#1 [phi:cputc::@1->gotoxy#0] -- register_copy 
    jsr gotoxy
    jmp __breturn_from___b1
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(A) y)
gotoxy: {
    .label __8 = 5
    .label offset = 5
    .label __9 = $a
    .label __10 = 5
    jmp __b1
    // gotoxy::@1
  __b1:
    // [40] if((byte) gotoxy::y#4<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #CONIO_HEIGHT
    bcc __b3_from___b1
    // [42] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
  __b2_from___b1:
    // [42] phi (byte) gotoxy::y#5 = (byte) 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b2
    // [41] phi from gotoxy::@1 to gotoxy::@3 [phi:gotoxy::@1->gotoxy::@3]
  __b3_from___b1:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [42] phi from gotoxy::@3 to gotoxy::@2 [phi:gotoxy::@3->gotoxy::@2]
  __b2_from___b3:
    // [42] phi (byte) gotoxy::y#5 = (byte) gotoxy::y#4 [phi:gotoxy::@3->gotoxy::@2#0] -- register_copy 
    jmp __b2
    // gotoxy::@2
  __b2:
    // [43] (byte) conio_cursor_y#16 ← (byte) gotoxy::y#5 -- vbuz1=vbuaa 
    sta.z conio_cursor_y
    // [44] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5 -- vwuz1=_word_vbuaa 
    sta.z __8
    lda #0
    sta.z __8+1
    // [45] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __8
    asl
    sta.z __9
    lda.z __8+1
    rol
    sta.z __9+1
    asl.z __9
    rol.z __9+1
    // [46] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __10
    clc
    adc.z __9
    sta.z __10
    lda.z __10+1
    adc.z __9+1
    sta.z __10+1
    // [47] (word) gotoxy::offset#0 ← (word~) gotoxy::$10 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z offset
    rol.z offset+1
    asl.z offset
    rol.z offset+1
    asl.z offset
    rol.z offset+1
    // [48] (byte*) conio_cursor_text#16 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda.z offset+1
    adc #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [49] (byte*) conio_cursor_color#16 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z conio_cursor_color
    adc #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda.z conio_cursor_color+1
    adc #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [50] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [51] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [52] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [54] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [54] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [53] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [55] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $a
    .label line_cols = 8
    // [57] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [57] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [57] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [57] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [58] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #CONIO_HEIGHT
    bcc __b2_from___b1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [59] return 
    rts
    // [60] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b2_from___b1:
    // [60] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // clrscr::@2
  __b2:
    // [61] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #CONIO_WIDTH
    bcc __b3
    jmp __b4
    // clrscr::@4
  __b4:
    // [62] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [63] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [64] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [57] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
  __b1_from___b4:
    // [57] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [57] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [57] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // [65] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [66] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // [67] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [60] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
  __b2_from___b3:
    // [60] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp wherey1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Replacing instruction ldx #0 with TAX
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b2_from___b6 with __b2
Replacing label __breturn_from___b2 with __breturn
Replacing label __breturn_from___b3 with __breturn_from___b4
Replacing label __breturn_from___b1 with __breturn_from___b4
Replacing label __b3_from___b1 with __b2
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b6:
Removing instruction cputc_from___b5:
Removing instruction __b4_from___b3:
Removing instruction gotoxy_from___b4:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from___b3:
Removing instruction __breturn_from___b2:
Removing instruction __b3_from___b1:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction clrscr_from_main:
Removing instruction __b1_from_main:
Removing instruction cputc_from___b1:
Removing instruction __b4:
Removing instruction wherey1:
Removing instruction __b3:
Removing instruction gotoxy_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction gotoxy_from___b1:
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from_clrscr:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b4 to __b2
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __b2_from___b1 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte) CONIO_HEIGHT = (byte) $19
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const nomodify byte) CONIO_WIDTH = (byte) $28
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 reg byte y 20002.0
(byte) clrscr::c#2 reg byte y 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 reg byte x 2002.0
(byte) clrscr::l#2 reg byte x 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:8 1001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:8 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:10 667.3333333333334
(byte*) clrscr::line_text#5 line_text zp[2]:10 1714.7142857142858
(byte*) conio_cursor_color
(byte*) conio_cursor_color#16 conio_cursor_color zp[2]:5 2402.8
(byte*) conio_cursor_color#18 conio_cursor_color zp[2]:5 440.79999999999995
(byte*) conio_cursor_color#20 conio_cursor_color zp[2]:5 525.75
(byte*) conio_cursor_color#29 conio_cursor_color zp[2]:5 600.5999999999999
(byte*) conio_cursor_color#32 conio_cursor_color zp[2]:5 101.0
(byte*) conio_cursor_color#34 conio_cursor_color zp[2]:5 42.599999999999994
(byte*) conio_cursor_text
(byte*) conio_cursor_text#16 conio_cursor_text zp[2]:3 2002.3333333333333
(byte*) conio_cursor_text#18 conio_cursor_text zp[2]:3 734.6666666666667
(byte*) conio_cursor_text#20 conio_cursor_text zp[2]:3 525.75
(byte*) conio_cursor_text#29 conio_cursor_text zp[2]:3 429.0
(byte*) conio_cursor_text#32 conio_cursor_text zp[2]:3 101.0
(byte*) conio_cursor_text#34 conio_cursor_text zp[2]:3 42.599999999999994
(byte) conio_cursor_x
(byte) conio_cursor_x#19 conio_cursor_x zp[1]:7 200.5
(byte) conio_cursor_x#21 conio_cursor_x zp[1]:7 150.375
(byte) conio_cursor_x#32 conio_cursor_x zp[1]:7 101.0
(byte) conio_cursor_x#34 conio_cursor_x zp[1]:7 40.4
(byte) conio_cursor_x#6 conio_cursor_x zp[1]:7 1501.5
(byte) conio_cursor_y
(byte) conio_cursor_y#16 conio_cursor_y zp[1]:2 1092.181818181818
(byte) conio_cursor_y#17 conio_cursor_y zp[1]:2 400.625
(byte) conio_cursor_y#21 conio_cursor_y zp[1]:2 527.125
(byte) conio_cursor_y#31 conio_cursor_y zp[1]:2 1501.5
(byte) conio_cursor_y#33 conio_cursor_y zp[1]:2 101.0
(byte) conio_cursor_y#35 conio_cursor_y zp[1]:2 42.599999999999994
(byte) conio_textcolor
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 202.0
(byte) cputc::c#1 reg byte a 202.0
(byte) cputc::c#2 reg byte a 1102.0
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word~) gotoxy::$10 zp[2]:5 20002.0
(word~) gotoxy::$8 zp[2]:5 15001.5
(word~) gotoxy::$9 zp[2]:10 20002.0
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0 offset zp[2]:5 15001.5
(byte) gotoxy::x
(byte) gotoxy::y
(byte) gotoxy::y#1 reg byte a 2002.0
(byte) gotoxy::y#3 reg byte a 22.0
(byte) gotoxy::y#4 reg byte a 7004.666666666666
(byte) gotoxy::y#5 reg byte a 10001.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x 151.5
(byte) main::c#2 reg byte x 101.0
(byte) main::c1
(byte) main::c1#1 reg byte x 151.5
(byte) main::c1#2 reg byte x 50.5
(label) main::wherey1
(byte) main::wherey1_return
(byte) main::wherey1_return#0 reg byte a 22.0
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 reg byte a 1702.0000000000002
(byte) toupper::return
(byte) toupper::return#0 reg byte a 2002.0
(byte) toupper::return#2 reg byte a 1034.6666666666667
(byte) toupper::return#3 reg byte a 202.0

reg byte x [ main::c#2 main::c#1 ]
reg byte x [ main::c1#2 main::c1#1 ]
reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ]
zp[1]:2 [ conio_cursor_y#17 conio_cursor_y#35 conio_cursor_y#16 conio_cursor_y#33 conio_cursor_y#21 conio_cursor_y#31 ]
zp[2]:3 [ conio_cursor_text#18 conio_cursor_text#34 conio_cursor_text#16 conio_cursor_text#32 conio_cursor_text#20 conio_cursor_text#29 ]
zp[2]:5 [ conio_cursor_color#18 conio_cursor_color#34 conio_cursor_color#16 conio_cursor_color#32 conio_cursor_color#20 conio_cursor_color#29 gotoxy::offset#0 gotoxy::$8 gotoxy::$10 ]
zp[1]:7 [ conio_cursor_x#19 conio_cursor_x#34 conio_cursor_x#32 conio_cursor_x#21 conio_cursor_x#6 ]
reg byte a [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#1 gotoxy::y#3 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
zp[2]:8 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte a [ main::wherey1_return#0 ]
reg byte a [ toupper::return#3 ]
zp[2]:10 [ gotoxy::$9 clrscr::line_text#5 clrscr::line_text#1 ]


FINAL ASSEMBLER
Score: 4337

  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The screen width
  .const CONIO_WIDTH = $28
  // The screen height
  .const CONIO_HEIGHT = $19
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  // The current cursor x-position
  .label conio_cursor_x = 7
  // The current cursor y-position
  .label conio_cursor_y = 2
  // The current cursor address
  .label conio_cursor_text = 3
  // The current cursor address
  .label conio_cursor_color = 5
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // *((char*)0xd018) = 0x17
    // [4] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // clrscr()
    // [5] call clrscr 
  // Clear screen
    // [56] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte*) conio_cursor_color#32 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // [6] phi (byte*) conio_cursor_text#32 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [6] phi (byte) conio_cursor_y#33 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [6] phi (byte) conio_cursor_x#32 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    sta.z conio_cursor_x
    // [6] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#4] -- vbuxx=vbuc1 
    tax
  // Output un-modified chars
    // [6] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [6] phi (byte*) conio_cursor_color#32 = (byte*) conio_cursor_color#20 [phi:main::@4->main::@1#0] -- register_copy 
    // [6] phi (byte*) conio_cursor_text#32 = (byte*) conio_cursor_text#20 [phi:main::@4->main::@1#1] -- register_copy 
    // [6] phi (byte) conio_cursor_y#33 = (byte) conio_cursor_y#21 [phi:main::@4->main::@1#2] -- register_copy 
    // [6] phi (byte) conio_cursor_x#32 = (byte) conio_cursor_x#21 [phi:main::@4->main::@1#3] -- register_copy 
    // [6] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@4->main::@1#4] -- register_copy 
    // main::@1
  __b1:
    // cputc(c)
    // [7] (byte) cputc::c#0 ← (byte) main::c#2 -- vbuaa=vbuxx 
    txa
    // [8] call cputc 
    // [23] phi from main::@1 to cputc [phi:main::@1->cputc]
    // [23] phi (byte) conio_cursor_x#19 = (byte) conio_cursor_x#32 [phi:main::@1->cputc#0] -- register_copy 
    // [23] phi (byte*) conio_cursor_color#18 = (byte*) conio_cursor_color#32 [phi:main::@1->cputc#1] -- register_copy 
    // [23] phi (byte*) conio_cursor_text#18 = (byte*) conio_cursor_text#32 [phi:main::@1->cputc#2] -- register_copy 
    // [23] phi (byte) conio_cursor_y#17 = (byte) conio_cursor_y#33 [phi:main::@1->cputc#3] -- register_copy 
    // [23] phi (byte) cputc::c#2 = (byte) cputc::c#0 [phi:main::@1->cputc#4] -- register_copy 
    jsr cputc
    // main::@4
    // for(char c:0..0xff)
    // [9] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::c#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::wherey1
    // return conio_cursor_y;
    // [11] (byte) main::wherey1_return#0 ← (byte) conio_cursor_y#21 -- vbuaa=vbuz1 
    lda.z conio_cursor_y
    // main::@3
    // gotoxy(0, wherey()+2)
    // [12] (byte) gotoxy::y#3 ← (byte) main::wherey1_return#0 + (byte) 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    // [13] call gotoxy 
    // [39] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
    // [39] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#3 [phi:main::@3->gotoxy#0] -- register_copy 
    jsr gotoxy
    // [14] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [14] phi (byte*) conio_cursor_color#34 = (byte*) conio_cursor_color#16 [phi:main::@3->main::@2#0] -- register_copy 
    // [14] phi (byte*) conio_cursor_text#34 = (byte*) conio_cursor_text#16 [phi:main::@3->main::@2#1] -- register_copy 
    // [14] phi (byte) conio_cursor_y#35 = (byte) conio_cursor_y#16 [phi:main::@3->main::@2#2] -- register_copy 
    // [14] phi (byte) conio_cursor_x#34 = (byte) 0 [phi:main::@3->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [14] phi (byte) main::c1#2 = (byte) 0 [phi:main::@3->main::@2#4] -- vbuxx=vbuc1 
    tax
  // Output toupper-chars chars
    // [14] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // [14] phi (byte*) conio_cursor_color#34 = (byte*) conio_cursor_color#20 [phi:main::@6->main::@2#0] -- register_copy 
    // [14] phi (byte*) conio_cursor_text#34 = (byte*) conio_cursor_text#20 [phi:main::@6->main::@2#1] -- register_copy 
    // [14] phi (byte) conio_cursor_y#35 = (byte) conio_cursor_y#21 [phi:main::@6->main::@2#2] -- register_copy 
    // [14] phi (byte) conio_cursor_x#34 = (byte) conio_cursor_x#21 [phi:main::@6->main::@2#3] -- register_copy 
    // [14] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@2#4] -- register_copy 
    // main::@2
  __b2:
    // toupper(c)
    // [15] (byte) toupper::ch#0 ← (byte) main::c1#2 -- vbuaa=vbuxx 
    txa
    // [16] call toupper 
    jsr toupper
    // [17] (byte) toupper::return#3 ← (byte) toupper::return#2
    // main::@5
    // cputc(toupper(c))
    // [18] (byte) cputc::c#1 ← (byte) toupper::return#3
    // [19] call cputc 
    // [23] phi from main::@5 to cputc [phi:main::@5->cputc]
    // [23] phi (byte) conio_cursor_x#19 = (byte) conio_cursor_x#34 [phi:main::@5->cputc#0] -- register_copy 
    // [23] phi (byte*) conio_cursor_color#18 = (byte*) conio_cursor_color#34 [phi:main::@5->cputc#1] -- register_copy 
    // [23] phi (byte*) conio_cursor_text#18 = (byte*) conio_cursor_text#34 [phi:main::@5->cputc#2] -- register_copy 
    // [23] phi (byte) conio_cursor_y#17 = (byte) conio_cursor_y#35 [phi:main::@5->cputc#3] -- register_copy 
    // [23] phi (byte) cputc::c#2 = (byte) cputc::c#1 [phi:main::@5->cputc#4] -- register_copy 
    jsr cputc
    // main::@6
    // for(char c:0..0xff)
    // [20] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] if((byte) main::c1#1!=(byte) 0) goto main::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // main::@return
    // }
    // [22] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [24] if((byte) cputc::c#2==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [25] *((byte*) conio_cursor_text#18) ← (byte) cputc::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [26] (byte*) conio_cursor_text#29 ← ++ (byte*) conio_cursor_text#18 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [27] *((byte*) conio_cursor_color#18) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [28] (byte*) conio_cursor_color#29 ← ++ (byte*) conio_cursor_color#18 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [29] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#19 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [30] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_WIDTH
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // if(++conio_cursor_y==CONIO_HEIGHT)
    // [31] (byte) conio_cursor_y#31 ← ++ (byte) conio_cursor_y#17 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [32] if((byte) conio_cursor_y#31!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_HEIGHT
    cmp.z conio_cursor_y
    bne __b2
    // [33] phi from cputc::@3 to cputc::@4 [phi:cputc::@3->cputc::@4]
    // cputc::@4
    // gotoxy(0,0)
    // [34] call gotoxy 
    // [39] phi from cputc::@4 to gotoxy [phi:cputc::@4->gotoxy]
    // [39] phi (byte) gotoxy::y#4 = (byte) 0 [phi:cputc::@4->gotoxy#0] -- vbuaa=vbuc1 
    lda #0
    jsr gotoxy
    // [35] phi from cputc::@1 cputc::@3 cputc::@4 to cputc::@return [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return]
  __b2:
    // [35] phi (byte*) conio_cursor_color#20 = (byte*) conio_cursor_color#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#0] -- register_copy 
    // [35] phi (byte*) conio_cursor_text#20 = (byte*) conio_cursor_text#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#1] -- register_copy 
    // [35] phi (byte) conio_cursor_y#21 = (byte) conio_cursor_y#16 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#2] -- register_copy 
    // [35] phi (byte) conio_cursor_x#21 = (byte) 0 [phi:cputc::@1/cputc::@3/cputc::@4->cputc::@return#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    rts
    // [35] phi from cputc::@2 to cputc::@return [phi:cputc::@2->cputc::@return]
    // [35] phi (byte*) conio_cursor_color#20 = (byte*) conio_cursor_color#29 [phi:cputc::@2->cputc::@return#0] -- register_copy 
    // [35] phi (byte*) conio_cursor_text#20 = (byte*) conio_cursor_text#29 [phi:cputc::@2->cputc::@return#1] -- register_copy 
    // [35] phi (byte) conio_cursor_y#21 = (byte) conio_cursor_y#17 [phi:cputc::@2->cputc::@return#2] -- register_copy 
    // [35] phi (byte) conio_cursor_x#21 = (byte) conio_cursor_x#6 [phi:cputc::@2->cputc::@return#3] -- register_copy 
    // cputc::@return
  __breturn:
    // }
    // [36] return 
    rts
    // cputc::@1
  __b1:
    // gotoxy(0, conio_cursor_y+1)
    // [37] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#17 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z conio_cursor_y
    clc
    adc #1
    // [38] call gotoxy 
    // [39] phi from cputc::@1 to gotoxy [phi:cputc::@1->gotoxy]
    // [39] phi (byte) gotoxy::y#4 = (byte) gotoxy::y#1 [phi:cputc::@1->gotoxy#0] -- register_copy 
    jsr gotoxy
    jmp __b2
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(A) y)
gotoxy: {
    .label __8 = 5
    .label offset = 5
    .label __9 = $a
    .label __10 = 5
    // gotoxy::@1
    // if(y>=CONIO_HEIGHT)
    // [40] if((byte) gotoxy::y#4<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #CONIO_HEIGHT
    bcc __b2
    // [42] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
    // [42] phi (byte) gotoxy::y#5 = (byte) 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuaa=vbuc1 
    lda #0
    // [41] phi from gotoxy::@1 to gotoxy::@3 [phi:gotoxy::@1->gotoxy::@3]
    // gotoxy::@3
    // [42] phi from gotoxy::@3 to gotoxy::@2 [phi:gotoxy::@3->gotoxy::@2]
    // [42] phi (byte) gotoxy::y#5 = (byte) gotoxy::y#4 [phi:gotoxy::@3->gotoxy::@2#0] -- register_copy 
    // gotoxy::@2
  __b2:
    // conio_cursor_y = y
    // [43] (byte) conio_cursor_y#16 ← (byte) gotoxy::y#5 -- vbuz1=vbuaa 
    sta.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [44] (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#5 -- vwuz1=_word_vbuaa 
    sta.z __8
    lda #0
    sta.z __8+1
    // [45] (word~) gotoxy::$9 ← (word~) gotoxy::$8 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __8
    asl
    sta.z __9
    lda.z __8+1
    rol
    sta.z __9+1
    asl.z __9
    rol.z __9+1
    // [46] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$8 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __10
    clc
    adc.z __9
    sta.z __10
    lda.z __10+1
    adc.z __9+1
    sta.z __10+1
    // offset = (unsigned int)y*CONIO_WIDTH + x
    // [47] (word) gotoxy::offset#0 ← (word~) gotoxy::$10 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z offset
    rol.z offset+1
    asl.z offset
    rol.z offset+1
    asl.z offset
    rol.z offset+1
    // CONIO_SCREEN_TEXT + offset
    // [48] (byte*) conio_cursor_text#16 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda.z offset+1
    adc #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // CONIO_SCREEN_COLORS + offset
    // [49] (byte*) conio_cursor_color#16 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z conio_cursor_color
    adc #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda.z conio_cursor_color+1
    adc #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // gotoxy::@return
    // }
    // [50] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [51] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [52] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [54] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [54] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [53] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [55] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $a
    .label line_cols = 8
    // [57] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [57] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [57] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [57] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [58] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #CONIO_HEIGHT
    bcc __b4
    // clrscr::@return
    // }
    // [59] return 
    rts
    // [60] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b4:
    // [60] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@2
  __b2:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [61] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #CONIO_WIDTH
    bcc __b3
    // clrscr::@4
    // line_text += CONIO_WIDTH
    // [62] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [63] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [64] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [57] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
    // [57] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [57] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [57] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // line_text[c] = ' '
    // [65] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [66] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [67] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [60] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
    // [60] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // File Data

