Setting inferred volatile on symbol affected by address-of (byte*) idx_p ← &(byte) idx
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p)
  *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,5)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,5)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(volatile byte) idx loadstore = (byte) 0
(const byte*) idx_p = &(volatile byte) idx
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition (bool~) main::$0 [6] if((byte) main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [6] if(main::i#1!=rangelast(0,5)) goto main::@1 to (number) 6
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [4] if((byte) main::i#1!=(number) 6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [2] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p)
  [3] *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2
  [4] (byte) main::i#1 ← ++ (byte) main::i#2
  [5] if((byte) main::i#1!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(volatile byte) idx loadstore = (byte) 0
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable idx to live range equivalence class [ idx ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated mem[1] [ idx ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a pointer to a memory variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx_p = idx
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda idx_p
    ldy.z i
    sta SCREEN,y
    // [3] *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2 -- _deref_pbuc1=_deref_pbuc1_plus_vbuz1 
    lda idx_p
    clc
    adc.z i
    sta idx_p
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] if((byte) main::i#1!=(byte) 6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data
  idx: .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers mem[1] [ idx ] : mem[1] , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 0: mem[1] [ idx ] 

Uplifting [main] best 391 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 391 combination mem[1] [ idx ] 
Attempting to uplift remaining variables inmem[1] [ idx ]
Uplifting [] best 391 combination mem[1] [ idx ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a pointer to a memory variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx_p = idx
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p) -- pbuc1_derefidx_vbuxx=_deref_pbuc2 
    lda idx_p
    sta SCREEN,x
    // [3] *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2 -- _deref_pbuc1=_deref_pbuc1_plus_vbuxx 
    txa
    clc
    adc idx_p
    sta idx_p
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if((byte) main::i#1!=(byte) 6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data
  idx: .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(volatile byte) idx loadstore mem[1] = (byte) 0
(const byte*) idx_p = &(volatile byte) idx
(void()) main()
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]
mem[1] [ idx ]


FINAL ASSEMBLER
Score: 301

  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a pointer to a memory variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx_p = idx
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[i] = *idx_p
    // [2] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) idx_p) -- pbuc1_derefidx_vbuxx=_deref_pbuc2 
    lda idx_p
    sta SCREEN,x
    // *idx_p +=i
    // [3] *((const byte*) idx_p) ← *((const byte*) idx_p) + (byte) main::i#2 -- _deref_pbuc1=_deref_pbuc1_plus_vbuxx 
    txa
    clc
    adc idx_p
    sta idx_p
    // for( char i: 0..5 )
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if((byte) main::i#1!=(byte) 6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data
  idx: .byte 0

