
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte) main::idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) main::SCREEN#0 + (byte) main::idx#0) ← (const byte) TYPEID_VOID
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  *((byte*) main::SCREEN#0 + (byte) main::idx#1) ← (const byte) TYPEID_BYTE
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((byte*) main::SCREEN#0 + (byte) main::idx#2) ← (const byte) TYPEID_SIGNED_BYTE
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((byte*) main::SCREEN#0 + (byte) main::idx#3) ← (const byte) TYPEID_WORD
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  *((byte*) main::SCREEN#0 + (byte) main::idx#4) ← (const byte) TYPEID_SIGNED_WORD
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  *((byte*) main::SCREEN#0 + (byte) main::idx#5) ← (const byte) TYPEID_DWORD
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  *((byte*) main::SCREEN#0 + (byte) main::idx#6) ← (const byte) TYPEID_SIGNED_DWORD
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  *((byte*) main::SCREEN#0 + (byte) main::idx#7) ← (const byte) TYPEID_BOOL
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  *((byte*) main::SCREEN#0 + (byte) main::idx#8) ← (const byte) TYPEID_POINTER_BYTE
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  *((byte*) main::SCREEN#0 + (byte) main::idx#9) ← (const byte) TYPEID_POINTER_SIGNED_BYTE
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  *((byte*) main::SCREEN#0 + (byte) main::idx#10) ← (const byte) TYPEID_POINTER_WORD
  (byte) main::idx#11 ← ++ (byte) main::idx#10
  *((byte*) main::SCREEN#0 + (byte) main::idx#11) ← (const byte) TYPEID_POINTER_SIGNED_WORD
  (byte) main::idx#12 ← ++ (byte) main::idx#11
  *((byte*) main::SCREEN#0 + (byte) main::idx#12) ← (const byte) TYPEID_POINTER_DWORD
  (byte) main::idx#13 ← ++ (byte) main::idx#12
  *((byte*) main::SCREEN#0 + (byte) main::idx#13) ← (const byte) TYPEID_POINTER_SIGNED_DWORD
  (byte) main::idx#14 ← ++ (byte) main::idx#13
  *((byte*) main::SCREEN#0 + (byte) main::idx#14) ← (const byte) TYPEID_POINTER_BOOL
  (byte) main::idx#15 ← ++ (byte) main::idx#14
  *((byte*) main::SCREEN#0 + (byte) main::idx#15) ← (const byte) TYPEID_POINTER_PROCEDURE
  (byte) main::idx#16 ← ++ (byte) main::idx#15
  *((byte*) main::SCREEN#0 + (byte) main::idx#16) ← (const byte) TYPEID_POINTER_POINTER_BYTE
  (byte) main::idx#17 ← ++ (byte) main::idx#16
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) TYPEID_BOOL = (byte/signed byte/word/signed word/dword/signed dword) 7
(const byte) TYPEID_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) TYPEID_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 5
(const byte) TYPEID_POINTER_BOOL = (byte/signed byte/word/signed word/dword/signed dword) $17
(const byte) TYPEID_POINTER_BYTE = (byte/signed byte/word/signed word/dword/signed dword) $11
(const byte) TYPEID_POINTER_DWORD = (byte/signed byte/word/signed word/dword/signed dword) $15
(const byte) TYPEID_POINTER_POINTER_BYTE = (byte/signed byte/word/signed word/dword/signed dword) $21
(const byte) TYPEID_POINTER_PROCEDURE = (byte/signed byte/word/signed word/dword/signed dword) $1f
(const byte) TYPEID_POINTER_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) $12
(const byte) TYPEID_POINTER_SIGNED_DWORD = (byte/signed byte/word/signed word/dword/signed dword) $16
(const byte) TYPEID_POINTER_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) $14
(const byte) TYPEID_POINTER_WORD = (byte/signed byte/word/signed word/dword/signed dword) $13
(const byte) TYPEID_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) TYPEID_SIGNED_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 6
(const byte) TYPEID_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) 4
(const byte) TYPEID_VOID = (byte/signed byte/word/signed word/dword/signed dword) 0
(const byte) TYPEID_WORD = (byte/signed byte/word/signed word/dword/signed dword) 3
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#11
(byte) main::idx#12
(byte) main::idx#13
(byte) main::idx#14
(byte) main::idx#15
(byte) main::idx#16
(byte) main::idx#17
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Constant (const byte*) main::SCREEN#0 = ((byte*))$400
Constant (const byte) main::idx#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN#0+main::idx#0)
Consolidated array index constant in *(main::SCREEN#0+main::idx#1)
Consolidated array index constant in *(main::SCREEN#0+main::idx#2)
Consolidated array index constant in *(main::SCREEN#0+main::idx#3)
Consolidated array index constant in *(main::SCREEN#0+main::idx#4)
Consolidated array index constant in *(main::SCREEN#0+main::idx#5)
Consolidated array index constant in *(main::SCREEN#0+main::idx#6)
Consolidated array index constant in *(main::SCREEN#0+main::idx#7)
Consolidated array index constant in *(main::SCREEN#0+main::idx#8)
Consolidated array index constant in *(main::SCREEN#0+main::idx#9)
Consolidated array index constant in *(main::SCREEN#0+main::idx#10)
Consolidated array index constant in *(main::SCREEN#0+main::idx#11)
Consolidated array index constant in *(main::SCREEN#0+main::idx#12)
Consolidated array index constant in *(main::SCREEN#0+main::idx#13)
Consolidated array index constant in *(main::SCREEN#0+main::idx#14)
Consolidated array index constant in *(main::SCREEN#0+main::idx#15)
Consolidated array index constant in *(main::SCREEN#0+main::idx#16)
Successful SSA optimization Pass2ConstantAdditionElimination
Eliminating unused constant (const byte) main::idx#17
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Inlining constant with different constant siblings (const byte) main::idx#10
Inlining constant with different constant siblings (const byte) main::idx#11
Inlining constant with different constant siblings (const byte) main::idx#12
Inlining constant with different constant siblings (const byte) main::idx#13
Inlining constant with different constant siblings (const byte) main::idx#14
Inlining constant with different constant siblings (const byte) main::idx#15
Inlining constant with different constant siblings (const byte) main::idx#16
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#12 = ++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#2 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#3 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#4 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#5 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#6 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#7 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#8 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#9 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#10 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#11 = ++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero main::SCREEN#0+0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN#0) ← (const byte) TYPEID_VOID
  [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE
  [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_SIGNED_BYTE
  [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_WORD
  [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_SIGNED_WORD
  [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_DWORD
  [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (const byte) TYPEID_SIGNED_DWORD
  [11] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (const byte) TYPEID_BOOL
  [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (const byte) TYPEID_POINTER_BYTE
  [13] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (const byte) TYPEID_POINTER_SIGNED_BYTE
  [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (const byte) TYPEID_POINTER_WORD
  [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (const byte) TYPEID_POINTER_SIGNED_WORD
  [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (const byte) TYPEID_POINTER_DWORD
  [17] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (const byte) TYPEID_POINTER_SIGNED_DWORD
  [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (const byte) TYPEID_POINTER_BOOL
  [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (const byte) TYPEID_POINTER_PROCEDURE
  [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (const byte) TYPEID_POINTER_POINTER_BYTE
  to:main::@return
main::@return: scope:[main]  from main
  [21] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::SCREEN
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Test typeid() of the different types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_VOID = 0
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .const TYPEID_WORD = 3
  .const TYPEID_SIGNED_WORD = 4
  .const TYPEID_DWORD = 5
  .const TYPEID_SIGNED_DWORD = 6
  .const TYPEID_BOOL = 7
  .const TYPEID_POINTER_BYTE = $11
  .const TYPEID_POINTER_SIGNED_BYTE = $12
  .const TYPEID_POINTER_WORD = $13
  .const TYPEID_POINTER_SIGNED_WORD = $14
  .const TYPEID_POINTER_DWORD = $15
  .const TYPEID_POINTER_SIGNED_DWORD = $16
  .const TYPEID_POINTER_BOOL = $17
  .const TYPEID_POINTER_PROCEDURE = $1f
  .const TYPEID_POINTER_POINTER_BYTE = $21
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← (const byte) TYPEID_VOID -- _deref_pbuc1=vbuc2 
    // Simple types
    lda #TYPEID_VOID
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_WORD
    sta SCREEN+3
  //SEG14 [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_WORD
    sta SCREEN+4
  //SEG15 [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_DWORD
    sta SCREEN+5
  //SEG16 [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (const byte) TYPEID_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_DWORD
    sta SCREEN+6
  //SEG17 [11] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (const byte) TYPEID_BOOL -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BOOL
    sta SCREEN+7
  //SEG18 [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (const byte) TYPEID_POINTER_BYTE -- _deref_pbuc1=vbuc2 
    // Pointer types
    lda #TYPEID_POINTER_BYTE
    sta SCREEN+8
  //SEG19 [13] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (const byte) TYPEID_POINTER_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_BYTE
    sta SCREEN+9
  //SEG20 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (const byte) TYPEID_POINTER_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_WORD
    sta SCREEN+$a
  //SEG21 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (const byte) TYPEID_POINTER_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_WORD
    sta SCREEN+$b
  //SEG22 [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (const byte) TYPEID_POINTER_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_DWORD
    sta SCREEN+$c
  //SEG23 [17] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (const byte) TYPEID_POINTER_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_DWORD
    sta SCREEN+$d
  //SEG24 [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (const byte) TYPEID_POINTER_BOOL -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_BOOL
    sta SCREEN+$e
  //SEG25 [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (const byte) TYPEID_POINTER_PROCEDURE -- _deref_pbuc1=vbuc2 
    // Pointer to procedure
    lda #TYPEID_POINTER_PROCEDURE
    sta SCREEN+$f
  //SEG26 [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (const byte) TYPEID_POINTER_POINTER_BYTE -- _deref_pbuc1=vbuc2 
    // Pointer to pointer
    lda #TYPEID_POINTER_POINTER_BYTE
    sta SCREEN+$10
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [21] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN#0) ← (const byte) TYPEID_VOID [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_SIGNED_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (const byte) TYPEID_SIGNED_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (const byte) TYPEID_BOOL [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (const byte) TYPEID_POINTER_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (const byte) TYPEID_POINTER_SIGNED_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (const byte) TYPEID_POINTER_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (const byte) TYPEID_POINTER_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (const byte) TYPEID_POINTER_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (const byte) TYPEID_POINTER_SIGNED_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (const byte) TYPEID_POINTER_BOOL [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (const byte) TYPEID_POINTER_PROCEDURE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (const byte) TYPEID_POINTER_POINTER_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 123 combination 
Uplifting [] best 123 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test typeid() of the different types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_VOID = 0
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .const TYPEID_WORD = 3
  .const TYPEID_SIGNED_WORD = 4
  .const TYPEID_DWORD = 5
  .const TYPEID_SIGNED_DWORD = 6
  .const TYPEID_BOOL = 7
  .const TYPEID_POINTER_BYTE = $11
  .const TYPEID_POINTER_SIGNED_BYTE = $12
  .const TYPEID_POINTER_WORD = $13
  .const TYPEID_POINTER_SIGNED_WORD = $14
  .const TYPEID_POINTER_DWORD = $15
  .const TYPEID_POINTER_SIGNED_DWORD = $16
  .const TYPEID_POINTER_BOOL = $17
  .const TYPEID_POINTER_PROCEDURE = $1f
  .const TYPEID_POINTER_POINTER_BYTE = $21
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← (const byte) TYPEID_VOID -- _deref_pbuc1=vbuc2 
    // Simple types
    lda #TYPEID_VOID
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_WORD
    sta SCREEN+3
  //SEG14 [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_WORD
    sta SCREEN+4
  //SEG15 [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_DWORD
    sta SCREEN+5
  //SEG16 [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (const byte) TYPEID_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_DWORD
    sta SCREEN+6
  //SEG17 [11] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (const byte) TYPEID_BOOL -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BOOL
    sta SCREEN+7
  //SEG18 [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (const byte) TYPEID_POINTER_BYTE -- _deref_pbuc1=vbuc2 
    // Pointer types
    lda #TYPEID_POINTER_BYTE
    sta SCREEN+8
  //SEG19 [13] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (const byte) TYPEID_POINTER_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_BYTE
    sta SCREEN+9
  //SEG20 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (const byte) TYPEID_POINTER_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_WORD
    sta SCREEN+$a
  //SEG21 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (const byte) TYPEID_POINTER_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_WORD
    sta SCREEN+$b
  //SEG22 [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (const byte) TYPEID_POINTER_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_DWORD
    sta SCREEN+$c
  //SEG23 [17] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (const byte) TYPEID_POINTER_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_DWORD
    sta SCREEN+$d
  //SEG24 [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (const byte) TYPEID_POINTER_BOOL -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_BOOL
    sta SCREEN+$e
  //SEG25 [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (const byte) TYPEID_POINTER_PROCEDURE -- _deref_pbuc1=vbuc2 
    // Pointer to procedure
    lda #TYPEID_POINTER_PROCEDURE
    sta SCREEN+$f
  //SEG26 [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (const byte) TYPEID_POINTER_POINTER_BYTE -- _deref_pbuc1=vbuc2 
    // Pointer to pointer
    lda #TYPEID_POINTER_POINTER_BYTE
    sta SCREEN+$10
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [21] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) TYPEID_BOOL TYPEID_BOOL = (byte/signed byte/word/signed word/dword/signed dword) 7
(const byte) TYPEID_BYTE TYPEID_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) TYPEID_DWORD TYPEID_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 5
(const byte) TYPEID_POINTER_BOOL TYPEID_POINTER_BOOL = (byte/signed byte/word/signed word/dword/signed dword) $17
(const byte) TYPEID_POINTER_BYTE TYPEID_POINTER_BYTE = (byte/signed byte/word/signed word/dword/signed dword) $11
(const byte) TYPEID_POINTER_DWORD TYPEID_POINTER_DWORD = (byte/signed byte/word/signed word/dword/signed dword) $15
(const byte) TYPEID_POINTER_POINTER_BYTE TYPEID_POINTER_POINTER_BYTE = (byte/signed byte/word/signed word/dword/signed dword) $21
(const byte) TYPEID_POINTER_PROCEDURE TYPEID_POINTER_PROCEDURE = (byte/signed byte/word/signed word/dword/signed dword) $1f
(const byte) TYPEID_POINTER_SIGNED_BYTE TYPEID_POINTER_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) $12
(const byte) TYPEID_POINTER_SIGNED_DWORD TYPEID_POINTER_SIGNED_DWORD = (byte/signed byte/word/signed word/dword/signed dword) $16
(const byte) TYPEID_POINTER_SIGNED_WORD TYPEID_POINTER_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) $14
(const byte) TYPEID_POINTER_WORD TYPEID_POINTER_WORD = (byte/signed byte/word/signed word/dword/signed dword) $13
(const byte) TYPEID_SIGNED_BYTE TYPEID_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) TYPEID_SIGNED_DWORD TYPEID_SIGNED_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 6
(const byte) TYPEID_SIGNED_WORD TYPEID_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) 4
(const byte) TYPEID_VOID TYPEID_VOID = (byte/signed byte/word/signed word/dword/signed dword) 0
(const byte) TYPEID_WORD TYPEID_WORD = (byte/signed byte/word/signed word/dword/signed dword) 3
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte) main::idx



FINAL ASSEMBLER
Score: 108

//SEG0 File Comments
// Test typeid() of the different types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const TYPEID_VOID = 0
  .const TYPEID_BYTE = 1
  .const TYPEID_SIGNED_BYTE = 2
  .const TYPEID_WORD = 3
  .const TYPEID_SIGNED_WORD = 4
  .const TYPEID_DWORD = 5
  .const TYPEID_SIGNED_DWORD = 6
  .const TYPEID_BOOL = 7
  .const TYPEID_POINTER_BYTE = $11
  .const TYPEID_POINTER_SIGNED_BYTE = $12
  .const TYPEID_POINTER_WORD = $13
  .const TYPEID_POINTER_SIGNED_WORD = $14
  .const TYPEID_POINTER_DWORD = $15
  .const TYPEID_POINTER_SIGNED_DWORD = $16
  .const TYPEID_POINTER_BOOL = $17
  .const TYPEID_POINTER_PROCEDURE = $1f
  .const TYPEID_POINTER_POINTER_BYTE = $21
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← (const byte) TYPEID_VOID -- _deref_pbuc1=vbuc2 
    // Simple types
    lda #TYPEID_VOID
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) TYPEID_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BYTE
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) TYPEID_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_BYTE
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (const byte) TYPEID_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_WORD
    sta SCREEN+3
  //SEG14 [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) TYPEID_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_WORD
    sta SCREEN+4
  //SEG15 [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (const byte) TYPEID_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_DWORD
    sta SCREEN+5
  //SEG16 [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (const byte) TYPEID_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_SIGNED_DWORD
    sta SCREEN+6
  //SEG17 [11] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (const byte) TYPEID_BOOL -- _deref_pbuc1=vbuc2 
    lda #TYPEID_BOOL
    sta SCREEN+7
  //SEG18 [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (const byte) TYPEID_POINTER_BYTE -- _deref_pbuc1=vbuc2 
    // Pointer types
    lda #TYPEID_POINTER_BYTE
    sta SCREEN+8
  //SEG19 [13] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (const byte) TYPEID_POINTER_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_BYTE
    sta SCREEN+9
  //SEG20 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (const byte) TYPEID_POINTER_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_WORD
    sta SCREEN+$a
  //SEG21 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (const byte) TYPEID_POINTER_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_WORD
    sta SCREEN+$b
  //SEG22 [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (const byte) TYPEID_POINTER_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_DWORD
    sta SCREEN+$c
  //SEG23 [17] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (const byte) TYPEID_POINTER_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_SIGNED_DWORD
    sta SCREEN+$d
  //SEG24 [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $e) ← (const byte) TYPEID_POINTER_BOOL -- _deref_pbuc1=vbuc2 
    lda #TYPEID_POINTER_BOOL
    sta SCREEN+$e
  //SEG25 [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (const byte) TYPEID_POINTER_PROCEDURE -- _deref_pbuc1=vbuc2 
    // Pointer to procedure
    lda #TYPEID_POINTER_PROCEDURE
    sta SCREEN+$f
  //SEG26 [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (const byte) TYPEID_POINTER_POINTER_BYTE -- _deref_pbuc1=vbuc2 
    // Pointer to pointer
    lda #TYPEID_POINTER_POINTER_BYTE
    sta SCREEN+$10
  //SEG27 main::@return
  //SEG28 [21] return 
    rts
}

