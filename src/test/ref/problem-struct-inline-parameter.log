
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  (byte) idx#13 ← phi( @2/(byte) idx#14 )
  (byte) print::c#0 ← (byte) 'c'
  (byte) print::fmt_prefix#0 ← (byte) '-'
  (byte) print::fmt_postfix#0 ← (byte) '-'
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#8 ← phi( main/(byte) idx#6 )
  (byte) idx#0 ← (byte) idx#8
  to:main::@return
main::@return: scope:[main]  from main::@1
  (byte) idx#9 ← phi( main::@1/(byte) idx#0 )
  (byte) idx#1 ← (byte) idx#9
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) idx#2 ← (byte) 0
  to:@2

(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
print: scope:[print]  from main
  (byte) print::fmt_postfix#1 ← phi( main/(byte) print::fmt_postfix#0 )
  (byte) print::c#1 ← phi( main/(byte) print::c#0 )
  (byte) idx#10 ← phi( main/(byte) idx#13 )
  (byte) print::fmt_prefix#1 ← phi( main/(byte) print::fmt_prefix#0 )
  *((const nomodify byte*) SCREEN + (byte) idx#10) ← (byte) print::fmt_prefix#1
  (byte) idx#3 ← ++ (byte) idx#10
  *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) print::c#1
  (byte) idx#4 ← ++ (byte) idx#3
  *((const nomodify byte*) SCREEN + (byte) idx#4) ← (byte) print::fmt_postfix#1
  (byte) idx#5 ← ++ (byte) idx#4
  to:print::@return
print::@return: scope:[print]  from print
  (byte) idx#11 ← phi( print/(byte) idx#5 )
  (byte) idx#6 ← (byte) idx#11
  return 
  to:@return
@2: scope:[]  from @1
  (byte) idx#14 ← phi( @1/(byte) idx#2 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) idx#12 ← phi( @2/(byte) idx#1 )
  (byte) idx#7 ← (byte) idx#12
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(byte) format::postfix
(byte) format::prefix
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@return
(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
(label) print::@return
(byte) print::c
(byte) print::c#0
(byte) print::c#1
(struct format) print::fmt
(byte) print::fmt_postfix
(byte) print::fmt_postfix#0
(byte) print::fmt_postfix#1
(byte) print::fmt_prefix
(byte) print::fmt_prefix#0
(byte) print::fmt_prefix#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias idx#0 = idx#8 idx#9 idx#1 
Alias idx#11 = idx#5 idx#6 
Alias idx#14 = idx#2 
Alias idx#12 = idx#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#13 (byte) idx#14
Identical Phi Values (byte) idx#0 (byte) idx#11
Identical Phi Values (byte) print::fmt_prefix#1 (byte) print::fmt_prefix#0
Identical Phi Values (byte) idx#10 (byte) idx#13
Identical Phi Values (byte) print::c#1 (byte) print::c#0
Identical Phi Values (byte) print::fmt_postfix#1 (byte) print::fmt_postfix#0
Identical Phi Values (byte) idx#12 (byte) idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) print::c#0 = 'c'
Constant (const byte) print::fmt_prefix#0 = '-'
Constant (const byte) print::fmt_postfix#0 = '-'
Constant (const byte) idx#14 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [9] *((const nomodify byte*) SCREEN + (const byte) idx#14) ← (const byte) print::fmt_prefix#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) idx#11 and assignment [7] (byte) idx#11 ← ++ (byte) idx#4
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [3] (byte) idx#3 ← ++ (const byte) idx#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#3 = ++idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) idx#4 ← ++ (const byte) idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#4 = ++idx#3
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) idx#14
Inlining constant with different constant siblings (const byte) idx#3
Inlining constant with different constant siblings (const byte) idx#4
Constant inlined idx#4 = ++++(byte) 0
Constant inlined idx#3 = ++(byte) 0
Constant inlined idx#14 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print:7 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@1
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print 
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return

(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
print: scope:[print]  from main
  [7] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0
  [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0
  [9] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0
  to:print::@return
print::@return: scope:[print]  from print
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) format::postfix
(byte) format::prefix
(byte) idx
(void()) main()
(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
(byte) print::c
(struct format) print::fmt
(byte) print::fmt_postfix
(byte) print::fmt_prefix

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates problem with passing an inline struct value as a parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // print
print: {
    .const c = 'c'
    .const fmt_prefix = '-'
    .const fmt_postfix = '-'
    // [7] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_prefix
    sta SCREEN
    // [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [9] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_postfix
    sta SCREEN+2
    jmp __breturn
    // print::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 [ ] ( main:2::print:5 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 [ ] ( main:2::print:5 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 [ ] ( main:2::print:5 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [format] 
Uplift Scope [main] 
Uplift Scope [print] 
Uplift Scope [] 

Uplifting [format] best 54 combination 
Uplifting [main] best 54 combination 
Uplifting [print] best 54 combination 
Uplifting [] best 54 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates problem with passing an inline struct value as a parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // print
print: {
    .const c = 'c'
    .const fmt_prefix = '-'
    .const fmt_postfix = '-'
    // [7] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_prefix
    sta SCREEN
    // [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [9] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_postfix
    sta SCREEN+2
    jmp __breturn
    // print::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) format::postfix
(byte) format::prefix
(byte) idx
(void()) main()
(label) main::@return
(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
(label) print::@return
(byte) print::c
(const byte) print::c#0 c = (byte) 'c'
(struct format) print::fmt
(byte) print::fmt_postfix
(const byte) print::fmt_postfix#0 fmt_postfix = (byte) '-'
(byte) print::fmt_prefix
(const byte) print::fmt_prefix#0 fmt_prefix = (byte) '-'



FINAL ASSEMBLER
Score: 36

  // File Comments
// Illustrates problem with passing an inline struct value as a parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print('c', (struct format){ '-', '-' } )
    // [5] call print 
    jsr print
    // main::@return
    // }
    // [6] return 
    rts
}
  // print
print: {
    .const c = 'c'
    .const fmt_prefix = '-'
    .const fmt_postfix = '-'
    // SCREEN[idx++] = fmt.prefix
    // [7] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_prefix
    sta SCREEN
    // SCREEN[idx++] = c
    // [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // SCREEN[idx++] = fmt.postfix
    // [9] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_postfix
    sta SCREEN+2
    // print::@return
    // }
    // [10] return 
    rts
}
  // File Data

