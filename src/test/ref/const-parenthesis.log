
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  *((const nomodify byte*) SCREEN + (number) 0) ← (const nomodify byte) main::dy-(number) 1/(number) $10
  *((const nomodify byte*) SCREEN + (number) 1) ← (const nomodify byte) main::dy-(number) 1>>(number) 4
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const nomodify byte) main::dy = (byte) $80

Adding number conversion cast (unumber) main::dy-1/$10 in *((const nomodify byte*) SCREEN + (number) 0) ← (const nomodify byte) main::dy-(number) 1/(number) $10
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 0) ← ((unumber)) (const nomodify byte) main::dy-(number) 1/(number) $10
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← ((unumber)) (const nomodify byte) main::dy-(unumber)(number) 1/(number) $10
Adding number conversion cast (unumber) main::dy-1>>4 in *((const nomodify byte*) SCREEN + (number) 1) ← (const nomodify byte) main::dy-(number) 1>>(number) 4
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← ((unumber)) (const nomodify byte) main::dy-(number) 1>>(number) 4
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← ((unumber)) (const nomodify byte) main::dy-(unumber)(number) 1>>(number) 4
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $10 in *((const nomodify byte*) SCREEN + (unumber)(number) 0) ← ((unumber)) (const nomodify byte) main::dy-(unumber)(number) 1/(number) $10
Adding number conversion cast (unumber) 4 in *((const nomodify byte*) SCREEN + (unumber)(number) 1) ← ((unumber)) (const nomodify byte) main::dy-(unumber)(number) 1>>(number) 4
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const nomodify byte*) SCREEN + (unumber)(number) 0) ← (unumber)(const nomodify byte) main::dy-(unumber)(number) 1/(unumber)(number) $10
Inlining cast *((const nomodify byte*) SCREEN + (unumber)(number) 1) ← (unumber)(const nomodify byte) main::dy-(unumber)(number) 1>>(unumber)(number) 4
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast (const nomodify byte) main::dy-(unumber)(number) 1/(unumber)(number) $10
Simplifying constant integer cast 1
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast (const nomodify byte) main::dy-(unumber)(number) 1>>(unumber)(number) 4
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [0] *((const nomodify byte*) SCREEN + (byte) 0) ← (const nomodify byte) main::dy-(byte) 1/(byte) $10
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SCREEN) ← (const nomodify byte) main::dy-(byte) 1/(byte) $10
  [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (const nomodify byte) main::dy-(byte) 1>>(byte) 4
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test parenthesising of constants
// See https://gitlab.com/camelot/kickc/-/issues/470#note_356486132
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const dy = $80
    // [0] *((const nomodify byte*) SCREEN) ← (const nomodify byte) main::dy-(byte) 1/(byte) $10 -- _deref_pbuc1=vbuc2 
    // A parenthesis should be added in the ASM to ensure operator precedence 
    lda #(dy-1)/$10
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (const nomodify byte) main::dy-(byte) 1>>(byte) 4 -- _deref_pbuc1=vbuc2 
    // No parenthesis should be added in the ASM because minus (-) has higher precedence than shift (>>)
    lda #dy-1>>4
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SCREEN) ← (const nomodify byte) main::dy-(byte) 1/(byte) $10 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (const nomodify byte) main::dy-(byte) 1>>(byte) 4 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test parenthesising of constants
// See https://gitlab.com/camelot/kickc/-/issues/470#note_356486132
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const dy = $80
    // [0] *((const nomodify byte*) SCREEN) ← (const nomodify byte) main::dy-(byte) 1/(byte) $10 -- _deref_pbuc1=vbuc2 
    // A parenthesis should be added in the ASM to ensure operator precedence 
    lda #(dy-1)/$10
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (const nomodify byte) main::dy-(byte) 1>>(byte) 4 -- _deref_pbuc1=vbuc2 
    // No parenthesis should be added in the ASM because minus (-) has higher precedence than shift (>>)
    lda #dy-1>>4
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@return
(const nomodify byte) main::dy = (byte) $80



FINAL ASSEMBLER
Score: 18

  // File Comments
// Test parenthesising of constants
// See https://gitlab.com/camelot/kickc/-/issues/470#note_356486132
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const dy = $80
    // SCREEN[0] = (dy-1)/16
    // [0] *((const nomodify byte*) SCREEN) ← (const nomodify byte) main::dy-(byte) 1/(byte) $10 -- _deref_pbuc1=vbuc2 
    // A parenthesis should be added in the ASM to ensure operator precedence 
    lda #(dy-1)/$10
    sta SCREEN
    // SCREEN[1] = (dy-1)>>4
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (const nomodify byte) main::dy-(byte) 1>>(byte) 4 -- _deref_pbuc1=vbuc2 
    // No parenthesis should be added in the ASM because minus (-) has higher precedence than shift (>>)
    lda #dy-1>>4
    sta SCREEN+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

