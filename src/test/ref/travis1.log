
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@2

(void()) print_str_ln((byte*) print_str_ln::str)
print_str_ln: scope:[print_str_ln]  from game_ready::@1 main::@3
  (byte*) print_line_cursor#29 ← phi( game_ready::@1/(byte*) print_line_cursor#27 main::@3/(byte*) print_line_cursor#25 )
  (byte*) print_char_cursor#31 ← phi( game_ready::@1/(byte*) print_char_cursor#38 main::@3/(byte*) print_char_cursor#36 )
  (byte*) print_str_ln::str#2 ← phi( game_ready::@1/(byte*) print_str_ln::str#1 main::@3/(byte*) print_str_ln::str#0 )
  (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2
  call print_str 
  to:print_str_ln::@1
print_str_ln::@1: scope:[print_str_ln]  from print_str_ln
  (byte*) print_line_cursor#22 ← phi( print_str_ln/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#16 ← phi( print_str_ln/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#16
  call print_ln 
  to:print_str_ln::@2
print_str_ln::@2: scope:[print_str_ln]  from print_str_ln::@1
  (byte*) print_char_cursor#17 ← phi( print_str_ln::@1/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#11 ← phi( print_str_ln::@1/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#17
  to:print_str_ln::@return
print_str_ln::@return: scope:[print_str_ln]  from print_str_ln::@2
  (byte*) print_line_cursor#12 ← phi( print_str_ln::@2/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#18 ← phi( print_str_ln::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#18
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#12
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_str_ln
  (byte*) print_char_cursor#40 ← phi( print_str_ln/(byte*) print_char_cursor#31 )
  (byte*) print_str::str#5 ← phi( print_str_ln/(byte*) print_str::str#0 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#33 ← phi( print_str/(byte*) print_char_cursor#40 print_str::@3/(byte*) print_char_cursor#4 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@3/(byte*) print_str::str#1 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#32 ← phi( print_str::@1/(byte*) print_char_cursor#33 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#19 ← phi( print_str::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#19
  (byte*) print_str::str#1 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#20 ← phi( print_str::@1/(byte*) print_char_cursor#33 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#20
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_ln::@1
  (byte*) print_char_cursor#34 ← phi( print_str_ln::@1/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#23 ← phi( print_str_ln::@1/(byte*) print_line_cursor#22 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#21 ← phi( print_ln/(byte*) print_char_cursor#34 print_ln::@1/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#13 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#13 + (number) $28
  (byte*) print_line_cursor#3 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#3 < (byte*) print_char_cursor#21
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#14 ← phi( print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#6 ← (byte*) print_line_cursor#14
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#22 ← phi( print_ln::@2/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#15 ← phi( print_ln::@2/(byte*) print_line_cursor#14 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#22
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  (byte*) print_char_cursor#23 ← phi( print_str::@2/(byte*) print_char_cursor#32 )
  (byte) print_char::ch#1 ← phi( print_str::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#23) ← (byte) print_char::ch#1
  (byte*) print_char_cursor#8 ← ++ (byte*) print_char_cursor#23
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#24 ← phi( print_char/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#24
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) print_line_cursor#33 ← phi( @1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#44 ← phi( @1/(byte*) print_char_cursor#0 )
  (byte) action_count#0 ← (byte) 0
  to:@3

(void()) main()
main: scope:[main]  from @3
  (byte) action_count#17 ← phi( @3/(byte) action_count#16 )
  (byte*) print_line_cursor#30 ← phi( @3/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#41 ← phi( @3/(byte*) print_char_cursor#39 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#5 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte) action_count#13 ← phi( main/(byte) action_count#17 main::@2/(byte) action_count#14 )
  (byte*) print_line_cursor#24 ← phi( main/(byte*) print_line_cursor#30 main::@2/(byte*) print_line_cursor#26 )
  (byte*) print_char_cursor#35 ← phi( main/(byte*) print_char_cursor#41 main::@2/(byte*) print_char_cursor#37 )
  call game_ready 
  (bool) game_ready::return#0 ← (bool) game_ready::return#2
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#5 )
  (byte) action_count#7 ← phi( main::@1/(byte) action_count#5 )
  (byte*) print_line_cursor#16 ← phi( main::@1/(byte*) print_line_cursor#9 )
  (byte*) print_char_cursor#25 ← phi( main::@1/(byte*) print_char_cursor#14 )
  (bool) game_ready::return#3 ← phi( main::@1/(bool) game_ready::return#0 )
  (bool~) main::$0 ← (bool) game_ready::return#3
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#25
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#16
  (byte) action_count#1 ← (byte) action_count#7
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@4 main::@5
  (byte) action_count#14 ← phi( main::@4/(byte) action_count#1 main::@5/(byte) action_count#18 )
  (byte*) print_line_cursor#26 ← phi( main::@4/(byte*) print_line_cursor#5 main::@5/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#37 ← phi( main::@4/(byte*) print_char_cursor#10 main::@5/(byte*) print_char_cursor#11 )
  (byte) main::i#2 ← phi( main::@4/(byte) main::i#3 main::@5/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,5)
  (bool~) main::$3 ← (byte) main::i#1 != rangelast(0,5)
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@4
  (byte) action_count#19 ← phi( main::@4/(byte) action_count#1 )
  (byte) main::i#6 ← phi( main::@4/(byte) main::i#3 )
  (byte*) print_line_cursor#25 ← phi( main::@4/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#36 ← phi( main::@4/(byte*) print_char_cursor#10 )
  (byte*) print_str_ln::str#0 ← (const byte*) main::str
  call print_str_ln 
  to:main::@5
main::@5: scope:[main]  from main::@3
  (byte) action_count#18 ← phi( main::@3/(byte) action_count#19 )
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#6 )
  (byte*) print_line_cursor#17 ← phi( main::@3/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#26 ← phi( main::@3/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#26
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#17
  to:main::@2
main::@return: scope:[main]  from main::@2
  (byte) action_count#8 ← phi( main::@2/(byte) action_count#14 )
  (byte*) print_line_cursor#18 ← phi( main::@2/(byte*) print_line_cursor#26 )
  (byte*) print_char_cursor#27 ← phi( main::@2/(byte*) print_char_cursor#37 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#27
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#18
  (byte) action_count#2 ← (byte) action_count#8
  return 
  to:@return

(bool()) game_ready()
game_ready: scope:[game_ready]  from main::@1
  (byte*) print_line_cursor#31 ← phi( main::@1/(byte*) print_line_cursor#24 )
  (byte*) print_char_cursor#42 ← phi( main::@1/(byte*) print_char_cursor#35 )
  (byte) action_count#9 ← phi( main::@1/(byte) action_count#13 )
  (bool~) game_ready::$0 ← (byte) action_count#9 == (number) 0
  (bool~) game_ready::$1 ← ! (bool~) game_ready::$0
  if((bool~) game_ready::$1) goto game_ready::@1
  to:game_ready::@2
game_ready::@1: scope:[game_ready]  from game_ready game_ready::@2
  (byte) action_count#15 ← phi( game_ready/(byte) action_count#9 game_ready::@2/(byte) action_count#4 )
  (byte*) print_line_cursor#27 ← phi( game_ready/(byte*) print_line_cursor#31 game_ready::@2/(byte*) print_line_cursor#32 )
  (byte*) print_char_cursor#38 ← phi( game_ready/(byte*) print_char_cursor#42 game_ready::@2/(byte*) print_char_cursor#43 )
  (byte*) print_str_ln::str#1 ← (const byte*) game_ready::str
  call print_str_ln 
  to:game_ready::@3
game_ready::@3: scope:[game_ready]  from game_ready::@1
  (byte) action_count#10 ← phi( game_ready::@1/(byte) action_count#15 )
  (byte*) print_line_cursor#19 ← phi( game_ready::@1/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#28 ← phi( game_ready::@1/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#28
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#19
  (byte) action_count#3 ← -- (byte) action_count#10
  (bool~) game_ready::$3 ← (byte) action_count#3 == (number) 0
  (bool) game_ready::return#1 ← (bool~) game_ready::$3
  to:game_ready::@return
game_ready::@2: scope:[game_ready]  from game_ready
  (byte*) print_line_cursor#32 ← phi( game_ready/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#43 ← phi( game_ready/(byte*) print_char_cursor#42 )
  (byte) action_count#4 ← (const nomodify byte) READY_FRAMES
  to:game_ready::@1
game_ready::@return: scope:[game_ready]  from game_ready::@3
  (byte) action_count#11 ← phi( game_ready::@3/(byte) action_count#3 )
  (byte*) print_line_cursor#20 ← phi( game_ready::@3/(byte*) print_line_cursor#8 )
  (byte*) print_char_cursor#29 ← phi( game_ready::@3/(byte*) print_char_cursor#13 )
  (bool) game_ready::return#4 ← phi( game_ready::@3/(bool) game_ready::return#1 )
  (bool) game_ready::return#2 ← (bool) game_ready::return#4
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#29
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#20
  (byte) action_count#5 ← (byte) action_count#11
  return 
  to:@return
@3: scope:[]  from @2
  (byte) action_count#16 ← phi( @2/(byte) action_count#0 )
  (byte*) print_line_cursor#28 ← phi( @2/(byte*) print_line_cursor#33 )
  (byte*) print_char_cursor#39 ← phi( @2/(byte*) print_char_cursor#44 )
  call main 
  to:@4
@4: scope:[]  from @3
  (byte) action_count#12 ← phi( @3/(byte) action_count#2 )
  (byte*) print_line_cursor#21 ← phi( @3/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#30 ← phi( @3/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#30
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#21
  (byte) action_count#6 ← (byte) action_count#12
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) READY_FRAMES = (byte) 5
(byte) action_count
(byte) action_count#0
(byte) action_count#1
(byte) action_count#10
(byte) action_count#11
(byte) action_count#12
(byte) action_count#13
(byte) action_count#14
(byte) action_count#15
(byte) action_count#16
(byte) action_count#17
(byte) action_count#18
(byte) action_count#19
(byte) action_count#2
(byte) action_count#3
(byte) action_count#4
(byte) action_count#5
(byte) action_count#6
(byte) action_count#7
(byte) action_count#8
(byte) action_count#9
(bool()) game_ready()
(bool~) game_ready::$0
(bool~) game_ready::$1
(bool~) game_ready::$3
(label) game_ready::@1
(label) game_ready::@2
(label) game_ready::@3
(label) game_ready::@return
(bool) game_ready::return
(bool) game_ready::return#0
(bool) game_ready::return#1
(bool) game_ready::return#2
(bool) game_ready::return#3
(bool) game_ready::return#4
(const byte*) game_ready::str[(byte) 6]  = (byte*) "ready"
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(const byte*) main::str[(byte) 7]  = (byte*) "ready!"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_str_ln((byte*) print_str_ln::str)
(label) print_str_ln::@1
(label) print_str_ln::@2
(label) print_str_ln::@return
(byte*) print_str_ln::str
(byte*) print_str_ln::str#0
(byte*) print_str_ln::str#1
(byte*) print_str_ln::str#2

Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#13 + (number) $28
Adding number conversion cast (unumber) 0 in (bool~) game_ready::$0 ← (byte) action_count#9 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) game_ready::$3 ← (byte) action_count#3 == (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [78] (bool~) game_ready::$1 ← (byte) action_count#9 != (byte) 0 from [77] (bool~) game_ready::$0 ← (byte) action_count#9 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias print_char_cursor#0 = print_line_cursor#0 print_screen#0 print_char_cursor#44 print_line_cursor#33 print_char_cursor#39 print_line_cursor#28 
Alias print_line_cursor#22 = print_line_cursor#29 
Alias print_char_cursor#1 = print_char_cursor#16 
Alias print_line_cursor#1 = print_line_cursor#11 print_line_cursor#12 print_line_cursor#2 
Alias print_char_cursor#17 = print_char_cursor#2 print_char_cursor#18 print_char_cursor#3 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#20 = print_char_cursor#32 print_char_cursor#33 print_char_cursor#5 
Alias print_char_cursor#19 = print_char_cursor#4 
Alias print_line_cursor#14 = print_line_cursor#3 print_ln::$0 print_char_cursor#6 print_line_cursor#15 print_char_cursor#22 print_line_cursor#4 print_char_cursor#7 
Alias print_char_cursor#24 = print_char_cursor#8 print_char_cursor#9 
Alias game_ready::return#0 = game_ready::return#3 
Alias main::i#3 = main::i#5 main::i#6 main::i#4 
Alias print_char_cursor#10 = print_char_cursor#25 print_char_cursor#36 
Alias print_line_cursor#16 = print_line_cursor#5 print_line_cursor#25 
Alias action_count#1 = action_count#7 action_count#19 action_count#18 
Alias print_char_cursor#11 = print_char_cursor#26 
Alias print_line_cursor#17 = print_line_cursor#6 
Alias print_char_cursor#12 = print_char_cursor#27 print_char_cursor#37 
Alias print_line_cursor#18 = print_line_cursor#26 print_line_cursor#7 
Alias action_count#14 = action_count#8 action_count#2 
Alias action_count#10 = action_count#15 
Alias print_char_cursor#13 = print_char_cursor#28 print_char_cursor#29 print_char_cursor#14 
Alias print_line_cursor#19 = print_line_cursor#8 print_line_cursor#20 print_line_cursor#9 
Alias game_ready::return#1 = game_ready::$3 game_ready::return#4 game_ready::return#2 
Alias print_char_cursor#42 = print_char_cursor#43 
Alias print_line_cursor#31 = print_line_cursor#32 
Alias action_count#11 = action_count#3 action_count#5 
Alias action_count#0 = action_count#16 
Alias print_char_cursor#15 = print_char_cursor#30 
Alias print_line_cursor#10 = print_line_cursor#21 
Alias action_count#12 = action_count#6 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Alias action_count#1 = action_count#14 
Alias print_char_cursor#38 = print_char_cursor#42 
Alias print_line_cursor#27 = print_line_cursor#31 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#20
Identical Phi Values (byte*) print_line_cursor#1 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#0
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#31
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_line_cursor#22
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#34
Identical Phi Values (byte) print_char::ch#1 (byte) print_char::ch#0
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#20
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#0
Identical Phi Values (byte*) print_line_cursor#30 (byte*) print_char_cursor#0
Identical Phi Values (byte) action_count#17 (byte) action_count#0
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#19
Identical Phi Values (byte) action_count#1 (byte) action_count#11
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#1
Identical Phi Values (byte) action_count#9 (byte) action_count#13
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#35
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#18
Identical Phi Values (byte) action_count#12 (byte) action_count#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#14
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_str::$1 [11] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [21] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1
Simple Condition (bool~) main::$3 [40] if((byte) main::i#1!=rangelast(0,5)) goto main::@1
Simple Condition (bool~) game_ready::$1 [47] if((byte) action_count#13!=(byte) 0) goto game_ready::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [35] (bool~) main::$1 ← ! (bool~) main::$0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte*) print_char_cursor#0 = (byte*) 1024
Constant (const byte) action_count#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte*) print_str_ln::str#0 = main::str
Constant (const byte*) print_str_ln::str#1 = game_ready::str
Constant (const byte) action_count#4 = READY_FRAMES
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [38] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [40] if(main::i#1!=rangelast(0,5)) goto main::@1 to (number) 6
Adding number conversion cast (unumber) 6 in if((byte) main::i#1!=(number) 6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte*) print_str_ln::str#0
Inlining constant with var siblings (const byte*) print_str_ln::str#1
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) print_char_cursor#0
Inlining constant with var siblings (const byte) action_count#0
Inlining constant with var siblings (const byte) action_count#4
Constant inlined action_count#4 = (const nomodify byte) READY_FRAMES
Constant inlined print_str_ln::str#1 = (const byte*) game_ready::str
Constant inlined main::i#0 = (byte) 0
Constant inlined print_str_ln::str#0 = (const byte*) main::str
Constant inlined print_char_cursor#0 = (byte*) 1024
Constant inlined action_count#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@6(between main::@2 and main::@1)
Added new block during phi lifting game_ready::@4(between game_ready and game_ready::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of print_str_ln::@1
Adding NOP phi() at start of print_str_ln::@2
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of game_ready::@2
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to game_ready:9 print_str_ln:22 
Calls in [print_str_ln] to print_str:26 print_ln:28 
Calls in [print_str] to print_char:44 
Calls in [game_ready] to print_str_ln:56 

Created 11 initial phi equivalence classes
Not coalescing [16] print_char_cursor#49 ← print_line_cursor#14
Coalesced [17] print_line_cursor#38 ← print_line_cursor#14
Coalesced [18] action_count#20 ← action_count#11
Coalesced [19] main::i#7 ← main::i#1
Not coalescing [20] print_char_cursor#46 ← print_line_cursor#14
Coalesced [21] print_line_cursor#35 ← print_line_cursor#14
Coalesced [31] print_line_cursor#36 ← print_line_cursor#22
Coalesced (already) [37] print_line_cursor#37 ← print_line_cursor#14
Coalesced [38] print_str::str#6 ← print_str::str#0
Coalesced [39] print_char_cursor#47 ← print_char_cursor#31
Coalesced [46] print_str::str#7 ← print_str::str#1
Coalesced [47] print_char_cursor#48 ← print_char_cursor#24
Coalesced [54] print_char_cursor#45 ← print_char_cursor#35
Coalesced (already) [55] print_line_cursor#34 ← print_line_cursor#24
Coalesced [60] action_count#21 ← action_count#13
Coalesced down to 6 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @4
Culled Empty Block (label) main::@5
Culled Empty Block (label) print_str_ln::@2
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) game_ready::@2
Renumbering block @3 to @1
Renumbering block main::@6 to main::@5
Renumbering block game_ready::@3 to game_ready::@2
Renumbering block game_ready::@4 to game_ready::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of print_str_ln::@1
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str
Adding NOP phi() at start of game_ready::@3

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@5/(byte) main::i#1 )
  [5] (byte) action_count#13 ← phi( main/(byte) 0 main::@5/(byte) action_count#11 )
  [5] (byte*) print_line_cursor#24 ← phi( main/(byte*) 1024 main::@5/(byte*) print_line_cursor#14 )
  [5] (byte*) print_char_cursor#35 ← phi( main/(byte*) 1024 main::@5/(byte*) print_char_cursor#49 )
  [6] call game_ready 
  [7] (bool) game_ready::return#0 ← (bool) game_ready::return#1
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] (bool~) main::$0 ← (bool) game_ready::return#0
  [9] if((bool~) main::$0) goto main::@3
  to:main::@2
main::@3: scope:[main]  from main::@4
  [10] (byte*) print_char_cursor#46 ← (byte*) print_line_cursor#14
  [11] call print_str_ln 
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@4
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) 6) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return 
  to:@return
main::@5: scope:[main]  from main::@2
  [15] (byte*) print_char_cursor#49 ← (byte*) print_line_cursor#14
  to:main::@1

(void()) print_str_ln((byte*) print_str_ln::str)
print_str_ln: scope:[print_str_ln]  from game_ready::@1 main::@3
  [16] (byte*) print_line_cursor#22 ← phi( game_ready::@1/(byte*) print_line_cursor#24 main::@3/(byte*) print_line_cursor#14 )
  [16] (byte*) print_char_cursor#31 ← phi( game_ready::@1/(byte*) print_char_cursor#35 main::@3/(byte*) print_char_cursor#46 )
  [16] (byte*) print_str_ln::str#2 ← phi( game_ready::@1/(const byte*) game_ready::str main::@3/(const byte*) main::str )
  [17] (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2
  [18] call print_str 
  to:print_str_ln::@1
print_str_ln::@1: scope:[print_str_ln]  from print_str_ln
  [19] phi()
  [20] call print_ln 
  to:print_str_ln::@return
print_str_ln::@return: scope:[print_str_ln]  from print_str_ln::@1
  [21] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_ln::@1
  [22] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [23] (byte*) print_line_cursor#13 ← phi( print_ln/(byte*) print_line_cursor#22 print_ln::@1/(byte*) print_line_cursor#14 )
  [24] (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#13 + (byte) $28
  [25] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [26] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_str_ln
  [27] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [28] (byte*) print_char_cursor#20 ← phi( print_str/(byte*) print_char_cursor#31 print_str::@3/(byte*) print_char_cursor#24 )
  [28] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#0 print_str::@3/(byte*) print_str::str#1 )
  [29] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [30] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [31] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [32] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [33] (byte*) print_str::str#1 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  [34] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#0
  [35] (byte*) print_char_cursor#24 ← ++ (byte*) print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [36] return 
  to:@return

(bool()) game_ready()
game_ready: scope:[game_ready]  from main::@1
  [37] if((byte) action_count#13!=(byte) 0) goto game_ready::@3
  to:game_ready::@1
game_ready::@3: scope:[game_ready]  from game_ready
  [38] phi()
  to:game_ready::@1
game_ready::@1: scope:[game_ready]  from game_ready game_ready::@3
  [39] (byte) action_count#10 ← phi( game_ready::@3/(byte) action_count#13 game_ready/(const nomodify byte) READY_FRAMES )
  [40] call print_str_ln 
  to:game_ready::@2
game_ready::@2: scope:[game_ready]  from game_ready::@1
  [41] (byte) action_count#11 ← -- (byte) action_count#10
  [42] (bool) game_ready::return#1 ← (byte) action_count#11 == (byte) 0
  to:game_ready::@return
game_ready::@return: scope:[game_ready]  from game_ready::@2
  [43] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) action_count
(byte) action_count#10 1001.0
(byte) action_count#11 175.25
(byte) action_count#13 701.0
(bool()) game_ready()
(bool) game_ready::return
(bool) game_ready::return#0 202.0
(bool) game_ready::return#1 367.33333333333337
(void()) main()
(bool~) main::$0 202.0
(byte) main::i
(byte) main::i#1 101.0
(byte) main::i#2 28.857142857142858
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 1.10000002E8
(byte*) print_char_cursor
(byte*) print_char_cursor#20 2.0009091363636363E7
(byte*) print_char_cursor#24 2.75000005E7
(byte*) print_char_cursor#31 33701.0
(byte*) print_char_cursor#35 275.5
(byte*) print_char_cursor#46 202.0
(byte*) print_char_cursor#49 202.0
(byte*) print_line_cursor
(byte*) print_line_cursor#13 2.0100003E7
(byte*) print_line_cursor#14 1666689.277777778
(byte*) print_line_cursor#22 20220.600000000002
(byte*) print_line_cursor#24 275.5
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 55001.0
(byte*) print_str::str#1 2.0000002E7
(byte*) print_str::str#2 1.002500125E7
(void()) print_str_ln((byte*) print_str_ln::str)
(byte*) print_str_ln::str
(byte*) print_str_ln::str#2 10001.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ print_str_ln::str#2 ]
[ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ]
[ print_str::str#2 print_str::str#0 print_str::str#1 ]
[ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ]
[ action_count#10 action_count#13 action_count#11 ]
Added variable game_ready::return#0 to live range equivalence class [ game_ready::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable print_char::ch#0 to live range equivalence class [ print_char::ch#0 ]
Added variable game_ready::return#1 to live range equivalence class [ game_ready::return#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ print_str_ln::str#2 ]
[ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ]
[ print_str::str#2 print_str::str#0 print_str::str#1 ]
[ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ]
[ action_count#10 action_count#13 action_count#11 ]
[ game_ready::return#0 ]
[ main::$0 ]
[ print_char::ch#0 ]
[ game_ready::return#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ print_str_ln::str#2 ]
Allocated zp[2]:5 [ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ]
Allocated zp[2]:7 [ print_str::str#2 print_str::str#0 print_str::str#1 ]
Allocated zp[2]:9 [ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ]
Allocated zp[1]:11 [ action_count#10 action_count#13 action_count#11 ]
Allocated zp[1]:12 [ game_ready::return#0 ]
Allocated zp[1]:13 [ main::$0 ]
Allocated zp[1]:14 [ print_char::ch#0 ]
Allocated zp[1]:15 [ game_ready::return#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Adding a missing word-fragment for Travis Fisher
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const READY_FRAMES = 5
  .label print_char_cursor = 9
  .label print_line_cursor = 5
  .label action_count = $b
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = $d
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [5] phi (byte) action_count#13 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z action_count
    // [5] phi (byte*) print_line_cursor#24 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [5] phi (byte*) print_char_cursor#35 = (byte*) 1024 [phi:main->main::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    jmp __b1
    // main::@1
  __b1:
    // [6] call game_ready 
    jsr game_ready
    // [7] (bool) game_ready::return#0 ← (bool) game_ready::return#1 -- vboz1=vboz2 
    lda.z game_ready.return_1
    sta.z game_ready.return
    jmp __b4
    // main::@4
  __b4:
    // [8] (bool~) main::$0 ← (bool) game_ready::return#0 -- vboz1=vboz2 
    lda.z game_ready.return
    sta.z __0
    // [9] if((bool~) main::$0) goto main::@3 -- vboz1_then_la1 
    lda.z __0
    cmp #0
    bne __b3
    jmp __b2
    // main::@3
  __b3:
    // [10] (byte*) print_char_cursor#46 ← (byte*) print_line_cursor#14 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [11] call print_str_ln 
    // [16] phi from main::@3 to print_str_ln [phi:main::@3->print_str_ln]
  print_str_ln_from___b3:
    // [16] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#14 [phi:main::@3->print_str_ln#0] -- register_copy 
    // [16] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#46 [phi:main::@3->print_str_ln#1] -- register_copy 
    // [16] phi (byte*) print_str_ln::str#2 = (const byte*) main::str [phi:main::@3->print_str_ln#2] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_ln.str
    lda #>str
    sta.z print_str_ln.str+1
    jsr print_str_ln
    jmp __b2
    // main::@2
  __b2:
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 6) goto main::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b5
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
    // main::@5
  __b5:
    // [15] (byte*) print_char_cursor#49 ← (byte*) print_line_cursor#14 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [5] phi (byte) action_count#13 = (byte) action_count#11 [phi:main::@5->main::@1#1] -- register_copy 
    // [5] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#14 [phi:main::@5->main::@1#2] -- register_copy 
    // [5] phi (byte*) print_char_cursor#35 = (byte*) print_char_cursor#49 [phi:main::@5->main::@1#3] -- register_copy 
    jmp __b1
    str: .text "ready!"
    .byte 0
}
  // print_str_ln
// Print a zero-terminated string followed by a newline
// print_str_ln(byte* zp(3) str)
print_str_ln: {
    .label str = 3
    // [17] (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2 -- pbuz1=pbuz2 
    lda.z str
    sta.z print_str.str
    lda.z str+1
    sta.z print_str.str+1
    // [18] call print_str 
    // [27] phi from print_str_ln to print_str [phi:print_str_ln->print_str]
  print_str_from_print_str_ln:
    jsr print_str
    // [19] phi from print_str_ln to print_str_ln::@1 [phi:print_str_ln->print_str_ln::@1]
  __b1_from_print_str_ln:
    jmp __b1
    // print_str_ln::@1
  __b1:
    // [20] call print_ln 
    // [22] phi from print_str_ln::@1 to print_ln [phi:print_str_ln::@1->print_ln]
  print_ln_from___b1:
    jsr print_ln
    jmp __breturn
    // print_str_ln::@return
  __breturn:
    // [21] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [23] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [23] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#22 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [24] (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#13 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [25] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [26] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(7) str)
print_str: {
    .label str = 7
    // [28] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [28] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#31 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [28] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [29] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [30] return 
    rts
    // print_str::@2
  __b2:
    // [31] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [32] call print_char 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [33] (byte*) print_str::str#1 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_char
// Print a single char
// print_char(byte zp($e) ch)
print_char: {
    .label ch = $e
    // [34] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [35] (byte*) print_char_cursor#24 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [36] return 
    rts
}
  // game_ready
game_ready: {
    .label return = $c
    .label return_1 = $f
    // [37] if((byte) action_count#13!=(byte) 0) goto game_ready::@3 -- vbuz1_neq_0_then_la1 
    lda.z action_count
    cmp #0
    bne __b3_from_game_ready
    // [39] phi from game_ready to game_ready::@1 [phi:game_ready->game_ready::@1]
  __b1_from_game_ready:
    // [39] phi (byte) action_count#10 = (const nomodify byte) READY_FRAMES [phi:game_ready->game_ready::@1#0] -- vbuz1=vbuc1 
    lda #READY_FRAMES
    sta.z action_count
    jmp __b1
    // [38] phi from game_ready to game_ready::@3 [phi:game_ready->game_ready::@3]
  __b3_from_game_ready:
    jmp __b3
    // game_ready::@3
  __b3:
    // [39] phi from game_ready::@3 to game_ready::@1 [phi:game_ready::@3->game_ready::@1]
  __b1_from___b3:
    // [39] phi (byte) action_count#10 = (byte) action_count#13 [phi:game_ready::@3->game_ready::@1#0] -- register_copy 
    jmp __b1
    // game_ready::@1
  __b1:
    // [40] call print_str_ln 
    // [16] phi from game_ready::@1 to print_str_ln [phi:game_ready::@1->print_str_ln]
  print_str_ln_from___b1:
    // [16] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#24 [phi:game_ready::@1->print_str_ln#0] -- register_copy 
    // [16] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#35 [phi:game_ready::@1->print_str_ln#1] -- register_copy 
    // [16] phi (byte*) print_str_ln::str#2 = (const byte*) game_ready::str [phi:game_ready::@1->print_str_ln#2] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_ln.str
    lda #>str
    sta.z print_str_ln.str+1
    jsr print_str_ln
    jmp __b2
    // game_ready::@2
  __b2:
    // [41] (byte) action_count#11 ← -- (byte) action_count#10 -- vbuz1=_dec_vbuz1 
    dec.z action_count
    // [42] (bool) game_ready::return#1 ← (byte) action_count#11 == (byte) 0 -- vboz1=vbuz2_eq_vbuc1 
    lda.z action_count
    eor #0
    beq !+
    lda #1
  !:
    eor #1
    sta.z return_1
    jmp __breturn
    // game_ready::@return
  __breturn:
    // [43] return 
    rts
    str: .text "ready"
    .byte 0
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] (byte*) print_char_cursor#46 ← (byte*) print_line_cursor#14 [ main::i#2 print_line_cursor#14 action_count#11 print_char_cursor#46 ] ( main:2 [ main::i#2 print_line_cursor#14 action_count#11 print_char_cursor#46 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ action_count#10 action_count#13 action_count#11 ]
Statement [15] (byte*) print_char_cursor#49 ← (byte*) print_line_cursor#14 [ print_char_cursor#49 print_line_cursor#14 action_count#11 main::i#1 ] ( main:2 [ print_char_cursor#49 print_line_cursor#14 action_count#11 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [17] (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2 [ print_char_cursor#31 print_line_cursor#22 print_str::str#0 ] ( main:2::print_str_ln:11 [ main::i#2 action_count#11 print_char_cursor#31 print_line_cursor#22 print_str::str#0 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40 [ main::i#2 action_count#10 print_char_cursor#31 print_line_cursor#22 print_str::str#0 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte a 
Statement [24] (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#13 + (byte) $28 [ print_line_cursor#14 print_char_cursor#20 ] ( main:2::print_str_ln:11::print_ln:20 [ main::i#2 action_count#11 print_line_cursor#14 print_char_cursor#20 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } }  main:2::game_ready:6::print_str_ln:40::print_ln:20 [ main::i#2 action_count#10 print_line_cursor#14 print_char_cursor#20 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } }  ) always clobbers reg byte a 
Statement [25] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1 [ print_line_cursor#14 print_char_cursor#20 ] ( main:2::print_str_ln:11::print_ln:20 [ main::i#2 action_count#11 print_line_cursor#14 print_char_cursor#20 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } }  main:2::game_ready:6::print_str_ln:40::print_ln:20 [ main::i#2 action_count#10 print_line_cursor#14 print_char_cursor#20 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } }  ) always clobbers reg byte a 
Statement [29] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#20 print_str::str#2 ] ( main:2::print_str_ln:11::print_str:18 [ main::i#2 action_count#11 print_line_cursor#22 print_char_cursor#20 print_str::str#2 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40::print_str:18 [ main::i#2 action_count#10 print_line_cursor#22 print_char_cursor#20 print_str::str#2 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ action_count#10 action_count#13 action_count#11 ]
Statement [31] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#20 print_str::str#2 print_char::ch#0 ] ( main:2::print_str_ln:11::print_str:18 [ main::i#2 action_count#11 print_line_cursor#22 print_char_cursor#20 print_str::str#2 print_char::ch#0 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40::print_str:18 [ main::i#2 action_count#10 print_line_cursor#22 print_char_cursor#20 print_str::str#2 print_char::ch#0 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte a reg byte y 
Statement [34] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#0 [ print_char_cursor#20 ] ( main:2::print_str_ln:11::print_str:18::print_char:32 [ main::i#2 action_count#11 print_line_cursor#22 print_str::str#2 print_char_cursor#20 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40::print_str:18::print_char:32 [ main::i#2 action_count#10 print_line_cursor#22 print_str::str#2 print_char_cursor#20 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte y 
Statement [42] (bool) game_ready::return#1 ← (byte) action_count#11 == (byte) 0 [ print_line_cursor#14 action_count#11 game_ready::return#1 ] ( main:2::game_ready:6 [ main::i#2 print_line_cursor#14 action_count#11 game_ready::return#1 ] { { game_ready::return#0 = game_ready::return#1 } }  ) always clobbers reg byte a 
Statement [10] (byte*) print_char_cursor#46 ← (byte*) print_line_cursor#14 [ main::i#2 print_line_cursor#14 action_count#11 print_char_cursor#46 ] ( main:2 [ main::i#2 print_line_cursor#14 action_count#11 print_char_cursor#46 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } }  ) always clobbers reg byte a 
Statement [15] (byte*) print_char_cursor#49 ← (byte*) print_line_cursor#14 [ print_char_cursor#49 print_line_cursor#14 action_count#11 main::i#1 ] ( main:2 [ print_char_cursor#49 print_line_cursor#14 action_count#11 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [17] (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2 [ print_char_cursor#31 print_line_cursor#22 print_str::str#0 ] ( main:2::print_str_ln:11 [ main::i#2 action_count#11 print_char_cursor#31 print_line_cursor#22 print_str::str#0 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40 [ main::i#2 action_count#10 print_char_cursor#31 print_line_cursor#22 print_str::str#0 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte a 
Statement [24] (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#13 + (byte) $28 [ print_line_cursor#14 print_char_cursor#20 ] ( main:2::print_str_ln:11::print_ln:20 [ main::i#2 action_count#11 print_line_cursor#14 print_char_cursor#20 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } }  main:2::game_ready:6::print_str_ln:40::print_ln:20 [ main::i#2 action_count#10 print_line_cursor#14 print_char_cursor#20 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } }  ) always clobbers reg byte a 
Statement [25] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1 [ print_line_cursor#14 print_char_cursor#20 ] ( main:2::print_str_ln:11::print_ln:20 [ main::i#2 action_count#11 print_line_cursor#14 print_char_cursor#20 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } }  main:2::game_ready:6::print_str_ln:40::print_ln:20 [ main::i#2 action_count#10 print_line_cursor#14 print_char_cursor#20 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } }  ) always clobbers reg byte a 
Statement [29] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#20 print_str::str#2 ] ( main:2::print_str_ln:11::print_str:18 [ main::i#2 action_count#11 print_line_cursor#22 print_char_cursor#20 print_str::str#2 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40::print_str:18 [ main::i#2 action_count#10 print_line_cursor#22 print_char_cursor#20 print_str::str#2 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte a reg byte y 
Statement [31] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#20 print_str::str#2 print_char::ch#0 ] ( main:2::print_str_ln:11::print_str:18 [ main::i#2 action_count#11 print_line_cursor#22 print_char_cursor#20 print_str::str#2 print_char::ch#0 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40::print_str:18 [ main::i#2 action_count#10 print_line_cursor#22 print_char_cursor#20 print_str::str#2 print_char::ch#0 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte a reg byte y 
Statement [34] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#0 [ print_char_cursor#20 ] ( main:2::print_str_ln:11::print_str:18::print_char:32 [ main::i#2 action_count#11 print_line_cursor#22 print_str::str#2 print_char_cursor#20 ] { { print_char_cursor#31 = print_char_cursor#46 } { print_line_cursor#14 = print_line_cursor#22 } { print_str::str#0 = print_str_ln::str#2 } }  main:2::game_ready:6::print_str_ln:40::print_str:18::print_char:32 [ main::i#2 action_count#10 print_line_cursor#22 print_str::str#2 print_char_cursor#20 ] { { game_ready::return#0 = game_ready::return#1 } { print_char_cursor#31 = print_char_cursor#35 } { print_line_cursor#22 = print_line_cursor#24 } { print_str::str#0 = print_str_ln::str#2 } }  ) always clobbers reg byte y 
Statement [42] (bool) game_ready::return#1 ← (byte) action_count#11 == (byte) 0 [ print_line_cursor#14 action_count#11 game_ready::return#1 ] ( main:2::game_ready:6 [ main::i#2 print_line_cursor#14 action_count#11 game_ready::return#1 ] { { game_ready::return#0 = game_ready::return#1 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ print_str_ln::str#2 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ print_str::str#2 print_str::str#0 print_str::str#1 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ action_count#10 action_count#13 action_count#11 ] : zp[1]:11 , reg byte x , 
Potential registers zp[1]:12 [ game_ready::return#0 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ main::$0 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ print_char::ch#0 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ game_ready::return#1 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 110,000,002: zp[1]:14 [ print_char::ch#0 ] 
Uplift Scope [] 47,543,472.36: zp[2]:9 [ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ] 21,787,188.38: zp[2]:5 [ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ] 1,877.25: zp[1]:11 [ action_count#10 action_count#13 action_count#11 ] 
Uplift Scope [print_str] 30,080,004.25: zp[2]:7 [ print_str::str#2 print_str::str#0 print_str::str#1 ] 
Uplift Scope [print_str_ln] 10,001: zp[2]:3 [ print_str_ln::str#2 ] 
Uplift Scope [game_ready] 367.33: zp[1]:15 [ game_ready::return#1 ] 202: zp[1]:12 [ game_ready::return#0 ] 
Uplift Scope [main] 202: zp[1]:13 [ main::$0 ] 129.86: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 

Uplifting [print_char] best 10552 combination reg byte a [ print_char::ch#0 ] 
Uplifting [] best 10510 combination zp[2]:9 [ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ] zp[2]:5 [ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ] reg byte x [ action_count#10 action_count#13 action_count#11 ] 
Uplifting [print_str] best 10510 combination zp[2]:7 [ print_str::str#2 print_str::str#0 print_str::str#1 ] 
Uplifting [print_str_ln] best 10510 combination zp[2]:3 [ print_str_ln::str#2 ] 
Uplifting [game_ready] best 10417 combination reg byte a [ game_ready::return#1 ] reg byte a [ game_ready::return#0 ] 
Uplifting [main] best 10357 combination reg byte a [ main::$0 ] zp[1]:2 [ main::i#2 main::i#1 ] 
Uplifting [RADIX] best 10357 combination 
Uplifting [print_ln] best 10357 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 10357 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:3 [ print_str_ln::str#2 ] ] with [ zp[2]:7 [ print_str::str#2 print_str::str#0 print_str::str#1 ] ] - score: 1
Allocated (was zp[2]:9) zp[2]:7 [ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Adding a missing word-fragment for Travis Fisher
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const READY_FRAMES = 5
  .label print_char_cursor = 7
  .label print_line_cursor = 5
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [5] phi (byte) action_count#13 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) print_line_cursor#24 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [5] phi (byte*) print_char_cursor#35 = (byte*) 1024 [phi:main->main::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    jmp __b1
    // main::@1
  __b1:
    // [6] call game_ready 
    jsr game_ready
    // [7] (bool) game_ready::return#0 ← (bool) game_ready::return#1
    jmp __b4
    // main::@4
  __b4:
    // [8] (bool~) main::$0 ← (bool) game_ready::return#0
    // [9] if((bool~) main::$0) goto main::@3 -- vboaa_then_la1 
    cmp #0
    bne __b3
    jmp __b2
    // main::@3
  __b3:
    // [10] (byte*) print_char_cursor#46 ← (byte*) print_line_cursor#14 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [11] call print_str_ln 
    // [16] phi from main::@3 to print_str_ln [phi:main::@3->print_str_ln]
  print_str_ln_from___b3:
    // [16] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#14 [phi:main::@3->print_str_ln#0] -- register_copy 
    // [16] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#46 [phi:main::@3->print_str_ln#1] -- register_copy 
    // [16] phi (byte*) print_str_ln::str#2 = (const byte*) main::str [phi:main::@3->print_str_ln#2] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_ln.str
    lda #>str
    sta.z print_str_ln.str+1
    jsr print_str_ln
    jmp __b2
    // main::@2
  __b2:
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 6) goto main::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b5
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
    // main::@5
  __b5:
    // [15] (byte*) print_char_cursor#49 ← (byte*) print_line_cursor#14 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [5] phi (byte) action_count#13 = (byte) action_count#11 [phi:main::@5->main::@1#1] -- register_copy 
    // [5] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#14 [phi:main::@5->main::@1#2] -- register_copy 
    // [5] phi (byte*) print_char_cursor#35 = (byte*) print_char_cursor#49 [phi:main::@5->main::@1#3] -- register_copy 
    jmp __b1
    str: .text "ready!"
    .byte 0
}
  // print_str_ln
// Print a zero-terminated string followed by a newline
// print_str_ln(byte* zp(3) str)
print_str_ln: {
    .label str = 3
    // [17] (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2
    // [18] call print_str 
    // [27] phi from print_str_ln to print_str [phi:print_str_ln->print_str]
  print_str_from_print_str_ln:
    jsr print_str
    // [19] phi from print_str_ln to print_str_ln::@1 [phi:print_str_ln->print_str_ln::@1]
  __b1_from_print_str_ln:
    jmp __b1
    // print_str_ln::@1
  __b1:
    // [20] call print_ln 
    // [22] phi from print_str_ln::@1 to print_ln [phi:print_str_ln::@1->print_ln]
  print_ln_from___b1:
    jsr print_ln
    jmp __breturn
    // print_str_ln::@return
  __breturn:
    // [21] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [23] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [23] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#22 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [24] (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#13 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [25] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [26] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(3) str)
print_str: {
    .label str = 3
    // [28] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [28] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#31 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [28] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [29] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [30] return 
    rts
    // print_str::@2
  __b2:
    // [31] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [32] call print_char 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [33] (byte*) print_str::str#1 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [34] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [35] (byte*) print_char_cursor#24 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [36] return 
    rts
}
  // game_ready
game_ready: {
    // [37] if((byte) action_count#13!=(byte) 0) goto game_ready::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from_game_ready
    // [39] phi from game_ready to game_ready::@1 [phi:game_ready->game_ready::@1]
  __b1_from_game_ready:
    // [39] phi (byte) action_count#10 = (const nomodify byte) READY_FRAMES [phi:game_ready->game_ready::@1#0] -- vbuxx=vbuc1 
    ldx #READY_FRAMES
    jmp __b1
    // [38] phi from game_ready to game_ready::@3 [phi:game_ready->game_ready::@3]
  __b3_from_game_ready:
    jmp __b3
    // game_ready::@3
  __b3:
    // [39] phi from game_ready::@3 to game_ready::@1 [phi:game_ready::@3->game_ready::@1]
  __b1_from___b3:
    // [39] phi (byte) action_count#10 = (byte) action_count#13 [phi:game_ready::@3->game_ready::@1#0] -- register_copy 
    jmp __b1
    // game_ready::@1
  __b1:
    // [40] call print_str_ln 
    // [16] phi from game_ready::@1 to print_str_ln [phi:game_ready::@1->print_str_ln]
  print_str_ln_from___b1:
    // [16] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#24 [phi:game_ready::@1->print_str_ln#0] -- register_copy 
    // [16] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#35 [phi:game_ready::@1->print_str_ln#1] -- register_copy 
    // [16] phi (byte*) print_str_ln::str#2 = (const byte*) game_ready::str [phi:game_ready::@1->print_str_ln#2] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_ln.str
    lda #>str
    sta.z print_str_ln.str+1
    jsr print_str_ln
    jmp __b2
    // game_ready::@2
  __b2:
    // [41] (byte) action_count#11 ← -- (byte) action_count#10 -- vbuxx=_dec_vbuxx 
    dex
    // [42] (bool) game_ready::return#1 ← (byte) action_count#11 == (byte) 0 -- vboaa=vbuxx_eq_vbuc1 
    lda #1
    cpx #0
    beq !+
    lda #0
  !:
    jmp __breturn
    // game_ready::@return
  __breturn:
    // [43] return 
    rts
    str: .text "ready"
    .byte 0
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from_game_ready with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_print_str_ln:
Removing instruction print_ln_from___b1:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b3_from_game_ready:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction print_str_ln_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction print_str_ln_from___b3:
Removing instruction __breturn:
Removing instruction __b1_from___b5:
Removing instruction print_str_from_print_str_ln:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_game_ready:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) READY_FRAMES = (byte) 5
(byte) action_count
(byte) action_count#10 reg byte x 1001.0
(byte) action_count#11 reg byte x 175.25
(byte) action_count#13 reg byte x 701.0
(bool()) game_ready()
(label) game_ready::@1
(label) game_ready::@2
(label) game_ready::@3
(label) game_ready::@return
(bool) game_ready::return
(bool) game_ready::return#0 reg byte a 202.0
(bool) game_ready::return#1 reg byte a 367.33333333333337
(const byte*) game_ready::str[(byte) 6]  = (byte*) "ready"
(void()) main()
(bool~) main::$0 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 i zp[1]:2 101.0
(byte) main::i#2 i zp[1]:2 28.857142857142858
(const byte*) main::str[(byte) 7]  = (byte*) "ready!"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 1.10000002E8
(byte*) print_char_cursor
(byte*) print_char_cursor#20 print_char_cursor zp[2]:7 2.0009091363636363E7
(byte*) print_char_cursor#24 print_char_cursor zp[2]:7 2.75000005E7
(byte*) print_char_cursor#31 print_char_cursor zp[2]:7 33701.0
(byte*) print_char_cursor#35 print_char_cursor zp[2]:7 275.5
(byte*) print_char_cursor#46 print_char_cursor zp[2]:7 202.0
(byte*) print_char_cursor#49 print_char_cursor zp[2]:7 202.0
(byte*) print_line_cursor
(byte*) print_line_cursor#13 print_line_cursor zp[2]:5 2.0100003E7
(byte*) print_line_cursor#14 print_line_cursor zp[2]:5 1666689.277777778
(byte*) print_line_cursor#22 print_line_cursor zp[2]:5 20220.600000000002
(byte*) print_line_cursor#24 print_line_cursor zp[2]:5 275.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:3 55001.0
(byte*) print_str::str#1 str zp[2]:3 2.0000002E7
(byte*) print_str::str#2 str zp[2]:3 1.002500125E7
(void()) print_str_ln((byte*) print_str_ln::str)
(label) print_str_ln::@1
(label) print_str_ln::@return
(byte*) print_str_ln::str
(byte*) print_str_ln::str#2 str zp[2]:3 10001.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[2]:3 [ print_str_ln::str#2 print_str::str#2 print_str::str#0 print_str::str#1 ]
zp[2]:5 [ print_line_cursor#13 print_line_cursor#22 print_line_cursor#24 print_line_cursor#14 ]
zp[2]:7 [ print_char_cursor#20 print_char_cursor#31 print_char_cursor#35 print_char_cursor#49 print_char_cursor#46 print_char_cursor#24 ]
reg byte x [ action_count#10 action_count#13 action_count#11 ]
reg byte a [ game_ready::return#0 ]
reg byte a [ main::$0 ]
reg byte a [ print_char::ch#0 ]
reg byte a [ game_ready::return#1 ]


FINAL ASSEMBLER
Score: 8716

  // File Comments
// Adding a missing word-fragment for Travis Fisher
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const READY_FRAMES = 5
  .label print_char_cursor = 7
  .label print_line_cursor = 5
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [5] phi (byte) action_count#13 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    tax
    // [5] phi (byte*) print_line_cursor#24 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [5] phi (byte*) print_char_cursor#35 = (byte*) 1024 [phi:main->main::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // main::@1
  __b1:
    // game_ready()
    // [6] call game_ready 
    jsr game_ready
    // [7] (bool) game_ready::return#0 ← (bool) game_ready::return#1
    // main::@4
    // [8] (bool~) main::$0 ← (bool) game_ready::return#0
    // if(game_ready())
    // [9] if((bool~) main::$0) goto main::@3 -- vboaa_then_la1 
    cmp #0
    bne __b3
    jmp __b2
    // main::@3
  __b3:
    // [10] (byte*) print_char_cursor#46 ← (byte*) print_line_cursor#14 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str_ln("ready!")
    // [11] call print_str_ln 
    // [16] phi from main::@3 to print_str_ln [phi:main::@3->print_str_ln]
    // [16] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#14 [phi:main::@3->print_str_ln#0] -- register_copy 
    // [16] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#46 [phi:main::@3->print_str_ln#1] -- register_copy 
    // [16] phi (byte*) print_str_ln::str#2 = (const byte*) main::str [phi:main::@3->print_str_ln#2] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_ln.str
    lda #>str
    sta.z print_str_ln.str+1
    jsr print_str_ln
    // main::@2
  __b2:
    // for(byte i:0..5)
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 6) goto main::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b5
    // main::@return
    // }
    // [14] return 
    rts
    // main::@5
  __b5:
    // [15] (byte*) print_char_cursor#49 ← (byte*) print_line_cursor#14 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [5] phi (byte) action_count#13 = (byte) action_count#11 [phi:main::@5->main::@1#1] -- register_copy 
    // [5] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#14 [phi:main::@5->main::@1#2] -- register_copy 
    // [5] phi (byte*) print_char_cursor#35 = (byte*) print_char_cursor#49 [phi:main::@5->main::@1#3] -- register_copy 
    jmp __b1
    str: .text "ready!"
    .byte 0
}
  // print_str_ln
// Print a zero-terminated string followed by a newline
// print_str_ln(byte* zp(3) str)
print_str_ln: {
    .label str = 3
    // print_str(str)
    // [17] (byte*) print_str::str#0 ← (byte*) print_str_ln::str#2
    // [18] call print_str 
    // [27] phi from print_str_ln to print_str [phi:print_str_ln->print_str]
    jsr print_str
    // [19] phi from print_str_ln to print_str_ln::@1 [phi:print_str_ln->print_str_ln::@1]
    // print_str_ln::@1
    // print_ln()
    // [20] call print_ln 
    // [22] phi from print_str_ln::@1 to print_ln [phi:print_str_ln::@1->print_ln]
    jsr print_ln
    // print_str_ln::@return
    // }
    // [21] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [23] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [23] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#22 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [24] (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#13 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [25] if((byte*) print_line_cursor#14<(byte*) print_char_cursor#20) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [26] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(3) str)
print_str: {
    .label str = 3
    // [28] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [28] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#31 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [28] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [29] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [30] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [31] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [32] call print_char 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [33] (byte*) print_str::str#1 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [34] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [35] (byte*) print_char_cursor#24 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [36] return 
    rts
}
  // game_ready
game_ready: {
    // if (action_count == 0)
    // [37] if((byte) action_count#13!=(byte) 0) goto game_ready::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [39] phi from game_ready to game_ready::@1 [phi:game_ready->game_ready::@1]
    // [39] phi (byte) action_count#10 = (const nomodify byte) READY_FRAMES [phi:game_ready->game_ready::@1#0] -- vbuxx=vbuc1 
    ldx #READY_FRAMES
    // [38] phi from game_ready to game_ready::@3 [phi:game_ready->game_ready::@3]
    // game_ready::@3
    // [39] phi from game_ready::@3 to game_ready::@1 [phi:game_ready::@3->game_ready::@1]
    // [39] phi (byte) action_count#10 = (byte) action_count#13 [phi:game_ready::@3->game_ready::@1#0] -- register_copy 
    // game_ready::@1
  __b1:
    // print_str_ln("ready")
    // [40] call print_str_ln 
    // [16] phi from game_ready::@1 to print_str_ln [phi:game_ready::@1->print_str_ln]
    // [16] phi (byte*) print_line_cursor#22 = (byte*) print_line_cursor#24 [phi:game_ready::@1->print_str_ln#0] -- register_copy 
    // [16] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#35 [phi:game_ready::@1->print_str_ln#1] -- register_copy 
    // [16] phi (byte*) print_str_ln::str#2 = (const byte*) game_ready::str [phi:game_ready::@1->print_str_ln#2] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str_ln.str
    lda #>str
    sta.z print_str_ln.str+1
    jsr print_str_ln
    // game_ready::@2
    // action_count--;
    // [41] (byte) action_count#11 ← -- (byte) action_count#10 -- vbuxx=_dec_vbuxx 
    dex
    // action_count==0
    // [42] (bool) game_ready::return#1 ← (byte) action_count#11 == (byte) 0 -- vboaa=vbuxx_eq_vbuc1 
    lda #1
    cpx #0
    beq !+
    lda #0
  !:
    // game_ready::@return
    // }
    // [43] return 
    rts
    str: .text "ready"
    .byte 0
}
  // File Data

