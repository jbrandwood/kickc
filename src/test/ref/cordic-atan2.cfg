@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) CORDIC_ATAN2_ANGLES#0) {{ .fill CORDIC_ITERATIONS, 2*256*atan(1/pow(2,i))/PI/2
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  [5] phi()
  [6] call init_font_hex 
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [7] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [8] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [9] (byte*) main::screen#4 ← phi( main::@5/(const byte*) SCREEN#0 main::@3/(byte*) main::screen#1 )
  [9] (signed byte) main::y#4 ← phi( main::@5/(signed byte) -$c main::@3/(signed byte) main::y#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [10] (byte*) main::screen#2 ← phi( main::@1/(byte*) main::screen#4 main::@6/(byte*) main::screen#1 )
  [10] (signed byte) main::x#2 ← phi( main::@1/(signed byte) -$13 main::@6/(signed byte) main::x#1 )
  [11] (signed byte) atan2::x#0 ← (signed byte) main::x#2
  [12] (signed byte) atan2::y#0 ← (signed byte) main::y#4
  [13] call atan2 
  [14] (byte) atan2::return#0 ← (byte) atan2::return#1
  to:main::@6
main::@6: scope:[main]  from main::@2
  [15] (byte) main::angle#0 ← (byte) atan2::return#0
  [16] *((byte*) main::screen#2) ← (byte) main::angle#0
  [17] (byte*) main::screen#1 ← ++ (byte*) main::screen#2
  [18] (signed byte) main::x#1 ← ++ (signed byte) main::x#2
  [19] if((signed byte) main::x#1!=(signed byte) $15) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@6
  [20] (signed byte) main::y#1 ← ++ (signed byte) main::y#4
  [21] if((signed byte) main::y#1!=(signed byte) $d) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [22] *((const byte*) COLS#0+(word)(number) $c*(number) $28+(byte) $13) ← ++ *((const byte*) COLS#0+(word)(number) $c*(number) $28+(byte) $13)
  to:main::@4
atan2: scope:[atan2]  from main::@2
  [23] if((signed byte) atan2::y#0>(signed byte) 0) goto atan2::@1
  to:atan2::@2
atan2::@2: scope:[atan2]  from atan2
  [24] (signed byte~) atan2::$2 ← - (signed byte) atan2::y#0
  to:atan2::@3
atan2::@3: scope:[atan2]  from atan2::@1 atan2::@2
  [25] (signed byte) atan2::yi#0 ← phi( atan2::@1/(signed byte~) atan2::yi#11 atan2::@2/(signed byte~) atan2::$2 )
  [26] if((signed byte) atan2::x#0>(signed byte) 0) goto atan2::@4
  to:atan2::@5
atan2::@5: scope:[atan2]  from atan2::@3
  [27] (signed byte~) atan2::$7 ← - (signed byte) atan2::x#0
  to:atan2::@6
atan2::@6: scope:[atan2]  from atan2::@4 atan2::@5
  [28] (signed byte) atan2::xi#0 ← phi( atan2::@4/(signed byte~) atan2::xi#8 atan2::@5/(signed byte~) atan2::$7 )
  to:atan2::@10
atan2::@10: scope:[atan2]  from atan2::@14 atan2::@6
  [29] (byte) atan2::angle#12 ← phi( atan2::@14/(byte) atan2::angle#13 atan2::@6/(byte) 0 )
  [29] (byte) atan2::i#2 ← phi( atan2::@14/(byte) atan2::i#1 atan2::@6/(byte) 0 )
  [29] (signed byte) atan2::xi#3 ← phi( atan2::@14/(signed byte) atan2::xi#7 atan2::@6/(signed byte) atan2::xi#0 )
  [29] (signed byte) atan2::yi#3 ← phi( atan2::@14/(signed byte) atan2::yi#7 atan2::@6/(signed byte) atan2::yi#0 )
  [30] if((signed byte) atan2::yi#3!=(signed byte) 0) goto atan2::@11
  to:atan2::@12
atan2::@12: scope:[atan2]  from atan2::@10 atan2::@14
  [31] (byte) atan2::angle#6 ← phi( atan2::@10/(byte) atan2::angle#12 atan2::@14/(byte) atan2::angle#13 )
  [32] (byte) atan2::angle#1 ← (byte) atan2::angle#6 >> (byte) 1
  [33] if((signed byte) atan2::x#0>=(signed byte) 0) goto atan2::@7
  to:atan2::@16
atan2::@16: scope:[atan2]  from atan2::@12
  [34] (byte) atan2::angle#4 ← (byte) $80 - (byte) atan2::angle#1
  to:atan2::@7
atan2::@7: scope:[atan2]  from atan2::@12 atan2::@16
  [35] (byte) atan2::angle#11 ← phi( atan2::@12/(byte) atan2::angle#1 atan2::@16/(byte) atan2::angle#4 )
  [36] if((signed byte) atan2::y#0>=(signed byte) 0) goto atan2::@8
  to:atan2::@9
atan2::@9: scope:[atan2]  from atan2::@7
  [37] (byte) atan2::angle#5 ← - (byte) atan2::angle#11
  to:atan2::@8
atan2::@8: scope:[atan2]  from atan2::@7 atan2::@9
  [38] (byte) atan2::return#1 ← phi( atan2::@9/(byte) atan2::angle#5 atan2::@7/(byte) atan2::angle#11 )
  to:atan2::@return
atan2::@return: scope:[atan2]  from atan2::@8
  [39] return 
  to:@return
atan2::@11: scope:[atan2]  from atan2::@10
  [40] (signed byte) atan2::xd#0 ← (signed byte) atan2::xi#3 >> (byte) atan2::i#2
  [41] (signed byte) atan2::yd#0 ← (signed byte) atan2::yi#3 >> (byte) atan2::i#2
  [42] if((signed byte) atan2::yi#3>(signed byte) 0) goto atan2::@13
  to:atan2::@15
atan2::@15: scope:[atan2]  from atan2::@11
  [43] (signed byte) atan2::xi#2 ← (signed byte) atan2::xi#3 - (signed byte) atan2::yd#0
  [44] (signed byte) atan2::yi#2 ← (signed byte) atan2::yi#3 + (signed byte) atan2::xd#0
  [45] (byte) atan2::angle#3 ← (byte) atan2::angle#12 - *((const byte*) CORDIC_ATAN2_ANGLES#0 + (byte) atan2::i#2)
  to:atan2::@14
atan2::@14: scope:[atan2]  from atan2::@13 atan2::@15
  [46] (signed byte) atan2::xi#7 ← phi( atan2::@13/(signed byte) atan2::xi#1 atan2::@15/(signed byte) atan2::xi#2 )
  [46] (byte) atan2::angle#13 ← phi( atan2::@13/(byte) atan2::angle#2 atan2::@15/(byte) atan2::angle#3 )
  [46] (signed byte) atan2::yi#7 ← phi( atan2::@13/(signed byte) atan2::yi#1 atan2::@15/(signed byte) atan2::yi#2 )
  [47] (byte) atan2::i#1 ← ++ (byte) atan2::i#2
  [48] if((byte) atan2::i#1==(const byte) CORDIC_ITERATIONS#0+(byte) 1) goto atan2::@12
  to:atan2::@10
atan2::@13: scope:[atan2]  from atan2::@11
  [49] (signed byte) atan2::xi#1 ← (signed byte) atan2::xi#3 + (signed byte) atan2::yd#0
  [50] (signed byte) atan2::yi#1 ← (signed byte) atan2::yi#3 - (signed byte) atan2::xd#0
  [51] (byte) atan2::angle#2 ← (byte) atan2::angle#12 + *((const byte*) CORDIC_ATAN2_ANGLES#0 + (byte) atan2::i#2)
  to:atan2::@14
atan2::@4: scope:[atan2]  from atan2::@3
  [52] (signed byte~) atan2::xi#8 ← (signed byte) atan2::x#0
  to:atan2::@6
atan2::@1: scope:[atan2]  from atan2
  [53] (signed byte~) atan2::yi#11 ← (signed byte) atan2::y#0
  to:atan2::@3
init_font_hex: scope:[init_font_hex]  from main
  [54] phi()
  to:init_font_hex::@1
init_font_hex::@1: scope:[init_font_hex]  from init_font_hex init_font_hex::@5
  [55] (byte) init_font_hex::c#6 ← phi( init_font_hex/(byte) 0 init_font_hex::@5/(byte) init_font_hex::c#1 )
  [55] (byte*) init_font_hex::proto_hi#6 ← phi( init_font_hex/(const byte[]) FONT_HEX_PROTO#0 init_font_hex::@5/(byte*) init_font_hex::proto_hi#1 )
  [55] (byte*) init_font_hex::charset#5 ← phi( init_font_hex/(const byte*) CHARSET#0 init_font_hex::@5/(byte*) init_font_hex::charset#0 )
  to:init_font_hex::@2
init_font_hex::@2: scope:[init_font_hex]  from init_font_hex::@1 init_font_hex::@4
  [56] (byte) init_font_hex::c1#4 ← phi( init_font_hex::@1/(byte) 0 init_font_hex::@4/(byte) init_font_hex::c1#1 )
  [56] (byte*) init_font_hex::proto_lo#4 ← phi( init_font_hex::@1/(const byte[]) FONT_HEX_PROTO#0 init_font_hex::@4/(byte*) init_font_hex::proto_lo#1 )
  [56] (byte*) init_font_hex::charset#2 ← phi( init_font_hex::@1/(byte*) init_font_hex::charset#5 init_font_hex::@4/(byte*) init_font_hex::charset#0 )
  [57] *((byte*) init_font_hex::charset#2) ← (byte) 0
  to:init_font_hex::@3
init_font_hex::@3: scope:[init_font_hex]  from init_font_hex::@2 init_font_hex::@3
  [58] (byte) init_font_hex::idx#5 ← phi( init_font_hex::@2/(byte) 1 init_font_hex::@3/(byte) init_font_hex::idx#2 )
  [58] (byte) init_font_hex::i#2 ← phi( init_font_hex::@2/(byte) 0 init_font_hex::@3/(byte) init_font_hex::i#1 )
  [59] (byte~) init_font_hex::$0 ← *((byte*) init_font_hex::proto_hi#6 + (byte) init_font_hex::i#2) << (byte) 4
  [60] (byte~) init_font_hex::$1 ← *((byte*) init_font_hex::proto_lo#4 + (byte) init_font_hex::i#2) << (byte) 1
  [61] (byte~) init_font_hex::$2 ← (byte~) init_font_hex::$0 | (byte~) init_font_hex::$1
  [62] *((byte*) init_font_hex::charset#2 + (byte) init_font_hex::idx#5) ← (byte~) init_font_hex::$2
  [63] (byte) init_font_hex::idx#2 ← ++ (byte) init_font_hex::idx#5
  [64] (byte) init_font_hex::i#1 ← ++ (byte) init_font_hex::i#2
  [65] if((byte) init_font_hex::i#1!=(byte) 5) goto init_font_hex::@3
  to:init_font_hex::@4
init_font_hex::@4: scope:[init_font_hex]  from init_font_hex::@3
  [66] *((byte*) init_font_hex::charset#2 + (byte) init_font_hex::idx#2) ← (byte) 0
  [67] (byte) init_font_hex::idx#3 ← ++ (byte) init_font_hex::idx#2
  [68] *((byte*) init_font_hex::charset#2 + (byte) init_font_hex::idx#3) ← (byte) 0
  [69] (byte*) init_font_hex::proto_lo#1 ← (byte*) init_font_hex::proto_lo#4 + (byte) 5
  [70] (byte*) init_font_hex::charset#0 ← (byte*) init_font_hex::charset#2 + (byte) 8
  [71] (byte) init_font_hex::c1#1 ← ++ (byte) init_font_hex::c1#4
  [72] if((byte) init_font_hex::c1#1!=(byte) $10) goto init_font_hex::@2
  to:init_font_hex::@5
init_font_hex::@5: scope:[init_font_hex]  from init_font_hex::@4
  [73] (byte*) init_font_hex::proto_hi#1 ← (byte*) init_font_hex::proto_hi#6 + (byte) 5
  [74] (byte) init_font_hex::c#1 ← ++ (byte) init_font_hex::c#6
  [75] if((byte) init_font_hex::c#1!=(byte) $10) goto init_font_hex::@1
  to:init_font_hex::@return
init_font_hex::@return: scope:[init_font_hex]  from init_font_hex::@5
  [76] return 
  to:@return
