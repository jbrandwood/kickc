
interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [0] *((const nomodify byte*) BG_COLOR) ← ++ *((const nomodify byte*) BG_COLOR)
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@5
  [1] (byte) irq::i#7 ← phi( irq/(byte) 0 irq::@5/(byte) irq::i#1 )
  to:irq::@2
irq::@2: scope:[irq]  from irq::@1 irq::@4
  [2] (byte) irq::j#4 ← phi( irq::@1/(byte) 0 irq::@4/(byte) irq::j#1 )
  to:irq::@3
irq::@3: scope:[irq]  from irq::@2 irq::@7
  [3] (byte) irq::k#2 ← phi( irq::@2/(byte) 0 irq::@7/(byte) irq::k#1 )
  [4] (byte~) irq::$2 ← (byte) irq::i#7 + (byte) irq::j#4
  [5] (byte~) irq::$3 ← (byte~) irq::$2 + (byte) irq::k#2
  [6] *((const nomodify byte*) FGCOL) ← (byte~) irq::$3
  [7] call sub_irq 
  to:irq::@7
irq::@7: scope:[irq]  from irq::@3
  [8] (byte) irq::k#1 ← ++ (byte) irq::k#2
  [9] if((byte) irq::k#1!=(byte) $b) goto irq::@3
  to:irq::@4
irq::@4: scope:[irq]  from irq::@7
  [10] (byte) irq::j#1 ← ++ (byte) irq::j#4
  [11] if((byte) irq::j#1!=(byte) $b) goto irq::@2
  to:irq::@5
irq::@5: scope:[irq]  from irq::@4
  [12] (byte) irq::i#1 ← ++ (byte) irq::i#7
  [13] if((byte) irq::i#1!=(byte) $b) goto irq::@1
  to:irq::@6
irq::@6: scope:[irq]  from irq::@5
  [14] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [15] *((const nomodify byte*) BG_COLOR) ← -- *((const nomodify byte*) BG_COLOR)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@6
  [16] return 
  to:@return

(void()) sub_irq()
sub_irq: scope:[sub_irq]  from irq::@3
  [17] phi()
  to:sub_irq::@1
sub_irq::@1: scope:[sub_irq]  from sub_irq sub_irq::@5
  [18] (byte) sub_irq::i#6 ← phi( sub_irq/(byte) 0 sub_irq::@5/(byte) sub_irq::i#1 )
  to:sub_irq::@2
sub_irq::@2: scope:[sub_irq]  from sub_irq::@1 sub_irq::@4
  [19] (byte) sub_irq::j#4 ← phi( sub_irq::@1/(byte) 0 sub_irq::@4/(byte) sub_irq::j#1 )
  to:sub_irq::@3
sub_irq::@3: scope:[sub_irq]  from sub_irq::@2 sub_irq::@3
  [20] (byte) sub_irq::k#2 ← phi( sub_irq::@2/(byte) 0 sub_irq::@3/(byte) sub_irq::k#1 )
  [21] (byte~) sub_irq::$0 ← (byte) sub_irq::i#6 + (byte) sub_irq::j#4
  [22] (byte~) sub_irq::$1 ← (byte~) sub_irq::$0 + (byte) sub_irq::k#2
  [23] *((const nomodify byte*) BG_COLOR) ← (byte~) sub_irq::$1
  [24] (byte) sub_irq::k#1 ← ++ (byte) sub_irq::k#2
  [25] if((byte) sub_irq::k#1!=(byte) $b) goto sub_irq::@3
  to:sub_irq::@4
sub_irq::@4: scope:[sub_irq]  from sub_irq::@3
  [26] (byte) sub_irq::j#1 ← ++ (byte) sub_irq::j#4
  [27] if((byte) sub_irq::j#1!=(byte) $b) goto sub_irq::@2
  to:sub_irq::@5
sub_irq::@5: scope:[sub_irq]  from sub_irq::@4
  [28] (byte) sub_irq::i#1 ← ++ (byte) sub_irq::i#6
  [29] if((byte) sub_irq::i#1!=(byte) $b) goto sub_irq::@1
  to:sub_irq::@return
sub_irq::@return: scope:[sub_irq]  from sub_irq::@5
  [30] return 
  to:@return

(void()) main()
main: scope:[main]  from
  asm { sei  }
  [32] *((const nomodify byte*) CIA1_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [33] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f
  [34] *((const nomodify byte*) RASTER) ← (byte) $fd
  [35] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [36] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@5 main::@7
  [38] (byte) main::i#7 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 main::@5/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [39] (byte) main::j#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::j#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [40] (byte) main::k#2 ← phi( main::@2/(byte) 0 main::@6/(byte) main::k#1 )
  [41] (byte~) main::$0 ← (byte) main::i#7 + (byte) main::j#4
  [42] (byte~) main::$1 ← (byte~) main::$0 + (byte) main::k#2
  [43] *((const nomodify byte*) FGCOL) ← (byte~) main::$1
  [44] call sub_main 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [45] (byte) main::k#1 ← ++ (byte) main::k#2
  [46] if((byte) main::k#1!=(byte) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@6
  [47] (byte) main::j#1 ← ++ (byte) main::j#4
  [48] if((byte) main::j#1!=(byte) $b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [49] (byte) main::i#1 ← ++ (byte) main::i#7
  [50] if((byte) main::i#1!=(byte) $b) goto main::@7
  to:main::@1
main::@7: scope:[main]  from main::@5
  [51] phi()
  to:main::@1

(void()) sub_main()
sub_main: scope:[sub_main]  from main::@3
  [52] phi()
  to:sub_main::@1
sub_main::@1: scope:[sub_main]  from sub_main sub_main::@5
  [53] (byte) sub_main::i#6 ← phi( sub_main/(byte) 0 sub_main::@5/(byte) sub_main::i#1 )
  to:sub_main::@2
sub_main::@2: scope:[sub_main]  from sub_main::@1 sub_main::@4
  [54] (byte) sub_main::j#4 ← phi( sub_main::@1/(byte) 0 sub_main::@4/(byte) sub_main::j#1 )
  to:sub_main::@3
sub_main::@3: scope:[sub_main]  from sub_main::@2 sub_main::@3
  [55] (byte) sub_main::k#2 ← phi( sub_main::@2/(byte) 0 sub_main::@3/(byte) sub_main::k#1 )
  [56] (byte~) sub_main::$0 ← (byte) sub_main::i#6 + (byte) sub_main::j#4
  [57] (byte~) sub_main::$1 ← (byte~) sub_main::$0 + (byte) sub_main::k#2
  [58] *((const nomodify byte*) BG_COLOR) ← (byte~) sub_main::$1
  [59] (byte) sub_main::k#1 ← ++ (byte) sub_main::k#2
  [60] if((byte) sub_main::k#1!=(byte) $b) goto sub_main::@3
  to:sub_main::@4
sub_main::@4: scope:[sub_main]  from sub_main::@3
  [61] (byte) sub_main::j#1 ← ++ (byte) sub_main::j#4
  [62] if((byte) sub_main::j#1!=(byte) $b) goto sub_main::@2
  to:sub_main::@5
sub_main::@5: scope:[sub_main]  from sub_main::@4
  [63] (byte) sub_main::i#1 ← ++ (byte) sub_main::i#6
  [64] if((byte) sub_main::i#1!=(byte) $b) goto sub_main::@1
  to:sub_main::@return
sub_main::@return: scope:[sub_main]  from sub_main::@5
  [65] return 
  to:@return
