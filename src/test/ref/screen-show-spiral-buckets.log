Resolved forward reference BUCKET_SIZES to (byte[NUM_BUCKETS]) BUCKET_SIZES
Resolved forward reference BUCKET_SIZES to (byte[NUM_BUCKETS]) BUCKET_SIZES
Resolved forward reference BUCKETS to (word*[NUM_BUCKETS]) BUCKETS
Resolved forward reference BUCKETS to (word*[NUM_BUCKETS]) BUCKETS
Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer increment (word*) init_squares::squares ← ++ (word*) init_squares::squares
Fixing pointer addition (word~) sqrt::$1 ← (word*) sqrt::found - (word*) SQUARES
Fixing pointer array-indexing *((word*) SQUARES + (byte) sqr::val)
Fixing pointer array-indexing *((word[CORDIC_ITERATIONS_16]) CORDIC_ATAN2_ANGLES_16 + (byte) atan2_16::i)
Fixing pointer array-indexing *((word[CORDIC_ITERATIONS_16]) CORDIC_ATAN2_ANGLES_16 + (byte) atan2_16::i)
Fixing pointer array-indexing *((word*[NUM_BUCKETS]) BUCKETS + (word~) main::$11)
Fixing pointer array-indexing *((word*) main::bucket + (byte) main::i1)
Fixing pointer array-indexing *((word*[NUM_BUCKETS]) BUCKETS + (word~) main::$16)
Fixing pointer array-indexing *((word*) main::bucket1 + (byte) main::i2)
Fixing pointer array-indexing *((word*[NUM_BUCKETS]) BUCKETS + (word) init_buckets::i2)
Fixing pointer array-indexing *((word*[NUM_BUCKETS]) BUCKETS + (word~) init_buckets::$9)
Fixing pointer array-indexing *((word*) init_buckets::bucket + *((byte[NUM_BUCKETS]) BUCKET_IDX + (byte) init_buckets::distance))
Warning! Adding boolean cast to non-boolean sub-expression (byte) atan2_16::shift
Identified constant variable (byte*) HEAP_TOP
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) malloc::@1
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) bsearch16u::@11
Culled Empty Block (label) bsearch16u::@12
Culled Empty Block (label) bsearch16u::@14
Culled Empty Block (label) bsearch16u::@16
Culled Empty Block (label) bsearch16u::@17
Culled Empty Block (label) bsearch16u::@4
Culled Empty Block (label) bsearch16u::@5
Culled Empty Block (label) init_squares::@2
Culled Empty Block (label) @8
Culled Empty Block (label) sqr::@1
Culled Empty Block (label) @9
Culled Empty Block (label) sqrt::@1
Culled Empty Block (label) atan2_16::@9
Culled Empty Block (label) atan2_16::@10
Culled Empty Block (label) atan2_16::@11
Culled Empty Block (label) atan2_16::@12
Culled Empty Block (label) atan2_16::@28
Culled Empty Block (label) atan2_16::@29
Culled Empty Block (label) atan2_16::@21
Culled Empty Block (label) atan2_16::@22
Culled Empty Block (label) atan2_16::@23
Culled Empty Block (label) atan2_16::@31
Culled Empty Block (label) atan2_16::@32
Culled Empty Block (label) atan2_16::@14
Culled Empty Block (label) @11
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@19
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@20
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@18
Culled Empty Block (label) init_buckets::@10
Culled Empty Block (label) @14
Culled Empty Block (label) init_angle_screen::@4
Culled Empty Block (label) @15
Culled Empty Block (label) init_dist_screen::@13
Culled Empty Block (label) init_dist_screen::@14
Culled Empty Block (label) init_dist_screen::@9
Culled Empty Block (label) init_dist_screen::@10
Culled Empty Block (label) init_dist_screen::@12

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  to:@4
@4: scope:[]  from @begin
  (byte*) HEAP_TOP#0 ← ((byte*)) (number) $a000
  (byte*) heap_head#0 ← (byte*) HEAP_TOP#0
  to:@7
malloc: scope:[malloc]  from init_buckets::@5 init_squares
  (word) malloc::size#2 ← phi( init_buckets::@5/(word) malloc::size#1 init_squares/(word) malloc::size#0 )
  (byte*) heap_head#13 ← phi( init_buckets::@5/(byte*) heap_head#25 init_squares/(byte*) heap_head#26 )
  (byte*~) malloc::$0 ← (byte*) heap_head#13 - (word) malloc::size#2
  (byte*) malloc::mem#0 ← (byte*~) malloc::$0
  (byte*) heap_head#1 ← (byte*) malloc::mem#0
  (void*) malloc::return#0 ← ((void*)) (byte*) malloc::mem#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  (byte*) heap_head#14 ← phi( malloc/(byte*) heap_head#1 )
  (void*) malloc::return#4 ← phi( malloc/(void*) malloc::return#0 )
  (void*) malloc::return#1 ← (void*) malloc::return#4
  (byte*) heap_head#2 ← (byte*) heap_head#14
  return 
  to:@return
bsearch16u: scope:[bsearch16u]  from sqrt
  (word) bsearch16u::key#4 ← phi( sqrt/(word) bsearch16u::key#0 )
  (word*) bsearch16u::items#7 ← phi( sqrt/(word*) bsearch16u::items#1 )
  (byte) bsearch16u::num#7 ← phi( sqrt/(byte) bsearch16u::num#2 )
  to:bsearch16u::@6
bsearch16u::@6: scope:[bsearch16u]  from bsearch16u bsearch16u::@10
  (word) bsearch16u::key#3 ← phi( bsearch16u/(word) bsearch16u::key#4 bsearch16u::@10/(word) bsearch16u::key#5 )
  (word*) bsearch16u::items#6 ← phi( bsearch16u/(word*) bsearch16u::items#7 bsearch16u::@10/(word*) bsearch16u::items#8 )
  (byte) bsearch16u::num#3 ← phi( bsearch16u/(byte) bsearch16u::num#7 bsearch16u::@10/(byte) bsearch16u::num#0 )
  (bool~) bsearch16u::$5 ← (byte) bsearch16u::num#3 > (number) 0
  if((bool~) bsearch16u::$5) goto bsearch16u::@7
  to:bsearch16u::@8
bsearch16u::@7: scope:[bsearch16u]  from bsearch16u::@6
  (word) bsearch16u::key#1 ← phi( bsearch16u::@6/(word) bsearch16u::key#3 )
  (word*) bsearch16u::items#2 ← phi( bsearch16u::@6/(word*) bsearch16u::items#6 )
  (byte) bsearch16u::num#4 ← phi( bsearch16u::@6/(byte) bsearch16u::num#3 )
  (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#4 >> (number) 1
  (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 * (const byte) SIZEOF_WORD
  (word*~) bsearch16u::$7 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16
  (word*) bsearch16u::pivot#0 ← (word*~) bsearch16u::$7
  (signed word~) bsearch16u::$8 ← ((signed word)) (word) bsearch16u::key#1
  (signed word~) bsearch16u::$9 ← ((signed word)) *((word*) bsearch16u::pivot#0)
  (signed word~) bsearch16u::$10 ← (signed word~) bsearch16u::$8 - (signed word~) bsearch16u::$9
  (signed word) bsearch16u::result#0 ← (signed word~) bsearch16u::$10
  (bool~) bsearch16u::$11 ← (signed word) bsearch16u::result#0 == (number) 0
  (bool~) bsearch16u::$12 ← ! (bool~) bsearch16u::$11
  if((bool~) bsearch16u::$12) goto bsearch16u::@9
  to:bsearch16u::@13
bsearch16u::@8: scope:[bsearch16u]  from bsearch16u::@6
  (word) bsearch16u::key#2 ← phi( bsearch16u::@6/(word) bsearch16u::key#3 )
  (word*) bsearch16u::items#3 ← phi( bsearch16u::@6/(word*) bsearch16u::items#6 )
  (bool~) bsearch16u::$0 ← *((word*) bsearch16u::items#3) <= (word) bsearch16u::key#2
  if((bool~) bsearch16u::$0) goto bsearch16u::@1
  to:bsearch16u::@2
bsearch16u::@9: scope:[bsearch16u]  from bsearch16u::@7
  (word) bsearch16u::key#7 ← phi( bsearch16u::@7/(word) bsearch16u::key#1 )
  (word*) bsearch16u::items#9 ← phi( bsearch16u::@7/(word*) bsearch16u::items#2 )
  (word*) bsearch16u::pivot#3 ← phi( bsearch16u::@7/(word*) bsearch16u::pivot#0 )
  (byte) bsearch16u::num#8 ← phi( bsearch16u::@7/(byte) bsearch16u::num#4 )
  (signed word) bsearch16u::result#1 ← phi( bsearch16u::@7/(signed word) bsearch16u::result#0 )
  (bool~) bsearch16u::$13 ← (signed word) bsearch16u::result#1 > (number) 0
  (bool~) bsearch16u::$14 ← ! (bool~) bsearch16u::$13
  if((bool~) bsearch16u::$14) goto bsearch16u::@10
  to:bsearch16u::@15
bsearch16u::@13: scope:[bsearch16u]  from bsearch16u::@7
  (word*) bsearch16u::pivot#1 ← phi( bsearch16u::@7/(word*) bsearch16u::pivot#0 )
  (word*) bsearch16u::return#0 ← (word*) bsearch16u::pivot#1
  to:bsearch16u::@return
bsearch16u::@return: scope:[bsearch16u]  from bsearch16u::@13 bsearch16u::@3
  (word*) bsearch16u::return#4 ← phi( bsearch16u::@13/(word*) bsearch16u::return#0 bsearch16u::@3/(word*) bsearch16u::return#2 )
  (word*) bsearch16u::return#1 ← (word*) bsearch16u::return#4
  return 
  to:@return
bsearch16u::@10: scope:[bsearch16u]  from bsearch16u::@15 bsearch16u::@9
  (word) bsearch16u::key#5 ← phi( bsearch16u::@15/(word) bsearch16u::key#6 bsearch16u::@9/(word) bsearch16u::key#7 )
  (word*) bsearch16u::items#8 ← phi( bsearch16u::@15/(word*) bsearch16u::items#0 bsearch16u::@9/(word*) bsearch16u::items#9 )
  (byte) bsearch16u::num#5 ← phi( bsearch16u::@15/(byte) bsearch16u::num#1 bsearch16u::@9/(byte) bsearch16u::num#8 )
  (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (number) 1
  to:bsearch16u::@6
bsearch16u::@15: scope:[bsearch16u]  from bsearch16u::@9
  (word) bsearch16u::key#6 ← phi( bsearch16u::@9/(word) bsearch16u::key#7 )
  (byte) bsearch16u::num#6 ← phi( bsearch16u::@9/(byte) bsearch16u::num#8 )
  (word*) bsearch16u::pivot#2 ← phi( bsearch16u::@9/(word*) bsearch16u::pivot#3 )
  (number~) bsearch16u::$17 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot#2 + (number~) bsearch16u::$17
  (word*) bsearch16u::items#0 ← (word*~) bsearch16u::$15
  (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#6
  to:bsearch16u::@10
bsearch16u::@1: scope:[bsearch16u]  from bsearch16u::@8
  (word*) bsearch16u::items#4 ← phi( bsearch16u::@8/(word*) bsearch16u::items#3 )
  (word*~) bsearch16u::$3 ← (word*) bsearch16u::items#4
  to:bsearch16u::@3
bsearch16u::@2: scope:[bsearch16u]  from bsearch16u::@8
  (word*) bsearch16u::items#5 ← phi( bsearch16u::@8/(word*) bsearch16u::items#3 )
  (number~) bsearch16u::$18 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) bsearch16u::$1 ← (word*) bsearch16u::items#5 - (number~) bsearch16u::$18
  (word*~) bsearch16u::$2 ← (word*~) bsearch16u::$1
  to:bsearch16u::@3
bsearch16u::@3: scope:[bsearch16u]  from bsearch16u::@1 bsearch16u::@2
  (word*~) bsearch16u::$4 ← phi( bsearch16u::@1/(word*~) bsearch16u::$3 bsearch16u::@2/(word*~) bsearch16u::$2 )
  (word*) bsearch16u::return#2 ← (word*~) bsearch16u::$4
  to:bsearch16u::@return
@7: scope:[]  from @4
  (byte*) heap_head#55 ← phi( @4/(byte*) heap_head#0 )
  (byte) NUM_SQUARES#0 ← (number) $ff
  (word*) SQUARES#0 ← (word*) 0
  to:@10
init_squares: scope:[init_squares]  from init_dist_screen
  (byte*) heap_head#26 ← phi( init_dist_screen/(byte*) heap_head#32 )
  (byte) NUM_SQUARES#6 ← phi( init_dist_screen/(byte) NUM_SQUARES#3 )
  (byte~) init_squares::$0 ← (byte) NUM_SQUARES#6 * (const byte) SIZEOF_WORD
  (word) malloc::size#0 ← (byte~) init_squares::$0
  call malloc 
  (void*) malloc::return#2 ← (void*) malloc::return#1
  to:init_squares::@3
init_squares::@3: scope:[init_squares]  from init_squares
  (byte) NUM_SQUARES#7 ← phi( init_squares/(byte) NUM_SQUARES#6 )
  (byte*) heap_head#15 ← phi( init_squares/(byte*) heap_head#2 )
  (void*) malloc::return#5 ← phi( init_squares/(void*) malloc::return#2 )
  (void*~) init_squares::$1 ← (void*) malloc::return#5
  (byte*) heap_head#3 ← (byte*) heap_head#15
  (word*) SQUARES#1 ← ((word*)) (void*~) init_squares::$1
  (word*) init_squares::squares#0 ← (word*) SQUARES#1
  (word) init_squares::sqr#0 ← (number) 0
  (number~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (number) 1
  (byte) init_squares::i#0 ← (byte) 0
  to:init_squares::@1
init_squares::@1: scope:[init_squares]  from init_squares::@1 init_squares::@3
  (word*) SQUARES#17 ← phi( init_squares::@1/(word*) SQUARES#17 init_squares::@3/(word*) SQUARES#1 )
  (byte*) heap_head#27 ← phi( init_squares::@1/(byte*) heap_head#27 init_squares::@3/(byte*) heap_head#3 )
  (byte) init_squares::i#2 ← phi( init_squares::@1/(byte) init_squares::i#1 init_squares::@3/(byte) init_squares::i#0 )
  (word*) init_squares::squares#2 ← phi( init_squares::@1/(word*) init_squares::squares#1 init_squares::@3/(word*) init_squares::squares#0 )
  (word) init_squares::sqr#2 ← phi( init_squares::@1/(word) init_squares::sqr#1 init_squares::@3/(word) init_squares::sqr#0 )
  *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2
  (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD
  (number~) init_squares::$3 ← (byte) init_squares::i#2 * (number) 2
  (number~) init_squares::$4 ← (number~) init_squares::$3 + (number) 1
  (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (number~) init_squares::$4
  (byte) init_squares::i#1 ← (byte) init_squares::i#2 + rangenext(0,init_squares::$2)
  (bool~) init_squares::$5 ← (byte) init_squares::i#1 != rangelast(0,init_squares::$2)
  if((bool~) init_squares::$5) goto init_squares::@1
  to:init_squares::@return
init_squares::@return: scope:[init_squares]  from init_squares::@1
  (word*) SQUARES#8 ← phi( init_squares::@1/(word*) SQUARES#17 )
  (byte*) heap_head#16 ← phi( init_squares::@1/(byte*) heap_head#27 )
  (byte*) heap_head#4 ← (byte*) heap_head#16
  (word*) SQUARES#2 ← (word*) SQUARES#8
  return 
  to:@return
sqr: scope:[sqr]  from init_dist_screen::@4 init_dist_screen::@8
  (word*) SQUARES#9 ← phi( init_dist_screen::@4/(word*) SQUARES#18 init_dist_screen::@8/(word*) SQUARES#19 )
  (byte) sqr::val#2 ← phi( init_dist_screen::@4/(byte) sqr::val#0 init_dist_screen::@8/(byte) sqr::val#1 )
  (byte~) sqr::$0 ← (byte) sqr::val#2 * (const byte) SIZEOF_WORD
  (word) sqr::return#0 ← *((word*) SQUARES#9 + (byte~) sqr::$0)
  to:sqr::@return
sqr::@return: scope:[sqr]  from sqr
  (word) sqr::return#4 ← phi( sqr/(word) sqr::return#0 )
  (word) sqr::return#1 ← (word) sqr::return#4
  return 
  to:@return
sqrt: scope:[sqrt]  from init_dist_screen::@17
  (byte) NUM_SQUARES#8 ← phi( init_dist_screen::@17/(byte) NUM_SQUARES#13 )
  (word*) SQUARES#10 ← phi( init_dist_screen::@17/(word*) SQUARES#20 )
  (word) sqrt::val#1 ← phi( init_dist_screen::@17/(word) sqrt::val#0 )
  (word) bsearch16u::key#0 ← (word) sqrt::val#1
  (word*) bsearch16u::items#1 ← (word*) SQUARES#10
  (byte) bsearch16u::num#2 ← (byte) NUM_SQUARES#8
  call bsearch16u 
  (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
  to:sqrt::@2
sqrt::@2: scope:[sqrt]  from sqrt
  (word*) SQUARES#11 ← phi( sqrt/(word*) SQUARES#10 )
  (word*) bsearch16u::return#5 ← phi( sqrt/(word*) bsearch16u::return#3 )
  (word*~) sqrt::$0 ← (word*) bsearch16u::return#5
  (word*) sqrt::found#0 ← (word*~) sqrt::$0
  (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*) SQUARES#11
  (word~) sqrt::$1 ← (word~) sqrt::$3 / (const byte) SIZEOF_WORD
  (byte~) sqrt::$2 ← ((byte)) (word~) sqrt::$1
  (byte) sqrt::sq#0 ← (byte~) sqrt::$2
  (byte) sqrt::return#0 ← (byte) sqrt::sq#0
  to:sqrt::@return
sqrt::@return: scope:[sqrt]  from sqrt::@2
  (byte) sqrt::return#3 ← phi( sqrt::@2/(byte) sqrt::return#0 )
  (byte) sqrt::return#1 ← (byte) sqrt::return#3
  return 
  to:@return
@10: scope:[]  from @7
  (word*) SQUARES#40 ← phi( @7/(word*) SQUARES#0 )
  (byte*) heap_head#48 ← phi( @7/(byte*) heap_head#55 )
  (byte) NUM_SQUARES#29 ← phi( @7/(byte) NUM_SQUARES#0 )
  (byte) CORDIC_ITERATIONS_16#0 ← (number) $f
  (word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 ← kickasm {{ .for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2
 }}
  to:@12
atan2_16: scope:[atan2_16]  from init_angle_screen::@2
  (signed word) atan2_16::x#9 ← phi( init_angle_screen::@2/(signed word) atan2_16::x#0 )
  (signed word) atan2_16::y#1 ← phi( init_angle_screen::@2/(signed word) atan2_16::y#0 )
  (bool~) atan2_16::$0 ← (signed word) atan2_16::y#1 >= (number) 0
  if((bool~) atan2_16::$0) goto atan2_16::@1
  to:atan2_16::@2
atan2_16::@1: scope:[atan2_16]  from atan2_16
  (signed word) atan2_16::x#5 ← phi( atan2_16/(signed word) atan2_16::x#9 )
  (signed word) atan2_16::y#2 ← phi( atan2_16/(signed word) atan2_16::y#1 )
  (signed word~) atan2_16::$3 ← (signed word) atan2_16::y#2
  to:atan2_16::@3
atan2_16::@2: scope:[atan2_16]  from atan2_16
  (signed word) atan2_16::x#6 ← phi( atan2_16/(signed word) atan2_16::x#9 )
  (signed word) atan2_16::y#3 ← phi( atan2_16/(signed word) atan2_16::y#1 )
  (signed word~) atan2_16::$1 ← - (signed word) atan2_16::y#3
  (signed word~) atan2_16::$2 ← (signed word~) atan2_16::$1
  to:atan2_16::@3
atan2_16::@3: scope:[atan2_16]  from atan2_16::@1 atan2_16::@2
  (signed word) atan2_16::y#15 ← phi( atan2_16::@1/(signed word) atan2_16::y#2 atan2_16::@2/(signed word) atan2_16::y#3 )
  (signed word) atan2_16::x#1 ← phi( atan2_16::@1/(signed word) atan2_16::x#5 atan2_16::@2/(signed word) atan2_16::x#6 )
  (signed word~) atan2_16::$4 ← phi( atan2_16::@1/(signed word~) atan2_16::$3 atan2_16::@2/(signed word~) atan2_16::$2 )
  (signed word) atan2_16::yi#0 ← (signed word~) atan2_16::$4
  (bool~) atan2_16::$5 ← (signed word) atan2_16::x#1 >= (number) 0
  if((bool~) atan2_16::$5) goto atan2_16::@4
  to:atan2_16::@5
atan2_16::@4: scope:[atan2_16]  from atan2_16::@3
  (signed word) atan2_16::y#12 ← phi( atan2_16::@3/(signed word) atan2_16::y#15 )
  (signed word) atan2_16::yi#12 ← phi( atan2_16::@3/(signed word) atan2_16::yi#0 )
  (signed word) atan2_16::x#2 ← phi( atan2_16::@3/(signed word) atan2_16::x#1 )
  (signed word~) atan2_16::$8 ← (signed word) atan2_16::x#2
  to:atan2_16::@6
atan2_16::@5: scope:[atan2_16]  from atan2_16::@3
  (signed word) atan2_16::y#13 ← phi( atan2_16::@3/(signed word) atan2_16::y#15 )
  (signed word) atan2_16::yi#13 ← phi( atan2_16::@3/(signed word) atan2_16::yi#0 )
  (signed word) atan2_16::x#3 ← phi( atan2_16::@3/(signed word) atan2_16::x#1 )
  (signed word~) atan2_16::$6 ← - (signed word) atan2_16::x#3
  (signed word~) atan2_16::$7 ← (signed word~) atan2_16::$6
  to:atan2_16::@6
atan2_16::@6: scope:[atan2_16]  from atan2_16::@4 atan2_16::@5
  (signed word) atan2_16::y#9 ← phi( atan2_16::@4/(signed word) atan2_16::y#12 atan2_16::@5/(signed word) atan2_16::y#13 )
  (signed word) atan2_16::x#10 ← phi( atan2_16::@4/(signed word) atan2_16::x#2 atan2_16::@5/(signed word) atan2_16::x#3 )
  (signed word) atan2_16::yi#9 ← phi( atan2_16::@4/(signed word) atan2_16::yi#12 atan2_16::@5/(signed word) atan2_16::yi#13 )
  (signed word~) atan2_16::$9 ← phi( atan2_16::@4/(signed word~) atan2_16::$8 atan2_16::@5/(signed word~) atan2_16::$7 )
  (signed word) atan2_16::xi#0 ← (signed word~) atan2_16::$9
  (word) atan2_16::angle#0 ← (number) 0
  (number~) atan2_16::$16 ← (byte) CORDIC_ITERATIONS_16#0 - (number) 1
  (byte) atan2_16::i#0 ← (byte) 0
  to:atan2_16::@15
atan2_16::@15: scope:[atan2_16]  from atan2_16::@27 atan2_16::@6
  (signed word) atan2_16::y#7 ← phi( atan2_16::@27/(signed word) atan2_16::y#8 atan2_16::@6/(signed word) atan2_16::y#9 )
  (signed word) atan2_16::x#7 ← phi( atan2_16::@27/(signed word) atan2_16::x#8 atan2_16::@6/(signed word) atan2_16::x#10 )
  (word) atan2_16::angle#12 ← phi( atan2_16::@27/(word) atan2_16::angle#13 atan2_16::@6/(word) atan2_16::angle#0 )
  (byte) atan2_16::i#6 ← phi( atan2_16::@27/(byte) atan2_16::i#1 atan2_16::@6/(byte) atan2_16::i#0 )
  (signed word) atan2_16::xi#6 ← phi( atan2_16::@27/(signed word) atan2_16::xi#8 atan2_16::@6/(signed word) atan2_16::xi#0 )
  (signed word) atan2_16::yi#3 ← phi( atan2_16::@27/(signed word) atan2_16::yi#8 atan2_16::@6/(signed word) atan2_16::yi#9 )
  (bool~) atan2_16::$17 ← (signed word) atan2_16::yi#3 == (number) 0
  (bool~) atan2_16::$18 ← ! (bool~) atan2_16::$17
  if((bool~) atan2_16::$18) goto atan2_16::@16
  to:atan2_16::@17
atan2_16::@16: scope:[atan2_16]  from atan2_16::@15
  (signed word) atan2_16::y#19 ← phi( atan2_16::@15/(signed word) atan2_16::y#7 )
  (signed word) atan2_16::x#17 ← phi( atan2_16::@15/(signed word) atan2_16::x#7 )
  (word) atan2_16::angle#19 ← phi( atan2_16::@15/(word) atan2_16::angle#12 )
  (byte) atan2_16::i#2 ← phi( atan2_16::@15/(byte) atan2_16::i#6 )
  (signed word) atan2_16::yi#4 ← phi( atan2_16::@15/(signed word) atan2_16::yi#3 )
  (signed word) atan2_16::xi#3 ← phi( atan2_16::@15/(signed word) atan2_16::xi#6 )
  (signed word) atan2_16::xd#0 ← (signed word) atan2_16::xi#3
  (signed word) atan2_16::yd#0 ← (signed word) atan2_16::yi#4
  (byte) atan2_16::shift#0 ← (byte) atan2_16::i#2
  to:atan2_16::@18
atan2_16::@17: scope:[atan2_16]  from atan2_16::@15 atan2_16::@27
  (signed word) atan2_16::y#5 ← phi( atan2_16::@15/(signed word) atan2_16::y#7 atan2_16::@27/(signed word) atan2_16::y#8 )
  (signed word) atan2_16::x#4 ← phi( atan2_16::@15/(signed word) atan2_16::x#7 atan2_16::@27/(signed word) atan2_16::x#8 )
  (word) atan2_16::angle#6 ← phi( atan2_16::@15/(word) atan2_16::angle#12 atan2_16::@27/(word) atan2_16::angle#13 )
  (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 / (number) 2
  (bool~) atan2_16::$10 ← (signed word) atan2_16::x#4 < (number) 0
  (bool~) atan2_16::$11 ← ! (bool~) atan2_16::$10
  if((bool~) atan2_16::$11) goto atan2_16::@7
  to:atan2_16::@33
atan2_16::@18: scope:[atan2_16]  from atan2_16::@16 atan2_16::@19
  (signed word) atan2_16::y#18 ← phi( atan2_16::@16/(signed word) atan2_16::y#19 atan2_16::@19/(signed word) atan2_16::y#20 )
  (signed word) atan2_16::x#16 ← phi( atan2_16::@16/(signed word) atan2_16::x#17 atan2_16::@19/(signed word) atan2_16::x#18 )
  (word) atan2_16::angle#18 ← phi( atan2_16::@16/(word) atan2_16::angle#19 atan2_16::@19/(word) atan2_16::angle#20 )
  (byte) atan2_16::i#10 ← phi( atan2_16::@16/(byte) atan2_16::i#2 atan2_16::@19/(byte) atan2_16::i#11 )
  (signed word) atan2_16::xi#11 ← phi( atan2_16::@16/(signed word) atan2_16::xi#3 atan2_16::@19/(signed word) atan2_16::xi#12 )
  (signed word) atan2_16::yi#14 ← phi( atan2_16::@16/(signed word) atan2_16::yi#4 atan2_16::@19/(signed word) atan2_16::yi#15 )
  (signed word) atan2_16::yd#7 ← phi( atan2_16::@16/(signed word) atan2_16::yd#0 atan2_16::@19/(signed word) atan2_16::yd#1 )
  (signed word) atan2_16::xd#7 ← phi( atan2_16::@16/(signed word) atan2_16::xd#0 atan2_16::@19/(signed word) atan2_16::xd#1 )
  (byte) atan2_16::shift#2 ← phi( atan2_16::@16/(byte) atan2_16::shift#0 atan2_16::@19/(byte) atan2_16::shift#1 )
  (bool~) atan2_16::$19 ← (byte) atan2_16::shift#2 >= (number) 2
  if((bool~) atan2_16::$19) goto atan2_16::@19
  to:atan2_16::@20
atan2_16::@19: scope:[atan2_16]  from atan2_16::@18
  (signed word) atan2_16::y#20 ← phi( atan2_16::@18/(signed word) atan2_16::y#18 )
  (signed word) atan2_16::x#18 ← phi( atan2_16::@18/(signed word) atan2_16::x#16 )
  (word) atan2_16::angle#20 ← phi( atan2_16::@18/(word) atan2_16::angle#18 )
  (byte) atan2_16::i#11 ← phi( atan2_16::@18/(byte) atan2_16::i#10 )
  (signed word) atan2_16::xi#12 ← phi( atan2_16::@18/(signed word) atan2_16::xi#11 )
  (signed word) atan2_16::yi#15 ← phi( atan2_16::@18/(signed word) atan2_16::yi#14 )
  (byte) atan2_16::shift#3 ← phi( atan2_16::@18/(byte) atan2_16::shift#2 )
  (signed word) atan2_16::yd#3 ← phi( atan2_16::@18/(signed word) atan2_16::yd#7 )
  (signed word) atan2_16::xd#3 ← phi( atan2_16::@18/(signed word) atan2_16::xd#7 )
  (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (number) 2
  (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (number) 2
  (byte) atan2_16::shift#1 ← (byte) atan2_16::shift#3 - (number) 2
  to:atan2_16::@18
atan2_16::@20: scope:[atan2_16]  from atan2_16::@18
  (signed word) atan2_16::y#16 ← phi( atan2_16::@18/(signed word) atan2_16::y#18 )
  (signed word) atan2_16::x#14 ← phi( atan2_16::@18/(signed word) atan2_16::x#16 )
  (word) atan2_16::angle#16 ← phi( atan2_16::@18/(word) atan2_16::angle#18 )
  (byte) atan2_16::i#8 ← phi( atan2_16::@18/(byte) atan2_16::i#10 )
  (signed word) atan2_16::xi#9 ← phi( atan2_16::@18/(signed word) atan2_16::xi#11 )
  (signed word) atan2_16::yd#8 ← phi( atan2_16::@18/(signed word) atan2_16::yd#7 )
  (signed word) atan2_16::xd#8 ← phi( atan2_16::@18/(signed word) atan2_16::xd#7 )
  (signed word) atan2_16::yi#10 ← phi( atan2_16::@18/(signed word) atan2_16::yi#14 )
  (byte) atan2_16::shift#4 ← phi( atan2_16::@18/(byte) atan2_16::shift#2 )
  (bool~) atan2_16::$25 ← (number) 0 != (byte) atan2_16::shift#4
  (bool~) atan2_16::$20 ← ! (bool~) atan2_16::$25
  if((bool~) atan2_16::$20) goto atan2_16::@25
  to:atan2_16::@24
atan2_16::@25: scope:[atan2_16]  from atan2_16::@20 atan2_16::@24
  (signed word) atan2_16::y#14 ← phi( atan2_16::@20/(signed word) atan2_16::y#16 atan2_16::@24/(signed word) atan2_16::y#17 )
  (signed word) atan2_16::x#13 ← phi( atan2_16::@20/(signed word) atan2_16::x#14 atan2_16::@24/(signed word) atan2_16::x#15 )
  (word) atan2_16::angle#14 ← phi( atan2_16::@20/(word) atan2_16::angle#16 atan2_16::@24/(word) atan2_16::angle#17 )
  (byte) atan2_16::i#7 ← phi( atan2_16::@20/(byte) atan2_16::i#8 atan2_16::@24/(byte) atan2_16::i#9 )
  (signed word) atan2_16::xd#9 ← phi( atan2_16::@20/(signed word) atan2_16::xd#8 atan2_16::@24/(signed word) atan2_16::xd#2 )
  (signed word) atan2_16::yd#9 ← phi( atan2_16::@20/(signed word) atan2_16::yd#8 atan2_16::@24/(signed word) atan2_16::yd#2 )
  (signed word) atan2_16::xi#7 ← phi( atan2_16::@20/(signed word) atan2_16::xi#9 atan2_16::@24/(signed word) atan2_16::xi#10 )
  (signed word) atan2_16::yi#5 ← phi( atan2_16::@20/(signed word) atan2_16::yi#10 atan2_16::@24/(signed word) atan2_16::yi#11 )
  (bool~) atan2_16::$21 ← (signed word) atan2_16::yi#5 >= (number) 0
  if((bool~) atan2_16::$21) goto atan2_16::@26
  to:atan2_16::@30
atan2_16::@24: scope:[atan2_16]  from atan2_16::@20
  (signed word) atan2_16::y#17 ← phi( atan2_16::@20/(signed word) atan2_16::y#16 )
  (signed word) atan2_16::x#15 ← phi( atan2_16::@20/(signed word) atan2_16::x#14 )
  (word) atan2_16::angle#17 ← phi( atan2_16::@20/(word) atan2_16::angle#16 )
  (byte) atan2_16::i#9 ← phi( atan2_16::@20/(byte) atan2_16::i#8 )
  (signed word) atan2_16::xi#10 ← phi( atan2_16::@20/(signed word) atan2_16::xi#9 )
  (signed word) atan2_16::yi#11 ← phi( atan2_16::@20/(signed word) atan2_16::yi#10 )
  (signed word) atan2_16::yd#4 ← phi( atan2_16::@20/(signed word) atan2_16::yd#8 )
  (signed word) atan2_16::xd#4 ← phi( atan2_16::@20/(signed word) atan2_16::xd#8 )
  (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#4 >> (number) 1
  (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#4 >> (number) 1
  to:atan2_16::@25
atan2_16::@26: scope:[atan2_16]  from atan2_16::@25
  (signed word) atan2_16::y#10 ← phi( atan2_16::@25/(signed word) atan2_16::y#14 )
  (signed word) atan2_16::x#11 ← phi( atan2_16::@25/(signed word) atan2_16::x#13 )
  (word) atan2_16::angle#7 ← phi( atan2_16::@25/(word) atan2_16::angle#14 )
  (byte) atan2_16::i#3 ← phi( atan2_16::@25/(byte) atan2_16::i#7 )
  (signed word) atan2_16::xd#5 ← phi( atan2_16::@25/(signed word) atan2_16::xd#9 )
  (signed word) atan2_16::yi#6 ← phi( atan2_16::@25/(signed word) atan2_16::yi#5 )
  (signed word) atan2_16::yd#5 ← phi( atan2_16::@25/(signed word) atan2_16::yd#9 )
  (signed word) atan2_16::xi#4 ← phi( atan2_16::@25/(signed word) atan2_16::xi#7 )
  (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#4 + (signed word) atan2_16::yd#5
  (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#6 - (signed word) atan2_16::xd#5
  (byte~) atan2_16::$23 ← (byte) atan2_16::i#3 * (const byte) SIZEOF_WORD
  (word) atan2_16::angle#2 ← (word) atan2_16::angle#7 + *((word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23)
  to:atan2_16::@27
atan2_16::@30: scope:[atan2_16]  from atan2_16::@25
  (signed word) atan2_16::y#11 ← phi( atan2_16::@25/(signed word) atan2_16::y#14 )
  (signed word) atan2_16::x#12 ← phi( atan2_16::@25/(signed word) atan2_16::x#13 )
  (word) atan2_16::angle#8 ← phi( atan2_16::@25/(word) atan2_16::angle#14 )
  (byte) atan2_16::i#4 ← phi( atan2_16::@25/(byte) atan2_16::i#7 )
  (signed word) atan2_16::xd#6 ← phi( atan2_16::@25/(signed word) atan2_16::xd#9 )
  (signed word) atan2_16::yi#7 ← phi( atan2_16::@25/(signed word) atan2_16::yi#5 )
  (signed word) atan2_16::yd#6 ← phi( atan2_16::@25/(signed word) atan2_16::yd#9 )
  (signed word) atan2_16::xi#5 ← phi( atan2_16::@25/(signed word) atan2_16::xi#7 )
  (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#5 - (signed word) atan2_16::yd#6
  (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#7 + (signed word) atan2_16::xd#6
  (byte~) atan2_16::$24 ← (byte) atan2_16::i#4 * (const byte) SIZEOF_WORD
  (word) atan2_16::angle#3 ← (word) atan2_16::angle#8 - *((word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24)
  to:atan2_16::@27
atan2_16::@27: scope:[atan2_16]  from atan2_16::@26 atan2_16::@30
  (signed word) atan2_16::y#8 ← phi( atan2_16::@26/(signed word) atan2_16::y#10 atan2_16::@30/(signed word) atan2_16::y#11 )
  (signed word) atan2_16::xi#8 ← phi( atan2_16::@26/(signed word) atan2_16::xi#1 atan2_16::@30/(signed word) atan2_16::xi#2 )
  (signed word) atan2_16::x#8 ← phi( atan2_16::@26/(signed word) atan2_16::x#11 atan2_16::@30/(signed word) atan2_16::x#12 )
  (word) atan2_16::angle#13 ← phi( atan2_16::@26/(word) atan2_16::angle#2 atan2_16::@30/(word) atan2_16::angle#3 )
  (signed word) atan2_16::yi#8 ← phi( atan2_16::@26/(signed word) atan2_16::yi#1 atan2_16::@30/(signed word) atan2_16::yi#2 )
  (byte) atan2_16::i#5 ← phi( atan2_16::@26/(byte) atan2_16::i#3 atan2_16::@30/(byte) atan2_16::i#4 )
  (byte) atan2_16::i#1 ← (byte) atan2_16::i#5 + rangenext(0,atan2_16::$16)
  (bool~) atan2_16::$22 ← (byte) atan2_16::i#1 != rangelast(0,atan2_16::$16)
  if((bool~) atan2_16::$22) goto atan2_16::@15
  to:atan2_16::@17
atan2_16::@7: scope:[atan2_16]  from atan2_16::@17 atan2_16::@33
  (word) atan2_16::angle#15 ← phi( atan2_16::@17/(word) atan2_16::angle#1 atan2_16::@33/(word) atan2_16::angle#4 )
  (signed word) atan2_16::y#4 ← phi( atan2_16::@17/(signed word) atan2_16::y#5 atan2_16::@33/(signed word) atan2_16::y#6 )
  (bool~) atan2_16::$13 ← (signed word) atan2_16::y#4 < (number) 0
  (bool~) atan2_16::$14 ← ! (bool~) atan2_16::$13
  if((bool~) atan2_16::$14) goto atan2_16::@8
  to:atan2_16::@13
atan2_16::@33: scope:[atan2_16]  from atan2_16::@17
  (signed word) atan2_16::y#6 ← phi( atan2_16::@17/(signed word) atan2_16::y#5 )
  (word) atan2_16::angle#9 ← phi( atan2_16::@17/(word) atan2_16::angle#1 )
  (number~) atan2_16::$12 ← (number) $8000 - (word) atan2_16::angle#9
  (word) atan2_16::angle#4 ← (number~) atan2_16::$12
  to:atan2_16::@7
atan2_16::@8: scope:[atan2_16]  from atan2_16::@13 atan2_16::@7
  (word) atan2_16::angle#10 ← phi( atan2_16::@13/(word) atan2_16::angle#5 atan2_16::@7/(word) atan2_16::angle#15 )
  (word) atan2_16::return#0 ← (word) atan2_16::angle#10
  to:atan2_16::@return
atan2_16::@13: scope:[atan2_16]  from atan2_16::@7
  (word) atan2_16::angle#11 ← phi( atan2_16::@7/(word) atan2_16::angle#15 )
  (word~) atan2_16::$15 ← - (word) atan2_16::angle#11
  (word) atan2_16::angle#5 ← (word~) atan2_16::$15
  to:atan2_16::@8
atan2_16::@return: scope:[atan2_16]  from atan2_16::@8
  (word) atan2_16::return#3 ← phi( atan2_16::@8/(word) atan2_16::return#0 )
  (word) atan2_16::return#1 ← (word) atan2_16::return#3
  return 
  to:@return
@12: scope:[]  from @10
  (word*) SQUARES#37 ← phi( @10/(word*) SQUARES#40 )
  (byte*) heap_head#44 ← phi( @10/(byte*) heap_head#48 )
  (byte) NUM_SQUARES#26 ← phi( @10/(byte) NUM_SQUARES#29 )
  (byte[$3e8]) SCREEN_DIST#0 ← { fill( $3e8, 0) }
  (byte[$3e8]) SCREEN_ANGLE#0 ← { fill( $3e8, 0) }
  (byte[$3e8]) SCREEN_MIX#0 ← { fill( $3e8, 0) }
  (byte*) SCREEN_FILL#0 ← ((byte*)) (number) $400
  to:@13
main: scope:[main]  from @16
  (word*) SQUARES#21 ← phi( @16/(word*) SQUARES#25 )
  (byte*) heap_head#28 ← phi( @16/(byte*) heap_head#34 )
  (byte) NUM_SQUARES#14 ← phi( @16/(byte) NUM_SQUARES#17 )
  (byte*) init_dist_screen::screen#0 ← (byte[$3e8]) SCREEN_DIST#0
  call init_dist_screen 
  to:main::@21
main::@21: scope:[main]  from main
  (word*) SQUARES#12 ← phi( main/(word*) SQUARES#6 )
  (byte*) heap_head#17 ← phi( main/(byte*) heap_head#11 )
  (byte) NUM_SQUARES#9 ← phi( main/(byte) NUM_SQUARES#4 )
  (byte) NUM_SQUARES#1 ← (byte) NUM_SQUARES#9
  (byte*) heap_head#5 ← (byte*) heap_head#17
  (word*) SQUARES#3 ← (word*) SQUARES#12
  (byte*) init_angle_screen::screen#0 ← (byte[$3e8]) SCREEN_ANGLE#0
  call init_angle_screen 
  to:main::@22
main::@22: scope:[main]  from main::@21
  (word*) SQUARES#46 ← phi( main::@21/(word*) SQUARES#3 )
  (byte) NUM_SQUARES#35 ← phi( main::@21/(byte) NUM_SQUARES#1 )
  (byte*) heap_head#41 ← phi( main::@21/(byte*) heap_head#5 )
  (byte*) main::dist#0 ← (byte[$3e8]) SCREEN_DIST#0
  (byte*) main::angle#0 ← (byte[$3e8]) SCREEN_ANGLE#0
  (byte*) main::mix#0 ← (byte[$3e8]) SCREEN_MIX#0
  (word) main::i#0 ← (word) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@22
  (word*) SQUARES#41 ← phi( main::@1/(word*) SQUARES#41 main::@22/(word*) SQUARES#46 )
  (byte) NUM_SQUARES#30 ← phi( main::@1/(byte) NUM_SQUARES#30 main::@22/(byte) NUM_SQUARES#35 )
  (byte*) heap_head#35 ← phi( main::@1/(byte*) heap_head#35 main::@22/(byte*) heap_head#41 )
  (word) main::i#2 ← phi( main::@1/(word) main::i#1 main::@22/(word) main::i#0 )
  (byte*) main::mix#2 ← phi( main::@1/(byte*) main::mix#1 main::@22/(byte*) main::mix#0 )
  (byte*) main::angle#2 ← phi( main::@1/(byte*) main::angle#1 main::@22/(byte*) main::angle#0 )
  (byte*) main::dist#2 ← phi( main::@1/(byte*) main::dist#1 main::@22/(byte*) main::dist#0 )
  (number~) main::$3 ← *((byte*) main::dist#2) * (number) 4
  (number~) main::$4 ← *((byte*) main::angle#2) / (number) 2
  (number~) main::$5 ← (number~) main::$3 + (number~) main::$4
  *((byte*) main::mix#2) ← (number~) main::$5
  (byte*) main::mix#1 ← ++ (byte*) main::mix#2
  (byte*) main::dist#1 ← ++ (byte*) main::dist#2
  (byte*) main::angle#1 ← ++ (byte*) main::angle#2
  (word) main::i#1 ← (word) main::i#2 + rangenext(0,$3e7)
  (bool~) main::$6 ← (word) main::i#1 != rangelast(0,$3e7)
  if((bool~) main::$6) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (word*) SQUARES#34 ← phi( main::@1/(word*) SQUARES#41 )
  (byte) NUM_SQUARES#23 ← phi( main::@1/(byte) NUM_SQUARES#30 )
  (byte*) heap_head#29 ← phi( main::@1/(byte*) heap_head#35 )
  (byte*) init_buckets::screen#0 ← (byte[$3e8]) SCREEN_MIX#0
  call init_buckets 
  to:main::@23
main::@23: scope:[main]  from main::@2
  (word*) SQUARES#27 ← phi( main::@2/(word*) SQUARES#34 )
  (byte) NUM_SQUARES#19 ← phi( main::@2/(byte) NUM_SQUARES#23 )
  (byte*) heap_head#18 ← phi( main::@2/(byte*) heap_head#9 )
  (byte*) heap_head#6 ← (byte*) heap_head#18
  (byte) main::bucket_idx#0 ← (number) 0
  to:main::@3
main::@3: scope:[main]  from main::@15 main::@23
  (byte) main::bucket_idx#9 ← phi( main::@15/(byte) main::bucket_idx#10 main::@23/(byte) main::bucket_idx#0 )
  (word*) SQUARES#22 ← phi( main::@15/(word*) SQUARES#26 main::@23/(word*) SQUARES#27 )
  (byte*) heap_head#30 ← phi( main::@15/(byte*) heap_head#36 main::@23/(byte*) heap_head#6 )
  (byte) NUM_SQUARES#15 ← phi( main::@15/(byte) NUM_SQUARES#18 main::@23/(byte) NUM_SQUARES#19 )
  if(true) goto main::@6
  to:main::@return
main::@6: scope:[main]  from main::@3 main::@6
  (word*) SQUARES#49 ← phi( main::@3/(word*) SQUARES#22 main::@6/(word*) SQUARES#49 )
  (byte*) heap_head#61 ← phi( main::@3/(byte*) heap_head#30 main::@6/(byte*) heap_head#61 )
  (byte) NUM_SQUARES#39 ← phi( main::@3/(byte) NUM_SQUARES#15 main::@6/(byte) NUM_SQUARES#39 )
  (byte) main::bucket_idx#8 ← phi( main::@3/(byte) main::bucket_idx#9 main::@6/(byte) main::bucket_idx#8 )
  (bool~) main::$7 ← *((byte*) RASTER#0) != (number) $fe
  if((bool~) main::$7) goto main::@6
  to:main::@8
main::@8: scope:[main]  from main::@6 main::@8
  (word*) SQUARES#47 ← phi( main::@6/(word*) SQUARES#49 main::@8/(word*) SQUARES#47 )
  (byte*) heap_head#56 ← phi( main::@6/(byte*) heap_head#61 main::@8/(byte*) heap_head#56 )
  (byte) NUM_SQUARES#36 ← phi( main::@6/(byte) NUM_SQUARES#39 main::@8/(byte) NUM_SQUARES#36 )
  (byte) main::bucket_idx#6 ← phi( main::@6/(byte) main::bucket_idx#8 main::@8/(byte) main::bucket_idx#6 )
  (bool~) main::$8 ← *((byte*) RASTER#0) != (number) $ff
  if((bool~) main::$8) goto main::@8
  to:main::@9
main::@9: scope:[main]  from main::@8
  (word*) SQUARES#43 ← phi( main::@8/(word*) SQUARES#47 )
  (byte*) heap_head#50 ← phi( main::@8/(byte*) heap_head#56 )
  (byte) NUM_SQUARES#32 ← phi( main::@8/(byte) NUM_SQUARES#36 )
  (byte) main::bucket_idx#2 ← phi( main::@8/(byte) main::bucket_idx#6 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (byte) main::bucket_size#0 ← *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#2)
  (bool~) main::$9 ← (byte) main::bucket_size#0 > (number) 0
  (bool~) main::$10 ← ! (bool~) main::$9
  if((bool~) main::$10) goto main::@11
  to:main::@10
main::@11: scope:[main]  from main::@12 main::@9
  (word*) SQUARES#35 ← phi( main::@12/(word*) SQUARES#42 main::@9/(word*) SQUARES#43 )
  (byte*) heap_head#42 ← phi( main::@12/(byte*) heap_head#49 main::@9/(byte*) heap_head#50 )
  (byte) NUM_SQUARES#24 ← phi( main::@12/(byte) NUM_SQUARES#31 main::@9/(byte) NUM_SQUARES#32 )
  (byte) main::bucket_idx#3 ← phi( main::@12/(byte) main::bucket_idx#7 main::@9/(byte) main::bucket_idx#2 )
  (byte) main::bucket_idx#1 ← ++ (byte) main::bucket_idx#3
  (byte) main::bucket_size1#0 ← *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#1)
  (bool~) main::$14 ← (byte) main::bucket_size1#0 > (number) 0
  (bool~) main::$15 ← ! (bool~) main::$14
  if((bool~) main::$15) goto main::@15
  to:main::@14
main::@10: scope:[main]  from main::@9
  (word*) SQUARES#48 ← phi( main::@9/(word*) SQUARES#43 )
  (byte*) heap_head#57 ← phi( main::@9/(byte*) heap_head#50 )
  (byte) NUM_SQUARES#37 ← phi( main::@9/(byte) NUM_SQUARES#32 )
  (byte) main::bucket_size#2 ← phi( main::@9/(byte) main::bucket_size#0 )
  (byte) main::bucket_idx#4 ← phi( main::@9/(byte) main::bucket_idx#2 )
  (word~) main::$11 ← ((word)) (byte) main::bucket_idx#4
  (word~) main::$19 ← (word~) main::$11 * (const byte) SIZEOF_POINTER
  (word*) main::bucket#0 ← *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19)
  (byte) main::i1#0 ← (number) 0
  to:main::@12
main::@12: scope:[main]  from main::@10 main::@12
  (word*) SQUARES#42 ← phi( main::@10/(word*) SQUARES#48 main::@12/(word*) SQUARES#42 )
  (byte*) heap_head#49 ← phi( main::@10/(byte*) heap_head#57 main::@12/(byte*) heap_head#49 )
  (byte) NUM_SQUARES#31 ← phi( main::@10/(byte) NUM_SQUARES#37 main::@12/(byte) NUM_SQUARES#31 )
  (byte) main::bucket_idx#7 ← phi( main::@10/(byte) main::bucket_idx#4 main::@12/(byte) main::bucket_idx#7 )
  (byte) main::bucket_size#1 ← phi( main::@10/(byte) main::bucket_size#2 main::@12/(byte) main::bucket_size#1 )
  (word*) main::bucket#1 ← phi( main::@10/(word*) main::bucket#0 main::@12/(word*) main::bucket#1 )
  (byte) main::i1#2 ← phi( main::@10/(byte) main::i1#0 main::@12/(byte) main::i1#1 )
  (byte~) main::$20 ← (byte) main::i1#2 * (const byte) SIZEOF_WORD
  (byte*~) main::$12 ← (byte*) SCREEN_FILL#0 + *((word*) main::bucket#1 + (byte~) main::$20)
  (byte*) main::sc#0 ← (byte*~) main::$12
  *((byte*) main::sc#0) ← (byte) ' '
  (byte) main::i1#1 ← ++ (byte) main::i1#2
  (bool~) main::$13 ← (byte) main::i1#1 < (byte) main::bucket_size#1
  if((bool~) main::$13) goto main::@12
  to:main::@11
main::@15: scope:[main]  from main::@11 main::@16
  (byte) main::bucket_idx#10 ← phi( main::@11/(byte) main::bucket_idx#1 main::@16/(byte) main::bucket_idx#11 )
  (word*) SQUARES#26 ← phi( main::@11/(word*) SQUARES#35 main::@16/(word*) SQUARES#36 )
  (byte*) heap_head#36 ← phi( main::@11/(byte*) heap_head#42 main::@16/(byte*) heap_head#43 )
  (byte) NUM_SQUARES#18 ← phi( main::@11/(byte) NUM_SQUARES#24 main::@16/(byte) NUM_SQUARES#25 )
  *((byte*) BORDERCOL#0) ← -- *((byte*) BORDERCOL#0)
  to:main::@3
main::@14: scope:[main]  from main::@11
  (word*) SQUARES#44 ← phi( main::@11/(word*) SQUARES#35 )
  (byte*) heap_head#51 ← phi( main::@11/(byte*) heap_head#42 )
  (byte) NUM_SQUARES#33 ← phi( main::@11/(byte) NUM_SQUARES#24 )
  (byte) main::bucket_size1#2 ← phi( main::@11/(byte) main::bucket_size1#0 )
  (byte) main::bucket_idx#5 ← phi( main::@11/(byte) main::bucket_idx#1 )
  (word~) main::$16 ← ((word)) (byte) main::bucket_idx#5
  (word~) main::$21 ← (word~) main::$16 * (const byte) SIZEOF_POINTER
  (word*) main::bucket1#0 ← *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21)
  (byte) main::i2#0 ← (number) 0
  to:main::@16
main::@16: scope:[main]  from main::@14 main::@16
  (byte) main::bucket_idx#11 ← phi( main::@14/(byte) main::bucket_idx#5 main::@16/(byte) main::bucket_idx#11 )
  (word*) SQUARES#36 ← phi( main::@14/(word*) SQUARES#44 main::@16/(word*) SQUARES#36 )
  (byte*) heap_head#43 ← phi( main::@14/(byte*) heap_head#51 main::@16/(byte*) heap_head#43 )
  (byte) NUM_SQUARES#25 ← phi( main::@14/(byte) NUM_SQUARES#33 main::@16/(byte) NUM_SQUARES#25 )
  (byte) main::bucket_size1#1 ← phi( main::@14/(byte) main::bucket_size1#2 main::@16/(byte) main::bucket_size1#1 )
  (word*) main::bucket1#1 ← phi( main::@14/(word*) main::bucket1#0 main::@16/(word*) main::bucket1#1 )
  (byte) main::i2#2 ← phi( main::@14/(byte) main::i2#0 main::@16/(byte) main::i2#1 )
  (byte~) main::$22 ← (byte) main::i2#2 * (const byte) SIZEOF_WORD
  (byte*~) main::$17 ← (byte*) SCREEN_FILL#0 + *((word*) main::bucket1#1 + (byte~) main::$22)
  (byte*) main::sc1#0 ← (byte*~) main::$17
  *((byte*) main::sc1#0) ← (byte) '*'
  (byte) main::i2#1 ← ++ (byte) main::i2#2
  (bool~) main::$18 ← (byte) main::i2#1 < (byte) main::bucket_size1#1
  if((bool~) main::$18) goto main::@16
  to:main::@15
main::@return: scope:[main]  from main::@3
  (word*) SQUARES#13 ← phi( main::@3/(word*) SQUARES#22 )
  (byte*) heap_head#19 ← phi( main::@3/(byte*) heap_head#30 )
  (byte) NUM_SQUARES#10 ← phi( main::@3/(byte) NUM_SQUARES#15 )
  (byte) NUM_SQUARES#2 ← (byte) NUM_SQUARES#10
  (byte*) heap_head#7 ← (byte*) heap_head#19
  (word*) SQUARES#4 ← (word*) SQUARES#13
  return 
  to:@return
@13: scope:[]  from @12
  (word*) SQUARES#33 ← phi( @12/(word*) SQUARES#37 )
  (byte*) heap_head#40 ← phi( @12/(byte*) heap_head#44 )
  (byte) NUM_SQUARES#22 ← phi( @12/(byte) NUM_SQUARES#26 )
  (word) NUM_BUCKETS#0 ← (number) $100
  (byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 ← { fill( NUM_BUCKETS#0, 0) }
  (word*[NUM_BUCKETS#0]) BUCKETS#0 ← { fill( NUM_BUCKETS#0, 0) }
  (byte[NUM_BUCKETS#0]) BUCKET_IDX#0 ← { fill( NUM_BUCKETS#0, 0) }
  to:@16
init_buckets: scope:[init_buckets]  from main::@2
  (byte*) heap_head#62 ← phi( main::@2/(byte*) heap_head#29 )
  (byte*) init_buckets::screen#6 ← phi( main::@2/(byte*) init_buckets::screen#0 )
  (number~) init_buckets::$0 ← (word) NUM_BUCKETS#0 - (number) 1
  (byte) init_buckets::i#0 ← (byte) 0
  to:init_buckets::@1
init_buckets::@1: scope:[init_buckets]  from init_buckets init_buckets::@1
  (byte*) heap_head#58 ← phi( init_buckets/(byte*) heap_head#62 init_buckets::@1/(byte*) heap_head#58 )
  (byte*) init_buckets::screen#4 ← phi( init_buckets/(byte*) init_buckets::screen#6 init_buckets::@1/(byte*) init_buckets::screen#4 )
  (byte) init_buckets::i#2 ← phi( init_buckets/(byte) init_buckets::i#0 init_buckets::@1/(byte) init_buckets::i#1 )
  *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (number) 0
  (byte) init_buckets::i#1 ← (byte) init_buckets::i#2 + rangenext(0,init_buckets::$0)
  (bool~) init_buckets::$1 ← (byte) init_buckets::i#1 != rangelast(0,init_buckets::$0)
  if((bool~) init_buckets::$1) goto init_buckets::@1
  to:init_buckets::@2
init_buckets::@2: scope:[init_buckets]  from init_buckets::@1
  (byte*) heap_head#52 ← phi( init_buckets::@1/(byte*) heap_head#58 )
  (byte*) init_buckets::screen#1 ← phi( init_buckets::@1/(byte*) init_buckets::screen#4 )
  (byte*) init_buckets::dist#0 ← (byte*) init_buckets::screen#1
  (word) init_buckets::i1#0 ← (word) 0
  to:init_buckets::@3
init_buckets::@3: scope:[init_buckets]  from init_buckets::@2 init_buckets::@3
  (byte*) init_buckets::screen#11 ← phi( init_buckets::@2/(byte*) init_buckets::screen#1 init_buckets::@3/(byte*) init_buckets::screen#11 )
  (byte*) heap_head#45 ← phi( init_buckets::@2/(byte*) heap_head#52 init_buckets::@3/(byte*) heap_head#45 )
  (word) init_buckets::i1#2 ← phi( init_buckets::@2/(word) init_buckets::i1#0 init_buckets::@3/(word) init_buckets::i1#1 )
  (byte*) init_buckets::dist#4 ← phi( init_buckets::@2/(byte*) init_buckets::dist#0 init_buckets::@3/(byte*) init_buckets::dist#1 )
  *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4))
  (byte*) init_buckets::dist#1 ← ++ (byte*) init_buckets::dist#4
  (word) init_buckets::i1#1 ← (word) init_buckets::i1#2 + rangenext(0,$3e7)
  (bool~) init_buckets::$2 ← (word) init_buckets::i1#1 != rangelast(0,$3e7)
  if((bool~) init_buckets::$2) goto init_buckets::@3
  to:init_buckets::@4
init_buckets::@4: scope:[init_buckets]  from init_buckets::@3
  (byte*) init_buckets::screen#10 ← phi( init_buckets::@3/(byte*) init_buckets::screen#11 )
  (byte*) heap_head#37 ← phi( init_buckets::@3/(byte*) heap_head#45 )
  (number~) init_buckets::$3 ← (word) NUM_BUCKETS#0 - (number) 1
  (word) init_buckets::i2#0 ← (word) 0
  to:init_buckets::@5
init_buckets::@5: scope:[init_buckets]  from init_buckets::@11 init_buckets::@4
  (byte*) init_buckets::screen#9 ← phi( init_buckets::@11/(byte*) init_buckets::screen#8 init_buckets::@4/(byte*) init_buckets::screen#10 )
  (byte*) heap_head#25 ← phi( init_buckets::@11/(byte*) heap_head#8 init_buckets::@4/(byte*) heap_head#37 )
  (word) init_buckets::i2#2 ← phi( init_buckets::@11/(word) init_buckets::i2#1 init_buckets::@4/(word) init_buckets::i2#0 )
  (byte~) init_buckets::$4 ← *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2) * (const byte) SIZEOF_POINTER
  (word) malloc::size#1 ← (byte~) init_buckets::$4
  call malloc 
  (void*) malloc::return#3 ← (void*) malloc::return#1
  to:init_buckets::@11
init_buckets::@11: scope:[init_buckets]  from init_buckets::@5
  (byte*) init_buckets::screen#8 ← phi( init_buckets::@5/(byte*) init_buckets::screen#9 )
  (word) init_buckets::i2#3 ← phi( init_buckets::@5/(word) init_buckets::i2#2 )
  (byte*) heap_head#20 ← phi( init_buckets::@5/(byte*) heap_head#2 )
  (void*) malloc::return#6 ← phi( init_buckets::@5/(void*) malloc::return#3 )
  (void*~) init_buckets::$5 ← (void*) malloc::return#6
  (byte*) heap_head#8 ← (byte*) heap_head#20
  (word~) init_buckets::$12 ← (word) init_buckets::i2#3 * (const byte) SIZEOF_POINTER
  *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12) ← ((word*)) (void*~) init_buckets::$5
  (word) init_buckets::i2#1 ← (word) init_buckets::i2#3 + rangenext(0,init_buckets::$3)
  (bool~) init_buckets::$6 ← (word) init_buckets::i2#1 != rangelast(0,init_buckets::$3)
  if((bool~) init_buckets::$6) goto init_buckets::@5
  to:init_buckets::@6
init_buckets::@6: scope:[init_buckets]  from init_buckets::@11
  (byte*) heap_head#53 ← phi( init_buckets::@11/(byte*) heap_head#8 )
  (byte*) init_buckets::screen#7 ← phi( init_buckets::@11/(byte*) init_buckets::screen#8 )
  (number~) init_buckets::$7 ← (word) NUM_BUCKETS#0 - (number) 1
  (byte) init_buckets::i3#0 ← (byte) 0
  to:init_buckets::@7
init_buckets::@7: scope:[init_buckets]  from init_buckets::@6 init_buckets::@7
  (byte*) heap_head#46 ← phi( init_buckets::@6/(byte*) heap_head#53 init_buckets::@7/(byte*) heap_head#46 )
  (byte*) init_buckets::screen#5 ← phi( init_buckets::@6/(byte*) init_buckets::screen#7 init_buckets::@7/(byte*) init_buckets::screen#5 )
  (byte) init_buckets::i3#2 ← phi( init_buckets::@6/(byte) init_buckets::i3#0 init_buckets::@7/(byte) init_buckets::i3#1 )
  *((byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (number) 0
  (byte) init_buckets::i3#1 ← (byte) init_buckets::i3#2 + rangenext(0,init_buckets::$7)
  (bool~) init_buckets::$8 ← (byte) init_buckets::i3#1 != rangelast(0,init_buckets::$7)
  if((bool~) init_buckets::$8) goto init_buckets::@7
  to:init_buckets::@8
init_buckets::@8: scope:[init_buckets]  from init_buckets::@7
  (byte*) heap_head#38 ← phi( init_buckets::@7/(byte*) heap_head#46 )
  (byte*) init_buckets::screen#2 ← phi( init_buckets::@7/(byte*) init_buckets::screen#5 )
  (byte*) init_buckets::dist#2 ← (byte*) init_buckets::screen#2
  (word) init_buckets::i4#0 ← (word) 0
  to:init_buckets::@9
init_buckets::@9: scope:[init_buckets]  from init_buckets::@8 init_buckets::@9
  (byte*) heap_head#31 ← phi( init_buckets::@8/(byte*) heap_head#38 init_buckets::@9/(byte*) heap_head#31 )
  (word) init_buckets::i4#2 ← phi( init_buckets::@8/(word) init_buckets::i4#0 init_buckets::@9/(word) init_buckets::i4#1 )
  (byte*) init_buckets::screen#3 ← phi( init_buckets::@8/(byte*) init_buckets::screen#2 init_buckets::@9/(byte*) init_buckets::screen#3 )
  (byte*) init_buckets::dist#5 ← phi( init_buckets::@8/(byte*) init_buckets::dist#2 init_buckets::@9/(byte*) init_buckets::dist#3 )
  (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5)
  (word~) init_buckets::$9 ← ((word)) (byte) init_buckets::distance#0
  (word~) init_buckets::$13 ← (word~) init_buckets::$9 * (const byte) SIZEOF_POINTER
  (word*) init_buckets::bucket#0 ← *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13)
  (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (byte*) init_buckets::screen#3
  (byte~) init_buckets::$14 ← *((byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) * (const byte) SIZEOF_WORD
  *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10
  *((byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) ← ++ *((byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0)
  (byte*) init_buckets::dist#3 ← ++ (byte*) init_buckets::dist#5
  (word) init_buckets::i4#1 ← (word) init_buckets::i4#2 + rangenext(0,$3e7)
  (bool~) init_buckets::$11 ← (word) init_buckets::i4#1 != rangelast(0,$3e7)
  if((bool~) init_buckets::$11) goto init_buckets::@9
  to:init_buckets::@return
init_buckets::@return: scope:[init_buckets]  from init_buckets::@9
  (byte*) heap_head#21 ← phi( init_buckets::@9/(byte*) heap_head#31 )
  (byte*) heap_head#9 ← (byte*) heap_head#21
  return 
  to:@return
init_angle_screen: scope:[init_angle_screen]  from main::@21
  (byte*) init_angle_screen::screen#1 ← phi( main::@21/(byte*) init_angle_screen::screen#0 )
  (byte*~) init_angle_screen::$0 ← (byte*) init_angle_screen::screen#1 + (number) $28*(number) $c
  (byte*) init_angle_screen::screen_topline#0 ← (byte*~) init_angle_screen::$0
  (byte*~) init_angle_screen::$1 ← (byte*) init_angle_screen::screen#1 + (number) $28*(number) $c
  (byte*) init_angle_screen::screen_bottomline#0 ← (byte*~) init_angle_screen::$1
  (byte) init_angle_screen::y#0 ← (byte) 0
  to:init_angle_screen::@1
init_angle_screen::@1: scope:[init_angle_screen]  from init_angle_screen init_angle_screen::@3
  (byte*) init_angle_screen::screen_topline#5 ← phi( init_angle_screen/(byte*) init_angle_screen::screen_topline#0 init_angle_screen::@3/(byte*) init_angle_screen::screen_topline#1 )
  (byte*) init_angle_screen::screen_bottomline#5 ← phi( init_angle_screen/(byte*) init_angle_screen::screen_bottomline#0 init_angle_screen::@3/(byte*) init_angle_screen::screen_bottomline#1 )
  (byte) init_angle_screen::y#4 ← phi( init_angle_screen/(byte) init_angle_screen::y#0 init_angle_screen::@3/(byte) init_angle_screen::y#1 )
  (byte) init_angle_screen::x#0 ← (number) 0
  (byte) init_angle_screen::xb#0 ← (number) $27
  to:init_angle_screen::@2
init_angle_screen::@2: scope:[init_angle_screen]  from init_angle_screen::@1 init_angle_screen::@5
  (byte*) init_angle_screen::screen_topline#4 ← phi( init_angle_screen::@1/(byte*) init_angle_screen::screen_topline#5 init_angle_screen::@5/(byte*) init_angle_screen::screen_topline#2 )
  (byte) init_angle_screen::xb#3 ← phi( init_angle_screen::@1/(byte) init_angle_screen::xb#0 init_angle_screen::@5/(byte) init_angle_screen::xb#1 )
  (byte*) init_angle_screen::screen_bottomline#4 ← phi( init_angle_screen::@1/(byte*) init_angle_screen::screen_bottomline#5 init_angle_screen::@5/(byte*) init_angle_screen::screen_bottomline#2 )
  (byte) init_angle_screen::y#2 ← phi( init_angle_screen::@1/(byte) init_angle_screen::y#4 init_angle_screen::@5/(byte) init_angle_screen::y#5 )
  (byte) init_angle_screen::x#2 ← phi( init_angle_screen::@1/(byte) init_angle_screen::x#0 init_angle_screen::@5/(byte) init_angle_screen::x#1 )
  (number~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 * (number) 2
  (number~) init_angle_screen::$3 ← (number) $27 - (number~) init_angle_screen::$2
  (word~) init_angle_screen::$4 ← ((word)) { (number~) init_angle_screen::$3, (number) 0 }
  (signed word~) init_angle_screen::$5 ← ((signed word)) (word~) init_angle_screen::$4
  (signed word) init_angle_screen::xw#0 ← (signed word~) init_angle_screen::$5
  (number~) init_angle_screen::$6 ← (byte) init_angle_screen::y#2 * (number) 2
  (word~) init_angle_screen::$7 ← ((word)) { (number~) init_angle_screen::$6, (number) 0 }
  (signed word~) init_angle_screen::$8 ← ((signed word)) (word~) init_angle_screen::$7
  (signed word) init_angle_screen::yw#0 ← (signed word~) init_angle_screen::$8
  (signed word) atan2_16::x#0 ← (signed word) init_angle_screen::xw#0
  (signed word) atan2_16::y#0 ← (signed word) init_angle_screen::yw#0
  call atan2_16 
  (word) atan2_16::return#2 ← (word) atan2_16::return#1
  to:init_angle_screen::@5
init_angle_screen::@5: scope:[init_angle_screen]  from init_angle_screen::@2
  (byte) init_angle_screen::y#5 ← phi( init_angle_screen::@2/(byte) init_angle_screen::y#2 )
  (byte) init_angle_screen::x#3 ← phi( init_angle_screen::@2/(byte) init_angle_screen::x#2 )
  (byte*) init_angle_screen::screen_topline#2 ← phi( init_angle_screen::@2/(byte*) init_angle_screen::screen_topline#4 )
  (byte) init_angle_screen::xb#2 ← phi( init_angle_screen::@2/(byte) init_angle_screen::xb#3 )
  (byte*) init_angle_screen::screen_bottomline#2 ← phi( init_angle_screen::@2/(byte*) init_angle_screen::screen_bottomline#4 )
  (word) atan2_16::return#4 ← phi( init_angle_screen::@2/(word) atan2_16::return#2 )
  (word~) init_angle_screen::$9 ← (word) atan2_16::return#4
  (word) init_angle_screen::angle_w#0 ← (word~) init_angle_screen::$9
  (number~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (number) $80
  (number~) init_angle_screen::$11 ← > (number~) init_angle_screen::$10
  (byte) init_angle_screen::ang_w#0 ← (number~) init_angle_screen::$11
  *((byte*) init_angle_screen::screen_bottomline#2 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0
  (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0
  *((byte*) init_angle_screen::screen_topline#2 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12
  (number~) init_angle_screen::$13 ← (number) $80 + (byte) init_angle_screen::ang_w#0
  *((byte*) init_angle_screen::screen_topline#2 + (byte) init_angle_screen::x#3) ← (number~) init_angle_screen::$13
  (number~) init_angle_screen::$14 ← (number) $80 - (byte) init_angle_screen::ang_w#0
  *((byte*) init_angle_screen::screen_bottomline#2 + (byte) init_angle_screen::x#3) ← (number~) init_angle_screen::$14
  (byte) init_angle_screen::x#1 ← ++ (byte) init_angle_screen::x#3
  (byte) init_angle_screen::xb#1 ← -- (byte) init_angle_screen::xb#2
  (bool~) init_angle_screen::$15 ← (byte) init_angle_screen::x#1 <= (number) $13
  if((bool~) init_angle_screen::$15) goto init_angle_screen::@2
  to:init_angle_screen::@3
init_angle_screen::@3: scope:[init_angle_screen]  from init_angle_screen::@5
  (byte) init_angle_screen::y#3 ← phi( init_angle_screen::@5/(byte) init_angle_screen::y#5 )
  (byte*) init_angle_screen::screen_bottomline#3 ← phi( init_angle_screen::@5/(byte*) init_angle_screen::screen_bottomline#2 )
  (byte*) init_angle_screen::screen_topline#3 ← phi( init_angle_screen::@5/(byte*) init_angle_screen::screen_topline#2 )
  (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#3 - (number) $28
  (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#3 + (number) $28
  (byte) init_angle_screen::y#1 ← (byte) init_angle_screen::y#3 + rangenext(0,$c)
  (bool~) init_angle_screen::$16 ← (byte) init_angle_screen::y#1 != rangelast(0,$c)
  if((bool~) init_angle_screen::$16) goto init_angle_screen::@1
  to:init_angle_screen::@return
init_angle_screen::@return: scope:[init_angle_screen]  from init_angle_screen::@3
  return 
  to:@return
init_dist_screen: scope:[init_dist_screen]  from main
  (byte*) init_dist_screen::screen#2 ← phi( main/(byte*) init_dist_screen::screen#0 )
  (word*) SQUARES#23 ← phi( main/(word*) SQUARES#21 )
  (byte*) heap_head#32 ← phi( main/(byte*) heap_head#28 )
  (byte) NUM_SQUARES#3 ← (number) $30
  call init_squares 
  to:init_dist_screen::@15
init_dist_screen::@15: scope:[init_dist_screen]  from init_dist_screen
  (byte) NUM_SQUARES#44 ← phi( init_dist_screen/(byte) NUM_SQUARES#3 )
  (byte*) init_dist_screen::screen#1 ← phi( init_dist_screen/(byte*) init_dist_screen::screen#2 )
  (word*) SQUARES#14 ← phi( init_dist_screen/(word*) SQUARES#2 )
  (byte*) heap_head#22 ← phi( init_dist_screen/(byte*) heap_head#4 )
  (byte*) heap_head#10 ← (byte*) heap_head#22
  (word*) SQUARES#5 ← (word*) SQUARES#14
  (byte*) init_dist_screen::screen_topline#0 ← (byte*) init_dist_screen::screen#1
  (byte*~) init_dist_screen::$1 ← (byte*) init_dist_screen::screen#1 + (number) $28*(number) $18
  (byte*) init_dist_screen::screen_bottomline#0 ← (byte*~) init_dist_screen::$1
  (byte) init_dist_screen::y#0 ← (byte) 0
  to:init_dist_screen::@1
init_dist_screen::@1: scope:[init_dist_screen]  from init_dist_screen::@11 init_dist_screen::@15
  (byte*) heap_head#68 ← phi( init_dist_screen::@11/(byte*) heap_head#33 init_dist_screen::@15/(byte*) heap_head#10 )
  (byte*) init_dist_screen::screen_bottomline#13 ← phi( init_dist_screen::@11/(byte*) init_dist_screen::screen_bottomline#1 init_dist_screen::@15/(byte*) init_dist_screen::screen_bottomline#0 )
  (byte*) init_dist_screen::screen_topline#13 ← phi( init_dist_screen::@11/(byte*) init_dist_screen::screen_topline#1 init_dist_screen::@15/(byte*) init_dist_screen::screen_topline#0 )
  (byte) NUM_SQUARES#43 ← phi( init_dist_screen::@11/(byte) NUM_SQUARES#16 init_dist_screen::@15/(byte) NUM_SQUARES#44 )
  (word*) SQUARES#38 ← phi( init_dist_screen::@11/(word*) SQUARES#24 init_dist_screen::@15/(word*) SQUARES#5 )
  (byte) init_dist_screen::y#2 ← phi( init_dist_screen::@11/(byte) init_dist_screen::y#1 init_dist_screen::@15/(byte) init_dist_screen::y#0 )
  (number~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (number) 2
  (byte) init_dist_screen::y2#0 ← (number~) init_dist_screen::$2
  (bool~) init_dist_screen::$3 ← (byte) init_dist_screen::y2#0 >= (number) $18
  if((bool~) init_dist_screen::$3) goto init_dist_screen::@2
  to:init_dist_screen::@3
init_dist_screen::@2: scope:[init_dist_screen]  from init_dist_screen::@1
  (byte*) heap_head#66 ← phi( init_dist_screen::@1/(byte*) heap_head#68 )
  (byte) init_dist_screen::y#12 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y#2 )
  (byte*) init_dist_screen::screen_bottomline#11 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_bottomline#13 )
  (byte*) init_dist_screen::screen_topline#11 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_topline#13 )
  (byte) NUM_SQUARES#41 ← phi( init_dist_screen::@1/(byte) NUM_SQUARES#43 )
  (word*) SQUARES#28 ← phi( init_dist_screen::@1/(word*) SQUARES#38 )
  (byte) init_dist_screen::y2#1 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y2#0 )
  (number~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (number) $18
  (number~) init_dist_screen::$7 ← (number~) init_dist_screen::$6
  to:init_dist_screen::@4
init_dist_screen::@3: scope:[init_dist_screen]  from init_dist_screen::@1
  (byte*) heap_head#67 ← phi( init_dist_screen::@1/(byte*) heap_head#68 )
  (byte) init_dist_screen::y#13 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y#2 )
  (byte*) init_dist_screen::screen_bottomline#12 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_bottomline#13 )
  (byte*) init_dist_screen::screen_topline#12 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_topline#13 )
  (byte) NUM_SQUARES#42 ← phi( init_dist_screen::@1/(byte) NUM_SQUARES#43 )
  (word*) SQUARES#29 ← phi( init_dist_screen::@1/(word*) SQUARES#38 )
  (byte) init_dist_screen::y2#2 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y2#0 )
  (number~) init_dist_screen::$4 ← (number) $18 - (byte) init_dist_screen::y2#2
  (number~) init_dist_screen::$5 ← (number~) init_dist_screen::$4
  to:init_dist_screen::@4
init_dist_screen::@4: scope:[init_dist_screen]  from init_dist_screen::@2 init_dist_screen::@3
  (byte*) heap_head#65 ← phi( init_dist_screen::@2/(byte*) heap_head#66 init_dist_screen::@3/(byte*) heap_head#67 )
  (byte) init_dist_screen::y#11 ← phi( init_dist_screen::@2/(byte) init_dist_screen::y#12 init_dist_screen::@3/(byte) init_dist_screen::y#13 )
  (byte*) init_dist_screen::screen_bottomline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_bottomline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_bottomline#12 )
  (byte*) init_dist_screen::screen_topline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_topline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_topline#12 )
  (byte) NUM_SQUARES#40 ← phi( init_dist_screen::@2/(byte) NUM_SQUARES#41 init_dist_screen::@3/(byte) NUM_SQUARES#42 )
  (word*) SQUARES#18 ← phi( init_dist_screen::@2/(word*) SQUARES#28 init_dist_screen::@3/(word*) SQUARES#29 )
  (number~) init_dist_screen::$8 ← phi( init_dist_screen::@2/(number~) init_dist_screen::$7 init_dist_screen::@3/(number~) init_dist_screen::$5 )
  (byte) init_dist_screen::yd#0 ← (number~) init_dist_screen::$8
  (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
  call sqr 
  (word) sqr::return#2 ← (word) sqr::return#1
  to:init_dist_screen::@16
init_dist_screen::@16: scope:[init_dist_screen]  from init_dist_screen::@4
  (byte*) heap_head#64 ← phi( init_dist_screen::@4/(byte*) heap_head#65 )
  (byte) init_dist_screen::y#10 ← phi( init_dist_screen::@4/(byte) init_dist_screen::y#11 )
  (byte*) init_dist_screen::screen_bottomline#9 ← phi( init_dist_screen::@4/(byte*) init_dist_screen::screen_bottomline#10 )
  (byte*) init_dist_screen::screen_topline#9 ← phi( init_dist_screen::@4/(byte*) init_dist_screen::screen_topline#10 )
  (byte) NUM_SQUARES#38 ← phi( init_dist_screen::@4/(byte) NUM_SQUARES#40 )
  (word*) SQUARES#45 ← phi( init_dist_screen::@4/(word*) SQUARES#18 )
  (word) sqr::return#5 ← phi( init_dist_screen::@4/(word) sqr::return#2 )
  (word~) init_dist_screen::$9 ← (word) sqr::return#5
  (word) init_dist_screen::yds#0 ← (word~) init_dist_screen::$9
  (byte) init_dist_screen::x#0 ← (number) 0
  (byte) init_dist_screen::xb#0 ← (number) $27
  to:init_dist_screen::@5
init_dist_screen::@5: scope:[init_dist_screen]  from init_dist_screen::@16 init_dist_screen::@18
  (byte*) heap_head#63 ← phi( init_dist_screen::@16/(byte*) heap_head#64 init_dist_screen::@18/(byte*) heap_head#39 )
  (byte) init_dist_screen::y#9 ← phi( init_dist_screen::@16/(byte) init_dist_screen::y#10 init_dist_screen::@18/(byte) init_dist_screen::y#4 )
  (byte) init_dist_screen::xb#7 ← phi( init_dist_screen::@16/(byte) init_dist_screen::xb#0 init_dist_screen::@18/(byte) init_dist_screen::xb#1 )
  (byte*) init_dist_screen::screen_bottomline#8 ← phi( init_dist_screen::@16/(byte*) init_dist_screen::screen_bottomline#9 init_dist_screen::@18/(byte*) init_dist_screen::screen_bottomline#2 )
  (byte*) init_dist_screen::screen_topline#8 ← phi( init_dist_screen::@16/(byte*) init_dist_screen::screen_topline#9 init_dist_screen::@18/(byte*) init_dist_screen::screen_topline#2 )
  (byte) NUM_SQUARES#34 ← phi( init_dist_screen::@16/(byte) NUM_SQUARES#38 init_dist_screen::@18/(byte) NUM_SQUARES#21 )
  (word) init_dist_screen::yds#5 ← phi( init_dist_screen::@16/(word) init_dist_screen::yds#0 init_dist_screen::@18/(word) init_dist_screen::yds#6 )
  (word*) SQUARES#39 ← phi( init_dist_screen::@16/(word*) SQUARES#45 init_dist_screen::@18/(word*) SQUARES#32 )
  (byte) init_dist_screen::x#2 ← phi( init_dist_screen::@16/(byte) init_dist_screen::x#0 init_dist_screen::@18/(byte) init_dist_screen::x#1 )
  (number~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (number) 2
  (byte) init_dist_screen::x2#0 ← (number~) init_dist_screen::$10
  (bool~) init_dist_screen::$11 ← (byte) init_dist_screen::x2#0 >= (number) $27
  if((bool~) init_dist_screen::$11) goto init_dist_screen::@6
  to:init_dist_screen::@7
init_dist_screen::@6: scope:[init_dist_screen]  from init_dist_screen::@5
  (byte*) heap_head#59 ← phi( init_dist_screen::@5/(byte*) heap_head#63 )
  (byte) init_dist_screen::y#7 ← phi( init_dist_screen::@5/(byte) init_dist_screen::y#9 )
  (byte) init_dist_screen::xb#5 ← phi( init_dist_screen::@5/(byte) init_dist_screen::xb#7 )
  (byte*) init_dist_screen::screen_bottomline#6 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_bottomline#8 )
  (byte) init_dist_screen::x#6 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x#2 )
  (byte*) init_dist_screen::screen_topline#6 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_topline#8 )
  (byte) NUM_SQUARES#27 ← phi( init_dist_screen::@5/(byte) NUM_SQUARES#34 )
  (word) init_dist_screen::yds#3 ← phi( init_dist_screen::@5/(word) init_dist_screen::yds#5 )
  (word*) SQUARES#30 ← phi( init_dist_screen::@5/(word*) SQUARES#39 )
  (byte) init_dist_screen::x2#1 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x2#0 )
  (number~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (number) $27
  (number~) init_dist_screen::$15 ← (number~) init_dist_screen::$14
  to:init_dist_screen::@8
init_dist_screen::@7: scope:[init_dist_screen]  from init_dist_screen::@5
  (byte*) heap_head#60 ← phi( init_dist_screen::@5/(byte*) heap_head#63 )
  (byte) init_dist_screen::y#8 ← phi( init_dist_screen::@5/(byte) init_dist_screen::y#9 )
  (byte) init_dist_screen::xb#6 ← phi( init_dist_screen::@5/(byte) init_dist_screen::xb#7 )
  (byte*) init_dist_screen::screen_bottomline#7 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_bottomline#8 )
  (byte) init_dist_screen::x#7 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x#2 )
  (byte*) init_dist_screen::screen_topline#7 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_topline#8 )
  (byte) NUM_SQUARES#28 ← phi( init_dist_screen::@5/(byte) NUM_SQUARES#34 )
  (word) init_dist_screen::yds#4 ← phi( init_dist_screen::@5/(word) init_dist_screen::yds#5 )
  (word*) SQUARES#31 ← phi( init_dist_screen::@5/(word*) SQUARES#39 )
  (byte) init_dist_screen::x2#2 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x2#0 )
  (number~) init_dist_screen::$12 ← (number) $27 - (byte) init_dist_screen::x2#2
  (number~) init_dist_screen::$13 ← (number~) init_dist_screen::$12
  to:init_dist_screen::@8
init_dist_screen::@8: scope:[init_dist_screen]  from init_dist_screen::@6 init_dist_screen::@7
  (byte*) heap_head#54 ← phi( init_dist_screen::@6/(byte*) heap_head#59 init_dist_screen::@7/(byte*) heap_head#60 )
  (byte) init_dist_screen::y#6 ← phi( init_dist_screen::@6/(byte) init_dist_screen::y#7 init_dist_screen::@7/(byte) init_dist_screen::y#8 )
  (byte) init_dist_screen::xb#4 ← phi( init_dist_screen::@6/(byte) init_dist_screen::xb#5 init_dist_screen::@7/(byte) init_dist_screen::xb#6 )
  (byte*) init_dist_screen::screen_bottomline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_bottomline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_bottomline#7 )
  (byte) init_dist_screen::x#5 ← phi( init_dist_screen::@6/(byte) init_dist_screen::x#6 init_dist_screen::@7/(byte) init_dist_screen::x#7 )
  (byte*) init_dist_screen::screen_topline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_topline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_topline#7 )
  (byte) NUM_SQUARES#20 ← phi( init_dist_screen::@6/(byte) NUM_SQUARES#27 init_dist_screen::@7/(byte) NUM_SQUARES#28 )
  (word) init_dist_screen::yds#2 ← phi( init_dist_screen::@6/(word) init_dist_screen::yds#3 init_dist_screen::@7/(word) init_dist_screen::yds#4 )
  (word*) SQUARES#19 ← phi( init_dist_screen::@6/(word*) SQUARES#30 init_dist_screen::@7/(word*) SQUARES#31 )
  (number~) init_dist_screen::$16 ← phi( init_dist_screen::@6/(number~) init_dist_screen::$15 init_dist_screen::@7/(number~) init_dist_screen::$13 )
  (byte) init_dist_screen::xd#0 ← (number~) init_dist_screen::$16
  (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
  call sqr 
  (word) sqr::return#3 ← (word) sqr::return#1
  to:init_dist_screen::@17
init_dist_screen::@17: scope:[init_dist_screen]  from init_dist_screen::@8
  (byte*) heap_head#47 ← phi( init_dist_screen::@8/(byte*) heap_head#54 )
  (byte) init_dist_screen::y#5 ← phi( init_dist_screen::@8/(byte) init_dist_screen::y#6 )
  (byte) init_dist_screen::xb#3 ← phi( init_dist_screen::@8/(byte) init_dist_screen::xb#4 )
  (byte*) init_dist_screen::screen_bottomline#4 ← phi( init_dist_screen::@8/(byte*) init_dist_screen::screen_bottomline#5 )
  (byte) init_dist_screen::x#4 ← phi( init_dist_screen::@8/(byte) init_dist_screen::x#5 )
  (byte*) init_dist_screen::screen_topline#4 ← phi( init_dist_screen::@8/(byte*) init_dist_screen::screen_topline#5 )
  (byte) NUM_SQUARES#13 ← phi( init_dist_screen::@8/(byte) NUM_SQUARES#20 )
  (word*) SQUARES#20 ← phi( init_dist_screen::@8/(word*) SQUARES#19 )
  (word) init_dist_screen::yds#1 ← phi( init_dist_screen::@8/(word) init_dist_screen::yds#2 )
  (word) sqr::return#6 ← phi( init_dist_screen::@8/(word) sqr::return#3 )
  (word~) init_dist_screen::$17 ← (word) sqr::return#6
  (word) init_dist_screen::xds#0 ← (word~) init_dist_screen::$17
  (word~) init_dist_screen::$18 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#1
  (word) init_dist_screen::ds#0 ← (word~) init_dist_screen::$18
  (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
  call sqrt 
  (byte) sqrt::return#2 ← (byte) sqrt::return#1
  to:init_dist_screen::@18
init_dist_screen::@18: scope:[init_dist_screen]  from init_dist_screen::@17
  (word) init_dist_screen::yds#6 ← phi( init_dist_screen::@17/(word) init_dist_screen::yds#1 )
  (word*) SQUARES#32 ← phi( init_dist_screen::@17/(word*) SQUARES#20 )
  (byte*) heap_head#39 ← phi( init_dist_screen::@17/(byte*) heap_head#47 )
  (byte) NUM_SQUARES#21 ← phi( init_dist_screen::@17/(byte) NUM_SQUARES#13 )
  (byte) init_dist_screen::y#4 ← phi( init_dist_screen::@17/(byte) init_dist_screen::y#5 )
  (byte) init_dist_screen::xb#2 ← phi( init_dist_screen::@17/(byte) init_dist_screen::xb#3 )
  (byte*) init_dist_screen::screen_bottomline#2 ← phi( init_dist_screen::@17/(byte*) init_dist_screen::screen_bottomline#4 )
  (byte) init_dist_screen::x#3 ← phi( init_dist_screen::@17/(byte) init_dist_screen::x#4 )
  (byte*) init_dist_screen::screen_topline#2 ← phi( init_dist_screen::@17/(byte*) init_dist_screen::screen_topline#4 )
  (byte) sqrt::return#4 ← phi( init_dist_screen::@17/(byte) sqrt::return#2 )
  (byte~) init_dist_screen::$19 ← (byte) sqrt::return#4
  (byte) init_dist_screen::d#0 ← (byte~) init_dist_screen::$19
  *((byte*) init_dist_screen::screen_topline#2 + (byte) init_dist_screen::x#3) ← (byte) init_dist_screen::d#0
  *((byte*) init_dist_screen::screen_bottomline#2 + (byte) init_dist_screen::x#3) ← (byte) init_dist_screen::d#0
  *((byte*) init_dist_screen::screen_topline#2 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  *((byte*) init_dist_screen::screen_bottomline#2 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#3
  (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2
  (bool~) init_dist_screen::$20 ← (byte) init_dist_screen::x#1 <= (number) $13
  if((bool~) init_dist_screen::$20) goto init_dist_screen::@5
  to:init_dist_screen::@11
init_dist_screen::@11: scope:[init_dist_screen]  from init_dist_screen::@18
  (word*) SQUARES#24 ← phi( init_dist_screen::@18/(word*) SQUARES#32 )
  (byte*) heap_head#33 ← phi( init_dist_screen::@18/(byte*) heap_head#39 )
  (byte) NUM_SQUARES#16 ← phi( init_dist_screen::@18/(byte) NUM_SQUARES#21 )
  (byte) init_dist_screen::y#3 ← phi( init_dist_screen::@18/(byte) init_dist_screen::y#4 )
  (byte*) init_dist_screen::screen_bottomline#3 ← phi( init_dist_screen::@18/(byte*) init_dist_screen::screen_bottomline#2 )
  (byte*) init_dist_screen::screen_topline#3 ← phi( init_dist_screen::@18/(byte*) init_dist_screen::screen_topline#2 )
  (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#3 + (number) $28
  (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#3 - (number) $28
  (byte) init_dist_screen::y#1 ← (byte) init_dist_screen::y#3 + rangenext(0,$c)
  (bool~) init_dist_screen::$21 ← (byte) init_dist_screen::y#1 != rangelast(0,$c)
  if((bool~) init_dist_screen::$21) goto init_dist_screen::@1
  to:init_dist_screen::@return
init_dist_screen::@return: scope:[init_dist_screen]  from init_dist_screen::@11
  (word*) SQUARES#15 ← phi( init_dist_screen::@11/(word*) SQUARES#24 )
  (byte*) heap_head#23 ← phi( init_dist_screen::@11/(byte*) heap_head#33 )
  (byte) NUM_SQUARES#11 ← phi( init_dist_screen::@11/(byte) NUM_SQUARES#16 )
  (byte) NUM_SQUARES#4 ← (byte) NUM_SQUARES#11
  (byte*) heap_head#11 ← (byte*) heap_head#23
  (word*) SQUARES#6 ← (word*) SQUARES#15
  return 
  to:@return
@16: scope:[]  from @13
  (word*) SQUARES#25 ← phi( @13/(word*) SQUARES#33 )
  (byte*) heap_head#34 ← phi( @13/(byte*) heap_head#40 )
  (byte) NUM_SQUARES#17 ← phi( @13/(byte) NUM_SQUARES#22 )
  call main 
  to:@17
@17: scope:[]  from @16
  (word*) SQUARES#16 ← phi( @16/(word*) SQUARES#4 )
  (byte*) heap_head#24 ← phi( @16/(byte*) heap_head#7 )
  (byte) NUM_SQUARES#12 ← phi( @16/(byte) NUM_SQUARES#2 )
  (byte) NUM_SQUARES#5 ← (byte) NUM_SQUARES#12
  (byte*) heap_head#12 ← (byte*) heap_head#24
  (word*) SQUARES#7 ← (word*) SQUARES#16
  to:@end
@end: scope:[]  from @17

SYMBOL TABLE SSA
(label) @10
(label) @12
(label) @13
(label) @16
(label) @17
(label) @4
(label) @7
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(word*[NUM_BUCKETS#0]) BUCKETS
(word*[NUM_BUCKETS#0]) BUCKETS#0
(byte[NUM_BUCKETS#0]) BUCKET_IDX
(byte[NUM_BUCKETS#0]) BUCKET_IDX#0
(byte[NUM_BUCKETS#0]) BUCKET_SIZES
(byte[NUM_BUCKETS#0]) BUCKET_SIZES#0
(word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16
(word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0
(byte) CORDIC_ITERATIONS_16
(byte) CORDIC_ITERATIONS_16#0
(byte*) HEAP_TOP
(byte*) HEAP_TOP#0
(word) NUM_BUCKETS
(word) NUM_BUCKETS#0
(byte) NUM_SQUARES
(byte) NUM_SQUARES#0
(byte) NUM_SQUARES#1
(byte) NUM_SQUARES#10
(byte) NUM_SQUARES#11
(byte) NUM_SQUARES#12
(byte) NUM_SQUARES#13
(byte) NUM_SQUARES#14
(byte) NUM_SQUARES#15
(byte) NUM_SQUARES#16
(byte) NUM_SQUARES#17
(byte) NUM_SQUARES#18
(byte) NUM_SQUARES#19
(byte) NUM_SQUARES#2
(byte) NUM_SQUARES#20
(byte) NUM_SQUARES#21
(byte) NUM_SQUARES#22
(byte) NUM_SQUARES#23
(byte) NUM_SQUARES#24
(byte) NUM_SQUARES#25
(byte) NUM_SQUARES#26
(byte) NUM_SQUARES#27
(byte) NUM_SQUARES#28
(byte) NUM_SQUARES#29
(byte) NUM_SQUARES#3
(byte) NUM_SQUARES#30
(byte) NUM_SQUARES#31
(byte) NUM_SQUARES#32
(byte) NUM_SQUARES#33
(byte) NUM_SQUARES#34
(byte) NUM_SQUARES#35
(byte) NUM_SQUARES#36
(byte) NUM_SQUARES#37
(byte) NUM_SQUARES#38
(byte) NUM_SQUARES#39
(byte) NUM_SQUARES#4
(byte) NUM_SQUARES#40
(byte) NUM_SQUARES#41
(byte) NUM_SQUARES#42
(byte) NUM_SQUARES#43
(byte) NUM_SQUARES#44
(byte) NUM_SQUARES#5
(byte) NUM_SQUARES#6
(byte) NUM_SQUARES#7
(byte) NUM_SQUARES#8
(byte) NUM_SQUARES#9
(byte*) RASTER
(byte*) RASTER#0
(byte[$3e8]) SCREEN_ANGLE
(byte[$3e8]) SCREEN_ANGLE#0
(byte[$3e8]) SCREEN_DIST
(byte[$3e8]) SCREEN_DIST#0
(byte*) SCREEN_FILL
(byte*) SCREEN_FILL#0
(byte[$3e8]) SCREEN_MIX
(byte[$3e8]) SCREEN_MIX#0
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(word*) SQUARES
(word*) SQUARES#0
(word*) SQUARES#1
(word*) SQUARES#10
(word*) SQUARES#11
(word*) SQUARES#12
(word*) SQUARES#13
(word*) SQUARES#14
(word*) SQUARES#15
(word*) SQUARES#16
(word*) SQUARES#17
(word*) SQUARES#18
(word*) SQUARES#19
(word*) SQUARES#2
(word*) SQUARES#20
(word*) SQUARES#21
(word*) SQUARES#22
(word*) SQUARES#23
(word*) SQUARES#24
(word*) SQUARES#25
(word*) SQUARES#26
(word*) SQUARES#27
(word*) SQUARES#28
(word*) SQUARES#29
(word*) SQUARES#3
(word*) SQUARES#30
(word*) SQUARES#31
(word*) SQUARES#32
(word*) SQUARES#33
(word*) SQUARES#34
(word*) SQUARES#35
(word*) SQUARES#36
(word*) SQUARES#37
(word*) SQUARES#38
(word*) SQUARES#39
(word*) SQUARES#4
(word*) SQUARES#40
(word*) SQUARES#41
(word*) SQUARES#42
(word*) SQUARES#43
(word*) SQUARES#44
(word*) SQUARES#45
(word*) SQUARES#46
(word*) SQUARES#47
(word*) SQUARES#48
(word*) SQUARES#49
(word*) SQUARES#5
(word*) SQUARES#6
(word*) SQUARES#7
(word*) SQUARES#8
(word*) SQUARES#9
(word()) atan2_16((signed word) atan2_16::x , (signed word) atan2_16::y)
(bool~) atan2_16::$0
(signed word~) atan2_16::$1
(bool~) atan2_16::$10
(bool~) atan2_16::$11
(number~) atan2_16::$12
(bool~) atan2_16::$13
(bool~) atan2_16::$14
(word~) atan2_16::$15
(number~) atan2_16::$16
(bool~) atan2_16::$17
(bool~) atan2_16::$18
(bool~) atan2_16::$19
(signed word~) atan2_16::$2
(bool~) atan2_16::$20
(bool~) atan2_16::$21
(bool~) atan2_16::$22
(byte~) atan2_16::$23
(byte~) atan2_16::$24
(bool~) atan2_16::$25
(signed word~) atan2_16::$3
(signed word~) atan2_16::$4
(bool~) atan2_16::$5
(signed word~) atan2_16::$6
(signed word~) atan2_16::$7
(signed word~) atan2_16::$8
(signed word~) atan2_16::$9
(label) atan2_16::@1
(label) atan2_16::@13
(label) atan2_16::@15
(label) atan2_16::@16
(label) atan2_16::@17
(label) atan2_16::@18
(label) atan2_16::@19
(label) atan2_16::@2
(label) atan2_16::@20
(label) atan2_16::@24
(label) atan2_16::@25
(label) atan2_16::@26
(label) atan2_16::@27
(label) atan2_16::@3
(label) atan2_16::@30
(label) atan2_16::@33
(label) atan2_16::@4
(label) atan2_16::@5
(label) atan2_16::@6
(label) atan2_16::@7
(label) atan2_16::@8
(label) atan2_16::@return
(word) atan2_16::angle
(word) atan2_16::angle#0
(word) atan2_16::angle#1
(word) atan2_16::angle#10
(word) atan2_16::angle#11
(word) atan2_16::angle#12
(word) atan2_16::angle#13
(word) atan2_16::angle#14
(word) atan2_16::angle#15
(word) atan2_16::angle#16
(word) atan2_16::angle#17
(word) atan2_16::angle#18
(word) atan2_16::angle#19
(word) atan2_16::angle#2
(word) atan2_16::angle#20
(word) atan2_16::angle#3
(word) atan2_16::angle#4
(word) atan2_16::angle#5
(word) atan2_16::angle#6
(word) atan2_16::angle#7
(word) atan2_16::angle#8
(word) atan2_16::angle#9
(byte) atan2_16::i
(byte) atan2_16::i#0
(byte) atan2_16::i#1
(byte) atan2_16::i#10
(byte) atan2_16::i#11
(byte) atan2_16::i#2
(byte) atan2_16::i#3
(byte) atan2_16::i#4
(byte) atan2_16::i#5
(byte) atan2_16::i#6
(byte) atan2_16::i#7
(byte) atan2_16::i#8
(byte) atan2_16::i#9
(word) atan2_16::return
(word) atan2_16::return#0
(word) atan2_16::return#1
(word) atan2_16::return#2
(word) atan2_16::return#3
(word) atan2_16::return#4
(byte) atan2_16::shift
(byte) atan2_16::shift#0
(byte) atan2_16::shift#1
(byte) atan2_16::shift#2
(byte) atan2_16::shift#3
(byte) atan2_16::shift#4
(signed word) atan2_16::x
(signed word) atan2_16::x#0
(signed word) atan2_16::x#1
(signed word) atan2_16::x#10
(signed word) atan2_16::x#11
(signed word) atan2_16::x#12
(signed word) atan2_16::x#13
(signed word) atan2_16::x#14
(signed word) atan2_16::x#15
(signed word) atan2_16::x#16
(signed word) atan2_16::x#17
(signed word) atan2_16::x#18
(signed word) atan2_16::x#2
(signed word) atan2_16::x#3
(signed word) atan2_16::x#4
(signed word) atan2_16::x#5
(signed word) atan2_16::x#6
(signed word) atan2_16::x#7
(signed word) atan2_16::x#8
(signed word) atan2_16::x#9
(signed word) atan2_16::xd
(signed word) atan2_16::xd#0
(signed word) atan2_16::xd#1
(signed word) atan2_16::xd#2
(signed word) atan2_16::xd#3
(signed word) atan2_16::xd#4
(signed word) atan2_16::xd#5
(signed word) atan2_16::xd#6
(signed word) atan2_16::xd#7
(signed word) atan2_16::xd#8
(signed word) atan2_16::xd#9
(signed word) atan2_16::xi
(signed word) atan2_16::xi#0
(signed word) atan2_16::xi#1
(signed word) atan2_16::xi#10
(signed word) atan2_16::xi#11
(signed word) atan2_16::xi#12
(signed word) atan2_16::xi#2
(signed word) atan2_16::xi#3
(signed word) atan2_16::xi#4
(signed word) atan2_16::xi#5
(signed word) atan2_16::xi#6
(signed word) atan2_16::xi#7
(signed word) atan2_16::xi#8
(signed word) atan2_16::xi#9
(signed word) atan2_16::y
(signed word) atan2_16::y#0
(signed word) atan2_16::y#1
(signed word) atan2_16::y#10
(signed word) atan2_16::y#11
(signed word) atan2_16::y#12
(signed word) atan2_16::y#13
(signed word) atan2_16::y#14
(signed word) atan2_16::y#15
(signed word) atan2_16::y#16
(signed word) atan2_16::y#17
(signed word) atan2_16::y#18
(signed word) atan2_16::y#19
(signed word) atan2_16::y#2
(signed word) atan2_16::y#20
(signed word) atan2_16::y#3
(signed word) atan2_16::y#4
(signed word) atan2_16::y#5
(signed word) atan2_16::y#6
(signed word) atan2_16::y#7
(signed word) atan2_16::y#8
(signed word) atan2_16::y#9
(signed word) atan2_16::yd
(signed word) atan2_16::yd#0
(signed word) atan2_16::yd#1
(signed word) atan2_16::yd#2
(signed word) atan2_16::yd#3
(signed word) atan2_16::yd#4
(signed word) atan2_16::yd#5
(signed word) atan2_16::yd#6
(signed word) atan2_16::yd#7
(signed word) atan2_16::yd#8
(signed word) atan2_16::yd#9
(signed word) atan2_16::yi
(signed word) atan2_16::yi#0
(signed word) atan2_16::yi#1
(signed word) atan2_16::yi#10
(signed word) atan2_16::yi#11
(signed word) atan2_16::yi#12
(signed word) atan2_16::yi#13
(signed word) atan2_16::yi#14
(signed word) atan2_16::yi#15
(signed word) atan2_16::yi#2
(signed word) atan2_16::yi#3
(signed word) atan2_16::yi#4
(signed word) atan2_16::yi#5
(signed word) atan2_16::yi#6
(signed word) atan2_16::yi#7
(signed word) atan2_16::yi#8
(signed word) atan2_16::yi#9
(word*()) bsearch16u((word) bsearch16u::key , (word*) bsearch16u::items , (byte) bsearch16u::num)
(bool~) bsearch16u::$0
(word*~) bsearch16u::$1
(signed word~) bsearch16u::$10
(bool~) bsearch16u::$11
(bool~) bsearch16u::$12
(bool~) bsearch16u::$13
(bool~) bsearch16u::$14
(word*~) bsearch16u::$15
(byte~) bsearch16u::$16
(number~) bsearch16u::$17
(number~) bsearch16u::$18
(word*~) bsearch16u::$2
(word*~) bsearch16u::$3
(word*~) bsearch16u::$4
(bool~) bsearch16u::$5
(byte~) bsearch16u::$6
(word*~) bsearch16u::$7
(signed word~) bsearch16u::$8
(signed word~) bsearch16u::$9
(label) bsearch16u::@1
(label) bsearch16u::@10
(label) bsearch16u::@13
(label) bsearch16u::@15
(label) bsearch16u::@2
(label) bsearch16u::@3
(label) bsearch16u::@6
(label) bsearch16u::@7
(label) bsearch16u::@8
(label) bsearch16u::@9
(label) bsearch16u::@return
(word*) bsearch16u::items
(word*) bsearch16u::items#0
(word*) bsearch16u::items#1
(word*) bsearch16u::items#2
(word*) bsearch16u::items#3
(word*) bsearch16u::items#4
(word*) bsearch16u::items#5
(word*) bsearch16u::items#6
(word*) bsearch16u::items#7
(word*) bsearch16u::items#8
(word*) bsearch16u::items#9
(word) bsearch16u::key
(word) bsearch16u::key#0
(word) bsearch16u::key#1
(word) bsearch16u::key#2
(word) bsearch16u::key#3
(word) bsearch16u::key#4
(word) bsearch16u::key#5
(word) bsearch16u::key#6
(word) bsearch16u::key#7
(byte) bsearch16u::num
(byte) bsearch16u::num#0
(byte) bsearch16u::num#1
(byte) bsearch16u::num#2
(byte) bsearch16u::num#3
(byte) bsearch16u::num#4
(byte) bsearch16u::num#5
(byte) bsearch16u::num#6
(byte) bsearch16u::num#7
(byte) bsearch16u::num#8
(word*) bsearch16u::pivot
(word*) bsearch16u::pivot#0
(word*) bsearch16u::pivot#1
(word*) bsearch16u::pivot#2
(word*) bsearch16u::pivot#3
(signed word) bsearch16u::result
(signed word) bsearch16u::result#0
(signed word) bsearch16u::result#1
(word*) bsearch16u::return
(word*) bsearch16u::return#0
(word*) bsearch16u::return#1
(word*) bsearch16u::return#2
(word*) bsearch16u::return#3
(word*) bsearch16u::return#4
(word*) bsearch16u::return#5
(byte*) heap_head
(byte*) heap_head#0
(byte*) heap_head#1
(byte*) heap_head#10
(byte*) heap_head#11
(byte*) heap_head#12
(byte*) heap_head#13
(byte*) heap_head#14
(byte*) heap_head#15
(byte*) heap_head#16
(byte*) heap_head#17
(byte*) heap_head#18
(byte*) heap_head#19
(byte*) heap_head#2
(byte*) heap_head#20
(byte*) heap_head#21
(byte*) heap_head#22
(byte*) heap_head#23
(byte*) heap_head#24
(byte*) heap_head#25
(byte*) heap_head#26
(byte*) heap_head#27
(byte*) heap_head#28
(byte*) heap_head#29
(byte*) heap_head#3
(byte*) heap_head#30
(byte*) heap_head#31
(byte*) heap_head#32
(byte*) heap_head#33
(byte*) heap_head#34
(byte*) heap_head#35
(byte*) heap_head#36
(byte*) heap_head#37
(byte*) heap_head#38
(byte*) heap_head#39
(byte*) heap_head#4
(byte*) heap_head#40
(byte*) heap_head#41
(byte*) heap_head#42
(byte*) heap_head#43
(byte*) heap_head#44
(byte*) heap_head#45
(byte*) heap_head#46
(byte*) heap_head#47
(byte*) heap_head#48
(byte*) heap_head#49
(byte*) heap_head#5
(byte*) heap_head#50
(byte*) heap_head#51
(byte*) heap_head#52
(byte*) heap_head#53
(byte*) heap_head#54
(byte*) heap_head#55
(byte*) heap_head#56
(byte*) heap_head#57
(byte*) heap_head#58
(byte*) heap_head#59
(byte*) heap_head#6
(byte*) heap_head#60
(byte*) heap_head#61
(byte*) heap_head#62
(byte*) heap_head#63
(byte*) heap_head#64
(byte*) heap_head#65
(byte*) heap_head#66
(byte*) heap_head#67
(byte*) heap_head#68
(byte*) heap_head#7
(byte*) heap_head#8
(byte*) heap_head#9
(void()) init_angle_screen((byte*) init_angle_screen::screen)
(byte*~) init_angle_screen::$0
(byte*~) init_angle_screen::$1
(number~) init_angle_screen::$10
(number~) init_angle_screen::$11
(byte~) init_angle_screen::$12
(number~) init_angle_screen::$13
(number~) init_angle_screen::$14
(bool~) init_angle_screen::$15
(bool~) init_angle_screen::$16
(number~) init_angle_screen::$2
(number~) init_angle_screen::$3
(word~) init_angle_screen::$4
(signed word~) init_angle_screen::$5
(number~) init_angle_screen::$6
(word~) init_angle_screen::$7
(signed word~) init_angle_screen::$8
(word~) init_angle_screen::$9
(label) init_angle_screen::@1
(label) init_angle_screen::@2
(label) init_angle_screen::@3
(label) init_angle_screen::@5
(label) init_angle_screen::@return
(byte) init_angle_screen::ang_w
(byte) init_angle_screen::ang_w#0
(word) init_angle_screen::angle_w
(word) init_angle_screen::angle_w#0
(byte*) init_angle_screen::screen
(byte*) init_angle_screen::screen#0
(byte*) init_angle_screen::screen#1
(byte*) init_angle_screen::screen_bottomline
(byte*) init_angle_screen::screen_bottomline#0
(byte*) init_angle_screen::screen_bottomline#1
(byte*) init_angle_screen::screen_bottomline#2
(byte*) init_angle_screen::screen_bottomline#3
(byte*) init_angle_screen::screen_bottomline#4
(byte*) init_angle_screen::screen_bottomline#5
(byte*) init_angle_screen::screen_topline
(byte*) init_angle_screen::screen_topline#0
(byte*) init_angle_screen::screen_topline#1
(byte*) init_angle_screen::screen_topline#2
(byte*) init_angle_screen::screen_topline#3
(byte*) init_angle_screen::screen_topline#4
(byte*) init_angle_screen::screen_topline#5
(byte) init_angle_screen::x
(byte) init_angle_screen::x#0
(byte) init_angle_screen::x#1
(byte) init_angle_screen::x#2
(byte) init_angle_screen::x#3
(byte) init_angle_screen::xb
(byte) init_angle_screen::xb#0
(byte) init_angle_screen::xb#1
(byte) init_angle_screen::xb#2
(byte) init_angle_screen::xb#3
(signed word) init_angle_screen::xw
(signed word) init_angle_screen::xw#0
(byte) init_angle_screen::y
(byte) init_angle_screen::y#0
(byte) init_angle_screen::y#1
(byte) init_angle_screen::y#2
(byte) init_angle_screen::y#3
(byte) init_angle_screen::y#4
(byte) init_angle_screen::y#5
(signed word) init_angle_screen::yw
(signed word) init_angle_screen::yw#0
(void()) init_buckets((byte*) init_buckets::screen)
(number~) init_buckets::$0
(bool~) init_buckets::$1
(word~) init_buckets::$10
(bool~) init_buckets::$11
(word~) init_buckets::$12
(word~) init_buckets::$13
(byte~) init_buckets::$14
(bool~) init_buckets::$2
(number~) init_buckets::$3
(byte~) init_buckets::$4
(void*~) init_buckets::$5
(bool~) init_buckets::$6
(number~) init_buckets::$7
(bool~) init_buckets::$8
(word~) init_buckets::$9
(label) init_buckets::@1
(label) init_buckets::@11
(label) init_buckets::@2
(label) init_buckets::@3
(label) init_buckets::@4
(label) init_buckets::@5
(label) init_buckets::@6
(label) init_buckets::@7
(label) init_buckets::@8
(label) init_buckets::@9
(label) init_buckets::@return
(word*) init_buckets::bucket
(word*) init_buckets::bucket#0
(byte*) init_buckets::dist
(byte*) init_buckets::dist#0
(byte*) init_buckets::dist#1
(byte*) init_buckets::dist#2
(byte*) init_buckets::dist#3
(byte*) init_buckets::dist#4
(byte*) init_buckets::dist#5
(byte) init_buckets::distance
(byte) init_buckets::distance#0
(byte) init_buckets::i
(byte) init_buckets::i#0
(byte) init_buckets::i#1
(byte) init_buckets::i#2
(word) init_buckets::i1
(word) init_buckets::i1#0
(word) init_buckets::i1#1
(word) init_buckets::i1#2
(word) init_buckets::i2
(word) init_buckets::i2#0
(word) init_buckets::i2#1
(word) init_buckets::i2#2
(word) init_buckets::i2#3
(byte) init_buckets::i3
(byte) init_buckets::i3#0
(byte) init_buckets::i3#1
(byte) init_buckets::i3#2
(word) init_buckets::i4
(word) init_buckets::i4#0
(word) init_buckets::i4#1
(word) init_buckets::i4#2
(byte*) init_buckets::screen
(byte*) init_buckets::screen#0
(byte*) init_buckets::screen#1
(byte*) init_buckets::screen#10
(byte*) init_buckets::screen#11
(byte*) init_buckets::screen#2
(byte*) init_buckets::screen#3
(byte*) init_buckets::screen#4
(byte*) init_buckets::screen#5
(byte*) init_buckets::screen#6
(byte*) init_buckets::screen#7
(byte*) init_buckets::screen#8
(byte*) init_buckets::screen#9
(void()) init_dist_screen((byte*) init_dist_screen::screen)
(byte*~) init_dist_screen::$1
(number~) init_dist_screen::$10
(bool~) init_dist_screen::$11
(number~) init_dist_screen::$12
(number~) init_dist_screen::$13
(number~) init_dist_screen::$14
(number~) init_dist_screen::$15
(number~) init_dist_screen::$16
(word~) init_dist_screen::$17
(word~) init_dist_screen::$18
(byte~) init_dist_screen::$19
(number~) init_dist_screen::$2
(bool~) init_dist_screen::$20
(bool~) init_dist_screen::$21
(bool~) init_dist_screen::$3
(number~) init_dist_screen::$4
(number~) init_dist_screen::$5
(number~) init_dist_screen::$6
(number~) init_dist_screen::$7
(number~) init_dist_screen::$8
(word~) init_dist_screen::$9
(label) init_dist_screen::@1
(label) init_dist_screen::@11
(label) init_dist_screen::@15
(label) init_dist_screen::@16
(label) init_dist_screen::@17
(label) init_dist_screen::@18
(label) init_dist_screen::@2
(label) init_dist_screen::@3
(label) init_dist_screen::@4
(label) init_dist_screen::@5
(label) init_dist_screen::@6
(label) init_dist_screen::@7
(label) init_dist_screen::@8
(label) init_dist_screen::@return
(byte) init_dist_screen::d
(byte) init_dist_screen::d#0
(word) init_dist_screen::ds
(word) init_dist_screen::ds#0
(byte*) init_dist_screen::screen
(byte*) init_dist_screen::screen#0
(byte*) init_dist_screen::screen#1
(byte*) init_dist_screen::screen#2
(byte*) init_dist_screen::screen_bottomline
(byte*) init_dist_screen::screen_bottomline#0
(byte*) init_dist_screen::screen_bottomline#1
(byte*) init_dist_screen::screen_bottomline#10
(byte*) init_dist_screen::screen_bottomline#11
(byte*) init_dist_screen::screen_bottomline#12
(byte*) init_dist_screen::screen_bottomline#13
(byte*) init_dist_screen::screen_bottomline#2
(byte*) init_dist_screen::screen_bottomline#3
(byte*) init_dist_screen::screen_bottomline#4
(byte*) init_dist_screen::screen_bottomline#5
(byte*) init_dist_screen::screen_bottomline#6
(byte*) init_dist_screen::screen_bottomline#7
(byte*) init_dist_screen::screen_bottomline#8
(byte*) init_dist_screen::screen_bottomline#9
(byte*) init_dist_screen::screen_topline
(byte*) init_dist_screen::screen_topline#0
(byte*) init_dist_screen::screen_topline#1
(byte*) init_dist_screen::screen_topline#10
(byte*) init_dist_screen::screen_topline#11
(byte*) init_dist_screen::screen_topline#12
(byte*) init_dist_screen::screen_topline#13
(byte*) init_dist_screen::screen_topline#2
(byte*) init_dist_screen::screen_topline#3
(byte*) init_dist_screen::screen_topline#4
(byte*) init_dist_screen::screen_topline#5
(byte*) init_dist_screen::screen_topline#6
(byte*) init_dist_screen::screen_topline#7
(byte*) init_dist_screen::screen_topline#8
(byte*) init_dist_screen::screen_topline#9
(byte) init_dist_screen::x
(byte) init_dist_screen::x#0
(byte) init_dist_screen::x#1
(byte) init_dist_screen::x#2
(byte) init_dist_screen::x#3
(byte) init_dist_screen::x#4
(byte) init_dist_screen::x#5
(byte) init_dist_screen::x#6
(byte) init_dist_screen::x#7
(byte) init_dist_screen::x2
(byte) init_dist_screen::x2#0
(byte) init_dist_screen::x2#1
(byte) init_dist_screen::x2#2
(byte) init_dist_screen::xb
(byte) init_dist_screen::xb#0
(byte) init_dist_screen::xb#1
(byte) init_dist_screen::xb#2
(byte) init_dist_screen::xb#3
(byte) init_dist_screen::xb#4
(byte) init_dist_screen::xb#5
(byte) init_dist_screen::xb#6
(byte) init_dist_screen::xb#7
(byte) init_dist_screen::xd
(byte) init_dist_screen::xd#0
(word) init_dist_screen::xds
(word) init_dist_screen::xds#0
(byte) init_dist_screen::y
(byte) init_dist_screen::y#0
(byte) init_dist_screen::y#1
(byte) init_dist_screen::y#10
(byte) init_dist_screen::y#11
(byte) init_dist_screen::y#12
(byte) init_dist_screen::y#13
(byte) init_dist_screen::y#2
(byte) init_dist_screen::y#3
(byte) init_dist_screen::y#4
(byte) init_dist_screen::y#5
(byte) init_dist_screen::y#6
(byte) init_dist_screen::y#7
(byte) init_dist_screen::y#8
(byte) init_dist_screen::y#9
(byte) init_dist_screen::y2
(byte) init_dist_screen::y2#0
(byte) init_dist_screen::y2#1
(byte) init_dist_screen::y2#2
(byte) init_dist_screen::yd
(byte) init_dist_screen::yd#0
(word) init_dist_screen::yds
(word) init_dist_screen::yds#0
(word) init_dist_screen::yds#1
(word) init_dist_screen::yds#2
(word) init_dist_screen::yds#3
(word) init_dist_screen::yds#4
(word) init_dist_screen::yds#5
(word) init_dist_screen::yds#6
(void()) init_squares()
(byte~) init_squares::$0
(void*~) init_squares::$1
(number~) init_squares::$2
(number~) init_squares::$3
(number~) init_squares::$4
(bool~) init_squares::$5
(label) init_squares::@1
(label) init_squares::@3
(label) init_squares::@return
(byte) init_squares::i
(byte) init_squares::i#0
(byte) init_squares::i#1
(byte) init_squares::i#2
(word) init_squares::sqr
(word) init_squares::sqr#0
(word) init_squares::sqr#1
(word) init_squares::sqr#2
(word*) init_squares::squares
(word*) init_squares::squares#0
(word*) init_squares::squares#1
(word*) init_squares::squares#2
(void()) main()
(bool~) main::$10
(word~) main::$11
(byte*~) main::$12
(bool~) main::$13
(bool~) main::$14
(bool~) main::$15
(word~) main::$16
(byte*~) main::$17
(bool~) main::$18
(word~) main::$19
(byte~) main::$20
(word~) main::$21
(byte~) main::$22
(number~) main::$3
(number~) main::$4
(number~) main::$5
(bool~) main::$6
(bool~) main::$7
(bool~) main::$8
(bool~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@3
(label) main::@6
(label) main::@8
(label) main::@9
(label) main::@return
(byte*) main::angle
(byte*) main::angle#0
(byte*) main::angle#1
(byte*) main::angle#2
(word*) main::bucket
(word*) main::bucket#0
(word*) main::bucket#1
(word*) main::bucket1
(word*) main::bucket1#0
(word*) main::bucket1#1
(byte) main::bucket_idx
(byte) main::bucket_idx#0
(byte) main::bucket_idx#1
(byte) main::bucket_idx#10
(byte) main::bucket_idx#11
(byte) main::bucket_idx#2
(byte) main::bucket_idx#3
(byte) main::bucket_idx#4
(byte) main::bucket_idx#5
(byte) main::bucket_idx#6
(byte) main::bucket_idx#7
(byte) main::bucket_idx#8
(byte) main::bucket_idx#9
(byte) main::bucket_size
(byte) main::bucket_size#0
(byte) main::bucket_size#1
(byte) main::bucket_size#2
(byte) main::bucket_size1
(byte) main::bucket_size1#0
(byte) main::bucket_size1#1
(byte) main::bucket_size1#2
(byte*) main::dist
(byte*) main::dist#0
(byte*) main::dist#1
(byte*) main::dist#2
(word) main::i
(word) main::i#0
(word) main::i#1
(word) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(byte) main::i2
(byte) main::i2#0
(byte) main::i2#1
(byte) main::i2#2
(byte*) main::mix
(byte*) main::mix#0
(byte*) main::mix#1
(byte*) main::mix#2
(byte*) main::sc
(byte*) main::sc#0
(byte*) main::sc1
(byte*) main::sc1#0
(void*()) malloc((word) malloc::size)
(byte*~) malloc::$0
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::mem#0
(void*) malloc::return
(void*) malloc::return#0
(void*) malloc::return#1
(void*) malloc::return#2
(void*) malloc::return#3
(void*) malloc::return#4
(void*) malloc::return#5
(void*) malloc::return#6
(word) malloc::size
(word) malloc::size#0
(word) malloc::size#1
(word) malloc::size#2
(word()) sqr((byte) sqr::val)
(byte~) sqr::$0
(label) sqr::@return
(word) sqr::return
(word) sqr::return#0
(word) sqr::return#1
(word) sqr::return#2
(word) sqr::return#3
(word) sqr::return#4
(word) sqr::return#5
(word) sqr::return#6
(byte) sqr::val
(byte) sqr::val#0
(byte) sqr::val#1
(byte) sqr::val#2
(byte()) sqrt((word) sqrt::val)
(word*~) sqrt::$0
(word~) sqrt::$1
(byte~) sqrt::$2
(word~) sqrt::$3
(label) sqrt::@2
(label) sqrt::@return
(word*) sqrt::found
(word*) sqrt::found#0
(byte) sqrt::return
(byte) sqrt::return#0
(byte) sqrt::return#1
(byte) sqrt::return#2
(byte) sqrt::return#3
(byte) sqrt::return#4
(byte) sqrt::sq
(byte) sqrt::sq#0
(word) sqrt::val
(word) sqrt::val#0
(word) sqrt::val#1

Fixing inline constructor with init_angle_screen::$17 ← (byte)init_angle_screen::$3 w= (byte)0
Fixing inline constructor with init_angle_screen::$18 ← (byte)init_angle_screen::$6 w= (byte)0
Successful SSA optimization Pass2FixInlineConstructorsNew
Adding number conversion cast (unumber) 0 in (bool~) bsearch16u::$5 ← (byte) bsearch16u::num#3 > (number) 0
Adding number conversion cast (unumber) 1 in (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#4 >> (number) 1
Adding number conversion cast (snumber) 0 in (bool~) bsearch16u::$11 ← (signed word) bsearch16u::result#0 == (number) 0
Adding number conversion cast (snumber) 0 in (bool~) bsearch16u::$13 ← (signed word) bsearch16u::result#1 > (number) 0
Adding number conversion cast (unumber) 1 in (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bsearch16u::$17 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) bsearch16u::$17 in (number~) bsearch16u::$17 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 1 in (number~) bsearch16u::$18 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) bsearch16u::$18 in (number~) bsearch16u::$18 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) $ff in (byte) NUM_SQUARES#0 ← (number) $ff
Adding number conversion cast (unumber) 0 in (word) init_squares::sqr#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (number) 1
Adding number conversion cast (unumber) init_squares::$2 in (number~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (unumber)(number) 1
Adding number conversion cast (unumber) 2 in (number~) init_squares::$3 ← (byte) init_squares::i#2 * (number) 2
Adding number conversion cast (unumber) init_squares::$3 in (number~) init_squares::$3 ← (byte) init_squares::i#2 * (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) init_squares::$4 ← (unumber~) init_squares::$3 + (number) 1
Adding number conversion cast (unumber) init_squares::$4 in (number~) init_squares::$4 ← (unumber~) init_squares::$3 + (unumber)(number) 1
Adding number conversion cast (unumber) $f in (byte) CORDIC_ITERATIONS_16#0 ← (number) $f
Adding number conversion cast (snumber) 0 in (bool~) atan2_16::$0 ← (signed word) atan2_16::y#1 >= (number) 0
Adding number conversion cast (snumber) 0 in (bool~) atan2_16::$5 ← (signed word) atan2_16::x#1 >= (number) 0
Adding number conversion cast (unumber) 0 in (word) atan2_16::angle#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) atan2_16::$16 ← (byte) CORDIC_ITERATIONS_16#0 - (number) 1
Adding number conversion cast (unumber) atan2_16::$16 in (number~) atan2_16::$16 ← (byte) CORDIC_ITERATIONS_16#0 - (unumber)(number) 1
Adding number conversion cast (snumber) 0 in (bool~) atan2_16::$17 ← (signed word) atan2_16::yi#3 == (number) 0
Adding number conversion cast (unumber) 2 in (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 / (number) 2
Adding number conversion cast (snumber) 0 in (bool~) atan2_16::$10 ← (signed word) atan2_16::x#4 < (number) 0
Adding number conversion cast (unumber) 2 in (bool~) atan2_16::$19 ← (byte) atan2_16::shift#2 >= (number) 2
Adding number conversion cast (snumber) 2 in (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (number) 2
Adding number conversion cast (snumber) 2 in (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (number) 2
Adding number conversion cast (unumber) 2 in (byte) atan2_16::shift#1 ← (byte) atan2_16::shift#3 - (number) 2
Adding number conversion cast (unumber) 0 in (bool~) atan2_16::$25 ← (number) 0 != (byte) atan2_16::shift#4
Adding number conversion cast (snumber) 0 in (bool~) atan2_16::$21 ← (signed word) atan2_16::yi#5 >= (number) 0
Adding number conversion cast (snumber) 1 in (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#4 >> (number) 1
Adding number conversion cast (snumber) 1 in (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#4 >> (number) 1
Adding number conversion cast (snumber) 0 in (bool~) atan2_16::$13 ← (signed word) atan2_16::y#4 < (number) 0
Adding number conversion cast (unumber) $8000 in (number~) atan2_16::$12 ← (number) $8000 - (word) atan2_16::angle#9
Adding number conversion cast (unumber) atan2_16::$12 in (number~) atan2_16::$12 ← (unumber)(number) $8000 - (word) atan2_16::angle#9
Adding number conversion cast (unumber) 4 in (number~) main::$3 ← *((byte*) main::dist#2) * (number) 4
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← *((byte*) main::dist#2) * (unumber)(number) 4
Adding number conversion cast (unumber) 2 in (number~) main::$4 ← *((byte*) main::angle#2) / (number) 2
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← *((byte*) main::angle#2) / (unumber)(number) 2
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (unumber~) main::$3 + (unumber~) main::$4
Adding number conversion cast (unumber) 0 in (byte) main::bucket_idx#0 ← (number) 0
Adding number conversion cast (unumber) $fe in (bool~) main::$7 ← *((byte*) RASTER#0) != (number) $fe
Adding number conversion cast (unumber) $ff in (bool~) main::$8 ← *((byte*) RASTER#0) != (number) $ff
Adding number conversion cast (unumber) 0 in (bool~) main::$9 ← (byte) main::bucket_size#0 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$14 ← (byte) main::bucket_size1#0 > (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::i1#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::i2#0 ← (number) 0
Adding number conversion cast (unumber) $100 in (word) NUM_BUCKETS#0 ← (number) $100
Adding number conversion cast (unumber) 1 in (number~) init_buckets::$0 ← (word) NUM_BUCKETS#0 - (number) 1
Adding number conversion cast (unumber) init_buckets::$0 in (number~) init_buckets::$0 ← (word) NUM_BUCKETS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) init_buckets::$3 ← (word) NUM_BUCKETS#0 - (number) 1
Adding number conversion cast (unumber) init_buckets::$3 in (number~) init_buckets::$3 ← (word) NUM_BUCKETS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) init_buckets::$7 ← (word) NUM_BUCKETS#0 - (number) 1
Adding number conversion cast (unumber) init_buckets::$7 in (number~) init_buckets::$7 ← (word) NUM_BUCKETS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (number) 0
Adding number conversion cast (unumber) $28*$c in (byte*~) init_angle_screen::$0 ← (byte*) init_angle_screen::screen#1 + (number) $28*(number) $c
Adding number conversion cast (unumber) $28*$c in (byte*~) init_angle_screen::$1 ← (byte*) init_angle_screen::screen#1 + (number) $28*(number) $c
Adding number conversion cast (unumber) 0 in (byte) init_angle_screen::x#0 ← (number) 0
Adding number conversion cast (unumber) $27 in (byte) init_angle_screen::xb#0 ← (number) $27
Adding number conversion cast (unumber) 2 in (number~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 * (number) 2
Adding number conversion cast (unumber) init_angle_screen::$2 in (number~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $27 in (number~) init_angle_screen::$3 ← (number) $27 - (unumber~) init_angle_screen::$2
Adding number conversion cast (unumber) init_angle_screen::$3 in (number~) init_angle_screen::$3 ← (unumber)(number) $27 - (unumber~) init_angle_screen::$2
Adding number conversion cast (unumber) 2 in (number~) init_angle_screen::$6 ← (byte) init_angle_screen::y#2 * (number) 2
Adding number conversion cast (unumber) init_angle_screen::$6 in (number~) init_angle_screen::$6 ← (byte) init_angle_screen::y#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $80 in (number~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (number) $80
Adding number conversion cast (unumber) init_angle_screen::$10 in (number~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (unumber)(number) $80
Adding number conversion cast (unumber) init_angle_screen::$11 in (number~) init_angle_screen::$11 ← > (unumber~) init_angle_screen::$10
Adding number conversion cast (unumber) $80 in (number~) init_angle_screen::$13 ← (number) $80 + (byte) init_angle_screen::ang_w#0
Adding number conversion cast (unumber) init_angle_screen::$13 in (number~) init_angle_screen::$13 ← (unumber)(number) $80 + (byte) init_angle_screen::ang_w#0
Adding number conversion cast (unumber) $80 in (number~) init_angle_screen::$14 ← (number) $80 - (byte) init_angle_screen::ang_w#0
Adding number conversion cast (unumber) init_angle_screen::$14 in (number~) init_angle_screen::$14 ← (unumber)(number) $80 - (byte) init_angle_screen::ang_w#0
Adding number conversion cast (unumber) $13 in (bool~) init_angle_screen::$15 ← (byte) init_angle_screen::x#1 <= (number) $13
Adding number conversion cast (unumber) $28 in (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#3 - (number) $28
Adding number conversion cast (unumber) $28 in (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#3 + (number) $28
Adding number conversion cast (unumber) $30 in (byte) NUM_SQUARES#3 ← (number) $30
Adding number conversion cast (unumber) $28*$18 in (byte*~) init_dist_screen::$1 ← (byte*) init_dist_screen::screen#1 + (number) $28*(number) $18
Adding number conversion cast (unumber) 2 in (number~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (number) 2
Adding number conversion cast (unumber) init_dist_screen::$2 in (number~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $18 in (bool~) init_dist_screen::$3 ← (byte) init_dist_screen::y2#0 >= (number) $18
Adding number conversion cast (unumber) $18 in (number~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (number) $18
Adding number conversion cast (unumber) init_dist_screen::$6 in (number~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (unumber)(number) $18
Adding number conversion cast (unumber) init_dist_screen::$7 in (number~) init_dist_screen::$7 ← (unumber~) init_dist_screen::$6
Adding number conversion cast (unumber) $18 in (number~) init_dist_screen::$4 ← (number) $18 - (byte) init_dist_screen::y2#2
Adding number conversion cast (unumber) init_dist_screen::$4 in (number~) init_dist_screen::$4 ← (unumber)(number) $18 - (byte) init_dist_screen::y2#2
Adding number conversion cast (unumber) init_dist_screen::$5 in (number~) init_dist_screen::$5 ← (unumber~) init_dist_screen::$4
Adding number conversion cast (unumber) init_dist_screen::$8 in (byte*) heap_head#65 ← phi( init_dist_screen::@2/(byte*) heap_head#66 init_dist_screen::@3/(byte*) heap_head#67 )
  (byte) init_dist_screen::y#11 ← phi( init_dist_screen::@2/(byte) init_dist_screen::y#12 init_dist_screen::@3/(byte) init_dist_screen::y#13 )
  (byte*) init_dist_screen::screen_bottomline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_bottomline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_bottomline#12 )
  (byte*) init_dist_screen::screen_topline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_topline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_topline#12 )
  (byte) NUM_SQUARES#40 ← phi( init_dist_screen::@2/(byte) NUM_SQUARES#41 init_dist_screen::@3/(byte) NUM_SQUARES#42 )
  (word*) SQUARES#18 ← phi( init_dist_screen::@2/(word*) SQUARES#28 init_dist_screen::@3/(word*) SQUARES#29 )
  (number~) init_dist_screen::$8 ← phi( init_dist_screen::@2/(unumber~) init_dist_screen::$7 init_dist_screen::@3/(unumber~) init_dist_screen::$5 )
Adding number conversion cast (unumber) 0 in (byte) init_dist_screen::x#0 ← (number) 0
Adding number conversion cast (unumber) $27 in (byte) init_dist_screen::xb#0 ← (number) $27
Adding number conversion cast (unumber) 2 in (number~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (number) 2
Adding number conversion cast (unumber) init_dist_screen::$10 in (number~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $27 in (bool~) init_dist_screen::$11 ← (byte) init_dist_screen::x2#0 >= (number) $27
Adding number conversion cast (unumber) $27 in (number~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (number) $27
Adding number conversion cast (unumber) init_dist_screen::$14 in (number~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (unumber)(number) $27
Adding number conversion cast (unumber) init_dist_screen::$15 in (number~) init_dist_screen::$15 ← (unumber~) init_dist_screen::$14
Adding number conversion cast (unumber) $27 in (number~) init_dist_screen::$12 ← (number) $27 - (byte) init_dist_screen::x2#2
Adding number conversion cast (unumber) init_dist_screen::$12 in (number~) init_dist_screen::$12 ← (unumber)(number) $27 - (byte) init_dist_screen::x2#2
Adding number conversion cast (unumber) init_dist_screen::$13 in (number~) init_dist_screen::$13 ← (unumber~) init_dist_screen::$12
Adding number conversion cast (unumber) init_dist_screen::$16 in (byte*) heap_head#54 ← phi( init_dist_screen::@6/(byte*) heap_head#59 init_dist_screen::@7/(byte*) heap_head#60 )
  (byte) init_dist_screen::y#6 ← phi( init_dist_screen::@6/(byte) init_dist_screen::y#7 init_dist_screen::@7/(byte) init_dist_screen::y#8 )
  (byte) init_dist_screen::xb#4 ← phi( init_dist_screen::@6/(byte) init_dist_screen::xb#5 init_dist_screen::@7/(byte) init_dist_screen::xb#6 )
  (byte*) init_dist_screen::screen_bottomline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_bottomline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_bottomline#7 )
  (byte) init_dist_screen::x#5 ← phi( init_dist_screen::@6/(byte) init_dist_screen::x#6 init_dist_screen::@7/(byte) init_dist_screen::x#7 )
  (byte*) init_dist_screen::screen_topline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_topline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_topline#7 )
  (byte) NUM_SQUARES#20 ← phi( init_dist_screen::@6/(byte) NUM_SQUARES#27 init_dist_screen::@7/(byte) NUM_SQUARES#28 )
  (word) init_dist_screen::yds#2 ← phi( init_dist_screen::@6/(word) init_dist_screen::yds#3 init_dist_screen::@7/(word) init_dist_screen::yds#4 )
  (word*) SQUARES#19 ← phi( init_dist_screen::@6/(word*) SQUARES#30 init_dist_screen::@7/(word*) SQUARES#31 )
  (number~) init_dist_screen::$16 ← phi( init_dist_screen::@6/(unumber~) init_dist_screen::$15 init_dist_screen::@7/(unumber~) init_dist_screen::$13 )
Adding number conversion cast (unumber) $13 in (bool~) init_dist_screen::$20 ← (byte) init_dist_screen::x#1 <= (number) $13
Adding number conversion cast (unumber) $28 in (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#3 - (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) HEAP_TOP#0 ← (byte*)(number) $a000
Inlining cast (void*) malloc::return#0 ← (void*)(byte*) malloc::mem#0
Inlining cast (signed word~) bsearch16u::$8 ← (signed word)(word) bsearch16u::key#1
Inlining cast (signed word~) bsearch16u::$9 ← (signed word)*((word*) bsearch16u::pivot#0)
Inlining cast (byte) NUM_SQUARES#0 ← (unumber)(number) $ff
Inlining cast (word*) SQUARES#1 ← (word*)(void*~) init_squares::$1
Inlining cast (word) init_squares::sqr#0 ← (unumber)(number) 0
Inlining cast (byte~) sqrt::$2 ← (byte)(word~) sqrt::$1
Inlining cast (byte) CORDIC_ITERATIONS_16#0 ← (unumber)(number) $f
Inlining cast (word) atan2_16::angle#0 ← (unumber)(number) 0
Inlining cast (byte*) SCREEN_FILL#0 ← (byte*)(number) $400
Inlining cast (byte) main::bucket_idx#0 ← (unumber)(number) 0
Inlining cast (word~) main::$11 ← (word)(byte) main::bucket_idx#4
Inlining cast (byte) main::i1#0 ← (unumber)(number) 0
Inlining cast (word~) main::$16 ← (word)(byte) main::bucket_idx#5
Inlining cast (byte) main::i2#0 ← (unumber)(number) 0
Inlining cast (word) NUM_BUCKETS#0 ← (unumber)(number) $100
Inlining cast *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (unumber)(number) 0
Inlining cast *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12) ← (word*)(void*~) init_buckets::$5
Inlining cast *((byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (unumber)(number) 0
Inlining cast (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0
Inlining cast (byte) init_angle_screen::x#0 ← (unumber)(number) 0
Inlining cast (byte) init_angle_screen::xb#0 ← (unumber)(number) $27
Inlining cast (signed word~) init_angle_screen::$5 ← (signed word)(word~) init_angle_screen::$4
Inlining cast (signed word~) init_angle_screen::$8 ← (signed word)(word~) init_angle_screen::$7
Inlining cast (byte) NUM_SQUARES#3 ← (unumber)(number) $30
Inlining cast (byte) init_dist_screen::x#0 ← (unumber)(number) 0
Inlining cast (byte) init_dist_screen::xb#0 ← (unumber)(number) $27
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 40960
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $8000
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 4
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $fe
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $27
Simplifying constant integer cast 2
Simplifying constant integer cast $27
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $80
Simplifying constant integer cast $80
Simplifying constant integer cast $13
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $30
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $18
Simplifying constant integer cast $18
Simplifying constant integer cast 0
Simplifying constant integer cast $27
Simplifying constant integer cast 2
Simplifying constant integer cast $27
Simplifying constant integer cast $27
Simplifying constant integer cast $27
Simplifying constant integer cast $13
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $f
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 2
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 1
Finalized signed number type (signed byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (word) $8000
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $fe
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) bsearch16u::$17 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) bsearch16u::$18 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (byte) 1
Inferred type updated to byte in (unumber~) init_squares::$3 ← (byte) init_squares::i#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1
Inferred type updated to byte in (unumber~) atan2_16::$16 ← (byte) CORDIC_ITERATIONS_16#0 - (byte) 1
Inferred type updated to word in (unumber~) atan2_16::$12 ← (word) $8000 - (word) atan2_16::angle#9
Inferred type updated to byte in (unumber~) main::$3 ← *((byte*) main::dist#2) * (byte) 4
Inferred type updated to byte in (unumber~) main::$4 ← *((byte*) main::angle#2) / (byte) 2
Inferred type updated to byte in (unumber~) main::$5 ← (byte~) main::$3 + (byte~) main::$4
Inferred type updated to word in (unumber~) init_buckets::$0 ← (word) NUM_BUCKETS#0 - (byte) 1
Inferred type updated to word in (unumber~) init_buckets::$3 ← (word) NUM_BUCKETS#0 - (byte) 1
Inferred type updated to word in (unumber~) init_buckets::$7 ← (word) NUM_BUCKETS#0 - (byte) 1
Inferred type updated to byte in (unumber~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2
Inferred type updated to byte in (unumber~) init_angle_screen::$6 ← (byte) init_angle_screen::y#2 * (byte) 2
Inferred type updated to word in (unumber~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80
Inferred type updated to byte in (unumber~) init_angle_screen::$11 ← > (word~) init_angle_screen::$10
Inferred type updated to byte in (unumber~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0
Inferred type updated to byte in (unumber~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0
Inferred type updated to byte in (unumber~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (byte) $18
Inferred type updated to byte in (unumber~) init_dist_screen::$7 ← (byte~) init_dist_screen::$6
Inferred type updated to byte in (unumber~) init_dist_screen::$4 ← (byte) $18 - (byte) init_dist_screen::y2#2
Inferred type updated to byte in (unumber~) init_dist_screen::$5 ← (byte~) init_dist_screen::$4
Inferred type updated to byte for (unumber~) init_dist_screen::$8
Inferred type updated to byte in (unumber~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (byte) $27
Inferred type updated to byte in (unumber~) init_dist_screen::$15 ← (byte~) init_dist_screen::$14
Inferred type updated to byte in (unumber~) init_dist_screen::$12 ← (byte) $27 - (byte) init_dist_screen::x2#2
Inferred type updated to byte in (unumber~) init_dist_screen::$13 ← (byte~) init_dist_screen::$12
Inferred type updated to byte for (unumber~) init_dist_screen::$16
Inversing boolean not [27] (bool~) bsearch16u::$12 ← (signed word) bsearch16u::result#0 != (signed byte) 0 from [26] (bool~) bsearch16u::$11 ← (signed word) bsearch16u::result#0 == (signed byte) 0
Inversing boolean not [34] (bool~) bsearch16u::$14 ← (signed word) bsearch16u::result#1 <= (signed byte) 0 from [33] (bool~) bsearch16u::$13 ← (signed word) bsearch16u::result#1 > (signed byte) 0
Inversing boolean not [135] (bool~) atan2_16::$18 ← (signed word) atan2_16::yi#3 != (signed byte) 0 from [134] (bool~) atan2_16::$17 ← (signed word) atan2_16::yi#3 == (signed byte) 0
Inversing boolean not [144] (bool~) atan2_16::$11 ← (signed word) atan2_16::x#4 >= (signed byte) 0 from [143] (bool~) atan2_16::$10 ← (signed word) atan2_16::x#4 < (signed byte) 0
Inversing boolean not [155] (bool~) atan2_16::$20 ← (byte) 0 == (byte) atan2_16::shift#4 from [154] (bool~) atan2_16::$25 ← (byte) 0 != (byte) atan2_16::shift#4
Inversing boolean not [179] (bool~) atan2_16::$14 ← (signed word) atan2_16::y#4 >= (signed byte) 0 from [178] (bool~) atan2_16::$13 ← (signed word) atan2_16::y#4 < (signed byte) 0
Inversing boolean not [240] (bool~) main::$10 ← (byte) main::bucket_size#0 <= (byte) 0 from [239] (bool~) main::$9 ← (byte) main::bucket_size#0 > (byte) 0
Inversing boolean not [246] (bool~) main::$15 ← (byte) main::bucket_size1#0 <= (byte) 0 from [245] (bool~) main::$14 ← (byte) main::bucket_size1#0 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) HEAP_TOP#0 = (byte*) heap_head#0 (byte*) heap_head#55 (byte*) heap_head#48 (byte*) heap_head#44 (byte*) heap_head#40 (byte*) heap_head#34 
Alias (byte*) malloc::mem#0 = (byte*~) malloc::$0 
Alias (void*) malloc::return#0 = (void*) malloc::return#4 (void*) malloc::return#1 
Alias (byte*) heap_head#1 = (byte*) heap_head#14 (byte*) heap_head#2 
Alias (byte) bsearch16u::num#3 = (byte) bsearch16u::num#4 (byte) bsearch16u::num#8 (byte) bsearch16u::num#6 
Alias (word*) bsearch16u::items#2 = (word*) bsearch16u::items#6 (word*) bsearch16u::items#3 (word*) bsearch16u::items#9 (word*) bsearch16u::items#4 (word*~) bsearch16u::$3 (word*) bsearch16u::items#5 
Alias (word) bsearch16u::key#1 = (word) bsearch16u::key#3 (word) bsearch16u::key#2 (word) bsearch16u::key#7 (word) bsearch16u::key#6 
Alias (word*) bsearch16u::pivot#0 = (word*~) bsearch16u::$7 (word*) bsearch16u::pivot#3 (word*) bsearch16u::pivot#1 (word*) bsearch16u::return#0 (word*) bsearch16u::pivot#2 
Alias (signed word) bsearch16u::result#0 = (signed word~) bsearch16u::$10 (signed word) bsearch16u::result#1 
Alias (word*) bsearch16u::return#1 = (word*) bsearch16u::return#4 
Alias (word*) bsearch16u::items#0 = (word*~) bsearch16u::$15 
Alias (word*~) bsearch16u::$2 = (word*~) bsearch16u::$1 
Alias (word*) bsearch16u::return#2 = (word*~) bsearch16u::$4 
Alias (word) malloc::size#0 = (byte~) init_squares::$0 
Alias (void*) malloc::return#2 = (void*) malloc::return#5 
Alias (byte) NUM_SQUARES#6 = (byte) NUM_SQUARES#7 
Alias (byte*) heap_head#15 = (byte*) heap_head#3 
Alias (byte*) heap_head#16 = (byte*) heap_head#27 (byte*) heap_head#4 
Alias (word*) SQUARES#17 = (word*) SQUARES#8 (word*) SQUARES#2 
Alias (word) sqr::return#0 = (word) sqr::return#4 (word) sqr::return#1 
Alias (word*) bsearch16u::return#3 = (word*) bsearch16u::return#5 
Alias (word*) SQUARES#10 = (word*) SQUARES#11 
Alias (word*) sqrt::found#0 = (word*~) sqrt::$0 
Alias (byte) sqrt::return#0 = (byte) sqrt::sq#0 (byte~) sqrt::$2 (byte) sqrt::return#3 (byte) sqrt::return#1 
Alias (byte) NUM_SQUARES#0 = (byte) NUM_SQUARES#29 (byte) NUM_SQUARES#26 (byte) NUM_SQUARES#22 (byte) NUM_SQUARES#17 
Alias (word*) SQUARES#0 = (word*) SQUARES#40 (word*) SQUARES#37 (word*) SQUARES#33 (word*) SQUARES#25 
Alias (signed word) atan2_16::y#1 = (signed word) atan2_16::y#2 (signed word~) atan2_16::$3 (signed word) atan2_16::y#3 
Alias (signed word) atan2_16::x#5 = (signed word) atan2_16::x#9 (signed word) atan2_16::x#6 
Alias (signed word~) atan2_16::$2 = (signed word~) atan2_16::$1 
Alias (signed word) atan2_16::yi#0 = (signed word~) atan2_16::$4 (signed word) atan2_16::yi#12 (signed word) atan2_16::yi#13 
Alias (signed word) atan2_16::x#1 = (signed word) atan2_16::x#2 (signed word~) atan2_16::$8 (signed word) atan2_16::x#3 
Alias (signed word) atan2_16::y#12 = (signed word) atan2_16::y#15 (signed word) atan2_16::y#13 
Alias (signed word~) atan2_16::$7 = (signed word~) atan2_16::$6 
Alias (signed word) atan2_16::xi#0 = (signed word~) atan2_16::$9 
Alias (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#6 (signed word) atan2_16::xd#0 
Alias (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#4 (signed word) atan2_16::yd#0 
Alias (byte) atan2_16::i#2 = (byte) atan2_16::i#6 (byte) atan2_16::shift#0 
Alias (word) atan2_16::angle#12 = (word) atan2_16::angle#19 
Alias (signed word) atan2_16::x#17 = (signed word) atan2_16::x#7 
Alias (signed word) atan2_16::y#19 = (signed word) atan2_16::y#7 
Alias (signed word) atan2_16::xd#3 = (signed word) atan2_16::xd#7 (signed word) atan2_16::xd#8 (signed word) atan2_16::xd#4 
Alias (signed word) atan2_16::yd#3 = (signed word) atan2_16::yd#7 (signed word) atan2_16::yd#8 (signed word) atan2_16::yd#4 
Alias (byte) atan2_16::shift#2 = (byte) atan2_16::shift#3 (byte) atan2_16::shift#4 
Alias (signed word) atan2_16::yi#10 = (signed word) atan2_16::yi#15 (signed word) atan2_16::yi#14 (signed word) atan2_16::yi#11 
Alias (signed word) atan2_16::xi#10 = (signed word) atan2_16::xi#12 (signed word) atan2_16::xi#11 (signed word) atan2_16::xi#9 
Alias (byte) atan2_16::i#10 = (byte) atan2_16::i#11 (byte) atan2_16::i#8 (byte) atan2_16::i#9 
Alias (word) atan2_16::angle#16 = (word) atan2_16::angle#20 (word) atan2_16::angle#18 (word) atan2_16::angle#17 
Alias (signed word) atan2_16::x#14 = (signed word) atan2_16::x#18 (signed word) atan2_16::x#16 (signed word) atan2_16::x#15 
Alias (signed word) atan2_16::y#16 = (signed word) atan2_16::y#20 (signed word) atan2_16::y#18 (signed word) atan2_16::y#17 
Alias (signed word) atan2_16::xi#4 = (signed word) atan2_16::xi#7 (signed word) atan2_16::xi#5 
Alias (signed word) atan2_16::yd#5 = (signed word) atan2_16::yd#9 (signed word) atan2_16::yd#6 
Alias (signed word) atan2_16::yi#5 = (signed word) atan2_16::yi#6 (signed word) atan2_16::yi#7 
Alias (signed word) atan2_16::xd#5 = (signed word) atan2_16::xd#9 (signed word) atan2_16::xd#6 
Alias (byte) atan2_16::i#3 = (byte) atan2_16::i#7 (byte) atan2_16::i#4 
Alias (word) atan2_16::angle#14 = (word) atan2_16::angle#7 (word) atan2_16::angle#8 
Alias (signed word) atan2_16::x#11 = (signed word) atan2_16::x#13 (signed word) atan2_16::x#12 
Alias (signed word) atan2_16::y#10 = (signed word) atan2_16::y#14 (signed word) atan2_16::y#11 
Alias (word) atan2_16::angle#1 = (word) atan2_16::angle#9 
Alias (signed word) atan2_16::y#5 = (signed word) atan2_16::y#6 
Alias (word) atan2_16::angle#4 = (word~) atan2_16::$12 
Alias (word) atan2_16::return#0 = (word) atan2_16::angle#10 (word) atan2_16::return#3 (word) atan2_16::return#1 
Alias (word) atan2_16::angle#11 = (word) atan2_16::angle#15 
Alias (word) atan2_16::angle#5 = (word~) atan2_16::$15 
Alias (byte) NUM_SQUARES#1 = (byte) NUM_SQUARES#9 (byte) NUM_SQUARES#35 
Alias (byte*) heap_head#17 = (byte*) heap_head#5 (byte*) heap_head#41 
Alias (word*) SQUARES#12 = (word*) SQUARES#3 (word*) SQUARES#46 
Alias (byte*) heap_head#29 = (byte*) heap_head#35 
Alias (byte) NUM_SQUARES#19 = (byte) NUM_SQUARES#23 (byte) NUM_SQUARES#30 
Alias (word*) SQUARES#27 = (word*) SQUARES#34 (word*) SQUARES#41 
Alias (byte*) heap_head#18 = (byte*) heap_head#6 
Alias (byte) main::bucket_idx#2 = (byte) main::bucket_idx#6 (byte) main::bucket_idx#4 
Alias (byte) NUM_SQUARES#32 = (byte) NUM_SQUARES#36 (byte) NUM_SQUARES#37 
Alias (byte*) heap_head#50 = (byte*) heap_head#56 (byte*) heap_head#57 
Alias (word*) SQUARES#43 = (word*) SQUARES#47 (word*) SQUARES#48 
Alias (byte) main::bucket_size#0 = (byte) main::bucket_size#2 
Alias (byte*) main::sc#0 = (byte*~) main::$12 
Alias (byte) main::bucket_idx#1 = (byte) main::bucket_idx#5 
Alias (byte) main::bucket_size1#0 = (byte) main::bucket_size1#2 
Alias (byte) NUM_SQUARES#24 = (byte) NUM_SQUARES#33 
Alias (byte*) heap_head#42 = (byte*) heap_head#51 
Alias (word*) SQUARES#35 = (word*) SQUARES#44 
Alias (byte*) main::sc1#0 = (byte*~) main::$17 
Alias (byte) NUM_SQUARES#10 = (byte) NUM_SQUARES#15 (byte) NUM_SQUARES#2 
Alias (byte*) heap_head#19 = (byte*) heap_head#30 (byte*) heap_head#7 
Alias (word*) SQUARES#13 = (word*) SQUARES#22 (word*) SQUARES#4 
Alias (byte*) init_buckets::screen#1 = (byte*) init_buckets::screen#4 (byte*) init_buckets::dist#0 
Alias (byte*) heap_head#52 = (byte*) heap_head#58 
Alias (byte*) heap_head#37 = (byte*) heap_head#45 
Alias (byte*) init_buckets::screen#10 = (byte*) init_buckets::screen#11 
Alias (word) malloc::size#1 = (byte~) init_buckets::$4 
Alias (void*) malloc::return#3 = (void*) malloc::return#6 
Alias (word) init_buckets::i2#2 = (word) init_buckets::i2#3 
Alias (byte*) init_buckets::screen#7 = (byte*) init_buckets::screen#8 (byte*) init_buckets::screen#9 
Alias (byte*) heap_head#20 = (byte*) heap_head#8 (byte*) heap_head#53 
Alias (byte*) init_buckets::screen#2 = (byte*) init_buckets::screen#5 (byte*) init_buckets::dist#2 
Alias (byte*) heap_head#38 = (byte*) heap_head#46 
Alias (byte*) heap_head#21 = (byte*) heap_head#31 (byte*) heap_head#9 
Alias (byte*) init_angle_screen::screen_topline#0 = (byte*~) init_angle_screen::$0 
Alias (byte*) init_angle_screen::screen_bottomline#0 = (byte*~) init_angle_screen::$1 
Alias (word~) init_angle_screen::$4 = (word~) init_angle_screen::$17 
Alias (signed word) init_angle_screen::xw#0 = (signed word~) init_angle_screen::$5 
Alias (word~) init_angle_screen::$7 = (word~) init_angle_screen::$18 
Alias (signed word) init_angle_screen::yw#0 = (signed word~) init_angle_screen::$8 
Alias (word) atan2_16::return#2 = (word) atan2_16::return#4 
Alias (byte*) init_angle_screen::screen_bottomline#2 = (byte*) init_angle_screen::screen_bottomline#4 (byte*) init_angle_screen::screen_bottomline#3 
Alias (byte) init_angle_screen::xb#2 = (byte) init_angle_screen::xb#3 
Alias (byte*) init_angle_screen::screen_topline#2 = (byte*) init_angle_screen::screen_topline#4 (byte*) init_angle_screen::screen_topline#3 
Alias (byte) init_angle_screen::x#2 = (byte) init_angle_screen::x#3 
Alias (byte) init_angle_screen::y#2 = (byte) init_angle_screen::y#5 (byte) init_angle_screen::y#3 
Alias (word) init_angle_screen::angle_w#0 = (word~) init_angle_screen::$9 
Alias (byte) init_angle_screen::ang_w#0 = (byte~) init_angle_screen::$11 
Alias (byte*) init_dist_screen::screen#1 = (byte*) init_dist_screen::screen#2 (byte*) init_dist_screen::screen_topline#0 
Alias (byte) NUM_SQUARES#3 = (byte) NUM_SQUARES#44 
Alias (byte*) heap_head#10 = (byte*) heap_head#22 
Alias (word*) SQUARES#14 = (word*) SQUARES#5 
Alias (byte*) init_dist_screen::screen_bottomline#0 = (byte*~) init_dist_screen::$1 
Alias (byte) init_dist_screen::y2#0 = (byte~) init_dist_screen::$2 (byte) init_dist_screen::y2#1 (byte) init_dist_screen::y2#2 
Alias (word*) SQUARES#28 = (word*) SQUARES#38 (word*) SQUARES#29 
Alias (byte) NUM_SQUARES#41 = (byte) NUM_SQUARES#43 (byte) NUM_SQUARES#42 
Alias (byte*) init_dist_screen::screen_topline#11 = (byte*) init_dist_screen::screen_topline#13 (byte*) init_dist_screen::screen_topline#12 
Alias (byte*) init_dist_screen::screen_bottomline#11 = (byte*) init_dist_screen::screen_bottomline#13 (byte*) init_dist_screen::screen_bottomline#12 
Alias (byte) init_dist_screen::y#12 = (byte) init_dist_screen::y#2 (byte) init_dist_screen::y#13 
Alias (byte*) heap_head#66 = (byte*) heap_head#68 (byte*) heap_head#67 
Alias (byte~) init_dist_screen::$7 = (byte~) init_dist_screen::$6 
Alias (byte~) init_dist_screen::$5 = (byte~) init_dist_screen::$4 
Alias (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$8 
Alias (word) sqr::return#2 = (word) sqr::return#5 
Alias (word*) SQUARES#18 = (word*) SQUARES#45 
Alias (byte) NUM_SQUARES#38 = (byte) NUM_SQUARES#40 
Alias (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#9 
Alias (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#9 
Alias (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#11 
Alias (byte*) heap_head#64 = (byte*) heap_head#65 
Alias (word) init_dist_screen::yds#0 = (word~) init_dist_screen::$9 
Alias (byte) init_dist_screen::x2#0 = (byte~) init_dist_screen::$10 (byte) init_dist_screen::x2#1 (byte) init_dist_screen::x2#2 
Alias (word*) SQUARES#30 = (word*) SQUARES#39 (word*) SQUARES#31 
Alias (word) init_dist_screen::yds#3 = (word) init_dist_screen::yds#5 (word) init_dist_screen::yds#4 
Alias (byte) NUM_SQUARES#27 = (byte) NUM_SQUARES#34 (byte) NUM_SQUARES#28 
Alias (byte*) init_dist_screen::screen_topline#6 = (byte*) init_dist_screen::screen_topline#8 (byte*) init_dist_screen::screen_topline#7 
Alias (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#6 (byte) init_dist_screen::x#7 
Alias (byte*) init_dist_screen::screen_bottomline#6 = (byte*) init_dist_screen::screen_bottomline#8 (byte*) init_dist_screen::screen_bottomline#7 
Alias (byte) init_dist_screen::xb#5 = (byte) init_dist_screen::xb#7 (byte) init_dist_screen::xb#6 
Alias (byte) init_dist_screen::y#7 = (byte) init_dist_screen::y#9 (byte) init_dist_screen::y#8 
Alias (byte*) heap_head#59 = (byte*) heap_head#63 (byte*) heap_head#60 
Alias (byte~) init_dist_screen::$15 = (byte~) init_dist_screen::$14 
Alias (byte~) init_dist_screen::$13 = (byte~) init_dist_screen::$12 
Alias (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$16 
Alias (word) sqr::return#3 = (word) sqr::return#6 
Alias (word) init_dist_screen::yds#1 = (word) init_dist_screen::yds#2 (word) init_dist_screen::yds#6 
Alias (word*) SQUARES#15 = (word*) SQUARES#20 (word*) SQUARES#19 (word*) SQUARES#32 (word*) SQUARES#24 (word*) SQUARES#6 
Alias (byte) NUM_SQUARES#11 = (byte) NUM_SQUARES#13 (byte) NUM_SQUARES#20 (byte) NUM_SQUARES#21 (byte) NUM_SQUARES#16 (byte) NUM_SQUARES#4 
Alias (byte*) init_dist_screen::screen_topline#2 = (byte*) init_dist_screen::screen_topline#4 (byte*) init_dist_screen::screen_topline#5 (byte*) init_dist_screen::screen_topline#3 
Alias (byte) init_dist_screen::x#3 = (byte) init_dist_screen::x#4 (byte) init_dist_screen::x#5 
Alias (byte*) init_dist_screen::screen_bottomline#2 = (byte*) init_dist_screen::screen_bottomline#4 (byte*) init_dist_screen::screen_bottomline#5 (byte*) init_dist_screen::screen_bottomline#3 
Alias (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#3 (byte) init_dist_screen::xb#4 
Alias (byte) init_dist_screen::y#3 = (byte) init_dist_screen::y#5 (byte) init_dist_screen::y#6 (byte) init_dist_screen::y#4 
Alias (byte*) heap_head#11 = (byte*) heap_head#47 (byte*) heap_head#54 (byte*) heap_head#39 (byte*) heap_head#33 (byte*) heap_head#23 
Alias (word) init_dist_screen::xds#0 = (word~) init_dist_screen::$17 
Alias (word) init_dist_screen::ds#0 = (word~) init_dist_screen::$18 
Alias (byte) sqrt::return#2 = (byte) sqrt::return#4 
Alias (byte) init_dist_screen::d#0 = (byte~) init_dist_screen::$19 
Alias (byte) NUM_SQUARES#12 = (byte) NUM_SQUARES#5 
Alias (byte*) heap_head#12 = (byte*) heap_head#24 
Alias (word*) SQUARES#16 = (word*) SQUARES#7 
Successful SSA optimization Pass2AliasElimination
Alias (word) bsearch16u::key#1 = (word) bsearch16u::key#5 
Alias (signed word) atan2_16::x#1 = (signed word) atan2_16::x#5 (signed word) atan2_16::x#10 
Alias (signed word) atan2_16::y#1 = (signed word) atan2_16::y#12 (signed word) atan2_16::y#9 
Alias (signed word) atan2_16::yi#0 = (signed word) atan2_16::yi#9 
Alias (signed word) atan2_16::yi#10 = (signed word) atan2_16::yi#5 
Alias (signed word) atan2_16::xi#10 = (signed word) atan2_16::xi#4 
Alias (byte) atan2_16::i#10 = (byte) atan2_16::i#3 (byte) atan2_16::i#5 
Alias (word) atan2_16::angle#14 = (word) atan2_16::angle#16 
Alias (signed word) atan2_16::x#11 = (signed word) atan2_16::x#14 (signed word) atan2_16::x#8 
Alias (signed word) atan2_16::y#10 = (signed word) atan2_16::y#16 (signed word) atan2_16::y#8 
Alias (signed word) atan2_16::y#4 = (signed word) atan2_16::y#5 
Alias (word*) SQUARES#18 = (word*) SQUARES#28 
Alias (byte) NUM_SQUARES#38 = (byte) NUM_SQUARES#41 
Alias (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#11 
Alias (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#11 
Alias (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#12 
Alias (byte*) heap_head#64 = (byte*) heap_head#66 
Alias (word*) SQUARES#15 = (word*) SQUARES#30 
Alias (word) init_dist_screen::yds#1 = (word) init_dist_screen::yds#3 
Alias (byte) NUM_SQUARES#11 = (byte) NUM_SQUARES#27 
Alias (byte*) init_dist_screen::screen_topline#2 = (byte*) init_dist_screen::screen_topline#6 
Alias (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#3 
Alias (byte*) init_dist_screen::screen_bottomline#2 = (byte*) init_dist_screen::screen_bottomline#6 
Alias (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#5 
Alias (byte) init_dist_screen::y#3 = (byte) init_dist_screen::y#7 
Alias (byte*) heap_head#11 = (byte*) heap_head#59 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (word) bsearch16u::key#1
Self Phi Eliminated (byte*) heap_head#16
Self Phi Eliminated (word*) SQUARES#17
Self Phi Eliminated (signed word) atan2_16::yi#10
Self Phi Eliminated (signed word) atan2_16::xi#10
Self Phi Eliminated (byte) atan2_16::i#10
Self Phi Eliminated (word) atan2_16::angle#14
Self Phi Eliminated (signed word) atan2_16::x#11
Self Phi Eliminated (signed word) atan2_16::y#10
Self Phi Eliminated (byte*) heap_head#29
Self Phi Eliminated (byte) NUM_SQUARES#19
Self Phi Eliminated (word*) SQUARES#27
Self Phi Eliminated (byte) main::bucket_idx#8
Self Phi Eliminated (byte) NUM_SQUARES#39
Self Phi Eliminated (byte*) heap_head#61
Self Phi Eliminated (word*) SQUARES#49
Self Phi Eliminated (byte) main::bucket_idx#2
Self Phi Eliminated (byte) NUM_SQUARES#32
Self Phi Eliminated (byte*) heap_head#50
Self Phi Eliminated (word*) SQUARES#43
Self Phi Eliminated (word*) main::bucket#1
Self Phi Eliminated (byte) main::bucket_size#1
Self Phi Eliminated (byte) main::bucket_idx#7
Self Phi Eliminated (byte) NUM_SQUARES#31
Self Phi Eliminated (byte*) heap_head#49
Self Phi Eliminated (word*) SQUARES#42
Self Phi Eliminated (word*) main::bucket1#1
Self Phi Eliminated (byte) main::bucket_size1#1
Self Phi Eliminated (byte) NUM_SQUARES#25
Self Phi Eliminated (byte*) heap_head#43
Self Phi Eliminated (word*) SQUARES#36
Self Phi Eliminated (byte) main::bucket_idx#11
Self Phi Eliminated (byte*) init_buckets::screen#1
Self Phi Eliminated (byte*) heap_head#52
Self Phi Eliminated (byte*) heap_head#37
Self Phi Eliminated (byte*) init_buckets::screen#10
Self Phi Eliminated (byte*) init_buckets::screen#7
Self Phi Eliminated (byte*) init_buckets::screen#2
Self Phi Eliminated (byte*) heap_head#38
Self Phi Eliminated (byte*) init_buckets::screen#3
Self Phi Eliminated (byte*) heap_head#21
Self Phi Eliminated (byte) init_angle_screen::y#2
Self Phi Eliminated (byte*) init_angle_screen::screen_bottomline#2
Self Phi Eliminated (byte*) init_angle_screen::screen_topline#2
Self Phi Eliminated (word*) SQUARES#15
Self Phi Eliminated (word) init_dist_screen::yds#1
Self Phi Eliminated (byte) NUM_SQUARES#11
Self Phi Eliminated (byte*) init_dist_screen::screen_topline#2
Self Phi Eliminated (byte*) init_dist_screen::screen_bottomline#2
Self Phi Eliminated (byte) init_dist_screen::y#3
Self Phi Eliminated (byte*) heap_head#11
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) bsearch16u::num#7 (byte) bsearch16u::num#2
Identical Phi Values (word*) bsearch16u::items#7 (word*) bsearch16u::items#1
Identical Phi Values (word) bsearch16u::key#4 (word) bsearch16u::key#0
Identical Phi Values (word) bsearch16u::key#1 (word) bsearch16u::key#4
Identical Phi Values (byte) NUM_SQUARES#6 (byte) NUM_SQUARES#3
Identical Phi Values (byte*) heap_head#26 (byte*) heap_head#32
Identical Phi Values (byte*) heap_head#15 (byte*) heap_head#1
Identical Phi Values (byte*) heap_head#16 (byte*) heap_head#15
Identical Phi Values (word*) SQUARES#17 (word*) SQUARES#1
Identical Phi Values (word) sqrt::val#1 (word) sqrt::val#0
Identical Phi Values (word*) SQUARES#10 (word*) SQUARES#15
Identical Phi Values (byte) NUM_SQUARES#8 (byte) NUM_SQUARES#11
Identical Phi Values (signed word) atan2_16::y#1 (signed word) atan2_16::y#0
Identical Phi Values (signed word) atan2_16::x#1 (signed word) atan2_16::x#0
Identical Phi Values (signed word) atan2_16::yi#10 (signed word) atan2_16::yi#3
Identical Phi Values (signed word) atan2_16::xi#10 (signed word) atan2_16::xi#3
Identical Phi Values (byte) atan2_16::i#10 (byte) atan2_16::i#2
Identical Phi Values (word) atan2_16::angle#14 (word) atan2_16::angle#12
Identical Phi Values (signed word) atan2_16::x#11 (signed word) atan2_16::x#17
Identical Phi Values (signed word) atan2_16::y#10 (signed word) atan2_16::y#19
Identical Phi Values (byte) NUM_SQUARES#14 (byte) NUM_SQUARES#0
Identical Phi Values (byte*) heap_head#28 (byte*) HEAP_TOP#0
Identical Phi Values (word*) SQUARES#21 (word*) SQUARES#0
Identical Phi Values (byte) NUM_SQUARES#1 (byte) NUM_SQUARES#11
Identical Phi Values (byte*) heap_head#17 (byte*) heap_head#11
Identical Phi Values (word*) SQUARES#12 (word*) SQUARES#15
Identical Phi Values (byte*) heap_head#29 (byte*) heap_head#17
Identical Phi Values (byte) NUM_SQUARES#19 (byte) NUM_SQUARES#1
Identical Phi Values (word*) SQUARES#27 (word*) SQUARES#12
Identical Phi Values (byte*) heap_head#18 (byte*) heap_head#21
Identical Phi Values (byte) main::bucket_idx#8 (byte) main::bucket_idx#9
Identical Phi Values (byte) NUM_SQUARES#39 (byte) NUM_SQUARES#10
Identical Phi Values (byte*) heap_head#61 (byte*) heap_head#19
Identical Phi Values (word*) SQUARES#49 (word*) SQUARES#13
Identical Phi Values (byte) main::bucket_idx#2 (byte) main::bucket_idx#8
Identical Phi Values (byte) NUM_SQUARES#32 (byte) NUM_SQUARES#39
Identical Phi Values (byte*) heap_head#50 (byte*) heap_head#61
Identical Phi Values (word*) SQUARES#43 (word*) SQUARES#49
Identical Phi Values (word*) main::bucket#1 (word*) main::bucket#0
Identical Phi Values (byte) main::bucket_size#1 (byte) main::bucket_size#0
Identical Phi Values (byte) main::bucket_idx#7 (byte) main::bucket_idx#2
Identical Phi Values (byte) NUM_SQUARES#31 (byte) NUM_SQUARES#32
Identical Phi Values (byte*) heap_head#49 (byte*) heap_head#50
Identical Phi Values (word*) SQUARES#42 (word*) SQUARES#43
Identical Phi Values (word*) main::bucket1#1 (word*) main::bucket1#0
Identical Phi Values (byte) main::bucket_size1#1 (byte) main::bucket_size1#0
Identical Phi Values (byte) NUM_SQUARES#25 (byte) NUM_SQUARES#24
Identical Phi Values (byte*) heap_head#43 (byte*) heap_head#42
Identical Phi Values (word*) SQUARES#36 (word*) SQUARES#35
Identical Phi Values (byte) main::bucket_idx#11 (byte) main::bucket_idx#1
Identical Phi Values (byte*) init_buckets::screen#6 (byte*) init_buckets::screen#0
Identical Phi Values (byte*) heap_head#62 (byte*) heap_head#29
Identical Phi Values (byte*) init_buckets::screen#1 (byte*) init_buckets::screen#6
Identical Phi Values (byte*) heap_head#52 (byte*) heap_head#62
Identical Phi Values (byte*) heap_head#37 (byte*) heap_head#52
Identical Phi Values (byte*) init_buckets::screen#10 (byte*) init_buckets::screen#1
Identical Phi Values (byte*) init_buckets::screen#7 (byte*) init_buckets::screen#10
Identical Phi Values (byte*) heap_head#20 (byte*) heap_head#1
Identical Phi Values (byte*) init_buckets::screen#2 (byte*) init_buckets::screen#7
Identical Phi Values (byte*) heap_head#38 (byte*) heap_head#20
Identical Phi Values (byte*) init_buckets::screen#3 (byte*) init_buckets::screen#2
Identical Phi Values (byte*) heap_head#21 (byte*) heap_head#38
Identical Phi Values (byte*) init_angle_screen::screen#1 (byte*) init_angle_screen::screen#0
Identical Phi Values (byte) init_angle_screen::y#2 (byte) init_angle_screen::y#4
Identical Phi Values (byte*) init_angle_screen::screen_bottomline#2 (byte*) init_angle_screen::screen_bottomline#5
Identical Phi Values (byte*) init_angle_screen::screen_topline#2 (byte*) init_angle_screen::screen_topline#5
Identical Phi Values (byte*) heap_head#32 (byte*) heap_head#28
Identical Phi Values (word*) SQUARES#23 (word*) SQUARES#21
Identical Phi Values (byte*) init_dist_screen::screen#1 (byte*) init_dist_screen::screen#0
Identical Phi Values (byte*) heap_head#10 (byte*) heap_head#16
Identical Phi Values (word*) SQUARES#14 (word*) SQUARES#17
Identical Phi Values (word*) SQUARES#15 (word*) SQUARES#18
Identical Phi Values (word) init_dist_screen::yds#1 (word) init_dist_screen::yds#0
Identical Phi Values (byte) NUM_SQUARES#11 (byte) NUM_SQUARES#38
Identical Phi Values (byte*) init_dist_screen::screen_topline#2 (byte*) init_dist_screen::screen_topline#10
Identical Phi Values (byte*) init_dist_screen::screen_bottomline#2 (byte*) init_dist_screen::screen_bottomline#10
Identical Phi Values (byte) init_dist_screen::y#3 (byte) init_dist_screen::y#10
Identical Phi Values (byte*) heap_head#11 (byte*) heap_head#64
Identical Phi Values (byte) NUM_SQUARES#12 (byte) NUM_SQUARES#10
Identical Phi Values (byte*) heap_head#12 (byte*) heap_head#19
Identical Phi Values (word*) SQUARES#16 (word*) SQUARES#13
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (word*) SQUARES#9 (word*) SQUARES#18
Identical Phi Values (signed word) atan2_16::x#4 (signed word) atan2_16::x#17
Identical Phi Values (signed word) atan2_16::y#4 (signed word) atan2_16::y#19
Identical Phi Values (byte) main::bucket_idx#3 (byte) main::bucket_idx#9
Identical Phi Values (byte) NUM_SQUARES#24 (byte) NUM_SQUARES#10
Identical Phi Values (byte*) heap_head#42 (byte*) heap_head#19
Identical Phi Values (word*) SQUARES#35 (word*) SQUARES#13
Identical Phi Values (byte) NUM_SQUARES#18 (byte) NUM_SQUARES#24
Identical Phi Values (byte*) heap_head#36 (byte*) heap_head#42
Identical Phi Values (word*) SQUARES#26 (word*) SQUARES#35
Identical Phi Values (byte) main::bucket_idx#10 (byte) main::bucket_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) bsearch16u::$5 [16] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@7
Simple Condition (bool~) bsearch16u::$12 [28] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@9
Simple Condition (bool~) bsearch16u::$0 [31] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@1
Simple Condition (bool~) bsearch16u::$14 [35] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@10
Simple Condition (bool~) init_squares::$5 [80] if((byte) init_squares::i#1!=rangelast(0,init_squares::$2)) goto init_squares::@1
Simple Condition (bool~) atan2_16::$0 [113] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1
Simple Condition (bool~) atan2_16::$5 [122] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4
Simple Condition (bool~) atan2_16::$18 [136] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@16
Simple Condition (bool~) atan2_16::$11 [145] if((signed word) atan2_16::x#17>=(signed byte) 0) goto atan2_16::@7
Simple Condition (bool~) atan2_16::$19 [148] if((byte) atan2_16::shift#2>=(byte) 2) goto atan2_16::@19
Simple Condition (bool~) atan2_16::$20 [156] if((byte) 0==(byte) atan2_16::shift#2) goto atan2_16::@25
Simple Condition (bool~) atan2_16::$21 [159] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@26
Simple Condition (bool~) atan2_16::$22 [176] if((byte) atan2_16::i#1!=rangelast(0,atan2_16::$16)) goto atan2_16::@15
Simple Condition (bool~) atan2_16::$14 [180] if((signed word) atan2_16::y#19>=(signed byte) 0) goto atan2_16::@8
Simple Condition (bool~) main::$6 [221] if((word) main::i#1!=rangelast(0,$3e7)) goto main::@1
Simple Condition (bool~) main::$7 [232] if(*((byte*) RASTER#0)!=(byte) $fe) goto main::@6
Simple Condition (bool~) main::$8 [235] if(*((byte*) RASTER#0)!=(byte) $ff) goto main::@8
Simple Condition (bool~) main::$10 [241] if((byte) main::bucket_size#0<=(byte) 0) goto main::@11
Simple Condition (bool~) main::$15 [247] if((byte) main::bucket_size1#0<=(byte) 0) goto main::@15
Simple Condition (bool~) main::$13 [260] if((byte) main::i1#1<(byte) main::bucket_size#0) goto main::@12
Simple Condition (bool~) main::$18 [275] if((byte) main::i2#1<(byte) main::bucket_size1#0) goto main::@16
Simple Condition (bool~) init_buckets::$1 [293] if((byte) init_buckets::i#1!=rangelast(0,init_buckets::$0)) goto init_buckets::@1
Simple Condition (bool~) init_buckets::$2 [302] if((word) init_buckets::i1#1!=rangelast(0,$3e7)) goto init_buckets::@3
Simple Condition (bool~) init_buckets::$6 [318] if((word) init_buckets::i2#1!=rangelast(0,init_buckets::$3)) goto init_buckets::@5
Simple Condition (bool~) init_buckets::$8 [326] if((byte) init_buckets::i3#1!=rangelast(0,init_buckets::$7)) goto init_buckets::@7
Simple Condition (bool~) init_buckets::$11 [342] if((word) init_buckets::i4#1!=rangelast(0,$3e7)) goto init_buckets::@9
Simple Condition (bool~) init_angle_screen::$15 [387] if((byte) init_angle_screen::x#1<=(byte) $13) goto init_angle_screen::@2
Simple Condition (bool~) init_angle_screen::$16 [393] if((byte) init_angle_screen::y#1!=rangelast(0,$c)) goto init_angle_screen::@1
Simple Condition (bool~) init_dist_screen::$3 [409] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2
Simple Condition (bool~) init_dist_screen::$11 [430] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6
Simple Condition (bool~) init_dist_screen::$20 [460] if((byte) init_dist_screen::x#1<=(byte) $13) goto init_dist_screen::@5
Simple Condition (bool~) init_dist_screen::$21 [466] if((byte) init_dist_screen::y#1!=rangelast(0,$c)) goto init_dist_screen::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [176] if((byte) atan2_16::i#1==rangelast(0,atan2_16::$16)) goto atan2_16::@17
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [44] (byte~) bsearch16u::$17 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [51] (byte~) bsearch16u::$18 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [193] (byte[$3e8]) SCREEN_DIST#0 ← { fill( $3e8, 0) }
Constant right-side identified [194] (byte[$3e8]) SCREEN_ANGLE#0 ← { fill( $3e8, 0) }
Constant right-side identified [195] (byte[$3e8]) SCREEN_MIX#0 ← { fill( $3e8, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) HEAP_TOP#0 = (byte*) 40960
Constant (const byte) bsearch16u::$17 = 1*SIZEOF_WORD
Constant (const byte) bsearch16u::$18 = 1*SIZEOF_WORD
Constant (const byte) NUM_SQUARES#0 = $ff
Constant (const word*) SQUARES#0 = (word*) 0
Constant (const word) init_squares::sqr#0 = 0
Constant (const byte) init_squares::i#0 = 0
Constant (const byte) CORDIC_ITERATIONS_16#0 = $f
Constant (const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 = kickasm {{ .for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2
 }}
Constant (const word) atan2_16::angle#0 = 0
Constant (const byte) atan2_16::i#0 = 0
Constant (const byte[$3e8]) SCREEN_DIST#0 = { fill( $3e8, 0) }
Constant (const byte[$3e8]) SCREEN_ANGLE#0 = { fill( $3e8, 0) }
Constant (const byte[$3e8]) SCREEN_MIX#0 = { fill( $3e8, 0) }
Constant (const byte*) SCREEN_FILL#0 = (byte*) 1024
Constant (const word) main::i#0 = 0
Constant (const byte) main::bucket_idx#0 = 0
Constant (const byte) main::i1#0 = 0
Constant (const byte) main::i2#0 = 0
Constant (const word) NUM_BUCKETS#0 = $100
Constant (const byte) init_buckets::i#0 = 0
Constant (const word) init_buckets::i1#0 = 0
Constant (const word) init_buckets::i2#0 = 0
Constant (const byte) init_buckets::i3#0 = 0
Constant (const word) init_buckets::i4#0 = 0
Constant (const byte) init_angle_screen::y#0 = 0
Constant (const byte) init_angle_screen::x#0 = 0
Constant (const byte) init_angle_screen::xb#0 = $27
Constant (const byte) NUM_SQUARES#3 = $30
Constant (const byte) init_dist_screen::y#0 = 0
Constant (const byte) init_dist_screen::x#0 = 0
Constant (const byte) init_dist_screen::xb#0 = $27
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) init_dist_screen::screen#0 = SCREEN_DIST#0
Constant (const byte*) init_angle_screen::screen#0 = SCREEN_ANGLE#0
Constant (const byte*) main::dist#0 = SCREEN_DIST#0
Constant (const byte*) main::angle#0 = SCREEN_ANGLE#0
Constant (const byte*) main::mix#0 = SCREEN_MIX#0
Constant (const byte*) init_buckets::screen#0 = SCREEN_MIX#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( NUM_BUCKETS#0, 0) } in [283] (byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 ← { fill( NUM_BUCKETS#0, 0) }
Constant value identified { fill( NUM_BUCKETS#0, 0) } in [284] (word*[NUM_BUCKETS#0]) BUCKETS#0 ← { fill( NUM_BUCKETS#0, 0) }
Constant value identified { fill( NUM_BUCKETS#0, 0) } in [285] (byte[NUM_BUCKETS#0]) BUCKET_IDX#0 ← { fill( NUM_BUCKETS#0, 0) }
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [229] if(true) goto main::@6
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [219] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [221] if(main::i#1!=rangelast(0,$3e7)) goto main::@1 to (number) $3e8
Resolved ranged next value [300] init_buckets::i1#1 ← ++ init_buckets::i1#2 to ++
Resolved ranged comparison value [302] if(init_buckets::i1#1!=rangelast(0,$3e7)) goto init_buckets::@3 to (number) $3e8
Resolved ranged next value [340] init_buckets::i4#1 ← ++ init_buckets::i4#2 to ++
Resolved ranged comparison value [342] if(init_buckets::i4#1!=rangelast(0,$3e7)) goto init_buckets::@9 to (number) $3e8
Resolved ranged next value [391] init_angle_screen::y#1 ← ++ init_angle_screen::y#4 to ++
Resolved ranged comparison value [393] if(init_angle_screen::y#1!=rangelast(0,$c)) goto init_angle_screen::@1 to (number) $d
Resolved ranged next value [464] init_dist_screen::y#1 ← ++ init_dist_screen::y#10 to ++
Resolved ranged comparison value [466] if(init_dist_screen::y#1!=rangelast(0,$c)) goto init_dist_screen::@1 to (number) $d
Rewriting conditional comparison [387] if((byte) init_angle_screen::x#1<=(byte) $13) goto init_angle_screen::@2
Rewriting conditional comparison [460] if((byte) init_dist_screen::x#1<=(byte) $13) goto init_dist_screen::@5
De-inlining pointer[w] to *(pointer+w)   [251] (word*) main::bucket#0 ← *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19)
De-inlining pointer[w] to *(pointer+w)   [266] (word*) main::bucket1#0 ← *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21)
De-inlining pointer[w] to *(pointer+w)   [307] (word) malloc::size#1 ← *((byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2) * (const byte) SIZEOF_POINTER
De-inlining pointer[w] to *(pointer+w)   [315] *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12) ← (word*)(void*~) init_buckets::$5
De-inlining pointer[w] to *(pointer+w)   [334] (word*) init_buckets::bucket#0 ← *((word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13)
Successful SSA optimization Pass2DeInlineWordDerefIdx
Eliminating unused variable - keeping the phi block (byte) NUM_SQUARES#10
Eliminating unused variable - keeping the phi block (byte*) heap_head#19
Eliminating unused variable - keeping the phi block (word*) SQUARES#13
Eliminating unused constant (const byte) NUM_SQUARES#0
Eliminating unused constant (const word*) SQUARES#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $3e8 in if((word) main::i#1!=(number) $3e8) goto main::@1
Adding number conversion cast (unumber) $3e8 in if((word) init_buckets::i1#1!=(number) $3e8) goto init_buckets::@3
Adding number conversion cast (unumber) $3e8 in if((word) init_buckets::i4#1!=(number) $3e8) goto init_buckets::@9
Adding number conversion cast (unumber) $13+1 in if((byte) init_angle_screen::x#1<(byte) $13+(number) 1) goto init_angle_screen::@2
Adding number conversion cast (unumber) 1 in if((byte) init_angle_screen::x#1<(unumber)(byte) $13+(number) 1) goto init_angle_screen::@2
Adding number conversion cast (unumber) $d in if((byte) init_angle_screen::y#1!=(number) $d) goto init_angle_screen::@1
Adding number conversion cast (unumber) $13+1 in if((byte) init_dist_screen::x#1<(byte) $13+(number) 1) goto init_dist_screen::@5
Adding number conversion cast (unumber) 1 in if((byte) init_dist_screen::x#1<(unumber)(byte) $13+(number) 1) goto init_dist_screen::@5
Adding number conversion cast (unumber) $d in if((byte) init_dist_screen::y#1!=(number) $d) goto init_dist_screen::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e8
Simplifying constant integer cast (byte~) init_angle_screen::$3
Simplifying constant integer cast (byte~) init_angle_screen::$6
Simplifying constant integer cast (byte) $13+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast $d
Simplifying constant integer cast (byte) $13+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast $d
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $d
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (signed word) atan2_16::x#17
Self Phi Eliminated (signed word) atan2_16::y#19
Self Phi Eliminated (word*) SQUARES#18
Self Phi Eliminated (byte) NUM_SQUARES#38
Self Phi Eliminated (byte*) heap_head#64
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (signed word) atan2_16::x#17 (signed word) atan2_16::x#0
Identical Phi Values (signed word) atan2_16::y#19 (signed word) atan2_16::y#0
Identical Phi Values (word*) SQUARES#18 (word*) SQUARES#1
Identical Phi Values (byte) NUM_SQUARES#38 (const byte) NUM_SQUARES#3
Identical Phi Values (byte*) heap_head#64 (byte*) heap_head#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) heap_head#25 (byte*) heap_head#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [24] (word) malloc::size#0 ← (const byte) NUM_SQUARES#3 * (const byte) SIZEOF_WORD
Constant right-side identified [30] (byte~) init_squares::$2 ← (const byte) NUM_SQUARES#3 - (byte) 1
Constant right-side identified [60] (byte~) atan2_16::$16 ← (const byte) CORDIC_ITERATIONS_16#0 - (byte) 1
Constant right-side identified [139] (word~) init_buckets::$0 ← (const word) NUM_BUCKETS#0 - (byte) 1
Constant right-side identified [149] (word~) init_buckets::$3 ← (const word) NUM_BUCKETS#0 - (byte) 1
Constant right-side identified [161] (word~) init_buckets::$7 ← (const word) NUM_BUCKETS#0 - (byte) 1
Constant right-side identified [180] (byte*) init_angle_screen::screen_topline#0 ← (const byte*) init_angle_screen::screen#0 + (word)(number) $28*(number) $c
Constant right-side identified [181] (byte*) init_angle_screen::screen_bottomline#0 ← (const byte*) init_angle_screen::screen#0 + (word)(number) $28*(number) $c
Constant right-side identified [214] (byte*) init_dist_screen::screen_bottomline#0 ← (const byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) malloc::size#0 = NUM_SQUARES#3*SIZEOF_WORD
Constant (const byte) init_squares::$2 = NUM_SQUARES#3-1
Constant (const byte) bsearch16u::num#2 = NUM_SQUARES#3
Constant (const byte) atan2_16::$16 = CORDIC_ITERATIONS_16#0-1
Constant (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 = { fill( NUM_BUCKETS#0, 0) }
Constant (const word*[NUM_BUCKETS#0]) BUCKETS#0 = { fill( NUM_BUCKETS#0, 0) }
Constant (const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 = { fill( NUM_BUCKETS#0, 0) }
Constant (const word) init_buckets::$0 = NUM_BUCKETS#0-1
Constant (const word) init_buckets::$3 = NUM_BUCKETS#0-1
Constant (const word) init_buckets::$7 = NUM_BUCKETS#0-1
Constant (const byte*) init_angle_screen::screen_topline#0 = init_angle_screen::screen#0+(word)$28*$c
Constant (const byte*) init_angle_screen::screen_bottomline#0 = init_angle_screen::screen#0+(word)$28*$c
Constant (const byte*) init_dist_screen::screen_bottomline#0 = init_dist_screen::screen#0+(word)$28*$18
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [37] init_squares::i#1 ← ++ init_squares::i#2 to ++
Resolved ranged comparison value [38] if(init_squares::i#1!=rangelast(0,init_squares::$2)) goto init_squares::@1 to (const byte) init_squares::$2+(number) 1
Resolved ranged next value [85] atan2_16::i#1 ← ++ atan2_16::i#2 to ++
Resolved ranged comparison value [86] if(atan2_16::i#1==rangelast(0,atan2_16::$16)) goto atan2_16::@17 to (const byte) atan2_16::$16+(number) 1
Resolved ranged next value [142] init_buckets::i#1 ← ++ init_buckets::i#2 to ++
Resolved ranged comparison value [143] if(init_buckets::i#1!=rangelast(0,init_buckets::$0)) goto init_buckets::@1 to (number) 0
Resolved ranged next value [159] init_buckets::i2#1 ← ++ init_buckets::i2#2 to ++
Resolved ranged comparison value [160] if(init_buckets::i2#1!=rangelast(0,init_buckets::$3)) goto init_buckets::@5 to (const word) init_buckets::$3+(number) 1
Resolved ranged next value [164] init_buckets::i3#1 ← ++ init_buckets::i3#2 to ++
Resolved ranged comparison value [165] if(init_buckets::i3#1!=rangelast(0,init_buckets::$7)) goto init_buckets::@7 to (number) 0
Eliminating unused constant (const word) init_buckets::$0
Eliminating unused constant (const word) init_buckets::$7
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) init_squares::$2+1 in if((byte) init_squares::i#1!=(const byte) init_squares::$2+(number) 1) goto init_squares::@1
Adding number conversion cast (unumber) 1 in if((byte) init_squares::i#1!=(unumber)(const byte) init_squares::$2+(number) 1) goto init_squares::@1
Adding number conversion cast (unumber) atan2_16::$16+1 in if((byte) atan2_16::i#1==(const byte) atan2_16::$16+(number) 1) goto atan2_16::@17
Adding number conversion cast (unumber) 1 in if((byte) atan2_16::i#1==(unumber)(const byte) atan2_16::$16+(number) 1) goto atan2_16::@17
Adding number conversion cast (unumber) 0 in if((byte) init_buckets::i#1!=(number) 0) goto init_buckets::@1
Adding number conversion cast (unumber) init_buckets::$3+1 in if((word) init_buckets::i2#1!=(const word) init_buckets::$3+(number) 1) goto init_buckets::@5
Adding number conversion cast (unumber) 1 in if((word) init_buckets::i2#1!=(unumber)(const word) init_buckets::$3+(number) 1) goto init_buckets::@5
Adding number conversion cast (unumber) 0 in if((byte) init_buckets::i3#1!=(number) 0) goto init_buckets::@7
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) init_squares::$2+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) atan2_16::$16+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast (const word) init_buckets::$3+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [3] (void*) malloc::return#0 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Inlining Noop Cast [10] (signed word~) bsearch16u::$8 ← (signed word)(word) bsearch16u::key#0 keeping bsearch16u::key#0
Inlining Noop Cast [11] (signed word~) bsearch16u::$9 ← (signed word)*((word*) bsearch16u::pivot#0) keeping *(bsearch16u::pivot#0)
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [25] (void*) malloc::return#2 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Inlining Noop Cast [145] (void*) malloc::return#3 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [27] (word*) SQUARES#1 ← (word*)(void*~) init_squares::$1 keeping SQUARES#1
Inlining Noop Cast [175] (signed word) init_angle_screen::xw#0 ← (signed word)(word~) init_angle_screen::$4 keeping init_angle_screen::xw#0
Inlining Noop Cast [178] (signed word) init_angle_screen::yw#0 ← (signed word)(word~) init_angle_screen::$7 keeping init_angle_screen::yw#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [8] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [32] (byte~) init_squares::$3 ← (byte) init_squares::i#2 * (byte) 2
Rewriting multiplication to use shift [39] (byte~) sqr::$0 ← (byte) sqr::val#2 * (const byte) SIZEOF_WORD
Rewriting division to use shift [48] (word~) sqrt::$1 ← (word~) sqrt::$3 / (const byte) SIZEOF_WORD
Rewriting division to use shift [60] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 / (byte) 2
Rewriting multiplication to use shift [74] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [78] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [92] (byte~) main::$3 ← *((byte*) main::dist#2) * (byte) 4
Rewriting division to use shift [93] (byte~) main::$4 ← *((byte*) main::angle#2) / (byte) 2
Rewriting multiplication to use shift [112] (word~) main::$19 ← (word~) main::$11 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [116] (byte~) main::$20 ← (byte) main::i1#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [123] (word~) main::$21 ← (word~) main::$16 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [127] (byte~) main::$22 ← (byte) main::i2#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [143] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [147] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [159] (word~) init_buckets::$13 ← (word~) init_buckets::$9 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [163] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [172] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 * (byte) 2
Rewriting multiplication to use shift [176] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 * (byte) 2
Rewriting multiplication to use shift [203] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 * (byte) 2
Rewriting multiplication to use shift [213] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) malloc::size#0
Inlining constant with var siblings (const byte) bsearch16u::num#2
Inlining constant with var siblings (const word) init_squares::sqr#0
Inlining constant with var siblings (const byte) init_squares::i#0
Inlining constant with var siblings (const word) atan2_16::angle#0
Inlining constant with var siblings (const byte) atan2_16::i#0
Inlining constant with var siblings (const word) main::i#0
Inlining constant with var siblings (const byte) main::bucket_idx#0
Inlining constant with var siblings (const byte) main::i1#0
Inlining constant with var siblings (const byte) main::i2#0
Inlining constant with var siblings (const byte*) main::dist#0
Inlining constant with var siblings (const byte*) main::angle#0
Inlining constant with var siblings (const byte*) main::mix#0
Inlining constant with var siblings (const byte) init_buckets::i#0
Inlining constant with var siblings (const word) init_buckets::i1#0
Inlining constant with var siblings (const word) init_buckets::i2#0
Inlining constant with var siblings (const byte) init_buckets::i3#0
Inlining constant with var siblings (const word) init_buckets::i4#0
Inlining constant with var siblings (const byte) init_angle_screen::y#0
Inlining constant with var siblings (const byte) init_angle_screen::x#0
Inlining constant with var siblings (const byte) init_angle_screen::xb#0
Inlining constant with var siblings (const byte*) init_angle_screen::screen_topline#0
Inlining constant with var siblings (const byte*) init_angle_screen::screen_bottomline#0
Inlining constant with var siblings (const byte) init_dist_screen::y#0
Inlining constant with var siblings (const byte) init_dist_screen::x#0
Inlining constant with var siblings (const byte) init_dist_screen::xb#0
Inlining constant with var siblings (const byte*) init_dist_screen::screen_bottomline#0
Constant inlined init_buckets::i1#0 = (word) 0
Constant inlined init_squares::sqr#0 = (byte) 0
Constant inlined main::bucket_idx#0 = (byte) 0
Constant inlined init_angle_screen::y#0 = (byte) 0
Constant inlined init_angle_screen::x#0 = (byte) 0
Constant inlined atan2_16::angle#0 = (byte) 0
Constant inlined init_angle_screen::screen_bottomline#0 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c
Constant inlined init_buckets::i#0 = (byte) 0
Constant inlined init_dist_screen::y#0 = (byte) 0
Constant inlined init_dist_screen::xb#0 = (byte) $27
Constant inlined init_dist_screen::x#0 = (byte) 0
Constant inlined init_angle_screen::screen#0 = (const byte[$3e8]) SCREEN_ANGLE#0
Constant inlined main::i#0 = (word) 0
Constant inlined main::i1#0 = (byte) 0
Constant inlined main::i2#0 = (byte) 0
Constant inlined atan2_16::$16 = (const byte) CORDIC_ITERATIONS_16#0-(byte) 1
Constant inlined init_buckets::i3#0 = (byte) 0
Constant inlined init_buckets::i2#0 = (word) 0
Constant inlined init_buckets::i4#0 = (word) 0
Constant inlined init_buckets::screen#0 = (const byte[$3e8]) SCREEN_MIX#0
Constant inlined bsearch16u::num#2 = (const byte) NUM_SQUARES#3
Constant inlined init_angle_screen::xb#0 = (byte) $27
Constant inlined atan2_16::i#0 = (byte) 0
Constant inlined main::mix#0 = (const byte[$3e8]) SCREEN_MIX#0
Constant inlined main::angle#0 = (const byte[$3e8]) SCREEN_ANGLE#0
Constant inlined malloc::size#0 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD
Constant inlined main::dist#0 = (const byte[$3e8]) SCREEN_DIST#0
Constant inlined bsearch16u::$17 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined init_buckets::$3 = (const word) NUM_BUCKETS#0-(byte) 1
Constant inlined bsearch16u::$18 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined init_dist_screen::screen#0 = (const byte[$3e8]) SCREEN_DIST#0
Constant inlined init_angle_screen::screen_topline#0 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c
Constant inlined init_dist_screen::screen_bottomline#0 = (const byte[$3e8]) SCREEN_DIST#0+(word)(number) $28*(number) $18
Constant inlined init_squares::i#0 = (byte) 0
Constant inlined init_squares::$2 = (const byte) NUM_SQUARES#3-(byte) 1
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_POINTER
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting bsearch16u::@18(between bsearch16u::@9 and bsearch16u::@10)
Added new block during phi lifting init_squares::@4(between init_squares::@1 and init_squares::@1)
Added new block during phi lifting atan2_16::@34(between atan2_16::@27 and atan2_16::@15)
Added new block during phi lifting atan2_16::@35(between atan2_16::@15 and atan2_16::@17)
Added new block during phi lifting atan2_16::@36(between atan2_16::@27 and atan2_16::@17)
Added new block during phi lifting atan2_16::@37(between atan2_16::@20 and atan2_16::@25)
Added new block during phi lifting atan2_16::@38(between atan2_16::@17 and atan2_16::@7)
Added new block during phi lifting atan2_16::@39(between atan2_16::@7 and atan2_16::@8)
Added new block during phi lifting main::@24(between main::@1 and main::@1)
Added new block during phi lifting main::@25(between main::@12 and main::@12)
Added new block during phi lifting main::@26(between main::@16 and main::@16)
Added new block during phi lifting init_buckets::@12(between init_buckets::@1 and init_buckets::@1)
Added new block during phi lifting init_buckets::@13(between init_buckets::@3 and init_buckets::@3)
Added new block during phi lifting init_buckets::@14(between init_buckets::@11 and init_buckets::@5)
Added new block during phi lifting init_buckets::@15(between init_buckets::@7 and init_buckets::@7)
Added new block during phi lifting init_buckets::@16(between init_buckets::@9 and init_buckets::@9)
Added new block during phi lifting init_angle_screen::@6(between init_angle_screen::@3 and init_angle_screen::@1)
Added new block during phi lifting init_angle_screen::@7(between init_angle_screen::@5 and init_angle_screen::@2)
Added new block during phi lifting init_dist_screen::@19(between init_dist_screen::@11 and init_dist_screen::@1)
Added new block during phi lifting init_dist_screen::@20(between init_dist_screen::@18 and init_dist_screen::@5)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @7
Adding NOP phi() at start of @10
Adding NOP phi() at start of @12
Adding NOP phi() at start of @13
Adding NOP phi() at start of @16
Adding NOP phi() at start of @17
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of init_buckets
Adding NOP phi() at start of init_buckets::@2
Adding NOP phi() at start of init_buckets::@4
Adding NOP phi() at start of init_buckets::@6
Adding NOP phi() at start of init_buckets::@8
Adding NOP phi() at start of init_angle_screen
Adding NOP phi() at start of init_dist_screen
Adding NOP phi() at start of init_dist_screen::@15
Adding NOP phi() at start of init_squares
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to init_dist_screen:11 init_angle_screen:13 init_buckets:26 
Calls in [init_buckets] to malloc:82 
Calls in [init_angle_screen] to atan2_16:130 
Calls in [init_dist_screen] to init_squares:226 sqr:236 sqr:247 sqrt:252 
Calls in [sqrt] to bsearch16u:278 
Calls in [init_squares] to malloc:318 

Created 55 initial phi equivalence classes
Coalesced [58] main::bucket_idx#12 ← main::bucket_idx#1
Coalesced [59] main::i2#3 ← main::i2#1
Coalesced [60] main::i1#3 ← main::i1#1
Coalesced [61] main::dist#3 ← main::dist#1
Coalesced [62] main::angle#3 ← main::angle#1
Coalesced [63] main::mix#3 ← main::mix#1
Coalesced [64] main::i#3 ← main::i#1
Coalesced [80] heap_head#69 ← heap_head#1
Coalesced [81] malloc::size#3 ← malloc::size#1
Coalesced [109] init_buckets::dist#7 ← init_buckets::dist#3
Coalesced [110] init_buckets::i4#3 ← init_buckets::i4#1
Coalesced [111] init_buckets::i3#3 ← init_buckets::i3#1
Coalesced [112] init_buckets::i2#4 ← init_buckets::i2#1
Coalesced [113] init_buckets::dist#6 ← init_buckets::dist#1
Coalesced [114] init_buckets::i1#3 ← init_buckets::i1#1
Coalesced [115] init_buckets::i#3 ← init_buckets::i#1
Not coalescing [118] heap_head#1 ← malloc::mem#0
Coalesced [150] init_angle_screen::y#6 ← init_angle_screen::y#1
Coalesced [151] init_angle_screen::screen_bottomline#6 ← init_angle_screen::screen_bottomline#1
Coalesced [152] init_angle_screen::screen_topline#6 ← init_angle_screen::screen_topline#1
Coalesced [153] init_angle_screen::x#4 ← init_angle_screen::x#1
Coalesced [154] init_angle_screen::xb#4 ← init_angle_screen::xb#1
Coalesced [157] atan2_16::yi#17 ← atan2_16::$2
Coalesced [161] atan2_16::xi#14 ← atan2_16::$7
Coalesced [163] atan2_16::yi#19 ← atan2_16::yi#0
Coalesced [164] atan2_16::xi#16 ← atan2_16::xi#0
Coalesced [167] atan2_16::angle#22 ← atan2_16::angle#12
Coalesced [172] atan2_16::angle#27 ← atan2_16::angle#4
Coalesced [176] atan2_16::return#5 ← atan2_16::angle#5
Coalesced [179] atan2_16::return#6 ← atan2_16::angle#11
Coalesced [180] atan2_16::angle#26 ← atan2_16::angle#1
Not coalescing [181] atan2_16::shift#5 ← atan2_16::i#2
Not coalescing [182] atan2_16::xd#10 ← atan2_16::xi#3
Not coalescing [183] atan2_16::yd#10 ← atan2_16::yi#3
Coalesced [189] atan2_16::yd#13 ← atan2_16::yd#2
Coalesced [190] atan2_16::xd#13 ← atan2_16::xd#2
Coalesced [197] atan2_16::yi#21 ← atan2_16::yi#2
Coalesced [198] atan2_16::angle#25 ← atan2_16::angle#3
Coalesced [199] atan2_16::xi#18 ← atan2_16::xi#2
Coalesced [203] atan2_16::yi#18 ← atan2_16::yi#8
Coalesced [204] atan2_16::xi#15 ← atan2_16::xi#8
Coalesced [205] atan2_16::i#12 ← atan2_16::i#1
Coalesced [206] atan2_16::angle#21 ← atan2_16::angle#13
Coalesced (already) [207] atan2_16::angle#23 ← atan2_16::angle#13
Coalesced [212] atan2_16::yi#20 ← atan2_16::yi#1
Coalesced [213] atan2_16::angle#24 ← atan2_16::angle#2
Coalesced [214] atan2_16::xi#17 ← atan2_16::xi#1
Coalesced [215] atan2_16::yd#12 ← atan2_16::yd#3
Coalesced [216] atan2_16::xd#12 ← atan2_16::xd#3
Coalesced [220] atan2_16::shift#6 ← atan2_16::shift#1
Coalesced [221] atan2_16::xd#11 ← atan2_16::xd#1
Coalesced [222] atan2_16::yd#11 ← atan2_16::yd#1
Not coalescing [223] atan2_16::xi#13 ← atan2_16::x#0
Not coalescing [224] atan2_16::yi#16 ← atan2_16::y#0
Coalesced [232] init_dist_screen::yd#2 ← init_dist_screen::$5
Coalesced [235] sqr::val#3 ← sqr::val#0
Coalesced [243] init_dist_screen::xd#2 ← init_dist_screen::$13
Coalesced [246] sqr::val#4 ← sqr::val#1
Coalesced [267] init_dist_screen::y#14 ← init_dist_screen::y#1
Coalesced [268] init_dist_screen::screen_topline#14 ← init_dist_screen::screen_topline#1
Coalesced [269] init_dist_screen::screen_bottomline#14 ← init_dist_screen::screen_bottomline#1
Coalesced [270] init_dist_screen::x#8 ← init_dist_screen::x#1
Coalesced [271] init_dist_screen::xb#8 ← init_dist_screen::xb#1
Coalesced [273] init_dist_screen::xd#1 ← init_dist_screen::$15
Coalesced [275] init_dist_screen::yd#1 ← init_dist_screen::$7
Coalesced [285] bsearch16u::items#10 ← bsearch16u::items#1
Coalesced [290] bsearch16u::return#9 ← bsearch16u::$2
Coalesced [292] bsearch16u::return#7 ← bsearch16u::return#2
Coalesced [295] bsearch16u::return#8 ← bsearch16u::items#2
Not coalescing [301] bsearch16u::return#6 ← bsearch16u::pivot#0
Coalesced [305] bsearch16u::num#10 ← bsearch16u::num#1
Coalesced [306] bsearch16u::items#12 ← bsearch16u::items#0
Coalesced [309] bsearch16u::num#9 ← bsearch16u::num#0
Coalesced [310] bsearch16u::items#11 ← bsearch16u::items#8
Coalesced [311] bsearch16u::num#11 ← bsearch16u::num#3
Coalesced (already) [312] bsearch16u::items#13 ← bsearch16u::items#2
Coalesced [321] init_squares::squares#4 ← init_squares::squares#0
Coalesced [331] init_squares::sqr#3 ← init_squares::sqr#1
Coalesced [332] init_squares::squares#3 ← init_squares::squares#1
Coalesced [333] init_squares::i#3 ← init_squares::i#1
Coalesced down to 46 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @7
Culled Empty Block (label) @10
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @17
Culled Empty Block (label) main::@22
Culled Empty Block (label) main::@23
Culled Empty Block (label) main::@26
Culled Empty Block (label) main::@25
Culled Empty Block (label) main::@24
Culled Empty Block (label) init_buckets::@2
Culled Empty Block (label) init_buckets::@4
Culled Empty Block (label) init_buckets::@6
Culled Empty Block (label) init_buckets::@8
Culled Empty Block (label) init_buckets::@16
Culled Empty Block (label) init_buckets::@15
Culled Empty Block (label) init_buckets::@14
Culled Empty Block (label) init_buckets::@13
Culled Empty Block (label) init_buckets::@12
Culled Empty Block (label) init_angle_screen::@6
Culled Empty Block (label) init_angle_screen::@7
Culled Empty Block (label) atan2_16::@35
Culled Empty Block (label) atan2_16::@39
Culled Empty Block (label) atan2_16::@38
Culled Empty Block (label) atan2_16::@34
Culled Empty Block (label) atan2_16::@36
Culled Empty Block (label) atan2_16::@37
Culled Empty Block (label) init_dist_screen::@15
Culled Empty Block (label) init_dist_screen::@19
Culled Empty Block (label) init_dist_screen::@20
Culled Empty Block (label) bsearch16u::@1
Culled Empty Block (label) bsearch16u::@18
Culled Empty Block (label) init_squares::@4
Renumbering block @16 to @1
Renumbering block bsearch16u::@2 to bsearch16u::@1
Renumbering block bsearch16u::@3 to bsearch16u::@2
Renumbering block bsearch16u::@6 to bsearch16u::@3
Renumbering block bsearch16u::@7 to bsearch16u::@4
Renumbering block bsearch16u::@8 to bsearch16u::@5
Renumbering block bsearch16u::@9 to bsearch16u::@6
Renumbering block bsearch16u::@10 to bsearch16u::@7
Renumbering block bsearch16u::@13 to bsearch16u::@8
Renumbering block bsearch16u::@15 to bsearch16u::@9
Renumbering block init_squares::@3 to init_squares::@2
Renumbering block sqrt::@2 to sqrt::@1
Renumbering block atan2_16::@13 to atan2_16::@9
Renumbering block atan2_16::@15 to atan2_16::@10
Renumbering block atan2_16::@16 to atan2_16::@11
Renumbering block atan2_16::@17 to atan2_16::@12
Renumbering block atan2_16::@18 to atan2_16::@13
Renumbering block atan2_16::@19 to atan2_16::@14
Renumbering block atan2_16::@20 to atan2_16::@15
Renumbering block atan2_16::@24 to atan2_16::@16
Renumbering block atan2_16::@25 to atan2_16::@17
Renumbering block atan2_16::@26 to atan2_16::@18
Renumbering block atan2_16::@27 to atan2_16::@19
Renumbering block atan2_16::@30 to atan2_16::@20
Renumbering block atan2_16::@33 to atan2_16::@21
Renumbering block main::@6 to main::@4
Renumbering block main::@8 to main::@5
Renumbering block main::@9 to main::@6
Renumbering block main::@10 to main::@7
Renumbering block main::@11 to main::@8
Renumbering block main::@12 to main::@9
Renumbering block main::@14 to main::@10
Renumbering block main::@15 to main::@11
Renumbering block main::@16 to main::@12
Renumbering block main::@21 to main::@13
Renumbering block init_buckets::@3 to init_buckets::@2
Renumbering block init_buckets::@5 to init_buckets::@3
Renumbering block init_buckets::@7 to init_buckets::@4
Renumbering block init_buckets::@9 to init_buckets::@5
Renumbering block init_buckets::@11 to init_buckets::@6
Renumbering block init_angle_screen::@5 to init_angle_screen::@4
Renumbering block init_dist_screen::@11 to init_dist_screen::@9
Renumbering block init_dist_screen::@16 to init_dist_screen::@10
Renumbering block init_dist_screen::@17 to init_dist_screen::@11
Renumbering block init_dist_screen::@18 to init_dist_screen::@12
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init_buckets
Adding NOP phi() at start of init_angle_screen
Adding NOP phi() at start of init_dist_screen
Adding NOP phi() at start of bsearch16u
Adding NOP phi() at start of init_squares

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call init_dist_screen 
  to:main::@13
main::@13: scope:[main]  from main
  [6] phi()
  [7] call init_angle_screen 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@13
  [8] (word) main::i#2 ← phi( main::@1/(word) main::i#1 main::@13/(word) 0 )
  [8] (byte*) main::mix#2 ← phi( main::@1/(byte*) main::mix#1 main::@13/(const byte[$3e8]) SCREEN_MIX#0 )
  [8] (byte*) main::angle#2 ← phi( main::@1/(byte*) main::angle#1 main::@13/(const byte[$3e8]) SCREEN_ANGLE#0 )
  [8] (byte*) main::dist#2 ← phi( main::@1/(byte*) main::dist#1 main::@13/(const byte[$3e8]) SCREEN_DIST#0 )
  [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2
  [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1
  [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4
  [12] *((byte*) main::mix#2) ← (byte~) main::$5
  [13] (byte*) main::mix#1 ← ++ (byte*) main::mix#2
  [14] (byte*) main::dist#1 ← ++ (byte*) main::dist#2
  [15] (byte*) main::angle#1 ← ++ (byte*) main::angle#2
  [16] (word) main::i#1 ← ++ (word) main::i#2
  [17] if((word) main::i#1!=(word) $3e8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [18] phi()
  [19] call init_buckets 
  to:main::@3
main::@3: scope:[main]  from main::@11 main::@2
  [20] (byte) main::bucket_idx#9 ← phi( main::@11/(byte) main::bucket_idx#1 main::@2/(byte) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@5
  [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  [23] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [24] (byte) main::bucket_size#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#9)
  [25] if((byte) main::bucket_size#0<=(byte) 0) goto main::@8
  to:main::@7
main::@7: scope:[main]  from main::@6
  [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9
  [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1
  [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19
  [29] (word*) main::bucket#0 ← *((word**~) main::$23)
  to:main::@9
main::@9: scope:[main]  from main::@7 main::@9
  [30] (byte) main::i1#2 ← phi( main::@7/(byte) 0 main::@9/(byte) main::i1#1 )
  [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1
  [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20)
  [33] *((byte*) main::sc#0) ← (byte) ' '
  [34] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [35] if((byte) main::i1#1<(byte) main::bucket_size#0) goto main::@9
  to:main::@8
main::@8: scope:[main]  from main::@6 main::@9
  [36] (byte) main::bucket_idx#1 ← ++ (byte) main::bucket_idx#9
  [37] (byte) main::bucket_size1#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#1)
  [38] if((byte) main::bucket_size1#0<=(byte) 0) goto main::@11
  to:main::@10
main::@10: scope:[main]  from main::@8
  [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1
  [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1
  [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21
  [42] (word*) main::bucket1#0 ← *((word**~) main::$24)
  to:main::@12
main::@12: scope:[main]  from main::@10 main::@12
  [43] (byte) main::i2#2 ← phi( main::@10/(byte) 0 main::@12/(byte) main::i2#1 )
  [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1
  [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22)
  [46] *((byte*) main::sc1#0) ← (byte) '*'
  [47] (byte) main::i2#1 ← ++ (byte) main::i2#2
  [48] if((byte) main::i2#1<(byte) main::bucket_size1#0) goto main::@12
  to:main::@11
main::@11: scope:[main]  from main::@12 main::@8
  [49] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0)
  to:main::@3
init_buckets: scope:[init_buckets]  from main::@2
  [50] phi()
  to:init_buckets::@1
init_buckets::@1: scope:[init_buckets]  from init_buckets init_buckets::@1
  [51] (byte) init_buckets::i#2 ← phi( init_buckets/(byte) 0 init_buckets::@1/(byte) init_buckets::i#1 )
  [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0
  [53] (byte) init_buckets::i#1 ← ++ (byte) init_buckets::i#2
  [54] if((byte) init_buckets::i#1!=(byte) 0) goto init_buckets::@1
  to:init_buckets::@2
init_buckets::@2: scope:[init_buckets]  from init_buckets::@1 init_buckets::@2
  [55] (word) init_buckets::i1#2 ← phi( init_buckets::@1/(word) 0 init_buckets::@2/(word) init_buckets::i1#1 )
  [55] (byte*) init_buckets::dist#4 ← phi( init_buckets::@1/(const byte[$3e8]) SCREEN_MIX#0 init_buckets::@2/(byte*) init_buckets::dist#1 )
  [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4))
  [57] (byte*) init_buckets::dist#1 ← ++ (byte*) init_buckets::dist#4
  [58] (word) init_buckets::i1#1 ← ++ (word) init_buckets::i1#2
  [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2
  to:init_buckets::@3
init_buckets::@3: scope:[init_buckets]  from init_buckets::@2 init_buckets::@6
  [60] (word) init_buckets::i2#2 ← phi( init_buckets::@6/(word) init_buckets::i2#1 init_buckets::@2/(word) 0 )
  [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2
  [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1
  [63] call malloc 
  to:init_buckets::@6
init_buckets::@6: scope:[init_buckets]  from init_buckets::@3
  [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0
  [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1
  [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12
  [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5
  [68] (word) init_buckets::i2#1 ← ++ (word) init_buckets::i2#2
  [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3
  to:init_buckets::@4
init_buckets::@4: scope:[init_buckets]  from init_buckets::@4 init_buckets::@6
  [70] (byte) init_buckets::i3#2 ← phi( init_buckets::@6/(byte) 0 init_buckets::@4/(byte) init_buckets::i3#1 )
  [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0
  [72] (byte) init_buckets::i3#1 ← ++ (byte) init_buckets::i3#2
  [73] if((byte) init_buckets::i3#1!=(byte) 0) goto init_buckets::@4
  to:init_buckets::@5
init_buckets::@5: scope:[init_buckets]  from init_buckets::@4 init_buckets::@5
  [74] (word) init_buckets::i4#2 ← phi( init_buckets::@4/(word) 0 init_buckets::@5/(word) init_buckets::i4#1 )
  [74] (byte*) init_buckets::dist#5 ← phi( init_buckets::@4/(const byte[$3e8]) SCREEN_MIX#0 init_buckets::@5/(byte*) init_buckets::dist#3 )
  [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5)
  [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0
  [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1
  [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13
  [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17)
  [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0
  [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1
  [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10
  [83] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0)
  [84] (byte*) init_buckets::dist#3 ← ++ (byte*) init_buckets::dist#5
  [85] (word) init_buckets::i4#1 ← ++ (word) init_buckets::i4#2
  [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5
  to:init_buckets::@return
init_buckets::@return: scope:[init_buckets]  from init_buckets::@5
  [87] return 
  to:@return
malloc: scope:[malloc]  from init_buckets::@3 init_squares
  [88] (word) malloc::size#2 ← phi( init_buckets::@3/(word) malloc::size#1 init_squares/(const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD )
  [88] (byte*) heap_head#13 ← phi( init_buckets::@3/(byte*) heap_head#1 init_squares/(const byte*) HEAP_TOP#0 )
  [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2
  [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [91] return 
  to:@return
init_angle_screen: scope:[init_angle_screen]  from main::@13
  [92] phi()
  to:init_angle_screen::@1
init_angle_screen::@1: scope:[init_angle_screen]  from init_angle_screen init_angle_screen::@3
  [93] (byte*) init_angle_screen::screen_topline#5 ← phi( init_angle_screen/(const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c init_angle_screen::@3/(byte*) init_angle_screen::screen_topline#1 )
  [93] (byte*) init_angle_screen::screen_bottomline#5 ← phi( init_angle_screen/(const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c init_angle_screen::@3/(byte*) init_angle_screen::screen_bottomline#1 )
  [93] (byte) init_angle_screen::y#4 ← phi( init_angle_screen/(byte) 0 init_angle_screen::@3/(byte) init_angle_screen::y#1 )
  to:init_angle_screen::@2
init_angle_screen::@2: scope:[init_angle_screen]  from init_angle_screen::@1 init_angle_screen::@4
  [94] (byte) init_angle_screen::xb#2 ← phi( init_angle_screen::@1/(byte) $27 init_angle_screen::@4/(byte) init_angle_screen::xb#1 )
  [94] (byte) init_angle_screen::x#2 ← phi( init_angle_screen::@1/(byte) 0 init_angle_screen::@4/(byte) init_angle_screen::x#1 )
  [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1
  [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2
  [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0
  [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1
  [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0
  [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0
  [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0
  [102] call atan2_16 
  [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0
  to:init_angle_screen::@4
init_angle_screen::@4: scope:[init_angle_screen]  from init_angle_screen::@2
  [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2
  [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80
  [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10
  [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0
  [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0
  [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12
  [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0
  [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13
  [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0
  [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14
  [114] (byte) init_angle_screen::x#1 ← ++ (byte) init_angle_screen::x#2
  [115] (byte) init_angle_screen::xb#1 ← -- (byte) init_angle_screen::xb#2
  [116] if((byte) init_angle_screen::x#1<(byte) $13+(byte) 1) goto init_angle_screen::@2
  to:init_angle_screen::@3
init_angle_screen::@3: scope:[init_angle_screen]  from init_angle_screen::@4
  [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28
  [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28
  [119] (byte) init_angle_screen::y#1 ← ++ (byte) init_angle_screen::y#4
  [120] if((byte) init_angle_screen::y#1!=(byte) $d) goto init_angle_screen::@1
  to:init_angle_screen::@return
init_angle_screen::@return: scope:[init_angle_screen]  from init_angle_screen::@3
  [121] return 
  to:@return
atan2_16: scope:[atan2_16]  from init_angle_screen::@2
  [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1
  to:atan2_16::@2
atan2_16::@2: scope:[atan2_16]  from atan2_16
  [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0
  to:atan2_16::@3
atan2_16::@3: scope:[atan2_16]  from atan2_16::@1 atan2_16::@2
  [124] (signed word) atan2_16::yi#0 ← phi( atan2_16::@1/(signed word~) atan2_16::yi#16 atan2_16::@2/(signed word~) atan2_16::$2 )
  [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4
  to:atan2_16::@5
atan2_16::@5: scope:[atan2_16]  from atan2_16::@3
  [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0
  to:atan2_16::@6
atan2_16::@6: scope:[atan2_16]  from atan2_16::@4 atan2_16::@5
  [127] (signed word) atan2_16::xi#0 ← phi( atan2_16::@4/(signed word~) atan2_16::xi#13 atan2_16::@5/(signed word~) atan2_16::$7 )
  to:atan2_16::@10
atan2_16::@10: scope:[atan2_16]  from atan2_16::@19 atan2_16::@6
  [128] (word) atan2_16::angle#12 ← phi( atan2_16::@19/(word) atan2_16::angle#13 atan2_16::@6/(byte) 0 )
  [128] (byte) atan2_16::i#2 ← phi( atan2_16::@19/(byte) atan2_16::i#1 atan2_16::@6/(byte) 0 )
  [128] (signed word) atan2_16::xi#3 ← phi( atan2_16::@19/(signed word) atan2_16::xi#8 atan2_16::@6/(signed word) atan2_16::xi#0 )
  [128] (signed word) atan2_16::yi#3 ← phi( atan2_16::@19/(signed word) atan2_16::yi#8 atan2_16::@6/(signed word) atan2_16::yi#0 )
  [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11
  to:atan2_16::@12
atan2_16::@12: scope:[atan2_16]  from atan2_16::@10 atan2_16::@19
  [130] (word) atan2_16::angle#6 ← phi( atan2_16::@10/(word) atan2_16::angle#12 atan2_16::@19/(word) atan2_16::angle#13 )
  [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1
  [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7
  to:atan2_16::@21
atan2_16::@21: scope:[atan2_16]  from atan2_16::@12
  [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1
  to:atan2_16::@7
atan2_16::@7: scope:[atan2_16]  from atan2_16::@12 atan2_16::@21
  [134] (word) atan2_16::angle#11 ← phi( atan2_16::@12/(word) atan2_16::angle#1 atan2_16::@21/(word) atan2_16::angle#4 )
  [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8
  to:atan2_16::@9
atan2_16::@9: scope:[atan2_16]  from atan2_16::@7
  [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11
  to:atan2_16::@8
atan2_16::@8: scope:[atan2_16]  from atan2_16::@7 atan2_16::@9
  [137] (word) atan2_16::return#0 ← phi( atan2_16::@9/(word) atan2_16::angle#5 atan2_16::@7/(word) atan2_16::angle#11 )
  to:atan2_16::@return
atan2_16::@return: scope:[atan2_16]  from atan2_16::@8
  [138] return 
  to:@return
atan2_16::@11: scope:[atan2_16]  from atan2_16::@10
  [139] (byte~) atan2_16::shift#5 ← (byte) atan2_16::i#2
  [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3
  [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3
  to:atan2_16::@13
atan2_16::@13: scope:[atan2_16]  from atan2_16::@11 atan2_16::@14
  [142] (signed word) atan2_16::yd#3 ← phi( atan2_16::@11/(signed word~) atan2_16::yd#10 atan2_16::@14/(signed word) atan2_16::yd#1 )
  [142] (signed word) atan2_16::xd#3 ← phi( atan2_16::@11/(signed word~) atan2_16::xd#10 atan2_16::@14/(signed word) atan2_16::xd#1 )
  [142] (byte) atan2_16::shift#2 ← phi( atan2_16::@11/(byte~) atan2_16::shift#5 atan2_16::@14/(byte) atan2_16::shift#1 )
  [143] if((byte) atan2_16::shift#2>=(byte) 2) goto atan2_16::@14
  to:atan2_16::@15
atan2_16::@15: scope:[atan2_16]  from atan2_16::@13
  [144] if((byte) 0==(byte) atan2_16::shift#2) goto atan2_16::@17
  to:atan2_16::@16
atan2_16::@16: scope:[atan2_16]  from atan2_16::@15
  [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1
  [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1
  to:atan2_16::@17
atan2_16::@17: scope:[atan2_16]  from atan2_16::@15 atan2_16::@16
  [147] (signed word) atan2_16::xd#5 ← phi( atan2_16::@15/(signed word) atan2_16::xd#3 atan2_16::@16/(signed word) atan2_16::xd#2 )
  [147] (signed word) atan2_16::yd#5 ← phi( atan2_16::@15/(signed word) atan2_16::yd#3 atan2_16::@16/(signed word) atan2_16::yd#2 )
  [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18
  to:atan2_16::@20
atan2_16::@20: scope:[atan2_16]  from atan2_16::@17
  [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5
  [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5
  [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1
  [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24)
  to:atan2_16::@19
atan2_16::@19: scope:[atan2_16]  from atan2_16::@18 atan2_16::@20
  [153] (signed word) atan2_16::xi#8 ← phi( atan2_16::@18/(signed word) atan2_16::xi#1 atan2_16::@20/(signed word) atan2_16::xi#2 )
  [153] (word) atan2_16::angle#13 ← phi( atan2_16::@18/(word) atan2_16::angle#2 atan2_16::@20/(word) atan2_16::angle#3 )
  [153] (signed word) atan2_16::yi#8 ← phi( atan2_16::@18/(signed word) atan2_16::yi#1 atan2_16::@20/(signed word) atan2_16::yi#2 )
  [154] (byte) atan2_16::i#1 ← ++ (byte) atan2_16::i#2
  [155] if((byte) atan2_16::i#1==(const byte) CORDIC_ITERATIONS_16#0-(byte) 1+(byte) 1) goto atan2_16::@12
  to:atan2_16::@10
atan2_16::@18: scope:[atan2_16]  from atan2_16::@17
  [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5
  [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5
  [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1
  [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23)
  to:atan2_16::@19
atan2_16::@14: scope:[atan2_16]  from atan2_16::@13
  [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2
  [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2
  [162] (byte) atan2_16::shift#1 ← (byte) atan2_16::shift#2 - (byte) 2
  to:atan2_16::@13
atan2_16::@4: scope:[atan2_16]  from atan2_16::@3
  [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0
  to:atan2_16::@6
atan2_16::@1: scope:[atan2_16]  from atan2_16
  [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0
  to:atan2_16::@3
init_dist_screen: scope:[init_dist_screen]  from main
  [165] phi()
  [166] call init_squares 
  to:init_dist_screen::@1
init_dist_screen::@1: scope:[init_dist_screen]  from init_dist_screen init_dist_screen::@9
  [167] (byte*) init_dist_screen::screen_bottomline#10 ← phi( init_dist_screen::@9/(byte*) init_dist_screen::screen_bottomline#1 init_dist_screen/(const byte[$3e8]) SCREEN_DIST#0+(word)(number) $28*(number) $18 )
  [167] (byte*) init_dist_screen::screen_topline#10 ← phi( init_dist_screen::@9/(byte*) init_dist_screen::screen_topline#1 init_dist_screen/(const byte[$3e8]) SCREEN_DIST#0 )
  [167] (byte) init_dist_screen::y#10 ← phi( init_dist_screen::@9/(byte) init_dist_screen::y#1 init_dist_screen/(byte) 0 )
  [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1
  [169] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2
  to:init_dist_screen::@3
init_dist_screen::@3: scope:[init_dist_screen]  from init_dist_screen::@1
  [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0
  to:init_dist_screen::@4
init_dist_screen::@4: scope:[init_dist_screen]  from init_dist_screen::@2 init_dist_screen::@3
  [171] (byte) init_dist_screen::yd#0 ← phi( init_dist_screen::@2/(byte~) init_dist_screen::$7 init_dist_screen::@3/(byte~) init_dist_screen::$5 )
  [172] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
  [173] call sqr 
  [174] (word) sqr::return#2 ← (word) sqr::return#0
  to:init_dist_screen::@10
init_dist_screen::@10: scope:[init_dist_screen]  from init_dist_screen::@4
  [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2
  to:init_dist_screen::@5
init_dist_screen::@5: scope:[init_dist_screen]  from init_dist_screen::@10 init_dist_screen::@12
  [176] (byte) init_dist_screen::xb#2 ← phi( init_dist_screen::@10/(byte) $27 init_dist_screen::@12/(byte) init_dist_screen::xb#1 )
  [176] (byte) init_dist_screen::x#2 ← phi( init_dist_screen::@10/(byte) 0 init_dist_screen::@12/(byte) init_dist_screen::x#1 )
  [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1
  [178] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6
  to:init_dist_screen::@7
init_dist_screen::@7: scope:[init_dist_screen]  from init_dist_screen::@5
  [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0
  to:init_dist_screen::@8
init_dist_screen::@8: scope:[init_dist_screen]  from init_dist_screen::@6 init_dist_screen::@7
  [180] (byte) init_dist_screen::xd#0 ← phi( init_dist_screen::@6/(byte~) init_dist_screen::$15 init_dist_screen::@7/(byte~) init_dist_screen::$13 )
  [181] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
  [182] call sqr 
  [183] (word) sqr::return#3 ← (word) sqr::return#0
  to:init_dist_screen::@11
init_dist_screen::@11: scope:[init_dist_screen]  from init_dist_screen::@8
  [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3
  [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0
  [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
  [187] call sqrt 
  [188] (byte) sqrt::return#2 ← (byte) sqrt::return#0
  to:init_dist_screen::@12
init_dist_screen::@12: scope:[init_dist_screen]  from init_dist_screen::@11
  [189] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2
  [190] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0
  [191] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0
  [192] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  [193] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  [194] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2
  [195] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2
  [196] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5
  to:init_dist_screen::@9
init_dist_screen::@9: scope:[init_dist_screen]  from init_dist_screen::@12
  [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28
  [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28
  [199] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10
  [200] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1
  to:init_dist_screen::@return
init_dist_screen::@return: scope:[init_dist_screen]  from init_dist_screen::@9
  [201] return 
  to:@return
init_dist_screen::@6: scope:[init_dist_screen]  from init_dist_screen::@5
  [202] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27
  to:init_dist_screen::@8
init_dist_screen::@2: scope:[init_dist_screen]  from init_dist_screen::@1
  [203] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18
  to:init_dist_screen::@4
sqrt: scope:[sqrt]  from init_dist_screen::@11
  [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0
  [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1
  [206] call bsearch16u 
  [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
  to:sqrt::@1
sqrt::@1: scope:[sqrt]  from sqrt
  [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
  [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1
  [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1
  [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1
  to:sqrt::@return
sqrt::@return: scope:[sqrt]  from sqrt::@1
  [212] return 
  to:@return
bsearch16u: scope:[bsearch16u]  from sqrt
  [213] phi()
  to:bsearch16u::@3
bsearch16u::@3: scope:[bsearch16u]  from bsearch16u bsearch16u::@7
  [214] (word*) bsearch16u::items#2 ← phi( bsearch16u/(word*) bsearch16u::items#1 bsearch16u::@7/(word*) bsearch16u::items#8 )
  [214] (byte) bsearch16u::num#3 ← phi( bsearch16u/(const byte) NUM_SQUARES#3 bsearch16u::@7/(byte) bsearch16u::num#0 )
  [215] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4
  to:bsearch16u::@5
bsearch16u::@5: scope:[bsearch16u]  from bsearch16u::@3
  [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2
  to:bsearch16u::@1
bsearch16u::@1: scope:[bsearch16u]  from bsearch16u::@5
  [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD
  to:bsearch16u::@2
bsearch16u::@2: scope:[bsearch16u]  from bsearch16u::@1 bsearch16u::@5
  [218] (word*) bsearch16u::return#2 ← phi( bsearch16u::@5/(word*) bsearch16u::items#2 bsearch16u::@1/(word*~) bsearch16u::$2 )
  to:bsearch16u::@return
bsearch16u::@return: scope:[bsearch16u]  from bsearch16u::@2 bsearch16u::@8
  [219] (word*) bsearch16u::return#1 ← phi( bsearch16u::@8/(word*~) bsearch16u::return#6 bsearch16u::@2/(word*) bsearch16u::return#2 )
  [220] return 
  to:@return
bsearch16u::@4: scope:[bsearch16u]  from bsearch16u::@3
  [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1
  [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1
  [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16
  [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0)
  [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6
  to:bsearch16u::@8
bsearch16u::@8: scope:[bsearch16u]  from bsearch16u::@4
  [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0
  to:bsearch16u::@return
bsearch16u::@6: scope:[bsearch16u]  from bsearch16u::@4
  [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7
  to:bsearch16u::@9
bsearch16u::@9: scope:[bsearch16u]  from bsearch16u::@6
  [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD
  [229] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3
  to:bsearch16u::@7
bsearch16u::@7: scope:[bsearch16u]  from bsearch16u::@6 bsearch16u::@9
  [230] (word*) bsearch16u::items#8 ← phi( bsearch16u::@9/(word*) bsearch16u::items#0 bsearch16u::@6/(word*) bsearch16u::items#2 )
  [230] (byte) bsearch16u::num#5 ← phi( bsearch16u::@9/(byte) bsearch16u::num#1 bsearch16u::@6/(byte) bsearch16u::num#3 )
  [231] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1
  to:bsearch16u::@3
sqr: scope:[sqr]  from init_dist_screen::@4 init_dist_screen::@8
  [232] (byte) sqr::val#2 ← phi( init_dist_screen::@4/(byte) sqr::val#0 init_dist_screen::@8/(byte) sqr::val#1 )
  [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1
  [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0)
  to:sqr::@return
sqr::@return: scope:[sqr]  from sqr
  [235] return 
  to:@return
init_squares: scope:[init_squares]  from init_dist_screen
  [236] phi()
  [237] call malloc 
  to:init_squares::@2
init_squares::@2: scope:[init_squares]  from init_squares
  [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0
  [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1
  to:init_squares::@1
init_squares::@1: scope:[init_squares]  from init_squares::@1 init_squares::@2
  [240] (byte) init_squares::i#2 ← phi( init_squares::@1/(byte) init_squares::i#1 init_squares::@2/(byte) 0 )
  [240] (word*) init_squares::squares#2 ← phi( init_squares::@1/(word*) init_squares::squares#1 init_squares::@2/(word*) init_squares::squares#0 )
  [240] (word) init_squares::sqr#2 ← phi( init_squares::@1/(word) init_squares::sqr#1 init_squares::@2/(byte) 0 )
  [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2
  [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD
  [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1
  [244] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1
  [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4
  [246] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2
  [247] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1
  to:init_squares::@return
init_squares::@return: scope:[init_squares]  from init_squares::@1
  [248] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(word*[NUM_BUCKETS#0]) BUCKETS
(byte[NUM_BUCKETS#0]) BUCKET_IDX
(byte[NUM_BUCKETS#0]) BUCKET_SIZES
(word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16
(byte) CORDIC_ITERATIONS_16
(byte*) HEAP_TOP
(word) NUM_BUCKETS
(byte) NUM_SQUARES
(byte*) RASTER
(byte[$3e8]) SCREEN_ANGLE
(byte[$3e8]) SCREEN_DIST
(byte*) SCREEN_FILL
(byte[$3e8]) SCREEN_MIX
(word*) SQUARES
(void*) SQUARES#1 0.03278688524590164
(word()) atan2_16((signed word) atan2_16::x , (signed word) atan2_16::y)
(signed word~) atan2_16::$2 4.0
(byte~) atan2_16::$23 2002.0
(byte~) atan2_16::$24 2002.0
(signed word~) atan2_16::$7 4.0
(word) atan2_16::angle
(word) atan2_16::angle#1 3.0
(word) atan2_16::angle#11 4.0
(word) atan2_16::angle#12 190.66666666666666
(word) atan2_16::angle#13 1334.6666666666667
(word) atan2_16::angle#2 2002.0
(word) atan2_16::angle#3 2002.0
(word) atan2_16::angle#4 4.0
(word) atan2_16::angle#5 4.0
(word) atan2_16::angle#6 2004.0
(byte) atan2_16::i
(byte) atan2_16::i#1 1501.5
(byte) atan2_16::i#2 208.54166666666669
(word) atan2_16::return
(word) atan2_16::return#0 34.99999999999999
(word) atan2_16::return#2 202.0
(byte) atan2_16::shift
(byte) atan2_16::shift#1 20002.0
(byte) atan2_16::shift#2 8001.25
(byte~) atan2_16::shift#5 667.3333333333334
(signed word) atan2_16::x
(signed word) atan2_16::x#0 2.8684210526315796
(signed word) atan2_16::xd
(signed word) atan2_16::xd#1 6667.333333333333
(signed word~) atan2_16::xd#10 1001.0
(signed word) atan2_16::xd#2 1001.0
(signed word) atan2_16::xd#3 7668.333333333332
(signed word) atan2_16::xd#5 1001.0
(signed word) atan2_16::xi
(signed word) atan2_16::xi#0 6.0
(signed word) atan2_16::xi#1 500.5
(signed word~) atan2_16::xi#13 4.0
(signed word) atan2_16::xi#2 500.5
(signed word) atan2_16::xi#3 267.0666666666667
(signed word) atan2_16::xi#8 1001.0
(signed word) atan2_16::y
(signed word) atan2_16::y#0 2.724999999999999
(signed word) atan2_16::yd
(signed word) atan2_16::yd#1 10001.0
(signed word~) atan2_16::yd#10 2002.0
(signed word) atan2_16::yd#2 2002.0
(signed word) atan2_16::yd#3 4601.0
(signed word) atan2_16::yd#5 2002.0
(signed word) atan2_16::yi
(signed word) atan2_16::yi#0 1.2000000000000002
(signed word) atan2_16::yi#1 667.3333333333334
(signed word~) atan2_16::yi#16 4.0
(signed word) atan2_16::yi#2 667.3333333333334
(signed word) atan2_16::yi#3 353.4117647058823
(signed word) atan2_16::yi#8 1001.0
(word*()) bsearch16u((word) bsearch16u::key , (word*) bsearch16u::items , (byte) bsearch16u::num)
(byte~) bsearch16u::$16 2002.0
(word*~) bsearch16u::$2 4.0
(byte~) bsearch16u::$6 2002.0
(word*) bsearch16u::items
(word*) bsearch16u::items#0 1001.0
(word*) bsearch16u::items#1 2.0
(word*) bsearch16u::items#2 334.5555555555556
(word*) bsearch16u::items#8 1501.5
(word) bsearch16u::key
(word) bsearch16u::key#0 0.26666666666666666
(byte) bsearch16u::num
(byte) bsearch16u::num#0 2002.0
(byte) bsearch16u::num#1 2002.0
(byte) bsearch16u::num#3 556.1111111111111
(byte) bsearch16u::num#5 3003.0
(word*) bsearch16u::pivot
(word*) bsearch16u::pivot#0 501.0
(signed word) bsearch16u::result
(signed word) bsearch16u::result#0 1501.5
(word*) bsearch16u::return
(word*) bsearch16u::return#1 2.0
(word*) bsearch16u::return#2 6.0
(word*) bsearch16u::return#3 4.0
(word*~) bsearch16u::return#6 4.0
(byte*) heap_head
(byte*) heap_head#1 0.1511627906976744
(byte*) heap_head#13 13.0
(void()) init_angle_screen((byte*) init_angle_screen::screen)
(word~) init_angle_screen::$10 202.0
(byte~) init_angle_screen::$12 202.0
(byte~) init_angle_screen::$13 202.0
(byte~) init_angle_screen::$14 202.0
(byte~) init_angle_screen::$2 202.0
(byte~) init_angle_screen::$3 202.0
(byte~) init_angle_screen::$6 202.0
(byte) init_angle_screen::ang_w
(byte) init_angle_screen::ang_w#0 84.16666666666666
(word) init_angle_screen::angle_w
(word) init_angle_screen::angle_w#0 202.0
(byte*) init_angle_screen::screen
(byte*) init_angle_screen::screen_bottomline
(byte*) init_angle_screen::screen_bottomline#1 7.333333333333333
(byte*) init_angle_screen::screen_bottomline#5 8.959999999999999
(byte*) init_angle_screen::screen_topline
(byte*) init_angle_screen::screen_topline#1 5.5
(byte*) init_angle_screen::screen_topline#5 9.333333333333334
(byte) init_angle_screen::x
(byte) init_angle_screen::x#1 101.0
(byte) init_angle_screen::x#2 25.25
(byte) init_angle_screen::xb
(byte) init_angle_screen::xb#1 101.0
(byte) init_angle_screen::xb#2 19.238095238095237
(signed word) init_angle_screen::xw
(word) init_angle_screen::xw#0 33.666666666666664
(byte) init_angle_screen::y
(byte) init_angle_screen::y#1 16.5
(byte) init_angle_screen::y#4 4.730769230769231
(signed word) init_angle_screen::yw
(word) init_angle_screen::yw#0 50.5
(void()) init_buckets((byte*) init_buckets::screen)
(word~) init_buckets::$10 11.0
(word~) init_buckets::$12 22.0
(word~) init_buckets::$13 22.0
(byte~) init_buckets::$14 22.0
(byte*~) init_buckets::$15 22.0
(word**~) init_buckets::$16 22.0
(word**~) init_buckets::$17 22.0
(void*~) init_buckets::$5 3.6666666666666665
(word~) init_buckets::$9 22.0
(word*) init_buckets::bucket
(word*) init_buckets::bucket#0 7.333333333333333
(byte*) init_buckets::dist
(byte*) init_buckets::dist#1 7.333333333333333
(byte*) init_buckets::dist#3 7.333333333333333
(byte*) init_buckets::dist#4 22.0
(byte*) init_buckets::dist#5 4.4
(byte) init_buckets::distance
(byte) init_buckets::distance#0 5.5
(byte) init_buckets::i
(byte) init_buckets::i#1 16.5
(byte) init_buckets::i#2 16.5
(word) init_buckets::i1
(word) init_buckets::i1#1 16.5
(word) init_buckets::i1#2 7.333333333333333
(word) init_buckets::i2
(word) init_buckets::i2#1 16.5
(word) init_buckets::i2#2 5.5
(byte) init_buckets::i3
(byte) init_buckets::i3#1 16.5
(byte) init_buckets::i3#2 16.5
(word) init_buckets::i4
(word) init_buckets::i4#1 16.5
(word) init_buckets::i4#2 2.0
(byte*) init_buckets::screen
(void()) init_dist_screen((byte*) init_dist_screen::screen)
(byte~) init_dist_screen::$13 202.0
(byte~) init_dist_screen::$15 202.0
(byte~) init_dist_screen::$5 22.0
(byte~) init_dist_screen::$7 22.0
(byte) init_dist_screen::d
(byte) init_dist_screen::d#0 126.25
(word) init_dist_screen::ds
(word) init_dist_screen::ds#0 202.0
(byte*) init_dist_screen::screen
(byte*) init_dist_screen::screen_bottomline
(byte*) init_dist_screen::screen_bottomline#1 7.333333333333333
(byte*) init_dist_screen::screen_bottomline#10 6.787878787878788
(byte*) init_dist_screen::screen_topline
(byte*) init_dist_screen::screen_topline#1 5.5
(byte*) init_dist_screen::screen_topline#10 7.0
(byte) init_dist_screen::x
(byte) init_dist_screen::x#1 101.0
(byte) init_dist_screen::x#2 26.578947368421055
(byte) init_dist_screen::x2
(byte) init_dist_screen::x2#0 202.0
(byte) init_dist_screen::xb
(byte) init_dist_screen::xb#1 101.0
(byte) init_dist_screen::xb#2 20.2
(byte) init_dist_screen::xd
(byte) init_dist_screen::xd#0 303.0
(word) init_dist_screen::xds
(word) init_dist_screen::xds#0 202.0
(byte) init_dist_screen::y
(byte) init_dist_screen::y#1 16.5
(byte) init_dist_screen::y#10 0.9705882352941178
(byte) init_dist_screen::y2
(byte) init_dist_screen::y2#0 22.0
(byte) init_dist_screen::yd
(byte) init_dist_screen::yd#0 33.0
(word) init_dist_screen::yds
(word) init_dist_screen::yds#0 4.869565217391305
(void()) init_squares()
(byte~) init_squares::$3 22.0
(byte~) init_squares::$4 22.0
(byte) init_squares::i
(byte) init_squares::i#1 16.5
(byte) init_squares::i#2 5.5
(word) init_squares::sqr
(word) init_squares::sqr#1 7.333333333333333
(word) init_squares::sqr#2 6.6000000000000005
(word*) init_squares::squares
(word*) init_squares::squares#0 4.0
(word*) init_squares::squares#1 3.6666666666666665
(word*) init_squares::squares#2 17.5
(void()) main()
(word~) main::$11 22.0
(word~) main::$16 22.0
(word~) main::$19 22.0
(byte~) main::$20 202.0
(word~) main::$21 22.0
(byte~) main::$22 202.0
(word**~) main::$23 22.0
(word**~) main::$24 22.0
(byte~) main::$3 11.0
(byte~) main::$4 22.0
(byte~) main::$5 22.0
(byte*) main::angle
(byte*) main::angle#1 7.333333333333333
(byte*) main::angle#2 4.714285714285714
(word*) main::bucket
(word*) main::bucket#0 16.0
(word*) main::bucket1
(word*) main::bucket1#0 16.0
(byte) main::bucket_idx
(byte) main::bucket_idx#1 2.357142857142857
(byte) main::bucket_idx#9 2.0625
(byte) main::bucket_size
(byte) main::bucket_size#0 10.25
(byte) main::bucket_size1
(byte) main::bucket_size1#0 10.25
(byte*) main::dist
(byte*) main::dist#1 5.5
(byte*) main::dist#2 5.5
(word) main::i
(word) main::i#1 16.5
(word) main::i#2 2.75
(byte) main::i1
(byte) main::i1#1 151.5
(byte) main::i1#2 75.75
(byte) main::i2
(byte) main::i2#1 151.5
(byte) main::i2#2 75.75
(byte*) main::mix
(byte*) main::mix#1 4.4
(byte*) main::mix#2 6.6000000000000005
(byte*) main::sc
(byte*) main::sc#0 202.0
(byte*) main::sc1
(byte*) main::sc1#0 202.0
(void*()) malloc((word) malloc::size)
(byte*) malloc::mem
(byte*) malloc::mem#0 0.8
(void*) malloc::return
(word) malloc::size
(word) malloc::size#1 22.0
(word) malloc::size#2 13.0
(word()) sqr((byte) sqr::val)
(byte~) sqr::$0 4.0
(word) sqr::return
(word) sqr::return#0 28.5
(word) sqr::return#2 22.0
(word) sqr::return#3 202.0
(byte) sqr::val
(byte) sqr::val#0 22.0
(byte) sqr::val#1 202.0
(byte) sqr::val#2 114.0
(byte()) sqrt((word) sqrt::val)
(word~) sqrt::$1 2.0
(word~) sqrt::$3 4.0
(word*) sqrt::found
(word*) sqrt::found#0 4.0
(byte) sqrt::return
(byte) sqrt::return#0 34.33333333333333
(byte) sqrt::return#2 202.0
(byte) sqrt::sq
(word) sqrt::val
(word) sqrt::val#0 103.0

Initial phi equivalence classes
[ main::dist#2 main::dist#1 ]
[ main::angle#2 main::angle#1 ]
[ main::mix#2 main::mix#1 ]
[ main::i#2 main::i#1 ]
[ main::bucket_idx#9 main::bucket_idx#1 ]
[ main::i1#2 main::i1#1 ]
[ main::i2#2 main::i2#1 ]
[ init_buckets::i#2 init_buckets::i#1 ]
[ init_buckets::dist#4 init_buckets::dist#1 ]
[ init_buckets::i1#2 init_buckets::i1#1 ]
[ init_buckets::i2#2 init_buckets::i2#1 ]
[ init_buckets::i3#2 init_buckets::i3#1 ]
[ init_buckets::dist#5 init_buckets::dist#3 ]
[ init_buckets::i4#2 init_buckets::i4#1 ]
[ heap_head#13 heap_head#1 ]
[ malloc::size#2 malloc::size#1 ]
[ init_angle_screen::y#4 init_angle_screen::y#1 ]
[ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ]
[ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ]
[ init_angle_screen::x#2 init_angle_screen::x#1 ]
[ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
[ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ]
[ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ]
[ atan2_16::i#2 atan2_16::i#1 ]
[ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ]
[ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ]
[ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
[ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
[ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
[ init_dist_screen::y#10 init_dist_screen::y#1 ]
[ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ]
[ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ]
[ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
[ init_dist_screen::x#2 init_dist_screen::x#1 ]
[ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
[ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
[ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ]
[ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
[ sqr::val#2 sqr::val#0 sqr::val#1 ]
[ init_squares::sqr#2 init_squares::sqr#1 ]
[ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
[ init_squares::i#2 init_squares::i#1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::bucket_size#0 to zero page equivalence class [ main::bucket_size#0 ]
Added variable main::$11 to zero page equivalence class [ main::$11 ]
Added variable main::$19 to zero page equivalence class [ main::$19 ]
Added variable main::$23 to zero page equivalence class [ main::$23 ]
Added variable main::bucket#0 to zero page equivalence class [ main::bucket#0 ]
Added variable main::$20 to zero page equivalence class [ main::$20 ]
Added variable main::sc#0 to zero page equivalence class [ main::sc#0 ]
Added variable main::bucket_size1#0 to zero page equivalence class [ main::bucket_size1#0 ]
Added variable main::$16 to zero page equivalence class [ main::$16 ]
Added variable main::$21 to zero page equivalence class [ main::$21 ]
Added variable main::$24 to zero page equivalence class [ main::$24 ]
Added variable main::bucket1#0 to zero page equivalence class [ main::bucket1#0 ]
Added variable main::$22 to zero page equivalence class [ main::$22 ]
Added variable main::sc1#0 to zero page equivalence class [ main::sc1#0 ]
Added variable init_buckets::$15 to zero page equivalence class [ init_buckets::$15 ]
Added variable init_buckets::$5 to zero page equivalence class [ init_buckets::$5 ]
Added variable init_buckets::$12 to zero page equivalence class [ init_buckets::$12 ]
Added variable init_buckets::$16 to zero page equivalence class [ init_buckets::$16 ]
Added variable init_buckets::distance#0 to zero page equivalence class [ init_buckets::distance#0 ]
Added variable init_buckets::$9 to zero page equivalence class [ init_buckets::$9 ]
Added variable init_buckets::$13 to zero page equivalence class [ init_buckets::$13 ]
Added variable init_buckets::$17 to zero page equivalence class [ init_buckets::$17 ]
Added variable init_buckets::bucket#0 to zero page equivalence class [ init_buckets::bucket#0 ]
Added variable init_buckets::$10 to zero page equivalence class [ init_buckets::$10 ]
Added variable init_buckets::$14 to zero page equivalence class [ init_buckets::$14 ]
Added variable malloc::mem#0 to zero page equivalence class [ malloc::mem#0 ]
Added variable init_angle_screen::$2 to zero page equivalence class [ init_angle_screen::$2 ]
Added variable init_angle_screen::$3 to zero page equivalence class [ init_angle_screen::$3 ]
Added variable init_angle_screen::xw#0 to zero page equivalence class [ init_angle_screen::xw#0 ]
Added variable init_angle_screen::$6 to zero page equivalence class [ init_angle_screen::$6 ]
Added variable init_angle_screen::yw#0 to zero page equivalence class [ init_angle_screen::yw#0 ]
Added variable atan2_16::x#0 to zero page equivalence class [ atan2_16::x#0 ]
Added variable atan2_16::y#0 to zero page equivalence class [ atan2_16::y#0 ]
Added variable atan2_16::return#2 to zero page equivalence class [ atan2_16::return#2 ]
Added variable init_angle_screen::angle_w#0 to zero page equivalence class [ init_angle_screen::angle_w#0 ]
Added variable init_angle_screen::$10 to zero page equivalence class [ init_angle_screen::$10 ]
Added variable init_angle_screen::ang_w#0 to zero page equivalence class [ init_angle_screen::ang_w#0 ]
Added variable init_angle_screen::$12 to zero page equivalence class [ init_angle_screen::$12 ]
Added variable init_angle_screen::$13 to zero page equivalence class [ init_angle_screen::$13 ]
Added variable init_angle_screen::$14 to zero page equivalence class [ init_angle_screen::$14 ]
Added variable atan2_16::$24 to zero page equivalence class [ atan2_16::$24 ]
Added variable atan2_16::$23 to zero page equivalence class [ atan2_16::$23 ]
Added variable init_dist_screen::y2#0 to zero page equivalence class [ init_dist_screen::y2#0 ]
Added variable sqr::return#2 to zero page equivalence class [ sqr::return#2 ]
Added variable init_dist_screen::yds#0 to zero page equivalence class [ init_dist_screen::yds#0 ]
Added variable init_dist_screen::x2#0 to zero page equivalence class [ init_dist_screen::x2#0 ]
Added variable sqr::return#3 to zero page equivalence class [ sqr::return#3 ]
Added variable init_dist_screen::xds#0 to zero page equivalence class [ init_dist_screen::xds#0 ]
Added variable init_dist_screen::ds#0 to zero page equivalence class [ init_dist_screen::ds#0 ]
Added variable sqrt::val#0 to zero page equivalence class [ sqrt::val#0 ]
Added variable sqrt::return#2 to zero page equivalence class [ sqrt::return#2 ]
Added variable init_dist_screen::d#0 to zero page equivalence class [ init_dist_screen::d#0 ]
Added variable bsearch16u::key#0 to zero page equivalence class [ bsearch16u::key#0 ]
Added variable bsearch16u::return#3 to zero page equivalence class [ bsearch16u::return#3 ]
Added variable sqrt::found#0 to zero page equivalence class [ sqrt::found#0 ]
Added variable sqrt::$3 to zero page equivalence class [ sqrt::$3 ]
Added variable sqrt::$1 to zero page equivalence class [ sqrt::$1 ]
Added variable sqrt::return#0 to zero page equivalence class [ sqrt::return#0 ]
Added variable bsearch16u::$6 to zero page equivalence class [ bsearch16u::$6 ]
Added variable bsearch16u::$16 to zero page equivalence class [ bsearch16u::$16 ]
Added variable bsearch16u::pivot#0 to zero page equivalence class [ bsearch16u::pivot#0 ]
Added variable bsearch16u::result#0 to zero page equivalence class [ bsearch16u::result#0 ]
Added variable sqr::$0 to zero page equivalence class [ sqr::$0 ]
Added variable sqr::return#0 to zero page equivalence class [ sqr::return#0 ]
Added variable SQUARES#1 to zero page equivalence class [ SQUARES#1 ]
Added variable init_squares::$3 to zero page equivalence class [ init_squares::$3 ]
Added variable init_squares::$4 to zero page equivalence class [ init_squares::$4 ]
Complete equivalence classes
[ main::dist#2 main::dist#1 ]
[ main::angle#2 main::angle#1 ]
[ main::mix#2 main::mix#1 ]
[ main::i#2 main::i#1 ]
[ main::bucket_idx#9 main::bucket_idx#1 ]
[ main::i1#2 main::i1#1 ]
[ main::i2#2 main::i2#1 ]
[ init_buckets::i#2 init_buckets::i#1 ]
[ init_buckets::dist#4 init_buckets::dist#1 ]
[ init_buckets::i1#2 init_buckets::i1#1 ]
[ init_buckets::i2#2 init_buckets::i2#1 ]
[ init_buckets::i3#2 init_buckets::i3#1 ]
[ init_buckets::dist#5 init_buckets::dist#3 ]
[ init_buckets::i4#2 init_buckets::i4#1 ]
[ heap_head#13 heap_head#1 ]
[ malloc::size#2 malloc::size#1 ]
[ init_angle_screen::y#4 init_angle_screen::y#1 ]
[ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ]
[ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ]
[ init_angle_screen::x#2 init_angle_screen::x#1 ]
[ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
[ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ]
[ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ]
[ atan2_16::i#2 atan2_16::i#1 ]
[ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ]
[ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ]
[ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
[ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
[ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
[ init_dist_screen::y#10 init_dist_screen::y#1 ]
[ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ]
[ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ]
[ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
[ init_dist_screen::x#2 init_dist_screen::x#1 ]
[ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
[ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
[ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ]
[ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
[ sqr::val#2 sqr::val#0 sqr::val#1 ]
[ init_squares::sqr#2 init_squares::sqr#1 ]
[ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
[ init_squares::i#2 init_squares::i#1 ]
[ main::$3 ]
[ main::$4 ]
[ main::$5 ]
[ main::bucket_size#0 ]
[ main::$11 ]
[ main::$19 ]
[ main::$23 ]
[ main::bucket#0 ]
[ main::$20 ]
[ main::sc#0 ]
[ main::bucket_size1#0 ]
[ main::$16 ]
[ main::$21 ]
[ main::$24 ]
[ main::bucket1#0 ]
[ main::$22 ]
[ main::sc1#0 ]
[ init_buckets::$15 ]
[ init_buckets::$5 ]
[ init_buckets::$12 ]
[ init_buckets::$16 ]
[ init_buckets::distance#0 ]
[ init_buckets::$9 ]
[ init_buckets::$13 ]
[ init_buckets::$17 ]
[ init_buckets::bucket#0 ]
[ init_buckets::$10 ]
[ init_buckets::$14 ]
[ malloc::mem#0 ]
[ init_angle_screen::$2 ]
[ init_angle_screen::$3 ]
[ init_angle_screen::xw#0 ]
[ init_angle_screen::$6 ]
[ init_angle_screen::yw#0 ]
[ atan2_16::x#0 ]
[ atan2_16::y#0 ]
[ atan2_16::return#2 ]
[ init_angle_screen::angle_w#0 ]
[ init_angle_screen::$10 ]
[ init_angle_screen::ang_w#0 ]
[ init_angle_screen::$12 ]
[ init_angle_screen::$13 ]
[ init_angle_screen::$14 ]
[ atan2_16::$24 ]
[ atan2_16::$23 ]
[ init_dist_screen::y2#0 ]
[ sqr::return#2 ]
[ init_dist_screen::yds#0 ]
[ init_dist_screen::x2#0 ]
[ sqr::return#3 ]
[ init_dist_screen::xds#0 ]
[ init_dist_screen::ds#0 ]
[ sqrt::val#0 ]
[ sqrt::return#2 ]
[ init_dist_screen::d#0 ]
[ bsearch16u::key#0 ]
[ bsearch16u::return#3 ]
[ sqrt::found#0 ]
[ sqrt::$3 ]
[ sqrt::$1 ]
[ sqrt::return#0 ]
[ bsearch16u::$6 ]
[ bsearch16u::$16 ]
[ bsearch16u::pivot#0 ]
[ bsearch16u::result#0 ]
[ sqr::$0 ]
[ sqr::return#0 ]
[ SQUARES#1 ]
[ init_squares::$3 ]
[ init_squares::$4 ]
Allocated zp ZP_WORD:2 [ main::dist#2 main::dist#1 ]
Allocated zp ZP_WORD:4 [ main::angle#2 main::angle#1 ]
Allocated zp ZP_WORD:6 [ main::mix#2 main::mix#1 ]
Allocated zp ZP_WORD:8 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ]
Allocated zp ZP_BYTE:11 [ main::i1#2 main::i1#1 ]
Allocated zp ZP_BYTE:12 [ main::i2#2 main::i2#1 ]
Allocated zp ZP_BYTE:13 [ init_buckets::i#2 init_buckets::i#1 ]
Allocated zp ZP_WORD:14 [ init_buckets::dist#4 init_buckets::dist#1 ]
Allocated zp ZP_WORD:16 [ init_buckets::i1#2 init_buckets::i1#1 ]
Allocated zp ZP_WORD:18 [ init_buckets::i2#2 init_buckets::i2#1 ]
Allocated zp ZP_BYTE:20 [ init_buckets::i3#2 init_buckets::i3#1 ]
Allocated zp ZP_WORD:21 [ init_buckets::dist#5 init_buckets::dist#3 ]
Allocated zp ZP_WORD:23 [ init_buckets::i4#2 init_buckets::i4#1 ]
Allocated zp ZP_WORD:25 [ heap_head#13 heap_head#1 ]
Allocated zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 ]
Allocated zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ]
Allocated zp ZP_WORD:30 [ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ]
Allocated zp ZP_WORD:32 [ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ]
Allocated zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ]
Allocated zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
Allocated zp ZP_WORD:36 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ]
Allocated zp ZP_WORD:38 [ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ]
Allocated zp ZP_BYTE:40 [ atan2_16::i#2 atan2_16::i#1 ]
Allocated zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ]
Allocated zp ZP_WORD:43 [ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ]
Allocated zp ZP_BYTE:45 [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
Allocated zp ZP_WORD:46 [ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
Allocated zp ZP_WORD:48 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
Allocated zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Allocated zp ZP_WORD:51 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ]
Allocated zp ZP_WORD:53 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ]
Allocated zp ZP_BYTE:55 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
Allocated zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Allocated zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Allocated zp ZP_BYTE:58 [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
Allocated zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ]
Allocated zp ZP_BYTE:61 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
Allocated zp ZP_BYTE:62 [ sqr::val#2 sqr::val#0 sqr::val#1 ]
Allocated zp ZP_WORD:63 [ init_squares::sqr#2 init_squares::sqr#1 ]
Allocated zp ZP_WORD:65 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
Allocated zp ZP_BYTE:67 [ init_squares::i#2 init_squares::i#1 ]
Allocated zp ZP_BYTE:68 [ main::$3 ]
Allocated zp ZP_BYTE:69 [ main::$4 ]
Allocated zp ZP_BYTE:70 [ main::$5 ]
Allocated zp ZP_BYTE:71 [ main::bucket_size#0 ]
Allocated zp ZP_WORD:72 [ main::$11 ]
Allocated zp ZP_WORD:74 [ main::$19 ]
Allocated zp ZP_WORD:76 [ main::$23 ]
Allocated zp ZP_WORD:78 [ main::bucket#0 ]
Allocated zp ZP_BYTE:80 [ main::$20 ]
Allocated zp ZP_WORD:81 [ main::sc#0 ]
Allocated zp ZP_BYTE:83 [ main::bucket_size1#0 ]
Allocated zp ZP_WORD:84 [ main::$16 ]
Allocated zp ZP_WORD:86 [ main::$21 ]
Allocated zp ZP_WORD:88 [ main::$24 ]
Allocated zp ZP_WORD:90 [ main::bucket1#0 ]
Allocated zp ZP_BYTE:92 [ main::$22 ]
Allocated zp ZP_WORD:93 [ main::sc1#0 ]
Allocated zp ZP_WORD:95 [ init_buckets::$15 ]
Allocated zp ZP_WORD:97 [ init_buckets::$5 ]
Allocated zp ZP_WORD:99 [ init_buckets::$12 ]
Allocated zp ZP_WORD:101 [ init_buckets::$16 ]
Allocated zp ZP_BYTE:103 [ init_buckets::distance#0 ]
Allocated zp ZP_WORD:104 [ init_buckets::$9 ]
Allocated zp ZP_WORD:106 [ init_buckets::$13 ]
Allocated zp ZP_WORD:108 [ init_buckets::$17 ]
Allocated zp ZP_WORD:110 [ init_buckets::bucket#0 ]
Allocated zp ZP_WORD:112 [ init_buckets::$10 ]
Allocated zp ZP_BYTE:114 [ init_buckets::$14 ]
Allocated zp ZP_WORD:115 [ malloc::mem#0 ]
Allocated zp ZP_BYTE:117 [ init_angle_screen::$2 ]
Allocated zp ZP_BYTE:118 [ init_angle_screen::$3 ]
Allocated zp ZP_WORD:119 [ init_angle_screen::xw#0 ]
Allocated zp ZP_BYTE:121 [ init_angle_screen::$6 ]
Allocated zp ZP_WORD:122 [ init_angle_screen::yw#0 ]
Allocated zp ZP_WORD:124 [ atan2_16::x#0 ]
Allocated zp ZP_WORD:126 [ atan2_16::y#0 ]
Allocated zp ZP_WORD:128 [ atan2_16::return#2 ]
Allocated zp ZP_WORD:130 [ init_angle_screen::angle_w#0 ]
Allocated zp ZP_WORD:132 [ init_angle_screen::$10 ]
Allocated zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ]
Allocated zp ZP_BYTE:135 [ init_angle_screen::$12 ]
Allocated zp ZP_BYTE:136 [ init_angle_screen::$13 ]
Allocated zp ZP_BYTE:137 [ init_angle_screen::$14 ]
Allocated zp ZP_BYTE:138 [ atan2_16::$24 ]
Allocated zp ZP_BYTE:139 [ atan2_16::$23 ]
Allocated zp ZP_BYTE:140 [ init_dist_screen::y2#0 ]
Allocated zp ZP_WORD:141 [ sqr::return#2 ]
Allocated zp ZP_WORD:143 [ init_dist_screen::yds#0 ]
Allocated zp ZP_BYTE:145 [ init_dist_screen::x2#0 ]
Allocated zp ZP_WORD:146 [ sqr::return#3 ]
Allocated zp ZP_WORD:148 [ init_dist_screen::xds#0 ]
Allocated zp ZP_WORD:150 [ init_dist_screen::ds#0 ]
Allocated zp ZP_WORD:152 [ sqrt::val#0 ]
Allocated zp ZP_BYTE:154 [ sqrt::return#2 ]
Allocated zp ZP_BYTE:155 [ init_dist_screen::d#0 ]
Allocated zp ZP_WORD:156 [ bsearch16u::key#0 ]
Allocated zp ZP_WORD:158 [ bsearch16u::return#3 ]
Allocated zp ZP_WORD:160 [ sqrt::found#0 ]
Allocated zp ZP_WORD:162 [ sqrt::$3 ]
Allocated zp ZP_WORD:164 [ sqrt::$1 ]
Allocated zp ZP_BYTE:166 [ sqrt::return#0 ]
Allocated zp ZP_BYTE:167 [ bsearch16u::$6 ]
Allocated zp ZP_BYTE:168 [ bsearch16u::$16 ]
Allocated zp ZP_WORD:169 [ bsearch16u::pivot#0 ]
Allocated zp ZP_WORD:171 [ bsearch16u::result#0 ]
Allocated zp ZP_BYTE:173 [ sqr::$0 ]
Allocated zp ZP_WORD:174 [ sqr::return#0 ]
Allocated zp ZP_WORD:176 [ SQUARES#1 ]
Allocated zp ZP_BYTE:178 [ init_squares::$3 ]
Allocated zp ZP_BYTE:179 [ init_squares::$4 ]

INITIAL ASM
  // File Comments
// Fill screen using a spiral based on distance-to-center / angle-to-center
// Utilizes a bucket sort for identifying the minimum angle/distance
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label RASTER = $d012
  .label BORDERCOL = $d020
  // Top of the heap used by malloc()
  .label HEAP_TOP = $a000
  // The number of iterations performed during 16-bit CORDIC atan2 calculation
  .const CORDIC_ITERATIONS_16 = $f
  // = malloc(1000);
  // Screen containing angle to center
  .label SCREEN_FILL = $400
  // The number of buckets in our bucket sort
  .const NUM_BUCKETS = $100
  .const NUM_SQUARES = $30
  .label heap_head = $19
  .label SQUARES = $b0
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label _3 = $44
    .label _4 = $45
    .label _5 = $46
    .label _11 = $48
    .label _16 = $54
    .label _19 = $4a
    .label _20 = $50
    .label _21 = $56
    .label _22 = $5c
    .label mix = 6
    .label dist = 2
    .label angle = 4
    .label i = 8
    .label bucket_size = $47
    .label bucket_idx = $a
    .label bucket_size1 = $53
    .label bucket = $4e
    .label sc = $51
    .label i1 = $b
    .label bucket1 = $5a
    .label sc1 = $5d
    .label i2 = $c
    .label _23 = $4c
    .label _24 = $58
    // [5] call init_dist_screen 
    // [165] phi from main to init_dist_screen [phi:main->init_dist_screen]
  init_dist_screen_from_main:
    jsr init_dist_screen
    // [6] phi from main to main::@13 [phi:main->main::@13]
  b13_from_main:
    jmp b13
    // main::@13
  b13:
    // [7] call init_angle_screen 
    // [92] phi from main::@13 to init_angle_screen [phi:main::@13->init_angle_screen]
  init_angle_screen_from_b13:
    jsr init_angle_screen
    // [8] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  b1_from_b13:
    // [8] phi (word) main::i#2 = (word) 0 [phi:main::@13->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
    // [8] phi (byte*) main::mix#2 = (const byte[$3e8]) SCREEN_MIX#0 [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta mix
    lda #>SCREEN_MIX
    sta mix+1
    // [8] phi (byte*) main::angle#2 = (const byte[$3e8]) SCREEN_ANGLE#0 [phi:main::@13->main::@1#2] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE
    sta angle
    lda #>SCREEN_ANGLE
    sta angle+1
    // [8] phi (byte*) main::dist#2 = (const byte[$3e8]) SCREEN_DIST#0 [phi:main::@13->main::@1#3] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST
    sta dist
    lda #>SCREEN_DIST
    sta dist+1
    jmp b1
    // [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [8] phi (word) main::i#2 = (word) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [8] phi (byte*) main::mix#2 = (byte*) main::mix#1 [phi:main::@1->main::@1#1] -- register_copy 
    // [8] phi (byte*) main::angle#2 = (byte*) main::angle#1 [phi:main::@1->main::@1#2] -- register_copy 
    // [8] phi (byte*) main::dist#2 = (byte*) main::dist#1 [phi:main::@1->main::@1#3] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2 -- vbuz1=_deref_pbuz2_rol_2 
    ldy #0
    lda (dist),y
    asl
    asl
    sta _3
    // [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1 -- vbuz1=_deref_pbuz2_ror_1 
    ldy #0
    lda (angle),y
    lsr
    sta _4
    // [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4 -- vbuz1=vbuz2_plus_vbuz3 
    lda _3
    clc
    adc _4
    sta _5
    // [12] *((byte*) main::mix#2) ← (byte~) main::$5 -- _deref_pbuz1=vbuz2 
    lda _5
    ldy #0
    sta (mix),y
    // [13] (byte*) main::mix#1 ← ++ (byte*) main::mix#2 -- pbuz1=_inc_pbuz1 
    inc mix
    bne !+
    inc mix+1
  !:
    // [14] (byte*) main::dist#1 ← ++ (byte*) main::dist#2 -- pbuz1=_inc_pbuz1 
    inc dist
    bne !+
    inc dist+1
  !:
    // [15] (byte*) main::angle#1 ← ++ (byte*) main::angle#2 -- pbuz1=_inc_pbuz1 
    inc angle
    bne !+
    inc angle+1
  !:
    // [16] (word) main::i#1 ← ++ (word) main::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
    // [17] if((word) main::i#1!=(word) $3e8) goto main::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda i+1
    cmp #>$3e8
    bne b1_from_b1
    lda i
    cmp #<$3e8
    bne b1_from_b1
    // [18] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [19] call init_buckets 
    // [50] phi from main::@2 to init_buckets [phi:main::@2->init_buckets]
  init_buckets_from_b2:
    jsr init_buckets
    // [20] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    // [20] phi (byte) main::bucket_idx#9 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta bucket_idx
    jmp b3
    // main::@3
  b3:
    jmp b4
    // main::@4
  b4:
    // [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp RASTER
    bne b4
    jmp b5
    // main::@5
  b5:
    // [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b5
    jmp b6
    // main::@6
  b6:
    // [23] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [24] (byte) main::bucket_size#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#9) -- vbuz1=pbuc1_derefidx_vbuz2 
    // First clear the current bucket
    ldy bucket_idx
    lda BUCKET_SIZES,y
    sta bucket_size
    // [25] if((byte) main::bucket_size#0<=(byte) 0) goto main::@8 -- vbuz1_le_0_then_la1 
    lda bucket_size
    cmp #0
    beq b8
    jmp b7
    // main::@7
  b7:
    // [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9 -- vwuz1=_word_vbuz2 
    lda bucket_idx
    sta _11
    lda #0
    sta _11+1
    // [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda _11
    asl
    sta _19
    lda _11+1
    rol
    sta _19+1
    // [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19 -- pptz1=pptc1_plus_vwuz2 
    lda _19
    clc
    adc #<BUCKETS
    sta _23
    lda _19+1
    adc #>BUCKETS
    sta _23+1
    // [29] (word*) main::bucket#0 ← *((word**~) main::$23) -- pwuz1=_deref_pptz2 
    ldy #0
    lda (_23),y
    sta bucket
    iny
    lda (_23),y
    sta bucket+1
    // [30] phi from main::@7 to main::@9 [phi:main::@7->main::@9]
  b9_from_b7:
    // [30] phi (byte) main::i1#2 = (byte) 0 [phi:main::@7->main::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
    jmp b9
    // [30] phi from main::@9 to main::@9 [phi:main::@9->main::@9]
  b9_from_b9:
    // [30] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@9->main::@9#0] -- register_copy 
    jmp b9
    // main::@9
  b9:
    // [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i1
    asl
    sta _20
    // [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20) -- pbuz1=pbuc1_plus_pwuz2_derefidx_vbuz3 
    ldy _20
    clc
    lda #<SCREEN_FILL
    adc (bucket),y
    sta sc
    iny
    lda #>SCREEN_FILL
    adc (bucket),y
    sta sc+1
    // [33] *((byte*) main::sc#0) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [34] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
    // [35] if((byte) main::i1#1<(byte) main::bucket_size#0) goto main::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda i1
    cmp bucket_size
    bcc b9_from_b9
    jmp b8
    // main::@8
  b8:
    // [36] (byte) main::bucket_idx#1 ← ++ (byte) main::bucket_idx#9 -- vbuz1=_inc_vbuz1 
    inc bucket_idx
    // [37] (byte) main::bucket_size1#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot char in the bucket
    ldy bucket_idx
    lda BUCKET_SIZES,y
    sta bucket_size1
    // [38] if((byte) main::bucket_size1#0<=(byte) 0) goto main::@11 -- vbuz1_le_0_then_la1 
    lda bucket_size1
    cmp #0
    beq b11
    jmp b10
    // main::@10
  b10:
    // [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1 -- vwuz1=_word_vbuz2 
    lda bucket_idx
    sta _16
    lda #0
    sta _16+1
    // [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda _16
    asl
    sta _21
    lda _16+1
    rol
    sta _21+1
    // [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21 -- pptz1=pptc1_plus_vwuz2 
    lda _21
    clc
    adc #<BUCKETS
    sta _24
    lda _21+1
    adc #>BUCKETS
    sta _24+1
    // [42] (word*) main::bucket1#0 ← *((word**~) main::$24) -- pwuz1=_deref_pptz2 
    ldy #0
    lda (_24),y
    sta bucket1
    iny
    lda (_24),y
    sta bucket1+1
    // [43] phi from main::@10 to main::@12 [phi:main::@10->main::@12]
  b12_from_b10:
    // [43] phi (byte) main::i2#2 = (byte) 0 [phi:main::@10->main::@12#0] -- vbuz1=vbuc1 
    lda #0
    sta i2
    jmp b12
    // [43] phi from main::@12 to main::@12 [phi:main::@12->main::@12]
  b12_from_b12:
    // [43] phi (byte) main::i2#2 = (byte) main::i2#1 [phi:main::@12->main::@12#0] -- register_copy 
    jmp b12
    // main::@12
  b12:
    // [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i2
    asl
    sta _22
    // [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22) -- pbuz1=pbuc1_plus_pwuz2_derefidx_vbuz3 
    ldy _22
    clc
    lda #<SCREEN_FILL
    adc (bucket1),y
    sta sc1
    iny
    lda #>SCREEN_FILL
    adc (bucket1),y
    sta sc1+1
    // [46] *((byte*) main::sc1#0) ← (byte) '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (sc1),y
    // [47] (byte) main::i2#1 ← ++ (byte) main::i2#2 -- vbuz1=_inc_vbuz1 
    inc i2
    // [48] if((byte) main::i2#1<(byte) main::bucket_size1#0) goto main::@12 -- vbuz1_lt_vbuz2_then_la1 
    lda i2
    cmp bucket_size1
    bcc b12_from_b12
    jmp b11
    // main::@11
  b11:
    // [49] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // [20] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
  b3_from_b11:
    // [20] phi (byte) main::bucket_idx#9 = (byte) main::bucket_idx#1 [phi:main::@11->main::@3#0] -- register_copy 
    jmp b3
}
  // init_buckets
// Initialize buckets containing indices of chars on the screen with specific distances to the center.
init_buckets: {
    .label _5 = $61
    .label _9 = $68
    .label _10 = $70
    .label _12 = $63
    .label _13 = $6a
    .label _14 = $72
    .label i = $d
    .label dist = $e
    .label i1 = $10
    .label i2 = $12
    .label i3 = $14
    .label distance = $67
    .label bucket = $6e
    .label dist_3 = $15
    .label i4 = $17
    .label dist_5 = $15
    .label _15 = $5f
    .label _16 = $65
    .label _17 = $6c
    // [51] phi from init_buckets to init_buckets::@1 [phi:init_buckets->init_buckets::@1]
  b1_from_init_buckets:
    // [51] phi (byte) init_buckets::i#2 = (byte) 0 [phi:init_buckets->init_buckets::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // Init bucket sizes to 0
    // [51] phi from init_buckets::@1 to init_buckets::@1 [phi:init_buckets::@1->init_buckets::@1]
  b1_from_b1:
    // [51] phi (byte) init_buckets::i#2 = (byte) init_buckets::i#1 [phi:init_buckets::@1->init_buckets::@1#0] -- register_copy 
    jmp b1
    // init_buckets::@1
  b1:
    // [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy i
    sta BUCKET_SIZES,y
    // [53] (byte) init_buckets::i#1 ← ++ (byte) init_buckets::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [54] if((byte) init_buckets::i#1!=(byte) 0) goto init_buckets::@1 -- vbuz1_neq_0_then_la1 
    lda i
    cmp #0
    bne b1_from_b1
    // [55] phi from init_buckets::@1 to init_buckets::@2 [phi:init_buckets::@1->init_buckets::@2]
  b2_from_b1:
    // [55] phi (word) init_buckets::i1#2 = (word) 0 [phi:init_buckets::@1->init_buckets::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta i1
    lda #>0
    sta i1+1
    // [55] phi (byte*) init_buckets::dist#4 = (const byte[$3e8]) SCREEN_MIX#0 [phi:init_buckets::@1->init_buckets::@2#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta dist
    lda #>SCREEN_MIX
    sta dist+1
    jmp b2
    // [55] phi from init_buckets::@2 to init_buckets::@2 [phi:init_buckets::@2->init_buckets::@2]
  b2_from_b2:
    // [55] phi (word) init_buckets::i1#2 = (word) init_buckets::i1#1 [phi:init_buckets::@2->init_buckets::@2#0] -- register_copy 
    // [55] phi (byte*) init_buckets::dist#4 = (byte*) init_buckets::dist#1 [phi:init_buckets::@2->init_buckets::@2#1] -- register_copy 
    jmp b2
    // init_buckets::@2
  b2:
    // [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) -- pbuc1_derefidx__deref_pbuz1=_inc_pbuc1_derefidx__deref_pbuz1 
    ldy #0
    lda (dist),y
    tax
    inc BUCKET_SIZES,x
    // [57] (byte*) init_buckets::dist#1 ← ++ (byte*) init_buckets::dist#4 -- pbuz1=_inc_pbuz1 
    inc dist
    bne !+
    inc dist+1
  !:
    // [58] (word) init_buckets::i1#1 ← ++ (word) init_buckets::i1#2 -- vwuz1=_inc_vwuz1 
    inc i1
    bne !+
    inc i1+1
  !:
    // [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda i1+1
    cmp #>$3e8
    bne b2_from_b2
    lda i1
    cmp #<$3e8
    bne b2_from_b2
    // [60] phi from init_buckets::@2 to init_buckets::@3 [phi:init_buckets::@2->init_buckets::@3]
  b3_from_b2:
    // [60] phi (word) init_buckets::i2#2 = (word) 0 [phi:init_buckets::@2->init_buckets::@3#0] -- vwuz1=vwuc1 
    lda #<0
    sta i2
    lda #>0
    sta i2+1
    jmp b3
  // Allocate the buckets
    // [60] phi from init_buckets::@6 to init_buckets::@3 [phi:init_buckets::@6->init_buckets::@3]
  b3_from_b6:
    // [60] phi (word) init_buckets::i2#2 = (word) init_buckets::i2#1 [phi:init_buckets::@6->init_buckets::@3#0] -- register_copy 
    jmp b3
    // init_buckets::@3
  b3:
    // [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda i2
    clc
    adc #<BUCKET_SIZES
    sta _15
    lda i2+1
    adc #>BUCKET_SIZES
    sta _15+1
    // [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1 -- vwuz1=_deref_pbuz2_rol_1 
    ldy #0
    lda _15
    asl
    sta malloc.size
    lda #0
    rol
    sta malloc.size+1
    // [63] call malloc 
    // [88] phi from init_buckets::@3 to malloc [phi:init_buckets::@3->malloc]
  malloc_from_b3:
    // [88] phi (word) malloc::size#2 = (word) malloc::size#1 [phi:init_buckets::@3->malloc#0] -- register_copy 
    // [88] phi (byte*) heap_head#13 = (byte*) heap_head#1 [phi:init_buckets::@3->malloc#1] -- register_copy 
    jsr malloc
    jmp b6
    // init_buckets::@6
  b6:
    // [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
    lda malloc.mem
    sta _5
    lda malloc.mem+1
    sta _5+1
    // [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda i2
    asl
    sta _12
    lda i2+1
    rol
    sta _12+1
    // [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12 -- pptz1=pptc1_plus_vwuz2 
    lda _12
    clc
    adc #<BUCKETS
    sta _16
    lda _12+1
    adc #>BUCKETS
    sta _16+1
    // [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5 -- _deref_pptz1=pwuz2 
    ldy #0
    lda _5
    sta (_16),y
    iny
    lda _5+1
    sta (_16),y
    // [68] (word) init_buckets::i2#1 ← ++ (word) init_buckets::i2#2 -- vwuz1=_inc_vwuz1 
    inc i2
    bne !+
    inc i2+1
  !:
    // [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3 -- vwuz1_neq_vwuc1_then_la1 
    lda i2+1
    cmp #>NUM_BUCKETS-1+1
    bne b3_from_b6
    lda i2
    cmp #<NUM_BUCKETS-1+1
    bne b3_from_b6
    // [70] phi from init_buckets::@6 to init_buckets::@4 [phi:init_buckets::@6->init_buckets::@4]
  b4_from_b6:
    // [70] phi (byte) init_buckets::i3#2 = (byte) 0 [phi:init_buckets::@6->init_buckets::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta i3
    jmp b4
  // Iterate all distances and fill the buckets with indices into the screens
    // [70] phi from init_buckets::@4 to init_buckets::@4 [phi:init_buckets::@4->init_buckets::@4]
  b4_from_b4:
    // [70] phi (byte) init_buckets::i3#2 = (byte) init_buckets::i3#1 [phi:init_buckets::@4->init_buckets::@4#0] -- register_copy 
    jmp b4
    // init_buckets::@4
  b4:
    // [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy i3
    sta BUCKET_IDX,y
    // [72] (byte) init_buckets::i3#1 ← ++ (byte) init_buckets::i3#2 -- vbuz1=_inc_vbuz1 
    inc i3
    // [73] if((byte) init_buckets::i3#1!=(byte) 0) goto init_buckets::@4 -- vbuz1_neq_0_then_la1 
    lda i3
    cmp #0
    bne b4_from_b4
    // [74] phi from init_buckets::@4 to init_buckets::@5 [phi:init_buckets::@4->init_buckets::@5]
  b5_from_b4:
    // [74] phi (word) init_buckets::i4#2 = (word) 0 [phi:init_buckets::@4->init_buckets::@5#0] -- vwuz1=vwuc1 
    lda #<0
    sta i4
    lda #>0
    sta i4+1
    // [74] phi (byte*) init_buckets::dist#5 = (const byte[$3e8]) SCREEN_MIX#0 [phi:init_buckets::@4->init_buckets::@5#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta dist_5
    lda #>SCREEN_MIX
    sta dist_5+1
    jmp b5
    // [74] phi from init_buckets::@5 to init_buckets::@5 [phi:init_buckets::@5->init_buckets::@5]
  b5_from_b5:
    // [74] phi (word) init_buckets::i4#2 = (word) init_buckets::i4#1 [phi:init_buckets::@5->init_buckets::@5#0] -- register_copy 
    // [74] phi (byte*) init_buckets::dist#5 = (byte*) init_buckets::dist#3 [phi:init_buckets::@5->init_buckets::@5#1] -- register_copy 
    jmp b5
    // init_buckets::@5
  b5:
    // [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (dist_5),y
    sta distance
    // [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0 -- vwuz1=_word_vbuz2 
    lda distance
    sta _9
    lda #0
    sta _9+1
    // [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda _9
    asl
    sta _13
    lda _9+1
    rol
    sta _13+1
    // [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13 -- pptz1=pptc1_plus_vwuz2 
    lda _13
    clc
    adc #<BUCKETS
    sta _17
    lda _13+1
    adc #>BUCKETS
    sta _17+1
    // [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17) -- pwuz1=_deref_pptz2 
    ldy #0
    lda (_17),y
    sta bucket
    iny
    lda (_17),y
    sta bucket+1
    // [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0 -- vwuz1=pbuz2_minus_pbuc1 
    lda dist_5
    sec
    sbc #<SCREEN_MIX
    sta _10
    lda dist_5+1
    sbc #>SCREEN_MIX
    sta _10+1
    // [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1 -- vbuz1=pbuc1_derefidx_vbuz2_rol_1 
    ldy distance
    lda BUCKET_IDX,y
    asl
    sta _14
    // [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10 -- pwuz1_derefidx_vbuz2=vwuz3 
    ldy _14
    lda _10
    sta (bucket),y
    iny
    lda _10+1
    sta (bucket),y
    // [83] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx distance
    inc BUCKET_IDX,x
    // [84] (byte*) init_buckets::dist#3 ← ++ (byte*) init_buckets::dist#5 -- pbuz1=_inc_pbuz1 
    inc dist_3
    bne !+
    inc dist_3+1
  !:
    // [85] (word) init_buckets::i4#1 ← ++ (word) init_buckets::i4#2 -- vwuz1=_inc_vwuz1 
    inc i4
    bne !+
    inc i4+1
  !:
    // [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5 -- vwuz1_neq_vwuc1_then_la1 
    lda i4+1
    cmp #>$3e8
    bne b5_from_b5
    lda i4
    cmp #<$3e8
    bne b5_from_b5
    jmp breturn
    // init_buckets::@return
  breturn:
    // [87] return 
    rts
}
  // malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
// malloc(word zeropage($1b) size)
malloc: {
    .label mem = $73
    .label size = $1b
    // [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2 -- pbuz1=pbuz2_minus_vwuz3 
    lda heap_head
    sec
    sbc size
    sta mem
    lda heap_head+1
    sbc size+1
    sta mem+1
    // [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0 -- pbuz1=pbuz2 
    lda mem
    sta heap_head
    lda mem+1
    sta heap_head+1
    jmp breturn
    // malloc::@return
  breturn:
    // [91] return 
    rts
}
  // init_angle_screen
// Populates 1000 bytes (a screen) with values representing the angle to the center.
// Utilizes symmetry around the center
init_angle_screen: {
    .label _2 = $75
    .label _3 = $76
    .label _6 = $79
    .label _10 = $84
    .label _12 = $87
    .label _13 = $88
    .label _14 = $89
    .label xw = $77
    .label yw = $7a
    .label angle_w = $82
    .label ang_w = $86
    .label x = $22
    .label xb = $23
    .label screen_topline = $20
    .label screen_bottomline = $1e
    .label y = $1d
    // [93] phi from init_angle_screen to init_angle_screen::@1 [phi:init_angle_screen->init_angle_screen::@1]
  b1_from_init_angle_screen:
    // [93] phi (byte*) init_angle_screen::screen_topline#5 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c [phi:init_angle_screen->init_angle_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE+$28*$c
    sta screen_topline
    lda #>SCREEN_ANGLE+$28*$c
    sta screen_topline+1
    // [93] phi (byte*) init_angle_screen::screen_bottomline#5 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c [phi:init_angle_screen->init_angle_screen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE+$28*$c
    sta screen_bottomline
    lda #>SCREEN_ANGLE+$28*$c
    sta screen_bottomline+1
    // [93] phi (byte) init_angle_screen::y#4 = (byte) 0 [phi:init_angle_screen->init_angle_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
    // [93] phi from init_angle_screen::@3 to init_angle_screen::@1 [phi:init_angle_screen::@3->init_angle_screen::@1]
  b1_from_b3:
    // [93] phi (byte*) init_angle_screen::screen_topline#5 = (byte*) init_angle_screen::screen_topline#1 [phi:init_angle_screen::@3->init_angle_screen::@1#0] -- register_copy 
    // [93] phi (byte*) init_angle_screen::screen_bottomline#5 = (byte*) init_angle_screen::screen_bottomline#1 [phi:init_angle_screen::@3->init_angle_screen::@1#1] -- register_copy 
    // [93] phi (byte) init_angle_screen::y#4 = (byte) init_angle_screen::y#1 [phi:init_angle_screen::@3->init_angle_screen::@1#2] -- register_copy 
    jmp b1
    // init_angle_screen::@1
  b1:
    // [94] phi from init_angle_screen::@1 to init_angle_screen::@2 [phi:init_angle_screen::@1->init_angle_screen::@2]
  b2_from_b1:
    // [94] phi (byte) init_angle_screen::xb#2 = (byte) $27 [phi:init_angle_screen::@1->init_angle_screen::@2#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
    // [94] phi (byte) init_angle_screen::x#2 = (byte) 0 [phi:init_angle_screen::@1->init_angle_screen::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
    // [94] phi from init_angle_screen::@4 to init_angle_screen::@2 [phi:init_angle_screen::@4->init_angle_screen::@2]
  b2_from_b4:
    // [94] phi (byte) init_angle_screen::xb#2 = (byte) init_angle_screen::xb#1 [phi:init_angle_screen::@4->init_angle_screen::@2#0] -- register_copy 
    // [94] phi (byte) init_angle_screen::x#2 = (byte) init_angle_screen::x#1 [phi:init_angle_screen::@4->init_angle_screen::@2#1] -- register_copy 
    jmp b2
    // init_angle_screen::@2
  b2:
    // [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda x
    asl
    sta _2
    // [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$27
    sec
    sbc _2
    sta _3
    // [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0 -- vwuz1=vbuz2_word_vbuc1 
    lda _3
    ldy #0
    sta xw+1
    sty xw
    // [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda y
    asl
    sta _6
    // [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0 -- vwuz1=vbuz2_word_vbuc1 
    lda _6
    ldy #0
    sta yw+1
    sty yw
    // [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0 -- vwsz1=vwsz2 
    lda xw
    sta atan2_16.x
    lda xw+1
    sta atan2_16.x+1
    // [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0 -- vwsz1=vwsz2 
    lda yw
    sta atan2_16.y
    lda yw+1
    sta atan2_16.y+1
    // [102] call atan2_16 
    jsr atan2_16
    // [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0 -- vwuz1=vwuz2 
    lda atan2_16.return
    sta atan2_16.return_2
    lda atan2_16.return+1
    sta atan2_16.return_2+1
    jmp b4
    // init_angle_screen::@4
  b4:
    // [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2 -- vwuz1=vwuz2 
    lda atan2_16.return_2
    sta angle_w
    lda atan2_16.return_2+1
    sta angle_w+1
    // [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80 -- vwuz1=vwuz2_plus_vbuc1 
    lda #$80
    clc
    adc angle_w
    sta _10
    lda #0
    adc angle_w+1
    sta _10+1
    // [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10 -- vbuz1=_hi_vwuz2 
    lda _10+1
    sta ang_w
    // [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda ang_w
    ldy xb
    sta (screen_bottomline),y
    // [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0 -- vbuz1=_neg_vbuz2 
    lda ang_w
    eor #$ff
    clc
    adc #1
    sta _12
    // [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda _12
    ldy xb
    sta (screen_topline),y
    // [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0 -- vbuz1=vbuc1_plus_vbuz2 
    lax ang_w
    axs #-[$80]
    stx _13
    // [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda _13
    ldy x
    sta (screen_topline),y
    // [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$80
    sec
    sbc ang_w
    sta _14
    // [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda _14
    ldy x
    sta (screen_bottomline),y
    // [114] (byte) init_angle_screen::x#1 ← ++ (byte) init_angle_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [115] (byte) init_angle_screen::xb#1 ← -- (byte) init_angle_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
    // [116] if((byte) init_angle_screen::x#1<(byte) $13+(byte) 1) goto init_angle_screen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b2_from_b4
    jmp b3
    // init_angle_screen::@3
  b3:
    // [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_topline
    sec
    sbc #<$28
    sta screen_topline
    lda screen_topline+1
    sbc #>$28
    sta screen_topline+1
    // [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_bottomline
    sta screen_bottomline
    bcc !+
    inc screen_bottomline+1
  !:
    // [119] (byte) init_angle_screen::y#1 ← ++ (byte) init_angle_screen::y#4 -- vbuz1=_inc_vbuz1 
    inc y
    // [120] if((byte) init_angle_screen::y#1!=(byte) $d) goto init_angle_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1_from_b3
    jmp breturn
    // init_angle_screen::@return
  breturn:
    // [121] return 
    rts
}
  // atan2_16
// Find the atan2(x, y) - which is the angle of the line from (0,0) to (x,y)
// Finding the angle requires a binary search using CORDIC_ITERATIONS_16
// Returns the angle in hex-degrees (0=0, 0x8000=PI, 0x10000=2*PI)
// atan2_16(signed word zeropage($7c) x, signed word zeropage($7e) y)
atan2_16: {
    .label _2 = $24
    .label _7 = $26
    .label _23 = $8b
    .label _24 = $8a
    .label yi = $24
    .label xi = $26
    .label angle = $2b
    .label xd = $30
    .label yd = $2e
    .label shift = $2d
    .label angle_2 = $29
    .label angle_3 = $29
    .label i = $28
    .label return = $2b
    .label x = $7c
    .label y = $7e
    .label return_2 = $80
    .label angle_6 = $29
    .label angle_12 = $29
    .label angle_13 = $29
    // [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1 -- vwsz1_ge_0_then_la1 
    lda y+1
    bpl b1
    jmp b2
    // atan2_16::@2
  b2:
    // [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc y
    sta _2
    lda #0
    sbc y+1
    sta _2+1
    // [124] phi from atan2_16::@1 atan2_16::@2 to atan2_16::@3 [phi:atan2_16::@1/atan2_16::@2->atan2_16::@3]
  b3_from_b1:
  b3_from_b2:
    // [124] phi (signed word) atan2_16::yi#0 = (signed word~) atan2_16::yi#16 [phi:atan2_16::@1/atan2_16::@2->atan2_16::@3#0] -- register_copy 
    jmp b3
    // atan2_16::@3
  b3:
    // [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4 -- vwsz1_ge_0_then_la1 
    lda x+1
    bpl b4
    jmp b5
    // atan2_16::@5
  b5:
    // [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc x
    sta _7
    lda #0
    sbc x+1
    sta _7+1
    // [127] phi from atan2_16::@4 atan2_16::@5 to atan2_16::@6 [phi:atan2_16::@4/atan2_16::@5->atan2_16::@6]
  b6_from_b4:
  b6_from_b5:
    // [127] phi (signed word) atan2_16::xi#0 = (signed word~) atan2_16::xi#13 [phi:atan2_16::@4/atan2_16::@5->atan2_16::@6#0] -- register_copy 
    jmp b6
    // atan2_16::@6
  b6:
    // [128] phi from atan2_16::@6 to atan2_16::@10 [phi:atan2_16::@6->atan2_16::@10]
  b10_from_b6:
    // [128] phi (word) atan2_16::angle#12 = (byte) 0 [phi:atan2_16::@6->atan2_16::@10#0] -- vwuz1=vbuc1 
    lda #0
    sta angle_12
    lda #0
    sta angle_12+1
    // [128] phi (byte) atan2_16::i#2 = (byte) 0 [phi:atan2_16::@6->atan2_16::@10#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    // [128] phi (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#0 [phi:atan2_16::@6->atan2_16::@10#2] -- register_copy 
    // [128] phi (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#0 [phi:atan2_16::@6->atan2_16::@10#3] -- register_copy 
    jmp b10
    // atan2_16::@10
  b10:
    // [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11 -- vwsz1_neq_0_then_la1 
    lda yi+1
    bne b11
    lda yi
    bne b11
    // [130] phi from atan2_16::@10 atan2_16::@19 to atan2_16::@12 [phi:atan2_16::@10/atan2_16::@19->atan2_16::@12]
  b12_from_b10:
  b12_from_b19:
    // [130] phi (word) atan2_16::angle#6 = (word) atan2_16::angle#12 [phi:atan2_16::@10/atan2_16::@19->atan2_16::@12#0] -- register_copy 
    jmp b12
    // atan2_16::@12
  b12:
    // [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda angle_6+1
    lsr
    sta angle+1
    lda angle_6
    ror
    sta angle
    // [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7 -- vwsz1_ge_0_then_la1 
    lda x+1
    bpl b7_from_b12
    jmp b21
    // atan2_16::@21
  b21:
    // [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<$8000
    sbc angle
    sta angle
    lda #>$8000
    sbc angle+1
    sta angle+1
    // [134] phi from atan2_16::@12 atan2_16::@21 to atan2_16::@7 [phi:atan2_16::@12/atan2_16::@21->atan2_16::@7]
  b7_from_b12:
  b7_from_b21:
    // [134] phi (word) atan2_16::angle#11 = (word) atan2_16::angle#1 [phi:atan2_16::@12/atan2_16::@21->atan2_16::@7#0] -- register_copy 
    jmp b7
    // atan2_16::@7
  b7:
    // [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8 -- vwsz1_ge_0_then_la1 
    lda y+1
    bpl b8_from_b7
    jmp b9
    // atan2_16::@9
  b9:
    // [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc angle
    sta angle
    lda #0
    sbc angle+1
    sta angle+1
    // [137] phi from atan2_16::@7 atan2_16::@9 to atan2_16::@8 [phi:atan2_16::@7/atan2_16::@9->atan2_16::@8]
  b8_from_b7:
  b8_from_b9:
    // [137] phi (word) atan2_16::return#0 = (word) atan2_16::angle#11 [phi:atan2_16::@7/atan2_16::@9->atan2_16::@8#0] -- register_copy 
    jmp b8
    // atan2_16::@8
  b8:
    jmp breturn
    // atan2_16::@return
  breturn:
    // [138] return 
    rts
    // atan2_16::@11
  b11:
    // [139] (byte~) atan2_16::shift#5 ← (byte) atan2_16::i#2 -- vbuz1=vbuz2 
    lda i
    sta shift
    // [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3 -- vwsz1=vwsz2 
    lda xi
    sta xd
    lda xi+1
    sta xd+1
    // [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3 -- vwsz1=vwsz2 
    lda yi
    sta yd
    lda yi+1
    sta yd+1
    // [142] phi from atan2_16::@11 atan2_16::@14 to atan2_16::@13 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13]
  b13_from_b11:
  b13_from_b14:
    // [142] phi (signed word) atan2_16::yd#3 = (signed word~) atan2_16::yd#10 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#0] -- register_copy 
    // [142] phi (signed word) atan2_16::xd#3 = (signed word~) atan2_16::xd#10 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#1] -- register_copy 
    // [142] phi (byte) atan2_16::shift#2 = (byte~) atan2_16::shift#5 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#2] -- register_copy 
    jmp b13
    // atan2_16::@13
  b13:
    // [143] if((byte) atan2_16::shift#2>=(byte) 2) goto atan2_16::@14 -- vbuz1_ge_vbuc1_then_la1 
    lda shift
    cmp #2
    bcs b14
    jmp b15
    // atan2_16::@15
  b15:
    // [144] if((byte) 0==(byte) atan2_16::shift#2) goto atan2_16::@17 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp shift
    beq b17_from_b15
    jmp b16
    // atan2_16::@16
  b16:
    // [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1 -- vwsz1=vwsz1_ror_1 
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    // [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1 -- vwsz1=vwsz1_ror_1 
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    // [147] phi from atan2_16::@15 atan2_16::@16 to atan2_16::@17 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17]
  b17_from_b15:
  b17_from_b16:
    // [147] phi (signed word) atan2_16::xd#5 = (signed word) atan2_16::xd#3 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17#0] -- register_copy 
    // [147] phi (signed word) atan2_16::yd#5 = (signed word) atan2_16::yd#3 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17#1] -- register_copy 
    jmp b17
    // atan2_16::@17
  b17:
    // [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18 -- vwsz1_ge_0_then_la1 
    lda yi+1
    bpl b18
    jmp b20
    // atan2_16::@20
  b20:
    // [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5 -- vwsz1=vwsz1_minus_vwsz2 
    lda xi
    sec
    sbc yd
    sta xi
    lda xi+1
    sbc yd+1
    sta xi+1
    // [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5 -- vwsz1=vwsz1_plus_vwsz2 
    lda yi
    clc
    adc xd
    sta yi
    lda yi+1
    adc xd+1
    sta yi+1
    // [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _24
    // [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24) -- vwuz1=vwuz1_minus_pwuc1_derefidx_vbuz2 
    ldy _24
    sec
    lda angle_3
    sbc CORDIC_ATAN2_ANGLES_16,y
    sta angle_3
    lda angle_3+1
    sbc CORDIC_ATAN2_ANGLES_16+1,y
    sta angle_3+1
    // [153] phi from atan2_16::@18 atan2_16::@20 to atan2_16::@19 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19]
  b19_from_b18:
  b19_from_b20:
    // [153] phi (signed word) atan2_16::xi#8 = (signed word) atan2_16::xi#1 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#0] -- register_copy 
    // [153] phi (word) atan2_16::angle#13 = (word) atan2_16::angle#2 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#1] -- register_copy 
    // [153] phi (signed word) atan2_16::yi#8 = (signed word) atan2_16::yi#1 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#2] -- register_copy 
    jmp b19
    // atan2_16::@19
  b19:
    // [154] (byte) atan2_16::i#1 ← ++ (byte) atan2_16::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [155] if((byte) atan2_16::i#1==(const byte) CORDIC_ITERATIONS_16#0-(byte) 1+(byte) 1) goto atan2_16::@12 -- vbuz1_eq_vbuc1_then_la1 
    lda #CORDIC_ITERATIONS_16-1+1
    cmp i
    beq b12_from_b19
    // [128] phi from atan2_16::@19 to atan2_16::@10 [phi:atan2_16::@19->atan2_16::@10]
  b10_from_b19:
    // [128] phi (word) atan2_16::angle#12 = (word) atan2_16::angle#13 [phi:atan2_16::@19->atan2_16::@10#0] -- register_copy 
    // [128] phi (byte) atan2_16::i#2 = (byte) atan2_16::i#1 [phi:atan2_16::@19->atan2_16::@10#1] -- register_copy 
    // [128] phi (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#8 [phi:atan2_16::@19->atan2_16::@10#2] -- register_copy 
    // [128] phi (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#8 [phi:atan2_16::@19->atan2_16::@10#3] -- register_copy 
    jmp b10
    // atan2_16::@18
  b18:
    // [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5 -- vwsz1=vwsz1_plus_vwsz2 
    lda xi
    clc
    adc yd
    sta xi
    lda xi+1
    adc yd+1
    sta xi+1
    // [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5 -- vwsz1=vwsz1_minus_vwsz2 
    lda yi
    sec
    sbc xd
    sta yi
    lda yi+1
    sbc xd+1
    sta yi+1
    // [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _23
    // [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23) -- vwuz1=vwuz1_plus_pwuc1_derefidx_vbuz2 
    ldy _23
    clc
    lda angle_2
    adc CORDIC_ATAN2_ANGLES_16,y
    sta angle_2
    lda angle_2+1
    adc CORDIC_ATAN2_ANGLES_16+1,y
    sta angle_2+1
    jmp b19_from_b18
    // atan2_16::@14
  b14:
    // [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2 -- vwsz1=vwsz1_ror_2 
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    // [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2 -- vwsz1=vwsz1_ror_2 
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    // [162] (byte) atan2_16::shift#1 ← (byte) atan2_16::shift#2 - (byte) 2 -- vbuz1=vbuz1_minus_2 
    dec shift
    dec shift
    jmp b13_from_b14
    // atan2_16::@4
  b4:
    // [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0 -- vwsz1=vwsz2 
    lda x
    sta xi
    lda x+1
    sta xi+1
    jmp b6_from_b4
    // atan2_16::@1
  b1:
    // [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0 -- vwsz1=vwsz2 
    lda y
    sta yi
    lda y+1
    sta yi+1
    jmp b3_from_b1
}
  // init_dist_screen
// Populates 1000 bytes (a screen) with values representing the distance to the center.
// The actual value stored is distance*2 to increase precision
// Utilizes symmetry around the center
init_dist_screen: {
    .label _5 = $37
    .label _7 = $37
    .label _13 = $3a
    .label _15 = $3a
    .label y2 = $8c
    .label yd = $37
    .label yds = $8f
    .label x2 = $91
    .label xd = $3a
    .label xds = $94
    .label ds = $96
    .label d = $9b
    .label x = $38
    .label xb = $39
    .label screen_topline = $33
    .label screen_bottomline = $35
    .label y = $32
    // [166] call init_squares 
    // [236] phi from init_dist_screen to init_squares [phi:init_dist_screen->init_squares]
  init_squares_from_init_dist_screen:
    jsr init_squares
    // [167] phi from init_dist_screen to init_dist_screen::@1 [phi:init_dist_screen->init_dist_screen::@1]
  b1_from_init_dist_screen:
    // [167] phi (byte*) init_dist_screen::screen_bottomline#10 = (const byte[$3e8]) SCREEN_DIST#0+(word)(number) $28*(number) $18 [phi:init_dist_screen->init_dist_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST+$28*$18
    sta screen_bottomline
    lda #>SCREEN_DIST+$28*$18
    sta screen_bottomline+1
    // [167] phi (byte*) init_dist_screen::screen_topline#10 = (const byte[$3e8]) SCREEN_DIST#0 [phi:init_dist_screen->init_dist_screen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST
    sta screen_topline
    lda #>SCREEN_DIST
    sta screen_topline+1
    // [167] phi (byte) init_dist_screen::y#10 = (byte) 0 [phi:init_dist_screen->init_dist_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
    // [167] phi from init_dist_screen::@9 to init_dist_screen::@1 [phi:init_dist_screen::@9->init_dist_screen::@1]
  b1_from_b9:
    // [167] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#0] -- register_copy 
    // [167] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#1] -- register_copy 
    // [167] phi (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#1 [phi:init_dist_screen::@9->init_dist_screen::@1#2] -- register_copy 
    jmp b1
    // init_dist_screen::@1
  b1:
    // [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda y
    asl
    sta y2
    // [169] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda y2
    cmp #$18
    bcs b2
    jmp b3
    // init_dist_screen::@3
  b3:
    // [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$18
    sec
    sbc y2
    sta _5
    // [171] phi from init_dist_screen::@2 init_dist_screen::@3 to init_dist_screen::@4 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4]
  b4_from_b2:
  b4_from_b3:
    // [171] phi (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$7 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4#0] -- register_copy 
    jmp b4
    // init_dist_screen::@4
  b4:
    // [172] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0 -- vbuz1=vbuz2 
    lda yd
    sta sqr.val
    // [173] call sqr 
    // [232] phi from init_dist_screen::@4 to sqr [phi:init_dist_screen::@4->sqr]
  sqr_from_b4:
    // [232] phi (byte) sqr::val#2 = (byte) sqr::val#0 [phi:init_dist_screen::@4->sqr#0] -- register_copy 
    jsr sqr
    // [174] (word) sqr::return#2 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_2
    lda sqr.return+1
    sta sqr.return_2+1
    jmp b10
    // init_dist_screen::@10
  b10:
    // [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 -- vwuz1=vwuz2 
    lda sqr.return_2
    sta yds
    lda sqr.return_2+1
    sta yds+1
    // [176] phi from init_dist_screen::@10 to init_dist_screen::@5 [phi:init_dist_screen::@10->init_dist_screen::@5]
  b5_from_b10:
    // [176] phi (byte) init_dist_screen::xb#2 = (byte) $27 [phi:init_dist_screen::@10->init_dist_screen::@5#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
    // [176] phi (byte) init_dist_screen::x#2 = (byte) 0 [phi:init_dist_screen::@10->init_dist_screen::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b5
    // [176] phi from init_dist_screen::@12 to init_dist_screen::@5 [phi:init_dist_screen::@12->init_dist_screen::@5]
  b5_from_b12:
    // [176] phi (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#1 [phi:init_dist_screen::@12->init_dist_screen::@5#0] -- register_copy 
    // [176] phi (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#1 [phi:init_dist_screen::@12->init_dist_screen::@5#1] -- register_copy 
    jmp b5
    // init_dist_screen::@5
  b5:
    // [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda x
    asl
    sta x2
    // [178] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6 -- vbuz1_ge_vbuc1_then_la1 
    lda x2
    cmp #$27
    bcs b6
    jmp b7
    // init_dist_screen::@7
  b7:
    // [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$27
    sec
    sbc x2
    sta _13
    // [180] phi from init_dist_screen::@6 init_dist_screen::@7 to init_dist_screen::@8 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8]
  b8_from_b6:
  b8_from_b7:
    // [180] phi (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$15 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8#0] -- register_copy 
    jmp b8
    // init_dist_screen::@8
  b8:
    // [181] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0 -- vbuz1=vbuz2 
    lda xd
    sta sqr.val
    // [182] call sqr 
    // [232] phi from init_dist_screen::@8 to sqr [phi:init_dist_screen::@8->sqr]
  sqr_from_b8:
    // [232] phi (byte) sqr::val#2 = (byte) sqr::val#1 [phi:init_dist_screen::@8->sqr#0] -- register_copy 
    jsr sqr
    // [183] (word) sqr::return#3 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_3
    lda sqr.return+1
    sta sqr.return_3+1
    jmp b11
    // init_dist_screen::@11
  b11:
    // [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 -- vwuz1=vwuz2 
    lda sqr.return_3
    sta xds
    lda sqr.return_3+1
    sta xds+1
    // [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda xds
    clc
    adc yds
    sta ds
    lda xds+1
    adc yds+1
    sta ds+1
    // [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 -- vwuz1=vwuz2 
    lda ds
    sta sqrt.val
    lda ds+1
    sta sqrt.val+1
    // [187] call sqrt 
    jsr sqrt
    // [188] (byte) sqrt::return#2 ← (byte) sqrt::return#0 -- vbuz1=vbuz2 
    lda sqrt.return
    sta sqrt.return_2
    jmp b12
    // init_dist_screen::@12
  b12:
    // [189] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2 -- vbuz1=vbuz2 
    lda sqrt.return_2
    sta d
    // [190] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy x
    sta (screen_topline),y
    // [191] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy x
    sta (screen_bottomline),y
    // [192] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy xb
    sta (screen_topline),y
    // [193] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy xb
    sta (screen_bottomline),y
    // [194] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [195] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
    // [196] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b5_from_b12
    jmp b9
    // init_dist_screen::@9
  b9:
    // [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_topline
    sta screen_topline
    bcc !+
    inc screen_topline+1
  !:
    // [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_bottomline
    sec
    sbc #<$28
    sta screen_bottomline
    lda screen_bottomline+1
    sbc #>$28
    sta screen_bottomline+1
    // [199] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10 -- vbuz1=_inc_vbuz1 
    inc y
    // [200] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1_from_b9
    jmp breturn
    // init_dist_screen::@return
  breturn:
    // [201] return 
    rts
    // init_dist_screen::@6
  b6:
    // [202] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27 -- vbuz1=vbuz2_minus_vbuc1 
    lax x2
    axs #$27
    stx _15
    jmp b8_from_b6
    // init_dist_screen::@2
  b2:
    // [203] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18 -- vbuz1=vbuz2_minus_vbuc1 
    lax y2
    axs #$18
    stx _7
    jmp b4_from_b2
}
  // sqrt
// Find the (integer) square root of a word value
// If the square is not an integer then it returns the largest integer N where N*N <= val
// Uses a table of squares that must be initialized by calling init_squares()
// sqrt(word zeropage($98) val)
sqrt: {
    .label _1 = $a4
    .label _3 = $a2
    .label found = $a0
    .label return = $a6
    .label val = $98
    .label return_2 = $9a
    // [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0 -- vwuz1=vwuz2 
    lda val
    sta bsearch16u.key
    lda val+1
    sta bsearch16u.key+1
    // [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta bsearch16u.items
    lda SQUARES+1
    sta bsearch16u.items+1
    // [206] call bsearch16u 
    // [213] phi from sqrt to bsearch16u [phi:sqrt->bsearch16u]
  bsearch16u_from_sqrt:
    jsr bsearch16u
    // [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 -- pwuz1=pwuz2 
    lda bsearch16u.return
    sta bsearch16u.return_3
    lda bsearch16u.return+1
    sta bsearch16u.return_3+1
    jmp b1
    // sqrt::@1
  b1:
    // [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 -- pwuz1=pwuz2 
    lda bsearch16u.return_3
    sta found
    lda bsearch16u.return_3+1
    sta found+1
    // [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 -- vwuz1=pwuz2_minus_pwuz3 
    lda found
    sec
    sbc SQUARES
    sta _3
    lda found+1
    sbc SQUARES+1
    sta _3+1
    // [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda _3+1
    lsr
    sta _1+1
    lda _3
    ror
    sta _1
    // [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 -- vbuz1=_byte_vwuz2 
    lda _1
    sta return
    jmp breturn
    // sqrt::@return
  breturn:
    // [212] return 
    rts
}
  // bsearch16u
// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
// bsearch16u(word zeropage($9c) key, word* zeropage($3b) items, byte zeropage($3d) num)
bsearch16u: {
    .label _2 = $3b
    .label _6 = $a7
    .label _16 = $a8
    .label pivot = $a9
    .label result = $ab
    .label return = $3b
    .label num = $3d
    .label items = $3b
    .label key = $9c
    .label return_3 = $9e
    // [214] phi from bsearch16u to bsearch16u::@3 [phi:bsearch16u->bsearch16u::@3]
  b3_from_bsearch16u:
    // [214] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#1 [phi:bsearch16u->bsearch16u::@3#0] -- register_copy 
    // [214] phi (byte) bsearch16u::num#3 = (const byte) NUM_SQUARES#3 [phi:bsearch16u->bsearch16u::@3#1] -- vbuz1=vbuc1 
    lda #NUM_SQUARES
    sta num
    jmp b3
    // bsearch16u::@3
  b3:
    // [215] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4 -- vbuz1_gt_0_then_la1 
    lda num
    bne b4
    jmp b5
    // bsearch16u::@5
  b5:
    // [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 -- _deref_pwuz1_le_vwuz2_then_la1 
    ldy #1
    lda (items),y
    cmp key+1
    bne !+
    dey
    lda (items),y
    cmp key
    beq b2_from_b5
  !:
    bcc b2_from_b5
    jmp b1
    // bsearch16u::@1
  b1:
    // [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz1_minus_vwuc1 
    lda _2
    sec
    sbc #<1*SIZEOF_WORD
    sta _2
    lda _2+1
    sbc #>1*SIZEOF_WORD
    sta _2+1
    // [218] phi from bsearch16u::@1 bsearch16u::@5 to bsearch16u::@2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2]
  b2_from_b1:
  b2_from_b5:
    // [218] phi (word*) bsearch16u::return#2 = (word*~) bsearch16u::$2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2#0] -- register_copy 
    jmp b2
    // bsearch16u::@2
  b2:
    // [219] phi from bsearch16u::@2 bsearch16u::@8 to bsearch16u::@return [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return]
  breturn_from_b2:
  breturn_from_b8:
    // [219] phi (word*) bsearch16u::return#1 = (word*) bsearch16u::return#2 [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return#0] -- register_copy 
    jmp breturn
    // bsearch16u::@return
  breturn:
    // [220] return 
    rts
    // bsearch16u::@4
  b4:
    // [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda num
    lsr
    sta _6
    // [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _6
    asl
    sta _16
    // [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 -- pwuz1=pwuz2_plus_vbuz3 
    lda _16
    clc
    adc items
    sta pivot
    lda #0
    adc items+1
    sta pivot+1
    // [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) -- vwsz1=vwsz2_minus__deref_pwsz3 
    sec
    lda key
    ldy #0
    sbc (pivot),y
    sta result
    lda key+1
    iny
    sbc (pivot),y
    sta result+1
    // [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 -- vwsz1_neq_0_then_la1 
    lda result+1
    bne b6
    lda result
    bne b6
    jmp b8
    // bsearch16u::@8
  b8:
    // [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 -- pwuz1=pwuz2 
    lda pivot
    sta return
    lda pivot+1
    sta return+1
    jmp breturn_from_b8
    // bsearch16u::@6
  b6:
    // [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 -- vwsz1_le_0_then_la1 
    lda result+1
    bmi b7_from_b6
    bne !+
    lda result
    beq b7_from_b6
  !:
    jmp b9
    // bsearch16u::@9
  b9:
    // [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz2_plus_vbuc1 
    lda #1*SIZEOF_WORD
    clc
    adc pivot
    sta items
    lda #0
    adc pivot+1
    sta items+1
    // [229] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3 -- vbuz1=_dec_vbuz1 
    dec num
    // [230] phi from bsearch16u::@6 bsearch16u::@9 to bsearch16u::@7 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7]
  b7_from_b6:
  b7_from_b9:
    // [230] phi (word*) bsearch16u::items#8 = (word*) bsearch16u::items#2 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#0] -- register_copy 
    // [230] phi (byte) bsearch16u::num#5 = (byte) bsearch16u::num#3 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#1] -- register_copy 
    jmp b7
    // bsearch16u::@7
  b7:
    // [231] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr num
    // [214] phi from bsearch16u::@7 to bsearch16u::@3 [phi:bsearch16u::@7->bsearch16u::@3]
  b3_from_b7:
    // [214] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#8 [phi:bsearch16u::@7->bsearch16u::@3#0] -- register_copy 
    // [214] phi (byte) bsearch16u::num#3 = (byte) bsearch16u::num#0 [phi:bsearch16u::@7->bsearch16u::@3#1] -- register_copy 
    jmp b3
}
  // sqr
// Find the square of a byte value
// Uses a table of squares that must be initialized by calling init_squares()
// sqr(byte zeropage($3e) val)
sqr: {
    .label _0 = $ad
    .label return = $ae
    .label val = $3e
    .label return_2 = $8d
    .label return_3 = $92
    // [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda val
    asl
    sta _0
    // [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) -- vwuz1=pwuz2_derefidx_vbuz3 
    ldy _0
    lda (SQUARES),y
    sta return
    iny
    lda (SQUARES),y
    sta return+1
    jmp breturn
    // sqr::@return
  breturn:
    // [235] return 
    rts
}
  // init_squares
// Initialize squares table
// Uses iterative formula (x+1)^2 = x^2 + 2*x + 1
init_squares: {
    .label _3 = $b2
    .label _4 = $b3
    .label squares = $41
    .label sqr = $3f
    .label i = $43
    // [237] call malloc 
    // [88] phi from init_squares to malloc [phi:init_squares->malloc]
  malloc_from_init_squares:
    // [88] phi (word) malloc::size#2 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD [phi:init_squares->malloc#0] -- vwuz1=vbuc1 
    lda #NUM_SQUARES*SIZEOF_WORD
    sta malloc.size
    lda #0
    sta malloc.size+1
    // [88] phi (byte*) heap_head#13 = (const byte*) HEAP_TOP#0 [phi:init_squares->malloc#1] -- pbuz1=pbuc1 
    lda #<HEAP_TOP
    sta heap_head
    lda #>HEAP_TOP
    sta heap_head+1
    jsr malloc
    jmp b2
    // init_squares::@2
  b2:
    // [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
    lda malloc.mem
    sta SQUARES
    lda malloc.mem+1
    sta SQUARES+1
    // [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta squares
    lda SQUARES+1
    sta squares+1
    // [240] phi from init_squares::@2 to init_squares::@1 [phi:init_squares::@2->init_squares::@1]
  b1_from_b2:
    // [240] phi (byte) init_squares::i#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    // [240] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#0 [phi:init_squares::@2->init_squares::@1#1] -- register_copy 
    // [240] phi (word) init_squares::sqr#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
    jmp b1
    // [240] phi from init_squares::@1 to init_squares::@1 [phi:init_squares::@1->init_squares::@1]
  b1_from_b1:
    // [240] phi (byte) init_squares::i#2 = (byte) init_squares::i#1 [phi:init_squares::@1->init_squares::@1#0] -- register_copy 
    // [240] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#1 [phi:init_squares::@1->init_squares::@1#1] -- register_copy 
    // [240] phi (word) init_squares::sqr#2 = (word) init_squares::sqr#1 [phi:init_squares::@1->init_squares::@1#2] -- register_copy 
    jmp b1
    // init_squares::@1
  b1:
    // [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda sqr
    sta (squares),y
    iny
    lda sqr+1
    sta (squares),y
    // [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_WORD
    clc
    adc squares
    sta squares
    bcc !+
    inc squares+1
  !:
    // [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _3
    // [244] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy _3
    iny
    sty _4
    // [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 -- vwuz1=vwuz1_plus_vbuz2 
    lda _4
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
    // [246] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [247] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_SQUARES-1+1
    cmp i
    bne b1_from_b1
    jmp breturn
    // init_squares::@return
  breturn:
    // [248] return 
    rts
}
  // File Data
  // Angles representing ATAN(0.5), ATAN(0.25), ATAN(0.125), ...
CORDIC_ATAN2_ANGLES_16:
.for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2

  // Screen containing distance to center
  SCREEN_DIST: .fill $3e8, 0
  // = malloc(1000);
  // Screen containing angle to center
  SCREEN_ANGLE: .fill $3e8, 0
  // = malloc(1000);
  // Screen containing angle to center
  SCREEN_MIX: .fill $3e8, 0
  // Array containing the bucket size for each of the distance buckets
  BUCKET_SIZES: .fill NUM_BUCKETS, 0
  // Buckets containing screen indices for each distance from the center.
  // BUCKETS[dist] is an array of words containing screen indices.
  // The size of the array BUCKETS[dist] is BUCKET_SIZES[dist]
  BUCKETS: .fill 2*NUM_BUCKETS, 0
  // Current index into each bucket. Used while populating the buckets. (After population the end the values will be equal to the bucket sizes)
  BUCKET_IDX: .fill NUM_BUCKETS, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 main::$4 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 main::$4 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ main::$3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:68 [ main::$3 ]
Statement [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$5 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$5 heap_head#1 ] ) always clobbers reg byte a 
Statement [12] *((byte*) main::mix#2) ← (byte~) main::$5 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 heap_head#1 ] ) always clobbers reg byte y 
Statement [17] if((word) main::i#1!=(word) $3e8) goto main::@1 [ main::dist#1 main::angle#1 main::mix#1 main::i#1 heap_head#1 ] ( main:2 [ main::dist#1 main::angle#1 main::mix#1 main::i#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4 [ main::bucket_idx#9 ] ( main:2 [ main::bucket_idx#9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ]
Statement [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5 [ main::bucket_idx#9 ] ( main:2 [ main::bucket_idx#9 ] ) always clobbers reg byte a 
Statement [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9 [ main::bucket_idx#9 main::bucket_size#0 main::$11 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$11 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:71 [ main::bucket_size#0 ]
Statement [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1 [ main::bucket_idx#9 main::bucket_size#0 main::$19 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$19 ] ) always clobbers reg byte a 
Statement [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19 [ main::bucket_idx#9 main::bucket_size#0 main::$23 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$23 ] ) always clobbers reg byte a 
Statement [29] (word*) main::bucket#0 ← *((word**~) main::$23) [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:71 [ main::bucket_size#0 ]
Statement [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::$20 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::$20 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ main::i1#2 main::i1#1 ]
Statement [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20) [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::sc#0 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::sc#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ main::i1#2 main::i1#1 ]
Statement [33] *((byte*) main::sc#0) ← (byte) ' ' [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 ] ) always clobbers reg byte a reg byte y 
Statement [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1 [ main::bucket_idx#1 main::bucket_size1#0 main::$16 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$16 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:83 [ main::bucket_size1#0 ]
Statement [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1 [ main::bucket_idx#1 main::bucket_size1#0 main::$21 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$21 ] ) always clobbers reg byte a 
Statement [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21 [ main::bucket_idx#1 main::bucket_size1#0 main::$24 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$24 ] ) always clobbers reg byte a 
Statement [42] (word*) main::bucket1#0 ← *((word**~) main::$24) [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:83 [ main::bucket_size1#0 ]
Statement [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::$22 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::$22 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ main::i2#2 main::i2#1 ]
Statement [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22) [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::sc1#0 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::sc1#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:12 [ main::i2#2 main::i2#1 ]
Statement [46] *((byte*) main::sc1#0) ← (byte) '*' [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 ] ) always clobbers reg byte a reg byte y 
Statement [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0 [ init_buckets::i#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i#2 heap_head#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ init_buckets::i#2 init_buckets::i#1 ]
Statement [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) [ init_buckets::dist#4 init_buckets::i1#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#4 init_buckets::i1#2 heap_head#1 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2 [ init_buckets::dist#1 init_buckets::i1#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#1 init_buckets::i1#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2 [ init_buckets::i2#2 init_buckets::$15 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$15 heap_head#1 ] ) always clobbers reg byte a 
Statement [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1 [ init_buckets::i2#2 malloc::size#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 malloc::size#1 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0 [ init_buckets::i2#2 init_buckets::$5 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 heap_head#1 ] ) always clobbers reg byte a 
Statement [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$12 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$12 heap_head#1 ] ) always clobbers reg byte a 
Statement [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$16 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$16 heap_head#1 ] ) always clobbers reg byte a 
Statement [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5 [ init_buckets::i2#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3 [ init_buckets::i2#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0 [ init_buckets::i3#2 ] ( main:2::init_buckets:19 [ init_buckets::i3#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ init_buckets::i3#2 init_buckets::i3#1 ]
Statement [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5) [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ) always clobbers reg byte a reg byte y 
Statement [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$9 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:103 [ init_buckets::distance#0 ]
Statement [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$13 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$13 ] ) always clobbers reg byte a 
Statement [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$17 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$17 ] ) always clobbers reg byte a 
Statement [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17) [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:103 [ init_buckets::distance#0 ]
Statement [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 ] ) always clobbers reg byte a 
Statement [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 init_buckets::$14 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 init_buckets::$14 ] ) always clobbers reg byte a 
Statement [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ) always clobbers reg byte a reg byte y 
Statement [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5 [ init_buckets::dist#3 init_buckets::i4#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#3 init_buckets::i4#1 ] ) always clobbers reg byte a 
Statement [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2 [ malloc::mem#0 ] ( main:2::init_buckets:19::malloc:63 [ init_buckets::i2#2 malloc::mem#0 ] main:2::init_dist_screen:5::init_squares:166::malloc:237 [ malloc::mem#0 ] ) always clobbers reg byte a 
Statement [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0 [ malloc::mem#0 heap_head#1 ] ( main:2::init_buckets:19::malloc:63 [ init_buckets::i2#2 malloc::mem#0 heap_head#1 ] main:2::init_dist_screen:5::init_squares:166::malloc:237 [ malloc::mem#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
Statement [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$3 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$3 ] ) always clobbers reg byte a 
Statement [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
Statement [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::$6 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::$6 ] ) always clobbers reg byte a 
Statement [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::yw#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::yw#0 ] ) always clobbers reg byte y 
Statement [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::yw#0 atan2_16::x#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::yw#0 atan2_16::x#0 ] ) always clobbers reg byte a 
Statement [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ) always clobbers reg byte a 
Statement [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::return#2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::return#2 ] ) always clobbers reg byte a 
Statement [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::angle_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::angle_w#0 ] ) always clobbers reg byte a 
Statement [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$10 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$10 ] ) always clobbers reg byte a 
Statement [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte a 
Statement [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ]
Statement [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$12 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ]
Statement [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Statement [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$13 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$13 ] ) always clobbers reg byte a 
Statement [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Statement [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$14 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$14 ] ) always clobbers reg byte a 
Statement [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 ] ) always clobbers reg byte y 
Statement [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#1 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#1 ] ) always clobbers reg byte a 
Statement [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#1 init_angle_screen::screen_topline#1 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#1 init_angle_screen::screen_topline#1 ] ) always clobbers reg byte a 
Statement [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1 [ atan2_16::x#0 atan2_16::y#0 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ) always clobbers reg byte a 
Statement [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::$2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::$2 ] ) always clobbers reg byte a 
Statement [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 ] ) always clobbers reg byte a 
Statement [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::$7 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::$7 ] ) always clobbers reg byte a 
Statement [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ atan2_16::i#2 atan2_16::i#1 ]
Statement [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::angle#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::angle#1 ] ) always clobbers reg byte a 
Statement [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7 [ atan2_16::y#0 atan2_16::angle#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::y#0 atan2_16::angle#1 ] ) always clobbers reg byte a 
Statement [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1 [ atan2_16::y#0 atan2_16::angle#4 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::y#0 atan2_16::angle#4 ] ) always clobbers reg byte a 
Statement [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8 [ atan2_16::angle#11 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::angle#11 ] ) always clobbers reg byte a 
Statement [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11 [ atan2_16::angle#5 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::angle#5 ] ) always clobbers reg byte a 
Statement [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
Statement [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 atan2_16::yd#10 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 atan2_16::yd#10 ] ) always clobbers reg byte a 
Statement [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#3 atan2_16::xd#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#3 atan2_16::xd#2 ] ) always clobbers reg byte a 
Statement [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#2 atan2_16::yd#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#2 atan2_16::yd#2 ] ) always clobbers reg byte a 
Statement [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#5 atan2_16::xd#5 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#5 atan2_16::xd#5 ] ) always clobbers reg byte a 
Statement [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#2 ] ) always clobbers reg byte a 
Statement [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 ] ) always clobbers reg byte a 
Statement [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 atan2_16::$24 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 atan2_16::$24 ] ) always clobbers reg byte a 
Statement [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24) [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::xi#2 atan2_16::yi#2 atan2_16::angle#3 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::xi#2 atan2_16::yi#2 atan2_16::angle#3 ] ) always clobbers reg byte a 
Statement [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 atan2_16::$23 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 atan2_16::$23 ] ) always clobbers reg byte a 
Statement [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23) [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::yi#1 atan2_16::angle#2 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::yi#1 atan2_16::angle#2 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::yd#3 atan2_16::xd#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::yd#3 atan2_16::xd#1 ] ) always clobbers reg byte a 
Statement [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::xd#1 atan2_16::yd#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::xd#1 atan2_16::yd#1 ] ) always clobbers reg byte a 
Statement [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::xi#13 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::xi#13 ] ) always clobbers reg byte a 
Statement [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#16 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#16 ] ) always clobbers reg byte a 
Statement [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Statement [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ) always clobbers reg byte a 
Statement [174] (word) sqr::return#2 ← (word) sqr::return#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ) always clobbers reg byte a 
Statement [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Statement [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ) always clobbers reg byte a 
Statement [183] (word) sqr::return#3 ← (word) sqr::return#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ) always clobbers reg byte a 
Statement [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0 [ bsearch16u::key#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 [ bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 [ SQUARES#1 bsearch16u::return#3 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#3 ] ) always clobbers reg byte a 
Statement [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 [ SQUARES#1 sqrt::found#0 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::found#0 ] ) always clobbers reg byte a 
Statement [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 [ SQUARES#1 sqrt::$3 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$3 ] ) always clobbers reg byte a 
Statement [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 [ SQUARES#1 sqrt::$1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$1 ] ) always clobbers reg byte a 
Statement [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 [ sqrt::return#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::return#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 [ bsearch16u::items#2 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::items#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Statement [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::$2 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::$2 ] ) always clobbers reg byte a 
Statement [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:61 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
Statement [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ) always clobbers reg byte a 
Statement [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:61 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
Statement [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a 
Statement [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 [ bsearch16u::return#6 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#6 ] ) always clobbers reg byte a 
Statement [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ) always clobbers reg byte a 
Statement [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 [ SQUARES#1 sqr::$0 ] ( main:2::init_dist_screen:5::sqr:173 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 SQUARES#1 sqr::$0 ] main:2::init_dist_screen:5::sqr:182 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqr::$0 ] ) always clobbers reg byte a 
Statement [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) [ sqr::return#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqr:173 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#0 SQUARES#1 ] main:2::init_dist_screen:5::sqr:182 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#0 SQUARES#1 ] ) always clobbers reg byte a reg byte y 
Statement [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 [ heap_head#1 SQUARES#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 [ heap_head#1 SQUARES#1 init_squares::squares#0 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::squares#0 ] ) always clobbers reg byte a 
Statement [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:67 [ init_squares::i#2 init_squares::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:67 [ init_squares::i#2 init_squares::i#1 ]
Statement [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ) always clobbers reg byte a 
Statement [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 [ heap_head#1 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 main::$4 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 main::$4 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$5 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$5 heap_head#1 ] ) always clobbers reg byte a 
Statement [12] *((byte*) main::mix#2) ← (byte~) main::$5 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 heap_head#1 ] ) always clobbers reg byte y 
Statement [17] if((word) main::i#1!=(word) $3e8) goto main::@1 [ main::dist#1 main::angle#1 main::mix#1 main::i#1 heap_head#1 ] ( main:2 [ main::dist#1 main::angle#1 main::mix#1 main::i#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4 [ main::bucket_idx#9 ] ( main:2 [ main::bucket_idx#9 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5 [ main::bucket_idx#9 ] ( main:2 [ main::bucket_idx#9 ] ) always clobbers reg byte a 
Statement [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9 [ main::bucket_idx#9 main::bucket_size#0 main::$11 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$11 ] ) always clobbers reg byte a 
Statement [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1 [ main::bucket_idx#9 main::bucket_size#0 main::$19 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$19 ] ) always clobbers reg byte a 
Statement [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19 [ main::bucket_idx#9 main::bucket_size#0 main::$23 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$23 ] ) always clobbers reg byte a 
Statement [29] (word*) main::bucket#0 ← *((word**~) main::$23) [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 ] ) always clobbers reg byte a reg byte y 
Statement [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::$20 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::$20 ] ) always clobbers reg byte a 
Statement [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20) [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::sc#0 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::sc#0 ] ) always clobbers reg byte a reg byte y 
Statement [33] *((byte*) main::sc#0) ← (byte) ' ' [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 ] ) always clobbers reg byte a reg byte y 
Statement [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1 [ main::bucket_idx#1 main::bucket_size1#0 main::$16 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$16 ] ) always clobbers reg byte a 
Statement [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1 [ main::bucket_idx#1 main::bucket_size1#0 main::$21 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$21 ] ) always clobbers reg byte a 
Statement [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21 [ main::bucket_idx#1 main::bucket_size1#0 main::$24 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$24 ] ) always clobbers reg byte a 
Statement [42] (word*) main::bucket1#0 ← *((word**~) main::$24) [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 ] ) always clobbers reg byte a reg byte y 
Statement [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::$22 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::$22 ] ) always clobbers reg byte a 
Statement [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22) [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::sc1#0 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::sc1#0 ] ) always clobbers reg byte a reg byte y 
Statement [46] *((byte*) main::sc1#0) ← (byte) '*' [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 ] ) always clobbers reg byte a reg byte y 
Statement [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0 [ init_buckets::i#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i#2 heap_head#1 ] ) always clobbers reg byte a 
Statement [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) [ init_buckets::dist#4 init_buckets::i1#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#4 init_buckets::i1#2 heap_head#1 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2 [ init_buckets::dist#1 init_buckets::i1#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#1 init_buckets::i1#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2 [ init_buckets::i2#2 init_buckets::$15 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$15 heap_head#1 ] ) always clobbers reg byte a 
Statement [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1 [ init_buckets::i2#2 malloc::size#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 malloc::size#1 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0 [ init_buckets::i2#2 init_buckets::$5 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 heap_head#1 ] ) always clobbers reg byte a 
Statement [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$12 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$12 heap_head#1 ] ) always clobbers reg byte a 
Statement [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$16 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$16 heap_head#1 ] ) always clobbers reg byte a 
Statement [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5 [ init_buckets::i2#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3 [ init_buckets::i2#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0 [ init_buckets::i3#2 ] ( main:2::init_buckets:19 [ init_buckets::i3#2 ] ) always clobbers reg byte a 
Statement [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5) [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ) always clobbers reg byte a reg byte y 
Statement [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$9 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$9 ] ) always clobbers reg byte a 
Statement [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$13 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$13 ] ) always clobbers reg byte a 
Statement [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$17 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$17 ] ) always clobbers reg byte a 
Statement [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17) [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 ] ) always clobbers reg byte a reg byte y 
Statement [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 ] ) always clobbers reg byte a 
Statement [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 init_buckets::$14 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 init_buckets::$14 ] ) always clobbers reg byte a 
Statement [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ) always clobbers reg byte a reg byte y 
Statement [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5 [ init_buckets::dist#3 init_buckets::i4#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#3 init_buckets::i4#1 ] ) always clobbers reg byte a 
Statement [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2 [ malloc::mem#0 ] ( main:2::init_buckets:19::malloc:63 [ init_buckets::i2#2 malloc::mem#0 ] main:2::init_dist_screen:5::init_squares:166::malloc:237 [ malloc::mem#0 ] ) always clobbers reg byte a 
Statement [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0 [ malloc::mem#0 heap_head#1 ] ( main:2::init_buckets:19::malloc:63 [ init_buckets::i2#2 malloc::mem#0 heap_head#1 ] main:2::init_dist_screen:5::init_squares:166::malloc:237 [ malloc::mem#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$2 ] ) always clobbers reg byte a 
Statement [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$3 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$3 ] ) always clobbers reg byte a 
Statement [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 ] ) always clobbers reg byte y 
Statement [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::$6 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::$6 ] ) always clobbers reg byte a 
Statement [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::yw#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::yw#0 ] ) always clobbers reg byte y 
Statement [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::yw#0 atan2_16::x#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::yw#0 atan2_16::x#0 ] ) always clobbers reg byte a 
Statement [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ) always clobbers reg byte a 
Statement [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::return#2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::return#2 ] ) always clobbers reg byte a 
Statement [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::angle_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::angle_w#0 ] ) always clobbers reg byte a 
Statement [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$10 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$10 ] ) always clobbers reg byte a 
Statement [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte a 
Statement [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte a reg byte y 
Statement [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$12 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$12 ] ) always clobbers reg byte a 
Statement [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Statement [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$13 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$13 ] ) always clobbers reg byte a 
Statement [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Statement [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$14 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$14 ] ) always clobbers reg byte a 
Statement [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 ] ) always clobbers reg byte y 
Statement [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#1 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#1 ] ) always clobbers reg byte a 
Statement [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#1 init_angle_screen::screen_topline#1 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#1 init_angle_screen::screen_topline#1 ] ) always clobbers reg byte a 
Statement [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1 [ atan2_16::x#0 atan2_16::y#0 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ) always clobbers reg byte a 
Statement [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::$2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::$2 ] ) always clobbers reg byte a 
Statement [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 ] ) always clobbers reg byte a 
Statement [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::$7 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::$7 ] ) always clobbers reg byte a 
Statement [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 ] ) always clobbers reg byte a 
Statement [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::angle#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::angle#1 ] ) always clobbers reg byte a 
Statement [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7 [ atan2_16::y#0 atan2_16::angle#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::y#0 atan2_16::angle#1 ] ) always clobbers reg byte a 
Statement [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1 [ atan2_16::y#0 atan2_16::angle#4 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::y#0 atan2_16::angle#4 ] ) always clobbers reg byte a 
Statement [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8 [ atan2_16::angle#11 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::angle#11 ] ) always clobbers reg byte a 
Statement [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11 [ atan2_16::angle#5 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::angle#5 ] ) always clobbers reg byte a 
Statement [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 ] ) always clobbers reg byte a 
Statement [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 atan2_16::yd#10 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 atan2_16::yd#10 ] ) always clobbers reg byte a 
Statement [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#3 atan2_16::xd#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#3 atan2_16::xd#2 ] ) always clobbers reg byte a 
Statement [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#2 atan2_16::yd#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#2 atan2_16::yd#2 ] ) always clobbers reg byte a 
Statement [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#5 atan2_16::xd#5 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#5 atan2_16::xd#5 ] ) always clobbers reg byte a 
Statement [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#2 ] ) always clobbers reg byte a 
Statement [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 ] ) always clobbers reg byte a 
Statement [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 atan2_16::$24 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 atan2_16::$24 ] ) always clobbers reg byte a 
Statement [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24) [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::xi#2 atan2_16::yi#2 atan2_16::angle#3 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::xi#2 atan2_16::yi#2 atan2_16::angle#3 ] ) always clobbers reg byte a 
Statement [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 atan2_16::$23 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 atan2_16::$23 ] ) always clobbers reg byte a 
Statement [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23) [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::yi#1 atan2_16::angle#2 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::yi#1 atan2_16::angle#2 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::yd#3 atan2_16::xd#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::yd#3 atan2_16::xd#1 ] ) always clobbers reg byte a 
Statement [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::xd#1 atan2_16::yd#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::xd#1 atan2_16::yd#1 ] ) always clobbers reg byte a 
Statement [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::xi#13 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::xi#13 ] ) always clobbers reg byte a 
Statement [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#16 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#16 ] ) always clobbers reg byte a 
Statement [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ) always clobbers reg byte a 
Statement [174] (word) sqr::return#2 ← (word) sqr::return#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ) always clobbers reg byte a 
Statement [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ) always clobbers reg byte a 
Statement [183] (word) sqr::return#3 ← (word) sqr::return#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ) always clobbers reg byte a 
Statement [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [190] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:155 [ init_dist_screen::d#0 ]
Statement [191] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [192] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [193] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ) always clobbers reg byte y 
Statement [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0 [ bsearch16u::key#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 [ bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 [ SQUARES#1 bsearch16u::return#3 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#3 ] ) always clobbers reg byte a 
Statement [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 [ SQUARES#1 sqrt::found#0 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::found#0 ] ) always clobbers reg byte a 
Statement [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 [ SQUARES#1 sqrt::$3 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$3 ] ) always clobbers reg byte a 
Statement [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 [ SQUARES#1 sqrt::$1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$1 ] ) always clobbers reg byte a 
Statement [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 [ sqrt::return#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::return#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 [ bsearch16u::items#2 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::items#2 ] ) always clobbers reg byte a reg byte y 
Statement [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::$2 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::$2 ] ) always clobbers reg byte a 
Statement [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ) always clobbers reg byte a 
Statement [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ) always clobbers reg byte a 
Statement [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a reg byte y 
Statement [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a 
Statement [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 [ bsearch16u::return#6 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#6 ] ) always clobbers reg byte a 
Statement [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ) always clobbers reg byte a 
Statement [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 [ SQUARES#1 sqr::$0 ] ( main:2::init_dist_screen:5::sqr:173 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 SQUARES#1 sqr::$0 ] main:2::init_dist_screen:5::sqr:182 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqr::$0 ] ) always clobbers reg byte a 
Statement [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) [ sqr::return#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqr:173 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#0 SQUARES#1 ] main:2::init_dist_screen:5::sqr:182 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#0 SQUARES#1 ] ) always clobbers reg byte a reg byte y 
Statement [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 [ heap_head#1 SQUARES#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 [ heap_head#1 SQUARES#1 init_squares::squares#0 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::squares#0 ] ) always clobbers reg byte a 
Statement [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ) always clobbers reg byte a 
Statement [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 [ heap_head#1 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 main::$4 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$3 main::$4 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$5 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 main::$5 heap_head#1 ] ) always clobbers reg byte a 
Statement [12] *((byte*) main::mix#2) ← (byte~) main::$5 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 heap_head#1 ] ( main:2 [ main::dist#2 main::angle#2 main::mix#2 main::i#2 heap_head#1 ] ) always clobbers reg byte y 
Statement [17] if((word) main::i#1!=(word) $3e8) goto main::@1 [ main::dist#1 main::angle#1 main::mix#1 main::i#1 heap_head#1 ] ( main:2 [ main::dist#1 main::angle#1 main::mix#1 main::i#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4 [ main::bucket_idx#9 ] ( main:2 [ main::bucket_idx#9 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5 [ main::bucket_idx#9 ] ( main:2 [ main::bucket_idx#9 ] ) always clobbers reg byte a 
Statement [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9 [ main::bucket_idx#9 main::bucket_size#0 main::$11 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$11 ] ) always clobbers reg byte a 
Statement [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1 [ main::bucket_idx#9 main::bucket_size#0 main::$19 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$19 ] ) always clobbers reg byte a 
Statement [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19 [ main::bucket_idx#9 main::bucket_size#0 main::$23 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::$23 ] ) always clobbers reg byte a 
Statement [29] (word*) main::bucket#0 ← *((word**~) main::$23) [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 ] ) always clobbers reg byte a reg byte y 
Statement [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::$20 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::$20 ] ) always clobbers reg byte a 
Statement [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20) [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::sc#0 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 main::sc#0 ] ) always clobbers reg byte a reg byte y 
Statement [33] *((byte*) main::sc#0) ← (byte) ' ' [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 ] ( main:2 [ main::bucket_idx#9 main::bucket_size#0 main::bucket#0 main::i1#2 ] ) always clobbers reg byte a reg byte y 
Statement [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1 [ main::bucket_idx#1 main::bucket_size1#0 main::$16 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$16 ] ) always clobbers reg byte a 
Statement [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1 [ main::bucket_idx#1 main::bucket_size1#0 main::$21 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$21 ] ) always clobbers reg byte a 
Statement [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21 [ main::bucket_idx#1 main::bucket_size1#0 main::$24 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::$24 ] ) always clobbers reg byte a 
Statement [42] (word*) main::bucket1#0 ← *((word**~) main::$24) [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 ] ) always clobbers reg byte a reg byte y 
Statement [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::$22 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::$22 ] ) always clobbers reg byte a 
Statement [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22) [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::sc1#0 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 main::sc1#0 ] ) always clobbers reg byte a reg byte y 
Statement [46] *((byte*) main::sc1#0) ← (byte) '*' [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 ] ( main:2 [ main::bucket_idx#1 main::bucket_size1#0 main::bucket1#0 main::i2#2 ] ) always clobbers reg byte a reg byte y 
Statement [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0 [ init_buckets::i#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i#2 heap_head#1 ] ) always clobbers reg byte a 
Statement [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) [ init_buckets::dist#4 init_buckets::i1#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#4 init_buckets::i1#2 heap_head#1 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2 [ init_buckets::dist#1 init_buckets::i1#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#1 init_buckets::i1#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2 [ init_buckets::i2#2 init_buckets::$15 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$15 heap_head#1 ] ) always clobbers reg byte a 
Statement [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1 [ init_buckets::i2#2 malloc::size#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 malloc::size#1 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0 [ init_buckets::i2#2 init_buckets::$5 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 heap_head#1 ] ) always clobbers reg byte a 
Statement [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$12 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$12 heap_head#1 ] ) always clobbers reg byte a 
Statement [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$16 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 init_buckets::$5 init_buckets::$16 heap_head#1 ] ) always clobbers reg byte a 
Statement [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5 [ init_buckets::i2#2 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#2 heap_head#1 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3 [ init_buckets::i2#1 heap_head#1 ] ( main:2::init_buckets:19 [ init_buckets::i2#1 heap_head#1 ] ) always clobbers reg byte a 
Statement [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0 [ init_buckets::i3#2 ] ( main:2::init_buckets:19 [ init_buckets::i3#2 ] ) always clobbers reg byte a 
Statement [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5) [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ) always clobbers reg byte a reg byte y 
Statement [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$9 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$9 ] ) always clobbers reg byte a 
Statement [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$13 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$13 ] ) always clobbers reg byte a 
Statement [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$17 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::$17 ] ) always clobbers reg byte a 
Statement [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17) [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 ] ) always clobbers reg byte a reg byte y 
Statement [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 ] ) always clobbers reg byte a 
Statement [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 init_buckets::$14 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 init_buckets::bucket#0 init_buckets::$10 init_buckets::$14 ] ) always clobbers reg byte a 
Statement [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ( main:2::init_buckets:19 [ init_buckets::dist#5 init_buckets::i4#2 init_buckets::distance#0 ] ) always clobbers reg byte a reg byte y 
Statement [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5 [ init_buckets::dist#3 init_buckets::i4#1 ] ( main:2::init_buckets:19 [ init_buckets::dist#3 init_buckets::i4#1 ] ) always clobbers reg byte a 
Statement [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2 [ malloc::mem#0 ] ( main:2::init_buckets:19::malloc:63 [ init_buckets::i2#2 malloc::mem#0 ] main:2::init_dist_screen:5::init_squares:166::malloc:237 [ malloc::mem#0 ] ) always clobbers reg byte a 
Statement [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0 [ malloc::mem#0 heap_head#1 ] ( main:2::init_buckets:19::malloc:63 [ init_buckets::i2#2 malloc::mem#0 heap_head#1 ] main:2::init_dist_screen:5::init_squares:166::malloc:237 [ malloc::mem#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$2 ] ) always clobbers reg byte a 
Statement [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$3 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$3 ] ) always clobbers reg byte a 
Statement [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 ] ) always clobbers reg byte y 
Statement [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::$6 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::$6 ] ) always clobbers reg byte a 
Statement [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::yw#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::xw#0 init_angle_screen::yw#0 ] ) always clobbers reg byte y 
Statement [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::yw#0 atan2_16::x#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::yw#0 atan2_16::x#0 ] ) always clobbers reg byte a 
Statement [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ) always clobbers reg byte a 
Statement [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::return#2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::return#2 ] ) always clobbers reg byte a 
Statement [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::angle_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::angle_w#0 ] ) always clobbers reg byte a 
Statement [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$10 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$10 ] ) always clobbers reg byte a 
Statement [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte a 
Statement [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte a reg byte y 
Statement [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$12 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$12 ] ) always clobbers reg byte a 
Statement [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Statement [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$13 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 init_angle_screen::$13 ] ) always clobbers reg byte a 
Statement [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::ang_w#0 ] ) always clobbers reg byte y 
Statement [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$14 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 init_angle_screen::$14 ] ) always clobbers reg byte a 
Statement [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 ] ) always clobbers reg byte y 
Statement [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#1 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#1 ] ) always clobbers reg byte a 
Statement [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28 [ init_angle_screen::y#4 init_angle_screen::screen_bottomline#1 init_angle_screen::screen_topline#1 ] ( main:2::init_angle_screen:7 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#1 init_angle_screen::screen_topline#1 ] ) always clobbers reg byte a 
Statement [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1 [ atan2_16::x#0 atan2_16::y#0 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 ] ) always clobbers reg byte a 
Statement [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::$2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::$2 ] ) always clobbers reg byte a 
Statement [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 ] ) always clobbers reg byte a 
Statement [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::$7 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::$7 ] ) always clobbers reg byte a 
Statement [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 ] ) always clobbers reg byte a 
Statement [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::angle#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::angle#1 ] ) always clobbers reg byte a 
Statement [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7 [ atan2_16::y#0 atan2_16::angle#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::y#0 atan2_16::angle#1 ] ) always clobbers reg byte a 
Statement [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1 [ atan2_16::y#0 atan2_16::angle#4 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::y#0 atan2_16::angle#4 ] ) always clobbers reg byte a 
Statement [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8 [ atan2_16::angle#11 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::angle#11 ] ) always clobbers reg byte a 
Statement [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11 [ atan2_16::angle#5 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::angle#5 ] ) always clobbers reg byte a 
Statement [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 ] ) always clobbers reg byte a 
Statement [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 atan2_16::yd#10 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#5 atan2_16::xd#10 atan2_16::yd#10 ] ) always clobbers reg byte a 
Statement [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#3 atan2_16::xd#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#3 atan2_16::xd#2 ] ) always clobbers reg byte a 
Statement [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#2 atan2_16::yd#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#2 atan2_16::yd#2 ] ) always clobbers reg byte a 
Statement [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#5 atan2_16::xd#5 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::yd#5 atan2_16::xd#5 ] ) always clobbers reg byte a 
Statement [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#2 ] ) always clobbers reg byte a 
Statement [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 ] ) always clobbers reg byte a 
Statement [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 atan2_16::$24 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::xi#2 atan2_16::yi#2 atan2_16::$24 ] ) always clobbers reg byte a 
Statement [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24) [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::xi#2 atan2_16::yi#2 atan2_16::angle#3 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::xi#2 atan2_16::yi#2 atan2_16::angle#3 ] ) always clobbers reg byte a 
Statement [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::xd#5 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1 [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 atan2_16::$23 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::angle#12 atan2_16::yi#1 atan2_16::xi#1 atan2_16::$23 ] ) always clobbers reg byte a 
Statement [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23) [ atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::yi#1 atan2_16::angle#2 atan2_16::xi#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::i#2 atan2_16::yi#1 atan2_16::angle#2 atan2_16::xi#1 ] ) always clobbers reg byte a 
Statement [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::yd#3 atan2_16::xd#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::yd#3 atan2_16::xd#1 ] ) always clobbers reg byte a 
Statement [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::xd#1 atan2_16::yd#1 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#3 atan2_16::xi#3 atan2_16::i#2 atan2_16::angle#12 atan2_16::shift#2 atan2_16::xd#1 atan2_16::yd#1 ] ) always clobbers reg byte a 
Statement [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::xi#13 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#0 atan2_16::xi#13 ] ) always clobbers reg byte a 
Statement [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0 [ atan2_16::x#0 atan2_16::y#0 atan2_16::yi#16 ] ( main:2::init_angle_screen:7::atan2_16:102 [ heap_head#1 init_angle_screen::y#4 init_angle_screen::screen_bottomline#5 init_angle_screen::screen_topline#5 init_angle_screen::x#2 init_angle_screen::xb#2 atan2_16::x#0 atan2_16::y#0 atan2_16::yi#16 ] ) always clobbers reg byte a 
Statement [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ) always clobbers reg byte a 
Statement [174] (word) sqr::return#2 ← (word) sqr::return#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ) always clobbers reg byte a 
Statement [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ) always clobbers reg byte a 
Statement [183] (word) sqr::return#3 ← (word) sqr::return#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ) always clobbers reg byte a 
Statement [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [190] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [191] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [192] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [193] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ) always clobbers reg byte y 
Statement [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ( main:2::init_dist_screen:5 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0 [ bsearch16u::key#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 [ bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 [ SQUARES#1 bsearch16u::return#3 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#3 ] ) always clobbers reg byte a 
Statement [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 [ SQUARES#1 sqrt::found#0 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::found#0 ] ) always clobbers reg byte a 
Statement [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 [ SQUARES#1 sqrt::$3 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$3 ] ) always clobbers reg byte a 
Statement [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 [ SQUARES#1 sqrt::$1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$1 ] ) always clobbers reg byte a 
Statement [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 [ sqrt::return#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqrt:187 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::return#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 [ bsearch16u::items#2 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::items#2 ] ) always clobbers reg byte a reg byte y 
Statement [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::$2 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::$2 ] ) always clobbers reg byte a 
Statement [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ) always clobbers reg byte a 
Statement [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ) always clobbers reg byte a 
Statement [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a reg byte y 
Statement [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a 
Statement [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 [ bsearch16u::return#6 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#6 ] ) always clobbers reg byte a 
Statement [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ( main:2::init_dist_screen:5::sqrt:187::bsearch16u:206 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ) always clobbers reg byte a 
Statement [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 [ SQUARES#1 sqr::$0 ] ( main:2::init_dist_screen:5::sqr:173 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 SQUARES#1 sqr::$0 ] main:2::init_dist_screen:5::sqr:182 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqr::$0 ] ) always clobbers reg byte a 
Statement [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) [ sqr::return#0 SQUARES#1 ] ( main:2::init_dist_screen:5::sqr:173 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#0 SQUARES#1 ] main:2::init_dist_screen:5::sqr:182 [ heap_head#1 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#0 SQUARES#1 ] ) always clobbers reg byte a reg byte y 
Statement [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 [ heap_head#1 SQUARES#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 [ heap_head#1 SQUARES#1 init_squares::squares#0 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::squares#0 ] ) always clobbers reg byte a 
Statement [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ) always clobbers reg byte a 
Statement [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 [ heap_head#1 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ( main:2::init_dist_screen:5::init_squares:166 [ heap_head#1 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::dist#2 main::dist#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ main::angle#2 main::angle#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ main::mix#2 main::mix#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ main::i#2 main::i#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ main::i1#2 main::i1#1 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ main::i2#2 main::i2#1 ] : zp ZP_BYTE:12 , reg byte x , 
Potential registers zp ZP_BYTE:13 [ init_buckets::i#2 init_buckets::i#1 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:14 [ init_buckets::dist#4 init_buckets::dist#1 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ init_buckets::i1#2 init_buckets::i1#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ init_buckets::i2#2 init_buckets::i2#1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ init_buckets::i3#2 init_buckets::i3#1 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ init_buckets::dist#5 init_buckets::dist#3 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ init_buckets::i4#2 init_buckets::i4#1 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ heap_head#13 heap_head#1 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ] : zp ZP_BYTE:29 , reg byte x , 
Potential registers zp ZP_WORD:30 [ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_WORD:32 [ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ] : zp ZP_BYTE:34 , reg byte x , 
Potential registers zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_WORD:36 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ] : zp ZP_WORD:36 , 
Potential registers zp ZP_WORD:38 [ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_BYTE:40 [ atan2_16::i#2 atan2_16::i#1 ] : zp ZP_BYTE:40 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_WORD:43 [ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_BYTE:45 [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:46 [ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ] : zp ZP_WORD:46 , 
Potential registers zp ZP_WORD:48 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ] : zp ZP_WORD:48 , 
Potential registers zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ] : zp ZP_BYTE:50 , reg byte x , 
Potential registers zp ZP_WORD:51 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_WORD:53 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_BYTE:55 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ] : zp ZP_BYTE:56 , reg byte x , 
Potential registers zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] : zp ZP_BYTE:57 , reg byte x , 
Potential registers zp ZP_BYTE:58 [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] : zp ZP_WORD:59 , 
Potential registers zp ZP_BYTE:61 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ] : zp ZP_BYTE:61 , reg byte x , 
Potential registers zp ZP_BYTE:62 [ sqr::val#2 sqr::val#0 sqr::val#1 ] : zp ZP_BYTE:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:63 [ init_squares::sqr#2 init_squares::sqr#1 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_WORD:65 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_BYTE:67 [ init_squares::i#2 init_squares::i#1 ] : zp ZP_BYTE:67 , reg byte x , 
Potential registers zp ZP_BYTE:68 [ main::$3 ] : zp ZP_BYTE:68 , reg byte x , 
Potential registers zp ZP_BYTE:69 [ main::$4 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ main::$5 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ main::bucket_size#0 ] : zp ZP_BYTE:71 , reg byte x , 
Potential registers zp ZP_WORD:72 [ main::$11 ] : zp ZP_WORD:72 , 
Potential registers zp ZP_WORD:74 [ main::$19 ] : zp ZP_WORD:74 , 
Potential registers zp ZP_WORD:76 [ main::$23 ] : zp ZP_WORD:76 , 
Potential registers zp ZP_WORD:78 [ main::bucket#0 ] : zp ZP_WORD:78 , 
Potential registers zp ZP_BYTE:80 [ main::$20 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:81 [ main::sc#0 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_BYTE:83 [ main::bucket_size1#0 ] : zp ZP_BYTE:83 , reg byte x , 
Potential registers zp ZP_WORD:84 [ main::$16 ] : zp ZP_WORD:84 , 
Potential registers zp ZP_WORD:86 [ main::$21 ] : zp ZP_WORD:86 , 
Potential registers zp ZP_WORD:88 [ main::$24 ] : zp ZP_WORD:88 , 
Potential registers zp ZP_WORD:90 [ main::bucket1#0 ] : zp ZP_WORD:90 , 
Potential registers zp ZP_BYTE:92 [ main::$22 ] : zp ZP_BYTE:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:93 [ main::sc1#0 ] : zp ZP_WORD:93 , 
Potential registers zp ZP_WORD:95 [ init_buckets::$15 ] : zp ZP_WORD:95 , 
Potential registers zp ZP_WORD:97 [ init_buckets::$5 ] : zp ZP_WORD:97 , 
Potential registers zp ZP_WORD:99 [ init_buckets::$12 ] : zp ZP_WORD:99 , 
Potential registers zp ZP_WORD:101 [ init_buckets::$16 ] : zp ZP_WORD:101 , 
Potential registers zp ZP_BYTE:103 [ init_buckets::distance#0 ] : zp ZP_BYTE:103 , reg byte x , 
Potential registers zp ZP_WORD:104 [ init_buckets::$9 ] : zp ZP_WORD:104 , 
Potential registers zp ZP_WORD:106 [ init_buckets::$13 ] : zp ZP_WORD:106 , 
Potential registers zp ZP_WORD:108 [ init_buckets::$17 ] : zp ZP_WORD:108 , 
Potential registers zp ZP_WORD:110 [ init_buckets::bucket#0 ] : zp ZP_WORD:110 , 
Potential registers zp ZP_WORD:112 [ init_buckets::$10 ] : zp ZP_WORD:112 , 
Potential registers zp ZP_BYTE:114 [ init_buckets::$14 ] : zp ZP_BYTE:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:115 [ malloc::mem#0 ] : zp ZP_WORD:115 , 
Potential registers zp ZP_BYTE:117 [ init_angle_screen::$2 ] : zp ZP_BYTE:117 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:118 [ init_angle_screen::$3 ] : zp ZP_BYTE:118 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:119 [ init_angle_screen::xw#0 ] : zp ZP_WORD:119 , 
Potential registers zp ZP_BYTE:121 [ init_angle_screen::$6 ] : zp ZP_BYTE:121 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:122 [ init_angle_screen::yw#0 ] : zp ZP_WORD:122 , 
Potential registers zp ZP_WORD:124 [ atan2_16::x#0 ] : zp ZP_WORD:124 , 
Potential registers zp ZP_WORD:126 [ atan2_16::y#0 ] : zp ZP_WORD:126 , 
Potential registers zp ZP_WORD:128 [ atan2_16::return#2 ] : zp ZP_WORD:128 , 
Potential registers zp ZP_WORD:130 [ init_angle_screen::angle_w#0 ] : zp ZP_WORD:130 , 
Potential registers zp ZP_WORD:132 [ init_angle_screen::$10 ] : zp ZP_WORD:132 , 
Potential registers zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ] : zp ZP_BYTE:134 , reg byte x , 
Potential registers zp ZP_BYTE:135 [ init_angle_screen::$12 ] : zp ZP_BYTE:135 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:136 [ init_angle_screen::$13 ] : zp ZP_BYTE:136 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:137 [ init_angle_screen::$14 ] : zp ZP_BYTE:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:138 [ atan2_16::$24 ] : zp ZP_BYTE:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:139 [ atan2_16::$23 ] : zp ZP_BYTE:139 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:140 [ init_dist_screen::y2#0 ] : zp ZP_BYTE:140 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:141 [ sqr::return#2 ] : zp ZP_WORD:141 , 
Potential registers zp ZP_WORD:143 [ init_dist_screen::yds#0 ] : zp ZP_WORD:143 , 
Potential registers zp ZP_BYTE:145 [ init_dist_screen::x2#0 ] : zp ZP_BYTE:145 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:146 [ sqr::return#3 ] : zp ZP_WORD:146 , 
Potential registers zp ZP_WORD:148 [ init_dist_screen::xds#0 ] : zp ZP_WORD:148 , 
Potential registers zp ZP_WORD:150 [ init_dist_screen::ds#0 ] : zp ZP_WORD:150 , 
Potential registers zp ZP_WORD:152 [ sqrt::val#0 ] : zp ZP_WORD:152 , 
Potential registers zp ZP_BYTE:154 [ sqrt::return#2 ] : zp ZP_BYTE:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:155 [ init_dist_screen::d#0 ] : zp ZP_BYTE:155 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:156 [ bsearch16u::key#0 ] : zp ZP_WORD:156 , 
Potential registers zp ZP_WORD:158 [ bsearch16u::return#3 ] : zp ZP_WORD:158 , 
Potential registers zp ZP_WORD:160 [ sqrt::found#0 ] : zp ZP_WORD:160 , 
Potential registers zp ZP_WORD:162 [ sqrt::$3 ] : zp ZP_WORD:162 , 
Potential registers zp ZP_WORD:164 [ sqrt::$1 ] : zp ZP_WORD:164 , 
Potential registers zp ZP_BYTE:166 [ sqrt::return#0 ] : zp ZP_BYTE:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:167 [ bsearch16u::$6 ] : zp ZP_BYTE:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:168 [ bsearch16u::$16 ] : zp ZP_BYTE:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:169 [ bsearch16u::pivot#0 ] : zp ZP_WORD:169 , 
Potential registers zp ZP_WORD:171 [ bsearch16u::result#0 ] : zp ZP_WORD:171 , 
Potential registers zp ZP_BYTE:173 [ sqr::$0 ] : zp ZP_BYTE:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:174 [ sqr::return#0 ] : zp ZP_WORD:174 , 
Potential registers zp ZP_WORD:176 [ SQUARES#1 ] : zp ZP_WORD:176 , 
Potential registers zp ZP_BYTE:178 [ init_squares::$3 ] : zp ZP_BYTE:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:179 [ init_squares::$4 ] : zp ZP_BYTE:179 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [atan2_16] 28,670.58: zp ZP_BYTE:45 [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ] 20,608: zp ZP_WORD:46 [ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ] 17,338.67: zp ZP_WORD:48 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ] 7,533.33: zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ] 2,698.28: zp ZP_WORD:36 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ] 2,283.07: zp ZP_WORD:38 [ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ] 2,002: zp ZP_BYTE:138 [ atan2_16::$24 ] 2,002: zp ZP_BYTE:139 [ atan2_16::$23 ] 1,710.04: zp ZP_BYTE:40 [ atan2_16::i#2 atan2_16::i#1 ] 202: zp ZP_WORD:128 [ atan2_16::return#2 ] 50: zp ZP_WORD:43 [ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ] 2.87: zp ZP_WORD:124 [ atan2_16::x#0 ] 2.72: zp ZP_WORD:126 [ atan2_16::y#0 ] 
Uplift Scope [bsearch16u] 7,563.11: zp ZP_BYTE:61 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ] 2,855.06: zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] 2,002: zp ZP_BYTE:167 [ bsearch16u::$6 ] 2,002: zp ZP_BYTE:168 [ bsearch16u::$16 ] 1,501.5: zp ZP_WORD:171 [ bsearch16u::result#0 ] 501: zp ZP_WORD:169 [ bsearch16u::pivot#0 ] 4: zp ZP_WORD:158 [ bsearch16u::return#3 ] 0.27: zp ZP_WORD:156 [ bsearch16u::key#0 ] 
Uplift Scope [init_angle_screen] 202: zp ZP_BYTE:117 [ init_angle_screen::$2 ] 202: zp ZP_BYTE:118 [ init_angle_screen::$3 ] 202: zp ZP_BYTE:121 [ init_angle_screen::$6 ] 202: zp ZP_WORD:130 [ init_angle_screen::angle_w#0 ] 202: zp ZP_WORD:132 [ init_angle_screen::$10 ] 202: zp ZP_BYTE:135 [ init_angle_screen::$12 ] 202: zp ZP_BYTE:136 [ init_angle_screen::$13 ] 202: zp ZP_BYTE:137 [ init_angle_screen::$14 ] 126.25: zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ] 120.24: zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ] 84.17: zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ] 50.5: zp ZP_WORD:122 [ init_angle_screen::yw#0 ] 33.67: zp ZP_WORD:119 [ init_angle_screen::xw#0 ] 21.23: zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ] 16.29: zp ZP_WORD:30 [ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ] 14.83: zp ZP_WORD:32 [ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ] 
Uplift Scope [init_dist_screen] 707: zp ZP_BYTE:58 [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ] 202: zp ZP_BYTE:145 [ init_dist_screen::x2#0 ] 202: zp ZP_WORD:148 [ init_dist_screen::xds#0 ] 202: zp ZP_WORD:150 [ init_dist_screen::ds#0 ] 127.58: zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ] 126.25: zp ZP_BYTE:155 [ init_dist_screen::d#0 ] 121.2: zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] 77: zp ZP_BYTE:55 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] 22: zp ZP_BYTE:140 [ init_dist_screen::y2#0 ] 17.47: zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ] 14.12: zp ZP_WORD:53 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ] 12.5: zp ZP_WORD:51 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ] 4.87: zp ZP_WORD:143 [ init_dist_screen::yds#0 ] 
Uplift Scope [main] 227.25: zp ZP_BYTE:11 [ main::i1#2 main::i1#1 ] 227.25: zp ZP_BYTE:12 [ main::i2#2 main::i2#1 ] 202: zp ZP_BYTE:80 [ main::$20 ] 202: zp ZP_WORD:81 [ main::sc#0 ] 202: zp ZP_BYTE:92 [ main::$22 ] 202: zp ZP_WORD:93 [ main::sc1#0 ] 22: zp ZP_BYTE:69 [ main::$4 ] 22: zp ZP_BYTE:70 [ main::$5 ] 22: zp ZP_WORD:72 [ main::$11 ] 22: zp ZP_WORD:74 [ main::$19 ] 22: zp ZP_WORD:76 [ main::$23 ] 22: zp ZP_WORD:84 [ main::$16 ] 22: zp ZP_WORD:86 [ main::$21 ] 22: zp ZP_WORD:88 [ main::$24 ] 19.25: zp ZP_WORD:8 [ main::i#2 main::i#1 ] 16: zp ZP_WORD:78 [ main::bucket#0 ] 16: zp ZP_WORD:90 [ main::bucket1#0 ] 12.05: zp ZP_WORD:4 [ main::angle#2 main::angle#1 ] 11: zp ZP_WORD:2 [ main::dist#2 main::dist#1 ] 11: zp ZP_WORD:6 [ main::mix#2 main::mix#1 ] 11: zp ZP_BYTE:68 [ main::$3 ] 10.25: zp ZP_BYTE:71 [ main::bucket_size#0 ] 10.25: zp ZP_BYTE:83 [ main::bucket_size1#0 ] 4.42: zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ] 
Uplift Scope [sqr] 338: zp ZP_BYTE:62 [ sqr::val#2 sqr::val#0 sqr::val#1 ] 202: zp ZP_WORD:146 [ sqr::return#3 ] 28.5: zp ZP_WORD:174 [ sqr::return#0 ] 22: zp ZP_WORD:141 [ sqr::return#2 ] 4: zp ZP_BYTE:173 [ sqr::$0 ] 
Uplift Scope [init_buckets] 33: zp ZP_BYTE:13 [ init_buckets::i#2 init_buckets::i#1 ] 33: zp ZP_BYTE:20 [ init_buckets::i3#2 init_buckets::i3#1 ] 29.33: zp ZP_WORD:14 [ init_buckets::dist#4 init_buckets::dist#1 ] 23.83: zp ZP_WORD:16 [ init_buckets::i1#2 init_buckets::i1#1 ] 22: zp ZP_WORD:18 [ init_buckets::i2#2 init_buckets::i2#1 ] 22: zp ZP_WORD:95 [ init_buckets::$15 ] 22: zp ZP_WORD:99 [ init_buckets::$12 ] 22: zp ZP_WORD:101 [ init_buckets::$16 ] 22: zp ZP_WORD:104 [ init_buckets::$9 ] 22: zp ZP_WORD:106 [ init_buckets::$13 ] 22: zp ZP_WORD:108 [ init_buckets::$17 ] 22: zp ZP_BYTE:114 [ init_buckets::$14 ] 18.5: zp ZP_WORD:23 [ init_buckets::i4#2 init_buckets::i4#1 ] 11.73: zp ZP_WORD:21 [ init_buckets::dist#5 init_buckets::dist#3 ] 11: zp ZP_WORD:112 [ init_buckets::$10 ] 7.33: zp ZP_WORD:110 [ init_buckets::bucket#0 ] 5.5: zp ZP_BYTE:103 [ init_buckets::distance#0 ] 3.67: zp ZP_WORD:97 [ init_buckets::$5 ] 
Uplift Scope [sqrt] 202: zp ZP_BYTE:154 [ sqrt::return#2 ] 103: zp ZP_WORD:152 [ sqrt::val#0 ] 34.33: zp ZP_BYTE:166 [ sqrt::return#0 ] 4: zp ZP_WORD:160 [ sqrt::found#0 ] 4: zp ZP_WORD:162 [ sqrt::$3 ] 2: zp ZP_WORD:164 [ sqrt::$1 ] 
Uplift Scope [init_squares] 25.17: zp ZP_WORD:65 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ] 22: zp ZP_BYTE:67 [ init_squares::i#2 init_squares::i#1 ] 22: zp ZP_BYTE:178 [ init_squares::$3 ] 22: zp ZP_BYTE:179 [ init_squares::$4 ] 13.93: zp ZP_WORD:63 [ init_squares::sqr#2 init_squares::sqr#1 ] 
Uplift Scope [malloc] 35: zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 ] 0.8: zp ZP_WORD:115 [ malloc::mem#0 ] 
Uplift Scope [] 13.15: zp ZP_WORD:25 [ heap_head#13 heap_head#1 ] 0.03: zp ZP_WORD:176 [ SQUARES#1 ] 

Uplifting [atan2_16] best 1251955 combination reg byte y [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ] zp ZP_WORD:46 [ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ] zp ZP_WORD:48 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ] zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ] zp ZP_WORD:36 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ] zp ZP_WORD:38 [ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ] reg byte a [ atan2_16::$24 ] reg byte a [ atan2_16::$23 ] reg byte x [ atan2_16::i#2 atan2_16::i#1 ] zp ZP_WORD:128 [ atan2_16::return#2 ] zp ZP_WORD:43 [ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ] zp ZP_WORD:124 [ atan2_16::x#0 ] zp ZP_WORD:126 [ atan2_16::y#0 ] 
Limited combination testing to 100 combinations of 144 possible.
Uplifting [bsearch16u] best 1232955 combination reg byte x [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ] zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] reg byte a [ bsearch16u::$6 ] reg byte a [ bsearch16u::$16 ] zp ZP_WORD:171 [ bsearch16u::result#0 ] zp ZP_WORD:169 [ bsearch16u::pivot#0 ] zp ZP_WORD:158 [ bsearch16u::return#3 ] zp ZP_WORD:156 [ bsearch16u::key#0 ] 
Uplifting [init_angle_screen] best 1230755 combination reg byte a [ init_angle_screen::$2 ] reg byte a [ init_angle_screen::$3 ] reg byte a [ init_angle_screen::$6 ] zp ZP_WORD:130 [ init_angle_screen::angle_w#0 ] zp ZP_WORD:132 [ init_angle_screen::$10 ] reg byte a [ init_angle_screen::$12 ] zp ZP_BYTE:136 [ init_angle_screen::$13 ] zp ZP_BYTE:137 [ init_angle_screen::$14 ] zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ] zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ] zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ] zp ZP_WORD:122 [ init_angle_screen::yw#0 ] zp ZP_WORD:119 [ init_angle_screen::xw#0 ] zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ] zp ZP_WORD:30 [ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ] zp ZP_WORD:32 [ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [init_dist_screen] best 1227555 combination reg byte a [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ] reg byte a [ init_dist_screen::x2#0 ] zp ZP_WORD:148 [ init_dist_screen::xds#0 ] zp ZP_WORD:150 [ init_dist_screen::ds#0 ] zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ] reg byte a [ init_dist_screen::d#0 ] zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] zp ZP_BYTE:55 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] zp ZP_BYTE:140 [ init_dist_screen::y2#0 ] zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ] zp ZP_WORD:53 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ] zp ZP_WORD:51 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ] zp ZP_WORD:143 [ init_dist_screen::yds#0 ] 
Limited combination testing to 100 combinations of 6144 possible.
Uplifting [main] best 1224695 combination reg byte x [ main::i1#2 main::i1#1 ] reg byte x [ main::i2#2 main::i2#1 ] reg byte a [ main::$20 ] zp ZP_WORD:81 [ main::sc#0 ] reg byte a [ main::$22 ] zp ZP_WORD:93 [ main::sc1#0 ] reg byte a [ main::$4 ] zp ZP_BYTE:70 [ main::$5 ] zp ZP_WORD:72 [ main::$11 ] zp ZP_WORD:74 [ main::$19 ] zp ZP_WORD:76 [ main::$23 ] zp ZP_WORD:84 [ main::$16 ] zp ZP_WORD:86 [ main::$21 ] zp ZP_WORD:88 [ main::$24 ] zp ZP_WORD:8 [ main::i#2 main::i#1 ] zp ZP_WORD:78 [ main::bucket#0 ] zp ZP_WORD:90 [ main::bucket1#0 ] zp ZP_WORD:4 [ main::angle#2 main::angle#1 ] zp ZP_WORD:2 [ main::dist#2 main::dist#1 ] zp ZP_WORD:6 [ main::mix#2 main::mix#1 ] zp ZP_BYTE:68 [ main::$3 ] zp ZP_BYTE:71 [ main::bucket_size#0 ] zp ZP_BYTE:83 [ main::bucket_size1#0 ] zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [sqr] best 1224358 combination reg byte a [ sqr::val#2 sqr::val#0 sqr::val#1 ] zp ZP_WORD:146 [ sqr::return#3 ] zp ZP_WORD:174 [ sqr::return#0 ] zp ZP_WORD:141 [ sqr::return#2 ] reg byte a [ sqr::$0 ] 
Uplifting [init_buckets] best 1223998 combination reg byte x [ init_buckets::i#2 init_buckets::i#1 ] reg byte x [ init_buckets::i3#2 init_buckets::i3#1 ] zp ZP_WORD:14 [ init_buckets::dist#4 init_buckets::dist#1 ] zp ZP_WORD:16 [ init_buckets::i1#2 init_buckets::i1#1 ] zp ZP_WORD:18 [ init_buckets::i2#2 init_buckets::i2#1 ] zp ZP_WORD:95 [ init_buckets::$15 ] zp ZP_WORD:99 [ init_buckets::$12 ] zp ZP_WORD:101 [ init_buckets::$16 ] zp ZP_WORD:104 [ init_buckets::$9 ] zp ZP_WORD:106 [ init_buckets::$13 ] zp ZP_WORD:108 [ init_buckets::$17 ] reg byte a [ init_buckets::$14 ] zp ZP_WORD:23 [ init_buckets::i4#2 init_buckets::i4#1 ] zp ZP_WORD:21 [ init_buckets::dist#5 init_buckets::dist#3 ] zp ZP_WORD:112 [ init_buckets::$10 ] zp ZP_WORD:110 [ init_buckets::bucket#0 ] reg byte x [ init_buckets::distance#0 ] zp ZP_WORD:97 [ init_buckets::$5 ] 
Uplifting [sqrt] best 1223095 combination reg byte a [ sqrt::return#2 ] zp ZP_WORD:152 [ sqrt::val#0 ] reg byte a [ sqrt::return#0 ] zp ZP_WORD:160 [ sqrt::found#0 ] zp ZP_WORD:162 [ sqrt::$3 ] zp ZP_WORD:164 [ sqrt::$1 ] 
Uplifting [init_squares] best 1222895 combination zp ZP_WORD:65 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ] reg byte x [ init_squares::i#2 init_squares::i#1 ] reg byte a [ init_squares::$3 ] reg byte a [ init_squares::$4 ] zp ZP_WORD:63 [ init_squares::sqr#2 init_squares::sqr#1 ] 
Uplifting [malloc] best 1222895 combination zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 ] zp ZP_WORD:115 [ malloc::mem#0 ] 
Uplifting [] best 1222895 combination zp ZP_WORD:25 [ heap_head#13 heap_head#1 ] zp ZP_WORD:176 [ SQUARES#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:136 [ init_angle_screen::$13 ]
Uplifting [init_angle_screen] best 1222495 combination reg byte a [ init_angle_screen::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:137 [ init_angle_screen::$14 ]
Uplifting [init_angle_screen] best 1221895 combination reg byte a [ init_angle_screen::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Uplifting [init_dist_screen] best 1221895 combination zp ZP_BYTE:56 [ init_dist_screen::x#2 init_dist_screen::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ]
Uplifting [init_angle_screen] best 1221895 combination zp ZP_BYTE:34 [ init_angle_screen::x#2 init_angle_screen::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Uplifting [init_dist_screen] best 1221895 combination zp ZP_BYTE:57 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
Uplifting [init_angle_screen] best 1221895 combination zp ZP_BYTE:35 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ]
Uplifting [init_angle_screen] best 1221895 combination zp ZP_BYTE:134 [ init_angle_screen::ang_w#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
Uplifting [init_dist_screen] best 1221825 combination reg byte a [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ main::$5 ]
Uplifting [main] best 1221765 combination reg byte a [ main::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:140 [ init_dist_screen::y2#0 ]
Uplifting [init_dist_screen] best 1221665 combination reg byte a [ init_dist_screen::y2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ]
Uplifting [init_angle_screen] best 1221665 combination zp ZP_BYTE:29 [ init_angle_screen::y#4 init_angle_screen::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Uplifting [init_dist_screen] best 1221665 combination zp ZP_BYTE:50 [ init_dist_screen::y#10 init_dist_screen::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ main::$3 ]
Uplifting [main] best 1221665 combination zp ZP_BYTE:68 [ main::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ main::bucket_size#0 ]
Uplifting [main] best 1221665 combination zp ZP_BYTE:71 [ main::bucket_size#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:83 [ main::bucket_size1#0 ]
Uplifting [main] best 1221665 combination zp ZP_BYTE:83 [ main::bucket_size1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ]
Uplifting [main] best 1221665 combination zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 ] ] with [ zp ZP_WORD:95 [ init_buckets::$15 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 init_buckets::$15 ] ] with [ zp ZP_WORD:115 [ malloc::mem#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 ] ] with [ zp ZP_WORD:43 [ atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] ] with [ zp ZP_WORD:158 [ bsearch16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:72 [ main::$11 ] ] with [ zp ZP_WORD:74 [ main::$19 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:76 [ main::$23 ] ] with [ zp ZP_WORD:78 [ main::bucket#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:84 [ main::$16 ] ] with [ zp ZP_WORD:86 [ main::$21 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:88 [ main::$24 ] ] with [ zp ZP_WORD:90 [ main::bucket1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:99 [ init_buckets::$12 ] ] with [ zp ZP_WORD:101 [ init_buckets::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:104 [ init_buckets::$9 ] ] with [ zp ZP_WORD:106 [ init_buckets::$13 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:108 [ init_buckets::$17 ] ] with [ zp ZP_WORD:110 [ init_buckets::bucket#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:119 [ init_angle_screen::xw#0 ] ] with [ zp ZP_WORD:124 [ atan2_16::x#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:122 [ init_angle_screen::yw#0 ] ] with [ zp ZP_WORD:126 [ atan2_16::y#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:128 [ atan2_16::return#2 ] ] with [ zp ZP_WORD:130 [ init_angle_screen::angle_w#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:141 [ sqr::return#2 ] ] with [ zp ZP_WORD:143 [ init_dist_screen::yds#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:146 [ sqr::return#3 ] ] with [ zp ZP_WORD:148 [ init_dist_screen::xds#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:146 [ sqr::return#3 init_dist_screen::xds#0 ] ] with [ zp ZP_WORD:174 [ sqr::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:150 [ init_dist_screen::ds#0 ] ] with [ zp ZP_WORD:152 [ sqrt::val#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:160 [ sqrt::found#0 ] ] with [ zp ZP_WORD:162 [ sqrt::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 init_buckets::$15 malloc::mem#0 ] ] with [ zp ZP_WORD:97 [ init_buckets::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:27 [ malloc::size#2 malloc::size#1 init_buckets::$15 malloc::mem#0 init_buckets::$5 ] ] with [ zp ZP_WORD:176 [ SQUARES#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 ] ] with [ zp ZP_WORD:128 [ atan2_16::return#2 init_angle_screen::angle_w#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 ] ] with [ zp ZP_WORD:160 [ sqrt::found#0 sqrt::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:72 [ main::$11 main::$19 ] ] with [ zp ZP_WORD:76 [ main::$23 main::bucket#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:84 [ main::$16 main::$21 ] ] with [ zp ZP_WORD:88 [ main::$24 main::bucket1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:104 [ init_buckets::$9 init_buckets::$13 ] ] with [ zp ZP_WORD:108 [ init_buckets::$17 init_buckets::bucket#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:146 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 ] ] with [ zp ZP_WORD:150 [ init_dist_screen::ds#0 sqrt::val#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 atan2_16::return#2 init_angle_screen::angle_w#0 ] ] with [ zp ZP_WORD:132 [ init_angle_screen::$10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:59 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$3 ] ] with [ zp ZP_WORD:164 [ sqrt::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:146 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 ] ] with [ zp ZP_WORD:156 [ bsearch16u::key#0 ] ] - score: 1
Allocated (was zp ZP_WORD:14) zp ZP_WORD:11 [ init_buckets::dist#4 init_buckets::dist#1 ]
Allocated (was zp ZP_WORD:16) zp ZP_WORD:13 [ init_buckets::i1#2 init_buckets::i1#1 ]
Allocated (was zp ZP_WORD:18) zp ZP_WORD:15 [ init_buckets::i2#2 init_buckets::i2#1 ]
Allocated (was zp ZP_WORD:21) zp ZP_WORD:17 [ init_buckets::dist#5 init_buckets::dist#3 ]
Allocated (was zp ZP_WORD:23) zp ZP_WORD:19 [ init_buckets::i4#2 init_buckets::i4#1 ]
Allocated (was zp ZP_WORD:25) zp ZP_WORD:21 [ heap_head#13 heap_head#1 ]
Allocated (was zp ZP_WORD:27) zp ZP_WORD:23 [ malloc::size#2 malloc::size#1 init_buckets::$15 malloc::mem#0 init_buckets::$5 SQUARES#1 ]
Allocated (was zp ZP_BYTE:29) zp ZP_BYTE:25 [ init_angle_screen::y#4 init_angle_screen::y#1 ]
Allocated (was zp ZP_WORD:30) zp ZP_WORD:26 [ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ]
Allocated (was zp ZP_WORD:32) zp ZP_WORD:28 [ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ]
Allocated (was zp ZP_BYTE:34) zp ZP_BYTE:30 [ init_angle_screen::x#2 init_angle_screen::x#1 ]
Allocated (was zp ZP_BYTE:35) zp ZP_BYTE:31 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
Allocated (was zp ZP_WORD:36) zp ZP_WORD:32 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ]
Allocated (was zp ZP_WORD:38) zp ZP_WORD:34 [ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ]
Allocated (was zp ZP_WORD:41) zp ZP_WORD:36 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 atan2_16::return#2 init_angle_screen::angle_w#0 init_angle_screen::$10 ]
Allocated (was zp ZP_WORD:46) zp ZP_WORD:38 [ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
Allocated (was zp ZP_WORD:48) zp ZP_WORD:40 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
Allocated (was zp ZP_BYTE:50) zp ZP_BYTE:42 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Allocated (was zp ZP_WORD:51) zp ZP_WORD:43 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ]
Allocated (was zp ZP_WORD:53) zp ZP_WORD:45 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ]
Allocated (was zp ZP_BYTE:56) zp ZP_BYTE:47 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Allocated (was zp ZP_BYTE:57) zp ZP_BYTE:48 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Allocated (was zp ZP_WORD:59) zp ZP_WORD:49 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$3 sqrt::$1 ]
Allocated (was zp ZP_WORD:63) zp ZP_WORD:51 [ init_squares::sqr#2 init_squares::sqr#1 ]
Allocated (was zp ZP_WORD:65) zp ZP_WORD:53 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
Allocated (was zp ZP_BYTE:68) zp ZP_BYTE:55 [ main::$3 ]
Allocated (was zp ZP_BYTE:71) zp ZP_BYTE:56 [ main::bucket_size#0 ]
Allocated (was zp ZP_WORD:72) zp ZP_WORD:57 [ main::$11 main::$19 main::$23 main::bucket#0 ]
Allocated (was zp ZP_WORD:81) zp ZP_WORD:59 [ main::sc#0 ]
Allocated (was zp ZP_BYTE:83) zp ZP_BYTE:61 [ main::bucket_size1#0 ]
Allocated (was zp ZP_WORD:84) zp ZP_WORD:62 [ main::$16 main::$21 main::$24 main::bucket1#0 ]
Allocated (was zp ZP_WORD:93) zp ZP_WORD:64 [ main::sc1#0 ]
Allocated (was zp ZP_WORD:99) zp ZP_WORD:66 [ init_buckets::$12 init_buckets::$16 ]
Allocated (was zp ZP_WORD:104) zp ZP_WORD:68 [ init_buckets::$9 init_buckets::$13 init_buckets::$17 init_buckets::bucket#0 ]
Allocated (was zp ZP_WORD:112) zp ZP_WORD:70 [ init_buckets::$10 ]
Allocated (was zp ZP_WORD:119) zp ZP_WORD:72 [ init_angle_screen::xw#0 atan2_16::x#0 ]
Allocated (was zp ZP_WORD:122) zp ZP_WORD:74 [ init_angle_screen::yw#0 atan2_16::y#0 ]
Allocated (was zp ZP_BYTE:134) zp ZP_BYTE:76 [ init_angle_screen::ang_w#0 ]
Allocated (was zp ZP_WORD:141) zp ZP_WORD:77 [ sqr::return#2 init_dist_screen::yds#0 ]
Allocated (was zp ZP_WORD:146) zp ZP_WORD:79 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 bsearch16u::key#0 ]
Allocated (was zp ZP_WORD:169) zp ZP_WORD:81 [ bsearch16u::pivot#0 ]
Allocated (was zp ZP_WORD:171) zp ZP_WORD:83 [ bsearch16u::result#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Fill screen using a spiral based on distance-to-center / angle-to-center
// Utilizes a bucket sort for identifying the minimum angle/distance
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label RASTER = $d012
  .label BORDERCOL = $d020
  // Top of the heap used by malloc()
  .label HEAP_TOP = $a000
  // The number of iterations performed during 16-bit CORDIC atan2 calculation
  .const CORDIC_ITERATIONS_16 = $f
  // = malloc(1000);
  // Screen containing angle to center
  .label SCREEN_FILL = $400
  // The number of buckets in our bucket sort
  .const NUM_BUCKETS = $100
  .const NUM_SQUARES = $30
  .label heap_head = $15
  .label SQUARES = $17
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label _3 = $37
    .label _11 = $39
    .label _16 = $3e
    .label _19 = $39
    .label _21 = $3e
    .label mix = 6
    .label dist = 2
    .label angle = 4
    .label i = 8
    .label bucket_size = $38
    .label bucket_idx = $a
    .label bucket_size1 = $3d
    .label bucket = $39
    .label sc = $3b
    .label bucket1 = $3e
    .label sc1 = $40
    .label _23 = $39
    .label _24 = $3e
    // [5] call init_dist_screen 
    // [165] phi from main to init_dist_screen [phi:main->init_dist_screen]
  init_dist_screen_from_main:
    jsr init_dist_screen
    // [6] phi from main to main::@13 [phi:main->main::@13]
  b13_from_main:
    jmp b13
    // main::@13
  b13:
    // [7] call init_angle_screen 
    // [92] phi from main::@13 to init_angle_screen [phi:main::@13->init_angle_screen]
  init_angle_screen_from_b13:
    jsr init_angle_screen
    // [8] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  b1_from_b13:
    // [8] phi (word) main::i#2 = (word) 0 [phi:main::@13->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
    // [8] phi (byte*) main::mix#2 = (const byte[$3e8]) SCREEN_MIX#0 [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta mix
    lda #>SCREEN_MIX
    sta mix+1
    // [8] phi (byte*) main::angle#2 = (const byte[$3e8]) SCREEN_ANGLE#0 [phi:main::@13->main::@1#2] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE
    sta angle
    lda #>SCREEN_ANGLE
    sta angle+1
    // [8] phi (byte*) main::dist#2 = (const byte[$3e8]) SCREEN_DIST#0 [phi:main::@13->main::@1#3] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST
    sta dist
    lda #>SCREEN_DIST
    sta dist+1
    jmp b1
    // [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [8] phi (word) main::i#2 = (word) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [8] phi (byte*) main::mix#2 = (byte*) main::mix#1 [phi:main::@1->main::@1#1] -- register_copy 
    // [8] phi (byte*) main::angle#2 = (byte*) main::angle#1 [phi:main::@1->main::@1#2] -- register_copy 
    // [8] phi (byte*) main::dist#2 = (byte*) main::dist#1 [phi:main::@1->main::@1#3] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2 -- vbuz1=_deref_pbuz2_rol_2 
    ldy #0
    lda (dist),y
    asl
    asl
    sta _3
    // [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1 -- vbuaa=_deref_pbuz1_ror_1 
    ldy #0
    lda (angle),y
    lsr
    // [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc _3
    // [12] *((byte*) main::mix#2) ← (byte~) main::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (mix),y
    // [13] (byte*) main::mix#1 ← ++ (byte*) main::mix#2 -- pbuz1=_inc_pbuz1 
    inc mix
    bne !+
    inc mix+1
  !:
    // [14] (byte*) main::dist#1 ← ++ (byte*) main::dist#2 -- pbuz1=_inc_pbuz1 
    inc dist
    bne !+
    inc dist+1
  !:
    // [15] (byte*) main::angle#1 ← ++ (byte*) main::angle#2 -- pbuz1=_inc_pbuz1 
    inc angle
    bne !+
    inc angle+1
  !:
    // [16] (word) main::i#1 ← ++ (word) main::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
    // [17] if((word) main::i#1!=(word) $3e8) goto main::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda i+1
    cmp #>$3e8
    bne b1_from_b1
    lda i
    cmp #<$3e8
    bne b1_from_b1
    // [18] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [19] call init_buckets 
    // [50] phi from main::@2 to init_buckets [phi:main::@2->init_buckets]
  init_buckets_from_b2:
    jsr init_buckets
    // [20] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    // [20] phi (byte) main::bucket_idx#9 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta bucket_idx
    jmp b3
    // main::@3
  b3:
    jmp b4
    // main::@4
  b4:
    // [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp RASTER
    bne b4
    jmp b5
    // main::@5
  b5:
    // [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b5
    jmp b6
    // main::@6
  b6:
    // [23] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [24] (byte) main::bucket_size#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#9) -- vbuz1=pbuc1_derefidx_vbuz2 
    // First clear the current bucket
    ldy bucket_idx
    lda BUCKET_SIZES,y
    sta bucket_size
    // [25] if((byte) main::bucket_size#0<=(byte) 0) goto main::@8 -- vbuz1_le_0_then_la1 
    lda bucket_size
    cmp #0
    beq b8
    jmp b7
    // main::@7
  b7:
    // [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9 -- vwuz1=_word_vbuz2 
    lda bucket_idx
    sta _11
    lda #0
    sta _11+1
    // [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _19
    rol _19+1
    // [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _23
    adc #<BUCKETS
    sta _23
    lda _23+1
    adc #>BUCKETS
    sta _23+1
    // [29] (word*) main::bucket#0 ← *((word**~) main::$23) -- pwuz1=_deref_pptz1 
    ldy #0
    lda (bucket),y
    pha
    iny
    lda (bucket),y
    sta bucket+1
    pla
    sta bucket
    // [30] phi from main::@7 to main::@9 [phi:main::@7->main::@9]
  b9_from_b7:
    // [30] phi (byte) main::i1#2 = (byte) 0 [phi:main::@7->main::@9#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b9
    // [30] phi from main::@9 to main::@9 [phi:main::@9->main::@9]
  b9_from_b9:
    // [30] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@9->main::@9#0] -- register_copy 
    jmp b9
    // main::@9
  b9:
    // [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20) -- pbuz1=pbuc1_plus_pwuz2_derefidx_vbuaa 
    tay
    clc
    lda #<SCREEN_FILL
    adc (bucket),y
    sta sc
    iny
    lda #>SCREEN_FILL
    adc (bucket),y
    sta sc+1
    // [33] *((byte*) main::sc#0) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [34] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [35] if((byte) main::i1#1<(byte) main::bucket_size#0) goto main::@9 -- vbuxx_lt_vbuz1_then_la1 
    cpx bucket_size
    bcc b9_from_b9
    jmp b8
    // main::@8
  b8:
    // [36] (byte) main::bucket_idx#1 ← ++ (byte) main::bucket_idx#9 -- vbuz1=_inc_vbuz1 
    inc bucket_idx
    // [37] (byte) main::bucket_size1#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot char in the bucket
    ldy bucket_idx
    lda BUCKET_SIZES,y
    sta bucket_size1
    // [38] if((byte) main::bucket_size1#0<=(byte) 0) goto main::@11 -- vbuz1_le_0_then_la1 
    lda bucket_size1
    cmp #0
    beq b11
    jmp b10
    // main::@10
  b10:
    // [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1 -- vwuz1=_word_vbuz2 
    lda bucket_idx
    sta _16
    lda #0
    sta _16+1
    // [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _21
    rol _21+1
    // [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _24
    adc #<BUCKETS
    sta _24
    lda _24+1
    adc #>BUCKETS
    sta _24+1
    // [42] (word*) main::bucket1#0 ← *((word**~) main::$24) -- pwuz1=_deref_pptz1 
    ldy #0
    lda (bucket1),y
    pha
    iny
    lda (bucket1),y
    sta bucket1+1
    pla
    sta bucket1
    // [43] phi from main::@10 to main::@12 [phi:main::@10->main::@12]
  b12_from_b10:
    // [43] phi (byte) main::i2#2 = (byte) 0 [phi:main::@10->main::@12#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b12
    // [43] phi from main::@12 to main::@12 [phi:main::@12->main::@12]
  b12_from_b12:
    // [43] phi (byte) main::i2#2 = (byte) main::i2#1 [phi:main::@12->main::@12#0] -- register_copy 
    jmp b12
    // main::@12
  b12:
    // [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22) -- pbuz1=pbuc1_plus_pwuz2_derefidx_vbuaa 
    tay
    clc
    lda #<SCREEN_FILL
    adc (bucket1),y
    sta sc1
    iny
    lda #>SCREEN_FILL
    adc (bucket1),y
    sta sc1+1
    // [46] *((byte*) main::sc1#0) ← (byte) '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (sc1),y
    // [47] (byte) main::i2#1 ← ++ (byte) main::i2#2 -- vbuxx=_inc_vbuxx 
    inx
    // [48] if((byte) main::i2#1<(byte) main::bucket_size1#0) goto main::@12 -- vbuxx_lt_vbuz1_then_la1 
    cpx bucket_size1
    bcc b12_from_b12
    jmp b11
    // main::@11
  b11:
    // [49] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // [20] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
  b3_from_b11:
    // [20] phi (byte) main::bucket_idx#9 = (byte) main::bucket_idx#1 [phi:main::@11->main::@3#0] -- register_copy 
    jmp b3
}
  // init_buckets
// Initialize buckets containing indices of chars on the screen with specific distances to the center.
init_buckets: {
    .label _5 = $17
    .label _9 = $44
    .label _10 = $46
    .label _12 = $42
    .label _13 = $44
    .label dist = $b
    .label i1 = $d
    .label i2 = $f
    .label bucket = $44
    .label dist_3 = $11
    .label i4 = $13
    .label dist_5 = $11
    .label _15 = $17
    .label _16 = $42
    .label _17 = $44
    // [51] phi from init_buckets to init_buckets::@1 [phi:init_buckets->init_buckets::@1]
  b1_from_init_buckets:
    // [51] phi (byte) init_buckets::i#2 = (byte) 0 [phi:init_buckets->init_buckets::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // Init bucket sizes to 0
    // [51] phi from init_buckets::@1 to init_buckets::@1 [phi:init_buckets::@1->init_buckets::@1]
  b1_from_b1:
    // [51] phi (byte) init_buckets::i#2 = (byte) init_buckets::i#1 [phi:init_buckets::@1->init_buckets::@1#0] -- register_copy 
    jmp b1
    // init_buckets::@1
  b1:
    // [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta BUCKET_SIZES,x
    // [53] (byte) init_buckets::i#1 ← ++ (byte) init_buckets::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [54] if((byte) init_buckets::i#1!=(byte) 0) goto init_buckets::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b1
    // [55] phi from init_buckets::@1 to init_buckets::@2 [phi:init_buckets::@1->init_buckets::@2]
  b2_from_b1:
    // [55] phi (word) init_buckets::i1#2 = (word) 0 [phi:init_buckets::@1->init_buckets::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta i1
    lda #>0
    sta i1+1
    // [55] phi (byte*) init_buckets::dist#4 = (const byte[$3e8]) SCREEN_MIX#0 [phi:init_buckets::@1->init_buckets::@2#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta dist
    lda #>SCREEN_MIX
    sta dist+1
    jmp b2
    // [55] phi from init_buckets::@2 to init_buckets::@2 [phi:init_buckets::@2->init_buckets::@2]
  b2_from_b2:
    // [55] phi (word) init_buckets::i1#2 = (word) init_buckets::i1#1 [phi:init_buckets::@2->init_buckets::@2#0] -- register_copy 
    // [55] phi (byte*) init_buckets::dist#4 = (byte*) init_buckets::dist#1 [phi:init_buckets::@2->init_buckets::@2#1] -- register_copy 
    jmp b2
    // init_buckets::@2
  b2:
    // [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) -- pbuc1_derefidx__deref_pbuz1=_inc_pbuc1_derefidx__deref_pbuz1 
    ldy #0
    lda (dist),y
    tax
    inc BUCKET_SIZES,x
    // [57] (byte*) init_buckets::dist#1 ← ++ (byte*) init_buckets::dist#4 -- pbuz1=_inc_pbuz1 
    inc dist
    bne !+
    inc dist+1
  !:
    // [58] (word) init_buckets::i1#1 ← ++ (word) init_buckets::i1#2 -- vwuz1=_inc_vwuz1 
    inc i1
    bne !+
    inc i1+1
  !:
    // [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda i1+1
    cmp #>$3e8
    bne b2_from_b2
    lda i1
    cmp #<$3e8
    bne b2_from_b2
    // [60] phi from init_buckets::@2 to init_buckets::@3 [phi:init_buckets::@2->init_buckets::@3]
  b3_from_b2:
    // [60] phi (word) init_buckets::i2#2 = (word) 0 [phi:init_buckets::@2->init_buckets::@3#0] -- vwuz1=vwuc1 
    lda #<0
    sta i2
    lda #>0
    sta i2+1
    jmp b3
  // Allocate the buckets
    // [60] phi from init_buckets::@6 to init_buckets::@3 [phi:init_buckets::@6->init_buckets::@3]
  b3_from_b6:
    // [60] phi (word) init_buckets::i2#2 = (word) init_buckets::i2#1 [phi:init_buckets::@6->init_buckets::@3#0] -- register_copy 
    jmp b3
    // init_buckets::@3
  b3:
    // [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda i2
    clc
    adc #<BUCKET_SIZES
    sta _15
    lda i2+1
    adc #>BUCKET_SIZES
    sta _15+1
    // [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1 -- vwuz1=_deref_pbuz1_rol_1 
    ldy #0
    lda (malloc.size),y
    asl
    sta malloc.size
    lda #0
    rol
    sta malloc.size+1
    // [63] call malloc 
    // [88] phi from init_buckets::@3 to malloc [phi:init_buckets::@3->malloc]
  malloc_from_b3:
    // [88] phi (word) malloc::size#2 = (word) malloc::size#1 [phi:init_buckets::@3->malloc#0] -- register_copy 
    // [88] phi (byte*) heap_head#13 = (byte*) heap_head#1 [phi:init_buckets::@3->malloc#1] -- register_copy 
    jsr malloc
    jmp b6
    // init_buckets::@6
  b6:
    // [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0
    // [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda i2
    asl
    sta _12
    lda i2+1
    rol
    sta _12+1
    // [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _16
    adc #<BUCKETS
    sta _16
    lda _16+1
    adc #>BUCKETS
    sta _16+1
    // [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5 -- _deref_pptz1=pwuz2 
    ldy #0
    lda _5
    sta (_16),y
    iny
    lda _5+1
    sta (_16),y
    // [68] (word) init_buckets::i2#1 ← ++ (word) init_buckets::i2#2 -- vwuz1=_inc_vwuz1 
    inc i2
    bne !+
    inc i2+1
  !:
    // [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3 -- vwuz1_neq_vwuc1_then_la1 
    lda i2+1
    cmp #>NUM_BUCKETS-1+1
    bne b3_from_b6
    lda i2
    cmp #<NUM_BUCKETS-1+1
    bne b3_from_b6
    // [70] phi from init_buckets::@6 to init_buckets::@4 [phi:init_buckets::@6->init_buckets::@4]
  b4_from_b6:
    // [70] phi (byte) init_buckets::i3#2 = (byte) 0 [phi:init_buckets::@6->init_buckets::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b4
  // Iterate all distances and fill the buckets with indices into the screens
    // [70] phi from init_buckets::@4 to init_buckets::@4 [phi:init_buckets::@4->init_buckets::@4]
  b4_from_b4:
    // [70] phi (byte) init_buckets::i3#2 = (byte) init_buckets::i3#1 [phi:init_buckets::@4->init_buckets::@4#0] -- register_copy 
    jmp b4
    // init_buckets::@4
  b4:
    // [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta BUCKET_IDX,x
    // [72] (byte) init_buckets::i3#1 ← ++ (byte) init_buckets::i3#2 -- vbuxx=_inc_vbuxx 
    inx
    // [73] if((byte) init_buckets::i3#1!=(byte) 0) goto init_buckets::@4 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b4_from_b4
    // [74] phi from init_buckets::@4 to init_buckets::@5 [phi:init_buckets::@4->init_buckets::@5]
  b5_from_b4:
    // [74] phi (word) init_buckets::i4#2 = (word) 0 [phi:init_buckets::@4->init_buckets::@5#0] -- vwuz1=vwuc1 
    lda #<0
    sta i4
    lda #>0
    sta i4+1
    // [74] phi (byte*) init_buckets::dist#5 = (const byte[$3e8]) SCREEN_MIX#0 [phi:init_buckets::@4->init_buckets::@5#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta dist_5
    lda #>SCREEN_MIX
    sta dist_5+1
    jmp b5
    // [74] phi from init_buckets::@5 to init_buckets::@5 [phi:init_buckets::@5->init_buckets::@5]
  b5_from_b5:
    // [74] phi (word) init_buckets::i4#2 = (word) init_buckets::i4#1 [phi:init_buckets::@5->init_buckets::@5#0] -- register_copy 
    // [74] phi (byte*) init_buckets::dist#5 = (byte*) init_buckets::dist#3 [phi:init_buckets::@5->init_buckets::@5#1] -- register_copy 
    jmp b5
    // init_buckets::@5
  b5:
    // [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5) -- vbuxx=_deref_pbuz1 
    ldy #0
    lda (dist_5),y
    tax
    // [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0 -- vwuz1=_word_vbuxx 
    txa
    sta _9
    lda #0
    sta _9+1
    // [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _13
    rol _13+1
    // [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _17
    adc #<BUCKETS
    sta _17
    lda _17+1
    adc #>BUCKETS
    sta _17+1
    // [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17) -- pwuz1=_deref_pptz1 
    ldy #0
    lda (bucket),y
    pha
    iny
    lda (bucket),y
    sta bucket+1
    pla
    sta bucket
    // [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0 -- vwuz1=pbuz2_minus_pbuc1 
    lda dist_5
    sec
    sbc #<SCREEN_MIX
    sta _10
    lda dist_5+1
    sbc #>SCREEN_MIX
    sta _10+1
    // [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1 -- vbuaa=pbuc1_derefidx_vbuxx_rol_1 
    lda BUCKET_IDX,x
    asl
    // [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10 -- pwuz1_derefidx_vbuaa=vwuz2 
    tay
    lda _10
    sta (bucket),y
    iny
    lda _10+1
    sta (bucket),y
    // [83] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc BUCKET_IDX,x
    // [84] (byte*) init_buckets::dist#3 ← ++ (byte*) init_buckets::dist#5 -- pbuz1=_inc_pbuz1 
    inc dist_3
    bne !+
    inc dist_3+1
  !:
    // [85] (word) init_buckets::i4#1 ← ++ (word) init_buckets::i4#2 -- vwuz1=_inc_vwuz1 
    inc i4
    bne !+
    inc i4+1
  !:
    // [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5 -- vwuz1_neq_vwuc1_then_la1 
    lda i4+1
    cmp #>$3e8
    bne b5_from_b5
    lda i4
    cmp #<$3e8
    bne b5_from_b5
    jmp breturn
    // init_buckets::@return
  breturn:
    // [87] return 
    rts
}
  // malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
// malloc(word zeropage($17) size)
malloc: {
    .label mem = $17
    .label size = $17
    // [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2 -- pbuz1=pbuz2_minus_vwuz1 
    lda heap_head
    sec
    sbc mem
    sta mem
    lda heap_head+1
    sbc mem+1
    sta mem+1
    // [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0 -- pbuz1=pbuz2 
    lda mem
    sta heap_head
    lda mem+1
    sta heap_head+1
    jmp breturn
    // malloc::@return
  breturn:
    // [91] return 
    rts
}
  // init_angle_screen
// Populates 1000 bytes (a screen) with values representing the angle to the center.
// Utilizes symmetry around the center
init_angle_screen: {
    .label _10 = $24
    .label xw = $48
    .label yw = $4a
    .label angle_w = $24
    .label ang_w = $4c
    .label x = $1e
    .label xb = $1f
    .label screen_topline = $1c
    .label screen_bottomline = $1a
    .label y = $19
    // [93] phi from init_angle_screen to init_angle_screen::@1 [phi:init_angle_screen->init_angle_screen::@1]
  b1_from_init_angle_screen:
    // [93] phi (byte*) init_angle_screen::screen_topline#5 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c [phi:init_angle_screen->init_angle_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE+$28*$c
    sta screen_topline
    lda #>SCREEN_ANGLE+$28*$c
    sta screen_topline+1
    // [93] phi (byte*) init_angle_screen::screen_bottomline#5 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c [phi:init_angle_screen->init_angle_screen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE+$28*$c
    sta screen_bottomline
    lda #>SCREEN_ANGLE+$28*$c
    sta screen_bottomline+1
    // [93] phi (byte) init_angle_screen::y#4 = (byte) 0 [phi:init_angle_screen->init_angle_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
    // [93] phi from init_angle_screen::@3 to init_angle_screen::@1 [phi:init_angle_screen::@3->init_angle_screen::@1]
  b1_from_b3:
    // [93] phi (byte*) init_angle_screen::screen_topline#5 = (byte*) init_angle_screen::screen_topline#1 [phi:init_angle_screen::@3->init_angle_screen::@1#0] -- register_copy 
    // [93] phi (byte*) init_angle_screen::screen_bottomline#5 = (byte*) init_angle_screen::screen_bottomline#1 [phi:init_angle_screen::@3->init_angle_screen::@1#1] -- register_copy 
    // [93] phi (byte) init_angle_screen::y#4 = (byte) init_angle_screen::y#1 [phi:init_angle_screen::@3->init_angle_screen::@1#2] -- register_copy 
    jmp b1
    // init_angle_screen::@1
  b1:
    // [94] phi from init_angle_screen::@1 to init_angle_screen::@2 [phi:init_angle_screen::@1->init_angle_screen::@2]
  b2_from_b1:
    // [94] phi (byte) init_angle_screen::xb#2 = (byte) $27 [phi:init_angle_screen::@1->init_angle_screen::@2#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
    // [94] phi (byte) init_angle_screen::x#2 = (byte) 0 [phi:init_angle_screen::@1->init_angle_screen::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
    // [94] phi from init_angle_screen::@4 to init_angle_screen::@2 [phi:init_angle_screen::@4->init_angle_screen::@2]
  b2_from_b4:
    // [94] phi (byte) init_angle_screen::xb#2 = (byte) init_angle_screen::xb#1 [phi:init_angle_screen::@4->init_angle_screen::@2#0] -- register_copy 
    // [94] phi (byte) init_angle_screen::x#2 = (byte) init_angle_screen::x#1 [phi:init_angle_screen::@4->init_angle_screen::@2#1] -- register_copy 
    jmp b2
    // init_angle_screen::@2
  b2:
    // [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
    // [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$27+1
    // [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0 -- vwuz1=vbuaa_word_vbuc1 
    ldy #0
    sta xw+1
    sty xw
    // [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
    // [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0 -- vwuz1=vbuaa_word_vbuc1 
    ldy #0
    sta yw+1
    sty yw
    // [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0
    // [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0
    // [102] call atan2_16 
    jsr atan2_16
    // [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0
    jmp b4
    // init_angle_screen::@4
  b4:
    // [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2
    // [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$80
    clc
    adc _10
    sta _10
    bcc !+
    inc _10+1
  !:
    // [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10 -- vbuz1=_hi_vwuz2 
    lda _10+1
    sta ang_w
    // [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda ang_w
    ldy xb
    sta (screen_bottomline),y
    // [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0 -- vbuaa=_neg_vbuz1 
    lda ang_w
    eor #$ff
    clc
    adc #1
    // [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_topline),y
    // [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0 -- vbuaa=vbuc1_plus_vbuz1 
    lda #$80
    clc
    adc ang_w
    // [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_topline),y
    // [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0 -- vbuaa=vbuc1_minus_vbuz1 
    lda #$80
    sec
    sbc ang_w
    // [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_bottomline),y
    // [114] (byte) init_angle_screen::x#1 ← ++ (byte) init_angle_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [115] (byte) init_angle_screen::xb#1 ← -- (byte) init_angle_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
    // [116] if((byte) init_angle_screen::x#1<(byte) $13+(byte) 1) goto init_angle_screen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b2_from_b4
    jmp b3
    // init_angle_screen::@3
  b3:
    // [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_topline
    sec
    sbc #<$28
    sta screen_topline
    lda screen_topline+1
    sbc #>$28
    sta screen_topline+1
    // [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_bottomline
    sta screen_bottomline
    bcc !+
    inc screen_bottomline+1
  !:
    // [119] (byte) init_angle_screen::y#1 ← ++ (byte) init_angle_screen::y#4 -- vbuz1=_inc_vbuz1 
    inc y
    // [120] if((byte) init_angle_screen::y#1!=(byte) $d) goto init_angle_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1_from_b3
    jmp breturn
    // init_angle_screen::@return
  breturn:
    // [121] return 
    rts
}
  // atan2_16
// Find the atan2(x, y) - which is the angle of the line from (0,0) to (x,y)
// Finding the angle requires a binary search using CORDIC_ITERATIONS_16
// Returns the angle in hex-degrees (0=0, 0x8000=PI, 0x10000=2*PI)
// atan2_16(signed word zeropage($48) x, signed word zeropage($4a) y)
atan2_16: {
    .label _2 = $20
    .label _7 = $22
    .label yi = $20
    .label xi = $22
    .label angle = $24
    .label xd = $28
    .label yd = $26
    .label return = $24
    .label x = $48
    .label y = $4a
    // [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1 -- vwsz1_ge_0_then_la1 
    lda y+1
    bpl b1
    jmp b2
    // atan2_16::@2
  b2:
    // [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc y
    sta _2
    lda #0
    sbc y+1
    sta _2+1
    // [124] phi from atan2_16::@1 atan2_16::@2 to atan2_16::@3 [phi:atan2_16::@1/atan2_16::@2->atan2_16::@3]
  b3_from_b1:
  b3_from_b2:
    // [124] phi (signed word) atan2_16::yi#0 = (signed word~) atan2_16::yi#16 [phi:atan2_16::@1/atan2_16::@2->atan2_16::@3#0] -- register_copy 
    jmp b3
    // atan2_16::@3
  b3:
    // [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4 -- vwsz1_ge_0_then_la1 
    lda x+1
    bpl b4
    jmp b5
    // atan2_16::@5
  b5:
    // [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc x
    sta _7
    lda #0
    sbc x+1
    sta _7+1
    // [127] phi from atan2_16::@4 atan2_16::@5 to atan2_16::@6 [phi:atan2_16::@4/atan2_16::@5->atan2_16::@6]
  b6_from_b4:
  b6_from_b5:
    // [127] phi (signed word) atan2_16::xi#0 = (signed word~) atan2_16::xi#13 [phi:atan2_16::@4/atan2_16::@5->atan2_16::@6#0] -- register_copy 
    jmp b6
    // atan2_16::@6
  b6:
    // [128] phi from atan2_16::@6 to atan2_16::@10 [phi:atan2_16::@6->atan2_16::@10]
  b10_from_b6:
    // [128] phi (word) atan2_16::angle#12 = (byte) 0 [phi:atan2_16::@6->atan2_16::@10#0] -- vwuz1=vbuc1 
    lda #0
    sta angle
    lda #0
    sta angle+1
    // [128] phi (byte) atan2_16::i#2 = (byte) 0 [phi:atan2_16::@6->atan2_16::@10#1] -- vbuxx=vbuc1 
    ldx #0
    // [128] phi (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#0 [phi:atan2_16::@6->atan2_16::@10#2] -- register_copy 
    // [128] phi (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#0 [phi:atan2_16::@6->atan2_16::@10#3] -- register_copy 
    jmp b10
    // atan2_16::@10
  b10:
    // [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11 -- vwsz1_neq_0_then_la1 
    lda yi+1
    bne b11
    lda yi
    bne b11
    // [130] phi from atan2_16::@10 atan2_16::@19 to atan2_16::@12 [phi:atan2_16::@10/atan2_16::@19->atan2_16::@12]
  b12_from_b10:
  b12_from_b19:
    // [130] phi (word) atan2_16::angle#6 = (word) atan2_16::angle#12 [phi:atan2_16::@10/atan2_16::@19->atan2_16::@12#0] -- register_copy 
    jmp b12
    // atan2_16::@12
  b12:
    // [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr angle+1
    ror angle
    // [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7 -- vwsz1_ge_0_then_la1 
    lda x+1
    bpl b7_from_b12
    jmp b21
    // atan2_16::@21
  b21:
    // [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<$8000
    sbc angle
    sta angle
    lda #>$8000
    sbc angle+1
    sta angle+1
    // [134] phi from atan2_16::@12 atan2_16::@21 to atan2_16::@7 [phi:atan2_16::@12/atan2_16::@21->atan2_16::@7]
  b7_from_b12:
  b7_from_b21:
    // [134] phi (word) atan2_16::angle#11 = (word) atan2_16::angle#1 [phi:atan2_16::@12/atan2_16::@21->atan2_16::@7#0] -- register_copy 
    jmp b7
    // atan2_16::@7
  b7:
    // [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8 -- vwsz1_ge_0_then_la1 
    lda y+1
    bpl b8_from_b7
    jmp b9
    // atan2_16::@9
  b9:
    // [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc angle
    sta angle
    lda #0
    sbc angle+1
    sta angle+1
    // [137] phi from atan2_16::@7 atan2_16::@9 to atan2_16::@8 [phi:atan2_16::@7/atan2_16::@9->atan2_16::@8]
  b8_from_b7:
  b8_from_b9:
    // [137] phi (word) atan2_16::return#0 = (word) atan2_16::angle#11 [phi:atan2_16::@7/atan2_16::@9->atan2_16::@8#0] -- register_copy 
    jmp b8
    // atan2_16::@8
  b8:
    jmp breturn
    // atan2_16::@return
  breturn:
    // [138] return 
    rts
    // atan2_16::@11
  b11:
    // [139] (byte~) atan2_16::shift#5 ← (byte) atan2_16::i#2 -- vbuyy=vbuxx 
    txa
    tay
    // [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3 -- vwsz1=vwsz2 
    lda xi
    sta xd
    lda xi+1
    sta xd+1
    // [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3 -- vwsz1=vwsz2 
    lda yi
    sta yd
    lda yi+1
    sta yd+1
    // [142] phi from atan2_16::@11 atan2_16::@14 to atan2_16::@13 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13]
  b13_from_b11:
  b13_from_b14:
    // [142] phi (signed word) atan2_16::yd#3 = (signed word~) atan2_16::yd#10 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#0] -- register_copy 
    // [142] phi (signed word) atan2_16::xd#3 = (signed word~) atan2_16::xd#10 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#1] -- register_copy 
    // [142] phi (byte) atan2_16::shift#2 = (byte~) atan2_16::shift#5 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#2] -- register_copy 
    jmp b13
    // atan2_16::@13
  b13:
    // [143] if((byte) atan2_16::shift#2>=(byte) 2) goto atan2_16::@14 -- vbuyy_ge_vbuc1_then_la1 
    cpy #2
    bcs b14
    jmp b15
    // atan2_16::@15
  b15:
    // [144] if((byte) 0==(byte) atan2_16::shift#2) goto atan2_16::@17 -- vbuc1_eq_vbuyy_then_la1 
    cpy #0
    beq b17_from_b15
    jmp b16
    // atan2_16::@16
  b16:
    // [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1 -- vwsz1=vwsz1_ror_1 
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    // [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1 -- vwsz1=vwsz1_ror_1 
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    // [147] phi from atan2_16::@15 atan2_16::@16 to atan2_16::@17 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17]
  b17_from_b15:
  b17_from_b16:
    // [147] phi (signed word) atan2_16::xd#5 = (signed word) atan2_16::xd#3 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17#0] -- register_copy 
    // [147] phi (signed word) atan2_16::yd#5 = (signed word) atan2_16::yd#3 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17#1] -- register_copy 
    jmp b17
    // atan2_16::@17
  b17:
    // [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18 -- vwsz1_ge_0_then_la1 
    lda yi+1
    bpl b18
    jmp b20
    // atan2_16::@20
  b20:
    // [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5 -- vwsz1=vwsz1_minus_vwsz2 
    lda xi
    sec
    sbc yd
    sta xi
    lda xi+1
    sbc yd+1
    sta xi+1
    // [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5 -- vwsz1=vwsz1_plus_vwsz2 
    lda yi
    clc
    adc xd
    sta yi
    lda yi+1
    adc xd+1
    sta yi+1
    // [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24) -- vwuz1=vwuz1_minus_pwuc1_derefidx_vbuaa 
    tay
    sec
    lda angle
    sbc CORDIC_ATAN2_ANGLES_16,y
    sta angle
    lda angle+1
    sbc CORDIC_ATAN2_ANGLES_16+1,y
    sta angle+1
    // [153] phi from atan2_16::@18 atan2_16::@20 to atan2_16::@19 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19]
  b19_from_b18:
  b19_from_b20:
    // [153] phi (signed word) atan2_16::xi#8 = (signed word) atan2_16::xi#1 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#0] -- register_copy 
    // [153] phi (word) atan2_16::angle#13 = (word) atan2_16::angle#2 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#1] -- register_copy 
    // [153] phi (signed word) atan2_16::yi#8 = (signed word) atan2_16::yi#1 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#2] -- register_copy 
    jmp b19
    // atan2_16::@19
  b19:
    // [154] (byte) atan2_16::i#1 ← ++ (byte) atan2_16::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [155] if((byte) atan2_16::i#1==(const byte) CORDIC_ITERATIONS_16#0-(byte) 1+(byte) 1) goto atan2_16::@12 -- vbuxx_eq_vbuc1_then_la1 
    cpx #CORDIC_ITERATIONS_16-1+1
    beq b12_from_b19
    // [128] phi from atan2_16::@19 to atan2_16::@10 [phi:atan2_16::@19->atan2_16::@10]
  b10_from_b19:
    // [128] phi (word) atan2_16::angle#12 = (word) atan2_16::angle#13 [phi:atan2_16::@19->atan2_16::@10#0] -- register_copy 
    // [128] phi (byte) atan2_16::i#2 = (byte) atan2_16::i#1 [phi:atan2_16::@19->atan2_16::@10#1] -- register_copy 
    // [128] phi (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#8 [phi:atan2_16::@19->atan2_16::@10#2] -- register_copy 
    // [128] phi (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#8 [phi:atan2_16::@19->atan2_16::@10#3] -- register_copy 
    jmp b10
    // atan2_16::@18
  b18:
    // [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5 -- vwsz1=vwsz1_plus_vwsz2 
    lda xi
    clc
    adc yd
    sta xi
    lda xi+1
    adc yd+1
    sta xi+1
    // [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5 -- vwsz1=vwsz1_minus_vwsz2 
    lda yi
    sec
    sbc xd
    sta yi
    lda yi+1
    sbc xd+1
    sta yi+1
    // [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23) -- vwuz1=vwuz1_plus_pwuc1_derefidx_vbuaa 
    tay
    clc
    lda angle
    adc CORDIC_ATAN2_ANGLES_16,y
    sta angle
    lda angle+1
    adc CORDIC_ATAN2_ANGLES_16+1,y
    sta angle+1
    jmp b19_from_b18
    // atan2_16::@14
  b14:
    // [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2 -- vwsz1=vwsz1_ror_2 
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    // [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2 -- vwsz1=vwsz1_ror_2 
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    // [162] (byte) atan2_16::shift#1 ← (byte) atan2_16::shift#2 - (byte) 2 -- vbuyy=vbuyy_minus_2 
    dey
    dey
    jmp b13_from_b14
    // atan2_16::@4
  b4:
    // [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0 -- vwsz1=vwsz2 
    lda x
    sta xi
    lda x+1
    sta xi+1
    jmp b6_from_b4
    // atan2_16::@1
  b1:
    // [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0 -- vwsz1=vwsz2 
    lda y
    sta yi
    lda y+1
    sta yi+1
    jmp b3_from_b1
}
  // init_dist_screen
// Populates 1000 bytes (a screen) with values representing the distance to the center.
// The actual value stored is distance*2 to increase precision
// Utilizes symmetry around the center
init_dist_screen: {
    .label yds = $4d
    .label xds = $4f
    .label ds = $4f
    .label x = $2f
    .label xb = $30
    .label screen_topline = $2b
    .label screen_bottomline = $2d
    .label y = $2a
    // [166] call init_squares 
    // [236] phi from init_dist_screen to init_squares [phi:init_dist_screen->init_squares]
  init_squares_from_init_dist_screen:
    jsr init_squares
    // [167] phi from init_dist_screen to init_dist_screen::@1 [phi:init_dist_screen->init_dist_screen::@1]
  b1_from_init_dist_screen:
    // [167] phi (byte*) init_dist_screen::screen_bottomline#10 = (const byte[$3e8]) SCREEN_DIST#0+(word)(number) $28*(number) $18 [phi:init_dist_screen->init_dist_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST+$28*$18
    sta screen_bottomline
    lda #>SCREEN_DIST+$28*$18
    sta screen_bottomline+1
    // [167] phi (byte*) init_dist_screen::screen_topline#10 = (const byte[$3e8]) SCREEN_DIST#0 [phi:init_dist_screen->init_dist_screen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST
    sta screen_topline
    lda #>SCREEN_DIST
    sta screen_topline+1
    // [167] phi (byte) init_dist_screen::y#10 = (byte) 0 [phi:init_dist_screen->init_dist_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
    // [167] phi from init_dist_screen::@9 to init_dist_screen::@1 [phi:init_dist_screen::@9->init_dist_screen::@1]
  b1_from_b9:
    // [167] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#0] -- register_copy 
    // [167] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#1] -- register_copy 
    // [167] phi (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#1 [phi:init_dist_screen::@9->init_dist_screen::@1#2] -- register_copy 
    jmp b1
    // init_dist_screen::@1
  b1:
    // [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
    // [169] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$18
    bcs b2
    jmp b3
    // init_dist_screen::@3
  b3:
    // [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$18+1
    // [171] phi from init_dist_screen::@2 init_dist_screen::@3 to init_dist_screen::@4 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4]
  b4_from_b2:
  b4_from_b3:
    // [171] phi (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$7 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4#0] -- register_copy 
    jmp b4
    // init_dist_screen::@4
  b4:
    // [172] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
    // [173] call sqr 
    // [232] phi from init_dist_screen::@4 to sqr [phi:init_dist_screen::@4->sqr]
  sqr_from_b4:
    // [232] phi (byte) sqr::val#2 = (byte) sqr::val#0 [phi:init_dist_screen::@4->sqr#0] -- register_copy 
    jsr sqr
    // [174] (word) sqr::return#2 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_2
    lda sqr.return+1
    sta sqr.return_2+1
    jmp b10
    // init_dist_screen::@10
  b10:
    // [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2
    // [176] phi from init_dist_screen::@10 to init_dist_screen::@5 [phi:init_dist_screen::@10->init_dist_screen::@5]
  b5_from_b10:
    // [176] phi (byte) init_dist_screen::xb#2 = (byte) $27 [phi:init_dist_screen::@10->init_dist_screen::@5#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
    // [176] phi (byte) init_dist_screen::x#2 = (byte) 0 [phi:init_dist_screen::@10->init_dist_screen::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b5
    // [176] phi from init_dist_screen::@12 to init_dist_screen::@5 [phi:init_dist_screen::@12->init_dist_screen::@5]
  b5_from_b12:
    // [176] phi (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#1 [phi:init_dist_screen::@12->init_dist_screen::@5#0] -- register_copy 
    // [176] phi (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#1 [phi:init_dist_screen::@12->init_dist_screen::@5#1] -- register_copy 
    jmp b5
    // init_dist_screen::@5
  b5:
    // [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
    // [178] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$27
    bcs b6
    jmp b7
    // init_dist_screen::@7
  b7:
    // [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$27+1
    // [180] phi from init_dist_screen::@6 init_dist_screen::@7 to init_dist_screen::@8 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8]
  b8_from_b6:
  b8_from_b7:
    // [180] phi (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$15 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8#0] -- register_copy 
    jmp b8
    // init_dist_screen::@8
  b8:
    // [181] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
    // [182] call sqr 
    // [232] phi from init_dist_screen::@8 to sqr [phi:init_dist_screen::@8->sqr]
  sqr_from_b8:
    // [232] phi (byte) sqr::val#2 = (byte) sqr::val#1 [phi:init_dist_screen::@8->sqr#0] -- register_copy 
    jsr sqr
    // [183] (word) sqr::return#3 ← (word) sqr::return#0
    jmp b11
    // init_dist_screen::@11
  b11:
    // [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3
    // [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda ds
    clc
    adc yds
    sta ds
    lda ds+1
    adc yds+1
    sta ds+1
    // [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
    // [187] call sqrt 
    jsr sqrt
    // [188] (byte) sqrt::return#2 ← (byte) sqrt::return#0
    jmp b12
    // init_dist_screen::@12
  b12:
    // [189] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2
    // [190] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_topline),y
    // [191] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_bottomline),y
    // [192] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_topline),y
    // [193] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_bottomline),y
    // [194] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [195] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
    // [196] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b5_from_b12
    jmp b9
    // init_dist_screen::@9
  b9:
    // [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_topline
    sta screen_topline
    bcc !+
    inc screen_topline+1
  !:
    // [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_bottomline
    sec
    sbc #<$28
    sta screen_bottomline
    lda screen_bottomline+1
    sbc #>$28
    sta screen_bottomline+1
    // [199] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10 -- vbuz1=_inc_vbuz1 
    inc y
    // [200] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1_from_b9
    jmp breturn
    // init_dist_screen::@return
  breturn:
    // [201] return 
    rts
    // init_dist_screen::@6
  b6:
    // [202] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$27
    jmp b8_from_b6
    // init_dist_screen::@2
  b2:
    // [203] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$18
    jmp b4_from_b2
}
  // sqrt
// Find the (integer) square root of a word value
// If the square is not an integer then it returns the largest integer N where N*N <= val
// Uses a table of squares that must be initialized by calling init_squares()
// sqrt(word zeropage($4f) val)
sqrt: {
    .label _1 = $31
    .label _3 = $31
    .label found = $31
    .label val = $4f
    // [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0
    // [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta bsearch16u.items
    lda SQUARES+1
    sta bsearch16u.items+1
    // [206] call bsearch16u 
    // [213] phi from sqrt to bsearch16u [phi:sqrt->bsearch16u]
  bsearch16u_from_sqrt:
    jsr bsearch16u
    // [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
    jmp b1
    // sqrt::@1
  b1:
    // [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
    // [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 -- vwuz1=pwuz1_minus_pwuz2 
    lda _3
    sec
    sbc SQUARES
    sta _3
    lda _3+1
    sbc SQUARES+1
    sta _3+1
    // [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr _1+1
    ror _1
    // [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 -- vbuaa=_byte_vwuz1 
    lda _1
    jmp breturn
    // sqrt::@return
  breturn:
    // [212] return 
    rts
}
  // bsearch16u
// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
// bsearch16u(word zeropage($4f) key, word* zeropage($31) items, byte register(X) num)
bsearch16u: {
    .label _2 = $31
    .label pivot = $51
    .label result = $53
    .label return = $31
    .label items = $31
    .label key = $4f
    // [214] phi from bsearch16u to bsearch16u::@3 [phi:bsearch16u->bsearch16u::@3]
  b3_from_bsearch16u:
    // [214] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#1 [phi:bsearch16u->bsearch16u::@3#0] -- register_copy 
    // [214] phi (byte) bsearch16u::num#3 = (const byte) NUM_SQUARES#3 [phi:bsearch16u->bsearch16u::@3#1] -- vbuxx=vbuc1 
    ldx #NUM_SQUARES
    jmp b3
    // bsearch16u::@3
  b3:
    // [215] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b4
    jmp b5
    // bsearch16u::@5
  b5:
    // [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 -- _deref_pwuz1_le_vwuz2_then_la1 
    ldy #1
    lda (items),y
    cmp key+1
    bne !+
    dey
    lda (items),y
    cmp key
    beq b2_from_b5
  !:
    bcc b2_from_b5
    jmp b1
    // bsearch16u::@1
  b1:
    // [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz1_minus_vwuc1 
    lda _2
    sec
    sbc #<1*SIZEOF_WORD
    sta _2
    lda _2+1
    sbc #>1*SIZEOF_WORD
    sta _2+1
    // [218] phi from bsearch16u::@1 bsearch16u::@5 to bsearch16u::@2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2]
  b2_from_b1:
  b2_from_b5:
    // [218] phi (word*) bsearch16u::return#2 = (word*~) bsearch16u::$2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2#0] -- register_copy 
    jmp b2
    // bsearch16u::@2
  b2:
    // [219] phi from bsearch16u::@2 bsearch16u::@8 to bsearch16u::@return [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return]
  breturn_from_b2:
  breturn_from_b8:
    // [219] phi (word*) bsearch16u::return#1 = (word*) bsearch16u::return#2 [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return#0] -- register_copy 
    jmp breturn
    // bsearch16u::@return
  breturn:
    // [220] return 
    rts
    // bsearch16u::@4
  b4:
    // [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
    // [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 -- pwuz1=pwuz2_plus_vbuaa 
    clc
    adc items
    sta pivot
    lda #0
    adc items+1
    sta pivot+1
    // [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) -- vwsz1=vwsz2_minus__deref_pwsz3 
    sec
    lda key
    ldy #0
    sbc (pivot),y
    sta result
    lda key+1
    iny
    sbc (pivot),y
    sta result+1
    // [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 -- vwsz1_neq_0_then_la1 
    lda result+1
    bne b6
    lda result
    bne b6
    jmp b8
    // bsearch16u::@8
  b8:
    // [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 -- pwuz1=pwuz2 
    lda pivot
    sta return
    lda pivot+1
    sta return+1
    jmp breturn_from_b8
    // bsearch16u::@6
  b6:
    // [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 -- vwsz1_le_0_then_la1 
    lda result+1
    bmi b7_from_b6
    bne !+
    lda result
    beq b7_from_b6
  !:
    jmp b9
    // bsearch16u::@9
  b9:
    // [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz2_plus_vbuc1 
    lda #1*SIZEOF_WORD
    clc
    adc pivot
    sta items
    lda #0
    adc pivot+1
    sta items+1
    // [229] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3 -- vbuxx=_dec_vbuxx 
    dex
    // [230] phi from bsearch16u::@6 bsearch16u::@9 to bsearch16u::@7 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7]
  b7_from_b6:
  b7_from_b9:
    // [230] phi (word*) bsearch16u::items#8 = (word*) bsearch16u::items#2 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#0] -- register_copy 
    // [230] phi (byte) bsearch16u::num#5 = (byte) bsearch16u::num#3 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#1] -- register_copy 
    jmp b7
    // bsearch16u::@7
  b7:
    // [231] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [214] phi from bsearch16u::@7 to bsearch16u::@3 [phi:bsearch16u::@7->bsearch16u::@3]
  b3_from_b7:
    // [214] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#8 [phi:bsearch16u::@7->bsearch16u::@3#0] -- register_copy 
    // [214] phi (byte) bsearch16u::num#3 = (byte) bsearch16u::num#0 [phi:bsearch16u::@7->bsearch16u::@3#1] -- register_copy 
    jmp b3
}
  // sqr
// Find the square of a byte value
// Uses a table of squares that must be initialized by calling init_squares()
// sqr(byte register(A) val)
sqr: {
    .label return = $4f
    .label return_2 = $4d
    // [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) -- vwuz1=pwuz2_derefidx_vbuaa 
    tay
    lda (SQUARES),y
    sta return
    iny
    lda (SQUARES),y
    sta return+1
    jmp breturn
    // sqr::@return
  breturn:
    // [235] return 
    rts
}
  // init_squares
// Initialize squares table
// Uses iterative formula (x+1)^2 = x^2 + 2*x + 1
init_squares: {
    .label squares = $35
    .label sqr = $33
    // [237] call malloc 
    // [88] phi from init_squares to malloc [phi:init_squares->malloc]
  malloc_from_init_squares:
    // [88] phi (word) malloc::size#2 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD [phi:init_squares->malloc#0] -- vwuz1=vbuc1 
    lda #NUM_SQUARES*SIZEOF_WORD
    sta malloc.size
    lda #0
    sta malloc.size+1
    // [88] phi (byte*) heap_head#13 = (const byte*) HEAP_TOP#0 [phi:init_squares->malloc#1] -- pbuz1=pbuc1 
    lda #<HEAP_TOP
    sta heap_head
    lda #>HEAP_TOP
    sta heap_head+1
    jsr malloc
    jmp b2
    // init_squares::@2
  b2:
    // [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0
    // [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta squares
    lda SQUARES+1
    sta squares+1
    // [240] phi from init_squares::@2 to init_squares::@1 [phi:init_squares::@2->init_squares::@1]
  b1_from_b2:
    // [240] phi (byte) init_squares::i#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [240] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#0 [phi:init_squares::@2->init_squares::@1#1] -- register_copy 
    // [240] phi (word) init_squares::sqr#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
    jmp b1
    // [240] phi from init_squares::@1 to init_squares::@1 [phi:init_squares::@1->init_squares::@1]
  b1_from_b1:
    // [240] phi (byte) init_squares::i#2 = (byte) init_squares::i#1 [phi:init_squares::@1->init_squares::@1#0] -- register_copy 
    // [240] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#1 [phi:init_squares::@1->init_squares::@1#1] -- register_copy 
    // [240] phi (word) init_squares::sqr#2 = (word) init_squares::sqr#1 [phi:init_squares::@1->init_squares::@1#2] -- register_copy 
    jmp b1
    // init_squares::@1
  b1:
    // [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda sqr
    sta (squares),y
    iny
    lda sqr+1
    sta (squares),y
    // [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_WORD
    clc
    adc squares
    sta squares
    bcc !+
    inc squares+1
  !:
    // [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [244] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1 -- vbuaa=vbuaa_plus_1 
    clc
    adc #1
    // [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
    // [246] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [247] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_SQUARES-1+1
    bne b1_from_b1
    jmp breturn
    // init_squares::@return
  breturn:
    // [248] return 
    rts
}
  // File Data
  // Angles representing ATAN(0.5), ATAN(0.25), ATAN(0.125), ...
CORDIC_ATAN2_ANGLES_16:
.for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2

  // Screen containing distance to center
  SCREEN_DIST: .fill $3e8, 0
  // = malloc(1000);
  // Screen containing angle to center
  SCREEN_ANGLE: .fill $3e8, 0
  // = malloc(1000);
  // Screen containing angle to center
  SCREEN_MIX: .fill $3e8, 0
  // Array containing the bucket size for each of the distance buckets
  BUCKET_SIZES: .fill NUM_BUCKETS, 0
  // Buckets containing screen indices for each distance from the center.
  // BUCKETS[dist] is an array of words containing screen indices.
  // The size of the array BUCKETS[dist] is BUCKET_SIZES[dist]
  BUCKETS: .fill 2*NUM_BUCKETS, 0
  // Current index into each bucket. Used while populating the buckets. (After population the end the values will be equal to the bucket sizes)
  BUCKET_IDX: .fill NUM_BUCKETS, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b13
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b9
Removing instruction jmp b8
Removing instruction jmp b10
Removing instruction jmp b12
Removing instruction jmp b11
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b10
Removing instruction jmp b12
Removing instruction jmp b21
Removing instruction jmp b7
Removing instruction jmp b9
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b13
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b20
Removing instruction jmp b19
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b10
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda bucket_size
Removing instruction lda bucket_size1
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction lda #0 with TYA
Removing instruction lda #>0
Replacing instruction lda #0 with TYA
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda ang_w
Removing instruction lda ang_w
Removing instruction ldy xb
Removing instruction ldy x
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction ldy x
Removing instruction ldy xb
Removing instruction lda result+1
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b9_from_b9 with b9
Replacing label b12_from_b12 with b12
Replacing label b3 with b4
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Replacing label b3_from_b6 with b3
Replacing label b3_from_b6 with b3
Replacing label b4_from_b4 with b4
Replacing label b5_from_b5 with b5
Replacing label b5_from_b5 with b5
Replacing label b2_from_b4 with b2
Replacing label b1_from_b3 with b1
Replacing label b7_from_b12 with b7
Replacing label b8_from_b7 with b8
Replacing label b17_from_b15 with b17
Replacing label b12_from_b19 with b12
Replacing label b19_from_b18 with b19
Replacing label b13_from_b14 with b13
Replacing label b6_from_b4 with b6
Replacing label b3_from_b1 with b3
Replacing label b5_from_b12 with b5
Replacing label b1_from_b9 with b1
Replacing label b8_from_b6 with b8
Replacing label b4_from_b2 with b4
Replacing label b2_from_b5 with b2
Replacing label b2_from_b5 with b2
Replacing label breturn_from_b8 with b2
Replacing label b7_from_b6 with b7
Replacing label b7_from_b6 with b7
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b13_from_main:
Removing instruction init_angle_screen_from_b13:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction init_buckets_from_b2:
Removing instruction b3:
Removing instruction b9_from_b9:
Removing instruction b12_from_b12:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b6:
Removing instruction b4_from_b4:
Removing instruction b5_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b1:
Removing instruction b3_from_b2:
Removing instruction b6_from_b4:
Removing instruction b6_from_b5:
Removing instruction b10_from_b6:
Removing instruction b12_from_b10:
Removing instruction b12_from_b19:
Removing instruction b7_from_b12:
Removing instruction b7_from_b21:
Removing instruction b8_from_b7:
Removing instruction b8_from_b9:
Removing instruction breturn:
Removing instruction b13_from_b11:
Removing instruction b13_from_b14:
Removing instruction b17_from_b15:
Removing instruction b17_from_b16:
Removing instruction b19_from_b18:
Removing instruction b19_from_b20:
Removing instruction b1_from_b9:
Removing instruction b4_from_b2:
Removing instruction b4_from_b3:
Removing instruction sqr_from_b4:
Removing instruction b5_from_b10:
Removing instruction b5_from_b12:
Removing instruction b8_from_b6:
Removing instruction b8_from_b7:
Removing instruction sqr_from_b8:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction breturn_from_b2:
Removing instruction breturn_from_b8:
Removing instruction breturn:
Removing instruction b7_from_b6:
Removing instruction b7_from_b9:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction init_dist_screen_from_main:
Removing instruction b13:
Removing instruction b1_from_b13:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b6:
Removing instruction b7:
Removing instruction b9_from_b7:
Removing instruction b10:
Removing instruction b12_from_b10:
Removing instruction b3_from_b11:
Removing instruction b1_from_init_buckets:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction malloc_from_b3:
Removing instruction b6:
Removing instruction b4_from_b6:
Removing instruction b5_from_b4:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_init_angle_screen:
Removing instruction b4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b5:
Removing instruction b21:
Removing instruction b9:
Removing instruction b15:
Removing instruction b16:
Removing instruction b20:
Removing instruction b10_from_b19:
Removing instruction init_squares_from_init_dist_screen:
Removing instruction b1_from_init_dist_screen:
Removing instruction b3:
Removing instruction b10:
Removing instruction b7:
Removing instruction b11:
Removing instruction b12:
Removing instruction b9:
Removing instruction breturn:
Removing instruction bsearch16u_from_sqrt:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b3_from_bsearch16u:
Removing instruction b5:
Removing instruction b1:
Removing instruction b8:
Removing instruction b9:
Removing instruction b3_from_b7:
Removing instruction breturn:
Removing instruction malloc_from_init_squares:
Removing instruction b2:
Removing instruction b1_from_b2:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp b2
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b9
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda bucket_idx with TYA
Replacing instruction lda bucket_idx with TYA
Removing instruction lda #<0
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [600] beq b12 to bne
Fixing long branch [494] bpl b1 to bmi
Fixing long branch [506] bpl b4 to bmi

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(word*[NUM_BUCKETS#0]) BUCKETS
(const word*[NUM_BUCKETS#0]) BUCKETS#0 BUCKETS = { fill( NUM_BUCKETS#0, 0) }
(byte[NUM_BUCKETS#0]) BUCKET_IDX
(const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 BUCKET_IDX = { fill( NUM_BUCKETS#0, 0) }
(byte[NUM_BUCKETS#0]) BUCKET_SIZES
(const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 BUCKET_SIZES = { fill( NUM_BUCKETS#0, 0) }
(word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16
(const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 CORDIC_ATAN2_ANGLES_16 = kickasm {{ .for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2
 }}
(byte) CORDIC_ITERATIONS_16
(const byte) CORDIC_ITERATIONS_16#0 CORDIC_ITERATIONS_16 = (byte) $f
(byte*) HEAP_TOP
(const byte*) HEAP_TOP#0 HEAP_TOP = (byte*) 40960
(word) NUM_BUCKETS
(const word) NUM_BUCKETS#0 NUM_BUCKETS = (word) $100
(byte) NUM_SQUARES
(const byte) NUM_SQUARES#3 NUM_SQUARES = (byte) $30
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte[$3e8]) SCREEN_ANGLE
(const byte[$3e8]) SCREEN_ANGLE#0 SCREEN_ANGLE = { fill( $3e8, 0) }
(byte[$3e8]) SCREEN_DIST
(const byte[$3e8]) SCREEN_DIST#0 SCREEN_DIST = { fill( $3e8, 0) }
(byte*) SCREEN_FILL
(const byte*) SCREEN_FILL#0 SCREEN_FILL = (byte*) 1024
(byte[$3e8]) SCREEN_MIX
(const byte[$3e8]) SCREEN_MIX#0 SCREEN_MIX = { fill( $3e8, 0) }
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte) 2
(word*) SQUARES
(void*) SQUARES#1 SQUARES zp ZP_WORD:23 0.03278688524590164
(word()) atan2_16((signed word) atan2_16::x , (signed word) atan2_16::y)
(signed word~) atan2_16::$2 $2 zp ZP_WORD:32 4.0
(byte~) atan2_16::$23 reg byte a 2002.0
(byte~) atan2_16::$24 reg byte a 2002.0
(signed word~) atan2_16::$7 $7 zp ZP_WORD:34 4.0
(label) atan2_16::@1
(label) atan2_16::@10
(label) atan2_16::@11
(label) atan2_16::@12
(label) atan2_16::@13
(label) atan2_16::@14
(label) atan2_16::@15
(label) atan2_16::@16
(label) atan2_16::@17
(label) atan2_16::@18
(label) atan2_16::@19
(label) atan2_16::@2
(label) atan2_16::@20
(label) atan2_16::@21
(label) atan2_16::@3
(label) atan2_16::@4
(label) atan2_16::@5
(label) atan2_16::@6
(label) atan2_16::@7
(label) atan2_16::@8
(label) atan2_16::@9
(label) atan2_16::@return
(word) atan2_16::angle
(word) atan2_16::angle#1 angle zp ZP_WORD:36 3.0
(word) atan2_16::angle#11 angle zp ZP_WORD:36 4.0
(word) atan2_16::angle#12 angle zp ZP_WORD:36 190.66666666666666
(word) atan2_16::angle#13 angle zp ZP_WORD:36 1334.6666666666667
(word) atan2_16::angle#2 angle zp ZP_WORD:36 2002.0
(word) atan2_16::angle#3 angle zp ZP_WORD:36 2002.0
(word) atan2_16::angle#4 angle zp ZP_WORD:36 4.0
(word) atan2_16::angle#5 angle zp ZP_WORD:36 4.0
(word) atan2_16::angle#6 angle zp ZP_WORD:36 2004.0
(byte) atan2_16::i
(byte) atan2_16::i#1 reg byte x 1501.5
(byte) atan2_16::i#2 reg byte x 208.54166666666669
(word) atan2_16::return
(word) atan2_16::return#0 return zp ZP_WORD:36 34.99999999999999
(word) atan2_16::return#2 return zp ZP_WORD:36 202.0
(byte) atan2_16::shift
(byte) atan2_16::shift#1 reg byte y 20002.0
(byte) atan2_16::shift#2 reg byte y 8001.25
(byte~) atan2_16::shift#5 reg byte y 667.3333333333334
(signed word) atan2_16::x
(signed word) atan2_16::x#0 x zp ZP_WORD:72 2.8684210526315796
(signed word) atan2_16::xd
(signed word) atan2_16::xd#1 xd zp ZP_WORD:40 6667.333333333333
(signed word~) atan2_16::xd#10 xd zp ZP_WORD:40 1001.0
(signed word) atan2_16::xd#2 xd zp ZP_WORD:40 1001.0
(signed word) atan2_16::xd#3 xd zp ZP_WORD:40 7668.333333333332
(signed word) atan2_16::xd#5 xd zp ZP_WORD:40 1001.0
(signed word) atan2_16::xi
(signed word) atan2_16::xi#0 xi zp ZP_WORD:34 6.0
(signed word) atan2_16::xi#1 xi zp ZP_WORD:34 500.5
(signed word~) atan2_16::xi#13 xi zp ZP_WORD:34 4.0
(signed word) atan2_16::xi#2 xi zp ZP_WORD:34 500.5
(signed word) atan2_16::xi#3 xi zp ZP_WORD:34 267.0666666666667
(signed word) atan2_16::xi#8 xi zp ZP_WORD:34 1001.0
(signed word) atan2_16::y
(signed word) atan2_16::y#0 y zp ZP_WORD:74 2.724999999999999
(signed word) atan2_16::yd
(signed word) atan2_16::yd#1 yd zp ZP_WORD:38 10001.0
(signed word~) atan2_16::yd#10 yd zp ZP_WORD:38 2002.0
(signed word) atan2_16::yd#2 yd zp ZP_WORD:38 2002.0
(signed word) atan2_16::yd#3 yd zp ZP_WORD:38 4601.0
(signed word) atan2_16::yd#5 yd zp ZP_WORD:38 2002.0
(signed word) atan2_16::yi
(signed word) atan2_16::yi#0 yi zp ZP_WORD:32 1.2000000000000002
(signed word) atan2_16::yi#1 yi zp ZP_WORD:32 667.3333333333334
(signed word~) atan2_16::yi#16 yi zp ZP_WORD:32 4.0
(signed word) atan2_16::yi#2 yi zp ZP_WORD:32 667.3333333333334
(signed word) atan2_16::yi#3 yi zp ZP_WORD:32 353.4117647058823
(signed word) atan2_16::yi#8 yi zp ZP_WORD:32 1001.0
(word*()) bsearch16u((word) bsearch16u::key , (word*) bsearch16u::items , (byte) bsearch16u::num)
(byte~) bsearch16u::$16 reg byte a 2002.0
(word*~) bsearch16u::$2 $2 zp ZP_WORD:49 4.0
(byte~) bsearch16u::$6 reg byte a 2002.0
(label) bsearch16u::@1
(label) bsearch16u::@2
(label) bsearch16u::@3
(label) bsearch16u::@4
(label) bsearch16u::@5
(label) bsearch16u::@6
(label) bsearch16u::@7
(label) bsearch16u::@8
(label) bsearch16u::@9
(label) bsearch16u::@return
(word*) bsearch16u::items
(word*) bsearch16u::items#0 items zp ZP_WORD:49 1001.0
(word*) bsearch16u::items#1 items zp ZP_WORD:49 2.0
(word*) bsearch16u::items#2 items zp ZP_WORD:49 334.5555555555556
(word*) bsearch16u::items#8 items zp ZP_WORD:49 1501.5
(word) bsearch16u::key
(word) bsearch16u::key#0 key zp ZP_WORD:79 0.26666666666666666
(byte) bsearch16u::num
(byte) bsearch16u::num#0 reg byte x 2002.0
(byte) bsearch16u::num#1 reg byte x 2002.0
(byte) bsearch16u::num#3 reg byte x 556.1111111111111
(byte) bsearch16u::num#5 reg byte x 3003.0
(word*) bsearch16u::pivot
(word*) bsearch16u::pivot#0 pivot zp ZP_WORD:81 501.0
(signed word) bsearch16u::result
(signed word) bsearch16u::result#0 result zp ZP_WORD:83 1501.5
(word*) bsearch16u::return
(word*) bsearch16u::return#1 return zp ZP_WORD:49 2.0
(word*) bsearch16u::return#2 return zp ZP_WORD:49 6.0
(word*) bsearch16u::return#3 return zp ZP_WORD:49 4.0
(word*~) bsearch16u::return#6 return zp ZP_WORD:49 4.0
(byte*) heap_head
(byte*) heap_head#1 heap_head zp ZP_WORD:21 0.1511627906976744
(byte*) heap_head#13 heap_head zp ZP_WORD:21 13.0
(void()) init_angle_screen((byte*) init_angle_screen::screen)
(word~) init_angle_screen::$10 $10 zp ZP_WORD:36 202.0
(byte~) init_angle_screen::$12 reg byte a 202.0
(byte~) init_angle_screen::$13 reg byte a 202.0
(byte~) init_angle_screen::$14 reg byte a 202.0
(byte~) init_angle_screen::$2 reg byte a 202.0
(byte~) init_angle_screen::$3 reg byte a 202.0
(byte~) init_angle_screen::$6 reg byte a 202.0
(label) init_angle_screen::@1
(label) init_angle_screen::@2
(label) init_angle_screen::@3
(label) init_angle_screen::@4
(label) init_angle_screen::@return
(byte) init_angle_screen::ang_w
(byte) init_angle_screen::ang_w#0 ang_w zp ZP_BYTE:76 84.16666666666666
(word) init_angle_screen::angle_w
(word) init_angle_screen::angle_w#0 angle_w zp ZP_WORD:36 202.0
(byte*) init_angle_screen::screen
(byte*) init_angle_screen::screen_bottomline
(byte*) init_angle_screen::screen_bottomline#1 screen_bottomline zp ZP_WORD:26 7.333333333333333
(byte*) init_angle_screen::screen_bottomline#5 screen_bottomline zp ZP_WORD:26 8.959999999999999
(byte*) init_angle_screen::screen_topline
(byte*) init_angle_screen::screen_topline#1 screen_topline zp ZP_WORD:28 5.5
(byte*) init_angle_screen::screen_topline#5 screen_topline zp ZP_WORD:28 9.333333333333334
(byte) init_angle_screen::x
(byte) init_angle_screen::x#1 x zp ZP_BYTE:30 101.0
(byte) init_angle_screen::x#2 x zp ZP_BYTE:30 25.25
(byte) init_angle_screen::xb
(byte) init_angle_screen::xb#1 xb zp ZP_BYTE:31 101.0
(byte) init_angle_screen::xb#2 xb zp ZP_BYTE:31 19.238095238095237
(signed word) init_angle_screen::xw
(word) init_angle_screen::xw#0 xw zp ZP_WORD:72 33.666666666666664
(byte) init_angle_screen::y
(byte) init_angle_screen::y#1 y zp ZP_BYTE:25 16.5
(byte) init_angle_screen::y#4 y zp ZP_BYTE:25 4.730769230769231
(signed word) init_angle_screen::yw
(word) init_angle_screen::yw#0 yw zp ZP_WORD:74 50.5
(void()) init_buckets((byte*) init_buckets::screen)
(word~) init_buckets::$10 $10 zp ZP_WORD:70 11.0
(word~) init_buckets::$12 $12 zp ZP_WORD:66 22.0
(word~) init_buckets::$13 $13 zp ZP_WORD:68 22.0
(byte~) init_buckets::$14 reg byte a 22.0
(byte*~) init_buckets::$15 $15 zp ZP_WORD:23 22.0
(word**~) init_buckets::$16 $16 zp ZP_WORD:66 22.0
(word**~) init_buckets::$17 $17 zp ZP_WORD:68 22.0
(void*~) init_buckets::$5 $5 zp ZP_WORD:23 3.6666666666666665
(word~) init_buckets::$9 $9 zp ZP_WORD:68 22.0
(label) init_buckets::@1
(label) init_buckets::@2
(label) init_buckets::@3
(label) init_buckets::@4
(label) init_buckets::@5
(label) init_buckets::@6
(label) init_buckets::@return
(word*) init_buckets::bucket
(word*) init_buckets::bucket#0 bucket zp ZP_WORD:68 7.333333333333333
(byte*) init_buckets::dist
(byte*) init_buckets::dist#1 dist zp ZP_WORD:11 7.333333333333333
(byte*) init_buckets::dist#3 dist#3 zp ZP_WORD:17 7.333333333333333
(byte*) init_buckets::dist#4 dist zp ZP_WORD:11 22.0
(byte*) init_buckets::dist#5 dist#5 zp ZP_WORD:17 4.4
(byte) init_buckets::distance
(byte) init_buckets::distance#0 reg byte x 5.5
(byte) init_buckets::i
(byte) init_buckets::i#1 reg byte x 16.5
(byte) init_buckets::i#2 reg byte x 16.5
(word) init_buckets::i1
(word) init_buckets::i1#1 i1 zp ZP_WORD:13 16.5
(word) init_buckets::i1#2 i1 zp ZP_WORD:13 7.333333333333333
(word) init_buckets::i2
(word) init_buckets::i2#1 i2 zp ZP_WORD:15 16.5
(word) init_buckets::i2#2 i2 zp ZP_WORD:15 5.5
(byte) init_buckets::i3
(byte) init_buckets::i3#1 reg byte x 16.5
(byte) init_buckets::i3#2 reg byte x 16.5
(word) init_buckets::i4
(word) init_buckets::i4#1 i4 zp ZP_WORD:19 16.5
(word) init_buckets::i4#2 i4 zp ZP_WORD:19 2.0
(byte*) init_buckets::screen
(void()) init_dist_screen((byte*) init_dist_screen::screen)
(byte~) init_dist_screen::$13 reg byte a 202.0
(byte~) init_dist_screen::$15 reg byte a 202.0
(byte~) init_dist_screen::$5 reg byte a 22.0
(byte~) init_dist_screen::$7 reg byte a 22.0
(label) init_dist_screen::@1
(label) init_dist_screen::@10
(label) init_dist_screen::@11
(label) init_dist_screen::@12
(label) init_dist_screen::@2
(label) init_dist_screen::@3
(label) init_dist_screen::@4
(label) init_dist_screen::@5
(label) init_dist_screen::@6
(label) init_dist_screen::@7
(label) init_dist_screen::@8
(label) init_dist_screen::@9
(label) init_dist_screen::@return
(byte) init_dist_screen::d
(byte) init_dist_screen::d#0 reg byte a 126.25
(word) init_dist_screen::ds
(word) init_dist_screen::ds#0 ds zp ZP_WORD:79 202.0
(byte*) init_dist_screen::screen
(byte*) init_dist_screen::screen_bottomline
(byte*) init_dist_screen::screen_bottomline#1 screen_bottomline zp ZP_WORD:45 7.333333333333333
(byte*) init_dist_screen::screen_bottomline#10 screen_bottomline zp ZP_WORD:45 6.787878787878788
(byte*) init_dist_screen::screen_topline
(byte*) init_dist_screen::screen_topline#1 screen_topline zp ZP_WORD:43 5.5
(byte*) init_dist_screen::screen_topline#10 screen_topline zp ZP_WORD:43 7.0
(byte) init_dist_screen::x
(byte) init_dist_screen::x#1 x zp ZP_BYTE:47 101.0
(byte) init_dist_screen::x#2 x zp ZP_BYTE:47 26.578947368421055
(byte) init_dist_screen::x2
(byte) init_dist_screen::x2#0 reg byte a 202.0
(byte) init_dist_screen::xb
(byte) init_dist_screen::xb#1 xb zp ZP_BYTE:48 101.0
(byte) init_dist_screen::xb#2 xb zp ZP_BYTE:48 20.2
(byte) init_dist_screen::xd
(byte) init_dist_screen::xd#0 reg byte a 303.0
(word) init_dist_screen::xds
(word) init_dist_screen::xds#0 xds zp ZP_WORD:79 202.0
(byte) init_dist_screen::y
(byte) init_dist_screen::y#1 y zp ZP_BYTE:42 16.5
(byte) init_dist_screen::y#10 y zp ZP_BYTE:42 0.9705882352941178
(byte) init_dist_screen::y2
(byte) init_dist_screen::y2#0 reg byte a 22.0
(byte) init_dist_screen::yd
(byte) init_dist_screen::yd#0 reg byte a 33.0
(word) init_dist_screen::yds
(word) init_dist_screen::yds#0 yds zp ZP_WORD:77 4.869565217391305
(void()) init_squares()
(byte~) init_squares::$3 reg byte a 22.0
(byte~) init_squares::$4 reg byte a 22.0
(label) init_squares::@1
(label) init_squares::@2
(label) init_squares::@return
(byte) init_squares::i
(byte) init_squares::i#1 reg byte x 16.5
(byte) init_squares::i#2 reg byte x 5.5
(word) init_squares::sqr
(word) init_squares::sqr#1 sqr zp ZP_WORD:51 7.333333333333333
(word) init_squares::sqr#2 sqr zp ZP_WORD:51 6.6000000000000005
(word*) init_squares::squares
(word*) init_squares::squares#0 squares zp ZP_WORD:53 4.0
(word*) init_squares::squares#1 squares zp ZP_WORD:53 3.6666666666666665
(word*) init_squares::squares#2 squares zp ZP_WORD:53 17.5
(void()) main()
(word~) main::$11 $11 zp ZP_WORD:57 22.0
(word~) main::$16 $16 zp ZP_WORD:62 22.0
(word~) main::$19 $19 zp ZP_WORD:57 22.0
(byte~) main::$20 reg byte a 202.0
(word~) main::$21 $21 zp ZP_WORD:62 22.0
(byte~) main::$22 reg byte a 202.0
(word**~) main::$23 $23 zp ZP_WORD:57 22.0
(word**~) main::$24 $24 zp ZP_WORD:62 22.0
(byte~) main::$3 $3 zp ZP_BYTE:55 11.0
(byte~) main::$4 reg byte a 22.0
(byte~) main::$5 reg byte a 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte*) main::angle
(byte*) main::angle#1 angle zp ZP_WORD:4 7.333333333333333
(byte*) main::angle#2 angle zp ZP_WORD:4 4.714285714285714
(word*) main::bucket
(word*) main::bucket#0 bucket zp ZP_WORD:57 16.0
(word*) main::bucket1
(word*) main::bucket1#0 bucket1 zp ZP_WORD:62 16.0
(byte) main::bucket_idx
(byte) main::bucket_idx#1 bucket_idx zp ZP_BYTE:10 2.357142857142857
(byte) main::bucket_idx#9 bucket_idx zp ZP_BYTE:10 2.0625
(byte) main::bucket_size
(byte) main::bucket_size#0 bucket_size zp ZP_BYTE:56 10.25
(byte) main::bucket_size1
(byte) main::bucket_size1#0 bucket_size1 zp ZP_BYTE:61 10.25
(byte*) main::dist
(byte*) main::dist#1 dist zp ZP_WORD:2 5.5
(byte*) main::dist#2 dist zp ZP_WORD:2 5.5
(word) main::i
(word) main::i#1 i zp ZP_WORD:8 16.5
(word) main::i#2 i zp ZP_WORD:8 2.75
(byte) main::i1
(byte) main::i1#1 reg byte x 151.5
(byte) main::i1#2 reg byte x 75.75
(byte) main::i2
(byte) main::i2#1 reg byte x 151.5
(byte) main::i2#2 reg byte x 75.75
(byte*) main::mix
(byte*) main::mix#1 mix zp ZP_WORD:6 4.4
(byte*) main::mix#2 mix zp ZP_WORD:6 6.6000000000000005
(byte*) main::sc
(byte*) main::sc#0 sc zp ZP_WORD:59 202.0
(byte*) main::sc1
(byte*) main::sc1#0 sc1 zp ZP_WORD:64 202.0
(void*()) malloc((word) malloc::size)
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::mem#0 mem zp ZP_WORD:23 0.8
(void*) malloc::return
(word) malloc::size
(word) malloc::size#1 size zp ZP_WORD:23 22.0
(word) malloc::size#2 size zp ZP_WORD:23 13.0
(word()) sqr((byte) sqr::val)
(byte~) sqr::$0 reg byte a 4.0
(label) sqr::@return
(word) sqr::return
(word) sqr::return#0 return zp ZP_WORD:79 28.5
(word) sqr::return#2 return#2 zp ZP_WORD:77 22.0
(word) sqr::return#3 return zp ZP_WORD:79 202.0
(byte) sqr::val
(byte) sqr::val#0 reg byte a 22.0
(byte) sqr::val#1 reg byte a 202.0
(byte) sqr::val#2 reg byte a 114.0
(byte()) sqrt((word) sqrt::val)
(word~) sqrt::$1 $1 zp ZP_WORD:49 2.0
(word~) sqrt::$3 $3 zp ZP_WORD:49 4.0
(label) sqrt::@1
(label) sqrt::@return
(word*) sqrt::found
(word*) sqrt::found#0 found zp ZP_WORD:49 4.0
(byte) sqrt::return
(byte) sqrt::return#0 reg byte a 34.33333333333333
(byte) sqrt::return#2 reg byte a 202.0
(byte) sqrt::sq
(word) sqrt::val
(word) sqrt::val#0 val zp ZP_WORD:79 103.0

zp ZP_WORD:2 [ main::dist#2 main::dist#1 ]
zp ZP_WORD:4 [ main::angle#2 main::angle#1 ]
zp ZP_WORD:6 [ main::mix#2 main::mix#1 ]
zp ZP_WORD:8 [ main::i#2 main::i#1 ]
zp ZP_BYTE:10 [ main::bucket_idx#9 main::bucket_idx#1 ]
reg byte x [ main::i1#2 main::i1#1 ]
reg byte x [ main::i2#2 main::i2#1 ]
reg byte x [ init_buckets::i#2 init_buckets::i#1 ]
zp ZP_WORD:11 [ init_buckets::dist#4 init_buckets::dist#1 ]
zp ZP_WORD:13 [ init_buckets::i1#2 init_buckets::i1#1 ]
zp ZP_WORD:15 [ init_buckets::i2#2 init_buckets::i2#1 ]
reg byte x [ init_buckets::i3#2 init_buckets::i3#1 ]
zp ZP_WORD:17 [ init_buckets::dist#5 init_buckets::dist#3 ]
zp ZP_WORD:19 [ init_buckets::i4#2 init_buckets::i4#1 ]
zp ZP_WORD:21 [ heap_head#13 heap_head#1 ]
zp ZP_WORD:23 [ malloc::size#2 malloc::size#1 init_buckets::$15 malloc::mem#0 init_buckets::$5 SQUARES#1 ]
zp ZP_BYTE:25 [ init_angle_screen::y#4 init_angle_screen::y#1 ]
zp ZP_WORD:26 [ init_angle_screen::screen_bottomline#5 init_angle_screen::screen_bottomline#1 ]
zp ZP_WORD:28 [ init_angle_screen::screen_topline#5 init_angle_screen::screen_topline#1 ]
zp ZP_BYTE:30 [ init_angle_screen::x#2 init_angle_screen::x#1 ]
zp ZP_BYTE:31 [ init_angle_screen::xb#2 init_angle_screen::xb#1 ]
zp ZP_WORD:32 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 ]
zp ZP_WORD:34 [ atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ]
reg byte x [ atan2_16::i#2 atan2_16::i#1 ]
zp ZP_WORD:36 [ atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 atan2_16::return#0 atan2_16::angle#5 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 atan2_16::return#2 init_angle_screen::angle_w#0 init_angle_screen::$10 ]
reg byte y [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
zp ZP_WORD:38 [ atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
zp ZP_WORD:40 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
zp ZP_BYTE:42 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
zp ZP_WORD:43 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 ]
zp ZP_WORD:45 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 ]
reg byte a [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
zp ZP_BYTE:47 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
zp ZP_BYTE:48 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
reg byte a [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
zp ZP_WORD:49 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$3 sqrt::$1 ]
reg byte x [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
reg byte a [ sqr::val#2 sqr::val#0 sqr::val#1 ]
zp ZP_WORD:51 [ init_squares::sqr#2 init_squares::sqr#1 ]
zp ZP_WORD:53 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
reg byte x [ init_squares::i#2 init_squares::i#1 ]
zp ZP_BYTE:55 [ main::$3 ]
reg byte a [ main::$4 ]
reg byte a [ main::$5 ]
zp ZP_BYTE:56 [ main::bucket_size#0 ]
zp ZP_WORD:57 [ main::$11 main::$19 main::$23 main::bucket#0 ]
reg byte a [ main::$20 ]
zp ZP_WORD:59 [ main::sc#0 ]
zp ZP_BYTE:61 [ main::bucket_size1#0 ]
zp ZP_WORD:62 [ main::$16 main::$21 main::$24 main::bucket1#0 ]
reg byte a [ main::$22 ]
zp ZP_WORD:64 [ main::sc1#0 ]
zp ZP_WORD:66 [ init_buckets::$12 init_buckets::$16 ]
reg byte x [ init_buckets::distance#0 ]
zp ZP_WORD:68 [ init_buckets::$9 init_buckets::$13 init_buckets::$17 init_buckets::bucket#0 ]
zp ZP_WORD:70 [ init_buckets::$10 ]
reg byte a [ init_buckets::$14 ]
reg byte a [ init_angle_screen::$2 ]
reg byte a [ init_angle_screen::$3 ]
zp ZP_WORD:72 [ init_angle_screen::xw#0 atan2_16::x#0 ]
reg byte a [ init_angle_screen::$6 ]
zp ZP_WORD:74 [ init_angle_screen::yw#0 atan2_16::y#0 ]
zp ZP_BYTE:76 [ init_angle_screen::ang_w#0 ]
reg byte a [ init_angle_screen::$12 ]
reg byte a [ init_angle_screen::$13 ]
reg byte a [ init_angle_screen::$14 ]
reg byte a [ atan2_16::$24 ]
reg byte a [ atan2_16::$23 ]
reg byte a [ init_dist_screen::y2#0 ]
zp ZP_WORD:77 [ sqr::return#2 init_dist_screen::yds#0 ]
reg byte a [ init_dist_screen::x2#0 ]
zp ZP_WORD:79 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 bsearch16u::key#0 ]
reg byte a [ sqrt::return#2 ]
reg byte a [ init_dist_screen::d#0 ]
reg byte a [ sqrt::return#0 ]
reg byte a [ bsearch16u::$6 ]
reg byte a [ bsearch16u::$16 ]
zp ZP_WORD:81 [ bsearch16u::pivot#0 ]
zp ZP_WORD:83 [ bsearch16u::result#0 ]
reg byte a [ sqr::$0 ]
reg byte a [ init_squares::$3 ]
reg byte a [ init_squares::$4 ]


FINAL ASSEMBLER
Score: 1112027

  // File Comments
// Fill screen using a spiral based on distance-to-center / angle-to-center
// Utilizes a bucket sort for identifying the minimum angle/distance
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label RASTER = $d012
  .label BORDERCOL = $d020
  // Top of the heap used by malloc()
  .label HEAP_TOP = $a000
  // The number of iterations performed during 16-bit CORDIC atan2 calculation
  .const CORDIC_ITERATIONS_16 = $f
  // = malloc(1000);
  // Screen containing angle to center
  .label SCREEN_FILL = $400
  // The number of buckets in our bucket sort
  .const NUM_BUCKETS = $100
  .const NUM_SQUARES = $30
  .label heap_head = $15
  .label SQUARES = $17
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label _3 = $37
    .label _11 = $39
    .label _16 = $3e
    .label _19 = $39
    .label _21 = $3e
    .label mix = 6
    .label dist = 2
    .label angle = 4
    .label i = 8
    .label bucket_size = $38
    .label bucket_idx = $a
    .label bucket_size1 = $3d
    .label bucket = $39
    .label sc = $3b
    .label bucket1 = $3e
    .label sc1 = $40
    .label _23 = $39
    .label _24 = $3e
    // init_dist_screen(SCREEN_DIST)
    // [5] call init_dist_screen 
    // [165] phi from main to init_dist_screen [phi:main->init_dist_screen]
    jsr init_dist_screen
    // [6] phi from main to main::@13 [phi:main->main::@13]
    // main::@13
    // init_angle_screen(SCREEN_ANGLE)
    // [7] call init_angle_screen 
    // [92] phi from main::@13 to init_angle_screen [phi:main::@13->init_angle_screen]
    jsr init_angle_screen
    // [8] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
    // [8] phi (word) main::i#2 = (word) 0 [phi:main::@13->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta i
    sta i+1
    // [8] phi (byte*) main::mix#2 = (const byte[$3e8]) SCREEN_MIX#0 [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta mix
    lda #>SCREEN_MIX
    sta mix+1
    // [8] phi (byte*) main::angle#2 = (const byte[$3e8]) SCREEN_ANGLE#0 [phi:main::@13->main::@1#2] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE
    sta angle
    lda #>SCREEN_ANGLE
    sta angle+1
    // [8] phi (byte*) main::dist#2 = (const byte[$3e8]) SCREEN_DIST#0 [phi:main::@13->main::@1#3] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST
    sta dist
    lda #>SCREEN_DIST
    sta dist+1
    // [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [8] phi (word) main::i#2 = (word) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [8] phi (byte*) main::mix#2 = (byte*) main::mix#1 [phi:main::@1->main::@1#1] -- register_copy 
    // [8] phi (byte*) main::angle#2 = (byte*) main::angle#1 [phi:main::@1->main::@1#2] -- register_copy 
    // [8] phi (byte*) main::dist#2 = (byte*) main::dist#1 [phi:main::@1->main::@1#3] -- register_copy 
    // main::@1
  b1:
    // (*dist++)*4
    // [9] (byte~) main::$3 ← *((byte*) main::dist#2) << (byte) 2 -- vbuz1=_deref_pbuz2_rol_2 
    ldy #0
    lda (dist),y
    asl
    asl
    sta _3
    // (*angle++)/2
    // [10] (byte~) main::$4 ← *((byte*) main::angle#2) >> (byte) 1 -- vbuaa=_deref_pbuz1_ror_1 
    lda (angle),y
    lsr
    // (*dist++)*4 + (*angle++)/2
    // [11] (byte~) main::$5 ← (byte~) main::$3 + (byte~) main::$4 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc _3
    // *mix++ = (*dist++)*4 + (*angle++)/2
    // [12] *((byte*) main::mix#2) ← (byte~) main::$5 -- _deref_pbuz1=vbuaa 
    sta (mix),y
    // *mix++ = (*dist++)*4 + (*angle++)/2;
    // [13] (byte*) main::mix#1 ← ++ (byte*) main::mix#2 -- pbuz1=_inc_pbuz1 
    inc mix
    bne !+
    inc mix+1
  !:
    // [14] (byte*) main::dist#1 ← ++ (byte*) main::dist#2 -- pbuz1=_inc_pbuz1 
    inc dist
    bne !+
    inc dist+1
  !:
    // [15] (byte*) main::angle#1 ← ++ (byte*) main::angle#2 -- pbuz1=_inc_pbuz1 
    inc angle
    bne !+
    inc angle+1
  !:
    // for( word i:0..999)
    // [16] (word) main::i#1 ← ++ (word) main::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
    // [17] if((word) main::i#1!=(word) $3e8) goto main::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda i+1
    cmp #>$3e8
    bne b1
    lda i
    cmp #<$3e8
    bne b1
    // [18] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // init_buckets(SCREEN_MIX)
    // [19] call init_buckets 
    // [50] phi from main::@2 to init_buckets [phi:main::@2->init_buckets]
    jsr init_buckets
    // [20] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [20] phi (byte) main::bucket_idx#9 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta bucket_idx
    // main::@3
    // main::@4
  b4:
    // while (*RASTER!=0xfe)
    // [21] if(*((const byte*) RASTER#0)!=(byte) $fe) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp RASTER
    bne b4
    // main::@5
  b5:
    // while (*RASTER!=0xff)
    // [22] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@5 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b5
    // main::@6
    // (*BORDERCOL)++;
    // [23] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // bucket_size = BUCKET_SIZES[bucket_idx]
    // [24] (byte) main::bucket_size#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#9) -- vbuz1=pbuc1_derefidx_vbuz2 
    // First clear the current bucket
    ldy bucket_idx
    lda BUCKET_SIZES,y
    sta bucket_size
    // if(bucket_size>0)
    // [25] if((byte) main::bucket_size#0<=(byte) 0) goto main::@8 -- vbuz1_le_0_then_la1 
    cmp #0
    beq b8
    // main::@7
    // (word)bucket_idx
    // [26] (word~) main::$11 ← (word)(byte) main::bucket_idx#9 -- vwuz1=_word_vbuz2 
    tya
    sta _11
    lda #0
    sta _11+1
    // bucket = BUCKETS[(word)bucket_idx]
    // [27] (word~) main::$19 ← (word~) main::$11 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _19
    rol _19+1
    // [28] (word**~) main::$23 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$19 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _23
    adc #<BUCKETS
    sta _23
    lda _23+1
    adc #>BUCKETS
    sta _23+1
    // [29] (word*) main::bucket#0 ← *((word**~) main::$23) -- pwuz1=_deref_pptz1 
    ldy #0
    lda (bucket),y
    pha
    iny
    lda (bucket),y
    sta bucket+1
    pla
    sta bucket
    // [30] phi from main::@7 to main::@9 [phi:main::@7->main::@9]
    // [30] phi (byte) main::i1#2 = (byte) 0 [phi:main::@7->main::@9#0] -- vbuxx=vbuc1 
    ldx #0
    // [30] phi from main::@9 to main::@9 [phi:main::@9->main::@9]
    // [30] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@9->main::@9#0] -- register_copy 
    // main::@9
  b9:
    // SCREEN_FILL+bucket[i]
    // [31] (byte~) main::$20 ← (byte) main::i1#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // sc = SCREEN_FILL+bucket[i]
    // [32] (byte*) main::sc#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket#0 + (byte~) main::$20) -- pbuz1=pbuc1_plus_pwuz2_derefidx_vbuaa 
    tay
    clc
    lda #<SCREEN_FILL
    adc (bucket),y
    sta sc
    iny
    lda #>SCREEN_FILL
    adc (bucket),y
    sta sc+1
    // *sc = ' '
    // [33] *((byte*) main::sc#0) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // for( byte i=0;i<bucket_size;i++)
    // [34] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [35] if((byte) main::i1#1<(byte) main::bucket_size#0) goto main::@9 -- vbuxx_lt_vbuz1_then_la1 
    cpx bucket_size
    bcc b9
    // main::@8
  b8:
    // bucket_idx++;
    // [36] (byte) main::bucket_idx#1 ← ++ (byte) main::bucket_idx#9 -- vbuz1=_inc_vbuz1 
    inc bucket_idx
    // bucket_size = BUCKET_SIZES[bucket_idx]
    // [37] (byte) main::bucket_size1#0 ← *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) main::bucket_idx#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot char in the bucket
    ldy bucket_idx
    lda BUCKET_SIZES,y
    sta bucket_size1
    // if(bucket_size>0)
    // [38] if((byte) main::bucket_size1#0<=(byte) 0) goto main::@11 -- vbuz1_le_0_then_la1 
    cmp #0
    beq b11
    // main::@10
    // (word)bucket_idx
    // [39] (word~) main::$16 ← (word)(byte) main::bucket_idx#1 -- vwuz1=_word_vbuz2 
    tya
    sta _16
    lda #0
    sta _16+1
    // bucket = BUCKETS[(word)bucket_idx]
    // [40] (word~) main::$21 ← (word~) main::$16 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _21
    rol _21+1
    // [41] (word**~) main::$24 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) main::$21 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _24
    adc #<BUCKETS
    sta _24
    lda _24+1
    adc #>BUCKETS
    sta _24+1
    // [42] (word*) main::bucket1#0 ← *((word**~) main::$24) -- pwuz1=_deref_pptz1 
    ldy #0
    lda (bucket1),y
    pha
    iny
    lda (bucket1),y
    sta bucket1+1
    pla
    sta bucket1
    // [43] phi from main::@10 to main::@12 [phi:main::@10->main::@12]
    // [43] phi (byte) main::i2#2 = (byte) 0 [phi:main::@10->main::@12#0] -- vbuxx=vbuc1 
    ldx #0
    // [43] phi from main::@12 to main::@12 [phi:main::@12->main::@12]
    // [43] phi (byte) main::i2#2 = (byte) main::i2#1 [phi:main::@12->main::@12#0] -- register_copy 
    // main::@12
  b12:
    // SCREEN_FILL+bucket[i]
    // [44] (byte~) main::$22 ← (byte) main::i2#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // sc = SCREEN_FILL+bucket[i]
    // [45] (byte*) main::sc1#0 ← (const byte*) SCREEN_FILL#0 + *((word*) main::bucket1#0 + (byte~) main::$22) -- pbuz1=pbuc1_plus_pwuz2_derefidx_vbuaa 
    tay
    clc
    lda #<SCREEN_FILL
    adc (bucket1),y
    sta sc1
    iny
    lda #>SCREEN_FILL
    adc (bucket1),y
    sta sc1+1
    // *sc = '*'
    // [46] *((byte*) main::sc1#0) ← (byte) '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (sc1),y
    // for( byte i=0;i<bucket_size;i++)
    // [47] (byte) main::i2#1 ← ++ (byte) main::i2#2 -- vbuxx=_inc_vbuxx 
    inx
    // [48] if((byte) main::i2#1<(byte) main::bucket_size1#0) goto main::@12 -- vbuxx_lt_vbuz1_then_la1 
    cpx bucket_size1
    bcc b12
    // main::@11
  b11:
    // (*BORDERCOL)--;
    // [49] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // [20] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
    // [20] phi (byte) main::bucket_idx#9 = (byte) main::bucket_idx#1 [phi:main::@11->main::@3#0] -- register_copy 
    jmp b4
}
  // init_buckets
// Initialize buckets containing indices of chars on the screen with specific distances to the center.
init_buckets: {
    .label _5 = $17
    .label _9 = $44
    .label _10 = $46
    .label _12 = $42
    .label _13 = $44
    .label dist = $b
    .label i1 = $d
    .label i2 = $f
    .label bucket = $44
    .label dist_3 = $11
    .label i4 = $13
    .label dist_5 = $11
    .label _15 = $17
    .label _16 = $42
    .label _17 = $44
    // [51] phi from init_buckets to init_buckets::@1 [phi:init_buckets->init_buckets::@1]
    // [51] phi (byte) init_buckets::i#2 = (byte) 0 [phi:init_buckets->init_buckets::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // Init bucket sizes to 0
    // [51] phi from init_buckets::@1 to init_buckets::@1 [phi:init_buckets::@1->init_buckets::@1]
    // [51] phi (byte) init_buckets::i#2 = (byte) init_buckets::i#1 [phi:init_buckets::@1->init_buckets::@1#0] -- register_copy 
    // init_buckets::@1
  b1:
    // BUCKET_SIZES[i]=0
    // [52] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (byte) init_buckets::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta BUCKET_SIZES,x
    // for(byte i:0..NUM_BUCKETS-1)
    // [53] (byte) init_buckets::i#1 ← ++ (byte) init_buckets::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [54] if((byte) init_buckets::i#1!=(byte) 0) goto init_buckets::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
    // [55] phi from init_buckets::@1 to init_buckets::@2 [phi:init_buckets::@1->init_buckets::@2]
    // [55] phi (word) init_buckets::i1#2 = (word) 0 [phi:init_buckets::@1->init_buckets::@2#0] -- vwuz1=vwuc1 
    sta i1
    sta i1+1
    // [55] phi (byte*) init_buckets::dist#4 = (const byte[$3e8]) SCREEN_MIX#0 [phi:init_buckets::@1->init_buckets::@2#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta dist
    lda #>SCREEN_MIX
    sta dist+1
    // [55] phi from init_buckets::@2 to init_buckets::@2 [phi:init_buckets::@2->init_buckets::@2]
    // [55] phi (word) init_buckets::i1#2 = (word) init_buckets::i1#1 [phi:init_buckets::@2->init_buckets::@2#0] -- register_copy 
    // [55] phi (byte*) init_buckets::dist#4 = (byte*) init_buckets::dist#1 [phi:init_buckets::@2->init_buckets::@2#1] -- register_copy 
    // init_buckets::@2
  b2:
    // BUCKET_SIZES[*dist]++;
    // [56] *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + *((byte*) init_buckets::dist#4)) -- pbuc1_derefidx__deref_pbuz1=_inc_pbuc1_derefidx__deref_pbuz1 
    ldy #0
    lda (dist),y
    tax
    inc BUCKET_SIZES,x
    // dist++;
    // [57] (byte*) init_buckets::dist#1 ← ++ (byte*) init_buckets::dist#4 -- pbuz1=_inc_pbuz1 
    inc dist
    bne !+
    inc dist+1
  !:
    // for( word i:0..999)
    // [58] (word) init_buckets::i1#1 ← ++ (word) init_buckets::i1#2 -- vwuz1=_inc_vwuz1 
    inc i1
    bne !+
    inc i1+1
  !:
    // [59] if((word) init_buckets::i1#1!=(word) $3e8) goto init_buckets::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda i1+1
    cmp #>$3e8
    bne b2
    lda i1
    cmp #<$3e8
    bne b2
    // [60] phi from init_buckets::@2 to init_buckets::@3 [phi:init_buckets::@2->init_buckets::@3]
    // [60] phi (word) init_buckets::i2#2 = (word) 0 [phi:init_buckets::@2->init_buckets::@3#0] -- vwuz1=vwuc1 
    lda #<0
    sta i2
    sta i2+1
  // Allocate the buckets
    // [60] phi from init_buckets::@6 to init_buckets::@3 [phi:init_buckets::@6->init_buckets::@3]
    // [60] phi (word) init_buckets::i2#2 = (word) init_buckets::i2#1 [phi:init_buckets::@6->init_buckets::@3#0] -- register_copy 
    // init_buckets::@3
  b3:
    // malloc(BUCKET_SIZES[i]*sizeof(byte*))
    // [61] (byte*~) init_buckets::$15 ← (const byte[NUM_BUCKETS#0]) BUCKET_SIZES#0 + (word) init_buckets::i2#2 -- pbuz1=pbuc1_plus_vwuz2 
    lda i2
    clc
    adc #<BUCKET_SIZES
    sta _15
    lda i2+1
    adc #>BUCKET_SIZES
    sta _15+1
    // [62] (word) malloc::size#1 ← *((byte*~) init_buckets::$15) << (byte) 1 -- vwuz1=_deref_pbuz1_rol_1 
    ldy #0
    lda (malloc.size),y
    asl
    sta malloc.size
    tya
    rol
    sta malloc.size+1
    // [63] call malloc 
    // [88] phi from init_buckets::@3 to malloc [phi:init_buckets::@3->malloc]
    // [88] phi (word) malloc::size#2 = (word) malloc::size#1 [phi:init_buckets::@3->malloc#0] -- register_copy 
    // [88] phi (byte*) heap_head#13 = (byte*) heap_head#1 [phi:init_buckets::@3->malloc#1] -- register_copy 
    jsr malloc
    // init_buckets::@6
    // malloc(BUCKET_SIZES[i]*sizeof(byte*))
    // [64] (void*~) init_buckets::$5 ← (void*)(byte*) malloc::mem#0
    // BUCKETS[i] = malloc(BUCKET_SIZES[i]*sizeof(byte*))
    // [65] (word~) init_buckets::$12 ← (word) init_buckets::i2#2 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda i2
    asl
    sta _12
    lda i2+1
    rol
    sta _12+1
    // [66] (word**~) init_buckets::$16 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$12 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _16
    adc #<BUCKETS
    sta _16
    lda _16+1
    adc #>BUCKETS
    sta _16+1
    // [67] *((word**~) init_buckets::$16) ← (word*)(void*~) init_buckets::$5 -- _deref_pptz1=pwuz2 
    ldy #0
    lda _5
    sta (_16),y
    iny
    lda _5+1
    sta (_16),y
    // for( word i:0..NUM_BUCKETS-1)
    // [68] (word) init_buckets::i2#1 ← ++ (word) init_buckets::i2#2 -- vwuz1=_inc_vwuz1 
    inc i2
    bne !+
    inc i2+1
  !:
    // [69] if((word) init_buckets::i2#1!=(const word) NUM_BUCKETS#0-(byte) 1+(byte) 1) goto init_buckets::@3 -- vwuz1_neq_vwuc1_then_la1 
    lda i2+1
    cmp #>NUM_BUCKETS-1+1
    bne b3
    lda i2
    cmp #<NUM_BUCKETS-1+1
    bne b3
    // [70] phi from init_buckets::@6 to init_buckets::@4 [phi:init_buckets::@6->init_buckets::@4]
    // [70] phi (byte) init_buckets::i3#2 = (byte) 0 [phi:init_buckets::@6->init_buckets::@4#0] -- vbuxx=vbuc1 
    ldx #0
  // Iterate all distances and fill the buckets with indices into the screens
    // [70] phi from init_buckets::@4 to init_buckets::@4 [phi:init_buckets::@4->init_buckets::@4]
    // [70] phi (byte) init_buckets::i3#2 = (byte) init_buckets::i3#1 [phi:init_buckets::@4->init_buckets::@4#0] -- register_copy 
    // init_buckets::@4
  b4:
    // BUCKET_IDX[i]=0
    // [71] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::i3#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta BUCKET_IDX,x
    // for(byte i:0..NUM_BUCKETS-1)
    // [72] (byte) init_buckets::i3#1 ← ++ (byte) init_buckets::i3#2 -- vbuxx=_inc_vbuxx 
    inx
    // [73] if((byte) init_buckets::i3#1!=(byte) 0) goto init_buckets::@4 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b4
    // [74] phi from init_buckets::@4 to init_buckets::@5 [phi:init_buckets::@4->init_buckets::@5]
    // [74] phi (word) init_buckets::i4#2 = (word) 0 [phi:init_buckets::@4->init_buckets::@5#0] -- vwuz1=vwuc1 
    sta i4
    sta i4+1
    // [74] phi (byte*) init_buckets::dist#5 = (const byte[$3e8]) SCREEN_MIX#0 [phi:init_buckets::@4->init_buckets::@5#1] -- pbuz1=pbuc1 
    lda #<SCREEN_MIX
    sta dist_5
    lda #>SCREEN_MIX
    sta dist_5+1
    // [74] phi from init_buckets::@5 to init_buckets::@5 [phi:init_buckets::@5->init_buckets::@5]
    // [74] phi (word) init_buckets::i4#2 = (word) init_buckets::i4#1 [phi:init_buckets::@5->init_buckets::@5#0] -- register_copy 
    // [74] phi (byte*) init_buckets::dist#5 = (byte*) init_buckets::dist#3 [phi:init_buckets::@5->init_buckets::@5#1] -- register_copy 
    // init_buckets::@5
  b5:
    // distance = *dist
    // [75] (byte) init_buckets::distance#0 ← *((byte*) init_buckets::dist#5) -- vbuxx=_deref_pbuz1 
    ldy #0
    lda (dist_5),y
    tax
    // (word)distance
    // [76] (word~) init_buckets::$9 ← (word)(byte) init_buckets::distance#0 -- vwuz1=_word_vbuxx 
    txa
    sta _9
    tya
    sta _9+1
    // bucket = BUCKETS[(word)distance]
    // [77] (word~) init_buckets::$13 ← (word~) init_buckets::$9 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl _13
    rol _13+1
    // [78] (word**~) init_buckets::$17 ← (const word*[NUM_BUCKETS#0]) BUCKETS#0 + (word~) init_buckets::$13 -- pptz1=pptc1_plus_vwuz1 
    clc
    lda _17
    adc #<BUCKETS
    sta _17
    lda _17+1
    adc #>BUCKETS
    sta _17+1
    // [79] (word*) init_buckets::bucket#0 ← *((word**~) init_buckets::$17) -- pwuz1=_deref_pptz1 
    lda (bucket),y
    pha
    iny
    lda (bucket),y
    sta bucket+1
    pla
    sta bucket
    // dist-screen
    // [80] (word~) init_buckets::$10 ← (byte*) init_buckets::dist#5 - (const byte[$3e8]) SCREEN_MIX#0 -- vwuz1=pbuz2_minus_pbuc1 
    lda dist_5
    sec
    sbc #<SCREEN_MIX
    sta _10
    lda dist_5+1
    sbc #>SCREEN_MIX
    sta _10+1
    // bucket[BUCKET_IDX[distance]] = dist-screen
    // [81] (byte~) init_buckets::$14 ← *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) << (byte) 1 -- vbuaa=pbuc1_derefidx_vbuxx_rol_1 
    lda BUCKET_IDX,x
    asl
    // [82] *((word*) init_buckets::bucket#0 + (byte~) init_buckets::$14) ← (word~) init_buckets::$10 -- pwuz1_derefidx_vbuaa=vwuz2 
    tay
    lda _10
    sta (bucket),y
    iny
    lda _10+1
    sta (bucket),y
    // BUCKET_IDX[distance]++;
    // [83] *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) ← ++ *((const byte[NUM_BUCKETS#0]) BUCKET_IDX#0 + (byte) init_buckets::distance#0) -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc BUCKET_IDX,x
    // *dist++;
    // [84] (byte*) init_buckets::dist#3 ← ++ (byte*) init_buckets::dist#5 -- pbuz1=_inc_pbuz1 
    inc dist_3
    bne !+
    inc dist_3+1
  !:
    // for(word i:0..999)
    // [85] (word) init_buckets::i4#1 ← ++ (word) init_buckets::i4#2 -- vwuz1=_inc_vwuz1 
    inc i4
    bne !+
    inc i4+1
  !:
    // [86] if((word) init_buckets::i4#1!=(word) $3e8) goto init_buckets::@5 -- vwuz1_neq_vwuc1_then_la1 
    lda i4+1
    cmp #>$3e8
    bne b5
    lda i4
    cmp #<$3e8
    bne b5
    // init_buckets::@return
    // }
    // [87] return 
    rts
}
  // malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
// malloc(word zeropage($17) size)
malloc: {
    .label mem = $17
    .label size = $17
    // mem = heap_head-size
    // [89] (byte*) malloc::mem#0 ← (byte*) heap_head#13 - (word) malloc::size#2 -- pbuz1=pbuz2_minus_vwuz1 
    lda heap_head
    sec
    sbc mem
    sta mem
    lda heap_head+1
    sbc mem+1
    sta mem+1
    // heap_head = mem
    // [90] (byte*) heap_head#1 ← (byte*) malloc::mem#0 -- pbuz1=pbuz2 
    lda mem
    sta heap_head
    lda mem+1
    sta heap_head+1
    // malloc::@return
    // }
    // [91] return 
    rts
}
  // init_angle_screen
// Populates 1000 bytes (a screen) with values representing the angle to the center.
// Utilizes symmetry around the center
init_angle_screen: {
    .label _10 = $24
    .label xw = $48
    .label yw = $4a
    .label angle_w = $24
    .label ang_w = $4c
    .label x = $1e
    .label xb = $1f
    .label screen_topline = $1c
    .label screen_bottomline = $1a
    .label y = $19
    // [93] phi from init_angle_screen to init_angle_screen::@1 [phi:init_angle_screen->init_angle_screen::@1]
    // [93] phi (byte*) init_angle_screen::screen_topline#5 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c [phi:init_angle_screen->init_angle_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE+$28*$c
    sta screen_topline
    lda #>SCREEN_ANGLE+$28*$c
    sta screen_topline+1
    // [93] phi (byte*) init_angle_screen::screen_bottomline#5 = (const byte[$3e8]) SCREEN_ANGLE#0+(word)(number) $28*(number) $c [phi:init_angle_screen->init_angle_screen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_ANGLE+$28*$c
    sta screen_bottomline
    lda #>SCREEN_ANGLE+$28*$c
    sta screen_bottomline+1
    // [93] phi (byte) init_angle_screen::y#4 = (byte) 0 [phi:init_angle_screen->init_angle_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    // [93] phi from init_angle_screen::@3 to init_angle_screen::@1 [phi:init_angle_screen::@3->init_angle_screen::@1]
    // [93] phi (byte*) init_angle_screen::screen_topline#5 = (byte*) init_angle_screen::screen_topline#1 [phi:init_angle_screen::@3->init_angle_screen::@1#0] -- register_copy 
    // [93] phi (byte*) init_angle_screen::screen_bottomline#5 = (byte*) init_angle_screen::screen_bottomline#1 [phi:init_angle_screen::@3->init_angle_screen::@1#1] -- register_copy 
    // [93] phi (byte) init_angle_screen::y#4 = (byte) init_angle_screen::y#1 [phi:init_angle_screen::@3->init_angle_screen::@1#2] -- register_copy 
    // init_angle_screen::@1
  b1:
    // [94] phi from init_angle_screen::@1 to init_angle_screen::@2 [phi:init_angle_screen::@1->init_angle_screen::@2]
    // [94] phi (byte) init_angle_screen::xb#2 = (byte) $27 [phi:init_angle_screen::@1->init_angle_screen::@2#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
    // [94] phi (byte) init_angle_screen::x#2 = (byte) 0 [phi:init_angle_screen::@1->init_angle_screen::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    // [94] phi from init_angle_screen::@4 to init_angle_screen::@2 [phi:init_angle_screen::@4->init_angle_screen::@2]
    // [94] phi (byte) init_angle_screen::xb#2 = (byte) init_angle_screen::xb#1 [phi:init_angle_screen::@4->init_angle_screen::@2#0] -- register_copy 
    // [94] phi (byte) init_angle_screen::x#2 = (byte) init_angle_screen::x#1 [phi:init_angle_screen::@4->init_angle_screen::@2#1] -- register_copy 
    // init_angle_screen::@2
  b2:
    // x*2
    // [95] (byte~) init_angle_screen::$2 ← (byte) init_angle_screen::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
    // 39-x*2
    // [96] (byte~) init_angle_screen::$3 ← (byte) $27 - (byte~) init_angle_screen::$2 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$27+1
    // (word){ 39-x*2, 0 }
    // [97] (word) init_angle_screen::xw#0 ← (byte~) init_angle_screen::$3 w= (byte) 0 -- vwuz1=vbuaa_word_vbuc1 
    ldy #0
    sta xw+1
    sty xw
    // y*2
    // [98] (byte~) init_angle_screen::$6 ← (byte) init_angle_screen::y#4 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
    // (word){ y*2, 0 }
    // [99] (word) init_angle_screen::yw#0 ← (byte~) init_angle_screen::$6 w= (byte) 0 -- vwuz1=vbuaa_word_vbuc1 
    sta yw+1
    sty yw
    // atan2_16(xw, yw)
    // [100] (signed word) atan2_16::x#0 ← (signed word)(word) init_angle_screen::xw#0
    // [101] (signed word) atan2_16::y#0 ← (signed word)(word) init_angle_screen::yw#0
    // [102] call atan2_16 
    jsr atan2_16
    // [103] (word) atan2_16::return#2 ← (word) atan2_16::return#0
    // init_angle_screen::@4
    // angle_w = atan2_16(xw, yw)
    // [104] (word) init_angle_screen::angle_w#0 ← (word) atan2_16::return#2
    // angle_w+0x0080
    // [105] (word~) init_angle_screen::$10 ← (word) init_angle_screen::angle_w#0 + (byte) $80 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$80
    clc
    adc _10
    sta _10
    bcc !+
    inc _10+1
  !:
    // ang_w = >(angle_w+0x0080)
    // [106] (byte) init_angle_screen::ang_w#0 ← > (word~) init_angle_screen::$10 -- vbuz1=_hi_vwuz2 
    lda _10+1
    sta ang_w
    // screen_bottomline[xb] = ang_w
    // [107] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::xb#2) ← (byte) init_angle_screen::ang_w#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    ldy xb
    sta (screen_bottomline),y
    // -ang_w
    // [108] (byte~) init_angle_screen::$12 ← - (byte) init_angle_screen::ang_w#0 -- vbuaa=_neg_vbuz1 
    eor #$ff
    clc
    adc #1
    // screen_topline[xb] = -ang_w
    // [109] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::xb#2) ← (byte~) init_angle_screen::$12 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (screen_topline),y
    // 0x80+ang_w
    // [110] (byte~) init_angle_screen::$13 ← (byte) $80 + (byte) init_angle_screen::ang_w#0 -- vbuaa=vbuc1_plus_vbuz1 
    lda #$80
    clc
    adc ang_w
    // screen_topline[x] = 0x80+ang_w
    // [111] *((byte*) init_angle_screen::screen_topline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$13 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_topline),y
    // 0x80-ang_w
    // [112] (byte~) init_angle_screen::$14 ← (byte) $80 - (byte) init_angle_screen::ang_w#0 -- vbuaa=vbuc1_minus_vbuz1 
    lda #$80
    sec
    sbc ang_w
    // screen_bottomline[x] = 0x80-ang_w
    // [113] *((byte*) init_angle_screen::screen_bottomline#5 + (byte) init_angle_screen::x#2) ← (byte~) init_angle_screen::$14 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (screen_bottomline),y
    // for( byte x=0,xb=39; x<=19; x++, xb--)
    // [114] (byte) init_angle_screen::x#1 ← ++ (byte) init_angle_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [115] (byte) init_angle_screen::xb#1 ← -- (byte) init_angle_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
    // [116] if((byte) init_angle_screen::x#1<(byte) $13+(byte) 1) goto init_angle_screen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b2
    // init_angle_screen::@3
    // screen_topline -= 40
    // [117] (byte*) init_angle_screen::screen_topline#1 ← (byte*) init_angle_screen::screen_topline#5 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_topline
    sec
    sbc #<$28
    sta screen_topline
    lda screen_topline+1
    sbc #>$28
    sta screen_topline+1
    // screen_bottomline += 40
    // [118] (byte*) init_angle_screen::screen_bottomline#1 ← (byte*) init_angle_screen::screen_bottomline#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_bottomline
    sta screen_bottomline
    bcc !+
    inc screen_bottomline+1
  !:
    // for(byte y: 0..12)
    // [119] (byte) init_angle_screen::y#1 ← ++ (byte) init_angle_screen::y#4 -- vbuz1=_inc_vbuz1 
    inc y
    // [120] if((byte) init_angle_screen::y#1!=(byte) $d) goto init_angle_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1
    // init_angle_screen::@return
    // }
    // [121] return 
    rts
}
  // atan2_16
// Find the atan2(x, y) - which is the angle of the line from (0,0) to (x,y)
// Finding the angle requires a binary search using CORDIC_ITERATIONS_16
// Returns the angle in hex-degrees (0=0, 0x8000=PI, 0x10000=2*PI)
// atan2_16(signed word zeropage($48) x, signed word zeropage($4a) y)
atan2_16: {
    .label _2 = $20
    .label _7 = $22
    .label yi = $20
    .label xi = $22
    .label angle = $24
    .label xd = $28
    .label yd = $26
    .label return = $24
    .label x = $48
    .label y = $4a
    // (y>=0)?y:-y
    // [122] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@1 -- vwsz1_ge_0_then_la1 
    lda y+1
    bmi !b1+
    jmp b1
  !b1:
    // atan2_16::@2
    // [123] (signed word~) atan2_16::$2 ← - (signed word) atan2_16::y#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc y
    sta _2
    lda #0
    sbc y+1
    sta _2+1
    // [124] phi from atan2_16::@1 atan2_16::@2 to atan2_16::@3 [phi:atan2_16::@1/atan2_16::@2->atan2_16::@3]
    // [124] phi (signed word) atan2_16::yi#0 = (signed word~) atan2_16::yi#16 [phi:atan2_16::@1/atan2_16::@2->atan2_16::@3#0] -- register_copy 
    // atan2_16::@3
  b3:
    // (x>=0)?x:-x
    // [125] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@4 -- vwsz1_ge_0_then_la1 
    lda x+1
    bmi !b4+
    jmp b4
  !b4:
    // atan2_16::@5
    // [126] (signed word~) atan2_16::$7 ← - (signed word) atan2_16::x#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc x
    sta _7
    lda #0
    sbc x+1
    sta _7+1
    // [127] phi from atan2_16::@4 atan2_16::@5 to atan2_16::@6 [phi:atan2_16::@4/atan2_16::@5->atan2_16::@6]
    // [127] phi (signed word) atan2_16::xi#0 = (signed word~) atan2_16::xi#13 [phi:atan2_16::@4/atan2_16::@5->atan2_16::@6#0] -- register_copy 
    // atan2_16::@6
  b6:
    // [128] phi from atan2_16::@6 to atan2_16::@10 [phi:atan2_16::@6->atan2_16::@10]
    // [128] phi (word) atan2_16::angle#12 = (byte) 0 [phi:atan2_16::@6->atan2_16::@10#0] -- vwuz1=vbuc1 
    lda #0
    sta angle
    sta angle+1
    // [128] phi (byte) atan2_16::i#2 = (byte) 0 [phi:atan2_16::@6->atan2_16::@10#1] -- vbuxx=vbuc1 
    tax
    // [128] phi (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#0 [phi:atan2_16::@6->atan2_16::@10#2] -- register_copy 
    // [128] phi (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#0 [phi:atan2_16::@6->atan2_16::@10#3] -- register_copy 
    // atan2_16::@10
  b10:
    // if(yi==0)
    // [129] if((signed word) atan2_16::yi#3!=(signed byte) 0) goto atan2_16::@11 -- vwsz1_neq_0_then_la1 
    lda yi+1
    bne b11
    lda yi
    bne b11
    // [130] phi from atan2_16::@10 atan2_16::@19 to atan2_16::@12 [phi:atan2_16::@10/atan2_16::@19->atan2_16::@12]
    // [130] phi (word) atan2_16::angle#6 = (word) atan2_16::angle#12 [phi:atan2_16::@10/atan2_16::@19->atan2_16::@12#0] -- register_copy 
    // atan2_16::@12
  b12:
    // angle /=2
    // [131] (word) atan2_16::angle#1 ← (word) atan2_16::angle#6 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr angle+1
    ror angle
    // if(x<0)
    // [132] if((signed word) atan2_16::x#0>=(signed byte) 0) goto atan2_16::@7 -- vwsz1_ge_0_then_la1 
    lda x+1
    bpl b7
    // atan2_16::@21
    // angle = 0x8000-angle
    // [133] (word) atan2_16::angle#4 ← (word) $8000 - (word) atan2_16::angle#1 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<$8000
    sbc angle
    sta angle
    lda #>$8000
    sbc angle+1
    sta angle+1
    // [134] phi from atan2_16::@12 atan2_16::@21 to atan2_16::@7 [phi:atan2_16::@12/atan2_16::@21->atan2_16::@7]
    // [134] phi (word) atan2_16::angle#11 = (word) atan2_16::angle#1 [phi:atan2_16::@12/atan2_16::@21->atan2_16::@7#0] -- register_copy 
    // atan2_16::@7
  b7:
    // if(y<0)
    // [135] if((signed word) atan2_16::y#0>=(signed byte) 0) goto atan2_16::@8 -- vwsz1_ge_0_then_la1 
    lda y+1
    bpl b8
    // atan2_16::@9
    // angle = -angle
    // [136] (word) atan2_16::angle#5 ← - (word) atan2_16::angle#11 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc angle
    sta angle
    lda #0
    sbc angle+1
    sta angle+1
    // [137] phi from atan2_16::@7 atan2_16::@9 to atan2_16::@8 [phi:atan2_16::@7/atan2_16::@9->atan2_16::@8]
    // [137] phi (word) atan2_16::return#0 = (word) atan2_16::angle#11 [phi:atan2_16::@7/atan2_16::@9->atan2_16::@8#0] -- register_copy 
    // atan2_16::@8
  b8:
    // atan2_16::@return
    // }
    // [138] return 
    rts
    // atan2_16::@11
  b11:
    // [139] (byte~) atan2_16::shift#5 ← (byte) atan2_16::i#2 -- vbuyy=vbuxx 
    txa
    tay
    // [140] (signed word~) atan2_16::xd#10 ← (signed word) atan2_16::xi#3 -- vwsz1=vwsz2 
    lda xi
    sta xd
    lda xi+1
    sta xd+1
    // [141] (signed word~) atan2_16::yd#10 ← (signed word) atan2_16::yi#3 -- vwsz1=vwsz2 
    lda yi
    sta yd
    lda yi+1
    sta yd+1
    // [142] phi from atan2_16::@11 atan2_16::@14 to atan2_16::@13 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13]
    // [142] phi (signed word) atan2_16::yd#3 = (signed word~) atan2_16::yd#10 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#0] -- register_copy 
    // [142] phi (signed word) atan2_16::xd#3 = (signed word~) atan2_16::xd#10 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#1] -- register_copy 
    // [142] phi (byte) atan2_16::shift#2 = (byte~) atan2_16::shift#5 [phi:atan2_16::@11/atan2_16::@14->atan2_16::@13#2] -- register_copy 
    // atan2_16::@13
  b13:
    // while(shift>=2)
    // [143] if((byte) atan2_16::shift#2>=(byte) 2) goto atan2_16::@14 -- vbuyy_ge_vbuc1_then_la1 
    cpy #2
    bcs b14
    // atan2_16::@15
    // if(shift)
    // [144] if((byte) 0==(byte) atan2_16::shift#2) goto atan2_16::@17 -- vbuc1_eq_vbuyy_then_la1 
    cpy #0
    beq b17
    // atan2_16::@16
    // xd >>= 1
    // [145] (signed word) atan2_16::xd#2 ← (signed word) atan2_16::xd#3 >> (signed byte) 1 -- vwsz1=vwsz1_ror_1 
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    // yd >>= 1
    // [146] (signed word) atan2_16::yd#2 ← (signed word) atan2_16::yd#3 >> (signed byte) 1 -- vwsz1=vwsz1_ror_1 
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    // [147] phi from atan2_16::@15 atan2_16::@16 to atan2_16::@17 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17]
    // [147] phi (signed word) atan2_16::xd#5 = (signed word) atan2_16::xd#3 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17#0] -- register_copy 
    // [147] phi (signed word) atan2_16::yd#5 = (signed word) atan2_16::yd#3 [phi:atan2_16::@15/atan2_16::@16->atan2_16::@17#1] -- register_copy 
    // atan2_16::@17
  b17:
    // if(yi>=0)
    // [148] if((signed word) atan2_16::yi#3>=(signed byte) 0) goto atan2_16::@18 -- vwsz1_ge_0_then_la1 
    lda yi+1
    bpl b18
    // atan2_16::@20
    // xi -= yd
    // [149] (signed word) atan2_16::xi#2 ← (signed word) atan2_16::xi#3 - (signed word) atan2_16::yd#5 -- vwsz1=vwsz1_minus_vwsz2 
    lda xi
    sec
    sbc yd
    sta xi
    lda xi+1
    sbc yd+1
    sta xi+1
    // yi += xd
    // [150] (signed word) atan2_16::yi#2 ← (signed word) atan2_16::yi#3 + (signed word) atan2_16::xd#5 -- vwsz1=vwsz1_plus_vwsz2 
    lda yi
    clc
    adc xd
    sta yi
    lda yi+1
    adc xd+1
    sta yi+1
    // angle -= CORDIC_ATAN2_ANGLES_16[i]
    // [151] (byte~) atan2_16::$24 ← (byte) atan2_16::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [152] (word) atan2_16::angle#3 ← (word) atan2_16::angle#12 - *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$24) -- vwuz1=vwuz1_minus_pwuc1_derefidx_vbuaa 
    tay
    sec
    lda angle
    sbc CORDIC_ATAN2_ANGLES_16,y
    sta angle
    lda angle+1
    sbc CORDIC_ATAN2_ANGLES_16+1,y
    sta angle+1
    // [153] phi from atan2_16::@18 atan2_16::@20 to atan2_16::@19 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19]
    // [153] phi (signed word) atan2_16::xi#8 = (signed word) atan2_16::xi#1 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#0] -- register_copy 
    // [153] phi (word) atan2_16::angle#13 = (word) atan2_16::angle#2 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#1] -- register_copy 
    // [153] phi (signed word) atan2_16::yi#8 = (signed word) atan2_16::yi#1 [phi:atan2_16::@18/atan2_16::@20->atan2_16::@19#2] -- register_copy 
    // atan2_16::@19
  b19:
    // for( byte i: 0..CORDIC_ITERATIONS_16-1)
    // [154] (byte) atan2_16::i#1 ← ++ (byte) atan2_16::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [155] if((byte) atan2_16::i#1==(const byte) CORDIC_ITERATIONS_16#0-(byte) 1+(byte) 1) goto atan2_16::@12 -- vbuxx_eq_vbuc1_then_la1 
    cpx #CORDIC_ITERATIONS_16-1+1
    bne !b12+
    jmp b12
  !b12:
    // [128] phi from atan2_16::@19 to atan2_16::@10 [phi:atan2_16::@19->atan2_16::@10]
    // [128] phi (word) atan2_16::angle#12 = (word) atan2_16::angle#13 [phi:atan2_16::@19->atan2_16::@10#0] -- register_copy 
    // [128] phi (byte) atan2_16::i#2 = (byte) atan2_16::i#1 [phi:atan2_16::@19->atan2_16::@10#1] -- register_copy 
    // [128] phi (signed word) atan2_16::xi#3 = (signed word) atan2_16::xi#8 [phi:atan2_16::@19->atan2_16::@10#2] -- register_copy 
    // [128] phi (signed word) atan2_16::yi#3 = (signed word) atan2_16::yi#8 [phi:atan2_16::@19->atan2_16::@10#3] -- register_copy 
    jmp b10
    // atan2_16::@18
  b18:
    // xi += yd
    // [156] (signed word) atan2_16::xi#1 ← (signed word) atan2_16::xi#3 + (signed word) atan2_16::yd#5 -- vwsz1=vwsz1_plus_vwsz2 
    lda xi
    clc
    adc yd
    sta xi
    lda xi+1
    adc yd+1
    sta xi+1
    // yi -= xd
    // [157] (signed word) atan2_16::yi#1 ← (signed word) atan2_16::yi#3 - (signed word) atan2_16::xd#5 -- vwsz1=vwsz1_minus_vwsz2 
    lda yi
    sec
    sbc xd
    sta yi
    lda yi+1
    sbc xd+1
    sta yi+1
    // angle += CORDIC_ATAN2_ANGLES_16[i]
    // [158] (byte~) atan2_16::$23 ← (byte) atan2_16::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [159] (word) atan2_16::angle#2 ← (word) atan2_16::angle#12 + *((const word[CORDIC_ITERATIONS_16#0]) CORDIC_ATAN2_ANGLES_16#0 + (byte~) atan2_16::$23) -- vwuz1=vwuz1_plus_pwuc1_derefidx_vbuaa 
    tay
    clc
    lda angle
    adc CORDIC_ATAN2_ANGLES_16,y
    sta angle
    lda angle+1
    adc CORDIC_ATAN2_ANGLES_16+1,y
    sta angle+1
    jmp b19
    // atan2_16::@14
  b14:
    // xd >>= 2
    // [160] (signed word) atan2_16::xd#1 ← (signed word) atan2_16::xd#3 >> (signed byte) 2 -- vwsz1=vwsz1_ror_2 
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    lda xd+1
    cmp #$80
    ror xd+1
    ror xd
    // yd >>= 2
    // [161] (signed word) atan2_16::yd#1 ← (signed word) atan2_16::yd#3 >> (signed byte) 2 -- vwsz1=vwsz1_ror_2 
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    lda yd+1
    cmp #$80
    ror yd+1
    ror yd
    // shift -=2
    // [162] (byte) atan2_16::shift#1 ← (byte) atan2_16::shift#2 - (byte) 2 -- vbuyy=vbuyy_minus_2 
    dey
    dey
    jmp b13
    // atan2_16::@4
  b4:
    // [163] (signed word~) atan2_16::xi#13 ← (signed word) atan2_16::x#0 -- vwsz1=vwsz2 
    lda x
    sta xi
    lda x+1
    sta xi+1
    jmp b6
    // atan2_16::@1
  b1:
    // [164] (signed word~) atan2_16::yi#16 ← (signed word) atan2_16::y#0 -- vwsz1=vwsz2 
    lda y
    sta yi
    lda y+1
    sta yi+1
    jmp b3
}
  // init_dist_screen
// Populates 1000 bytes (a screen) with values representing the distance to the center.
// The actual value stored is distance*2 to increase precision
// Utilizes symmetry around the center
init_dist_screen: {
    .label yds = $4d
    .label xds = $4f
    .label ds = $4f
    .label x = $2f
    .label xb = $30
    .label screen_topline = $2b
    .label screen_bottomline = $2d
    .label y = $2a
    // init_squares()
    // [166] call init_squares 
    // [236] phi from init_dist_screen to init_squares [phi:init_dist_screen->init_squares]
    jsr init_squares
    // [167] phi from init_dist_screen to init_dist_screen::@1 [phi:init_dist_screen->init_dist_screen::@1]
    // [167] phi (byte*) init_dist_screen::screen_bottomline#10 = (const byte[$3e8]) SCREEN_DIST#0+(word)(number) $28*(number) $18 [phi:init_dist_screen->init_dist_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST+$28*$18
    sta screen_bottomline
    lda #>SCREEN_DIST+$28*$18
    sta screen_bottomline+1
    // [167] phi (byte*) init_dist_screen::screen_topline#10 = (const byte[$3e8]) SCREEN_DIST#0 [phi:init_dist_screen->init_dist_screen::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN_DIST
    sta screen_topline
    lda #>SCREEN_DIST
    sta screen_topline+1
    // [167] phi (byte) init_dist_screen::y#10 = (byte) 0 [phi:init_dist_screen->init_dist_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    // [167] phi from init_dist_screen::@9 to init_dist_screen::@1 [phi:init_dist_screen::@9->init_dist_screen::@1]
    // [167] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#0] -- register_copy 
    // [167] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#1] -- register_copy 
    // [167] phi (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#1 [phi:init_dist_screen::@9->init_dist_screen::@1#2] -- register_copy 
    // init_dist_screen::@1
  b1:
    // y2 = y*2
    // [168] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
    // (y2>=24)?(y2-24):(24-y2)
    // [169] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$18
    bcs b2
    // init_dist_screen::@3
    // [170] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$18+1
    // [171] phi from init_dist_screen::@2 init_dist_screen::@3 to init_dist_screen::@4 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4]
    // [171] phi (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$7 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4#0] -- register_copy 
    // init_dist_screen::@4
  b4:
    // sqr(yd)
    // [172] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
    // [173] call sqr 
    // [232] phi from init_dist_screen::@4 to sqr [phi:init_dist_screen::@4->sqr]
    // [232] phi (byte) sqr::val#2 = (byte) sqr::val#0 [phi:init_dist_screen::@4->sqr#0] -- register_copy 
    jsr sqr
    // sqr(yd)
    // [174] (word) sqr::return#2 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_2
    lda sqr.return+1
    sta sqr.return_2+1
    // init_dist_screen::@10
    // yds = sqr(yd)
    // [175] (word) init_dist_screen::yds#0 ← (word) sqr::return#2
    // [176] phi from init_dist_screen::@10 to init_dist_screen::@5 [phi:init_dist_screen::@10->init_dist_screen::@5]
    // [176] phi (byte) init_dist_screen::xb#2 = (byte) $27 [phi:init_dist_screen::@10->init_dist_screen::@5#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
    // [176] phi (byte) init_dist_screen::x#2 = (byte) 0 [phi:init_dist_screen::@10->init_dist_screen::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    // [176] phi from init_dist_screen::@12 to init_dist_screen::@5 [phi:init_dist_screen::@12->init_dist_screen::@5]
    // [176] phi (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#1 [phi:init_dist_screen::@12->init_dist_screen::@5#0] -- register_copy 
    // [176] phi (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#1 [phi:init_dist_screen::@12->init_dist_screen::@5#1] -- register_copy 
    // init_dist_screen::@5
  b5:
    // x2 = x*2
    // [177] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
    // (x2>=39)?(x2-39):(39-x2)
    // [178] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$27
    bcs b6
    // init_dist_screen::@7
    // [179] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$27+1
    // [180] phi from init_dist_screen::@6 init_dist_screen::@7 to init_dist_screen::@8 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8]
    // [180] phi (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$15 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8#0] -- register_copy 
    // init_dist_screen::@8
  b8:
    // sqr(xd)
    // [181] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
    // [182] call sqr 
    // [232] phi from init_dist_screen::@8 to sqr [phi:init_dist_screen::@8->sqr]
    // [232] phi (byte) sqr::val#2 = (byte) sqr::val#1 [phi:init_dist_screen::@8->sqr#0] -- register_copy 
    jsr sqr
    // sqr(xd)
    // [183] (word) sqr::return#3 ← (word) sqr::return#0
    // init_dist_screen::@11
    // xds = sqr(xd)
    // [184] (word) init_dist_screen::xds#0 ← (word) sqr::return#3
    // ds = xds+yds
    // [185] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda ds
    clc
    adc yds
    sta ds
    lda ds+1
    adc yds+1
    sta ds+1
    // sqrt(ds)
    // [186] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
    // [187] call sqrt 
    jsr sqrt
    // [188] (byte) sqrt::return#2 ← (byte) sqrt::return#0
    // init_dist_screen::@12
    // d = sqrt(ds)
    // [189] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2
    // screen_topline[x] = d
    // [190] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_topline),y
    // screen_bottomline[x] = d
    // [191] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (screen_bottomline),y
    // screen_topline[xb] = d
    // [192] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_topline),y
    // screen_bottomline[xb] = d
    // [193] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (screen_bottomline),y
    // for( byte x=0,xb=39; x<=19; x++, xb--)
    // [194] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [195] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
    // [196] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b5
    // init_dist_screen::@9
    // screen_topline += 40
    // [197] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_topline
    sta screen_topline
    bcc !+
    inc screen_topline+1
  !:
    // screen_bottomline -= 40
    // [198] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_bottomline
    sec
    sbc #<$28
    sta screen_bottomline
    lda screen_bottomline+1
    sbc #>$28
    sta screen_bottomline+1
    // for(byte y: 0..12)
    // [199] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10 -- vbuz1=_inc_vbuz1 
    inc y
    // [200] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1
    // init_dist_screen::@return
    // }
    // [201] return 
    rts
    // init_dist_screen::@6
  b6:
    // (x2>=39)?(x2-39):(39-x2)
    // [202] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$27
    jmp b8
    // init_dist_screen::@2
  b2:
    // (y2>=24)?(y2-24):(24-y2)
    // [203] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$18
    jmp b4
}
  // sqrt
// Find the (integer) square root of a word value
// If the square is not an integer then it returns the largest integer N where N*N <= val
// Uses a table of squares that must be initialized by calling init_squares()
// sqrt(word zeropage($4f) val)
sqrt: {
    .label _1 = $31
    .label _3 = $31
    .label found = $31
    .label val = $4f
    // bsearch16u(val, SQUARES, NUM_SQUARES)
    // [204] (word) bsearch16u::key#0 ← (word) sqrt::val#0
    // [205] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta bsearch16u.items
    lda SQUARES+1
    sta bsearch16u.items+1
    // [206] call bsearch16u 
    // [213] phi from sqrt to bsearch16u [phi:sqrt->bsearch16u]
    jsr bsearch16u
    // bsearch16u(val, SQUARES, NUM_SQUARES)
    // [207] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
    // sqrt::@1
    // found = bsearch16u(val, SQUARES, NUM_SQUARES)
    // [208] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
    // found-SQUARES
    // [209] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 -- vwuz1=pwuz1_minus_pwuz2 
    lda _3
    sec
    sbc SQUARES
    sta _3
    lda _3+1
    sbc SQUARES+1
    sta _3+1
    // [210] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr _1+1
    ror _1
    // (byte)(found-SQUARES)
    // [211] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 -- vbuaa=_byte_vwuz1 
    lda _1
    // sqrt::@return
    // }
    // [212] return 
    rts
}
  // bsearch16u
// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
// bsearch16u(word zeropage($4f) key, word* zeropage($31) items, byte register(X) num)
bsearch16u: {
    .label _2 = $31
    .label pivot = $51
    .label result = $53
    .label return = $31
    .label items = $31
    .label key = $4f
    // [214] phi from bsearch16u to bsearch16u::@3 [phi:bsearch16u->bsearch16u::@3]
    // [214] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#1 [phi:bsearch16u->bsearch16u::@3#0] -- register_copy 
    // [214] phi (byte) bsearch16u::num#3 = (const byte) NUM_SQUARES#3 [phi:bsearch16u->bsearch16u::@3#1] -- vbuxx=vbuc1 
    ldx #NUM_SQUARES
    // bsearch16u::@3
  b3:
    // while (num > 0)
    // [215] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b4
    // bsearch16u::@5
    // *items<=key?items:items-1
    // [216] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 -- _deref_pwuz1_le_vwuz2_then_la1 
    ldy #1
    lda (items),y
    cmp key+1
    bne !+
    dey
    lda (items),y
    cmp key
    beq b2
  !:
    bcc b2
    // bsearch16u::@1
    // [217] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz1_minus_vwuc1 
    lda _2
    sec
    sbc #<1*SIZEOF_WORD
    sta _2
    lda _2+1
    sbc #>1*SIZEOF_WORD
    sta _2+1
    // [218] phi from bsearch16u::@1 bsearch16u::@5 to bsearch16u::@2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2]
    // [218] phi (word*) bsearch16u::return#2 = (word*~) bsearch16u::$2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2#0] -- register_copy 
    // bsearch16u::@2
  b2:
    // [219] phi from bsearch16u::@2 bsearch16u::@8 to bsearch16u::@return [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return]
    // [219] phi (word*) bsearch16u::return#1 = (word*) bsearch16u::return#2 [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return#0] -- register_copy 
    // bsearch16u::@return
    // }
    // [220] return 
    rts
    // bsearch16u::@4
  b4:
    // num >> 1
    // [221] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
    // items + (num >> 1)
    // [222] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [223] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 -- pwuz1=pwuz2_plus_vbuaa 
    clc
    adc items
    sta pivot
    lda #0
    adc items+1
    sta pivot+1
    // result = (signed word)key-(signed word)*pivot
    // [224] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) -- vwsz1=vwsz2_minus__deref_pwsz3 
    sec
    lda key
    ldy #0
    sbc (pivot),y
    sta result
    lda key+1
    iny
    sbc (pivot),y
    sta result+1
    // if (result == 0)
    // [225] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 -- vwsz1_neq_0_then_la1 
    bne b6
    lda result
    bne b6
    // bsearch16u::@8
    // [226] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 -- pwuz1=pwuz2 
    lda pivot
    sta return
    lda pivot+1
    sta return+1
    rts
    // bsearch16u::@6
  b6:
    // if (result > 0)
    // [227] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 -- vwsz1_le_0_then_la1 
    lda result+1
    bmi b7
    bne !+
    lda result
    beq b7
  !:
    // bsearch16u::@9
    // items = pivot+1
    // [228] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz2_plus_vbuc1 
    lda #1*SIZEOF_WORD
    clc
    adc pivot
    sta items
    lda #0
    adc pivot+1
    sta items+1
    // num--;
    // [229] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3 -- vbuxx=_dec_vbuxx 
    dex
    // [230] phi from bsearch16u::@6 bsearch16u::@9 to bsearch16u::@7 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7]
    // [230] phi (word*) bsearch16u::items#8 = (word*) bsearch16u::items#2 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#0] -- register_copy 
    // [230] phi (byte) bsearch16u::num#5 = (byte) bsearch16u::num#3 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#1] -- register_copy 
    // bsearch16u::@7
  b7:
    // num >>= 1
    // [231] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [214] phi from bsearch16u::@7 to bsearch16u::@3 [phi:bsearch16u::@7->bsearch16u::@3]
    // [214] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#8 [phi:bsearch16u::@7->bsearch16u::@3#0] -- register_copy 
    // [214] phi (byte) bsearch16u::num#3 = (byte) bsearch16u::num#0 [phi:bsearch16u::@7->bsearch16u::@3#1] -- register_copy 
    jmp b3
}
  // sqr
// Find the square of a byte value
// Uses a table of squares that must be initialized by calling init_squares()
// sqr(byte register(A) val)
sqr: {
    .label return = $4f
    .label return_2 = $4d
    // return SQUARES[val];
    // [233] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [234] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) -- vwuz1=pwuz2_derefidx_vbuaa 
    tay
    lda (SQUARES),y
    sta return
    iny
    lda (SQUARES),y
    sta return+1
    // sqr::@return
    // }
    // [235] return 
    rts
}
  // init_squares
// Initialize squares table
// Uses iterative formula (x+1)^2 = x^2 + 2*x + 1
init_squares: {
    .label squares = $35
    .label sqr = $33
    // malloc(NUM_SQUARES*sizeof(word))
    // [237] call malloc 
    // [88] phi from init_squares to malloc [phi:init_squares->malloc]
    // [88] phi (word) malloc::size#2 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD [phi:init_squares->malloc#0] -- vwuz1=vbuc1 
    lda #NUM_SQUARES*SIZEOF_WORD
    sta malloc.size
    lda #0
    sta malloc.size+1
    // [88] phi (byte*) heap_head#13 = (const byte*) HEAP_TOP#0 [phi:init_squares->malloc#1] -- pbuz1=pbuc1 
    lda #<HEAP_TOP
    sta heap_head
    lda #>HEAP_TOP
    sta heap_head+1
    jsr malloc
    // init_squares::@2
    // malloc(NUM_SQUARES*sizeof(word))
    // [238] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0
    // squares = SQUARES
    // [239] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta squares
    lda SQUARES+1
    sta squares+1
    // [240] phi from init_squares::@2 to init_squares::@1 [phi:init_squares::@2->init_squares::@1]
    // [240] phi (byte) init_squares::i#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [240] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#0 [phi:init_squares::@2->init_squares::@1#1] -- register_copy 
    // [240] phi (word) init_squares::sqr#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#2] -- vwuz1=vbuc1 
    txa
    sta sqr
    sta sqr+1
    // [240] phi from init_squares::@1 to init_squares::@1 [phi:init_squares::@1->init_squares::@1]
    // [240] phi (byte) init_squares::i#2 = (byte) init_squares::i#1 [phi:init_squares::@1->init_squares::@1#0] -- register_copy 
    // [240] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#1 [phi:init_squares::@1->init_squares::@1#1] -- register_copy 
    // [240] phi (word) init_squares::sqr#2 = (word) init_squares::sqr#1 [phi:init_squares::@1->init_squares::@1#2] -- register_copy 
    // init_squares::@1
  b1:
    // *squares++ = sqr
    // [241] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda sqr
    sta (squares),y
    iny
    lda sqr+1
    sta (squares),y
    // *squares++ = sqr;
    // [242] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_WORD
    clc
    adc squares
    sta squares
    bcc !+
    inc squares+1
  !:
    // i*2
    // [243] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // i*2+1
    // [244] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1 -- vbuaa=vbuaa_plus_1 
    clc
    adc #1
    // sqr += i*2+1
    // [245] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
    // for( byte i: 0..NUM_SQUARES-1)
    // [246] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [247] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_SQUARES-1+1
    bne b1
    // init_squares::@return
    // }
    // [248] return 
    rts
}
  // File Data
  // Angles representing ATAN(0.5), ATAN(0.25), ATAN(0.125), ...
CORDIC_ATAN2_ANGLES_16:
.for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2

  // Screen containing distance to center
  SCREEN_DIST: .fill $3e8, 0
  // = malloc(1000);
  // Screen containing angle to center
  SCREEN_ANGLE: .fill $3e8, 0
  // = malloc(1000);
  // Screen containing angle to center
  SCREEN_MIX: .fill $3e8, 0
  // Array containing the bucket size for each of the distance buckets
  BUCKET_SIZES: .fill NUM_BUCKETS, 0
  // Buckets containing screen indices for each distance from the center.
  // BUCKETS[dist] is an array of words containing screen indices.
  // The size of the array BUCKETS[dist] is BUCKET_SIZES[dist]
  BUCKETS: .fill 2*NUM_BUCKETS, 0
  // Current index into each bucket. Used while populating the buckets. (After population the end the values will be equal to the bucket sizes)
  BUCKET_IDX: .fill NUM_BUCKETS, 0

