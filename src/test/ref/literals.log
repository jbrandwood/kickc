Identified constant variable (byte*) SCREEN
Identified constant variable (byte) ch
Identified constant variable (byte) num
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((const byte*) SCREEN + (number) 0) ← (const byte) ch
  *((const byte*) SCREEN + (number) 2) ← (const byte) num
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (number~) main::$0 ← (number) 4 + (byte) main::i#2
  *((const byte*) SCREEN + (number~) main::$0) ← *((const byte*) str + (byte) main::i#2)
  (number~) main::$1 ← (number) 9 + (byte) main::i#2
  *((const byte*) SCREEN + (number~) main::$1) ← *((const byte*) nums + (byte) main::i#2)
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,3)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,3)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(const byte) ch = (byte) 'a'
(void()) main()
(number~) main::$0
(number~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(const byte) num = (byte) 1
(const byte*) nums[]  = { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
(const byte*) str[]  = (byte*) "bcde"

Adding number conversion cast (unumber) 0 in *((const byte*) SCREEN + (number) 0) ← (const byte) ch
Adding number conversion cast (unumber) 2 in *((const byte*) SCREEN + (number) 2) ← (const byte) num
Adding number conversion cast (unumber) 4 in (number~) main::$0 ← (number) 4 + (byte) main::i#2
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 4 + (byte) main::i#2
Adding number conversion cast (unumber) 9 in (number~) main::$1 ← (number) 9 + (byte) main::i#2
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 9 + (byte) main::i#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 4 + (byte) main::i#2
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 9 + (byte) main::i#2
Simple Condition (bool~) main::$2 [10] if((byte) main::i#1!=rangelast(0,3)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,3)) goto main::@1 to (number) 4
Simplifying expression containing zero SCREEN in [0] *((const byte*) SCREEN + (byte) 0) ← (const byte) ch
Successful SSA optimization PassNSimplifyExpressionWithZero
Adding number conversion cast (unumber) 4 in if((byte) main::i#1!=(number) 4) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+2)
Consolidated array index constant in assignment *(SCREEN+4 + main::$0)
Consolidated array index constant in assignment *(SCREEN+9 + main::$1)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias (byte) main::i#2 = (byte~) main::$0 (byte~) main::$1 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [13] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN) ← (const byte) ch
  [5] *((const byte*) SCREEN+(byte) 2) ← (const byte) num
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [7] *((const byte*) SCREEN+(byte) 4 + (byte) main::i#2) ← *((const byte*) str + (byte) main::i#2)
  [8] *((const byte*) SCREEN+(byte) 9 + (byte) main::i#2) ← *((const byte*) nums + (byte) main::i#2)
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const ch = 'a'
  .const num = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [4] *((const byte*) SCREEN) ← (const byte) ch -- _deref_pbuc1=vbuc2 
    lda #ch
    sta SCREEN
    // [5] *((const byte*) SCREEN+(byte) 2) ← (const byte) num -- _deref_pbuc1=vbuc2 
    lda #num
    sta SCREEN+2
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] *((const byte*) SCREEN+(byte) 4 + (byte) main::i#2) ← *((const byte*) str + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda str,y
    sta SCREEN+4,y
    // [8] *((const byte*) SCREEN+(byte) 9 + (byte) main::i#2) ← *((const byte*) nums + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda nums,y
    sta SCREEN+9,y
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
  str: .text "bcde"
  .byte 0
  nums: .byte 2, 3, 4, 5

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN) ← (const byte) ch [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN+(byte) 2) ← (const byte) num [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN+(byte) 4 + (byte) main::i#2) ← *((const byte*) str + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [8] *((const byte*) SCREEN+(byte) 9 + (byte) main::i#2) ← *((const byte*) nums + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [4] *((const byte*) SCREEN) ← (const byte) ch [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN+(byte) 2) ← (const byte) num [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN+(byte) 4 + (byte) main::i#2) ← *((const byte*) str + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN+(byte) 9 + (byte) main::i#2) ← *((const byte*) nums + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 395 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 395 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const ch = 'a'
  .const num = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) SCREEN) ← (const byte) ch -- _deref_pbuc1=vbuc2 
    lda #ch
    sta SCREEN
    // [5] *((const byte*) SCREEN+(byte) 2) ← (const byte) num -- _deref_pbuc1=vbuc2 
    lda #num
    sta SCREEN+2
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] *((const byte*) SCREEN+(byte) 4 + (byte) main::i#2) ← *((const byte*) str + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda str,x
    sta SCREEN+4,x
    // [8] *((const byte*) SCREEN+(byte) 9 + (byte) main::i#2) ← *((const byte*) nums + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda nums,x
    sta SCREEN+9,x
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
  str: .text "bcde"
  .byte 0
  nums: .byte 2, 3, 4, 5

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(const byte) ch = (byte) 'a'
(void()) main()
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 22.0
(const byte) num = (byte) 1
(const byte*) nums[]  = { (byte) 2, (byte) 3, (byte) 4, (byte) 5 }
(const byte*) str[]  = (byte*) "bcde"

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 293

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const ch = 'a'
  .const num = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // SCREEN[0] = ch
    // [4] *((const byte*) SCREEN) ← (const byte) ch -- _deref_pbuc1=vbuc2 
    lda #ch
    sta SCREEN
    // SCREEN[2] = num
    // [5] *((const byte*) SCREEN+(byte) 2) ← (const byte) num -- _deref_pbuc1=vbuc2 
    lda #num
    sta SCREEN+2
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[4+i] = str[i]
    // [7] *((const byte*) SCREEN+(byte) 4 + (byte) main::i#2) ← *((const byte*) str + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda str,x
    sta SCREEN+4,x
    // SCREEN[9+i] = nums[i]
    // [8] *((const byte*) SCREEN+(byte) 9 + (byte) main::i#2) ← *((const byte*) nums + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda nums,x
    sta SCREEN+9,x
    // for(byte i : 0..3)
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data
  str: .text "bcde"
  .byte 0
  nums: .byte 2, 3, 4, 5

