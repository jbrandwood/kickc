(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*) 16384
(const nomodify byte*) FR_COUNTER = (byte*) 16407
(const nomodify byte) JOY_DOWN = (byte) 4
(const nomodify byte) JOY_LEFT = (byte) 2
(const nomodify byte) JOY_RIGHT = (byte) 1
(const nomodify byte) JOY_UP = (byte) 8
(const nomodify byte*) MEMORY = (byte*) 0
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte*) PALETTE[(number) $20]  = { (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $f, (byte) $30, (byte) 8, (byte) 1, (byte) $f, (byte) $18, (byte) 8, (byte) 1, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*) 8192
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 = (byte*) 10176
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*) 8192
(const nomodify byte*) PPU_PALETTE = (byte*) 16128
(const to_volatile byte*) PPU_PPUSTATUS = (byte*) 8194
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_BYTE = (byte) 1
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*) 0 }
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@return
(byte) conio_cursor_x loadstore zp[1]:11 5189.185185185185
(byte) conio_cursor_y loadstore zp[1]:12 64002.159999999996
(byte*) conio_line_text loadstore zp[2]:13 45104.24489795918
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte x 7001.0
(void()) cputln()
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:7 500.5
(to_nomodify byte*) cputs::s#2 s zp[2]:7 1501.5
(void()) cscroll()
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(byte) cscroll::ch
(byte) cscroll::ch#0 reg byte x 6.666666673333334E8
(byte*) cscroll::line1
(byte*) cscroll::line1#1 line1 zp[2]:3 1.000000001E9
(byte*) cscroll::line1#2 line1 zp[2]:3 2.0000000036363637E8
(byte*) cscroll::line1#6 line1 zp[2]:3 1.00000001E8
(byte*) cscroll::line2
(byte*) cscroll::line2#1 line2 zp[2]:9 3.333333336666667E8
(byte*) cscroll::line2#2 line2 zp[2]:9 3.1428571485714287E8
(byte*) cscroll::line2#6 line2 zp[2]:9 1.00000001E8
(byte) cscroll::x
(byte) cscroll::x#1 reg byte y 2.000000002E9
(byte) cscroll::x#2 reg byte y 2.72727273E8
(byte) cscroll::y
(byte) cscroll::y#1 y zp[1]:2 2.00000002E8
(byte) cscroll::y#2 y zp[1]:2 2.142857164285714E7
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::enableVideoOutput1
(label) main::initNES1
(label) main::initNES1_@1
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(label) main::initNES1_disableVideoOutput1
(byte) main::initNES1_i
(byte) main::initNES1_i#1 reg byte x 151.5
(byte) main::initNES1_i#2 reg byte x 112.22222222222223
(label) main::initNES1_waitForVBlank1
(byte~) main::initNES1_waitForVBlank1_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(byte~) main::initNES1_waitForVBlank2_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank2_@1
(const byte*) main::s[(byte) $25]  = (byte*) "hello world!
i am nes
 look at me 

"
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#1 i zp[2]:9 2.00000002E8
(word) ppuDataFill::i#2 i zp[2]:9 1.00000001E8
(nomodify void*) ppuDataFill::ppuData
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0 reg byte a 2.0000002E7
(byte~) ppuDataFill::ppuDataPrepare1_$1 reg byte a 2.0000002E7
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:5 6666667.333333333
(label) ppuDataFill::ppuDataPut1
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#5 size zp[2]:17 1.1111111222222222E7
(byte) ppuDataFill::val
(byte) ppuDataFill::val#10 reg byte x 1.1111111222222222E7
(byte()) ppuDataGet((nomodify void*) ppuDataGet::ppuData)
(label) ppuDataGet::@return
(nomodify void*) ppuDataGet::ppuData
(nomodify void*) ppuDataGet::ppuData#0 ppuData zp[2]:17 5.25000000075E9
(label) ppuDataGet::ppuDataPrepare1
(byte~) ppuDataGet::ppuDataPrepare1_$0 reg byte a 2.0000000002E10
(byte~) ppuDataGet::ppuDataPrepare1_$1 reg byte a 2.0000000002E10
(nomodify void*) ppuDataGet::ppuDataPrepare1_ppuData
(label) ppuDataGet::ppuDataRead1
(byte) ppuDataGet::ppuDataRead1_return
(byte) ppuDataGet::ppuDataRead1_return#0 reg byte a 3.666666667333333E9
(byte) ppuDataGet::return
(byte) ppuDataGet::return#2 reg byte a 2.000000002E9
(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
(label) ppuDataSet::@return
(nomodify void*) ppuDataSet::ppuData
(nomodify byte*) ppuDataSet::ppuData#0 ppuData zp[2]:5 5000.5
(nomodify void*) ppuDataSet::ppuData#1 ppuData zp[2]:5 1.000000001E9
(label) ppuDataSet::ppuDataPrepare1
(byte~) ppuDataSet::ppuDataPrepare1_$0 reg byte a 2.0000000002E10
(byte~) ppuDataSet::ppuDataPrepare1_$1 reg byte a 2.0000000002E10
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:5 7.000003334666666E9
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataPrepare1_ppuData zp[2]:5 20002.0
(label) ppuDataSet::ppuDataPut1
(byte) ppuDataSet::ppuDataPut1_val
(byte) ppuDataSet::val
(byte) ppuDataSet::val#0 reg byte x 10001.0
(byte) ppuDataSet::val#1 reg byte x 2.000000002E9
(byte) ppuDataSet::val#2 reg byte x 2.2000020006E9
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(const nomodify void*) ppuDataTransfer::cpuData#0 cpuData = (void*)(const byte*) PALETTE
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:9 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:9 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 i zp[2]:7 2002.0
(word) ppuDataTransfer::i#2 i zp[2]:7 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(const nomodify void*) ppuDataTransfer::ppuData#0 ppuData = (void*)(const nomodify byte*) PPU_PALETTE
(label) ppuDataTransfer::ppuDataPrepare1
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(label) ppuDataTransfer::ppuDataPut1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
(word) ppuDataTransfer::size
(const word) ppuDataTransfer::size#0 size = (byte) $20*(const byte) SIZEOF_BYTE
(byte()) readJoy1()
(byte~) readJoy1::$1 zp[1]:19 101.0
(byte~) readJoy1::$2 reg byte a 202.0
(label) readJoy1::@1
(label) readJoy1::@2
(label) readJoy1::@return
(byte) readJoy1::i
(byte) readJoy1::i#1 reg byte x 202.0
(byte) readJoy1::i#2 reg byte x 60.599999999999994
(byte) readJoy1::joy
(byte) readJoy1::joy#1 reg byte a 101.0
(byte) readJoy1::joy#2 reg byte a 51.0
(byte) readJoy1::return
(byte) readJoy1::return#2 reg byte a 4.0
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 reg byte a 4.0
(byte~) vblank::$3 reg byte a 4.0
(byte~) vblank::$5 reg byte a 4.0
(byte~) vblank::$7 reg byte a 4.0
(label) vblank::@1
(label) vblank::@10
(label) vblank::@11
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@7
(label) vblank::@8
(label) vblank::@9
(label) vblank::@return
(byte) vblank::joy
(byte) vblank::joy#0 reg byte x 0.7142857142857142
(volatile byte) x_scroll loadstore zp[1]:15 1.1500000000000001
(volatile byte) y_scroll loadstore zp[1]:16 1.4761904761904767

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
zp[1]:2 [ cscroll::y#2 cscroll::y#1 ]
zp[2]:3 [ cscroll::line1#6 cscroll::line1#2 cscroll::line1#1 ]
reg byte y [ cscroll::x#2 cscroll::x#1 ]
reg byte x [ ppuDataSet::val#2 ppuDataSet::val#0 ppuDataSet::val#1 ]
zp[2]:5 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#0 ppuDataSet::ppuDataPrepare1_ppuData#2 ppuDataSet::ppuData#1 ppuDataSet::ppuData#0 ]
reg byte x [ ppuDataFill::val#10 ]
zp[2]:7 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 cputs::s#2 cputs::s#0 ]
zp[2]:9 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 cscroll::line2#6 cscroll::line2#2 cscroll::line2#1 ppuDataFill::i#2 ppuDataFill::i#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
zp[1]:11 [ conio_cursor_x ]
zp[1]:12 [ conio_cursor_y ]
zp[2]:13 [ conio_line_text ]
zp[1]:15 [ x_scroll ]
zp[1]:16 [ y_scroll ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte a [ cputs::c#1 ]
reg byte x [ cputc::c#0 ]
zp[2]:17 [ ppuDataGet::ppuData#0 ppuDataFill::size#5 ]
reg byte a [ ppuDataGet::return#2 ]
reg byte x [ cscroll::ch#0 ]
reg byte a [ ppuDataSet::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataSet::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataGet::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataGet::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataGet::ppuDataRead1_return#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ readJoy1::return#2 ]
reg byte x [ vblank::joy#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]
reg byte a [ vblank::$5 ]
reg byte a [ vblank::$7 ]
zp[1]:19 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
