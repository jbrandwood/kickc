Replacing struct member reference *((const struct Point*) points + (byte~) main::$4).x with member unwinding reference *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_X + (byte~) main::$4)
Replacing struct member reference *((const struct Point*) points + (byte~) main::$5).y with member unwinding reference *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5)
Replacing struct member reference *((const struct Point*) points + (byte~) main::$6).x with member unwinding reference *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_X + (byte~) main::$6)
Replacing struct member reference *((const struct Point*) points + (byte~) main::$7).y with member unwinding reference *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7)

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (number~) main::$0 ← (number) 2 + (byte) main::i#2
  (byte~) main::$4 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
  *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_X + (byte~) main::$4) ← (number~) main::$0
  (number~) main::$1 ← (number) 3 + (byte) main::i#2
  (byte~) main::$5 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
  *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (number~) main::$1
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,1)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,1)
  if((bool~) main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::idx#0 ← (byte) 0
  (byte) main::i1#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::idx#4 ← phi( main::@2/(byte) main::idx#0 main::@3/(byte) main::idx#3 )
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#0 main::@3/(byte) main::i1#1 )
  (byte~) main::$6 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
  *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_X + (byte~) main::$6)
  (byte) main::idx#1 ← ++ (byte) main::idx#4
  (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
  *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7)
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' '
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  (byte) main::i1#1 ← (byte) main::i1#2 + rangenext(0,1)
  (bool~) main::$3 ← (byte) main::i1#1 != rangelast(0,1)
  if((bool~) main::$3) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(number~) main::$0
(number~) main::$1
(bool~) main::$2
(bool~) main::$3
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(byte~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(const struct Point*) points[(number) 2]  = { fill( 2, 0) }

Adding number conversion cast (unumber) 2 in (number~) main::$0 ← (number) 2 + (byte) main::i#2
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 2 + (byte) main::i#2
Adding number conversion cast (unumber) 3 in (number~) main::$1 ← (number) 3 + (byte) main::i#2
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 3 + (byte) main::i#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 2 + (byte) main::i#2
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 3 + (byte) main::i#2
Identified duplicate assignment right side [6] (byte~) main::$5 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
Identified duplicate assignment right side [17] (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$2 [10] if((byte) main::i#1!=rangelast(0,1)) goto main::@1
Simple Condition (bool~) main::$3 [24] if((byte) main::i1#1!=rangelast(0,1)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,1)) goto main::@1 to (number) 2
Resolved ranged next value [22] main::i1#1 ← ++ main::i1#2 to ++
Resolved ranged comparison value [24] if(main::i1#1!=rangelast(0,1)) goto main::@3 to (number) 2
Simplifying expression containing zero (byte*)points in [4] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_X + (byte~) main::$4) ← (byte~) main::$0
Simplifying expression containing zero (byte*)points in [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_X + (byte~) main::$6)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 2 in if((byte) main::i#1!=(number) 2) goto main::@1
Adding number conversion cast (unumber) 2 in if((byte) main::i1#1!=(number) 2) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$5 = main::$4 
Alias main::$7 = main::$6 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [2] (byte~) main::$5 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift [9] (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Constant inlined main::idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [26] main::i1#3 ← main::i1#1
Coalesced [27] main::idx#5 ← main::idx#3
Coalesced [28] main::i#3 ← main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2
  [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1
  [8] *((byte*)(const struct Point*) points + (byte~) main::$5) ← (byte~) main::$0
  [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2
  [10] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1
  [11] (byte) main::i#1 ← ++ (byte) main::i#2
  [12] if((byte) main::i#1!=(byte) 2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [13] (byte) main::idx#4 ← phi( main::@1/(byte) 0 main::@2/(byte) main::idx#3 )
  [13] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1
  [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points + (byte~) main::$7)
  [16] (byte) main::idx#1 ← ++ (byte) main::idx#4
  [17] *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7)
  [18] (byte) main::idx#2 ← ++ (byte) main::idx#1
  [19] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' '
  [20] (byte) main::idx#3 ← ++ (byte) main::idx#2
  [21] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [22] if((byte) main::i1#1!=(byte) 2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [23] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$0 101.0
(byte~) main::$1 202.0
(byte~) main::$5 101.0
(byte~) main::$7 101.0
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 84.16666666666666
(byte) main::i1
(byte) main::i1#1 151.5
(byte) main::i1#2 37.875
(byte) main::idx
(byte) main::idx#1 151.5
(byte) main::idx#2 151.5
(byte) main::idx#3 67.33333333333333
(byte) main::idx#4 101.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::idx#4 main::idx#3 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable main::idx#1 to live range equivalence class [ main::idx#1 ]
Added variable main::idx#2 to live range equivalence class [ main::idx#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::idx#4 main::idx#3 ]
[ main::$0 ]
[ main::$5 ]
[ main::$1 ]
[ main::$7 ]
[ main::idx#1 ]
[ main::idx#2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:4 [ main::idx#4 main::idx#3 ]
Allocated zp[1]:5 [ main::$0 ]
Allocated zp[1]:6 [ main::$5 ]
Allocated zp[1]:7 [ main::$1 ]
Allocated zp[1]:8 [ main::$7 ]
Allocated zp[1]:9 [ main::idx#1 ]
Allocated zp[1]:10 [ main::idx#2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __0 = 5
    .label __1 = 7
    .label __5 = 6
    .label __7 = 8
    .label i = 2
    .label idx = 9
    .label idx_1 = $a
    .label idx_2 = 4
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z i
    axs #-[2]
    stx.z __0
    // [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __5
    // [8] *((byte*)(const struct Point*) points + (byte~) main::$5) ← (byte~) main::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z __5
    sta points,y
    // [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z i
    axs #-[3]
    stx.z __1
    // [10] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __1
    ldy.z __5
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [12] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [13] phi (byte) main::idx#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx_2
    // [13] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b2
    // [13] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [13] phi (byte) main::idx#4 = (byte) main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [13] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i1
    asl
    sta.z __7
    // [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points + (byte~) main::$7) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z __7
    lda points,y
    ldy.z idx_2
    sta SCREEN,y
    // [16] (byte) main::idx#1 ← ++ (byte) main::idx#4 -- vbuz1=_inc_vbuz2 
    ldy.z idx_2
    iny
    sty.z idx
    // [17] *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z __7
    lda points+OFFSET_STRUCT_POINT_Y,y
    ldy.z idx
    sta SCREEN,y
    // [18] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuz1=_inc_vbuz2 
    ldy.z idx
    iny
    sty.z idx_1
    // [19] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx_1
    sta SCREEN,y
    // [20] (byte) main::idx#3 ← ++ (byte) main::idx#2 -- vbuz1=_inc_vbuz2 
    ldy.z idx_1
    iny
    sty.z idx_2
    // [21] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [22] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i1
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [23] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$0 main::$5 ] ( main:2 [ main::i#2 main::$0 main::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::$0 ]
Statement [8] *((byte*)(const struct Point*) points + (byte~) main::$5) ← (byte~) main::$0 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::$5 ]
Statement [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 [ main::i#2 main::$5 main::$1 ] ( main:2 [ main::i#2 main::$5 main::$1 ] { }  ) always clobbers reg byte a 
Statement [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::idx#4 main::idx#3 ]
Statement [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points + (byte~) main::$7) [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::$7 ]
Statement [17] *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) [ main::i1#2 main::idx#1 ] ( main:2 [ main::i1#2 main::idx#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::idx#1 ]
Statement [19] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' ' [ main::i1#2 main::idx#2 ] ( main:2 [ main::i1#2 main::idx#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::idx#2 ]
Statement [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 [ main::i#2 main::$0 ] ( main:2 [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$0 main::$5 ] ( main:2 [ main::i#2 main::$0 main::$5 ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct Point*) points + (byte~) main::$5) ← (byte~) main::$0 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] { }  ) always clobbers reg byte a 
Statement [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 [ main::i#2 main::$5 main::$1 ] ( main:2 [ main::i#2 main::$5 main::$1 ] { }  ) always clobbers reg byte a 
Statement [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points + (byte~) main::$7) [ main::i1#2 main::idx#4 main::$7 ] ( main:2 [ main::i1#2 main::idx#4 main::$7 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) [ main::i1#2 main::idx#1 ] ( main:2 [ main::i1#2 main::idx#1 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' ' [ main::i1#2 main::idx#2 ] ( main:2 [ main::i1#2 main::idx#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::idx#4 main::idx#3 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$5 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$7 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::idx#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::idx#2 ] : zp[1]:10 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 235.67: zp[1]:2 [ main::i#2 main::i#1 ] 202: zp[1]:7 [ main::$1 ] 189.38: zp[1]:3 [ main::i1#2 main::i1#1 ] 168.33: zp[1]:4 [ main::idx#4 main::idx#3 ] 151.5: zp[1]:9 [ main::idx#1 ] 151.5: zp[1]:10 [ main::idx#2 ] 101: zp[1]:5 [ main::$0 ] 101: zp[1]:6 [ main::$5 ] 101: zp[1]:8 [ main::$7 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 1598 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] zp[1]:3 [ main::i1#2 main::i1#1 ] reg byte x [ main::idx#4 main::idx#3 ] zp[1]:9 [ main::idx#1 ] zp[1]:10 [ main::idx#2 ] zp[1]:5 [ main::$0 ] zp[1]:6 [ main::$5 ] zp[1]:8 [ main::$7 ] 
Limited combination testing to 100 combinations of 26244 possible.
Uplifting [Point] best 1598 combination 
Uplifting [] best 1598 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1598 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::i1#2 main::i1#1 ]
Uplifting [main] best 1598 combination zp[1]:3 [ main::i1#2 main::i1#1 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::idx#1 ]
Uplifting [main] best 1508 combination reg byte x [ main::idx#1 ] 
Attempting to uplift remaining variables inzp[1]:10 [ main::idx#2 ]
Uplifting [main] best 1418 combination reg byte x [ main::idx#2 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::$0 ]
Uplifting [main] best 1378 combination reg byte x [ main::$0 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::$5 ]
Uplifting [main] best 1308 combination reg byte y [ main::$5 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::$7 ]
Uplifting [main] best 1238 combination reg byte y [ main::$7 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z i
    axs #-[2]
    // [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [8] *((byte*)(const struct Point*) points + (byte~) main::$5) ← (byte~) main::$0 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 -- vbuaa=vbuc1_plus_vbuz1 
    lda #3
    clc
    adc.z i
    // [10] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [12] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [13] phi (byte) main::idx#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [13] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b2
    // [13] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [13] phi (byte) main::idx#4 = (byte) main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [13] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i1
    asl
    tay
    // [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,x
    // [16] (byte) main::idx#1 ← ++ (byte) main::idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // [17] *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN,x
    // [18] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [19] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [20] (byte) main::idx#3 ← ++ (byte) main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [22] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i1
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [23] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$0 reg byte x 101.0
(byte~) main::$1 reg byte a 202.0
(byte~) main::$5 reg byte y 101.0
(byte~) main::$7 reg byte y 101.0
(label) main::@1
(label) main::@2
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 i zp[1]:2 151.5
(byte) main::i#2 i zp[1]:2 84.16666666666666
(byte) main::i1
(byte) main::i1#1 i1 zp[1]:3 151.5
(byte) main::i1#2 i1 zp[1]:3 37.875
(byte) main::idx
(byte) main::idx#1 reg byte x 151.5
(byte) main::idx#2 reg byte x 151.5
(byte) main::idx#3 reg byte x 67.33333333333333
(byte) main::idx#4 reg byte x 101.0
(const struct Point*) points[(number) 2]  = { fill( 2, 0) }

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ main::i1#2 main::i1#1 ]
reg byte x [ main::idx#4 main::idx#3 ]
reg byte x [ main::$0 ]
reg byte y [ main::$5 ]
reg byte a [ main::$1 ]
reg byte y [ main::$7 ]
reg byte x [ main::idx#1 ]
reg byte x [ main::idx#2 ]


FINAL ASSEMBLER
Score: 1076

  // File Comments
// Minimal struct -  variable array access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // 2+i
    // [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z i
    axs #-[2]
    // points[i].x = 2+i
    // [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [8] *((byte*)(const struct Point*) points + (byte~) main::$5) ← (byte~) main::$0 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // 3+i
    // [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2 -- vbuaa=vbuc1_plus_vbuz1 
    lda #3
    clc
    adc.z i
    // points[i].y = 3+i
    // [10] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta points+OFFSET_STRUCT_POINT_Y,y
    // for( byte i: 0..1)
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [12] if((byte) main::i#1!=(byte) 2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [13] phi (byte) main::idx#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [13] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    txa
    sta.z i1
    // [13] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [13] phi (byte) main::idx#4 = (byte) main::idx#3 [phi:main::@2->main::@2#0] -- register_copy 
    // [13] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // SCREEN[idx++] = points[i].x
    // [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i1
    asl
    tay
    // [15] *((const nomodify byte*) main::SCREEN + (byte) main::idx#4) ← *((byte*)(const struct Point*) points + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,x
    // SCREEN[idx++] = points[i].x;
    // [16] (byte) main::idx#1 ← ++ (byte) main::idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = points[i].y
    // [17] *((const nomodify byte*) main::SCREEN + (byte) main::idx#1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN,x
    // SCREEN[idx++] = points[i].y;
    // [18] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [19] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [20] (byte) main::idx#3 ← ++ (byte) main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( byte i: 0..1)
    // [21] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [22] if((byte) main::i1#1!=(byte) 2) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i1
    bne __b2
    // main::@return
    // }
    // [23] return 
    rts
}
  // File Data
  points: .fill 2*2, 0

