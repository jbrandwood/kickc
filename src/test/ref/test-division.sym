const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
signed word div16s(signed word div16s::dividend , signed word div16s::divisor)
label div16s::@1
label div16s::@return
signed word div16s::dividend
signed word div16s::dividend#0 dividend zp[2]:6 551.0
signed word div16s::divisor
signed word div16s::divisor#0 divisor zp[2]:20 551.0
signed word div16s::return
signed word div16s::return#0 return zp[2]:14 367.33333333333337
signed word div16s::return#2 return zp[2]:14 202.0
word div16u(word div16u::dividend , word div16u::divisor)
label div16u::@1
label div16u::@return
word div16u::dividend
word div16u::dividend#0 dividend zp[2]:12 551.0
word div16u::divisor
word div16u::divisor#0 divisor zp[2]:8 551.0
word div16u::return
word div16u::return#0 return zp[2]:14 367.33333333333337
word div16u::return#2 return zp[2]:14 202.0
signed byte div8s(signed byte div8s::dividend , signed byte div8s::divisor)
label div8s::@1
label div8s::@2
label div8s::@3
label div8s::@4
label div8s::@5
label div8s::@6
label div8s::@7
label div8s::@8
label div8s::@9
label div8s::@return
signed byte div8s::dividend
signed byte div8s::dividend#0 reg byte x 701.0
byte div8s::dividendu
signed byte div8s::dividendu#1 reg byte a 1001.0
byte div8s::dividendu#3 reg byte x 429.0
byte div8s::dividendu#7 reg byte x 2002.0
byte div8s::dividendu#8 reg byte x 2002.0
signed byte div8s::divisor
signed byte div8s::divisor#0 reg byte y 300.42857142857144
byte div8s::divisoru
signed byte div8s::divisoru#1 reg byte y 500.5
byte div8s::divisoru#3 reg byte a 1501.5
byte div8s::divisoru#4 reg byte a 2002.0
byte div8s::divisoru#5 reg byte a 2002.0
byte div8s::neg
byte div8s::neg#2 neg zp[1]:16 1001.0
byte div8s::neg#3 neg zp[1]:16 500.5
byte div8s::neg#4 neg zp[1]:16 500.5
byte div8s::resultu
byte div8s::resultu#0 reg byte y 333.6666666666667
signed byte div8s::return
signed byte div8s::return#1 reg byte a 2002.0
signed byte div8s::return#2 reg byte a 701.0
signed byte div8s::return#3 reg byte a 202.0
signed byte div8s::return#6 reg byte a 1001.0
byte div8u(byte div8u::dividend , byte div8u::divisor)
label div8u::@1
label div8u::@return
byte div8u::dividend
byte div8u::dividend#0 reg byte x 1001.0
byte div8u::dividend#1 reg byte x 101.0
byte div8u::dividend#2 reg byte x 11103.0
byte div8u::divisor
byte div8u::divisor#0 reg byte a 2002.0
byte div8u::divisor#1 reg byte a 202.0
byte div8u::divisor#2 reg byte a 5551.5
byte div8u::return
byte div8u::return#0 reg byte a 2775.75
byte div8u::return#2 reg byte a 2002.0
byte div8u::return#3 reg byte a 202.0
signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
label divr16s::@1
label divr16s::@2
label divr16s::@3
label divr16s::@4
label divr16s::@5
label divr16s::@6
label divr16s::@7
label divr16s::@8
label divr16s::@9
label divr16s::@return
signed word divr16s::dividend
signed word divr16s::dividend#0 dividend zp[2]:12 7001.0
word divr16s::dividendu
signed word divr16s::dividendu#1 dividendu zp[2]:12 10001.0
word divr16s::dividendu#3 dividendu zp[2]:12 4286.142857142857
word divr16s::dividendu#7 dividendu zp[2]:12 20002.0
word divr16s::dividendu#8 dividendu zp[2]:12 20002.0
signed word divr16s::divisor
signed word divr16s::divisor#0 divisor zp[2]:8 3000.4285714285716
word divr16s::divisoru
signed word divr16s::divisoru#1 divisoru zp[2]:8 5000.5
word divr16s::divisoru#3 divisoru zp[2]:8 15001.5
word divr16s::divisoru#4 divisoru zp[2]:8 20002.0
word divr16s::divisoru#5 divisoru zp[2]:8 20002.0
byte divr16s::neg
byte divr16s::neg#2 reg byte y 10001.0
byte divr16s::neg#3 reg byte y 5000.5
byte divr16s::neg#4 reg byte y 5000.5
signed word divr16s::rem
word divr16s::remu
word divr16s::resultu
word divr16s::resultu#0 resultu zp[2]:14 3333.6666666666665
signed word divr16s::return
signed word divr16s::return#1 return zp[2]:14 20002.0
signed word divr16s::return#2 return zp[2]:14 7001.0
signed word divr16s::return#3 return zp[2]:14 2002.0
signed word divr16s::return#6 return zp[2]:14 10001.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 2.0000002E7
byte~ divr16u::$2 reg byte a 2.0000002E7
label divr16u::@1
label divr16u::@2
label divr16u::@3
label divr16u::@4
label divr16u::@5
label divr16u::@6
label divr16u::@return
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:12 2500000.25
word divr16u::dividend#1 dividend zp[2]:12 1001.0
word divr16u::dividend#2 dividend zp[2]:12 10001.0
word divr16u::dividend#3 dividend zp[2]:12 4300000.571428571
word divr16u::dividend#5 dividend zp[2]:12 111003.0
word divr16u::divisor
word divr16u::divisor#0 divisor zp[2]:8 2002.0
word divr16u::divisor#1 divisor zp[2]:8 20002.0
word divr16u::divisor#6 divisor zp[2]:8 1250687.75
byte divr16u::i
byte divr16u::i#1 reg byte x 1.50000015E7
byte divr16u::i#2 reg byte x 1538461.6923076923
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:14 1.50000015E7
word divr16u::quotient#2 quotient zp[2]:14 1.0000001E7
word divr16u::quotient#3 quotient zp[2]:14 2500000.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:10 7500000.75
word divr16u::rem#1 rem zp[2]:10 2.0000002E7
word divr16u::rem#11 rem zp[2]:10 1.0033334666666666E7
word divr16u::rem#2 rem zp[2]:10 2.0000002E7
word divr16u::rem#5 rem zp[2]:10 2.0000002E7
word divr16u::rem#6 rem zp[2]:10 1.0000001E7
word divr16u::return
word divr16u::return#0 return zp[2]:14 4287286.428571429
word divr16u::return#2 return zp[2]:14 2002.0
word divr16u::return#3 return zp[2]:14 20002.0
byte divr8u(byte divr8u::dividend , byte divr8u::divisor , byte divr8u::rem)
byte~ divr8u::$1 reg byte a 2.0000002E7
label divr8u::@1
label divr8u::@2
label divr8u::@3
label divr8u::@4
label divr8u::@5
label divr8u::@6
label divr8u::@return
byte divr8u::dividend
byte divr8u::dividend#0 dividend zp[1]:17 36667.33333333333
byte divr8u::dividend#1 dividend zp[1]:17 2500000.25
byte divr8u::dividend#2 dividend zp[1]:17 5016667.333333333
byte divr8u::divisor
byte divr8u::divisor#0 divisor zp[1]:22 1250625.1875
byte divr8u::i
byte divr8u::i#1 reg byte x 1.50000015E7
byte divr8u::i#2 reg byte x 1666666.8333333333
byte divr8u::quotient
byte divr8u::quotient#1 quotient zp[1]:19 1.50000015E7
byte divr8u::quotient#2 quotient zp[1]:19 1.0000001E7
byte divr8u::quotient#3 quotient zp[1]:19 2857143.1428571427
byte divr8u::rem
byte divr8u::rem#1 reg byte y 1.0000001E7
byte divr8u::rem#10 reg byte y 1.0033334666666666E7
byte divr8u::rem#2 reg byte y 2.0000002E7
byte divr8u::rem#3 reg byte y 2.0000002E7
byte divr8u::rem#4 reg byte y 2.0000002E7
byte divr8u::rem#5 reg byte y 1.0000001E7
byte divr8u::return
byte divr8u::return#0 reg byte a 20002.0
byte divr8u::return#1 return zp[1]:19 5001667.333333333
void main()
label main::@1
label main::@2
label main::@3
label main::@4
label main::@return
void* memset(void* memset::str , byte memset::c , word memset::num)
label memset::@1
label memset::@2
label memset::@return
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
label print_char::@return
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#5 reg byte a 200002.0
byte print_char::ch#6 reg byte a 200002.0
byte print_char::ch#7 reg byte a 1300004.0
byte* print_char_cursor
byte* print_char_cursor#135 print_char_cursor zp[2]:12 601.5
byte* print_char_cursor#138 print_char_cursor zp[2]:12 601.5
byte* print_char_cursor#141 print_char_cursor zp[2]:12 5703.0
byte* print_char_cursor#142 print_char_cursor zp[2]:12 40469.33333333333
byte* print_char_cursor#144 print_char_cursor zp[2]:12 22.444444444444443
byte* print_char_cursor#160 print_char_cursor zp[2]:12 202.0
byte* print_char_cursor#164 print_char_cursor zp[2]:12 202.0
byte* print_char_cursor#169 print_char_cursor zp[2]:12 202.0
byte* print_char_cursor#18 print_char_cursor zp[2]:12 14274.119565217392
byte* print_char_cursor#187 print_char_cursor zp[2]:12 202.0
byte* print_char_cursor#85 print_char_cursor zp[2]:12 1152004.5
void print_cls()
label print_cls::@return
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:4 2949.127450980392
byte* print_line_cursor#21 print_line_cursor zp[2]:4 201003.0
byte* print_line_cursor#41 print_line_cursor zp[2]:4 1405.0
byte* print_line_cursor#43 print_line_cursor zp[2]:4 8.782608695652174
void print_ln()
label print_ln::@1
label print_ln::@return
void print_schar(signed byte print_schar::b)
label print_schar::@1
label print_schar::@2
label print_schar::@3
label print_schar::@4
label print_schar::@return
signed byte print_schar::b
signed byte print_schar::b#0 b zp[1]:3 2002.0
signed byte print_schar::b#1 b zp[1]:3 101.0
signed byte print_schar::b#10 b zp[1]:3 567.8333333333334
signed byte print_schar::b#2 b zp[1]:3 202.0
signed byte print_schar::b#3 b zp[1]:3 202.0
signed byte print_schar::b#4 b zp[1]:3 202.0
signed byte print_schar::b#7 b zp[1]:3 2002.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
label print_sint::@1
label print_sint::@2
label print_sint::@3
label print_sint::@4
label print_sint::@return
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:6 2002.0
signed word print_sint::w#1 w zp[2]:6 101.0
signed word print_sint::w#10 w zp[2]:6 567.8333333333334
signed word print_sint::w#2 w zp[2]:6 202.0
signed word print_sint::w#3 w zp[2]:6 202.0
signed word print_sint::w#4 w zp[2]:6 202.0
signed word print_sint::w#7 w zp[2]:6 2002.0
void print_str(byte* print_str::str)
label print_str::@1
label print_str::@2
label print_str::@3
label print_str::@return
byte* print_str::str
byte* print_str::str#0 str zp[2]:6 200002.0
byte* print_str::str#13 str zp[2]:6 100251.25
byte* print_str::str#16 str zp[2]:6 1001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 200002.0
byte~ print_uchar::$2 reg byte a 200002.0
label print_uchar::@1
label print_uchar::@return
byte print_uchar::b
byte print_uchar::b#0 b zp[1]:3 2002.0
byte print_uchar::b#1 b zp[1]:3 20002.0
byte print_uchar::b#2 b zp[1]:3 20002.0
byte print_uchar::b#3 b zp[1]:3 202.0
byte print_uchar::b#4 b zp[1]:3 202.0
byte print_uchar::b#5 b zp[1]:3 202.0
byte print_uchar::b#6 b zp[1]:3 202.0
byte print_uchar::b#7 b zp[1]:3 55352.25
void print_uint(word print_uint::w)
label print_uint::@1
label print_uint::@return
word print_uint::w
word print_uint::w#0 w zp[2]:6 2002.0
word print_uint::w#1 w zp[2]:6 101.0
word print_uint::w#2 w zp[2]:6 202.0
word print_uint::w#3 w zp[2]:6 202.0
word print_uint::w#4 w zp[2]:6 202.0
word print_uint::w#5 w zp[2]:6 7135.666666666666
signed word rem16s
signed word rem16s#1 rem16s zp[2]:10 10001.0
signed word rem16s#12 rem16s zp[2]:10 913.7727272727273
signed word rem16s#38 rem16s zp[2]:10 20002.0
word rem16u
word rem16u#0 rem16u zp[2]:10 3707.4814814814818
signed byte rem8s
signed byte rem8s#1 reg byte x 1001.0
signed byte rem8s#10 reg byte x 116.83333333333334
signed byte rem8s#33 reg byte x 2002.0
byte rem8u
byte rem8u#18 reg byte x 3850.076923076923
const byte* str[4]  = " / "
const byte* str1[4]  = " = "
const byte* str2[2]  = " "
void test_16s()
byte~ test_16s::$11 reg byte x 151.5
label test_16s::@1
label test_16s::@10
label test_16s::@2
label test_16s::@3
label test_16s::@4
label test_16s::@5
label test_16s::@6
label test_16s::@7
label test_16s::@8
label test_16s::@9
label test_16s::@return
signed word test_16s::dividend
signed word test_16s::dividend#0 dividend zp[2]:6 43.285714285714285
const signed word* test_16s::dividends[]  = { $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff }
signed word test_16s::divisor
signed word test_16s::divisor#0 divisor zp[2]:20 27.545454545454547
const signed word* test_16s::divisors[]  = { 5, -7, $b, -$d, -$11, $13 }
byte test_16s::i
byte test_16s::i#1 i zp[1]:2 151.5
byte test_16s::i#10 i zp[1]:2 11.653846153846153
signed word test_16s::res
signed word test_16s::res#0 res zp[2]:14 20.2
void test_16u()
byte~ test_16u::$11 reg byte x 151.5
label test_16u::@1
label test_16u::@10
label test_16u::@2
label test_16u::@3
label test_16u::@4
label test_16u::@5
label test_16u::@6
label test_16u::@7
label test_16u::@8
label test_16u::@9
label test_16u::@return
word test_16u::dividend
word test_16u::dividend#0 dividend zp[2]:6 43.285714285714285
const word* test_16u::dividends[]  = { $ffff, $ffff, $ffff, $ffff, $ffff, $ffff }
word test_16u::divisor
word test_16u::divisor#0 divisor zp[2]:8 27.545454545454547
const word* test_16u::divisors[]  = { 5, 7, $b, $d, $11, $13 }
byte test_16u::i
byte test_16u::i#1 i zp[1]:2 151.5
byte test_16u::i#10 i zp[1]:2 11.653846153846153
word test_16u::res
word test_16u::res#0 res zp[2]:14 20.2
void test_8s()
label test_8s::@1
label test_8s::@10
label test_8s::@2
label test_8s::@3
label test_8s::@4
label test_8s::@5
label test_8s::@6
label test_8s::@7
label test_8s::@8
label test_8s::@9
label test_8s::@return
signed byte test_8s::dividend
signed byte test_8s::dividend#0 dividend zp[1]:3 43.285714285714285
const signed byte* test_8s::dividends[]  = { $7f, -$7f, -$7f, $7f, $7f, $7f }
signed byte test_8s::divisor
signed byte test_8s::divisor#0 divisor zp[1]:18 27.545454545454547
const signed byte* test_8s::divisors[]  = { 5, 7, -$b, -$d, $11, $13 }
byte test_8s::i
byte test_8s::i#1 i zp[1]:2 151.5
byte test_8s::i#10 i zp[1]:2 16.16
signed byte test_8s::res
signed byte test_8s::res#0 res zp[1]:19 20.2
void test_8u()
label test_8u::@1
label test_8u::@10
label test_8u::@11
label test_8u::@2
label test_8u::@3
label test_8u::@4
label test_8u::@5
label test_8u::@6
label test_8u::@7
label test_8u::@8
label test_8u::@9
label test_8u::@return
byte test_8u::dividend
byte test_8u::dividend#0 dividend zp[1]:3 43.285714285714285
const byte* test_8u::dividends[]  = { $ff, $ff, $ff, $ff, $ff, $ff }
byte test_8u::divisor
byte test_8u::divisor#0 divisor zp[1]:16 30.299999999999997
const byte* test_8u::divisors[]  = { 5, 7, $b, $d, $11, $13 }
byte test_8u::i
byte test_8u::i#1 i zp[1]:2 101.0
byte test_8u::i#10 i zp[1]:2 16.833333333333332
byte test_8u::res
byte test_8u::res#0 res zp[1]:17 22.444444444444443

zp[1]:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ]
reg byte x [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte a [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
zp[1]:3 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
zp[2]:4 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#43 print_line_cursor#0 ]
zp[2]:6 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 test_16u::dividend#0 test_16s::dividend#0 div16s::dividend#0 print_str::str#13 print_str::str#16 print_str::str#0 memset::dst#2 memset::dst#1 ]
reg byte x [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte a [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#1 ]
reg byte x [ rem8s#10 rem8s#33 rem8s#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
zp[2]:8 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 div16u::divisor#0 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 ]
zp[2]:10 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16s#12 rem16s#38 rem16s#1 rem16u#0 ]
zp[2]:12 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 div16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 print_char_cursor#85 print_char_cursor#135 print_char_cursor#160 print_char_cursor#138 print_char_cursor#164 print_char_cursor#142 print_char_cursor#18 print_char_cursor#141 print_char_cursor#144 print_char_cursor#187 print_char_cursor#169 ]
zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 div16u::return#2 test_16u::res#0 div16u::return#0 div16s::return#2 test_16s::res#0 div16s::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[1]:16 [ test_8u::divisor#0 div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
reg byte a [ div8u::return#3 ]
zp[1]:17 [ test_8u::res#0 divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
reg byte x [ test_16u::$11 ]
zp[1]:18 [ test_8s::divisor#0 ]
reg byte x [ div8s::dividend#0 ]
reg byte y [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
zp[1]:19 [ test_8s::res#0 divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ test_16s::$11 ]
zp[2]:20 [ test_16s::divisor#0 div16s::divisor#0 ]
zp[1]:22 [ divr8u::divisor#0 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ print_uchar::$0 ]
reg byte a [ print_uchar::$2 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte y [ div8s::divisoru#1 ]
reg byte a [ div8s::dividendu#1 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#18 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
