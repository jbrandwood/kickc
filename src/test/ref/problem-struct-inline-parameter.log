Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) idx#15 ← phi( __start::@1/(byte) idx#16 )
  (byte) print::c#0 ← (byte) 'c'
  (byte) print::fmt_prefix#0 ← (byte) '-'
  (byte) print::fmt_postfix#0 ← (byte) '-'
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#9 ← phi( main/(byte) idx#5 )
  (byte) idx#0 ← (byte) idx#9
  to:main::@return
main::@return: scope:[main]  from main::@1
  (byte) idx#10 ← phi( main::@1/(byte) idx#0 )
  (byte) idx#1 ← (byte) idx#10
  return 
  to:@return

(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
print: scope:[print]  from main
  (byte) print::fmt_postfix#1 ← phi( main/(byte) print::fmt_postfix#0 )
  (byte) print::c#1 ← phi( main/(byte) print::c#0 )
  (byte) idx#11 ← phi( main/(byte) idx#15 )
  (byte) print::fmt_prefix#1 ← phi( main/(byte) print::fmt_prefix#0 )
  *((const nomodify byte*) SCREEN + (byte) idx#11) ← (byte) print::fmt_prefix#1
  (byte) idx#2 ← ++ (byte) idx#11
  *((const nomodify byte*) SCREEN + (byte) idx#2) ← (byte) print::c#1
  (byte) idx#3 ← ++ (byte) idx#2
  *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) print::fmt_postfix#1
  (byte) idx#4 ← ++ (byte) idx#3
  to:print::@return
print::@return: scope:[print]  from print
  (byte) idx#12 ← phi( print/(byte) idx#4 )
  (byte) idx#5 ← (byte) idx#12
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) idx#6 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) idx#16 ← phi( __start::__init1/(byte) idx#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) idx#13 ← phi( __start::@1/(byte) idx#1 )
  (byte) idx#7 ← (byte) idx#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) idx#14 ← phi( __start::@2/(byte) idx#7 )
  (byte) idx#8 ← (byte) idx#14
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) format::postfix
(byte) format::prefix
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@return
(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
(label) print::@return
(byte) print::c
(byte) print::c#0
(byte) print::c#1
(struct format) print::fmt
(byte) print::fmt_postfix
(byte) print::fmt_postfix#0
(byte) print::fmt_postfix#1
(byte) print::fmt_prefix
(byte) print::fmt_prefix#0
(byte) print::fmt_prefix#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias idx#0 = idx#9 idx#10 idx#1 
Alias idx#12 = idx#4 idx#5 
Alias idx#16 = idx#6 
Alias idx#13 = idx#7 idx#14 idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#15 (byte) idx#16
Identical Phi Values (byte) idx#0 (byte) idx#12
Identical Phi Values (byte) print::fmt_prefix#1 (byte) print::fmt_prefix#0
Identical Phi Values (byte) idx#11 (byte) idx#15
Identical Phi Values (byte) print::c#1 (byte) print::c#0
Identical Phi Values (byte) print::fmt_postfix#1 (byte) print::fmt_postfix#0
Identical Phi Values (byte) idx#13 (byte) idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) print::c#0 = 'c'
Constant (const byte) print::fmt_prefix#0 = '-'
Constant (const byte) print::fmt_postfix#0 = '-'
Constant (const byte) idx#16 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [8] *((const nomodify byte*) SCREEN + (const byte) idx#16) ← (const byte) print::fmt_prefix#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) idx#12 and assignment [7] (byte) idx#12 ← ++ (byte) idx#3
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [3] (byte) idx#2 ← ++ (const byte) idx#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#2 = ++idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) idx#3 ← ++ (const byte) idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#3 = ++idx#2
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) idx#16
Inlining constant with different constant siblings (const byte) idx#2
Inlining constant with different constant siblings (const byte) idx#3
Constant inlined idx#2 = ++(byte) 0
Constant inlined idx#3 = ++++(byte) 0
Constant inlined idx#16 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [main] to print:1 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) main::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return

(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
print: scope:[print]  from main
  [3] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0
  [4] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0
  [5] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0
  to:print::@return
print::@return: scope:[print]  from print
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) format::postfix
(byte) format::prefix
(byte) idx
(void()) main()
(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
(byte) print::c
(struct format) print::fmt
(byte) print::fmt_postfix
(byte) print::fmt_prefix

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates problem with passing an inline struct value as a parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call print 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // print
print: {
    .const c = 'c'
    .const fmt_prefix = '-'
    .const fmt_postfix = '-'
    // [3] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_prefix
    sta SCREEN
    // [4] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [5] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_postfix
    sta SCREEN+2
    jmp __breturn
    // print::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 [ ] ( print:1 [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 [ ] ( print:1 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 [ ] ( print:1 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [format] 
Uplift Scope [main] 
Uplift Scope [print] 
Uplift Scope [] 

Uplifting [format] best 42 combination 
Uplifting [main] best 42 combination 
Uplifting [print] best 42 combination 
Uplifting [] best 42 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates problem with passing an inline struct value as a parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call print 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // print
print: {
    .const c = 'c'
    .const fmt_prefix = '-'
    .const fmt_postfix = '-'
    // [3] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_prefix
    sta SCREEN
    // [4] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // [5] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_postfix
    sta SCREEN+2
    jmp __breturn
    // print::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) format::postfix
(byte) format::prefix
(byte) idx
(void()) main()
(label) main::@return
(void()) print((byte) print::c , (byte) print::fmt_prefix , (byte) print::fmt_postfix)
(label) print::@return
(byte) print::c
(const byte) print::c#0 c = (byte) 'c'
(struct format) print::fmt
(byte) print::fmt_postfix
(const byte) print::fmt_postfix#0 fmt_postfix = (byte) '-'
(byte) print::fmt_prefix
(const byte) print::fmt_prefix#0 fmt_prefix = (byte) '-'



FINAL ASSEMBLER
Score: 36

  // File Comments
// Illustrates problem with passing an inline struct value as a parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // print('c', (struct format){ '-', '-' } )
    // [1] call print 
    jsr print
    // main::@return
    // }
    // [2] return 
    rts
}
  // print
print: {
    .const c = 'c'
    .const fmt_prefix = '-'
    .const fmt_postfix = '-'
    // SCREEN[idx++] = fmt.prefix
    // [3] *((const nomodify byte*) SCREEN) ← (const byte) print::fmt_prefix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_prefix
    sta SCREEN
    // SCREEN[idx++] = c
    // [4] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) print::c#0 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN+1
    // SCREEN[idx++] = fmt.postfix
    // [5] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) print::fmt_postfix#0 -- _deref_pbuc1=vbuc2 
    lda #fmt_postfix
    sta SCREEN+2
    // print::@return
    // }
    // [6] return 
    rts
}
  // File Data

