Identified constant variable (dword) main::dw

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  to:@1
main: scope:[main]  from @1
  (dword) main::dw#0 ← (word/signed word/dword/signed dword) $2000
  (word~) main::$0 ← < (dword) main::dw#0
  (word) main::w1#0 ← (word~) main::$0
  (dword~) main::$1 ← (dword) main::dw#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (word~) main::$2 ← < (dword~) main::$1
  (word) main::w2#0 ← (word~) main::$2
  (byte~) main::$3 ← < (word) main::w1#0
  *((byte*) SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) main::$3
  (byte~) main::$4 ← > (word) main::w1#0
  *((byte*) SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$4
  (byte~) main::$5 ← < (word) main::w2#0
  *((byte*) SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$5
  (byte~) main::$6 ← > (word) main::w2#0
  *((byte*) SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte~) main::$6
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(void()) main()
(word~) main::$0
(dword~) main::$1
(word~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(label) main::@return
(dword) main::dw
(dword) main::dw#0
(word) main::w1
(word) main::w1#0
(word) main::w2
(word) main::w2#0

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word) main::w1#0 = (word~) main::$0 
Alias (word) main::w2#0 = (word~) main::$2 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const dword) main::dw#0 = $2000
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::w1#0 = <main::dw#0
Constant (const dword) main::$1 = main::dw#0+1
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::w2#0 = <main::$1
Constant (const byte) main::$3 = <main::w1#0
Constant (const byte) main::$4 = >main::w1#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$5 = <main::w2#0
Constant (const byte) main::$6 = >main::w2#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(SCREEN#0+0)
Consolidated array index constant in *(SCREEN#0+1)
Consolidated array index constant in *(SCREEN#0+3)
Consolidated array index constant in *(SCREEN#0+4)
Successful SSA optimization Pass2ConstantAdditionElimination
Constant inlined main::$5 = <(const word) main::w2#0
Constant inlined main::$6 = >(const word) main::w2#0
Constant inlined main::$3 = <(const word) main::w1#0
Constant inlined main::$4 = >(const word) main::w1#0
Constant inlined main::$1 = (const dword) main::dw#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SCREEN#0+0
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← <(const word) main::w1#0
  [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const word) main::w1#0
  [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <(const word) main::w2#0
  [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← >(const word) main::w2#0
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(dword) main::dw
(word) main::w1
(word) main::w2

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Illustrates problem with constant evaluation of lo/hi-operator
// $20000 /$400 results in a byte value - confusing the lo/hi-evaluation
// which currently relies on getting the type from the literal value.
// A fix could be adding support for "declared" types for constant literal values
// - enabling the lo/hi to know that their operand is a word (from the cast).
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const dw = $2000
    .const w1 = dw&$ffff
    .const w2 = <dw+1
  //SEG10 [4] *((const byte*) SCREEN#0) ← <(const word) main::w1#0 -- _deref_pbuc1=vbuc2 
    lda #<w1
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const word) main::w1#0 -- _deref_pbuc1=vbuc2 
    lda #>w1
    sta SCREEN+1
  //SEG12 [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <(const word) main::w2#0 -- _deref_pbuc1=vbuc2 
    lda #<w2
    sta SCREEN+3
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← >(const word) main::w2#0 -- _deref_pbuc1=vbuc2 
    lda #>w2
    sta SCREEN+4
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← <(const word) main::w1#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const word) main::w1#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <(const word) main::w2#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← >(const word) main::w2#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Illustrates problem with constant evaluation of lo/hi-operator
// $20000 /$400 results in a byte value - confusing the lo/hi-evaluation
// which currently relies on getting the type from the literal value.
// A fix could be adding support for "declared" types for constant literal values
// - enabling the lo/hi to know that their operand is a word (from the cast).
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const dw = $2000
    .const w1 = dw&$ffff
    .const w2 = <dw+1
  //SEG10 [4] *((const byte*) SCREEN#0) ← <(const word) main::w1#0 -- _deref_pbuc1=vbuc2 
    lda #<w1
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const word) main::w1#0 -- _deref_pbuc1=vbuc2 
    lda #>w1
    sta SCREEN+1
  //SEG12 [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <(const word) main::w2#0 -- _deref_pbuc1=vbuc2 
    lda #<w2
    sta SCREEN+3
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← >(const word) main::w2#0 -- _deref_pbuc1=vbuc2 
    lda #>w2
    sta SCREEN+4
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(void()) main()
(label) main::@return
(dword) main::dw
(const dword) main::dw#0 dw = (word/signed word/dword/signed dword) $2000
(word) main::w1
(const word) main::w1#0 w1 = <(const dword) main::dw#0
(word) main::w2
(const word) main::w2#0 w2 = <(const dword) main::dw#0+(byte/signed byte/word/signed word/dword/signed dword) 1



FINAL ASSEMBLER
Score: 30

//SEG0 File Comments
// Illustrates problem with constant evaluation of lo/hi-operator
// $20000 /$400 results in a byte value - confusing the lo/hi-evaluation
// which currently relies on getting the type from the literal value.
// A fix could be adding support for "declared" types for constant literal values
// - enabling the lo/hi to know that their operand is a word (from the cast).
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const dw = $2000
    .const w1 = dw&$ffff
    .const w2 = <dw+1
  //SEG10 [4] *((const byte*) SCREEN#0) ← <(const word) main::w1#0 -- _deref_pbuc1=vbuc2 
    lda #<w1
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const word) main::w1#0 -- _deref_pbuc1=vbuc2 
    lda #>w1
    sta SCREEN+1
  //SEG12 [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← <(const word) main::w2#0 -- _deref_pbuc1=vbuc2 
    lda #<w2
    sta SCREEN+3
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← >(const word) main::w2#0 -- _deref_pbuc1=vbuc2 
    lda #>w2
    sta SCREEN+4
  //SEG14 main::@return
  //SEG15 [8] return 
    rts
}

