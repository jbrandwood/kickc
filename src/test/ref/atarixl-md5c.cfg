
void main()
main: scope:[main]  from
  [0] phi()
  [1] call cputs 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call strlen 
  [4] strlen::return#3 = strlen::len#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] md5::initial_len#0 = strlen::return#3
  [6] call md5 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3
  [7] phi()
  to:main::@1

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main md5::@10 md5::@16 md5::@17 md5::@20 md5::@38 md5::@40 md5::@52 md5::@54 printf_number_buffer::@4
  [8] cputs::s#12 = phi( main/main::s, md5::@10/md5::s1, md5::@16/md5::s4, md5::@17/md5::s7, md5::@20/md5::s, md5::@38/md5::s2, md5::@40/md5::s3, md5::@52/md5::s5, md5::@54/md5::s6, printf_number_buffer::@4/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [9] cputs::s#11 = phi( cputs/cputs::s#12, cputs::@2/cputs::s#0 )
  [10] cputs::c#1 = *cputs::s#11
  [11] cputs::s#0 = ++ cputs::s#11
  [12] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [13] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [14] cputc::c = cputs::c#1
  [15] call cputc 
  to:cputs::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from main::@2 printf_number_buffer::@5
  [16] strlen::str#5 = phi( main::@2/main::message, printf_number_buffer::@5/printf_number_buffer::buffer_digits#0 )
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [17] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [17] strlen::str#3 = phi( strlen/strlen::str#5, strlen::@2/strlen::str#0 )
  [18] if(0!=*strlen::str#3) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [19] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [20] strlen::len#1 = ++ strlen::len#2
  [21] strlen::str#0 = ++ strlen::str#3
  to:strlen::@1

void md5(byte* md5::initial_msg , word md5::initial_len)
md5: scope:[md5]  from main::@3
  [22] md5::$0 = md5::initial_len#0 + 8
  [23] md5::$1 = md5::$0 >> 6
  [24] md5::$2 = md5::$1 + 1
  [25] md5::$3 = md5::$2 << 6
  [26] md5::new_len#0 = md5::$3 - 8
  [27] calloc::nitems#0 = md5::new_len#0 + $40
  [28] call calloc 
  [29] calloc::return#2 = calloc::return#0
  to:md5::@18
md5::@18: scope:[md5]  from md5
  [30] md5::msg#1 = calloc::return#2
  [31] memcpy::num#1 = md5::initial_len#0
  [32] memcpy::destination#7 = (void*)(byte*)md5::msg#1
  [33] call memcpy 
  to:md5::@19
md5::@19: scope:[md5]  from md5::@18
  [34] md5::$89 = (byte*)md5::msg#1 + md5::initial_len#0
  [35] *md5::$89 = $80
  [36] md5::$8 = md5::initial_len#0 << 3
  [37] md5::bits_len = md5::$8
  [38] memcpy::destination#2 = (byte*)md5::msg#1 + md5::new_len#0
  [39] memcpy::destination#8 = (void*)memcpy::destination#2
  [40] call memcpy 
  to:md5::@1
md5::@1: scope:[md5]  from md5::@19 md5::@5
  [41] h3#0 = phi( md5::@19/$10325476, md5::@5/h3#3 )
  [41] h2#0 = phi( md5::@19/$98badcfe, md5::@5/h2#3 )
  [41] h1#0 = phi( md5::@19/$efcdab89, md5::@5/h1#3 )
  [41] h0#0 = phi( md5::@19/$67452301, md5::@5/h0#3 )
  [41] md5::offset#10 = phi( md5::@19/0, md5::@5/md5::offset#1 )
  [42] if(md5::offset#10<md5::new_len#0) goto md5::@2
  to:md5::@return
md5::@return: scope:[md5]  from md5::@1
  [43] return 
  to:@return
md5::@2: scope:[md5]  from md5::@1
  [44] md5::w#0 = (byte*)md5::msg#1 + md5::offset#10
  [45] md5::a#0 = h0#0
  [46] md5::b#0 = h1#0
  [47] md5::c#0 = h2#0
  [48] md5::d#0 = h3#0
  to:md5::@3
md5::@3: scope:[md5]  from md5::@11 md5::@2
  [49] md5::d#10 = phi( md5::@11/md5::d#62, md5::@2/md5::d#0 )
  [49] md5::d#1 = phi( md5::@11/md5::d#64, md5::@2/md5::c#0 )
  [49] md5::b#10 = phi( md5::@11/md5::b#62, md5::@2/md5::b#0 )
  [49] md5::a#11 = phi( md5::@11/md5::a#59, md5::@2/md5::a#0 )
  [49] md5::i#13 = phi( md5::@11/md5::i#1, md5::@2/0 )
  [50] if(md5::i#13<$40) goto md5::@4
  to:md5::@5
md5::@5: scope:[md5]  from md5::@3
  [51] h0#3 = h0#0 + md5::a#11
  [52] h1#3 = h1#0 + md5::b#10
  [53] h2#3 = h2#0 + md5::d#1
  [54] h3#3 = h3#0 + md5::d#10
  [55] md5::offset#1 = md5::offset#10 + (signed byte)$200/8
  to:md5::@1
md5::@4: scope:[md5]  from md5::@3
  [56] printf_uchar::uvalue#4 = md5::i#13
  [57] call printf_uchar 
  to:md5::@20
md5::@20: scope:[md5]  from md5::@4
  [58] phi()
  [59] call cputs 
  to:md5::@21
md5::@21: scope:[md5]  from md5::@20
  [60] print32::l = md5::a#11
  [61] call print32 
  to:md5::@22
md5::@22: scope:[md5]  from md5::@21
  [62] cputc::c = ' 'at
  [63] call cputc 
  to:md5::@23
md5::@23: scope:[md5]  from md5::@22
  [64] print32::l = md5::b#10
  [65] call print32 
  to:md5::@24
md5::@24: scope:[md5]  from md5::@23
  [66] cputc::c = ' 'at
  [67] call cputc 
  to:md5::@25
md5::@25: scope:[md5]  from md5::@24
  [68] print32::l = md5::d#1
  [69] call print32 
  to:md5::@26
md5::@26: scope:[md5]  from md5::@25
  [70] cputc::c = ' 'at
  [71] call cputc 
  to:md5::@27
md5::@27: scope:[md5]  from md5::@26
  [72] print32::l = md5::d#10
  [73] call print32 
  to:md5::@28
md5::@28: scope:[md5]  from md5::@27
  [74] phi()
  [75] call cputln 
  to:md5::@29
md5::@29: scope:[md5]  from md5::@28
  [76] phi()
  [77] call waitFrames 
  to:md5::BREAK1
md5::BREAK1: scope:[md5]  from md5::@29
  kickasm() {{ .break  }}
  to:md5::@15
md5::@15: scope:[md5]  from md5::BREAK1
  [79] md5::$25 = md5::i#13 >> 4
  [80] md5::$26 = md5::$25 & 3
  [81] if(md5::$26==0) goto md5::@6
  to:md5::@12
md5::@12: scope:[md5]  from md5::@15
  [82] if(md5::$26==1) goto md5::@7
  to:md5::@13
md5::@13: scope:[md5]  from md5::@12
  [83] if(md5::$26==2) goto md5::@8
  to:md5::@14
md5::@14: scope:[md5]  from md5::@13
  [84] if(md5::$26==3) goto md5::@9
  to:md5::@59
md5::@59: scope:[md5]  from md5::@14
  [85] md5::i#62 = md5::i#13
  [86] md5::temp#19 = md5::d#10
  to:md5::@10
md5::@10: scope:[md5]  from md5::@31 md5::@33 md5::@35 md5::@59 md5::@6
  [87] md5::i#10 = phi( md5::@59/md5::i#62, md5::@31/md5::i#63, md5::@33/md5::i#64, md5::@35/md5::i#65, md5::@6/md5::i#66 )
  [87] md5::temp#0 = phi( md5::@59/md5::temp#19, md5::@31/md5::temp#20, md5::@33/md5::temp#21, md5::@35/md5::temp#22, md5::@6/md5::temp#23 )
  [87] md5::g#10 = phi( md5::@59/0, md5::@31/md5::g#2, md5::@33/md5::g#3, md5::@35/md5::g#4, md5::@6/md5::g#38 )
  [87] md5::f#10 = phi( md5::@59/0, md5::@31/md5::f#12, md5::@33/md5::f#13, md5::@35/md5::f#14, md5::@6/md5::f#1 )
  [88] call cputs 
  to:md5::@36
md5::@36: scope:[md5]  from md5::@10
  [89] print32::l = md5::f#10
  [90] call print32 
  to:md5::@37
md5::@37: scope:[md5]  from md5::@36
  [91] cputc::c = ' 'at
  [92] call cputc 
  to:md5::@38
md5::@38: scope:[md5]  from md5::@37
  [93] phi()
  [94] call cputs 
  to:md5::@39
md5::@39: scope:[md5]  from md5::@38
  [95] printf_uchar::uvalue#5 = md5::g#10
  [96] call printf_uchar 
  to:md5::@40
md5::@40: scope:[md5]  from md5::@39
  [97] phi()
  [98] call cputs 
  to:md5::@41
md5::@41: scope:[md5]  from md5::@40
  [99] md5::$84 = md5::g#10 << 2
  [100] print32::l = ((dword*)md5::w#0)[md5::$84]
  [101] call print32 
  to:md5::@42
md5::@42: scope:[md5]  from md5::@41
  [102] phi()
  [103] call cputln 
  to:md5::@43
md5::@43: scope:[md5]  from md5::@42
  [104] phi()
  [105] call waitFrames 
  to:md5::BREAK2
md5::BREAK2: scope:[md5]  from md5::@43
  kickasm() {{ .break  }}
  to:md5::@16
md5::@16: scope:[md5]  from md5::BREAK2
  [107] phi()
  [108] call cputs 
  to:md5::@44
md5::@44: scope:[md5]  from md5::@16
  [109] print32::l = md5::a#11
  [110] call print32 
  to:md5::@45
md5::@45: scope:[md5]  from md5::@44
  [111] cputc::c = ' 'at
  [112] call cputc 
  to:md5::@46
md5::@46: scope:[md5]  from md5::@45
  [113] print32::l = md5::f#10
  [114] call print32 
  to:md5::@47
md5::@47: scope:[md5]  from md5::@46
  [115] cputc::c = ' 'at
  [116] call cputc 
  to:md5::@48
md5::@48: scope:[md5]  from md5::@47
  [117] md5::$87 = md5::i#10 << 2
  [118] print32::l = md5::k[md5::$87]
  [119] call print32 
  to:md5::@49
md5::@49: scope:[md5]  from md5::@48
  [120] cputc::c = ' 'at
  [121] call cputc 
  to:md5::@50
md5::@50: scope:[md5]  from md5::@49
  [122] print32::l = ((dword*)md5::w#0)[md5::$84]
  [123] call print32 
  to:md5::@51
md5::@51: scope:[md5]  from md5::@50
  [124] cputc::c = ' 'at
  [125] call cputc 
  to:md5::@52
md5::@52: scope:[md5]  from md5::@51
  [126] phi()
  [127] call cputs 
  to:md5::@53
md5::@53: scope:[md5]  from md5::@52
  [128] printf_uchar::uvalue#6 = md5::r[md5::i#10]
  [129] call printf_uchar 
  to:md5::@54
md5::@54: scope:[md5]  from md5::@53
  [130] phi()
  [131] call cputs 
  to:md5::@55
md5::@55: scope:[md5]  from md5::@54
  [132] phi()
  [133] call waitFrames 
  to:md5::BREAK3
md5::BREAK3: scope:[md5]  from md5::@55
  kickasm() {{ .break  }}
  to:md5::@17
md5::@17: scope:[md5]  from md5::BREAK3
  [135] md5::$72 = md5::a#11 + md5::f#10
  [136] md5::$69 = md5::$72 + md5::k[md5::$87]
  [137] md5::$70 = md5::$69 + ((dword*)md5::w#0)[md5::$84]
  [138] md5::$71 = md5::$70 << md5::r[md5::i#10]
  [139] md5::$73 = md5::$72 + md5::k[md5::$87]
  [140] md5::$74 = md5::$73 + ((dword*)md5::w#0)[md5::$84]
  [141] md5::$75 = $20 - md5::r[md5::i#10]
  [142] md5::$76 = md5::$74 >> md5::$75
  [143] md5::lr#0 = md5::$71 | md5::$76
  [144] call cputs 
  to:md5::@56
md5::@56: scope:[md5]  from md5::@17
  [145] print32::l = md5::lr#0
  [146] call print32 
  to:md5::@57
md5::@57: scope:[md5]  from md5::@56
  [147] phi()
  [148] call cputln 
  to:md5::@58
md5::@58: scope:[md5]  from md5::@57
  [149] md5::b#1 = md5::b#10 + md5::lr#0
  to:md5::@11
md5::@11: scope:[md5]  from md5::@58
  [150] md5::i#1 = ++ md5::i#10
  [151] md5::d#62 = md5::d#1
  [152] md5::d#64 = md5::b#10
  [153] md5::b#62 = md5::b#1
  [154] md5::a#59 = md5::temp#0
  to:md5::@3
md5::@9: scope:[md5]  from md5::@14
  [155] md5::$43 = ~ md5::d#10
  [156] md5::$44 = md5::b#10 | md5::$43
  [157] md5::f#14 = md5::d#1 ^ md5::$44
  [158] mul7::a#0 = md5::i#13
  [159] call mul7 
  [160] mul7::return#2 = mul7::return#0
  to:md5::@34
md5::@34: scope:[md5]  from md5::@9
  [161] mod16::a#2 = mul7::return#2
  [162] call mod16 
  [163] mod16::return#4 = mod16::return#0
  to:md5::@35
md5::@35: scope:[md5]  from md5::@34
  [164] md5::g#4 = mod16::return#4
  [165] md5::i#65 = md5::i#13
  [166] md5::temp#22 = md5::d#10
  to:md5::@10
md5::@8: scope:[md5]  from md5::@13
  [167] md5::$38 = md5::b#10 ^ md5::d#1
  [168] md5::f#13 = md5::$38 ^ md5::d#10
  [169] mul3::a#0 = md5::i#13
  [170] call mul3 
  [171] mul3::return#2 = mul3::return#0
  to:md5::@32
md5::@32: scope:[md5]  from md5::@8
  [172] md5::$40 = mul3::return#2
  [173] mod16::a#1 = md5::$40 + 5
  [174] call mod16 
  [175] mod16::return#3 = mod16::return#0
  to:md5::@33
md5::@33: scope:[md5]  from md5::@32
  [176] md5::g#3 = mod16::return#3
  [177] md5::i#64 = md5::i#13
  [178] md5::temp#21 = md5::d#10
  to:md5::@10
md5::@7: scope:[md5]  from md5::@12
  [179] md5::$31 = md5::d#10 & md5::b#10
  [180] md5::$32 = ~ md5::d#10
  [181] md5::$33 = md5::$32 & md5::d#1
  [182] md5::f#12 = md5::$31 | md5::$33
  [183] mul5::a#0 = md5::i#13
  [184] call mul5 
  [185] mul5::return#2 = mul5::return#0
  to:md5::@30
md5::@30: scope:[md5]  from md5::@7
  [186] md5::$35 = mul5::return#2
  [187] mod16::a#0 = md5::$35 + 1
  [188] call mod16 
  [189] mod16::return#2 = mod16::return#0
  to:md5::@31
md5::@31: scope:[md5]  from md5::@30
  [190] md5::g#2 = mod16::return#2
  [191] md5::i#63 = md5::i#13
  [192] md5::temp#20 = md5::d#10
  to:md5::@10
md5::@6: scope:[md5]  from md5::@15
  [193] md5::$27 = md5::b#10 & md5::d#1
  [194] md5::$28 = ~ md5::b#10
  [195] md5::$29 = md5::$28 & md5::d#10
  [196] md5::f#1 = md5::$27 | md5::$29
  [197] md5::i#66 = md5::i#13
  [198] md5::temp#23 = md5::d#10
  [199] md5::g#38 = md5::i#13
  to:md5::@10

void cputc(volatile byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 md5::@22 md5::@24 md5::@26 md5::@37 md5::@45 md5::@47 md5::@49 md5::@51 printf_number_buffer::@8 printf_padding::@2
  [200] if(cputc::c==''at) goto cputc::@1
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc
  [201] if(cputc::c=='
'at) goto cputc::@2
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@3
  [202] if(cputc::c==$9b) goto cputc::@2
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@8
  [203] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0]
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::convertToScreenCode1
  [204] phi()
  [205] call putchar 
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::@6
  [206] *COLCRS = ++ *COLCRS
  [207] if(*COLCRS==$28) goto cputc::@5
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@7
  [208] phi()
  [209] call setcursor 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@4 cputc::@5
  [210] return 
  to:@return
cputc::@5: scope:[cputc]  from cputc::@7
  [211] *COLCRS = 0
  [212] call newline 
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc::@3 cputc::@8
  [213] *COLCRS = 0
  [214] call newline 
  to:cputc::@return
cputc::@1: scope:[cputc]  from cputc
  [215] *COLCRS = 0
  [216] call setcursor 
  to:cputc::@return

void* calloc(word calloc::nitems , word calloc::size)
calloc: scope:[calloc]  from md5
  [217] malloc::size#0 = calloc::nitems#0
  [218] call malloc 
  to:calloc::@1
calloc::@1: scope:[calloc]  from calloc
  [219] calloc::return#0 = (void*)malloc::mem#0
  [220] memset::num#0 = calloc::nitems#0
  [221] memset::str#0 = calloc::return#0
  [222] call memset 
  to:calloc::@return
calloc::@return: scope:[calloc]  from calloc::@1
  [223] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from md5::@18 md5::@19 newline::@2
  [224] memcpy::num#3 = phi( md5::@18/memcpy::num#1, md5::@19/4, newline::@2/(word)$28*$17 )
  [224] memcpy::destination#3 = phi( md5::@18/memcpy::destination#7, md5::@19/memcpy::destination#8, newline::@2/memcpy::destination#0 )
  [224] memcpy::source#3 = phi( md5::@18/(void*)main::message, md5::@19/(void*)&md5::bits_len, newline::@2/memcpy::source#4 )
  [225] memcpy::src_end#0 = (byte*)memcpy::source#3 + memcpy::num#3
  [226] memcpy::dst#4 = (byte*)memcpy::destination#3
  [227] memcpy::src#4 = (byte*)memcpy::source#3
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [228] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [228] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [229] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [230] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [231] *memcpy::dst#2 = *memcpy::src#2
  [232] memcpy::dst#1 = ++ memcpy::dst#2
  [233] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from md5::@39 md5::@4 md5::@53 print32 print32::@1 print32::@2 print32::@3
  [234] printf_uchar::format_zero_padding#10 = phi( md5::@4/0, md5::@39/0, md5::@53/0, print32/1, print32::@1/1, print32::@2/1, print32::@3/1 )
  [234] printf_uchar::uvalue#10 = phi( md5::@4/printf_uchar::uvalue#4, md5::@39/printf_uchar::uvalue#5, md5::@53/printf_uchar::uvalue#6, print32/printf_uchar::uvalue#0, print32::@1/printf_uchar::uvalue#1, print32::@2/printf_uchar::uvalue#2, print32::@3/printf_uchar::uvalue#3 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [235] *((byte*)&printf_buffer) = 0
  [236] uctoa::value#1 = printf_uchar::uvalue#10
  [237] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [238] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [239] printf_number_buffer::format_zero_padding#0 = printf_uchar::format_zero_padding#10
  [240] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [241] return 
  to:@return

void print32(volatile dword print32::l)
print32: scope:[print32]  from md5::@21 md5::@23 md5::@25 md5::@27 md5::@36 md5::@41 md5::@44 md5::@46 md5::@48 md5::@50 md5::@56
  [242] printf_uchar::uvalue#0 = *print32::dp#1
  [243] call printf_uchar 
  to:print32::@1
print32::@1: scope:[print32]  from print32
  [244] printf_uchar::uvalue#1 = *(print32::dp#1+1)
  [245] call printf_uchar 
  to:print32::@2
print32::@2: scope:[print32]  from print32::@1
  [246] printf_uchar::uvalue#2 = *(print32::dp#1+2)
  [247] call printf_uchar 
  to:print32::@3
print32::@3: scope:[print32]  from print32::@2
  [248] printf_uchar::uvalue#3 = *(print32::dp#1+3)
  [249] call printf_uchar 
  to:print32::@return
print32::@return: scope:[print32]  from print32::@3
  [250] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from md5::@28 md5::@42 md5::@57
  [251] *COLCRS = 0
  [252] call newline 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [253] return 
  to:@return

void waitFrames(signed byte waitFrames::frames)
waitFrames: scope:[waitFrames]  from md5::@29 md5::@43 md5::@55
  [254] phi()
  to:waitFrames::@1
waitFrames::@1: scope:[waitFrames]  from waitFrames waitFrames::@2
  [255] waitFrames::frames#4 = phi( waitFrames/2, waitFrames::@2/waitFrames::frames#0 )
  [256] if(waitFrames::frames#4>0) goto waitFrames::waitFrame1
  to:waitFrames::@return
waitFrames::@return: scope:[waitFrames]  from waitFrames::@1
  [257] return 
  to:@return
waitFrames::waitFrame1: scope:[waitFrames]  from waitFrames::@1
  asm { ldaRTCLOK+2 !: cmpRTCLOK+2 beq!-  }
  to:waitFrames::@2
waitFrames::@2: scope:[waitFrames]  from waitFrames::waitFrame1
  [259] waitFrames::frames#0 = -- waitFrames::frames#4
  to:waitFrames::@1

word mul7(byte mul7::a)
mul7: scope:[mul7]  from md5::@9
  [260] mul7::$1 = (word)mul7::a#0
  [261] mul7::$2 = mul7::$1 << 1
  [262] mul7::$3 = mul7::$2 + mul7::$1
  [263] mul7::$4 = mul7::$3 << 1
  [264] mul7::return#0 = mul7::$4 + mul7::$1
  to:mul7::@return
mul7::@return: scope:[mul7]  from mul7
  [265] return 
  to:@return

byte mod16(word mod16::a)
mod16: scope:[mod16]  from md5::@30 md5::@32 md5::@34
  [266] mod16::a#3 = phi( md5::@30/mod16::a#0, md5::@32/mod16::a#1, md5::@34/mod16::a#2 )
  [267] mod16::t#0 = mod16::a#3 & $10-1
  [268] mod16::return#0 = mod16::t#0 & $ff
  to:mod16::@return
mod16::@return: scope:[mod16]  from mod16
  [269] return 
  to:@return

word mul3(byte mul3::a)
mul3: scope:[mul3]  from md5::@8
  [270] mul3::$1 = (word)mul3::a#0
  [271] mul3::$2 = mul3::$1 << 1
  [272] mul3::return#0 = mul3::$2 + mul3::$1
  to:mul3::@return
mul3::@return: scope:[mul3]  from mul3
  [273] return 
  to:@return

word mul5(byte mul5::a)
mul5: scope:[mul5]  from md5::@7
  [274] mul5::$1 = (word)mul5::a#0
  [275] mul5::$2 = mul5::$1 << 2
  [276] mul5::return#0 = mul5::$2 + mul5::$1
  to:mul5::@return
mul5::@return: scope:[mul5]  from mul5
  [277] return 
  to:@return

void putchar(byte putchar::code)
putchar: scope:[putchar]  from cputc::@6
  [278] *(*OLDADR) = *OLDCHR
  [279] call cursorLocation 
  [280] cursorLocation::return#0 = cursorLocation::return#1
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  [281] putchar::loc#0 = cursorLocation::return#0
  [282] putchar::newChar#0 = cputc::convertToScreenCode1_return#0
  [283] *putchar::loc#0 = putchar::newChar#0
  [284] *OLDCHR = putchar::newChar#0
  [285] call setcursor 
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@1
  [286] return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@4 newline::@1 putchar::@1
  [287] *(*OLDADR) = *OLDCHR
  [288] call cursorLocation 
  [289] cursorLocation::return#3 = cursorLocation::return#1
  to:setcursor::@3
setcursor::@3: scope:[setcursor]  from setcursor
  [290] setcursor::loc#0 = cursorLocation::return#3
  [291] setcursor::c#0 = *setcursor::loc#0
  [292] *OLDCHR = setcursor::c#0
  [293] *OLDADR = setcursor::loc#0
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@3
  [294] *CRSINH = 0
  [295] setcursor::c#1 = setcursor::c#0 ^ $80
  to:setcursor::@1
setcursor::@1: scope:[setcursor]  from setcursor::@2
  [296] *(*OLDADR) = setcursor::c#1
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@1
  [297] return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@5 cputln
  [298] *ROWCRS = ++ *ROWCRS
  [299] if(*ROWCRS!=$18) goto newline::@1
  to:newline::@3
newline::@3: scope:[newline]  from newline
  [300] *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@2
newline::@2: scope:[newline]  from newline::@3
  [301] newline::start#0 = *SAVMSC
  [302] memcpy::source#0 = newline::start#0 + $28
  [303] memcpy::destination#0 = (void*)newline::start#0
  [304] memcpy::source#4 = (void*)memcpy::source#0
  [305] call memcpy 
  to:newline::@4
newline::@4: scope:[newline]  from newline::@2
  [306] memset::str#1 = newline::start#0 + (word)$28*$17
  [307] memset::str#8 = (void*)memset::str#1
  [308] call memset 
  to:newline::@5
newline::@5: scope:[newline]  from newline::@4
  [309] *ROWCRS = (byte)$18-1
  to:newline::@1
newline::@1: scope:[newline]  from newline newline::@5
  [310] phi()
  [311] call setcursor 
  to:newline::@return
newline::@return: scope:[newline]  from newline::@1
  [312] return 
  to:@return

void* malloc(word malloc::size)
malloc: scope:[malloc]  from calloc
  [313] malloc::mem#0 = HEAP_TOP - malloc::size#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [314] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from calloc::@1 newline::@4
  [315] memset::str#3 = phi( calloc::@1/memset::str#0, newline::@4/memset::str#8 )
  [315] memset::num#2 = phi( calloc::@1/memset::num#0, newline::@4/$28 )
  [316] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [317] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [318] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [319] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [320] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [321] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [322] *memset::dst#2 = 0
  [323] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [324] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [325] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [325] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [325] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/uctoa::value#1 )
  [325] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [326] if(uctoa::digit#2<2-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [327] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [328] uctoa::buffer#3 = ++ uctoa::buffer#11
  [329] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [330] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [331] uctoa::digit_value#0 = RADIX_HEXADECIMAL_VALUES_CHAR[uctoa::digit#2]
  [332] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [333] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [334] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [334] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [334] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [335] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [336] uctoa_append::buffer#0 = uctoa::buffer#11
  [337] uctoa_append::value#0 = uctoa::value#2
  [338] uctoa_append::sub#0 = uctoa::digit_value#0
  [339] call uctoa_append 
  [340] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [341] uctoa::value#0 = uctoa_append::return#0
  [342] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [343] phi()
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer
  [344] phi()
  [345] call strlen 
  [346] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [347] printf_number_buffer::$19 = strlen::return#2
  [348] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [349] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@10
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer::@11
  [350] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@10
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@6
  [351] printf_number_buffer::len#2 = phi( printf_number_buffer::@11/printf_number_buffer::len#0, printf_number_buffer::@6/printf_number_buffer::len#1 )
  [352] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#0 - printf_number_buffer::len#2
  [353] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@15
  to:printf_number_buffer::@1
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@10
  [354] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@15
  [355] printf_number_buffer::padding#10 = phi( printf_number_buffer::@15/printf_number_buffer::padding#1, printf_number_buffer::@10/0 )
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [356] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@12
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [357] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@7
  to:printf_number_buffer::@2
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@12
  [358] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [359] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@13 printf_number_buffer::@7
  [360] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
  to:printf_number_buffer::@8
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [361] cputc::c = printf_number_buffer::buffer_sign#0
  [362] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@8
  [363] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [364] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@9
  to:printf_number_buffer::@4
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [365] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [366] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@3 printf_number_buffer::@9
  [367] phi()
  [368] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [369] return 
  to:@return

byte* cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  [370] cursorLocation::$3 = (word)*ROWCRS
  [371] cursorLocation::$4 = cursorLocation::$3 << 2
  [372] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3
  [373] cursorLocation::$0 = cursorLocation::$5 << 3
  [374] cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  [375] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  [376] return 
  to:@return

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [377] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [378] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [378] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [379] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [380] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [381] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [382] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [383] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@7 printf_number_buffer::@9
  [384] printf_padding::pad#3 = phi( printf_number_buffer::@9/'0'at, printf_number_buffer::@7/' 'at )
  [384] printf_padding::length#3 = phi( printf_number_buffer::@9/printf_padding::length#1, printf_number_buffer::@7/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [385] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [386] if(printf_padding::i#2<printf_padding::length#3) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [387] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [388] cputc::c = printf_padding::pad#3
  [389] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [390] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1
