byte[16] p = $1100;
byte i = 5;
do {
    p[i] = 2+i+2;
    i = i+1;
} while(i<10)

PROGRAM
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
@1:
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1

SYMBOLS
(byte~) $0
(byte~) $1
(byte~) $2
(boolean~) $3
(label) @1
(byte) i
(byte[16]) p

INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
  to:@1
@1: from @1 @BEGIN
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1
  to:@2
@2: from @1
  to:@END
@END: from @2

Removing empty block @2
CONTROL FLOW GRAPH
@BEGIN: from
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
  to:@1
@1: from @1 @BEGIN
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte[16]) p ← (word) 4352
  (byte) i ← (byte) 5
  to:@1
@1: from @1 @BEGIN
  (byte~) $0 ← (byte) 2 + (byte) i
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p + (byte) i) ← (byte~) $1
  (byte~) $2 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $2
  (boolean~) $3 ← (byte) i < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte[16]) p#0 ← (word) 4352
  (byte) i#0 ← (byte) 5
  to:@1
@1: from @1 @BEGIN
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @BEGIN/(byte[16]) p#0 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) i#0 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte[16]) p#0 ← (word) 4352
  (byte) i#0 ← (byte) 5
  to:@1
@1: from @1 @BEGIN
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @BEGIN/(byte[16]) p#0 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) i#0 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

Constant (byte[16]) p#0 (word) 4352
Constant (byte) i#0 (byte) 5
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @1 @BEGIN
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 5 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $2
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Alias (byte) i#1 = (byte~) $2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @1 @BEGIN
  (byte[16]) p#1 ← phi( @1/(byte[16]) p#1 @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 5 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

Self Phi Eliminated (byte[16]) p#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @1 @BEGIN
  (byte[16]) p#1 ← phi( @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 5 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  (boolean~) $3 ← (byte) i#1 < (byte) 10
  if((boolean~) $3) goto @1
  to:@END
@END: from @1

Simple Condition (boolean~) $3 if((byte) i#1<(byte) 10) goto @1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @1 @BEGIN
  (byte[16]) p#1 ← phi( @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 5 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((byte[16]) p#1 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 10) goto @1
  to:@END
@END: from @1

Constant (byte[16]) p#1 (word) 4352
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @1 @BEGIN
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 5 )
  (byte~) $0 ← (byte) 2 + (byte) i#2
  (byte~) $1 ← (byte~) $0 + (byte) 2
  *((word) 4352 + (byte) i#2) ← (byte~) $1
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 10) goto @1
  to:@END
@END: from @1

Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
INITIAL ASM
BBEGIN:
B1_from_BBEGIN:
  // (byte) i#2 = (byte) 5  // zpby1=coby1
  lda #5
  sta 5
  jmp B1
B1_from_B1:
  // (byte) i#2 = (byte) i#1  // zpby1=zpby2
  lda 4
  sta 5
  jmp B1
B1:
  // (byte~) $0 ← (byte) 2 + (byte) i#2  //  zpby1=coby1_plus_zpby2
  lda #2
  clc
  adc 5
  sta 2
  // (byte~) $1 ← (byte~) $0 + (byte) 2  //  zpby1=zpby2_plus_coby1
  lda 2
  clc
  adc #2
  sta 3
  // *((word) 4352 + (byte) i#2) ← (byte~) $1  //  ptr_cowo1_zpby1=zpby2
  lda 3
  ldy 5
  sta 4352,y
  // (byte) i#1 ← (byte) i#2 + (byte) 1  //  zpby1=zpby2_plus_1
  lda 5
  clc
  adc #1
  sta 4
  // if((byte) i#1<(byte) 10) goto @1  //  zpby1_lt_coby1_then_la1
  lda 4
  cmp #10
  bcc B1_from_B1
  jmp BEND
BEND:

Removing instruction jmp B1
Removing instruction jmp BEND
Succesful ASM optimization Pass4NextJumpElimination
ASSEMBLER
BBEGIN:
B1_from_BBEGIN:
  // (byte) i#2 = (byte) 5  // zpby1=coby1
  lda #5
  sta 5
  jmp B1
B1_from_B1:
  // (byte) i#2 = (byte) i#1  // zpby1=zpby2
  lda 4
  sta 5
B1:
  // (byte~) $0 ← (byte) 2 + (byte) i#2  //  zpby1=coby1_plus_zpby2
  lda #2
  clc
  adc 5
  sta 2
  // (byte~) $1 ← (byte~) $0 + (byte) 2  //  zpby1=zpby2_plus_coby1
  lda 2
  clc
  adc #2
  sta 3
  // *((word) 4352 + (byte) i#2) ← (byte~) $1  //  ptr_cowo1_zpby1=zpby2
  lda 3
  ldy 5
  sta 4352,y
  // (byte) i#1 ← (byte) i#2 + (byte) 1  //  zpby1=zpby2_plus_1
  lda 5
  clc
  adc #1
  sta 4
  // if((byte) i#1<(byte) 10) goto @1  //  zpby1_lt_coby1_then_la1
  lda 4
  cmp #10
  bcc B1_from_B1
BEND:

FINAL SYMBOL TABLE
(byte~) $0 zp byte:2
(byte~) $1 zp byte:3
(label) @1
(label) @BEGIN
(label) @END
(byte) i
(byte) i#1 zp byte:4
(byte) i#2 zp byte:5
(byte[16]) p

FINAL CODE
BBEGIN:
B1_from_BBEGIN:
  // (byte) i#2 = (byte) 5  // zpby1=coby1
  lda #5
  sta 5
  jmp B1
B1_from_B1:
  // (byte) i#2 = (byte) i#1  // zpby1=zpby2
  lda 4
  sta 5
B1:
  // (byte~) $0 ← (byte) 2 + (byte) i#2  //  zpby1=coby1_plus_zpby2
  lda #2
  clc
  adc 5
  sta 2
  // (byte~) $1 ← (byte~) $0 + (byte) 2  //  zpby1=zpby2_plus_coby1
  lda 2
  clc
  adc #2
  sta 3
  // *((word) 4352 + (byte) i#2) ← (byte~) $1  //  ptr_cowo1_zpby1=zpby2
  lda 3
  ldy 5
  sta 4352,y
  // (byte) i#1 ← (byte) i#2 + (byte) 1  //  zpby1=zpby2_plus_1
  lda 5
  clc
  adc #1
  sta 4
  // if((byte) i#1<(byte) 10) goto @1  //  zpby1_lt_coby1_then_la1
  lda 4
  cmp #10
  bcc B1_from_B1
BEND:

