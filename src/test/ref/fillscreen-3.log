Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) main::dst#0 ← (const byte*) SCREEN
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) main::dst#2 ← phi( main/(byte*) main::dst#0 main::@2/(byte*) main::dst#1 )
  (byte*~) main::$0 ← (const byte*) SCREEN + (number) $3e8
  (bool~) main::$1 ← (byte*) main::dst#2 != (byte*~) main::$0
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) main::dst#3 ← phi( main::@1/(byte*) main::dst#2 )
  *((byte*) main::dst#3) ← (byte) ' '
  (byte*) main::dst#1 ← ++ (byte*) main::dst#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(byte*~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::dst
(byte*) main::dst#0
(byte*) main::dst#1
(byte*) main::dst#2
(byte*) main::dst#3

Adding number conversion cast (unumber) $3e8 in (byte*~) main::$0 ← (const byte*) SCREEN + (number) $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3e8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::dst#2 = main::dst#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [4] if((byte*) main::dst#2!=(byte*~) main::$0) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [2] (byte*~) main::$0 ← (const byte*) SCREEN + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::dst#0 = SCREEN
Constant (const byte*) main::$0 = SCREEN+$3e8
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte*) main::dst#0
Constant inlined main::dst#0 = (const byte*) SCREEN
Constant inlined main::$0 = (const byte*) SCREEN+(word) $3e8
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [6] main::dst#4 ← main::dst#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte*) main::dst#2 ← phi( main/(const byte*) SCREEN main::@2/(byte*) main::dst#1 )
  [2] if((byte*) main::dst#2!=(const byte*) SCREEN+(word) $3e8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] *((byte*) main::dst#2) ← (byte) ' '
  [5] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::dst
(byte*) main::dst#1 22.0
(byte*) main::dst#2 14.666666666666666

Initial phi equivalence classes
[ main::dst#2 main::dst#1 ]
Complete equivalence classes
[ main::dst#2 main::dst#1 ]
Allocated zp[2]:2 [ main::dst#2 main::dst#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Fill screen using a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label dst = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte*) main::dst#2 = (const byte*) SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z dst
    lda #>SCREEN
    sta.z dst+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte*) main::dst#2!=(const byte*) SCREEN+(word) $3e8) goto main::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z dst
    cmp #<SCREEN+$3e8
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *((byte*) main::dst#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (dst),y
    // [5] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if((byte*) main::dst#2!=(const byte*) SCREEN+(word) $3e8) goto main::@2 [ main::dst#2 ] (  [ main::dst#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*) main::dst#2) ← (byte) ' ' [ main::dst#2 ] (  [ main::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::dst#2 main::dst#1 ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 36.67: zp[2]:2 [ main::dst#2 main::dst#1 ] 
Uplift Scope [] 

Uplifting [main] best 571 combination zp[2]:2 [ main::dst#2 main::dst#1 ] 
Uplifting [] best 571 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Fill screen using a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label dst = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte*) main::dst#2 = (const byte*) SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z dst
    lda #>SCREEN
    sta.z dst+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte*) main::dst#2!=(const byte*) SCREEN+(word) $3e8) goto main::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z dst
    cmp #<SCREEN+$3e8
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *((byte*) main::dst#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (dst),y
    // [5] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::dst
(byte*) main::dst#1 dst zp[2]:2 22.0
(byte*) main::dst#2 dst zp[2]:2 14.666666666666666

zp[2]:2 [ main::dst#2 main::dst#1 ]


FINAL ASSEMBLER
Score: 511

  // File Comments
// Fill screen using a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label dst = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte*) main::dst#2 = (const byte*) SCREEN [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z dst
    lda #>SCREEN
    sta.z dst+1
    // main::@1
  __b1:
    // for(char* dst = SCREEN; dst!=SCREEN + 1000; dst++)
    // [2] if((byte*) main::dst#2!=(const byte*) SCREEN+(word) $3e8) goto main::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z dst
    cmp #<SCREEN+$3e8
    bne __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // *dst = ' '
    // [4] *((byte*) main::dst#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (dst),y
    // for(char* dst = SCREEN; dst!=SCREEN + 1000; dst++)
    // [5] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

