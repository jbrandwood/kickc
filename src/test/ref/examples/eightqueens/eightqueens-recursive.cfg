
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] count = 0
  [6] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [7] phi()
  [8] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

__stackcall void queen(byte queen::row)
queen: scope:[queen]  from
  [10] queen::row#0 = stackidx(byte,queen::OFFSET_STACK_ROW)
  [11] queen::r = queen::row#0
  [12] queen::column = 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  [13] if(queen::column<8+1) goto queen::@2
  to:queen::@return
queen::@return: scope:[queen]  from queen::@1
  [14] return 
  to:@return
queen::@2: scope:[queen]  from queen::@1
  [15] legal::row#0 = queen::r
  [16] legal::column#0 = queen::column
  [17] call legal 
  [18] legal::return#0 = legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  [19] queen::$1 = legal::return#0
  [20] if(0==queen::$1) goto queen::@3
  to:queen::@5
queen::@5: scope:[queen]  from queen::@7
  [21] board[queen::r] = queen::column
  [22] if(queen::r==8) goto queen::@4
  to:queen::@6
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  [24] queen::$4 = queen::r + 1
  [25] stackpush(byte) = queen::$4
  [26] callexecute queen 
  sideeffect stackpullbytes(1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@3: scope:[queen]  from queen::@4 queen::@6 queen::@7
  [29] queen::column = ++ queen::column
  to:queen::@1
queen::@4: scope:[queen]  from queen::@5
  [30] count = ++ count
  [31] call print 
  to:queen::@3

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [32] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [33] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [34] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [35] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [36] gotoxy::y#2 = conio_c64_init::line#2
  [37] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [38] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [39] phi()
  [40] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [41] phi()
  [42] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [43] phi()
  [44] call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [45] phi()
  [46] call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [47] stackpush(byte) = 1
  [48] callexecute queen 
  sideeffect stackpullbytes(1)
  [50] call cputs 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [51] printf_ulong::uvalue#0 = count
  [52] call printf_ulong 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [53] phi()
  [54] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [55] return 
  to:@return

byte legal(byte legal::row , byte legal::column)
legal: scope:[legal]  from queen::@2
  [56] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [57] legal::i#2 = phi( legal/1, legal::@3/legal::i#1 )
  [58] legal::$0 = legal::row#0 - 1
  [59] if(legal::i#2<=legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@6
  [60] legal::return#4 = phi( legal::@1/1, legal::@2/0, legal::@6/0 )
  [61] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [62] if(board[legal::i#2]==legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [63] diff::a#0 = board[legal::i#2]
  [64] diff::b#0 = legal::column#0
  [65] call diff 
  [66] diff::return#0 = diff::return#4
  to:legal::@5
legal::@5: scope:[legal]  from legal::@4
  [67] legal::$3 = diff::return#0
  [68] diff::a#1 = legal::i#2
  [69] diff::b#1 = legal::row#0
  [70] call diff 
  [71] diff::return#1 = diff::return#4
  to:legal::@6
legal::@6: scope:[legal]  from legal::@5
  [72] legal::$4 = diff::return#1
  [73] if(legal::$3!=legal::$4) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@6
  [74] legal::i#1 = ++ legal::i#2
  to:legal::@1

void print()
print: scope:[print]  from queen::@4
  [75] phi()
  [76] call gotoxy 
  to:print::@11
print::@11: scope:[print]  from print
  [77] phi()
  [78] call cputs 
  to:print::@12
print::@12: scope:[print]  from print::@11
  [79] printf_ulong::uvalue#1 = count
  [80] call printf_ulong 
  to:print::@13
print::@13: scope:[print]  from print::@12
  [81] phi()
  [82] call cputs 
  to:print::@1
print::@1: scope:[print]  from print::@13 print::@14
  [83] print::i#2 = phi( print::@13/1, print::@14/print::i#1 )
  [84] if(print::i#2<8+1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [85] print::i1#2 = phi( print::@1/1, print::@7/print::i1#1 )
  [86] if(print::i1#2<8+1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [87] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [88] phi()
  [89] call cputs 
  to:print::@15
print::@15: scope:[print]  from print::@4
  [90] printf_uchar::uvalue#1 = print::i1#2
  [91] call printf_uchar 
  to:print::@5
print::@5: scope:[print]  from print::@15 print::@9
  [92] print::j#2 = phi( print::@9/print::j#1, print::@15/1 )
  [93] if(print::j#2<8+1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [94] print::i1#1 = ++ print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [95] if(board[print::i1#2]==print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [96] phi()
  [97] call cputs 
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [98] print::j#1 = ++ print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [99] phi()
  [100] call cputs 
  to:print::@9
print::@2: scope:[print]  from print::@1
  [101] printf_uchar::uvalue#0 = print::i#2
  [102] call printf_uchar 
  to:print::@14
print::@14: scope:[print]  from print::@2
  [103] print::i#1 = ++ print::i#2
  to:print::@1

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 print
  [104] gotoxy::y#4 = phi( conio_c64_init::@1/gotoxy::y#2, print/5 )
  [105] if(gotoxy::y#4<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [106] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [107] gotoxy::y#5 = phi( gotoxy::@3/gotoxy::y#4, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [108] conio_cursor_x = 0
  [109] conio_cursor_y = gotoxy::y#5
  [110] gotoxy::$7 = (word)gotoxy::y#5
  [111] gotoxy::$8 = gotoxy::$7 << 2
  [112] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [113] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [114] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [115] conio_line_text = gotoxy::$5
  [116] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [117] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [118] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [119] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [120] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [120] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [120] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [121] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [122] conio_cursor_x = 0
  [123] conio_cursor_y = 0
  [124] conio_line_text = DEFAULT_SCREEN
  [125] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [126] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [127] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [128] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [129] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [130] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [131] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [132] clrscr::line_text#5[clrscr::c#2] = ' '
  [133] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [134] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@1 main::@2 main::@4 main::@6 print::@10 print::@11 print::@13 print::@4 print::@8 printf_number_buffer::@5
  [135] cputs::s#12 = phi( main::@1/main::s, main::@2/main::s1, main::@4/main::s2, main::@6/main::s3, print::@10/print::s4, print::@11/print::s, print::@13/print::s1, print::@4/print::s2, print::@8/print::s3, printf_number_buffer::@5/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [136] cputs::s#11 = phi( cputs/cputs::s#12, cputs::@2/cputs::s#0 )
  [137] cputs::c#1 = *cputs::s#11
  [138] cputs::s#0 = ++ cputs::s#11
  [139] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [140] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [141] cputc::c#0 = cputs::c#1
  [142] call cputc 
  to:cputs::@1

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [143] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [144] *((byte*)&printf_buffer) = 0
  [145] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [146] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer)
  [147] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [148] return 
  to:@return

void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@5 print::@12
  [149] printf_ulong::uvalue#2 = phi( main::@5/printf_ulong::uvalue#0, print::@12/printf_ulong::uvalue#1 )
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [150] *((byte*)&printf_buffer) = 0
  [151] ultoa::value#1 = printf_ulong::uvalue#2
  [152] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [153] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [154] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [155] return 
  to:@return

byte diff(byte diff::a , byte diff::b)
diff: scope:[diff]  from legal::@4 legal::@5
  [156] diff::b#2 = phi( legal::@4/diff::b#0, legal::@5/diff::b#1 )
  [156] diff::a#2 = phi( legal::@4/diff::a#0, legal::@5/diff::a#1 )
  [157] if(diff::a#2<diff::b#2) goto diff::@1
  to:diff::@2
diff::@2: scope:[diff]  from diff
  [158] diff::return#3 = diff::a#2 - diff::b#2
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  [159] diff::return#4 = phi( diff::@1/diff::return#2, diff::@2/diff::return#3 )
  [160] return 
  to:@return
diff::@1: scope:[diff]  from diff
  [161] diff::return#2 = diff::b#2 - diff::a#2
  to:diff::@return

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@15 print::@2
  [162] printf_uchar::uvalue#2 = phi( print::@15/printf_uchar::uvalue#1, print::@2/printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [163] *((byte*)&printf_buffer) = 0
  [164] uctoa::value#1 = printf_uchar::uvalue#2
  [165] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [166] printf_number_buffer::buffer_sign#2 = *((byte*)&printf_buffer)
  [167] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [168] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [169] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  [170] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [171] conio_line_text[conio_cursor_x] = cputc::c#3
  [172] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [173] conio_cursor_x = ++ conio_cursor_x
  [174] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [175] phi()
  [176] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [177] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [178] phi()
  [179] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [180] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [181] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [181] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [181] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/printf_uint::uvalue#0 )
  [181] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [182] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [183] utoa::$11 = (byte)utoa::value#2
  [184] *utoa::buffer#11 = DIGITS[utoa::$11]
  [185] utoa::buffer#3 = ++ utoa::buffer#11
  [186] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [187] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [188] utoa::$10 = utoa::digit#2 << 1
  [189] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [190] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [191] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [192] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [192] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [192] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [193] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [194] utoa_append::buffer#0 = utoa::buffer#11
  [195] utoa_append::value#0 = utoa::value#2
  [196] utoa_append::sub#0 = utoa::digit_value#0
  [197] call utoa_append 
  [198] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [199] utoa::value#0 = utoa_append::return#0
  [200] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [201] printf_number_buffer::format_upper_case#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_upper_case#0, printf_ulong::@2/0 )
  [201] printf_number_buffer::buffer_sign#10 = phi( printf_uchar::@2/printf_number_buffer::buffer_sign#2, printf_uint::@2/printf_number_buffer::buffer_sign#1, printf_ulong::@2/printf_number_buffer::buffer_sign#0 )
  [201] printf_number_buffer::format_zero_padding#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_zero_padding#0, printf_ulong::@2/0 )
  [201] printf_number_buffer::format_justify_left#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_justify_left#0, printf_ulong::@2/0 )
  [201] printf_number_buffer::format_min_length#3 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_min_length#0, printf_ulong::@2/0 )
  [202] if(0==printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [203] phi()
  [204] call strlen 
  [205] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [206] printf_number_buffer::$19 = strlen::return#2
  [207] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [208] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [209] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [210] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [211] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#3 - printf_number_buffer::len#2
  [212] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [213] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [214] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [215] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [216] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [217] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [218] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [219] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [220] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [221] cputc::c#2 = printf_number_buffer::buffer_sign#10
  [222] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [223] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [224] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [225] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [226] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [227] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [228] phi()
  [229] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [230] phi()
  [231] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [232] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [233] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [234] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [235] printf_padding::length#2 = (byte)printf_number_buffer::padding#10
  [236] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [237] return 
  to:@return

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [238] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [239] ultoa::buffer#11 = phi( ultoa::@4/ultoa::buffer#14, ultoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [239] ultoa::started#2 = phi( ultoa::@4/ultoa::started#4, ultoa/0 )
  [239] ultoa::value#2 = phi( ultoa::@4/ultoa::value#6, ultoa/ultoa::value#1 )
  [239] ultoa::digit#2 = phi( ultoa::@4/ultoa::digit#1, ultoa/0 )
  [240] if(ultoa::digit#2<$a-1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [241] ultoa::$11 = (byte)ultoa::value#2
  [242] *ultoa::buffer#11 = DIGITS[ultoa::$11]
  [243] ultoa::buffer#3 = ++ ultoa::buffer#11
  [244] *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [245] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [246] ultoa::$10 = ultoa::digit#2 << 2
  [247] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10]
  [248] if(0!=ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [249] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [250] ultoa::buffer#14 = phi( ultoa::@7/ultoa::buffer#11, ultoa::@6/ultoa::buffer#4 )
  [250] ultoa::started#4 = phi( ultoa::@7/ultoa::started#2, ultoa::@6/1 )
  [250] ultoa::value#6 = phi( ultoa::@7/ultoa::value#2, ultoa::@6/ultoa::value#0 )
  [251] ultoa::digit#1 = ++ ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [252] ultoa_append::buffer#0 = ultoa::buffer#11
  [253] ultoa_append::value#0 = ultoa::value#2
  [254] ultoa_append::sub#0 = ultoa::digit_value#0
  [255] call ultoa_append 
  [256] ultoa_append::return#0 = ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [257] ultoa::value#0 = ultoa_append::return#0
  [258] ultoa::buffer#4 = ++ ultoa::buffer#11
  to:ultoa::@4

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [259] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [260] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [260] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [260] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/uctoa::value#1 )
  [260] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [261] if(uctoa::digit#2<2-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [262] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [263] uctoa::buffer#3 = ++ uctoa::buffer#11
  [264] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [265] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [266] uctoa::digit_value#0 = RADIX_HEXADECIMAL_VALUES_CHAR[uctoa::digit#2]
  [267] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [268] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [269] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [269] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [269] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [270] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [271] uctoa_append::buffer#0 = uctoa::buffer#11
  [272] uctoa_append::value#0 = uctoa::value#2
  [273] uctoa_append::sub#0 = uctoa::digit_value#0
  [274] call uctoa_append 
  [275] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [276] uctoa::value#0 = uctoa_append::return#0
  [277] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [278] conio_line_text = conio_line_text + $28
  [279] conio_line_color = conio_line_color + $28
  [280] conio_cursor_x = 0
  [281] conio_cursor_y = ++ conio_cursor_y
  [282] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [283] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [284] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [285] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [285] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [286] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [287] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [288] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [289] utoa_append::digit#1 = ++ utoa_append::digit#2
  [290] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [291] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [292] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [292] strlen::str#2 = phi( strlen/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [293] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [294] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [295] strlen::len#1 = ++ strlen::len#2
  [296] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [297] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [297] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [298] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [299] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [300] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [301] cputc::c#1 = printf_padding::pad#5
  [302] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [303] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [304] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [305] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [306] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [307] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [308] toupper::ch#0 = *strupr::src#2
  [309] call toupper 
  [310] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [311] strupr::$0 = toupper::return#3
  [312] *strupr::src#2 = strupr::$0
  [313] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [314] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [315] ultoa_append::digit#2 = phi( ultoa_append/0, ultoa_append::@2/ultoa_append::digit#1 )
  [315] ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#0, ultoa_append::@2/ultoa_append::value#1 )
  [316] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [317] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2]
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [318] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [319] ultoa_append::digit#1 = ++ ultoa_append::digit#2
  [320] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0
  to:ultoa_append::@1

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [321] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [322] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [322] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [323] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [324] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [325] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [326] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [327] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [328] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [329] phi()
  [330] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [331] phi()
  [332] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [333] phi()
  [334] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [335] phi()
  [336] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [337] conio_line_text = conio_line_text - $28
  [338] conio_line_color = conio_line_color - $28
  [339] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [340] return 
  to:@return

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [341] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [342] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [343] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [344] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [345] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [346] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [346] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [347] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [348] memcpy::src#4 = (byte*)memcpy::source#2
  [349] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [350] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [350] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [351] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [352] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [353] *memcpy::dst#2 = *memcpy::src#2
  [354] memcpy::dst#1 = ++ memcpy::dst#2
  [355] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [356] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [356] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [357] memset::end#0 = (byte*)memset::str#3 + $28
  [358] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [359] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [360] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [361] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [362] *memset::dst#2 = memset::c#4
  [363] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
