
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::w#0 = $a
  mul16u::b#0 = main::w#0
  mul16u::a#0 = main::w#0
  call mul16u 
  mul16u::return#0 = mul16u::return#3
  to:main::@1
main::@1: scope:[main]  from main
  mul16u::return#4 = phi( main/mul16u::return#0 )
  main::$0 = mul16u::return#4
  main::$2 = 0 * SIZEOF_DWORD
  main::screen[main::$2] = main::$0
  main::w#1 = $3e8
  mul16u::b#1 = main::w#1
  mul16u::a#1 = main::w#1
  call mul16u 
  mul16u::return#1 = mul16u::return#3
  to:main::@2
main::@2: scope:[main]  from main::@1
  mul16u::return#5 = phi( main::@1/mul16u::return#1 )
  main::$1 = mul16u::return#5
  main::$3 = 1 * SIZEOF_DWORD
  main::screen[main::$3] = main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

dword mul16u(word mul16u::b , word mul16u::a)
mul16u: scope:[mul16u]  from main main::@1
  mul16u::a#2 = phi( main/mul16u::a#0, main::@1/mul16u::a#1 )
  mul16u::b#2 = phi( main/mul16u::b#0, main::@1/mul16u::b#1 )
  mul16u::mb#0 = (dword)mul16u::b#2
  mul16u::$0 = mul16u::mb#0 + mul16u::a#2
  mul16u::return#2 = mul16u::$0
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u
  mul16u::return#6 = phi( mul16u/mul16u::return#2 )
  mul16u::return#3 = mul16u::return#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte SIZEOF_DWORD = 4
void __start()
void main()
dword~ main::$0
dword~ main::$1
number~ main::$2
number~ main::$3
constant dword* main::screen = (dword*)$400
word main::w
word main::w#0
word main::w#1
dword mul16u(word mul16u::b , word mul16u::a)
dword~ mul16u::$0
word mul16u::a
word mul16u::a#0
word mul16u::a#1
word mul16u::a#2
word mul16u::b
word mul16u::b#0
word mul16u::b#1
word mul16u::b#2
dword mul16u::mb
dword mul16u::mb#0
dword mul16u::return
dword mul16u::return#0
dword mul16u::return#1
dword mul16u::return#2
dword mul16u::return#3
dword mul16u::return#4
dword mul16u::return#5
dword mul16u::return#6

Adding number conversion cast (unumber) 0 in main::$2 = 0 * SIZEOF_DWORD
Adding number conversion cast (unumber) main::$2 in main::$2 = (unumber)0 * SIZEOF_DWORD
Adding number conversion cast (unumber) $3e8 in main::w#1 = $3e8
Adding number conversion cast (unumber) 1 in main::$3 = 1 * SIZEOF_DWORD
Adding number conversion cast (unumber) main::$3 in main::$3 = (unumber)1 * SIZEOF_DWORD
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::w#1 = (unumber)$3e8
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (dword*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$2 = 0 * SIZEOF_DWORD
Inferred type updated to byte in main::$3 = 1 * SIZEOF_DWORD
Alias mul16u::return#0 = mul16u::return#4 
Alias mul16u::return#1 = mul16u::return#5 
Alias mul16u::return#2 = mul16u::$0 mul16u::return#6 mul16u::return#3 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [6] main::$2 = 0 * SIZEOF_DWORD
Constant right-side identified [14] main::$3 = 1 * SIZEOF_DWORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::w#0 = $a
Constant main::$2 = 0*SIZEOF_DWORD
Constant main::w#1 = $3e8
Constant main::$3 = 1*SIZEOF_DWORD
Successful SSA optimization Pass2ConstantIdentification
Constant mul16u::b#0 = main::w#0
Constant mul16u::a#0 = main::w#0
Constant mul16u::b#1 = main::w#1
Constant mul16u::a#1 = main::w#1
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero 0*SIZEOF_DWORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::screen in [7] main::screen[main::$2] = main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with different constant siblings main::w#0
Inlining constant with different constant siblings main::w#1
Inlining constant with var siblings mul16u::b#0
Inlining constant with var siblings mul16u::a#0
Inlining constant with var siblings mul16u::b#1
Inlining constant with var siblings mul16u::a#1
Constant inlined mul16u::b#1 = $3e8
Constant inlined main::$3 = 1*SIZEOF_DWORD
Constant inlined main::w#1 = $3e8
Constant inlined main::w#0 = $a
Constant inlined mul16u::b#0 = $a
Constant inlined mul16u::a#1 = $3e8
Constant inlined mul16u::a#0 = $a
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::screen+1*SIZEOF_DWORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to mul16u:1 mul16u:5 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call mul16u 
  [2] mul16u::return#0 = mul16u::return#2
  to:main::@1
main::@1: scope:[main]  from main
  [3] main::$0 = mul16u::return#0
  [4] *main::screen = main::$0
  [5] call mul16u 
  [6] mul16u::return#1 = mul16u::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] main::$1 = mul16u::return#1
  [8] *(main::screen+1*SIZEOF_DWORD) = main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return

dword mul16u(word mul16u::b , word mul16u::a)
mul16u: scope:[mul16u]  from main main::@1
  [10] mul16u::a#2 = phi( main/$a, main::@1/$3e8 )
  [10] mul16u::b#2 = phi( main/$a, main::@1/$3e8 )
  [11] mul16u::mb#0 = (dword)mul16u::b#2
  [12] mul16u::return#2 = mul16u::mb#0 + mul16u::a#2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
dword~ main::$0 4.0
dword~ main::$1 4.0
word main::w
dword mul16u(word mul16u::b , word mul16u::a)
word mul16u::a
word mul16u::a#2 5.5
word mul16u::b
word mul16u::b#2
dword mul16u::mb
dword mul16u::mb#0 22.0
dword mul16u::return
dword mul16u::return#0 4.0
dword mul16u::return#1 4.0
dword mul16u::return#2 3.75

Initial phi equivalence classes
[ mul16u::b#2 ]
[ mul16u::a#2 ]
Added variable mul16u::return#0 to live range equivalence class [ mul16u::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable mul16u::return#1 to live range equivalence class [ mul16u::return#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable mul16u::mb#0 to live range equivalence class [ mul16u::mb#0 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Complete equivalence classes
[ mul16u::b#2 ]
[ mul16u::a#2 ]
[ mul16u::return#0 ]
[ main::$0 ]
[ mul16u::return#1 ]
[ main::$1 ]
[ mul16u::mb#0 ]
[ mul16u::return#2 ]
Allocated zp[2]:2 [ mul16u::b#2 ]
Allocated zp[2]:4 [ mul16u::a#2 ]
Allocated zp[4]:6 [ mul16u::return#0 ]
Allocated zp[4]:10 [ main::$0 ]
Allocated zp[4]:14 [ mul16u::return#1 ]
Allocated zp[4]:18 [ main::$1 ]
Allocated zp[4]:22 [ mul16u::mb#0 ]
Allocated zp[4]:26 [ mul16u::return#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] mul16u::return#0 = mul16u::return#2 [ mul16u::return#0 ] (  [ mul16u::return#0 ] { { mul16u::return#0 = mul16u::return#2 } }  ) always clobbers reg byte a 
Statement [3] main::$0 = mul16u::return#0 [ main::$0 ] (  [ main::$0 ] { { mul16u::return#1 = mul16u::return#2 } }  ) always clobbers reg byte a 
Statement [4] *main::screen = main::$0 [ ] (  [ ] { { mul16u::return#1 = mul16u::return#2 } }  ) always clobbers reg byte a 
Statement [6] mul16u::return#1 = mul16u::return#2 [ mul16u::return#1 ] (  [ mul16u::return#1 ] { { mul16u::return#1 = mul16u::return#2 } }  ) always clobbers reg byte a 
Statement [7] main::$1 = mul16u::return#1 [ main::$1 ] (  [ main::$1 ] { }  ) always clobbers reg byte a 
Statement [8] *(main::screen+1*SIZEOF_DWORD) = main::$1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] mul16u::mb#0 = (dword)mul16u::b#2 [ mul16u::a#2 mul16u::mb#0 ] ( mul16u:1 [ mul16u::a#2 mul16u::mb#0 ] { { mul16u::return#0 = mul16u::return#2 } }  mul16u:5 [ mul16u::a#2 mul16u::mb#0 ] { { mul16u::return#1 = mul16u::return#2 } }  ) always clobbers reg byte a 
Statement [12] mul16u::return#2 = mul16u::mb#0 + mul16u::a#2 [ mul16u::return#2 ] ( mul16u:1 [ mul16u::return#2 ] { { mul16u::return#0 = mul16u::return#2 } }  mul16u:5 [ mul16u::return#2 ] { { mul16u::return#1 = mul16u::return#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ mul16u::b#2 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ mul16u::a#2 ] : zp[2]:4 , 
Potential registers zp[4]:6 [ mul16u::return#0 ] : zp[4]:6 , 
Potential registers zp[4]:10 [ main::$0 ] : zp[4]:10 , 
Potential registers zp[4]:14 [ mul16u::return#1 ] : zp[4]:14 , 
Potential registers zp[4]:18 [ main::$1 ] : zp[4]:18 , 
Potential registers zp[4]:22 [ mul16u::mb#0 ] : zp[4]:22 , 
Potential registers zp[4]:26 [ mul16u::return#2 ] : zp[4]:26 , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul16u] 22: zp[4]:22 [ mul16u::mb#0 ] 5.5: zp[2]:4 [ mul16u::a#2 ] 4: zp[4]:6 [ mul16u::return#0 ] 4: zp[4]:14 [ mul16u::return#1 ] 3.75: zp[4]:26 [ mul16u::return#2 ] 0: zp[2]:2 [ mul16u::b#2 ] 
Uplift Scope [main] 4: zp[4]:10 [ main::$0 ] 4: zp[4]:18 [ main::$1 ] 
Uplift Scope [] 

Uplifting [mul16u] best 284 combination zp[4]:22 [ mul16u::mb#0 ] zp[2]:4 [ mul16u::a#2 ] zp[4]:6 [ mul16u::return#0 ] zp[4]:14 [ mul16u::return#1 ] zp[4]:26 [ mul16u::return#2 ] zp[2]:2 [ mul16u::b#2 ] 
Uplifting [main] best 284 combination zp[4]:10 [ main::$0 ] zp[4]:18 [ main::$1 ] 
Uplifting [] best 284 combination 
Coalescing zero page register [ zp[4]:6 [ mul16u::return#0 ] ] with [ zp[4]:10 [ main::$0 ] ] - score: 1
Coalescing zero page register [ zp[4]:6 [ mul16u::return#0 main::$0 ] ] with [ zp[4]:26 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:14 [ mul16u::return#1 ] ] with [ zp[4]:18 [ main::$1 ] ] - score: 1
Coalescing zero page register [ zp[4]:6 [ mul16u::return#0 main::$0 mul16u::return#2 ] ] with [ zp[4]:14 [ mul16u::return#1 main::$1 ] ] - score: 1
Coalescing zero page register [ zp[4]:6 [ mul16u::return#0 main::$0 mul16u::return#2 mul16u::return#1 main::$1 ] ] with [ zp[4]:22 [ mul16u::mb#0 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that ASM fragment variations works
// ASM fragment variations "cast" constants to different types
  // Upstart
  // Commodore 64 PRG executable file
.file [name="fragment-variations.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_DWORD = 4
.segment Code
  // main
main: {
    .label screen = $400
    .label __0 = 6
    .label __1 = 6
    // [1] call mul16u 
    // [10] phi from main to mul16u [phi:main->mul16u]
  mul16u_from_main:
    // [10] phi mul16u::a#2 = $a [phi:main->mul16u#0] -- vwuz1=vwuc1 
    lda #<$a
    sta.z mul16u.a
    lda #>$a
    sta.z mul16u.a+1
    // [10] phi mul16u::b#2 = $a [phi:main->mul16u#1] -- vwuz1=vwuc1 
    lda #<$a
    sta.z mul16u.b
    lda #>$a
    sta.z mul16u.b+1
    jsr mul16u
    // [2] mul16u::return#0 = mul16u::return#2
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$0 = mul16u::return#0
    // [4] *main::screen = main::$0 -- _deref_pduc1=vduz1 
    lda.z __0
    sta screen
    lda.z __0+1
    sta screen+1
    lda.z __0+2
    sta screen+2
    lda.z __0+3
    sta screen+3
    // [5] call mul16u 
    // [10] phi from main::@1 to mul16u [phi:main::@1->mul16u]
  mul16u_from___b1:
    // [10] phi mul16u::a#2 = $3e8 [phi:main::@1->mul16u#0] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z mul16u.a
    lda #>$3e8
    sta.z mul16u.a+1
    // [10] phi mul16u::b#2 = $3e8 [phi:main::@1->mul16u#1] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z mul16u.b
    lda #>$3e8
    sta.z mul16u.b+1
    jsr mul16u
    // [6] mul16u::return#1 = mul16u::return#2
    jmp __b2
    // main::@2
  __b2:
    // [7] main::$1 = mul16u::return#1
    // [8] *(main::screen+1*SIZEOF_DWORD) = main::$1 -- _deref_pduc1=vduz1 
    lda.z __1
    sta screen+1*SIZEOF_DWORD
    lda.z __1+1
    sta screen+1*SIZEOF_DWORD+1
    lda.z __1+2
    sta screen+1*SIZEOF_DWORD+2
    lda.z __1+3
    sta screen+1*SIZEOF_DWORD+3
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // mul16u
// mul16u(word zp(2) b, word zp(4) a)
mul16u: {
    .label return = 6
    .label mb = 6
    .label b = 2
    .label a = 4
    // [11] mul16u::mb#0 = (dword)mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [12] mul16u::return#2 = mul16u::mb#0 + mul16u::a#2 -- vduz1=vduz1_plus_vwuz2 
    lda.z return
    clc
    adc.z a
    sta.z return
    lda.z return+1
    adc.z a+1
    sta.z return+1
    lda.z return+2
    adc #0
    sta.z return+2
    lda.z return+3
    adc #0
    sta.z return+3
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction mul16u_from_main:
Removing instruction __b1:
Removing instruction mul16u_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte SIZEOF_DWORD = 4
void main()
dword~ main::$0 zp[4]:6 4.0
dword~ main::$1 zp[4]:6 4.0
constant dword* main::screen = (dword*) 1024
word main::w
dword mul16u(word mul16u::b , word mul16u::a)
word mul16u::a
word mul16u::a#2 a zp[2]:4 5.5
word mul16u::b
word mul16u::b#2 b zp[2]:2
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:6 22.0
dword mul16u::return
dword mul16u::return#0 return zp[4]:6 4.0
dword mul16u::return#1 return zp[4]:6 4.0
dword mul16u::return#2 return zp[4]:6 3.75

zp[2]:2 [ mul16u::b#2 ]
zp[2]:4 [ mul16u::a#2 ]
zp[4]:6 [ mul16u::return#0 main::$0 mul16u::return#2 mul16u::return#1 main::$1 mul16u::mb#0 ]


FINAL ASSEMBLER
Score: 176

  // File Comments
// Tests that ASM fragment variations works
// ASM fragment variations "cast" constants to different types
  // Upstart
  // Commodore 64 PRG executable file
.file [name="fragment-variations.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_DWORD = 4
.segment Code
  // main
main: {
    .label screen = $400
    .label __0 = 6
    .label __1 = 6
    // mul16u(w, w)
    // [1] call mul16u 
    // [10] phi from main to mul16u [phi:main->mul16u]
    // [10] phi mul16u::a#2 = $a [phi:main->mul16u#0] -- vwuz1=vwuc1 
    lda #<$a
    sta.z mul16u.a
    lda #>$a
    sta.z mul16u.a+1
    // [10] phi mul16u::b#2 = $a [phi:main->mul16u#1] -- vwuz1=vwuc1 
    lda #<$a
    sta.z mul16u.b
    lda #>$a
    sta.z mul16u.b+1
    jsr mul16u
    // mul16u(w, w)
    // [2] mul16u::return#0 = mul16u::return#2
    // main::@1
    // [3] main::$0 = mul16u::return#0
    // screen[0] = mul16u(w, w)
    // [4] *main::screen = main::$0 -- _deref_pduc1=vduz1 
    lda.z __0
    sta screen
    lda.z __0+1
    sta screen+1
    lda.z __0+2
    sta screen+2
    lda.z __0+3
    sta screen+3
    // mul16u(w, w)
    // [5] call mul16u 
    // [10] phi from main::@1 to mul16u [phi:main::@1->mul16u]
    // [10] phi mul16u::a#2 = $3e8 [phi:main::@1->mul16u#0] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z mul16u.a
    lda #>$3e8
    sta.z mul16u.a+1
    // [10] phi mul16u::b#2 = $3e8 [phi:main::@1->mul16u#1] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z mul16u.b
    lda #>$3e8
    sta.z mul16u.b+1
    jsr mul16u
    // mul16u(w, w)
    // [6] mul16u::return#1 = mul16u::return#2
    // main::@2
    // [7] main::$1 = mul16u::return#1
    // screen[1] = mul16u(w, w)
    // [8] *(main::screen+1*SIZEOF_DWORD) = main::$1 -- _deref_pduc1=vduz1 
    lda.z __1
    sta screen+1*SIZEOF_DWORD
    lda.z __1+1
    sta screen+1*SIZEOF_DWORD+1
    lda.z __1+2
    sta screen+1*SIZEOF_DWORD+2
    lda.z __1+3
    sta screen+1*SIZEOF_DWORD+3
    // main::@return
    // }
    // [9] return 
    rts
}
  // mul16u
// mul16u(word zp(2) b, word zp(4) a)
mul16u: {
    .label return = 6
    .label mb = 6
    .label b = 2
    .label a = 4
    // mb = b
    // [11] mul16u::mb#0 = (dword)mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // mb+a
    // [12] mul16u::return#2 = mul16u::mb#0 + mul16u::a#2 -- vduz1=vduz1_plus_vwuz2 
    lda.z return
    clc
    adc.z a
    sta.z return
    lda.z return+1
    adc.z a+1
    sta.z return+1
    lda.z return+2
    adc #0
    sta.z return+2
    lda.z return+3
    adc #0
    sta.z return+3
    // mul16u::@return
    // }
    // [13] return 
    rts
}
  // File Data

