
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::i ← (byte) 3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (bool~) main::$0 ← (byte) main::i < (number) 7
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((const nomodify byte*) SCREEN + (byte) main::i) ← (byte) main::i
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i loadstore !zp[-1]:2

Adding number conversion cast (unumber) 7 in (bool~) main::$0 ← (byte) main::i < (number) 7
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [2] if((byte) main::i<(byte) 7) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] (byte) main::i ← (byte) 3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] if((byte) main::i<(byte) 7) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [3] *((const nomodify byte*) SCREEN + (byte) main::i) ← (byte) main::i
  [4] (byte) main::i ← ++ (byte) main::i
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i loadstore !zp[-1]:2 14.25

Initial phi equivalence classes
Added variable main::i to live range equivalence class [ main::i ]
Complete equivalence classes
[ main::i ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test that address vars are turned into load/store and located at hardcoded addresses
// Hard-coded zero-page address - local variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    // [0] (byte) main::i ← (byte) 3 -- vbuz1=vbuc1 
    lda #3
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [1] if((byte) main::i<(byte) 7) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #7
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    // main::@2
  __b2:
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i) ← (byte) main::i -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN,y
    // [4] (byte) main::i ← ++ (byte) main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) main::i ← (byte) 3 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [1] if((byte) main::i<(byte) 7) goto main::@2 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN + (byte) main::i) ← (byte) main::i [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 14.25: zp[1]:2 [ main::i ] 
Uplift Scope [] 

Uplifting [main] best 299 combination zp[1]:2 [ main::i ] 
Uplifting [] best 299 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i ]
Uplifting [main] best 299 combination zp[1]:2 [ main::i ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that address vars are turned into load/store and located at hardcoded addresses
// Hard-coded zero-page address - local variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    // [0] (byte) main::i ← (byte) 3 -- vbuz1=vbuc1 
    lda #3
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [1] if((byte) main::i<(byte) 7) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #7
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    // main::@2
  __b2:
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i) ← (byte) main::i -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN,y
    // [4] (byte) main::i ← ++ (byte) main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i loadstore !zp[-1]:2 zp[1]:2 14.25

zp[1]:2 [ main::i ]


FINAL ASSEMBLER
Score: 266

  // File Comments
// Test that address vars are turned into load/store and located at hardcoded addresses
// Hard-coded zero-page address - local variable
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    // i = 3
    // [0] (byte) main::i ← (byte) 3 -- vbuz1=vbuc1 
    lda #3
    sta.z i
    // main::@1
  __b1:
    // while(i<7)
    // [1] if((byte) main::i<(byte) 7) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #7
    bcc __b2
    // main::@return
    // }
    // [2] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i++] = i
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i) ← (byte) main::i -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN,y
    // SCREEN[i++] = i;
    // [4] (byte) main::i ← ++ (byte) main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

