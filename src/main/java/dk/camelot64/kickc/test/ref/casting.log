byte* SCREEN = $0400;
byte* SCREEN2 = SCREEN+40*3;
byte* SCREEN3 = SCREEN+40*6;
byte* SCREEN4 = SCREEN+40*9;

void main() {
    for( byte b: 0..100) {
        //Subtract unsigned byte from unsigned byte
        byte b2 = 200-b;
        SCREEN[b] = b2;
        // Cast unsigned byte to signed byte & negate
        signed byte sb = - (signed byte)b;
        SCREEN2[b] = (byte)sb;
    }
    w();
}


void w() {
    for(byte i : 0..10) {
        word w1 = 1300;
        word w2 = 1250;
        byte b = (byte)(w1-w2);
        byte b2 = 1400-1350+i;
        SCREEN3[i] = b;
        SCREEN4[i] = b2;
    }
}

PROGRAM
  (byte*) SCREEN ← (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN + (byte/word/signed word~) $2
  (byte*) SCREEN3 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN + (word/signed word~) $4
  (byte*) SCREEN4 ← (byte*~) $5
proc (void()) main()
  (byte) main::b ← (byte/signed byte/word/signed word) 0
main::@1:
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b
  (byte) main::b2 ← (byte~) main::$0
  *((byte*) SCREEN + (byte) main::b) ← (byte) main::b2
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb
  *((byte*) SCREEN2 + (byte) main::b) ← (byte~) main::$3
  (byte) main::b ← ++ (byte) main::b
  (boolean~) main::$4 ← (byte) main::b != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  (void~) main::$5 ← call w 
main::@return:
  return 
endproc // main()
proc (void()) w()
  (byte) w::i ← (byte/signed byte/word/signed word) 0
w::@1:
  (word) w::w1 ← (word/signed word) 1300
  (word) w::w2 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1 - (word) w::w2
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i
  (byte) w::b2 ← (byte~) w::$3
  *((byte*) SCREEN3 + (byte) w::i) ← (byte) w::b
  *((byte*) SCREEN4 + (byte) w::i) ← (byte) w::b2
  (byte) w::i ← ++ (byte) w::i
  (boolean~) w::$4 ← (byte) w::i != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
w::@return:
  return 
endproc // w()
  call main 

SYMBOLS
(byte/signed byte/word/signed word~) $0
(byte*~) $1
(byte/word/signed word~) $2
(byte*~) $3
(word/signed word~) $4
(byte*~) $5
(byte*) SCREEN
(byte*) SCREEN2
(byte*) SCREEN3
(byte*) SCREEN4
(void()) main()
(byte~) main::$0
(signed byte~) main::$1
(signed byte~) main::$2
(byte~) main::$3
(boolean~) main::$4
(void~) main::$5
(label) main::@1
(label) main::@return
(byte) main::b
(byte) main::b2
(signed byte) main::sb
(void()) w()
(word~) w::$0
(byte~) w::$1
(byte/signed byte/word/signed word~) w::$2
(byte~) w::$3
(boolean~) w::$4
(label) w::@1
(label) w::@return
(byte) w::b
(byte) w::b2
(byte) w::i
(word) w::w1
(word) w::w2

Promoting word/signed word to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN + (byte/word/signed word~) $2
  (byte*) SCREEN3 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN + (word/signed word~) $4
  (byte*) SCREEN4 ← (byte*~) $5
  to:@1
main: scope:[main]  from
  (byte) main::b ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b
  (byte) main::b2 ← (byte~) main::$0
  *((byte*) SCREEN + (byte) main::b) ← (byte) main::b2
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb
  *((byte*) SCREEN2 + (byte) main::b) ← (byte~) main::$3
  (byte) main::b ← ++ (byte) main::b
  (boolean~) main::$4 ← (byte) main::b != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (void~) main::$5 ← call w 
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
w: scope:[w]  from
  (byte) w::i ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (word) w::w1 ← (word/signed word) 1300
  (word) w::w2 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1 - (word) w::w2
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i
  (byte) w::b2 ← (byte~) w::$3
  *((byte*) SCREEN3 + (byte) w::i) ← (byte) w::b
  *((byte*) SCREEN4 + (byte) w::i) ← (byte) w::b2
  (byte) w::i ← ++ (byte) w::i
  (boolean~) w::$4 ← (byte) w::i != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@2
w::@2: scope:[w]  from w::@1
  to:w::@return
w::@return: scope:[w]  from w::@2
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Removing empty block @1
Removing empty block w::@2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN + (byte/word/signed word~) $2
  (byte*) SCREEN3 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN + (word/signed word~) $4
  (byte*) SCREEN4 ← (byte*~) $5
  to:@2
main: scope:[main]  from
  (byte) main::b ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b
  (byte) main::b2 ← (byte~) main::$0
  *((byte*) SCREEN + (byte) main::b) ← (byte) main::b2
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb
  *((byte*) SCREEN2 + (byte) main::b) ← (byte~) main::$3
  (byte) main::b ← ++ (byte) main::b
  (boolean~) main::$4 ← (byte) main::b != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (void~) main::$5 ← call w 
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from
  (byte) w::i ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (word) w::w1 ← (word/signed word) 1300
  (word) w::w2 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1 - (word) w::w2
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i
  (byte) w::b2 ← (byte~) w::$3
  *((byte*) SCREEN3 + (byte) w::i) ← (byte) w::b
  *((byte*) SCREEN4 + (byte) w::i) ← (byte) w::b2
  (byte) w::i ← ++ (byte) w::i
  (boolean~) w::$4 ← (byte) w::i != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @2

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN + (byte/word/signed word~) $2
  (byte*) SCREEN3 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN + (word/signed word~) $4
  (byte*) SCREEN4 ← (byte*~) $5
  to:@2
main: scope:[main]  from @2
  (byte) main::b ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b
  (byte) main::b2 ← (byte~) main::$0
  *((byte*) SCREEN + (byte) main::b) ← (byte) main::b2
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb
  *((byte*) SCREEN2 + (byte) main::b) ← (byte~) main::$3
  (byte) main::b ← ++ (byte) main::b
  (boolean~) main::$4 ← (byte) main::b != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte) w::i ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (word) w::w1 ← (word/signed word) 1300
  (word) w::w2 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1 - (word) w::w2
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i
  (byte) w::b2 ← (byte~) w::$3
  *((byte*) SCREEN3 + (byte) w::i) ← (byte) w::b
  *((byte*) SCREEN4 + (byte) w::i) ← (byte) w::b2
  (byte) w::i ← ++ (byte) w::i
  (boolean~) w::$4 ← (byte) w::i != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2#0 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (byte*) SCREEN3#0 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN#0 + (word/signed word~) $4
  (byte*) SCREEN4#0 ← (byte*~) $5
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN4#5 ← phi( @2/(byte*) SCREEN4#6 )
  (byte*) SCREEN3#5 ← phi( @2/(byte*) SCREEN3#6 )
  (byte*) SCREEN2#2 ← phi( @2/(byte*) SCREEN2#3 )
  (byte*) SCREEN#2 ← phi( @2/(byte*) SCREEN#3 )
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN4#4 ← phi( main/(byte*) SCREEN4#5 main::@1/(byte*) SCREEN4#4 )
  (byte*) SCREEN3#4 ← phi( main/(byte*) SCREEN3#5 main::@1/(byte*) SCREEN3#4 )
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#2 main::@1/(byte*) SCREEN2#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@1/(byte*) SCREEN#1 )
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b#2
  (byte) main::b2#0 ← (byte~) main::$0
  *((byte*) SCREEN#1 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb#0 ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#1 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  (boolean~) main::$4 ← (byte) main::b#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) SCREEN4#3 ← phi( main::@1/(byte*) SCREEN4#4 )
  (byte*) SCREEN3#3 ← phi( main::@1/(byte*) SCREEN3#4 )
  call w param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte*) SCREEN4#2 ← phi( main::@2/(byte*) SCREEN4#3 )
  (byte*) SCREEN3#2 ← phi( main::@2/(byte*) SCREEN3#3 )
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte*) SCREEN4#1 ← phi( w/(byte*) SCREEN4#2 w::@1/(byte*) SCREEN4#1 )
  (byte*) SCREEN3#1 ← phi( w/(byte*) SCREEN3#2 w::@1/(byte*) SCREEN3#1 )
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b#0 ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  (byte) w::b2#0 ← (byte~) w::$3
  *((byte*) SCREEN3#1 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#1 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  (boolean~) w::$4 ← (byte) w::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN4#6 ← phi( @begin/(byte*) SCREEN4#0 )
  (byte*) SCREEN3#6 ← phi( @begin/(byte*) SCREEN3#0 )
  (byte*) SCREEN2#3 ← phi( @begin/(byte*) SCREEN2#0 )
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2#0 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (byte*) SCREEN3#0 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN#0 + (word/signed word~) $4
  (byte*) SCREEN4#0 ← (byte*~) $5
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN4#5 ← phi( @2/(byte*) SCREEN4#6 )
  (byte*) SCREEN3#5 ← phi( @2/(byte*) SCREEN3#6 )
  (byte*) SCREEN2#2 ← phi( @2/(byte*) SCREEN2#3 )
  (byte*) SCREEN#2 ← phi( @2/(byte*) SCREEN#3 )
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN4#4 ← phi( main/(byte*) SCREEN4#5 main::@1/(byte*) SCREEN4#4 )
  (byte*) SCREEN3#4 ← phi( main/(byte*) SCREEN3#5 main::@1/(byte*) SCREEN3#4 )
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#2 main::@1/(byte*) SCREEN2#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@1/(byte*) SCREEN#1 )
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b#2
  (byte) main::b2#0 ← (byte~) main::$0
  *((byte*) SCREEN#1 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb#0 ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#1 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  (boolean~) main::$4 ← (byte) main::b#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) SCREEN4#3 ← phi( main::@1/(byte*) SCREEN4#4 )
  (byte*) SCREEN3#3 ← phi( main::@1/(byte*) SCREEN3#4 )
  call w param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte*) SCREEN4#2 ← phi( main::@2/(byte*) SCREEN4#3 )
  (byte*) SCREEN3#2 ← phi( main::@2/(byte*) SCREEN3#3 )
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte*) SCREEN4#1 ← phi( w/(byte*) SCREEN4#2 w::@1/(byte*) SCREEN4#1 )
  (byte*) SCREEN3#1 ← phi( w/(byte*) SCREEN3#2 w::@1/(byte*) SCREEN3#1 )
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b#0 ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  (byte) w::b2#0 ← (byte~) w::$3
  *((byte*) SCREEN3#1 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#1 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  (boolean~) w::$4 ← (byte) w::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN4#6 ← phi( @begin/(byte*) SCREEN4#0 )
  (byte*) SCREEN3#6 ← phi( @begin/(byte*) SCREEN3#0 )
  (byte*) SCREEN2#3 ← phi( @begin/(byte*) SCREEN2#0 )
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

INITIAL SSA SYMBOL TABLE
(byte/signed byte/word/signed word~) $0
(byte*~) $1
(byte/word/signed word~) $2
(byte*~) $3
(word/signed word~) $4
(byte*~) $5
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN2
(byte*) SCREEN2#0
(byte*) SCREEN2#1
(byte*) SCREEN2#2
(byte*) SCREEN2#3
(byte*) SCREEN3
(byte*) SCREEN3#0
(byte*) SCREEN3#1
(byte*) SCREEN3#2
(byte*) SCREEN3#3
(byte*) SCREEN3#4
(byte*) SCREEN3#5
(byte*) SCREEN3#6
(byte*) SCREEN4
(byte*) SCREEN4#0
(byte*) SCREEN4#1
(byte*) SCREEN4#2
(byte*) SCREEN4#3
(byte*) SCREEN4#4
(byte*) SCREEN4#5
(byte*) SCREEN4#6
(void()) main()
(byte~) main::$0
(signed byte~) main::$1
(signed byte~) main::$2
(byte~) main::$3
(boolean~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#2
(byte) main::b2
(byte) main::b2#0
(signed byte) main::sb
(signed byte) main::sb#0
(void()) w()
(word~) w::$0
(byte~) w::$1
(byte/signed byte/word/signed word~) w::$2
(byte~) w::$3
(boolean~) w::$4
(label) w::@1
(label) w::@return
(byte) w::b
(byte) w::b#0
(byte) w::b2
(byte) w::b2#0
(byte) w::i
(byte) w::i#0
(byte) w::i#1
(byte) w::i#2
(word) w::w1
(word) w::w1#0
(word) w::w2
(word) w::w2#0

Culled Empty Block (label) main::@3
Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*~) $1 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte*) SCREEN2#0 ← (byte*~) $1
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*~) $3 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (byte*) SCREEN3#0 ← (byte*~) $3
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*~) $5 ← (byte*) SCREEN#0 + (word/signed word~) $4
  (byte*) SCREEN4#0 ← (byte*~) $5
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN4#5 ← phi( @2/(byte*) SCREEN4#6 )
  (byte*) SCREEN3#5 ← phi( @2/(byte*) SCREEN3#6 )
  (byte*) SCREEN2#2 ← phi( @2/(byte*) SCREEN2#3 )
  (byte*) SCREEN#2 ← phi( @2/(byte*) SCREEN#3 )
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN4#4 ← phi( main/(byte*) SCREEN4#5 main::@1/(byte*) SCREEN4#4 )
  (byte*) SCREEN3#4 ← phi( main/(byte*) SCREEN3#5 main::@1/(byte*) SCREEN3#4 )
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#2 main::@1/(byte*) SCREEN2#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@1/(byte*) SCREEN#1 )
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte~) main::$0 ← (byte/word/signed word) 200 - (byte) main::b#2
  (byte) main::b2#0 ← (byte~) main::$0
  *((byte*) SCREEN#1 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte) main::sb#0 ← (signed byte~) main::$2
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#1 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  (boolean~) main::$4 ← (byte) main::b#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) SCREEN4#3 ← phi( main::@1/(byte*) SCREEN4#4 )
  (byte*) SCREEN3#3 ← phi( main::@1/(byte*) SCREEN3#4 )
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte*) SCREEN4#2 ← phi( main::@2/(byte*) SCREEN4#3 )
  (byte*) SCREEN3#2 ← phi( main::@2/(byte*) SCREEN3#3 )
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte*) SCREEN4#1 ← phi( w/(byte*) SCREEN4#2 w::@1/(byte*) SCREEN4#1 )
  (byte*) SCREEN3#1 ← phi( w/(byte*) SCREEN3#2 w::@1/(byte*) SCREEN3#1 )
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte~) w::$1 ← ((byte)) (word~) w::$0
  (byte) w::b#0 ← (byte~) w::$1
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte~) w::$3 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  (byte) w::b2#0 ← (byte~) w::$3
  *((byte*) SCREEN3#1 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#1 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  (boolean~) w::$4 ← (byte) w::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN4#6 ← phi( @begin/(byte*) SCREEN4#0 )
  (byte*) SCREEN3#6 ← phi( @begin/(byte*) SCREEN3#0 )
  (byte*) SCREEN2#3 ← phi( @begin/(byte*) SCREEN2#0 )
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: SCREEN#2 SCREEN#3
Not aliassing across scopes: SCREEN2#2 SCREEN2#3
Not aliassing across scopes: SCREEN3#5 SCREEN3#6
Not aliassing across scopes: SCREEN4#5 SCREEN4#6
Not aliassing across scopes: SCREEN3#2 SCREEN3#3
Not aliassing across scopes: SCREEN4#2 SCREEN4#3
Alias (byte*) SCREEN2#0 = (byte*~) $1 (byte*) SCREEN2#3 
Alias (byte*) SCREEN3#0 = (byte*~) $3 (byte*) SCREEN3#6 
Alias (byte*) SCREEN4#0 = (byte*~) $5 (byte*) SCREEN4#6 
Alias (byte) main::b2#0 = (byte~) main::$0 
Alias (signed byte) main::sb#0 = (signed byte~) main::$2 
Alias (byte*) SCREEN3#3 = (byte*) SCREEN3#4 
Alias (byte*) SCREEN4#3 = (byte*) SCREEN4#4 
Alias (byte) w::b#0 = (byte~) w::$1 
Alias (byte) w::b2#0 = (byte~) w::$3 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*) SCREEN2#0 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*) SCREEN3#0 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*) SCREEN4#0 ← (byte*) SCREEN#0 + (word/signed word~) $4
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN4#5 ← phi( @2/(byte*) SCREEN4#0 )
  (byte*) SCREEN3#5 ← phi( @2/(byte*) SCREEN3#0 )
  (byte*) SCREEN2#2 ← phi( @2/(byte*) SCREEN2#0 )
  (byte*) SCREEN#2 ← phi( @2/(byte*) SCREEN#0 )
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN4#3 ← phi( main/(byte*) SCREEN4#5 main::@1/(byte*) SCREEN4#3 )
  (byte*) SCREEN3#3 ← phi( main/(byte*) SCREEN3#5 main::@1/(byte*) SCREEN3#3 )
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#2 main::@1/(byte*) SCREEN2#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@1/(byte*) SCREEN#1 )
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((byte*) SCREEN#1 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#1 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  (boolean~) main::$4 ← (byte) main::b#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte*) SCREEN4#2 ← phi( main::@2/(byte*) SCREEN4#3 )
  (byte*) SCREEN3#2 ← phi( main::@2/(byte*) SCREEN3#3 )
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte*) SCREEN4#1 ← phi( w/(byte*) SCREEN4#2 w::@1/(byte*) SCREEN4#1 )
  (byte*) SCREEN3#1 ← phi( w/(byte*) SCREEN3#2 w::@1/(byte*) SCREEN3#1 )
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte) w::b#0 ← ((byte)) (word~) w::$0
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte) w::b2#0 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  *((byte*) SCREEN3#1 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#1 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  (boolean~) w::$4 ← (byte) w::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: SCREEN#2 SCREEN#0
Not aliassing across scopes: SCREEN2#2 SCREEN2#0
Not aliassing across scopes: SCREEN3#5 SCREEN3#0
Not aliassing across scopes: SCREEN4#5 SCREEN4#0
Not aliassing across scopes: SCREEN3#2 SCREEN3#3
Not aliassing across scopes: SCREEN4#2 SCREEN4#3
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte*) SCREEN2#1
Self Phi Eliminated (byte*) SCREEN3#3
Self Phi Eliminated (byte*) SCREEN4#3
Self Phi Eliminated (byte*) SCREEN3#1
Self Phi Eliminated (byte*) SCREEN4#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*) SCREEN2#0 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*) SCREEN3#0 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*) SCREEN4#0 ← (byte*) SCREEN#0 + (word/signed word~) $4
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN4#5 ← phi( @2/(byte*) SCREEN4#0 )
  (byte*) SCREEN3#5 ← phi( @2/(byte*) SCREEN3#0 )
  (byte*) SCREEN2#2 ← phi( @2/(byte*) SCREEN2#0 )
  (byte*) SCREEN#2 ← phi( @2/(byte*) SCREEN#0 )
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN4#3 ← phi( main/(byte*) SCREEN4#5 )
  (byte*) SCREEN3#3 ← phi( main/(byte*) SCREEN3#5 )
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#2 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 )
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((byte*) SCREEN#1 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#1 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  (boolean~) main::$4 ← (byte) main::b#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte*) SCREEN4#2 ← phi( main::@2/(byte*) SCREEN4#3 )
  (byte*) SCREEN3#2 ← phi( main::@2/(byte*) SCREEN3#3 )
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte*) SCREEN4#1 ← phi( w/(byte*) SCREEN4#2 )
  (byte*) SCREEN3#1 ← phi( w/(byte*) SCREEN3#2 )
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte) w::b#0 ← ((byte)) (word~) w::$0
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte) w::b2#0 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  *((byte*) SCREEN3#1 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#1 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  (boolean~) w::$4 ← (byte) w::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN2#2 (byte*) SCREEN2#0
Redundant Phi (byte*) SCREEN3#5 (byte*) SCREEN3#0
Redundant Phi (byte*) SCREEN4#5 (byte*) SCREEN4#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Redundant Phi (byte*) SCREEN2#1 (byte*) SCREEN2#2
Redundant Phi (byte*) SCREEN3#3 (byte*) SCREEN3#5
Redundant Phi (byte*) SCREEN4#3 (byte*) SCREEN4#5
Redundant Phi (byte*) SCREEN3#2 (byte*) SCREEN3#3
Redundant Phi (byte*) SCREEN4#2 (byte*) SCREEN4#3
Redundant Phi (byte*) SCREEN3#1 (byte*) SCREEN3#2
Redundant Phi (byte*) SCREEN4#1 (byte*) SCREEN4#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*) SCREEN2#0 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*) SCREEN3#0 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*) SCREEN4#0 ← (byte*) SCREEN#0 + (word/signed word~) $4
  to:@2
main: scope:[main]  from @2
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  (boolean~) main::$4 ← (byte) main::b#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte) w::b#0 ← ((byte)) (word~) w::$0
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte) w::b2#0 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  *((byte*) SCREEN3#0 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  (boolean~) w::$4 ← (byte) w::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) w::$4) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Simple Condition (boolean~) main::$4 if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1
Simple Condition (boolean~) w::$4 if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 3
  (byte*) SCREEN2#0 ← (byte*) SCREEN#0 + (byte/signed byte/word/signed word~) $0
  (byte/word/signed word~) $2 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 6
  (byte*) SCREEN3#0 ← (byte*) SCREEN#0 + (byte/word/signed word~) $2
  (word/signed word~) $4 ← (byte/signed byte/word/signed word) 40 * (byte/signed byte/word/signed word) 9
  (byte*) SCREEN4#0 ← (byte*) SCREEN#0 + (word/signed word~) $4
  to:@2
main: scope:[main]  from @2
  (byte) main::b#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  (byte) w::i#0 ← (byte/signed byte/word/signed word) 0
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte) w::i#2 ← phi( w/(byte) w::i#0 w::@1/(byte) w::i#1 )
  (word) w::w1#0 ← (word/signed word) 1300
  (word) w::w2#0 ← (word/signed word) 1250
  (word~) w::$0 ← (word) w::w1#0 - (word) w::w2#0
  (byte) w::b#0 ← ((byte)) (word~) w::$0
  (byte/signed byte/word/signed word~) w::$2 ← (word/signed word) 1400 - (word/signed word) 1350
  (byte) w::b2#0 ← (byte/signed byte/word/signed word~) w::$2 + (byte) w::i#2
  *((byte*) SCREEN3#0 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte/signed byte/word/signed word) $0 = 40*3
Constant (const byte/word/signed word) $2 = 40*6
Constant (const word/signed word) $4 = 40*9
Constant (const byte) main::b#0 = 0
Constant (const byte) w::i#0 = 0
Constant (const word) w::w1#0 = 1300
Constant (const word) w::w2#0 = 1250
Constant (const byte/signed byte/word/signed word) w::$2 = 1400-1350
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN2#0 ← (const byte*) SCREEN#0 + (const byte/signed byte/word/signed word) $0
  (byte*) SCREEN3#0 ← (const byte*) SCREEN#0 + (const byte/word/signed word) $2
  (byte*) SCREEN4#0 ← (const byte*) SCREEN#0 + (const word/signed word) $4
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(const byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte) w::i#2 ← phi( w/(const byte) w::i#0 w::@1/(byte) w::i#1 )
  (word~) w::$0 ← (const word) w::w1#0 - (const word) w::w2#0
  (byte) w::b#0 ← ((byte)) (word~) w::$0
  (byte) w::b2#0 ← (const byte/signed byte/word/signed word) w::$2 + (byte) w::i#2
  *((byte*) SCREEN3#0 + (byte) w::i#2) ← (byte) w::b#0
  *((byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Constant (const byte*) SCREEN2#0 = SCREEN#0+$0
Constant (const byte*) SCREEN3#0 = SCREEN#0+$2
Constant (const byte*) SCREEN4#0 = SCREEN#0+$4
Constant (const word) w::$0 = w::w1#0-w::w2#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(const byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte) w::i#2 ← phi( w/(const byte) w::i#0 w::@1/(byte) w::i#1 )
  (byte) w::b#0 ← ((byte)) (const word) w::$0
  (byte) w::b2#0 ← (const byte/signed byte/word/signed word) w::$2 + (byte) w::i#2
  *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (byte) w::b#0
  *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Constant (const byte) w::b#0 = ((byte))w::$0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(const byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte) w::i#2 ← phi( w/(const byte) w::i#0 w::@1/(byte) w::i#1 )
  (byte) w::b2#0 ← (const byte/signed byte/word/signed word) w::$2 + (byte) w::i#2
  *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0
  *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Multiple usages for variable. Not optimizing sub-constant (byte) main::b#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::b#2
Multiple usages for variable. Not optimizing sub-constant (byte) w::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) w::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) w::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::b#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::b#2
Multiple usages for variable. Not optimizing sub-constant (byte) w::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) w::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) w::i#2
Inlining constant with var siblings (const byte) main::b#0
Inlining constant with var siblings (const byte) main::b#0
Inlining constant with var siblings (const byte) w::i#0
Inlining constant with var siblings (const byte) w::i#0
Constant inlined $4 = (byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 9
Constant inlined w::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::b#0 = (byte/signed byte/word/signed word) 0
Constant inlined w::$0 = (const word) w::w1#0-(const word) w::w2#0
Constant inlined $0 = (byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 3
Constant inlined w::$2 = (word/signed word) 1400-(word/signed word) 1350
Constant inlined $2 = (byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 6
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@1/(byte) main::b#1 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
w: scope:[w]  from main::@2
  to:w::@1
w::@1: scope:[w]  from w w::@1
  (byte) w::i#2 ← phi( w/(byte/signed byte/word/signed word) 0 w::@1/(byte) w::i#1 )
  (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2
  *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0
  *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = ((byte*))(word/signed word) 1024
(byte*) SCREEN2
(const byte*) SCREEN2#0 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 3
(byte*) SCREEN3
(const byte*) SCREEN3#0 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 6
(byte*) SCREEN4
(const byte*) SCREEN4#0 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 9
(void()) main()
(signed byte~) main::$1
(byte~) main::$3
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::b
(byte) main::b#1
(byte) main::b#2
(byte) main::b2
(byte) main::b2#0
(signed byte) main::sb
(signed byte) main::sb#0
(void()) w()
(label) w::@1
(label) w::@return
(byte) w::b
(const byte) w::b#0 = ((byte))(const word) w::w1#0-(const word) w::w2#0
(byte) w::b2
(byte) w::b2#0
(byte) w::i
(byte) w::i#1
(byte) w::i#2
(word) w::w1
(const word) w::w1#0 = (word/signed word) 1300
(word) w::w2
(const word) w::w2#0 = (word/signed word) 1250

Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@return w w::@1 w::@return 
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting w::@3(between w::@1 and w::@1)
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@return main::@4 w w::@1 w::@return w::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::b#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@4/(byte~) main::b#3 )
  (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2
  *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2
  (signed byte) main::sb#0 ← - (signed byte~) main::$1
  (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0
  *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3
  (byte) main::b#1 ← ++ (byte) main::b#2
  if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@4
  to:main::@2
main::@2: scope:[main]  from main::@1
  call w param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@4: scope:[main]  from main::@1
  (byte~) main::b#3 ← (byte) main::b#1
  to:main::@1
w: scope:[w]  from main::@2
  to:w::@1
w::@1: scope:[w]  from w w::@3
  (byte) w::i#2 ← phi( w/(byte/signed byte/word/signed word) 0 w::@3/(byte~) w::i#3 )
  (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2
  *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0
  *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0
  (byte) w::i#1 ← ++ (byte) w::i#2
  if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@3
  to:w::@return
w::@return: scope:[w]  from w::@1
  return 
  to:@return
w::@3: scope:[w]  from w::@1
  (byte~) w::i#3 ← (byte) w::i#1
  to:w::@1

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of w
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to w:15 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ]
main: scope:[main]  from @2
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (byte) main::b#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@4/(byte~) main::b#3 ) [ main::b#2 ]
  [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ]
  [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ]
  [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ]
  [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ]
  [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ]
  [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ]
  [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ]
  [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@4 [ main::b#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [14] phi() [ ]
  [15] call w param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return  [ ]
  to:@return
main::@4: scope:[main]  from main::@1
  [17] (byte~) main::b#3 ← (byte) main::b#1 [ main::b#3 ]
  to:main::@1
w: scope:[w]  from main::@2
  [18] phi() [ ]
  to:w::@1
w::@1: scope:[w]  from w w::@3
  [19] (byte) w::i#2 ← phi( w/(byte/signed byte/word/signed word) 0 w::@3/(byte~) w::i#3 ) [ w::i#2 ]
  [20] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ]
  [21] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ]
  [22] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ]
  [23] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ]
  [24] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@3 [ w::i#1 ]
  to:w::@return
w::@return: scope:[w]  from w::@1
  [25] return  [ ]
  to:@return
w::@3: scope:[w]  from w::@1
  [26] (byte~) w::i#3 ← (byte) w::i#1 [ w::i#3 ]
  to:w::@1

Created 2 initial phi equivalence classes
Coalesced [17] main::b#3 ← main::b#1
Coalesced [26] w::i#3 ← w::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) w::@3
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@return w w::@1 w::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of w
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ]
main: scope:[main]  from @2
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::b#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@1/(byte) main::b#1 ) [ main::b#2 ]
  [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ]
  [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ]
  [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ]
  [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ]
  [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ]
  [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ]
  [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ]
  [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [14] phi() [ ]
  [15] call w param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return  [ ]
  to:@return
w: scope:[w]  from main::@2
  [17] phi() [ ]
  to:w::@1
w::@1: scope:[w]  from w w::@1
  [18] (byte) w::i#2 ← phi( w/(byte/signed byte/word/signed word) 0 w::@1/(byte) w::i#1 ) [ w::i#2 ]
  [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ]
  [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ]
  [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ]
  [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ]
  [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ]
  to:w::@return
w::@return: scope:[w]  from w::@1
  [24] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ] ( )
main: scope:[main]  from @2
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::b#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@1/(byte) main::b#1 ) [ main::b#2 ] ( main:2 [ main::b#2 ] )
  [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] )
  [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] )
  [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] )
  [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] )
  [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] )
  [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] )
  [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] )
  [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [14] phi() [ ] ( main:2 [ ] )
  [15] call w param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return  [ ] ( main:2 [ ] )
  to:@return
w: scope:[w]  from main::@2
  [17] phi() [ ] ( main:2::w:15 [ ] )
  to:w::@1
w::@1: scope:[w]  from w w::@1
  [18] (byte) w::i#2 ← phi( w/(byte/signed byte/word/signed word) 0 w::@1/(byte) w::i#1 ) [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] )
  [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] )
  [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] )
  [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] )
  [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] )
  [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] )
  to:w::@return
w::@return: scope:[w]  from w::@1
  [24] return  [ ] ( main:2::w:15 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @begin @end 
main dominated by  @2 @begin main 
main::@1 dominated by  @2 @begin main::@1 main 
main::@2 dominated by  @2 @begin main::@1 main::@2 main 
main::@return dominated by  main::@return @2 @begin main::@1 main::@2 main 
w dominated by  @2 @begin w main::@1 main::@2 main 
w::@1 dominated by  w::@1 @2 @begin w main::@1 main::@2 main 
w::@return dominated by  w::@1 @2 @begin w main::@1 main::@2 main w::@return 

Found back edge: Loop head: main::@1 tails: main::@1 blocks: null
Found back edge: Loop head: w::@1 tails: w::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@1 blocks: main::@1 
Populated: Loop head: w::@1 tails: w::@1 blocks: w::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@1 blocks: main::@1 
Loop head: w::@1 tails: w::@1 blocks: w::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@1 blocks: main::@1 
Found 1 loops in scope [w]
  Loop head: w::@1 tails: w::@1 blocks: w::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@1 blocks: main::@1  depth: 1
Loop head: w::@1 tails: w::@1 blocks: w::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte*) SCREEN2
(byte*) SCREEN3
(byte*) SCREEN4
(void()) main()
(signed byte~) main::$1 22.0
(byte~) main::$3 22.0
(byte) main::b
(byte) main::b#1 16.5
(byte) main::b#2 9.428571428571429
(byte) main::b2
(byte) main::b2#0 22.0
(signed byte) main::sb
(signed byte) main::sb#0 22.0
(void()) w()
(byte) w::b
(byte) w::b2
(byte) w::b2#0 11.0
(byte) w::i
(byte) w::i#1 16.5
(byte) w::i#2 13.75
(word) w::w1
(word) w::w2

Initial phi equivalence classes
[ main::b#2 main::b#1 ]
[ w::i#2 w::i#1 ]
Added variable main::b2#0 to zero page equivalence class [ main::b2#0 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::sb#0 to zero page equivalence class [ main::sb#0 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable w::b2#0 to zero page equivalence class [ w::b2#0 ]
Complete equivalence classes
[ main::b#2 main::b#1 ]
[ w::i#2 w::i#1 ]
[ main::b2#0 ]
[ main::$1 ]
[ main::sb#0 ]
[ main::$3 ]
[ w::b2#0 ]
Allocated zp ZP_BYTE:2 [ main::b#2 main::b#1 ]
Allocated zp ZP_BYTE:3 [ w::i#2 w::i#1 ]
Allocated zp ZP_BYTE:4 [ main::b2#0 ]
Allocated zp ZP_SBYTE:5 [ main::$1 ]
Allocated zp ZP_SBYTE:6 [ main::sb#0 ]
Allocated zp ZP_BYTE:7 [ main::$3 ]
Allocated zp ZP_BYTE:8 [ w::b2#0 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = SCREEN+$28*3
  .const SCREEN3 = SCREEN+$28*6
  .const SCREEN4 = SCREEN+$28*9
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label _1 = 5
    .label _3 = 7
    .label b2 = 4
    .label sb = 6
    .label b = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::b#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta b
    jmp b1
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG13 [5] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) -- zpby1=coby1_minus_zpby2 
    lda b
    eor #$ff
    clc
    adc #$c8+1
    sta b2
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_zpby1=zpby2 
    lda b2
    ldx b
    sta SCREEN,x
  //SEG17 [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] ) -- zpsby1=_sbyte_zpby1 
    lda b
    sta _1
  //SEG18 [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) -- zpsby1=_neg_zpsby2 
    lda _1
    eor #$ff
    clc
    adc #1
    sta sb
  //SEG19 [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] ) -- zpby1=_byte_zpsby1 
    lda sb
    sta _3
  //SEG20 [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_zpby1=zpby2 
    lda _3
    ldx b
    sta SCREEN2,x
  //SEG21 [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- zpby1=_inc_zpby1 
    inc b
  //SEG22 [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda b
    cmp #$65
    bne b1_from_b1
  //SEG23 [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG24 main::@2
  b2:
  //SEG25 [15] call w param-assignment [ ] ( main:2 [ ] )
  //SEG26 [17] phi from main::@2 to w [phi:main::@2->w]
  w_from_b2:
    jsr w
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [16] return  [ ] ( main:2 [ ] )
    rts
}
//SEG29 w
w: {
    .const w1 = $514
    .const w2 = $4e2
    .const b = w1-w2
    .label b2 = 8
    .label i = 3
  //SEG30 [18] phi from w to w::@1 [phi:w->w::@1]
  b1_from_w:
  //SEG31 [18] phi (byte) w::i#2 = (byte/signed byte/word/signed word) 0 [phi:w->w::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG32 [18] phi from w::@1 to w::@1 [phi:w::@1->w::@1]
  b1_from_b1:
  //SEG33 [18] phi (byte) w::i#2 = (byte) w::i#1 [phi:w::@1->w::@1#0] -- register_copy 
    jmp b1
  //SEG34 w::@1
  b1:
  //SEG35 [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- zpby1=coby1_plus_zpby2 
    lda i
    clc
    adc #$578-$546
    sta b2
  //SEG36 [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- cowo1_derefidx_zpby1=coby2 
    lda #b
    ldx i
    sta SCREEN3,x
  //SEG37 [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) -- cowo1_derefidx_zpby1=zpby2 
    lda b2
    ldx i
    sta SCREEN4,x
  //SEG38 [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG39 [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda i
    cmp #$b
    bne b1_from_b1
    jmp breturn
  //SEG40 w::@return
  breturn:
  //SEG41 [24] return  [ ] ( main:2::w:15 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::b#2 main::b#1 ]
Statement [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) always clobbers reg byte a 
Statement [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ w::i#2 w::i#1 ]
Statement [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ w::b2#0 ]
Statement [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) always clobbers reg byte a 
Statement [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) always clobbers reg byte a 
Statement [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) always clobbers reg byte a 
Statement [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) always clobbers reg byte a 
Statement [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::b#2 main::b#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ w::i#2 w::i#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::b2#0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_SBYTE:5 [ main::$1 ] : zp ZP_SBYTE:5 , reg sbyte a , reg sbyte x , reg sbyte y , 
Potential registers zp ZP_SBYTE:6 [ main::sb#0 ] : zp ZP_SBYTE:6 , reg sbyte a , reg sbyte x , reg sbyte y , 
Potential registers zp ZP_BYTE:7 [ main::$3 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ w::b2#0 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.93: zp ZP_BYTE:2 [ main::b#2 main::b#1 ] 22: zp ZP_BYTE:4 [ main::b2#0 ] 22: zp ZP_SBYTE:5 [ main::$1 ] 22: zp ZP_SBYTE:6 [ main::sb#0 ] 22: zp ZP_BYTE:7 [ main::$3 ] 
Uplift Scope [w] 30.25: zp ZP_BYTE:3 [ w::i#2 w::i#1 ] 11: zp ZP_BYTE:8 [ w::b2#0 ] 
Uplift Scope [] 

Uplifting [main] best 1056 combination reg byte x [ main::b#2 main::b#1 ] reg byte a [ main::b2#0 ] reg sbyte a [ main::$1 ] reg sbyte a [ main::sb#0 ] reg byte a [ main::$3 ] 
Uplifting [w] best 876 combination reg byte y [ w::i#2 w::i#1 ] reg byte x [ w::b2#0 ] 
Uplifting [] best 876 combination 
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = SCREEN+$28*3
  .const SCREEN3 = SCREEN+$28*6
  .const SCREEN4 = SCREEN+$28*9
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
//SEG4 @2
b2:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::b#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG13 [5] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) -- aby=coby1_minus_xby 
    stx $ff
    lda #$c8
    sec
    sbc $ff
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG17 [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] ) -- asby=_sbyte_xby 
    txa
  //SEG18 [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) -- asby=_neg_asby 
    eor #$ff
    clc
    adc #1
  //SEG19 [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] ) -- aby=_byte_asby 
  //SEG20 [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN2,x
  //SEG21 [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby=_inc_xby 
    inx
  //SEG22 [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1_from_b1
  //SEG23 [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG24 main::@2
  b2:
  //SEG25 [15] call w param-assignment [ ] ( main:2 [ ] )
  //SEG26 [17] phi from main::@2 to w [phi:main::@2->w]
  w_from_b2:
    jsr w
  //SEG27 main::@return
  breturn:
  //SEG28 [16] return  [ ] ( main:2 [ ] )
    rts
}
//SEG29 w
w: {
    .const w1 = $514
    .const w2 = $4e2
    .const b = w1-w2
  //SEG30 [18] phi from w to w::@1 [phi:w->w::@1]
  b1_from_w:
  //SEG31 [18] phi (byte) w::i#2 = (byte/signed byte/word/signed word) 0 [phi:w->w::@1#0] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG32 [18] phi from w::@1 to w::@1 [phi:w::@1->w::@1]
  b1_from_b1:
  //SEG33 [18] phi (byte) w::i#2 = (byte) w::i#1 [phi:w::@1->w::@1#0] -- register_copy 
  //SEG34 w::@1
  b1:
  //SEG35 [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- xby=coby1_plus_yby 
    tya
    clc
    adc #$578-$546
    tax
  //SEG36 [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- cowo1_derefidx_yby=coby2 
    lda #b
    sta SCREEN3,y
  //SEG37 [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) -- cowo1_derefidx_yby=xby 
    txa
    sta SCREEN4,y
  //SEG38 [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby=_inc_yby 
    iny
  //SEG39 [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1_from_b1
  //SEG40 w::@return
  breturn:
  //SEG41 [24] return  [ ] ( main:2::w:15 [ ] )
    rts
}

Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b2_from_bbegin:
Removing instruction main_from_b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction w_from_b2:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = SCREEN+$28*3
  .const SCREEN3 = SCREEN+$28*6
  .const SCREEN4 = SCREEN+$28*9
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
b2:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::b#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG13 [5] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) -- aby=coby1_minus_xby 
    stx $ff
    lda #$c8
    sec
    sbc $ff
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG17 [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] ) -- asby=_sbyte_xby 
    txa
  //SEG18 [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) -- asby=_neg_asby 
    eor #$ff
    clc
    adc #1
  //SEG19 [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] ) -- aby=_byte_asby 
  //SEG20 [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN2,x
  //SEG21 [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby=_inc_xby 
    inx
  //SEG22 [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG23 [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG24 main::@2
  b2:
  //SEG25 [15] call w param-assignment [ ] ( main:2 [ ] )
  //SEG26 [17] phi from main::@2 to w [phi:main::@2->w]
    jsr w
  //SEG27 main::@return
  breturn:
  //SEG28 [16] return  [ ] ( main:2 [ ] )
    rts
}
//SEG29 w
w: {
    .const w1 = $514
    .const w2 = $4e2
    .const b = w1-w2
  //SEG30 [18] phi from w to w::@1 [phi:w->w::@1]
  b1_from_w:
  //SEG31 [18] phi (byte) w::i#2 = (byte/signed byte/word/signed word) 0 [phi:w->w::@1#0] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG32 [18] phi from w::@1 to w::@1 [phi:w::@1->w::@1]
  //SEG33 [18] phi (byte) w::i#2 = (byte) w::i#1 [phi:w::@1->w::@1#0] -- register_copy 
  //SEG34 w::@1
  b1:
  //SEG35 [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- xby=coby1_plus_yby 
    tya
    clc
    adc #$578-$546
    tax
  //SEG36 [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- cowo1_derefidx_yby=coby2 
    lda #b
    sta SCREEN3,y
  //SEG37 [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) -- cowo1_derefidx_yby=xby 
    txa
    sta SCREEN4,y
  //SEG38 [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby=_inc_yby 
    iny
  //SEG39 [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG40 w::@return
  breturn:
  //SEG41 [24] return  [ ] ( main:2::w:15 [ ] )
    rts
}

Removing instruction b2:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_w:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = SCREEN+$28*3
  .const SCREEN3 = SCREEN+$28*6
  .const SCREEN4 = SCREEN+$28*9
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::b#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG13 [5] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) -- aby=coby1_minus_xby 
    stx $ff
    lda #$c8
    sec
    sbc $ff
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG17 [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] ) -- asby=_sbyte_xby 
    txa
  //SEG18 [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) -- asby=_neg_asby 
    eor #$ff
    clc
    adc #1
  //SEG19 [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] ) -- aby=_byte_asby 
  //SEG20 [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN2,x
  //SEG21 [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby=_inc_xby 
    inx
  //SEG22 [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG23 [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG24 main::@2
  //SEG25 [15] call w param-assignment [ ] ( main:2 [ ] )
  //SEG26 [17] phi from main::@2 to w [phi:main::@2->w]
    jsr w
  //SEG27 main::@return
  //SEG28 [16] return  [ ] ( main:2 [ ] )
    rts
}
//SEG29 w
w: {
    .const w1 = $514
    .const w2 = $4e2
    .const b = w1-w2
  //SEG30 [18] phi from w to w::@1 [phi:w->w::@1]
  //SEG31 [18] phi (byte) w::i#2 = (byte/signed byte/word/signed word) 0 [phi:w->w::@1#0] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG32 [18] phi from w::@1 to w::@1 [phi:w::@1->w::@1]
  //SEG33 [18] phi (byte) w::i#2 = (byte) w::i#1 [phi:w::@1->w::@1#0] -- register_copy 
  //SEG34 w::@1
  b1:
  //SEG35 [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- xby=coby1_plus_yby 
    tya
    clc
    adc #$578-$546
    tax
  //SEG36 [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- cowo1_derefidx_yby=coby2 
    lda #b
    sta SCREEN3,y
  //SEG37 [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) -- cowo1_derefidx_yby=xby 
    txa
    sta SCREEN4,y
  //SEG38 [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby=_inc_yby 
    iny
  //SEG39 [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG40 w::@return
  //SEG41 [24] return  [ ] ( main:2::w:15 [ ] )
    rts
}

Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = SCREEN+$28*3
  .const SCREEN3 = SCREEN+$28*6
  .const SCREEN4 = SCREEN+$28*9
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::b#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG13 [5] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) -- aby=coby1_minus_xby 
    stx $ff
    lda #$c8
    sec
    sbc $ff
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG17 [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] ) -- asby=_sbyte_xby 
    txa
  //SEG18 [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) -- asby=_neg_asby 
    eor #$ff
    clc
    adc #1
  //SEG19 [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] ) -- aby=_byte_asby 
  //SEG20 [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN2,x
  //SEG21 [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby=_inc_xby 
    inx
  //SEG22 [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG23 [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG24 main::@2
  //SEG25 [15] call w param-assignment [ ] ( main:2 [ ] )
  //SEG26 [17] phi from main::@2 to w [phi:main::@2->w]
    jsr w
  //SEG27 main::@return
  //SEG28 [16] return  [ ] ( main:2 [ ] )
    rts
}
//SEG29 w
w: {
    .const w1 = $514
    .const w2 = $4e2
    .const b = w1-w2
  //SEG30 [18] phi from w to w::@1 [phi:w->w::@1]
  //SEG31 [18] phi (byte) w::i#2 = (byte/signed byte/word/signed word) 0 [phi:w->w::@1#0] -- yby=coby1 
    ldy #0
  //SEG32 [18] phi from w::@1 to w::@1 [phi:w::@1->w::@1]
  //SEG33 [18] phi (byte) w::i#2 = (byte) w::i#1 [phi:w::@1->w::@1#0] -- register_copy 
  //SEG34 w::@1
  b1:
  //SEG35 [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- xby=coby1_plus_yby 
    tya
    clc
    adc #$578-$546
    tax
  //SEG36 [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- cowo1_derefidx_yby=coby2 
    lda #b
    sta SCREEN3,y
  //SEG37 [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) -- cowo1_derefidx_yby=xby 
    txa
    sta SCREEN4,y
  //SEG38 [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby=_inc_yby 
    iny
  //SEG39 [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG40 w::@return
  //SEG41 [24] return  [ ] ( main:2::w:15 [ ] )
    rts
}

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(byte*) SCREEN2
(const byte*) SCREEN2#0 SCREEN2 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 3
(byte*) SCREEN3
(const byte*) SCREEN3#0 SCREEN3 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 6
(byte*) SCREEN4
(const byte*) SCREEN4#0 SCREEN4 = (const byte*) SCREEN#0+(byte/signed byte/word/signed word) 40*(byte/signed byte/word/signed word) 9
(void()) main()
(signed byte~) main::$1 reg sbyte a 22.0
(byte~) main::$3 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::b
(byte) main::b#1 reg byte x 16.5
(byte) main::b#2 reg byte x 9.428571428571429
(byte) main::b2
(byte) main::b2#0 reg byte a 22.0
(signed byte) main::sb
(signed byte) main::sb#0 reg sbyte a 22.0
(void()) w()
(label) w::@1
(label) w::@return
(byte) w::b
(const byte) w::b#0 b = ((byte))(const word) w::w1#0-(const word) w::w2#0
(byte) w::b2
(byte) w::b2#0 reg byte x 11.0
(byte) w::i
(byte) w::i#1 reg byte y 16.5
(byte) w::i#2 reg byte y 13.75
(word) w::w1
(const word) w::w1#0 w1 = (word/signed word) 1300
(word) w::w2
(const word) w::w2#0 w2 = (word/signed word) 1250

reg byte x [ main::b#2 main::b#1 ]
reg byte y [ w::i#2 w::i#1 ]
reg byte a [ main::b2#0 ]
reg sbyte a [ main::$1 ]
reg sbyte a [ main::sb#0 ]
reg byte a [ main::$3 ]
reg byte x [ w::b2#0 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = SCREEN+$28*3
  .const SCREEN3 = SCREEN+$28*6
  .const SCREEN4 = SCREEN+$28*9
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::b#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG13 [5] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (byte) main::b2#0 ← (byte/word/signed word) 200 - (byte) main::b#2 [ main::b#2 main::b2#0 ] ( main:2 [ main::b#2 main::b2#0 ] ) -- aby=coby1_minus_xby 
    stx $ff
    lda #$c8
    sec
    sbc $ff
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::b#2) ← (byte) main::b2#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG17 [8] (signed byte~) main::$1 ← ((signed byte)) (byte) main::b#2 [ main::b#2 main::$1 ] ( main:2 [ main::b#2 main::$1 ] ) -- asby=_sbyte_xby 
    txa
  //SEG18 [9] (signed byte) main::sb#0 ← - (signed byte~) main::$1 [ main::b#2 main::sb#0 ] ( main:2 [ main::b#2 main::sb#0 ] ) -- asby=_neg_asby 
    eor #$ff
    clc
    adc #1
  //SEG19 [10] (byte~) main::$3 ← ((byte)) (signed byte) main::sb#0 [ main::b#2 main::$3 ] ( main:2 [ main::b#2 main::$3 ] ) -- aby=_byte_asby 
  //SEG20 [11] *((const byte*) SCREEN2#0 + (byte) main::b#2) ← (byte~) main::$3 [ main::b#2 ] ( main:2 [ main::b#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN2,x
  //SEG21 [12] (byte) main::b#1 ← ++ (byte) main::b#2 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby=_inc_xby 
    inx
  //SEG22 [13] if((byte) main::b#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG23 [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG24 main::@2
  //SEG25 [15] call w param-assignment [ ] ( main:2 [ ] )
  //SEG26 [17] phi from main::@2 to w [phi:main::@2->w]
    jsr w
  //SEG27 main::@return
  //SEG28 [16] return  [ ] ( main:2 [ ] )
    rts
}
//SEG29 w
w: {
    .const w1 = $514
    .const w2 = $4e2
    .const b = w1-w2
  //SEG30 [18] phi from w to w::@1 [phi:w->w::@1]
  //SEG31 [18] phi (byte) w::i#2 = (byte/signed byte/word/signed word) 0 [phi:w->w::@1#0] -- yby=coby1 
    ldy #0
  //SEG32 [18] phi from w::@1 to w::@1 [phi:w::@1->w::@1]
  //SEG33 [18] phi (byte) w::i#2 = (byte) w::i#1 [phi:w::@1->w::@1#0] -- register_copy 
  //SEG34 w::@1
  b1:
  //SEG35 [19] (byte) w::b2#0 ← (word/signed word) 1400-(word/signed word) 1350 + (byte) w::i#2 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- xby=coby1_plus_yby 
    tya
    clc
    adc #$578-$546
    tax
  //SEG36 [20] *((const byte*) SCREEN3#0 + (byte) w::i#2) ← (const byte) w::b#0 [ w::i#2 w::b2#0 ] ( main:2::w:15 [ w::i#2 w::b2#0 ] ) -- cowo1_derefidx_yby=coby2 
    lda #b
    sta SCREEN3,y
  //SEG37 [21] *((const byte*) SCREEN4#0 + (byte) w::i#2) ← (byte) w::b2#0 [ w::i#2 ] ( main:2::w:15 [ w::i#2 ] ) -- cowo1_derefidx_yby=xby 
    txa
    sta SCREEN4,y
  //SEG38 [22] (byte) w::i#1 ← ++ (byte) w::i#2 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby=_inc_yby 
    iny
  //SEG39 [23] if((byte) w::i#1!=(byte/signed byte/word/signed word) 11) goto w::@1 [ w::i#1 ] ( main:2::w:15 [ w::i#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG40 w::@return
  //SEG41 [24] return  [ ] ( main:2::w:15 [ ] )
    rts
}

