@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] phi()
  [6] call clock_start 
  to:main::@2
main::@2: scope:[main]  from main::@1
  asm { nop  }
  [8] call clock 
  [9] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] (dword~) main::$1 ← (dword) clock::return#2
  [11] (dword) main::cyclecount#0 ← (dword~) main::$1 - (const nomodify dword) CLOCKS_PER_INIT
  [12] (dword) print_ulong_at::dw#0 ← (dword) main::cyclecount#0
  [13] call print_ulong_at 
  to:main::@1

(void()) print_ulong_at((dword) print_ulong_at::dw , (byte*) print_ulong_at::at)
print_ulong_at: scope:[print_ulong_at]  from main::@3
  [14] (word) print_uint_at::w#0 ← > (dword) print_ulong_at::dw#0
  [15] call print_uint_at 
  to:print_ulong_at::@1
print_ulong_at::@1: scope:[print_ulong_at]  from print_ulong_at
  [16] (word) print_uint_at::w#1 ← < (dword) print_ulong_at::dw#0
  [17] call print_uint_at 
  to:print_ulong_at::@return
print_ulong_at::@return: scope:[print_ulong_at]  from print_ulong_at::@1
  [18] return 
  to:@return

(void()) print_uint_at((word) print_uint_at::w , (byte*) print_uint_at::at)
print_uint_at: scope:[print_uint_at]  from print_ulong_at print_ulong_at::@1
  [19] (byte*) print_uint_at::at#2 ← phi( print_ulong_at/(const nomodify byte*) SCREEN print_ulong_at::@1/(const nomodify byte*) SCREEN+(byte) 4 )
  [19] (word) print_uint_at::w#2 ← phi( print_ulong_at/(word) print_uint_at::w#0 print_ulong_at::@1/(word) print_uint_at::w#1 )
  [20] (byte) print_u8_at::b#0 ← > (word) print_uint_at::w#2
  [21] (byte*) print_u8_at::at#0 ← (byte*) print_uint_at::at#2
  [22] call print_u8_at 
  to:print_uint_at::@1
print_uint_at::@1: scope:[print_uint_at]  from print_uint_at
  [23] (byte) print_u8_at::b#1 ← < (word) print_uint_at::w#2
  [24] (byte*) print_u8_at::at#1 ← (byte*) print_uint_at::at#2 + (byte) 2
  [25] call print_u8_at 
  to:print_uint_at::@return
print_uint_at::@return: scope:[print_uint_at]  from print_uint_at::@1
  [26] return 
  to:@return

(void()) print_u8_at((byte) print_u8_at::b , (byte*) print_u8_at::at)
print_u8_at: scope:[print_u8_at]  from print_uint_at print_uint_at::@1
  [27] (byte*) print_u8_at::at#2 ← phi( print_uint_at/(byte*) print_u8_at::at#0 print_uint_at::@1/(byte*) print_u8_at::at#1 )
  [27] (byte) print_u8_at::b#2 ← phi( print_uint_at/(byte) print_u8_at::b#0 print_uint_at::@1/(byte) print_u8_at::b#1 )
  [28] (byte~) print_u8_at::$0 ← (byte) print_u8_at::b#2 >> (byte) 4
  [29] (byte) print_char_at::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8_at::$0)
  [30] (byte*) print_char_at::at#0 ← (byte*) print_u8_at::at#2
  [31] call print_char_at 
  to:print_u8_at::@1
print_u8_at::@1: scope:[print_u8_at]  from print_u8_at
  [32] (byte~) print_u8_at::$2 ← (byte) print_u8_at::b#2 & (byte) $f
  [33] (byte*) print_char_at::at#1 ← (byte*) print_u8_at::at#2 + (byte) 1
  [34] (byte) print_char_at::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8_at::$2)
  [35] call print_char_at 
  to:print_u8_at::@return
print_u8_at::@return: scope:[print_u8_at]  from print_u8_at::@1
  [36] return 
  to:@return

(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
print_char_at: scope:[print_char_at]  from print_u8_at print_u8_at::@1
  [37] (byte*) print_char_at::at#2 ← phi( print_u8_at/(byte*) print_char_at::at#0 print_u8_at::@1/(byte*) print_char_at::at#1 )
  [37] (byte) print_char_at::ch#2 ← phi( print_u8_at/(byte) print_char_at::ch#0 print_u8_at::@1/(byte) print_char_at::ch#1 )
  [38] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [39] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@2
  [40] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [41] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main::@1
  [42] *((const nomodify byte*) CIA2_TIMER_A_CONTROL) ← (byte) 0
  [43] *((const nomodify byte*) CIA2_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [44] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [45] *((const nomodify byte*) CIA2_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [46] *((const nomodify byte*) CIA2_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [47] return 
  to:@return
