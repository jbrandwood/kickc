
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [1] (byte*) nxt#15 ← phi( main/(const byte*) TEXT main::@2/(byte*) nxt#12 )
  [2] call next_char 
  [3] (byte) next_char::return#0 ← (byte) next_char::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] (byte~) main::$0 ← (byte) next_char::return#0
  [5] *((const byte*) main::SCREEN + (byte) main::i#2) ← (byte~) main::$0
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return 
  to:@return

(byte()) next_char()
next_char: scope:[next_char]  from main::@1
  [9] (byte) next_char::c#0 ← *((byte*) nxt#15)
  [10] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1
  to:next_char::@2
next_char::@2: scope:[next_char]  from next_char
  [11] (byte) next_char::c#1 ← *((const byte*) TEXT)
  to:next_char::@1
next_char::@1: scope:[next_char]  from next_char next_char::@2
  [12] (byte) next_char::return#1 ← phi( next_char/(byte) next_char::c#0 next_char::@2/(byte) next_char::c#1 )
  [12] (byte*) nxt#11 ← phi( next_char/(byte*) nxt#15 next_char::@2/(const byte*) TEXT )
  [13] (byte*) nxt#12 ← ++ (byte*) nxt#11
  to:next_char::@return
next_char::@return: scope:[next_char]  from next_char::@1
  [14] return 
  to:@return
