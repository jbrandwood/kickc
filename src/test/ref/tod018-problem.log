
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::D018#0 ← ((byte*)) (number) $d018
  (byte*) main::screen#0 ← ((byte*)) (number) $400
  (word~) main::$0 ← ((word)) (byte*) main::screen#0
  (number~) main::$1 ← (word~) main::$0 & (number) $3fff
  (number~) main::$2 ← > (number~) main::$1
  (byte) main::d018val#0 ← (number~) main::$2
  *((byte*) main::D018#0) ← (byte) main::d018val#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(word~) main::$0
(number~) main::$1
(number~) main::$2
(label) main::@return
(byte*) main::D018
(byte*) main::D018#0
(byte) main::d018val
(byte) main::d018val#0
(byte*) main::screen
(byte*) main::screen#0

Adding number conversion cast (unumber) $3fff in (number~) main::$1 ← (word~) main::$0 & (number) $3fff
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (word~) main::$0 & (unumber)(number) $3fff
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← > (unumber~) main::$1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::D018#0 ← (byte*)(number) $d018
Inlining cast (byte*) main::screen#0 ← (byte*)(number) $400
Inlining cast (word~) main::$0 ← (word)(byte*) main::screen#0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3fff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3fff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) main::$1 ← (word~) main::$0 & (word) $3fff
Inferred type updated to byte in (unumber~) main::$2 ← > (word~) main::$1
Alias (byte) main::d018val#0 = (byte~) main::$2 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) main::D018#0 = (byte*) 53272
Constant (const byte*) main::screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::screen#0 in [2] (word~) main::$0 ← (word)(const byte*) main::screen#0
Successful SSA optimization Pass2ConstantValues
Constant (const word) main::$0 = (word)main::screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (word~) main::$1 ← (const word) main::$0 & (word) $3fff
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::$1 = main::$0&$3fff
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte) main::d018val#0 ← > (const word) main::$1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::d018val#0 = >main::$1
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = (word)(const byte*) main::screen#0&(word) $3fff
Constant inlined main::$0 = (word)(const byte*) main::screen#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::D018#0) ← (const byte) main::d018val#0
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::D018
(byte) main::d018val
(byte*) main::screen

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / 6502X
  // File Comments
// Tests a problem with tod018 not calculating types correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label D018 = $d018
    .label screen = $400
    .const d018val = >screen&$3fff
    // [4] *((const byte*) main::D018#0) ← (const byte) main::d018val#0 -- _deref_pbuc1=vbuc2 
    lda #d018val
    sta D018
    jmp breturn
    // main::@return
  breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::D018#0) ← (const byte) main::d018val#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests a problem with tod018 not calculating types correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label D018 = $d018
    .label screen = $400
    .const d018val = >screen&$3fff
    // [4] *((const byte*) main::D018#0) ← (const byte) main::d018val#0 -- _deref_pbuc1=vbuc2 
    lda #d018val
    sta D018
    jmp breturn
    // main::@return
  breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(byte*) main::D018
(const byte*) main::D018#0 D018 = (byte*) 53272
(byte) main::d018val
(const byte) main::d018val#0 d018val = >(word)(const byte*) main::screen#0&(word) $3fff
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests a problem with tod018 not calculating types correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label D018 = $d018
    .label screen = $400
    .const d018val = >screen&$3fff
    // *D018 = d018val
    // [4] *((const byte*) main::D018#0) ← (const byte) main::d018val#0 -- _deref_pbuc1=vbuc2 
    lda #d018val
    sta D018
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

