
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] count = 0
  [6] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [7] phi()
  [8] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

__stackcall void queen(char row)
queen: scope:[queen]  from
  [10] queen::row#0 = stackidx(char,queen::OFFSET_STACK_ROW)
  [11] queen::r = queen::row#0
  [12] queen::column = 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  [13] if(queen::column<8+1) goto queen::@2
  to:queen::@return
queen::@return: scope:[queen]  from queen::@1
  [14] return 
  to:@return
queen::@2: scope:[queen]  from queen::@1
  [15] legal::row#0 = queen::r
  [16] legal::column#0 = queen::column
  [17] call legal
  [18] legal::return#0 = legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  [19] queen::$1 = legal::return#0
  [20] if(0==queen::$1) goto queen::@3
  to:queen::@5
queen::@5: scope:[queen]  from queen::@7
  [21] board[queen::r] = queen::column
  [22] if(queen::r==8) goto queen::@4
  to:queen::@6
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  [24] queen::$4 = queen::r + 1
  [25] stackpush(char) = queen::$4
  [26] callexecute queen 
  sideeffect stackpullbytes(1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@3: scope:[queen]  from queen::@4 queen::@6 queen::@7
  [29] queen::column = ++ queen::column
  to:queen::@1
queen::@4: scope:[queen]  from queen::@5
  [30] count = ++ count
  [31] call print
  to:queen::@3

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [32] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [33] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [34] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [35] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [36] gotoxy::y#2 = conio_c64_init::line#2
  [37] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [38] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from
  [39] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [40] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [41] conio_line_text[conio_cursor_x] = cputc::c#0
  [42] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [43] conio_cursor_x = ++ conio_cursor_x
  [44] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [45] phi()
  [46] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [47] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [48] phi()
  [49] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [50] phi()
  [51] call clrscr
  to:main::@1
main::@1: scope:[main]  from main
  [52] phi()
  [53] call printf_str
  to:main::@2
main::@2: scope:[main]  from main::@1
  [54] phi()
  [55] call printf_str
  to:main::@3
main::@3: scope:[main]  from main::@2
  [56] phi()
  [57] call printf_uint
  to:main::@4
main::@4: scope:[main]  from main::@3
  [58] stackpush(char) = 1
  [59] callexecute queen 
  sideeffect stackpullbytes(1)
  [61] call printf_str
  to:main::@5
main::@5: scope:[main]  from main::@4
  [62] printf_ulong::uvalue#0 = count
  [63] call printf_ulong
  to:main::@6
main::@6: scope:[main]  from main::@5
  [64] phi()
  [65] call printf_str
  to:main::@return
main::@return: scope:[main]  from main::@6
  [66] return 
  to:@return

char legal(char row , char column)
legal: scope:[legal]  from queen::@2
  [67] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [68] legal::i#2 = phi( legal/1, legal::@3/legal::i#1 )
  [69] legal::$0 = legal::row#0 - 1
  [70] if(legal::i#2<=legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@6
  [71] legal::return#4 = phi( legal::@1/1, legal::@2/0, legal::@6/0 )
  [72] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [73] if(board[legal::i#2]==legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [74] diff::a#0 = board[legal::i#2]
  [75] diff::b#0 = legal::column#0
  [76] call diff
  [77] diff::return#0 = diff::return#4
  to:legal::@5
legal::@5: scope:[legal]  from legal::@4
  [78] legal::$3 = diff::return#0
  [79] diff::a#1 = legal::i#2
  [80] diff::b#1 = legal::row#0
  [81] call diff
  [82] diff::return#1 = diff::return#4
  to:legal::@6
legal::@6: scope:[legal]  from legal::@5
  [83] legal::$4 = diff::return#1
  [84] if(legal::$3!=legal::$4) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@6
  [85] legal::i#1 = ++ legal::i#2
  to:legal::@1

void print()
print: scope:[print]  from queen::@4
  [86] phi()
  [87] call gotoxy
  to:print::@11
print::@11: scope:[print]  from print
  [88] phi()
  [89] call printf_str
  to:print::@12
print::@12: scope:[print]  from print::@11
  [90] printf_ulong::uvalue#1 = count
  [91] call printf_ulong
  to:print::@13
print::@13: scope:[print]  from print::@12
  [92] phi()
  [93] call printf_str
  to:print::@1
print::@1: scope:[print]  from print::@13 print::@14
  [94] print::i#2 = phi( print::@13/1, print::@14/print::i#1 )
  [95] if(print::i#2<8+1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [96] print::i1#2 = phi( print::@1/1, print::@7/print::i1#1 )
  [97] if(print::i1#2<8+1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [98] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [99] phi()
  [100] call printf_str
  to:print::@15
print::@15: scope:[print]  from print::@4
  [101] printf_uchar::uvalue#1 = print::i1#2
  [102] call printf_uchar
  to:print::@5
print::@5: scope:[print]  from print::@15 print::@9
  [103] print::j#2 = phi( print::@9/print::j#1, print::@15/1 )
  [104] if(print::j#2<8+1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [105] print::i1#1 = ++ print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [106] if(board[print::i1#2]==print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [107] phi()
  [108] call printf_str
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [109] print::j#1 = ++ print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [110] phi()
  [111] call printf_str
  to:print::@9
print::@2: scope:[print]  from print::@1
  [112] printf_uchar::uvalue#0 = print::i#2
  [113] call printf_uchar
  to:print::@14
print::@14: scope:[print]  from print::@2
  [114] print::i#1 = ++ print::i#2
  to:print::@1

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 print
  [115] gotoxy::y#4 = phi( conio_c64_init::@1/gotoxy::y#2, print/5 )
  [116] if(gotoxy::y#4<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [117] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [118] gotoxy::y#5 = phi( gotoxy::@3/gotoxy::y#4, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [119] conio_cursor_x = 0
  [120] conio_cursor_y = gotoxy::y#5
  [121] gotoxy::$7 = (unsigned int)gotoxy::y#5
  [122] gotoxy::$8 = gotoxy::$7 << 2
  [123] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [124] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [125] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [126] conio_line_text = gotoxy::$5
  [127] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [128] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [129] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [130] conio_line_text = conio_line_text + $28
  [131] conio_line_color = conio_line_color + $28
  [132] conio_cursor_x = 0
  [133] conio_cursor_y = ++ conio_cursor_y
  [134] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [135] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [136] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [137] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [137] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [137] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [138] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [139] conio_cursor_x = 0
  [140] conio_cursor_y = 0
  [141] conio_line_text = DEFAULT_SCREEN
  [142] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [143] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [144] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [145] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [146] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [147] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [148] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [149] clrscr::line_text#5[clrscr::c#2] = ' '
  [150] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [151] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@1 main::@2 main::@4 main::@6 print::@10 print::@11 print::@13 print::@4 print::@8 printf_number_buffer::@5
  [152] printf_str::putc#12 = phi( main::@1/&cputc, main::@2/&cputc, main::@4/&cputc, main::@6/&cputc, print::@10/&cputc, print::@11/&cputc, print::@13/&cputc, print::@4/&cputc, print::@8/&cputc, printf_number_buffer::@5/printf_str::putc#0 )
  [152] printf_str::s#12 = phi( main::@1/main::s, main::@2/main::s1, main::@4/main::s2, main::@6/main::s3, print::@10/print::s4, print::@11/print::s, print::@13/print::s1, print::@4/print::s2, print::@8/print::s3, printf_number_buffer::@5/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [153] printf_str::s#11 = phi( printf_str/printf_str::s#12, printf_str::@2/printf_str::s#0 )
  [154] printf_str::c#1 = *printf_str::s#11
  [155] printf_str::s#0 = ++ printf_str::s#11
  [156] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [157] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [158] stackpush(char) = printf_str::c#1
  [159] callexecute *printf_str::putc#12 
  sideeffect stackpullbytes(1)
  to:printf_str::@1

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [161] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [162] *((char *)&printf_buffer) = 0
  [163] call utoa
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [164] printf_number_buffer::buffer_sign#1 = *((char *)&printf_buffer)
  [165] call printf_number_buffer
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [166] return 
  to:@return

void printf_ulong(void (*putc)(char) , unsigned long uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_ulong: scope:[printf_ulong]  from main::@5 print::@12
  [167] printf_ulong::uvalue#2 = phi( main::@5/printf_ulong::uvalue#0, print::@12/printf_ulong::uvalue#1 )
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [168] *((char *)&printf_buffer) = 0
  [169] ultoa::value#1 = printf_ulong::uvalue#2
  [170] call ultoa
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [171] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [172] call printf_number_buffer
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [173] return 
  to:@return

char diff(char a , char b)
diff: scope:[diff]  from legal::@4 legal::@5
  [174] diff::b#2 = phi( legal::@4/diff::b#0, legal::@5/diff::b#1 )
  [174] diff::a#2 = phi( legal::@4/diff::a#0, legal::@5/diff::a#1 )
  [175] if(diff::a#2<diff::b#2) goto diff::@1
  to:diff::@2
diff::@2: scope:[diff]  from diff
  [176] diff::return#3 = diff::a#2 - diff::b#2
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  [177] diff::return#4 = phi( diff::@1/diff::return#2, diff::@2/diff::return#3 )
  [178] return 
  to:@return
diff::@1: scope:[diff]  from diff
  [179] diff::return#2 = diff::b#2 - diff::a#2
  to:diff::@return

void printf_uchar(void (*putc)(char) , char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uchar: scope:[printf_uchar]  from print::@15 print::@2
  [180] printf_uchar::uvalue#2 = phi( print::@15/printf_uchar::uvalue#1, print::@2/printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [181] *((char *)&printf_buffer) = 0
  [182] uctoa::value#1 = printf_uchar::uvalue#2
  [183] call uctoa
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [184] printf_number_buffer::buffer_sign#2 = *((char *)&printf_buffer)
  [185] call printf_number_buffer
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [186] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [187] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [188] phi()
  [189] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [190] phi()
  [191] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [192] phi()
  [193] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [194] phi()
  [195] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [196] conio_line_text = conio_line_text - $28
  [197] conio_line_color = conio_line_color - $28
  [198] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [199] return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_uint::@1
  [200] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [201] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [201] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [201] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/printf_uint::uvalue#0 )
  [201] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [202] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [203] utoa::$11 = (char)utoa::value#2
  [204] *utoa::buffer#11 = DIGITS[utoa::$11]
  [205] utoa::buffer#3 = ++ utoa::buffer#11
  [206] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [207] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [208] utoa::$10 = utoa::digit#2 << 1
  [209] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [210] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [211] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [212] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [212] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [212] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [213] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [214] utoa_append::buffer#0 = utoa::buffer#11
  [215] utoa_append::value#0 = utoa::value#2
  [216] utoa_append::sub#0 = utoa::digit_value#0
  [217] call utoa_append
  [218] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [219] utoa::value#0 = utoa_append::return#0
  [220] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [221] printf_number_buffer::format_upper_case#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_upper_case#0, printf_ulong::@2/0 )
  [221] printf_number_buffer::putc#10 = phi( printf_uchar::@2/&cputc, printf_uint::@2/printf_uint::putc#0, printf_ulong::@2/&cputc )
  [221] printf_number_buffer::buffer_sign#10 = phi( printf_uchar::@2/printf_number_buffer::buffer_sign#2, printf_uint::@2/printf_number_buffer::buffer_sign#1, printf_ulong::@2/printf_number_buffer::buffer_sign#0 )
  [221] printf_number_buffer::format_zero_padding#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_zero_padding#0, printf_ulong::@2/0 )
  [221] printf_number_buffer::format_justify_left#10 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_justify_left#0, printf_ulong::@2/0 )
  [221] printf_number_buffer::format_min_length#3 = phi( printf_uchar::@2/0, printf_uint::@2/printf_uint::format_min_length#0, printf_ulong::@2/0 )
  [222] if(0==printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [223] phi()
  [224] call strlen
  [225] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [226] printf_number_buffer::$19 = strlen::return#2
  [227] printf_number_buffer::len#0 = (signed char)printf_number_buffer::$19
  [228] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [229] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [230] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [231] printf_number_buffer::padding#1 = (signed char)printf_number_buffer::format_min_length#3 - printf_number_buffer::len#2
  [232] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [233] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [234] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [235] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [236] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [237] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [238] printf_padding::putc#0 = printf_number_buffer::putc#10
  [239] printf_padding::length#0 = (char)printf_number_buffer::padding#10
  [240] call printf_padding
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [241] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [242] stackpush(char) = printf_number_buffer::buffer_sign#10
  [243] callexecute *printf_number_buffer::putc#10 
  sideeffect stackpullbytes(1)
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [245] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [246] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [247] printf_padding::putc#1 = printf_number_buffer::putc#10
  [248] printf_padding::length#1 = (char)printf_number_buffer::padding#10
  [249] call printf_padding
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [250] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [251] phi()
  [252] call strupr
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [253] printf_str::putc#0 = printf_number_buffer::putc#10
  [254] call printf_str
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [255] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [256] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [257] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [258] printf_padding::putc#2 = printf_number_buffer::putc#10
  [259] printf_padding::length#2 = (char)printf_number_buffer::padding#10
  [260] call printf_padding
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [261] return 
  to:@return

void ultoa(unsigned long value , char *buffer , char radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [262] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [263] ultoa::buffer#11 = phi( ultoa::@4/ultoa::buffer#14, ultoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [263] ultoa::started#2 = phi( ultoa::@4/ultoa::started#4, ultoa/0 )
  [263] ultoa::value#2 = phi( ultoa::@4/ultoa::value#6, ultoa/ultoa::value#1 )
  [263] ultoa::digit#2 = phi( ultoa::@4/ultoa::digit#1, ultoa/0 )
  [264] if(ultoa::digit#2<$a-1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [265] ultoa::$11 = (char)ultoa::value#2
  [266] *ultoa::buffer#11 = DIGITS[ultoa::$11]
  [267] ultoa::buffer#3 = ++ ultoa::buffer#11
  [268] *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [269] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [270] ultoa::$10 = ultoa::digit#2 << 2
  [271] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10]
  [272] if(0!=ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [273] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [274] ultoa::buffer#14 = phi( ultoa::@7/ultoa::buffer#11, ultoa::@6/ultoa::buffer#4 )
  [274] ultoa::started#4 = phi( ultoa::@7/ultoa::started#2, ultoa::@6/1 )
  [274] ultoa::value#6 = phi( ultoa::@7/ultoa::value#2, ultoa::@6/ultoa::value#0 )
  [275] ultoa::digit#1 = ++ ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [276] ultoa_append::buffer#0 = ultoa::buffer#11
  [277] ultoa_append::value#0 = ultoa::value#2
  [278] ultoa_append::sub#0 = ultoa::digit_value#0
  [279] call ultoa_append
  [280] ultoa_append::return#0 = ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [281] ultoa::value#0 = ultoa_append::return#0
  [282] ultoa::buffer#4 = ++ ultoa::buffer#11
  to:ultoa::@4

void uctoa(char value , char *buffer , char radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [283] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [284] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [284] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [284] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/uctoa::value#1 )
  [284] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [285] if(uctoa::digit#2<2-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [286] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [287] uctoa::buffer#3 = ++ uctoa::buffer#11
  [288] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [289] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [290] uctoa::digit_value#0 = RADIX_HEXADECIMAL_VALUES_CHAR[uctoa::digit#2]
  [291] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [292] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [293] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [293] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [293] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [294] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [295] uctoa_append::buffer#0 = uctoa::buffer#11
  [296] uctoa_append::value#0 = uctoa::value#2
  [297] uctoa_append::sub#0 = uctoa::digit_value#0
  [298] call uctoa_append
  [299] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [300] uctoa::value#0 = uctoa_append::return#0
  [301] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [302] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [302] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [303] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [304] memcpy::src#4 = (char *)memcpy::source#2
  [305] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [306] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [306] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [307] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [308] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [309] *memcpy::dst#2 = *memcpy::src#2
  [310] memcpy::dst#1 = ++ memcpy::dst#2
  [311] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [312] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [312] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [313] memset::end#0 = (char *)memset::str#3 + $28
  [314] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [315] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [316] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [317] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [318] *memset::dst#2 = memset::c#4
  [319] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [320] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [321] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [321] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [322] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [323] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [324] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [325] utoa_append::digit#1 = ++ utoa_append::digit#2
  [326] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

unsigned int strlen(char *str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [327] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [328] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [328] strlen::str#2 = phi( strlen/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [329] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [330] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [331] strlen::len#1 = ++ strlen::len#2
  [332] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(void (*putc)(char) , char pad , char length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [333] printf_padding::putc#5 = phi( printf_number_buffer::@10/printf_padding::putc#1, printf_number_buffer::@12/printf_padding::putc#2, printf_number_buffer::@8/printf_padding::putc#0 )
  [333] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [333] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [334] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [335] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [336] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [337] stackpush(char) = printf_padding::pad#5
  [338] callexecute *printf_padding::putc#5 
  sideeffect stackpullbytes(1)
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [340] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

char * strupr(char *str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [341] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [342] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [343] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [344] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [345] toupper::ch#0 = *strupr::src#2
  [346] call toupper
  [347] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [348] strupr::$0 = toupper::return#3
  [349] *strupr::src#2 = strupr::$0
  [350] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

unsigned long ultoa_append(char *buffer , unsigned long value , unsigned long sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [351] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [352] ultoa_append::digit#2 = phi( ultoa_append/0, ultoa_append::@2/ultoa_append::digit#1 )
  [352] ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#0, ultoa_append::@2/ultoa_append::value#1 )
  [353] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [354] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2]
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [355] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [356] ultoa_append::digit#1 = ++ ultoa_append::digit#2
  [357] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0
  to:ultoa_append::@1

char uctoa_append(char *buffer , char value , char sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [358] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [359] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [359] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [360] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [361] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [362] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [363] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [364] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

char toupper(char ch)
toupper: scope:[toupper]  from strupr::@2
  [365] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [366] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [367] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [368] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [369] return 
  to:@return
