Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Identified constant variable (byte*) HEAP_TOP
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@12
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@29
print_ln: scope:[print_ln]  from main::@20
  (byte*) print_char_cursor#64 ← phi( main::@20/(byte*) print_char_cursor#29 )
  (byte*) print_line_cursor#17 ← phi( main::@20/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#33 ← phi( print_ln/(byte*) print_char_cursor#64 print_ln::@1/(byte*) print_char_cursor#33 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#33
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#34 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#34
  return 
  to:@return
print_word: scope:[print_word]  from main::@11 main::@9 print_dword print_dword::@1
  (byte*) print_char_cursor#65 ← phi( main::@11/(byte*) print_char_cursor#20 main::@9/(byte*) print_char_cursor#18 print_dword/(byte*) print_char_cursor#66 print_dword::@1/(byte*) print_char_cursor#6 )
  (word) print_word::w#4 ← phi( main::@11/(word) print_word::w#3 main::@9/(word) print_word::w#2 print_dword/(word) print_word::w#0 print_dword::@1/(word) print_word::w#1 )
  (byte~) print_word::$0 ← > (word) print_word::w#4
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#5 ← phi( print_word/(word) print_word::w#4 )
  (byte*) print_char_cursor#35 ← phi( print_word/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#35
  (byte~) print_word::$2 ← < (word) print_word::w#5
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#36 ← phi( print_word::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#36
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#37 ← phi( print_word::@2/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#37
  return 
  to:@return
print_dword: scope:[print_dword]  from main::@2
  (byte*) print_char_cursor#66 ← phi( main::@2/(byte*) print_char_cursor#69 )
  (dword) print_dword::dw#1 ← phi( main::@2/(dword) print_dword::dw#0 )
  (word~) print_dword::$0 ← > (dword) print_dword::dw#1
  (word) print_word::w#0 ← (word~) print_dword::$0
  call print_word 
  to:print_dword::@1
print_dword::@1: scope:[print_dword]  from print_dword
  (dword) print_dword::dw#2 ← phi( print_dword/(dword) print_dword::dw#1 )
  (byte*) print_char_cursor#38 ← phi( print_dword/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#38
  (word~) print_dword::$2 ← < (dword) print_dword::dw#2
  (word) print_word::w#1 ← (word~) print_dword::$2
  call print_word 
  to:print_dword::@2
print_dword::@2: scope:[print_dword]  from print_dword::@1
  (byte*) print_char_cursor#39 ← phi( print_dword::@1/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#39
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword::@2
  (byte*) print_char_cursor#40 ← phi( print_dword::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#40
  return 
  to:@return
@29: scope:[]  from @12
  (byte*) print_screen#5 ← phi( @12/(byte*) print_screen#0 )
  (byte*) print_char_cursor#72 ← phi( @12/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#23 ← phi( @12/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@37
print_byte: scope:[print_byte]  from main::@13 main::@15 main::@17 main::@19 print_word print_word::@1
  (byte*) print_char_cursor#67 ← phi( main::@13/(byte*) print_char_cursor#22 main::@15/(byte*) print_char_cursor#24 main::@17/(byte*) print_char_cursor#26 main::@19/(byte*) print_char_cursor#28 print_word/(byte*) print_char_cursor#65 print_word::@1/(byte*) print_char_cursor#3 )
  (byte) print_byte::b#6 ← phi( main::@13/(byte) print_byte::b#2 main::@15/(byte) print_byte::b#3 main::@17/(byte) print_byte::b#4 main::@19/(byte) print_byte::b#5 print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (number) 4
  (byte) print_char::ch#0 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#7 ← phi( print_byte/(byte) print_byte::b#6 )
  (byte*) print_char_cursor#41 ← phi( print_byte/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#41
  (number~) print_byte::$2 ← (byte) print_byte::b#7 & (number) $f
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#42 ← phi( print_byte::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#42
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#43 ← phi( print_byte::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#43
  return 
  to:@return
print_char: scope:[print_char]  from main::@10 main::@12 main::@14 main::@16 main::@18 main::@8 print_byte print_byte::@1
  (byte*) print_char_cursor#44 ← phi( main::@10/(byte*) print_char_cursor#19 main::@12/(byte*) print_char_cursor#21 main::@14/(byte*) print_char_cursor#23 main::@16/(byte*) print_char_cursor#25 main::@18/(byte*) print_char_cursor#27 main::@8/(byte*) print_char_cursor#17 print_byte/(byte*) print_char_cursor#67 print_byte::@1/(byte*) print_char_cursor#9 )
  (byte) print_char::ch#8 ← phi( main::@10/(byte) print_char::ch#3 main::@12/(byte) print_char::ch#4 main::@14/(byte) print_char::ch#5 main::@16/(byte) print_char::ch#6 main::@18/(byte) print_char::ch#7 main::@8/(byte) print_char::ch#2 print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#45 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#45
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#14 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#46 ← phi( print_cls::@1/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#46
  return 
  to:@return
main: scope:[main]  from @37
  (byte*) print_char_cursor#68 ← phi( @37/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#18 ← phi( @37/(byte*) print_line_cursor#21 )
  (byte*) print_screen#3 ← phi( @37/(byte*) print_screen#4 )
  call print_cls 
  to:main::@7
main::@7: scope:[main]  from main
  (byte*) print_char_cursor#47 ← phi( main/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#47
  (dword) main::dw#0 ← (number) $12345678
  to:main::@1
main::@1: scope:[main]  from main::@21 main::@7
  (byte*) print_char_cursor#70 ← phi( main::@21/(byte*) print_char_cursor#30 main::@7/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#20 ← phi( main::@21/(byte*) print_line_cursor#6 main::@7/(byte*) print_line_cursor#5 )
  (dword) main::dw#2 ← phi( main::@21/(dword) main::dw#1 main::@7/(dword) main::dw#0 )
  (bool~) main::$1 ← (dword) main::dw#2 != (number) $12345690
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#35 ← phi( main::@1/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#69 ← phi( main::@1/(byte*) print_char_cursor#70 )
  (dword) main::dw#3 ← phi( main::@1/(dword) main::dw#2 )
  (dword) main::dw2#0 ← (dword) main::dw#3
  (word~) main::$3 ← > (dword) main::dw#3
  (number~) main::$4 ← (word~) main::$3 + (number) $1111
  (number~) main::$32 ← (number~) main::$4
  (dword) main::dw2#1 ← (dword) main::dw2#0 hi= (number~) main::$32
  (word~) main::$6 ← < (dword) main::dw#3
  (number~) main::$7 ← (word~) main::$6 + (number) $1111
  (number~) main::$33 ← (number~) main::$7
  (dword) main::dw2#2 ← (dword) main::dw2#1 lo= (number~) main::$33
  (dword) print_dword::dw#0 ← (dword) main::dw2#2
  call print_dword 
  to:main::@8
main::@8: scope:[main]  from main::@2
  (dword) main::dw#17 ← phi( main::@2/(dword) main::dw#3 )
  (byte*) print_line_cursor#34 ← phi( main::@2/(byte*) print_line_cursor#35 )
  (dword) main::dw2#9 ← phi( main::@2/(dword) main::dw2#2 )
  (byte*) print_char_cursor#48 ← phi( main::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#48
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (dword) main::dw#16 ← phi( main::@8/(dword) main::dw#17 )
  (byte*) print_line_cursor#33 ← phi( main::@8/(byte*) print_line_cursor#34 )
  (dword) main::dw2#3 ← phi( main::@8/(dword) main::dw2#9 )
  (byte*) print_char_cursor#49 ← phi( main::@8/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#49
  (word~) main::$10 ← > (dword) main::dw2#3
  (word) print_word::w#2 ← (word~) main::$10
  call print_word 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (dword) main::dw#15 ← phi( main::@9/(dword) main::dw#16 )
  (byte*) print_line_cursor#32 ← phi( main::@9/(byte*) print_line_cursor#33 )
  (dword) main::dw2#10 ← phi( main::@9/(dword) main::dw2#3 )
  (byte*) print_char_cursor#50 ← phi( main::@9/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#50
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (dword) main::dw#14 ← phi( main::@10/(dword) main::dw#15 )
  (byte*) print_line_cursor#31 ← phi( main::@10/(byte*) print_line_cursor#32 )
  (dword) main::dw2#4 ← phi( main::@10/(dword) main::dw2#10 )
  (byte*) print_char_cursor#51 ← phi( main::@10/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#51
  (word~) main::$13 ← < (dword) main::dw2#4
  (word) print_word::w#3 ← (word~) main::$13
  call print_word 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (dword) main::dw#13 ← phi( main::@11/(dword) main::dw#14 )
  (byte*) print_line_cursor#30 ← phi( main::@11/(byte*) print_line_cursor#31 )
  (dword) main::dw2#11 ← phi( main::@11/(dword) main::dw2#4 )
  (byte*) print_char_cursor#52 ← phi( main::@11/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#52
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (dword) main::dw#12 ← phi( main::@12/(dword) main::dw#13 )
  (byte*) print_line_cursor#29 ← phi( main::@12/(byte*) print_line_cursor#30 )
  (dword) main::dw2#5 ← phi( main::@12/(dword) main::dw2#11 )
  (byte*) print_char_cursor#53 ← phi( main::@12/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#53
  (word~) main::$16 ← > (dword) main::dw2#5
  (byte~) main::$17 ← > (word~) main::$16
  (byte) print_byte::b#2 ← (byte~) main::$17
  call print_byte 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (dword) main::dw#11 ← phi( main::@13/(dword) main::dw#12 )
  (byte*) print_line_cursor#28 ← phi( main::@13/(byte*) print_line_cursor#29 )
  (dword) main::dw2#12 ← phi( main::@13/(dword) main::dw2#5 )
  (byte*) print_char_cursor#54 ← phi( main::@13/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#54
  (byte) print_char::ch#5 ← (byte) ' '
  call print_char 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (dword) main::dw#10 ← phi( main::@14/(dword) main::dw#11 )
  (byte*) print_line_cursor#27 ← phi( main::@14/(byte*) print_line_cursor#28 )
  (dword) main::dw2#6 ← phi( main::@14/(dword) main::dw2#12 )
  (byte*) print_char_cursor#55 ← phi( main::@14/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#55
  (word~) main::$20 ← > (dword) main::dw2#6
  (byte~) main::$21 ← < (word~) main::$20
  (byte) print_byte::b#3 ← (byte~) main::$21
  call print_byte 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (dword) main::dw#9 ← phi( main::@15/(dword) main::dw#10 )
  (byte*) print_line_cursor#26 ← phi( main::@15/(byte*) print_line_cursor#27 )
  (dword) main::dw2#13 ← phi( main::@15/(dword) main::dw2#6 )
  (byte*) print_char_cursor#56 ← phi( main::@15/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#56
  (byte) print_char::ch#6 ← (byte) ' '
  call print_char 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (dword) main::dw#8 ← phi( main::@16/(dword) main::dw#9 )
  (byte*) print_line_cursor#25 ← phi( main::@16/(byte*) print_line_cursor#26 )
  (dword) main::dw2#7 ← phi( main::@16/(dword) main::dw2#13 )
  (byte*) print_char_cursor#57 ← phi( main::@16/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#57
  (word~) main::$24 ← < (dword) main::dw2#7
  (byte~) main::$25 ← > (word~) main::$24
  (byte) print_byte::b#4 ← (byte~) main::$25
  call print_byte 
  to:main::@18
main::@18: scope:[main]  from main::@17
  (dword) main::dw#7 ← phi( main::@17/(dword) main::dw#8 )
  (byte*) print_line_cursor#24 ← phi( main::@17/(byte*) print_line_cursor#25 )
  (dword) main::dw2#14 ← phi( main::@17/(dword) main::dw2#7 )
  (byte*) print_char_cursor#58 ← phi( main::@17/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#58
  (byte) print_char::ch#7 ← (byte) ' '
  call print_char 
  to:main::@19
main::@19: scope:[main]  from main::@18
  (dword) main::dw#6 ← phi( main::@18/(dword) main::dw#7 )
  (byte*) print_line_cursor#22 ← phi( main::@18/(byte*) print_line_cursor#24 )
  (dword) main::dw2#8 ← phi( main::@18/(dword) main::dw2#14 )
  (byte*) print_char_cursor#59 ← phi( main::@18/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#59
  (word~) main::$28 ← < (dword) main::dw2#8
  (byte~) main::$29 ← < (word~) main::$28
  (byte) print_byte::b#5 ← (byte~) main::$29
  call print_byte 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (dword) main::dw#5 ← phi( main::@19/(dword) main::dw#6 )
  (byte*) print_line_cursor#19 ← phi( main::@19/(byte*) print_line_cursor#22 )
  (byte*) print_char_cursor#60 ← phi( main::@19/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#60
  call print_ln 
  to:main::@21
main::@21: scope:[main]  from main::@20
  (dword) main::dw#4 ← phi( main::@20/(dword) main::dw#5 )
  (byte*) print_char_cursor#61 ← phi( main::@20/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#14 ← phi( main::@20/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#61
  (dword) main::dw#1 ← ++ (dword) main::dw#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte*) print_char_cursor#62 ← phi( main::@1/(byte*) print_char_cursor#70 )
  (byte*) print_line_cursor#15 ← phi( main::@1/(byte*) print_line_cursor#20 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#62
  return 
  to:@return
@37: scope:[]  from @29
  (byte*) print_screen#4 ← phi( @29/(byte*) print_screen#5 )
  (byte*) print_char_cursor#71 ← phi( @29/(byte*) print_char_cursor#72 )
  (byte*) print_line_cursor#21 ← phi( @29/(byte*) print_line_cursor#23 )
  call main 
  to:@38
@38: scope:[]  from @37
  (byte*) print_char_cursor#63 ← phi( @37/(byte*) print_char_cursor#31 )
  (byte*) print_line_cursor#16 ← phi( @37/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#63
  to:@end
@end: scope:[]  from @38

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"z
(label) @12
(label) @29
(label) @37
(label) @38
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(bool~) main::$1
(word~) main::$10
(word~) main::$13
(word~) main::$16
(byte~) main::$17
(word~) main::$20
(byte~) main::$21
(word~) main::$24
(byte~) main::$25
(word~) main::$28
(byte~) main::$29
(word~) main::$3
(number~) main::$32
(number~) main::$33
(number~) main::$4
(word~) main::$6
(number~) main::$7
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(dword) main::dw
(dword) main::dw#0
(dword) main::dw#1
(dword) main::dw#10
(dword) main::dw#11
(dword) main::dw#12
(dword) main::dw#13
(dword) main::dw#14
(dword) main::dw#15
(dword) main::dw#16
(dword) main::dw#17
(dword) main::dw#2
(dword) main::dw#3
(dword) main::dw#4
(dword) main::dw#5
(dword) main::dw#6
(dword) main::dw#7
(dword) main::dw#8
(dword) main::dw#9
(dword) main::dw2
(dword) main::dw2#0
(dword) main::dw2#1
(dword) main::dw2#10
(dword) main::dw2#11
(dword) main::dw2#12
(dword) main::dw2#13
(dword) main::dw2#14
(dword) main::dw2#2
(dword) main::dw2#3
(dword) main::dw2#4
(dword) main::dw2#5
(dword) main::dw2#6
(dword) main::dw2#7
(dword) main::dw2#8
(dword) main::dw2#9
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte) print_char::ch#7
(byte) print_char::ch#8
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(word~) print_dword::$2
(label) print_dword::@1
(label) print_dword::@2
(label) print_dword::@return
(dword) print_dword::dw
(dword) print_dword::dw#0
(dword) print_dword::dw#1
(dword) print_dword::dw#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#7 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#7 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $12345678 in (dword) main::dw#0 ← (number) $12345678
Adding number conversion cast (unumber) $12345690 in (bool~) main::$1 ← (dword) main::dw#2 != (number) $12345690
Adding number conversion cast (unumber) $1111 in (number~) main::$4 ← (word~) main::$3 + (number) $1111
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (word~) main::$3 + (unumber)(number) $1111
Adding number conversion cast (unumber) main::$32 in (number~) main::$32 ← (unumber~) main::$4
Adding number conversion cast (unumber) $1111 in (number~) main::$7 ← (word~) main::$6 + (number) $1111
Adding number conversion cast (unumber) main::$7 in (number~) main::$7 ← (word~) main::$6 + (unumber)(number) $1111
Adding number conversion cast (unumber) main::$33 in (number~) main::$33 ← (unumber~) main::$7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (dword) main::dw#0 ← (unumber)(number) $12345678
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $12345678
Simplifying constant integer cast $12345690
Simplifying constant integer cast $1111
Simplifying constant integer cast $1111
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (dword) $12345678
Finalized unsigned number type (dword) $12345690
Finalized unsigned number type (word) $1111
Finalized unsigned number type (word) $1111
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#7 & (byte) $f
Inferred type updated to word in (unumber~) main::$4 ← (word~) main::$3 + (word) $1111
Inferred type updated to word in (unumber~) main::$32 ← (word~) main::$4
Inferred type updated to word in (unumber~) main::$7 ← (word~) main::$6 + (word) $1111
Inferred type updated to word in (unumber~) main::$33 ← (word~) main::$7
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#23 (byte*) print_char_cursor#72 (byte*) print_screen#5 (byte*) print_line_cursor#21 (byte*) print_char_cursor#71 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#1 (byte*) print_line_cursor#11 (byte*) print_char_cursor#34 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#4 = (word) print_word::w#5 
Alias (byte*) print_char_cursor#3 = (byte*) print_char_cursor#35 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#36 = (byte*) print_char_cursor#4 (byte*) print_char_cursor#37 (byte*) print_char_cursor#5 
Alias (word) print_word::w#0 = (word~) print_dword::$0 
Alias (dword) print_dword::dw#1 = (dword) print_dword::dw#2 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#6 
Alias (word) print_word::w#1 = (word~) print_dword::$2 
Alias (byte*) print_char_cursor#39 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#40 (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#6 = (byte) print_byte::b#7 
Alias (byte*) print_char_cursor#41 = (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#42 (byte*) print_char_cursor#43 (byte*) print_char_cursor#11 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#45 (byte*) print_char_cursor#13 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#2 (byte*) print_screen#1 (byte*) print_line_cursor#3 (byte*) print_char_cursor#14 (byte*) print_char_cursor#46 (byte*) print_line_cursor#4 (byte*) print_char_cursor#15 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#47 
Alias (dword) main::dw#10 = (dword) main::dw#3 (dword) main::dw#2 (dword) main::dw2#0 (dword) main::dw#17 (dword) main::dw#16 (dword) main::dw#15 (dword) main::dw#14 (dword) main::dw#13 (dword) main::dw#12 (dword) main::dw#11 (dword) main::dw#9 (dword) main::dw#8 (dword) main::dw#7 (dword) main::dw#6 (dword) main::dw#5 (dword) main::dw#4 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#69 (byte*) print_char_cursor#70 (byte*) print_char_cursor#62 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#35 (byte*) print_line_cursor#20 (byte*) print_line_cursor#34 (byte*) print_line_cursor#33 (byte*) print_line_cursor#32 (byte*) print_line_cursor#31 (byte*) print_line_cursor#30 (byte*) print_line_cursor#29 (byte*) print_line_cursor#28 (byte*) print_line_cursor#27 (byte*) print_line_cursor#26 (byte*) print_line_cursor#25 (byte*) print_line_cursor#24 (byte*) print_line_cursor#22 (byte*) print_line_cursor#19 (byte*) print_line_cursor#7 
Alias (word~) main::$32 = (word~) main::$4 
Alias (word~) main::$33 = (word~) main::$7 
Alias (dword) main::dw2#10 = (dword) main::dw2#9 (dword) main::dw2#2 (dword) main::dw2#3 (dword) main::dw2#4 (dword) main::dw2#11 (dword) main::dw2#5 (dword) main::dw2#12 (dword) main::dw2#6 (dword) main::dw2#13 (dword) main::dw2#7 (dword) main::dw2#14 (dword) main::dw2#8 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#48 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#49 
Alias (word) print_word::w#2 = (word~) main::$10 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#50 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#51 
Alias (word) print_word::w#3 = (word~) main::$13 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#52 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#53 
Alias (byte) print_byte::b#2 = (byte~) main::$17 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#54 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#55 
Alias (byte) print_byte::b#3 = (byte~) main::$21 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#56 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#57 
Alias (byte) print_byte::b#4 = (byte~) main::$25 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#58 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#59 
Alias (byte) print_byte::b#5 = (byte~) main::$29 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#60 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#61 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#63 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#64 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#64
Identical Phi Values (byte*) print_char_cursor#3 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_char_cursor#10
Identical Phi Values (dword) print_dword::dw#1 (dword) print_dword::dw#0
Identical Phi Values (byte*) print_char_cursor#66 (byte*) print_char_cursor#31
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#68 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#39
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#36
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#31
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [3] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [13] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_ln::$1 [28] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (bool~) main::$1 [106] if((dword) main::dw#10!=(dword) $12345690) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte[]) print_hextab#0 = $0
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const dword) main::dw#0 = $12345678
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte) print_char::ch#5 = ' '
Constant (const byte) print_char::ch#6 = ' '
Constant (const byte) print_char::ch#7 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (void*)print_line_cursor#0 in [86] (void*) memset::str#0 ← (void*)(const byte*) print_line_cursor#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [3] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused variable (void*) memset::return#2 and assignment [37] (void*) memset::return#2 ← (void*) memset::str#0
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization Pass2LoopHeadConstantIdentification
Alias (dword) main::dw#1 = (dword) main::dw#10 
Alias (dword) main::dw#18 = (dword) main::dw#32 (dword) main::dw#31 (dword) main::dw#30 (dword) main::dw#29 (dword) main::dw#28 (dword) main::dw#27 (dword) main::dw#26 (dword) main::dw#25 (dword) main::dw#24 (dword) main::dw#23 (dword) main::dw#22 (dword) main::dw#21 (dword) main::dw#20 (dword) main::dw#19 
Alias (byte*) print_line_cursor#37 = (byte*) print_line_cursor#49 (byte*) print_line_cursor#50 (byte*) print_line_cursor#48 (byte*) print_line_cursor#47 (byte*) print_line_cursor#46 (byte*) print_line_cursor#45 (byte*) print_line_cursor#44 (byte*) print_line_cursor#43 (byte*) print_line_cursor#42 (byte*) print_line_cursor#41 (byte*) print_line_cursor#40 (byte*) print_line_cursor#39 (byte*) print_line_cursor#38 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) print_line_cursor#36 (byte*) print_line_cursor#37
Identical Phi Values (byte*) print_char_cursor#73 (byte*) print_char_cursor#74
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_line_cursor#1
Identical Phi Values (dword) main::dw#33 (const dword) main::dw#0
Identical Phi Values (byte*) print_line_cursor#51 (const byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#75 (const byte*) print_line_cursor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)memset::str#0 in [0] (byte*~) memset::$2 ← (byte*)(const void*) memset::str#0
Constant value identified (byte*)memset::str#0 in [2] (byte*) memset::dst#0 ← (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [94] if((const dword) main::dw#0!=(dword) $12345690) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Successful SSA optimization Pass2LoopHeadConstantIdentification
Alias (byte*) memset::dst#1 = (byte*) memset::dst#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) memset::dst#5 (const byte*) memset::dst#0
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always true - replacing block destination [74] if((const byte*) memset::dst#0!=(const byte*) memset::end#0) goto memset::@5
Successful SSA optimization Pass2ConstantIfs
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) print_char::ch#5
Inlining constant with var siblings (const byte) print_char::ch#6
Inlining constant with var siblings (const byte) print_char::ch#7
Inlining constant with var siblings (const dword) main::dw#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined print_char::ch#5 = (byte) ' '
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined print_char::ch#7 = (byte) ' '
Constant inlined main::dw#0 = (dword) $12345678
Constant inlined print_char::ch#6 = (byte) ' '
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting memset::@10(between memset::@4 and memset::@5)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@22(between main::@1 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @29
Adding NOP phi() at start of @37
Adding NOP phi() at start of @38
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@1_1
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_dword::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@4_1
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to print_cls:8 print_dword:19 print_char:21 print_word:25 print_char:27 print_word:31 print_char:33 print_byte:38 print_char:40 print_byte:45 print_char:47 print_byte:52 print_char:54 print_byte:59 print_ln:61 
Calls in [print_byte] to print_char:80 print_char:85 
Calls in [print_word] to print_byte:96 print_byte:100 
Calls in [print_dword] to print_word:106 print_word:110 
Calls in [print_cls] to memset:114 

Created 11 initial phi equivalence classes
Coalesced [20] print_char_cursor#91 ← print_char_cursor#12
Coalesced [23] print_word::w#7 ← print_word::w#2
Coalesced [24] print_char_cursor#77 ← print_char_cursor#12
Coalesced (already) [26] print_char_cursor#86 ← print_char_cursor#12
Coalesced [29] print_word::w#6 ← print_word::w#3
Coalesced (already) [30] print_char_cursor#76 ← print_char_cursor#12
Coalesced (already) [32] print_char_cursor#87 ← print_char_cursor#12
Coalesced [36] print_byte::b#8 ← print_byte::b#2
Coalesced [37] print_char_cursor#80 ← print_char_cursor#12
Coalesced (already) [39] print_char_cursor#88 ← print_char_cursor#12
Coalesced [43] print_byte::b#9 ← print_byte::b#3
Coalesced (already) [44] print_char_cursor#81 ← print_char_cursor#12
Coalesced (already) [46] print_char_cursor#89 ← print_char_cursor#12
Coalesced [50] print_byte::b#10 ← print_byte::b#4
Coalesced (already) [51] print_char_cursor#82 ← print_char_cursor#12
Coalesced (already) [53] print_char_cursor#90 ← print_char_cursor#12
Coalesced [57] print_byte::b#11 ← print_byte::b#5
Coalesced (already) [58] print_char_cursor#83 ← print_char_cursor#12
Coalesced [65] main::dw#34 ← main::dw#1
Not coalescing [66] print_line_cursor#54 ← print_line_cursor#1
Coalesced [67] print_char_cursor#94 ← print_line_cursor#1
Coalesced [68] print_line_cursor#52 ← print_line_cursor#37
Not coalescing [74] print_line_cursor#53 ← print_line_cursor#1
Coalesced [78] print_char::ch#9 ← print_char::ch#0
Coalesced (already) [79] print_char_cursor#92 ← print_char_cursor#67
Coalesced [83] print_char::ch#10 ← print_char::ch#1
Coalesced (already) [84] print_char_cursor#93 ← print_char_cursor#12
Coalesced [94] print_byte::b#12 ← print_byte::b#0
Coalesced (already) [95] print_char_cursor#84 ← print_char_cursor#65
Coalesced [98] print_byte::b#13 ← print_byte::b#1
Coalesced (already) [99] print_char_cursor#85 ← print_char_cursor#12
Coalesced [104] print_word::w#8 ← print_word::w#0
Not coalescing [105] print_char_cursor#78 ← print_char_cursor#74
Coalesced [108] print_word::w#9 ← print_word::w#1
Coalesced (already) [109] print_char_cursor#79 ← print_char_cursor#12
Coalesced [126] memset::dst#6 ← memset::dst#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @29
Culled Empty Block (label) @38
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@1_1
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_dword::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@4_1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memset::@10
Renumbering block @37 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_ln::@3 to print_ln::@2
Renumbering block main::@8 to main::@3
Renumbering block main::@9 to main::@4
Renumbering block main::@10 to main::@5
Renumbering block main::@11 to main::@6
Renumbering block main::@12 to main::@7
Renumbering block main::@13 to main::@8
Renumbering block main::@14 to main::@9
Renumbering block main::@15 to main::@10
Renumbering block main::@16 to main::@11
Renumbering block main::@17 to main::@12
Renumbering block main::@18 to main::@13
Renumbering block main::@19 to main::@14
Renumbering block main::@20 to main::@15
Renumbering block main::@21 to main::@16
Renumbering block main::@22 to main::@17
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@2
main::@2: scope:[main]  from main main::@17
  [6] (byte*) print_char_cursor#74 ← phi( main::@17/(byte*) print_line_cursor#1 main/(byte*) 1024 )
  [6] (byte*) print_line_cursor#37 ← phi( main::@17/(byte*~) print_line_cursor#54 main/(byte*) 1024 )
  [6] (dword) main::dw#18 ← phi( main::@17/(dword) main::dw#1 main/(dword) $12345678 )
  [7] (word~) main::$3 ← > (dword) main::dw#18
  [8] (word~) main::$32 ← (word~) main::$3 + (word) $1111
  [9] (dword) main::dw2#1 ← (dword) main::dw#18 hi= (word~) main::$32
  [10] (word~) main::$6 ← < (dword) main::dw#18
  [11] (word~) main::$33 ← (word~) main::$6 + (word) $1111
  [12] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33
  [13] (dword) print_dword::dw#0 ← (dword) main::dw2#10
  [14] call print_dword 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [15] phi()
  [16] call print_char 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] (word) print_word::w#2 ← > (dword) main::dw2#10
  [18] call print_word 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [19] phi()
  [20] call print_char 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] (word) print_word::w#3 ← < (dword) main::dw2#10
  [22] call print_word 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] phi()
  [24] call print_char 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [25] (word~) main::$16 ← > (dword) main::dw2#10
  [26] (byte) print_byte::b#2 ← > (word~) main::$16
  [27] call print_byte 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [28] phi()
  [29] call print_char 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [30] (word~) main::$20 ← > (dword) main::dw2#10
  [31] (byte) print_byte::b#3 ← < (word~) main::$20
  [32] call print_byte 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [33] phi()
  [34] call print_char 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [35] (word~) main::$24 ← < (dword) main::dw2#10
  [36] (byte) print_byte::b#4 ← > (word~) main::$24
  [37] call print_byte 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [38] phi()
  [39] call print_char 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [40] (word~) main::$28 ← < (dword) main::dw2#10
  [41] (byte) print_byte::b#5 ← < (word~) main::$28
  [42] call print_byte 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [43] phi()
  [44] call print_ln 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [45] (dword) main::dw#1 ← ++ (dword) main::dw#18
  to:main::@1
main::@1: scope:[main]  from main::@16
  [46] if((dword) main::dw#1!=(dword) $12345690) goto main::@17
  to:main::@return
main::@return: scope:[main]  from main::@1
  [47] return 
  to:@return
main::@17: scope:[main]  from main::@1
  [48] (byte*~) print_line_cursor#54 ← (byte*) print_line_cursor#1
  to:main::@2
print_ln: scope:[print_ln]  from main::@15
  [49] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@2
  [50] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#37 print_ln::@2/(byte*~) print_line_cursor#53 )
  [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [53] return 
  to:@return
print_ln::@2: scope:[print_ln]  from print_ln::@1
  [54] (byte*~) print_line_cursor#53 ← (byte*) print_line_cursor#1
  to:print_ln::@1
print_byte: scope:[print_byte]  from main::@10 main::@12 main::@14 main::@8 print_word print_word::@1
  [55] (byte*) print_char_cursor#67 ← phi( main::@8/(byte*) print_char_cursor#12 main::@10/(byte*) print_char_cursor#12 main::@12/(byte*) print_char_cursor#12 main::@14/(byte*) print_char_cursor#12 print_word/(byte*) print_char_cursor#65 print_word::@1/(byte*) print_char_cursor#12 )
  [55] (byte) print_byte::b#6 ← phi( main::@8/(byte) print_byte::b#2 main::@10/(byte) print_byte::b#3 main::@12/(byte) print_byte::b#4 main::@14/(byte) print_byte::b#5 print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4
  [57] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [58] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f
  [60] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [61] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [62] return 
  to:@return
print_char: scope:[print_char]  from main::@11 main::@13 main::@3 main::@5 main::@7 main::@9 print_byte print_byte::@1
  [63] (byte*) print_char_cursor#44 ← phi( main::@5/(byte*) print_char_cursor#12 main::@7/(byte*) print_char_cursor#12 main::@9/(byte*) print_char_cursor#12 main::@11/(byte*) print_char_cursor#12 main::@13/(byte*) print_char_cursor#12 main::@3/(byte*) print_char_cursor#12 print_byte/(byte*) print_char_cursor#67 print_byte::@1/(byte*) print_char_cursor#12 )
  [63] (byte) print_char::ch#8 ← phi( main::@5/(byte) ' ' main::@7/(byte) ' ' main::@9/(byte) ' ' main::@11/(byte) ' ' main::@13/(byte) ' ' main::@3/(byte) ' ' print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8
  [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [66] return 
  to:@return
print_word: scope:[print_word]  from main::@4 main::@6 print_dword print_dword::@1
  [67] (byte*) print_char_cursor#65 ← phi( main::@6/(byte*) print_char_cursor#12 main::@4/(byte*) print_char_cursor#12 print_dword/(byte*~) print_char_cursor#78 print_dword::@1/(byte*) print_char_cursor#12 )
  [67] (word) print_word::w#4 ← phi( main::@6/(word) print_word::w#3 main::@4/(word) print_word::w#2 print_dword/(word) print_word::w#0 print_dword::@1/(word) print_word::w#1 )
  [68] (byte) print_byte::b#0 ← > (word) print_word::w#4
  [69] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [70] (byte) print_byte::b#1 ← < (word) print_word::w#4
  [71] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [72] return 
  to:@return
print_dword: scope:[print_dword]  from main::@2
  [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0
  [74] (byte*~) print_char_cursor#78 ← (byte*) print_char_cursor#74
  [75] call print_word 
  to:print_dword::@1
print_dword::@1: scope:[print_dword]  from print_dword
  [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0
  [77] call print_word 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword::@1
  [78] return 
  to:@return
print_cls: scope:[print_cls]  from main
  [79] phi()
  [80] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [81] return 
  to:@return
memset: scope:[memset]  from print_cls
  [82] phi()
  to:memset::@2
memset::@2: scope:[memset]  from memset memset::@1
  [83] (byte*) memset::dst#4 ← phi( memset::@1/(byte*) memset::dst#1 memset/(byte*)(const void*) memset::str#0 )
  [84] *((byte*) memset::dst#4) ← (const byte) memset::c#0
  [85] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#4
  to:memset::@1
memset::@1: scope:[memset]  from memset::@2
  [86] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [87] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(word~) main::$16 22.0
(word~) main::$20 22.0
(word~) main::$24 22.0
(word~) main::$28 22.0
(word~) main::$3 22.0
(word~) main::$32 22.0
(word~) main::$33 22.0
(word~) main::$6 22.0
(dword) main::dw
(dword) main::dw#1 11.0
(dword) main::dw#18 1.4102564102564101
(dword) main::dw2
(dword) main::dw2#1 7.333333333333333
(dword) main::dw2#10 3.142857142857143
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 16.5
(byte*) memset::dst#4 16.5
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 22.0
(byte) print_byte::b#3 22.0
(byte) print_byte::b#4 22.0
(byte) print_byte::b#5 22.0
(byte) print_byte::b#6 13.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#8 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 4.820000000000001
(byte*) print_char_cursor#44 37.0
(byte*) print_char_cursor#65 14.0
(byte*) print_char_cursor#67 16.666666666666664
(byte*) print_char_cursor#74 1.4444444444444446
(byte*~) print_char_cursor#78 4.0
(void()) print_cls()
(void()) print_dword((dword) print_dword::dw)
(dword) print_dword::dw
(dword) print_dword::dw#0 3.75
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#37 0.3333333333333333
(byte*~) print_line_cursor#53 202.0
(byte*~) print_line_cursor#54 22.0
(byte*) print_line_cursor#9 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 2.0
(word) print_word::w#1 4.0
(word) print_word::w#2 22.0
(word) print_word::w#3 22.0
(word) print_word::w#4 9.999999999999998

Initial phi equivalence classes
[ main::dw#18 main::dw#1 ]
[ print_char_cursor#74 print_line_cursor#1 ]
[ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ]
[ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ]
[ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
[ memset::dst#4 memset::dst#1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$32 to zero page equivalence class [ main::$32 ]
Added variable main::dw2#1 to zero page equivalence class [ main::dw2#1 ]
Added variable main::$6 to zero page equivalence class [ main::$6 ]
Added variable main::$33 to zero page equivalence class [ main::$33 ]
Added variable main::dw2#10 to zero page equivalence class [ main::dw2#10 ]
Added variable print_dword::dw#0 to zero page equivalence class [ print_dword::dw#0 ]
Added variable main::$16 to zero page equivalence class [ main::$16 ]
Added variable main::$20 to zero page equivalence class [ main::$20 ]
Added variable main::$24 to zero page equivalence class [ main::$24 ]
Added variable main::$28 to zero page equivalence class [ main::$28 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::dw#18 main::dw#1 ]
[ print_char_cursor#74 print_line_cursor#1 ]
[ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ]
[ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ]
[ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
[ memset::dst#4 memset::dst#1 ]
[ main::$3 ]
[ main::$32 ]
[ main::dw2#1 ]
[ main::$6 ]
[ main::$33 ]
[ main::dw2#10 ]
[ print_dword::dw#0 ]
[ main::$16 ]
[ main::$20 ]
[ main::$24 ]
[ main::$28 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_DWORD:2 [ main::dw#18 main::dw#1 ]
Allocated zp ZP_WORD:6 [ print_char_cursor#74 print_line_cursor#1 ]
Allocated zp ZP_WORD:8 [ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ]
Allocated zp ZP_BYTE:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:11 [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ]
Allocated zp ZP_WORD:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
Allocated zp ZP_WORD:16 [ memset::dst#4 memset::dst#1 ]
Allocated zp ZP_WORD:18 [ main::$3 ]
Allocated zp ZP_WORD:20 [ main::$32 ]
Allocated zp ZP_DWORD:22 [ main::dw2#1 ]
Allocated zp ZP_WORD:26 [ main::$6 ]
Allocated zp ZP_WORD:28 [ main::$33 ]
Allocated zp ZP_DWORD:30 [ main::dw2#10 ]
Allocated zp ZP_DWORD:34 [ print_dword::dw#0 ]
Allocated zp ZP_WORD:38 [ main::$16 ]
Allocated zp ZP_WORD:40 [ main::$20 ]
Allocated zp ZP_WORD:42 [ main::$24 ]
Allocated zp ZP_WORD:44 [ main::$28 ]
Allocated zp ZP_BYTE:46 [ print_byte::$0 ]
Allocated zp ZP_BYTE:47 [ print_byte::$2 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = $c
  .label print_line_cursor_9 = 8
  .label print_line_cursor_37 = 8
  .label print_char_cursor_74 = 6
  .label print_line_cursor_53 = 8
  .label print_line_cursor_54 = 8
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label _3 = $12
    .label _6 = $1a
    .label _16 = $26
    .label _20 = $28
    .label _24 = $2a
    .label _28 = $2c
    .label _32 = $14
    .label _33 = $1c
    .label dw2 = $16
    .label dw = 2
    .label dw2_10 = $1e
    // [5] call print_cls 
    // [79] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    // [6] phi (byte*) print_char_cursor#74 = (byte*) 1024 [phi:main->main::@2#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor_74
    lda #>$400
    sta print_char_cursor_74+1
    // [6] phi (byte*) print_line_cursor#37 = (byte*) 1024 [phi:main->main::@2#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor_37
    lda #>$400
    sta print_line_cursor_37+1
    // [6] phi (dword) main::dw#18 = (dword) $12345678 [phi:main->main::@2#2] -- vduz1=vduc1 
    lda #<$12345678
    sta dw
    lda #>$12345678
    sta dw+1
    lda #<$12345678>>$10
    sta dw+2
    lda #>$12345678>>$10
    sta dw+3
    jmp b2
    // main::@2
  b2:
    // [7] (word~) main::$3 ← > (dword) main::dw#18 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta _3
    lda dw+3
    sta _3+1
    // [8] (word~) main::$32 ← (word~) main::$3 + (word) $1111 -- vwuz1=vwuz2_plus_vwuc1 
    lda _3
    clc
    adc #<$1111
    sta _32
    lda _3+1
    adc #>$1111
    sta _32+1
    // [9] (dword) main::dw2#1 ← (dword) main::dw#18 hi= (word~) main::$32 -- vduz1=vduz2_sethi_vwuz3 
    lda dw
    sta dw2
    lda dw+1
    sta dw2+1
    lda _32
    sta dw2+2
    lda _32+1
    sta dw2+3
    // [10] (word~) main::$6 ← < (dword) main::dw#18 -- vwuz1=_lo_vduz2 
    lda dw
    sta _6
    lda dw+1
    sta _6+1
    // [11] (word~) main::$33 ← (word~) main::$6 + (word) $1111 -- vwuz1=vwuz2_plus_vwuc1 
    lda _6
    clc
    adc #<$1111
    sta _33
    lda _6+1
    adc #>$1111
    sta _33+1
    // [12] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 -- vduz1=vduz2_setlo_vwuz3 
    lda _33
    sta dw2_10
    lda _33+1
    sta dw2_10+1
    lda dw2+2
    sta dw2_10+2
    lda dw2+3
    sta dw2_10+3
    // [13] (dword) print_dword::dw#0 ← (dword) main::dw2#10 -- vduz1=vduz2 
    lda dw2_10
    sta print_dword.dw
    lda dw2_10+1
    sta print_dword.dw+1
    lda dw2_10+2
    sta print_dword.dw+2
    lda dw2_10+3
    sta print_dword.dw+3
    // [14] call print_dword 
    jsr print_dword
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [16] call print_char 
    // [63] phi from main::@3 to print_char [phi:main::@3->print_char]
  print_char_from_b3:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@3->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b4
    // main::@4
  b4:
    // [17] (word) print_word::w#2 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2_10+2
    sta print_word.w
    lda dw2_10+3
    sta print_word.w+1
    // [18] call print_word 
    // [67] phi from main::@4 to print_word [phi:main::@4->print_word]
  print_word_from_b4:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@4->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:main::@4->print_word#1] -- register_copy 
    jsr print_word
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
    // main::@5
  b5:
    // [20] call print_char 
    // [63] phi from main::@5 to print_char [phi:main::@5->print_char]
  print_char_from_b5:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@5->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@5->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b6
    // main::@6
  b6:
    // [21] (word) print_word::w#3 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2_10
    sta print_word.w
    lda dw2_10+1
    sta print_word.w+1
    // [22] call print_word 
    // [67] phi from main::@6 to print_word [phi:main::@6->print_word]
  print_word_from_b6:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@6->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:main::@6->print_word#1] -- register_copy 
    jsr print_word
    // [23] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
    // main::@7
  b7:
    // [24] call print_char 
    // [63] phi from main::@7 to print_char [phi:main::@7->print_char]
  print_char_from_b7:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@7->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@7->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b8
    // main::@8
  b8:
    // [25] (word~) main::$16 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2_10+2
    sta _16
    lda dw2_10+3
    sta _16+1
    // [26] (byte) print_byte::b#2 ← > (word~) main::$16 -- vbuz1=_hi_vwuz2 
    lda _16+1
    sta print_byte.b
    // [27] call print_byte 
    // [55] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  print_byte_from_b8:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@8->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
    // [28] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
    // main::@9
  b9:
    // [29] call print_char 
    // [63] phi from main::@9 to print_char [phi:main::@9->print_char]
  print_char_from_b9:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@9->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@9->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b10
    // main::@10
  b10:
    // [30] (word~) main::$20 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2_10+2
    sta _20
    lda dw2_10+3
    sta _20+1
    // [31] (byte) print_byte::b#3 ← < (word~) main::$20 -- vbuz1=_lo_vwuz2 
    lda _20
    sta print_byte.b
    // [32] call print_byte 
    // [55] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  print_byte_from_b10:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@10->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
    // [33] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
    // main::@11
  b11:
    // [34] call print_char 
    // [63] phi from main::@11 to print_char [phi:main::@11->print_char]
  print_char_from_b11:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@11->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@11->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b12
    // main::@12
  b12:
    // [35] (word~) main::$24 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2_10
    sta _24
    lda dw2_10+1
    sta _24+1
    // [36] (byte) print_byte::b#4 ← > (word~) main::$24 -- vbuz1=_hi_vwuz2 
    lda _24+1
    sta print_byte.b
    // [37] call print_byte 
    // [55] phi from main::@12 to print_byte [phi:main::@12->print_byte]
  print_byte_from_b12:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@12->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#4 [phi:main::@12->print_byte#1] -- register_copy 
    jsr print_byte
    // [38] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
    // main::@13
  b13:
    // [39] call print_char 
    // [63] phi from main::@13 to print_char [phi:main::@13->print_char]
  print_char_from_b13:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@13->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@13->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b14
    // main::@14
  b14:
    // [40] (word~) main::$28 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2_10
    sta _28
    lda dw2_10+1
    sta _28+1
    // [41] (byte) print_byte::b#5 ← < (word~) main::$28 -- vbuz1=_lo_vwuz2 
    lda _28
    sta print_byte.b
    // [42] call print_byte 
    // [55] phi from main::@14 to print_byte [phi:main::@14->print_byte]
  print_byte_from_b14:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@14->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#5 [phi:main::@14->print_byte#1] -- register_copy 
    jsr print_byte
    // [43] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  b15_from_b14:
    jmp b15
    // main::@15
  b15:
    // [44] call print_ln 
    // [49] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from_b15:
    jsr print_ln
    jmp b16
    // main::@16
  b16:
    // [45] (dword) main::dw#1 ← ++ (dword) main::dw#18 -- vduz1=_inc_vduz1 
    inc dw
    bne !+
    inc dw+1
    bne !+
    inc dw+2
    bne !+
    inc dw+3
  !:
    jmp b1
    // main::@1
  b1:
    // [46] if((dword) main::dw#1!=(dword) $12345690) goto main::@17 -- vduz1_neq_vduc1_then_la1 
    lda dw+3
    cmp #>$12345690>>$10
    bne b17
    lda dw+2
    cmp #<$12345690>>$10
    bne b17
    lda dw+1
    cmp #>$12345690
    bne b17
    lda dw
    cmp #<$12345690
    bne b17
    jmp breturn
    // main::@return
  breturn:
    // [47] return 
    rts
    // main::@17
  b17:
    // [48] (byte*~) print_line_cursor#54 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_line_cursor_54
    lda print_line_cursor+1
    sta print_line_cursor_54+1
    // [6] phi from main::@17 to main::@2 [phi:main::@17->main::@2]
  b2_from_b17:
    // [6] phi (byte*) print_char_cursor#74 = (byte*) print_line_cursor#1 [phi:main::@17->main::@2#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#37 = (byte*~) print_line_cursor#54 [phi:main::@17->main::@2#1] -- register_copy 
    // [6] phi (dword) main::dw#18 = (dword) main::dw#1 [phi:main::@17->main::@2#2] -- register_copy 
    jmp b2
}
  // print_ln
// Print a newline
print_ln: {
    // [50] phi from print_ln print_ln::@2 to print_ln::@1 [phi:print_ln/print_ln::@2->print_ln::@1]
  b1_from_print_ln:
  b1_from_b2:
    // [50] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#37 [phi:print_ln/print_ln::@2->print_ln::@1#0] -- register_copy 
    jmp b1
    // print_ln::@1
  b1:
    // [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor_9
    sta print_line_cursor
    lda #0
    adc print_line_cursor_9+1
    sta print_line_cursor+1
    // [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b2
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b2
  !:
    jmp breturn
    // print_ln::@return
  breturn:
    // [53] return 
    rts
    // print_ln::@2
  b2:
    // [54] (byte*~) print_line_cursor#53 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_line_cursor_53
    lda print_line_cursor+1
    sta print_line_cursor_53+1
    jmp b1_from_b2
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label _0 = $2e
    .label _2 = $2f
    .label b = $a
    // [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
    // [57] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
    // [58] call print_char 
    // [63] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#67 [phi:print_byte->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
    // [60] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
    // [61] call print_char 
    // [63] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [62] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zeropage($b) ch)
print_char: {
    .label ch = $b
    // [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
    // [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [66] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage($e) w)
print_word: {
    .label w = $e
    // [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
    // [69] call print_byte 
    // [55] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#65 [phi:print_word->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
    // print_word::@1
  b1:
    // [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
    // [71] call print_byte 
    // [55] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
    // print_word::@return
  breturn:
    // [72] return 
    rts
}
  // print_dword
// Print a dword as HEX
// print_dword(dword zeropage($22) dw)
print_dword: {
    .label dw = $22
    // [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word.w
    lda dw+3
    sta print_word.w+1
    // [74] (byte*~) print_char_cursor#78 ← (byte*) print_char_cursor#74 -- pbuz1=pbuz2 
    lda print_char_cursor_74
    sta print_char_cursor
    lda print_char_cursor_74+1
    sta print_char_cursor+1
    // [75] call print_word 
    // [67] phi from print_dword to print_word [phi:print_dword->print_word]
  print_word_from_print_dword:
    // [67] phi (byte*) print_char_cursor#65 = (byte*~) print_char_cursor#78 [phi:print_dword->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    jmp b1
    // print_dword::@1
  b1:
    // [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word.w
    lda dw+1
    sta print_word.w+1
    // [77] call print_word 
    // [67] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  print_word_from_b1:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:print_dword::@1->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
    // print_dword::@return
  breturn:
    // [78] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [80] call memset 
    // [82] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp breturn
    // print_cls::@return
  breturn:
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [83] phi from memset to memset::@2 [phi:memset->memset::@2]
  b2_from_memset:
    // [83] phi (byte*) memset::dst#4 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@2#0] -- pbuz1=pbuc1 
    lda #<str
    sta dst
    lda #>str
    sta dst+1
    jmp b2
    // [83] phi from memset::@1 to memset::@2 [phi:memset::@1->memset::@2]
  b2_from_b1:
    // [83] phi (byte*) memset::dst#4 = (byte*) memset::dst#1 [phi:memset::@1->memset::@2#0] -- register_copy 
    jmp b2
    // memset::@2
  b2:
    // [84] *((byte*) memset::dst#4) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [85] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#4 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    jmp b1
    // memset::@1
  b1:
    // [86] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda dst+1
    cmp #>end
    bne b2_from_b1
    lda dst
    cmp #<end
    bne b2_from_b1
    jmp breturn
    // memset::@return
  breturn:
    // [87] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_WORD:18 [ main::$3 ] has ALU potential.
Equivalence Class zp ZP_WORD:26 [ main::$6 ] has ALU potential.
Statement [8] (word~) main::$32 ← (word~) main::$3 + (word) $1111 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::$32 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::$32 ] ) always clobbers reg byte a 
Statement [9] (dword) main::dw2#1 ← (dword) main::dw#18 hi= (word~) main::$32 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 ] ) always clobbers reg byte a 
Statement [11] (word~) main::$33 ← (word~) main::$6 + (word) $1111 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 main::$33 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 main::$33 ] ) always clobbers reg byte a 
Statement [12] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 ] ) always clobbers reg byte a 
Statement [13] (dword) print_dword::dw#0 ← (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 print_dword::dw#0 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 print_dword::dw#0 ] ) always clobbers reg byte a 
Statement [17] (word) print_word::w#2 ← > (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#2 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#2 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [21] (word) print_word::w#3 ← < (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#3 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#3 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [25] (word~) main::$16 ← > (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$16 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$16 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [26] (byte) print_byte::b#2 ← > (word~) main::$16 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#2 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#2 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [30] (word~) main::$20 ← > (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$20 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$20 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [31] (byte) print_byte::b#3 ← < (word~) main::$20 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#3 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#3 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [35] (word~) main::$24 ← < (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$24 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$24 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [36] (byte) print_byte::b#4 ← > (word~) main::$24 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#4 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#4 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [40] (word~) main::$28 ← < (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::$28 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::$28 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [41] (byte) print_byte::b#5 ← < (word~) main::$28 [ main::dw#18 print_line_cursor#37 print_byte::b#5 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_byte::b#5 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [46] if((dword) main::dw#1!=(dword) $12345690) goto main::@17 [ main::dw#1 print_line_cursor#1 ] ( main:2 [ main::dw#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [48] (byte*~) print_line_cursor#54 ← (byte*) print_line_cursor#1 [ main::dw#1 print_line_cursor#54 print_line_cursor#1 ] ( main:2 [ main::dw#1 print_line_cursor#54 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:44 [ main::dw#18 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:44 [ main::dw#18 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [54] (byte*~) print_line_cursor#53 ← (byte*) print_line_cursor#1 [ print_line_cursor#53 print_char_cursor#12 ] ( main:2::print_ln:44 [ main::dw#18 print_line_cursor#53 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 [ print_byte::b#6 print_char_cursor#67 print_byte::$0 ] ( main:2::print_byte:27 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_byte:32 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_byte:37 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_byte:42 [ main::dw#18 print_line_cursor#37 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:18::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:22::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:75::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:77::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:18::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:22::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:75::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:77::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
Statement [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_byte:27 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_byte:32 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_byte:37 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_byte:42 [ main::dw#18 print_line_cursor#37 print_char_cursor#12 print_byte::$2 ] main:2::print_word:18::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_word:22::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:75::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:77::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_word:18::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_word:22::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:75::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:77::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 [ print_char_cursor#44 ] ( main:2::print_char:16 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:20 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:24 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:29 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:34 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:39 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:27::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:32::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:37::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:42::print_char:58 [ main::dw#18 print_line_cursor#37 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:18::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:22::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:18::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:22::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:27::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:32::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:37::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:42::print_char:61 [ main::dw#18 print_line_cursor#37 print_char_cursor#44 ] main:2::print_word:18::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#44 ] main:2::print_word:22::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#44 ] main:2::print_word:18::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_word:22::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
Statement [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 [ print_byte::b#0 print_char_cursor#65 print_word::w#4 ] ( main:2::print_word:18 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] main:2::print_word:22 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] main:2::print_dword:14::print_word:75 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] main:2::print_dword:14::print_word:77 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] ) always clobbers reg byte a 
Statement [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_word:18 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::b#1 ] main:2::print_word:22 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::b#1 ] main:2::print_dword:14::print_word:75 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_char_cursor#12 print_byte::b#1 ] main:2::print_dword:14::print_word:77 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 [ print_char_cursor#74 print_dword::dw#0 print_word::w#0 ] ( main:2::print_dword:14 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#74 print_dword::dw#0 print_word::w#0 ] ) always clobbers reg byte a 
Statement [74] (byte*~) print_char_cursor#78 ← (byte*) print_char_cursor#74 [ print_dword::dw#0 print_word::w#0 print_char_cursor#78 ] ( main:2::print_dword:14 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#0 print_char_cursor#78 ] ) always clobbers reg byte a 
Statement [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 [ print_char_cursor#12 print_word::w#1 ] ( main:2::print_dword:14 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_word::w#1 ] ) always clobbers reg byte a 
Statement [84] *((byte*) memset::dst#4) ← (const byte) memset::c#0 [ memset::dst#4 ] ( main:2::print_cls:5::memset:80 [ memset::dst#4 ] ) always clobbers reg byte a reg byte y 
Statement [86] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#1 ] ( main:2::print_cls:5::memset:80 [ memset::dst#1 ] ) always clobbers reg byte a 
Statement [8] (word~) main::$32 ← (word~) main::$3 + (word) $1111 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::$32 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::$32 ] ) always clobbers reg byte a 
Statement [9] (dword) main::dw2#1 ← (dword) main::dw#18 hi= (word~) main::$32 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 ] ) always clobbers reg byte a 
Statement [11] (word~) main::$33 ← (word~) main::$6 + (word) $1111 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 main::$33 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#1 main::$33 ] ) always clobbers reg byte a 
Statement [12] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 ] ) always clobbers reg byte a 
Statement [13] (dword) print_dword::dw#0 ← (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 print_dword::dw#0 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_char_cursor#74 main::dw2#10 print_dword::dw#0 ] ) always clobbers reg byte a 
Statement [17] (word) print_word::w#2 ← > (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#2 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#2 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [21] (word) print_word::w#3 ← < (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#3 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#3 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [25] (word~) main::$16 ← > (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$16 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$16 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [26] (byte) print_byte::b#2 ← > (word~) main::$16 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#2 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#2 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [30] (word~) main::$20 ← > (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$20 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$20 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [31] (byte) print_byte::b#3 ← < (word~) main::$20 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#3 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#3 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [35] (word~) main::$24 ← < (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$24 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 main::$24 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [36] (byte) print_byte::b#4 ← > (word~) main::$24 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#4 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#4 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [40] (word~) main::$28 ← < (dword) main::dw2#10 [ main::dw#18 print_line_cursor#37 main::$28 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 main::$28 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [41] (byte) print_byte::b#5 ← < (word~) main::$28 [ main::dw#18 print_line_cursor#37 print_byte::b#5 print_char_cursor#12 ] ( main:2 [ main::dw#18 print_line_cursor#37 print_byte::b#5 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [46] if((dword) main::dw#1!=(dword) $12345690) goto main::@17 [ main::dw#1 print_line_cursor#1 ] ( main:2 [ main::dw#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [48] (byte*~) print_line_cursor#54 ← (byte*) print_line_cursor#1 [ main::dw#1 print_line_cursor#54 print_line_cursor#1 ] ( main:2 [ main::dw#1 print_line_cursor#54 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:44 [ main::dw#18 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:44 [ main::dw#18 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [54] (byte*~) print_line_cursor#53 ← (byte*) print_line_cursor#1 [ print_line_cursor#53 print_char_cursor#12 ] ( main:2::print_ln:44 [ main::dw#18 print_line_cursor#53 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 [ print_byte::b#6 print_char_cursor#67 print_byte::$0 ] ( main:2::print_byte:27 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_byte:32 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_byte:37 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_byte:42 [ main::dw#18 print_line_cursor#37 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:18::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:22::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:75::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:77::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:18::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_word:22::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:75::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] main:2::print_dword:14::print_word:77::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#67 print_byte::$0 ] ) always clobbers reg byte a 
Statement [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_byte:27 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_byte:32 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_byte:37 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_byte:42 [ main::dw#18 print_line_cursor#37 print_char_cursor#12 print_byte::$2 ] main:2::print_word:18::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_word:22::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:75::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:77::print_byte:69 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_word:18::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_word:22::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:75::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_char_cursor#12 print_byte::$2 ] main:2::print_dword:14::print_word:77::print_byte:71 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 [ print_char_cursor#44 ] ( main:2::print_char:16 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:20 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:24 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:29 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:34 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_char:39 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:27::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:32::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:37::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:42::print_char:58 [ main::dw#18 print_line_cursor#37 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:18::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:22::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:69::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:18::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_word:22::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_byte::b#6 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:71::print_char:58 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#6 print_char_cursor#44 ] main:2::print_byte:27::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:32::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:37::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_byte:42::print_char:61 [ main::dw#18 print_line_cursor#37 print_char_cursor#44 ] main:2::print_word:18::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#44 ] main:2::print_word:22::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#4 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:69::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_word::w#4 print_char_cursor#44 ] main:2::print_word:18::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_word:22::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] main:2::print_dword:14::print_word:75::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_char_cursor#44 ] main:2::print_dword:14::print_word:77::print_byte:71::print_char:61 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#44 ] ) always clobbers reg byte y 
Statement [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 [ print_byte::b#0 print_char_cursor#65 print_word::w#4 ] ( main:2::print_word:18 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] main:2::print_word:22 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] main:2::print_dword:14::print_word:75 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] main:2::print_dword:14::print_word:77 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_byte::b#0 print_char_cursor#65 print_word::w#4 ] ) always clobbers reg byte a 
Statement [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_word:18 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::b#1 ] main:2::print_word:22 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::b#1 ] main:2::print_dword:14::print_word:75 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_char_cursor#12 print_byte::b#1 ] main:2::print_dword:14::print_word:77 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 [ print_char_cursor#74 print_dword::dw#0 print_word::w#0 ] ( main:2::print_dword:14 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#74 print_dword::dw#0 print_word::w#0 ] ) always clobbers reg byte a 
Statement [74] (byte*~) print_char_cursor#78 ← (byte*) print_char_cursor#74 [ print_dword::dw#0 print_word::w#0 print_char_cursor#78 ] ( main:2::print_dword:14 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_dword::dw#0 print_word::w#0 print_char_cursor#78 ] ) always clobbers reg byte a 
Statement [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 [ print_char_cursor#12 print_word::w#1 ] ( main:2::print_dword:14 [ main::dw#18 print_line_cursor#37 main::dw2#10 print_char_cursor#12 print_word::w#1 ] ) always clobbers reg byte a 
Statement [84] *((byte*) memset::dst#4) ← (const byte) memset::c#0 [ memset::dst#4 ] ( main:2::print_cls:5::memset:80 [ memset::dst#4 ] ) always clobbers reg byte a reg byte y 
Statement [86] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#1 ] ( main:2::print_cls:5::memset:80 [ memset::dst#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_DWORD:2 [ main::dw#18 main::dw#1 ] : zp ZP_DWORD:2 , 
Potential registers zp ZP_WORD:6 [ print_char_cursor#74 print_line_cursor#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ memset::dst#4 memset::dst#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ main::$3 ] : zp ZP_WORD:18 , reg byte alu , 
Potential registers zp ZP_WORD:20 [ main::$32 ] : zp ZP_WORD:20 , 
Potential registers zp ZP_DWORD:22 [ main::dw2#1 ] : zp ZP_DWORD:22 , 
Potential registers zp ZP_WORD:26 [ main::$6 ] : zp ZP_WORD:26 , reg byte alu , 
Potential registers zp ZP_WORD:28 [ main::$33 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_DWORD:30 [ main::dw2#10 ] : zp ZP_DWORD:30 , 
Potential registers zp ZP_DWORD:34 [ print_dword::dw#0 ] : zp ZP_DWORD:34 , 
Potential registers zp ZP_WORD:38 [ main::$16 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_WORD:40 [ main::$20 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ main::$24 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_WORD:44 [ main::$28 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_BYTE:46 [ print_byte::$0 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ print_byte::$2 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 428.33: zp ZP_WORD:8 [ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ] 76.49: zp ZP_WORD:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ] 47.87: zp ZP_WORD:6 [ print_char_cursor#74 print_line_cursor#1 ] 
Uplift Scope [main] 22: zp ZP_WORD:18 [ main::$3 ] 22: zp ZP_WORD:20 [ main::$32 ] 22: zp ZP_WORD:26 [ main::$6 ] 22: zp ZP_WORD:28 [ main::$33 ] 22: zp ZP_WORD:38 [ main::$16 ] 22: zp ZP_WORD:40 [ main::$20 ] 22: zp ZP_WORD:42 [ main::$24 ] 22: zp ZP_WORD:44 [ main::$28 ] 12.41: zp ZP_DWORD:2 [ main::dw#18 main::dw#1 ] 7.33: zp ZP_DWORD:22 [ main::dw2#1 ] 3.14: zp ZP_DWORD:30 [ main::dw2#10 ] 
Uplift Scope [print_byte] 109: zp ZP_BYTE:10 [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:46 [ print_byte::$0 ] 4: zp ZP_BYTE:47 [ print_byte::$2 ] 
Uplift Scope [print_word] 60: zp ZP_WORD:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] 
Uplift Scope [memset] 33: zp ZP_WORD:16 [ memset::dst#4 memset::dst#1 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:11 [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_dword] 3.75: zp ZP_DWORD:34 [ print_dword::dw#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 

Uplifting [] best 10584 combination zp ZP_WORD:8 [ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ] zp ZP_WORD:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ] zp ZP_WORD:6 [ print_char_cursor#74 print_line_cursor#1 ] 
Uplifting [main] best 10584 combination zp ZP_WORD:18 [ main::$3 ] zp ZP_WORD:20 [ main::$32 ] zp ZP_WORD:26 [ main::$6 ] zp ZP_WORD:28 [ main::$33 ] zp ZP_WORD:38 [ main::$16 ] zp ZP_WORD:40 [ main::$20 ] zp ZP_WORD:42 [ main::$24 ] zp ZP_WORD:44 [ main::$28 ] zp ZP_DWORD:2 [ main::dw#18 main::dw#1 ] zp ZP_DWORD:22 [ main::dw2#1 ] zp ZP_DWORD:30 [ main::dw2#10 ] 
Uplifting [print_byte] best 10530 combination reg byte x [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte x [ print_byte::$2 ] 
Uplifting [print_word] best 10530 combination zp ZP_WORD:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] 
Uplifting [memset] best 10530 combination zp ZP_WORD:16 [ memset::dst#4 memset::dst#1 ] 
Uplifting [print_char] best 10503 combination reg byte a [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_dword] best 10503 combination zp ZP_DWORD:34 [ print_dword::dw#0 ] 
Uplifting [RADIX] best 10503 combination 
Uplifting [print_ln] best 10503 combination 
Uplifting [print_cls] best 10503 combination 
Coalescing zero page register [ zp ZP_WORD:18 [ main::$3 ] ] with [ zp ZP_WORD:20 [ main::$32 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:22 [ main::dw2#1 ] ] with [ zp ZP_DWORD:30 [ main::dw2#10 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:26 [ main::$6 ] ] with [ zp ZP_WORD:28 [ main::$33 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:22 [ main::dw2#1 main::dw2#10 ] ] with [ zp ZP_DWORD:34 [ print_dword::dw#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:16 [ memset::dst#4 memset::dst#1 ] ] with [ zp ZP_WORD:6 [ print_char_cursor#74 print_line_cursor#1 ] ]
Coalescing zero page register [ zp ZP_WORD:18 [ main::$3 main::$32 ] ] with [ zp ZP_WORD:12 [ print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ] ]
Coalescing zero page register [ zp ZP_WORD:26 [ main::$6 main::$33 ] ] with [ zp ZP_WORD:14 [ print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ main::$16 ] ] with [ zp ZP_WORD:16 [ memset::dst#4 memset::dst#1 print_char_cursor#74 print_line_cursor#1 ] ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ]
Allocated (was zp ZP_WORD:18) zp ZP_WORD:8 [ main::$3 main::$32 print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ]
Allocated (was zp ZP_DWORD:22) zp ZP_DWORD:10 [ main::dw2#1 main::dw2#10 print_dword::dw#0 ]
Allocated (was zp ZP_WORD:26) zp ZP_WORD:14 [ main::$6 main::$33 print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
Allocated (was zp ZP_WORD:38) zp ZP_WORD:16 [ main::$16 memset::dst#4 memset::dst#1 print_char_cursor#74 print_line_cursor#1 ]
Allocated (was zp ZP_WORD:40) zp ZP_WORD:18 [ main::$20 ]
Allocated (was zp ZP_WORD:42) zp ZP_WORD:20 [ main::$24 ]
Allocated (was zp ZP_WORD:44) zp ZP_WORD:22 [ main::$28 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = $10
  .label print_char_cursor = 8
  .label print_line_cursor_9 = 6
  .label print_line_cursor_37 = 6
  .label print_char_cursor_74 = $10
  .label print_line_cursor_53 = 6
  .label print_line_cursor_54 = 6
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label _3 = 8
    .label _6 = $e
    .label _16 = $10
    .label _20 = $12
    .label _24 = $14
    .label _28 = $16
    .label _32 = 8
    .label _33 = $e
    .label dw2 = $a
    .label dw = 2
    // [5] call print_cls 
    // [79] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    // [6] phi (byte*) print_char_cursor#74 = (byte*) 1024 [phi:main->main::@2#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor_74
    lda #>$400
    sta print_char_cursor_74+1
    // [6] phi (byte*) print_line_cursor#37 = (byte*) 1024 [phi:main->main::@2#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor_37
    lda #>$400
    sta print_line_cursor_37+1
    // [6] phi (dword) main::dw#18 = (dword) $12345678 [phi:main->main::@2#2] -- vduz1=vduc1 
    lda #<$12345678
    sta dw
    lda #>$12345678
    sta dw+1
    lda #<$12345678>>$10
    sta dw+2
    lda #>$12345678>>$10
    sta dw+3
    jmp b2
    // main::@2
  b2:
    // [7] (word~) main::$3 ← > (dword) main::dw#18 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta _3
    lda dw+3
    sta _3+1
    // [8] (word~) main::$32 ← (word~) main::$3 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda _32
    adc #<$1111
    sta _32
    lda _32+1
    adc #>$1111
    sta _32+1
    // [9] (dword) main::dw2#1 ← (dword) main::dw#18 hi= (word~) main::$32 -- vduz1=vduz2_sethi_vwuz3 
    lda dw
    sta dw2
    lda dw+1
    sta dw2+1
    lda _32
    sta dw2+2
    lda _32+1
    sta dw2+3
    // [10] (word~) main::$6 ← < (dword) main::dw#18 -- vwuz1=_lo_vduz2 
    lda dw
    sta _6
    lda dw+1
    sta _6+1
    // [11] (word~) main::$33 ← (word~) main::$6 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda _33
    adc #<$1111
    sta _33
    lda _33+1
    adc #>$1111
    sta _33+1
    // [12] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 -- vduz1=vduz1_setlo_vwuz2 
    lda _33
    sta dw2
    lda _33+1
    sta dw2+1
    // [13] (dword) print_dword::dw#0 ← (dword) main::dw2#10
    // [14] call print_dword 
    jsr print_dword
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [16] call print_char 
    // [63] phi from main::@3 to print_char [phi:main::@3->print_char]
  print_char_from_b3:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@3->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b4
    // main::@4
  b4:
    // [17] (word) print_word::w#2 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2+2
    sta print_word.w
    lda dw2+3
    sta print_word.w+1
    // [18] call print_word 
    // [67] phi from main::@4 to print_word [phi:main::@4->print_word]
  print_word_from_b4:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@4->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:main::@4->print_word#1] -- register_copy 
    jsr print_word
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
    // main::@5
  b5:
    // [20] call print_char 
    // [63] phi from main::@5 to print_char [phi:main::@5->print_char]
  print_char_from_b5:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@5->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@5->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b6
    // main::@6
  b6:
    // [21] (word) print_word::w#3 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2
    sta print_word.w
    lda dw2+1
    sta print_word.w+1
    // [22] call print_word 
    // [67] phi from main::@6 to print_word [phi:main::@6->print_word]
  print_word_from_b6:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@6->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:main::@6->print_word#1] -- register_copy 
    jsr print_word
    // [23] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
    // main::@7
  b7:
    // [24] call print_char 
    // [63] phi from main::@7 to print_char [phi:main::@7->print_char]
  print_char_from_b7:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@7->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@7->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b8
    // main::@8
  b8:
    // [25] (word~) main::$16 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2+2
    sta _16
    lda dw2+3
    sta _16+1
    // [26] (byte) print_byte::b#2 ← > (word~) main::$16 -- vbuxx=_hi_vwuz1 
    lda _16+1
    tax
    // [27] call print_byte 
    // [55] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  print_byte_from_b8:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@8->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
    // [28] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
    // main::@9
  b9:
    // [29] call print_char 
    // [63] phi from main::@9 to print_char [phi:main::@9->print_char]
  print_char_from_b9:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@9->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@9->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b10
    // main::@10
  b10:
    // [30] (word~) main::$20 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2+2
    sta _20
    lda dw2+3
    sta _20+1
    // [31] (byte) print_byte::b#3 ← < (word~) main::$20 -- vbuxx=_lo_vwuz1 
    lda _20
    tax
    // [32] call print_byte 
    // [55] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  print_byte_from_b10:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@10->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
    // [33] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
    // main::@11
  b11:
    // [34] call print_char 
    // [63] phi from main::@11 to print_char [phi:main::@11->print_char]
  print_char_from_b11:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@11->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@11->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b12
    // main::@12
  b12:
    // [35] (word~) main::$24 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2
    sta _24
    lda dw2+1
    sta _24+1
    // [36] (byte) print_byte::b#4 ← > (word~) main::$24 -- vbuxx=_hi_vwuz1 
    lda _24+1
    tax
    // [37] call print_byte 
    // [55] phi from main::@12 to print_byte [phi:main::@12->print_byte]
  print_byte_from_b12:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@12->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#4 [phi:main::@12->print_byte#1] -- register_copy 
    jsr print_byte
    // [38] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
    // main::@13
  b13:
    // [39] call print_char 
    // [63] phi from main::@13 to print_char [phi:main::@13->print_char]
  print_char_from_b13:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@13->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@13->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b14
    // main::@14
  b14:
    // [40] (word~) main::$28 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2
    sta _28
    lda dw2+1
    sta _28+1
    // [41] (byte) print_byte::b#5 ← < (word~) main::$28 -- vbuxx=_lo_vwuz1 
    lda _28
    tax
    // [42] call print_byte 
    // [55] phi from main::@14 to print_byte [phi:main::@14->print_byte]
  print_byte_from_b14:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@14->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#5 [phi:main::@14->print_byte#1] -- register_copy 
    jsr print_byte
    // [43] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  b15_from_b14:
    jmp b15
    // main::@15
  b15:
    // [44] call print_ln 
    // [49] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from_b15:
    jsr print_ln
    jmp b16
    // main::@16
  b16:
    // [45] (dword) main::dw#1 ← ++ (dword) main::dw#18 -- vduz1=_inc_vduz1 
    inc dw
    bne !+
    inc dw+1
    bne !+
    inc dw+2
    bne !+
    inc dw+3
  !:
    jmp b1
    // main::@1
  b1:
    // [46] if((dword) main::dw#1!=(dword) $12345690) goto main::@17 -- vduz1_neq_vduc1_then_la1 
    lda dw+3
    cmp #>$12345690>>$10
    bne b17
    lda dw+2
    cmp #<$12345690>>$10
    bne b17
    lda dw+1
    cmp #>$12345690
    bne b17
    lda dw
    cmp #<$12345690
    bne b17
    jmp breturn
    // main::@return
  breturn:
    // [47] return 
    rts
    // main::@17
  b17:
    // [48] (byte*~) print_line_cursor#54 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_line_cursor_54
    lda print_line_cursor+1
    sta print_line_cursor_54+1
    // [6] phi from main::@17 to main::@2 [phi:main::@17->main::@2]
  b2_from_b17:
    // [6] phi (byte*) print_char_cursor#74 = (byte*) print_line_cursor#1 [phi:main::@17->main::@2#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#37 = (byte*~) print_line_cursor#54 [phi:main::@17->main::@2#1] -- register_copy 
    // [6] phi (dword) main::dw#18 = (dword) main::dw#1 [phi:main::@17->main::@2#2] -- register_copy 
    jmp b2
}
  // print_ln
// Print a newline
print_ln: {
    // [50] phi from print_ln print_ln::@2 to print_ln::@1 [phi:print_ln/print_ln::@2->print_ln::@1]
  b1_from_print_ln:
  b1_from_b2:
    // [50] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#37 [phi:print_ln/print_ln::@2->print_ln::@1#0] -- register_copy 
    jmp b1
    // print_ln::@1
  b1:
    // [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor_9
    sta print_line_cursor
    lda #0
    adc print_line_cursor_9+1
    sta print_line_cursor+1
    // [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b2
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b2
  !:
    jmp breturn
    // print_ln::@return
  breturn:
    // [53] return 
    rts
    // print_ln::@2
  b2:
    // [54] (byte*~) print_line_cursor#53 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_line_cursor_53
    lda print_line_cursor+1
    sta print_line_cursor_53+1
    jmp b1_from_b2
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [57] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [58] call print_char 
    // [63] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#67 [phi:print_byte->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [60] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [61] call print_char 
    // [63] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [62] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [66] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage($e) w)
print_word: {
    .label w = $e
    // [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
    // [69] call print_byte 
    // [55] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#65 [phi:print_word->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
    // print_word::@1
  b1:
    // [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 -- vbuxx=_lo_vwuz1 
    lda w
    tax
    // [71] call print_byte 
    // [55] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
    // print_word::@return
  breturn:
    // [72] return 
    rts
}
  // print_dword
// Print a dword as HEX
// print_dword(dword zeropage($a) dw)
print_dword: {
    .label dw = $a
    // [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word.w
    lda dw+3
    sta print_word.w+1
    // [74] (byte*~) print_char_cursor#78 ← (byte*) print_char_cursor#74 -- pbuz1=pbuz2 
    lda print_char_cursor_74
    sta print_char_cursor
    lda print_char_cursor_74+1
    sta print_char_cursor+1
    // [75] call print_word 
    // [67] phi from print_dword to print_word [phi:print_dword->print_word]
  print_word_from_print_dword:
    // [67] phi (byte*) print_char_cursor#65 = (byte*~) print_char_cursor#78 [phi:print_dword->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    jmp b1
    // print_dword::@1
  b1:
    // [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word.w
    lda dw+1
    sta print_word.w+1
    // [77] call print_word 
    // [67] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
  print_word_from_b1:
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:print_dword::@1->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
    // print_dword::@return
  breturn:
    // [78] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [80] call memset 
    // [82] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp breturn
    // print_cls::@return
  breturn:
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [83] phi from memset to memset::@2 [phi:memset->memset::@2]
  b2_from_memset:
    // [83] phi (byte*) memset::dst#4 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@2#0] -- pbuz1=pbuc1 
    lda #<str
    sta dst
    lda #>str
    sta dst+1
    jmp b2
    // [83] phi from memset::@1 to memset::@2 [phi:memset::@1->memset::@2]
  b2_from_b1:
    // [83] phi (byte*) memset::dst#4 = (byte*) memset::dst#1 [phi:memset::@1->memset::@2#0] -- register_copy 
    jmp b2
    // memset::@2
  b2:
    // [84] *((byte*) memset::dst#4) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [85] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#4 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    jmp b1
    // memset::@1
  b1:
    // [86] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda dst+1
    cmp #>end
    bne b2_from_b1
    lda dst
    cmp #<end
    bne b2_from_b1
    jmp breturn
    // memset::@return
  breturn:
    // [87] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda _16+1
Removing instruction lda _24+1
Removing instruction lda print_line_cursor+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b2 with b1
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b3_from_b2:
Removing instruction print_char_from_b3:
Removing instruction b5_from_b4:
Removing instruction print_char_from_b5:
Removing instruction b7_from_b6:
Removing instruction print_char_from_b7:
Removing instruction b9_from_b8:
Removing instruction print_char_from_b9:
Removing instruction b11_from_b10:
Removing instruction print_char_from_b11:
Removing instruction b13_from_b12:
Removing instruction print_char_from_b13:
Removing instruction b15_from_b14:
Removing instruction print_ln_from_b15:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b2_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction print_word_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction print_word_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction print_byte_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction print_byte_from_b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction print_byte_from_b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction print_byte_from_b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b2_from_b17:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_word_from_print_dword:
Removing instruction b1:
Removing instruction print_word_from_b1:
Removing instruction breturn:
Removing instruction memset_from_print_cls:
Removing instruction breturn:
Removing instruction b2_from_memset:
Removing instruction b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(void()) main()
(word~) main::$16 $16 zp ZP_WORD:16 22.0
(word~) main::$20 $20 zp ZP_WORD:18 22.0
(word~) main::$24 $24 zp ZP_WORD:20 22.0
(word~) main::$28 $28 zp ZP_WORD:22 22.0
(word~) main::$3 $3 zp ZP_WORD:8 22.0
(word~) main::$32 $32 zp ZP_WORD:8 22.0
(word~) main::$33 $33 zp ZP_WORD:14 22.0
(word~) main::$6 $6 zp ZP_WORD:14 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(dword) main::dw
(dword) main::dw#1 dw zp ZP_DWORD:2 11.0
(dword) main::dw#18 dw zp ZP_DWORD:2 1.4102564102564101
(dword) main::dw2
(dword) main::dw2#1 dw2 zp ZP_DWORD:10 7.333333333333333
(dword) main::dw2#10 dw2 zp ZP_DWORD:10 3.142857142857143
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:16 16.5
(byte*) memset::dst#4 dst zp ZP_WORD:16 16.5
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte x 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 22.0
(byte) print_byte::b#3 reg byte x 22.0
(byte) print_byte::b#4 reg byte x 22.0
(byte) print_byte::b#5 reg byte x 22.0
(byte) print_byte::b#6 reg byte x 13.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#8 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp ZP_WORD:8 4.820000000000001
(byte*) print_char_cursor#44 print_char_cursor zp ZP_WORD:8 37.0
(byte*) print_char_cursor#65 print_char_cursor zp ZP_WORD:8 14.0
(byte*) print_char_cursor#67 print_char_cursor zp ZP_WORD:8 16.666666666666664
(byte*) print_char_cursor#74 print_char_cursor#74 zp ZP_WORD:16 1.4444444444444446
(byte*~) print_char_cursor#78 print_char_cursor zp ZP_WORD:8 4.0
(void()) print_cls()
(label) print_cls::@return
(void()) print_dword((dword) print_dword::dw)
(label) print_dword::@1
(label) print_dword::@return
(dword) print_dword::dw
(dword) print_dword::dw#0 dw zp ZP_DWORD:10 3.75
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:16 46.42857142857143
(byte*) print_line_cursor#37 print_line_cursor#37 zp ZP_WORD:6 0.3333333333333333
(byte*~) print_line_cursor#53 print_line_cursor#53 zp ZP_WORD:6 202.0
(byte*~) print_line_cursor#54 print_line_cursor#54 zp ZP_WORD:6 22.0
(byte*) print_line_cursor#9 print_line_cursor#9 zp ZP_WORD:6 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:14 2.0
(word) print_word::w#1 w zp ZP_WORD:14 4.0
(word) print_word::w#2 w zp ZP_WORD:14 22.0
(word) print_word::w#3 w zp ZP_WORD:14 22.0
(word) print_word::w#4 w zp ZP_WORD:14 9.999999999999998

zp ZP_DWORD:2 [ main::dw#18 main::dw#1 ]
zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#37 print_line_cursor#54 print_line_cursor#53 ]
reg byte x [ print_byte::b#6 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#8 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:8 [ main::$3 main::$32 print_char_cursor#44 print_char_cursor#67 print_char_cursor#12 print_char_cursor#65 print_char_cursor#78 ]
zp ZP_DWORD:10 [ main::dw2#1 main::dw2#10 print_dword::dw#0 ]
zp ZP_WORD:14 [ main::$6 main::$33 print_word::w#4 print_word::w#3 print_word::w#2 print_word::w#0 print_word::w#1 ]
zp ZP_WORD:16 [ main::$16 memset::dst#4 memset::dst#1 print_char_cursor#74 print_line_cursor#1 ]
zp ZP_WORD:18 [ main::$20 ]
zp ZP_WORD:20 [ main::$24 ]
zp ZP_WORD:22 [ main::$28 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 8706

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = $10
  .label print_char_cursor = 8
  .label print_line_cursor_9 = 6
  .label print_line_cursor_37 = 6
  .label print_char_cursor_74 = $10
  .label print_line_cursor_53 = 6
  .label print_line_cursor_54 = 6
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label _3 = 8
    .label _6 = $e
    .label _16 = $10
    .label _20 = $12
    .label _24 = $14
    .label _28 = $16
    .label _32 = 8
    .label _33 = $e
    .label dw2 = $a
    .label dw = 2
    // print_cls()
    // [5] call print_cls 
    // [79] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@2 [phi:main->main::@2]
    // [6] phi (byte*) print_char_cursor#74 = (byte*) 1024 [phi:main->main::@2#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor_74
    lda #>$400
    sta print_char_cursor_74+1
    // [6] phi (byte*) print_line_cursor#37 = (byte*) 1024 [phi:main->main::@2#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor_37
    lda #>$400
    sta print_line_cursor_37+1
    // [6] phi (dword) main::dw#18 = (dword) $12345678 [phi:main->main::@2#2] -- vduz1=vduc1 
    lda #<$12345678
    sta dw
    lda #>$12345678
    sta dw+1
    lda #<$12345678>>$10
    sta dw+2
    lda #>$12345678>>$10
    sta dw+3
    // main::@2
  b2:
    // >dw
    // [7] (word~) main::$3 ← > (dword) main::dw#18 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta _3
    lda dw+3
    sta _3+1
    // >dw2 = (>dw) + $1111
    // [8] (word~) main::$32 ← (word~) main::$3 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda _32
    adc #<$1111
    sta _32
    lda _32+1
    adc #>$1111
    sta _32+1
    // [9] (dword) main::dw2#1 ← (dword) main::dw#18 hi= (word~) main::$32 -- vduz1=vduz2_sethi_vwuz3 
    lda dw
    sta dw2
    lda dw+1
    sta dw2+1
    lda _32
    sta dw2+2
    lda _32+1
    sta dw2+3
    // <dw
    // [10] (word~) main::$6 ← < (dword) main::dw#18 -- vwuz1=_lo_vduz2 
    lda dw
    sta _6
    lda dw+1
    sta _6+1
    // <dw2 = (<dw) + $1111
    // [11] (word~) main::$33 ← (word~) main::$6 + (word) $1111 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda _33
    adc #<$1111
    sta _33
    lda _33+1
    adc #>$1111
    sta _33+1
    // [12] (dword) main::dw2#10 ← (dword) main::dw2#1 lo= (word~) main::$33 -- vduz1=vduz1_setlo_vwuz2 
    lda _33
    sta dw2
    lda _33+1
    sta dw2+1
    // print_dword(dw2)
    // [13] (dword) print_dword::dw#0 ← (dword) main::dw2#10
    // [14] call print_dword 
    jsr print_dword
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // print_char(' ')
    // [16] call print_char 
    // [63] phi from main::@3 to print_char [phi:main::@3->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@3->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@4
    // print_word(>dw2)
    // [17] (word) print_word::w#2 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2+2
    sta print_word.w
    lda dw2+3
    sta print_word.w+1
    // [18] call print_word 
    // [67] phi from main::@4 to print_word [phi:main::@4->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@4->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#2 [phi:main::@4->print_word#1] -- register_copy 
    jsr print_word
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // print_char(' ')
    // [20] call print_char 
    // [63] phi from main::@5 to print_char [phi:main::@5->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@5->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@5->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@6
    // print_word(<dw2)
    // [21] (word) print_word::w#3 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2
    sta print_word.w
    lda dw2+1
    sta print_word.w+1
    // [22] call print_word 
    // [67] phi from main::@6 to print_word [phi:main::@6->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:main::@6->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#3 [phi:main::@6->print_word#1] -- register_copy 
    jsr print_word
    // [23] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // print_char(' ')
    // [24] call print_char 
    // [63] phi from main::@7 to print_char [phi:main::@7->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@7->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@7->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@8
    // >dw2
    // [25] (word~) main::$16 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2+2
    sta _16
    lda dw2+3
    sta _16+1
    // print_byte(> >dw2)
    // [26] (byte) print_byte::b#2 ← > (word~) main::$16 -- vbuxx=_hi_vwuz1 
    tax
    // [27] call print_byte 
    // [55] phi from main::@8 to print_byte [phi:main::@8->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@8->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
    // [28] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // print_char(' ')
    // [29] call print_char 
    // [63] phi from main::@9 to print_char [phi:main::@9->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@9->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@9->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@10
    // >dw2
    // [30] (word~) main::$20 ← > (dword) main::dw2#10 -- vwuz1=_hi_vduz2 
    lda dw2+2
    sta _20
    lda dw2+3
    sta _20+1
    // print_byte(< >dw2)
    // [31] (byte) print_byte::b#3 ← < (word~) main::$20 -- vbuxx=_lo_vwuz1 
    lda _20
    tax
    // [32] call print_byte 
    // [55] phi from main::@10 to print_byte [phi:main::@10->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@10->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
    // [33] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // print_char(' ')
    // [34] call print_char 
    // [63] phi from main::@11 to print_char [phi:main::@11->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@11->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@11->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@12
    // <dw2
    // [35] (word~) main::$24 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2
    sta _24
    lda dw2+1
    sta _24+1
    // print_byte(> <dw2)
    // [36] (byte) print_byte::b#4 ← > (word~) main::$24 -- vbuxx=_hi_vwuz1 
    tax
    // [37] call print_byte 
    // [55] phi from main::@12 to print_byte [phi:main::@12->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@12->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#4 [phi:main::@12->print_byte#1] -- register_copy 
    jsr print_byte
    // [38] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // print_char(' ')
    // [39] call print_char 
    // [63] phi from main::@13 to print_char [phi:main::@13->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:main::@13->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) ' ' [phi:main::@13->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@14
    // <dw2
    // [40] (word~) main::$28 ← < (dword) main::dw2#10 -- vwuz1=_lo_vduz2 
    lda dw2
    sta _28
    lda dw2+1
    sta _28+1
    // print_byte(< <dw2)
    // [41] (byte) print_byte::b#5 ← < (word~) main::$28 -- vbuxx=_lo_vwuz1 
    lda _28
    tax
    // [42] call print_byte 
    // [55] phi from main::@14 to print_byte [phi:main::@14->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:main::@14->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#5 [phi:main::@14->print_byte#1] -- register_copy 
    jsr print_byte
    // [43] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
    // main::@15
    // print_ln()
    // [44] call print_ln 
    // [49] phi from main::@15 to print_ln [phi:main::@15->print_ln]
    jsr print_ln
    // main::@16
    // for( dword dw = $12345678; dw != $12345690; dw++ )
    // [45] (dword) main::dw#1 ← ++ (dword) main::dw#18 -- vduz1=_inc_vduz1 
    inc dw
    bne !+
    inc dw+1
    bne !+
    inc dw+2
    bne !+
    inc dw+3
  !:
    // main::@1
    // [46] if((dword) main::dw#1!=(dword) $12345690) goto main::@17 -- vduz1_neq_vduc1_then_la1 
    lda dw+3
    cmp #>$12345690>>$10
    bne b17
    lda dw+2
    cmp #<$12345690>>$10
    bne b17
    lda dw+1
    cmp #>$12345690
    bne b17
    lda dw
    cmp #<$12345690
    bne b17
    // main::@return
    // }
    // [47] return 
    rts
    // main::@17
  b17:
    // [48] (byte*~) print_line_cursor#54 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_line_cursor_54
    lda print_line_cursor+1
    sta print_line_cursor_54+1
    // [6] phi from main::@17 to main::@2 [phi:main::@17->main::@2]
    // [6] phi (byte*) print_char_cursor#74 = (byte*) print_line_cursor#1 [phi:main::@17->main::@2#0] -- register_copy 
    // [6] phi (byte*) print_line_cursor#37 = (byte*~) print_line_cursor#54 [phi:main::@17->main::@2#1] -- register_copy 
    // [6] phi (dword) main::dw#18 = (dword) main::dw#1 [phi:main::@17->main::@2#2] -- register_copy 
    jmp b2
}
  // print_ln
// Print a newline
print_ln: {
    // [50] phi from print_ln print_ln::@2 to print_ln::@1 [phi:print_ln/print_ln::@2->print_ln::@1]
    // [50] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#37 [phi:print_ln/print_ln::@2->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  b1:
    // print_line_cursor + $28
    // [51] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor_9
    sta print_line_cursor
    lda #0
    adc print_line_cursor_9+1
    sta print_line_cursor+1
    // while (print_line_cursor<print_char_cursor)
    // [52] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@2 -- pbuz1_lt_pbuz2_then_la1 
    cmp print_char_cursor+1
    bcc b2
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b2
  !:
    // print_ln::@return
    // }
    // [53] return 
    rts
    // print_ln::@2
  b2:
    // [54] (byte*~) print_line_cursor#53 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_line_cursor_53
    lda print_line_cursor+1
    sta print_line_cursor_53+1
    jmp b1
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // b>>4
    // [56] (byte~) print_byte::$0 ← (byte) print_byte::b#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [57] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [58] call print_char 
    // [63] phi from print_byte to print_char [phi:print_byte->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#67 [phi:print_byte->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [59] (byte~) print_byte::$2 ← (byte) print_byte::b#6 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [60] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [61] call print_char 
    // [63] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [63] phi (byte*) print_char_cursor#44 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [63] phi (byte) print_char::ch#8 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [62] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [64] *((byte*) print_char_cursor#44) ← (byte) print_char::ch#8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [65] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#44 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [66] return 
    rts
}
  // print_word
// Print a word as HEX
// print_word(word zeropage($e) w)
print_word: {
    .label w = $e
    // print_byte(>w)
    // [68] (byte) print_byte::b#0 ← > (word) print_word::w#4 -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
    // [69] call print_byte 
    // [55] phi from print_word to print_byte [phi:print_word->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#65 [phi:print_word->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@1
    // print_byte(<w)
    // [70] (byte) print_byte::b#1 ← < (word) print_word::w#4 -- vbuxx=_lo_vwuz1 
    lda w
    tax
    // [71] call print_byte 
    // [55] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
    // [55] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
    // [55] phi (byte) print_byte::b#6 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    // print_word::@return
    // }
    // [72] return 
    rts
}
  // print_dword
// Print a dword as HEX
// print_dword(dword zeropage($a) dw)
print_dword: {
    .label dw = $a
    // print_word(>dw)
    // [73] (word) print_word::w#0 ← > (dword) print_dword::dw#0 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word.w
    lda dw+3
    sta print_word.w+1
    // [74] (byte*~) print_char_cursor#78 ← (byte*) print_char_cursor#74 -- pbuz1=pbuz2 
    lda print_char_cursor_74
    sta print_char_cursor
    lda print_char_cursor_74+1
    sta print_char_cursor+1
    // print_word(>dw)
    // [75] call print_word 
    // [67] phi from print_dword to print_word [phi:print_dword->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*~) print_char_cursor#78 [phi:print_dword->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#0 [phi:print_dword->print_word#1] -- register_copy 
    jsr print_word
    // print_dword::@1
    // print_word(<dw)
    // [76] (word) print_word::w#1 ← < (dword) print_dword::dw#0 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word.w
    lda dw+1
    sta print_word.w+1
    // [77] call print_word 
    // [67] phi from print_dword::@1 to print_word [phi:print_dword::@1->print_word]
    // [67] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#12 [phi:print_dword::@1->print_word#0] -- register_copy 
    // [67] phi (word) print_word::w#4 = (word) print_word::w#1 [phi:print_dword::@1->print_word#1] -- register_copy 
    jsr print_word
    // print_dword::@return
    // }
    // [78] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [80] call memset 
    // [82] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [81] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $10
    // [83] phi from memset to memset::@2 [phi:memset->memset::@2]
    // [83] phi (byte*) memset::dst#4 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@2#0] -- pbuz1=pbuc1 
    lda #<str
    sta dst
    lda #>str
    sta dst+1
    // [83] phi from memset::@1 to memset::@2 [phi:memset::@1->memset::@2]
    // [83] phi (byte*) memset::dst#4 = (byte*) memset::dst#1 [phi:memset::@1->memset::@2#0] -- register_copy 
    // memset::@2
  b2:
    // *dst = c
    // [84] *((byte*) memset::dst#4) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [85] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#4 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // memset::@1
    // [86] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda dst+1
    cmp #>end
    bne b2
    lda dst
    cmp #<end
    bne b2
    // memset::@return
    // }
    // [87] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"

