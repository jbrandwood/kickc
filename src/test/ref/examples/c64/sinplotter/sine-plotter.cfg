
void main()
main: scope:[main]  from
  asm { sei  }
  [1] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [2] *PROCPORT = PROCPORT_RAM_IO
  [3] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [4] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [5] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [6] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0
  to:main::@2
main::@2: scope:[main]  from main::vicSelectGfxBank1_@1
  [7] *D016 = VICII_CSEL
  to:main::toD0181
main::toD0181: scope:[main]  from main::@2
  [8] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [9] *D018 = main::toD0181_return#0
  [10] call bitmap_init 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] phi()
  [12] call bitmap_clear 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] phi()
  [14] call sin16s_gen2 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [15] phi()
  [16] call render_sine 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@6
  [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR)
  to:main::@1

void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@3
  [18] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [19] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [19] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [20] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [21] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [22] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [23] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [24] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [25] bitmap_init::x#1 = ++ bitmap_init::x#2
  [26] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [27] bitmap_init::yoffs#2 = phi( bitmap_init::@2/BITMAP, bitmap_init::@4/bitmap_init::yoffs#4 )
  [27] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [28] bitmap_init::$7 = bitmap_init::y#2 & 7
  [29] bitmap_init::$4 = byte0  bitmap_init::yoffs#2
  [30] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4
  [31] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  [32] bitmap_init::$6 = byte1  bitmap_init::yoffs#2
  [33] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  [34] if(bitmap_init::$7!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [35] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [36] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [37] bitmap_init::y#1 = ++ bitmap_init::y#2
  [38] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [39] return 
  to:@return

void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@4
  [40] phi()
  [41] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [42] phi()
  [43] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [44] return 
  to:@return

void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
sin16s_gen2: scope:[sin16s_gen2]  from main::@5
  [45] phi()
  [46] call div32u16u 
  [47] div32u16u::return#0 = div32u16u::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [48] sin16s_gen2::step#0 = div32u16u::return#0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [49] sin16s_gen2::sintab#2 = phi( sin16s_gen2::@3/sin, sin16s_gen2::@5/sin16s_gen2::sintab#0 )
  [49] sin16s_gen2::x#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::x#1 )
  [49] sin16s_gen2::i#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::i#1 )
  [50] if(sin16s_gen2::i#2<SIN_SIZE) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [51] return 
  to:@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [52] sin16s::x#0 = sin16s_gen2::x#2
  [53] call sin16s 
  [54] sin16s::return#0 = sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  [55] mul16s::a#0 = sin16s::return#0
  [56] call mul16s 
  [57] mul16s::return#0 = mul16s::return#1
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [58] sin16s_gen2::$6 = mul16s::return#0
  [59] sin16s_gen2::$8 = word1  sin16s_gen2::$6
  [60] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8
  [61] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD
  [62] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0
  [63] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2
  to:sin16s_gen2::@1

void render_sine()
render_sine: scope:[render_sine]  from main::@6
  [64] phi()
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@3
  [65] render_sine::xpos#3 = phi( render_sine/0, render_sine::@3/render_sine::xpos#9 )
  [65] render_sine::sin_idx#2 = phi( render_sine/0, render_sine::@3/render_sine::sin_idx#1 )
  [66] if(render_sine::sin_idx#2<SIN_SIZE) goto render_sine::@2
  to:render_sine::@return
render_sine::@return: scope:[render_sine]  from render_sine::@1
  [67] return 
  to:@return
render_sine::@2: scope:[render_sine]  from render_sine::@1
  [68] render_sine::$11 = render_sine::sin_idx#2 << 1
  [69] render_sine::$1 = sin + render_sine::$11
  [70] render_sine::sin_val#0 = *render_sine::$1
  [71] wrap_y::y#0 = render_sine::sin_val#0
  [72] call wrap_y 
  [73] wrap_y::return#0 = wrap_y::return#2
  to:render_sine::@4
render_sine::@4: scope:[render_sine]  from render_sine::@2
  [74] render_sine::ypos#0 = wrap_y::return#0
  [75] bitmap_plot::x#0 = render_sine::xpos#3
  [76] bitmap_plot::y#0 = render_sine::ypos#0
  [77] call bitmap_plot 
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@4
  [78] render_sine::$4 = sin2 + render_sine::$11
  [79] render_sine::sin2_val#0 = *render_sine::$4
  [80] wrap_y::y#1 = render_sine::sin2_val#0 + $a
  [81] call wrap_y 
  [82] wrap_y::return#1 = wrap_y::return#2
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  [83] render_sine::ypos2#0 = wrap_y::return#1
  [84] bitmap_plot::x#1 = render_sine::xpos#3
  [85] bitmap_plot::y#1 = render_sine::ypos2#0
  [86] call bitmap_plot 
  to:render_sine::@7
render_sine::@7: scope:[render_sine]  from render_sine::@6
  [87] render_sine::xpos#1 = ++ render_sine::xpos#3
  [88] if(render_sine::xpos#1!=$140) goto render_sine::@8
  to:render_sine::@3
render_sine::@8: scope:[render_sine]  from render_sine::@7
  [89] phi()
  to:render_sine::@3
render_sine::@3: scope:[render_sine]  from render_sine::@7 render_sine::@8
  [90] render_sine::xpos#9 = phi( render_sine::@7/0, render_sine::@8/render_sine::xpos#1 )
  [91] render_sine::sin_idx#1 = ++ render_sine::sin_idx#2
  to:render_sine::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [92] memset::c#4 = phi( bitmap_clear/bitmap_clear::col#0, bitmap_clear::@1/0 )
  [92] memset::str#3 = phi( bitmap_clear/(void*)SCREEN, bitmap_clear::@1/(void*)BITMAP )
  [92] memset::num#2 = phi( bitmap_clear/$3e8, bitmap_clear::@1/$1f40 )
  [93] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [94] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [95] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [96] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [97] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [98] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [99] *memset::dst#2 = memset::c#4
  [100] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [101] phi()
  [102] call divr16u 
  [103] divr16u::return#2 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [104] div32u16u::quotient_hi#0 = divr16u::return#2
  [105] divr16u::rem#4 = rem16u#14
  [106] call divr16u 
  [107] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [108] div32u16u::quotient_lo#0 = divr16u::return#3
  [109] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [110] return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  [111] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [112] sin16s::x#1 = sin16s::x#0 - PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [113] sin16s::isUpper#2 = phi( sin16s/0, sin16s::@4/1 )
  [113] sin16s::x#4 = phi( sin16s/sin16s::x#0, sin16s::@4/sin16s::x#1 )
  [114] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [115] sin16s::x#2 = PI_u4f28 - sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [116] sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  [117] sin16s::$4 = sin16s::x#6 << 3
  [118] sin16s::x1#0 = word1  sin16s::$4
  [119] mulu16_sel::v1#0 = sin16s::x1#0
  [120] mulu16_sel::v2#0 = sin16s::x1#0
  [121] call mulu16_sel 
  [122] mulu16_sel::return#0 = mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [123] sin16s::x2#0 = mulu16_sel::return#0
  [124] mulu16_sel::v1#1 = sin16s::x2#0
  [125] mulu16_sel::v2#1 = sin16s::x1#0
  [126] call mulu16_sel 
  [127] mulu16_sel::return#1 = mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [128] sin16s::x3#0 = mulu16_sel::return#1
  [129] mulu16_sel::v1#2 = sin16s::x3#0
  [130] call mulu16_sel 
  [131] mulu16_sel::return#2 = mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [132] sin16s::x3_6#0 = mulu16_sel::return#2
  [133] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0
  [134] mulu16_sel::v1#3 = sin16s::x3#0
  [135] mulu16_sel::v2#3 = sin16s::x1#0
  [136] call mulu16_sel 
  [137] mulu16_sel::return#10 = mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [138] sin16s::x4#0 = mulu16_sel::return#10
  [139] mulu16_sel::v1#4 = sin16s::x4#0
  [140] mulu16_sel::v2#4 = sin16s::x1#0
  [141] call mulu16_sel 
  [142] mulu16_sel::return#11 = mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [143] sin16s::x5#0 = mulu16_sel::return#11
  [144] sin16s::x5_128#0 = sin16s::x5#0 >> 4
  [145] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0
  [146] if(sin16s::isUpper#2==0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [147] sin16s::sinx#1 = - (signed word)sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [148] sin16s::return#1 = phi( sin16s::@12/sin16s::return#5, sin16s::@6/sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [149] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [150] sin16s::return#5 = (signed word)sin16s::usinx#1
  to:sin16s::@3

signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  [151] mul16u::a#2 = (word)mul16s::a#0
  [152] call mul16u 
  [153] mul16u::return#3 = mul16u::res#2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s
  [154] mul16s::m#0 = mul16u::return#3
  [155] if(mul16s::a#0>=0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@4
  [156] mul16s::$6 = word1  mul16s::m#0
  [157] mul16s::$11 = mul16s::$6 - (word)sin16s_gen2::ampl#0
  [158] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@4
  [159] mul16s::m#4 = phi( mul16s::@3/mul16s::m#1, mul16s::@4/mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [160] mul16s::return#1 = (signed dword)mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [161] return 
  to:@return

byte wrap_y(signed word wrap_y::y)
wrap_y: scope:[wrap_y]  from render_sine::@2 render_sine::@5
  [162] wrap_y::y#9 = phi( render_sine::@2/wrap_y::y#0, render_sine::@5/wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  [163] wrap_y::y#4 = phi( wrap_y/wrap_y::y#9, wrap_y::@2/wrap_y::y#2 )
  [164] if(wrap_y::y#4>=$c8) goto wrap_y::@2
  to:wrap_y::@3
wrap_y::@3: scope:[wrap_y]  from wrap_y::@1 wrap_y::@4
  [165] wrap_y::y#6 = phi( wrap_y::@1/wrap_y::y#4, wrap_y::@4/wrap_y::y#3 )
  [166] if(wrap_y::y#6<0) goto wrap_y::@4
  to:wrap_y::@5
wrap_y::@5: scope:[wrap_y]  from wrap_y::@3
  [167] wrap_y::return#2 = (byte)wrap_y::y#6
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@5
  [168] return 
  to:@return
wrap_y::@4: scope:[wrap_y]  from wrap_y::@3
  [169] wrap_y::y#3 = wrap_y::y#6 + $c8
  to:wrap_y::@3
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  [170] wrap_y::y#2 = wrap_y::y#4 - $c8
  to:wrap_y::@1

void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from render_sine::@4 render_sine::@6
  [171] bitmap_plot::x#2 = phi( render_sine::@4/bitmap_plot::x#0, render_sine::@6/bitmap_plot::x#1 )
  [171] bitmap_plot::y#2 = phi( render_sine::@4/bitmap_plot::y#0, render_sine::@6/bitmap_plot::y#1 )
  [172] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#2] w= bitmap_plot_ylo[bitmap_plot::y#2]
  [173] bitmap_plot::$1 = bitmap_plot::x#2 & $fff8
  [174] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$1
  [175] bitmap_plot::$2 = byte0  bitmap_plot::x#2
  [176] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [177] return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [178] divr16u::dividend#5 = phi( div32u16u/word1 PI2_u4f28, div32u16u::@1/word0 PI2_u4f28 )
  [178] divr16u::rem#10 = phi( div32u16u/0, div32u16u::@1/divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [179] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [179] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [179] divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#0 )
  [179] divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  [180] divr16u::rem#0 = divr16u::rem#5 << 1
  [181] divr16u::$1 = byte1  divr16u::dividend#3
  [182] divr16u::$2 = divr16u::$1 & $80
  [183] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [184] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [185] divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [186] divr16u::dividend#0 = divr16u::dividend#3 << 1
  [187] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [188] if(divr16u::rem#6<SIN_SIZE) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [189] divr16u::quotient#2 = ++ divr16u::quotient#1
  [190] divr16u::rem#2 = divr16u::rem#6 - SIN_SIZE
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [191] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [191] divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  [192] divr16u::i#1 = ++ divr16u::i#2
  [193] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [194] rem16u#14 = divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [195] return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [196] mulu16_sel::select#5 = phi( sin16s::@10/0, sin16s::@2/0, sin16s::@7/1, sin16s::@8/1, sin16s::@9/0 )
  [196] mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/(word)$10000/6, sin16s::@9/mulu16_sel::v2#3 )
  [196] mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  [197] mul16u::a#0 = mulu16_sel::v1#5
  [198] mul16u::b#0 = mulu16_sel::v2#5
  [199] call mul16u 
  [200] mul16u::return#0 = mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [201] mulu16_sel::$0 = mul16u::return#0
  [202] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  [203] mulu16_sel::return#12 = word1  mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [204] return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [205] mul16u::a#6 = phi( mul16s/mul16u::a#2, mulu16_sel/mul16u::a#0 )
  [205] mul16u::b#2 = phi( mul16s/(word)sin16s_gen2::ampl#0, mulu16_sel/mul16u::b#0 )
  [206] mul16u::mb#0 = (dword)mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [207] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [207] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [207] mul16u::a#3 = phi( mul16u/mul16u::a#6, mul16u::@3/mul16u::a#1 )
  [208] if(mul16u::a#3!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [209] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [210] mul16u::$1 = mul16u::a#3 & 1
  [211] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [212] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [213] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [214] mul16u::a#1 = mul16u::a#3 >> 1
  [215] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1
