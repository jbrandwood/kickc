void draw_window(char x1 , char y1 , char x2 , char y2)
unsigned int draw_window::$14 // zp[2]:8 200002.0
unsigned int draw_window::$15 // zp[2]:10 200002.0
unsigned int draw_window::$19 // zp[2]:6 200002.0
unsigned int draw_window::$2 // zp[2]:29 2002.0
unsigned int draw_window::$20 // zp[2]:4 200002.0
unsigned int draw_window::$26 // zp[2]:2 2000002.0
char *draw_window::$27 // zp[2]:8 200002.0
char *draw_window::$28 // zp[2]:10 200002.0
char *draw_window::$29 // zp[2]:29 2002.0
unsigned int draw_window::$3 // zp[2]:22 2002.0
char *draw_window::$30 // zp[2]:22 2002.0
char *draw_window::$31 // zp[2]:6 200002.0
char *draw_window::$32 // zp[2]:4 200002.0
char *draw_window::$33 // zp[2]:31 2002.0
char *draw_window::$34 // zp[2]:24 2002.0
char *draw_window::$35 // zp[2]:2 2000002.0
char draw_window::$36 // reg byte a 2002.0
char draw_window::$37 // reg byte a 2002.0
char draw_window::$39 // reg byte a 2002.0
unsigned int draw_window::$4 // zp[2]:31 2002.0
char draw_window::$40 // reg byte a 2002.0
char draw_window::$42 // reg byte a 200002.0
char draw_window::$43 // reg byte a 200002.0
char draw_window::$45 // reg byte a 200002.0
char draw_window::$46 // reg byte a 200002.0
unsigned int draw_window::$5 // zp[2]:24 2002.0
char draw_window::$6 // reg byte x 1001.0
char draw_window::$8 // reg byte a 1001.0
unsigned int draw_window::q
unsigned int draw_window::q#0 // q zp[2]:24 3121.3333333333335
char draw_window::x
char draw_window::x#0 // reg byte x 2002.0
char draw_window::x#1 // reg byte x 200002.0
char draw_window::x#2 // reg byte x 62625.75
char draw_window::x1
char draw_window::x1#0 // x1 zp[1]:33 3239.7936507936506
char draw_window::x2
char draw_window::x2#0 // x2 zp[1]:21 19723.06557377049
char draw_window::x3
char draw_window::x3#0 // reg byte x 200002.0
char draw_window::x3#1 // reg byte x 2000002.0
char draw_window::x3#2 // reg byte x 820001.0
char draw_window::y
char draw_window::y#0 // reg byte x 2002.0
char draw_window::y#1 // reg byte x 200002.0
char draw_window::y#2 // reg byte x 45546.0
char draw_window::y1
char draw_window::y1#0 // y1 zp[1]:18 106.37500000000001
char draw_window::y2
char draw_window::y2#0 // y2 zp[1]:34 3385.1000000000004
char draw_window::y3
char draw_window::y3#0 // y3 zp[1]:12 2002.0
char draw_window::y3#1 // y3 zp[1]:12 200002.0
char draw_window::y3#2 // y3 zp[1]:12 41750.49999999999
unsigned int draw_window::z
unsigned int draw_window::z#0 // z zp[2]:22 6059.058823529412
unsigned int draw_window::z#1 // z_1 zp[2]:4 75000.75
unsigned int draw_window::z#2 // z_2 zp[2]:13 137500.25
void main()
char main::$4 // reg byte a 22.0
unsigned int main::wait
unsigned int main::wait#1 // wait zp[2]:35 202.0
unsigned int main::wait#2 // wait zp[2]:35 151.5
char main::x
char main::x#1 // x zp[1]:33 22.0
char main::x#2 // x zp[1]:33 8.0
__constant char * const screen = (char *) 1024
__constant const char text[] = "this is a small test with word wrap, if a word is too long it moves it to the next line. isn't that supercalifragilisticexpialidocious? i think it's cool!"
__constant const char text2[] = "textbox by scan of desire"
void textbox(char x1 , char y1 , char x2 , char y2 , char *text)
char textbox::$15 // reg byte y 10001.0
char textbox::$17 // zp[1]:12 10001.0
unsigned int textbox::$31 // zp[2]:16 151.5
char *textbox::$32 // zp[2]:19 20002.0
unsigned int textbox::$33 // zp[2]:37 202.0
unsigned int textbox::$34 // zp[2]:16 202.0
char textbox::$36 // reg byte a 20002.0
char textbox::$37 // reg byte a 20002.0
char textbox::$39 // reg byte a 20002.0
char textbox::$40 // reg byte a 20002.0
unsigned int textbox::$8 // zp[2]:19 20002.0
char textbox::c
char textbox::c#1 // reg byte x 200002.0
char textbox::c#2 // reg byte x 31429.142857142855
char textbox::i
char textbox::i#1 // i zp[1]:26 2727.5454545454545
char textbox::i#2 // i zp[1]:26 2272.9545454545455
char textbox::ls
char textbox::ls#0 // reg byte y 20002.0
char textbox::ls#1 // reg byte y 100001.0
char textbox::ls#2 // reg byte y 136668.3333333333
char *textbox::text
char *textbox::text#12 // text zp[2]:27 4893.723404255319
char textbox::x
char textbox::x#0 // x zp[1]:15 43.285714285714285
char textbox::x#1 // x zp[1]:15 15001.5
char textbox::x#10 // x zp[1]:15 3579.000000000001
char textbox::x#12 // x zp[1]:15 3333.6666666666665
char textbox::x#17 // x zp[1]:15 20002.0
char textbox::x#5 // x zp[1]:15 20002.0
char textbox::x#7 // x zp[1]:15 15001.5
char textbox::x1
char textbox::x1#0 // x1 zp[1]:33 11.0
char textbox::x1#4 // x1 zp[1]:33 642.8936170212767
char textbox::x2
char textbox::x2#0 // x2 zp[1]:21 5.5
char textbox::x2#4 // x2 zp[1]:21 642.8936170212767
char textbox::y
char textbox::y#0 // y zp[1]:18 37.875
char textbox::y#1 // y zp[1]:18 8334.166666666666
char textbox::y#11 // y zp[1]:18 15001.5
char textbox::y#12 // y zp[1]:18 2673.666666666667
char textbox::y#2 // y zp[1]:18 10001.0
char textbox::y#5 // y zp[1]:18 10001.0
char textbox::y1
char textbox::y1#0 // y1 zp[1]:18 22.0
char textbox::y1#4 // y1 zp[1]:18 35.5
char textbox::y2
char textbox::y2#0 // y2 zp[1]:34 7.333333333333333
char textbox::y2#4 // y2 zp[1]:34 430.10638297872345
unsigned int textbox::z
unsigned int textbox::z#0 // z zp[2]:16 67.33333333333333
unsigned int textbox::z#1 // z zp[2]:16 10001.0
unsigned int textbox::z#2 // z zp[2]:16 20002.0
unsigned int textbox::z#3 // z zp[2]:16 2864.642857142858
unsigned int textbox::z#4 // z zp[2]:16 15001.5
unsigned int textbox::z#5 // z zp[2]:16 10001.0

zp[1]:33 [ main::x#2 main::x#1 textbox::x1#4 textbox::x1#0 draw_window::x1#0 ]
zp[2]:35 [ main::wait#2 main::wait#1 ]
zp[1]:18 [ textbox::y1#4 textbox::y1#0 textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 draw_window::y1#0 ]
zp[1]:21 [ textbox::x2#4 textbox::x2#0 draw_window::x2#0 ]
zp[1]:34 [ textbox::y2#4 textbox::y2#0 draw_window::y2#0 ]
zp[2]:27 [ textbox::text#12 ]
zp[1]:26 [ textbox::i#2 textbox::i#1 ]
reg byte y [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ]
reg byte x [ textbox::c#2 textbox::c#1 ]
zp[1]:15 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 textbox::$34 textbox::$31 ]
reg byte x [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
reg byte x [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
reg byte x [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
reg byte a [ main::$4 ]
zp[2]:37 [ textbox::$33 ]
zp[2]:19 [ textbox::$8 textbox::$32 ]
reg byte y [ textbox::$15 ]
zp[1]:12 [ textbox::$17 draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
reg byte a [ textbox::$39 ]
reg byte a [ textbox::$40 ]
reg byte a [ textbox::$36 ]
reg byte a [ textbox::$37 ]
reg byte a [ draw_window::$36 ]
reg byte a [ draw_window::$37 ]
zp[2]:22 [ draw_window::z#0 draw_window::$3 draw_window::$30 ]
reg byte a [ draw_window::$39 ]
reg byte a [ draw_window::$40 ]
zp[2]:24 [ draw_window::q#0 draw_window::$5 draw_window::$34 ]
zp[2]:29 [ draw_window::$2 draw_window::$29 ]
zp[2]:31 [ draw_window::$4 draw_window::$33 ]
reg byte x [ draw_window::$6 ]
reg byte a [ draw_window::$8 ]
reg byte a [ draw_window::$45 ]
reg byte a [ draw_window::$46 ]
zp[2]:13 [ draw_window::z#2 ]
zp[2]:2 [ draw_window::$26 draw_window::$35 ]
reg byte a [ draw_window::$42 ]
reg byte a [ draw_window::$43 ]
zp[2]:4 [ draw_window::z#1 draw_window::$20 draw_window::$32 ]
zp[2]:6 [ draw_window::$19 draw_window::$31 ]
zp[2]:8 [ draw_window::$14 draw_window::$27 ]
zp[2]:10 [ draw_window::$15 draw_window::$28 ]
