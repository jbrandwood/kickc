
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte) y_sin_idx ← (byte) 0
  [2] (volatile byte) x_sin_idx ← (byte) $49
  [3] (volatile byte) x_sin_idx_2 ← (byte) $52
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [4] phi()
  [5] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [6] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [7] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [9] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0
  [10] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [11] *((const nomodify byte*) FR_COUNTER) ← (byte) $40
  [12] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [14] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [15] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [16] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [17] (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_waitForVBlank1_@1/(byte) 0 )
  [18] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0
  [19] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0
  [20] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0
  [21] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0
  [22] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0
  [23] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0
  [24] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0
  [25] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0
  [26] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  [27] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [28] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [29] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [30] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@4
main::@4: scope:[main]  from main::initNES1_@7
  [32] phi()
  [33] call ppuDataTransfer 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [34] phi()
  [35] call ppuDataFill 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [36] phi()
  [37] call ppuDataFill 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@6
  [38] (byte) main::s#2 ← phi( main::@2/(byte) main::s#1 main::@6/(byte) 0 )
  [39] if((byte) main::s#2<(byte) $40) goto main::@2
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@1
  [40] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80
  [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e
  to:main::@3
main::@3: scope:[main]  from main::@3 main::enableVideoOutput1
  [42] phi()
  to:main::@3
main::@2: scope:[main]  from main::@1
  [43] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2
  [44] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0
  [45] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2)
  [46] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2
  [47] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0
  [48] (byte) main::s#1 ← ++ (byte) main::s#2
  to:main::@1

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@5 main::@6
  [49] (byte) ppuDataFill::val#4 ← phi( main::@5/(byte) '*' main::@6/(byte) 0 )
  [49] (word) ppuDataFill::size#3 ← phi( main::@5/(word)(number) $20*(number) $1e main::@6/(byte) $40 )
  [49] (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← phi( main::@5/(void*)(const nomodify byte*) PPU_NAME_TABLE_0 main::@6/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [50] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [51] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  [52] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [53] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [54] (word) ppuDataFill::i#2 ← phi( ppuDataFill::ppuDataPrepare1/(word) 0 ppuDataFill::@2/(word) ppuDataFill::i#1 )
  [55] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [56] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [57] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [58] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2
  to:ppuDataFill::@1

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@4
  [59] phi()
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [60] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0
  [61] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::ppuDataPrepare1
  [62] (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#1 )
  [62] (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) 0 ppuDataTransfer::@3/(word) ppuDataTransfer::i#1 )
  [63] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [64] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [65] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [66] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [67] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2
  [68] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  [69] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0
  [70] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  [71] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0
  [72] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER
  to:vblank::@14
vblank::@14: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  [73] phi()
  [74] call readJoy1 
  [75] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
  to:vblank::@15
vblank::@15: scope:[vblank]  from vblank::@14
  [76] (byte) vblank::joy#0 ← (byte) readJoy1::return#2
  [77] if((byte) 0==(byte) vblank::joy#0) goto vblank::@1
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@15 vblank::@6
  [78] return 
  to:@return
vblank::@1: scope:[vblank]  from vblank::@15
  [79] (byte) vblank::y_idx#0 ← (volatile byte) y_sin_idx
  [80] (volatile byte) y_sin_idx ← ++ (volatile byte) y_sin_idx
  [81] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@1
  [82] (byte~) vblank::$5 ← (volatile byte) x_sin_idx + (byte) 1
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@1 vblank::@2
  [83] (byte~) vblank::$7 ← phi( vblank::@1/(byte) 0 vblank::@2/(byte~) vblank::$5 )
  [84] (volatile byte) x_sin_idx ← (byte~) vblank::$7
  [85] (byte) vblank::x_idx#0 ← (volatile byte) x_sin_idx
  [86] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::@3
  [87] (byte~) vblank::$10 ← (volatile byte) x_sin_idx_2 + (byte) 1
  to:vblank::@5
vblank::@5: scope:[vblank]  from vblank::@3 vblank::@4
  [88] (byte~) vblank::$12 ← phi( vblank::@3/(byte) 0 vblank::@4/(byte~) vblank::$10 )
  [89] (volatile byte) x_sin_idx_2 ← (byte~) vblank::$12
  [90] (byte) vblank::x_idx_2#0 ← (volatile byte) x_sin_idx_2
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@13 vblank::@5
  [91] (byte) vblank::x_idx_2#2 ← phi( vblank::@13/(byte) vblank::x_idx_2#1 vblank::@5/(byte) vblank::x_idx_2#0 )
  [91] (byte) vblank::x_idx#2 ← phi( vblank::@13/(byte) vblank::x_idx#1 vblank::@5/(byte) vblank::x_idx#0 )
  [91] (byte) vblank::y_idx#2 ← phi( vblank::@13/(byte) vblank::y_idx#1 vblank::@5/(byte) vblank::y_idx#0 )
  [91] (byte) vblank::s#2 ← phi( vblank::@13/(byte) vblank::s#1 vblank::@5/(byte) 0 )
  [92] if((byte) vblank::s#2<(byte) $40) goto vblank::@7
  to:vblank::@return
vblank::@7: scope:[vblank]  from vblank::@6
  [93] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2
  [94] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2)
  [95] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4
  [96] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2)
  [97] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) vblank::$28) ← (byte~) vblank::$14
  [98] if((byte) vblank::x_idx#2<(byte) 3) goto vblank::@8
  to:vblank::@9
vblank::@9: scope:[vblank]  from vblank::@7
  [99] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3
  to:vblank::@10
vblank::@10: scope:[vblank]  from vblank::@8 vblank::@9
  [100] (byte) vblank::x_idx#1 ← phi( vblank::@8/(byte~) vblank::$19 vblank::@9/(byte~) vblank::$17 )
  [101] if((byte) vblank::x_idx_2#2>=(byte) $56) goto vblank::@11
  to:vblank::@12
vblank::@12: scope:[vblank]  from vblank::@10
  [102] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3
  to:vblank::@13
vblank::@13: scope:[vblank]  from vblank::@11 vblank::@12
  [103] (byte) vblank::x_idx_2#1 ← phi( vblank::@11/(byte~) vblank::$25 vblank::@12/(byte~) vblank::$23 )
  [104] (byte) vblank::s#1 ← ++ (byte) vblank::s#2
  to:vblank::@6
vblank::@11: scope:[vblank]  from vblank::@10
  [105] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56
  to:vblank::@13
vblank::@8: scope:[vblank]  from vblank::@7
  [106] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec
  to:vblank::@10

(byte()) readJoy1()
readJoy1: scope:[readJoy1]  from vblank::@14
  [107] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1
  [108] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  [109] (byte) readJoy1::joy#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::joy#1 )
  [109] (byte) readJoy1::i#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::i#1 )
  [110] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@1
  [111] return 
  to:@return
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  [112] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1
  [113] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [114] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2
  [115] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2
  to:readJoy1::@1
