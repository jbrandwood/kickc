
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  to:@1
main: scope:[main]  from @1
  (byte) main::idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte/signed byte/word/signed word/dword/signed dword~) main::$0 ← (byte) '0' + (const byte) SIZEOF_VOID
  *((byte*) SCREEN#0 + (byte) main::idx#0) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$0
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (byte/signed byte/word/signed word/dword/signed dword~) main::$1 ← (byte) '0' + (const byte) SIZEOF_BYTE
  *((byte*) SCREEN#0 + (byte) main::idx#2) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$1
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  (byte/signed byte/word/signed word/dword/signed dword~) main::$2 ← (byte) '0' + (const byte) SIZEOF_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) main::idx#3) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$2
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  (byte/signed byte/word/signed word/dword/signed dword~) main::$3 ← (byte) '0' + (const byte) SIZEOF_BYTE
  *((byte*) SCREEN#0 + (byte) main::idx#4) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$3
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  (byte/signed byte/word/signed word/dword/signed dword~) main::$4 ← (byte) '0' + (const byte) SIZEOF_SIGNED_BYTE
  *((byte*) SCREEN#0 + (byte) main::idx#5) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$4
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  (byte/signed byte/word/signed word/dword/signed dword~) main::$5 ← (byte) '0' + (const byte) SIZEOF_BOOL
  *((byte*) SCREEN#0 + (byte) main::idx#6) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$5
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  (byte/signed byte/word/signed word/dword/signed dword~) main::$6 ← (byte) '0' + (const byte) SIZEOF_WORD
  *((byte*) SCREEN#0 + (byte) main::idx#8) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$6
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  (byte/signed byte/word/signed word/dword/signed dword~) main::$7 ← (byte) '0' + (const byte) SIZEOF_SIGNED_WORD
  *((byte*) SCREEN#0 + (byte) main::idx#9) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$7
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  (byte/signed byte/word/signed word/dword/signed dword~) main::$8 ← (byte) '0' + (const byte) SIZEOF_WORD
  *((byte*) SCREEN#0 + (byte) main::idx#10) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$8
  (byte) main::idx#11 ← ++ (byte) main::idx#10
  (byte/signed byte/word/signed word/dword/signed dword~) main::$9 ← (byte) '0' + (const byte) SIZEOF_SIGNED_WORD
  *((byte*) SCREEN#0 + (byte) main::idx#11) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$9
  (byte) main::idx#12 ← ++ (byte) main::idx#11
  (byte/signed byte/word/signed word/dword/signed dword~) main::$10 ← (byte) '0' + (const byte) SIZEOF_WORD
  *((byte*) SCREEN#0 + (byte) main::idx#12) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$10
  (byte) main::idx#13 ← ++ (byte) main::idx#12
  (byte/signed byte/word/signed word/dword/signed dword~) main::$11 ← (byte) '0' + (const byte) SIZEOF_SIGNED_WORD
  *((byte*) SCREEN#0 + (byte) main::idx#13) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$11
  (byte) main::idx#14 ← ++ (byte) main::idx#13
  (byte) main::idx#15 ← ++ (byte) main::idx#14
  (byte/signed byte/word/signed word/dword/signed dword~) main::$12 ← (byte) '0' + (const byte) SIZEOF_POINTER
  *((byte*) SCREEN#0 + (byte) main::idx#15) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$12
  (byte) main::idx#16 ← ++ (byte) main::idx#15
  (byte/signed byte/word/signed word/dword/signed dword~) main::$13 ← (byte) '0' + (const byte) SIZEOF_POINTER
  *((byte*) SCREEN#0 + (byte) main::idx#16) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$13
  (byte) main::idx#17 ← ++ (byte) main::idx#16
  (byte/signed byte/word/signed word/dword/signed dword~) main::$14 ← (byte) '0' + (const byte) SIZEOF_POINTER
  *((byte*) SCREEN#0 + (byte) main::idx#17) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$14
  (byte) main::idx#18 ← ++ (byte) main::idx#17
  (byte/signed byte/word/signed word/dword/signed dword~) main::$15 ← (byte) '0' + (const byte) SIZEOF_POINTER
  *((byte*) SCREEN#0 + (byte) main::idx#18) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$15
  (byte) main::idx#19 ← ++ (byte) main::idx#18
  (byte/signed byte/word/signed word/dword/signed dword~) main::$16 ← (byte) '0' + (const byte) SIZEOF_POINTER
  *((byte*) SCREEN#0 + (byte) main::idx#19) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$16
  (byte) main::idx#20 ← ++ (byte) main::idx#19
  (byte) main::idx#21 ← ++ (byte) main::idx#20
  (byte/signed byte/word/signed word/dword/signed dword~) main::$17 ← (byte) '0' + (const byte) SIZEOF_DWORD
  *((byte*) SCREEN#0 + (byte) main::idx#21) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$17
  (byte) main::idx#22 ← ++ (byte) main::idx#21
  (byte/signed byte/word/signed word/dword/signed dword~) main::$18 ← (byte) '0' + (const byte) SIZEOF_SIGNED_DWORD
  *((byte*) SCREEN#0 + (byte) main::idx#22) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$18
  (byte) main::idx#23 ← ++ (byte) main::idx#22
  (byte/signed byte/word/signed word/dword/signed dword~) main::$19 ← (byte) '0' + (const byte) SIZEOF_DWORD
  *((byte*) SCREEN#0 + (byte) main::idx#23) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$19
  (byte) main::idx#24 ← ++ (byte) main::idx#23
  (byte/signed byte/word/signed word/dword/signed dword~) main::$20 ← (byte) '0' + (const byte) SIZEOF_SIGNED_DWORD
  *((byte*) SCREEN#0 + (byte) main::idx#24) ← (byte/signed byte/word/signed word/dword/signed dword~) main::$20
  (byte) main::idx#25 ← ++ (byte) main::idx#24
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(const byte) SIZEOF_BOOL = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 4
(const byte) SIZEOF_POINTER = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_SIGNED_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 4
(const byte) SIZEOF_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_VOID = (byte/signed byte/word/signed word/dword/signed dword) 0
(const byte) SIZEOF_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(byte/signed byte/word/signed word/dword/signed dword~) main::$0
(byte/signed byte/word/signed word/dword/signed dword~) main::$1
(byte/signed byte/word/signed word/dword/signed dword~) main::$10
(byte/signed byte/word/signed word/dword/signed dword~) main::$11
(byte/signed byte/word/signed word/dword/signed dword~) main::$12
(byte/signed byte/word/signed word/dword/signed dword~) main::$13
(byte/signed byte/word/signed word/dword/signed dword~) main::$14
(byte/signed byte/word/signed word/dword/signed dword~) main::$15
(byte/signed byte/word/signed word/dword/signed dword~) main::$16
(byte/signed byte/word/signed word/dword/signed dword~) main::$17
(byte/signed byte/word/signed word/dword/signed dword~) main::$18
(byte/signed byte/word/signed word/dword/signed dword~) main::$19
(byte/signed byte/word/signed word/dword/signed dword~) main::$2
(byte/signed byte/word/signed word/dword/signed dword~) main::$20
(byte/signed byte/word/signed word/dword/signed dword~) main::$3
(byte/signed byte/word/signed word/dword/signed dword~) main::$4
(byte/signed byte/word/signed word/dword/signed dword~) main::$5
(byte/signed byte/word/signed word/dword/signed dword~) main::$6
(byte/signed byte/word/signed word/dword/signed dword~) main::$7
(byte/signed byte/word/signed word/dword/signed dword~) main::$8
(byte/signed byte/word/signed word/dword/signed dword~) main::$9
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#11
(byte) main::idx#12
(byte) main::idx#13
(byte) main::idx#14
(byte) main::idx#15
(byte) main::idx#16
(byte) main::idx#17
(byte) main::idx#18
(byte) main::idx#19
(byte) main::idx#2
(byte) main::idx#20
(byte) main::idx#21
(byte) main::idx#22
(byte) main::idx#23
(byte) main::idx#24
(byte) main::idx#25
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte) main::idx#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$0 = '0'+SIZEOF_VOID
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$1 = '0'+SIZEOF_BYTE
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$2 = '0'+SIZEOF_SIGNED_BYTE
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$3 = '0'+SIZEOF_BYTE
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$4 = '0'+SIZEOF_SIGNED_BYTE
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$5 = '0'+SIZEOF_BOOL
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$6 = '0'+SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$7 = '0'+SIZEOF_SIGNED_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$8 = '0'+SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$9 = '0'+SIZEOF_SIGNED_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$10 = '0'+SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$11 = '0'+SIZEOF_SIGNED_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$12 = '0'+SIZEOF_POINTER
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$13 = '0'+SIZEOF_POINTER
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$14 = '0'+SIZEOF_POINTER
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$15 = '0'+SIZEOF_POINTER
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$16 = '0'+SIZEOF_POINTER
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$17 = '0'+SIZEOF_DWORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$18 = '0'+SIZEOF_SIGNED_DWORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$19 = '0'+SIZEOF_DWORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$20 = '0'+SIZEOF_SIGNED_DWORD
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#18 = ++main::idx#17
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#19 = ++main::idx#18
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#20 = ++main::idx#19
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#21 = ++main::idx#20
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#22 = ++main::idx#21
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#23 = ++main::idx#22
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#24 = ++main::idx#23
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::idx#25 = ++main::idx#24
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(SCREEN#0+main::idx#0)
Consolidated array index constant in *(SCREEN#0+main::idx#2)
Consolidated array index constant in *(SCREEN#0+main::idx#3)
Consolidated array index constant in *(SCREEN#0+main::idx#4)
Consolidated array index constant in *(SCREEN#0+main::idx#5)
Consolidated array index constant in *(SCREEN#0+main::idx#6)
Consolidated array index constant in *(SCREEN#0+main::idx#8)
Consolidated array index constant in *(SCREEN#0+main::idx#9)
Consolidated array index constant in *(SCREEN#0+main::idx#10)
Consolidated array index constant in *(SCREEN#0+main::idx#11)
Consolidated array index constant in *(SCREEN#0+main::idx#12)
Consolidated array index constant in *(SCREEN#0+main::idx#13)
Consolidated array index constant in *(SCREEN#0+main::idx#15)
Consolidated array index constant in *(SCREEN#0+main::idx#16)
Consolidated array index constant in *(SCREEN#0+main::idx#17)
Consolidated array index constant in *(SCREEN#0+main::idx#18)
Consolidated array index constant in *(SCREEN#0+main::idx#19)
Consolidated array index constant in *(SCREEN#0+main::idx#21)
Consolidated array index constant in *(SCREEN#0+main::idx#22)
Consolidated array index constant in *(SCREEN#0+main::idx#23)
Consolidated array index constant in *(SCREEN#0+main::idx#24)
Successful SSA optimization Pass2ConstantAdditionElimination
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Inlining constant with different constant siblings (const byte) main::idx#10
Inlining constant with different constant siblings (const byte) main::idx#11
Inlining constant with different constant siblings (const byte) main::idx#12
Inlining constant with different constant siblings (const byte) main::idx#13
Inlining constant with different constant siblings (const byte) main::idx#14
Inlining constant with different constant siblings (const byte) main::idx#15
Inlining constant with different constant siblings (const byte) main::idx#16
Inlining constant with different constant siblings (const byte) main::idx#17
Inlining constant with different constant siblings (const byte) main::idx#18
Inlining constant with different constant siblings (const byte) main::idx#19
Inlining constant with different constant siblings (const byte) main::idx#20
Inlining constant with different constant siblings (const byte) main::idx#21
Inlining constant with different constant siblings (const byte) main::idx#22
Inlining constant with different constant siblings (const byte) main::idx#23
Inlining constant with different constant siblings (const byte) main::idx#24
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#17 = ++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#18 = ++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#19 = ++++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#12 = ++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$12 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$13 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$14 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$15 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$10 = (byte) '0'+(const byte) SIZEOF_WORD
Constant inlined main::$11 = (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$16 = (byte) '0'+(const byte) SIZEOF_POINTER
Constant inlined main::$17 = (byte) '0'+(const byte) SIZEOF_DWORD
Constant inlined main::$18 = (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
Constant inlined main::$19 = (byte) '0'+(const byte) SIZEOF_DWORD
Constant inlined main::idx#20 = ++++++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#21 = ++++++++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#22 = ++++++++++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#23 = ++++++++++++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#24 = ++++++++++++++++++++++++++++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$20 = (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
Constant inlined main::idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#2 = ++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$1 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::idx#3 = ++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$2 = (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
Constant inlined main::idx#4 = ++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#5 = ++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$0 = (byte) '0'+(const byte) SIZEOF_VOID
Constant inlined main::idx#6 = ++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$5 = (byte) '0'+(const byte) SIZEOF_BOOL
Constant inlined main::idx#7 = ++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$6 = (byte) '0'+(const byte) SIZEOF_WORD
Constant inlined main::idx#8 = ++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$3 = (byte) '0'+(const byte) SIZEOF_BYTE
Constant inlined main::idx#9 = ++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::idx#10 = ++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$4 = (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
Constant inlined main::idx#11 = ++++++++++++++++++++++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$9 = (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$7 = (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$8 = (byte) '0'+(const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SCREEN#0+0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$13
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Simplifying constant integer increment ++$17
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_VOID
  [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL
  [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_WORD
  [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (byte) '0'+(const byte) SIZEOF_WORD
  [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(const byte) SIZEOF_WORD
  [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [20] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD
  [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD
  [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  to:main::@return
main::@return: scope:[main]  from main
  [25] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Tests the sizeof() operator on types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_VOID = 0
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_VOID -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_VOID
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
  //SEG12 [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
  //SEG14 [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
  //SEG15 [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
  //SEG16 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
  //SEG17 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
  //SEG18 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
  //SEG19 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
  //SEG20 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
  //SEG21 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
  //SEG22 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
  //SEG23 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$10
  //SEG24 [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$11
  //SEG25 [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$12
  //SEG26 [20] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$13
  //SEG27 [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$15
  //SEG28 [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$16
  //SEG29 [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$17
  //SEG30 [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$18
    jmp breturn
  //SEG31 main::@return
  breturn:
  //SEG32 [25] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_VOID [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 147 combination 
Uplifting [] best 147 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests the sizeof() operator on types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_VOID = 0
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_VOID -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_VOID
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
  //SEG12 [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
  //SEG14 [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
  //SEG15 [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
  //SEG16 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
  //SEG17 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
  //SEG18 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
  //SEG19 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
  //SEG20 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
  //SEG21 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
  //SEG22 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
  //SEG23 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$10
  //SEG24 [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$11
  //SEG25 [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$12
  //SEG26 [20] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$13
  //SEG27 [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$15
  //SEG28 [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$16
  //SEG29 [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$17
  //SEG30 [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$18
    jmp breturn
  //SEG31 main::@return
  breturn:
  //SEG32 [25] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(const byte) SIZEOF_BOOL SIZEOF_BOOL = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_BYTE SIZEOF_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_DWORD SIZEOF_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 4
(const byte) SIZEOF_POINTER SIZEOF_POINTER = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_SIGNED_BYTE SIZEOF_SIGNED_BYTE = (byte/signed byte/word/signed word/dword/signed dword) 1
(const byte) SIZEOF_SIGNED_DWORD SIZEOF_SIGNED_DWORD = (byte/signed byte/word/signed word/dword/signed dword) 4
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_VOID SIZEOF_VOID = (byte/signed byte/word/signed word/dword/signed dword) 0
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(label) main::@return
(byte) main::idx



FINAL ASSEMBLER
Score: 124

//SEG0 File Comments
// Tests the sizeof() operator on types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_VOID = 0
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [4] *((const byte*) SCREEN#0) ← (byte) '0'+(const byte) SIZEOF_VOID -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_VOID
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
  //SEG12 [6] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
  //SEG13 [7] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
  //SEG14 [8] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
  //SEG15 [9] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
  //SEG16 [10] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
  //SEG17 [11] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
  //SEG18 [12] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
  //SEG19 [13] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
  //SEG20 [14] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
  //SEG21 [15] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
  //SEG22 [16] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
  //SEG23 [17] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$10
  //SEG24 [18] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$11
  //SEG25 [19] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$12
  //SEG26 [20] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $13) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$13
  //SEG27 [21] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $15) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$15
  //SEG28 [22] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $16) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$16
  //SEG29 [23] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $17) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$17
  //SEG30 [24] *((const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $18) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$18
  //SEG31 main::@return
  //SEG32 [25] return 
    rts
}

