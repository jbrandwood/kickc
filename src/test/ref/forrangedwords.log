
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::w#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::w#2 = phi( main/main::w#0, main::@1/main::w#1 )
  main::$0 = < main::w#2
  main::SCREEN[0] = main::$0
  main::$1 = > main::w#2
  main::SCREEN[1] = main::$1
  main::w#1 = main::w#2 + rangenext(0,$ffff)
  main::$2 = main::w#1 != rangelast(0,$ffff)
  if(main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::sw#0 = -$7fff
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::sw#2 = phi( main::@2/main::sw#0, main::@3/main::sw#1 )
  main::$3 = < main::sw#2
  main::SCREEN[3] = main::$3
  main::$4 = > main::sw#2
  main::SCREEN[4] = main::$4
  main::sw#1 = main::sw#2 + rangenext(-$7fff,$7ffe)
  main::$5 = main::sw#1 != rangelast(-$7fff,$7ffe)
  if(main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
byte~ main::$0
byte~ main::$1
bool~ main::$2
byte~ main::$3
byte~ main::$4
bool~ main::$5
const byte* main::SCREEN = (byte*)$400
signed word main::sw
signed word main::sw#0
signed word main::sw#1
signed word main::sw#2
word main::w
word main::w#0
word main::w#1
word main::w#2

Adding number conversion cast (unumber) 0 in main::SCREEN[0] = main::$0
Adding number conversion cast (unumber) 1 in main::SCREEN[1] = main::$1
Adding number conversion cast (unumber) 3 in main::SCREEN[3] = main::$3
Adding number conversion cast (unumber) 4 in main::SCREEN[4] = main::$4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$2 [8] if(main::w#1!=rangelast(0,$ffff)) goto main::@1
Simple Condition main::$5 [17] if(main::sw#1!=rangelast(-$7fff,$7ffe)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::w#0 = 0
Constant main::sw#0 = -$7fff
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::w#1 = ++ main::w#2 to ++
Resolved ranged comparison value [8] if(main::w#1!=rangelast(0,$ffff)) goto main::@1 to 0
Resolved ranged next value [15] main::sw#1 = ++ main::sw#2 to ++
Resolved ranged comparison value [17] if(main::sw#1!=rangelast(-$7fff,$7ffe)) goto main::@3 to $7fff
Simplifying expression containing zero main::SCREEN in [3] main::SCREEN[0] = main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [6] if(main::w#1!=0) goto main::@1
Adding number conversion cast (snumber) $7fff in [13] if(main::sw#1!=$7fff) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $7fff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized signed number type (signed word) $7fff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::w#0
Inlining constant with var siblings main::sw#0
Constant inlined main::w#0 = 0
Constant inlined main::sw#0 = -$7fff
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+3)
Consolidated array index constant in *(main::SCREEN+4)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [17] main::sw#3 = main::sw#1
Coalesced [18] main::w#3 = main::w#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@5
Culled Empty Block label main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::w#2 = phi( main/0, main::@1/main::w#1 )
  [2] main::$0 = < main::w#2
  [3] *main::SCREEN = main::$0
  [4] main::$1 = > main::w#2
  [5] *(main::SCREEN+1) = main::$1
  [6] main::w#1 = ++ main::w#2
  [7] if(main::w#1!=0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [8] main::sw#2 = phi( main::@1/-$7fff, main::@2/main::sw#1 )
  [9] main::$3 = < main::sw#2
  [10] *(main::SCREEN+3) = main::$3
  [11] main::$4 = > main::sw#2
  [12] *(main::SCREEN+4) = main::$4
  [13] main::sw#1 = ++ main::sw#2
  [14] if(main::sw#1!=$7fff) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 22.0
byte~ main::$1 22.0
byte~ main::$3 22.0
byte~ main::$4 22.0
signed word main::sw
signed word main::sw#1 16.5
signed word main::sw#2 8.8
word main::w
word main::w#1 16.5
word main::w#2 8.8

Initial phi equivalence classes
[ main::w#2 main::w#1 ]
[ main::sw#2 main::sw#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Complete equivalence classes
[ main::w#2 main::w#1 ]
[ main::sw#2 main::sw#1 ]
[ main::$0 ]
[ main::$1 ]
[ main::$3 ]
[ main::$4 ]
Allocated zp[2]:2 [ main::w#2 main::w#1 ]
Allocated zp[2]:4 [ main::sw#2 main::sw#1 ]
Allocated zp[1]:6 [ main::$0 ]
Allocated zp[1]:7 [ main::$1 ]
Allocated zp[1]:8 [ main::$3 ]
Allocated zp[1]:9 [ main::$4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] if(main::w#1!=0) goto main::@1 [ main::w#1 ] (  [ main::w#1 ] { }  ) always clobbers reg byte a 
Statement [14] if(main::sw#1!=$7fff) goto main::@2 [ main::sw#1 ] (  [ main::sw#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::w#2 main::w#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::sw#2 main::sw#1 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ main::$0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$3 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::$4 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.3: zp[2]:2 [ main::w#2 main::w#1 ] 25.3: zp[2]:4 [ main::sw#2 main::sw#1 ] 22: zp[1]:6 [ main::$0 ] 22: zp[1]:7 [ main::$1 ] 22: zp[1]:8 [ main::$3 ] 22: zp[1]:9 [ main::$4 ] 
Uplift Scope [] 

Uplifting [main] best 1121 combination zp[2]:2 [ main::w#2 main::w#1 ] zp[2]:4 [ main::sw#2 main::sw#1 ] reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$3 ] reg byte a [ main::$4 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [] best 1121 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label w = 2
    .label sw = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::w#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w
    lda #>0
    sta.z w+1
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::w#2 = main::w#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = < main::w#2 -- vbuaa=_lo_vwuz1 
    lda.z w
    // [3] *main::SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [4] main::$1 = > main::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [5] *(main::SCREEN+1) = main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // [6] main::w#1 = ++ main::w#2 -- vwuz1=_inc_vwuz1 
    inc.z w
    bne !+
    inc.z w+1
  !:
    // [7] if(main::w#1!=0) goto main::@1 -- vwuz1_neq_0_then_la1 
    lda.z w
    ora.z w+1
    bne __b1_from___b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [8] phi main::sw#2 = -$7fff [phi:main::@1->main::@2#0] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta.z sw
    lda #>-$7fff
    sta.z sw+1
    jmp __b2
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [8] phi main::sw#2 = main::sw#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [9] main::$3 = < main::sw#2 -- vbuaa=_lo_vwsz1 
    lda.z sw
    // [10] *(main::SCREEN+3) = main::$3 -- _deref_pbuc1=vbuaa 
    sta SCREEN+3
    // [11] main::$4 = > main::sw#2 -- vbuaa=_hi_vwsz1 
    lda.z sw+1
    // [12] *(main::SCREEN+4) = main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+4
    // [13] main::sw#1 = ++ main::sw#2 -- vwsz1=_inc_vwsz1 
    inc.z sw
    bne !+
    inc.z sw+1
  !:
    // [14] if(main::sw#1!=$7fff) goto main::@2 -- vwsz1_neq_vwsc1_then_la1 
    lda.z sw+1
    cmp #>$7fff
    bne __b2_from___b2
    lda.z sw
    cmp #<$7fff
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$0 reg byte a 22.0
byte~ main::$1 reg byte a 22.0
byte~ main::$3 reg byte a 22.0
byte~ main::$4 reg byte a 22.0
const byte* main::SCREEN = (byte*) 1024
signed word main::sw
signed word main::sw#1 sw zp[2]:4 16.5
signed word main::sw#2 sw zp[2]:4 8.8
word main::w
word main::w#1 w zp[2]:2 16.5
word main::w#2 w zp[2]:2 8.8

zp[2]:2 [ main::w#2 main::w#1 ]
zp[2]:4 [ main::sw#2 main::sw#1 ]
reg byte a [ main::$0 ]
reg byte a [ main::$1 ]
reg byte a [ main::$3 ]
reg byte a [ main::$4 ]


FINAL ASSEMBLER
Score: 951

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label w = 2
    .label sw = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::w#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z w
    sta.z w+1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::w#2 = main::w#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // <w
    // [2] main::$0 = < main::w#2 -- vbuaa=_lo_vwuz1 
    lda.z w
    // SCREEN[0] = <w
    // [3] *main::SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // >w
    // [4] main::$1 = > main::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // SCREEN[1] = >w
    // [5] *(main::SCREEN+1) = main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // for( word w: 0..$ffff)
    // [6] main::w#1 = ++ main::w#2 -- vwuz1=_inc_vwuz1 
    inc.z w
    bne !+
    inc.z w+1
  !:
    // [7] if(main::w#1!=0) goto main::@1 -- vwuz1_neq_0_then_la1 
    lda.z w
    ora.z w+1
    bne __b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [8] phi main::sw#2 = -$7fff [phi:main::@1->main::@2#0] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta.z sw
    lda #>-$7fff
    sta.z sw+1
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [8] phi main::sw#2 = main::sw#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // <sw
    // [9] main::$3 = < main::sw#2 -- vbuaa=_lo_vwsz1 
    lda.z sw
    // SCREEN[3] = <sw
    // [10] *(main::SCREEN+3) = main::$3 -- _deref_pbuc1=vbuaa 
    sta SCREEN+3
    // >sw
    // [11] main::$4 = > main::sw#2 -- vbuaa=_hi_vwsz1 
    lda.z sw+1
    // SCREEN[4] = >sw
    // [12] *(main::SCREEN+4) = main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+4
    // for( signed word sw: -$7fff..$7ffe)
    // [13] main::sw#1 = ++ main::sw#2 -- vwsz1=_inc_vwsz1 
    inc.z sw
    bne !+
    inc.z sw+1
  !:
    // [14] if(main::sw#1!=$7fff) goto main::@2 -- vwsz1_neq_vwsc1_then_la1 
    lda.z sw+1
    cmp #>$7fff
    bne __b2
    lda.z sw
    cmp #<$7fff
    bne __b2
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data

