Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::x#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@6
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@6/(byte) main::x#1 )
  (bool~) main::$3 ← (byte) main::x#2 < (number) $f
  if((bool~) main::$3) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#2 )
  (byte~) main::$4 ← (byte) main::x#3 + (byte) main::x#3
  (number~) main::$5 ← (byte~) main::$4 + (number) 1
  (number~) main::$6 ← (byte) main::x#3 + (number) $a
  (byte) textbox::x1#0 ← (byte) main::x#3
  (byte) textbox::y1#0 ← (byte) main::x#3
  (byte) textbox::x2#0 ← (number~) main::$5
  (byte) textbox::y2#0 ← (number~) main::$6
  (byte*) textbox::text#0 ← (const to_nomodify byte*) text2
  call textbox 
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::x#7 ← phi( main::@2/(byte) main::x#3 )
  (word) main::wait#0 ← (word) 0
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte) textbox::x1#1 ← (number) 0
  (byte) textbox::y1#1 ← (number) $c
  (byte) textbox::x2#1 ← (number) $14
  (byte) textbox::y2#1 ← (number) $18
  (byte*) textbox::text#1 ← (const to_nomodify byte*) text
  call textbox 
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) textbox::x1#2 ← (number) 3
  (byte) textbox::y1#2 ← (number) 3
  (byte) textbox::x2#2 ← (number) $25
  (byte) textbox::y2#2 ← (number) 9
  (byte*) textbox::text#2 ← (const to_nomodify byte*) text
  call textbox 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) textbox::x1#3 ← (number) $1e
  (byte) textbox::y1#3 ← (number) 8
  (byte) textbox::x2#3 ← (number) $27
  (byte) textbox::y2#3 ← (number) $18
  (byte*) textbox::text#3 ← (const to_nomodify byte*) text
  call textbox 
  to:main::@11
main::@11: scope:[main]  from main::@10
  to:main::@7
main::@4: scope:[main]  from main::@5 main::@8
  (byte) main::x#5 ← phi( main::@5/(byte) main::x#6 main::@8/(byte) main::x#7 )
  (word) main::wait#2 ← phi( main::@5/(word) main::wait#1 main::@8/(word) main::wait#0 )
  (bool~) main::$8 ← (word) main::wait#2 < (number) $88b8
  if((bool~) main::$8) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte) main::x#6 ← phi( main::@4/(byte) main::x#5 )
  (word) main::wait#3 ← phi( main::@4/(word) main::wait#2 )
  (word) main::wait#1 ← ++ (word) main::wait#3
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte) main::x#4 ← phi( main::@4/(byte) main::x#5 )
  (byte) main::x#1 ← (byte) main::x#4 + (number) 2
  to:main::@1
main::@7: scope:[main]  from main::@11 main::@7
  if(true) goto main::@7
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return

(void()) textbox((byte) textbox::x1 , (byte) textbox::y1 , (byte) textbox::x2 , (byte) textbox::y2 , (byte*) textbox::text)
textbox: scope:[textbox]  from main::@10 main::@2 main::@3 main::@9
  (byte*) textbox::text#12 ← phi( main::@10/(byte*) textbox::text#3 main::@2/(byte*) textbox::text#0 main::@3/(byte*) textbox::text#1 main::@9/(byte*) textbox::text#2 )
  (byte) textbox::y2#4 ← phi( main::@10/(byte) textbox::y2#3 main::@2/(byte) textbox::y2#0 main::@3/(byte) textbox::y2#1 main::@9/(byte) textbox::y2#2 )
  (byte) textbox::x2#4 ← phi( main::@10/(byte) textbox::x2#3 main::@2/(byte) textbox::x2#0 main::@3/(byte) textbox::x2#1 main::@9/(byte) textbox::x2#2 )
  (byte) textbox::y1#4 ← phi( main::@10/(byte) textbox::y1#3 main::@2/(byte) textbox::y1#0 main::@3/(byte) textbox::y1#1 main::@9/(byte) textbox::y1#2 )
  (byte) textbox::x1#4 ← phi( main::@10/(byte) textbox::x1#3 main::@2/(byte) textbox::x1#0 main::@3/(byte) textbox::x1#1 main::@9/(byte) textbox::x1#2 )
  (byte) draw_window::x1#0 ← (byte) textbox::x1#4
  (byte) draw_window::y1#0 ← (byte) textbox::y1#4
  (byte) draw_window::x2#0 ← (byte) textbox::x2#4
  (byte) draw_window::y2#0 ← (byte) textbox::y2#4
  call draw_window 
  to:textbox::@12
textbox::@12: scope:[textbox]  from textbox
  (byte*) textbox::text#7 ← phi( textbox/(byte*) textbox::text#12 )
  (byte) textbox::y2#5 ← phi( textbox/(byte) textbox::y2#4 )
  (byte) textbox::x2#5 ← phi( textbox/(byte) textbox::x2#4 )
  (byte) textbox::x1#5 ← phi( textbox/(byte) textbox::x1#4 )
  (byte) textbox::y1#5 ← phi( textbox/(byte) textbox::y1#4 )
  (number~) textbox::$1 ← (byte) textbox::y1#5 + (number) 1
  (byte) textbox::y#0 ← (number~) textbox::$1
  (number~) textbox::$2 ← (byte) textbox::x1#5 + (number) 1
  (byte) textbox::x#0 ← (number~) textbox::$2
  (word~) textbox::$31 ← (word)(byte) textbox::y#0
  (number~) textbox::$3 ← (word~) textbox::$31 * (number) $28
  (word) textbox::z#0 ← (number~) textbox::$3
  (byte) textbox::i#0 ← (byte) 0
  (bool~) textbox::$4 ← (byte) textbox::x#0 == (byte) textbox::x2#5
  (bool~) textbox::$5 ← (byte) textbox::y#0 == (byte) textbox::y2#5
  (bool~) textbox::$6 ← (bool~) textbox::$4 || (bool~) textbox::$5
  (bool~) textbox::$7 ← ! (bool~) textbox::$6
  if((bool~) textbox::$7) goto textbox::@1
  to:textbox::@return
textbox::@return: scope:[textbox]  from textbox::@11 textbox::@12 textbox::@6 textbox::@8
  return 
  to:@return
textbox::@1: scope:[textbox]  from textbox::@12 textbox::@8
  (byte) textbox::y2#10 ← phi( textbox::@12/(byte) textbox::y2#5 textbox::@8/(byte) textbox::y2#13 )
  (byte) textbox::y#9 ← phi( textbox::@12/(byte) textbox::y#0 textbox::@8/(byte) textbox::y#11 )
  (byte) textbox::x1#11 ← phi( textbox::@12/(byte) textbox::x1#5 textbox::@8/(byte) textbox::x1#15 )
  (byte) textbox::x2#8 ← phi( textbox::@12/(byte) textbox::x2#5 textbox::@8/(byte) textbox::x2#11 )
  (byte) textbox::i#2 ← phi( textbox::@12/(byte) textbox::i#0 textbox::@8/(byte) textbox::i#5 )
  (byte*) textbox::text#4 ← phi( textbox::@12/(byte*) textbox::text#7 textbox::@8/(byte*) textbox::text#6 )
  (byte) textbox::x#4 ← phi( textbox::@12/(byte) textbox::x#0 textbox::@8/(byte) textbox::x#7 )
  (word) textbox::z#3 ← phi( textbox::@12/(word) textbox::z#0 textbox::@8/(word) textbox::z#4 )
  (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#4
  *((const nomodify byte*) screen + (word~) textbox::$8) ← *((byte*) textbox::text#4 + (byte) textbox::i#2)
  (bool~) textbox::$9 ← *((byte*) textbox::text#4 + (byte) textbox::i#2) == (number) $20
  (bool~) textbox::$10 ← ! (bool~) textbox::$9
  if((bool~) textbox::$10) goto textbox::@2
  to:textbox::@10
textbox::@2: scope:[textbox]  from textbox::@1 textbox::@5 textbox::@7
  (word) textbox::z#5 ← phi( textbox::@1/(word) textbox::z#3 textbox::@5/(word) textbox::z#6 textbox::@7/(word) textbox::z#1 )
  (byte) textbox::y2#9 ← phi( textbox::@1/(byte) textbox::y2#10 textbox::@5/(byte) textbox::y2#8 textbox::@7/(byte) textbox::y2#11 )
  (byte) textbox::y#8 ← phi( textbox::@1/(byte) textbox::y#9 textbox::@5/(byte) textbox::y#7 textbox::@7/(byte) textbox::y#4 )
  (byte) textbox::x1#10 ← phi( textbox::@1/(byte) textbox::x1#11 textbox::@5/(byte) textbox::x1#6 textbox::@7/(byte) textbox::x1#12 )
  (byte*) textbox::text#10 ← phi( textbox::@1/(byte*) textbox::text#4 textbox::@5/(byte*) textbox::text#13 textbox::@7/(byte*) textbox::text#14 )
  (byte) textbox::x2#6 ← phi( textbox::@1/(byte) textbox::x2#8 textbox::@5/(byte) textbox::x2#7 textbox::@7/(byte) textbox::x2#9 )
  (byte) textbox::x#5 ← phi( textbox::@1/(byte) textbox::x#4 textbox::@5/(byte) textbox::x#6 textbox::@7/(byte) textbox::x#8 )
  (byte) textbox::i#3 ← phi( textbox::@1/(byte) textbox::i#2 textbox::@5/(byte) textbox::i#6 textbox::@7/(byte) textbox::i#7 )
  (byte) textbox::i#1 ← ++ (byte) textbox::i#3
  (byte) textbox::x#1 ← ++ (byte) textbox::x#5
  (bool~) textbox::$24 ← (byte) textbox::x#1 == (byte) textbox::x2#6
  (bool~) textbox::$25 ← ! (bool~) textbox::$24
  if((bool~) textbox::$25) goto textbox::@8
  to:textbox::@11
textbox::@10: scope:[textbox]  from textbox::@1
  (word) textbox::z#8 ← phi( textbox::@1/(word) textbox::z#3 )
  (byte) textbox::y2#14 ← phi( textbox::@1/(byte) textbox::y2#10 )
  (byte) textbox::y#12 ← phi( textbox::@1/(byte) textbox::y#9 )
  (byte) textbox::x1#13 ← phi( textbox::@1/(byte) textbox::x1#11 )
  (byte) textbox::x2#12 ← phi( textbox::@1/(byte) textbox::x2#8 )
  (byte) textbox::x#10 ← phi( textbox::@1/(byte) textbox::x#4 )
  (byte*) textbox::text#8 ← phi( textbox::@1/(byte*) textbox::text#4 )
  (byte) textbox::i#4 ← phi( textbox::@1/(byte) textbox::i#2 )
  (byte) textbox::c#0 ← (byte) 0
  (number~) textbox::$11 ← (byte) textbox::i#4 + (number) 1
  (byte) textbox::ls#0 ← (number~) textbox::$11
  to:textbox::@3
textbox::@3: scope:[textbox]  from textbox::@10 textbox::@4
  (word) textbox::z#7 ← phi( textbox::@10/(word) textbox::z#8 textbox::@4/(word) textbox::z#9 )
  (byte) textbox::y2#12 ← phi( textbox::@10/(byte) textbox::y2#14 textbox::@4/(byte) textbox::y2#15 )
  (byte) textbox::y#10 ← phi( textbox::@10/(byte) textbox::y#12 textbox::@4/(byte) textbox::y#13 )
  (byte) textbox::i#9 ← phi( textbox::@10/(byte) textbox::i#4 textbox::@4/(byte) textbox::i#12 )
  (byte) textbox::x1#9 ← phi( textbox::@10/(byte) textbox::x1#13 textbox::@4/(byte) textbox::x1#14 )
  (byte) textbox::x2#10 ← phi( textbox::@10/(byte) textbox::x2#12 textbox::@4/(byte) textbox::x2#13 )
  (byte) textbox::x#9 ← phi( textbox::@10/(byte) textbox::x#10 textbox::@4/(byte) textbox::x#11 )
  (byte) textbox::c#4 ← phi( textbox::@10/(byte) textbox::c#0 textbox::@4/(byte) textbox::c#1 )
  (byte) textbox::ls#2 ← phi( textbox::@10/(byte) textbox::ls#0 textbox::@4/(byte) textbox::ls#1 )
  (byte*) textbox::text#5 ← phi( textbox::@10/(byte*) textbox::text#8 textbox::@4/(byte*) textbox::text#9 )
  (bool~) textbox::$12 ← *((byte*) textbox::text#5 + (byte) textbox::ls#2) != (number) $20
  (bool~) textbox::$13 ← *((byte*) textbox::text#5 + (byte) textbox::ls#2) != (number) 0
  (bool~) textbox::$14 ← (bool~) textbox::$12 && (bool~) textbox::$13
  if((bool~) textbox::$14) goto textbox::@4
  to:textbox::@5
textbox::@4: scope:[textbox]  from textbox::@3
  (word) textbox::z#9 ← phi( textbox::@3/(word) textbox::z#7 )
  (byte) textbox::y2#15 ← phi( textbox::@3/(byte) textbox::y2#12 )
  (byte) textbox::y#13 ← phi( textbox::@3/(byte) textbox::y#10 )
  (byte) textbox::i#12 ← phi( textbox::@3/(byte) textbox::i#9 )
  (byte) textbox::x1#14 ← phi( textbox::@3/(byte) textbox::x1#9 )
  (byte) textbox::x2#13 ← phi( textbox::@3/(byte) textbox::x2#10 )
  (byte) textbox::x#11 ← phi( textbox::@3/(byte) textbox::x#9 )
  (byte*) textbox::text#9 ← phi( textbox::@3/(byte*) textbox::text#5 )
  (byte) textbox::c#2 ← phi( textbox::@3/(byte) textbox::c#4 )
  (byte) textbox::ls#3 ← phi( textbox::@3/(byte) textbox::ls#2 )
  (byte) textbox::ls#1 ← ++ (byte) textbox::ls#3
  (byte) textbox::c#1 ← ++ (byte) textbox::c#2
  to:textbox::@3
textbox::@5: scope:[textbox]  from textbox::@3
  (word) textbox::z#6 ← phi( textbox::@3/(word) textbox::z#7 )
  (byte*) textbox::text#13 ← phi( textbox::@3/(byte*) textbox::text#5 )
  (byte) textbox::y2#8 ← phi( textbox::@3/(byte) textbox::y2#12 )
  (byte) textbox::y#7 ← phi( textbox::@3/(byte) textbox::y#10 )
  (byte) textbox::i#6 ← phi( textbox::@3/(byte) textbox::i#9 )
  (byte) textbox::x1#6 ← phi( textbox::@3/(byte) textbox::x1#9 )
  (byte) textbox::x2#7 ← phi( textbox::@3/(byte) textbox::x2#10 )
  (byte) textbox::x#6 ← phi( textbox::@3/(byte) textbox::x#9 )
  (byte) textbox::c#3 ← phi( textbox::@3/(byte) textbox::c#4 )
  (byte~) textbox::$15 ← (byte) textbox::c#3 + (byte) textbox::x#6
  (bool~) textbox::$16 ← (byte~) textbox::$15 >= (byte) textbox::x2#7
  (byte~) textbox::$17 ← (byte) textbox::x2#7 - (byte) textbox::x1#6
  (bool~) textbox::$18 ← (byte) textbox::c#3 < (byte~) textbox::$17
  (bool~) textbox::$19 ← (bool~) textbox::$16 && (bool~) textbox::$18
  (bool~) textbox::$20 ← ! (bool~) textbox::$19
  if((bool~) textbox::$20) goto textbox::@2
  to:textbox::@6
textbox::@6: scope:[textbox]  from textbox::@5
  (byte*) textbox::text#16 ← phi( textbox::@5/(byte*) textbox::text#13 )
  (byte) textbox::x2#14 ← phi( textbox::@5/(byte) textbox::x2#7 )
  (byte) textbox::i#10 ← phi( textbox::@5/(byte) textbox::i#6 )
  (byte) textbox::y2#6 ← phi( textbox::@5/(byte) textbox::y2#8 )
  (byte) textbox::y#3 ← phi( textbox::@5/(byte) textbox::y#7 )
  (byte) textbox::x1#7 ← phi( textbox::@5/(byte) textbox::x1#6 )
  (byte) textbox::x#2 ← (byte) textbox::x1#7
  (byte) textbox::y#1 ← ++ (byte) textbox::y#3
  (bool~) textbox::$21 ← (byte) textbox::y#1 == (byte) textbox::y2#6
  (bool~) textbox::$22 ← ! (bool~) textbox::$21
  if((bool~) textbox::$22) goto textbox::@7
  to:textbox::@return
textbox::@7: scope:[textbox]  from textbox::@6
  (byte) textbox::y2#11 ← phi( textbox::@6/(byte) textbox::y2#6 )
  (byte) textbox::x1#12 ← phi( textbox::@6/(byte) textbox::x1#7 )
  (byte*) textbox::text#14 ← phi( textbox::@6/(byte*) textbox::text#16 )
  (byte) textbox::x2#9 ← phi( textbox::@6/(byte) textbox::x2#14 )
  (byte) textbox::x#8 ← phi( textbox::@6/(byte) textbox::x#2 )
  (byte) textbox::i#7 ← phi( textbox::@6/(byte) textbox::i#10 )
  (byte) textbox::y#4 ← phi( textbox::@6/(byte) textbox::y#1 )
  (number~) textbox::$23 ← (byte) textbox::y#4 * (number) $28
  (word) textbox::z#1 ← (number~) textbox::$23
  to:textbox::@2
textbox::@8: scope:[textbox]  from textbox::@2 textbox::@9
  (byte) textbox::y2#13 ← phi( textbox::@2/(byte) textbox::y2#9 textbox::@9/(byte) textbox::y2#16 )
  (byte) textbox::y#11 ← phi( textbox::@2/(byte) textbox::y#8 textbox::@9/(byte) textbox::y#6 )
  (byte) textbox::x1#15 ← phi( textbox::@2/(byte) textbox::x1#10 textbox::@9/(byte) textbox::x1#16 )
  (byte) textbox::x2#11 ← phi( textbox::@2/(byte) textbox::x2#6 textbox::@9/(byte) textbox::x2#15 )
  (byte) textbox::x#7 ← phi( textbox::@2/(byte) textbox::x#1 textbox::@9/(byte) textbox::x#12 )
  (word) textbox::z#4 ← phi( textbox::@2/(word) textbox::z#5 textbox::@9/(word) textbox::z#2 )
  (byte) textbox::i#5 ← phi( textbox::@2/(byte) textbox::i#1 textbox::@9/(byte) textbox::i#8 )
  (byte*) textbox::text#6 ← phi( textbox::@2/(byte*) textbox::text#10 textbox::@9/(byte*) textbox::text#11 )
  (bool~) textbox::$30 ← *((byte*) textbox::text#6 + (byte) textbox::i#5) != (number) 0
  if((bool~) textbox::$30) goto textbox::@1
  to:textbox::@return
textbox::@11: scope:[textbox]  from textbox::@2
  (byte) textbox::x2#16 ← phi( textbox::@2/(byte) textbox::x2#6 )
  (byte) textbox::i#11 ← phi( textbox::@2/(byte) textbox::i#1 )
  (byte*) textbox::text#15 ← phi( textbox::@2/(byte*) textbox::text#10 )
  (byte) textbox::y2#7 ← phi( textbox::@2/(byte) textbox::y2#9 )
  (byte) textbox::y#5 ← phi( textbox::@2/(byte) textbox::y#8 )
  (byte) textbox::x1#8 ← phi( textbox::@2/(byte) textbox::x1#10 )
  (number~) textbox::$26 ← (byte) textbox::x1#8 + (number) 1
  (byte) textbox::x#3 ← (number~) textbox::$26
  (byte) textbox::y#2 ← ++ (byte) textbox::y#5
  (bool~) textbox::$27 ← (byte) textbox::y#2 == (byte) textbox::y2#7
  (bool~) textbox::$28 ← ! (bool~) textbox::$27
  if((bool~) textbox::$28) goto textbox::@9
  to:textbox::@return
textbox::@9: scope:[textbox]  from textbox::@11
  (byte) textbox::y2#16 ← phi( textbox::@11/(byte) textbox::y2#7 )
  (byte) textbox::x1#16 ← phi( textbox::@11/(byte) textbox::x1#8 )
  (byte) textbox::x2#15 ← phi( textbox::@11/(byte) textbox::x2#16 )
  (byte) textbox::x#12 ← phi( textbox::@11/(byte) textbox::x#3 )
  (byte) textbox::i#8 ← phi( textbox::@11/(byte) textbox::i#11 )
  (byte*) textbox::text#11 ← phi( textbox::@11/(byte*) textbox::text#15 )
  (byte) textbox::y#6 ← phi( textbox::@11/(byte) textbox::y#2 )
  (number~) textbox::$29 ← (byte) textbox::y#6 * (number) $28
  (word) textbox::z#2 ← (number~) textbox::$29
  to:textbox::@8

(void()) draw_window((byte) draw_window::x1 , (byte) draw_window::y1 , (byte) draw_window::x2 , (byte) draw_window::y2)
draw_window: scope:[draw_window]  from textbox
  (byte) draw_window::x2#6 ← phi( textbox/(byte) draw_window::x2#0 )
  (byte) draw_window::x1#1 ← phi( textbox/(byte) draw_window::x1#0 )
  (byte) draw_window::y2#1 ← phi( textbox/(byte) draw_window::y2#0 )
  (byte) draw_window::y1#1 ← phi( textbox/(byte) draw_window::y1#0 )
  (number~) draw_window::$0 ← (byte) draw_window::y1#1 * (number) $28
  (word) draw_window::z#0 ← (number~) draw_window::$0
  (number~) draw_window::$1 ← (byte) draw_window::y2#1 * (number) $28
  (word) draw_window::q#0 ← (number~) draw_window::$1
  (number~) draw_window::$12 ← (byte) draw_window::x1#1 + (number) 1
  (byte) draw_window::x#0 ← (number~) draw_window::$12
  to:draw_window::@1
draw_window::@1: scope:[draw_window]  from draw_window draw_window::@2
  (byte) draw_window::y2#9 ← phi( draw_window/(byte) draw_window::y2#1 draw_window::@2/(byte) draw_window::y2#11 )
  (byte) draw_window::y1#5 ← phi( draw_window/(byte) draw_window::y1#1 draw_window::@2/(byte) draw_window::y1#7 )
  (byte) draw_window::x1#6 ← phi( draw_window/(byte) draw_window::x1#1 draw_window::@2/(byte) draw_window::x1#9 )
  (word) draw_window::q#3 ← phi( draw_window/(word) draw_window::q#0 draw_window::@2/(word) draw_window::q#1 )
  (word) draw_window::z#6 ← phi( draw_window/(word) draw_window::z#0 draw_window::@2/(word) draw_window::z#3 )
  (byte) draw_window::x2#1 ← phi( draw_window/(byte) draw_window::x2#6 draw_window::@2/(byte) draw_window::x2#7 )
  (byte) draw_window::x#2 ← phi( draw_window/(byte) draw_window::x#0 draw_window::@2/(byte) draw_window::x#1 )
  (bool~) draw_window::$13 ← (byte) draw_window::x#2 < (byte) draw_window::x2#1
  if((bool~) draw_window::$13) goto draw_window::@2
  to:draw_window::@3
draw_window::@2: scope:[draw_window]  from draw_window::@1
  (byte) draw_window::y2#11 ← phi( draw_window::@1/(byte) draw_window::y2#9 )
  (byte) draw_window::y1#7 ← phi( draw_window::@1/(byte) draw_window::y1#5 )
  (byte) draw_window::x1#9 ← phi( draw_window::@1/(byte) draw_window::x1#6 )
  (byte) draw_window::x2#7 ← phi( draw_window::@1/(byte) draw_window::x2#1 )
  (word) draw_window::q#1 ← phi( draw_window::@1/(word) draw_window::q#3 )
  (byte) draw_window::x#3 ← phi( draw_window::@1/(byte) draw_window::x#2 )
  (word) draw_window::z#3 ← phi( draw_window::@1/(word) draw_window::z#6 )
  (word~) draw_window::$14 ← (word) draw_window::z#3 + (byte) draw_window::x#3
  *((const nomodify byte*) screen + (word~) draw_window::$14) ← (number) $43
  (word~) draw_window::$15 ← (word) draw_window::q#1 + (byte) draw_window::x#3
  *((const nomodify byte*) screen + (word~) draw_window::$15) ← (number) $43
  (byte) draw_window::x#1 ← ++ (byte) draw_window::x#3
  to:draw_window::@1
draw_window::@3: scope:[draw_window]  from draw_window::@1
  (word) draw_window::q#5 ← phi( draw_window::@1/(word) draw_window::q#3 )
  (byte) draw_window::y2#5 ← phi( draw_window::@1/(byte) draw_window::y2#9 )
  (byte) draw_window::y1#2 ← phi( draw_window::@1/(byte) draw_window::y1#5 )
  (byte) draw_window::x2#2 ← phi( draw_window::@1/(byte) draw_window::x2#1 )
  (byte) draw_window::x1#2 ← phi( draw_window::@1/(byte) draw_window::x1#6 )
  (word) draw_window::z#4 ← phi( draw_window::@1/(word) draw_window::z#6 )
  (word~) draw_window::$2 ← (word) draw_window::z#4 + (byte) draw_window::x1#2
  *((const nomodify byte*) screen + (word~) draw_window::$2) ← (number) $55
  (word~) draw_window::$3 ← (word) draw_window::z#4 + (byte) draw_window::x2#2
  *((const nomodify byte*) screen + (word~) draw_window::$3) ← (number) $49
  (number~) draw_window::$16 ← (byte) draw_window::y1#2 + (number) 1
  (byte) draw_window::y#0 ← (number~) draw_window::$16
  to:draw_window::@4
draw_window::@4: scope:[draw_window]  from draw_window::@3 draw_window::@5
  (byte) draw_window::y1#6 ← phi( draw_window::@3/(byte) draw_window::y1#2 draw_window::@5/(byte) draw_window::y1#8 )
  (word) draw_window::q#4 ← phi( draw_window::@3/(word) draw_window::q#5 draw_window::@5/(word) draw_window::q#6 )
  (byte) draw_window::x2#8 ← phi( draw_window::@3/(byte) draw_window::x2#2 draw_window::@5/(byte) draw_window::x2#3 )
  (byte) draw_window::x1#7 ← phi( draw_window::@3/(byte) draw_window::x1#2 draw_window::@5/(byte) draw_window::x1#3 )
  (byte) draw_window::y2#2 ← phi( draw_window::@3/(byte) draw_window::y2#5 draw_window::@5/(byte) draw_window::y2#6 )
  (byte) draw_window::y#2 ← phi( draw_window::@3/(byte) draw_window::y#0 draw_window::@5/(byte) draw_window::y#1 )
  (bool~) draw_window::$17 ← (byte) draw_window::y#2 < (byte) draw_window::y2#2
  if((bool~) draw_window::$17) goto draw_window::@5
  to:draw_window::@6
draw_window::@5: scope:[draw_window]  from draw_window::@4
  (byte) draw_window::y1#8 ← phi( draw_window::@4/(byte) draw_window::y1#6 )
  (word) draw_window::q#6 ← phi( draw_window::@4/(word) draw_window::q#4 )
  (byte) draw_window::y2#6 ← phi( draw_window::@4/(byte) draw_window::y2#2 )
  (byte) draw_window::x2#3 ← phi( draw_window::@4/(byte) draw_window::x2#8 )
  (byte) draw_window::x1#3 ← phi( draw_window::@4/(byte) draw_window::x1#7 )
  (byte) draw_window::y#3 ← phi( draw_window::@4/(byte) draw_window::y#2 )
  (number~) draw_window::$18 ← (byte) draw_window::y#3 * (number) $28
  (word) draw_window::z#1 ← (number~) draw_window::$18
  (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#3
  *((const nomodify byte*) screen + (word~) draw_window::$19) ← (number) $42
  (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#3
  *((const nomodify byte*) screen + (word~) draw_window::$20) ← (number) $42
  (byte) draw_window::y#1 ← ++ (byte) draw_window::y#3
  to:draw_window::@4
draw_window::@6: scope:[draw_window]  from draw_window::@4
  (byte) draw_window::y1#3 ← phi( draw_window::@4/(byte) draw_window::y1#6 )
  (byte) draw_window::y2#3 ← phi( draw_window::@4/(byte) draw_window::y2#2 )
  (byte) draw_window::x2#4 ← phi( draw_window::@4/(byte) draw_window::x2#8 )
  (byte) draw_window::x1#4 ← phi( draw_window::@4/(byte) draw_window::x1#7 )
  (word) draw_window::q#2 ← phi( draw_window::@4/(word) draw_window::q#4 )
  (word~) draw_window::$4 ← (word) draw_window::q#2 + (byte) draw_window::x1#4
  *((const nomodify byte*) screen + (word~) draw_window::$4) ← (number) $4a
  (word~) draw_window::$5 ← (word) draw_window::q#2 + (byte) draw_window::x2#4
  *((const nomodify byte*) screen + (word~) draw_window::$5) ← (number) $4b
  (byte~) draw_window::$6 ← (byte) draw_window::x2#4 - (byte) draw_window::x1#4
  (bool~) draw_window::$7 ← (byte~) draw_window::$6 > (number) 1
  (byte~) draw_window::$8 ← (byte) draw_window::y2#3 - (byte) draw_window::y1#3
  (bool~) draw_window::$9 ← (byte~) draw_window::$8 > (number) 1
  (bool~) draw_window::$10 ← (bool~) draw_window::$7 && (bool~) draw_window::$9
  (bool~) draw_window::$11 ← ! (bool~) draw_window::$10
  if((bool~) draw_window::$11) goto draw_window::@return
  to:draw_window::@7
draw_window::@7: scope:[draw_window]  from draw_window::@6
  (byte) draw_window::x2#13 ← phi( draw_window::@6/(byte) draw_window::x2#4 )
  (byte) draw_window::x1#11 ← phi( draw_window::@6/(byte) draw_window::x1#4 )
  (byte) draw_window::y2#8 ← phi( draw_window::@6/(byte) draw_window::y2#3 )
  (byte) draw_window::y1#4 ← phi( draw_window::@6/(byte) draw_window::y1#3 )
  (number~) draw_window::$21 ← (byte) draw_window::y1#4 + (number) 1
  (byte) draw_window::y3#0 ← (number~) draw_window::$21
  to:draw_window::@8
draw_window::@8: scope:[draw_window]  from draw_window::@12 draw_window::@7
  (byte) draw_window::x2#11 ← phi( draw_window::@12/(byte) draw_window::x2#12 draw_window::@7/(byte) draw_window::x2#13 )
  (byte) draw_window::x1#8 ← phi( draw_window::@12/(byte) draw_window::x1#10 draw_window::@7/(byte) draw_window::x1#11 )
  (byte) draw_window::y2#4 ← phi( draw_window::@12/(byte) draw_window::y2#7 draw_window::@7/(byte) draw_window::y2#8 )
  (byte) draw_window::y3#2 ← phi( draw_window::@12/(byte) draw_window::y3#1 draw_window::@7/(byte) draw_window::y3#0 )
  (bool~) draw_window::$22 ← (byte) draw_window::y3#2 < (byte) draw_window::y2#4
  if((bool~) draw_window::$22) goto draw_window::@9
  to:draw_window::@return
draw_window::@9: scope:[draw_window]  from draw_window::@8
  (byte) draw_window::y2#13 ← phi( draw_window::@8/(byte) draw_window::y2#4 )
  (byte) draw_window::x2#10 ← phi( draw_window::@8/(byte) draw_window::x2#11 )
  (byte) draw_window::x1#5 ← phi( draw_window::@8/(byte) draw_window::x1#8 )
  (byte) draw_window::y3#3 ← phi( draw_window::@8/(byte) draw_window::y3#2 )
  (number~) draw_window::$23 ← (byte) draw_window::y3#3 * (number) $28
  (word) draw_window::z#2 ← (number~) draw_window::$23
  (number~) draw_window::$24 ← (byte) draw_window::x1#5 + (number) 1
  (byte) draw_window::x3#0 ← (number~) draw_window::$24
  to:draw_window::@10
draw_window::@10: scope:[draw_window]  from draw_window::@11 draw_window::@9
  (byte) draw_window::x1#12 ← phi( draw_window::@11/(byte) draw_window::x1#13 draw_window::@9/(byte) draw_window::x1#5 )
  (byte) draw_window::y2#10 ← phi( draw_window::@11/(byte) draw_window::y2#12 draw_window::@9/(byte) draw_window::y2#13 )
  (byte) draw_window::y3#5 ← phi( draw_window::@11/(byte) draw_window::y3#6 draw_window::@9/(byte) draw_window::y3#3 )
  (word) draw_window::z#7 ← phi( draw_window::@11/(word) draw_window::z#5 draw_window::@9/(word) draw_window::z#2 )
  (byte) draw_window::x2#5 ← phi( draw_window::@11/(byte) draw_window::x2#9 draw_window::@9/(byte) draw_window::x2#10 )
  (byte) draw_window::x3#2 ← phi( draw_window::@11/(byte) draw_window::x3#1 draw_window::@9/(byte) draw_window::x3#0 )
  (bool~) draw_window::$25 ← (byte) draw_window::x3#2 < (byte) draw_window::x2#5
  if((bool~) draw_window::$25) goto draw_window::@11
  to:draw_window::@12
draw_window::@11: scope:[draw_window]  from draw_window::@10
  (byte) draw_window::x1#13 ← phi( draw_window::@10/(byte) draw_window::x1#12 )
  (byte) draw_window::y2#12 ← phi( draw_window::@10/(byte) draw_window::y2#10 )
  (byte) draw_window::y3#6 ← phi( draw_window::@10/(byte) draw_window::y3#5 )
  (byte) draw_window::x2#9 ← phi( draw_window::@10/(byte) draw_window::x2#5 )
  (byte) draw_window::x3#3 ← phi( draw_window::@10/(byte) draw_window::x3#2 )
  (word) draw_window::z#5 ← phi( draw_window::@10/(word) draw_window::z#7 )
  (word~) draw_window::$26 ← (word) draw_window::z#5 + (byte) draw_window::x3#3
  *((const nomodify byte*) screen + (word~) draw_window::$26) ← (number) $20
  (byte) draw_window::x3#1 ← ++ (byte) draw_window::x3#3
  to:draw_window::@10
draw_window::@12: scope:[draw_window]  from draw_window::@10
  (byte) draw_window::x2#12 ← phi( draw_window::@10/(byte) draw_window::x2#5 )
  (byte) draw_window::x1#10 ← phi( draw_window::@10/(byte) draw_window::x1#12 )
  (byte) draw_window::y2#7 ← phi( draw_window::@10/(byte) draw_window::y2#10 )
  (byte) draw_window::y3#4 ← phi( draw_window::@10/(byte) draw_window::y3#5 )
  (byte) draw_window::y3#1 ← ++ (byte) draw_window::y3#4
  to:draw_window::@8
draw_window::@return: scope:[draw_window]  from draw_window::@6 draw_window::@8
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) draw_window((byte) draw_window::x1 , (byte) draw_window::y1 , (byte) draw_window::x2 , (byte) draw_window::y2)
(number~) draw_window::$0
(number~) draw_window::$1
(bool~) draw_window::$10
(bool~) draw_window::$11
(number~) draw_window::$12
(bool~) draw_window::$13
(word~) draw_window::$14
(word~) draw_window::$15
(number~) draw_window::$16
(bool~) draw_window::$17
(number~) draw_window::$18
(word~) draw_window::$19
(word~) draw_window::$2
(word~) draw_window::$20
(number~) draw_window::$21
(bool~) draw_window::$22
(number~) draw_window::$23
(number~) draw_window::$24
(bool~) draw_window::$25
(word~) draw_window::$26
(word~) draw_window::$3
(word~) draw_window::$4
(word~) draw_window::$5
(byte~) draw_window::$6
(bool~) draw_window::$7
(byte~) draw_window::$8
(bool~) draw_window::$9
(label) draw_window::@1
(label) draw_window::@10
(label) draw_window::@11
(label) draw_window::@12
(label) draw_window::@2
(label) draw_window::@3
(label) draw_window::@4
(label) draw_window::@5
(label) draw_window::@6
(label) draw_window::@7
(label) draw_window::@8
(label) draw_window::@9
(label) draw_window::@return
(word) draw_window::q
(word) draw_window::q#0
(word) draw_window::q#1
(word) draw_window::q#2
(word) draw_window::q#3
(word) draw_window::q#4
(word) draw_window::q#5
(word) draw_window::q#6
(byte) draw_window::x
(byte) draw_window::x#0
(byte) draw_window::x#1
(byte) draw_window::x#2
(byte) draw_window::x#3
(byte) draw_window::x1
(byte) draw_window::x1#0
(byte) draw_window::x1#1
(byte) draw_window::x1#10
(byte) draw_window::x1#11
(byte) draw_window::x1#12
(byte) draw_window::x1#13
(byte) draw_window::x1#2
(byte) draw_window::x1#3
(byte) draw_window::x1#4
(byte) draw_window::x1#5
(byte) draw_window::x1#6
(byte) draw_window::x1#7
(byte) draw_window::x1#8
(byte) draw_window::x1#9
(byte) draw_window::x2
(byte) draw_window::x2#0
(byte) draw_window::x2#1
(byte) draw_window::x2#10
(byte) draw_window::x2#11
(byte) draw_window::x2#12
(byte) draw_window::x2#13
(byte) draw_window::x2#2
(byte) draw_window::x2#3
(byte) draw_window::x2#4
(byte) draw_window::x2#5
(byte) draw_window::x2#6
(byte) draw_window::x2#7
(byte) draw_window::x2#8
(byte) draw_window::x2#9
(byte) draw_window::x3
(byte) draw_window::x3#0
(byte) draw_window::x3#1
(byte) draw_window::x3#2
(byte) draw_window::x3#3
(byte) draw_window::y
(byte) draw_window::y#0
(byte) draw_window::y#1
(byte) draw_window::y#2
(byte) draw_window::y#3
(byte) draw_window::y1
(byte) draw_window::y1#0
(byte) draw_window::y1#1
(byte) draw_window::y1#2
(byte) draw_window::y1#3
(byte) draw_window::y1#4
(byte) draw_window::y1#5
(byte) draw_window::y1#6
(byte) draw_window::y1#7
(byte) draw_window::y1#8
(byte) draw_window::y2
(byte) draw_window::y2#0
(byte) draw_window::y2#1
(byte) draw_window::y2#10
(byte) draw_window::y2#11
(byte) draw_window::y2#12
(byte) draw_window::y2#13
(byte) draw_window::y2#2
(byte) draw_window::y2#3
(byte) draw_window::y2#4
(byte) draw_window::y2#5
(byte) draw_window::y2#6
(byte) draw_window::y2#7
(byte) draw_window::y2#8
(byte) draw_window::y2#9
(byte) draw_window::y3
(byte) draw_window::y3#0
(byte) draw_window::y3#1
(byte) draw_window::y3#2
(byte) draw_window::y3#3
(byte) draw_window::y3#4
(byte) draw_window::y3#5
(byte) draw_window::y3#6
(word) draw_window::z
(word) draw_window::z#0
(word) draw_window::z#1
(word) draw_window::z#2
(word) draw_window::z#3
(word) draw_window::z#4
(word) draw_window::z#5
(word) draw_window::z#6
(word) draw_window::z#7
(void()) main()
(bool~) main::$3
(byte~) main::$4
(number~) main::$5
(number~) main::$6
(bool~) main::$8
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(word) main::wait
(word) main::wait#0
(word) main::wait#1
(word) main::wait#2
(word) main::wait#3
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x#4
(byte) main::x#5
(byte) main::x#6
(byte) main::x#7
(const nomodify byte*) screen = (byte*)(number) $400
(const to_nomodify byte*) text[]  = (byte*) "this is a small test with word wrap, if a word is too long it moves it to the next line. isn't that supercalifragilisticexpialidocious? i think it's cool!"
(const to_nomodify byte*) text2[]  = (byte*) "textbox by scan of desire"
(void()) textbox((byte) textbox::x1 , (byte) textbox::y1 , (byte) textbox::x2 , (byte) textbox::y2 , (byte*) textbox::text)
(number~) textbox::$1
(bool~) textbox::$10
(number~) textbox::$11
(bool~) textbox::$12
(bool~) textbox::$13
(bool~) textbox::$14
(byte~) textbox::$15
(bool~) textbox::$16
(byte~) textbox::$17
(bool~) textbox::$18
(bool~) textbox::$19
(number~) textbox::$2
(bool~) textbox::$20
(bool~) textbox::$21
(bool~) textbox::$22
(number~) textbox::$23
(bool~) textbox::$24
(bool~) textbox::$25
(number~) textbox::$26
(bool~) textbox::$27
(bool~) textbox::$28
(number~) textbox::$29
(number~) textbox::$3
(bool~) textbox::$30
(word~) textbox::$31
(bool~) textbox::$4
(bool~) textbox::$5
(bool~) textbox::$6
(bool~) textbox::$7
(word~) textbox::$8
(bool~) textbox::$9
(label) textbox::@1
(label) textbox::@10
(label) textbox::@11
(label) textbox::@12
(label) textbox::@2
(label) textbox::@3
(label) textbox::@4
(label) textbox::@5
(label) textbox::@6
(label) textbox::@7
(label) textbox::@8
(label) textbox::@9
(label) textbox::@return
(byte) textbox::c
(byte) textbox::c#0
(byte) textbox::c#1
(byte) textbox::c#2
(byte) textbox::c#3
(byte) textbox::c#4
(byte) textbox::i
(byte) textbox::i#0
(byte) textbox::i#1
(byte) textbox::i#10
(byte) textbox::i#11
(byte) textbox::i#12
(byte) textbox::i#2
(byte) textbox::i#3
(byte) textbox::i#4
(byte) textbox::i#5
(byte) textbox::i#6
(byte) textbox::i#7
(byte) textbox::i#8
(byte) textbox::i#9
(byte) textbox::ls
(byte) textbox::ls#0
(byte) textbox::ls#1
(byte) textbox::ls#2
(byte) textbox::ls#3
(byte*) textbox::text
(byte*) textbox::text#0
(byte*) textbox::text#1
(byte*) textbox::text#10
(byte*) textbox::text#11
(byte*) textbox::text#12
(byte*) textbox::text#13
(byte*) textbox::text#14
(byte*) textbox::text#15
(byte*) textbox::text#16
(byte*) textbox::text#2
(byte*) textbox::text#3
(byte*) textbox::text#4
(byte*) textbox::text#5
(byte*) textbox::text#6
(byte*) textbox::text#7
(byte*) textbox::text#8
(byte*) textbox::text#9
(byte) textbox::x
(byte) textbox::x#0
(byte) textbox::x#1
(byte) textbox::x#10
(byte) textbox::x#11
(byte) textbox::x#12
(byte) textbox::x#2
(byte) textbox::x#3
(byte) textbox::x#4
(byte) textbox::x#5
(byte) textbox::x#6
(byte) textbox::x#7
(byte) textbox::x#8
(byte) textbox::x#9
(byte) textbox::x1
(byte) textbox::x1#0
(byte) textbox::x1#1
(byte) textbox::x1#10
(byte) textbox::x1#11
(byte) textbox::x1#12
(byte) textbox::x1#13
(byte) textbox::x1#14
(byte) textbox::x1#15
(byte) textbox::x1#16
(byte) textbox::x1#2
(byte) textbox::x1#3
(byte) textbox::x1#4
(byte) textbox::x1#5
(byte) textbox::x1#6
(byte) textbox::x1#7
(byte) textbox::x1#8
(byte) textbox::x1#9
(byte) textbox::x2
(byte) textbox::x2#0
(byte) textbox::x2#1
(byte) textbox::x2#10
(byte) textbox::x2#11
(byte) textbox::x2#12
(byte) textbox::x2#13
(byte) textbox::x2#14
(byte) textbox::x2#15
(byte) textbox::x2#16
(byte) textbox::x2#2
(byte) textbox::x2#3
(byte) textbox::x2#4
(byte) textbox::x2#5
(byte) textbox::x2#6
(byte) textbox::x2#7
(byte) textbox::x2#8
(byte) textbox::x2#9
(byte) textbox::y
(byte) textbox::y#0
(byte) textbox::y#1
(byte) textbox::y#10
(byte) textbox::y#11
(byte) textbox::y#12
(byte) textbox::y#13
(byte) textbox::y#2
(byte) textbox::y#3
(byte) textbox::y#4
(byte) textbox::y#5
(byte) textbox::y#6
(byte) textbox::y#7
(byte) textbox::y#8
(byte) textbox::y#9
(byte) textbox::y1
(byte) textbox::y1#0
(byte) textbox::y1#1
(byte) textbox::y1#2
(byte) textbox::y1#3
(byte) textbox::y1#4
(byte) textbox::y1#5
(byte) textbox::y2
(byte) textbox::y2#0
(byte) textbox::y2#1
(byte) textbox::y2#10
(byte) textbox::y2#11
(byte) textbox::y2#12
(byte) textbox::y2#13
(byte) textbox::y2#14
(byte) textbox::y2#15
(byte) textbox::y2#16
(byte) textbox::y2#2
(byte) textbox::y2#3
(byte) textbox::y2#4
(byte) textbox::y2#5
(byte) textbox::y2#6
(byte) textbox::y2#7
(byte) textbox::y2#8
(byte) textbox::y2#9
(word) textbox::z
(word) textbox::z#0
(word) textbox::z#1
(word) textbox::z#2
(word) textbox::z#3
(word) textbox::z#4
(word) textbox::z#5
(word) textbox::z#6
(word) textbox::z#7
(word) textbox::z#8
(word) textbox::z#9

Adding number conversion cast (unumber) $f in (bool~) main::$3 ← (byte) main::x#2 < (number) $f
Adding number conversion cast (unumber) 1 in (number~) main::$5 ← (byte~) main::$4 + (number) 1
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (byte~) main::$4 + (unumber)(number) 1
Adding number conversion cast (unumber) $a in (number~) main::$6 ← (byte) main::x#3 + (number) $a
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (byte) main::x#3 + (unumber)(number) $a
Adding number conversion cast (unumber) 0 in (byte) textbox::x1#1 ← (number) 0
Adding number conversion cast (unumber) $c in (byte) textbox::y1#1 ← (number) $c
Adding number conversion cast (unumber) $14 in (byte) textbox::x2#1 ← (number) $14
Adding number conversion cast (unumber) $18 in (byte) textbox::y2#1 ← (number) $18
Adding number conversion cast (unumber) 3 in (byte) textbox::x1#2 ← (number) 3
Adding number conversion cast (unumber) 3 in (byte) textbox::y1#2 ← (number) 3
Adding number conversion cast (unumber) $25 in (byte) textbox::x2#2 ← (number) $25
Adding number conversion cast (unumber) 9 in (byte) textbox::y2#2 ← (number) 9
Adding number conversion cast (unumber) $1e in (byte) textbox::x1#3 ← (number) $1e
Adding number conversion cast (unumber) 8 in (byte) textbox::y1#3 ← (number) 8
Adding number conversion cast (unumber) $27 in (byte) textbox::x2#3 ← (number) $27
Adding number conversion cast (unumber) $18 in (byte) textbox::y2#3 ← (number) $18
Adding number conversion cast (unumber) $88b8 in (bool~) main::$8 ← (word) main::wait#2 < (number) $88b8
Adding number conversion cast (unumber) 2 in (byte) main::x#1 ← (byte) main::x#4 + (number) 2
Adding number conversion cast (unumber) 1 in (number~) textbox::$1 ← (byte) textbox::y1#5 + (number) 1
Adding number conversion cast (unumber) textbox::$1 in (number~) textbox::$1 ← (byte) textbox::y1#5 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) textbox::$2 ← (byte) textbox::x1#5 + (number) 1
Adding number conversion cast (unumber) textbox::$2 in (number~) textbox::$2 ← (byte) textbox::x1#5 + (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (number~) textbox::$3 ← (word~) textbox::$31 * (number) $28
Adding number conversion cast (unumber) textbox::$3 in (number~) textbox::$3 ← (word~) textbox::$31 * (unumber)(number) $28
Adding number conversion cast (unumber) $20 in (bool~) textbox::$9 ← *((byte*) textbox::text#4 + (byte) textbox::i#2) == (number) $20
Adding number conversion cast (unumber) 1 in (number~) textbox::$11 ← (byte) textbox::i#4 + (number) 1
Adding number conversion cast (unumber) textbox::$11 in (number~) textbox::$11 ← (byte) textbox::i#4 + (unumber)(number) 1
Adding number conversion cast (unumber) $20 in (bool~) textbox::$12 ← *((byte*) textbox::text#5 + (byte) textbox::ls#2) != (number) $20
Adding number conversion cast (unumber) 0 in (bool~) textbox::$13 ← *((byte*) textbox::text#5 + (byte) textbox::ls#2) != (number) 0
Adding number conversion cast (unumber) $28 in (number~) textbox::$23 ← (byte) textbox::y#4 * (number) $28
Adding number conversion cast (unumber) textbox::$23 in (number~) textbox::$23 ← (byte) textbox::y#4 * (unumber)(number) $28
Adding number conversion cast (unumber) 0 in (bool~) textbox::$30 ← *((byte*) textbox::text#6 + (byte) textbox::i#5) != (number) 0
Adding number conversion cast (unumber) 1 in (number~) textbox::$26 ← (byte) textbox::x1#8 + (number) 1
Adding number conversion cast (unumber) textbox::$26 in (number~) textbox::$26 ← (byte) textbox::x1#8 + (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (number~) textbox::$29 ← (byte) textbox::y#6 * (number) $28
Adding number conversion cast (unumber) textbox::$29 in (number~) textbox::$29 ← (byte) textbox::y#6 * (unumber)(number) $28
Adding number conversion cast (unumber) $28 in (number~) draw_window::$0 ← (byte) draw_window::y1#1 * (number) $28
Adding number conversion cast (unumber) draw_window::$0 in (number~) draw_window::$0 ← (byte) draw_window::y1#1 * (unumber)(number) $28
Adding number conversion cast (unumber) $28 in (number~) draw_window::$1 ← (byte) draw_window::y2#1 * (number) $28
Adding number conversion cast (unumber) draw_window::$1 in (number~) draw_window::$1 ← (byte) draw_window::y2#1 * (unumber)(number) $28
Adding number conversion cast (unumber) 1 in (number~) draw_window::$12 ← (byte) draw_window::x1#1 + (number) 1
Adding number conversion cast (unumber) draw_window::$12 in (number~) draw_window::$12 ← (byte) draw_window::x1#1 + (unumber)(number) 1
Adding number conversion cast (unumber) $43 in *((const nomodify byte*) screen + (word~) draw_window::$14) ← (number) $43
Adding number conversion cast (unumber) $43 in *((const nomodify byte*) screen + (word~) draw_window::$15) ← (number) $43
Adding number conversion cast (unumber) $55 in *((const nomodify byte*) screen + (word~) draw_window::$2) ← (number) $55
Adding number conversion cast (unumber) $49 in *((const nomodify byte*) screen + (word~) draw_window::$3) ← (number) $49
Adding number conversion cast (unumber) 1 in (number~) draw_window::$16 ← (byte) draw_window::y1#2 + (number) 1
Adding number conversion cast (unumber) draw_window::$16 in (number~) draw_window::$16 ← (byte) draw_window::y1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (number~) draw_window::$18 ← (byte) draw_window::y#3 * (number) $28
Adding number conversion cast (unumber) draw_window::$18 in (number~) draw_window::$18 ← (byte) draw_window::y#3 * (unumber)(number) $28
Adding number conversion cast (unumber) $42 in *((const nomodify byte*) screen + (word~) draw_window::$19) ← (number) $42
Adding number conversion cast (unumber) $42 in *((const nomodify byte*) screen + (word~) draw_window::$20) ← (number) $42
Adding number conversion cast (unumber) $4a in *((const nomodify byte*) screen + (word~) draw_window::$4) ← (number) $4a
Adding number conversion cast (unumber) $4b in *((const nomodify byte*) screen + (word~) draw_window::$5) ← (number) $4b
Adding number conversion cast (unumber) 1 in (bool~) draw_window::$7 ← (byte~) draw_window::$6 > (number) 1
Adding number conversion cast (unumber) 1 in (bool~) draw_window::$9 ← (byte~) draw_window::$8 > (number) 1
Adding number conversion cast (unumber) 1 in (number~) draw_window::$21 ← (byte) draw_window::y1#4 + (number) 1
Adding number conversion cast (unumber) draw_window::$21 in (number~) draw_window::$21 ← (byte) draw_window::y1#4 + (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (number~) draw_window::$23 ← (byte) draw_window::y3#3 * (number) $28
Adding number conversion cast (unumber) draw_window::$23 in (number~) draw_window::$23 ← (byte) draw_window::y3#3 * (unumber)(number) $28
Adding number conversion cast (unumber) 1 in (number~) draw_window::$24 ← (byte) draw_window::x1#5 + (number) 1
Adding number conversion cast (unumber) draw_window::$24 in (number~) draw_window::$24 ← (byte) draw_window::x1#5 + (unumber)(number) 1
Adding number conversion cast (unumber) $20 in *((const nomodify byte*) screen + (word~) draw_window::$26) ← (number) $20
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) textbox::x1#1 ← (unumber)(number) 0
Inlining cast (byte) textbox::y1#1 ← (unumber)(number) $c
Inlining cast (byte) textbox::x2#1 ← (unumber)(number) $14
Inlining cast (byte) textbox::y2#1 ← (unumber)(number) $18
Inlining cast (byte) textbox::x1#2 ← (unumber)(number) 3
Inlining cast (byte) textbox::y1#2 ← (unumber)(number) 3
Inlining cast (byte) textbox::x2#2 ← (unumber)(number) $25
Inlining cast (byte) textbox::y2#2 ← (unumber)(number) 9
Inlining cast (byte) textbox::x1#3 ← (unumber)(number) $1e
Inlining cast (byte) textbox::y1#3 ← (unumber)(number) 8
Inlining cast (byte) textbox::x2#3 ← (unumber)(number) $27
Inlining cast (byte) textbox::y2#3 ← (unumber)(number) $18
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$14) ← (unumber)(number) $43
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$15) ← (unumber)(number) $43
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$2) ← (unumber)(number) $55
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$3) ← (unumber)(number) $49
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$19) ← (unumber)(number) $42
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$20) ← (unumber)(number) $42
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$4) ← (unumber)(number) $4a
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$5) ← (unumber)(number) $4b
Inlining cast *((const nomodify byte*) screen + (word~) draw_window::$26) ← (unumber)(number) $20
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast $c
Simplifying constant integer cast $14
Simplifying constant integer cast $18
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast $25
Simplifying constant integer cast 9
Simplifying constant integer cast $1e
Simplifying constant integer cast 8
Simplifying constant integer cast $27
Simplifying constant integer cast $18
Simplifying constant integer cast $88b8
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast $20
Simplifying constant integer cast 1
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast $43
Simplifying constant integer cast $43
Simplifying constant integer cast $55
Simplifying constant integer cast $49
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast $42
Simplifying constant integer cast $42
Simplifying constant integer cast $4a
Simplifying constant integer cast $4b
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast $20
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $25
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $18
Finalized unsigned number type (word) $88b8
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $43
Finalized unsigned number type (byte) $43
Finalized unsigned number type (byte) $55
Finalized unsigned number type (byte) $49
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $42
Finalized unsigned number type (byte) $42
Finalized unsigned number type (byte) $4a
Finalized unsigned number type (byte) $4b
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $20
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$5 ← (byte~) main::$4 + (byte) 1
Inferred type updated to byte in (unumber~) main::$6 ← (byte) main::x#3 + (byte) $a
Inferred type updated to byte in (unumber~) textbox::$1 ← (byte) textbox::y1#5 + (byte) 1
Inferred type updated to byte in (unumber~) textbox::$2 ← (byte) textbox::x1#5 + (byte) 1
Inferred type updated to word in (unumber~) textbox::$3 ← (word~) textbox::$31 * (byte) $28
Inferred type updated to byte in (unumber~) textbox::$11 ← (byte) textbox::i#4 + (byte) 1
Inferred type updated to byte in (unumber~) textbox::$23 ← (byte) textbox::y#4 * (byte) $28
Inferred type updated to byte in (unumber~) textbox::$26 ← (byte) textbox::x1#8 + (byte) 1
Inferred type updated to byte in (unumber~) textbox::$29 ← (byte) textbox::y#6 * (byte) $28
Inferred type updated to byte in (unumber~) draw_window::$0 ← (byte) draw_window::y1#1 * (byte) $28
Inferred type updated to byte in (unumber~) draw_window::$1 ← (byte) draw_window::y2#1 * (byte) $28
Inferred type updated to byte in (unumber~) draw_window::$12 ← (byte) draw_window::x1#1 + (byte) 1
Inferred type updated to byte in (unumber~) draw_window::$16 ← (byte) draw_window::y1#2 + (byte) 1
Inferred type updated to byte in (unumber~) draw_window::$18 ← (byte) draw_window::y#3 * (byte) $28
Inferred type updated to byte in (unumber~) draw_window::$21 ← (byte) draw_window::y1#4 + (byte) 1
Inferred type updated to byte in (unumber~) draw_window::$23 ← (byte) draw_window::y3#3 * (byte) $28
Inferred type updated to byte in (unumber~) draw_window::$24 ← (byte) draw_window::x1#5 + (byte) 1
Inversing boolean not [68] (bool~) textbox::$10 ← *((byte*) textbox::text#4 + (byte) textbox::i#2) != (byte) $20 from [67] (bool~) textbox::$9 ← *((byte*) textbox::text#4 + (byte) textbox::i#2) == (byte) $20
Inversing boolean not [74] (bool~) textbox::$25 ← (byte) textbox::x#1 != (byte) textbox::x2#6 from [73] (bool~) textbox::$24 ← (byte) textbox::x#1 == (byte) textbox::x2#6
Inversing boolean not [100] (bool~) textbox::$22 ← (byte) textbox::y#1 != (byte) textbox::y2#6 from [99] (bool~) textbox::$21 ← (byte) textbox::y#1 == (byte) textbox::y2#6
Inversing boolean not [113] (bool~) textbox::$28 ← (byte) textbox::y#2 != (byte) textbox::y2#7 from [112] (bool~) textbox::$27 ← (byte) textbox::y#2 == (byte) textbox::y2#7
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::x#2 = main::x#3 main::x#7 
Alias textbox::x2#0 = main::$5 
Alias textbox::y2#0 = main::$6 
Alias main::wait#2 = main::wait#3 
Alias main::x#4 = main::x#6 main::x#5 
Alias textbox::y1#4 = textbox::y1#5 
Alias textbox::x1#4 = textbox::x1#5 
Alias textbox::x2#4 = textbox::x2#5 
Alias textbox::y2#4 = textbox::y2#5 
Alias textbox::text#12 = textbox::text#7 
Alias textbox::y#0 = textbox::$1 
Alias textbox::x#0 = textbox::$2 
Alias textbox::z#0 = textbox::$3 
Alias textbox::i#2 = textbox::i#4 
Alias textbox::text#4 = textbox::text#8 
Alias textbox::x#10 = textbox::x#4 
Alias textbox::x2#12 = textbox::x2#8 
Alias textbox::x1#11 = textbox::x1#13 
Alias textbox::y#12 = textbox::y#9 
Alias textbox::y2#10 = textbox::y2#14 
Alias textbox::z#3 = textbox::z#8 
Alias textbox::ls#0 = textbox::$11 
Alias textbox::ls#2 = textbox::ls#3 
Alias textbox::c#2 = textbox::c#4 textbox::c#3 
Alias textbox::text#13 = textbox::text#9 textbox::text#5 textbox::text#16 textbox::text#14 
Alias textbox::x#11 = textbox::x#9 textbox::x#6 
Alias textbox::x2#10 = textbox::x2#13 textbox::x2#7 textbox::x2#14 textbox::x2#9 
Alias textbox::x1#12 = textbox::x1#14 textbox::x1#9 textbox::x1#6 textbox::x1#7 textbox::x#2 textbox::x#8 
Alias textbox::i#10 = textbox::i#12 textbox::i#9 textbox::i#6 textbox::i#7 
Alias textbox::y#10 = textbox::y#13 textbox::y#7 textbox::y#3 
Alias textbox::y2#11 = textbox::y2#15 textbox::y2#12 textbox::y2#8 textbox::y2#6 
Alias textbox::z#6 = textbox::z#9 textbox::z#7 
Alias textbox::y#1 = textbox::y#4 
Alias textbox::z#1 = textbox::$23 
Alias textbox::x1#10 = textbox::x1#8 textbox::x1#16 
Alias textbox::y#5 = textbox::y#8 
Alias textbox::y2#16 = textbox::y2#7 textbox::y2#9 
Alias textbox::text#10 = textbox::text#15 textbox::text#11 
Alias textbox::i#1 = textbox::i#11 textbox::i#8 
Alias textbox::x2#15 = textbox::x2#16 textbox::x2#6 
Alias textbox::x#12 = textbox::x#3 textbox::$26 
Alias textbox::y#2 = textbox::y#6 
Alias textbox::z#2 = textbox::$29 
Alias draw_window::z#0 = draw_window::$0 
Alias draw_window::q#0 = draw_window::$1 
Alias draw_window::x#0 = draw_window::$12 
Alias draw_window::z#3 = draw_window::z#6 draw_window::z#4 
Alias draw_window::x#2 = draw_window::x#3 
Alias draw_window::q#1 = draw_window::q#3 draw_window::q#5 
Alias draw_window::x2#1 = draw_window::x2#7 draw_window::x2#2 
Alias draw_window::x1#2 = draw_window::x1#9 draw_window::x1#6 
Alias draw_window::y1#2 = draw_window::y1#7 draw_window::y1#5 
Alias draw_window::y2#11 = draw_window::y2#9 draw_window::y2#5 
Alias draw_window::y#0 = draw_window::$16 
Alias draw_window::y#2 = draw_window::y#3 
Alias draw_window::x1#11 = draw_window::x1#3 draw_window::x1#7 draw_window::x1#4 
Alias draw_window::x2#13 = draw_window::x2#3 draw_window::x2#8 draw_window::x2#4 
Alias draw_window::y2#2 = draw_window::y2#6 draw_window::y2#3 draw_window::y2#8 
Alias draw_window::q#2 = draw_window::q#6 draw_window::q#4 
Alias draw_window::y1#3 = draw_window::y1#8 draw_window::y1#6 draw_window::y1#4 
Alias draw_window::z#1 = draw_window::$18 
Alias draw_window::y3#0 = draw_window::$21 
Alias draw_window::y3#2 = draw_window::y3#3 
Alias draw_window::x1#5 = draw_window::x1#8 
Alias draw_window::x2#10 = draw_window::x2#11 
Alias draw_window::y2#13 = draw_window::y2#4 
Alias draw_window::z#2 = draw_window::$23 
Alias draw_window::x3#0 = draw_window::$24 
Alias draw_window::z#5 = draw_window::z#7 
Alias draw_window::x3#2 = draw_window::x3#3 
Alias draw_window::x2#12 = draw_window::x2#9 draw_window::x2#5 
Alias draw_window::y3#4 = draw_window::y3#6 draw_window::y3#5 
Alias draw_window::y2#10 = draw_window::y2#12 draw_window::y2#7 
Alias draw_window::x1#10 = draw_window::x1#13 draw_window::x1#12 
Successful SSA optimization Pass2AliasElimination
Alias textbox::text#10 = textbox::text#6 
Alias textbox::i#1 = textbox::i#5 
Alias textbox::x2#11 = textbox::x2#15 
Alias textbox::x1#10 = textbox::x1#15 
Alias textbox::y2#13 = textbox::y2#16 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::x#4 (byte) main::x#2
Identical Phi Values (byte*) textbox::text#13 (byte*) textbox::text#4
Identical Phi Values (byte) textbox::x#11 (byte) textbox::x#10
Identical Phi Values (byte) textbox::x2#10 (byte) textbox::x2#12
Identical Phi Values (byte) textbox::x1#12 (byte) textbox::x1#11
Identical Phi Values (byte) textbox::i#10 (byte) textbox::i#2
Identical Phi Values (byte) textbox::y#10 (byte) textbox::y#12
Identical Phi Values (byte) textbox::y2#11 (byte) textbox::y2#10
Identical Phi Values (word) textbox::z#6 (word) textbox::z#3
Identical Phi Values (byte) draw_window::y1#1 (byte) draw_window::y1#0
Identical Phi Values (byte) draw_window::y2#1 (byte) draw_window::y2#0
Identical Phi Values (byte) draw_window::x1#1 (byte) draw_window::x1#0
Identical Phi Values (byte) draw_window::x2#6 (byte) draw_window::x2#0
Identical Phi Values (byte) draw_window::x2#1 (byte) draw_window::x2#6
Identical Phi Values (word) draw_window::z#3 (word) draw_window::z#0
Identical Phi Values (word) draw_window::q#1 (word) draw_window::q#0
Identical Phi Values (byte) draw_window::x1#2 (byte) draw_window::x1#1
Identical Phi Values (byte) draw_window::y1#2 (byte) draw_window::y1#1
Identical Phi Values (byte) draw_window::y2#11 (byte) draw_window::y2#1
Identical Phi Values (byte) draw_window::y2#2 (byte) draw_window::y2#11
Identical Phi Values (byte) draw_window::x1#11 (byte) draw_window::x1#2
Identical Phi Values (byte) draw_window::x2#13 (byte) draw_window::x2#1
Identical Phi Values (word) draw_window::q#2 (word) draw_window::q#1
Identical Phi Values (byte) draw_window::y1#3 (byte) draw_window::y1#2
Identical Phi Values (byte) draw_window::x2#12 (byte) draw_window::x2#10
Identical Phi Values (word) draw_window::z#5 (word) draw_window::z#2
Identical Phi Values (byte) draw_window::y3#4 (byte) draw_window::y3#2
Identical Phi Values (byte) draw_window::y2#10 (byte) draw_window::y2#13
Identical Phi Values (byte) draw_window::x1#10 (byte) draw_window::x1#5
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) textbox::i#3 (byte) textbox::i#2
Identical Phi Values (byte) textbox::x2#11 (byte) textbox::x2#12
Identical Phi Values (byte*) textbox::text#10 (byte*) textbox::text#4
Identical Phi Values (byte) textbox::x1#10 (byte) textbox::x1#11
Identical Phi Values (byte) textbox::y2#13 (byte) textbox::y2#10
Identical Phi Values (byte) draw_window::y2#13 (byte) draw_window::y2#0
Identical Phi Values (byte) draw_window::x1#5 (byte) draw_window::x1#0
Identical Phi Values (byte) draw_window::x2#10 (byte) draw_window::x2#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) textbox::text#4 (byte*) textbox::text#12
Identical Phi Values (byte) textbox::x2#12 (byte) textbox::x2#4
Identical Phi Values (byte) textbox::x1#11 (byte) textbox::x1#4
Identical Phi Values (byte) textbox::y2#10 (byte) textbox::y2#4
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$3 [3] if((byte) main::x#2<(byte) $f) goto main::@2
Simple Condition (bool~) main::$8 [32] if((word) main::wait#2<(word) $88b8) goto main::@5
Simple Condition (bool~) textbox::$10 [58] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2
Simple Condition (bool~) textbox::$25 [63] if((byte) textbox::x#1!=(byte) textbox::x2#4) goto textbox::@8
Simple Condition (bool~) textbox::$22 [82] if((byte) textbox::y#1!=(byte) textbox::y2#4) goto textbox::@7
Simple Condition (bool~) textbox::$30 [86] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1
Simple Condition (bool~) textbox::$28 [90] if((byte) textbox::y#2!=(byte) textbox::y2#4) goto textbox::@9
Simple Condition (bool~) draw_window::$13 [98] if((byte) draw_window::x#2<(byte) draw_window::x2#0) goto draw_window::@2
Simple Condition (bool~) draw_window::$17 [111] if((byte) draw_window::y#2<(byte) draw_window::y2#0) goto draw_window::@5
Simple Condition (bool~) draw_window::$22 [132] if((byte) draw_window::y3#2<(byte) draw_window::y2#0) goto draw_window::@9
Simple Condition (bool~) draw_window::$25 [137] if((byte) draw_window::x3#2<(byte) draw_window::x2#0) goto draw_window::@11
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [51] (bool~) textbox::$7 ← ! (bool~) textbox::$6
Rewriting || if()-condition to two if()s [50] (bool~) textbox::$6 ← (bool~) textbox::$4 || (bool~) textbox::$5
Rewriting && if()-condition to two if()s [69] (bool~) textbox::$14 ← (bool~) textbox::$12 && (bool~) textbox::$13
Rewriting ! if()-condition to reversed if() [78] (bool~) textbox::$20 ← ! (bool~) textbox::$19
Rewriting && if()-condition to two if()s [77] (bool~) textbox::$19 ← (bool~) textbox::$16 && (bool~) textbox::$18
Rewriting ! if()-condition to reversed if() [127] (bool~) draw_window::$11 ← ! (bool~) draw_window::$10
Rewriting && if()-condition to two if()s [126] (bool~) draw_window::$10 ← (bool~) draw_window::$7 && (bool~) draw_window::$9
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte) main::x#0 = 0
Constant (const byte*) textbox::text#0 = text2
Constant (const word) main::wait#0 = 0
Constant (const byte) textbox::x1#1 = 0
Constant (const byte) textbox::y1#1 = $c
Constant (const byte) textbox::x2#1 = $14
Constant (const byte) textbox::y2#1 = $18
Constant (const byte*) textbox::text#1 = text
Constant (const byte) textbox::x1#2 = 3
Constant (const byte) textbox::y1#2 = 3
Constant (const byte) textbox::x2#2 = $25
Constant (const byte) textbox::y2#2 = 9
Constant (const byte*) textbox::text#2 = text
Constant (const byte) textbox::x1#3 = $1e
Constant (const byte) textbox::y1#3 = 8
Constant (const byte) textbox::x2#3 = $27
Constant (const byte) textbox::y2#3 = $18
Constant (const byte*) textbox::text#3 = text
Constant (const byte) textbox::i#0 = 0
Constant (const byte) textbox::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [35] if(true) goto main::@7
Successful SSA optimization Pass2ConstantIfs
De-inlining pointer[w] to *(pointer+w)   [56] *((const nomodify byte*) screen + (word~) textbox::$8) ← *((byte*) textbox::text#12 + (byte) textbox::i#2)
De-inlining pointer[w] to *(pointer+w)   [100] *((const nomodify byte*) screen + (word~) draw_window::$14) ← (byte) $43
De-inlining pointer[w] to *(pointer+w)   [102] *((const nomodify byte*) screen + (word~) draw_window::$15) ← (byte) $43
De-inlining pointer[w] to *(pointer+w)   [105] *((const nomodify byte*) screen + (word~) draw_window::$2) ← (byte) $55
De-inlining pointer[w] to *(pointer+w)   [107] *((const nomodify byte*) screen + (word~) draw_window::$3) ← (byte) $49
De-inlining pointer[w] to *(pointer+w)   [114] *((const nomodify byte*) screen + (word~) draw_window::$19) ← (byte) $42
De-inlining pointer[w] to *(pointer+w)   [116] *((const nomodify byte*) screen + (word~) draw_window::$20) ← (byte) $42
De-inlining pointer[w] to *(pointer+w)   [119] *((const nomodify byte*) screen + (word~) draw_window::$4) ← (byte) $4a
De-inlining pointer[w] to *(pointer+w)   [121] *((const nomodify byte*) screen + (word~) draw_window::$5) ← (byte) $4b
De-inlining pointer[w] to *(pointer+w)   [139] *((const nomodify byte*) screen + (word~) draw_window::$26) ← (byte) $20
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Simple Condition (bool~) textbox::$4 [27] if((byte) textbox::x#0==(byte) textbox::x2#4) goto textbox::@return
Simple Condition (bool~) textbox::$12 [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) $20) goto textbox::@14
Simple Condition (bool~) textbox::$16 [49] if((byte~) textbox::$15>=(byte) textbox::x2#4) goto textbox::@15
Simple Condition (bool~) draw_window::$7 [98] if((byte~) draw_window::$6>(byte) 1) goto draw_window::@13
Simple Condition (bool~) textbox::$5 [112] if((byte) textbox::y#0==(byte) textbox::y2#4) goto textbox::@return
Simple Condition (bool~) textbox::$13 [113] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4
Simple Condition (bool~) textbox::$18 [114] if((byte) textbox::c#2<(byte~) textbox::$17) goto textbox::@6
Simple Condition (bool~) draw_window::$9 [115] if((byte~) draw_window::$8>(byte) 1) goto draw_window::@7
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5
Negating conditional jump and destination [49] if((byte~) textbox::$15<(byte) textbox::x2#4) goto textbox::@2
Negating conditional jump and destination [98] if((byte~) draw_window::$6<=(byte) 1) goto draw_window::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Rewriting conditional comparison [98] if((byte~) draw_window::$6<=(byte) 1) goto draw_window::@return
Rewriting conditional comparison [115] if((byte~) draw_window::$8>(byte) 1) goto draw_window::@7
Adding number conversion cast (unumber) 1+1 in if((byte~) draw_window::$6<(byte) 1+(number) 1) goto draw_window::@return
Adding number conversion cast (unumber) 1 in if((byte~) draw_window::$6<(unumber)(byte) 1+(number) 1) goto draw_window::@return
Adding number conversion cast (unumber) 1+1 in if((byte~) draw_window::$8>=(byte) 1+(number) 1) goto draw_window::@7
Adding number conversion cast (unumber) 1 in if((byte~) draw_window::$8>=(unumber)(byte) 1+(number) 1) goto draw_window::@7
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift and addition[24] (word) textbox::z#0 ← (word~) textbox::$31 * (byte) $28
Rewriting multiplication to use shift and addition[46] (word) textbox::z#1 ← (byte) textbox::y#1 * (byte) $28
Rewriting multiplication to use shift and addition[52] (word) textbox::z#2 ← (byte) textbox::y#2 * (byte) $28
Rewriting multiplication to use shift and addition[53] (word) draw_window::z#0 ← (byte) draw_window::y1#0 * (byte) $28
Rewriting multiplication to use shift and addition[54] (word) draw_window::q#0 ← (byte) draw_window::y2#0 * (byte) $28
Rewriting multiplication to use shift and addition[74] (word) draw_window::z#1 ← (byte) draw_window::y#2 * (byte) $28
Rewriting multiplication to use shift and addition[94] (word) draw_window::z#2 ← (byte) draw_window::y3#2 * (byte) $28
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const word) main::wait#0
Inlining constant with var siblings (const byte*) textbox::text#0
Inlining constant with var siblings (const byte) textbox::x1#1
Inlining constant with var siblings (const byte) textbox::y1#1
Inlining constant with var siblings (const byte) textbox::x2#1
Inlining constant with var siblings (const byte) textbox::y2#1
Inlining constant with var siblings (const byte*) textbox::text#1
Inlining constant with var siblings (const byte) textbox::x1#2
Inlining constant with var siblings (const byte) textbox::y1#2
Inlining constant with var siblings (const byte) textbox::x2#2
Inlining constant with var siblings (const byte) textbox::y2#2
Inlining constant with var siblings (const byte*) textbox::text#2
Inlining constant with var siblings (const byte) textbox::x1#3
Inlining constant with var siblings (const byte) textbox::y1#3
Inlining constant with var siblings (const byte) textbox::x2#3
Inlining constant with var siblings (const byte) textbox::y2#3
Inlining constant with var siblings (const byte*) textbox::text#3
Inlining constant with var siblings (const byte) textbox::i#0
Inlining constant with var siblings (const byte) textbox::c#0
Constant inlined main::wait#0 = (word) 0
Constant inlined main::x#0 = (byte) 0
Constant inlined textbox::text#2 = (const to_nomodify byte*) text
Constant inlined textbox::text#3 = (const to_nomodify byte*) text
Constant inlined textbox::text#0 = (const to_nomodify byte*) text2
Constant inlined textbox::text#1 = (const to_nomodify byte*) text
Constant inlined textbox::c#0 = (byte) 0
Constant inlined textbox::x2#1 = (byte) $14
Constant inlined textbox::x1#2 = (byte) 3
Constant inlined textbox::y2#3 = (byte) $18
Constant inlined textbox::x2#2 = (byte) $25
Constant inlined textbox::y2#2 = (byte) 9
Constant inlined textbox::x1#3 = (byte) $1e
Constant inlined textbox::y1#3 = (byte) 8
Constant inlined textbox::y2#1 = (byte) $18
Constant inlined textbox::y1#2 = (byte) 3
Constant inlined textbox::x1#1 = (byte) 0
Constant inlined textbox::y1#1 = (byte) $c
Constant inlined textbox::x2#3 = (byte) $27
Constant inlined textbox::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Alias textbox::z#0 = textbox::$35 
Alias textbox::z#1 = textbox::$38 
Alias textbox::z#2 = textbox::$41 
Alias draw_window::z#0 = draw_window::$38 
Alias draw_window::q#0 = draw_window::$41 
Alias draw_window::z#1 = draw_window::$44 
Alias draw_window::z#2 = draw_window::$47 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting textbox::@16(between textbox::@13 and textbox::@1)
Added new block during phi lifting textbox::@17(between textbox::@8 and textbox::@1)
Fixing phi predecessor for textbox::i#2 to new block ( textbox::@13 -> textbox::@16 ) during phi lifting.
Added new block during phi lifting textbox::@18(between textbox::@1 and textbox::@2)
Added new block during phi lifting textbox::@19(between textbox::@5 and textbox::@2)
Added new block during phi lifting textbox::@20(between textbox::@2 and textbox::@8)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
CALL GRAPH
Calls in [main] to textbox:4 textbox:6 textbox:8 textbox:20 
Calls in [textbox] to draw_window:33 

Created 23 initial phi equivalence classes
Coalesced [16] textbox::x1#17 ← textbox::x1#0
Coalesced [17] textbox::y1#6 ← textbox::y1#0
Coalesced [18] textbox::x2#17 ← textbox::x2#0
Coalesced [19] textbox::y2#17 ← textbox::y2#0
Coalesced [25] main::x#8 ← main::x#1
Coalesced [27] main::wait#4 ← main::wait#1
Coalesced [42] textbox::z#10 ← textbox::z#0
Coalesced [43] textbox::x#13 ← textbox::x#0
Coalesced [44] textbox::y#14 ← textbox::y#0
Coalesced [51] textbox::ls#4 ← textbox::ls#0
Coalesced [70] textbox::z#16 ← textbox::z#2
Coalesced [71] textbox::x#19 ← textbox::x#12
Coalesced [72] textbox::y#20 ← textbox::y#2
Coalesced [75] textbox::z#11 ← textbox::z#4
Coalesced [76] textbox::x#14 ← textbox::x#7
Coalesced [77] textbox::i#13 ← textbox::i#1
Coalesced [78] textbox::y#15 ← textbox::y#11
Coalesced [79] textbox::z#15 ← textbox::z#5
Coalesced [80] textbox::x#18 ← textbox::x#1
Coalesced [81] textbox::y#19 ← textbox::y#5
Not coalescing [87] textbox::x#17 ← textbox::x1#4
Coalesced [88] textbox::y#18 ← textbox::y#1
Coalesced [89] textbox::z#14 ← textbox::z#1
Coalesced [90] textbox::x#16 ← textbox::x#10
Coalesced (already) [91] textbox::y#17 ← textbox::y#12
Coalesced (already) [92] textbox::z#13 ← textbox::z#3
Coalesced [95] textbox::ls#5 ← textbox::ls#1
Coalesced [96] textbox::c#5 ← textbox::c#1
Coalesced (already) [97] textbox::x#15 ← textbox::x#10
Coalesced (already) [98] textbox::y#16 ← textbox::y#12
Coalesced (already) [99] textbox::z#12 ← textbox::z#3
Coalesced [107] draw_window::x#4 ← draw_window::x#0
Coalesced [117] draw_window::y#4 ← draw_window::y#0
Coalesced [132] draw_window::y3#8 ← draw_window::y3#0
Coalesced [139] draw_window::x3#5 ← draw_window::x3#0
Coalesced [143] draw_window::y3#7 ← draw_window::y3#1
Coalesced [148] draw_window::x3#4 ← draw_window::x3#1
Coalesced [159] draw_window::y#5 ← draw_window::y#1
Coalesced [167] draw_window::x#5 ← draw_window::x#1
Coalesced down to 17 phi equivalence classes
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@8
Culled Empty Block (label) textbox::@16
Culled Empty Block (label) textbox::@17
Culled Empty Block (label) textbox::@20
Culled Empty Block (label) textbox::@19
Culled Empty Block (label) textbox::@18
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@7

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [1] (byte) main::x#2 ← phi( main/(byte) 0 main::@6/(byte) main::x#1 )
  [2] if((byte) main::x#2<(byte) $f) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] phi()
  [4] call textbox 
  to:main::@8
main::@8: scope:[main]  from main::@3
  [5] phi()
  [6] call textbox 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [7] phi()
  [8] call textbox 
  to:main::@7
main::@7: scope:[main]  from main::@7 main::@9
  [9] phi()
  to:main::@7
main::@2: scope:[main]  from main::@1
  [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2
  [11] (byte) textbox::x2#0 ← (byte~) main::$4 + (byte) 1
  [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a
  [13] (byte) textbox::x1#0 ← (byte) main::x#2
  [14] (byte) textbox::y1#0 ← (byte) main::x#2
  [15] call textbox 
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [16] (word) main::wait#2 ← phi( main::@5/(word) main::wait#1 main::@2/(word) 0 )
  [17] if((word) main::wait#2<(word) $88b8) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [18] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [19] (word) main::wait#1 ← ++ (word) main::wait#2
  to:main::@4

(void()) textbox((byte) textbox::x1 , (byte) textbox::y1 , (byte) textbox::x2 , (byte) textbox::y2 , (byte*) textbox::text)
textbox: scope:[textbox]  from main::@2 main::@3 main::@8 main::@9
  [20] (byte*) textbox::text#12 ← phi( main::@9/(const to_nomodify byte*) text main::@2/(const to_nomodify byte*) text2 main::@3/(const to_nomodify byte*) text main::@8/(const to_nomodify byte*) text )
  [20] (byte) textbox::y2#4 ← phi( main::@9/(byte) $18 main::@2/(byte) textbox::y2#0 main::@3/(byte) $18 main::@8/(byte) 9 )
  [20] (byte) textbox::x2#4 ← phi( main::@9/(byte) $27 main::@2/(byte) textbox::x2#0 main::@3/(byte) $14 main::@8/(byte) $25 )
  [20] (byte) textbox::y1#4 ← phi( main::@9/(byte) 8 main::@2/(byte) textbox::y1#0 main::@3/(byte) $c main::@8/(byte) 3 )
  [20] (byte) textbox::x1#4 ← phi( main::@9/(byte) $1e main::@2/(byte) textbox::x1#0 main::@3/(byte) 0 main::@8/(byte) 3 )
  [21] (byte) draw_window::x1#0 ← (byte) textbox::x1#4
  [22] (byte) draw_window::y1#0 ← (byte) textbox::y1#4
  [23] (byte) draw_window::x2#0 ← (byte) textbox::x2#4
  [24] (byte) draw_window::y2#0 ← (byte) textbox::y2#4
  [25] call draw_window 
  to:textbox::@12
textbox::@12: scope:[textbox]  from textbox
  [26] (byte) textbox::y#0 ← (byte) textbox::y1#4 + (byte) 1
  [27] (byte) textbox::x#0 ← (byte) textbox::x1#4 + (byte) 1
  [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0
  [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2
  [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31
  [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3
  [32] if((byte) textbox::x#0==(byte) textbox::x2#4) goto textbox::@return
  to:textbox::@13
textbox::@13: scope:[textbox]  from textbox::@12
  [33] if((byte) textbox::y#0==(byte) textbox::y2#4) goto textbox::@return
  to:textbox::@1
textbox::@1: scope:[textbox]  from textbox::@13 textbox::@8
  [34] (byte) textbox::y#12 ← phi( textbox::@13/(byte) textbox::y#0 textbox::@8/(byte) textbox::y#11 )
  [34] (byte) textbox::i#2 ← phi( textbox::@13/(byte) 0 textbox::@8/(byte) textbox::i#1 )
  [34] (byte) textbox::x#10 ← phi( textbox::@13/(byte) textbox::x#0 textbox::@8/(byte) textbox::x#7 )
  [34] (word) textbox::z#3 ← phi( textbox::@13/(word) textbox::z#0 textbox::@8/(word) textbox::z#4 )
  [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10
  [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8
  [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2)
  [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2
  to:textbox::@10
textbox::@10: scope:[textbox]  from textbox::@1
  [39] (byte) textbox::ls#0 ← (byte) textbox::i#2 + (byte) 1
  to:textbox::@3
textbox::@3: scope:[textbox]  from textbox::@10 textbox::@4
  [40] (byte) textbox::c#2 ← phi( textbox::@10/(byte) 0 textbox::@4/(byte) textbox::c#1 )
  [40] (byte) textbox::ls#2 ← phi( textbox::@10/(byte) textbox::ls#0 textbox::@4/(byte) textbox::ls#1 )
  [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5
  to:textbox::@14
textbox::@14: scope:[textbox]  from textbox::@3
  [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4
  to:textbox::@5
textbox::@5: scope:[textbox]  from textbox::@14 textbox::@3
  [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10
  [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4
  [45] if((byte~) textbox::$15<(byte) textbox::x2#4) goto textbox::@2
  to:textbox::@15
textbox::@15: scope:[textbox]  from textbox::@5
  [46] if((byte) textbox::c#2<(byte~) textbox::$17) goto textbox::@6
  to:textbox::@2
textbox::@2: scope:[textbox]  from textbox::@1 textbox::@15 textbox::@5 textbox::@7
  [47] (word) textbox::z#5 ← phi( textbox::@1/(word) textbox::z#3 textbox::@5/(word) textbox::z#3 textbox::@7/(word) textbox::z#1 )
  [47] (byte) textbox::y#5 ← phi( textbox::@1/(byte) textbox::y#12 textbox::@5/(byte) textbox::y#12 textbox::@7/(byte) textbox::y#1 )
  [47] (byte) textbox::x#5 ← phi( textbox::@1/(byte) textbox::x#10 textbox::@5/(byte) textbox::x#10 textbox::@7/(byte) textbox::x#17 )
  [48] (byte) textbox::i#1 ← ++ (byte) textbox::i#2
  [49] (byte) textbox::x#1 ← ++ (byte) textbox::x#5
  [50] if((byte) textbox::x#1!=(byte) textbox::x2#4) goto textbox::@8
  to:textbox::@11
textbox::@11: scope:[textbox]  from textbox::@2
  [51] (byte) textbox::x#12 ← (byte) textbox::x1#4 + (byte) 1
  [52] (byte) textbox::y#2 ← ++ (byte) textbox::y#5
  [53] if((byte) textbox::y#2!=(byte) textbox::y2#4) goto textbox::@9
  to:textbox::@return
textbox::@return: scope:[textbox]  from textbox::@11 textbox::@12 textbox::@13 textbox::@6 textbox::@8
  [54] return 
  to:@return
textbox::@9: scope:[textbox]  from textbox::@11
  [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2
  [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2
  [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3
  to:textbox::@8
textbox::@8: scope:[textbox]  from textbox::@2 textbox::@9
  [58] (byte) textbox::y#11 ← phi( textbox::@2/(byte) textbox::y#5 textbox::@9/(byte) textbox::y#2 )
  [58] (byte) textbox::x#7 ← phi( textbox::@2/(byte) textbox::x#1 textbox::@9/(byte) textbox::x#12 )
  [58] (word) textbox::z#4 ← phi( textbox::@2/(word) textbox::z#5 textbox::@9/(word) textbox::z#2 )
  [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1
  to:textbox::@return
textbox::@6: scope:[textbox]  from textbox::@15
  [60] (byte) textbox::y#1 ← ++ (byte) textbox::y#12
  [61] if((byte) textbox::y#1!=(byte) textbox::y2#4) goto textbox::@7
  to:textbox::@return
textbox::@7: scope:[textbox]  from textbox::@6
  [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2
  [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1
  [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3
  [65] (byte) textbox::x#17 ← (byte) textbox::x1#4
  to:textbox::@2
textbox::@4: scope:[textbox]  from textbox::@14
  [66] (byte) textbox::ls#1 ← ++ (byte) textbox::ls#2
  [67] (byte) textbox::c#1 ← ++ (byte) textbox::c#2
  to:textbox::@3

(void()) draw_window((byte) draw_window::x1 , (byte) draw_window::y1 , (byte) draw_window::x2 , (byte) draw_window::y2)
draw_window: scope:[draw_window]  from textbox
  [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2
  [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0
  [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3
  [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2
  [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0
  [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3
  [74] (byte) draw_window::x#0 ← (byte) draw_window::x1#0 + (byte) 1
  to:draw_window::@1
draw_window::@1: scope:[draw_window]  from draw_window draw_window::@2
  [75] (byte) draw_window::x#2 ← phi( draw_window/(byte) draw_window::x#0 draw_window::@2/(byte) draw_window::x#1 )
  [76] if((byte) draw_window::x#2<(byte) draw_window::x2#0) goto draw_window::@2
  to:draw_window::@3
draw_window::@3: scope:[draw_window]  from draw_window::@1
  [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0
  [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2
  [79] *((byte*~) draw_window::$29) ← (byte) $55
  [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0
  [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3
  [82] *((byte*~) draw_window::$30) ← (byte) $49
  [83] (byte) draw_window::y#0 ← (byte) draw_window::y1#0 + (byte) 1
  to:draw_window::@4
draw_window::@4: scope:[draw_window]  from draw_window::@3 draw_window::@5
  [84] (byte) draw_window::y#2 ← phi( draw_window::@3/(byte) draw_window::y#0 draw_window::@5/(byte) draw_window::y#1 )
  [85] if((byte) draw_window::y#2<(byte) draw_window::y2#0) goto draw_window::@5
  to:draw_window::@6
draw_window::@6: scope:[draw_window]  from draw_window::@4
  [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0
  [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4
  [88] *((byte*~) draw_window::$33) ← (byte) $4a
  [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0
  [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5
  [91] *((byte*~) draw_window::$34) ← (byte) $4b
  [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0
  [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0
  [94] if((byte~) draw_window::$6<(byte) 1+(byte) 1) goto draw_window::@return
  to:draw_window::@13
draw_window::@13: scope:[draw_window]  from draw_window::@6
  [95] if((byte~) draw_window::$8>=(byte) 1+(byte) 1) goto draw_window::@7
  to:draw_window::@return
draw_window::@return: scope:[draw_window]  from draw_window::@13 draw_window::@6 draw_window::@8
  [96] return 
  to:@return
draw_window::@7: scope:[draw_window]  from draw_window::@13
  [97] (byte) draw_window::y3#0 ← (byte) draw_window::y1#0 + (byte) 1
  to:draw_window::@8
draw_window::@8: scope:[draw_window]  from draw_window::@12 draw_window::@7
  [98] (byte) draw_window::y3#2 ← phi( draw_window::@12/(byte) draw_window::y3#1 draw_window::@7/(byte) draw_window::y3#0 )
  [99] if((byte) draw_window::y3#2<(byte) draw_window::y2#0) goto draw_window::@9
  to:draw_window::@return
draw_window::@9: scope:[draw_window]  from draw_window::@8
  [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2
  [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2
  [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3
  [103] (byte) draw_window::x3#0 ← (byte) draw_window::x1#0 + (byte) 1
  to:draw_window::@10
draw_window::@10: scope:[draw_window]  from draw_window::@11 draw_window::@9
  [104] (byte) draw_window::x3#2 ← phi( draw_window::@11/(byte) draw_window::x3#1 draw_window::@9/(byte) draw_window::x3#0 )
  [105] if((byte) draw_window::x3#2<(byte) draw_window::x2#0) goto draw_window::@11
  to:draw_window::@12
draw_window::@12: scope:[draw_window]  from draw_window::@10
  [106] (byte) draw_window::y3#1 ← ++ (byte) draw_window::y3#2
  to:draw_window::@8
draw_window::@11: scope:[draw_window]  from draw_window::@10
  [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2
  [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26
  [109] *((byte*~) draw_window::$35) ← (byte) $20
  [110] (byte) draw_window::x3#1 ← ++ (byte) draw_window::x3#2
  to:draw_window::@10
draw_window::@5: scope:[draw_window]  from draw_window::@4
  [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2
  [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2
  [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3
  [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0
  [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19
  [116] *((byte*~) draw_window::$31) ← (byte) $42
  [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0
  [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20
  [119] *((byte*~) draw_window::$32) ← (byte) $42
  [120] (byte) draw_window::y#1 ← ++ (byte) draw_window::y#2
  to:draw_window::@4
draw_window::@2: scope:[draw_window]  from draw_window::@1
  [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2
  [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14
  [123] *((byte*~) draw_window::$27) ← (byte) $43
  [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2
  [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15
  [126] *((byte*~) draw_window::$28) ← (byte) $43
  [127] (byte) draw_window::x#1 ← ++ (byte) draw_window::x#2
  to:draw_window::@1


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) draw_window((byte) draw_window::x1 , (byte) draw_window::y1 , (byte) draw_window::x2 , (byte) draw_window::y2)
(word~) draw_window::$14 200002.0
(word~) draw_window::$15 200002.0
(word~) draw_window::$19 200002.0
(word~) draw_window::$2 2002.0
(word~) draw_window::$20 200002.0
(word~) draw_window::$26 2000002.0
(byte*~) draw_window::$27 200002.0
(byte*~) draw_window::$28 200002.0
(byte*~) draw_window::$29 2002.0
(word~) draw_window::$3 2002.0
(byte*~) draw_window::$30 2002.0
(byte*~) draw_window::$31 200002.0
(byte*~) draw_window::$32 200002.0
(byte*~) draw_window::$33 2002.0
(byte*~) draw_window::$34 2002.0
(byte*~) draw_window::$35 2000002.0
(byte~) draw_window::$36 2002.0
(byte~) draw_window::$37 2002.0
(byte~) draw_window::$39 2002.0
(word~) draw_window::$4 2002.0
(byte~) draw_window::$40 2002.0
(byte~) draw_window::$42 200002.0
(byte~) draw_window::$43 200002.0
(byte~) draw_window::$45 200002.0
(byte~) draw_window::$46 200002.0
(word~) draw_window::$5 2002.0
(byte~) draw_window::$6 1001.0
(byte~) draw_window::$8 1001.0
(word) draw_window::q
(word) draw_window::q#0 3121.3333333333335
(byte) draw_window::x
(byte) draw_window::x#0 2002.0
(byte) draw_window::x#1 200002.0
(byte) draw_window::x#2 62625.75
(byte) draw_window::x1
(byte) draw_window::x1#0 3239.7936507936506
(byte) draw_window::x2
(byte) draw_window::x2#0 19723.06557377049
(byte) draw_window::x3
(byte) draw_window::x3#0 200002.0
(byte) draw_window::x3#1 2000002.0
(byte) draw_window::x3#2 820001.0
(byte) draw_window::y
(byte) draw_window::y#0 2002.0
(byte) draw_window::y#1 200002.0
(byte) draw_window::y#2 45546.0
(byte) draw_window::y1
(byte) draw_window::y1#0 106.37500000000001
(byte) draw_window::y2
(byte) draw_window::y2#0 3385.1000000000004
(byte) draw_window::y3
(byte) draw_window::y3#0 2002.0
(byte) draw_window::y3#1 200002.0
(byte) draw_window::y3#2 41750.49999999999
(word) draw_window::z
(word) draw_window::z#0 6059.058823529412
(word) draw_window::z#1 75000.75
(word) draw_window::z#2 137500.25
(void()) main()
(byte~) main::$4 22.0
(word) main::wait
(word) main::wait#1 202.0
(word) main::wait#2 151.5
(byte) main::x
(byte) main::x#1 22.0
(byte) main::x#2 8.0
(void()) textbox((byte) textbox::x1 , (byte) textbox::y1 , (byte) textbox::x2 , (byte) textbox::y2 , (byte*) textbox::text)
(byte~) textbox::$15 10001.0
(byte~) textbox::$17 10001.0
(word~) textbox::$31 151.5
(byte*~) textbox::$32 20002.0
(word~) textbox::$33 202.0
(word~) textbox::$34 202.0
(byte~) textbox::$36 20002.0
(byte~) textbox::$37 20002.0
(byte~) textbox::$39 20002.0
(byte~) textbox::$40 20002.0
(word~) textbox::$8 20002.0
(byte) textbox::c
(byte) textbox::c#1 200002.0
(byte) textbox::c#2 31429.142857142855
(byte) textbox::i
(byte) textbox::i#1 2727.5454545454545
(byte) textbox::i#2 2272.9545454545455
(byte) textbox::ls
(byte) textbox::ls#0 20002.0
(byte) textbox::ls#1 100001.0
(byte) textbox::ls#2 136668.3333333333
(byte*) textbox::text
(byte*) textbox::text#12 4893.723404255319
(byte) textbox::x
(byte) textbox::x#0 43.285714285714285
(byte) textbox::x#1 15001.5
(byte) textbox::x#10 3579.000000000001
(byte) textbox::x#12 3333.6666666666665
(byte) textbox::x#17 20002.0
(byte) textbox::x#5 20002.0
(byte) textbox::x#7 15001.5
(byte) textbox::x1
(byte) textbox::x1#0 11.0
(byte) textbox::x1#4 642.8936170212767
(byte) textbox::x2
(byte) textbox::x2#0 5.5
(byte) textbox::x2#4 642.8936170212767
(byte) textbox::y
(byte) textbox::y#0 37.875
(byte) textbox::y#1 8334.166666666666
(byte) textbox::y#11 15001.5
(byte) textbox::y#12 2673.666666666667
(byte) textbox::y#2 10001.0
(byte) textbox::y#5 10001.0
(byte) textbox::y1
(byte) textbox::y1#0 22.0
(byte) textbox::y1#4 35.5
(byte) textbox::y2
(byte) textbox::y2#0 7.333333333333333
(byte) textbox::y2#4 430.10638297872345
(word) textbox::z
(word) textbox::z#0 67.33333333333333
(word) textbox::z#1 10001.0
(word) textbox::z#2 20002.0
(word) textbox::z#3 2864.642857142858
(word) textbox::z#4 15001.5
(word) textbox::z#5 10001.0

Initial phi equivalence classes
[ main::x#2 main::x#1 ]
[ main::wait#2 main::wait#1 ]
[ textbox::x1#4 textbox::x1#0 ]
[ textbox::y1#4 textbox::y1#0 ]
[ textbox::x2#4 textbox::x2#0 ]
[ textbox::y2#4 textbox::y2#0 ]
[ textbox::text#12 ]
[ textbox::i#2 textbox::i#1 ]
[ textbox::ls#2 textbox::ls#0 textbox::ls#1 ]
[ textbox::c#2 textbox::c#1 ]
[ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
[ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ]
[ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ]
[ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
[ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
[ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
[ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable draw_window::x1#0 to live range equivalence class [ draw_window::x1#0 ]
Added variable draw_window::y1#0 to live range equivalence class [ draw_window::y1#0 ]
Added variable draw_window::x2#0 to live range equivalence class [ draw_window::x2#0 ]
Added variable draw_window::y2#0 to live range equivalence class [ draw_window::y2#0 ]
Added variable textbox::$31 to live range equivalence class [ textbox::$31 ]
Added variable textbox::$33 to live range equivalence class [ textbox::$33 ]
Added variable textbox::$34 to live range equivalence class [ textbox::$34 ]
Added variable textbox::$8 to live range equivalence class [ textbox::$8 ]
Added variable textbox::$32 to live range equivalence class [ textbox::$32 ]
Added variable textbox::$15 to live range equivalence class [ textbox::$15 ]
Added variable textbox::$17 to live range equivalence class [ textbox::$17 ]
Added variable textbox::$39 to live range equivalence class [ textbox::$39 ]
Added variable textbox::$40 to live range equivalence class [ textbox::$40 ]
Added variable textbox::$36 to live range equivalence class [ textbox::$36 ]
Added variable textbox::$37 to live range equivalence class [ textbox::$37 ]
Added variable draw_window::$36 to live range equivalence class [ draw_window::$36 ]
Added variable draw_window::$37 to live range equivalence class [ draw_window::$37 ]
Added variable draw_window::z#0 to live range equivalence class [ draw_window::z#0 ]
Added variable draw_window::$39 to live range equivalence class [ draw_window::$39 ]
Added variable draw_window::$40 to live range equivalence class [ draw_window::$40 ]
Added variable draw_window::q#0 to live range equivalence class [ draw_window::q#0 ]
Added variable draw_window::$2 to live range equivalence class [ draw_window::$2 ]
Added variable draw_window::$29 to live range equivalence class [ draw_window::$29 ]
Added variable draw_window::$3 to live range equivalence class [ draw_window::$3 ]
Added variable draw_window::$30 to live range equivalence class [ draw_window::$30 ]
Added variable draw_window::$4 to live range equivalence class [ draw_window::$4 ]
Added variable draw_window::$33 to live range equivalence class [ draw_window::$33 ]
Added variable draw_window::$5 to live range equivalence class [ draw_window::$5 ]
Added variable draw_window::$34 to live range equivalence class [ draw_window::$34 ]
Added variable draw_window::$6 to live range equivalence class [ draw_window::$6 ]
Added variable draw_window::$8 to live range equivalence class [ draw_window::$8 ]
Added variable draw_window::$45 to live range equivalence class [ draw_window::$45 ]
Added variable draw_window::$46 to live range equivalence class [ draw_window::$46 ]
Added variable draw_window::z#2 to live range equivalence class [ draw_window::z#2 ]
Added variable draw_window::$26 to live range equivalence class [ draw_window::$26 ]
Added variable draw_window::$35 to live range equivalence class [ draw_window::$35 ]
Added variable draw_window::$42 to live range equivalence class [ draw_window::$42 ]
Added variable draw_window::$43 to live range equivalence class [ draw_window::$43 ]
Added variable draw_window::z#1 to live range equivalence class [ draw_window::z#1 ]
Added variable draw_window::$19 to live range equivalence class [ draw_window::$19 ]
Added variable draw_window::$31 to live range equivalence class [ draw_window::$31 ]
Added variable draw_window::$20 to live range equivalence class [ draw_window::$20 ]
Added variable draw_window::$32 to live range equivalence class [ draw_window::$32 ]
Added variable draw_window::$14 to live range equivalence class [ draw_window::$14 ]
Added variable draw_window::$27 to live range equivalence class [ draw_window::$27 ]
Added variable draw_window::$15 to live range equivalence class [ draw_window::$15 ]
Added variable draw_window::$28 to live range equivalence class [ draw_window::$28 ]
Complete equivalence classes
[ main::x#2 main::x#1 ]
[ main::wait#2 main::wait#1 ]
[ textbox::x1#4 textbox::x1#0 ]
[ textbox::y1#4 textbox::y1#0 ]
[ textbox::x2#4 textbox::x2#0 ]
[ textbox::y2#4 textbox::y2#0 ]
[ textbox::text#12 ]
[ textbox::i#2 textbox::i#1 ]
[ textbox::ls#2 textbox::ls#0 textbox::ls#1 ]
[ textbox::c#2 textbox::c#1 ]
[ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
[ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ]
[ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ]
[ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
[ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
[ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
[ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
[ main::$4 ]
[ draw_window::x1#0 ]
[ draw_window::y1#0 ]
[ draw_window::x2#0 ]
[ draw_window::y2#0 ]
[ textbox::$31 ]
[ textbox::$33 ]
[ textbox::$34 ]
[ textbox::$8 ]
[ textbox::$32 ]
[ textbox::$15 ]
[ textbox::$17 ]
[ textbox::$39 ]
[ textbox::$40 ]
[ textbox::$36 ]
[ textbox::$37 ]
[ draw_window::$36 ]
[ draw_window::$37 ]
[ draw_window::z#0 ]
[ draw_window::$39 ]
[ draw_window::$40 ]
[ draw_window::q#0 ]
[ draw_window::$2 ]
[ draw_window::$29 ]
[ draw_window::$3 ]
[ draw_window::$30 ]
[ draw_window::$4 ]
[ draw_window::$33 ]
[ draw_window::$5 ]
[ draw_window::$34 ]
[ draw_window::$6 ]
[ draw_window::$8 ]
[ draw_window::$45 ]
[ draw_window::$46 ]
[ draw_window::z#2 ]
[ draw_window::$26 ]
[ draw_window::$35 ]
[ draw_window::$42 ]
[ draw_window::$43 ]
[ draw_window::z#1 ]
[ draw_window::$19 ]
[ draw_window::$31 ]
[ draw_window::$20 ]
[ draw_window::$32 ]
[ draw_window::$14 ]
[ draw_window::$27 ]
[ draw_window::$15 ]
[ draw_window::$28 ]
Allocated zp[1]:2 [ main::x#2 main::x#1 ]
Allocated zp[2]:3 [ main::wait#2 main::wait#1 ]
Allocated zp[1]:5 [ textbox::x1#4 textbox::x1#0 ]
Allocated zp[1]:6 [ textbox::y1#4 textbox::y1#0 ]
Allocated zp[1]:7 [ textbox::x2#4 textbox::x2#0 ]
Allocated zp[1]:8 [ textbox::y2#4 textbox::y2#0 ]
Allocated zp[2]:9 [ textbox::text#12 ]
Allocated zp[1]:11 [ textbox::i#2 textbox::i#1 ]
Allocated zp[1]:12 [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ]
Allocated zp[1]:13 [ textbox::c#2 textbox::c#1 ]
Allocated zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
Allocated zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ]
Allocated zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ]
Allocated zp[1]:18 [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
Allocated zp[1]:19 [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
Allocated zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
Allocated zp[1]:21 [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
Allocated zp[1]:22 [ main::$4 ]
Allocated zp[1]:23 [ draw_window::x1#0 ]
Allocated zp[1]:24 [ draw_window::y1#0 ]
Allocated zp[1]:25 [ draw_window::x2#0 ]
Allocated zp[1]:26 [ draw_window::y2#0 ]
Allocated zp[2]:27 [ textbox::$31 ]
Allocated zp[2]:29 [ textbox::$33 ]
Allocated zp[2]:31 [ textbox::$34 ]
Allocated zp[2]:33 [ textbox::$8 ]
Allocated zp[2]:35 [ textbox::$32 ]
Allocated zp[1]:37 [ textbox::$15 ]
Allocated zp[1]:38 [ textbox::$17 ]
Allocated zp[1]:39 [ textbox::$39 ]
Allocated zp[1]:40 [ textbox::$40 ]
Allocated zp[1]:41 [ textbox::$36 ]
Allocated zp[1]:42 [ textbox::$37 ]
Allocated zp[1]:43 [ draw_window::$36 ]
Allocated zp[1]:44 [ draw_window::$37 ]
Allocated zp[2]:45 [ draw_window::z#0 ]
Allocated zp[1]:47 [ draw_window::$39 ]
Allocated zp[1]:48 [ draw_window::$40 ]
Allocated zp[2]:49 [ draw_window::q#0 ]
Allocated zp[2]:51 [ draw_window::$2 ]
Allocated zp[2]:53 [ draw_window::$29 ]
Allocated zp[2]:55 [ draw_window::$3 ]
Allocated zp[2]:57 [ draw_window::$30 ]
Allocated zp[2]:59 [ draw_window::$4 ]
Allocated zp[2]:61 [ draw_window::$33 ]
Allocated zp[2]:63 [ draw_window::$5 ]
Allocated zp[2]:65 [ draw_window::$34 ]
Allocated zp[1]:67 [ draw_window::$6 ]
Allocated zp[1]:68 [ draw_window::$8 ]
Allocated zp[1]:69 [ draw_window::$45 ]
Allocated zp[1]:70 [ draw_window::$46 ]
Allocated zp[2]:71 [ draw_window::z#2 ]
Allocated zp[2]:73 [ draw_window::$26 ]
Allocated zp[2]:75 [ draw_window::$35 ]
Allocated zp[1]:77 [ draw_window::$42 ]
Allocated zp[1]:78 [ draw_window::$43 ]
Allocated zp[2]:79 [ draw_window::z#1 ]
Allocated zp[2]:81 [ draw_window::$19 ]
Allocated zp[2]:83 [ draw_window::$31 ]
Allocated zp[2]:85 [ draw_window::$20 ]
Allocated zp[2]:87 [ draw_window::$32 ]
Allocated zp[2]:89 [ draw_window::$14 ]
Allocated zp[2]:91 [ draw_window::$27 ]
Allocated zp[2]:93 [ draw_window::$15 ]
Allocated zp[2]:95 [ draw_window::$28 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
/* Textbox routine with word wrap for KickC by Scan/Desire */
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label __4 = $16
    .label wait = 3
    .label x = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte) main::x#2<(byte) $f) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$f
    bcc __b2
    // [3] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [4] call textbox 
    // [20] phi from main::@3 to textbox [phi:main::@3->textbox]
  textbox_from___b3:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@3->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) $18 [phi:main::@3->textbox#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $14 [phi:main::@3->textbox#2] -- vbuz1=vbuc1 
    lda #$14
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) $c [phi:main::@3->textbox#3] -- vbuz1=vbuc1 
    lda #$c
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) 0 [phi:main::@3->textbox#4] -- vbuz1=vbuc1 
    lda #0
    sta.z textbox.x1
    jsr textbox
    // [5] phi from main::@3 to main::@8 [phi:main::@3->main::@8]
  __b8_from___b3:
    jmp __b8
    // main::@8
  __b8:
    // [6] call textbox 
    // [20] phi from main::@8 to textbox [phi:main::@8->textbox]
  textbox_from___b8:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@8->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) 9 [phi:main::@8->textbox#1] -- vbuz1=vbuc1 
    lda #9
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $25 [phi:main::@8->textbox#2] -- vbuz1=vbuc1 
    lda #$25
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) 3 [phi:main::@8->textbox#3] -- vbuz1=vbuc1 
    lda #3
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) 3 [phi:main::@8->textbox#4] -- vbuz1=vbuc1 
    lda #3
    sta.z textbox.x1
    jsr textbox
    // [7] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [8] call textbox 
    // [20] phi from main::@9 to textbox [phi:main::@9->textbox]
  textbox_from___b9:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@9->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) $18 [phi:main::@9->textbox#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $27 [phi:main::@9->textbox#2] -- vbuz1=vbuc1 
    lda #$27
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) 8 [phi:main::@9->textbox#3] -- vbuz1=vbuc1 
    lda #8
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) $1e [phi:main::@9->textbox#4] -- vbuz1=vbuc1 
    lda #$1e
    sta.z textbox.x1
    jsr textbox
    // [9] phi from main::@7 main::@9 to main::@7 [phi:main::@7/main::@9->main::@7]
  __b7_from___b7:
  __b7_from___b9:
    jmp __b7
    // main::@7
  __b7:
    jmp __b7_from___b7
    // main::@2
  __b2:
    // [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2 -- vbuz1=vbuz2_plus_vbuz2 
    lda.z x
    asl
    sta.z __4
    // [11] (byte) textbox::x2#0 ← (byte~) main::$4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z __4
    iny
    sty.z textbox.x2
    // [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax.z x
    axs #-[$a]
    stx.z textbox.y2
    // [13] (byte) textbox::x1#0 ← (byte) main::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z textbox.x1
    // [14] (byte) textbox::y1#0 ← (byte) main::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z textbox.y1
    // [15] call textbox 
    // [20] phi from main::@2 to textbox [phi:main::@2->textbox]
  textbox_from___b2:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text2 [phi:main::@2->textbox#0] -- pbuz1=pbuc1 
    lda #<text2
    sta.z textbox.text
    lda #>text2
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) textbox::y2#0 [phi:main::@2->textbox#1] -- register_copy 
    // [20] phi (byte) textbox::x2#4 = (byte) textbox::x2#0 [phi:main::@2->textbox#2] -- register_copy 
    // [20] phi (byte) textbox::y1#4 = (byte) textbox::y1#0 [phi:main::@2->textbox#3] -- register_copy 
    // [20] phi (byte) textbox::x1#4 = (byte) textbox::x1#0 [phi:main::@2->textbox#4] -- register_copy 
    jsr textbox
    // [16] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [16] phi (word) main::wait#2 = (word) 0 [phi:main::@2->main::@4#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z wait
    lda #>0
    sta.z wait+1
    jmp __b4
    // main::@4
  __b4:
    // [17] if((word) main::wait#2<(word) $88b8) goto main::@5 -- vwuz1_lt_vwuc1_then_la1 
    lda.z wait+1
    cmp #>$88b8
    bcc __b5
    bne !+
    lda.z wait
    cmp #<$88b8
    bcc __b5
  !:
    jmp __b6
    // main::@6
  __b6:
    // [18] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z x
    clc
    adc #2
    sta.z x
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [1] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // [19] (word) main::wait#1 ← ++ (word) main::wait#2 -- vwuz1=_inc_vwuz1 
    inc.z wait
    bne !+
    inc.z wait+1
  !:
    // [16] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [16] phi (word) main::wait#2 = (word) main::wait#1 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
}
  // textbox
// textbox(byte zp(5) x1, byte zp(6) y1, byte zp(7) x2, byte zp(8) y2, byte* zp(9) text)
textbox: {
    .label __8 = $21
    .label __15 = $25
    .label __17 = $26
    .label __31 = $1b
    .label x1 = 5
    .label y1 = 6
    .label x2 = 7
    .label y2 = 8
    .label y = $f
    .label x = $e
    .label z = $10
    .label i = $b
    .label ls = $c
    // scan ahead to determine next word length
    .label c = $d
    .label text = 9
    .label __32 = $23
    .label __33 = $1d
    .label __34 = $1f
    .label __36 = $29
    .label __37 = $2a
    .label __39 = $27
    .label __40 = $28
    // [21] (byte) draw_window::x1#0 ← (byte) textbox::x1#4 -- vbuz1=vbuz2 
    lda.z x1
    sta.z draw_window.x1
    // [22] (byte) draw_window::y1#0 ← (byte) textbox::y1#4 -- vbuz1=vbuz2 
    lda.z y1
    sta.z draw_window.y1
    // [23] (byte) draw_window::x2#0 ← (byte) textbox::x2#4 -- vbuz1=vbuz2 
    lda.z x2
    sta.z draw_window.x2
    // [24] (byte) draw_window::y2#0 ← (byte) textbox::y2#4 -- vbuz1=vbuz2 
    lda.z y2
    sta.z draw_window.y2
    // [25] call draw_window 
    jsr draw_window
    jmp __b12
    // textbox::@12
  __b12:
    // [26] (byte) textbox::y#0 ← (byte) textbox::y1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z y
    // [27] (byte) textbox::x#0 ← (byte) textbox::x1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __31
    lda #0
    sta.z __31+1
    // [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __31
    asl
    sta.z __33
    lda.z __31+1
    rol
    sta.z __33+1
    asl.z __33
    rol.z __33+1
    // [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z __33
    clc
    adc.z __31
    sta.z __34
    lda.z __33+1
    adc.z __31+1
    sta.z __34+1
    // [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z __34
    asl
    sta.z z
    lda.z __34+1
    rol
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [32] if((byte) textbox::x#0==(byte) textbox::x2#4) goto textbox::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    beq __breturn
    jmp __b13
    // textbox::@13
  __b13:
    // [33] if((byte) textbox::y#0==(byte) textbox::y2#4) goto textbox::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    beq __breturn
    // [34] phi from textbox::@13 to textbox::@1 [phi:textbox::@13->textbox::@1]
  __b1_from___b13:
    // [34] phi (byte) textbox::y#12 = (byte) textbox::y#0 [phi:textbox::@13->textbox::@1#0] -- register_copy 
    // [34] phi (byte) textbox::i#2 = (byte) 0 [phi:textbox::@13->textbox::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [34] phi (byte) textbox::x#10 = (byte) textbox::x#0 [phi:textbox::@13->textbox::@1#2] -- register_copy 
    // [34] phi (word) textbox::z#3 = (word) textbox::z#0 [phi:textbox::@13->textbox::@1#3] -- register_copy 
    jmp __b1
    // [34] phi from textbox::@8 to textbox::@1 [phi:textbox::@8->textbox::@1]
  __b1_from___b8:
    // [34] phi (byte) textbox::y#12 = (byte) textbox::y#11 [phi:textbox::@8->textbox::@1#0] -- register_copy 
    // [34] phi (byte) textbox::i#2 = (byte) textbox::i#1 [phi:textbox::@8->textbox::@1#1] -- register_copy 
    // [34] phi (byte) textbox::x#10 = (byte) textbox::x#7 [phi:textbox::@8->textbox::@1#2] -- register_copy 
    // [34] phi (word) textbox::z#3 = (word) textbox::z#4 [phi:textbox::@8->textbox::@1#3] -- register_copy 
    jmp __b1
    // textbox::@1
  __b1:
    // [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z z
    sta.z __8
    lda #0
    adc.z z+1
    sta.z __8+1
    // [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __8
    clc
    adc #<screen
    sta.z __32
    lda.z __8+1
    adc #>screen
    sta.z __32+1
    // [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2) -- _deref_pbuz1=pbuz2_derefidx_vbuz3 
    ldy.z i
    lda (text),y
    ldy #0
    sta (__32),y
    // [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2 -- pbuz1_derefidx_vbuz2_neq_vbuc1_then_la1 
    ldy.z i
    lda (text),y
    cmp #$20
    bne __b2_from___b1
    jmp __b10
    // textbox::@10
  __b10:
    // [39] (byte) textbox::ls#0 ← (byte) textbox::i#2 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z i
    iny
    sty.z ls
    // [40] phi from textbox::@10 to textbox::@3 [phi:textbox::@10->textbox::@3]
  __b3_from___b10:
    // [40] phi (byte) textbox::c#2 = (byte) 0 [phi:textbox::@10->textbox::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [40] phi (byte) textbox::ls#2 = (byte) textbox::ls#0 [phi:textbox::@10->textbox::@3#1] -- register_copy 
    jmp __b3
    // textbox::@3
  __b3:
    // [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    lda #$20
    ldy.z ls
    cmp (text),y
    beq __b5
    jmp __b14
    // textbox::@14
  __b14:
    // [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4 -- pbuz1_derefidx_vbuz2_neq_0_then_la1 
    ldy.z ls
    lda (text),y
    cmp #0
    bne __b4
    jmp __b5
    // textbox::@5
  __b5:
    // [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z c
    clc
    adc.z x
    sta.z __15
    // [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z __17
    // [45] if((byte~) textbox::$15<(byte) textbox::x2#4) goto textbox::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z __15
    cmp.z x2
    bcc __b2_from___b5
    jmp __b15
    // textbox::@15
  __b15:
    // [46] if((byte) textbox::c#2<(byte~) textbox::$17) goto textbox::@6 -- vbuz1_lt_vbuz2_then_la1 
    lda.z c
    cmp.z __17
    bcc __b6
    // [47] phi from textbox::@15 to textbox::@2 [phi:textbox::@15->textbox::@2]
  __b2_from___b15:
    jmp __b2
    // [47] phi from textbox::@1 textbox::@5 textbox::@7 to textbox::@2 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2]
  __b2_from___b1:
  __b2_from___b5:
  __b2_from___b7:
    // [47] phi (word) textbox::z#5 = (word) textbox::z#3 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#0] -- register_copy 
    // [47] phi (byte) textbox::y#5 = (byte) textbox::y#12 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#1] -- register_copy 
    // [47] phi (byte) textbox::x#5 = (byte) textbox::x#10 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#2] -- register_copy 
    jmp __b2
    // textbox::@2
  __b2:
    // [48] (byte) textbox::i#1 ← ++ (byte) textbox::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [49] (byte) textbox::x#1 ← ++ (byte) textbox::x#5 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [50] if((byte) textbox::x#1!=(byte) textbox::x2#4) goto textbox::@8 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b8_from___b2
    jmp __b11
    // textbox::@11
  __b11:
    // [51] (byte) textbox::x#12 ← (byte) textbox::x1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // [52] (byte) textbox::y#2 ← ++ (byte) textbox::y#5 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [53] if((byte) textbox::y#2!=(byte) textbox::y2#4) goto textbox::@9 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b9
    jmp __breturn
    // textbox::@return
  __breturn:
    // [54] return 
    rts
    // textbox::@9
  __b9:
    // [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z y
    asl
    asl
    sta.z __39
    // [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __39
    clc
    adc.z y
    sta.z __40
    // [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3 -- vwuz1=vbuz2_rol_3 
    lda.z __40
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [58] phi from textbox::@2 textbox::@9 to textbox::@8 [phi:textbox::@2/textbox::@9->textbox::@8]
  __b8_from___b2:
  __b8_from___b9:
    // [58] phi (byte) textbox::y#11 = (byte) textbox::y#5 [phi:textbox::@2/textbox::@9->textbox::@8#0] -- register_copy 
    // [58] phi (byte) textbox::x#7 = (byte) textbox::x#1 [phi:textbox::@2/textbox::@9->textbox::@8#1] -- register_copy 
    // [58] phi (word) textbox::z#4 = (word) textbox::z#5 [phi:textbox::@2/textbox::@9->textbox::@8#2] -- register_copy 
    jmp __b8
    // textbox::@8
  __b8:
    // [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1 -- pbuz1_derefidx_vbuz2_neq_0_then_la1 
    ldy.z i
    lda (text),y
    cmp #0
    bne __b1_from___b8
    jmp __breturn
    // textbox::@6
  __b6:
    // [60] (byte) textbox::y#1 ← ++ (byte) textbox::y#12 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [61] if((byte) textbox::y#1!=(byte) textbox::y2#4) goto textbox::@7 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b7
    jmp __breturn
    // textbox::@7
  __b7:
    // [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z y
    asl
    asl
    sta.z __36
    // [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __36
    clc
    adc.z y
    sta.z __37
    // [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3 -- vwuz1=vbuz2_rol_3 
    lda.z __37
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [65] (byte) textbox::x#17 ← (byte) textbox::x1#4 -- vbuz1=vbuz2 
    lda.z x1
    sta.z x
    jmp __b2_from___b7
    // textbox::@4
  __b4:
    // [66] (byte) textbox::ls#1 ← ++ (byte) textbox::ls#2 -- vbuz1=_inc_vbuz1 
    inc.z ls
    // [67] (byte) textbox::c#1 ← ++ (byte) textbox::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [40] phi from textbox::@4 to textbox::@3 [phi:textbox::@4->textbox::@3]
  __b3_from___b4:
    // [40] phi (byte) textbox::c#2 = (byte) textbox::c#1 [phi:textbox::@4->textbox::@3#0] -- register_copy 
    // [40] phi (byte) textbox::ls#2 = (byte) textbox::ls#1 [phi:textbox::@4->textbox::@3#1] -- register_copy 
    jmp __b3
}
  // draw_window
// draw_window(byte zp($17) x1, byte zp($18) y1, byte zp($19) x2, byte zp($1a) y2)
draw_window: {
    .label __2 = $33
    .label __3 = $37
    .label __4 = $3b
    .label __5 = $3f
    .label __6 = $43
    .label __8 = $44
    .label __14 = $59
    .label __15 = $5d
    .label __19 = $51
    .label __20 = $55
    .label __26 = $49
    .label x1 = $17
    .label y1 = $18
    .label x2 = $19
    .label y2 = $1a
    .label z = $2d
    .label q = $31
    .label x = $12
    .label y = $13
    .label z_1 = $4f
    .label y3 = $14
    .label z_2 = $47
    .label x3 = $15
    .label __27 = $5b
    .label __28 = $5f
    .label __29 = $35
    .label __30 = $39
    .label __31 = $53
    .label __32 = $57
    .label __33 = $3d
    .label __34 = $41
    .label __35 = $4b
    .label __36 = $2b
    .label __37 = $2c
    .label __39 = $2f
    .label __40 = $30
    .label __42 = $4d
    .label __43 = $4e
    .label __45 = $45
    .label __46 = $46
    // [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z y1
    asl
    asl
    sta.z __36
    // [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __36
    clc
    adc.z y1
    sta.z __37
    // [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3 -- vwuz1=vbuz2_rol_3 
    lda.z __37
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z y2
    asl
    asl
    sta.z __39
    // [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __39
    clc
    adc.z y2
    sta.z __40
    // [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3 -- vwuz1=vbuz2_rol_3 
    lda.z __40
    sta.z q
    lda #0
    sta.z q+1
    asl.z q
    rol.z q+1
    asl.z q
    rol.z q+1
    asl.z q
    rol.z q+1
    // [74] (byte) draw_window::x#0 ← (byte) draw_window::x1#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // [75] phi from draw_window draw_window::@2 to draw_window::@1 [phi:draw_window/draw_window::@2->draw_window::@1]
  __b1_from_draw_window:
  __b1_from___b2:
    // [75] phi (byte) draw_window::x#2 = (byte) draw_window::x#0 [phi:draw_window/draw_window::@2->draw_window::@1#0] -- register_copy 
    jmp __b1
  // draw horizontal lines
    // draw_window::@1
  __b1:
    // [76] if((byte) draw_window::x#2<(byte) draw_window::x2#0) goto draw_window::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bcc __b2
    jmp __b3
    // draw_window::@3
  __b3:
    // [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z z
    sta.z __2
    lda #0
    adc.z z+1
    sta.z __2+1
    // [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __2
    clc
    adc #<screen
    sta.z __29
    lda.z __2+1
    adc #>screen
    sta.z __29+1
    // [79] *((byte*~) draw_window::$29) ← (byte) $55 -- _deref_pbuz1=vbuc1 
    // draw upper corners
    lda #$55
    ldy #0
    sta (__29),y
    // [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x2
    clc
    adc.z z
    sta.z __3
    lda #0
    adc.z z+1
    sta.z __3+1
    // [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __3
    clc
    adc #<screen
    sta.z __30
    lda.z __3+1
    adc #>screen
    sta.z __30+1
    // [82] *((byte*~) draw_window::$30) ← (byte) $49 -- _deref_pbuz1=vbuc1 
    lda #$49
    ldy #0
    sta (__30),y
    // [83] (byte) draw_window::y#0 ← (byte) draw_window::y1#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z y
    // [84] phi from draw_window::@3 draw_window::@5 to draw_window::@4 [phi:draw_window::@3/draw_window::@5->draw_window::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [84] phi (byte) draw_window::y#2 = (byte) draw_window::y#0 [phi:draw_window::@3/draw_window::@5->draw_window::@4#0] -- register_copy 
    jmp __b4
  // draw vertical lines
    // draw_window::@4
  __b4:
    // [85] if((byte) draw_window::y#2<(byte) draw_window::y2#0) goto draw_window::@5 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bcc __b5
    jmp __b6
    // draw_window::@6
  __b6:
    // [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z q
    sta.z __4
    lda #0
    adc.z q+1
    sta.z __4+1
    // [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __4
    clc
    adc #<screen
    sta.z __33
    lda.z __4+1
    adc #>screen
    sta.z __33+1
    // [88] *((byte*~) draw_window::$33) ← (byte) $4a -- _deref_pbuz1=vbuc1 
    // draw lower corners
    lda #$4a
    ldy #0
    sta (__33),y
    // [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x2
    clc
    adc.z q
    sta.z __5
    lda #0
    adc.z q+1
    sta.z __5+1
    // [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __5
    clc
    adc #<screen
    sta.z __34
    lda.z __5+1
    adc #>screen
    sta.z __34+1
    // [91] *((byte*~) draw_window::$34) ← (byte) $4b -- _deref_pbuz1=vbuc1 
    lda #$4b
    ldy #0
    sta (__34),y
    // [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z __6
    // [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y2
    sec
    sbc.z y1
    sta.z __8
    // [94] if((byte~) draw_window::$6<(byte) 1+(byte) 1) goto draw_window::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z __6
    cmp #1+1
    bcc __breturn
    jmp __b13
    // draw_window::@13
  __b13:
    // [95] if((byte~) draw_window::$8>=(byte) 1+(byte) 1) goto draw_window::@7 -- vbuz1_ge_vbuc1_then_la1 
    lda.z __8
    cmp #1+1
    bcs __b7
    jmp __breturn
    // draw_window::@return
  __breturn:
    // [96] return 
    rts
    // draw_window::@7
  __b7:
    // [97] (byte) draw_window::y3#0 ← (byte) draw_window::y1#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z y3
    // [98] phi from draw_window::@12 draw_window::@7 to draw_window::@8 [phi:draw_window::@12/draw_window::@7->draw_window::@8]
  __b8_from___b12:
  __b8_from___b7:
    // [98] phi (byte) draw_window::y3#2 = (byte) draw_window::y3#1 [phi:draw_window::@12/draw_window::@7->draw_window::@8#0] -- register_copy 
    jmp __b8
  // blank inside
    // draw_window::@8
  __b8:
    // [99] if((byte) draw_window::y3#2<(byte) draw_window::y2#0) goto draw_window::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y3
    cmp.z y2
    bcc __b9
    jmp __breturn
    // draw_window::@9
  __b9:
    // [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z y3
    asl
    asl
    sta.z __45
    // [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __45
    clc
    adc.z y3
    sta.z __46
    // [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3 -- vwuz1=vbuz2_rol_3 
    lda.z __46
    sta.z z_2
    lda #0
    sta.z z_2+1
    asl.z z_2
    rol.z z_2+1
    asl.z z_2
    rol.z z_2+1
    asl.z z_2
    rol.z z_2+1
    // [103] (byte) draw_window::x3#0 ← (byte) draw_window::x1#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x3
    // [104] phi from draw_window::@11 draw_window::@9 to draw_window::@10 [phi:draw_window::@11/draw_window::@9->draw_window::@10]
  __b10_from___b11:
  __b10_from___b9:
    // [104] phi (byte) draw_window::x3#2 = (byte) draw_window::x3#1 [phi:draw_window::@11/draw_window::@9->draw_window::@10#0] -- register_copy 
    jmp __b10
    // draw_window::@10
  __b10:
    // [105] if((byte) draw_window::x3#2<(byte) draw_window::x2#0) goto draw_window::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x3
    cmp.z x2
    bcc __b11
    jmp __b12
    // draw_window::@12
  __b12:
    // [106] (byte) draw_window::y3#1 ← ++ (byte) draw_window::y3#2 -- vbuz1=_inc_vbuz1 
    inc.z y3
    jmp __b8_from___b12
    // draw_window::@11
  __b11:
    // [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x3
    clc
    adc.z z_2
    sta.z __26
    lda #0
    adc.z z_2+1
    sta.z __26+1
    // [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __26
    clc
    adc #<screen
    sta.z __35
    lda.z __26+1
    adc #>screen
    sta.z __35+1
    // [109] *((byte*~) draw_window::$35) ← (byte) $20 -- _deref_pbuz1=vbuc1 
    lda #$20
    ldy #0
    sta (__35),y
    // [110] (byte) draw_window::x3#1 ← ++ (byte) draw_window::x3#2 -- vbuz1=_inc_vbuz1 
    inc.z x3
    jmp __b10_from___b11
    // draw_window::@5
  __b5:
    // [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z y
    asl
    asl
    sta.z __42
    // [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __42
    clc
    adc.z y
    sta.z __43
    // [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3 -- vwuz1=vbuz2_rol_3 
    lda.z __43
    sta.z z_1
    lda #0
    sta.z z_1+1
    asl.z z_1
    rol.z z_1+1
    asl.z z_1
    rol.z z_1+1
    asl.z z_1
    rol.z z_1+1
    // [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z z_1
    sta.z __19
    lda #0
    adc.z z_1+1
    sta.z __19+1
    // [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __19
    clc
    adc #<screen
    sta.z __31
    lda.z __19+1
    adc #>screen
    sta.z __31+1
    // [116] *((byte*~) draw_window::$31) ← (byte) $42 -- _deref_pbuz1=vbuc1 
    lda #$42
    ldy #0
    sta (__31),y
    // [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x2
    clc
    adc.z z_1
    sta.z __20
    lda #0
    adc.z z_1+1
    sta.z __20+1
    // [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __20
    clc
    adc #<screen
    sta.z __32
    lda.z __20+1
    adc #>screen
    sta.z __32+1
    // [119] *((byte*~) draw_window::$32) ← (byte) $42 -- _deref_pbuz1=vbuc1 
    lda #$42
    ldy #0
    sta (__32),y
    // [120] (byte) draw_window::y#1 ← ++ (byte) draw_window::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    jmp __b4_from___b5
    // draw_window::@2
  __b2:
    // [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z z
    sta.z __14
    lda #0
    adc.z z+1
    sta.z __14+1
    // [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __14
    clc
    adc #<screen
    sta.z __27
    lda.z __14+1
    adc #>screen
    sta.z __27+1
    // [123] *((byte*~) draw_window::$27) ← (byte) $43 -- _deref_pbuz1=vbuc1 
    lda #$43
    ldy #0
    sta (__27),y
    // [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z q
    sta.z __15
    lda #0
    adc.z q+1
    sta.z __15+1
    // [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __15
    clc
    adc #<screen
    sta.z __28
    lda.z __15+1
    adc #>screen
    sta.z __28+1
    // [126] *((byte*~) draw_window::$28) ← (byte) $43 -- _deref_pbuz1=vbuc1 
    lda #$43
    ldy #0
    sta (__28),y
    // [127] (byte) draw_window::x#1 ← ++ (byte) draw_window::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    jmp __b1_from___b2
}
  // File Data
  text: .text "this is a small test with word wrap, if a word is too long it moves it to the next line. isn't that supercalifragilisticexpialidocious? i think it's cool!"
  .byte 0
  text2: .text "textbox by scan of desire"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2 [ main::x#2 main::$4 ] (  [ main::x#2 main::$4 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Statement [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a [ main::x#2 textbox::x2#0 textbox::y2#0 ] (  [ main::x#2 textbox::x2#0 textbox::y2#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ textbox::x2#4 textbox::x2#0 ]
Statement [17] if((word) main::wait#2<(word) $88b8) goto main::@5 [ main::x#2 main::wait#2 ] (  [ main::x#2 main::wait#2 ] { }  ) always clobbers reg byte a 
Statement [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ textbox::x1#4 textbox::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ textbox::y2#4 textbox::y2#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
Statement [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ textbox::i#2 textbox::i#1 ]
Statement [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2) [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:5 [ textbox::x1#4 textbox::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ textbox::x2#4 textbox::x2#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ textbox::y2#4 textbox::y2#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ textbox::i#2 textbox::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Statement [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ textbox::c#2 textbox::c#1 ]
Statement [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ textbox::$15 ]
Statement [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ textbox::y1#4 textbox::y1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:23 [ draw_window::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ draw_window::y1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ draw_window::x2#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ draw_window::y2#0 ]
Statement [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [79] *((byte*~) draw_window::$29) ← (byte) $55 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ textbox::y1#4 textbox::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ draw_window::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:24 [ draw_window::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:25 [ draw_window::x2#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ draw_window::y2#0 ]
Statement [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [82] *((byte*~) draw_window::$30) ← (byte) $49 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [88] *((byte*~) draw_window::$33) ← (byte) $4a [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [91] *((byte*~) draw_window::$34) ← (byte) $4b [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:67 [ draw_window::$6 ]
Statement [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
Statement [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
Statement [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [109] *((byte*~) draw_window::$35) ← (byte) $20 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:21 [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
Statement [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
Statement [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [116] *((byte*~) draw_window::$31) ← (byte) $42 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:19 [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
Statement [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [119] *((byte*~) draw_window::$32) ← (byte) $42 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
Statement [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [123] *((byte*~) draw_window::$27) ← (byte) $43 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:18 [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
Statement [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [126] *((byte*~) draw_window::$28) ← (byte) $43 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2 [ main::x#2 main::$4 ] (  [ main::x#2 main::$4 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a [ main::x#2 textbox::x2#0 textbox::y2#0 ] (  [ main::x#2 textbox::x2#0 textbox::y2#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:7 [ textbox::x2#4 textbox::x2#0 ]
Statement [17] if((word) main::wait#2<(word) $88b8) goto main::@5 [ main::x#2 main::wait#2 ] (  [ main::x#2 main::wait#2 ] { }  ) always clobbers reg byte a 
Statement [18] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 [ main::x#1 ] (  [ main::x#1 ] { }  ) always clobbers reg byte a 
Statement [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2) [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [79] *((byte*~) draw_window::$29) ← (byte) $55 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [82] *((byte*~) draw_window::$30) ← (byte) $49 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [88] *((byte*~) draw_window::$33) ← (byte) $4a [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [91] *((byte*~) draw_window::$34) ← (byte) $4b [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [109] *((byte*~) draw_window::$35) ← (byte) $20 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [116] *((byte*~) draw_window::$31) ← (byte) $42 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [119] *((byte*~) draw_window::$32) ← (byte) $42 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [123] *((byte*~) draw_window::$27) ← (byte) $43 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [126] *((byte*~) draw_window::$28) ← (byte) $43 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [2] if((byte) main::x#2<(byte) $f) goto main::@2 [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2 [ main::x#2 main::$4 ] (  [ main::x#2 main::$4 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a [ main::x#2 textbox::x2#0 textbox::y2#0 ] (  [ main::x#2 textbox::x2#0 textbox::y2#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte x 
Statement [17] if((word) main::wait#2<(word) $88b8) goto main::@5 [ main::x#2 main::wait#2 ] (  [ main::x#2 main::wait#2 ] { }  ) always clobbers reg byte a 
Statement [18] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 [ main::x#1 ] (  [ main::x#1 ] { }  ) always clobbers reg byte a 
Statement [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$31 textbox::$33 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::$34 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::y#0 textbox::x#0 textbox::z#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$8 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::$32 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2) [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::ls#2 textbox::c#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#3 textbox::x#10 textbox::i#2 textbox::y#12 textbox::c#2 textbox::$15 textbox::$17 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$39 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::$40 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#1 textbox::x#12 textbox::y#2 textbox::z#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::z#4 textbox::x#7 textbox::i#1 textbox::y#11 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a reg byte y 
Statement [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$36 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::$37 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] ( textbox:4 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:6 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:8 [ textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { }  textbox:15 [ main::x#2 textbox::x1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 textbox::i#2 textbox::y#1 textbox::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 } { textbox::x2#0 = textbox::x2#4 } { textbox::y2#0 = textbox::y2#4 } }  ) always clobbers reg byte a 
Statement [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$36 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$37 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$39 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::$40 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::$29 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [79] *((byte*~) draw_window::$29) ← (byte) $55 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$3 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$30 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [82] *((byte*~) draw_window::$30) ← (byte) $49 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$4 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::$33 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [88] *((byte*~) draw_window::$33) ← (byte) $4a [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$5 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$34 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [91] *((byte*~) draw_window::$34) ← (byte) $4b [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::$6 draw_window::$8 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$45 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::$46 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$26 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 draw_window::$35 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [109] *((byte*~) draw_window::$35) ← (byte) $20 [ draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::x2#0 draw_window::y2#0 draw_window::y3#2 draw_window::z#2 draw_window::x3#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$42 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$43 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$19 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 draw_window::$31 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [116] *((byte*~) draw_window::$31) ← (byte) $42 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::z#1 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$20 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 draw_window::$32 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [119] *((byte*~) draw_window::$32) ← (byte) $42 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::q#0 draw_window::y#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$14 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$27 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [123] *((byte*~) draw_window::$27) ← (byte) $43 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Statement [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$15 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 draw_window::$28 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a 
Statement [126] *((byte*~) draw_window::$28) ← (byte) $43 [ draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] ( textbox:4::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:6::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:8::draw_window:25 [ textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { draw_window::x1#0 = textbox::x1#4 } { draw_window::y1#0 = textbox::y1#4 } { draw_window::x2#0 = textbox::x2#4 } { draw_window::y2#0 = textbox::y2#4 } }  textbox:15::draw_window:25 [ main::x#2 textbox::x1#4 textbox::y1#4 textbox::x2#4 textbox::y2#4 textbox::text#12 draw_window::x1#0 draw_window::y1#0 draw_window::x2#0 draw_window::y2#0 draw_window::z#0 draw_window::q#0 draw_window::x#2 ] { { textbox::y1#0 = textbox::y1#4 textbox::x1#4 textbox::x1#0 main::x#2 draw_window::x1#0 draw_window::y1#0 } { textbox::x2#0 = textbox::x2#4 draw_window::x2#0 } { textbox::y2#0 = textbox::y2#4 draw_window::y2#0 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::x#2 main::x#1 ] : zp[1]:2 , 
Potential registers zp[2]:3 [ main::wait#2 main::wait#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ textbox::x1#4 textbox::x1#0 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ textbox::y1#4 textbox::y1#0 ] : zp[1]:6 , reg byte x , 
Potential registers zp[1]:7 [ textbox::x2#4 textbox::x2#0 ] : zp[1]:7 , 
Potential registers zp[1]:8 [ textbox::y2#4 textbox::y2#0 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ textbox::text#12 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ textbox::i#2 textbox::i#1 ] : zp[1]:11 , reg byte x , 
Potential registers zp[1]:12 [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ textbox::c#2 textbox::c#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ] : zp[1]:15 , reg byte x , 
Potential registers zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ] : zp[1]:19 , reg byte x , 
Potential registers zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ] : zp[1]:20 , reg byte x , 
Potential registers zp[1]:21 [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:22 [ main::$4 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ draw_window::x1#0 ] : zp[1]:23 , reg byte x , 
Potential registers zp[1]:24 [ draw_window::y1#0 ] : zp[1]:24 , reg byte x , 
Potential registers zp[1]:25 [ draw_window::x2#0 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ draw_window::y2#0 ] : zp[1]:26 , reg byte x , 
Potential registers zp[2]:27 [ textbox::$31 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ textbox::$33 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ textbox::$34 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ textbox::$8 ] : zp[2]:33 , 
Potential registers zp[2]:35 [ textbox::$32 ] : zp[2]:35 , 
Potential registers zp[1]:37 [ textbox::$15 ] : zp[1]:37 , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ textbox::$17 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ textbox::$39 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ textbox::$40 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ textbox::$36 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ textbox::$37 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ draw_window::$36 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ draw_window::$37 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:45 [ draw_window::z#0 ] : zp[2]:45 , 
Potential registers zp[1]:47 [ draw_window::$39 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ draw_window::$40 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:49 [ draw_window::q#0 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ draw_window::$2 ] : zp[2]:51 , 
Potential registers zp[2]:53 [ draw_window::$29 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ draw_window::$3 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ draw_window::$30 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ draw_window::$4 ] : zp[2]:59 , 
Potential registers zp[2]:61 [ draw_window::$33 ] : zp[2]:61 , 
Potential registers zp[2]:63 [ draw_window::$5 ] : zp[2]:63 , 
Potential registers zp[2]:65 [ draw_window::$34 ] : zp[2]:65 , 
Potential registers zp[1]:67 [ draw_window::$6 ] : zp[1]:67 , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ draw_window::$8 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ draw_window::$45 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ draw_window::$46 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:71 [ draw_window::z#2 ] : zp[2]:71 , 
Potential registers zp[2]:73 [ draw_window::$26 ] : zp[2]:73 , 
Potential registers zp[2]:75 [ draw_window::$35 ] : zp[2]:75 , 
Potential registers zp[1]:77 [ draw_window::$42 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ draw_window::$43 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:79 [ draw_window::z#1 ] : zp[2]:79 , 
Potential registers zp[2]:81 [ draw_window::$19 ] : zp[2]:81 , 
Potential registers zp[2]:83 [ draw_window::$31 ] : zp[2]:83 , 
Potential registers zp[2]:85 [ draw_window::$20 ] : zp[2]:85 , 
Potential registers zp[2]:87 [ draw_window::$32 ] : zp[2]:87 , 
Potential registers zp[2]:89 [ draw_window::$14 ] : zp[2]:89 , 
Potential registers zp[2]:91 [ draw_window::$27 ] : zp[2]:91 , 
Potential registers zp[2]:93 [ draw_window::$15 ] : zp[2]:93 , 
Potential registers zp[2]:95 [ draw_window::$28 ] : zp[2]:95 , 

REGISTER UPLIFT SCOPES
Uplift Scope [draw_window] 3,020,005: zp[1]:21 [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ] 2,000,002: zp[2]:73 [ draw_window::$26 ] 2,000,002: zp[2]:75 [ draw_window::$35 ] 264,629.75: zp[1]:18 [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ] 247,550: zp[1]:19 [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ] 243,754.5: zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ] 200,002: zp[1]:69 [ draw_window::$45 ] 200,002: zp[1]:70 [ draw_window::$46 ] 200,002: zp[1]:77 [ draw_window::$42 ] 200,002: zp[1]:78 [ draw_window::$43 ] 200,002: zp[2]:81 [ draw_window::$19 ] 200,002: zp[2]:83 [ draw_window::$31 ] 200,002: zp[2]:85 [ draw_window::$20 ] 200,002: zp[2]:87 [ draw_window::$32 ] 200,002: zp[2]:89 [ draw_window::$14 ] 200,002: zp[2]:91 [ draw_window::$27 ] 200,002: zp[2]:93 [ draw_window::$15 ] 200,002: zp[2]:95 [ draw_window::$28 ] 137,500.25: zp[2]:71 [ draw_window::z#2 ] 75,000.75: zp[2]:79 [ draw_window::z#1 ] 19,723.07: zp[1]:25 [ draw_window::x2#0 ] 6,059.06: zp[2]:45 [ draw_window::z#0 ] 3,385.1: zp[1]:26 [ draw_window::y2#0 ] 3,239.79: zp[1]:23 [ draw_window::x1#0 ] 3,121.33: zp[2]:49 [ draw_window::q#0 ] 2,002: zp[1]:43 [ draw_window::$36 ] 2,002: zp[1]:44 [ draw_window::$37 ] 2,002: zp[1]:47 [ draw_window::$39 ] 2,002: zp[1]:48 [ draw_window::$40 ] 2,002: zp[2]:51 [ draw_window::$2 ] 2,002: zp[2]:53 [ draw_window::$29 ] 2,002: zp[2]:55 [ draw_window::$3 ] 2,002: zp[2]:57 [ draw_window::$30 ] 2,002: zp[2]:59 [ draw_window::$4 ] 2,002: zp[2]:61 [ draw_window::$33 ] 2,002: zp[2]:63 [ draw_window::$5 ] 2,002: zp[2]:65 [ draw_window::$34 ] 1,001: zp[1]:67 [ draw_window::$6 ] 1,001: zp[1]:68 [ draw_window::$8 ] 106.38: zp[1]:24 [ draw_window::y1#0 ] 
Uplift Scope [textbox] 256,671.33: zp[1]:12 [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ] 231,431.14: zp[1]:13 [ textbox::c#2 textbox::c#1 ] 76,962.95: zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ] 57,937.48: zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ] 46,049.21: zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ] 20,002: zp[2]:33 [ textbox::$8 ] 20,002: zp[2]:35 [ textbox::$32 ] 20,002: zp[1]:39 [ textbox::$39 ] 20,002: zp[1]:40 [ textbox::$40 ] 20,002: zp[1]:41 [ textbox::$36 ] 20,002: zp[1]:42 [ textbox::$37 ] 10,001: zp[1]:37 [ textbox::$15 ] 10,001: zp[1]:38 [ textbox::$17 ] 5,000.5: zp[1]:11 [ textbox::i#2 textbox::i#1 ] 4,893.72: zp[2]:9 [ textbox::text#12 ] 653.89: zp[1]:5 [ textbox::x1#4 textbox::x1#0 ] 648.39: zp[1]:7 [ textbox::x2#4 textbox::x2#0 ] 437.44: zp[1]:8 [ textbox::y2#4 textbox::y2#0 ] 202: zp[2]:29 [ textbox::$33 ] 202: zp[2]:31 [ textbox::$34 ] 151.5: zp[2]:27 [ textbox::$31 ] 57.5: zp[1]:6 [ textbox::y1#4 textbox::y1#0 ] 
Uplift Scope [main] 353.5: zp[2]:3 [ main::wait#2 main::wait#1 ] 30: zp[1]:2 [ main::x#2 main::x#1 ] 22: zp[1]:22 [ main::$4 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [] 

Uplifting [draw_window] best 192533 combination reg byte x [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ] zp[2]:73 [ draw_window::$26 ] zp[2]:75 [ draw_window::$35 ] reg byte x [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ] reg byte x [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ] zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ] reg byte a [ draw_window::$45 ] reg byte a [ draw_window::$46 ] zp[1]:77 [ draw_window::$42 ] zp[1]:78 [ draw_window::$43 ] zp[2]:81 [ draw_window::$19 ] zp[2]:83 [ draw_window::$31 ] zp[2]:85 [ draw_window::$20 ] zp[2]:87 [ draw_window::$32 ] zp[2]:89 [ draw_window::$14 ] zp[2]:91 [ draw_window::$27 ] zp[2]:93 [ draw_window::$15 ] zp[2]:95 [ draw_window::$28 ] zp[2]:71 [ draw_window::z#2 ] zp[2]:79 [ draw_window::z#1 ] zp[1]:25 [ draw_window::x2#0 ] zp[2]:45 [ draw_window::z#0 ] zp[1]:26 [ draw_window::y2#0 ] zp[1]:23 [ draw_window::x1#0 ] zp[2]:49 [ draw_window::q#0 ] zp[1]:43 [ draw_window::$36 ] zp[1]:44 [ draw_window::$37 ] zp[1]:47 [ draw_window::$39 ] zp[1]:48 [ draw_window::$40 ] zp[2]:51 [ draw_window::$2 ] zp[2]:53 [ draw_window::$29 ] zp[2]:55 [ draw_window::$3 ] zp[2]:57 [ draw_window::$30 ] zp[2]:59 [ draw_window::$4 ] zp[2]:61 [ draw_window::$33 ] zp[2]:63 [ draw_window::$5 ] zp[2]:65 [ draw_window::$34 ] zp[1]:67 [ draw_window::$6 ] zp[1]:68 [ draw_window::$8 ] zp[1]:24 [ draw_window::y1#0 ] 
Limited combination testing to 100 combinations of 201326592 possible.
Uplifting [textbox] best 176233 combination reg byte y [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ] reg byte x [ textbox::c#2 textbox::c#1 ] zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ] zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ] zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ] zp[2]:33 [ textbox::$8 ] zp[2]:35 [ textbox::$32 ] reg byte a [ textbox::$39 ] zp[1]:40 [ textbox::$40 ] zp[1]:41 [ textbox::$36 ] zp[1]:42 [ textbox::$37 ] zp[1]:37 [ textbox::$15 ] zp[1]:38 [ textbox::$17 ] zp[1]:11 [ textbox::i#2 textbox::i#1 ] zp[2]:9 [ textbox::text#12 ] zp[1]:5 [ textbox::x1#4 textbox::x1#0 ] zp[1]:7 [ textbox::x2#4 textbox::x2#0 ] zp[1]:8 [ textbox::y2#4 textbox::y2#0 ] zp[2]:29 [ textbox::$33 ] zp[2]:31 [ textbox::$34 ] zp[2]:27 [ textbox::$31 ] zp[1]:6 [ textbox::y1#4 textbox::y1#0 ] 
Limited combination testing to 100 combinations of 1769472 possible.
Uplifting [main] best 176193 combination zp[2]:3 [ main::wait#2 main::wait#1 ] zp[1]:2 [ main::x#2 main::x#1 ] reg byte a [ main::$4 ] 
Uplifting [MOS6526_CIA] best 176193 combination 
Uplifting [MOS6569_VICII] best 176193 combination 
Uplifting [MOS6581_SID] best 176193 combination 
Uplifting [] best 176193 combination 
Attempting to uplift remaining variables inzp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
Uplifting [draw_window] best 176193 combination zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ] 
Attempting to uplift remaining variables inzp[1]:77 [ draw_window::$42 ]
Uplifting [draw_window] best 175993 combination reg byte a [ draw_window::$42 ] 
Attempting to uplift remaining variables inzp[1]:78 [ draw_window::$43 ]
Uplifting [draw_window] best 175393 combination reg byte a [ draw_window::$43 ] 
Attempting to uplift remaining variables inzp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
Uplifting [textbox] best 175393 combination zp[1]:14 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ] 
Attempting to uplift remaining variables inzp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ]
Uplifting [textbox] best 175393 combination zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ] 
Attempting to uplift remaining variables inzp[1]:40 [ textbox::$40 ]
Uplifting [textbox] best 174793 combination reg byte a [ textbox::$40 ] 
Attempting to uplift remaining variables inzp[1]:41 [ textbox::$36 ]
Uplifting [textbox] best 174193 combination reg byte a [ textbox::$36 ] 
Attempting to uplift remaining variables inzp[1]:42 [ textbox::$37 ]
Uplifting [textbox] best 173593 combination reg byte a [ textbox::$37 ] 
Attempting to uplift remaining variables inzp[1]:25 [ draw_window::x2#0 ]
Uplifting [draw_window] best 173593 combination zp[1]:25 [ draw_window::x2#0 ] 
Attempting to uplift remaining variables inzp[1]:37 [ textbox::$15 ]
Uplifting [textbox] best 173193 combination reg byte y [ textbox::$15 ] 
Attempting to uplift remaining variables inzp[1]:38 [ textbox::$17 ]
Uplifting [textbox] best 173193 combination zp[1]:38 [ textbox::$17 ] 
Attempting to uplift remaining variables inzp[1]:11 [ textbox::i#2 textbox::i#1 ]
Uplifting [textbox] best 173193 combination zp[1]:11 [ textbox::i#2 textbox::i#1 ] 
Attempting to uplift remaining variables inzp[1]:26 [ draw_window::y2#0 ]
Uplifting [draw_window] best 173193 combination zp[1]:26 [ draw_window::y2#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ draw_window::x1#0 ]
Uplifting [draw_window] best 173193 combination zp[1]:23 [ draw_window::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:43 [ draw_window::$36 ]
Uplifting [draw_window] best 173187 combination reg byte a [ draw_window::$36 ] 
Attempting to uplift remaining variables inzp[1]:44 [ draw_window::$37 ]
Uplifting [draw_window] best 173181 combination reg byte a [ draw_window::$37 ] 
Attempting to uplift remaining variables inzp[1]:47 [ draw_window::$39 ]
Uplifting [draw_window] best 173175 combination reg byte a [ draw_window::$39 ] 
Attempting to uplift remaining variables inzp[1]:48 [ draw_window::$40 ]
Uplifting [draw_window] best 173169 combination reg byte a [ draw_window::$40 ] 
Attempting to uplift remaining variables inzp[1]:67 [ draw_window::$6 ]
Uplifting [draw_window] best 173165 combination reg byte x [ draw_window::$6 ] 
Attempting to uplift remaining variables inzp[1]:68 [ draw_window::$8 ]
Uplifting [draw_window] best 173159 combination reg byte a [ draw_window::$8 ] 
Attempting to uplift remaining variables inzp[1]:5 [ textbox::x1#4 textbox::x1#0 ]
Uplifting [textbox] best 173159 combination zp[1]:5 [ textbox::x1#4 textbox::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ textbox::x2#4 textbox::x2#0 ]
Uplifting [textbox] best 173159 combination zp[1]:7 [ textbox::x2#4 textbox::x2#0 ] 
Attempting to uplift remaining variables inzp[1]:8 [ textbox::y2#4 textbox::y2#0 ]
Uplifting [textbox] best 173159 combination zp[1]:8 [ textbox::y2#4 textbox::y2#0 ] 
Attempting to uplift remaining variables inzp[1]:24 [ draw_window::y1#0 ]
Uplifting [draw_window] best 173159 combination zp[1]:24 [ draw_window::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:6 [ textbox::y1#4 textbox::y1#0 ]
Uplifting [textbox] best 173159 combination zp[1]:6 [ textbox::y1#4 textbox::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::x#2 main::x#1 ]
Uplifting [main] best 173159 combination zp[1]:2 [ main::x#2 main::x#1 ] 
Coalescing zero page register [ zp[1]:2 [ main::x#2 main::x#1 ] ] with [ zp[1]:5 [ textbox::x1#4 textbox::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ textbox::y1#4 textbox::y1#0 ] ] with [ zp[1]:15 [ textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ textbox::y1#4 textbox::y1#0 textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 ] ] with [ zp[1]:24 [ draw_window::y1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:7 [ textbox::x2#4 textbox::x2#0 ] ] with [ zp[1]:25 [ draw_window::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:8 [ textbox::y2#4 textbox::y2#0 ] ] with [ zp[1]:26 [ draw_window::y2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 ] ] with [ zp[2]:31 [ textbox::$34 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ textbox::$8 ] ] with [ zp[2]:35 [ textbox::$32 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ draw_window::z#0 ] ] with [ zp[2]:55 [ draw_window::$3 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ draw_window::q#0 ] ] with [ zp[2]:63 [ draw_window::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ draw_window::$2 ] ] with [ zp[2]:53 [ draw_window::$29 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ draw_window::$4 ] ] with [ zp[2]:61 [ draw_window::$33 ] ] - score: 1
Coalescing zero page register [ zp[2]:73 [ draw_window::$26 ] ] with [ zp[2]:75 [ draw_window::$35 ] ] - score: 1
Coalescing zero page register [ zp[2]:79 [ draw_window::z#1 ] ] with [ zp[2]:85 [ draw_window::$20 ] ] - score: 1
Coalescing zero page register [ zp[2]:81 [ draw_window::$19 ] ] with [ zp[2]:83 [ draw_window::$31 ] ] - score: 1
Coalescing zero page register [ zp[2]:89 [ draw_window::$14 ] ] with [ zp[2]:91 [ draw_window::$27 ] ] - score: 1
Coalescing zero page register [ zp[2]:93 [ draw_window::$15 ] ] with [ zp[2]:95 [ draw_window::$28 ] ] - score: 1
Coalescing zero page register [ zp[1]:2 [ main::x#2 main::x#1 textbox::x1#4 textbox::x1#0 ] ] with [ zp[1]:23 [ draw_window::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 textbox::$34 ] ] with [ zp[2]:27 [ textbox::$31 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ draw_window::z#0 draw_window::$3 ] ] with [ zp[2]:57 [ draw_window::$30 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ draw_window::q#0 draw_window::$5 ] ] with [ zp[2]:65 [ draw_window::$34 ] ] - score: 1
Coalescing zero page register [ zp[2]:79 [ draw_window::z#1 draw_window::$20 ] ] with [ zp[2]:87 [ draw_window::$32 ] ] - score: 1
Coalescing zero page register [ zp[1]:38 [ textbox::$17 ] ] with [ zp[1]:20 [ draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ] ]
Allocated (was zp[1]:6) zp[1]:5 [ textbox::y1#4 textbox::y1#0 textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 draw_window::y1#0 ]
Allocated (was zp[1]:7) zp[1]:6 [ textbox::x2#4 textbox::x2#0 draw_window::x2#0 ]
Allocated (was zp[1]:8) zp[1]:7 [ textbox::y2#4 textbox::y2#0 draw_window::y2#0 ]
Allocated (was zp[2]:9) zp[2]:8 [ textbox::text#12 ]
Allocated (was zp[1]:11) zp[1]:10 [ textbox::i#2 textbox::i#1 ]
Allocated (was zp[1]:14) zp[1]:11 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
Allocated (was zp[2]:16) zp[2]:12 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 textbox::$34 textbox::$31 ]
Allocated (was zp[2]:29) zp[2]:14 [ textbox::$33 ]
Allocated (was zp[2]:33) zp[2]:16 [ textbox::$8 textbox::$32 ]
Allocated (was zp[1]:38) zp[1]:18 [ textbox::$17 draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
Allocated (was zp[2]:45) zp[2]:19 [ draw_window::z#0 draw_window::$3 draw_window::$30 ]
Allocated (was zp[2]:49) zp[2]:21 [ draw_window::q#0 draw_window::$5 draw_window::$34 ]
Allocated (was zp[2]:51) zp[2]:23 [ draw_window::$2 draw_window::$29 ]
Allocated (was zp[2]:59) zp[2]:25 [ draw_window::$4 draw_window::$33 ]
Allocated (was zp[2]:71) zp[2]:27 [ draw_window::z#2 ]
Allocated (was zp[2]:73) zp[2]:29 [ draw_window::$26 draw_window::$35 ]
Allocated (was zp[2]:79) zp[2]:31 [ draw_window::z#1 draw_window::$20 draw_window::$32 ]
Allocated (was zp[2]:81) zp[2]:33 [ draw_window::$19 draw_window::$31 ]
Allocated (was zp[2]:89) zp[2]:35 [ draw_window::$14 draw_window::$27 ]
Allocated (was zp[2]:93) zp[2]:37 [ draw_window::$15 draw_window::$28 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/* Textbox routine with word wrap for KickC by Scan/Desire */
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label wait = 3
    .label x = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte) main::x#2<(byte) $f) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$f
    bcc __b2
    // [3] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [4] call textbox 
    // [20] phi from main::@3 to textbox [phi:main::@3->textbox]
  textbox_from___b3:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@3->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) $18 [phi:main::@3->textbox#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $14 [phi:main::@3->textbox#2] -- vbuz1=vbuc1 
    lda #$14
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) $c [phi:main::@3->textbox#3] -- vbuz1=vbuc1 
    lda #$c
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) 0 [phi:main::@3->textbox#4] -- vbuz1=vbuc1 
    lda #0
    sta.z textbox.x1
    jsr textbox
    // [5] phi from main::@3 to main::@8 [phi:main::@3->main::@8]
  __b8_from___b3:
    jmp __b8
    // main::@8
  __b8:
    // [6] call textbox 
    // [20] phi from main::@8 to textbox [phi:main::@8->textbox]
  textbox_from___b8:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@8->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) 9 [phi:main::@8->textbox#1] -- vbuz1=vbuc1 
    lda #9
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $25 [phi:main::@8->textbox#2] -- vbuz1=vbuc1 
    lda #$25
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) 3 [phi:main::@8->textbox#3] -- vbuz1=vbuc1 
    lda #3
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) 3 [phi:main::@8->textbox#4] -- vbuz1=vbuc1 
    lda #3
    sta.z textbox.x1
    jsr textbox
    // [7] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [8] call textbox 
    // [20] phi from main::@9 to textbox [phi:main::@9->textbox]
  textbox_from___b9:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@9->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) $18 [phi:main::@9->textbox#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $27 [phi:main::@9->textbox#2] -- vbuz1=vbuc1 
    lda #$27
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) 8 [phi:main::@9->textbox#3] -- vbuz1=vbuc1 
    lda #8
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) $1e [phi:main::@9->textbox#4] -- vbuz1=vbuc1 
    lda #$1e
    sta.z textbox.x1
    jsr textbox
    // [9] phi from main::@7 main::@9 to main::@7 [phi:main::@7/main::@9->main::@7]
  __b7_from___b7:
  __b7_from___b9:
    jmp __b7
    // main::@7
  __b7:
    jmp __b7_from___b7
    // main::@2
  __b2:
    // [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2 -- vbuaa=vbuz1_plus_vbuz1 
    lda.z x
    asl
    // [11] (byte) textbox::x2#0 ← (byte~) main::$4 + (byte) 1 -- vbuz1=vbuaa_plus_1 
    clc
    adc #1
    sta.z textbox.x2
    // [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax.z x
    axs #-[$a]
    stx.z textbox.y2
    // [13] (byte) textbox::x1#0 ← (byte) main::x#2
    // [14] (byte) textbox::y1#0 ← (byte) main::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z textbox.y1
    // [15] call textbox 
    // [20] phi from main::@2 to textbox [phi:main::@2->textbox]
  textbox_from___b2:
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text2 [phi:main::@2->textbox#0] -- pbuz1=pbuc1 
    lda #<text2
    sta.z textbox.text
    lda #>text2
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) textbox::y2#0 [phi:main::@2->textbox#1] -- register_copy 
    // [20] phi (byte) textbox::x2#4 = (byte) textbox::x2#0 [phi:main::@2->textbox#2] -- register_copy 
    // [20] phi (byte) textbox::y1#4 = (byte) textbox::y1#0 [phi:main::@2->textbox#3] -- register_copy 
    // [20] phi (byte) textbox::x1#4 = (byte) textbox::x1#0 [phi:main::@2->textbox#4] -- register_copy 
    jsr textbox
    // [16] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [16] phi (word) main::wait#2 = (word) 0 [phi:main::@2->main::@4#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z wait
    lda #>0
    sta.z wait+1
    jmp __b4
    // main::@4
  __b4:
    // [17] if((word) main::wait#2<(word) $88b8) goto main::@5 -- vwuz1_lt_vwuc1_then_la1 
    lda.z wait+1
    cmp #>$88b8
    bcc __b5
    bne !+
    lda.z wait
    cmp #<$88b8
    bcc __b5
  !:
    jmp __b6
    // main::@6
  __b6:
    // [18] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z x
    clc
    adc #2
    sta.z x
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [1] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // [19] (word) main::wait#1 ← ++ (word) main::wait#2 -- vwuz1=_inc_vwuz1 
    inc.z wait
    bne !+
    inc.z wait+1
  !:
    // [16] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [16] phi (word) main::wait#2 = (word) main::wait#1 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
}
  // textbox
// textbox(byte zp(2) x1, byte zp(5) y1, byte zp(6) x2, byte zp(7) y2, byte* zp(8) text)
textbox: {
    .label __8 = $10
    .label __17 = $12
    .label __31 = $c
    .label x1 = 2
    .label y1 = 5
    .label x2 = 6
    .label y2 = 7
    .label y = 5
    .label x = $b
    .label z = $c
    .label i = $a
    .label text = 8
    .label __32 = $10
    .label __33 = $e
    .label __34 = $c
    // [21] (byte) draw_window::x1#0 ← (byte) textbox::x1#4
    // [22] (byte) draw_window::y1#0 ← (byte) textbox::y1#4
    // [23] (byte) draw_window::x2#0 ← (byte) textbox::x2#4
    // [24] (byte) draw_window::y2#0 ← (byte) textbox::y2#4
    // [25] call draw_window 
    jsr draw_window
    jmp __b12
    // textbox::@12
  __b12:
    // [26] (byte) textbox::y#0 ← (byte) textbox::y1#4 + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z y
    // [27] (byte) textbox::x#0 ← (byte) textbox::x1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __31
    lda #0
    sta.z __31+1
    // [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __31
    asl
    sta.z __33
    lda.z __31+1
    rol
    sta.z __33+1
    asl.z __33
    rol.z __33+1
    // [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __34
    clc
    adc.z __33
    sta.z __34
    lda.z __34+1
    adc.z __33+1
    sta.z __34+1
    // [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [32] if((byte) textbox::x#0==(byte) textbox::x2#4) goto textbox::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    beq __breturn
    jmp __b13
    // textbox::@13
  __b13:
    // [33] if((byte) textbox::y#0==(byte) textbox::y2#4) goto textbox::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    beq __breturn
    // [34] phi from textbox::@13 to textbox::@1 [phi:textbox::@13->textbox::@1]
  __b1_from___b13:
    // [34] phi (byte) textbox::y#12 = (byte) textbox::y#0 [phi:textbox::@13->textbox::@1#0] -- register_copy 
    // [34] phi (byte) textbox::i#2 = (byte) 0 [phi:textbox::@13->textbox::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [34] phi (byte) textbox::x#10 = (byte) textbox::x#0 [phi:textbox::@13->textbox::@1#2] -- register_copy 
    // [34] phi (word) textbox::z#3 = (word) textbox::z#0 [phi:textbox::@13->textbox::@1#3] -- register_copy 
    jmp __b1
    // [34] phi from textbox::@8 to textbox::@1 [phi:textbox::@8->textbox::@1]
  __b1_from___b8:
    // [34] phi (byte) textbox::y#12 = (byte) textbox::y#11 [phi:textbox::@8->textbox::@1#0] -- register_copy 
    // [34] phi (byte) textbox::i#2 = (byte) textbox::i#1 [phi:textbox::@8->textbox::@1#1] -- register_copy 
    // [34] phi (byte) textbox::x#10 = (byte) textbox::x#7 [phi:textbox::@8->textbox::@1#2] -- register_copy 
    // [34] phi (word) textbox::z#3 = (word) textbox::z#4 [phi:textbox::@8->textbox::@1#3] -- register_copy 
    jmp __b1
    // textbox::@1
  __b1:
    // [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z z
    sta.z __8
    lda #0
    adc.z z+1
    sta.z __8+1
    // [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __32
    adc #<screen
    sta.z __32
    lda.z __32+1
    adc #>screen
    sta.z __32+1
    // [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2) -- _deref_pbuz1=pbuz2_derefidx_vbuz3 
    ldy.z i
    lda (text),y
    ldy #0
    sta (__32),y
    // [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2 -- pbuz1_derefidx_vbuz2_neq_vbuc1_then_la1 
    ldy.z i
    lda (text),y
    cmp #$20
    bne __b2_from___b1
    jmp __b10
    // textbox::@10
  __b10:
    // [39] (byte) textbox::ls#0 ← (byte) textbox::i#2 + (byte) 1 -- vbuyy=vbuz1_plus_1 
    ldy.z i
    iny
    // [40] phi from textbox::@10 to textbox::@3 [phi:textbox::@10->textbox::@3]
  __b3_from___b10:
    // [40] phi (byte) textbox::c#2 = (byte) 0 [phi:textbox::@10->textbox::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [40] phi (byte) textbox::ls#2 = (byte) textbox::ls#0 [phi:textbox::@10->textbox::@3#1] -- register_copy 
    jmp __b3
    // textbox::@3
  __b3:
    // [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda #$20
    cmp (text),y
    beq __b5
    jmp __b14
    // textbox::@14
  __b14:
    // [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4 -- pbuz1_derefidx_vbuyy_neq_0_then_la1 
    lda (text),y
    cmp #0
    bne __b4
    jmp __b5
    // textbox::@5
  __b5:
    // [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10 -- vbuyy=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z x
    tay
    // [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z __17
    // [45] if((byte~) textbox::$15<(byte) textbox::x2#4) goto textbox::@2 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z x2
    bcc __b2_from___b5
    jmp __b15
    // textbox::@15
  __b15:
    // [46] if((byte) textbox::c#2<(byte~) textbox::$17) goto textbox::@6 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z __17
    bcc __b6
    // [47] phi from textbox::@15 to textbox::@2 [phi:textbox::@15->textbox::@2]
  __b2_from___b15:
    jmp __b2
    // [47] phi from textbox::@1 textbox::@5 textbox::@7 to textbox::@2 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2]
  __b2_from___b1:
  __b2_from___b5:
  __b2_from___b7:
    // [47] phi (word) textbox::z#5 = (word) textbox::z#3 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#0] -- register_copy 
    // [47] phi (byte) textbox::y#5 = (byte) textbox::y#12 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#1] -- register_copy 
    // [47] phi (byte) textbox::x#5 = (byte) textbox::x#10 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#2] -- register_copy 
    jmp __b2
    // textbox::@2
  __b2:
    // [48] (byte) textbox::i#1 ← ++ (byte) textbox::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [49] (byte) textbox::x#1 ← ++ (byte) textbox::x#5 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [50] if((byte) textbox::x#1!=(byte) textbox::x2#4) goto textbox::@8 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b8_from___b2
    jmp __b11
    // textbox::@11
  __b11:
    // [51] (byte) textbox::x#12 ← (byte) textbox::x1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // [52] (byte) textbox::y#2 ← ++ (byte) textbox::y#5 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [53] if((byte) textbox::y#2!=(byte) textbox::y2#4) goto textbox::@9 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b9
    jmp __breturn
    // textbox::@return
  __breturn:
    // [54] return 
    rts
    // textbox::@9
  __b9:
    // [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y
    asl
    asl
    // [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y
    // [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [58] phi from textbox::@2 textbox::@9 to textbox::@8 [phi:textbox::@2/textbox::@9->textbox::@8]
  __b8_from___b2:
  __b8_from___b9:
    // [58] phi (byte) textbox::y#11 = (byte) textbox::y#5 [phi:textbox::@2/textbox::@9->textbox::@8#0] -- register_copy 
    // [58] phi (byte) textbox::x#7 = (byte) textbox::x#1 [phi:textbox::@2/textbox::@9->textbox::@8#1] -- register_copy 
    // [58] phi (word) textbox::z#4 = (word) textbox::z#5 [phi:textbox::@2/textbox::@9->textbox::@8#2] -- register_copy 
    jmp __b8
    // textbox::@8
  __b8:
    // [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1 -- pbuz1_derefidx_vbuz2_neq_0_then_la1 
    ldy.z i
    lda (text),y
    cmp #0
    bne __b1_from___b8
    jmp __breturn
    // textbox::@6
  __b6:
    // [60] (byte) textbox::y#1 ← ++ (byte) textbox::y#12 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [61] if((byte) textbox::y#1!=(byte) textbox::y2#4) goto textbox::@7 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b7
    jmp __breturn
    // textbox::@7
  __b7:
    // [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y
    asl
    asl
    // [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y
    // [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [65] (byte) textbox::x#17 ← (byte) textbox::x1#4 -- vbuz1=vbuz2 
    lda.z x1
    sta.z x
    jmp __b2_from___b7
    // textbox::@4
  __b4:
    // [66] (byte) textbox::ls#1 ← ++ (byte) textbox::ls#2 -- vbuyy=_inc_vbuyy 
    iny
    // [67] (byte) textbox::c#1 ← ++ (byte) textbox::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [40] phi from textbox::@4 to textbox::@3 [phi:textbox::@4->textbox::@3]
  __b3_from___b4:
    // [40] phi (byte) textbox::c#2 = (byte) textbox::c#1 [phi:textbox::@4->textbox::@3#0] -- register_copy 
    // [40] phi (byte) textbox::ls#2 = (byte) textbox::ls#1 [phi:textbox::@4->textbox::@3#1] -- register_copy 
    jmp __b3
}
  // draw_window
// draw_window(byte zp(2) x1, byte zp(5) y1, byte zp(6) x2, byte zp(7) y2)
draw_window: {
    .label __2 = $17
    .label __3 = $13
    .label __4 = $19
    .label __5 = $15
    .label __14 = $23
    .label __15 = $25
    .label __19 = $21
    .label __20 = $1f
    .label __26 = $1d
    .label x1 = 2
    .label y1 = 5
    .label x2 = 6
    .label y2 = 7
    .label z = $13
    .label q = $15
    .label z_1 = $1f
    .label y3 = $12
    .label z_2 = $1b
    .label __27 = $23
    .label __28 = $25
    .label __29 = $17
    .label __30 = $13
    .label __31 = $21
    .label __32 = $1f
    .label __33 = $19
    .label __34 = $15
    .label __35 = $1d
    // [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y1
    asl
    asl
    // [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y1
    // [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y2
    asl
    asl
    // [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y2
    // [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z q
    lda #0
    sta.z q+1
    asl.z q
    rol.z q+1
    asl.z q
    rol.z q+1
    asl.z q
    rol.z q+1
    // [74] (byte) draw_window::x#0 ← (byte) draw_window::x1#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // [75] phi from draw_window draw_window::@2 to draw_window::@1 [phi:draw_window/draw_window::@2->draw_window::@1]
  __b1_from_draw_window:
  __b1_from___b2:
    // [75] phi (byte) draw_window::x#2 = (byte) draw_window::x#0 [phi:draw_window/draw_window::@2->draw_window::@1#0] -- register_copy 
    jmp __b1
  // draw horizontal lines
    // draw_window::@1
  __b1:
    // [76] if((byte) draw_window::x#2<(byte) draw_window::x2#0) goto draw_window::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z x2
    bcc __b2
    jmp __b3
    // draw_window::@3
  __b3:
    // [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z z
    sta.z __2
    lda #0
    adc.z z+1
    sta.z __2+1
    // [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __29
    adc #<screen
    sta.z __29
    lda.z __29+1
    adc #>screen
    sta.z __29+1
    // [79] *((byte*~) draw_window::$29) ← (byte) $55 -- _deref_pbuz1=vbuc1 
    // draw upper corners
    lda #$55
    ldy #0
    sta (__29),y
    // [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x2
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __30
    adc #<screen
    sta.z __30
    lda.z __30+1
    adc #>screen
    sta.z __30+1
    // [82] *((byte*~) draw_window::$30) ← (byte) $49 -- _deref_pbuz1=vbuc1 
    lda #$49
    ldy #0
    sta (__30),y
    // [83] (byte) draw_window::y#0 ← (byte) draw_window::y1#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // [84] phi from draw_window::@3 draw_window::@5 to draw_window::@4 [phi:draw_window::@3/draw_window::@5->draw_window::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [84] phi (byte) draw_window::y#2 = (byte) draw_window::y#0 [phi:draw_window::@3/draw_window::@5->draw_window::@4#0] -- register_copy 
    jmp __b4
  // draw vertical lines
    // draw_window::@4
  __b4:
    // [85] if((byte) draw_window::y#2<(byte) draw_window::y2#0) goto draw_window::@5 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y2
    bcc __b5
    jmp __b6
    // draw_window::@6
  __b6:
    // [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z q
    sta.z __4
    lda #0
    adc.z q+1
    sta.z __4+1
    // [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __33
    adc #<screen
    sta.z __33
    lda.z __33+1
    adc #>screen
    sta.z __33+1
    // [88] *((byte*~) draw_window::$33) ← (byte) $4a -- _deref_pbuz1=vbuc1 
    // draw lower corners
    lda #$4a
    ldy #0
    sta (__33),y
    // [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x2
    clc
    adc.z __5
    sta.z __5
    bcc !+
    inc.z __5+1
  !:
    // [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __34
    adc #<screen
    sta.z __34
    lda.z __34+1
    adc #>screen
    sta.z __34+1
    // [91] *((byte*~) draw_window::$34) ← (byte) $4b -- _deref_pbuz1=vbuc1 
    lda #$4b
    ldy #0
    sta (__34),y
    // [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0 -- vbuxx=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x1
    tax
    // [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y1
    // [94] if((byte~) draw_window::$6<(byte) 1+(byte) 1) goto draw_window::@return -- vbuxx_lt_vbuc1_then_la1 
    cpx #1+1
    bcc __breturn
    jmp __b13
    // draw_window::@13
  __b13:
    // [95] if((byte~) draw_window::$8>=(byte) 1+(byte) 1) goto draw_window::@7 -- vbuaa_ge_vbuc1_then_la1 
    cmp #1+1
    bcs __b7
    jmp __breturn
    // draw_window::@return
  __breturn:
    // [96] return 
    rts
    // draw_window::@7
  __b7:
    // [97] (byte) draw_window::y3#0 ← (byte) draw_window::y1#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z y3
    // [98] phi from draw_window::@12 draw_window::@7 to draw_window::@8 [phi:draw_window::@12/draw_window::@7->draw_window::@8]
  __b8_from___b12:
  __b8_from___b7:
    // [98] phi (byte) draw_window::y3#2 = (byte) draw_window::y3#1 [phi:draw_window::@12/draw_window::@7->draw_window::@8#0] -- register_copy 
    jmp __b8
  // blank inside
    // draw_window::@8
  __b8:
    // [99] if((byte) draw_window::y3#2<(byte) draw_window::y2#0) goto draw_window::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y3
    cmp.z y2
    bcc __b9
    jmp __breturn
    // draw_window::@9
  __b9:
    // [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y3
    asl
    asl
    // [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y3
    // [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z_2
    lda #0
    sta.z z_2+1
    asl.z z_2
    rol.z z_2+1
    asl.z z_2
    rol.z z_2+1
    asl.z z_2
    rol.z z_2+1
    // [103] (byte) draw_window::x3#0 ← (byte) draw_window::x1#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // [104] phi from draw_window::@11 draw_window::@9 to draw_window::@10 [phi:draw_window::@11/draw_window::@9->draw_window::@10]
  __b10_from___b11:
  __b10_from___b9:
    // [104] phi (byte) draw_window::x3#2 = (byte) draw_window::x3#1 [phi:draw_window::@11/draw_window::@9->draw_window::@10#0] -- register_copy 
    jmp __b10
    // draw_window::@10
  __b10:
    // [105] if((byte) draw_window::x3#2<(byte) draw_window::x2#0) goto draw_window::@11 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z x2
    bcc __b11
    jmp __b12
    // draw_window::@12
  __b12:
    // [106] (byte) draw_window::y3#1 ← ++ (byte) draw_window::y3#2 -- vbuz1=_inc_vbuz1 
    inc.z y3
    jmp __b8_from___b12
    // draw_window::@11
  __b11:
    // [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z z_2
    sta.z __26
    lda #0
    adc.z z_2+1
    sta.z __26+1
    // [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __35
    adc #<screen
    sta.z __35
    lda.z __35+1
    adc #>screen
    sta.z __35+1
    // [109] *((byte*~) draw_window::$35) ← (byte) $20 -- _deref_pbuz1=vbuc1 
    lda #$20
    ldy #0
    sta (__35),y
    // [110] (byte) draw_window::x3#1 ← ++ (byte) draw_window::x3#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b10_from___b11
    // draw_window::@5
  __b5:
    // [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z_1
    lda #0
    sta.z z_1+1
    asl.z z_1
    rol.z z_1+1
    asl.z z_1
    rol.z z_1+1
    asl.z z_1
    rol.z z_1+1
    // [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z z_1
    sta.z __19
    lda #0
    adc.z z_1+1
    sta.z __19+1
    // [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __31
    adc #<screen
    sta.z __31
    lda.z __31+1
    adc #>screen
    sta.z __31+1
    // [116] *((byte*~) draw_window::$31) ← (byte) $42 -- _deref_pbuz1=vbuc1 
    lda #$42
    ldy #0
    sta (__31),y
    // [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x2
    clc
    adc.z __20
    sta.z __20
    bcc !+
    inc.z __20+1
  !:
    // [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __32
    adc #<screen
    sta.z __32
    lda.z __32+1
    adc #>screen
    sta.z __32+1
    // [119] *((byte*~) draw_window::$32) ← (byte) $42 -- _deref_pbuz1=vbuc1 
    lda #$42
    ldy #0
    sta (__32),y
    // [120] (byte) draw_window::y#1 ← ++ (byte) draw_window::y#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b4_from___b5
    // draw_window::@2
  __b2:
    // [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z z
    sta.z __14
    lda #0
    adc.z z+1
    sta.z __14+1
    // [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __27
    adc #<screen
    sta.z __27
    lda.z __27+1
    adc #>screen
    sta.z __27+1
    // [123] *((byte*~) draw_window::$27) ← (byte) $43 -- _deref_pbuz1=vbuc1 
    lda #$43
    ldy #0
    sta (__27),y
    // [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z q
    sta.z __15
    lda #0
    adc.z q+1
    sta.z __15+1
    // [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __28
    adc #<screen
    sta.z __28
    lda.z __28+1
    adc #>screen
    sta.z __28+1
    // [126] *((byte*~) draw_window::$28) ← (byte) $43 -- _deref_pbuz1=vbuc1 
    lda #$43
    ldy #0
    sta (__28),y
    // [127] (byte) draw_window::x#1 ← ++ (byte) draw_window::x#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b1_from___b2
}
  // File Data
  text: .text "this is a small test with word wrap, if a word is too long it moves it to the next line. isn't that supercalifragilisticexpialidocious? i think it's cool!"
  .byte 0
  text2: .text "textbox by scan of desire"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b10
Removing instruction jmp __b3
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b2
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b13
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b12
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #3
Removing instruction lda #>0
Replacing instruction lda.z x with TYA
Replacing instruction lda #0 with TYA
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b7_from___b7 with __b7
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b5 with __b2
Replacing label __b8_from___b2 with __b8
Replacing label __b1_from___b8 with __b1
Replacing label __b2_from___b7 with __b2
Replacing label __b8_from___b12 with __b8_from___b7
Replacing label __b10_from___b11 with __b10
Removing instruction __b3_from___b1:
Removing instruction textbox_from___b3:
Removing instruction __b8_from___b3:
Removing instruction textbox_from___b8:
Removing instruction __b9_from___b8:
Removing instruction textbox_from___b9:
Removing instruction __b7_from___b7:
Removing instruction __b7_from___b9:
Removing instruction __b1_from___b8:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction __b2_from___b7:
Removing instruction __b8_from___b2:
Removing instruction __b8_from___b9:
Removing instruction __b1_from_draw_window:
Removing instruction __b4_from___b3:
Removing instruction __b8_from___b12:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b9:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction textbox_from___b2:
Removing instruction __b4_from___b2:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b4_from___b5:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __b10:
Removing instruction __b3_from___b10:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b2_from___b15:
Removing instruction __b11:
Removing instruction __b3_from___b4:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b6:
Removing instruction __b13:
Removing instruction __b8:
Removing instruction __b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b2 to __b1
Relabelling long label __b4_from___b5 to __b3
Relabelling long label __b8_from___b7 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy.z i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Fixing long branch [231] bne __b1 to beq
Fixing long branch [326] bcc __b2 to bcs
Fixing long branch [369] bcc __b5 to bcs

FINAL SYMBOL TABLE
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) draw_window((byte) draw_window::x1 , (byte) draw_window::y1 , (byte) draw_window::x2 , (byte) draw_window::y2)
(word~) draw_window::$14 zp[2]:35 200002.0
(word~) draw_window::$15 zp[2]:37 200002.0
(word~) draw_window::$19 zp[2]:33 200002.0
(word~) draw_window::$2 zp[2]:23 2002.0
(word~) draw_window::$20 zp[2]:31 200002.0
(word~) draw_window::$26 zp[2]:29 2000002.0
(byte*~) draw_window::$27 zp[2]:35 200002.0
(byte*~) draw_window::$28 zp[2]:37 200002.0
(byte*~) draw_window::$29 zp[2]:23 2002.0
(word~) draw_window::$3 zp[2]:19 2002.0
(byte*~) draw_window::$30 zp[2]:19 2002.0
(byte*~) draw_window::$31 zp[2]:33 200002.0
(byte*~) draw_window::$32 zp[2]:31 200002.0
(byte*~) draw_window::$33 zp[2]:25 2002.0
(byte*~) draw_window::$34 zp[2]:21 2002.0
(byte*~) draw_window::$35 zp[2]:29 2000002.0
(byte~) draw_window::$36 reg byte a 2002.0
(byte~) draw_window::$37 reg byte a 2002.0
(byte~) draw_window::$39 reg byte a 2002.0
(word~) draw_window::$4 zp[2]:25 2002.0
(byte~) draw_window::$40 reg byte a 2002.0
(byte~) draw_window::$42 reg byte a 200002.0
(byte~) draw_window::$43 reg byte a 200002.0
(byte~) draw_window::$45 reg byte a 200002.0
(byte~) draw_window::$46 reg byte a 200002.0
(word~) draw_window::$5 zp[2]:21 2002.0
(byte~) draw_window::$6 reg byte x 1001.0
(byte~) draw_window::$8 reg byte a 1001.0
(label) draw_window::@1
(label) draw_window::@10
(label) draw_window::@11
(label) draw_window::@12
(label) draw_window::@13
(label) draw_window::@2
(label) draw_window::@3
(label) draw_window::@4
(label) draw_window::@5
(label) draw_window::@6
(label) draw_window::@7
(label) draw_window::@8
(label) draw_window::@9
(label) draw_window::@return
(word) draw_window::q
(word) draw_window::q#0 q zp[2]:21 3121.3333333333335
(byte) draw_window::x
(byte) draw_window::x#0 reg byte x 2002.0
(byte) draw_window::x#1 reg byte x 200002.0
(byte) draw_window::x#2 reg byte x 62625.75
(byte) draw_window::x1
(byte) draw_window::x1#0 x1 zp[1]:2 3239.7936507936506
(byte) draw_window::x2
(byte) draw_window::x2#0 x2 zp[1]:6 19723.06557377049
(byte) draw_window::x3
(byte) draw_window::x3#0 reg byte x 200002.0
(byte) draw_window::x3#1 reg byte x 2000002.0
(byte) draw_window::x3#2 reg byte x 820001.0
(byte) draw_window::y
(byte) draw_window::y#0 reg byte x 2002.0
(byte) draw_window::y#1 reg byte x 200002.0
(byte) draw_window::y#2 reg byte x 45546.0
(byte) draw_window::y1
(byte) draw_window::y1#0 y1 zp[1]:5 106.37500000000001
(byte) draw_window::y2
(byte) draw_window::y2#0 y2 zp[1]:7 3385.1000000000004
(byte) draw_window::y3
(byte) draw_window::y3#0 y3 zp[1]:18 2002.0
(byte) draw_window::y3#1 y3 zp[1]:18 200002.0
(byte) draw_window::y3#2 y3 zp[1]:18 41750.49999999999
(word) draw_window::z
(word) draw_window::z#0 z zp[2]:19 6059.058823529412
(word) draw_window::z#1 z_1 zp[2]:31 75000.75
(word) draw_window::z#2 z_2 zp[2]:27 137500.25
(void()) main()
(byte~) main::$4 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(word) main::wait
(word) main::wait#1 wait zp[2]:3 202.0
(word) main::wait#2 wait zp[2]:3 151.5
(byte) main::x
(byte) main::x#1 x zp[1]:2 22.0
(byte) main::x#2 x zp[1]:2 8.0
(const nomodify byte*) screen = (byte*) 1024
(const to_nomodify byte*) text[]  = (byte*) "this is a small test with word wrap, if a word is too long it moves it to the next line. isn't that supercalifragilisticexpialidocious? i think it's cool!"
(const to_nomodify byte*) text2[]  = (byte*) "textbox by scan of desire"
(void()) textbox((byte) textbox::x1 , (byte) textbox::y1 , (byte) textbox::x2 , (byte) textbox::y2 , (byte*) textbox::text)
(byte~) textbox::$15 reg byte y 10001.0
(byte~) textbox::$17 zp[1]:18 10001.0
(word~) textbox::$31 zp[2]:12 151.5
(byte*~) textbox::$32 zp[2]:16 20002.0
(word~) textbox::$33 zp[2]:14 202.0
(word~) textbox::$34 zp[2]:12 202.0
(byte~) textbox::$36 reg byte a 20002.0
(byte~) textbox::$37 reg byte a 20002.0
(byte~) textbox::$39 reg byte a 20002.0
(byte~) textbox::$40 reg byte a 20002.0
(word~) textbox::$8 zp[2]:16 20002.0
(label) textbox::@1
(label) textbox::@10
(label) textbox::@11
(label) textbox::@12
(label) textbox::@13
(label) textbox::@14
(label) textbox::@15
(label) textbox::@2
(label) textbox::@3
(label) textbox::@4
(label) textbox::@5
(label) textbox::@6
(label) textbox::@7
(label) textbox::@8
(label) textbox::@9
(label) textbox::@return
(byte) textbox::c
(byte) textbox::c#1 reg byte x 200002.0
(byte) textbox::c#2 reg byte x 31429.142857142855
(byte) textbox::i
(byte) textbox::i#1 i zp[1]:10 2727.5454545454545
(byte) textbox::i#2 i zp[1]:10 2272.9545454545455
(byte) textbox::ls
(byte) textbox::ls#0 reg byte y 20002.0
(byte) textbox::ls#1 reg byte y 100001.0
(byte) textbox::ls#2 reg byte y 136668.3333333333
(byte*) textbox::text
(byte*) textbox::text#12 text zp[2]:8 4893.723404255319
(byte) textbox::x
(byte) textbox::x#0 x zp[1]:11 43.285714285714285
(byte) textbox::x#1 x zp[1]:11 15001.5
(byte) textbox::x#10 x zp[1]:11 3579.000000000001
(byte) textbox::x#12 x zp[1]:11 3333.6666666666665
(byte) textbox::x#17 x zp[1]:11 20002.0
(byte) textbox::x#5 x zp[1]:11 20002.0
(byte) textbox::x#7 x zp[1]:11 15001.5
(byte) textbox::x1
(byte) textbox::x1#0 x1 zp[1]:2 11.0
(byte) textbox::x1#4 x1 zp[1]:2 642.8936170212767
(byte) textbox::x2
(byte) textbox::x2#0 x2 zp[1]:6 5.5
(byte) textbox::x2#4 x2 zp[1]:6 642.8936170212767
(byte) textbox::y
(byte) textbox::y#0 y zp[1]:5 37.875
(byte) textbox::y#1 y zp[1]:5 8334.166666666666
(byte) textbox::y#11 y zp[1]:5 15001.5
(byte) textbox::y#12 y zp[1]:5 2673.666666666667
(byte) textbox::y#2 y zp[1]:5 10001.0
(byte) textbox::y#5 y zp[1]:5 10001.0
(byte) textbox::y1
(byte) textbox::y1#0 y1 zp[1]:5 22.0
(byte) textbox::y1#4 y1 zp[1]:5 35.5
(byte) textbox::y2
(byte) textbox::y2#0 y2 zp[1]:7 7.333333333333333
(byte) textbox::y2#4 y2 zp[1]:7 430.10638297872345
(word) textbox::z
(word) textbox::z#0 z zp[2]:12 67.33333333333333
(word) textbox::z#1 z zp[2]:12 10001.0
(word) textbox::z#2 z zp[2]:12 20002.0
(word) textbox::z#3 z zp[2]:12 2864.642857142858
(word) textbox::z#4 z zp[2]:12 15001.5
(word) textbox::z#5 z zp[2]:12 10001.0

zp[1]:2 [ main::x#2 main::x#1 textbox::x1#4 textbox::x1#0 draw_window::x1#0 ]
zp[2]:3 [ main::wait#2 main::wait#1 ]
zp[1]:5 [ textbox::y1#4 textbox::y1#0 textbox::y#5 textbox::y#12 textbox::y#0 textbox::y#11 textbox::y#1 textbox::y#2 draw_window::y1#0 ]
zp[1]:6 [ textbox::x2#4 textbox::x2#0 draw_window::x2#0 ]
zp[1]:7 [ textbox::y2#4 textbox::y2#0 draw_window::y2#0 ]
zp[2]:8 [ textbox::text#12 ]
zp[1]:10 [ textbox::i#2 textbox::i#1 ]
reg byte y [ textbox::ls#2 textbox::ls#0 textbox::ls#1 ]
reg byte x [ textbox::c#2 textbox::c#1 ]
zp[1]:11 [ textbox::x#5 textbox::x#10 textbox::x#0 textbox::x#7 textbox::x#17 textbox::x#1 textbox::x#12 ]
zp[2]:12 [ textbox::z#5 textbox::z#3 textbox::z#0 textbox::z#4 textbox::z#1 textbox::z#2 textbox::$34 textbox::$31 ]
reg byte x [ draw_window::x#2 draw_window::x#0 draw_window::x#1 ]
reg byte x [ draw_window::y#2 draw_window::y#0 draw_window::y#1 ]
reg byte x [ draw_window::x3#2 draw_window::x3#1 draw_window::x3#0 ]
reg byte a [ main::$4 ]
zp[2]:14 [ textbox::$33 ]
zp[2]:16 [ textbox::$8 textbox::$32 ]
reg byte y [ textbox::$15 ]
zp[1]:18 [ textbox::$17 draw_window::y3#2 draw_window::y3#1 draw_window::y3#0 ]
reg byte a [ textbox::$39 ]
reg byte a [ textbox::$40 ]
reg byte a [ textbox::$36 ]
reg byte a [ textbox::$37 ]
reg byte a [ draw_window::$36 ]
reg byte a [ draw_window::$37 ]
zp[2]:19 [ draw_window::z#0 draw_window::$3 draw_window::$30 ]
reg byte a [ draw_window::$39 ]
reg byte a [ draw_window::$40 ]
zp[2]:21 [ draw_window::q#0 draw_window::$5 draw_window::$34 ]
zp[2]:23 [ draw_window::$2 draw_window::$29 ]
zp[2]:25 [ draw_window::$4 draw_window::$33 ]
reg byte x [ draw_window::$6 ]
reg byte a [ draw_window::$8 ]
reg byte a [ draw_window::$45 ]
reg byte a [ draw_window::$46 ]
zp[2]:27 [ draw_window::z#2 ]
zp[2]:29 [ draw_window::$26 draw_window::$35 ]
reg byte a [ draw_window::$42 ]
reg byte a [ draw_window::$43 ]
zp[2]:31 [ draw_window::z#1 draw_window::$20 draw_window::$32 ]
zp[2]:33 [ draw_window::$19 draw_window::$31 ]
zp[2]:35 [ draw_window::$14 draw_window::$27 ]
zp[2]:37 [ draw_window::$15 draw_window::$28 ]


FINAL ASSEMBLER
Score: 154230

  // File Comments
/* Textbox routine with word wrap for KickC by Scan/Desire */
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label wait = 3
    .label x = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // main::@1
  __b1:
    // for (byte x = 0; x < 15; x += 2)
    // [2] if((byte) main::x#2<(byte) $f) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$f
    bcc __b2
    // [3] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // textbox(0,12,20,24,text)
    // [4] call textbox 
    // [20] phi from main::@3 to textbox [phi:main::@3->textbox]
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@3->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) $18 [phi:main::@3->textbox#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $14 [phi:main::@3->textbox#2] -- vbuz1=vbuc1 
    lda #$14
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) $c [phi:main::@3->textbox#3] -- vbuz1=vbuc1 
    lda #$c
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) 0 [phi:main::@3->textbox#4] -- vbuz1=vbuc1 
    lda #0
    sta.z textbox.x1
    jsr textbox
    // [5] phi from main::@3 to main::@8 [phi:main::@3->main::@8]
    // main::@8
    // textbox(3,3,37,9,text)
    // [6] call textbox 
    // [20] phi from main::@8 to textbox [phi:main::@8->textbox]
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@8->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) 9 [phi:main::@8->textbox#1] -- vbuz1=vbuc1 
    lda #9
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $25 [phi:main::@8->textbox#2] -- vbuz1=vbuc1 
    lda #$25
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) 3 [phi:main::@8->textbox#3] -- vbuz1=vbuc1 
    lda #3
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) 3 [phi:main::@8->textbox#4] -- vbuz1=vbuc1 
    sta.z textbox.x1
    jsr textbox
    // [7] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // textbox(30,8,39,24,text)
    // [8] call textbox 
    // [20] phi from main::@9 to textbox [phi:main::@9->textbox]
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text [phi:main::@9->textbox#0] -- pbuz1=pbuc1 
    lda #<text
    sta.z textbox.text
    lda #>text
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) $18 [phi:main::@9->textbox#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z textbox.y2
    // [20] phi (byte) textbox::x2#4 = (byte) $27 [phi:main::@9->textbox#2] -- vbuz1=vbuc1 
    lda #$27
    sta.z textbox.x2
    // [20] phi (byte) textbox::y1#4 = (byte) 8 [phi:main::@9->textbox#3] -- vbuz1=vbuc1 
    lda #8
    sta.z textbox.y1
    // [20] phi (byte) textbox::x1#4 = (byte) $1e [phi:main::@9->textbox#4] -- vbuz1=vbuc1 
    lda #$1e
    sta.z textbox.x1
    jsr textbox
    // [9] phi from main::@7 main::@9 to main::@7 [phi:main::@7/main::@9->main::@7]
    // main::@7
  __b7:
    jmp __b7
    // main::@2
  __b2:
    // x+x
    // [10] (byte~) main::$4 ← (byte) main::x#2 + (byte) main::x#2 -- vbuaa=vbuz1_plus_vbuz1 
    lda.z x
    asl
    // textbox(x,x,x+x+1,x+10,text2)
    // [11] (byte) textbox::x2#0 ← (byte~) main::$4 + (byte) 1 -- vbuz1=vbuaa_plus_1 
    clc
    adc #1
    sta.z textbox.x2
    // [12] (byte) textbox::y2#0 ← (byte) main::x#2 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax.z x
    axs #-[$a]
    stx.z textbox.y2
    // [13] (byte) textbox::x1#0 ← (byte) main::x#2
    // [14] (byte) textbox::y1#0 ← (byte) main::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z textbox.y1
    // [15] call textbox 
    // [20] phi from main::@2 to textbox [phi:main::@2->textbox]
    // [20] phi (byte*) textbox::text#12 = (const to_nomodify byte*) text2 [phi:main::@2->textbox#0] -- pbuz1=pbuc1 
    lda #<text2
    sta.z textbox.text
    lda #>text2
    sta.z textbox.text+1
    // [20] phi (byte) textbox::y2#4 = (byte) textbox::y2#0 [phi:main::@2->textbox#1] -- register_copy 
    // [20] phi (byte) textbox::x2#4 = (byte) textbox::x2#0 [phi:main::@2->textbox#2] -- register_copy 
    // [20] phi (byte) textbox::y1#4 = (byte) textbox::y1#0 [phi:main::@2->textbox#3] -- register_copy 
    // [20] phi (byte) textbox::x1#4 = (byte) textbox::x1#0 [phi:main::@2->textbox#4] -- register_copy 
    jsr textbox
    // [16] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [16] phi (word) main::wait#2 = (word) 0 [phi:main::@2->main::@4#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z wait
    sta.z wait+1
    // main::@4
  __b4:
    // for (word wait = 0; wait < 35000; wait++)
    // [17] if((word) main::wait#2<(word) $88b8) goto main::@5 -- vwuz1_lt_vwuc1_then_la1 
    lda.z wait+1
    cmp #>$88b8
    bcc __b5
    bne !+
    lda.z wait
    cmp #<$88b8
    bcc __b5
  !:
    // main::@6
    // x += 2
    // [18] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z x
    clc
    adc #2
    sta.z x
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [1] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // for (word wait = 0; wait < 35000; wait++)
    // [19] (word) main::wait#1 ← ++ (word) main::wait#2 -- vwuz1=_inc_vwuz1 
    inc.z wait
    bne !+
    inc.z wait+1
  !:
    // [16] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [16] phi (word) main::wait#2 = (word) main::wait#1 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
}
  // textbox
// textbox(byte zp(2) x1, byte zp(5) y1, byte zp(6) x2, byte zp(7) y2, byte* zp(8) text)
textbox: {
    .label __8 = $10
    .label __17 = $12
    .label __31 = $c
    .label x1 = 2
    .label y1 = 5
    .label x2 = 6
    .label y2 = 7
    .label y = 5
    .label x = $b
    .label z = $c
    .label i = $a
    .label text = 8
    .label __32 = $10
    .label __33 = $e
    .label __34 = $c
    // draw_window(x1, y1, x2, y2)
    // [21] (byte) draw_window::x1#0 ← (byte) textbox::x1#4
    // [22] (byte) draw_window::y1#0 ← (byte) textbox::y1#4
    // [23] (byte) draw_window::x2#0 ← (byte) textbox::x2#4
    // [24] (byte) draw_window::y2#0 ← (byte) textbox::y2#4
    // [25] call draw_window 
    jsr draw_window
    // textbox::@12
    // y = y1+1
    // [26] (byte) textbox::y#0 ← (byte) textbox::y1#4 + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z y
    // x = x1+1
    // [27] (byte) textbox::x#0 ← (byte) textbox::x1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // (word)y*40
    // [28] (word~) textbox::$31 ← (word)(byte) textbox::y#0 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __31
    lda #0
    sta.z __31+1
    // z = (word)y*40
    // [29] (word~) textbox::$33 ← (word~) textbox::$31 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __31
    asl
    sta.z __33
    lda.z __31+1
    rol
    sta.z __33+1
    asl.z __33
    rol.z __33+1
    // [30] (word~) textbox::$34 ← (word~) textbox::$33 + (word~) textbox::$31 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __34
    clc
    adc.z __33
    sta.z __34
    lda.z __34+1
    adc.z __33+1
    sta.z __34+1
    // [31] (word) textbox::z#0 ← (word~) textbox::$34 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // if (x == x2 || y == y2)
    // [32] if((byte) textbox::x#0==(byte) textbox::x2#4) goto textbox::@return -- vbuz1_eq_vbuz2_then_la1 
    tya
    cmp.z x2
    beq __breturn
    // textbox::@13
    // [33] if((byte) textbox::y#0==(byte) textbox::y2#4) goto textbox::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    beq __breturn
    // [34] phi from textbox::@13 to textbox::@1 [phi:textbox::@13->textbox::@1]
    // [34] phi (byte) textbox::y#12 = (byte) textbox::y#0 [phi:textbox::@13->textbox::@1#0] -- register_copy 
    // [34] phi (byte) textbox::i#2 = (byte) 0 [phi:textbox::@13->textbox::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [34] phi (byte) textbox::x#10 = (byte) textbox::x#0 [phi:textbox::@13->textbox::@1#2] -- register_copy 
    // [34] phi (word) textbox::z#3 = (word) textbox::z#0 [phi:textbox::@13->textbox::@1#3] -- register_copy 
    // [34] phi from textbox::@8 to textbox::@1 [phi:textbox::@8->textbox::@1]
    // [34] phi (byte) textbox::y#12 = (byte) textbox::y#11 [phi:textbox::@8->textbox::@1#0] -- register_copy 
    // [34] phi (byte) textbox::i#2 = (byte) textbox::i#1 [phi:textbox::@8->textbox::@1#1] -- register_copy 
    // [34] phi (byte) textbox::x#10 = (byte) textbox::x#7 [phi:textbox::@8->textbox::@1#2] -- register_copy 
    // [34] phi (word) textbox::z#3 = (word) textbox::z#4 [phi:textbox::@8->textbox::@1#3] -- register_copy 
    // textbox::@1
  __b1:
    // z+x
    // [35] (word~) textbox::$8 ← (word) textbox::z#3 + (byte) textbox::x#10 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z z
    sta.z __8
    lda #0
    adc.z z+1
    sta.z __8+1
    // screen[z+x] = text[i]
    // [36] (byte*~) textbox::$32 ← (const nomodify byte*) screen + (word~) textbox::$8 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __32
    adc #<screen
    sta.z __32
    lda.z __32+1
    adc #>screen
    sta.z __32+1
    // [37] *((byte*~) textbox::$32) ← *((byte*) textbox::text#12 + (byte) textbox::i#2) -- _deref_pbuz1=pbuz2_derefidx_vbuz3 
    ldy.z i
    lda (text),y
    ldy #0
    sta (__32),y
    // if (text[i] == $20)
    // [38] if(*((byte*) textbox::text#12 + (byte) textbox::i#2)!=(byte) $20) goto textbox::@2 -- pbuz1_derefidx_vbuz2_neq_vbuc1_then_la1 
    ldy.z i
    lda (text),y
    cmp #$20
    bne __b2
    // textbox::@10
    // ls = i+1
    // [39] (byte) textbox::ls#0 ← (byte) textbox::i#2 + (byte) 1 -- vbuyy=vbuz1_plus_1 
    iny
    // [40] phi from textbox::@10 to textbox::@3 [phi:textbox::@10->textbox::@3]
    // [40] phi (byte) textbox::c#2 = (byte) 0 [phi:textbox::@10->textbox::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [40] phi (byte) textbox::ls#2 = (byte) textbox::ls#0 [phi:textbox::@10->textbox::@3#1] -- register_copy 
    // textbox::@3
  __b3:
    // while (text[ls] != $20 && text[ls] != $00)
    // [41] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)==(byte) $20) goto textbox::@5 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda #$20
    cmp (text),y
    beq __b5
    // textbox::@14
    // [42] if(*((byte*) textbox::text#12 + (byte) textbox::ls#2)!=(byte) 0) goto textbox::@4 -- pbuz1_derefidx_vbuyy_neq_0_then_la1 
    lda (text),y
    cmp #0
    bne __b4
    // textbox::@5
  __b5:
    // c+x
    // [43] (byte~) textbox::$15 ← (byte) textbox::c#2 + (byte) textbox::x#10 -- vbuyy=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z x
    tay
    // x2-x1
    // [44] (byte~) textbox::$17 ← (byte) textbox::x2#4 - (byte) textbox::x1#4 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x2
    sec
    sbc.z x1
    sta.z __17
    // if (c+x >= x2 && c < x2-x1)
    // [45] if((byte~) textbox::$15<(byte) textbox::x2#4) goto textbox::@2 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z x2
    bcc __b2
    // textbox::@15
    // [46] if((byte) textbox::c#2<(byte~) textbox::$17) goto textbox::@6 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z __17
    bcc __b6
    // [47] phi from textbox::@15 to textbox::@2 [phi:textbox::@15->textbox::@2]
    // [47] phi from textbox::@1 textbox::@5 textbox::@7 to textbox::@2 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2]
    // [47] phi (word) textbox::z#5 = (word) textbox::z#3 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#0] -- register_copy 
    // [47] phi (byte) textbox::y#5 = (byte) textbox::y#12 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#1] -- register_copy 
    // [47] phi (byte) textbox::x#5 = (byte) textbox::x#10 [phi:textbox::@1/textbox::@5/textbox::@7->textbox::@2#2] -- register_copy 
    // textbox::@2
  __b2:
    // i++;
    // [48] (byte) textbox::i#1 ← ++ (byte) textbox::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // x++;
    // [49] (byte) textbox::x#1 ← ++ (byte) textbox::x#5 -- vbuz1=_inc_vbuz1 
    inc.z x
    // if (x == x2)
    // [50] if((byte) textbox::x#1!=(byte) textbox::x2#4) goto textbox::@8 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b8
    // textbox::@11
    // x = x1+1
    // [51] (byte) textbox::x#12 ← (byte) textbox::x1#4 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z x
    // y++;
    // [52] (byte) textbox::y#2 ← ++ (byte) textbox::y#5 -- vbuz1=_inc_vbuz1 
    inc.z y
    // if (y == y2)
    // [53] if((byte) textbox::y#2!=(byte) textbox::y2#4) goto textbox::@9 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b9
    // textbox::@return
  __breturn:
    // }
    // [54] return 
    rts
    // textbox::@9
  __b9:
    // z = y*40
    // [55] (byte~) textbox::$39 ← (byte) textbox::y#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y
    asl
    asl
    // [56] (byte~) textbox::$40 ← (byte~) textbox::$39 + (byte) textbox::y#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y
    // [57] (word) textbox::z#2 ← (byte~) textbox::$40 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [58] phi from textbox::@2 textbox::@9 to textbox::@8 [phi:textbox::@2/textbox::@9->textbox::@8]
    // [58] phi (byte) textbox::y#11 = (byte) textbox::y#5 [phi:textbox::@2/textbox::@9->textbox::@8#0] -- register_copy 
    // [58] phi (byte) textbox::x#7 = (byte) textbox::x#1 [phi:textbox::@2/textbox::@9->textbox::@8#1] -- register_copy 
    // [58] phi (word) textbox::z#4 = (word) textbox::z#5 [phi:textbox::@2/textbox::@9->textbox::@8#2] -- register_copy 
    // textbox::@8
  __b8:
    // while (text[i] != 0)
    // [59] if(*((byte*) textbox::text#12 + (byte) textbox::i#1)!=(byte) 0) goto textbox::@1 -- pbuz1_derefidx_vbuz2_neq_0_then_la1 
    ldy.z i
    lda (text),y
    cmp #0
    beq !__b1+
    jmp __b1
  !__b1:
    rts
    // textbox::@6
  __b6:
    // y++;
    // [60] (byte) textbox::y#1 ← ++ (byte) textbox::y#12 -- vbuz1=_inc_vbuz1 
    inc.z y
    // if (y == y2)
    // [61] if((byte) textbox::y#1!=(byte) textbox::y2#4) goto textbox::@7 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b7
    rts
    // textbox::@7
  __b7:
    // z = y*40
    // [62] (byte~) textbox::$36 ← (byte) textbox::y#1 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y
    asl
    asl
    // [63] (byte~) textbox::$37 ← (byte~) textbox::$36 + (byte) textbox::y#1 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y
    // [64] (word) textbox::z#1 ← (byte~) textbox::$37 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // [65] (byte) textbox::x#17 ← (byte) textbox::x1#4 -- vbuz1=vbuz2 
    lda.z x1
    sta.z x
    jmp __b2
    // textbox::@4
  __b4:
    // ls++;
    // [66] (byte) textbox::ls#1 ← ++ (byte) textbox::ls#2 -- vbuyy=_inc_vbuyy 
    iny
    // c++;
    // [67] (byte) textbox::c#1 ← ++ (byte) textbox::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [40] phi from textbox::@4 to textbox::@3 [phi:textbox::@4->textbox::@3]
    // [40] phi (byte) textbox::c#2 = (byte) textbox::c#1 [phi:textbox::@4->textbox::@3#0] -- register_copy 
    // [40] phi (byte) textbox::ls#2 = (byte) textbox::ls#1 [phi:textbox::@4->textbox::@3#1] -- register_copy 
    jmp __b3
}
  // draw_window
// draw_window(byte zp(2) x1, byte zp(5) y1, byte zp(6) x2, byte zp(7) y2)
draw_window: {
    .label __2 = $17
    .label __3 = $13
    .label __4 = $19
    .label __5 = $15
    .label __14 = $23
    .label __15 = $25
    .label __19 = $21
    .label __20 = $1f
    .label __26 = $1d
    .label x1 = 2
    .label y1 = 5
    .label x2 = 6
    .label y2 = 7
    .label z = $13
    .label q = $15
    .label z_1 = $1f
    .label y3 = $12
    .label z_2 = $1b
    .label __27 = $23
    .label __28 = $25
    .label __29 = $17
    .label __30 = $13
    .label __31 = $21
    .label __32 = $1f
    .label __33 = $19
    .label __34 = $15
    .label __35 = $1d
    // z = y1*40
    // [68] (byte~) draw_window::$36 ← (byte) draw_window::y1#0 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y1
    asl
    asl
    // [69] (byte~) draw_window::$37 ← (byte~) draw_window::$36 + (byte) draw_window::y1#0 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y1
    // [70] (word) draw_window::z#0 ← (byte~) draw_window::$37 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z
    lda #0
    sta.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    asl.z z
    rol.z z+1
    // q = y2*40
    // [71] (byte~) draw_window::$39 ← (byte) draw_window::y2#0 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y2
    asl
    asl
    // [72] (byte~) draw_window::$40 ← (byte~) draw_window::$39 + (byte) draw_window::y2#0 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y2
    // [73] (word) draw_window::q#0 ← (byte~) draw_window::$40 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z q
    lda #0
    sta.z q+1
    asl.z q
    rol.z q+1
    asl.z q
    rol.z q+1
    asl.z q
    rol.z q+1
    // x = x1+1
    // [74] (byte) draw_window::x#0 ← (byte) draw_window::x1#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // [75] phi from draw_window draw_window::@2 to draw_window::@1 [phi:draw_window/draw_window::@2->draw_window::@1]
  __b1:
    // [75] phi (byte) draw_window::x#2 = (byte) draw_window::x#0 [phi:draw_window/draw_window::@2->draw_window::@1#0] -- register_copy 
  // draw horizontal lines
    // draw_window::@1
    // for (byte x = x1+1; x < x2; x++)
    // [76] if((byte) draw_window::x#2<(byte) draw_window::x2#0) goto draw_window::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z x2
    bcs !__b2+
    jmp __b2
  !__b2:
    // draw_window::@3
    // z+x1
    // [77] (word~) draw_window::$2 ← (word) draw_window::z#0 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z z
    sta.z __2
    lda #0
    adc.z z+1
    sta.z __2+1
    // screen[z+x1] = $55
    // [78] (byte*~) draw_window::$29 ← (const nomodify byte*) screen + (word~) draw_window::$2 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __29
    adc #<screen
    sta.z __29
    lda.z __29+1
    adc #>screen
    sta.z __29+1
    // [79] *((byte*~) draw_window::$29) ← (byte) $55 -- _deref_pbuz1=vbuc1 
    // draw upper corners
    lda #$55
    ldy #0
    sta (__29),y
    // z+x2
    // [80] (word~) draw_window::$3 ← (word) draw_window::z#0 + (byte) draw_window::x2#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x2
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // screen[z+x2] = $49
    // [81] (byte*~) draw_window::$30 ← (const nomodify byte*) screen + (word~) draw_window::$3 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __30
    adc #<screen
    sta.z __30
    lda.z __30+1
    adc #>screen
    sta.z __30+1
    // [82] *((byte*~) draw_window::$30) ← (byte) $49 -- _deref_pbuz1=vbuc1 
    lda #$49
    ldy #0
    sta (__30),y
    // y = y1+1
    // [83] (byte) draw_window::y#0 ← (byte) draw_window::y1#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z y1
    inx
    // [84] phi from draw_window::@3 draw_window::@5 to draw_window::@4 [phi:draw_window::@3/draw_window::@5->draw_window::@4]
  __b3:
    // [84] phi (byte) draw_window::y#2 = (byte) draw_window::y#0 [phi:draw_window::@3/draw_window::@5->draw_window::@4#0] -- register_copy 
  // draw vertical lines
    // draw_window::@4
    // for (byte y = y1+1; y < y2; y++)
    // [85] if((byte) draw_window::y#2<(byte) draw_window::y2#0) goto draw_window::@5 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z y2
    bcs !__b5+
    jmp __b5
  !__b5:
    // draw_window::@6
    // q+x1
    // [86] (word~) draw_window::$4 ← (word) draw_window::q#0 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z q
    sta.z __4
    lda #0
    adc.z q+1
    sta.z __4+1
    // screen[q+x1] = $4a
    // [87] (byte*~) draw_window::$33 ← (const nomodify byte*) screen + (word~) draw_window::$4 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __33
    adc #<screen
    sta.z __33
    lda.z __33+1
    adc #>screen
    sta.z __33+1
    // [88] *((byte*~) draw_window::$33) ← (byte) $4a -- _deref_pbuz1=vbuc1 
    // draw lower corners
    lda #$4a
    ldy #0
    sta (__33),y
    // q+x2
    // [89] (word~) draw_window::$5 ← (word) draw_window::q#0 + (byte) draw_window::x2#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x2
    clc
    adc.z __5
    sta.z __5
    bcc !+
    inc.z __5+1
  !:
    // screen[q+x2] = $4b
    // [90] (byte*~) draw_window::$34 ← (const nomodify byte*) screen + (word~) draw_window::$5 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __34
    adc #<screen
    sta.z __34
    lda.z __34+1
    adc #>screen
    sta.z __34+1
    // [91] *((byte*~) draw_window::$34) ← (byte) $4b -- _deref_pbuz1=vbuc1 
    lda #$4b
    ldy #0
    sta (__34),y
    // x2-x1
    // [92] (byte~) draw_window::$6 ← (byte) draw_window::x2#0 - (byte) draw_window::x1#0 -- vbuxx=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x1
    tax
    // y2-y1
    // [93] (byte~) draw_window::$8 ← (byte) draw_window::y2#0 - (byte) draw_window::y1#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y1
    // if (x2-x1 > 1 && y2-y1 > 1)
    // [94] if((byte~) draw_window::$6<(byte) 1+(byte) 1) goto draw_window::@return -- vbuxx_lt_vbuc1_then_la1 
    cpx #1+1
    bcc __breturn
    // draw_window::@13
    // [95] if((byte~) draw_window::$8>=(byte) 1+(byte) 1) goto draw_window::@7 -- vbuaa_ge_vbuc1_then_la1 
    cmp #1+1
    bcs __b7
    // draw_window::@return
  __breturn:
    // }
    // [96] return 
    rts
    // draw_window::@7
  __b7:
    // y = y1+1
    // [97] (byte) draw_window::y3#0 ← (byte) draw_window::y1#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z y3
    // [98] phi from draw_window::@12 draw_window::@7 to draw_window::@8 [phi:draw_window::@12/draw_window::@7->draw_window::@8]
  __b4:
    // [98] phi (byte) draw_window::y3#2 = (byte) draw_window::y3#1 [phi:draw_window::@12/draw_window::@7->draw_window::@8#0] -- register_copy 
  // blank inside
    // draw_window::@8
    // for(byte y = y1+1; y < y2; y++)
    // [99] if((byte) draw_window::y3#2<(byte) draw_window::y2#0) goto draw_window::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y3
    cmp.z y2
    bcc __b9
    rts
    // draw_window::@9
  __b9:
    // z = y*40
    // [100] (byte~) draw_window::$45 ← (byte) draw_window::y3#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z y3
    asl
    asl
    // [101] (byte~) draw_window::$46 ← (byte~) draw_window::$45 + (byte) draw_window::y3#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y3
    // [102] (word) draw_window::z#2 ← (byte~) draw_window::$46 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z_2
    lda #0
    sta.z z_2+1
    asl.z z_2
    rol.z z_2+1
    asl.z z_2
    rol.z z_2+1
    asl.z z_2
    rol.z z_2+1
    // x = x1+1
    // [103] (byte) draw_window::x3#0 ← (byte) draw_window::x1#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // [104] phi from draw_window::@11 draw_window::@9 to draw_window::@10 [phi:draw_window::@11/draw_window::@9->draw_window::@10]
    // [104] phi (byte) draw_window::x3#2 = (byte) draw_window::x3#1 [phi:draw_window::@11/draw_window::@9->draw_window::@10#0] -- register_copy 
    // draw_window::@10
  __b10:
    // for(byte x = x1+1; x < x2; x++)
    // [105] if((byte) draw_window::x3#2<(byte) draw_window::x2#0) goto draw_window::@11 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z x2
    bcc __b11
    // draw_window::@12
    // for(byte y = y1+1; y < y2; y++)
    // [106] (byte) draw_window::y3#1 ← ++ (byte) draw_window::y3#2 -- vbuz1=_inc_vbuz1 
    inc.z y3
    jmp __b4
    // draw_window::@11
  __b11:
    // z+x
    // [107] (word~) draw_window::$26 ← (word) draw_window::z#2 + (byte) draw_window::x3#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z z_2
    sta.z __26
    lda #0
    adc.z z_2+1
    sta.z __26+1
    // screen[z+x] = $20
    // [108] (byte*~) draw_window::$35 ← (const nomodify byte*) screen + (word~) draw_window::$26 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __35
    adc #<screen
    sta.z __35
    lda.z __35+1
    adc #>screen
    sta.z __35+1
    // [109] *((byte*~) draw_window::$35) ← (byte) $20 -- _deref_pbuz1=vbuc1 
    lda #$20
    ldy #0
    sta (__35),y
    // for(byte x = x1+1; x < x2; x++)
    // [110] (byte) draw_window::x3#1 ← ++ (byte) draw_window::x3#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b10
    // draw_window::@5
  __b5:
    // z = y*40
    // [111] (byte~) draw_window::$42 ← (byte) draw_window::y#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [112] (byte~) draw_window::$43 ← (byte~) draw_window::$42 + (byte) draw_window::y#2 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [113] (word) draw_window::z#1 ← (byte~) draw_window::$43 << (byte) 3 -- vwuz1=vbuaa_rol_3 
    sta.z z_1
    lda #0
    sta.z z_1+1
    asl.z z_1
    rol.z z_1+1
    asl.z z_1
    rol.z z_1+1
    asl.z z_1
    rol.z z_1+1
    // z+x1
    // [114] (word~) draw_window::$19 ← (word) draw_window::z#1 + (byte) draw_window::x1#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x1
    clc
    adc.z z_1
    sta.z __19
    lda #0
    adc.z z_1+1
    sta.z __19+1
    // screen[z+x1] = $42
    // [115] (byte*~) draw_window::$31 ← (const nomodify byte*) screen + (word~) draw_window::$19 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __31
    adc #<screen
    sta.z __31
    lda.z __31+1
    adc #>screen
    sta.z __31+1
    // [116] *((byte*~) draw_window::$31) ← (byte) $42 -- _deref_pbuz1=vbuc1 
    lda #$42
    ldy #0
    sta (__31),y
    // z+x2
    // [117] (word~) draw_window::$20 ← (word) draw_window::z#1 + (byte) draw_window::x2#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x2
    clc
    adc.z __20
    sta.z __20
    bcc !+
    inc.z __20+1
  !:
    // screen[z+x2] = $42
    // [118] (byte*~) draw_window::$32 ← (const nomodify byte*) screen + (word~) draw_window::$20 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __32
    adc #<screen
    sta.z __32
    lda.z __32+1
    adc #>screen
    sta.z __32+1
    // [119] *((byte*~) draw_window::$32) ← (byte) $42 -- _deref_pbuz1=vbuc1 
    lda #$42
    ldy #0
    sta (__32),y
    // for (byte y = y1+1; y < y2; y++)
    // [120] (byte) draw_window::y#1 ← ++ (byte) draw_window::y#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b3
    // draw_window::@2
  __b2:
    // z+x
    // [121] (word~) draw_window::$14 ← (word) draw_window::z#0 + (byte) draw_window::x#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z z
    sta.z __14
    lda #0
    adc.z z+1
    sta.z __14+1
    // screen[z+x] = $43
    // [122] (byte*~) draw_window::$27 ← (const nomodify byte*) screen + (word~) draw_window::$14 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __27
    adc #<screen
    sta.z __27
    lda.z __27+1
    adc #>screen
    sta.z __27+1
    // [123] *((byte*~) draw_window::$27) ← (byte) $43 -- _deref_pbuz1=vbuc1 
    lda #$43
    ldy #0
    sta (__27),y
    // q+x
    // [124] (word~) draw_window::$15 ← (word) draw_window::q#0 + (byte) draw_window::x#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z q
    sta.z __15
    tya
    adc.z q+1
    sta.z __15+1
    // screen[q+x] = $43
    // [125] (byte*~) draw_window::$28 ← (const nomodify byte*) screen + (word~) draw_window::$15 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __28
    adc #<screen
    sta.z __28
    lda.z __28+1
    adc #>screen
    sta.z __28+1
    // [126] *((byte*~) draw_window::$28) ← (byte) $43 -- _deref_pbuz1=vbuc1 
    lda #$43
    sta (__28),y
    // for (byte x = x1+1; x < x2; x++)
    // [127] (byte) draw_window::x#1 ← ++ (byte) draw_window::x#2 -- vbuxx=_inc_vbuxx 
    inx
    jmp __b1
}
  // File Data
  text: .text "this is a small test with word wrap, if a word is too long it moves it to the next line. isn't that supercalifragilisticexpialidocious? i think it's cool!"
  .byte 0
  text2: .text "textbox by scan of desire"
  .byte 0

