const byte* BORDER_COLOR = (byte*) 53280
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* RASTER = (byte*) 53266
const byte* SCREEN = (byte*) 1024
void main()
label main::@1
label main::@2
label main::@3
label main::@4
label main::@5
const word main::a = $4d2
const word main::b = $929
dword main::r
dword main::r#0 r zp[4]:14 11.0
dword mulf16u(word mulf16u::a , word mulf16u::b)
label mulf16u::@return
word mulf16u::a
word mulf16u::b
const nomodify word* mulf16u::memA = (word*) 248
const nomodify word* mulf16u::memB = (word*) 250
const nomodify dword* mulf16u::memR = (dword*) 252
dword mulf16u::return
dword mulf16u::return#0 return zp[4]:14 22.0
dword mulf16u::return#1 return zp[4]:14 37.33333333333333
void mulf_init()
byte~ mulf_init::$1 reg byte a 202.0
byte~ mulf_init::$4 reg byte a 202.0
byte~ mulf_init::$5 reg byte a 202.0
label mulf_init::@1
label mulf_init::@2
label mulf_init::@3
label mulf_init::@4
label mulf_init::@5
label mulf_init::@6
label mulf_init::@7
label mulf_init::@8
label mulf_init::@9
label mulf_init::@return
byte mulf_init::c
byte mulf_init::c#1 c zp[1]:2 23.307692307692307
byte mulf_init::c#2 c zp[1]:2 101.0
byte mulf_init::dir
byte mulf_init::dir#2 dir zp[1]:7 37.875
byte mulf_init::dir#4 dir zp[1]:7 101.0
word mulf_init::sqr
word mulf_init::sqr#1 sqr zp[2]:8 101.0
word mulf_init::sqr#2 sqr zp[2]:8 202.0
word mulf_init::sqr#3 sqr zp[2]:8 84.16666666666666
word mulf_init::sqr#4 sqr zp[2]:8 50.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 sqr1_hi zp[2]:12 67.33333333333333
byte* mulf_init::sqr1_hi#2 sqr1_hi zp[2]:12 25.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 sqr1_lo zp[2]:10 202.0
byte* mulf_init::sqr1_lo#2 sqr1_lo zp[2]:10 28.857142857142858
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 sqr2_hi zp[2]:5 33.666666666666664
byte* mulf_init::sqr2_hi#2 sqr2_hi zp[2]:5 75.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 sqr2_lo zp[2]:3 202.0
byte* mulf_init::sqr2_lo#2 sqr2_lo zp[2]:3 44.888888888888886
byte mulf_init::x_2
byte mulf_init::x_2#1 reg byte x 101.0
byte mulf_init::x_2#2 reg byte x 50.5
byte mulf_init::x_2#3 reg byte x 60.599999999999994
byte mulf_init::x_255
byte mulf_init::x_255#1 reg byte x 60.599999999999994
byte mulf_init::x_255#2 reg byte x 80.8
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void print_char(byte print_char::ch)
label print_char::@return
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#1 reg byte a 20002.0
byte print_char::ch#2 reg byte a 120003.0
byte* print_char_cursor
byte* print_char_cursor#10 print_char_cursor zp[2]:12 8546.461538461539
byte* print_char_cursor#15 print_char_cursor zp[2]:12 11.222222222222221
byte* print_char_cursor#28 print_char_cursor zp[2]:12 110002.0
byte* print_char_cursor#36 print_char_cursor zp[2]:12 601.5
byte* print_char_cursor#38 print_char_cursor zp[2]:12 4001.0
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_screen
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
label print_uchar::@1
label print_uchar::@return
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 2002.0
byte print_uchar::b#2 reg byte x 5501.0
void print_uint(word print_uint::w)
label print_uint::@1
label print_uint::@return
word print_uint::w
word print_uint::w#0 w zp[2]:10 202.0
word print_uint::w#1 w zp[2]:10 202.0
word print_uint::w#2 w zp[2]:10 734.6666666666667
void print_ulong(dword print_ulong::dw)
label print_ulong::@1
label print_ulong::@return
dword print_ulong::dw
dword print_ulong::dw#0 dw zp[4]:14 71.0

zp[1]:2 [ mulf_init::c#2 mulf_init::c#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
zp[2]:3 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[2]:5 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp[1]:7 [ mulf_init::dir#2 mulf_init::dir#4 ]
zp[2]:8 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:10 [ print_uint::w#2 print_uint::w#0 print_uint::w#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:12 [ print_char_cursor#28 print_char_cursor#38 print_char_cursor#36 print_char_cursor#15 print_char_cursor#10 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
zp[4]:14 [ mulf16u::return#0 main::r#0 mulf16u::return#1 print_ulong::dw#0 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
