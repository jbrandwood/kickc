Resolved forward reference irq to interrupt(KERNEL_MIN)(void()) irq()
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (byte*) PLAYFIELD_SCREEN 
Inlined call (byte~) init_sprites::$1 ← call toD018 (byte*) PLAYFIELD_SCREEN (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) $1 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) init_irq::$0 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) irq::$2 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) 53248
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) 1016
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) 53275
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) 53277
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) 53283
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) 53284
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) 53267
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) 53268
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) 53273
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53274
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) 56323
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) 56333
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 127
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) 56579
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) 56589
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) 788
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) 65534
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@4
@4: scope:[]  from @begin
  (byte*) PLAYFIELD_SPRITES#0 ← ((byte*)) (word/signed word/dword/signed dword) 8192
  (byte*) PLAYFIELD_CHARSET#0 ← ((byte*)) (word/signed word/dword/signed dword) 4096
  (byte*) PLAYFIELD_SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*~) $0 ← (byte*) PLAYFIELD_SCREEN#0 + (word) SPRITE_PTRS#0
  (byte*) PLAYFIELD_SPRITE_PTRS#0 ← (byte*~) $0
  to:@6
main: scope:[main]  from @8
  (byte) irq_cnt#20 ← phi( @8/(byte) irq_cnt#19 )
  (byte) irq_sprite_ptr#21 ← phi( @8/(byte) irq_sprite_ptr#20 )
  (byte) irq_sprite_ypos#23 ← phi( @8/(byte) irq_sprite_ypos#20 )
  (byte) irq_raster_next#22 ← phi( @8/(byte) irq_raster_next#21 )
  call init_sprites 
  to:main::@7
main::@7: scope:[main]  from main
  (byte) irq_cnt#15 ← phi( main/(byte) irq_cnt#20 )
  (byte) irq_sprite_ptr#16 ← phi( main/(byte) irq_sprite_ptr#21 )
  (byte) irq_sprite_ypos#17 ← phi( main/(byte) irq_sprite_ypos#23 )
  (byte) irq_raster_next#16 ← phi( main/(byte) irq_raster_next#22 )
  call init_irq 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) irq_cnt#9 ← phi( main::@7/(byte) irq_cnt#4 )
  (byte) irq_sprite_ptr#9 ← phi( main::@7/(byte) irq_sprite_ptr#4 )
  (byte) irq_sprite_ypos#9 ← phi( main::@7/(byte) irq_sprite_ypos#4 )
  (byte) irq_raster_next#9 ← phi( main::@7/(byte) irq_raster_next#4 )
  (byte) irq_raster_next#0 ← (byte) irq_raster_next#9
  (byte) irq_sprite_ypos#0 ← (byte) irq_sprite_ypos#9
  (byte) irq_sprite_ptr#0 ← (byte) irq_sprite_ptr#9
  (byte) irq_cnt#0 ← (byte) irq_cnt#9
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@8
  (byte) irq_cnt#16 ← phi( main::@2/(byte) irq_cnt#21 main::@8/(byte) irq_cnt#0 )
  (byte) irq_sprite_ptr#17 ← phi( main::@2/(byte) irq_sprite_ptr#22 main::@8/(byte) irq_sprite_ptr#0 )
  (byte) irq_sprite_ypos#18 ← phi( main::@2/(byte) irq_sprite_ypos#24 main::@8/(byte) irq_sprite_ypos#0 )
  (byte) irq_raster_next#17 ← phi( main::@2/(byte) irq_raster_next#23 main::@8/(byte) irq_raster_next#0 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) irq_cnt#21 ← phi( main::@1/(byte) irq_cnt#16 )
  (byte) irq_sprite_ptr#22 ← phi( main::@1/(byte) irq_sprite_ptr#17 )
  (byte) irq_sprite_ypos#24 ← phi( main::@1/(byte) irq_sprite_ypos#18 )
  (byte) irq_raster_next#23 ← phi( main::@1/(byte) irq_raster_next#17 )
  *((byte*) PLAYFIELD_SCREEN#0) ← ++ *((byte*) PLAYFIELD_SCREEN#0)
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) irq_cnt#10 ← phi( main::@1/(byte) irq_cnt#16 )
  (byte) irq_sprite_ptr#10 ← phi( main::@1/(byte) irq_sprite_ptr#17 )
  (byte) irq_sprite_ypos#10 ← phi( main::@1/(byte) irq_sprite_ypos#18 )
  (byte) irq_raster_next#10 ← phi( main::@1/(byte) irq_raster_next#17 )
  (byte) irq_raster_next#1 ← (byte) irq_raster_next#10
  (byte) irq_sprite_ypos#1 ← (byte) irq_sprite_ypos#10
  (byte) irq_sprite_ptr#1 ← (byte) irq_sprite_ptr#10
  (byte) irq_cnt#1 ← (byte) irq_cnt#10
  return 
  to:@return
init_sprites: scope:[init_sprites]  from main
  (byte*) init_sprites::vicSelectGfxBank1_gfx#0 ← (byte*) PLAYFIELD_SCREEN#0
  to:init_sprites::vicSelectGfxBank1
init_sprites::vicSelectGfxBank1: scope:[init_sprites]  from init_sprites
  (byte*) init_sprites::vicSelectGfxBank1_gfx#1 ← phi( init_sprites/(byte*) init_sprites::vicSelectGfxBank1_gfx#0 )
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) init_sprites::vicSelectGfxBank1_gfx#1
  to:init_sprites::vicSelectGfxBank1_toDd001
init_sprites::vicSelectGfxBank1_toDd001: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1
  (byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#1 ← phi( init_sprites::vicSelectGfxBank1/(byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#0 )
  (word) init_sprites::vicSelectGfxBank1_toDd001_$0#0 ← ((word)) (byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#1
  (byte) init_sprites::vicSelectGfxBank1_toDd001_$1#0 ← > (word) init_sprites::vicSelectGfxBank1_toDd001_$0#0
  (byte) init_sprites::vicSelectGfxBank1_toDd001_$2#0 ← (byte) init_sprites::vicSelectGfxBank1_toDd001_$1#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword) init_sprites::vicSelectGfxBank1_toDd001_$3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte) init_sprites::vicSelectGfxBank1_toDd001_$2#0
  (byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 ← (byte/word/dword) init_sprites::vicSelectGfxBank1_toDd001_$3#0
  to:init_sprites::vicSelectGfxBank1_toDd001_@return
init_sprites::vicSelectGfxBank1_toDd001_@return: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_toDd001
  (byte) init_sprites::vicSelectGfxBank1_toDd001_return#2 ← phi( init_sprites::vicSelectGfxBank1_toDd001/(byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 )
  (byte) init_sprites::vicSelectGfxBank1_toDd001_return#1 ← (byte) init_sprites::vicSelectGfxBank1_toDd001_return#2
  to:init_sprites::vicSelectGfxBank1_@1
init_sprites::vicSelectGfxBank1_@1: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_toDd001_@return
  (byte) init_sprites::vicSelectGfxBank1_toDd001_return#3 ← phi( init_sprites::vicSelectGfxBank1_toDd001_@return/(byte) init_sprites::vicSelectGfxBank1_toDd001_return#1 )
  (byte) init_sprites::vicSelectGfxBank1_$0#0 ← (byte) init_sprites::vicSelectGfxBank1_toDd001_return#3
  *((byte*) CIA2_PORT_A#0) ← (byte) init_sprites::vicSelectGfxBank1_$0#0
  to:init_sprites::@3
init_sprites::@3: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_@1
  (byte*) init_sprites::toD0181_screen#0 ← (byte*) PLAYFIELD_SCREEN#0
  (byte*) init_sprites::toD0181_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:init_sprites::toD0181
init_sprites::toD0181: scope:[init_sprites]  from init_sprites::@3
  (byte*) init_sprites::toD0181_gfx#1 ← phi( init_sprites::@3/(byte*) init_sprites::toD0181_gfx#0 )
  (byte*) init_sprites::toD0181_screen#1 ← phi( init_sprites::@3/(byte*) init_sprites::toD0181_screen#0 )
  (word) init_sprites::toD0181_$0#0 ← ((word)) (byte*) init_sprites::toD0181_screen#1
  (word) init_sprites::toD0181_$1#0 ← (word) init_sprites::toD0181_$0#0 & (word/signed word/dword/signed dword) 16383
  (word) init_sprites::toD0181_$2#0 ← (word) init_sprites::toD0181_$1#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) init_sprites::toD0181_$3#0 ← > (word) init_sprites::toD0181_$2#0
  (word) init_sprites::toD0181_$4#0 ← ((word)) (byte*) init_sprites::toD0181_gfx#1
  (byte) init_sprites::toD0181_$5#0 ← > (word) init_sprites::toD0181_$4#0
  (byte) init_sprites::toD0181_$6#0 ← (byte) init_sprites::toD0181_$5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) init_sprites::toD0181_$7#0 ← (byte) init_sprites::toD0181_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) init_sprites::toD0181_$8#0 ← (byte) init_sprites::toD0181_$3#0 | (byte) init_sprites::toD0181_$7#0
  (byte) init_sprites::toD0181_return#0 ← (byte) init_sprites::toD0181_$8#0
  to:init_sprites::toD0181_@return
init_sprites::toD0181_@return: scope:[init_sprites]  from init_sprites::toD0181
  (byte) init_sprites::toD0181_return#2 ← phi( init_sprites::toD0181/(byte) init_sprites::toD0181_return#0 )
  (byte) init_sprites::toD0181_return#1 ← (byte) init_sprites::toD0181_return#2
  to:init_sprites::@4
init_sprites::@4: scope:[init_sprites]  from init_sprites::toD0181_@return
  (byte) init_sprites::toD0181_return#3 ← phi( init_sprites::toD0181_@return/(byte) init_sprites::toD0181_return#1 )
  (byte~) init_sprites::$1 ← (byte) init_sprites::toD0181_return#3
  *((byte*) D018#0) ← (byte~) init_sprites::$1
  *((byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  *((byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) SPRITES_EXPAND_Y#0) ← *((byte*) SPRITES_MC#0)
  *((byte*) SPRITES_EXPAND_X#0) ← *((byte*) SPRITES_EXPAND_Y#0)
  (byte/signed byte/word/signed word/dword/signed dword~) init_sprites::$2 ← (byte/signed byte/word/signed word/dword/signed dword) 14 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte/signed word/word/dword/signed dword/signed byte~) init_sprites::$3 ← (byte/signed byte/word/signed word/dword/signed dword) 24 + (byte/signed byte/word/signed word/dword/signed dword~) init_sprites::$2
  (byte) init_sprites::xpos#0 ← (byte/signed word/word/dword/signed dword/signed byte~) init_sprites::$3
  (byte) init_sprites::s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init_sprites::@1
init_sprites::@1: scope:[init_sprites]  from init_sprites::@1 init_sprites::@4
  (byte) init_sprites::xpos#2 ← phi( init_sprites::@1/(byte) init_sprites::xpos#1 init_sprites::@4/(byte) init_sprites::xpos#0 )
  (byte) init_sprites::s#2 ← phi( init_sprites::@1/(byte) init_sprites::s#1 init_sprites::@4/(byte) init_sprites::s#0 )
  (byte~) init_sprites::$4 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) init_sprites::s2#0 ← (byte~) init_sprites::$4
  *((byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2
  *((byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (byte) BLACK#0
  (byte/signed word/word/dword/signed dword~) init_sprites::$5 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) init_sprites::xpos#1 ← (byte/signed word/word/dword/signed dword~) init_sprites::$5
  (byte) init_sprites::s#1 ← (byte) init_sprites::s#2 + rangenext(0,3)
  (bool~) init_sprites::$6 ← (byte) init_sprites::s#1 != rangelast(0,3)
  if((bool~) init_sprites::$6) goto init_sprites::@1
  to:init_sprites::@return
init_sprites::@return: scope:[init_sprites]  from init_sprites::@1
  return 
  to:@return
@6: scope:[]  from @4
  (byte) IRQ_RASTER_FIRST#0 ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) irq_raster_next#2 ← (byte) IRQ_RASTER_FIRST#0
  (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte*) toSpritePtr1_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @6
  (byte) irq_raster_next#32 ← phi( @6/(byte) irq_raster_next#2 )
  (byte) irq_sprite_ypos#31 ← phi( @6/(byte) irq_sprite_ypos#2 )
  (byte*) toSpritePtr1_sprite#1 ← phi( @6/(byte*) toSpritePtr1_sprite#0 )
  (word) toSpritePtr1_$0#0 ← ((word)) (byte*) toSpritePtr1_sprite#1
  (word) toSpritePtr1_$1#0 ← (word) toSpritePtr1_$0#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) toSpritePtr1_$2#0 ← ((byte)) (word) toSpritePtr1_$1#0
  (byte) toSpritePtr1_return#0 ← (byte) toSpritePtr1_$2#0
  to:toSpritePtr1_@return
toSpritePtr1_@return: scope:[]  from toSpritePtr1
  (byte) irq_raster_next#28 ← phi( toSpritePtr1/(byte) irq_raster_next#32 )
  (byte) irq_sprite_ypos#28 ← phi( toSpritePtr1/(byte) irq_sprite_ypos#31 )
  (byte) toSpritePtr1_return#2 ← phi( toSpritePtr1/(byte) toSpritePtr1_return#0 )
  (byte) toSpritePtr1_return#1 ← (byte) toSpritePtr1_return#2
  to:@9
@9: scope:[]  from toSpritePtr1_@return
  (byte) irq_raster_next#27 ← phi( toSpritePtr1_@return/(byte) irq_raster_next#28 )
  (byte) irq_sprite_ypos#27 ← phi( toSpritePtr1_@return/(byte) irq_sprite_ypos#28 )
  (byte) toSpritePtr1_return#3 ← phi( toSpritePtr1_@return/(byte) toSpritePtr1_return#1 )
  (byte~) $1 ← (byte) toSpritePtr1_return#3
  (byte) irq_sprite_ptr#2 ← (byte~) $1
  (byte) irq_cnt#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@8
init_irq: scope:[init_irq]  from main::@7
  (byte) irq_raster_next#3 ← (byte) IRQ_RASTER_FIRST#0
  (byte) irq_sprite_ypos#3 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte*) init_irq::toSpritePtr2_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:init_irq::toSpritePtr2
init_irq::toSpritePtr2: scope:[init_irq]  from init_irq
  (byte) irq_sprite_ypos#29 ← phi( init_irq/(byte) irq_sprite_ypos#3 )
  (byte) irq_raster_next#29 ← phi( init_irq/(byte) irq_raster_next#3 )
  (byte*) init_irq::toSpritePtr2_sprite#1 ← phi( init_irq/(byte*) init_irq::toSpritePtr2_sprite#0 )
  (word) init_irq::toSpritePtr2_$0#0 ← ((word)) (byte*) init_irq::toSpritePtr2_sprite#1
  (word) init_irq::toSpritePtr2_$1#0 ← (word) init_irq::toSpritePtr2_$0#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) init_irq::toSpritePtr2_$2#0 ← ((byte)) (word) init_irq::toSpritePtr2_$1#0
  (byte) init_irq::toSpritePtr2_return#0 ← (byte) init_irq::toSpritePtr2_$2#0
  to:init_irq::toSpritePtr2_@return
init_irq::toSpritePtr2_@return: scope:[init_irq]  from init_irq::toSpritePtr2
  (byte) irq_sprite_ypos#25 ← phi( init_irq::toSpritePtr2/(byte) irq_sprite_ypos#29 )
  (byte) irq_raster_next#24 ← phi( init_irq::toSpritePtr2/(byte) irq_raster_next#29 )
  (byte) init_irq::toSpritePtr2_return#2 ← phi( init_irq::toSpritePtr2/(byte) init_irq::toSpritePtr2_return#0 )
  (byte) init_irq::toSpritePtr2_return#1 ← (byte) init_irq::toSpritePtr2_return#2
  to:init_irq::@1
init_irq::@1: scope:[init_irq]  from init_irq::toSpritePtr2_@return
  (byte) irq_sprite_ypos#19 ← phi( init_irq::toSpritePtr2_@return/(byte) irq_sprite_ypos#25 )
  (byte) irq_raster_next#18 ← phi( init_irq::toSpritePtr2_@return/(byte) irq_raster_next#24 )
  (byte) init_irq::toSpritePtr2_return#3 ← phi( init_irq::toSpritePtr2_@return/(byte) init_irq::toSpritePtr2_return#1 )
  (byte~) init_irq::$0 ← (byte) init_irq::toSpritePtr2_return#3
  (byte) irq_sprite_ptr#3 ← (byte~) init_irq::$0
  (byte) irq_cnt#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  asm { sei  }
  *((byte*) CIA1_INTERRUPT#0) ← (byte) CIA_INTERRUPT_CLEAR#0
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  *((byte*) RASTER#0) ← (byte) IRQ_RASTER_FIRST#0
  *((byte*) IRQ_ENABLE#0) ← (byte) IRQ_RASTER#0
  (void()*~) init_irq::$1 ← & interrupt(KERNEL_MIN)(void()) irq()
  *((void()**) KERNEL_IRQ#0) ← (void()*~) init_irq::$1
  asm { cli  }
  to:init_irq::@return
init_irq::@return: scope:[init_irq]  from init_irq::@1
  (byte) irq_cnt#11 ← phi( init_irq::@1/(byte) irq_cnt#3 )
  (byte) irq_sprite_ptr#11 ← phi( init_irq::@1/(byte) irq_sprite_ptr#3 )
  (byte) irq_sprite_ypos#11 ← phi( init_irq::@1/(byte) irq_sprite_ypos#19 )
  (byte) irq_raster_next#11 ← phi( init_irq::@1/(byte) irq_raster_next#18 )
  (byte) irq_raster_next#4 ← (byte) irq_raster_next#11
  (byte) irq_sprite_ypos#4 ← (byte) irq_sprite_ypos#11
  (byte) irq_sprite_ptr#4 ← (byte) irq_sprite_ptr#11
  (byte) irq_cnt#4 ← (byte) irq_cnt#11
  return 
  to:@return
irq: scope:[irq]  from
  (byte) irq_raster_next#30 ← phi( @8/(byte) irq_raster_next#21 )
  (byte) irq_cnt#22 ← phi( @8/(byte) irq_cnt#19 )
  (byte) irq_sprite_ptr#23 ← phi( @8/(byte) irq_sprite_ptr#20 )
  (byte) irq_sprite_ypos#12 ← phi( @8/(byte) irq_sprite_ypos#20 )
  *((byte*) BORDERCOL#0) ← (byte) DARK_GREY#0
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) irq_sprite_ypos#12
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#12
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#12
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#12
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@1
  (byte) irq_raster_next#25 ← phi( irq/(byte) irq_raster_next#30 irq::@1/(byte) irq_raster_next#25 )
  (byte) irq_cnt#17 ← phi( irq/(byte) irq_cnt#22 irq::@1/(byte) irq_cnt#17 )
  (byte) irq_sprite_ptr#18 ← phi( irq/(byte) irq_sprite_ptr#23 irq::@1/(byte) irq_sprite_ptr#18 )
  (byte) irq_sprite_ypos#13 ← phi( irq/(byte) irq_sprite_ypos#12 irq::@1/(byte) irq_sprite_ypos#13 )
  (bool~) irq::$0 ← *((byte*) RASTER#0) != (byte) irq_sprite_ypos#13
  if((bool~) irq::$0) goto irq::@1
  to:irq::@4
irq::@4: scope:[irq]  from irq::@1
  (byte) irq_sprite_ypos#21 ← phi( irq::@1/(byte) irq_sprite_ypos#13 )
  (byte) irq_raster_next#19 ← phi( irq::@1/(byte) irq_raster_next#25 )
  (byte) irq_cnt#12 ← phi( irq::@1/(byte) irq_cnt#17 )
  (byte) irq_sprite_ptr#12 ← phi( irq::@1/(byte) irq_sprite_ptr#18 )
  (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#12
  *((byte*) PLAYFIELD_SPRITE_PTRS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) irq::ptr#0
  (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0
  *((byte*) PLAYFIELD_SPRITE_PTRS#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  *((byte*) PLAYFIELD_SPRITE_PTRS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1
  *((byte*) PLAYFIELD_SPRITE_PTRS#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  (byte) irq_cnt#5 ← ++ (byte) irq_cnt#12
  (bool~) irq::$1 ← (byte) irq_cnt#5 == (byte/signed byte/word/signed word/dword/signed dword) 10
  if((bool~) irq::$1) goto irq::@2
  to:irq::@5
irq::@2: scope:[irq]  from irq::@4
  (byte) irq_cnt#6 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) irq_raster_next#5 ← (byte) IRQ_RASTER_FIRST#0
  (byte) irq_sprite_ypos#5 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte*) irq::toSpritePtr2_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:irq::toSpritePtr2
irq::toSpritePtr2: scope:[irq]  from irq::@2
  (byte) irq_sprite_ypos#32 ← phi( irq::@2/(byte) irq_sprite_ypos#5 )
  (byte) irq_cnt#26 ← phi( irq::@2/(byte) irq_cnt#6 )
  (byte) irq_raster_next#31 ← phi( irq::@2/(byte) irq_raster_next#5 )
  (byte*) irq::toSpritePtr2_sprite#1 ← phi( irq::@2/(byte*) irq::toSpritePtr2_sprite#0 )
  (word) irq::toSpritePtr2_$0#0 ← ((word)) (byte*) irq::toSpritePtr2_sprite#1
  (word) irq::toSpritePtr2_$1#0 ← (word) irq::toSpritePtr2_$0#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) irq::toSpritePtr2_$2#0 ← ((byte)) (word) irq::toSpritePtr2_$1#0
  (byte) irq::toSpritePtr2_return#0 ← (byte) irq::toSpritePtr2_$2#0
  to:irq::toSpritePtr2_@return
irq::toSpritePtr2_@return: scope:[irq]  from irq::toSpritePtr2
  (byte) irq_sprite_ypos#30 ← phi( irq::toSpritePtr2/(byte) irq_sprite_ypos#32 )
  (byte) irq_cnt#25 ← phi( irq::toSpritePtr2/(byte) irq_cnt#26 )
  (byte) irq_raster_next#26 ← phi( irq::toSpritePtr2/(byte) irq_raster_next#31 )
  (byte) irq::toSpritePtr2_return#2 ← phi( irq::toSpritePtr2/(byte) irq::toSpritePtr2_return#0 )
  (byte) irq::toSpritePtr2_return#1 ← (byte) irq::toSpritePtr2_return#2
  to:irq::@7
irq::@7: scope:[irq]  from irq::toSpritePtr2_@return
  (byte) irq_sprite_ypos#26 ← phi( irq::toSpritePtr2_@return/(byte) irq_sprite_ypos#30 )
  (byte) irq_cnt#24 ← phi( irq::toSpritePtr2_@return/(byte) irq_cnt#25 )
  (byte) irq_raster_next#20 ← phi( irq::toSpritePtr2_@return/(byte) irq_raster_next#26 )
  (byte) irq::toSpritePtr2_return#3 ← phi( irq::toSpritePtr2_@return/(byte) irq::toSpritePtr2_return#1 )
  (byte~) irq::$2 ← (byte) irq::toSpritePtr2_return#3
  (byte) irq_sprite_ptr#5 ← (byte~) irq::$2
  to:irq::@3
irq::@5: scope:[irq]  from irq::@4
  (byte) irq_cnt#23 ← phi( irq::@4/(byte) irq_cnt#5 )
  (byte) irq_sprite_ptr#13 ← phi( irq::@4/(byte) irq_sprite_ptr#12 )
  (byte) irq_sprite_ypos#14 ← phi( irq::@4/(byte) irq_sprite_ypos#21 )
  (byte) irq_raster_next#12 ← phi( irq::@4/(byte) irq_raster_next#19 )
  (byte) irq_raster_next#6 ← (byte) irq_raster_next#12 + (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#14 + (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#13 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:irq::@3
irq::@3: scope:[irq]  from irq::@5 irq::@7
  (byte) irq_sprite_ptr#19 ← phi( irq::@5/(byte) irq_sprite_ptr#6 irq::@7/(byte) irq_sprite_ptr#5 )
  (byte) irq_sprite_ypos#22 ← phi( irq::@5/(byte) irq_sprite_ypos#6 irq::@7/(byte) irq_sprite_ypos#26 )
  (byte) irq_cnt#18 ← phi( irq::@5/(byte) irq_cnt#23 irq::@7/(byte) irq_cnt#24 )
  (byte) irq_raster_next#13 ← phi( irq::@5/(byte) irq_raster_next#6 irq::@7/(byte) irq_raster_next#20 )
  *((byte*) RASTER#0) ← (byte) irq_raster_next#13
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  *((byte*) BORDERCOL#0) ← (byte) BLACK#0
  to:irq::@return
irq::@return: scope:[irq]  from irq::@3
  (byte) irq_sprite_ptr#14 ← phi( irq::@3/(byte) irq_sprite_ptr#19 )
  (byte) irq_sprite_ypos#15 ← phi( irq::@3/(byte) irq_sprite_ypos#22 )
  (byte) irq_raster_next#14 ← phi( irq::@3/(byte) irq_raster_next#13 )
  (byte) irq_cnt#13 ← phi( irq::@3/(byte) irq_cnt#18 )
  (byte) irq_cnt#7 ← (byte) irq_cnt#13
  (byte) irq_raster_next#7 ← (byte) irq_raster_next#14
  (byte) irq_sprite_ypos#7 ← (byte) irq_sprite_ypos#15
  (byte) irq_sprite_ptr#7 ← (byte) irq_sprite_ptr#14
  return 
  to:@return
@8: scope:[]  from @9
  (byte) irq_cnt#19 ← phi( @9/(byte) irq_cnt#2 )
  (byte) irq_sprite_ptr#20 ← phi( @9/(byte) irq_sprite_ptr#2 )
  (byte) irq_raster_next#21 ← phi( @9/(byte) irq_raster_next#27 )
  (byte) irq_sprite_ypos#20 ← phi( @9/(byte) irq_sprite_ypos#27 )
  kickasm(location (byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {	    			
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  call main 
  to:@10
@10: scope:[]  from @8
  (byte) irq_cnt#14 ← phi( @8/(byte) irq_cnt#1 )
  (byte) irq_sprite_ptr#15 ← phi( @8/(byte) irq_sprite_ptr#1 )
  (byte) irq_sprite_ypos#16 ← phi( @8/(byte) irq_sprite_ypos#1 )
  (byte) irq_raster_next#15 ← phi( @8/(byte) irq_raster_next#1 )
  (byte) irq_raster_next#8 ← (byte) irq_raster_next#15
  (byte) irq_sprite_ypos#8 ← (byte) irq_sprite_ypos#16
  (byte) irq_sprite_ptr#8 ← (byte) irq_sprite_ptr#15
  (byte) irq_cnt#8 ← (byte) irq_cnt#14
  to:@end
@end: scope:[]  from @10

SYMBOL TABLE SSA
(byte*~) $0
(byte~) $1
(label) @10
(label) @4
(label) @6
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte) IRQ_RASTER_FIRST
(byte) IRQ_RASTER_FIRST#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(byte) PINK
(byte) PINK#0
(byte*) PLAYFIELD_CHARSET
(byte*) PLAYFIELD_CHARSET#0
(byte*) PLAYFIELD_SCREEN
(byte*) PLAYFIELD_SCREEN#0
(byte*) PLAYFIELD_SPRITES
(byte*) PLAYFIELD_SPRITES#0
(byte*) PLAYFIELD_SPRITE_PTRS
(byte*) PLAYFIELD_SPRITE_PTRS#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(void()) init_irq()
(byte~) init_irq::$0
(void()*~) init_irq::$1
(label) init_irq::@1
(label) init_irq::@return
(label) init_irq::toSpritePtr2
(word~) init_irq::toSpritePtr2_$0
(word) init_irq::toSpritePtr2_$0#0
(word~) init_irq::toSpritePtr2_$1
(word) init_irq::toSpritePtr2_$1#0
(byte~) init_irq::toSpritePtr2_$2
(byte) init_irq::toSpritePtr2_$2#0
(label) init_irq::toSpritePtr2_@return
(byte) init_irq::toSpritePtr2_return
(byte) init_irq::toSpritePtr2_return#0
(byte) init_irq::toSpritePtr2_return#1
(byte) init_irq::toSpritePtr2_return#2
(byte) init_irq::toSpritePtr2_return#3
(byte*) init_irq::toSpritePtr2_sprite
(byte*) init_irq::toSpritePtr2_sprite#0
(byte*) init_irq::toSpritePtr2_sprite#1
(void()) init_sprites()
(byte~) init_sprites::$1
(byte/signed byte/word/signed word/dword/signed dword~) init_sprites::$2
(byte/signed word/word/dword/signed dword/signed byte~) init_sprites::$3
(byte~) init_sprites::$4
(byte/signed word/word/dword/signed dword~) init_sprites::$5
(bool~) init_sprites::$6
(label) init_sprites::@1
(label) init_sprites::@3
(label) init_sprites::@4
(label) init_sprites::@return
(byte) init_sprites::s
(byte) init_sprites::s#0
(byte) init_sprites::s#1
(byte) init_sprites::s#2
(byte) init_sprites::s2
(byte) init_sprites::s2#0
(label) init_sprites::toD0181
(word~) init_sprites::toD0181_$0
(word) init_sprites::toD0181_$0#0
(word~) init_sprites::toD0181_$1
(word) init_sprites::toD0181_$1#0
(word~) init_sprites::toD0181_$2
(word) init_sprites::toD0181_$2#0
(byte~) init_sprites::toD0181_$3
(byte) init_sprites::toD0181_$3#0
(word~) init_sprites::toD0181_$4
(word) init_sprites::toD0181_$4#0
(byte~) init_sprites::toD0181_$5
(byte) init_sprites::toD0181_$5#0
(byte~) init_sprites::toD0181_$6
(byte) init_sprites::toD0181_$6#0
(byte~) init_sprites::toD0181_$7
(byte) init_sprites::toD0181_$7#0
(byte~) init_sprites::toD0181_$8
(byte) init_sprites::toD0181_$8#0
(label) init_sprites::toD0181_@return
(byte*) init_sprites::toD0181_gfx
(byte*) init_sprites::toD0181_gfx#0
(byte*) init_sprites::toD0181_gfx#1
(byte) init_sprites::toD0181_return
(byte) init_sprites::toD0181_return#0
(byte) init_sprites::toD0181_return#1
(byte) init_sprites::toD0181_return#2
(byte) init_sprites::toD0181_return#3
(byte*) init_sprites::toD0181_screen
(byte*) init_sprites::toD0181_screen#0
(byte*) init_sprites::toD0181_screen#1
(label) init_sprites::vicSelectGfxBank1
(byte~) init_sprites::vicSelectGfxBank1_$0
(byte) init_sprites::vicSelectGfxBank1_$0#0
(label) init_sprites::vicSelectGfxBank1_@1
(byte*) init_sprites::vicSelectGfxBank1_gfx
(byte*) init_sprites::vicSelectGfxBank1_gfx#0
(byte*) init_sprites::vicSelectGfxBank1_gfx#1
(label) init_sprites::vicSelectGfxBank1_toDd001
(word~) init_sprites::vicSelectGfxBank1_toDd001_$0
(word) init_sprites::vicSelectGfxBank1_toDd001_$0#0
(byte~) init_sprites::vicSelectGfxBank1_toDd001_$1
(byte) init_sprites::vicSelectGfxBank1_toDd001_$1#0
(byte~) init_sprites::vicSelectGfxBank1_toDd001_$2
(byte) init_sprites::vicSelectGfxBank1_toDd001_$2#0
(byte/word/dword~) init_sprites::vicSelectGfxBank1_toDd001_$3
(byte/word/dword) init_sprites::vicSelectGfxBank1_toDd001_$3#0
(label) init_sprites::vicSelectGfxBank1_toDd001_@return
(byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx
(byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#0
(byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#1
(byte) init_sprites::vicSelectGfxBank1_toDd001_return
(byte) init_sprites::vicSelectGfxBank1_toDd001_return#0
(byte) init_sprites::vicSelectGfxBank1_toDd001_return#1
(byte) init_sprites::vicSelectGfxBank1_toDd001_return#2
(byte) init_sprites::vicSelectGfxBank1_toDd001_return#3
(byte) init_sprites::xpos
(byte) init_sprites::xpos#0
(byte) init_sprites::xpos#1
(byte) init_sprites::xpos#2
interrupt(KERNEL_MIN)(void()) irq()
(bool~) irq::$0
(bool~) irq::$1
(byte~) irq::$2
(label) irq::@1
(label) irq::@2
(label) irq::@3
(label) irq::@4
(label) irq::@5
(label) irq::@7
(label) irq::@return
(byte) irq::ptr
(byte) irq::ptr#0
(byte) irq::ptr#1
(byte) irq::ptr#2
(label) irq::toSpritePtr2
(word~) irq::toSpritePtr2_$0
(word) irq::toSpritePtr2_$0#0
(word~) irq::toSpritePtr2_$1
(word) irq::toSpritePtr2_$1#0
(byte~) irq::toSpritePtr2_$2
(byte) irq::toSpritePtr2_$2#0
(label) irq::toSpritePtr2_@return
(byte) irq::toSpritePtr2_return
(byte) irq::toSpritePtr2_return#0
(byte) irq::toSpritePtr2_return#1
(byte) irq::toSpritePtr2_return#2
(byte) irq::toSpritePtr2_return#3
(byte*) irq::toSpritePtr2_sprite
(byte*) irq::toSpritePtr2_sprite#0
(byte*) irq::toSpritePtr2_sprite#1
(byte) irq_cnt
(byte) irq_cnt#0
(byte) irq_cnt#1
(byte) irq_cnt#10
(byte) irq_cnt#11
(byte) irq_cnt#12
(byte) irq_cnt#13
(byte) irq_cnt#14
(byte) irq_cnt#15
(byte) irq_cnt#16
(byte) irq_cnt#17
(byte) irq_cnt#18
(byte) irq_cnt#19
(byte) irq_cnt#2
(byte) irq_cnt#20
(byte) irq_cnt#21
(byte) irq_cnt#22
(byte) irq_cnt#23
(byte) irq_cnt#24
(byte) irq_cnt#25
(byte) irq_cnt#26
(byte) irq_cnt#3
(byte) irq_cnt#4
(byte) irq_cnt#5
(byte) irq_cnt#6
(byte) irq_cnt#7
(byte) irq_cnt#8
(byte) irq_cnt#9
(byte) irq_raster_next
(byte) irq_raster_next#0
(byte) irq_raster_next#1
(byte) irq_raster_next#10
(byte) irq_raster_next#11
(byte) irq_raster_next#12
(byte) irq_raster_next#13
(byte) irq_raster_next#14
(byte) irq_raster_next#15
(byte) irq_raster_next#16
(byte) irq_raster_next#17
(byte) irq_raster_next#18
(byte) irq_raster_next#19
(byte) irq_raster_next#2
(byte) irq_raster_next#20
(byte) irq_raster_next#21
(byte) irq_raster_next#22
(byte) irq_raster_next#23
(byte) irq_raster_next#24
(byte) irq_raster_next#25
(byte) irq_raster_next#26
(byte) irq_raster_next#27
(byte) irq_raster_next#28
(byte) irq_raster_next#29
(byte) irq_raster_next#3
(byte) irq_raster_next#30
(byte) irq_raster_next#31
(byte) irq_raster_next#32
(byte) irq_raster_next#4
(byte) irq_raster_next#5
(byte) irq_raster_next#6
(byte) irq_raster_next#7
(byte) irq_raster_next#8
(byte) irq_raster_next#9
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0
(byte) irq_sprite_ptr#1
(byte) irq_sprite_ptr#10
(byte) irq_sprite_ptr#11
(byte) irq_sprite_ptr#12
(byte) irq_sprite_ptr#13
(byte) irq_sprite_ptr#14
(byte) irq_sprite_ptr#15
(byte) irq_sprite_ptr#16
(byte) irq_sprite_ptr#17
(byte) irq_sprite_ptr#18
(byte) irq_sprite_ptr#19
(byte) irq_sprite_ptr#2
(byte) irq_sprite_ptr#20
(byte) irq_sprite_ptr#21
(byte) irq_sprite_ptr#22
(byte) irq_sprite_ptr#23
(byte) irq_sprite_ptr#3
(byte) irq_sprite_ptr#4
(byte) irq_sprite_ptr#5
(byte) irq_sprite_ptr#6
(byte) irq_sprite_ptr#7
(byte) irq_sprite_ptr#8
(byte) irq_sprite_ptr#9
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0
(byte) irq_sprite_ypos#1
(byte) irq_sprite_ypos#10
(byte) irq_sprite_ypos#11
(byte) irq_sprite_ypos#12
(byte) irq_sprite_ypos#13
(byte) irq_sprite_ypos#14
(byte) irq_sprite_ypos#15
(byte) irq_sprite_ypos#16
(byte) irq_sprite_ypos#17
(byte) irq_sprite_ypos#18
(byte) irq_sprite_ypos#19
(byte) irq_sprite_ypos#2
(byte) irq_sprite_ypos#20
(byte) irq_sprite_ypos#21
(byte) irq_sprite_ypos#22
(byte) irq_sprite_ypos#23
(byte) irq_sprite_ypos#24
(byte) irq_sprite_ypos#25
(byte) irq_sprite_ypos#26
(byte) irq_sprite_ypos#27
(byte) irq_sprite_ypos#28
(byte) irq_sprite_ypos#29
(byte) irq_sprite_ypos#3
(byte) irq_sprite_ypos#30
(byte) irq_sprite_ypos#31
(byte) irq_sprite_ypos#32
(byte) irq_sprite_ypos#4
(byte) irq_sprite_ypos#5
(byte) irq_sprite_ypos#6
(byte) irq_sprite_ypos#7
(byte) irq_sprite_ypos#8
(byte) irq_sprite_ypos#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@8
(label) main::@return
(label) toSpritePtr1
(word~) toSpritePtr1_$0
(word) toSpritePtr1_$0#0
(word~) toSpritePtr1_$1
(word) toSpritePtr1_$1#0
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_$2#0
(label) toSpritePtr1_@return
(byte) toSpritePtr1_return
(byte) toSpritePtr1_return#0
(byte) toSpritePtr1_return#1
(byte) toSpritePtr1_return#2
(byte) toSpritePtr1_return#3
(byte*) toSpritePtr1_sprite
(byte*) toSpritePtr1_sprite#0
(byte*) toSpritePtr1_sprite#1

Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte) irq_raster_next#2 (byte) irq_raster_next#32 (byte) irq_raster_next#28 (byte) irq_raster_next#27 (byte) irq_raster_next#21 
Alias candidate removed (volatile)(byte) toSpritePtr1_return#0 = (byte) toSpritePtr1_$2#0 (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#1 (byte) toSpritePtr1_return#3 (byte~) $1 (byte) irq_sprite_ptr#2 (byte) irq_sprite_ptr#20 
Alias candidate removed (volatile)(byte) init_irq::toSpritePtr2_return#0 = (byte) init_irq::toSpritePtr2_$2#0 (byte) init_irq::toSpritePtr2_return#2 (byte) init_irq::toSpritePtr2_return#1 (byte) init_irq::toSpritePtr2_return#3 (byte~) init_irq::$0 (byte) irq_sprite_ptr#3 (byte) irq_sprite_ptr#11 (byte) irq_sprite_ptr#4 
Alias candidate removed (volatile)(byte) irq::toSpritePtr2_return#0 = (byte) irq::toSpritePtr2_$2#0 (byte) irq::toSpritePtr2_return#2 (byte) irq::toSpritePtr2_return#1 (byte) irq::toSpritePtr2_return#3 (byte~) irq::$2 (byte) irq_sprite_ptr#5 
Alias (byte*) PLAYFIELD_SPRITE_PTRS#0 = (byte*~) $0 
Alias (byte) irq_raster_next#16 = (byte) irq_raster_next#22 
Alias (byte) irq_sprite_ypos#17 = (byte) irq_sprite_ypos#23 
Alias (byte) irq_sprite_ptr#16 = (byte) irq_sprite_ptr#21 
Alias (byte) irq_cnt#15 = (byte) irq_cnt#20 
Alias (byte) irq_raster_next#0 = (byte) irq_raster_next#9 
Alias (byte) irq_sprite_ypos#0 = (byte) irq_sprite_ypos#9 
Alias (byte) irq_sprite_ptr#0 = (byte) irq_sprite_ptr#9 
Alias (byte) irq_cnt#0 = (byte) irq_cnt#9 
Alias (byte) irq_raster_next#1 = (byte) irq_raster_next#23 (byte) irq_raster_next#17 (byte) irq_raster_next#10 
Alias (byte) irq_sprite_ypos#1 = (byte) irq_sprite_ypos#24 (byte) irq_sprite_ypos#18 (byte) irq_sprite_ypos#10 
Alias (byte) irq_sprite_ptr#1 = (byte) irq_sprite_ptr#22 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#10 
Alias (byte) irq_cnt#1 = (byte) irq_cnt#21 (byte) irq_cnt#16 (byte) irq_cnt#10 
Alias (byte*) init_sprites::vicSelectGfxBank1_gfx#0 = (byte*) init_sprites::vicSelectGfxBank1_gfx#1 (byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#0 (byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx#1 
Alias (byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 = (byte/word/dword) init_sprites::vicSelectGfxBank1_toDd001_$3#0 (byte) init_sprites::vicSelectGfxBank1_toDd001_return#2 (byte) init_sprites::vicSelectGfxBank1_toDd001_return#1 (byte) init_sprites::vicSelectGfxBank1_toDd001_return#3 (byte) init_sprites::vicSelectGfxBank1_$0#0 
Alias (byte*) init_sprites::toD0181_screen#0 = (byte*) init_sprites::toD0181_screen#1 
Alias (byte*) init_sprites::toD0181_gfx#0 = (byte*) init_sprites::toD0181_gfx#1 
Alias (byte) init_sprites::toD0181_return#0 = (byte) init_sprites::toD0181_$8#0 (byte) init_sprites::toD0181_return#2 (byte) init_sprites::toD0181_return#1 (byte) init_sprites::toD0181_return#3 (byte~) init_sprites::$1 
Alias (byte) init_sprites::xpos#0 = (byte/signed word/word/dword/signed dword/signed byte~) init_sprites::$3 
Alias (byte) init_sprites::s2#0 = (byte~) init_sprites::$4 
Alias (byte) init_sprites::xpos#1 = (byte/signed word/word/dword/signed dword~) init_sprites::$5 
Alias (byte*) PLAYFIELD_SPRITES#0 = (byte*) toSpritePtr1_sprite#0 (byte*) toSpritePtr1_sprite#1 
Alias (byte) irq_sprite_ypos#2 = (byte) irq_sprite_ypos#31 (byte) irq_sprite_ypos#28 (byte) irq_sprite_ypos#27 (byte) irq_sprite_ypos#20 
Alias (byte*) init_irq::toSpritePtr2_sprite#0 = (byte*) init_irq::toSpritePtr2_sprite#1 
Alias (byte) irq_raster_next#11 = (byte) irq_raster_next#29 (byte) irq_raster_next#3 (byte) irq_raster_next#24 (byte) irq_raster_next#18 (byte) irq_raster_next#4 
Alias (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#29 (byte) irq_sprite_ypos#3 (byte) irq_sprite_ypos#25 (byte) irq_sprite_ypos#19 (byte) irq_sprite_ypos#4 
Alias (byte) irq_cnt#11 = (byte) irq_cnt#3 (byte) irq_cnt#4 
Alias (byte) irq_sprite_ptr#12 = (byte) irq_sprite_ptr#18 (byte) irq_sprite_ptr#13 
Alias (byte) irq_cnt#12 = (byte) irq_cnt#17 
Alias (byte) irq_raster_next#12 = (byte) irq_raster_next#19 (byte) irq_raster_next#25 
Alias (byte) irq_sprite_ypos#13 = (byte) irq_sprite_ypos#21 (byte) irq_sprite_ypos#14 
Alias (byte*) irq::toSpritePtr2_sprite#0 = (byte*) irq::toSpritePtr2_sprite#1 
Alias (byte) irq_raster_next#20 = (byte) irq_raster_next#31 (byte) irq_raster_next#5 (byte) irq_raster_next#26 
Alias (byte) irq_cnt#24 = (byte) irq_cnt#26 (byte) irq_cnt#6 (byte) irq_cnt#25 
Alias (byte) irq_sprite_ypos#26 = (byte) irq_sprite_ypos#32 (byte) irq_sprite_ypos#5 (byte) irq_sprite_ypos#30 
Alias (byte) irq_cnt#23 = (byte) irq_cnt#5 
Alias (byte) irq_cnt#13 = (byte) irq_cnt#18 (byte) irq_cnt#7 
Alias (byte) irq_raster_next#13 = (byte) irq_raster_next#14 (byte) irq_raster_next#7 
Alias (byte) irq_sprite_ypos#15 = (byte) irq_sprite_ypos#22 (byte) irq_sprite_ypos#7 
Alias (byte) irq_sprite_ptr#14 = (byte) irq_sprite_ptr#19 (byte) irq_sprite_ptr#7 
Alias (byte) irq_cnt#19 = (byte) irq_cnt#2 
Alias (byte) irq_raster_next#15 = (byte) irq_raster_next#8 
Alias (byte) irq_sprite_ypos#16 = (byte) irq_sprite_ypos#8 
Alias (byte) irq_sprite_ptr#15 = (byte) irq_sprite_ptr#8 
Alias (byte) irq_cnt#14 = (byte) irq_cnt#8 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte) irq_raster_next#2 (byte) irq_raster_next#32 (byte) irq_raster_next#28 (byte) irq_raster_next#27 (byte) irq_raster_next#21 
Alias candidate removed (volatile)(byte) toSpritePtr1_return#0 = (byte) toSpritePtr1_$2#0 (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#1 (byte) toSpritePtr1_return#3 (byte~) $1 (byte) irq_sprite_ptr#2 (byte) irq_sprite_ptr#20 
Alias candidate removed (volatile)(byte) init_irq::toSpritePtr2_return#0 = (byte) init_irq::toSpritePtr2_$2#0 (byte) init_irq::toSpritePtr2_return#2 (byte) init_irq::toSpritePtr2_return#1 (byte) init_irq::toSpritePtr2_return#3 (byte~) init_irq::$0 (byte) irq_sprite_ptr#3 (byte) irq_sprite_ptr#11 (byte) irq_sprite_ptr#4 
Alias candidate removed (volatile)(byte) irq::toSpritePtr2_return#0 = (byte) irq::toSpritePtr2_$2#0 (byte) irq::toSpritePtr2_return#2 (byte) irq::toSpritePtr2_return#1 (byte) irq::toSpritePtr2_return#3 (byte~) irq::$2 (byte) irq_sprite_ptr#5 
Self Phi Eliminated (byte) irq_raster_next#1
Self Phi Eliminated (byte) irq_sprite_ypos#1
Self Phi Eliminated (byte) irq_sprite_ptr#1
Self Phi Eliminated (byte) irq_cnt#1
Self Phi Eliminated (byte) irq_sprite_ypos#13
Self Phi Eliminated (byte) irq_sprite_ptr#12
Self Phi Eliminated (byte) irq_cnt#12
Self Phi Eliminated (byte) irq_raster_next#12
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) irq_raster_next#16 (byte) irq_raster_next#21
Redundant Phi (byte) irq_sprite_ypos#17 (byte) irq_sprite_ypos#2
Redundant Phi (byte) irq_sprite_ptr#16 (byte) irq_sprite_ptr#20
Redundant Phi (byte) irq_cnt#15 (byte) irq_cnt#19
Redundant Phi (byte) irq_raster_next#0 (byte) irq_raster_next#11
Redundant Phi (byte) irq_sprite_ypos#0 (byte) irq_sprite_ypos#11
Redundant Phi (byte) irq_sprite_ptr#0 (byte) irq_sprite_ptr#4
Redundant Phi (byte) irq_cnt#0 (byte) irq_cnt#11
Redundant Phi (byte) irq_raster_next#1 (byte) irq_raster_next#0
Redundant Phi (byte) irq_sprite_ypos#1 (byte) irq_sprite_ypos#0
Redundant Phi (byte) irq_sprite_ptr#1 (byte) irq_sprite_ptr#0
Redundant Phi (byte) irq_cnt#1 (byte) irq_cnt#0
Redundant Phi (byte) irq_raster_next#32 (byte) irq_raster_next#2
Redundant Phi (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#0
Redundant Phi (byte) irq_raster_next#28 (byte) irq_raster_next#32
Redundant Phi (byte) toSpritePtr1_return#3 (byte) toSpritePtr1_return#1
Redundant Phi (byte) irq_raster_next#27 (byte) irq_raster_next#28
Redundant Phi (byte) init_irq::toSpritePtr2_return#2 (byte) init_irq::toSpritePtr2_return#0
Redundant Phi (byte) init_irq::toSpritePtr2_return#3 (byte) init_irq::toSpritePtr2_return#1
Redundant Phi (byte) irq_sprite_ptr#11 (byte) irq_sprite_ptr#3
Redundant Phi (byte) irq_sprite_ypos#12 (byte) irq_sprite_ypos#2
Redundant Phi (byte) irq_sprite_ptr#23 (byte) irq_sprite_ptr#20
Redundant Phi (byte) irq_cnt#22 (byte) irq_cnt#19
Redundant Phi (byte) irq_raster_next#30 (byte) irq_raster_next#21
Redundant Phi (byte) irq_sprite_ypos#13 (byte) irq_sprite_ypos#12
Redundant Phi (byte) irq_sprite_ptr#12 (byte) irq_sprite_ptr#23
Redundant Phi (byte) irq_cnt#12 (byte) irq_cnt#22
Redundant Phi (byte) irq_raster_next#12 (byte) irq_raster_next#30
Redundant Phi (byte) irq::toSpritePtr2_return#2 (byte) irq::toSpritePtr2_return#0
Redundant Phi (byte) irq::toSpritePtr2_return#3 (byte) irq::toSpritePtr2_return#1
Redundant Phi (byte) irq_raster_next#21 (byte) irq_raster_next#27
Redundant Phi (byte) irq_sprite_ptr#20 (byte) irq_sprite_ptr#2
Redundant Phi (byte) irq_raster_next#15 (byte) irq_raster_next#1
Redundant Phi (byte) irq_sprite_ypos#16 (byte) irq_sprite_ypos#1
Redundant Phi (byte) irq_sprite_ptr#15 (byte) irq_sprite_ptr#1
Redundant Phi (byte) irq_cnt#14 (byte) irq_cnt#1
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) init_sprites::$6 if((byte) init_sprites::s#1!=rangelast(0,3)) goto init_sprites::@1
Simple Condition (bool~) irq::$0 if(*((byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1
Simple Condition (bool~) irq::$1 if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = 48
Constant (const byte) PROCPORT_RAM_IO#0 = 53
Constant (const byte) PROCPORT_RAM_CHARROM#0 = 49
Constant (const byte) PROCPORT_KERNEL_IO#0 = 54
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = 55
Constant (const byte*) CHARGEN#0 = ((byte*))53248
Constant (const word) SPRITE_PTRS#0 = 1016
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))53248
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))53249
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))53264
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))53269
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))53271
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))53275
Constant (const byte*) SPRITES_MC#0 = ((byte*))53276
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))53277
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte*) BGCOL1#0 = ((byte*))53281
Constant (const byte*) BGCOL2#0 = ((byte*))53282
Constant (const byte*) BGCOL3#0 = ((byte*))53283
Constant (const byte*) BGCOL4#0 = ((byte*))53284
Constant (const byte*) SPRITES_MC1#0 = ((byte*))53285
Constant (const byte*) SPRITES_MC2#0 = ((byte*))53286
Constant (const byte*) SPRITES_COLS#0 = ((byte*))53287
Constant (const byte*) VIC_CONTROL#0 = ((byte*))53265
Constant (const byte*) D011#0 = ((byte*))53265
Constant (const byte) VIC_RST8#0 = 128
Constant (const byte) VIC_ECM#0 = 64
Constant (const byte) VIC_BMM#0 = 32
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))53270
Constant (const byte*) D016#0 = ((byte*))53270
Constant (const byte) VIC_MCM#0 = 16
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))53272
Constant (const byte*) VIC_MEMORY#0 = ((byte*))53272
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))53267
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))53268
Constant (const byte*) IRQ_STATUS#0 = ((byte*))53273
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))53274
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))55296
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))56320
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))56321
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))56322
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))56323
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))56333
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = 127
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))56576
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))56577
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))56578
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))56579
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))56589
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))788
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))65534
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = 10
Constant (const byte) DARK_GREY#0 = 11
Constant (const byte) GREY#0 = 12
Constant (const byte) LIGHT_GREEN#0 = 13
Constant (const byte) LIGHT_BLUE#0 = 14
Constant (const byte) LIGHT_GREY#0 = 15
Constant (const byte*) PLAYFIELD_SPRITES#0 = ((byte*))8192
Constant (const byte*) PLAYFIELD_CHARSET#0 = ((byte*))4096
Constant (const byte*) PLAYFIELD_SCREEN#0 = ((byte*))1024
Constant (const byte/signed byte/word/signed word/dword/signed dword) init_sprites::$2 = 14*8
Constant (const byte) init_sprites::s#0 = 0
Constant (const byte) IRQ_RASTER_FIRST#0 = 48
Constant (const void()*) init_irq::$1 = &irq
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) PLAYFIELD_SPRITE_PTRS#0 = PLAYFIELD_SCREEN#0+SPRITE_PTRS#0
Constant (const byte*) init_sprites::vicSelectGfxBank1_gfx#0 = PLAYFIELD_SCREEN#0
Constant (const byte*) init_sprites::toD0181_screen#0 = PLAYFIELD_SCREEN#0
Constant (const byte*) init_sprites::toD0181_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte) init_sprites::xpos#0 = 24+init_sprites::$2
Constant (const word) toSpritePtr1_$0#0 = ((word))PLAYFIELD_SPRITES#0
Constant (const byte*) init_irq::toSpritePtr2_sprite#0 = PLAYFIELD_SPRITES#0
Constant (const byte*) irq::toSpritePtr2_sprite#0 = PLAYFIELD_SPRITES#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) init_sprites::vicSelectGfxBank1_toDd001_$0#0 = ((word))init_sprites::vicSelectGfxBank1_gfx#0
Constant (const word) init_sprites::toD0181_$0#0 = ((word))init_sprites::toD0181_screen#0
Constant (const word) init_sprites::toD0181_$4#0 = ((word))init_sprites::toD0181_gfx#0
Constant (const word) toSpritePtr1_$1#0 = toSpritePtr1_$0#0>>6
Constant (const word) init_irq::toSpritePtr2_$0#0 = ((word))init_irq::toSpritePtr2_sprite#0
Constant (const word) irq::toSpritePtr2_$0#0 = ((word))irq::toSpritePtr2_sprite#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) init_sprites::vicSelectGfxBank1_toDd001_$1#0 = >init_sprites::vicSelectGfxBank1_toDd001_$0#0
Constant (const word) init_sprites::toD0181_$1#0 = init_sprites::toD0181_$0#0&16383
Constant (const byte) init_sprites::toD0181_$5#0 = >init_sprites::toD0181_$4#0
Constant (const byte) toSpritePtr1_$2#0 = ((byte))toSpritePtr1_$1#0
Constant (const word) init_irq::toSpritePtr2_$1#0 = init_irq::toSpritePtr2_$0#0>>6
Constant (const word) irq::toSpritePtr2_$1#0 = irq::toSpritePtr2_$0#0>>6
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) init_sprites::vicSelectGfxBank1_toDd001_$2#0 = init_sprites::vicSelectGfxBank1_toDd001_$1#0>>6
Constant (const word) init_sprites::toD0181_$2#0 = init_sprites::toD0181_$1#0<<2
Constant (const byte) init_sprites::toD0181_$6#0 = init_sprites::toD0181_$5#0>>2
Constant (const byte) toSpritePtr1_return#0 = toSpritePtr1_$2#0
Constant (const byte) init_irq::toSpritePtr2_$2#0 = ((byte))init_irq::toSpritePtr2_$1#0
Constant (const byte) irq::toSpritePtr2_$2#0 = ((byte))irq::toSpritePtr2_$1#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 = 3^init_sprites::vicSelectGfxBank1_toDd001_$2#0
Constant (const byte) init_sprites::toD0181_$3#0 = >init_sprites::toD0181_$2#0
Constant (const byte) init_sprites::toD0181_$7#0 = init_sprites::toD0181_$6#0&15
Constant (const byte) toSpritePtr1_return#1 = toSpritePtr1_return#0
Constant (const byte) init_irq::toSpritePtr2_return#0 = init_irq::toSpritePtr2_$2#0
Constant (const byte) irq::toSpritePtr2_return#0 = irq::toSpritePtr2_$2#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) init_sprites::toD0181_return#0 = init_sprites::toD0181_$3#0|init_sprites::toD0181_$7#0
Constant (const byte) $1 = toSpritePtr1_return#1
Constant (const byte) init_irq::toSpritePtr2_return#1 = init_irq::toSpritePtr2_return#0
Constant (const byte) irq::toSpritePtr2_return#1 = irq::toSpritePtr2_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) init_irq::$0 = init_irq::toSpritePtr2_return#1
Constant (const byte) irq::$2 = irq::toSpritePtr2_return#1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(SPRITES_YPOS#0+0)
Consolidated array index constant in *(SPRITES_YPOS#0+2)
Consolidated array index constant in *(SPRITES_YPOS#0+4)
Consolidated array index constant in *(SPRITES_YPOS#0+6)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS#0+0)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS#0+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS#0+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS#0+3)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value init_sprites::s#1 ← ++ init_sprites::s#2 to ++
Resolved ranged comparison value if(init_sprites::s#1!=rangelast(0,3)) goto init_sprites::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Culled Empty Block (label) @4
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@1
Culled Empty Block (label) init_sprites::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) init_sprites::@3
Culled Empty Block (label) init_sprites::toD0181_@return
Culled Empty Block (label) toSpritePtr1_@return
Culled Empty Block (label) init_irq::toSpritePtr2_@return
Culled Empty Block (label) irq::toSpritePtr2_@return
Culled Empty Block (label) @10
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) irq_sprite_ptr#3 = (byte) irq_sprite_ptr#4 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const byte) init_sprites::s#0
Inlining constant with var siblings (const byte) init_sprites::xpos#0
Inlining constant with different constant siblings (const byte) init_irq::toSpritePtr2_return#1
Inlining constant with different constant siblings (const byte) irq::toSpritePtr2_return#1
Inlining constant with different constant siblings (const byte) toSpritePtr1_return#1
Constant inlined init_sprites::$2 = (byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined init_sprites::toD0181_$7#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
Constant inlined init_sprites::toD0181_$6#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined init_sprites::toD0181_$5#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined init_sprites::toD0181_$4#0 = ((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined init_sprites::toD0181_$2#0 = ((word))(const byte*) PLAYFIELD_SCREEN#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined init_sprites::toD0181_$3#0 = >((word))(const byte*) PLAYFIELD_SCREEN#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined init_sprites::toD0181_$0#0 = ((word))(const byte*) PLAYFIELD_SCREEN#0
Constant inlined init_sprites::toD0181_$1#0 = ((word))(const byte*) PLAYFIELD_SCREEN#0&(word/signed word/dword/signed dword) 16383
Constant inlined $1 = (const byte) toSpritePtr1_return#0
Constant inlined init_irq::toSpritePtr2_sprite#0 = (const byte*) PLAYFIELD_SPRITES#0
Constant inlined init_sprites::xpos#0 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined init_irq::$0 = (const byte) init_irq::toSpritePtr2_return#0
Constant inlined irq::toSpritePtr2_sprite#0 = (const byte*) PLAYFIELD_SPRITES#0
Constant inlined irq::toSpritePtr2_return#1 = (const byte) irq::toSpritePtr2_return#0
Constant inlined init_irq::$1 = &interrupt(KERNEL_MIN)(void()) irq()
Constant inlined init_sprites::vicSelectGfxBank1_gfx#0 = (const byte*) PLAYFIELD_SCREEN#0
Constant inlined init_sprites::s#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init_irq::toSpritePtr2_$2#0 = (const byte) init_irq::toSpritePtr2_return#0
Constant inlined init_sprites::toD0181_gfx#0 = (const byte*) PLAYFIELD_CHARSET#0
Constant inlined init_irq::toSpritePtr2_$1#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined init_sprites::vicSelectGfxBank1_toDd001_$1#0 = >((word))(const byte*) PLAYFIELD_SCREEN#0
Constant inlined init_sprites::vicSelectGfxBank1_toDd001_$0#0 = ((word))(const byte*) PLAYFIELD_SCREEN#0
Constant inlined init_irq::toSpritePtr2_$0#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0
Constant inlined init_irq::toSpritePtr2_return#1 = (const byte) init_irq::toSpritePtr2_return#0
Constant inlined init_sprites::vicSelectGfxBank1_toDd001_$2#0 = >((word))(const byte*) PLAYFIELD_SCREEN#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined init_sprites::toD0181_screen#0 = (const byte*) PLAYFIELD_SCREEN#0
Constant inlined toSpritePtr1_$1#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined toSpritePtr1_$2#0 = (const byte) toSpritePtr1_return#0
Constant inlined toSpritePtr1_$0#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0
Constant inlined toSpritePtr1_return#1 = (const byte) toSpritePtr1_return#0
Constant inlined irq::toSpritePtr2_$1#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined irq::$2 = (const byte) irq::toSpritePtr2_return#0
Constant inlined irq::toSpritePtr2_$0#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0
Constant inlined irq::toSpritePtr2_$2#0 = (const byte) irq::toSpritePtr2_return#0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SPRITES_YPOS#0+0
Simplifying constant plus zero PLAYFIELD_SPRITE_PTRS#0+0
Added new block during phi lifting init_sprites::@5(between init_sprites::@1 and init_sprites::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of init_irq::toSpritePtr2
Adding NOP phi() at start of init_sprites
Adding NOP phi() at start of init_sprites::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of init_sprites::toD0181
Adding NOP phi() at start of irq::toSpritePtr2
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to init_sprites:10 init_irq:12 

Created 3 initial phi equivalence classes
Coalesced [45] init_sprites::s#3 ← init_sprites::s#1
Coalesced [46] init_sprites::xpos#3 ← init_sprites::xpos#1
Coalesced [65] irq_raster_next#33 ← irq_raster_next#6
Coalesced [76] irq_raster_next#34 ← irq_raster_next#20
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) init_sprites::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of init_irq::toSpritePtr2
Adding NOP phi() at start of init_sprites
Adding NOP phi() at start of init_sprites::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of init_sprites::toD0181
Adding NOP phi() at start of irq::toSpritePtr2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@6
@6: scope:[]  from @begin
  [1] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0
  [2] (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @6
  [3] phi()
  to:@9
@9: scope:[]  from toSpritePtr1
  [4] (byte) irq_sprite_ptr#2 ← (const byte) toSpritePtr1_return#0
  [5] (byte) irq_cnt#19 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@8
@8: scope:[]  from @9
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {	    			
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  [7] call main 
  to:@end
@end: scope:[]  from @8
  [8] phi()
main: scope:[main]  from @8
  [9] phi()
  [10] call init_sprites 
  to:main::@7
main::@7: scope:[main]  from main
  [11] phi()
  [12] call init_irq 
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@7
  [13] *((const byte*) PLAYFIELD_SCREEN#0) ← ++ *((const byte*) PLAYFIELD_SCREEN#0)
  to:main::@2
init_irq: scope:[init_irq]  from main::@7
  [14] (byte) irq_raster_next#11 ← (const byte) IRQ_RASTER_FIRST#0
  [15] (byte) irq_sprite_ypos#11 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:init_irq::toSpritePtr2
init_irq::toSpritePtr2: scope:[init_irq]  from init_irq
  [16] phi()
  to:init_irq::@1
init_irq::@1: scope:[init_irq]  from init_irq::toSpritePtr2
  [17] (byte) irq_sprite_ptr#3 ← (const byte) init_irq::toSpritePtr2_return#0
  [18] (byte) irq_cnt#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  asm { sei  }
  [20] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [21] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  [22] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [23] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [24] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:init_irq::@return
init_irq::@return: scope:[init_irq]  from init_irq::@1
  [26] return 
  to:@return
init_sprites: scope:[init_sprites]  from main
  [27] phi()
  to:init_sprites::vicSelectGfxBank1
init_sprites::vicSelectGfxBank1: scope:[init_sprites]  from init_sprites
  [28] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:init_sprites::vicSelectGfxBank1_toDd001
init_sprites::vicSelectGfxBank1_toDd001: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1
  [29] phi()
  to:init_sprites::vicSelectGfxBank1_@1
init_sprites::vicSelectGfxBank1_@1: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_toDd001
  [30] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0
  to:init_sprites::toD0181
init_sprites::toD0181: scope:[init_sprites]  from init_sprites::vicSelectGfxBank1_@1
  [31] phi()
  to:init_sprites::@4
init_sprites::@4: scope:[init_sprites]  from init_sprites::toD0181
  [32] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0
  [33] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  [34] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [35] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [36] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:init_sprites::@1
init_sprites::@1: scope:[init_sprites]  from init_sprites::@1 init_sprites::@4
  [37] (byte) init_sprites::xpos#2 ← phi( init_sprites::@1/(byte) init_sprites::xpos#1 init_sprites::@4/(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8 )
  [37] (byte) init_sprites::s#2 ← phi( init_sprites::@1/(byte) init_sprites::s#1 init_sprites::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [38] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [39] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2
  [40] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0
  [41] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  [42] (byte) init_sprites::s#1 ← ++ (byte) init_sprites::s#2
  [43] if((byte) init_sprites::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto init_sprites::@1
  to:init_sprites::@return
init_sprites::@return: scope:[init_sprites]  from init_sprites::@1
  [44] return 
  to:@return
irq: scope:[irq]  from
  [45] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0
  [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#2
  [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#2
  [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#2
  [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#2
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@1
  [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1
  to:irq::@4
irq::@4: scope:[irq]  from irq::@1
  [51] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#2
  [52] *((const byte*) PLAYFIELD_SPRITE_PTRS#0) ← (byte) irq::ptr#0
  [53] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0
  [54] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  [55] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  [56] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1
  [57] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  [58] (byte) irq_cnt#23 ← ++ (byte) irq_cnt#19
  [59] if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2
  to:irq::@5
irq::@5: scope:[irq]  from irq::@4
  [60] (byte) irq_raster_next#6 ← (byte) irq_raster_next#2 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [61] (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#2 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [62] (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#2 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:irq::@3
irq::@3: scope:[irq]  from irq::@5 irq::@7
  [63] (byte) irq_raster_next#13 ← phi( irq::@5/(byte) irq_raster_next#6 irq::@7/(byte) irq_raster_next#20 )
  [64] *((const byte*) RASTER#0) ← (byte) irq_raster_next#13
  [65] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [66] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  to:irq::@return
irq::@return: scope:[irq]  from irq::@3
  [67] return 
  to:@return
irq::@2: scope:[irq]  from irq::@4
  [68] (byte) irq_cnt#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [69] (byte) irq_raster_next#20 ← (const byte) IRQ_RASTER_FIRST#0
  [70] (byte) irq_sprite_ypos#26 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:irq::toSpritePtr2
irq::toSpritePtr2: scope:[irq]  from irq::@2
  [71] phi()
  to:irq::@7
irq::@7: scope:[irq]  from irq::toSpritePtr2
  [72] (byte) irq_sprite_ptr#5 ← (const byte) irq::toSpritePtr2_return#0
  to:irq::@3


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte) IRQ_RASTER_FIRST
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PLAYFIELD_CHARSET
(byte*) PLAYFIELD_SCREEN
(byte*) PLAYFIELD_SPRITES
(byte*) PLAYFIELD_SPRITE_PTRS
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) init_irq()
(word~) init_irq::toSpritePtr2_$0
(word~) init_irq::toSpritePtr2_$1
(byte~) init_irq::toSpritePtr2_$2
(byte) init_irq::toSpritePtr2_return
(byte*) init_irq::toSpritePtr2_sprite
(void()) init_sprites()
(byte) init_sprites::s
(byte) init_sprites::s#1 16.5
(byte) init_sprites::s#2 8.8
(byte) init_sprites::s2
(byte) init_sprites::s2#0 22.0
(word~) init_sprites::toD0181_$0
(word~) init_sprites::toD0181_$1
(word~) init_sprites::toD0181_$2
(byte~) init_sprites::toD0181_$3
(word~) init_sprites::toD0181_$4
(byte~) init_sprites::toD0181_$5
(byte~) init_sprites::toD0181_$6
(byte~) init_sprites::toD0181_$7
(byte~) init_sprites::toD0181_$8
(byte*) init_sprites::toD0181_gfx
(byte) init_sprites::toD0181_return
(byte*) init_sprites::toD0181_screen
(byte~) init_sprites::vicSelectGfxBank1_$0
(byte*) init_sprites::vicSelectGfxBank1_gfx
(word~) init_sprites::vicSelectGfxBank1_toDd001_$0
(byte~) init_sprites::vicSelectGfxBank1_toDd001_$1
(byte~) init_sprites::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) init_sprites::vicSelectGfxBank1_toDd001_$3
(byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx
(byte) init_sprites::vicSelectGfxBank1_toDd001_return
(byte) init_sprites::xpos
(byte) init_sprites::xpos#1 7.333333333333333
(byte) init_sprites::xpos#2 8.25
interrupt(KERNEL_MIN)(void()) irq()
(byte) irq::ptr
(byte) irq::ptr#0 3.0
(byte) irq::ptr#1 2.6666666666666665
(byte) irq::ptr#2 4.0
(word~) irq::toSpritePtr2_$0
(word~) irq::toSpritePtr2_$1
(byte~) irq::toSpritePtr2_$2
(byte) irq::toSpritePtr2_return
(byte*) irq::toSpritePtr2_sprite
(byte) irq_cnt
(byte) irq_cnt#11 20.0
(byte) irq_cnt#19 0.3076923076923077
(byte) irq_cnt#23 4.0
(byte) irq_cnt#24 20.0
(byte) irq_raster_next
(byte) irq_raster_next#11 20.0
(byte) irq_raster_next#13 6.0
(byte) irq_raster_next#2 0.26666666666666666
(byte) irq_raster_next#20 1.0
(byte) irq_raster_next#6 1.3333333333333333
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#2 0.3529411764705882
(byte) irq_sprite_ptr#3 20.0
(byte) irq_sprite_ptr#5 20.0
(byte) irq_sprite_ptr#6 20.0
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#11 20.0
(byte) irq_sprite_ypos#2 1.4375
(byte) irq_sprite_ypos#26 20.0
(byte) irq_sprite_ypos#6 20.0
(void()) main()
(word~) toSpritePtr1_$0
(word~) toSpritePtr1_$1
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_return
(byte*) toSpritePtr1_sprite

Initial phi equivalence classes
[ init_sprites::s#2 init_sprites::s#1 ]
[ init_sprites::xpos#2 init_sprites::xpos#1 ]
[ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ]
Added variable irq_raster_next#2 to zero page equivalence class [ irq_raster_next#2 ]
Added variable irq_sprite_ypos#2 to zero page equivalence class [ irq_sprite_ypos#2 ]
Added variable irq_sprite_ptr#2 to zero page equivalence class [ irq_sprite_ptr#2 ]
Added variable irq_cnt#19 to zero page equivalence class [ irq_cnt#19 ]
Added variable irq_raster_next#11 to zero page equivalence class [ irq_raster_next#11 ]
Added variable irq_sprite_ypos#11 to zero page equivalence class [ irq_sprite_ypos#11 ]
Added variable irq_sprite_ptr#3 to zero page equivalence class [ irq_sprite_ptr#3 ]
Added variable irq_cnt#11 to zero page equivalence class [ irq_cnt#11 ]
Added variable init_sprites::s2#0 to zero page equivalence class [ init_sprites::s2#0 ]
Added variable irq::ptr#0 to zero page equivalence class [ irq::ptr#0 ]
Added variable irq::ptr#1 to zero page equivalence class [ irq::ptr#1 ]
Added variable irq::ptr#2 to zero page equivalence class [ irq::ptr#2 ]
Added variable irq_cnt#23 to zero page equivalence class [ irq_cnt#23 ]
Added variable irq_sprite_ypos#6 to zero page equivalence class [ irq_sprite_ypos#6 ]
Added variable irq_sprite_ptr#6 to zero page equivalence class [ irq_sprite_ptr#6 ]
Added variable irq_cnt#24 to zero page equivalence class [ irq_cnt#24 ]
Added variable irq_sprite_ypos#26 to zero page equivalence class [ irq_sprite_ypos#26 ]
Added variable irq_sprite_ptr#5 to zero page equivalence class [ irq_sprite_ptr#5 ]
Complete equivalence classes
[ init_sprites::s#2 init_sprites::s#1 ]
[ init_sprites::xpos#2 init_sprites::xpos#1 ]
[ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ]
[ irq_raster_next#2 ]
[ irq_sprite_ypos#2 ]
[ irq_sprite_ptr#2 ]
[ irq_cnt#19 ]
[ irq_raster_next#11 ]
[ irq_sprite_ypos#11 ]
[ irq_sprite_ptr#3 ]
[ irq_cnt#11 ]
[ init_sprites::s2#0 ]
[ irq::ptr#0 ]
[ irq::ptr#1 ]
[ irq::ptr#2 ]
[ irq_cnt#23 ]
[ irq_sprite_ypos#6 ]
[ irq_sprite_ptr#6 ]
[ irq_cnt#24 ]
[ irq_sprite_ypos#26 ]
[ irq_sprite_ptr#5 ]
Allocated zp ZP_BYTE:2 [ init_sprites::s#2 init_sprites::s#1 ]
Allocated zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ]
Allocated zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ]
Allocated zp ZP_BYTE:5 [ irq_raster_next#2 ]
Allocated zp ZP_BYTE:6 [ irq_sprite_ypos#2 ]
Allocated zp ZP_BYTE:7 [ irq_sprite_ptr#2 ]
Allocated zp ZP_BYTE:8 [ irq_cnt#19 ]
Allocated zp ZP_BYTE:9 [ irq_raster_next#11 ]
Allocated zp ZP_BYTE:10 [ irq_sprite_ypos#11 ]
Allocated zp ZP_BYTE:11 [ irq_sprite_ptr#3 ]
Allocated zp ZP_BYTE:12 [ irq_cnt#11 ]
Allocated zp ZP_BYTE:13 [ init_sprites::s2#0 ]
Allocated zp ZP_BYTE:14 [ irq::ptr#0 ]
Allocated zp ZP_BYTE:15 [ irq::ptr#1 ]
Allocated zp ZP_BYTE:16 [ irq::ptr#2 ]
Allocated zp ZP_BYTE:17 [ irq_cnt#23 ]
Allocated zp ZP_BYTE:18 [ irq_sprite_ypos#6 ]
Allocated zp ZP_BYTE:19 [ irq_sprite_ptr#6 ]
Allocated zp ZP_BYTE:20 [ irq_cnt#24 ]
Allocated zp ZP_BYTE:21 [ irq_sprite_ypos#26 ]
Allocated zp ZP_BYTE:22 [ irq_sprite_ptr#5 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D018 = $d018
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label KERNEL_IRQ = $314
  .const BLACK = 0
  .const DARK_GREY = $b
  .label PLAYFIELD_SPRITES = $2000
  .label PLAYFIELD_CHARSET = $1000
  .label PLAYFIELD_SCREEN = $400
  .const IRQ_RASTER_FIRST = $30
  .label PLAYFIELD_SPRITE_PTRS = PLAYFIELD_SCREEN+SPRITE_PTRS
  .const toSpritePtr1_return = PLAYFIELD_SPRITES>>6
  .label irq_raster_next = 5
  .label irq_sprite_ypos = 6
  .label irq_sprite_ptr = 7
  .label irq_sprite_ptr_3 = $b
  .label irq_sprite_ptr_5 = $16
  .label irq_raster_next_6 = 4
  .label irq_sprite_ypos_6 = $12
  .label irq_sprite_ptr_6 = $13
  .label irq_raster_next_11 = 9
  .label irq_sprite_ypos_11 = $a
  .label irq_cnt = $c
  .label irq_raster_next_13 = 4
  .label irq_raster_next_20 = 4
  .label irq_cnt_19 = 8
  .label irq_cnt_23 = $11
  .label irq_cnt_24 = $14
  .label irq_sprite_ypos_26 = $15
//SEG2 @begin
bbegin:
  jmp b6
//SEG3 @6
b6:
//SEG4 [1] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  lda #IRQ_RASTER_FIRST
  sta irq_raster_next
//SEG5 [2] (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
  lda #$32
  sta irq_sprite_ypos
//SEG6 [3] phi from @6 to toSpritePtr1 [phi:@6->toSpritePtr1]
toSpritePtr1_from_b6:
  jmp toSpritePtr1
//SEG7 toSpritePtr1
toSpritePtr1:
  jmp b9
//SEG8 @9
b9:
//SEG9 [4] (byte) irq_sprite_ptr#2 ← (const byte) toSpritePtr1_return#0 -- vbuz1=vbuc1 
  lda #toSpritePtr1_return
  sta irq_sprite_ptr
//SEG10 [5] (byte) irq_cnt#19 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_cnt_19
  jmp b8
//SEG11 @8
b8:
//SEG12 kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000)) 	.for(var sy=0;sy<10;sy++) { 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 		    	.for (var c=0; c<3; c++) {	    			 	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
//SEG13 [7] call main 
//SEG14 [9] phi from @8 to main [phi:@8->main]
main_from_b8:
  jsr main
//SEG15 [8] phi from @8 to @end [phi:@8->@end]
bend_from_b8:
  jmp bend
//SEG16 @end
bend:
//SEG17 main
main: {
  //SEG18 [10] call init_sprites 
  //SEG19 [27] phi from main to init_sprites [phi:main->init_sprites]
  init_sprites_from_main:
    jsr init_sprites
  //SEG20 [11] phi from main to main::@7 [phi:main->main::@7]
  b7_from_main:
    jmp b7
  //SEG21 main::@7
  b7:
  //SEG22 [12] call init_irq 
    jsr init_irq
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [13] *((const byte*) PLAYFIELD_SCREEN#0) ← ++ *((const byte*) PLAYFIELD_SCREEN#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc PLAYFIELD_SCREEN
    jmp b2
}
//SEG25 init_irq
init_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG26 [14] (byte) irq_raster_next#11 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next_11
  //SEG27 [15] (byte) irq_sprite_ypos#11 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos_11
  //SEG28 [16] phi from init_irq to init_irq::toSpritePtr2 [phi:init_irq->init_irq::toSpritePtr2]
  toSpritePtr2_from_init_irq:
    jmp toSpritePtr2
  //SEG29 init_irq::toSpritePtr2
  toSpritePtr2:
    jmp b1
  //SEG30 init_irq::@1
  b1:
  //SEG31 [17] (byte) irq_sprite_ptr#3 ← (const byte) init_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr_3
  //SEG32 [18] (byte) irq_cnt#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG33 asm { sei  }
    sei
  //SEG34 [20] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG35 [21] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda VIC_CONTROL
    and #$7f
    sta VIC_CONTROL
  //SEG36 [22] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
  //SEG37 [23] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG38 [24] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
  //SEG39 asm { cli  }
    cli
    jmp breturn
  //SEG40 init_irq::@return
  breturn:
  //SEG41 [26] return 
    rts
}
//SEG42 init_sprites
init_sprites: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>PLAYFIELD_SCREEN)>>6
    .const toD0181_return = (>(PLAYFIELD_SCREEN&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .label s2 = $d
    .label xpos = 3
    .label s = 2
    jmp vicSelectGfxBank1
  //SEG43 init_sprites::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG44 [28] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG45 [29] phi from init_sprites::vicSelectGfxBank1 to init_sprites::vicSelectGfxBank1_toDd001 [phi:init_sprites::vicSelectGfxBank1->init_sprites::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG46 init_sprites::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG47 init_sprites::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG48 [30] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG49 [31] phi from init_sprites::vicSelectGfxBank1_@1 to init_sprites::toD0181 [phi:init_sprites::vicSelectGfxBank1_@1->init_sprites::toD0181]
  toD0181_from_vicSelectGfxBank1_b1:
    jmp toD0181
  //SEG50 init_sprites::toD0181
  toD0181:
    jmp b4
  //SEG51 init_sprites::@4
  b4:
  //SEG52 [32] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG53 [33] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
  //SEG54 [34] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG55 [35] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
  //SEG56 [36] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
  //SEG57 [37] phi from init_sprites::@4 to init_sprites::@1 [phi:init_sprites::@4->init_sprites::@1]
  b1_from_b4:
  //SEG58 [37] phi (byte) init_sprites::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8 [phi:init_sprites::@4->init_sprites::@1#0] -- vbuz1=vbuc1 
    lda #$18+$e*8
    sta xpos
  //SEG59 [37] phi (byte) init_sprites::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init_sprites::@4->init_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
    jmp b1
  //SEG60 [37] phi from init_sprites::@1 to init_sprites::@1 [phi:init_sprites::@1->init_sprites::@1]
  b1_from_b1:
  //SEG61 [37] phi (byte) init_sprites::xpos#2 = (byte) init_sprites::xpos#1 [phi:init_sprites::@1->init_sprites::@1#0] -- register_copy 
  //SEG62 [37] phi (byte) init_sprites::s#2 = (byte) init_sprites::s#1 [phi:init_sprites::@1->init_sprites::@1#1] -- register_copy 
    jmp b1
  //SEG63 init_sprites::@1
  b1:
  //SEG64 [38] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda s
    asl
    sta s2
  //SEG65 [39] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda xpos
    ldy s2
    sta SPRITES_XPOS,y
  //SEG66 [40] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy s
    lda #BLACK
    sta SPRITES_COLS,y
  //SEG67 [41] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc xpos
    sta xpos
  //SEG68 [42] (byte) init_sprites::s#1 ← ++ (byte) init_sprites::s#2 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG69 [43] if((byte) init_sprites::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto init_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda s
    cmp #4
    bne b1_from_b1
    jmp breturn
  //SEG70 init_sprites::@return
  breturn:
  //SEG71 [44] return 
    rts
}
//SEG72 irq
irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
    .label ptr = $e
    .label ptr_1 = $f
    .label ptr_2 = $10
  //SEG73 entry interrupt(KERNEL_MIN)
  //SEG74 [45] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BORDERCOL
  //SEG75 [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS
  //SEG76 [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+2
  //SEG77 [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+4
  //SEG78 [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+6
    jmp b1
  //SEG79 irq::@1
  b1:
  //SEG80 [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1 -- _deref_pbuc1_neq_vbuz1_then_la1 
    lda RASTER
    cmp irq_sprite_ypos
    bne b1
    jmp b4
  //SEG81 irq::@4
  b4:
  //SEG82 [51] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#2 -- vbuz1=vbuz2 
    lda irq_sprite_ptr
    sta ptr
  //SEG83 [52] *((const byte*) PLAYFIELD_SPRITE_PTRS#0) ← (byte) irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda ptr
    sta PLAYFIELD_SPRITE_PTRS
  //SEG84 [53] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy ptr
    iny
    sty ptr_1
  //SEG85 [54] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda ptr_1
    sta PLAYFIELD_SPRITE_PTRS+1
  //SEG86 [55] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda ptr_1
    sta PLAYFIELD_SPRITE_PTRS+2
  //SEG87 [56] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1 -- vbuz1=_inc_vbuz2 
    ldy ptr_1
    iny
    sty ptr_2
  //SEG88 [57] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2 -- _deref_pbuc1=vbuz1 
    lda ptr_2
    sta PLAYFIELD_SPRITE_PTRS+3
  //SEG89 [58] (byte) irq_cnt#23 ← ++ (byte) irq_cnt#19 -- vbuz1=_inc_vbuz2 
    ldy irq_cnt_19
    iny
    sty irq_cnt_23
  //SEG90 [59] if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda irq_cnt_23
    cmp #$a
    beq b2
    jmp b5
  //SEG91 irq::@5
  b5:
  //SEG92 [60] (byte) irq_raster_next#6 ← (byte) irq_raster_next#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz2_plus_vbuc1 
    lda #$15
    clc
    adc irq_raster_next
    sta irq_raster_next_6
  //SEG93 [61] (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz2_plus_vbuc1 
    lda #$15
    clc
    adc irq_sprite_ypos
    sta irq_sprite_ypos_6
  //SEG94 [62] (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_plus_vbuc1 
    lda #3
    clc
    adc irq_sprite_ptr
    sta irq_sprite_ptr_6
  //SEG95 [63] phi from irq::@5 irq::@7 to irq::@3 [phi:irq::@5/irq::@7->irq::@3]
  b3_from_b5:
  b3_from_b7:
  //SEG96 [63] phi (byte) irq_raster_next#13 = (byte) irq_raster_next#6 [phi:irq::@5/irq::@7->irq::@3#0] -- register_copy 
    jmp b3
  //SEG97 irq::@3
  b3:
  //SEG98 [64] *((const byte*) RASTER#0) ← (byte) irq_raster_next#13 -- _deref_pbuc1=vbuz1 
    lda irq_raster_next_13
    sta RASTER
  //SEG99 [65] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG100 [66] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp breturn
  //SEG101 irq::@return
  breturn:
  //SEG102 [67] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
  //SEG103 irq::@2
  b2:
  //SEG104 [68] (byte) irq_cnt#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt_24
  //SEG105 [69] (byte) irq_raster_next#20 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next_20
  //SEG106 [70] (byte) irq_sprite_ypos#26 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos_26
  //SEG107 [71] phi from irq::@2 to irq::toSpritePtr2 [phi:irq::@2->irq::toSpritePtr2]
  toSpritePtr2_from_b2:
    jmp toSpritePtr2
  //SEG108 irq::toSpritePtr2
  toSpritePtr2:
    jmp b7
  //SEG109 irq::@7
  b7:
  //SEG110 [72] (byte) irq_sprite_ptr#5 ← (const byte) irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr_5
    jmp b3_from_b7
}
.pc = PLAYFIELD_SPRITES "Inline"
  .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {	    			
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( ) always clobbers reg byte a 
Statement [2] (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ ] ( ) always clobbers reg byte a 
Statement [4] (byte) irq_sprite_ptr#2 ← (const byte) toSpritePtr1_return#0 [ ] ( ) always clobbers reg byte a 
Statement [5] (byte) irq_cnt#19 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [14] (byte) irq_raster_next#11 ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [15] (byte) irq_sprite_ypos#11 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [17] (byte) irq_sprite_ptr#3 ← (const byte) init_irq::toSpritePtr2_return#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [18] (byte) irq_cnt#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [24] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [30] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [32] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [34] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [35] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [36] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [38] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init_sprites::s#2 init_sprites::xpos#2 init_sprites::s2#0 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#2 init_sprites::s2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ init_sprites::s#2 init_sprites::s#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ]
Statement [39] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2 [ init_sprites::s#2 init_sprites::xpos#2 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#2 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0 [ init_sprites::s#2 init_sprites::xpos#2 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#2 ] ) always clobbers reg byte a 
Statement [41] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init_sprites::s#2 init_sprites::xpos#1 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#1 ] ) always clobbers reg byte a 
Statement [45] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [58] (byte) irq_cnt#23 ← ++ (byte) irq_cnt#19 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#23 ] ( ) always clobbers reg byte y 
Statement [59] if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] ( ) always clobbers reg byte a 
Statement [60] (byte) irq_raster_next#6 ← (byte) irq_raster_next#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ypos#2 irq_sprite_ptr#2 irq_raster_next#6 ] ( ) always clobbers reg byte a 
Statement [61] (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ptr#2 irq_raster_next#6 ] ( ) always clobbers reg byte a 
Statement [62] (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ irq_raster_next#6 ] ( ) always clobbers reg byte a 
Statement [64] *((const byte*) RASTER#0) ← (byte) irq_raster_next#13 [ ] ( ) always clobbers reg byte a 
Statement [65] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( ) always clobbers reg byte a 
Statement [66] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( ) always clobbers reg byte a 
Statement [68] (byte) irq_cnt#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [69] (byte) irq_raster_next#20 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_raster_next#20 ] ( ) always clobbers reg byte a 
Statement [70] (byte) irq_sprite_ypos#26 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ irq_raster_next#20 ] ( ) always clobbers reg byte a 
Statement [72] (byte) irq_sprite_ptr#5 ← (const byte) irq::toSpritePtr2_return#0 [ irq_raster_next#20 ] ( ) always clobbers reg byte a 
Statement [1] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( ) always clobbers reg byte a 
Statement [2] (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ ] ( ) always clobbers reg byte a 
Statement [4] (byte) irq_sprite_ptr#2 ← (const byte) toSpritePtr1_return#0 [ ] ( ) always clobbers reg byte a 
Statement [5] (byte) irq_cnt#19 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [14] (byte) irq_raster_next#11 ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [15] (byte) irq_sprite_ypos#11 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [17] (byte) irq_sprite_ptr#3 ← (const byte) init_irq::toSpritePtr2_return#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [18] (byte) irq_cnt#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [24] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() [ ] ( main:7::init_irq:12 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [30] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [32] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [34] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [35] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [36] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:7::init_sprites:10 [ ] ) always clobbers reg byte a 
Statement [38] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init_sprites::s#2 init_sprites::xpos#2 init_sprites::s2#0 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#2 init_sprites::s2#0 ] ) always clobbers reg byte a 
Statement [39] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2 [ init_sprites::s#2 init_sprites::xpos#2 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#2 ] ) always clobbers reg byte a 
Statement [40] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0 [ init_sprites::s#2 init_sprites::xpos#2 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#2 ] ) always clobbers reg byte a 
Statement [41] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ init_sprites::s#2 init_sprites::xpos#1 ] ( main:7::init_sprites:10 [ init_sprites::s#2 init_sprites::xpos#1 ] ) always clobbers reg byte a 
Statement [45] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#19 ] ( ) always clobbers reg byte a 
Statement [58] (byte) irq_cnt#23 ← ++ (byte) irq_cnt#19 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 irq_cnt#23 ] ( ) always clobbers reg byte y 
Statement [59] if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2 [ irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] ( ) always clobbers reg byte a 
Statement [60] (byte) irq_raster_next#6 ← (byte) irq_raster_next#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ypos#2 irq_sprite_ptr#2 irq_raster_next#6 ] ( ) always clobbers reg byte a 
Statement [61] (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ptr#2 irq_raster_next#6 ] ( ) always clobbers reg byte a 
Statement [62] (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ irq_raster_next#6 ] ( ) always clobbers reg byte a 
Statement [64] *((const byte*) RASTER#0) ← (byte) irq_raster_next#13 [ ] ( ) always clobbers reg byte a 
Statement [65] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( ) always clobbers reg byte a 
Statement [66] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( ) always clobbers reg byte a 
Statement [68] (byte) irq_cnt#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [69] (byte) irq_raster_next#20 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_raster_next#20 ] ( ) always clobbers reg byte a 
Statement [70] (byte) irq_sprite_ypos#26 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ irq_raster_next#20 ] ( ) always clobbers reg byte a 
Statement [72] (byte) irq_sprite_ptr#5 ← (const byte) irq::toSpritePtr2_return#0 [ irq_raster_next#20 ] ( ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ init_sprites::s#2 init_sprites::s#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ] : zp ZP_BYTE:4 , 
Potential registers zp ZP_BYTE:5 [ irq_raster_next#2 ] : zp ZP_BYTE:5 , 
Potential registers zp ZP_BYTE:6 [ irq_sprite_ypos#2 ] : zp ZP_BYTE:6 , 
Potential registers zp ZP_BYTE:7 [ irq_sprite_ptr#2 ] : zp ZP_BYTE:7 , 
Potential registers zp ZP_BYTE:8 [ irq_cnt#19 ] : zp ZP_BYTE:8 , 
Potential registers zp ZP_BYTE:9 [ irq_raster_next#11 ] : zp ZP_BYTE:9 , 
Potential registers zp ZP_BYTE:10 [ irq_sprite_ypos#11 ] : zp ZP_BYTE:10 , 
Potential registers zp ZP_BYTE:11 [ irq_sprite_ptr#3 ] : zp ZP_BYTE:11 , 
Potential registers zp ZP_BYTE:12 [ irq_cnt#11 ] : zp ZP_BYTE:12 , 
Potential registers zp ZP_BYTE:13 [ init_sprites::s2#0 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ irq::ptr#0 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ irq::ptr#1 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ irq::ptr#2 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ irq_cnt#23 ] : zp ZP_BYTE:17 , 
Potential registers zp ZP_BYTE:18 [ irq_sprite_ypos#6 ] : zp ZP_BYTE:18 , 
Potential registers zp ZP_BYTE:19 [ irq_sprite_ptr#6 ] : zp ZP_BYTE:19 , 
Potential registers zp ZP_BYTE:20 [ irq_cnt#24 ] : zp ZP_BYTE:20 , 
Potential registers zp ZP_BYTE:21 [ irq_sprite_ypos#26 ] : zp ZP_BYTE:21 , 
Potential registers zp ZP_BYTE:22 [ irq_sprite_ptr#5 ] : zp ZP_BYTE:22 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 20: zp ZP_BYTE:9 [ irq_raster_next#11 ] 20: zp ZP_BYTE:10 [ irq_sprite_ypos#11 ] 20: zp ZP_BYTE:11 [ irq_sprite_ptr#3 ] 20: zp ZP_BYTE:12 [ irq_cnt#11 ] 20: zp ZP_BYTE:18 [ irq_sprite_ypos#6 ] 20: zp ZP_BYTE:19 [ irq_sprite_ptr#6 ] 20: zp ZP_BYTE:20 [ irq_cnt#24 ] 20: zp ZP_BYTE:21 [ irq_sprite_ypos#26 ] 20: zp ZP_BYTE:22 [ irq_sprite_ptr#5 ] 8.33: zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ] 4: zp ZP_BYTE:17 [ irq_cnt#23 ] 1.44: zp ZP_BYTE:6 [ irq_sprite_ypos#2 ] 0.35: zp ZP_BYTE:7 [ irq_sprite_ptr#2 ] 0.31: zp ZP_BYTE:8 [ irq_cnt#19 ] 0.27: zp ZP_BYTE:5 [ irq_raster_next#2 ] 
Uplift Scope [init_sprites] 25.3: zp ZP_BYTE:2 [ init_sprites::s#2 init_sprites::s#1 ] 22: zp ZP_BYTE:13 [ init_sprites::s2#0 ] 15.58: zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ] 
Uplift Scope [irq] 4: zp ZP_BYTE:16 [ irq::ptr#2 ] 3: zp ZP_BYTE:14 [ irq::ptr#0 ] 2.67: zp ZP_BYTE:15 [ irq::ptr#1 ] 
Uplift Scope [main] 
Uplift Scope [init_irq] 

Uplifting [] best 1762 combination zp ZP_BYTE:9 [ irq_raster_next#11 ] zp ZP_BYTE:10 [ irq_sprite_ypos#11 ] zp ZP_BYTE:11 [ irq_sprite_ptr#3 ] zp ZP_BYTE:12 [ irq_cnt#11 ] zp ZP_BYTE:18 [ irq_sprite_ypos#6 ] zp ZP_BYTE:19 [ irq_sprite_ptr#6 ] zp ZP_BYTE:20 [ irq_cnt#24 ] zp ZP_BYTE:21 [ irq_sprite_ypos#26 ] zp ZP_BYTE:22 [ irq_sprite_ptr#5 ] zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ] zp ZP_BYTE:17 [ irq_cnt#23 ] zp ZP_BYTE:6 [ irq_sprite_ypos#2 ] zp ZP_BYTE:7 [ irq_sprite_ptr#2 ] zp ZP_BYTE:8 [ irq_cnt#19 ] zp ZP_BYTE:5 [ irq_raster_next#2 ] 
Uplifting [init_sprites] best 1592 combination reg byte x [ init_sprites::s#2 init_sprites::s#1 ] reg byte a [ init_sprites::s2#0 ] zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ] 
Uplifting [irq] best 1565 combination reg byte x [ irq::ptr#2 ] reg byte x [ irq::ptr#0 ] reg byte x [ irq::ptr#1 ] 
Uplifting [main] best 1565 combination 
Uplifting [init_irq] best 1565 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ irq_raster_next#11 ]
Uplifting [] best 1565 combination zp ZP_BYTE:9 [ irq_raster_next#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ irq_sprite_ypos#11 ]
Uplifting [] best 1565 combination zp ZP_BYTE:10 [ irq_sprite_ypos#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ irq_sprite_ptr#3 ]
Uplifting [] best 1565 combination zp ZP_BYTE:11 [ irq_sprite_ptr#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ irq_cnt#11 ]
Uplifting [] best 1565 combination zp ZP_BYTE:12 [ irq_cnt#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ irq_sprite_ypos#6 ]
Uplifting [] best 1565 combination zp ZP_BYTE:18 [ irq_sprite_ypos#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ irq_sprite_ptr#6 ]
Uplifting [] best 1565 combination zp ZP_BYTE:19 [ irq_sprite_ptr#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ irq_cnt#24 ]
Uplifting [] best 1565 combination zp ZP_BYTE:20 [ irq_cnt#24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ irq_sprite_ypos#26 ]
Uplifting [] best 1565 combination zp ZP_BYTE:21 [ irq_sprite_ypos#26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ irq_sprite_ptr#5 ]
Uplifting [] best 1565 combination zp ZP_BYTE:22 [ irq_sprite_ptr#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ]
Uplifting [init_sprites] best 1565 combination zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ]
Uplifting [] best 1565 combination zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ irq_cnt#23 ]
Uplifting [] best 1565 combination zp ZP_BYTE:17 [ irq_cnt#23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ irq_sprite_ypos#2 ]
Uplifting [] best 1565 combination zp ZP_BYTE:6 [ irq_sprite_ypos#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ irq_sprite_ptr#2 ]
Uplifting [] best 1565 combination zp ZP_BYTE:7 [ irq_sprite_ptr#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ irq_cnt#19 ]
Uplifting [] best 1565 combination zp ZP_BYTE:8 [ irq_cnt#19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ irq_raster_next#2 ]
Uplifting [] best 1565 combination zp ZP_BYTE:5 [ irq_raster_next#2 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 ] ] with [ zp ZP_BYTE:5 [ irq_raster_next#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:6 [ irq_sprite_ypos#2 ] ] with [ zp ZP_BYTE:18 [ irq_sprite_ypos#6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:7 [ irq_sprite_ptr#2 ] ] with [ zp ZP_BYTE:19 [ irq_sprite_ptr#6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:8 [ irq_cnt#19 ] ] with [ zp ZP_BYTE:17 [ irq_cnt#23 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 ] ] with [ zp ZP_BYTE:4 [ irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 ] ] with [ zp ZP_BYTE:6 [ irq_sprite_ypos#2 irq_sprite_ypos#6 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 ] ] with [ zp ZP_BYTE:7 [ irq_sprite_ptr#2 irq_sprite_ptr#6 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 ] ] with [ zp ZP_BYTE:8 [ irq_cnt#19 irq_cnt#23 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 ] ] with [ zp ZP_BYTE:9 [ irq_raster_next#11 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 ] ] with [ zp ZP_BYTE:10 [ irq_sprite_ypos#11 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 ] ] with [ zp ZP_BYTE:11 [ irq_sprite_ptr#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 irq_sprite_ptr#3 ] ] with [ zp ZP_BYTE:12 [ irq_cnt#11 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 irq_sprite_ptr#3 irq_cnt#11 ] ] with [ zp ZP_BYTE:20 [ irq_cnt#24 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 irq_sprite_ptr#3 irq_cnt#11 irq_cnt#24 ] ] with [ zp ZP_BYTE:21 [ irq_sprite_ypos#26 ] ]
Coalescing zero page register [ zp ZP_BYTE:3 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 irq_sprite_ptr#3 irq_cnt#11 irq_cnt#24 irq_sprite_ypos#26 ] ] with [ zp ZP_BYTE:22 [ irq_sprite_ptr#5 ] ]
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 irq_sprite_ptr#3 irq_cnt#11 irq_cnt#24 irq_sprite_ypos#26 irq_sprite_ptr#5 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D018 = $d018
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label KERNEL_IRQ = $314
  .const BLACK = 0
  .const DARK_GREY = $b
  .label PLAYFIELD_SPRITES = $2000
  .label PLAYFIELD_CHARSET = $1000
  .label PLAYFIELD_SCREEN = $400
  .const IRQ_RASTER_FIRST = $30
  .label PLAYFIELD_SPRITE_PTRS = PLAYFIELD_SCREEN+SPRITE_PTRS
  .const toSpritePtr1_return = PLAYFIELD_SPRITES>>6
  .label irq_raster_next = 2
  .label irq_sprite_ypos = 2
  .label irq_sprite_ptr = 2
  .label irq_cnt = 2
//SEG2 @begin
bbegin:
  jmp b6
//SEG3 @6
b6:
//SEG4 [1] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  lda #IRQ_RASTER_FIRST
  sta irq_raster_next
//SEG5 [2] (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
  lda #$32
  sta irq_sprite_ypos
//SEG6 [3] phi from @6 to toSpritePtr1 [phi:@6->toSpritePtr1]
toSpritePtr1_from_b6:
  jmp toSpritePtr1
//SEG7 toSpritePtr1
toSpritePtr1:
  jmp b9
//SEG8 @9
b9:
//SEG9 [4] (byte) irq_sprite_ptr#2 ← (const byte) toSpritePtr1_return#0 -- vbuz1=vbuc1 
  lda #toSpritePtr1_return
  sta irq_sprite_ptr
//SEG10 [5] (byte) irq_cnt#19 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_cnt
  jmp b8
//SEG11 @8
b8:
//SEG12 kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000)) 	.for(var sy=0;sy<10;sy++) { 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 		    	.for (var c=0; c<3; c++) {	    			 	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
//SEG13 [7] call main 
//SEG14 [9] phi from @8 to main [phi:@8->main]
main_from_b8:
  jsr main
//SEG15 [8] phi from @8 to @end [phi:@8->@end]
bend_from_b8:
  jmp bend
//SEG16 @end
bend:
//SEG17 main
main: {
  //SEG18 [10] call init_sprites 
  //SEG19 [27] phi from main to init_sprites [phi:main->init_sprites]
  init_sprites_from_main:
    jsr init_sprites
  //SEG20 [11] phi from main to main::@7 [phi:main->main::@7]
  b7_from_main:
    jmp b7
  //SEG21 main::@7
  b7:
  //SEG22 [12] call init_irq 
    jsr init_irq
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [13] *((const byte*) PLAYFIELD_SCREEN#0) ← ++ *((const byte*) PLAYFIELD_SCREEN#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc PLAYFIELD_SCREEN
    jmp b2
}
//SEG25 init_irq
init_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG26 [14] (byte) irq_raster_next#11 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next
  //SEG27 [15] (byte) irq_sprite_ypos#11 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos
  //SEG28 [16] phi from init_irq to init_irq::toSpritePtr2 [phi:init_irq->init_irq::toSpritePtr2]
  toSpritePtr2_from_init_irq:
    jmp toSpritePtr2
  //SEG29 init_irq::toSpritePtr2
  toSpritePtr2:
    jmp b1
  //SEG30 init_irq::@1
  b1:
  //SEG31 [17] (byte) irq_sprite_ptr#3 ← (const byte) init_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr
  //SEG32 [18] (byte) irq_cnt#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG33 asm { sei  }
    sei
  //SEG34 [20] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG35 [21] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda VIC_CONTROL
    and #$7f
    sta VIC_CONTROL
  //SEG36 [22] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
  //SEG37 [23] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG38 [24] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
  //SEG39 asm { cli  }
    cli
    jmp breturn
  //SEG40 init_irq::@return
  breturn:
  //SEG41 [26] return 
    rts
}
//SEG42 init_sprites
init_sprites: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>PLAYFIELD_SCREEN)>>6
    .const toD0181_return = (>(PLAYFIELD_SCREEN&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .label xpos = 2
    jmp vicSelectGfxBank1
  //SEG43 init_sprites::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG44 [28] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG45 [29] phi from init_sprites::vicSelectGfxBank1 to init_sprites::vicSelectGfxBank1_toDd001 [phi:init_sprites::vicSelectGfxBank1->init_sprites::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG46 init_sprites::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG47 init_sprites::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG48 [30] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG49 [31] phi from init_sprites::vicSelectGfxBank1_@1 to init_sprites::toD0181 [phi:init_sprites::vicSelectGfxBank1_@1->init_sprites::toD0181]
  toD0181_from_vicSelectGfxBank1_b1:
    jmp toD0181
  //SEG50 init_sprites::toD0181
  toD0181:
    jmp b4
  //SEG51 init_sprites::@4
  b4:
  //SEG52 [32] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG53 [33] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
  //SEG54 [34] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG55 [35] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
  //SEG56 [36] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
  //SEG57 [37] phi from init_sprites::@4 to init_sprites::@1 [phi:init_sprites::@4->init_sprites::@1]
  b1_from_b4:
  //SEG58 [37] phi (byte) init_sprites::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8 [phi:init_sprites::@4->init_sprites::@1#0] -- vbuz1=vbuc1 
    lda #$18+$e*8
    sta xpos
  //SEG59 [37] phi (byte) init_sprites::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init_sprites::@4->init_sprites::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG60 [37] phi from init_sprites::@1 to init_sprites::@1 [phi:init_sprites::@1->init_sprites::@1]
  b1_from_b1:
  //SEG61 [37] phi (byte) init_sprites::xpos#2 = (byte) init_sprites::xpos#1 [phi:init_sprites::@1->init_sprites::@1#0] -- register_copy 
  //SEG62 [37] phi (byte) init_sprites::s#2 = (byte) init_sprites::s#1 [phi:init_sprites::@1->init_sprites::@1#1] -- register_copy 
    jmp b1
  //SEG63 init_sprites::@1
  b1:
  //SEG64 [38] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG65 [39] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2 -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda xpos
    sta SPRITES_XPOS,y
  //SEG66 [40] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,x
  //SEG67 [41] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc xpos
    sta xpos
  //SEG68 [42] (byte) init_sprites::s#1 ← ++ (byte) init_sprites::s#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG69 [43] if((byte) init_sprites::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto init_sprites::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1_from_b1
    jmp breturn
  //SEG70 init_sprites::@return
  breturn:
  //SEG71 [44] return 
    rts
}
//SEG72 irq
irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG73 entry interrupt(KERNEL_MIN)
  //SEG74 [45] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BORDERCOL
  //SEG75 [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS
  //SEG76 [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+2
  //SEG77 [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+4
  //SEG78 [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+6
    jmp b1
  //SEG79 irq::@1
  b1:
  //SEG80 [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1 -- _deref_pbuc1_neq_vbuz1_then_la1 
    lda RASTER
    cmp irq_sprite_ypos
    bne b1
    jmp b4
  //SEG81 irq::@4
  b4:
  //SEG82 [51] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#2 -- vbuxx=vbuz1 
    ldx irq_sprite_ptr
  //SEG83 [52] *((const byte*) PLAYFIELD_SPRITE_PTRS#0) ← (byte) irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS
  //SEG84 [53] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
  //SEG85 [54] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS+1
  //SEG86 [55] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS+2
  //SEG87 [56] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1 -- vbuxx=_inc_vbuxx 
    inx
  //SEG88 [57] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS+3
  //SEG89 [58] (byte) irq_cnt#23 ← ++ (byte) irq_cnt#19 -- vbuz1=_inc_vbuz1 
    inc irq_cnt
  //SEG90 [59] if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda irq_cnt
    cmp #$a
    beq b2
    jmp b5
  //SEG91 irq::@5
  b5:
  //SEG92 [60] (byte) irq_raster_next#6 ← (byte) irq_raster_next#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_raster_next
    sta irq_raster_next
  //SEG93 [61] (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_sprite_ypos
    sta irq_sprite_ypos
  //SEG94 [62] (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lda #3
    clc
    adc irq_sprite_ptr
    sta irq_sprite_ptr
  //SEG95 [63] phi from irq::@5 irq::@7 to irq::@3 [phi:irq::@5/irq::@7->irq::@3]
  b3_from_b5:
  b3_from_b7:
  //SEG96 [63] phi (byte) irq_raster_next#13 = (byte) irq_raster_next#6 [phi:irq::@5/irq::@7->irq::@3#0] -- register_copy 
    jmp b3
  //SEG97 irq::@3
  b3:
  //SEG98 [64] *((const byte*) RASTER#0) ← (byte) irq_raster_next#13 -- _deref_pbuc1=vbuz1 
    lda irq_raster_next
    sta RASTER
  //SEG99 [65] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG100 [66] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp breturn
  //SEG101 irq::@return
  breturn:
  //SEG102 [67] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
  //SEG103 irq::@2
  b2:
  //SEG104 [68] (byte) irq_cnt#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG105 [69] (byte) irq_raster_next#20 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next
  //SEG106 [70] (byte) irq_sprite_ypos#26 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos
  //SEG107 [71] phi from irq::@2 to irq::toSpritePtr2 [phi:irq::@2->irq::toSpritePtr2]
  toSpritePtr2_from_b2:
    jmp toSpritePtr2
  //SEG108 irq::toSpritePtr2
  toSpritePtr2:
    jmp b7
  //SEG109 irq::@7
  b7:
  //SEG110 [72] (byte) irq_sprite_ptr#5 ← (const byte) irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr
    jmp b3_from_b7
}
.pc = PLAYFIELD_SPRITES "Inline"
  .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {	    			
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b6
Removing instruction jmp toSpritePtr1
Removing instruction jmp b9
Removing instruction jmp b8
Removing instruction jmp bend
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp toSpritePtr2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1_b1
Removing instruction jmp toD0181
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp toSpritePtr2
Removing instruction jmp b7
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda SPRITES_MC
Removing instruction lda SPRITES_EXPAND_Y
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b3_from_b7 with b3
Removing instruction bbegin:
Removing instruction toSpritePtr1_from_b6:
Removing instruction toSpritePtr1:
Removing instruction main_from_b8:
Removing instruction bend_from_b8:
Removing instruction b7_from_main:
Removing instruction toSpritePtr2_from_init_irq:
Removing instruction toSpritePtr2:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_vicSelectGfxBank1_b1:
Removing instruction toD0181:
Removing instruction b1_from_b1:
Removing instruction b3_from_b5:
Removing instruction b3_from_b7:
Removing instruction toSpritePtr2_from_b2:
Removing instruction toSpritePtr2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b6:
Removing instruction b9:
Removing instruction b8:
Removing instruction bend:
Removing instruction init_sprites_from_main:
Removing instruction b7:
Removing instruction b1:
Removing instruction breturn:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_b1:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b7:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @6
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) BLUE
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = ((byte*))(word/dword/signed dword) 56333
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) 56578
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte/signed byte/word/signed word/dword/signed dword) 127
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(const byte*) D018#0 D018 = ((byte*))(word/dword/signed dword) 53272
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte/signed byte/word/signed word/dword/signed dword) 11
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = ((byte*))(word/dword/signed dword) 53274
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) IRQ_RASTER_FIRST
(const byte) IRQ_RASTER_FIRST#0 IRQ_RASTER_FIRST = (byte/signed byte/word/signed word/dword/signed dword) 48
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = ((byte*))(word/dword/signed dword) 53273
(void()**) KERNEL_IRQ
(const void()**) KERNEL_IRQ#0 KERNEL_IRQ = ((void()**))(word/signed word/dword/signed dword) 788
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PLAYFIELD_CHARSET
(const byte*) PLAYFIELD_CHARSET#0 PLAYFIELD_CHARSET = ((byte*))(word/signed word/dword/signed dword) 4096
(byte*) PLAYFIELD_SCREEN
(const byte*) PLAYFIELD_SCREEN#0 PLAYFIELD_SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) PLAYFIELD_SPRITES
(const byte*) PLAYFIELD_SPRITES#0 PLAYFIELD_SPRITES = ((byte*))(word/signed word/dword/signed dword) 8192
(byte*) PLAYFIELD_SPRITE_PTRS
(const byte*) PLAYFIELD_SPRITE_PTRS#0 PLAYFIELD_SPRITE_PTRS = (const byte*) PLAYFIELD_SCREEN#0+(const word) SPRITE_PTRS#0
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte) RED
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) 53269
(byte*) SPRITES_EXPAND_X
(const byte*) SPRITES_EXPAND_X#0 SPRITES_EXPAND_X = ((byte*))(word/dword/signed dword) 53277
(byte*) SPRITES_EXPAND_Y
(const byte*) SPRITES_EXPAND_Y#0 SPRITES_EXPAND_Y = ((byte*))(word/dword/signed dword) 53271
(byte*) SPRITES_MC
(const byte*) SPRITES_MC#0 SPRITES_MC = ((byte*))(word/dword/signed dword) 53276
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) 53249
(word) SPRITE_PTRS
(const word) SPRITE_PTRS#0 SPRITE_PTRS = (word/signed word/dword/signed dword) 1016
(byte) VIC_BMM
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) 53265
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) init_irq()
(label) init_irq::@1
(label) init_irq::@return
(label) init_irq::toSpritePtr2
(word~) init_irq::toSpritePtr2_$0
(word~) init_irq::toSpritePtr2_$1
(byte~) init_irq::toSpritePtr2_$2
(byte) init_irq::toSpritePtr2_return
(const byte) init_irq::toSpritePtr2_return#0 toSpritePtr2_return = ((byte))((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) init_irq::toSpritePtr2_sprite
(void()) init_sprites()
(label) init_sprites::@1
(label) init_sprites::@4
(label) init_sprites::@return
(byte) init_sprites::s
(byte) init_sprites::s#1 reg byte x 16.5
(byte) init_sprites::s#2 reg byte x 8.8
(byte) init_sprites::s2
(byte) init_sprites::s2#0 reg byte a 22.0
(label) init_sprites::toD0181
(word~) init_sprites::toD0181_$0
(word~) init_sprites::toD0181_$1
(word~) init_sprites::toD0181_$2
(byte~) init_sprites::toD0181_$3
(word~) init_sprites::toD0181_$4
(byte~) init_sprites::toD0181_$5
(byte~) init_sprites::toD0181_$6
(byte~) init_sprites::toD0181_$7
(byte~) init_sprites::toD0181_$8
(byte*) init_sprites::toD0181_gfx
(byte) init_sprites::toD0181_return
(const byte) init_sprites::toD0181_return#0 toD0181_return = >((word))(const byte*) PLAYFIELD_SCREEN#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2|>((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
(byte*) init_sprites::toD0181_screen
(label) init_sprites::vicSelectGfxBank1
(byte~) init_sprites::vicSelectGfxBank1_$0
(label) init_sprites::vicSelectGfxBank1_@1
(byte*) init_sprites::vicSelectGfxBank1_gfx
(label) init_sprites::vicSelectGfxBank1_toDd001
(word~) init_sprites::vicSelectGfxBank1_toDd001_$0
(byte~) init_sprites::vicSelectGfxBank1_toDd001_$1
(byte~) init_sprites::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) init_sprites::vicSelectGfxBank1_toDd001_$3
(byte*) init_sprites::vicSelectGfxBank1_toDd001_gfx
(byte) init_sprites::vicSelectGfxBank1_toDd001_return
(const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte/signed byte/word/signed word/dword/signed dword) 3^>((word))(const byte*) PLAYFIELD_SCREEN#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(byte) init_sprites::xpos
(byte) init_sprites::xpos#1 xpos zp ZP_BYTE:2 7.333333333333333
(byte) init_sprites::xpos#2 xpos zp ZP_BYTE:2 8.25
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@1
(label) irq::@2
(label) irq::@3
(label) irq::@4
(label) irq::@5
(label) irq::@7
(label) irq::@return
(byte) irq::ptr
(byte) irq::ptr#0 reg byte x 3.0
(byte) irq::ptr#1 reg byte x 2.6666666666666665
(byte) irq::ptr#2 reg byte x 4.0
(label) irq::toSpritePtr2
(word~) irq::toSpritePtr2_$0
(word~) irq::toSpritePtr2_$1
(byte~) irq::toSpritePtr2_$2
(byte) irq::toSpritePtr2_return
(const byte) irq::toSpritePtr2_return#0 toSpritePtr2_return = ((byte))((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) irq::toSpritePtr2_sprite
(byte) irq_cnt
(byte) irq_cnt#11 irq_cnt zp ZP_BYTE:2 20.0
(byte) irq_cnt#19 irq_cnt zp ZP_BYTE:2 0.3076923076923077
(byte) irq_cnt#23 irq_cnt zp ZP_BYTE:2 4.0
(byte) irq_cnt#24 irq_cnt zp ZP_BYTE:2 20.0
(byte) irq_raster_next
(byte) irq_raster_next#11 irq_raster_next zp ZP_BYTE:2 20.0
(byte) irq_raster_next#13 irq_raster_next zp ZP_BYTE:2 6.0
(byte) irq_raster_next#2 irq_raster_next zp ZP_BYTE:2 0.26666666666666666
(byte) irq_raster_next#20 irq_raster_next zp ZP_BYTE:2 1.0
(byte) irq_raster_next#6 irq_raster_next zp ZP_BYTE:2 1.3333333333333333
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#2 irq_sprite_ptr zp ZP_BYTE:2 0.3529411764705882
(byte) irq_sprite_ptr#3 irq_sprite_ptr zp ZP_BYTE:2 20.0
(byte) irq_sprite_ptr#5 irq_sprite_ptr zp ZP_BYTE:2 20.0
(byte) irq_sprite_ptr#6 irq_sprite_ptr zp ZP_BYTE:2 20.0
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#11 irq_sprite_ypos zp ZP_BYTE:2 20.0
(byte) irq_sprite_ypos#2 irq_sprite_ypos zp ZP_BYTE:2 1.4375
(byte) irq_sprite_ypos#26 irq_sprite_ypos zp ZP_BYTE:2 20.0
(byte) irq_sprite_ypos#6 irq_sprite_ypos zp ZP_BYTE:2 20.0
(void()) main()
(label) main::@2
(label) main::@7
(label) toSpritePtr1
(word~) toSpritePtr1_$0
(word~) toSpritePtr1_$1
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_return
(const byte) toSpritePtr1_return#0 toSpritePtr1_return = ((byte))((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) toSpritePtr1_sprite

reg byte x [ init_sprites::s#2 init_sprites::s#1 ]
zp ZP_BYTE:2 [ init_sprites::xpos#2 init_sprites::xpos#1 irq_raster_next#13 irq_raster_next#6 irq_raster_next#20 irq_raster_next#2 irq_sprite_ypos#2 irq_sprite_ypos#6 irq_sprite_ptr#2 irq_sprite_ptr#6 irq_cnt#19 irq_cnt#23 irq_raster_next#11 irq_sprite_ypos#11 irq_sprite_ptr#3 irq_cnt#11 irq_cnt#24 irq_sprite_ypos#26 irq_sprite_ptr#5 ]
reg byte a [ init_sprites::s2#0 ]
reg byte x [ irq::ptr#0 ]
reg byte x [ irq::ptr#1 ]
reg byte x [ irq::ptr#2 ]


FINAL ASSEMBLER
Score: 1182

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D018 = $d018
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label KERNEL_IRQ = $314
  .const BLACK = 0
  .const DARK_GREY = $b
  .label PLAYFIELD_SPRITES = $2000
  .label PLAYFIELD_CHARSET = $1000
  .label PLAYFIELD_SCREEN = $400
  .const IRQ_RASTER_FIRST = $30
  .label PLAYFIELD_SPRITE_PTRS = PLAYFIELD_SCREEN+SPRITE_PTRS
  .const toSpritePtr1_return = PLAYFIELD_SPRITES>>6
  .label irq_raster_next = 2
  .label irq_sprite_ypos = 2
  .label irq_sprite_ptr = 2
  .label irq_cnt = 2
//SEG2 @begin
//SEG3 @6
//SEG4 [1] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  lda #IRQ_RASTER_FIRST
  sta irq_raster_next
//SEG5 [2] (byte) irq_sprite_ypos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
  lda #$32
  sta irq_sprite_ypos
//SEG6 [3] phi from @6 to toSpritePtr1 [phi:@6->toSpritePtr1]
//SEG7 toSpritePtr1
//SEG8 @9
//SEG9 [4] (byte) irq_sprite_ptr#2 ← (const byte) toSpritePtr1_return#0 -- vbuz1=vbuc1 
  lda #toSpritePtr1_return
  sta irq_sprite_ptr
//SEG10 [5] (byte) irq_cnt#19 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_cnt
//SEG11 @8
//SEG12 kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000)) 	.for(var sy=0;sy<10;sy++) { 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 		    	.for (var c=0; c<3; c++) {	    			 	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
//SEG13 [7] call main 
//SEG14 [9] phi from @8 to main [phi:@8->main]
  jsr main
//SEG15 [8] phi from @8 to @end [phi:@8->@end]
//SEG16 @end
//SEG17 main
main: {
  //SEG18 [10] call init_sprites 
  //SEG19 [27] phi from main to init_sprites [phi:main->init_sprites]
    jsr init_sprites
  //SEG20 [11] phi from main to main::@7 [phi:main->main::@7]
  //SEG21 main::@7
  //SEG22 [12] call init_irq 
    jsr init_irq
  //SEG23 main::@2
  b2:
  //SEG24 [13] *((const byte*) PLAYFIELD_SCREEN#0) ← ++ *((const byte*) PLAYFIELD_SCREEN#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc PLAYFIELD_SCREEN
    jmp b2
}
//SEG25 init_irq
init_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG26 [14] (byte) irq_raster_next#11 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next
  //SEG27 [15] (byte) irq_sprite_ypos#11 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos
  //SEG28 [16] phi from init_irq to init_irq::toSpritePtr2 [phi:init_irq->init_irq::toSpritePtr2]
  //SEG29 init_irq::toSpritePtr2
  //SEG30 init_irq::@1
  //SEG31 [17] (byte) irq_sprite_ptr#3 ← (const byte) init_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr
  //SEG32 [18] (byte) irq_cnt#11 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG33 asm { sei  }
    sei
  //SEG34 [20] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG35 [21] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda VIC_CONTROL
    and #$7f
    sta VIC_CONTROL
  //SEG36 [22] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
  //SEG37 [23] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG38 [24] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
  //SEG39 asm { cli  }
    cli
  //SEG40 init_irq::@return
  //SEG41 [26] return 
    rts
}
//SEG42 init_sprites
init_sprites: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>PLAYFIELD_SCREEN)>>6
    .const toD0181_return = (>(PLAYFIELD_SCREEN&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .label xpos = 2
  //SEG43 init_sprites::vicSelectGfxBank1
  //SEG44 [28] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG45 [29] phi from init_sprites::vicSelectGfxBank1 to init_sprites::vicSelectGfxBank1_toDd001 [phi:init_sprites::vicSelectGfxBank1->init_sprites::vicSelectGfxBank1_toDd001]
  //SEG46 init_sprites::vicSelectGfxBank1_toDd001
  //SEG47 init_sprites::vicSelectGfxBank1_@1
  //SEG48 [30] *((const byte*) CIA2_PORT_A#0) ← (const byte) init_sprites::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG49 [31] phi from init_sprites::vicSelectGfxBank1_@1 to init_sprites::toD0181 [phi:init_sprites::vicSelectGfxBank1_@1->init_sprites::toD0181]
  //SEG50 init_sprites::toD0181
  //SEG51 init_sprites::@4
  //SEG52 [32] *((const byte*) D018#0) ← (const byte) init_sprites::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG53 [33] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
  //SEG54 [34] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG55 [35] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_Y
  //SEG56 [36] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_X
  //SEG57 [37] phi from init_sprites::@4 to init_sprites::@1 [phi:init_sprites::@4->init_sprites::@1]
  //SEG58 [37] phi (byte) init_sprites::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 14*(byte/signed byte/word/signed word/dword/signed dword) 8 [phi:init_sprites::@4->init_sprites::@1#0] -- vbuz1=vbuc1 
    lda #$18+$e*8
    sta xpos
  //SEG59 [37] phi (byte) init_sprites::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init_sprites::@4->init_sprites::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG60 [37] phi from init_sprites::@1 to init_sprites::@1 [phi:init_sprites::@1->init_sprites::@1]
  //SEG61 [37] phi (byte) init_sprites::xpos#2 = (byte) init_sprites::xpos#1 [phi:init_sprites::@1->init_sprites::@1#0] -- register_copy 
  //SEG62 [37] phi (byte) init_sprites::s#2 = (byte) init_sprites::s#1 [phi:init_sprites::@1->init_sprites::@1#1] -- register_copy 
  //SEG63 init_sprites::@1
  b1:
  //SEG64 [38] (byte) init_sprites::s2#0 ← (byte) init_sprites::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG65 [39] *((const byte*) SPRITES_XPOS#0 + (byte) init_sprites::s2#0) ← (byte) init_sprites::xpos#2 -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda xpos
    sta SPRITES_XPOS,y
  //SEG66 [40] *((const byte*) SPRITES_COLS#0 + (byte) init_sprites::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,x
  //SEG67 [41] (byte) init_sprites::xpos#1 ← (byte) init_sprites::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc xpos
    sta xpos
  //SEG68 [42] (byte) init_sprites::s#1 ← ++ (byte) init_sprites::s#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG69 [43] if((byte) init_sprites::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto init_sprites::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1
  //SEG70 init_sprites::@return
  //SEG71 [44] return 
    rts
}
//SEG72 irq
irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG73 entry interrupt(KERNEL_MIN)
  //SEG74 [45] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BORDERCOL
  //SEG75 [46] *((const byte*) SPRITES_YPOS#0) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS
  //SEG76 [47] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+2
  //SEG77 [48] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+4
  //SEG78 [49] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq_sprite_ypos#2 -- _deref_pbuc1=vbuz1 
    lda irq_sprite_ypos
    sta SPRITES_YPOS+6
  //SEG79 irq::@1
  b1:
  //SEG80 [50] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#2) goto irq::@1 -- _deref_pbuc1_neq_vbuz1_then_la1 
    lda RASTER
    cmp irq_sprite_ypos
    bne b1
  //SEG81 irq::@4
  //SEG82 [51] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#2 -- vbuxx=vbuz1 
    ldx irq_sprite_ptr
  //SEG83 [52] *((const byte*) PLAYFIELD_SPRITE_PTRS#0) ← (byte) irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS
  //SEG84 [53] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
  //SEG85 [54] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS+1
  //SEG86 [55] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS+2
  //SEG87 [56] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1 -- vbuxx=_inc_vbuxx 
    inx
  //SEG88 [57] *((const byte*) PLAYFIELD_SPRITE_PTRS#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS+3
  //SEG89 [58] (byte) irq_cnt#23 ← ++ (byte) irq_cnt#19 -- vbuz1=_inc_vbuz1 
    inc irq_cnt
  //SEG90 [59] if((byte) irq_cnt#23==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda irq_cnt
    cmp #$a
    beq b2
  //SEG91 irq::@5
  //SEG92 [60] (byte) irq_raster_next#6 ← (byte) irq_raster_next#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_raster_next
    sta irq_raster_next
  //SEG93 [61] (byte) irq_sprite_ypos#6 ← (byte) irq_sprite_ypos#2 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_sprite_ypos
    sta irq_sprite_ypos
  //SEG94 [62] (byte) irq_sprite_ptr#6 ← (byte) irq_sprite_ptr#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lda #3
    clc
    adc irq_sprite_ptr
    sta irq_sprite_ptr
  //SEG95 [63] phi from irq::@5 irq::@7 to irq::@3 [phi:irq::@5/irq::@7->irq::@3]
  //SEG96 [63] phi (byte) irq_raster_next#13 = (byte) irq_raster_next#6 [phi:irq::@5/irq::@7->irq::@3#0] -- register_copy 
  //SEG97 irq::@3
  b3:
  //SEG98 [64] *((const byte*) RASTER#0) ← (byte) irq_raster_next#13 -- _deref_pbuc1=vbuz1 
    lda irq_raster_next
    sta RASTER
  //SEG99 [65] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG100 [66] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG101 irq::@return
  //SEG102 [67] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
  //SEG103 irq::@2
  b2:
  //SEG104 [68] (byte) irq_cnt#24 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG105 [69] (byte) irq_raster_next#20 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next
  //SEG106 [70] (byte) irq_sprite_ypos#26 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos
  //SEG107 [71] phi from irq::@2 to irq::toSpritePtr2 [phi:irq::@2->irq::toSpritePtr2]
  //SEG108 irq::toSpritePtr2
  //SEG109 irq::@7
  //SEG110 [72] (byte) irq_sprite_ptr#5 ← (const byte) irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr
    jmp b3
}
.pc = PLAYFIELD_SPRITES "Inline"
  .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {	    			
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}


