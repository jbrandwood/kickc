const byte BINARY = 2
const nomodify byte* COLORRAM = (byte*) 55296
const byte DECIMAL = $a
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* DIGITS[]  = "0123456789abcdef"z
const nomodify byte GREEN = 5
const byte HEXADECIMAL = $10
const nomodify byte LIGHT_BLUE = $e
const byte OCTAL = 8
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_BINARY_VALUES[]  = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
const word* RADIX_OCTAL_VALUES[]  = { $8000, $1000, $200, $40, 8 }
const nomodify byte RED = 2
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void __start()
void assert_ptr(void* assert_ptr::expect , void* assert_ptr::actual , byte* assert_ptr::message)
void* assert_ptr::actual
void* assert_ptr::expect
const void* assert_ptr::expect#0 expect = (void*) 0
byte* assert_ptr::message
const byte* assert_ptr::s[$1b]  = "Assert failed. expected:0x"
const byte* assert_ptr::s1[$b]  = " actual:0x"
void assert_uint(word assert_uint::expect , word assert_uint::actual , byte* assert_uint::message)
word assert_uint::actual
word assert_uint::actual#0 actual zp[2]:2 21.299999999999997
word assert_uint::expect
const word assert_uint::expect#0 expect = 8
byte* assert_uint::message
const byte* assert_uint::s[$19]  = "Assert failed. expected:"
const byte* assert_uint::s1[9]  = " actual:"
void clrscr()
byte clrscr::c
byte clrscr::c#1 reg byte y 20002.0
byte clrscr::c#2 reg byte y 12501.25
byte clrscr::l
byte clrscr::l#1 reg byte x 2002.0
byte clrscr::l#2 reg byte x 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:8 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:8 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:4 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:4 1714.7142857142858
void conio_c64_init()
const nomodify byte* conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte x 11.0
byte conio_c64_init::line#2 reg byte x 22.0
byte conio_cursor_x loadstore zp[1]:12 1428573.4285714284
byte conio_cursor_y loadstore zp[1]:13 2.6446282719008267E7
byte* conio_line_color loadstore zp[2]:16 1.857143032773109E7
byte* conio_line_text loadstore zp[2]:14 1.841666840833333E7
byte conio_textcolor loadstore zp[1]:18 8859745.666666668
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 2000002.0
byte cputc::c#2 reg byte a 20002.0
byte cputc::c#3 reg byte a 1.0505002E7
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1000001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:4 500000.5
to_nomodify byte* cputs::s#15 s zp[2]:4 1550002.0
to_nomodify byte* cputs::s#16 s zp[2]:4 101002.0
to_nomodify byte* cputs::s#2 s zp[2]:4 2002.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:23 202.0
byte*~ gotoxy::$6 zp[2]:19 202.0
word~ gotoxy::$7 zp[2]:19 151.5
word~ gotoxy::$8 zp[2]:21 202.0
word~ gotoxy::$9 zp[2]:19 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:19 101.0
byte gotoxy::x
const byte gotoxy::x#2 x = 0
byte gotoxy::y
byte gotoxy::y#2 reg byte x 71.0
byte gotoxy::y#4 reg byte x 67.33333333333333
void main()
const byte* main::message[$a]  = "finding a"
const byte* main::message1[$e]  = "not finding a"
byte* main::ptr
void* main::ptr#0 ptr zp[2]:2 11.0
byte* main::ptr2
void* main::ptr2#0 ptr2 zp[2]:2 1.1
const byte* main::str = "this is a test"
void* memchr(to_nomodify void* memchr::str , byte memchr::c , word memchr::n)
byte memchr::c
byte memchr::c#4 c zp[1]:6 166.83333333333334
word memchr::i
word memchr::i#1 i zp[2]:8 2002.0
word memchr::i#2 i zp[2]:8 750.75
word memchr::n
word memchr::n#3 n zp[2]:4 166.83333333333334
byte* memchr::ptr
byte* memchr::ptr#1 ptr zp[2]:2 1001.0
byte* memchr::ptr#2 ptr zp[2]:2 1001.0
void* memchr::return
void* memchr::return#2 return zp[2]:2 30.75
void* memchr::return#3 return zp[2]:2 22.0
void* memchr::return#4 return zp[2]:2 22.0
void* memchr::return#8 return zp[2]:2 202.0
to_nomodify void* memchr::str
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:10
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:10 1.000000000001E12
byte* memcpy::dst#2 dst zp[2]:10 1.0033333333346667E12
byte* memcpy::dst#4 dst zp[2]:10 2.0000000002E10
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:8
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:8 2.000000000002E12
byte* memcpy::src#2 src zp[2]:8 1.00250000000125E12
byte* memcpy::src#4 src zp[2]:8 1.0000000001E10
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:27 1.2625000000025E11
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#1 reg byte x 2.000000002E9
byte memset::c#4 reg byte x 1.430000000002857E11
byte* memset::dst
byte* memset::dst#1 dst zp[2]:25 2.000000000002E12
byte* memset::dst#2 dst zp[2]:25 1.3366666666683335E12
byte* memset::dst#4 dst zp[2]:25 2.0000000002E10
byte* memset::end
byte* memset::end#0 end zp[2]:27 1.683333333336667E11
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:25
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
const byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::padding
byte* printf_string::str
byte* printf_string::str#10 str zp[2]:4 1001.0
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_radix#4 reg byte x 333.6666666666667
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#1 uvalue zp[2]:4 202.0
word printf_uint::uvalue#4 uvalue zp[2]:4 601.5
word printf_uint::uvalue#8 uvalue zp[2]:4 202.0
const byte* s2[3]  = ". "
const byte* s3[2]  = "
"
const byte* s4[5]  = "ok! "
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::color#4 reg byte a 1001.0
byte textcolor::old
byte textcolor::return
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 200002.0
byte~ utoa::$11 reg byte a 20002.0
byte~ utoa::$4 reg byte a 200002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:10 28000.4
byte* utoa::buffer#14 buffer zp[2]:10 150001.5
byte* utoa::buffer#3 buffer zp[2]:10 20002.0
byte* utoa::buffer#4 buffer zp[2]:10 200002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:7 200002.0
byte utoa::digit#2 digit zp[1]:7 26666.933333333334
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:25 60000.600000000006
word* utoa::digit_values
word* utoa::digit_values#8 digit_values zp[2]:8 5882.411764705882
byte utoa::max_digits
byte utoa::max_digits#7 max_digits zp[1]:6 5882.411764705882
byte utoa::radix
byte utoa::radix#0 reg byte x 10251.25
byte utoa::started
byte utoa::started#2 reg byte x 42857.57142857143
byte utoa::started#4 reg byte x 100001.0
word utoa::value
word utoa::value#0 value zp[2]:4 100001.0
word utoa::value#1 value zp[2]:4 1571.7142857142858
word utoa::value#2 value zp[2]:4 51250.625
word utoa::value#6 value zp[2]:4 150001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:10 137500.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.00000001E8
byte utoa_append::digit#2 reg byte x 1.005000015E8
word utoa_append::return
word utoa_append::return#0 return zp[2]:4 200002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:25 3.33500005E7
word utoa_append::value
word utoa_append::value#0 value zp[2]:4 366667.3333333334
word utoa_append::value#1 value zp[2]:4 2.00000002E8
word utoa_append::value#2 value zp[2]:4 5.018333416666667E7

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[2]:2 [ memchr::ptr#2 memchr::ptr#1 memchr::return#2 memchr::return#8 memchr::return#3 main::ptr#0 memchr::return#4 main::ptr2#0 assert_uint::actual#0 ]
reg byte a [ textcolor::color#4 ]
zp[2]:4 [ printf_uint::uvalue#4 printf_uint::uvalue#8 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 cputs::s#15 cputs::s#16 cputs::s#2 cputs::s#0 printf_string::str#10 memchr::n#3 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte x [ printf_uint::format_radix#4 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
zp[1]:6 [ utoa::max_digits#7 memchr::c#4 ]
zp[1]:7 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:8 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 utoa::digit_values#8 memchr::i#2 memchr::i#1 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[2]:10 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
reg byte x [ memset::c#4 memset::c#1 ]
zp[1]:12 [ conio_cursor_x ]
zp[1]:13 [ conio_cursor_y ]
zp[2]:14 [ conio_line_text ]
zp[2]:16 [ conio_line_color ]
zp[1]:18 [ conio_textcolor ]
zp[2]:19 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:21 [ gotoxy::$8 ]
zp[2]:23 [ gotoxy::$5 ]
reg byte a [ cputs::c#1 ]
reg byte x [ utoa::radix#0 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ utoa::$4 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:25 [ utoa::digit_value#0 utoa_append::sub#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[2]:27 [ memset::end#0 memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
