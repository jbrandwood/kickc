@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::y#2 ← phi( main/(const byte) main::y0 main::@2/(byte) main::y#4 )
  [5] (byte) main::e#3 ← phi( main/(const byte) main::y1/(byte) 2 main::@2/(byte) main::e#5 )
  [5] (byte) main::x#2 ← phi( main/(const byte) main::x0 main::@2/(byte) main::x#1 )
  [5] (word) main::idx#3 ← phi( main/(byte) 0 main::@2/(word) main::idx#5 )
  [6] (byte*~) main::$15 ← (const byte*) main::screen + (word) main::idx#3
  [7] *((byte*~) main::$15) ← (const byte) main::STAR
  [8] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  [9] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  [10] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::y1
  [11] if((const byte) main::x1>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  [13] (word) main::idx#2 ← (word) main::idx#1 + (byte) $28
  [14] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::x1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [15] (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  [15] (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  [15] (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  [16] if((byte) main::x#1<(const byte) main::x1+(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [17] return 
  to:@return
