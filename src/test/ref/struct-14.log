
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
  (byte*~) main::$4 ← (byte*)(const struct Point*) points + (number~) main::$0
  *((byte*~) main::$4 + (const byte) OFFSET_STRUCT_POINT_X) ← (number) 2
  (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
  (byte*~) main::$5 ← (byte*)(const struct Point*) points + (number~) main::$1
  *((byte*~) main::$5 + (const byte) OFFSET_STRUCT_POINT_Y) ← (number) 3
  (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
  (byte*~) main::$6 ← (byte*)(const struct Point*) points + (number~) main::$2
  *((const nomodify byte*) SCREEN + (number) 0) ← *((byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X)
  (number~) main::$3 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
  (byte*~) main::$7 ← (byte*)(const struct Point*) points + (number~) main::$3
  *((const nomodify byte*) SCREEN + (number) 1) ← *((byte*~) main::$7 + (const byte) OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(number~) main::$0
(number~) main::$1
(number~) main::$2
(number~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte*~) main::$6
(byte*~) main::$7
(label) main::@return
(const struct Point*) points[(number) 1]  = { fill( 1, 0) }

Adding number conversion cast (unumber) 0 in (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 2 in *((byte*~) main::$4 + (const byte) OFFSET_STRUCT_POINT_X) ← (number) 2
Adding number conversion cast (unumber) 0 in (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 3 in *((byte*~) main::$5 + (const byte) OFFSET_STRUCT_POINT_Y) ← (number) 3
Adding number conversion cast (unumber) 0 in (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← *((byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X)
Adding number conversion cast (unumber) 0 in (number~) main::$3 ← (number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← *((byte*~) main::$7 + (const byte) OFFSET_STRUCT_POINT_Y)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*~) main::$4 + (const byte) OFFSET_STRUCT_POINT_X) ← (unumber)(number) 2
Inlining cast *((byte*~) main::$5 + (const byte) OFFSET_STRUCT_POINT_Y) ← (unumber)(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Inferred type updated to byte in (unumber~) main::$3 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Constant right-side identified [0] (byte~) main::$0 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Constant right-side identified [3] (byte~) main::$1 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Constant right-side identified [6] (byte~) main::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Constant right-side identified [9] (byte~) main::$3 ← (byte) 0 * (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = 0*SIZEOF_STRUCT_POINT
Constant (const byte) main::$1 = 0*SIZEOF_STRUCT_POINT
Constant (const byte) main::$2 = 0*SIZEOF_STRUCT_POINT
Constant (const byte) main::$3 = 0*SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_POINT in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_POINT in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_POINT in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_POINT in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)points in [1] (byte*~) main::$4 ← (byte*)(const struct Point*) points + (const byte) main::$0
Simplifying expression containing zero main::$4 in [2] *((byte*~) main::$4 + (const byte) OFFSET_STRUCT_POINT_X) ← (byte) 2
Simplifying expression containing zero (byte*)points in [4] (byte*~) main::$5 ← (byte*)(const struct Point*) points + (const byte) main::$1
Simplifying expression containing zero (byte*)points in [7] (byte*~) main::$6 ← (byte*)(const struct Point*) points + (const byte) main::$2
Simplifying expression containing zero main::$6 in [8] *((const nomodify byte*) SCREEN + (byte) 0) ← *((byte*~) main::$6 + (const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero SCREEN in [8] *((const nomodify byte*) SCREEN + (byte) 0) ← *((byte*~) main::$6)
Simplifying expression containing zero (byte*)points in [10] (byte*~) main::$7 ← (byte*)(const struct Point*) points + (const byte) main::$3
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$0
Eliminating unused constant (const byte) main::$1
Eliminating unused constant (const byte) main::$2
Eliminating unused constant (const byte) main::$3
Eliminating unused constant (const byte) SIZEOF_STRUCT_POINT
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant (const byte*) main::$4 = (byte*)points
Constant (const byte*) main::$5 = (byte*)points
Constant (const byte*) main::$6 = (byte*)points
Constant (const byte*) main::$7 = (byte*)points
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$5 = (byte*)(const struct Point*) points
Constant inlined main::$6 = (byte*)(const struct Point*) points
Constant inlined main::$4 = (byte*)(const struct Point*) points
Constant inlined main::$7 = (byte*)(const struct Point*) points
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((byte*)(const struct Point*) points) ← (byte) 2
  [1] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3
  [2] *((const nomodify byte*) SCREEN) ← *((byte*)(const struct Point*) points)
  [3] *((const nomodify byte*) SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct with C-Standard behavior - declaration, instantiation and usage
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    // [0] *((byte*)(const struct Point*) points) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta points
    // [1] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta points+OFFSET_STRUCT_POINT_Y
    // [2] *((const nomodify byte*) SCREEN) ← *((byte*)(const struct Point*) points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // [3] *((const nomodify byte*) SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data
  points: .fill 2*1, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*)(const struct Point*) points) ← (byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) SCREEN) ← *((byte*)(const struct Point*) points) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 37 combination 
Uplifting [main] best 37 combination 
Uplifting [] best 37 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - declaration, instantiation and usage
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    // [0] *((byte*)(const struct Point*) points) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta points
    // [1] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta points+OFFSET_STRUCT_POINT_Y
    // [2] *((const nomodify byte*) SCREEN) ← *((byte*)(const struct Point*) points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // [3] *((const nomodify byte*) SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data
  points: .fill 2*1, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@return
(const struct Point*) points[(number) 1]  = { fill( 1, 0) }



FINAL ASSEMBLER
Score: 34

  // File Comments
// Minimal struct with C-Standard behavior - declaration, instantiation and usage
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    // points[0].x = 2
    // [0] *((byte*)(const struct Point*) points) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta points
    // points[0].y = 3
    // [1] *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta points+OFFSET_STRUCT_POINT_Y
    // SCREEN[0] = points[0].x
    // [2] *((const nomodify byte*) SCREEN) ← *((byte*)(const struct Point*) points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // SCREEN[1] = points[0].y
    // [3] *((const nomodify byte*) SCREEN+(byte) 1) ← *((byte*)(const struct Point*) points+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data
  points: .fill 2*1, 0

