
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) $64
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  call nest 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (bool~) main::$1 ← (byte) main::i#1 > (number) 0
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) nest()
nest: scope:[nest]  from main::@1
  (byte) nest::j#0 ← (byte) $64
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((const byte*) SCREEN) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (bool~) nest::$0 ← (byte) nest::j#1 > (number) 0
  if((bool~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(void()) nest()
(bool~) nest::$0
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#0
(byte) nest::j#1
(byte) nest::j#2

Adding number conversion cast (unumber) 0 in (bool~) main::$1 ← (byte) main::i#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) nest::$0 ← (byte) nest::j#1 > (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [5] if((byte) main::i#1>(byte) 0) goto main::@1
Simple Condition (bool~) nest::$0 [12] if((byte) nest::j#1>(byte) 0) goto nest::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = $64
Constant (const byte) nest::j#0 = $64
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) nest::j#0
Constant inlined main::i#0 = (byte) $64
Constant inlined nest::j#0 = (byte) $64
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Added new block during phi lifting nest::@2(between nest::@1 and nest::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of nest
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to nest:7 

Created 2 initial phi equivalence classes
Coalesced [11] main::i#4 ← main::i#1
Coalesced [18] nest::j#3 ← nest::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) nest::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of nest

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) $64 main::@2/(byte) main::i#1 )
  [6] call nest 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] (byte) main::i#1 ← -- (byte) main::i#2
  [8] if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return

(void()) nest()
nest: scope:[nest]  from main::@1
  [10] phi()
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  [11] (byte) nest::j#2 ← phi( nest/(byte) $64 nest::@1/(byte) nest::j#1 )
  [12] *((const byte*) SCREEN) ← (byte) nest::j#2
  [13] (byte) nest::j#1 ← -- (byte) nest::j#2
  [14] if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 101.0
(void()) nest()
(byte) nest::j
(byte) nest::j#1 150001.5
(byte) nest::j#2 150001.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ nest::j#2 nest::j#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) $64 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #$64
    sta.z i
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] call nest 
    // [10] phi from main::@1 to nest [phi:main::@1->nest]
  nest_from___b1:
    jsr nest
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte) main::i#1 ← -- (byte) main::i#2 -- vbuz1=_dec_vbuz1 
    dec.z i
    // [8] if((byte) main::i#1>(byte) 0) goto main::@1 -- vbuz1_gt_0_then_la1 
    lda.z i
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // nest
nest: {
    .label j = 3
    // [11] phi from nest to nest::@1 [phi:nest->nest::@1]
  __b1_from_nest:
    // [11] phi (byte) nest::j#2 = (byte) $64 [phi:nest->nest::@1#0] -- vbuz1=vbuc1 
    lda #$64
    sta.z j
    jmp __b1
    // [11] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  __b1_from___b1:
    // [11] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
    jmp __b1
    // nest::@1
  __b1:
    // [12] *((const byte*) SCREEN) ← (byte) nest::j#2 -- _deref_pbuc1=vbuz1 
    lda.z j
    sta SCREEN
    // [13] (byte) nest::j#1 ← -- (byte) nest::j#2 -- vbuz1=_dec_vbuz1 
    dec.z j
    // [14] if((byte) nest::j#1>(byte) 0) goto nest::@1 -- vbuz1_gt_0_then_la1 
    lda.z j
    bne __b1_from___b1
    jmp __breturn
    // nest::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ nest::j#2 nest::j#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [nest] 300,003: zp[1]:3 [ nest::j#2 nest::j#1 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [nest] best 2428 combination reg byte x [ nest::j#2 nest::j#1 ] 
Uplifting [main] best 2358 combination reg byte y [ main::i#2 main::i#1 ] 
Uplifting [] best 2358 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) $64 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #$64
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] call nest 
    // [10] phi from main::@1 to nest [phi:main::@1->nest]
  nest_from___b1:
    jsr nest
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte) main::i#1 ← -- (byte) main::i#2 -- vbuyy=_dec_vbuyy 
    dey
    // [8] if((byte) main::i#1>(byte) 0) goto main::@1 -- vbuyy_gt_0_then_la1 
    cpy #0
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // nest
nest: {
    // [11] phi from nest to nest::@1 [phi:nest->nest::@1]
  __b1_from_nest:
    // [11] phi (byte) nest::j#2 = (byte) $64 [phi:nest->nest::@1#0] -- vbuxx=vbuc1 
    ldx #$64
    jmp __b1
    // [11] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  __b1_from___b1:
    // [11] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
    jmp __b1
    // nest::@1
  __b1:
    // [12] *((const byte*) SCREEN) ← (byte) nest::j#2 -- _deref_pbuc1=vbuxx 
    stx SCREEN
    // [13] (byte) nest::j#1 ← -- (byte) nest::j#2 -- vbuxx=_dec_vbuxx 
    dex
    // [14] if((byte) nest::j#1>(byte) 0) goto nest::@1 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne __b1_from___b1
    jmp __breturn
    // nest::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Removing instruction nest_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_nest:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 151.5
(byte) main::i#2 reg byte y 101.0
(void()) nest()
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#1 reg byte x 150001.5
(byte) nest::j#2 reg byte x 150001.5

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ nest::j#2 nest::j#1 ]


FINAL ASSEMBLER
Score: 1353

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) $64 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #$64
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // nest()
    // [6] call nest 
    // [10] phi from main::@1 to nest [phi:main::@1->nest]
    jsr nest
    // main::@2
    // while (--i>0)
    // [7] (byte) main::i#1 ← -- (byte) main::i#2 -- vbuyy=_dec_vbuyy 
    dey
    // [8] if((byte) main::i#1>(byte) 0) goto main::@1 -- vbuyy_gt_0_then_la1 
    cpy #0
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // nest
nest: {
    // [11] phi from nest to nest::@1 [phi:nest->nest::@1]
    // [11] phi (byte) nest::j#2 = (byte) $64 [phi:nest->nest::@1#0] -- vbuxx=vbuc1 
    ldx #$64
    // [11] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
    // [11] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
    // nest::@1
  __b1:
    // *SCREEN = j
    // [12] *((const byte*) SCREEN) ← (byte) nest::j#2 -- _deref_pbuc1=vbuxx 
    stx SCREEN
    // while (--j>0)
    // [13] (byte) nest::j#1 ← -- (byte) nest::j#2 -- vbuxx=_dec_vbuxx 
    dex
    // [14] if((byte) nest::j#1>(byte) 0) goto nest::@1 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne __b1
    // nest::@return
    // }
    // [15] return 
    rts
}
  // File Data

