Warning! Adding boolean cast to non-boolean condition *((const byte*) MSG1 + (byte) main::i)
Identified constant variable (byte) CH
Identified constant variable (byte*) SCREEN1
Identified constant variable (byte*) SCREEN2
Identified constant variable (byte*) SCREEN3
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((byte*)(number) $d018) ← (number) $17
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$0 ← (number) 0 != *((const byte*) MSG1 + (byte) main::i#2)
  if((bool~) main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  *((const byte*) SCREEN1 + (byte) main::i#3) ← *((const byte*) MSG1 + (byte) main::i#3)
  *((const byte*) SCREEN2 + (byte) main::i#3) ← *((const byte*) MSG2 + (byte) main::i#3)
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  *((const byte*) SCREEN3 + (number) 0) ← (const byte) CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) CH = (byte) 'P'su
(const byte*) MSG1[]  = (byte*) "cAmElot"pm
(const byte*) MSG2[]  = (byte*) "CAMELOT"su
(const byte*) SCREEN1 = (byte*)(number) $400
(const byte*) SCREEN2 = (byte*)(number) $428
(const byte*) SCREEN3 = (byte*)(number) $428
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3

Adding number conversion cast (unumber) $17 in *((byte*)(number) $d018) ← (number) $17
Adding number conversion cast (unumber) 0 in (bool~) main::$0 ← (number) 0 != *((const byte*) MSG1 + (byte) main::i#2)
Adding number conversion cast (unumber) 0 in *((const byte*) SCREEN3 + (number) 0) ← (const byte) CH
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)(number) $d018) ← (unumber)(number) $17
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1064
Simplifying constant pointer cast (byte*) 1064
Simplifying constant integer cast $17
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [4] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN3 in [8] *((const byte*) SCREEN3 + (byte) 0) ← (const byte) CH
Successful SSA optimization PassNSimplifyExpressionWithZero
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [13] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*) 53272) ← (byte) $17
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] *((const byte*) SCREEN3) ← (const byte) CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [9] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG1 + (byte) main::i#2)
  [10] *((const byte*) SCREEN2 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2)
  [11] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 202.0
(byte) main::i#2 176.75

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = 'P'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
  .label SCREEN3 = $428
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [4] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i
    cmp MSG1,y
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [7] *((const byte*) SCREEN3) ← (const byte) CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN3
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // main::@2
  __b2:
    // [9] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG1 + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda MSG1,y
    sta SCREEN1,y
    // [10] *((const byte*) SCREEN2 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda MSG2,y
    sta SCREEN2,y
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*) 53272) ← (byte) $17 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [7] *((const byte*) SCREEN3) ← (const byte) CH [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG1 + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN2 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*) 53272) ← (byte) $17 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN3) ← (const byte) CH [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG1 + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN2 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 378.75: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 443 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 443 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = 'P'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
  .label SCREEN3 = $428
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MSG1,x
    cmp #0
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [7] *((const byte*) SCREEN3) ← (const byte) CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN3
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // main::@2
  __b2:
    // [9] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG1 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG1,x
    sta SCREEN1,x
    // [10] *((const byte*) SCREEN2 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG2,x
    sta SCREEN2,x
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) CH = (byte) 'P'su
(const byte*) MSG1[]  = (byte*) "cAmElot"pm
(const byte*) MSG2[]  = (byte*) "CAMELOT"su
(const byte*) SCREEN1 = (byte*) 1024
(const byte*) SCREEN2 = (byte*) 1064
(const byte*) SCREEN3 = (byte*) 1064
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 202.0
(byte) main::i#2 reg byte x 176.75

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 368

  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = 'P'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
  .label SCREEN3 = $428
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // *((char*)0xd018) = 0x17
    // [4] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // while(MSG1[i])
    // [6] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MSG1,x
    cmp #0
    bne __b2
    // main::@3
    // SCREEN3[0] = CH
    // [7] *((const byte*) SCREEN3) ← (const byte) CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN3
    // main::@return
    // }
    // [8] return 
    rts
    // main::@2
  __b2:
    // SCREEN1[i] = MSG1[i]
    // [9] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG1 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG1,x
    sta SCREEN1,x
    // SCREEN2[i] = MSG2[i]
    // [10] *((const byte*) SCREEN2 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG2,x
    sta SCREEN2,x
    // i++;
    // [11] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

