
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#2 = phi( main/main::i#0, main::@3/main::i#1 )
  main::$0 = SCREEN[main::i#2] == ' '
  main::$1 = ! main::$0
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  SCREEN[main::i#3] = ++ SCREEN[main::i#3]
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2
  main::i#4 = phi( main::@1/main::i#2, main::@2/main::i#3 )
  main::i#1 = main::i#4 + rangenext(0,$28*6)
  main::$3 = main::i#1 != rangelast(0,$28*6)
  if(main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Inversing boolean not [3] main::$1 = SCREEN[main::i#2] != ' ' from [2] main::$0 = SCREEN[main::i#2] == ' '
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [3] if(SCREEN[main::i#2]!=' ') goto main::@2
Simple Condition main::$3 [7] if(main::i#1!=rangelast(0,$28*6)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [3] if(SCREEN[main::i#2]==' ') goto main::@3
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,$28*6)) goto main::@1 to $28*6+1
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28*6+1 in [4] if(main::i#1!=$28*6+1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::i#2 = phi( main/0, main::@3/main::i#1 )
  [2] if(SCREEN[main::i#2]==' ') goto main::@3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [3] SCREEN[main::i#2] = ++ SCREEN[main::i#2]
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=(byte)$28*6+1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 18.333333333333332

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(SCREEN[main::i#2]==' ') goto main::@3 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [2] if(SCREEN[main::i#2]==' ') goto main::@3 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 401 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 401 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(SCREEN[main::i#2]==' ') goto main::@3 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #' '
    beq __b3
    jmp __b2
    // main::@2
  __b2:
    // [3] SCREEN[main::i#2] = ++ SCREEN[main::i#2] -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc SCREEN,x
    jmp __b3
    // main::@3
  __b3:
    // [4] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::i#1!=(byte)$28*6+1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28*6+1
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 18.333333333333332

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 251

  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // if(SCREEN[i]==' ')
    // [2] if(SCREEN[main::i#2]==' ') goto main::@3 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #' '
    beq __b3
    // main::@2
    // SCREEN[i]++;
    // [3] SCREEN[main::i#2] = ++ SCREEN[main::i#2] -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc SCREEN,x
    // main::@3
  __b3:
    // for( byte i: 0..40*6)
    // [4] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::i#1!=(byte)$28*6+1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28*6+1
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

