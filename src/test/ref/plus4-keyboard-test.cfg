@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@5
  [6] (byte*) main::row#6 ← phi( main::@1/(const nomodify byte*) DEFAULT_SCREEN main::@5/(byte*) main::row#1 )
  [6] (byte) main::y#2 ← phi( main::@1/(byte) 0 main::@5/(byte) main::y#1 )
  [7] if((byte) main::y#2<(byte) 8) goto main::@2
  to:main::@1
main::@2: scope:[main]  from main::@1
  [8] (byte~) main::$2 ← (byte) 1 << (byte) main::y#2
  [9] (byte~) main::$3 ← (byte) $ff ^ (byte~) main::$2
  [10] *((const nomodify byte*) KEYBOARD_SCAN) ← (byte~) main::$3
  [11] *((const nomodify byte*) KEYBOARD_INPUT) ← (byte) 0
  [12] (byte) main::key_bit#0 ← *((const nomodify byte*) KEYBOARD_INPUT) ^ (byte) $ff
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [13] (byte) main::key_bit#2 ← phi( main::@2/(byte) main::key_bit#0 main::@6/(byte) main::key_bit#1 )
  [13] (byte) main::x#2 ← phi( main::@2/(byte) 0 main::@6/(byte) main::x#1 )
  [14] if((byte) main::x#2<(byte) 8) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [15] (byte*) main::row#1 ← (byte*) main::row#6 + (byte) $28
  [16] (byte) main::y#1 ← ++ (byte) main::y#2
  to:main::@1
main::@4: scope:[main]  from main::@3
  [17] (byte~) main::$6 ← (byte) main::key_bit#2 & (byte) $80
  [18] if((byte) 0==(byte~) main::$6) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@4
  [19] *((byte*) main::row#6 + (byte) main::x#2) ← (byte) '*'
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@7
  [20] (byte) main::key_bit#1 ← (byte) main::key_bit#2 << (byte) 1
  [21] (byte) main::x#1 ← ++ (byte) main::x#2
  to:main::@3

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main
  [22] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [23] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [24] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [25] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [26] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [27] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
