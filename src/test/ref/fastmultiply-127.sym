__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void main()
__constant char main::str[9] = "unsigned"
__constant char main::str1[7] = "signed"
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:6 2002.0
char *memset::dst#2 // dst zp[2]:6 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
__constant char mulf127_sqr1_hi[$200] = kickasm {{ .fill 512, >round((i/127*i/127)*127/4)  }}
__constant char mulf127_sqr1_lo[$200] = kickasm {{ .fill 512, <round((i/127*i/127)*127/4)  }}
__constant char mulf127_sqr2_hi[$200] = kickasm {{ .fill 512, >round(((i-255)/127*(i-255)/127)*127/4)  }}
__constant char mulf127_sqr2_lo[$200] = kickasm {{ .fill 512, <round(((i-255)/127*(i-255)/127)*127/4)  }}
int mulf8s127(signed char a , signed char b)
int mulf8s127::$10 // zp[2]:10 202.0
int mulf8s127::$11 // zp[2]:8 202.0
int mulf8s127::$12 // zp[2]:10 202.0
int mulf8s127::$9 // zp[2]:8 202.0
signed char mulf8s127::a
signed char mulf8s127::a#0 // a zp[1]:4 11.833333333333332
signed char mulf8s127::b
signed char mulf8s127::b#0 // reg byte y 11.833333333333332
int mulf8s127::c
unsigned int mulf8s127::c#0 // c zp[2]:6 25.25
int mulf8s127::c#1 // c zp[2]:6 202.0
int mulf8s127::c#11 // c zp[2]:6 202.0
int mulf8s127::c#2 // c zp[2]:6 202.0
int mulf8s127::c#3 // c zp[2]:6 202.0
int mulf8s127::c#5 // c zp[2]:6 101.0
int mulf8s127::c#7 // c zp[2]:6 134.66666666666666
int mulf8s127::return
int mulf8s127::return#0 // return zp[2]:6 22.0
int mulf8s127::return#1 // return zp[2]:6 71.0
unsigned int mulf8u127(char a , char b)
char mulf8u127::a
char mulf8u127::a#0 // reg byte x 11.0
char mulf8u127::a#1 // reg byte x 101.0
char mulf8u127::a#2 // reg byte x 1113.0
char mulf8u127::b
char mulf8u127::b#0 // reg byte a 22.0
char mulf8u127::b#1 // reg byte a 202.0
char mulf8u127::b#2 // reg byte a 556.5
__constant char * const mulf8u127::memA = (char *) 252
__constant char * const mulf8u127::memB = (char *) 253
__constant unsigned int * const mulf8u127::res = (unsigned int *) 254
__constant char * const mulf8u127::resH = (char *) 255
__constant char * const mulf8u127::resL = (char *) 254
unsigned int mulf8u127::return
unsigned int mulf8u127::return#0 // return zp[2]:6 22.0
unsigned int mulf8u127::return#1 // return zp[2]:6 278.25
unsigned int mulf8u127::return#3 // return zp[2]:6 202.0
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 202.0
char print_char::ch#11 // reg byte a 120104.0
char print_char::ch#5 // reg byte a 20002.0
char print_char::ch#6 // reg byte a 20002.0
char *print_char_cursor
char *print_char_cursor#1 // print_char_cursor zp[2]:8 27.125
char *print_char_cursor#126 // print_char_cursor zp[2]:8 256.75
char *print_char_cursor#130 // print_char_cursor zp[2]:8 56.0
char *print_char_cursor#134 // print_char_cursor zp[2]:8 4041.999999999999
char *print_char_cursor#139 // print_char_cursor zp[2]:8 13.0
char *print_char_cursor#144 // print_char_cursor zp[2]:8 4.0
char *print_char_cursor#151 // print_char_cursor zp[2]:8 22.0
char *print_char_cursor#153 // print_char_cursor zp[2]:8 22.0
char *print_char_cursor#18 // print_char_cursor zp[2]:8 2163.3846153846152
char *print_char_cursor#81 // print_char_cursor zp[2]:8 110276.5
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:2 36.759036144578324
char *print_line_cursor#33 // print_line_cursor zp[2]:2 2103.0
char *print_line_cursor#65 // print_line_cursor zp[2]:2 125.0
void print_ln()
void print_mulf8s127(signed char a , signed char b)
signed char print_mulf8s127::a
signed char print_mulf8s127::a#10 // a zp[1]:4 3.6666666666666665
signed char print_mulf8s127::b
signed char print_mulf8s127::b#10 // b zp[1]:5 2.0
int print_mulf8s127::c
int print_mulf8s127::c#0 // c zp[2]:6 2.2
void print_mulf8u127(char a , char b)
char print_mulf8u127::a
char print_mulf8u127::a#8 // reg byte y 3.6666666666666665
char print_mulf8u127::b
char print_mulf8u127::b#10 // b zp[1]:4 2.0
unsigned int print_mulf8u127::c
unsigned int print_mulf8u127::c#0 // c zp[2]:6 2.2
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // reg byte x 202.0
signed char print_schar::b#1 // reg byte x 11.0
signed char print_schar::b#2 // reg byte x 22.0
signed char print_schar::b#3 // reg byte x 54.16666666666666
signed char print_schar::b#5 // reg byte x 202.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // w zp[2]:6 202.0
int print_sint::w#1 // w zp[2]:6 52.33333333333333
int print_sint::w#4 // w zp[2]:6 202.0
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:6 202.0
char *print_str::str#3 // str zp[2]:6 103.75
char *print_str::str#6 // str zp[2]:6 11.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 20002.0
char print_uchar::$2 // reg byte x 20002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 202.0
char print_uchar::b#1 // reg byte x 2002.0
char print_uchar::b#2 // reg byte x 2002.0
char print_uchar::b#3 // reg byte x 11.0
char print_uchar::b#4 // reg byte x 22.0
char print_uchar::b#5 // reg byte x 5531.75
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:6 202.0
unsigned int print_uint::w#1 // w zp[2]:6 22.0
unsigned int print_uint::w#2 // w zp[2]:6 704.6666666666667

zp[2]:2 [ print_line_cursor#33 print_line_cursor#65 print_line_cursor#0 ]
reg byte y [ print_mulf8u127::a#8 ]
zp[1]:4 [ print_mulf8s127::a#10 mulf8s127::a#0 print_mulf8u127::b#10 ]
zp[1]:5 [ print_mulf8s127::b#10 ]
reg byte a [ print_char::ch#11 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
reg byte x [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ]
reg byte a [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ]
reg byte x [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
zp[2]:6 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_mulf8u127::c#0 mulf8u127::return#0 mulf8u127::return#1 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 mulf8u127::return#3 memset::dst#2 memset::dst#1 print_str::str#3 print_str::str#6 print_str::str#0 ]
reg byte x [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
reg byte y [ mulf8s127::b#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[2]:8 [ mulf8s127::$11 mulf8s127::$9 print_char_cursor#81 print_char_cursor#126 print_char_cursor#1 print_char_cursor#139 print_char_cursor#144 print_char_cursor#18 print_char_cursor#130 print_char_cursor#134 print_char_cursor#153 print_char_cursor#151 ]
zp[2]:10 [ mulf8s127::$12 mulf8s127::$10 ]
