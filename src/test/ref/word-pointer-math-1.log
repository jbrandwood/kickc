
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (word~) main::$1 ← (const word*) main::w2 - (const word*) main::w1
  (word~) main::$0 ← (word~) main::$1 / (const byte) SIZEOF_WORD
  (word) main::wd#0 ← (word~) main::$0
  *((const nomodify word*) main::SCREEN) ← (word) main::wd#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(word~) main::$0
(word~) main::$1
(label) main::@return
(const nomodify word*) main::SCREEN = (word*)(number) $400
(const word*) main::w1 = (word*)(number) $1000
(const word*) main::w2 = (word*)(number) $1140
(word) main::wd
(word) main::wd#0

Simplifying constant pointer cast (word*) 1024
Simplifying constant pointer cast (word*) 4096
Simplifying constant pointer cast (word*) 4416
Successful SSA optimization PassNCastSimplification
Alias main::wd#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (word~) main::$1 ← (const word*) main::w2 - (const word*) main::w1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::$1 = main::w2-main::w1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (word) main::wd#0 ← (const word) main::$1 / (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::wd#0 = main::$1/SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = (const word*) main::w2-(const word*) main::w1
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const nomodify word*) main::SCREEN) ← (const word) main::wd#0
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(word) main::wd

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests word pointer math - subtracting two word pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const wd = (w2-w1)/SIZEOF_WORD
    .label SCREEN = $400
    .label w1 = $1000
    .label w2 = $1140
    // [4] *((const nomodify word*) main::SCREEN) ← (const word) main::wd#0 -- _deref_pwuc1=vwuc2 
    lda #<wd
    sta SCREEN
    lda #>wd
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const nomodify word*) main::SCREEN) ← (const word) main::wd#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 33 combination 
Uplifting [] best 33 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests word pointer math - subtracting two word pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const wd = (w2-w1)/SIZEOF_WORD
    .label SCREEN = $400
    .label w1 = $1000
    .label w2 = $1140
    // [4] *((const nomodify word*) main::SCREEN) ← (const word) main::wd#0 -- _deref_pwuc1=vwuc2 
    lda #<wd
    sta SCREEN
    lda #>wd
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(const nomodify word*) main::SCREEN = (word*) 1024
(const word*) main::w1 = (word*) 4096
(const word*) main::w2 = (word*) 4416
(word) main::wd
(const word) main::wd#0 wd = (const word*) main::w2-(const word*) main::w1/(const byte) SIZEOF_WORD



FINAL ASSEMBLER
Score: 18

  // File Comments
// Tests word pointer math - subtracting two word pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const wd = (w2-w1)/SIZEOF_WORD
    .label SCREEN = $400
    .label w1 = $1000
    .label w2 = $1140
    // *SCREEN = wd
    // [4] *((const nomodify word*) main::SCREEN) ← (const word) main::wd#0 -- _deref_pwuc1=vwuc2 
    lda #<wd
    sta SCREEN
    lda #>wd
    sta SCREEN+1
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

