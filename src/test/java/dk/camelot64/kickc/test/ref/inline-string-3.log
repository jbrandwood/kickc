PARSING src/test/java/dk/camelot64/kickc/test/kc/inline-string-3.kc
// Test assigning address of inline string to pointer
// The result should be an labelled .text in the ASM
// Erroneously tries to inline the string completely leading to a CompileError
void main() {
    const byte[] STRING = "camelot";
    const byte* PTR = $9ffe;
    *PTR = <STRING;
    *(PTR+1)= >STRING;
    byte* ptr = (byte*) { *(PTR+1), *PTR };
    const byte* SCREEN = $400;
    *SCREEN = *ptr;
}
SYMBOLS
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte*~) main::$1
(byte~) main::$2
(byte*~) main::$3
(byte*~) main::$4
(label) main::@return
(byte*) main::PTR
(byte*) main::SCREEN
(byte[]) main::STRING
(byte*) main::ptr

Promoting word/dword/signed dword to byte* in main::PTR ← ((byte*)) 40958
Promoting word/signed word/dword/signed dword to byte* in main::SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte[]) main::STRING ← (string) "camelot"
  (byte*) main::PTR ← ((byte*)) (word/dword/signed dword) 40958
  (byte~) main::$0 ← < (byte[]) main::STRING
  *((byte*) main::PTR) ← (byte~) main::$0
  (byte*~) main::$1 ← (byte*) main::PTR + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) main::$2 ← > (byte[]) main::STRING
  *((byte*~) main::$1) ← (byte~) main::$2
  (byte*~) main::$3 ← (byte*) main::PTR + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*~) main::$4 ← ((byte*)) { *((byte*~) main::$3), *((byte*) main::PTR) }
  (byte*) main::ptr ← (byte*~) main::$4
  (byte*) main::SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  *((byte*) main::SCREEN) ← *((byte*) main::ptr)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Creating constant string variable for inline (const string) main::$5 "camelot"
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[]) main::STRING#0 ← (const string) main::$5
  (byte*) main::PTR#0 ← ((byte*)) (word/dword/signed dword) 40958
  (byte~) main::$0 ← < (byte[]) main::STRING#0
  *((byte*) main::PTR#0) ← (byte~) main::$0
  (byte*~) main::$1 ← (byte*) main::PTR#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) main::$2 ← > (byte[]) main::STRING#0
  *((byte*~) main::$1) ← (byte~) main::$2
  (byte*~) main::$3 ← (byte*) main::PTR#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*~) main::$4 ← ((byte*)) { *((byte*~) main::$3), *((byte*) main::PTR#0) }
  (byte*) main::ptr#0 ← (byte*~) main::$4
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  *((byte*) main::SCREEN#0) ← *((byte*) main::ptr#0)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte*~) main::$1
(byte~) main::$2
(byte*~) main::$3
(byte*~) main::$4
(const string) main::$5 = (string) "camelot"
(label) main::@return
(byte*) main::PTR
(byte*) main::PTR#0
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte[]) main::STRING
(byte[]) main::STRING#0
(byte*) main::ptr
(byte*) main::ptr#0

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Alias (byte*) main::ptr#0 = (byte*~) main::$4 
Succesful SSA optimization Pass2AliasElimination
Constant (const byte[]) main::STRING#0 = main::$5
Constant (const byte*) main::PTR#0 = ((byte*))40958
Constant (const byte*) main::SCREEN#0 = ((byte*))1024
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$0 = <main::STRING#0
Constant (const byte*) main::$1 = main::PTR#0+1
Constant (const byte) main::$2 = >main::STRING#0
Constant (const byte*) main::$3 = main::PTR#0+1
Succesful SSA optimization Pass2ConstantIdentification
Fixing inline constructor with main::$6 ← *(main::$3) w= *(main::PTR#0)
Succesful SSA optimization Pass2FixInlineConstructors
Eliminating Noop Cast (byte*) main::ptr#0 ← ((byte*)) (word~) main::$6
Succesful SSA optimization Pass2NopCastElimination
OPTIMIZING CONTROL FLOW GRAPH
Constant inlined main::$5 = (const byte[]) main::STRING#0
Constant inlined main::$3 = (const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$1 = (const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$2 = >(const byte[]) main::STRING#0
Constant inlined main::$0 = <(const byte[]) main::STRING#0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@return 
Block Sequence Planned @begin @1 @end main main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] *((const byte*) main::PTR#0) ← <(const byte[]) main::STRING#0 [ ] ( main:2 [ ] )
  [5] *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const byte[]) main::STRING#0 [ ] ( main:2 [ ] )
  [6] (word~) main::$6 ← *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) w= *((const byte*) main::PTR#0) [ main::$6 ] ( main:2 [ main::$6 ] )
  [7] *((const byte*) main::SCREEN#0) ← *((byte*)(word~) main::$6) [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main
  [8] return  [ ] ( main:2 [ ] )
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(word~) main::$6 2.0
(byte*) main::PTR
(byte*) main::SCREEN
(byte[]) main::STRING
(byte*) main::ptr

Initial phi equivalence classes
Added variable main::$6 to zero page equivalence class [ main::$6 ]
Complete equivalence classes
[ main::$6 ]
Allocated zp ZP_WORD:2 [ main::$6 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label PTR = $9ffe
    .label SCREEN = $400
    .label _6 = 2
  //SEG9 [4] *((const byte*) main::PTR#0) ← <(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<STRING
    sta PTR
  //SEG10 [5] *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>STRING
    sta PTR+1
  //SEG11 [6] (word~) main::$6 ← *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) w= *((const byte*) main::PTR#0) [ main::$6 ] ( main:2 [ main::$6 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda PTR
    sta _6
    lda PTR+1
    sta _6+1
  //SEG12 [7] *((const byte*) main::SCREEN#0) ← *((byte*)(word~) main::$6) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (_6),y
    sta SCREEN
    jmp breturn
  //SEG13 main::@return
  breturn:
  //SEG14 [8] return  [ ] ( main:2 [ ] )
    rts
    STRING: .text "camelot"
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::PTR#0) ← <(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] (word~) main::$6 ← *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) w= *((const byte*) main::PTR#0) [ main::$6 ] ( main:2 [ main::$6 ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0) ← *((byte*)(word~) main::$6) [ ] ( main:2 [ ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_WORD:2 [ main::$6 ] : zp ZP_WORD:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 2: zp ZP_WORD:2 [ main::$6 ] 
Uplift Scope [] 

Uplifting [main] best 58 combination zp ZP_WORD:2 [ main::$6 ] 
Uplifting [] best 58 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label PTR = $9ffe
    .label SCREEN = $400
    .label _6 = 2
  //SEG9 [4] *((const byte*) main::PTR#0) ← <(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<STRING
    sta PTR
  //SEG10 [5] *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>STRING
    sta PTR+1
  //SEG11 [6] (word~) main::$6 ← *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) w= *((const byte*) main::PTR#0) [ main::$6 ] ( main:2 [ main::$6 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda PTR
    sta _6
    lda PTR+1
    sta _6+1
  //SEG12 [7] *((const byte*) main::SCREEN#0) ← *((byte*)(word~) main::$6) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (_6),y
    sta SCREEN
    jmp breturn
  //SEG13 main::@return
  breturn:
  //SEG14 [8] return  [ ] ( main:2 [ ] )
    rts
    STRING: .text "camelot"
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(word~) main::$6 $6 zp ZP_WORD:2 2.0
(label) main::@return
(byte*) main::PTR
(const byte*) main::PTR#0 PTR = ((byte*))(word/dword/signed dword) 40958
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte[]) main::STRING
(const byte[]) main::STRING#0 STRING = (string) "camelot"
(byte*) main::ptr

zp ZP_WORD:2 [ main::$6 ]


FINAL ASSEMBLER
Score: 49

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
//SEG7 @end
//SEG8 main
main: {
    .label PTR = $9ffe
    .label SCREEN = $400
    .label _6 = 2
  //SEG9 [4] *((const byte*) main::PTR#0) ← <(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<STRING
    sta PTR
  //SEG10 [5] *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >(const byte[]) main::STRING#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>STRING
    sta PTR+1
  //SEG11 [6] (word~) main::$6 ← *((const byte*) main::PTR#0+(byte/signed byte/word/signed word/dword/signed dword) 1) w= *((const byte*) main::PTR#0) [ main::$6 ] ( main:2 [ main::$6 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda PTR
    sta _6
    lda PTR+1
    sta _6+1
  //SEG12 [7] *((const byte*) main::SCREEN#0) ← *((byte*)(word~) main::$6) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (_6),y
    sta SCREEN
  //SEG13 main::@return
  //SEG14 [8] return  [ ] ( main:2 [ ] )
    rts
    STRING: .text "camelot"
}

