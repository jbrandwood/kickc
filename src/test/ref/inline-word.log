
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::h#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::h#4 = phi( main/main::h#0, main::@3/main::h#1 )
  main::l#0 = 4
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  main::l#2 = phi( main::@1/main::l#0, main::@2/main::l#1 )
  main::h#2 = phi( main::@1/main::h#4, main::@2/main::h#2 )
  main::w#0 = (word){ main::his[main::h#2], main::l#2 }
  main::sc#0 = (byte*)main::w#0
  *main::sc#0 = '*'
  main::l#1 = main::l#2 + rangenext(4,7)
  main::$0 = main::l#1 != rangelast(4,7)
  if(main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::h#3 = phi( main::@2/main::h#2 )
  main::h#1 = main::h#3 + rangenext(0,2)
  main::$1 = main::h#1 != rangelast(0,2)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
bool~ main::$1
byte main::h
byte main::h#0
byte main::h#1
byte main::h#2
byte main::h#3
byte main::h#4
const byte* main::his[]  = { >SCREEN, >SCREEN+$100, >SCREEN+$200 }
byte main::l
byte main::l#0
byte main::l#1
byte main::l#2
byte* main::sc
byte* main::sc#0
word main::w
word main::w#0

Fixing inline constructor with main::$2 = (byte)main::his[main::h#2] w= (byte)main::l#2
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $100 in 
Adding number conversion cast (unumber) $200 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $100
Simplifying constant integer cast $200
Simplifying constant integer cast main::his[main::h#2]
Simplifying constant integer cast main::l#2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $200
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::w#0 = main::$2 
Alias main::h#2 = main::h#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::h#2 main::h#4
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [9] if(main::l#1!=rangelast(4,7)) goto main::@2
Simple Condition main::$1 [12] if(main::h#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::h#0 = 0
Constant main::l#0 = 4
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::l#1 = ++ main::l#2 to ++
Resolved ranged comparison value [9] if(main::l#1!=rangelast(4,7)) goto main::@2 to 8
Resolved ranged next value [10] main::h#1 = ++ main::h#4 to ++
Resolved ranged comparison value [12] if(main::h#1!=rangelast(0,2)) goto main::@1 to 3
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [6] if(main::l#1!=8) goto main::@2
Adding number conversion cast (unumber) 3 in [8] if(main::h#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [3] main::sc#0 = (byte*)main::w#0 keeping main::w#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings main::h#0
Inlining constant with var siblings main::l#0
Constant inlined main::l#0 = 4
Constant inlined main::h#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting main::@5(between main::@2 and main::@2)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [10] main::h#5 = main::h#1
Coalesced [11] main::l#3 = main::l#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::h#4 = phi( main/0, main::@3/main::h#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] main::l#2 = phi( main::@1/4, main::@2/main::l#1 )
  [3] main::w#0 = main::his[main::h#4] w= main::l#2
  [4] *((byte*)main::w#0) = '*'
  [5] main::l#1 = ++ main::l#2
  [6] if(main::l#1!=8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] main::h#1 = ++ main::h#4
  [8] if(main::h#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::h
byte main::h#1 16.5
byte main::h#4 20.499999999999996
byte main::l
byte main::l#1 151.5
byte main::l#2 101.0
byte* main::sc
word main::w
word main::w#0 101.0

Initial phi equivalence classes
[ main::h#4 main::h#1 ]
[ main::l#2 main::l#1 ]
Added variable main::w#0 to live range equivalence class [ main::w#0 ]
Complete equivalence classes
[ main::h#4 main::h#1 ]
[ main::l#2 main::l#1 ]
[ main::w#0 ]
Allocated zp[1]:2 [ main::h#4 main::h#1 ]
Allocated zp[1]:3 [ main::l#2 main::l#1 ]
Allocated zp[2]:4 [ main::w#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*)main::w#0) = '*' [ main::h#4 main::l#2 ] (  [ main::h#4 main::l#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::h#4 main::h#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::h#4 main::h#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::l#2 main::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::l#2 main::l#1 ]
Statement [3] main::w#0 = main::his[main::h#4] w= main::l#2 [ main::h#4 main::l#2 main::w#0 ] (  [ main::h#4 main::l#2 main::w#0 ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*)main::w#0) = '*' [ main::h#4 main::l#2 ] (  [ main::h#4 main::l#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::h#4 main::h#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::l#2 main::l#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[2]:4 [ main::w#0 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 252.5: zp[1]:3 [ main::l#2 main::l#1 ] 101: zp[2]:4 [ main::w#0 ] 37: zp[1]:2 [ main::h#4 main::h#1 ] 
Uplift Scope [] 

Uplifting [main] best 4371 combination reg byte x [ main::l#2 main::l#1 ] zp[2]:4 [ main::w#0 ] zp[1]:2 [ main::h#4 main::h#1 ] 
Uplifting [] best 4371 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::h#4 main::h#1 ]
Uplifting [main] best 4371 combination zp[1]:2 [ main::h#4 main::h#1 ] 
Allocated (was zp[2]:4) zp[2]:3 [ main::w#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-word.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label w = 3
    .label h = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::h#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z h
    jmp __b1
  // constant array
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::h#4 = main::h#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi main::l#2 = 4 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #4
    jmp __b2
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [2] phi main::l#2 = main::l#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] main::w#0 = main::his[main::h#4] w= main::l#2 -- vwuz1=pbuc1_derefidx_vbuz2_word_vbuxx 
    ldy.z h
    lda his,y
    sta.z w+1
    stx.z w
    // [4] *((byte*)main::w#0) = '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (w),y
    // [5] main::l#1 = ++ main::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::l#1!=8) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [7] main::h#1 = ++ main::h#4 -- vbuz1=_inc_vbuz1 
    inc.z h
    // [8] if(main::h#1!=3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z h
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
  .segment Data
    his: .byte >SCREEN, >SCREEN+$100, >SCREEN+$200
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
byte main::h
byte main::h#1 h zp[1]:2 16.5
byte main::h#4 h zp[1]:2 20.499999999999996
const byte* main::his[]  = { >SCREEN, >SCREEN+$100, >SCREEN+$200 }
byte main::l
byte main::l#1 reg byte x 151.5
byte main::l#2 reg byte x 101.0
byte* main::sc
word main::w
word main::w#0 w zp[2]:3 101.0

zp[1]:2 [ main::h#4 main::h#1 ]
reg byte x [ main::l#2 main::l#1 ]
zp[2]:3 [ main::w#0 ]


FINAL ASSEMBLER
Score: 3381

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-word.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label w = 3
    .label h = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::h#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z h
  // constant array
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::h#4 = main::h#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [2] phi main::l#2 = 4 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #4
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [2] phi main::l#2 = main::l#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // w = { his[h], l }
    // [3] main::w#0 = main::his[main::h#4] w= main::l#2 -- vwuz1=pbuc1_derefidx_vbuz2_word_vbuxx 
    ldy.z h
    lda his,y
    sta.z w+1
    stx.z w
    // *sc = '*'
    // [4] *((byte*)main::w#0) = '*' -- _deref_pbuz1=vbuc1 
    lda #'*'
    ldy #0
    sta (w),y
    // for (byte l: 4..7)
    // [5] main::l#1 = ++ main::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::l#1!=8) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2
    // main::@3
    // for( byte h: 0..2)
    // [7] main::h#1 = ++ main::h#4 -- vbuz1=_inc_vbuz1 
    inc.z h
    // [8] if(main::h#1!=3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z h
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
  .segment Data
    his: .byte >SCREEN, >SCREEN+$100, >SCREEN+$200
}
  // File Data

