__constant unsigned int *COLCRS = (unsigned int *) 85
__constant char * const CRSINH = (char *) 752
__constant char DIGITS[] = "0123456789abcdef"atz
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char ** const OLDADR = (char **) 94
__constant char * const OLDCHR = (char *) 93
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant char *ROWCRS = (char *) 84
__constant char ** const SAVMSC = (char **) 88
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void clrscr()
__stackcall void cputc(volatile char c)
__constant char cputc::OFFSET_STACK_C = 0
__loadstore volatile char cputc::c // zp[1]:143 1334.6666666666667
char cputc::convertToScreenCode1_return
char cputc::convertToScreenCode1_return#0 // reg byte x 1833.6666666666665
char *cputc::convertToScreenCode1_v
__constant char *cputc::convertToScreenCode1_v#0 = &cputc::c // convertToScreenCode1_v
char * cursorLocation()
unsigned int cursorLocation::$0 // zp[2]:128 2000002.0
char *cursorLocation::$1 // zp[2]:128 2000002.0
unsigned int cursorLocation::$3 // zp[2]:128 1500001.5
unsigned int cursorLocation::$4 // zp[2]:136 2000002.0
unsigned int cursorLocation::$5 // zp[2]:128 2000002.0
char *cursorLocation::return
char *cursorLocation::return#0 // return zp[2]:128 20002.0
char *cursorLocation::return#1 // return zp[2]:128 277500.75
char *cursorLocation::return#3 // return zp[2]:128 200002.0
void gotoxy(char x , char y)
char gotoxy::x
__constant char gotoxy::x#0 = 0 // x
char gotoxy::y
__constant char gotoxy::y#0 = 0 // y
void main()
__constant char main::s[$10] = "1: encountered "at
__constant char main::s1[8] = " trees
"at
__constant char main::s10[$11] = "2e: encountered "at
__constant char main::s2[$11] = "2a: encountered "at
__constant char main::s4[$11] = "2b: encountered "at
__constant char main::s6[$11] = "2c: encountered "at
__constant char main::s8[$11] = "2d: encountered "at
__constant char *map = ".#......##..#.....#....#.#.#....#.#...#.##.#..........#...##...........#.....#.####........#........#.#...#.#.................#....#...#.#...#.#...#.#........#...........#..#.........#.#....#..#....#..#..#.#...#..##..#...........#..#.....#.......#.#..#...#...#.###...#...#.#...#.#...#.#.......#...#...#...##.##..#..................#.#.#....#..#.##....#........##...............#....#....#.#.......#.....##.#..##.#.....###.......#...........#...###....#..#.#...#..................#.........#.##...#......#.............#....#...#.#..#......#.###....#...#.....#..#........#.....#.....#...#..#.......#...#..............#..#...#...#........#...##........#..#........#....#......#......#.....#..#.###.......##....#.#..#..#..###..#..........................#...#....#.........#.#.......#.##................#..#.......#......######.....#.........#......##.......#....#..##.###..#...##.###..#.......#....#.......#.###...#.#.#........#........###...#.......#..........#.#..........#...#..........##.#....#....#........#.....#....#..#..#...#.#....##..#...##....#...........##...#..##.....#.......###.......#.#...#...#.......#.#....#.#....##.###........#..........#..............#....##..###......#.#....#.#......#.....##.....#....#..#......#...#........#.##..#.....#..#....#......#......#.#.#..........##....#.............#..#..........#.#......##..#...#......#.#..#....#....#.#..##.......#.#......##........#.#....#.#.....#..............#.........#.......#..#.#......##.........#..##.#......#......#..#.....#...#.....#.........#...........#..##..##.#..##...###..##.....#...#..##...##.#.#......#..........#.#.....##.#....#..##..#..#.........###.......#........##....#...##....##............#.#.##...............#....#..#......#.....#..#..#.#.....#.....##.#....#.#.....#.#.#.........#..#.#..##....#.....#....#.#...#.....#....#....#.#.#...........#................#.......#.......#..#.#...#.#......#..#.#...........#....#....###...#.#.#.##....##..###.#.#......#.##.#..##...#.#..#..#...#.....#.#.#.#.....###.#..#.#...#.#......#.#..##.#...#...#.#.....#.#.......#....#...#.##......#.#......#....#.....##.....#....................###...##.#...........#.......#..##.....##....#................#..#......#..........#........##..##.#...#...#.#.....#.##.#.....###..###.#...#.#..#....#.#..........#...#..#.#.#..#...#.##.##..#..#....#....####..........#..#.#..........#..........###...#.#..#..#...#..###.......####.#...#....#..#...#..#...........##....#.#...#....##....##.....#.#.##....#.##..#....#.#.#.#......#..#.###....#####.##......##..#.#.#..#........##.##..###.#...#..#..#......#..#.....#...###.....#.#....#.#..##.....#.#....#......#.#...#...#.#....#.#.....#.###.##...................#..........#........#.#...##.#.##......#.#.#..#....##.###..#...#.##....#....#.........#.#..#........#..#..#.#.####.....##..#..#.##.#......#.#..##.#...#..#..#.#.##..#.##..........#......##.#.....#.#.##..#..##.....##.#.##........#..#.....#...#.##.##...#....#.#.#.........##.....#....#....#.#....#...#..#.............#...#..#...#.##......##...##.........#......#..........##.#......#.....##....#.#.#.....#..#.###......#..#.#....#.....#..#.......#...#...#.#.#.#..##......#..............#...###.....#...##......#.#..#.#........#.#...##.#....#..........##...#.#....#...#.....#.######...##...#..#...#...#............#.....#....###..###.##..#.........#.......#........##..#....#...#.#..##.#.#.##.#.#...###.................#.#.#......#.#.#....#.....#.#.#...........#.##.#..#.###......###.#....#...........##.#.#....#...#...........#..##..........#...#.#...........#..###....#..##.......#.....#.....##....#..#.......#........#...##.##..#.#....#..###..#.....##.......#.........###.#...#..#....#.#...#....#..#.......##...#.#.#...#..........#..#.......#.......##.#..#.#....###.....#...#..#...#....#...#.##.#........#..........##.....#.#.##.#.#..#..##.......##.#.#.......##....#.#...........#..##.............##...#.#..#..#...........#.#......#.##.##..#...#...#...........#....###.#.#.##..#.#.#....#....#####.........#...#.....#.#....#............#..#........#.....#.#......#...#.........#...#...#.#.#..#.....##.##......#.#...#.......#...#.##...#..#..........#...#.....##..........#..#...#.#......#.......##......#...##..##..#....#..##.......#...#.#..##..#..#.....#.#................#....#.......#..#..###.......#...............##.....#..#......#....#.........#...###...#....#..##...#.#.#.........#.......#...#....#....#.#...#.#....##....#.#..##.#.....#..#..#....#..#.#..##.....##..#..#.#.#....#...#....#..#..........###.....#...##.#..#.#...#.#.#.#..#.##........#.#....#....#..........#....#.#.......#...#.....#........#........#....#..#.#..#...#...................#....####..#..#..#..#....#..#.#...##.#..........#.##..#.....##...................##..........#....##....###.....#..#...#.#....##.........#..#...................##..###....#.##............#.#...###.#..##...#...........#.....#..#......#.....#...........#..##...#.....#.....#.#............#....###.#..#.#.#....#..##...#.......#.##.....#..........#.#..#...#.............##...........#..............#.....#..#......#......###....#...#...........#.....#...#.......###.....#..........##......##.#.#.....#....#.......#..#......#.......#..#...#.###...........#..#.###......#...#.#...........#.#...##........#.#.#........#.#.....#.....##..##.#.#..#.#....#.#.##....#.#.#......##.....#...#.#...###...#..#......#.#.#..#...#........#..##...........#..#..#..#..#..##...#...#...##.#..#.#....#.#.....####.#..#..#....##..#.#..#....#..#......#.....#.#.#........#..#.....#......#............#.#..###.....#...#...#.....##..#.#...##..#...........####....#.##....##.#......#.....##.#..#.##..#....#.###..........##....###...#......#.#....##...........................#..#.....#..#.#...#.#..#.....#...#..####.##....#.##..##...##.##.....#......#...#.##...........#.......##.###..#.....##...#.........##....###....##...###................#....#####........#.#.#.##.....#.#....####.##........#............#......#........................###.....##......#..##.#......#.#...........##.#....##.#....................#.#.#.......#.#.#........#..#.......##.......#...#...#....#......#....##.##..#..............#......#....#......#.........##..................#.#....##..#.......#............#.......#...........#........#....#.#..##.#....#...#....#.#.#..#..#.#.#.#...#....#....#.#.#....#...#.#..#......#.....#.#...........#.#....##.....#...........#...#....#....##.....###..#..........#..#..#.....#....#.#.###..........#.##....#...##..#................#.##.##.......#...#.##...##...#.........#..#....#......#......#.........#.##...#...##.#.........#......#........#.....#....................#...#.....##.........#.#..#...#......#...#.......#......#.##.......#...#.##.#..##..#.......#.#............#...###..#........#.......##.......#....#..#.......#..#.#....#.#.............#....#...##.##....#....##..............#......#.......#....#....#..#..##......##.#..#.#..##......##......#.##.##......#.............##.#...#.....#.......#...##.#....#..#......#.##.........##.####.#...#.#....#..........#........#.....#..#....#...#.####....##......#..#..#.##..#.............###.#..#..#....#.......#.........#....#.....#....#.#.#...#.#.....##.#...#...#.#..#.....##......##.##.#.....#..#.......#.##...##.......#..##......#..........#..#....#.......#.#...#.....#.................#..............#.#.#.....#.#....#..#.......#..........#.##....#....#..#.....#.......#........#....#.....##..#.........##..#..#.#..##.#...#..........#....#..........#..#.#......#.##..#..#.##.....##.####....#.....#.#...##.....#.#....#.#........#..........#...#.#.##.##....##..#...#...#....#.#.......#..#...#..#..##..#.....#....#........###.....#..........#..#.##....#.#.....#........##....#....#.......#.....#..........#........###...##.....#.#..#...##.........#.#..#....#...##...........#.........#...#......#.#.#.........#..#.#.#...........##.###....#..#.......#.....#.#...#......#..#........##.#....##....#...#.##.........#.####.#..#...........##.#.#........#....#..#.....#..##.####.#...##...#...........#.#.........##.#..#..#...#.#.#.........#..#.#......###............#...#......#.......#....#...#...#..#...##.#.#...##..#...#...#.......##.......#.#.......#..........#.#................#...#..#...#.#...#.#...##.####..##.##....#..##.#..####.......##.#........#...#......###....##...#.#..#.##.....##.....###..#...#.###.###.......#...#.....#...#..#..##..#.......#...##.....##........#.#.##..#...#..#....#....#..###....#.#..#.#.#.#.#..........#.#..#..##.......###.....................##.#......#.##.....#.........#.......................#.#.....##..#........##.......#..##..#.##.#.#.....##.#.##.##.#....##....#...#.....#.........#.....#.....#.........#.##.#.###.#......#.........#..#.##...#.......###......##........#......#...........#.#...##...#........#.##.............##............#.####..#....#...#...#..#....#..#.#.#.#..#.........#......#.##............#.....#........#........#.#.##.#..#.#..#..###......###....#.###.....#.#.#.##........#..###.#..#...##.....#....#...#.#.........#....#.....#...#............#........##.......#.##..####..#..#....#....#..#..#...#.##...##.....#............#...#...........#.......#.....#...#.#.#...........#.....#...##...............#........##...........#...#.#..##.#...#....#....#........#.##..#.#.......#...#......#..............#.#..#..#.....##.#..#....#.##.......#......#.##..#......#........#.##.#...#.....#......###..#.......##....................#.#.#.....#.##.......#.......#....#......#.#.....#...##........#...#..#.#.........#.##...........#.##...##......#....#.###.#.#.#...####..#....###..........#...#.....##....#.#.##.###..###.#.#.....#.##.........#..#...#.#.................##.###.........#.#....#.#...#.###..#.#....#..............#.##.#......#..#....##.#..#.......#..##..#..#.###......##..........#..#.##....#.#....#....#.#..#.............#.....#..#....#.##...#..#.#.#.........###..#..#.....#.....##..##...##....#..#......#............#....#..........#....#..##..#...#......#.....#.#....#..##..#....#.#.#...#................##..#.........#........#..##..#..#......###.....#..#.........#..#.##..........#.#..#..."at
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#0 // destination zp[2]:128 3333.6666666666665
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:128 1000001.0
char *memcpy::dst#2 // dst zp[2]:128 1033334.6666666667
char *memcpy::dst#4 // dst zp[2]:128 200002.0
unsigned int memcpy::num
__constant unsigned int memcpy::num#0 = (unsigned int)$28*$17 // num
void *memcpy::return
void *memcpy::source
char *memcpy::source#0 // source zp[2]:132 3333.6666666666665
char *memcpy::src
char *memcpy::src#1 // src zp[2]:132 2000002.0
char *memcpy::src#2 // src zp[2]:132 1025001.25
char *memcpy::src#4 // src zp[2]:132 100001.0
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:136 137500.25
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // dst zp[2]:130 2000002.0
char *memset::dst#2 // dst zp[2]:130 1366668.3333333335
char *memset::dst#4 // dst zp[2]:130 200002.0
char *memset::end
char *memset::end#0 // end zp[2]:132 183333.6666666667
unsigned int memset::num
unsigned int memset::num#2 // num zp[2]:132 100001.0
void *memset::return
void *memset::str
char *memset::str#1 // str zp[2]:130 10001.0
void *memset::str#3 // str zp[2]:130 3337.333333333333
void *memset::str#7 // str zp[2]:130 22.0
void *memset::str#8 // str zp[2]:130 20002.0
void newline()
char *newline::start
char *newline::start#0 // start zp[2]:130 7500.75
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // reg byte a 71.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
__constant void (*printf_number_buffer::putc#0)(char) = &cputc // putc
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 10001.0
void (*printf_str::putc)(char)
void (*printf_str::putc#15)(char) // putc zp[2]:140
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:138 10001.0
const char *printf_str::s#14 // s zp[2]:138 15502.0
const char *printf_str::s#15 // s zp[2]:138 1001.0
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#0 // uvalue zp[2]:134 1.3333333333333333
unsigned int printf_uint::uvalue#1 // uvalue zp[2]:134 1.3333333333333333
unsigned int printf_uint::uvalue#2 // uvalue zp[2]:134 1.3333333333333333
unsigned int printf_uint::uvalue#3 // uvalue zp[2]:134 1.3333333333333333
unsigned int printf_uint::uvalue#4 // uvalue zp[2]:134 1.3333333333333333
unsigned int printf_uint::uvalue#5 // uvalue zp[2]:134 1.3333333333333333
unsigned int printf_uint::uvalue#6 // uvalue zp[2]:134 11.5
void putchar(char code)
char putchar::code
char *putchar::loc
char *putchar::loc#0 // loc zp[2]:128 10001.0
char putchar::newChar
char putchar::newChar#0 // reg byte a 15001.5
__constant char rawmap[$100] = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void setcursor()
char setcursor::c
char setcursor::c#0 // reg byte x 75000.75
char setcursor::c#1 // reg byte a 200002.0
char *setcursor::loc
char *setcursor::loc#0 // loc zp[2]:128 100001.0
unsigned int test_slope(char x_inc , char y_inc)
char test_slope::$10 // reg byte a 202.0
char test_slope::$11 // reg byte a 202.0
char test_slope::$12 // reg byte a 202.0
char test_slope::$5 // reg byte a 202.0
char test_slope::$6 // reg byte a 202.0
char test_slope::$7 // reg byte a 202.0
char test_slope::$8 // reg byte a 202.0
char test_slope::$9 // reg byte a 202.0
char *test_slope::mapline
char *test_slope::mapline#1 // mapline zp[2]:138 101.0
char *test_slope::mapline#2 // mapline zp[2]:138 17.823529411764707
unsigned int test_slope::return
unsigned int test_slope::return#0 // return zp[2]:134 4.0
unsigned int test_slope::return#1 // return zp[2]:134 4.0
unsigned int test_slope::return#10 // return zp[2]:134 4.0
unsigned int test_slope::return#11 // return zp[2]:134 4.0
unsigned int test_slope::return#12 // return zp[2]:134 4.0
unsigned int test_slope::return#13 // return zp[2]:134 4.0
unsigned int test_slope::trees
unsigned int test_slope::trees#1 // trees zp[2]:134 202.0
unsigned int test_slope::trees#2 // trees zp[2]:134 31.5
unsigned int test_slope::trees#6 // trees zp[2]:134 20.2
char test_slope::x
char test_slope::x#1 // reg byte x 202.0
char test_slope::x#2 // reg byte x 202.0
char test_slope::x#3 // reg byte x 60.599999999999994
char test_slope::x#8 // reg byte x 27.545454545454547
char test_slope::x_inc
char test_slope::x_inc#10 // x_inc zp[1]:142 5.05
unsigned int test_slope::y
unsigned int test_slope::y#1 // y zp[2]:140 202.0
unsigned int test_slope::y#2 // y zp[2]:140 16.833333333333332
char test_slope::y_inc
char test_slope::y_inc#12 // y_inc zp[1]:144 30.3
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 2002.0
char utoa::$11 // reg byte x 202.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:140 300.42857142857144
char *utoa::buffer#14 // buffer zp[2]:140 1501.5
char *utoa::buffer#3 // buffer zp[2]:140 202.0
char *utoa::buffer#4 // buffer zp[2]:140 2002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:142 2002.0
char utoa::digit#2 // digit zp[1]:142 286.0
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:138 600.5999999999999
unsigned int *utoa::digit_values
char utoa::max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte x 500.5
char utoa::started#4 // reg byte x 1001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:134 1001.0
unsigned int utoa::value#1 // value zp[2]:134 56.0
unsigned int utoa::value#2 // value zp[2]:134 586.4285714285714
unsigned int utoa::value#6 // value zp[2]:134 1501.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:140 1375.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1000001.0
char utoa_append::digit#2 // reg byte x 1005001.5
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:134 2002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:138 333500.5
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:134 3667.333333333333
unsigned int utoa_append::value#1 // value zp[2]:134 2000002.0
unsigned int utoa_append::value#2 // value zp[2]:134 501834.16666666674

zp[1]:144 [ test_slope::y_inc#12 ]
reg byte x [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
zp[2]:134 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 test_slope::return#13 printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ]
zp[2]:130 [ memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
zp[1]:142 [ utoa::digit#2 utoa::digit#1 test_slope::x_inc#10 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:140 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 printf_str::putc#15 test_slope::y#2 test_slope::y#1 ]
zp[2]:132 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 memset::num#2 memset::end#0 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:143 [ cputc::c ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
reg byte a [ test_slope::$6 ]
reg byte a [ test_slope::$7 ]
reg byte a [ test_slope::$8 ]
reg byte a [ test_slope::$9 ]
reg byte a [ test_slope::$10 ]
reg byte a [ test_slope::$11 ]
reg byte a [ test_slope::$12 ]
reg byte a [ test_slope::$5 ]
reg byte a [ printf_str::c#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[2]:128 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
reg byte a [ putchar::newChar#0 ]
reg byte x [ setcursor::c#0 ]
reg byte a [ setcursor::c#1 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:138 [ utoa::digit_value#0 utoa_append::sub#0 printf_str::s#14 printf_str::s#15 printf_str::s#0 test_slope::mapline#2 test_slope::mapline#1 ]
zp[2]:136 [ memcpy::src_end#0 cursorLocation::$4 ]
mem[12] [ printf_buffer ]
