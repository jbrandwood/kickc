Identified constant variable (byte*) dtvSetCpuBankSegment1::cpuBank
Identified constant variable (byte*) DTV_BLITTER_ALU
Identified constant variable (byte) form_fields_cnt
Identified constant variable (byte) gfx_init_vic_bitmap::lines_cnt
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) $d010
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) $d017
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) $d01b
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) $d024
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) $d025
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) $d026
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) $d013
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) $d014
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d01a
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dc01
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc02
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc03
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dd00
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dd01
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd02
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd03
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dd0d
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) $314
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) $fffe
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  to:@4
@4: scope:[]  from @begin
  (byte*) DTV_FEATURE#0 ← ((byte*)) (word/dword/signed dword) $d03f
  (byte) DTV_FEATURE_ENABLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_FEATURE_DISABLE_TIL_RESET#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) DTV_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d03c
  (byte) DTV_LINEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BORDER_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_HIGHCOLOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_OVERSCAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_COLORRAM_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) DTV_BADLINE_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) DTV_CHUNKY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte*) DTV_PALETTE#0 ← ((byte*)) (word/dword/signed dword) $d200
  (byte[$10]) DTV_PALETTE_DEFAULT#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $36, (byte/word/signed word/dword/signed dword) $be, (byte/signed byte/word/signed word/dword/signed dword) $58, (byte/word/signed word/dword/signed dword) $db, (byte/word/signed word/dword/signed dword) $86, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) $29, (byte/signed byte/word/signed word/dword/signed dword) $26, (byte/signed byte/word/signed word/dword/signed dword) $3b, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $9a, (byte/signed byte/word/signed word/dword/signed dword) $a }
  (byte*) DTV_PLANEA_START_LO#0 ← ((byte*)) (word/dword/signed dword) $d03a
  (byte*) DTV_PLANEA_START_MI#0 ← ((byte*)) (word/dword/signed dword) $d03b
  (byte*) DTV_PLANEA_START_HI#0 ← ((byte*)) (word/dword/signed dword) $d045
  (byte*) DTV_PLANEA_STEP#0 ← ((byte*)) (word/dword/signed dword) $d046
  (byte*) DTV_PLANEA_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) $d038
  (byte*) DTV_PLANEA_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) $d039
  (byte*) DTV_PLANEB_START_LO#0 ← ((byte*)) (word/dword/signed dword) $d049
  (byte*) DTV_PLANEB_START_MI#0 ← ((byte*)) (word/dword/signed dword) $d04a
  (byte*) DTV_PLANEB_START_HI#0 ← ((byte*)) (word/dword/signed dword) $d04b
  (byte*) DTV_PLANEB_STEP#0 ← ((byte*)) (word/dword/signed dword) $d04c
  (byte*) DTV_PLANEB_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) $d047
  (byte*) DTV_PLANEB_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) $d048
  (byte*) DTV_SPRITE_BANK#0 ← ((byte*)) (word/dword/signed dword) $d04d
  (byte*) DTV_COLOR_BANK_LO#0 ← ((byte*)) (word/dword/signed dword) $d036
  (byte*) DTV_COLOR_BANK_HI#0 ← ((byte*)) (word/dword/signed dword) $d037
  (dword) DTV_COLOR_BANK_DEFAULT#0 ← (dword/signed dword) $1d800
  (byte*) DTV_GRAPHICS_VIC_BANK#0 ← ((byte*)) (word/dword/signed dword) $d03d
  (byte*) DTV_GRAPHICS_HICOL_BANK#0 ← ((byte*)) (word/dword/signed dword) $d03e
  to:@5
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@8 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 ← phi( gfx_init_plane_8bppchunky/(byte) dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_plane_8bppchunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_plane_8bppchunky::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 gfx_init_plane_charset8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#9 gfx_init_plane_charset8::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#10 gfx_init_plane_fill/(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 gfx_init_plane_fill::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#12 gfx_init_plane_horisontal/(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 gfx_init_plane_horisontal2/(byte) dtvSetCpuBankSegment1::cpuBankIdx#5 gfx_init_plane_horisontal2::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#6 gfx_init_plane_horisontal::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#4 gfx_init_plane_vertical/(byte) dtvSetCpuBankSegment1::cpuBankIdx#7 gfx_init_plane_vertical::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#8 )
  (byte*) dtvSetCpuBankSegment1::cpuBank#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) $ff
  *((byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return
@5: scope:[]  from @4
  (byte*) DTV_BLITTER_SRCA_LO#0 ← ((byte*)) (word/dword/signed dword) $d320
  (byte*) DTV_BLITTER_SRCA_MI#0 ← ((byte*)) (word/dword/signed dword) $d321
  (byte*) DTV_BLITTER_SRCA_HI#0 ← ((byte*)) (word/dword/signed dword) $d322
  (byte*) DTV_BLITTER_SRCA_MOD_LO#0 ← ((byte*)) (word/dword/signed dword) $d323
  (byte*) DTV_BLITTER_SRCA_MOD_HI#0 ← ((byte*)) (word/dword/signed dword) $d324
  (byte*) DTV_BLITTER_SRCA_LIN_LO#0 ← ((byte*)) (word/dword/signed dword) $d325
  (byte*) DTV_BLITTER_SRCA_LIN_HI#0 ← ((byte*)) (word/dword/signed dword) $d326
  (byte*) DTV_BLITTER_SRCA_STEP#0 ← ((byte*)) (word/dword/signed dword) $d327
  (byte*) DTV_BLITTER_SRCB_LO#0 ← ((byte*)) (word/dword/signed dword) $d328
  (byte*) DTV_BLITTER_SRCB_MI#0 ← ((byte*)) (word/dword/signed dword) $d329
  (byte*) DTV_BLITTER_SRCB_HI#0 ← ((byte*)) (word/dword/signed dword) $d32a
  (byte*) DTV_BLITTER_SRCB_MOD_LO#0 ← ((byte*)) (word/dword/signed dword) $d32b
  (byte*) DTV_BLITTER_SRCB_MOD_HI#0 ← ((byte*)) (word/dword/signed dword) $d32c
  (byte*) DTV_BLITTER_SRCB_LIN_LO#0 ← ((byte*)) (word/dword/signed dword) $d32d
  (byte*) DTV_BLITTER_SRCB_LIN_HI#0 ← ((byte*)) (word/dword/signed dword) $d32e
  (byte*) DTV_BLITTER_SRCB_STEP#0 ← ((byte*)) (word/dword/signed dword) $d32f
  (byte*) DTV_BLITTER_DEST_LO#0 ← ((byte*)) (word/dword/signed dword) $d330
  (byte*) DTV_BLITTER_DEST_MI#0 ← ((byte*)) (word/dword/signed dword) $d331
  (byte*) DTV_BLITTER_DEST_HI#0 ← ((byte*)) (word/dword/signed dword) $d332
  (byte*) DTV_BLITTER_DEST_MOD_LO#0 ← ((byte*)) (word/dword/signed dword) $d333
  (byte*) DTV_BLITTER_DEST_MOD_HI#0 ← ((byte*)) (word/dword/signed dword) $d334
  (byte*) DTV_BLITTER_DEST_LIN_LO#0 ← ((byte*)) (word/dword/signed dword) $d335
  (byte*) DTV_BLITTER_DEST_LIN_HI#0 ← ((byte*)) (word/dword/signed dword) $d336
  (byte*) DTV_BLITTER_DEST_STEP#0 ← ((byte*)) (word/dword/signed dword) $d337
  (byte*) DTV_BLITTER_LEN_LO#0 ← ((byte*)) (word/dword/signed dword) $d338
  (byte*) DTV_BLITTER_LEN_HI#0 ← ((byte*)) (word/dword/signed dword) $d339
  (byte*) DTV_BLITTER_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d33a
  (byte) DTV_BLIT_FORCE_START#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SRCA_FWD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SRCB_FWD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_DEST_FWD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_VIC_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) DTV_BLIT_CIA_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) DTV_BLIT_VBLANK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) DTV_BLIT_IRQ_EN#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte*) DTV_BLITTER_TRANSPARANCY#0 ← ((byte*)) (word/dword/signed dword) $d33b
  (byte) DTV_BLIT_DISABLE_B#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_WRITE_TRANSPARENT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_WRITE_NONTRANSPARENT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_TRANSPARANCY_NONE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) DTV_BLITTER_ALU#0 ← ((byte*)) (word/dword/signed dword) $d33e
  (byte) DTV_BLIT_SHIFT0#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) DTV_BLIT_SHIFT1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SHIFT2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SHIFT3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) DTV_BLIT_SHIFT4#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_SHIFT5#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) DTV_BLIT_SHIFT6#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) DTV_BLIT_SHIFT7#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) DTV_BLIT_AND#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) DTV_BLIT_NAND#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_NOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) DTV_BLIT_OR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $18
  (byte) DTV_BLIT_XOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) DTV_BLIT_XNOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte) DTV_BLIT_ADD#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) DTV_BLIT_SUB#0 ← (byte/signed byte/word/signed word/dword/signed dword) $38
  (byte*) DTV_BLITTER_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d33f
  (byte) DTV_BLIT_CLEAR_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SRCA_CONT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SRCB_CONT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_DEST_CONT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_STATUS_BUSY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_STATUS_IRQ#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@17
print_str_lines: scope:[print_str_lines]  from form_mode::@22 form_mode::@25
  (byte*) print_line_cursor#45 ← phi( form_mode::@22/(byte*) print_line_cursor#12 form_mode::@25/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#47 ← phi( form_mode::@22/(byte*) print_char_cursor#13 form_mode::@25/(byte*) print_char_cursor#16 )
  (byte*) print_str_lines::str#5 ← phi( form_mode::@22/(byte*) print_str_lines::str#1 form_mode::@25/(byte*) print_str_lines::str#2 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@11
  (byte*) print_line_cursor#37 ← phi( print_str_lines/(byte*) print_line_cursor#45 print_str_lines::@11/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#39 ← phi( print_str_lines/(byte*) print_char_cursor#47 print_str_lines::@11/(byte*) print_char_cursor#2 )
  (byte*) print_str_lines::str#3 ← phi( print_str_lines/(byte*) print_str_lines::str#5 print_str_lines::@11/(byte*) print_str_lines::str#6 )
  (bool~) print_str_lines::$0 ← *((byte*) print_str_lines::str#3) != (byte) '@'
  if((bool~) print_str_lines::$0) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#62 ← phi( print_str_lines::@1/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#48 ← phi( print_str_lines::@1/(byte*) print_char_cursor#39 )
  (byte*) print_str_lines::str#7 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#3 )
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@5
  (byte*) print_line_cursor#54 ← phi( print_str_lines::@2/(byte*) print_line_cursor#62 print_str_lines::@5/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#37 ← phi( print_str_lines::@2/(byte*) print_char_cursor#48 print_str_lines::@5/(byte*) print_char_cursor#49 )
  (byte*) print_str_lines::str#4 ← phi( print_str_lines::@2/(byte*) print_str_lines::str#7 print_str_lines::@5/(byte*) print_str_lines::str#8 )
  (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4)
  (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4
  (bool~) print_str_lines::$1 ← (byte) print_str_lines::ch#0 != (byte) '@'
  (bool~) print_str_lines::$2 ← ! (bool~) print_str_lines::$1
  if((bool~) print_str_lines::$2) goto print_str_lines::@5
  to:print_str_lines::@6
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@6
  (byte*) print_line_cursor#46 ← phi( print_str_lines::@4/(byte*) print_line_cursor#54 print_str_lines::@6/(byte*) print_line_cursor#55 )
  (byte*) print_char_cursor#49 ← phi( print_str_lines::@4/(byte*) print_char_cursor#37 print_str_lines::@6/(byte*) print_char_cursor#1 )
  (byte*) print_str_lines::str#8 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 print_str_lines::@6/(byte*) print_str_lines::str#9 )
  (byte) print_str_lines::ch#1 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 print_str_lines::@6/(byte) print_str_lines::ch#2 )
  (bool~) print_str_lines::$3 ← (byte) print_str_lines::ch#1 != (byte) '@'
  if((bool~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@7
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@4
  (byte*) print_line_cursor#55 ← phi( print_str_lines::@4/(byte*) print_line_cursor#54 )
  (byte*) print_str_lines::str#9 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 )
  (byte*) print_char_cursor#20 ← phi( print_str_lines::@4/(byte*) print_char_cursor#37 )
  (byte) print_str_lines::ch#2 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 )
  *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#2
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20
  to:print_str_lines::@5
print_str_lines::@7: scope:[print_str_lines]  from print_str_lines::@5
  (byte*) print_str_lines::str#10 ← phi( print_str_lines::@5/(byte*) print_str_lines::str#8 )
  (byte*) print_char_cursor#38 ← phi( print_str_lines::@5/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#36 ← phi( print_str_lines::@5/(byte*) print_line_cursor#46 )
  call print_ln 
  to:print_str_lines::@11
print_str_lines::@11: scope:[print_str_lines]  from print_str_lines::@7
  (byte*) print_str_lines::str#6 ← phi( print_str_lines::@7/(byte*) print_str_lines::str#10 )
  (byte*) print_char_cursor#21 ← phi( print_str_lines::@7/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#19 ← phi( print_str_lines::@7/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#21
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#20 ← phi( print_str_lines::@1/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#22 ← phi( print_str_lines::@1/(byte*) print_char_cursor#39 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#22
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#20
  return 
  to:@return
print_str_at: scope:[print_str_at]  from render_preset_name::@22
  (byte*) print_str_at::at#4 ← phi( render_preset_name::@22/(byte*) print_str_at::at#1 )
  (byte*) print_str_at::str#4 ← phi( render_preset_name::@22/(byte*) print_str_at::str#1 )
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (byte*) print_str_at::at#3 ← phi( print_str_at/(byte*) print_str_at::at#4 print_str_at::@2/(byte*) print_str_at::at#0 )
  (byte*) print_str_at::str#2 ← phi( print_str_at/(byte*) print_str_at::str#4 print_str_at::@2/(byte*) print_str_at::str#0 )
  (bool~) print_str_at::$0 ← *((byte*) print_str_at::str#2) != (byte) '@'
  if((bool~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  (byte*) print_str_at::at#2 ← phi( print_str_at::@1/(byte*) print_str_at::at#3 )
  (byte*) print_str_at::str#3 ← phi( print_str_at::@1/(byte*) print_str_at::str#2 )
  *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#3)
  (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2
  (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#3
  to:print_str_at::@1
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  return 
  to:@return
print_ln: scope:[print_ln]  from print_str_lines::@7
  (byte*) print_char_cursor#40 ← phi( print_str_lines::@7/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#38 ← phi( print_str_lines::@7/(byte*) print_line_cursor#36 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#23 ← phi( print_ln/(byte*) print_char_cursor#40 print_ln::@1/(byte*) print_char_cursor#23 )
  (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#38 print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) print_line_cursor#3 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#3 < (byte*) print_char_cursor#23
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#22 ← phi( print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_line_cursor#22
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#24 ← phi( print_ln::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#23 ← phi( print_ln::@2/(byte*) print_line_cursor#22 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#24
  return 
  to:@return
@17: scope:[]  from @5
  (byte*) print_char_cursor#76 ← phi( @5/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#76 ← phi( @5/(byte*) print_line_cursor#0 )
  (byte*) print_screen#55 ← phi( @5/(byte*) print_screen#0 )
  (byte[]) print_hextab#0 ← (const string) $69
  to:@24
print_cls: scope:[print_cls]  from form_mode::@21 form_mode::@24
  (byte*) print_screen#9 ← phi( form_mode::@21/(byte*) print_screen#5 form_mode::@24/(byte*) print_screen#6 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#9
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#10 ← phi( print_cls/(byte*) print_screen#9 print_cls::@1/(byte*) print_screen#10 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#10 + (word/signed word/dword/signed dword) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#11 ← phi( print_cls::@1/(byte*) print_screen#10 )
  (byte*) print_line_cursor#5 ← (byte*) print_screen#11
  (byte*) print_char_cursor#6 ← (byte*) print_line_cursor#5
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#25 ← phi( print_cls::@2/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#24 ← phi( print_cls::@2/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#25
  return 
  to:@return
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@23
  (byte*) print_set_screen::screen#2 ← phi( form_mode/(byte*) print_set_screen::screen#0 form_mode::@23/(byte*) print_set_screen::screen#1 )
  (byte*) print_screen#1 ← (byte*) print_set_screen::screen#2
  (byte*) print_line_cursor#7 ← (byte*) print_screen#1
  (byte*) print_char_cursor#8 ← (byte*) print_line_cursor#7
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  (byte*) print_char_cursor#26 ← phi( print_set_screen/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#25 ← phi( print_set_screen/(byte*) print_line_cursor#7 )
  (byte*) print_screen#12 ← phi( print_set_screen/(byte*) print_screen#1 )
  (byte*) print_screen#2 ← (byte*) print_screen#12
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#26
  return 
  to:@return
@24: scope:[]  from @17
  (byte*) print_char_cursor#75 ← phi( @17/(byte*) print_char_cursor#76 )
  (byte*) print_line_cursor#75 ← phi( @17/(byte*) print_line_cursor#76 )
  (byte*) print_screen#53 ← phi( @17/(byte*) print_screen#55 )
  (byte) KEY_DEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_RETURN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_CRSR_RIGHT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_F7#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) KEY_F1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_F3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) KEY_F5#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) KEY_CRSR_DOWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) KEY_3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) KEY_W#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) KEY_A#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) KEY_4#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) KEY_Z#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) KEY_S#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) KEY_E#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) KEY_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) KEY_5#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) KEY_R#0 ← (byte/signed byte/word/signed word/dword/signed dword) $11
  (byte) KEY_D#0 ← (byte/signed byte/word/signed word/dword/signed dword) $12
  (byte) KEY_6#0 ← (byte/signed byte/word/signed word/dword/signed dword) $13
  (byte) KEY_C#0 ← (byte/signed byte/word/signed word/dword/signed dword) $14
  (byte) KEY_F#0 ← (byte/signed byte/word/signed word/dword/signed dword) $15
  (byte) KEY_T#0 ← (byte/signed byte/word/signed word/dword/signed dword) $16
  (byte) KEY_X#0 ← (byte/signed byte/word/signed word/dword/signed dword) $17
  (byte) KEY_7#0 ← (byte/signed byte/word/signed word/dword/signed dword) $18
  (byte) KEY_Y#0 ← (byte/signed byte/word/signed word/dword/signed dword) $19
  (byte) KEY_G#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1a
  (byte) KEY_8#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  (byte) KEY_B#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1c
  (byte) KEY_H#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1d
  (byte) KEY_U#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1e
  (byte) KEY_V#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1f
  (byte) KEY_9#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) KEY_I#0 ← (byte/signed byte/word/signed word/dword/signed dword) $21
  (byte) KEY_J#0 ← (byte/signed byte/word/signed word/dword/signed dword) $22
  (byte) KEY_0#0 ← (byte/signed byte/word/signed word/dword/signed dword) $23
  (byte) KEY_M#0 ← (byte/signed byte/word/signed word/dword/signed dword) $24
  (byte) KEY_K#0 ← (byte/signed byte/word/signed word/dword/signed dword) $25
  (byte) KEY_O#0 ← (byte/signed byte/word/signed word/dword/signed dword) $26
  (byte) KEY_N#0 ← (byte/signed byte/word/signed word/dword/signed dword) $27
  (byte) KEY_PLUS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte) KEY_P#0 ← (byte/signed byte/word/signed word/dword/signed dword) $29
  (byte) KEY_L#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2a
  (byte) KEY_MINUS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2b
  (byte) KEY_DOT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2c
  (byte) KEY_COLON#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2d
  (byte) KEY_AT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2e
  (byte) KEY_COMMA#0 ← (byte/signed byte/word/signed word/dword/signed dword) $2f
  (byte) KEY_POUND#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) KEY_ASTERISK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) KEY_SEMICOLON#0 ← (byte/signed byte/word/signed word/dword/signed dword) $32
  (byte) KEY_HOME#0 ← (byte/signed byte/word/signed word/dword/signed dword) $33
  (byte) KEY_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $34
  (byte) KEY_EQUALS#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) KEY_ARROW_UP#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) KEY_SLASH#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte) KEY_1#0 ← (byte/signed byte/word/signed word/dword/signed dword) $38
  (byte) KEY_ARROW_LEFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) $39
  (byte) KEY_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3a
  (byte) KEY_2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3b
  (byte) KEY_SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3c
  (byte) KEY_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3d
  (byte) KEY_Q#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3e
  (byte) KEY_RUNSTOP#0 ← (byte/signed byte/word/signed word/dword/signed dword) $3f
  (byte[]) keyboard_char_keycodes#0 ← { (byte) KEY_AT#0, (byte) KEY_A#0, (byte) KEY_B#0, (byte) KEY_C#0, (byte) KEY_D#0, (byte) KEY_E#0, (byte) KEY_F#0, (byte) KEY_G#0, (byte) KEY_H#0, (byte) KEY_I#0, (byte) KEY_J#0, (byte) KEY_K#0, (byte) KEY_L#0, (byte) KEY_M#0, (byte) KEY_N#0, (byte) KEY_O#0, (byte) KEY_P#0, (byte) KEY_Q#0, (byte) KEY_R#0, (byte) KEY_S#0, (byte) KEY_T#0, (byte) KEY_U#0, (byte) KEY_V#0, (byte) KEY_W#0, (byte) KEY_X#0, (byte) KEY_Y#0, (byte) KEY_Z#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_POUND#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_ARROW_UP#0, (byte) KEY_ARROW_LEFT#0, (byte) KEY_SPACE#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_ASTERISK#0, (byte) KEY_PLUS#0, (byte) KEY_COMMA#0, (byte) KEY_MINUS#0, (byte) KEY_DOT#0, (byte) KEY_SLASH#0, (byte) KEY_0#0, (byte) KEY_1#0, (byte) KEY_2#0, (byte) KEY_3#0, (byte) KEY_4#0, (byte) KEY_5#0, (byte) KEY_6#0, (byte) KEY_7#0, (byte) KEY_8#0, (byte) KEY_9#0, (byte) KEY_COLON#0, (byte) KEY_SEMICOLON#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte) KEY_EQUALS#0, (byte/signed byte/word/signed word/dword/signed dword) $3f, (byte/signed byte/word/signed word/dword/signed dword) $3f }
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (byte/word/signed word/dword/signed dword) $fe, (byte/word/signed word/dword/signed dword) $fd, (byte/word/signed word/dword/signed dword) $fb, (byte/word/signed word/dword/signed dword) $f7, (byte/word/signed word/dword/signed dword) $ef, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $bf, (byte/signed byte/word/signed word/dword/signed dword) $7f }
  (byte[8]) keyboard_matrix_col_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $10, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $40, (byte/word/signed word/dword/signed dword) $80 }
  to:@28
keyboard_init: scope:[keyboard_init]  from main
  *((byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff
  *((byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  return 
  to:@return
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@8
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@8/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@28: scope:[]  from @24
  (byte*) print_char_cursor#74 ← phi( @24/(byte*) print_char_cursor#75 )
  (byte*) print_line_cursor#74 ← phi( @24/(byte*) print_line_cursor#75 )
  (byte*) print_screen#51 ← phi( @24/(byte*) print_screen#53 )
  (byte[8]) keyboard_events#0 ← { fill( 8, 0) }
  (byte) keyboard_events_size#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_modifiers#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_MODIFIER_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_MODIFIER_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_MODIFIER_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_MODIFIER_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte~) $0 ← (byte) KEY_MODIFIER_LSHIFT#0 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) KEY_MODIFIER_SHIFT#0 ← (byte~) $0
  (byte[8]) keyboard_scan_values#0 ← { fill( 8, 0) }
  to:@31
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@36
  (byte) keyboard_events_size#110 ← phi( form_control::@3/(byte) keyboard_events_size#48 gfx_mode::@36/(byte) keyboard_events_size#44 )
  (byte) keyboard_event_scan::keycode#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_event_scan::row#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@10
  (byte) keyboard_events_size#98 ← phi( keyboard_event_scan/(byte) keyboard_events_size#110 keyboard_event_scan::@10/(byte) keyboard_events_size#111 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#14 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@10/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  (byte) keyboard_events_size#78 ← phi( keyboard_event_scan::@8/(byte) keyboard_events_size#98 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@8/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@8/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$12 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$12
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row_scan#0 != *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#78 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_event_scan::@11
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#119 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#78 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) keyboard_event_scan::keycode#1 ← (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$14
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@20 keyboard_event_scan::@21
  (byte) keyboard_events_size#111 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#118 keyboard_event_scan::@21/(byte) keyboard_events_size#119 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#15 keyboard_event_scan::@21/(byte) keyboard_event_scan::keycode#1 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#6 keyboard_event_scan::@21/(byte) keyboard_event_scan::row#7 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$25 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$25) goto keyboard_event_scan::@8
  to:keyboard_event_scan::@23
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@12 keyboard_event_scan::@9
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#54 keyboard_event_scan::@9/(byte) keyboard_events_size#55 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#2 keyboard_event_scan::@9/(byte) keyboard_event_scan::keycode#12 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@9/(byte) keyboard_event_scan::col#0 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@9/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@9/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#1 ^ *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$18 ← ! (bool~) keyboard_event_scan::$17
  if((bool~) keyboard_event_scan::$18) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@16
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@13 keyboard_event_scan::@14 keyboard_event_scan::@18
  (byte) keyboard_events_size#54 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#37 keyboard_event_scan::@13/(byte) keyboard_events_size#79 keyboard_event_scan::@14/(byte) keyboard_events_size#1 keyboard_event_scan::@18/(byte) keyboard_events_size#2 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@13/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@14/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@18/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@13/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#8 keyboard_event_scan::@18/(byte) keyboard_event_scan::row_scan#9 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@13/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@14/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@18/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#5 keyboard_event_scan::@18/(byte) keyboard_event_scan::keycode#6 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$24 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@20
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_event_scan::col#8 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_events_size#18 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#37 )
  (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@13
  to:keyboard_event_scan::@17
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_events_size#79 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#18 )
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#6 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#8 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#13 )
  to:keyboard_event_scan::@12
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#14 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#18 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#8 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_event_scan::row_scan#2 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$21
  (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) keyboard_event_scan::$22) goto keyboard_event_scan::@14
  to:keyboard_event_scan::@18
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#14 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#19 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#38 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#10 )
  (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (byte/signed byte/word/signed word/dword/signed dword) $40
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#19) ← (byte/word/dword~) keyboard_event_scan::$23
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#19
  to:keyboard_event_scan::@12
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#14 )
  (byte) keyboard_event_scan::row_scan#9 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#20 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#38 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#10 )
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#20) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#20
  to:keyboard_event_scan::@12
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  (byte) keyboard_events_size#118 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#54 )
  (byte) keyboard_event_scan::keycode#15 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row#8 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#4 )
  *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@10
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_events_size#132 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#111 )
  (byte) keyboard_modifiers#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_event_pressed::keycode#0 ← (byte) KEY_LSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  (byte) keyboard_events_size#129 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#132 )
  (byte) keyboard_modifiers#34 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#6 ← phi( keyboard_event_scan::@23/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#6
  (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$2 ← ! (bool~) keyboard_event_scan::$1
  if((bool~) keyboard_event_scan::$2) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@24
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@26
  (byte) keyboard_events_size#125 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#128 keyboard_event_scan::@26/(byte) keyboard_events_size#129 )
  (byte) keyboard_modifiers#54 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#2 keyboard_event_scan::@26/(byte) keyboard_modifiers#34 )
  (byte) keyboard_event_pressed::keycode#1 ← (byte) KEY_RSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#120 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#125 )
  (byte) keyboard_modifiers#35 ← phi( keyboard_event_scan::@1/(byte) keyboard_modifiers#54 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$5 ← ! (bool~) keyboard_event_scan::$4
  if((bool~) keyboard_event_scan::$5) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@5
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  (byte) keyboard_events_size#128 ← phi( keyboard_event_scan::@26/(byte) keyboard_events_size#129 )
  (byte) keyboard_modifiers#17 ← phi( keyboard_event_scan::@26/(byte) keyboard_modifiers#34 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_modifiers#17 | (byte) KEY_MODIFIER_LSHIFT#0
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$26
  to:keyboard_event_scan::@1
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@27 keyboard_event_scan::@5
  (byte) keyboard_events_size#112 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#120 keyboard_event_scan::@5/(byte) keyboard_events_size#121 )
  (byte) keyboard_modifiers#55 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#35 keyboard_event_scan::@5/(byte) keyboard_modifiers#3 )
  (byte) keyboard_event_pressed::keycode#2 ← (byte) KEY_CTRL#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  (byte) keyboard_events_size#99 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#112 )
  (byte) keyboard_modifiers#36 ← phi( keyboard_event_scan::@2/(byte) keyboard_modifiers#55 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@6
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  (byte) keyboard_events_size#121 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#120 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#35 )
  (byte~) keyboard_event_scan::$27 ← (byte) keyboard_modifiers#18 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$27
  to:keyboard_event_scan::@2
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@28 keyboard_event_scan::@6
  (byte) keyboard_events_size#80 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#99 keyboard_event_scan::@6/(byte) keyboard_events_size#100 )
  (byte) keyboard_modifiers#56 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#36 keyboard_event_scan::@6/(byte) keyboard_modifiers#4 )
  (byte) keyboard_event_pressed::keycode#3 ← (byte) KEY_COMMODORE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#80 )
  (byte) keyboard_modifiers#37 ← phi( keyboard_event_scan::@3/(byte) keyboard_modifiers#56 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@3/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$11 ← ! (bool~) keyboard_event_scan::$10
  if((bool~) keyboard_event_scan::$11) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@7
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  (byte) keyboard_events_size#100 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#99 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#36 )
  (byte~) keyboard_event_scan::$28 ← (byte) keyboard_modifiers#19 | (byte) KEY_MODIFIER_CTRL#0
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$28
  to:keyboard_event_scan::@3
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_modifiers#38 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#39 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#56 )
  to:keyboard_event_scan::@return
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_events_size#40 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#37 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#20 | (byte) KEY_MODIFIER_COMMODORE#0
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@4 keyboard_event_scan::@7
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@4/(byte) keyboard_modifiers#38 keyboard_event_scan::@7/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@4/(byte) keyboard_events_size#39 keyboard_event_scan::@7/(byte) keyboard_events_size#40 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#21
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#21
  return 
  to:@return
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@2 keyboard_event_scan::@23 keyboard_event_scan::@3
  (byte) keyboard_event_pressed::keycode#4 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::keycode#1 keyboard_event_scan::@2/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@23/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@3/(byte) keyboard_event_pressed::keycode#3 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#10
  return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@34 gfx_mode::@51
  (byte) keyboard_events_size#22 ← phi( form_control::@34/(byte) keyboard_events_size#14 gfx_mode::@51/(byte) keyboard_events_size#9 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#22 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@3
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#41 ← phi( keyboard_event_get/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_get::return#0 ← (byte/word/signed word/dword/signed dword) $ff
  to:keyboard_event_get::@return
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#23 ← phi( keyboard_event_get/(byte) keyboard_events_size#22 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#23
  (byte) keyboard_event_get::return#1 ← *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@3
  (byte) keyboard_events_size#24 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#41 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#5 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#24
  return 
  to:@return
@31: scope:[]  from @28
  (byte) keyboard_modifiers#106 ← phi( @28/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#122 ← phi( @28/(byte) keyboard_events_size#0 )
  (byte*) print_char_cursor#72 ← phi( @28/(byte*) print_char_cursor#74 )
  (byte*) print_line_cursor#72 ← phi( @28/(byte*) print_line_cursor#74 )
  (byte*) print_screen#49 ← phi( @28/(byte*) print_screen#51 )
  (byte[$100]) bitmap_plot_xlo#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_xhi#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_ylo#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_yhi#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_bit#0 ← { fill( $100, 0) }
  to:@40
bitmap_init: scope:[bitmap_init]  from gfx_init_vic_bitmap
  (byte*) bitmap_init::bitmap#2 ← phi( gfx_init_vic_bitmap/(byte*) bitmap_init::bitmap#0 )
  (byte) bitmap_init::bits#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) bitmap_init::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  (byte*) bitmap_init::bitmap#1 ← phi( bitmap_init/(byte*) bitmap_init::bitmap#2 bitmap_init::@2/(byte*) bitmap_init::bitmap#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8
  *((byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  (byte~) bitmap_init::$1 ← > (byte*) bitmap_init::bitmap#1
  *((byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$1
  *((byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte~) bitmap_init::$2 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_init::bits#1 ← (byte~) bitmap_init::$2
  (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_init::$4 ← ! (bool~) bitmap_init::$3
  if((bool~) bitmap_init::$4) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@3/(byte) bitmap_init::bits#2 )
  (byte*) bitmap_init::bitmap#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 bitmap_init::@3/(byte*) bitmap_init::bitmap#4 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@3/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$5 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$5) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_init::bitmap#4 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (byte/word/signed word/dword/signed dword) $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::yoffs#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bitmap_init::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#0 bitmap_init::@6/(byte*) bitmap_init::yoffs#4 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#0 bitmap_init::@6/(byte) bitmap_init::y#1 )
  (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7
  *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$11 ← (byte~) bitmap_init::$10 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$12 ← ! (bool~) bitmap_init::$11
  if((bool~) bitmap_init::$12) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$15 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$15) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 )
  (word/signed word/dword/signed dword~) bitmap_init::$13 ← (byte/signed byte/word/signed word/dword/signed dword) $28 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*~) bitmap_init::$14 ← (byte*) bitmap_init::yoffs#3 + (word/signed word/dword/signed dword~) bitmap_init::$13
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$14
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from gfx_init_vic_bitmap::@3
  (byte*~) bitmap_clear::$0 ← ((byte*)) { *((byte[$100]) bitmap_plot_xhi#0 + (byte/signed byte/word/signed word/dword/signed dword) 0), *((byte[$100]) bitmap_plot_xlo#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) }
  (byte*) bitmap_clear::bitmap#0 ← (byte*~) bitmap_clear::$0
  (byte) bitmap_clear::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) bitmap_clear::y#0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#0 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#4 )
  (byte) bitmap_clear::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  (byte) bitmap_clear::y#3 ← phi( bitmap_clear::@1/(byte) bitmap_clear::y#4 bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) bitmap_clear::x#0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  (byte) bitmap_clear::x#1 ← (byte) bitmap_clear::x#2 + rangenext(0,$c7)
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::x#1 != rangelast(0,$c7)
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte*) bitmap_clear::bitmap#4 ← phi( bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  (byte) bitmap_clear::y#2 ← phi( bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::y#1 ← (byte) bitmap_clear::y#2 + rangenext(0,$27)
  (bool~) bitmap_clear::$2 ← (byte) bitmap_clear::y#1 != rangelast(0,$27)
  if((bool~) bitmap_clear::$2) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  (word) bitmap_plot::plotter_x#0 ← { *((byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4), *((byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) }
  (word) bitmap_plot::plotter_y#0 ← { *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4), *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) }
  (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$0
  (byte~) bitmap_plot::$1 ← *((byte*) bitmap_plot::plotter#0) | *((byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4)
  *((byte*) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return
bitmap_line: scope:[bitmap_line]  from gfx_init_vic_bitmap::@1
  (byte) bitmap_line::y1#13 ← phi( gfx_init_vic_bitmap::@1/(byte) bitmap_line::y1#0 )
  (byte) bitmap_line::y0#13 ← phi( gfx_init_vic_bitmap::@1/(byte) bitmap_line::y0#0 )
  (byte) bitmap_line::x1#1 ← phi( gfx_init_vic_bitmap::@1/(byte) bitmap_line::x1#0 )
  (byte) bitmap_line::x0#1 ← phi( gfx_init_vic_bitmap::@1/(byte) bitmap_line::x0#0 )
  (byte) bitmap_line::xd#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bitmap_line::yd#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_line::$0 ← (byte) bitmap_line::x0#1 < (byte) bitmap_line::x1#1
  if((bool~) bitmap_line::$0) goto bitmap_line::@1
  to:bitmap_line::@3
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#1 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#1 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x0#2 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte) bitmap_line::x1#2 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte~) bitmap_line::$11 ← (byte) bitmap_line::x1#2 - (byte) bitmap_line::x0#2
  (byte) bitmap_line::xd#1 ← (byte~) bitmap_line::$11
  (bool~) bitmap_line::$12 ← (byte) bitmap_line::y0#1 < (byte) bitmap_line::y1#1
  if((bool~) bitmap_line::$12) goto bitmap_line::@20
  to:bitmap_line::@7
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#2 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#2 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x1#3 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte) bitmap_line::x0#3 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte~) bitmap_line::$1 ← (byte) bitmap_line::x0#3 - (byte) bitmap_line::x1#3
  (byte) bitmap_line::xd#2 ← (byte~) bitmap_line::$1
  (bool~) bitmap_line::$2 ← (byte) bitmap_line::y0#2 < (byte) bitmap_line::y1#2
  if((bool~) bitmap_line::$2) goto bitmap_line::@10
  to:bitmap_line::@4
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@3
  (byte) bitmap_line::x0#11 ← phi( bitmap_line::@3/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#11 ← phi( bitmap_line::@3/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#3 ← phi( bitmap_line::@3/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y0#3 ← phi( bitmap_line::@3/(byte) bitmap_line::y0#2 )
  (byte) bitmap_line::y1#3 ← phi( bitmap_line::@3/(byte) bitmap_line::y1#2 )
  (byte~) bitmap_line::$7 ← (byte) bitmap_line::y1#3 - (byte) bitmap_line::y0#3
  (byte) bitmap_line::yd#1 ← (byte~) bitmap_line::$7
  (bool~) bitmap_line::$8 ← (byte) bitmap_line::yd#1 < (byte) bitmap_line::xd#3
  if((bool~) bitmap_line::$8) goto bitmap_line::@15
  to:bitmap_line::@17
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  (byte) bitmap_line::x0#10 ← phi( bitmap_line::@3/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#10 ← phi( bitmap_line::@3/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#4 ← phi( bitmap_line::@3/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y1#4 ← phi( bitmap_line::@3/(byte) bitmap_line::y1#2 )
  (byte) bitmap_line::y0#4 ← phi( bitmap_line::@3/(byte) bitmap_line::y0#2 )
  (byte~) bitmap_line::$3 ← (byte) bitmap_line::y0#4 - (byte) bitmap_line::y1#4
  (byte) bitmap_line::yd#2 ← (byte~) bitmap_line::$3
  (bool~) bitmap_line::$4 ← (byte) bitmap_line::yd#2 < (byte) bitmap_line::xd#4
  if((bool~) bitmap_line::$4) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@4
  (byte) bitmap_line::yd#5 ← phi( bitmap_line::@4/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::xd#5 ← phi( bitmap_line::@4/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::x0#4 ← phi( bitmap_line::@4/(byte) bitmap_line::x0#10 )
  (byte) bitmap_line::y1#5 ← phi( bitmap_line::@4/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line::x1#4 ← phi( bitmap_line::@4/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#4
  (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#5
  (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#4
  (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#5
  (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#5
  call bitmap_line_xdyi 
  to:bitmap_line::@29
bitmap_line::@29: scope:[bitmap_line]  from bitmap_line::@11
  to:bitmap_line::@return
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@4
  (byte) bitmap_line::xd#6 ← phi( bitmap_line::@4/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::yd#6 ← phi( bitmap_line::@4/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::y0#5 ← phi( bitmap_line::@4/(byte) bitmap_line::y0#4 )
  (byte) bitmap_line::x1#5 ← phi( bitmap_line::@4/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line::y1#6 ← phi( bitmap_line::@4/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#6
  (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#5
  (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#5
  (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#6
  (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#6
  call bitmap_line_ydxi 
  to:bitmap_line::@30
bitmap_line::@30: scope:[bitmap_line]  from bitmap_line::@5
  to:bitmap_line::@return
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@10
  (byte) bitmap_line::yd#7 ← phi( bitmap_line::@10/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::xd#7 ← phi( bitmap_line::@10/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::x0#5 ← phi( bitmap_line::@10/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y1#7 ← phi( bitmap_line::@10/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x1#6 ← phi( bitmap_line::@10/(byte) bitmap_line::x1#11 )
  (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#6
  (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#7
  (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#5
  (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#7
  (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#7
  call bitmap_line_xdyd 
  to:bitmap_line::@31
bitmap_line::@31: scope:[bitmap_line]  from bitmap_line::@15
  to:bitmap_line::@return
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@10
  (byte) bitmap_line::xd#8 ← phi( bitmap_line::@10/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::yd#8 ← phi( bitmap_line::@10/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::y1#8 ← phi( bitmap_line::@10/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x0#6 ← phi( bitmap_line::@10/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y0#6 ← phi( bitmap_line::@10/(byte) bitmap_line::y0#3 )
  (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#6
  (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#6
  (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#8
  (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#8
  (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#8
  call bitmap_line_ydxd 
  to:bitmap_line::@32
bitmap_line::@32: scope:[bitmap_line]  from bitmap_line::@17
  to:bitmap_line::@return
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#9 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y0#7 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte) bitmap_line::y1#9 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte~) bitmap_line::$17 ← (byte) bitmap_line::y1#9 - (byte) bitmap_line::y0#7
  (byte) bitmap_line::yd#3 ← (byte~) bitmap_line::$17
  (bool~) bitmap_line::$18 ← (byte) bitmap_line::yd#3 < (byte) bitmap_line::xd#9
  if((bool~) bitmap_line::$18) goto bitmap_line::@25
  to:bitmap_line::@27
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#10 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y1#10 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte) bitmap_line::y0#8 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte~) bitmap_line::$13 ← (byte) bitmap_line::y0#8 - (byte) bitmap_line::y1#10
  (byte) bitmap_line::yd#4 ← (byte~) bitmap_line::$13
  (bool~) bitmap_line::$14 ← (byte) bitmap_line::yd#4 < (byte) bitmap_line::xd#10
  if((bool~) bitmap_line::$14) goto bitmap_line::@21
  to:bitmap_line::@8
bitmap_line::@21: scope:[bitmap_line]  from bitmap_line::@7
  (byte) bitmap_line::yd#9 ← phi( bitmap_line::@7/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::xd#11 ← phi( bitmap_line::@7/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::x1#7 ← phi( bitmap_line::@7/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y0#9 ← phi( bitmap_line::@7/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x0#7 ← phi( bitmap_line::@7/(byte) bitmap_line::x0#12 )
  (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#7
  (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#9
  (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#7
  (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#11
  (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#9
  call bitmap_line_xdyd 
  to:bitmap_line::@33
bitmap_line::@33: scope:[bitmap_line]  from bitmap_line::@21
  to:bitmap_line::@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@7
  (byte) bitmap_line::xd#12 ← phi( bitmap_line::@7/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::yd#10 ← phi( bitmap_line::@7/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::y0#10 ← phi( bitmap_line::@7/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x1#8 ← phi( bitmap_line::@7/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y1#11 ← phi( bitmap_line::@7/(byte) bitmap_line::y1#10 )
  (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#11
  (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#8
  (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#10
  (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#12
  call bitmap_line_ydxd 
  to:bitmap_line::@34
bitmap_line::@34: scope:[bitmap_line]  from bitmap_line::@8
  to:bitmap_line::@return
bitmap_line::@25: scope:[bitmap_line]  from bitmap_line::@20
  (byte) bitmap_line::yd#11 ← phi( bitmap_line::@20/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::xd#13 ← phi( bitmap_line::@20/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::x1#9 ← phi( bitmap_line::@20/(byte) bitmap_line::x1#13 )
  (byte) bitmap_line::y0#11 ← phi( bitmap_line::@20/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line::x0#8 ← phi( bitmap_line::@20/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#8
  (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#11
  (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#9
  (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#13
  (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  call bitmap_line_xdyi 
  to:bitmap_line::@35
bitmap_line::@35: scope:[bitmap_line]  from bitmap_line::@25
  to:bitmap_line::@return
bitmap_line::@27: scope:[bitmap_line]  from bitmap_line::@20
  (byte) bitmap_line::xd#14 ← phi( bitmap_line::@20/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::yd#12 ← phi( bitmap_line::@20/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::y1#12 ← phi( bitmap_line::@20/(byte) bitmap_line::y1#9 )
  (byte) bitmap_line::x0#9 ← phi( bitmap_line::@20/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line::y0#12 ← phi( bitmap_line::@20/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#12
  (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#9
  (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#12
  (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#12
  (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#14
  call bitmap_line_ydxi 
  to:bitmap_line::@36
bitmap_line::@36: scope:[bitmap_line]  from bitmap_line::@27
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@29 bitmap_line::@30 bitmap_line::@31 bitmap_line::@32 bitmap_line::@33 bitmap_line::@34 bitmap_line::@35 bitmap_line::@36
  return 
  to:@return
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@11 bitmap_line::@25
  (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::x1#0 bitmap_line::@25/(byte) bitmap_line_xdyi::x1#1 )
  (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::xd#0 bitmap_line::@25/(byte) bitmap_line_xdyi::xd#1 )
  (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::y#0 bitmap_line::@25/(byte) bitmap_line_xdyi::y#1 )
  (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::x#0 bitmap_line::@25/(byte) bitmap_line_xdyi::x#1 )
  (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::yd#0 bitmap_line::@25/(byte) bitmap_line_xdyi::yd#1 )
  (byte~) bitmap_line_xdyi::$0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_xdyi::e#0 ← (byte~) bitmap_line_xdyi::$0
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  (byte) bitmap_line_xdyi::x1#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x1#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x1#2 )
  (byte) bitmap_line_xdyi::xd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::xd#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::xd#6 )
  (byte) bitmap_line_xdyi::yd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::yd#2 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::yd#5 )
  (byte) bitmap_line_xdyi::e#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#5 )
  (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  call bitmap_plot 
  to:bitmap_line_xdyi::@5
bitmap_line_xdyi::@5: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  (byte) bitmap_line_xdyi::y#7 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::y#3 )
  (byte) bitmap_line_xdyi::x1#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x1#5 )
  (byte) bitmap_line_xdyi::xd#2 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::xd#4 )
  (byte) bitmap_line_xdyi::yd#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::yd#4 )
  (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::e#5 )
  (byte) bitmap_line_xdyi::x#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x#3 )
  (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#4
  (byte~) bitmap_line_xdyi::$2 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#3
  (byte) bitmap_line_xdyi::e#1 ← (byte~) bitmap_line_xdyi::$2
  (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
  (bool~) bitmap_line_xdyi::$4 ← ! (bool~) bitmap_line_xdyi::$3
  if((bool~) bitmap_line_xdyi::$4) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5
  (byte) bitmap_line_xdyi::xd#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::xd#3 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::yd#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::yd#6 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::x#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x#7 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#2 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x1#3 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_xdyi::$7 ← (byte) bitmap_line_xdyi::x#5 != (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6
  if((bool~) bitmap_line_xdyi::$7) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@5
  (byte) bitmap_line_xdyi::yd#6 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::x#7 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#3 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x1#4 )
  (byte) bitmap_line_xdyi::xd#3 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::e#4 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#4 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#4
  (byte~) bitmap_line_xdyi::$5 ← (byte) bitmap_line_xdyi::e#4 - (byte) bitmap_line_xdyi::xd#3
  (byte) bitmap_line_xdyi::e#2 ← (byte~) bitmap_line_xdyi::$5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  return 
  to:@return
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@15 bitmap_line::@21
  (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::x1#0 bitmap_line::@21/(byte) bitmap_line_xdyd::x1#1 )
  (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::xd#0 bitmap_line::@21/(byte) bitmap_line_xdyd::xd#1 )
  (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::y#0 bitmap_line::@21/(byte) bitmap_line_xdyd::y#1 )
  (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::x#0 bitmap_line::@21/(byte) bitmap_line_xdyd::x#1 )
  (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::yd#0 bitmap_line::@21/(byte) bitmap_line_xdyd::yd#1 )
  (byte~) bitmap_line_xdyd::$0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_xdyd::e#0 ← (byte~) bitmap_line_xdyd::$0
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  (byte) bitmap_line_xdyd::x1#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x1#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x1#2 )
  (byte) bitmap_line_xdyd::xd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::xd#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::xd#6 )
  (byte) bitmap_line_xdyd::yd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::yd#2 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::yd#5 )
  (byte) bitmap_line_xdyd::e#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#5 )
  (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  call bitmap_plot 
  to:bitmap_line_xdyd::@5
bitmap_line_xdyd::@5: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  (byte) bitmap_line_xdyd::y#7 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::y#3 )
  (byte) bitmap_line_xdyd::x1#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x1#5 )
  (byte) bitmap_line_xdyd::xd#2 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::xd#4 )
  (byte) bitmap_line_xdyd::yd#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::yd#4 )
  (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::e#5 )
  (byte) bitmap_line_xdyd::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x#3 )
  (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#4
  (byte~) bitmap_line_xdyd::$2 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#3
  (byte) bitmap_line_xdyd::e#1 ← (byte~) bitmap_line_xdyd::$2
  (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
  (bool~) bitmap_line_xdyd::$4 ← ! (bool~) bitmap_line_xdyd::$3
  if((bool~) bitmap_line_xdyd::$4) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5
  (byte) bitmap_line_xdyd::xd#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::xd#3 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::yd#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::yd#6 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::x#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x#7 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#2 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x1#3 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_xdyd::$7 ← (byte) bitmap_line_xdyd::x#5 != (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6
  if((bool~) bitmap_line_xdyd::$7) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@5
  (byte) bitmap_line_xdyd::yd#6 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::x#7 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#3 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x1#4 )
  (byte) bitmap_line_xdyd::xd#3 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::e#4 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#4 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#4
  (byte~) bitmap_line_xdyd::$5 ← (byte) bitmap_line_xdyd::e#4 - (byte) bitmap_line_xdyd::xd#3
  (byte) bitmap_line_xdyd::e#2 ← (byte~) bitmap_line_xdyd::$5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  return 
  to:@return
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@27 bitmap_line::@5
  (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@5/(byte) bitmap_line_ydxi::y1#0 )
  (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@5/(byte) bitmap_line_ydxi::yd#0 )
  (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::y#1 bitmap_line::@5/(byte) bitmap_line_ydxi::y#0 )
  (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::x#1 bitmap_line::@5/(byte) bitmap_line_ydxi::x#0 )
  (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@5/(byte) bitmap_line_ydxi::xd#0 )
  (byte~) bitmap_line_ydxi::$0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_ydxi::e#0 ← (byte~) bitmap_line_ydxi::$0
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  (byte) bitmap_line_ydxi::y1#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y1#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y1#2 )
  (byte) bitmap_line_ydxi::yd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::yd#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::yd#6 )
  (byte) bitmap_line_ydxi::xd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::xd#2 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::xd#5 )
  (byte) bitmap_line_ydxi::e#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#5 )
  (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  call bitmap_plot 
  to:bitmap_line_ydxi::@5
bitmap_line_ydxi::@5: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  (byte) bitmap_line_ydxi::x#7 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::x#3 )
  (byte) bitmap_line_ydxi::y1#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y1#5 )
  (byte) bitmap_line_ydxi::yd#2 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::yd#4 )
  (byte) bitmap_line_ydxi::xd#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::xd#4 )
  (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::e#5 )
  (byte) bitmap_line_ydxi::y#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y#3 )
  (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#4
  (byte~) bitmap_line_ydxi::$2 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#3
  (byte) bitmap_line_ydxi::e#1 ← (byte~) bitmap_line_ydxi::$2
  (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
  (bool~) bitmap_line_ydxi::$4 ← ! (bool~) bitmap_line_ydxi::$3
  if((bool~) bitmap_line_ydxi::$4) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5
  (byte) bitmap_line_ydxi::yd#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::yd#3 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::xd#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::xd#6 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::y#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y#7 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#2 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y1#3 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_ydxi::$7 ← (byte) bitmap_line_ydxi::y#5 != (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6
  if((bool~) bitmap_line_ydxi::$7) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@5
  (byte) bitmap_line_ydxi::xd#6 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::y#7 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#3 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y1#4 )
  (byte) bitmap_line_ydxi::yd#3 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::e#4 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#4 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#4
  (byte~) bitmap_line_ydxi::$5 ← (byte) bitmap_line_ydxi::e#4 - (byte) bitmap_line_ydxi::yd#3
  (byte) bitmap_line_ydxi::e#2 ← (byte~) bitmap_line_ydxi::$5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  return 
  to:@return
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@17 bitmap_line::@8
  (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@8/(byte) bitmap_line_ydxd::y1#1 )
  (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@8/(byte) bitmap_line_ydxd::yd#1 )
  (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::y#0 bitmap_line::@8/(byte) bitmap_line_ydxd::y#1 )
  (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::x#0 bitmap_line::@8/(byte) bitmap_line_ydxd::x#1 )
  (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@8/(byte) bitmap_line_ydxd::xd#1 )
  (byte~) bitmap_line_ydxd::$0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line_ydxd::e#0 ← (byte~) bitmap_line_ydxd::$0
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  (byte) bitmap_line_ydxd::y1#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y1#6 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y1#2 )
  (byte) bitmap_line_ydxd::yd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::yd#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::yd#6 )
  (byte) bitmap_line_ydxd::xd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::xd#2 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::xd#5 )
  (byte) bitmap_line_ydxd::e#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  (byte) bitmap_line_ydxd::y#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#6 )
  (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#4
  call bitmap_plot 
  to:bitmap_line_ydxd::@5
bitmap_line_ydxd::@5: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  (byte) bitmap_line_ydxd::x#7 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::x#3 )
  (byte) bitmap_line_ydxd::y1#4 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y1#5 )
  (byte) bitmap_line_ydxd::yd#2 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::yd#4 )
  (byte) bitmap_line_ydxd::xd#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::xd#4 )
  (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::e#5 )
  (byte) bitmap_line_ydxd::y#5 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y#4 )
  (byte) bitmap_line_ydxd::y#2 ← (byte) bitmap_line_ydxd::y#5
  (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  (byte~) bitmap_line_ydxd::$2 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#3
  (byte) bitmap_line_ydxd::e#1 ← (byte~) bitmap_line_ydxd::$2
  (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
  (bool~) bitmap_line_ydxd::$4 ← ! (bool~) bitmap_line_ydxd::$3
  if((bool~) bitmap_line_ydxd::$4) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5
  (byte) bitmap_line_ydxd::yd#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::yd#3 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::xd#5 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::xd#6 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::y#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y#8 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#2 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y1#3 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y1#4 )
  (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_line_ydxd::$7 ← (byte) bitmap_line_ydxd::y#6 != (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6
  if((bool~) bitmap_line_ydxd::$7) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@5
  (byte) bitmap_line_ydxd::xd#6 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::y#8 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#3 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y1#4 )
  (byte) bitmap_line_ydxd::yd#3 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::e#4 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#4 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#4
  (byte~) bitmap_line_ydxd::$5 ← (byte) bitmap_line_ydxd::e#4 - (byte) bitmap_line_ydxd::yd#3
  (byte) bitmap_line_ydxd::e#2 ← (byte~) bitmap_line_ydxd::$5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  return 
  to:@return
main: scope:[main]  from @68
  (byte) form_field_idx#55 ← phi( @68/(byte) form_field_idx#36 )
  (byte) keyboard_modifiers#94 ← phi( @68/(byte) keyboard_modifiers#53 )
  (byte) keyboard_events_size#101 ← phi( @68/(byte) keyboard_events_size#53 )
  (signed byte) form_cursor_count#47 ← phi( @68/(signed byte) form_cursor_count#26 )
  (byte*) print_char_cursor#63 ← phi( @68/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#63 ← phi( @68/(byte*) print_line_cursor#44 )
  (byte*) print_screen#40 ← phi( @68/(byte*) print_screen#25 )
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  *((byte*) DTV_FEATURE#0) ← (byte) DTV_FEATURE_ENABLE#0
  call keyboard_init 
  to:main::@7
main::@7: scope:[main]  from main
  (byte) form_field_idx#48 ← phi( main/(byte) form_field_idx#55 )
  (byte) keyboard_modifiers#78 ← phi( main/(byte) keyboard_modifiers#94 )
  (byte) keyboard_events_size#81 ← phi( main/(byte) keyboard_events_size#101 )
  (signed byte) form_cursor_count#38 ← phi( main/(signed byte) form_cursor_count#47 )
  (byte*) print_char_cursor#57 ← phi( main/(byte*) print_char_cursor#63 )
  (byte*) print_line_cursor#56 ← phi( main/(byte*) print_line_cursor#63 )
  (byte*) print_screen#34 ← phi( main/(byte*) print_screen#40 )
  call gfx_init 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) form_field_idx#38 ← phi( main::@7/(byte) form_field_idx#48 )
  (byte) keyboard_modifiers#57 ← phi( main::@7/(byte) keyboard_modifiers#78 )
  (byte) keyboard_events_size#57 ← phi( main::@7/(byte) keyboard_events_size#81 )
  (signed byte) form_cursor_count#28 ← phi( main::@7/(signed byte) form_cursor_count#38 )
  (byte*) print_char_cursor#51 ← phi( main::@7/(byte*) print_char_cursor#57 )
  (byte*) print_line_cursor#48 ← phi( main::@7/(byte*) print_line_cursor#56 )
  (byte*) print_screen#27 ← phi( main::@7/(byte*) print_screen#34 )
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@8
  (byte) form_field_idx#26 ← phi( main::@10/(byte) form_field_idx#37 main::@8/(byte) form_field_idx#38 )
  (byte) keyboard_modifiers#40 ← phi( main::@10/(byte) keyboard_modifiers#8 main::@8/(byte) keyboard_modifiers#57 )
  (byte) keyboard_events_size#43 ← phi( main::@10/(byte) keyboard_events_size#7 main::@8/(byte) keyboard_events_size#57 )
  (signed byte) form_cursor_count#19 ← phi( main::@10/(signed byte) form_cursor_count#27 main::@8/(signed byte) form_cursor_count#28 )
  (byte*) print_char_cursor#42 ← phi( main::@10/(byte*) print_char_cursor#50 main::@8/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#40 ← phi( main::@10/(byte*) print_line_cursor#47 main::@8/(byte*) print_line_cursor#48 )
  (byte*) print_screen#20 ← phi( main::@10/(byte*) print_screen#26 main::@8/(byte*) print_screen#27 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) form_field_idx#25 ← phi( main::@1/(byte) form_field_idx#26 )
  (byte) keyboard_modifiers#39 ← phi( main::@1/(byte) keyboard_modifiers#40 )
  (byte) keyboard_events_size#42 ← phi( main::@1/(byte) keyboard_events_size#43 )
  (signed byte) form_cursor_count#18 ← phi( main::@1/(signed byte) form_cursor_count#19 )
  (byte*) print_char_cursor#41 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#39 ← phi( main::@1/(byte*) print_line_cursor#40 )
  (byte*) print_screen#19 ← phi( main::@1/(byte*) print_screen#20 )
  call form_mode 
  to:main::@9
main::@9: scope:[main]  from main::@2
  (byte) form_field_idx#11 ← phi( main::@2/(byte) form_field_idx#3 )
  (byte) keyboard_modifiers#22 ← phi( main::@2/(byte) keyboard_modifiers#13 )
  (byte) keyboard_events_size#25 ← phi( main::@2/(byte) keyboard_events_size#13 )
  (signed byte) form_cursor_count#10 ← phi( main::@2/(signed byte) form_cursor_count#3 )
  (byte*) print_char_cursor#27 ← phi( main::@2/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#26 ← phi( main::@2/(byte*) print_line_cursor#17 )
  (byte*) print_screen#13 ← phi( main::@2/(byte*) print_screen#7 )
  (byte*) print_screen#3 ← (byte*) print_screen#13
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#27
  (signed byte) form_cursor_count#0 ← (signed byte) form_cursor_count#10
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#25
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#22
  (byte) form_field_idx#0 ← (byte) form_field_idx#11
  call gfx_mode 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) form_field_idx#37 ← phi( main::@9/(byte) form_field_idx#0 )
  (signed byte) form_cursor_count#27 ← phi( main::@9/(signed byte) form_cursor_count#0 )
  (byte*) print_char_cursor#50 ← phi( main::@9/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#47 ← phi( main::@9/(byte*) print_line_cursor#9 )
  (byte*) print_screen#26 ← phi( main::@9/(byte*) print_screen#3 )
  (byte) keyboard_modifiers#23 ← phi( main::@9/(byte) keyboard_modifiers#11 )
  (byte) keyboard_events_size#26 ← phi( main::@9/(byte) keyboard_events_size#11 )
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#26
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#23
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) form_field_idx#12 ← phi( main::@1/(byte) form_field_idx#26 )
  (byte) keyboard_modifiers#24 ← phi( main::@1/(byte) keyboard_modifiers#40 )
  (byte) keyboard_events_size#27 ← phi( main::@1/(byte) keyboard_events_size#43 )
  (signed byte) form_cursor_count#11 ← phi( main::@1/(signed byte) form_cursor_count#19 )
  (byte*) print_char_cursor#28 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#27 ← phi( main::@1/(byte*) print_line_cursor#40 )
  (byte*) print_screen#14 ← phi( main::@1/(byte*) print_screen#20 )
  (byte*) print_screen#4 ← (byte*) print_screen#14
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#27
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#28
  (signed byte) form_cursor_count#1 ← (signed byte) form_cursor_count#11
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#27
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#24
  (byte) form_field_idx#1 ← (byte) form_field_idx#12
  return 
  to:@return
@40: scope:[]  from @31
  (byte) keyboard_modifiers#101 ← phi( @31/(byte) keyboard_modifiers#106 )
  (byte) keyboard_events_size#113 ← phi( @31/(byte) keyboard_events_size#122 )
  (byte*) print_char_cursor#69 ← phi( @31/(byte*) print_char_cursor#72 )
  (byte*) print_line_cursor#69 ← phi( @31/(byte*) print_line_cursor#72 )
  (byte*) print_screen#46 ← phi( @31/(byte*) print_screen#49 )
  (byte*) VIC_SCREEN0#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte*) VIC_SCREEN1#0 ← ((byte*)) (word/signed word/dword/signed dword) $4400
  (byte*) VIC_SCREEN2#0 ← ((byte*)) (word/signed word/dword/signed dword) $4800
  (byte*) VIC_SCREEN3#0 ← ((byte*)) (word/signed word/dword/signed dword) $4c00
  (byte*) VIC_SCREEN4#0 ← ((byte*)) (word/signed word/dword/signed dword) $5000
  (byte*) VIC_CHARSET_ROM#0 ← ((byte*)) (word/signed word/dword/signed dword) $5800
  (byte*) VIC_BITMAP#0 ← ((byte*)) (word/signed word/dword/signed dword) $6000
  (dword) PLANE_8BPP_CHUNKY#0 ← (dword/signed dword) $20000
  (dword) PLANE_HORISONTAL#0 ← (dword/signed dword) $30000
  (dword) PLANE_VERTICAL#0 ← (dword/signed dword) $32000
  (dword) PLANE_HORISONTAL2#0 ← (dword/signed dword) $34000
  (dword) PLANE_VERTICAL2#0 ← (dword/signed dword) $36000
  (dword) PLANE_BLANK#0 ← (dword/signed dword) $38000
  (dword) PLANE_FULL#0 ← (dword/signed dword) $3a000
  (dword) PLANE_CHARSET8#0 ← (dword/signed dword) $3c000
  to:@43
get_plane: scope:[get_plane]  from gfx_mode::@46 gfx_mode::@9
  (byte) get_plane::idx#2 ← phi( gfx_mode::@46/(byte) get_plane::idx#1 gfx_mode::@9/(byte) get_plane::idx#0 )
  (bool~) get_plane::$0 ← (byte) get_plane::idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) get_plane::$0) goto get_plane::@1
  to:get_plane::@28
get_plane::@1: scope:[get_plane]  from get_plane
  (dword~) get_plane::$29 ← ((dword)) (byte*) VIC_SCREEN0#0
  (dword) get_plane::return#0 ← (dword~) get_plane::$29
  to:get_plane::@return
get_plane::@28: scope:[get_plane]  from get_plane
  (byte) get_plane::idx#3 ← phi( get_plane/(byte) get_plane::idx#2 )
  (bool~) get_plane::$1 ← (byte) get_plane::idx#3 == (byte/signed byte/word/signed word/dword/signed dword) 1
  if((bool~) get_plane::$1) goto get_plane::@2
  to:get_plane::@29
get_plane::@2: scope:[get_plane]  from get_plane::@28
  (dword~) get_plane::$28 ← ((dword)) (byte*) VIC_SCREEN1#0
  (dword) get_plane::return#1 ← (dword~) get_plane::$28
  to:get_plane::@return
get_plane::@29: scope:[get_plane]  from get_plane::@28
  (byte) get_plane::idx#4 ← phi( get_plane::@28/(byte) get_plane::idx#3 )
  (bool~) get_plane::$2 ← (byte) get_plane::idx#4 == (byte/signed byte/word/signed word/dword/signed dword) 2
  if((bool~) get_plane::$2) goto get_plane::@3
  to:get_plane::@30
get_plane::@3: scope:[get_plane]  from get_plane::@29
  (dword~) get_plane::$27 ← ((dword)) (byte*) VIC_SCREEN2#0
  (dword) get_plane::return#2 ← (dword~) get_plane::$27
  to:get_plane::@return
get_plane::@30: scope:[get_plane]  from get_plane::@29
  (byte) get_plane::idx#5 ← phi( get_plane::@29/(byte) get_plane::idx#4 )
  (bool~) get_plane::$3 ← (byte) get_plane::idx#5 == (byte/signed byte/word/signed word/dword/signed dword) 3
  if((bool~) get_plane::$3) goto get_plane::@4
  to:get_plane::@31
get_plane::@4: scope:[get_plane]  from get_plane::@30
  (dword~) get_plane::$26 ← ((dword)) (byte*) VIC_SCREEN3#0
  (dword) get_plane::return#3 ← (dword~) get_plane::$26
  to:get_plane::@return
get_plane::@31: scope:[get_plane]  from get_plane::@30
  (byte) get_plane::idx#6 ← phi( get_plane::@30/(byte) get_plane::idx#5 )
  (bool~) get_plane::$4 ← (byte) get_plane::idx#6 == (byte/signed byte/word/signed word/dword/signed dword) 4
  if((bool~) get_plane::$4) goto get_plane::@5
  to:get_plane::@32
get_plane::@5: scope:[get_plane]  from get_plane::@31
  (dword~) get_plane::$25 ← ((dword)) (byte*) VIC_BITMAP#0
  (dword) get_plane::return#4 ← (dword~) get_plane::$25
  to:get_plane::@return
get_plane::@32: scope:[get_plane]  from get_plane::@31
  (byte) get_plane::idx#7 ← phi( get_plane::@31/(byte) get_plane::idx#6 )
  (bool~) get_plane::$5 ← (byte) get_plane::idx#7 == (byte/signed byte/word/signed word/dword/signed dword) 5
  if((bool~) get_plane::$5) goto get_plane::@6
  to:get_plane::@33
get_plane::@6: scope:[get_plane]  from get_plane::@32
  (dword~) get_plane::$24 ← ((dword)) (byte*) VIC_CHARSET_ROM#0
  (dword) get_plane::return#5 ← (dword~) get_plane::$24
  to:get_plane::@return
get_plane::@33: scope:[get_plane]  from get_plane::@32
  (byte) get_plane::idx#8 ← phi( get_plane::@32/(byte) get_plane::idx#7 )
  (bool~) get_plane::$6 ← (byte) get_plane::idx#8 == (byte/signed byte/word/signed word/dword/signed dword) 6
  if((bool~) get_plane::$6) goto get_plane::@7
  to:get_plane::@34
get_plane::@7: scope:[get_plane]  from get_plane::@33
  (dword~) get_plane::$23 ← ((dword)) (dword) PLANE_8BPP_CHUNKY#0
  (dword) get_plane::return#6 ← (dword~) get_plane::$23
  to:get_plane::@return
get_plane::@34: scope:[get_plane]  from get_plane::@33
  (byte) get_plane::idx#9 ← phi( get_plane::@33/(byte) get_plane::idx#8 )
  (bool~) get_plane::$7 ← (byte) get_plane::idx#9 == (byte/signed byte/word/signed word/dword/signed dword) 7
  if((bool~) get_plane::$7) goto get_plane::@8
  to:get_plane::@35
get_plane::@8: scope:[get_plane]  from get_plane::@34
  (dword~) get_plane::$22 ← ((dword)) (dword) PLANE_HORISONTAL#0
  (dword) get_plane::return#7 ← (dword~) get_plane::$22
  to:get_plane::@return
get_plane::@35: scope:[get_plane]  from get_plane::@34
  (byte) get_plane::idx#10 ← phi( get_plane::@34/(byte) get_plane::idx#9 )
  (bool~) get_plane::$8 ← (byte) get_plane::idx#10 == (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) get_plane::$8) goto get_plane::@9
  to:get_plane::@36
get_plane::@9: scope:[get_plane]  from get_plane::@35
  (dword~) get_plane::$21 ← ((dword)) (dword) PLANE_VERTICAL#0
  (dword) get_plane::return#8 ← (dword~) get_plane::$21
  to:get_plane::@return
get_plane::@36: scope:[get_plane]  from get_plane::@35
  (byte) get_plane::idx#11 ← phi( get_plane::@35/(byte) get_plane::idx#10 )
  (bool~) get_plane::$9 ← (byte) get_plane::idx#11 == (byte/signed byte/word/signed word/dword/signed dword) 9
  if((bool~) get_plane::$9) goto get_plane::@10
  to:get_plane::@37
get_plane::@10: scope:[get_plane]  from get_plane::@36
  (dword~) get_plane::$20 ← ((dword)) (dword) PLANE_HORISONTAL2#0
  (dword) get_plane::return#9 ← (dword~) get_plane::$20
  to:get_plane::@return
get_plane::@37: scope:[get_plane]  from get_plane::@36
  (byte) get_plane::idx#12 ← phi( get_plane::@36/(byte) get_plane::idx#11 )
  (bool~) get_plane::$10 ← (byte) get_plane::idx#12 == (byte/signed byte/word/signed word/dword/signed dword) $a
  if((bool~) get_plane::$10) goto get_plane::@11
  to:get_plane::@38
get_plane::@11: scope:[get_plane]  from get_plane::@37
  (dword~) get_plane::$19 ← ((dword)) (dword) PLANE_VERTICAL2#0
  (dword) get_plane::return#10 ← (dword~) get_plane::$19
  to:get_plane::@return
get_plane::@38: scope:[get_plane]  from get_plane::@37
  (byte) get_plane::idx#13 ← phi( get_plane::@37/(byte) get_plane::idx#12 )
  (bool~) get_plane::$11 ← (byte) get_plane::idx#13 == (byte/signed byte/word/signed word/dword/signed dword) $b
  if((bool~) get_plane::$11) goto get_plane::@12
  to:get_plane::@39
get_plane::@12: scope:[get_plane]  from get_plane::@38
  (dword~) get_plane::$18 ← ((dword)) (dword) PLANE_CHARSET8#0
  (dword) get_plane::return#11 ← (dword~) get_plane::$18
  to:get_plane::@return
get_plane::@39: scope:[get_plane]  from get_plane::@38
  (byte) get_plane::idx#14 ← phi( get_plane::@38/(byte) get_plane::idx#13 )
  (bool~) get_plane::$12 ← (byte) get_plane::idx#14 == (byte/signed byte/word/signed word/dword/signed dword) $c
  if((bool~) get_plane::$12) goto get_plane::@13
  to:get_plane::@40
get_plane::@13: scope:[get_plane]  from get_plane::@39
  (dword~) get_plane::$17 ← ((dword)) (dword) PLANE_BLANK#0
  (dword) get_plane::return#12 ← (dword~) get_plane::$17
  to:get_plane::@return
get_plane::@40: scope:[get_plane]  from get_plane::@39
  (byte) get_plane::idx#15 ← phi( get_plane::@39/(byte) get_plane::idx#14 )
  (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (byte/signed byte/word/signed word/dword/signed dword) $d
  (bool~) get_plane::$14 ← ! (bool~) get_plane::$13
  if((bool~) get_plane::$14) goto get_plane::@14
  to:get_plane::@41
get_plane::@14: scope:[get_plane]  from get_plane::@40
  to:get_plane::@27
get_plane::@41: scope:[get_plane]  from get_plane::@40
  (dword~) get_plane::$16 ← ((dword)) (dword) PLANE_FULL#0
  (dword) get_plane::return#13 ← (dword~) get_plane::$16
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@2 get_plane::@27 get_plane::@3 get_plane::@4 get_plane::@41 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  (dword) get_plane::return#18 ← phi( get_plane::@1/(dword) get_plane::return#0 get_plane::@10/(dword) get_plane::return#9 get_plane::@11/(dword) get_plane::return#10 get_plane::@12/(dword) get_plane::return#11 get_plane::@13/(dword) get_plane::return#12 get_plane::@2/(dword) get_plane::return#1 get_plane::@27/(dword) get_plane::return#15 get_plane::@3/(dword) get_plane::return#2 get_plane::@4/(dword) get_plane::return#3 get_plane::@41/(dword) get_plane::return#13 get_plane::@5/(dword) get_plane::return#4 get_plane::@6/(dword) get_plane::return#5 get_plane::@7/(dword) get_plane::return#6 get_plane::@8/(dword) get_plane::return#7 get_plane::@9/(dword) get_plane::return#8 )
  (dword) get_plane::return#14 ← (dword) get_plane::return#18
  return 
  to:@return
get_plane::@27: scope:[get_plane]  from get_plane::@14
  (dword~) get_plane::$15 ← ((dword)) (byte*) VIC_SCREEN0#0
  (dword) get_plane::return#15 ← (dword~) get_plane::$15
  to:get_plane::@return
get_vic_screen: scope:[get_vic_screen]  from gfx_mode::@47 gfx_mode::@49
  (byte) get_vic_screen::idx#2 ← phi( gfx_mode::@47/(byte) get_vic_screen::idx#0 gfx_mode::@49/(byte) get_vic_screen::idx#1 )
  (bool~) get_vic_screen::$0 ← (byte) get_vic_screen::idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) get_vic_screen::$0) goto get_vic_screen::@1
  to:get_vic_screen::@10
get_vic_screen::@1: scope:[get_vic_screen]  from get_vic_screen
  (byte*) get_vic_screen::return#0 ← (byte*) VIC_SCREEN0#0
  to:get_vic_screen::@return
get_vic_screen::@10: scope:[get_vic_screen]  from get_vic_screen
  (byte) get_vic_screen::idx#3 ← phi( get_vic_screen/(byte) get_vic_screen::idx#2 )
  (bool~) get_vic_screen::$1 ← (byte) get_vic_screen::idx#3 == (byte/signed byte/word/signed word/dword/signed dword) 1
  if((bool~) get_vic_screen::$1) goto get_vic_screen::@2
  to:get_vic_screen::@11
get_vic_screen::@2: scope:[get_vic_screen]  from get_vic_screen::@10
  (byte*) get_vic_screen::return#1 ← (byte*) VIC_SCREEN1#0
  to:get_vic_screen::@return
get_vic_screen::@11: scope:[get_vic_screen]  from get_vic_screen::@10
  (byte) get_vic_screen::idx#4 ← phi( get_vic_screen::@10/(byte) get_vic_screen::idx#3 )
  (bool~) get_vic_screen::$2 ← (byte) get_vic_screen::idx#4 == (byte/signed byte/word/signed word/dword/signed dword) 2
  if((bool~) get_vic_screen::$2) goto get_vic_screen::@3
  to:get_vic_screen::@12
get_vic_screen::@3: scope:[get_vic_screen]  from get_vic_screen::@11
  (byte*) get_vic_screen::return#2 ← (byte*) VIC_SCREEN2#0
  to:get_vic_screen::@return
get_vic_screen::@12: scope:[get_vic_screen]  from get_vic_screen::@11
  (byte) get_vic_screen::idx#5 ← phi( get_vic_screen::@11/(byte) get_vic_screen::idx#4 )
  (bool~) get_vic_screen::$3 ← (byte) get_vic_screen::idx#5 == (byte/signed byte/word/signed word/dword/signed dword) 3
  if((bool~) get_vic_screen::$3) goto get_vic_screen::@4
  to:get_vic_screen::@13
get_vic_screen::@4: scope:[get_vic_screen]  from get_vic_screen::@12
  (byte*) get_vic_screen::return#3 ← (byte*) VIC_SCREEN3#0
  to:get_vic_screen::@return
get_vic_screen::@13: scope:[get_vic_screen]  from get_vic_screen::@12
  (byte) get_vic_screen::idx#6 ← phi( get_vic_screen::@12/(byte) get_vic_screen::idx#5 )
  (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) get_vic_screen::$5 ← ! (bool~) get_vic_screen::$4
  if((bool~) get_vic_screen::$5) goto get_vic_screen::@5
  to:get_vic_screen::@14
get_vic_screen::@5: scope:[get_vic_screen]  from get_vic_screen::@13
  to:get_vic_screen::@9
get_vic_screen::@14: scope:[get_vic_screen]  from get_vic_screen::@13
  (byte*) get_vic_screen::return#4 ← (byte*) VIC_SCREEN4#0
  to:get_vic_screen::@return
get_vic_screen::@return: scope:[get_vic_screen]  from get_vic_screen::@1 get_vic_screen::@14 get_vic_screen::@2 get_vic_screen::@3 get_vic_screen::@4 get_vic_screen::@9
  (byte*) get_vic_screen::return#9 ← phi( get_vic_screen::@1/(byte*) get_vic_screen::return#0 get_vic_screen::@14/(byte*) get_vic_screen::return#4 get_vic_screen::@2/(byte*) get_vic_screen::return#1 get_vic_screen::@3/(byte*) get_vic_screen::return#2 get_vic_screen::@4/(byte*) get_vic_screen::return#3 get_vic_screen::@9/(byte*) get_vic_screen::return#6 )
  (byte*) get_vic_screen::return#5 ← (byte*) get_vic_screen::return#9
  return 
  to:@return
get_vic_screen::@9: scope:[get_vic_screen]  from get_vic_screen::@5
  (byte*) get_vic_screen::return#6 ← (byte*) VIC_SCREEN0#0
  to:get_vic_screen::@return
get_vic_charset: scope:[get_vic_charset]  from gfx_mode::@48
  (byte) get_vic_charset::idx#1 ← phi( gfx_mode::@48/(byte) get_vic_charset::idx#0 )
  (bool~) get_vic_charset::$0 ← (byte) get_vic_charset::idx#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) get_vic_charset::$0) goto get_vic_charset::@1
  to:get_vic_charset::@4
get_vic_charset::@1: scope:[get_vic_charset]  from get_vic_charset
  (byte*) get_vic_charset::return#0 ← (byte*) VIC_CHARSET_ROM#0
  to:get_vic_charset::@return
get_vic_charset::@4: scope:[get_vic_charset]  from get_vic_charset
  (byte) get_vic_charset::idx#2 ← phi( get_vic_charset/(byte) get_vic_charset::idx#1 )
  (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) get_vic_charset::$2 ← ! (bool~) get_vic_charset::$1
  if((bool~) get_vic_charset::$2) goto get_vic_charset::@2
  to:get_vic_charset::@5
get_vic_charset::@2: scope:[get_vic_charset]  from get_vic_charset::@4
  to:get_vic_charset::@3
get_vic_charset::@5: scope:[get_vic_charset]  from get_vic_charset::@4
  (byte*) get_vic_charset::return#1 ← (byte*) VIC_BITMAP#0
  to:get_vic_charset::@return
get_vic_charset::@return: scope:[get_vic_charset]  from get_vic_charset::@1 get_vic_charset::@3 get_vic_charset::@5
  (byte*) get_vic_charset::return#5 ← phi( get_vic_charset::@1/(byte*) get_vic_charset::return#0 get_vic_charset::@3/(byte*) get_vic_charset::return#3 get_vic_charset::@5/(byte*) get_vic_charset::return#1 )
  (byte*) get_vic_charset::return#2 ← (byte*) get_vic_charset::return#5
  return 
  to:@return
get_vic_charset::@3: scope:[get_vic_charset]  from get_vic_charset::@2
  (byte*) get_vic_charset::return#3 ← (byte*) VIC_CHARSET_ROM#0
  to:get_vic_charset::@return
@43: scope:[]  from @40
  (byte) keyboard_modifiers#95 ← phi( @40/(byte) keyboard_modifiers#101 )
  (byte) keyboard_events_size#102 ← phi( @40/(byte) keyboard_events_size#113 )
  (byte*) print_char_cursor#64 ← phi( @40/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#64 ← phi( @40/(byte*) print_line_cursor#69 )
  (byte*) print_screen#41 ← phi( @40/(byte*) print_screen#46 )
  (byte*) FORM_SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) FORM_CHARSET#0 ← ((byte*)) (word/signed word/dword/signed dword) $1800
  (string~) $1 ← (const string) $70 + (const string) $71
  (string~) $2 ← (string~) $1 + (const string) $72
  (string~) $3 ← (string~) $2 + (const string) $73
  (string~) $4 ← (string~) $3 + (const string) $74
  (string~) $5 ← (string~) $4 + (const string) $75
  (string~) $6 ← (string~) $5 + (const string) $76
  (string~) $7 ← (string~) $6 + (const string) $77
  (string~) $8 ← (string~) $7 + (const string) $78
  (string~) $9 ← (string~) $8 + (const string) $79
  (string~) $10 ← (string~) $9 + (const string) $80
  (string~) $11 ← (string~) $10 + (const string) $81
  (string~) $12 ← (string~) $11 + (const string) $82
  (string~) $13 ← (string~) $12 + (const string) $83
  (string~) $14 ← (string~) $13 + (const string) $84
  (string~) $15 ← (string~) $14 + (const string) $85
  (byte[]) FORM_TEXT#0 ← (string~) $15
  (string~) $16 ← (const string) $86 + (const string) $87
  (string~) $17 ← (string~) $16 + (const string) $88
  (string~) $18 ← (string~) $17 + (const string) $89
  (string~) $19 ← (string~) $18 + (const string) $90
  (string~) $20 ← (string~) $19 + (const string) $91
  (string~) $21 ← (string~) $20 + (const string) $92
  (string~) $22 ← (string~) $21 + (const string) $93
  (string~) $23 ← (string~) $22 + (const string) $94
  (string~) $24 ← (string~) $23 + (const string) $95
  (string~) $25 ← (string~) $24 + (const string) $96
  (string~) $26 ← (string~) $25 + (const string) $97
  (string~) $27 ← (string~) $26 + (const string) $98
  (string~) $28 ← (string~) $27 + (const string) $99
  (string~) $29 ← (string~) $28 + (const string) $100
  (string~) $30 ← (string~) $29 + (const string) $101
  (string~) $31 ← (string~) $30 + (const string) $102
  (byte[]) FORM_COLS#0 ← (string~) $31
  (byte) form_fields_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) $24
  (byte[]) form_fields_x#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25 }
  (byte[]) form_fields_y#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) $e }
  (byte[]) form_fields_max#0 ← { (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f }
  (byte[]) form_fields_val#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_stdchar#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_ecmchar#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 6 }
  (byte[]) preset_stdbm#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_mcbm#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_hi_stdchar#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_hi_ecmchar#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c }
  (byte[]) preset_twoplane#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_chunky#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_sixsfred#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_sixsfred2#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte[]) preset_8bpppixelcell#0 ← { (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  to:@45
apply_preset: scope:[apply_preset]  from form_mode::@18
  (byte) apply_preset::idx#1 ← phi( form_mode::@18/(byte) apply_preset::idx#0 )
  (byte*) apply_preset::preset#0 ← (byte*) 0
  (bool~) apply_preset::$0 ← (byte) apply_preset::idx#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) apply_preset::$0) goto apply_preset::@1
  to:apply_preset::@23
apply_preset::@1: scope:[apply_preset]  from apply_preset
  (byte*) apply_preset::preset#1 ← (byte[]) preset_stdchar#0
  to:apply_preset::@22
apply_preset::@23: scope:[apply_preset]  from apply_preset
  (byte) apply_preset::idx#2 ← phi( apply_preset/(byte) apply_preset::idx#1 )
  (bool~) apply_preset::$1 ← (byte) apply_preset::idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
  if((bool~) apply_preset::$1) goto apply_preset::@2
  to:apply_preset::@24
apply_preset::@2: scope:[apply_preset]  from apply_preset::@23
  (byte*) apply_preset::preset#2 ← (byte[]) preset_ecmchar#0
  to:apply_preset::@22
apply_preset::@24: scope:[apply_preset]  from apply_preset::@23
  (byte) apply_preset::idx#3 ← phi( apply_preset::@23/(byte) apply_preset::idx#2 )
  (bool~) apply_preset::$2 ← (byte) apply_preset::idx#3 == (byte/signed byte/word/signed word/dword/signed dword) 2
  if((bool~) apply_preset::$2) goto apply_preset::@3
  to:apply_preset::@25
apply_preset::@3: scope:[apply_preset]  from apply_preset::@24
  (byte*) apply_preset::preset#3 ← (byte[]) preset_stdbm#0
  to:apply_preset::@22
apply_preset::@25: scope:[apply_preset]  from apply_preset::@24
  (byte) apply_preset::idx#4 ← phi( apply_preset::@24/(byte) apply_preset::idx#3 )
  (bool~) apply_preset::$3 ← (byte) apply_preset::idx#4 == (byte/signed byte/word/signed word/dword/signed dword) 3
  if((bool~) apply_preset::$3) goto apply_preset::@4
  to:apply_preset::@26
apply_preset::@4: scope:[apply_preset]  from apply_preset::@25
  (byte*) apply_preset::preset#4 ← (byte[]) preset_mcbm#0
  to:apply_preset::@22
apply_preset::@26: scope:[apply_preset]  from apply_preset::@25
  (byte) apply_preset::idx#5 ← phi( apply_preset::@25/(byte) apply_preset::idx#4 )
  (bool~) apply_preset::$4 ← (byte) apply_preset::idx#5 == (byte/signed byte/word/signed word/dword/signed dword) 4
  if((bool~) apply_preset::$4) goto apply_preset::@5
  to:apply_preset::@27
apply_preset::@5: scope:[apply_preset]  from apply_preset::@26
  (byte*) apply_preset::preset#5 ← (byte[]) preset_hi_stdchar#0
  to:apply_preset::@22
apply_preset::@27: scope:[apply_preset]  from apply_preset::@26
  (byte) apply_preset::idx#6 ← phi( apply_preset::@26/(byte) apply_preset::idx#5 )
  (bool~) apply_preset::$5 ← (byte) apply_preset::idx#6 == (byte/signed byte/word/signed word/dword/signed dword) 5
  if((bool~) apply_preset::$5) goto apply_preset::@6
  to:apply_preset::@28
apply_preset::@6: scope:[apply_preset]  from apply_preset::@27
  (byte*) apply_preset::preset#6 ← (byte[]) preset_hi_ecmchar#0
  to:apply_preset::@22
apply_preset::@28: scope:[apply_preset]  from apply_preset::@27
  (byte) apply_preset::idx#7 ← phi( apply_preset::@27/(byte) apply_preset::idx#6 )
  (bool~) apply_preset::$6 ← (byte) apply_preset::idx#7 == (byte/signed byte/word/signed word/dword/signed dword) 6
  if((bool~) apply_preset::$6) goto apply_preset::@7
  to:apply_preset::@29
apply_preset::@7: scope:[apply_preset]  from apply_preset::@28
  (byte*) apply_preset::preset#7 ← (byte[]) preset_twoplane#0
  to:apply_preset::@22
apply_preset::@29: scope:[apply_preset]  from apply_preset::@28
  (byte) apply_preset::idx#8 ← phi( apply_preset::@28/(byte) apply_preset::idx#7 )
  (bool~) apply_preset::$7 ← (byte) apply_preset::idx#8 == (byte/signed byte/word/signed word/dword/signed dword) 7
  if((bool~) apply_preset::$7) goto apply_preset::@8
  to:apply_preset::@30
apply_preset::@8: scope:[apply_preset]  from apply_preset::@29
  (byte*) apply_preset::preset#8 ← (byte[]) preset_chunky#0
  to:apply_preset::@22
apply_preset::@30: scope:[apply_preset]  from apply_preset::@29
  (byte) apply_preset::idx#9 ← phi( apply_preset::@29/(byte) apply_preset::idx#8 )
  (bool~) apply_preset::$8 ← (byte) apply_preset::idx#9 == (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) apply_preset::$8) goto apply_preset::@9
  to:apply_preset::@31
apply_preset::@9: scope:[apply_preset]  from apply_preset::@30
  (byte*) apply_preset::preset#9 ← (byte[]) preset_sixsfred#0
  to:apply_preset::@22
apply_preset::@31: scope:[apply_preset]  from apply_preset::@30
  (byte) apply_preset::idx#10 ← phi( apply_preset::@30/(byte) apply_preset::idx#9 )
  (bool~) apply_preset::$9 ← (byte) apply_preset::idx#10 == (byte/signed byte/word/signed word/dword/signed dword) 9
  if((bool~) apply_preset::$9) goto apply_preset::@10
  to:apply_preset::@32
apply_preset::@10: scope:[apply_preset]  from apply_preset::@31
  (byte*) apply_preset::preset#10 ← (byte[]) preset_sixsfred2#0
  to:apply_preset::@22
apply_preset::@32: scope:[apply_preset]  from apply_preset::@31
  (byte) apply_preset::idx#11 ← phi( apply_preset::@31/(byte) apply_preset::idx#10 )
  (bool~) apply_preset::$10 ← (byte) apply_preset::idx#11 == (byte/signed byte/word/signed word/dword/signed dword) $a
  if((bool~) apply_preset::$10) goto apply_preset::@11
  to:apply_preset::@33
apply_preset::@11: scope:[apply_preset]  from apply_preset::@32
  (byte*) apply_preset::preset#11 ← (byte[]) preset_8bpppixelcell#0
  to:apply_preset::@22
apply_preset::@33: scope:[apply_preset]  from apply_preset::@32
  (byte*) apply_preset::preset#12 ← (byte[]) preset_stdchar#0
  to:apply_preset::@22
apply_preset::@22: scope:[apply_preset]  from apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@2 apply_preset::@3 apply_preset::@33 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  (byte*) apply_preset::preset#14 ← phi( apply_preset::@1/(byte*) apply_preset::preset#1 apply_preset::@10/(byte*) apply_preset::preset#10 apply_preset::@11/(byte*) apply_preset::preset#11 apply_preset::@2/(byte*) apply_preset::preset#2 apply_preset::@3/(byte*) apply_preset::preset#3 apply_preset::@33/(byte*) apply_preset::preset#12 apply_preset::@4/(byte*) apply_preset::preset#4 apply_preset::@5/(byte*) apply_preset::preset#5 apply_preset::@6/(byte*) apply_preset::preset#6 apply_preset::@7/(byte*) apply_preset::preset#7 apply_preset::@8/(byte*) apply_preset::preset#8 apply_preset::@9/(byte*) apply_preset::preset#9 )
  (byte) apply_preset::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:apply_preset::@45
apply_preset::@45: scope:[apply_preset]  from apply_preset::@22 apply_preset::@45
  (byte) apply_preset::i#2 ← phi( apply_preset::@22/(byte) apply_preset::i#0 apply_preset::@45/(byte) apply_preset::i#1 )
  (byte*) apply_preset::preset#13 ← phi( apply_preset::@22/(byte*) apply_preset::preset#14 apply_preset::@45/(byte*) apply_preset::preset#13 )
  *((byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#13 + (byte) apply_preset::i#2)
  (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2
  (bool~) apply_preset::$11 ← (byte) apply_preset::i#1 != (byte) form_fields_cnt#0
  if((bool~) apply_preset::$11) goto apply_preset::@45
  to:apply_preset::@return
apply_preset::@return: scope:[apply_preset]  from apply_preset::@45
  return 
  to:@return
render_preset_name: scope:[render_preset_name]  from form_mode::@28 form_mode::@32
  (byte) render_preset_name::idx#2 ← phi( form_mode::@28/(byte) render_preset_name::idx#0 form_mode::@32/(byte) render_preset_name::idx#1 )
  (byte*) render_preset_name::name#0 ← (byte*) 0
  (bool~) render_preset_name::$0 ← (byte) render_preset_name::idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) render_preset_name::$0) goto render_preset_name::@1
  to:render_preset_name::@23
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name
  (byte*) render_preset_name::name#1 ← (const string) render_preset_name::$15
  to:render_preset_name::@22
render_preset_name::@23: scope:[render_preset_name]  from render_preset_name
  (byte) render_preset_name::idx#3 ← phi( render_preset_name/(byte) render_preset_name::idx#2 )
  (bool~) render_preset_name::$1 ← (byte) render_preset_name::idx#3 == (byte/signed byte/word/signed word/dword/signed dword) 1
  if((bool~) render_preset_name::$1) goto render_preset_name::@2
  to:render_preset_name::@24
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name::@23
  (byte*) render_preset_name::name#2 ← (const string) render_preset_name::$16
  to:render_preset_name::@22
render_preset_name::@24: scope:[render_preset_name]  from render_preset_name::@23
  (byte) render_preset_name::idx#4 ← phi( render_preset_name::@23/(byte) render_preset_name::idx#3 )
  (bool~) render_preset_name::$2 ← (byte) render_preset_name::idx#4 == (byte/signed byte/word/signed word/dword/signed dword) 2
  if((bool~) render_preset_name::$2) goto render_preset_name::@3
  to:render_preset_name::@25
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name::@24
  (byte*) render_preset_name::name#3 ← (const string) render_preset_name::$17
  to:render_preset_name::@22
render_preset_name::@25: scope:[render_preset_name]  from render_preset_name::@24
  (byte) render_preset_name::idx#5 ← phi( render_preset_name::@24/(byte) render_preset_name::idx#4 )
  (bool~) render_preset_name::$3 ← (byte) render_preset_name::idx#5 == (byte/signed byte/word/signed word/dword/signed dword) 3
  if((bool~) render_preset_name::$3) goto render_preset_name::@4
  to:render_preset_name::@26
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@25
  (byte*) render_preset_name::name#4 ← (const string) render_preset_name::$18
  to:render_preset_name::@22
render_preset_name::@26: scope:[render_preset_name]  from render_preset_name::@25
  (byte) render_preset_name::idx#6 ← phi( render_preset_name::@25/(byte) render_preset_name::idx#5 )
  (bool~) render_preset_name::$4 ← (byte) render_preset_name::idx#6 == (byte/signed byte/word/signed word/dword/signed dword) 4
  if((bool~) render_preset_name::$4) goto render_preset_name::@5
  to:render_preset_name::@27
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@26
  (byte*) render_preset_name::name#5 ← (const string) render_preset_name::$19
  to:render_preset_name::@22
render_preset_name::@27: scope:[render_preset_name]  from render_preset_name::@26
  (byte) render_preset_name::idx#7 ← phi( render_preset_name::@26/(byte) render_preset_name::idx#6 )
  (bool~) render_preset_name::$5 ← (byte) render_preset_name::idx#7 == (byte/signed byte/word/signed word/dword/signed dword) 5
  if((bool~) render_preset_name::$5) goto render_preset_name::@6
  to:render_preset_name::@28
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@27
  (byte*) render_preset_name::name#6 ← (const string) render_preset_name::$20
  to:render_preset_name::@22
render_preset_name::@28: scope:[render_preset_name]  from render_preset_name::@27
  (byte) render_preset_name::idx#8 ← phi( render_preset_name::@27/(byte) render_preset_name::idx#7 )
  (bool~) render_preset_name::$6 ← (byte) render_preset_name::idx#8 == (byte/signed byte/word/signed word/dword/signed dword) 6
  if((bool~) render_preset_name::$6) goto render_preset_name::@7
  to:render_preset_name::@29
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@28
  (byte*) render_preset_name::name#7 ← (const string) render_preset_name::$21
  to:render_preset_name::@22
render_preset_name::@29: scope:[render_preset_name]  from render_preset_name::@28
  (byte) render_preset_name::idx#9 ← phi( render_preset_name::@28/(byte) render_preset_name::idx#8 )
  (bool~) render_preset_name::$7 ← (byte) render_preset_name::idx#9 == (byte/signed byte/word/signed word/dword/signed dword) 7
  if((bool~) render_preset_name::$7) goto render_preset_name::@8
  to:render_preset_name::@30
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@29
  (byte*) render_preset_name::name#8 ← (const string) render_preset_name::$22
  to:render_preset_name::@22
render_preset_name::@30: scope:[render_preset_name]  from render_preset_name::@29
  (byte) render_preset_name::idx#10 ← phi( render_preset_name::@29/(byte) render_preset_name::idx#9 )
  (bool~) render_preset_name::$8 ← (byte) render_preset_name::idx#10 == (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) render_preset_name::$8) goto render_preset_name::@9
  to:render_preset_name::@31
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@30
  (byte*) render_preset_name::name#9 ← (const string) render_preset_name::$23
  to:render_preset_name::@22
render_preset_name::@31: scope:[render_preset_name]  from render_preset_name::@30
  (byte) render_preset_name::idx#11 ← phi( render_preset_name::@30/(byte) render_preset_name::idx#10 )
  (bool~) render_preset_name::$9 ← (byte) render_preset_name::idx#11 == (byte/signed byte/word/signed word/dword/signed dword) 9
  if((bool~) render_preset_name::$9) goto render_preset_name::@10
  to:render_preset_name::@32
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@31
  (byte*) render_preset_name::name#10 ← (const string) render_preset_name::$24
  to:render_preset_name::@22
render_preset_name::@32: scope:[render_preset_name]  from render_preset_name::@31
  (byte) render_preset_name::idx#12 ← phi( render_preset_name::@31/(byte) render_preset_name::idx#11 )
  (bool~) render_preset_name::$10 ← (byte) render_preset_name::idx#12 == (byte/signed byte/word/signed word/dword/signed dword) $a
  if((bool~) render_preset_name::$10) goto render_preset_name::@11
  to:render_preset_name::@33
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@32
  (byte*) render_preset_name::name#11 ← (const string) render_preset_name::$25
  to:render_preset_name::@22
render_preset_name::@33: scope:[render_preset_name]  from render_preset_name::@32
  (byte*) render_preset_name::name#12 ← (const string) render_preset_name::$26
  to:render_preset_name::@22
render_preset_name::@22: scope:[render_preset_name]  from render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@2 render_preset_name::@3 render_preset_name::@33 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  (byte*) render_preset_name::name#13 ← phi( render_preset_name::@1/(byte*) render_preset_name::name#1 render_preset_name::@10/(byte*) render_preset_name::name#10 render_preset_name::@11/(byte*) render_preset_name::name#11 render_preset_name::@2/(byte*) render_preset_name::name#2 render_preset_name::@3/(byte*) render_preset_name::name#3 render_preset_name::@33/(byte*) render_preset_name::name#12 render_preset_name::@4/(byte*) render_preset_name::name#4 render_preset_name::@5/(byte*) render_preset_name::name#5 render_preset_name::@6/(byte*) render_preset_name::name#6 render_preset_name::@7/(byte*) render_preset_name::name#7 render_preset_name::@8/(byte*) render_preset_name::name#8 render_preset_name::@9/(byte*) render_preset_name::name#9 )
  (byte/signed byte/word/signed word/dword/signed dword~) render_preset_name::$11 ← (byte/signed byte/word/signed word/dword/signed dword) $28 * (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*~) render_preset_name::$12 ← (byte*) FORM_SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword~) render_preset_name::$11
  (byte*~) render_preset_name::$13 ← (byte*~) render_preset_name::$12 + (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  (byte*) print_str_at::at#1 ← (byte*~) render_preset_name::$13
  call print_str_at 
  to:render_preset_name::@45
render_preset_name::@45: scope:[render_preset_name]  from render_preset_name::@22
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@45
  return 
  to:@return
@45: scope:[]  from @43
  (byte) keyboard_modifiers#88 ← phi( @43/(byte) keyboard_modifiers#95 )
  (byte) keyboard_events_size#91 ← phi( @43/(byte) keyboard_events_size#102 )
  (byte*) print_char_cursor#62 ← phi( @43/(byte*) print_char_cursor#64 )
  (byte*) print_line_cursor#61 ← phi( @43/(byte*) print_line_cursor#64 )
  (byte*) print_screen#39 ← phi( @43/(byte*) print_screen#41 )
  (byte*~) $32 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) form_preset#0 ← (byte*~) $32
  (byte*~) $33 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) form_ctrl_bmm#0 ← (byte*~) $33
  (byte*~) $34 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) form_ctrl_mcm#0 ← (byte*~) $34
  (byte*~) $35 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*) form_ctrl_ecm#0 ← (byte*~) $35
  (byte*~) $36 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte*) form_ctrl_hicol#0 ← (byte*~) $36
  (byte*~) $37 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte*) form_ctrl_line#0 ← (byte*~) $37
  (byte*~) $38 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte*) form_ctrl_colof#0 ← (byte*~) $38
  (byte*~) $39 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) form_ctrl_chunk#0 ← (byte*~) $39
  (byte*~) $40 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) form_ctrl_borof#0 ← (byte*~) $40
  (byte*~) $41 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte*) form_ctrl_overs#0 ← (byte*~) $41
  (byte*~) $42 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte*) form_a_pattern#0 ← (byte*~) $42
  (byte*~) $43 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte*) form_a_start_hi#0 ← (byte*~) $43
  (byte*~) $44 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte*) form_a_start_lo#0 ← (byte*~) $44
  (byte*~) $45 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte*) form_a_step_hi#0 ← (byte*~) $45
  (byte*~) $46 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte*) form_a_step_lo#0 ← (byte*~) $46
  (byte*~) $47 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte*) form_a_mod_hi#0 ← (byte*~) $47
  (byte*~) $48 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte*) form_a_mod_lo#0 ← (byte*~) $48
  (byte*~) $49 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $11
  (byte*) form_b_pattern#0 ← (byte*~) $49
  (byte*~) $50 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $12
  (byte*) form_b_start_hi#0 ← (byte*~) $50
  (byte*~) $51 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $13
  (byte*) form_b_start_lo#0 ← (byte*~) $51
  (byte*~) $52 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $14
  (byte*) form_b_step_hi#0 ← (byte*~) $52
  (byte*~) $53 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $15
  (byte*) form_b_step_lo#0 ← (byte*~) $53
  (byte*~) $54 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $16
  (byte*) form_b_mod_hi#0 ← (byte*~) $54
  (byte*~) $55 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $17
  (byte*) form_b_mod_lo#0 ← (byte*~) $55
  (byte*~) $56 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $18
  (byte*) form_vic_screen#0 ← (byte*~) $56
  (byte*~) $57 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $19
  (byte*) form_vic_gfx#0 ← (byte*~) $57
  (byte*~) $58 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $1a
  (byte*) form_vic_cols#0 ← (byte*~) $58
  (byte*~) $59 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $1b
  (byte*) form_dtv_palet#0 ← (byte*~) $59
  (byte*~) $60 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $1c
  (byte*) form_vic_bg0_hi#0 ← (byte*~) $60
  (byte*~) $61 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $1d
  (byte*) form_vic_bg0_lo#0 ← (byte*~) $61
  (byte*~) $62 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $1e
  (byte*) form_vic_bg1_hi#0 ← (byte*~) $62
  (byte*~) $63 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $1f
  (byte*) form_vic_bg1_lo#0 ← (byte*~) $63
  (byte*~) $64 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte*) form_vic_bg2_hi#0 ← (byte*~) $64
  (byte*~) $65 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $21
  (byte*) form_vic_bg2_lo#0 ← (byte*~) $65
  (byte*~) $66 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $22
  (byte*) form_vic_bg3_hi#0 ← (byte*~) $66
  (byte*~) $67 ← (byte[]) form_fields_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $23
  (byte*) form_vic_bg3_lo#0 ← (byte*~) $67
  to:@64
gfx_mode: scope:[gfx_mode]  from main::@9
  (byte) keyboard_modifiers#139 ← phi( main::@9/(byte) keyboard_modifiers#7 )
  (byte) keyboard_events_size#159 ← phi( main::@9/(byte) keyboard_events_size#6 )
  (byte) gfx_mode::dtv_control#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$0 ← *((byte*) form_ctrl_line#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$1 ← ! (bool~) gfx_mode::$0
  if((bool~) gfx_mode::$1) goto gfx_mode::@1
  to:gfx_mode::@12
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@12
  (byte) keyboard_modifiers#137 ← phi( gfx_mode/(byte) keyboard_modifiers#139 gfx_mode::@12/(byte) keyboard_modifiers#140 )
  (byte) keyboard_events_size#157 ← phi( gfx_mode/(byte) keyboard_events_size#159 gfx_mode::@12/(byte) keyboard_events_size#160 )
  (byte) gfx_mode::dtv_control#14 ← phi( gfx_mode/(byte) gfx_mode::dtv_control#0 gfx_mode::@12/(byte) gfx_mode::dtv_control#1 )
  (bool~) gfx_mode::$2 ← *((byte*) form_ctrl_borof#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$3 ← ! (bool~) gfx_mode::$2
  if((bool~) gfx_mode::$3) goto gfx_mode::@2
  to:gfx_mode::@13
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode
  (byte) keyboard_modifiers#140 ← phi( gfx_mode/(byte) keyboard_modifiers#139 )
  (byte) keyboard_events_size#160 ← phi( gfx_mode/(byte) keyboard_events_size#159 )
  (byte) gfx_mode::dtv_control#7 ← phi( gfx_mode/(byte) gfx_mode::dtv_control#0 )
  (byte~) gfx_mode::$73 ← (byte) gfx_mode::dtv_control#7 | (byte) DTV_LINEAR#0
  (byte) gfx_mode::dtv_control#1 ← (byte~) gfx_mode::$73
  to:gfx_mode::@1
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@13
  (byte) keyboard_modifiers#136 ← phi( gfx_mode::@1/(byte) keyboard_modifiers#137 gfx_mode::@13/(byte) keyboard_modifiers#138 )
  (byte) keyboard_events_size#156 ← phi( gfx_mode::@1/(byte) keyboard_events_size#157 gfx_mode::@13/(byte) keyboard_events_size#158 )
  (byte) gfx_mode::dtv_control#15 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 gfx_mode::@13/(byte) gfx_mode::dtv_control#2 )
  (bool~) gfx_mode::$4 ← *((byte*) form_ctrl_hicol#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$5 ← ! (bool~) gfx_mode::$4
  if((bool~) gfx_mode::$5) goto gfx_mode::@3
  to:gfx_mode::@14
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@1
  (byte) keyboard_modifiers#138 ← phi( gfx_mode::@1/(byte) keyboard_modifiers#137 )
  (byte) keyboard_events_size#158 ← phi( gfx_mode::@1/(byte) keyboard_events_size#157 )
  (byte) gfx_mode::dtv_control#8 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 )
  (byte~) gfx_mode::$74 ← (byte) gfx_mode::dtv_control#8 | (byte) DTV_BORDER_OFF#0
  (byte) gfx_mode::dtv_control#2 ← (byte~) gfx_mode::$74
  to:gfx_mode::@2
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@2
  (byte) keyboard_modifiers#134 ← phi( gfx_mode::@14/(byte) keyboard_modifiers#135 gfx_mode::@2/(byte) keyboard_modifiers#136 )
  (byte) keyboard_events_size#154 ← phi( gfx_mode::@14/(byte) keyboard_events_size#155 gfx_mode::@2/(byte) keyboard_events_size#156 )
  (byte) gfx_mode::dtv_control#16 ← phi( gfx_mode::@14/(byte) gfx_mode::dtv_control#3 gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  (bool~) gfx_mode::$6 ← *((byte*) form_ctrl_overs#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$7 ← ! (bool~) gfx_mode::$6
  if((bool~) gfx_mode::$7) goto gfx_mode::@4
  to:gfx_mode::@15
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@2
  (byte) keyboard_modifiers#135 ← phi( gfx_mode::@2/(byte) keyboard_modifiers#136 )
  (byte) keyboard_events_size#155 ← phi( gfx_mode::@2/(byte) keyboard_events_size#156 )
  (byte) gfx_mode::dtv_control#9 ← phi( gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  (byte~) gfx_mode::$75 ← (byte) gfx_mode::dtv_control#9 | (byte) DTV_HIGHCOLOR#0
  (byte) gfx_mode::dtv_control#3 ← (byte~) gfx_mode::$75
  to:gfx_mode::@3
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@3
  (byte) keyboard_modifiers#132 ← phi( gfx_mode::@15/(byte) keyboard_modifiers#133 gfx_mode::@3/(byte) keyboard_modifiers#134 )
  (byte) keyboard_events_size#152 ← phi( gfx_mode::@15/(byte) keyboard_events_size#153 gfx_mode::@3/(byte) keyboard_events_size#154 )
  (byte) gfx_mode::dtv_control#17 ← phi( gfx_mode::@15/(byte) gfx_mode::dtv_control#4 gfx_mode::@3/(byte) gfx_mode::dtv_control#16 )
  (bool~) gfx_mode::$8 ← *((byte*) form_ctrl_colof#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$9 ← ! (bool~) gfx_mode::$8
  if((bool~) gfx_mode::$9) goto gfx_mode::@5
  to:gfx_mode::@16
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@3
  (byte) keyboard_modifiers#133 ← phi( gfx_mode::@3/(byte) keyboard_modifiers#134 )
  (byte) keyboard_events_size#153 ← phi( gfx_mode::@3/(byte) keyboard_events_size#154 )
  (byte) gfx_mode::dtv_control#10 ← phi( gfx_mode::@3/(byte) gfx_mode::dtv_control#16 )
  (byte~) gfx_mode::$76 ← (byte) gfx_mode::dtv_control#10 | (byte) DTV_OVERSCAN#0
  (byte) gfx_mode::dtv_control#4 ← (byte~) gfx_mode::$76
  to:gfx_mode::@4
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@4
  (byte) keyboard_modifiers#130 ← phi( gfx_mode::@16/(byte) keyboard_modifiers#131 gfx_mode::@4/(byte) keyboard_modifiers#132 )
  (byte) keyboard_events_size#150 ← phi( gfx_mode::@16/(byte) keyboard_events_size#151 gfx_mode::@4/(byte) keyboard_events_size#152 )
  (byte) gfx_mode::dtv_control#18 ← phi( gfx_mode::@16/(byte) gfx_mode::dtv_control#5 gfx_mode::@4/(byte) gfx_mode::dtv_control#17 )
  (bool~) gfx_mode::$10 ← *((byte*) form_ctrl_chunk#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$11 ← ! (bool~) gfx_mode::$10
  if((bool~) gfx_mode::$11) goto gfx_mode::@6
  to:gfx_mode::@17
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@4
  (byte) keyboard_modifiers#131 ← phi( gfx_mode::@4/(byte) keyboard_modifiers#132 )
  (byte) keyboard_events_size#151 ← phi( gfx_mode::@4/(byte) keyboard_events_size#152 )
  (byte) gfx_mode::dtv_control#11 ← phi( gfx_mode::@4/(byte) gfx_mode::dtv_control#17 )
  (byte~) gfx_mode::$77 ← (byte) gfx_mode::dtv_control#11 | (byte) DTV_COLORRAM_OFF#0
  (byte) gfx_mode::dtv_control#5 ← (byte~) gfx_mode::$77
  to:gfx_mode::@5
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@5
  (byte) keyboard_modifiers#128 ← phi( gfx_mode::@17/(byte) keyboard_modifiers#129 gfx_mode::@5/(byte) keyboard_modifiers#130 )
  (byte) keyboard_events_size#148 ← phi( gfx_mode::@17/(byte) keyboard_events_size#149 gfx_mode::@5/(byte) keyboard_events_size#150 )
  (byte) gfx_mode::dtv_control#12 ← phi( gfx_mode::@17/(byte) gfx_mode::dtv_control#6 gfx_mode::@5/(byte) gfx_mode::dtv_control#18 )
  *((byte*) DTV_CONTROL#0) ← (byte) gfx_mode::dtv_control#12
  (byte~) gfx_mode::$12 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) gfx_mode::$13 ← (byte~) gfx_mode::$12 | (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) gfx_mode::vic_control#0 ← (byte/word/dword~) gfx_mode::$13
  (bool~) gfx_mode::$14 ← *((byte*) form_ctrl_ecm#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$15 ← ! (bool~) gfx_mode::$14
  if((bool~) gfx_mode::$15) goto gfx_mode::@7
  to:gfx_mode::@18
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@5
  (byte) keyboard_modifiers#129 ← phi( gfx_mode::@5/(byte) keyboard_modifiers#130 )
  (byte) keyboard_events_size#149 ← phi( gfx_mode::@5/(byte) keyboard_events_size#150 )
  (byte) gfx_mode::dtv_control#13 ← phi( gfx_mode::@5/(byte) gfx_mode::dtv_control#18 )
  (byte~) gfx_mode::$78 ← (byte) gfx_mode::dtv_control#13 | (byte) DTV_CHUNKY#0
  (byte) gfx_mode::dtv_control#6 ← (byte~) gfx_mode::$78
  to:gfx_mode::@6
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@6
  (byte) keyboard_modifiers#126 ← phi( gfx_mode::@18/(byte) keyboard_modifiers#127 gfx_mode::@6/(byte) keyboard_modifiers#128 )
  (byte) keyboard_events_size#146 ← phi( gfx_mode::@18/(byte) keyboard_events_size#147 gfx_mode::@6/(byte) keyboard_events_size#148 )
  (byte) gfx_mode::vic_control#6 ← phi( gfx_mode::@18/(byte) gfx_mode::vic_control#1 gfx_mode::@6/(byte) gfx_mode::vic_control#0 )
  (bool~) gfx_mode::$16 ← *((byte*) form_ctrl_bmm#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$17 ← ! (bool~) gfx_mode::$16
  if((bool~) gfx_mode::$17) goto gfx_mode::@8
  to:gfx_mode::@19
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@6
  (byte) keyboard_modifiers#127 ← phi( gfx_mode::@6/(byte) keyboard_modifiers#128 )
  (byte) keyboard_events_size#147 ← phi( gfx_mode::@6/(byte) keyboard_events_size#148 )
  (byte) gfx_mode::vic_control#3 ← phi( gfx_mode::@6/(byte) gfx_mode::vic_control#0 )
  (byte~) gfx_mode::$79 ← (byte) gfx_mode::vic_control#3 | (byte) VIC_ECM#0
  (byte) gfx_mode::vic_control#1 ← (byte~) gfx_mode::$79
  to:gfx_mode::@7
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@7
  (byte) keyboard_modifiers#124 ← phi( gfx_mode::@19/(byte) keyboard_modifiers#125 gfx_mode::@7/(byte) keyboard_modifiers#126 )
  (byte) keyboard_events_size#144 ← phi( gfx_mode::@19/(byte) keyboard_events_size#145 gfx_mode::@7/(byte) keyboard_events_size#146 )
  (byte) gfx_mode::vic_control#4 ← phi( gfx_mode::@19/(byte) gfx_mode::vic_control#2 gfx_mode::@7/(byte) gfx_mode::vic_control#6 )
  *((byte*) VIC_CONTROL#0) ← (byte) gfx_mode::vic_control#4
  (byte) gfx_mode::vic_control2#0 ← (byte) VIC_CSEL#0
  (bool~) gfx_mode::$18 ← *((byte*) form_ctrl_mcm#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_mode::$19 ← ! (bool~) gfx_mode::$18
  if((bool~) gfx_mode::$19) goto gfx_mode::@9
  to:gfx_mode::@20
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@7
  (byte) keyboard_modifiers#125 ← phi( gfx_mode::@7/(byte) keyboard_modifiers#126 )
  (byte) keyboard_events_size#145 ← phi( gfx_mode::@7/(byte) keyboard_events_size#146 )
  (byte) gfx_mode::vic_control#5 ← phi( gfx_mode::@7/(byte) gfx_mode::vic_control#6 )
  (byte~) gfx_mode::$80 ← (byte) gfx_mode::vic_control#5 | (byte) VIC_BMM#0
  (byte) gfx_mode::vic_control#2 ← (byte~) gfx_mode::$80
  to:gfx_mode::@8
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@20 gfx_mode::@8
  (byte) keyboard_modifiers#121 ← phi( gfx_mode::@20/(byte) keyboard_modifiers#123 gfx_mode::@8/(byte) keyboard_modifiers#124 )
  (byte) keyboard_events_size#141 ← phi( gfx_mode::@20/(byte) keyboard_events_size#143 gfx_mode::@8/(byte) keyboard_events_size#144 )
  (byte) gfx_mode::vic_control2#2 ← phi( gfx_mode::@20/(byte) gfx_mode::vic_control2#1 gfx_mode::@8/(byte) gfx_mode::vic_control2#0 )
  *((byte*) VIC_CONTROL2#0) ← (byte) gfx_mode::vic_control2#2
  (byte~) gfx_mode::$20 ← *((byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$21 ← (byte~) gfx_mode::$20 | *((byte*) form_a_start_lo#0)
  (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$21
  (byte) get_plane::idx#0 ← *((byte*) form_a_pattern#0)
  call get_plane 
  (dword) get_plane::return#16 ← (dword) get_plane::return#14
  to:gfx_mode::@46
gfx_mode::@46: scope:[gfx_mode]  from gfx_mode::@9
  (byte) keyboard_modifiers#119 ← phi( gfx_mode::@9/(byte) keyboard_modifiers#121 )
  (byte) keyboard_events_size#139 ← phi( gfx_mode::@9/(byte) keyboard_events_size#141 )
  (byte) gfx_mode::plane_a_offs#1 ← phi( gfx_mode::@9/(byte) gfx_mode::plane_a_offs#0 )
  (dword) get_plane::return#19 ← phi( gfx_mode::@9/(dword) get_plane::return#16 )
  (dword~) gfx_mode::$22 ← (dword) get_plane::return#19
  (dword~) gfx_mode::$23 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#1
  (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$23
  (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) gfx_mode::$25
  (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) gfx_mode::$27
  (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte~) gfx_mode::$29
  (byte~) gfx_mode::$30 ← *((byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((byte*) form_a_step_lo#0)
  *((byte*) DTV_PLANEA_STEP#0) ← (byte~) gfx_mode::$31
  (byte~) gfx_mode::$32 ← *((byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((byte*) form_a_mod_lo#0)
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte~) gfx_mode::$33
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) gfx_mode::$34 ← *((byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$35 ← (byte~) gfx_mode::$34 | *((byte*) form_b_start_lo#0)
  (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$35
  (byte) get_plane::idx#1 ← *((byte*) form_b_pattern#0)
  call get_plane 
  (dword) get_plane::return#17 ← (dword) get_plane::return#14
  to:gfx_mode::@47
gfx_mode::@47: scope:[gfx_mode]  from gfx_mode::@46
  (byte) keyboard_modifiers#117 ← phi( gfx_mode::@46/(byte) keyboard_modifiers#119 )
  (byte) keyboard_events_size#137 ← phi( gfx_mode::@46/(byte) keyboard_events_size#139 )
  (byte) gfx_mode::plane_b_offs#1 ← phi( gfx_mode::@46/(byte) gfx_mode::plane_b_offs#0 )
  (dword) get_plane::return#20 ← phi( gfx_mode::@46/(dword) get_plane::return#17 )
  (dword~) gfx_mode::$36 ← (dword) get_plane::return#20
  (dword~) gfx_mode::$37 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#1
  (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$37
  (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) gfx_mode::$39
  (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) gfx_mode::$41
  (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte~) gfx_mode::$43
  (byte~) gfx_mode::$44 ← *((byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((byte*) form_b_step_lo#0)
  *((byte*) DTV_PLANEB_STEP#0) ← (byte~) gfx_mode::$45
  (byte~) gfx_mode::$46 ← *((byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((byte*) form_b_mod_lo#0)
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte~) gfx_mode::$47
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) gfx_mode::$48 ← ((word)) (byte*) VIC_SCREEN0#0
  (word/signed dword/dword~) gfx_mode::$49 ← (word~) gfx_mode::$48 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_mode::$50 ← ((byte)) (word/signed dword/dword~) gfx_mode::$49
  (byte/word/dword~) gfx_mode::$51 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) gfx_mode::$50
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) gfx_mode::$51
  (byte) get_vic_screen::idx#0 ← *((byte*) form_vic_screen#0)
  call get_vic_screen 
  (byte*) get_vic_screen::return#7 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@48
gfx_mode::@48: scope:[gfx_mode]  from gfx_mode::@47
  (byte) keyboard_modifiers#115 ← phi( gfx_mode::@47/(byte) keyboard_modifiers#117 )
  (byte) keyboard_events_size#135 ← phi( gfx_mode::@47/(byte) keyboard_events_size#137 )
  (byte*) get_vic_screen::return#10 ← phi( gfx_mode::@47/(byte*) get_vic_screen::return#7 )
  (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10
  (word~) gfx_mode::$53 ← ((word)) (byte*~) gfx_mode::$52
  (word~) gfx_mode::$54 ← (word~) gfx_mode::$53 & (word/signed word/dword/signed dword) $3fff
  (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55
  (byte) get_vic_charset::idx#0 ← *((byte*) form_vic_gfx#0)
  call get_vic_charset 
  (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  to:gfx_mode::@49
gfx_mode::@49: scope:[gfx_mode]  from gfx_mode::@48
  (byte) keyboard_modifiers#113 ← phi( gfx_mode::@48/(byte) keyboard_modifiers#115 )
  (byte) keyboard_events_size#133 ← phi( gfx_mode::@48/(byte) keyboard_events_size#135 )
  (byte*) get_vic_charset::return#6 ← phi( gfx_mode::@48/(byte*) get_vic_charset::return#4 )
  (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#6
  (word~) gfx_mode::$58 ← ((word)) (byte*~) gfx_mode::$57
  (word~) gfx_mode::$59 ← (word~) gfx_mode::$58 & (word/signed word/dword/signed dword) $3fff
  (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59
  (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61
  *((byte*) VIC_MEMORY#0) ← (byte~) gfx_mode::$62
  (byte) get_vic_screen::idx#1 ← *((byte*) form_vic_cols#0)
  call get_vic_screen 
  (byte*) get_vic_screen::return#8 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@50
gfx_mode::@50: scope:[gfx_mode]  from gfx_mode::@49
  (byte) keyboard_modifiers#111 ← phi( gfx_mode::@49/(byte) keyboard_modifiers#113 )
  (byte) keyboard_events_size#130 ← phi( gfx_mode::@49/(byte) keyboard_events_size#133 )
  (byte*) get_vic_screen::return#11 ← phi( gfx_mode::@49/(byte*) get_vic_screen::return#8 )
  (byte*~) gfx_mode::$63 ← (byte*) get_vic_screen::return#11
  (byte*) gfx_mode::vic_colors#0 ← (byte*~) gfx_mode::$63
  (byte*) gfx_mode::col#0 ← (byte*) COLS#0
  (byte) gfx_mode::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_mode::@21
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@8
  (byte) keyboard_modifiers#123 ← phi( gfx_mode::@8/(byte) keyboard_modifiers#124 )
  (byte) keyboard_events_size#143 ← phi( gfx_mode::@8/(byte) keyboard_events_size#144 )
  (byte) gfx_mode::vic_control2#3 ← phi( gfx_mode::@8/(byte) gfx_mode::vic_control2#0 )
  (byte~) gfx_mode::$81 ← (byte) gfx_mode::vic_control2#3 | (byte) VIC_MCM#0
  (byte) gfx_mode::vic_control2#1 ← (byte~) gfx_mode::$81
  to:gfx_mode::@9
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@23 gfx_mode::@50
  (byte) keyboard_modifiers#109 ← phi( gfx_mode::@23/(byte) keyboard_modifiers#102 gfx_mode::@50/(byte) keyboard_modifiers#111 )
  (byte) keyboard_events_size#126 ← phi( gfx_mode::@23/(byte) keyboard_events_size#114 gfx_mode::@50/(byte) keyboard_events_size#130 )
  (byte) gfx_mode::cy#4 ← phi( gfx_mode::@23/(byte) gfx_mode::cy#1 gfx_mode::@50/(byte) gfx_mode::cy#0 )
  (byte*) gfx_mode::col#3 ← phi( gfx_mode::@23/(byte*) gfx_mode::col#4 gfx_mode::@50/(byte*) gfx_mode::col#0 )
  (byte*) gfx_mode::vic_colors#3 ← phi( gfx_mode::@23/(byte*) gfx_mode::vic_colors#4 gfx_mode::@50/(byte*) gfx_mode::vic_colors#0 )
  (byte) gfx_mode::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21 gfx_mode::@22
  (byte) keyboard_modifiers#107 ← phi( gfx_mode::@21/(byte) keyboard_modifiers#109 gfx_mode::@22/(byte) keyboard_modifiers#107 )
  (byte) keyboard_events_size#123 ← phi( gfx_mode::@21/(byte) keyboard_events_size#126 gfx_mode::@22/(byte) keyboard_events_size#123 )
  (byte) gfx_mode::cy#3 ← phi( gfx_mode::@21/(byte) gfx_mode::cy#4 gfx_mode::@22/(byte) gfx_mode::cy#3 )
  (byte) gfx_mode::cx#2 ← phi( gfx_mode::@21/(byte) gfx_mode::cx#0 gfx_mode::@22/(byte) gfx_mode::cx#1 )
  (byte*) gfx_mode::col#2 ← phi( gfx_mode::@21/(byte*) gfx_mode::col#3 gfx_mode::@22/(byte*) gfx_mode::col#1 )
  (byte*) gfx_mode::vic_colors#2 ← phi( gfx_mode::@21/(byte*) gfx_mode::vic_colors#3 gfx_mode::@22/(byte*) gfx_mode::vic_colors#1 )
  *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2)
  (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2
  (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2
  (byte) gfx_mode::cx#1 ← (byte) gfx_mode::cx#2 + rangenext(0,$27)
  (bool~) gfx_mode::$82 ← (byte) gfx_mode::cx#1 != rangelast(0,$27)
  if((bool~) gfx_mode::$82) goto gfx_mode::@22
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22
  (byte) keyboard_modifiers#102 ← phi( gfx_mode::@22/(byte) keyboard_modifiers#107 )
  (byte) keyboard_events_size#114 ← phi( gfx_mode::@22/(byte) keyboard_events_size#123 )
  (byte*) gfx_mode::col#4 ← phi( gfx_mode::@22/(byte*) gfx_mode::col#1 )
  (byte*) gfx_mode::vic_colors#4 ← phi( gfx_mode::@22/(byte*) gfx_mode::vic_colors#1 )
  (byte) gfx_mode::cy#2 ← phi( gfx_mode::@22/(byte) gfx_mode::cy#3 )
  (byte) gfx_mode::cy#1 ← (byte) gfx_mode::cy#2 + rangenext(0,$18)
  (bool~) gfx_mode::$83 ← (byte) gfx_mode::cy#1 != rangelast(0,$18)
  if((bool~) gfx_mode::$83) goto gfx_mode::@21
  to:gfx_mode::@24
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@23
  (byte) keyboard_modifiers#96 ← phi( gfx_mode::@23/(byte) keyboard_modifiers#102 )
  (byte) keyboard_events_size#103 ← phi( gfx_mode::@23/(byte) keyboard_events_size#114 )
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) gfx_mode::$64 ← *((byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((byte*) form_vic_bg0_lo#0)
  *((byte*) BGCOL1#0) ← (byte~) gfx_mode::$65
  (byte~) gfx_mode::$66 ← *((byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((byte*) form_vic_bg1_lo#0)
  *((byte*) BGCOL2#0) ← (byte~) gfx_mode::$67
  (byte~) gfx_mode::$68 ← *((byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((byte*) form_vic_bg2_lo#0)
  *((byte*) BGCOL3#0) ← (byte~) gfx_mode::$69
  (byte~) gfx_mode::$70 ← *((byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((byte*) form_vic_bg3_lo#0)
  *((byte*) BGCOL4#0) ← (byte~) gfx_mode::$71
  (bool~) gfx_mode::$72 ← *((byte*) form_dtv_palet#0) == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) gfx_mode::$72) goto gfx_mode::@10
  to:gfx_mode::@25
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode::@24
  (byte) keyboard_modifiers#80 ← phi( gfx_mode::@24/(byte) keyboard_modifiers#96 )
  (byte) keyboard_events_size#83 ← phi( gfx_mode::@24/(byte) keyboard_events_size#103 )
  (byte) gfx_mode::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_mode::@29
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@24
  (byte) keyboard_modifiers#79 ← phi( gfx_mode::@24/(byte) keyboard_modifiers#96 )
  (byte) keyboard_events_size#82 ← phi( gfx_mode::@24/(byte) keyboard_events_size#103 )
  (byte) gfx_mode::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_mode::@26
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@25 gfx_mode::@26
  (byte) keyboard_modifiers#58 ← phi( gfx_mode::@25/(byte) keyboard_modifiers#79 gfx_mode::@26/(byte) keyboard_modifiers#58 )
  (byte) keyboard_events_size#58 ← phi( gfx_mode::@25/(byte) keyboard_events_size#82 gfx_mode::@26/(byte) keyboard_events_size#58 )
  (byte) gfx_mode::j#2 ← phi( gfx_mode::@25/(byte) gfx_mode::j#0 gfx_mode::@26/(byte) gfx_mode::j#1 )
  *((byte*) DTV_PALETTE#0 + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2
  (byte) gfx_mode::j#1 ← (byte) gfx_mode::j#2 + rangenext(0,$f)
  (bool~) gfx_mode::$84 ← (byte) gfx_mode::j#1 != rangelast(0,$f)
  if((bool~) gfx_mode::$84) goto gfx_mode::@26
  to:gfx_mode::@31
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@10 gfx_mode::@29
  (byte) keyboard_modifiers#59 ← phi( gfx_mode::@10/(byte) keyboard_modifiers#80 gfx_mode::@29/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#59 ← phi( gfx_mode::@10/(byte) keyboard_events_size#83 gfx_mode::@29/(byte) keyboard_events_size#59 )
  (byte) gfx_mode::i#2 ← phi( gfx_mode::@10/(byte) gfx_mode::i#0 gfx_mode::@29/(byte) gfx_mode::i#1 )
  *((byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2)
  (byte) gfx_mode::i#1 ← (byte) gfx_mode::i#2 + rangenext(0,$f)
  (bool~) gfx_mode::$85 ← (byte) gfx_mode::i#1 != rangelast(0,$f)
  if((bool~) gfx_mode::$85) goto gfx_mode::@29
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@26 gfx_mode::@29 gfx_mode::@42
  (byte) keyboard_modifiers#42 ← phi( gfx_mode::@26/(byte) keyboard_modifiers#58 gfx_mode::@29/(byte) keyboard_modifiers#59 gfx_mode::@42/(byte) keyboard_modifiers#60 )
  (byte) keyboard_events_size#45 ← phi( gfx_mode::@26/(byte) keyboard_events_size#58 gfx_mode::@29/(byte) keyboard_events_size#59 gfx_mode::@42/(byte) keyboard_events_size#60 )
  if(true) goto gfx_mode::@32
  to:gfx_mode::@return
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@31
  (byte) keyboard_modifiers#81 ← phi( gfx_mode::@31/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#84 ← phi( gfx_mode::@31/(byte) keyboard_events_size#45 )
  to:gfx_mode::@34
gfx_mode::@34: scope:[gfx_mode]  from gfx_mode::@32 gfx_mode::@35
  (byte) keyboard_modifiers#61 ← phi( gfx_mode::@32/(byte) keyboard_modifiers#81 gfx_mode::@35/(byte) keyboard_modifiers#82 )
  (byte) keyboard_events_size#61 ← phi( gfx_mode::@32/(byte) keyboard_events_size#84 gfx_mode::@35/(byte) keyboard_events_size#85 )
  (bool~) gfx_mode::$86 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) $ff
  if((bool~) gfx_mode::$86) goto gfx_mode::@35
  to:gfx_mode::@36
gfx_mode::@35: scope:[gfx_mode]  from gfx_mode::@34
  (byte) keyboard_modifiers#82 ← phi( gfx_mode::@34/(byte) keyboard_modifiers#61 )
  (byte) keyboard_events_size#85 ← phi( gfx_mode::@34/(byte) keyboard_events_size#61 )
  to:gfx_mode::@34
gfx_mode::@36: scope:[gfx_mode]  from gfx_mode::@34
  (byte) keyboard_modifiers#41 ← phi( gfx_mode::@34/(byte) keyboard_modifiers#61 )
  (byte) keyboard_events_size#44 ← phi( gfx_mode::@34/(byte) keyboard_events_size#61 )
  call keyboard_event_scan 
  to:gfx_mode::@51
gfx_mode::@51: scope:[gfx_mode]  from gfx_mode::@36
  (byte) keyboard_modifiers#25 ← phi( gfx_mode::@36/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#28 ← phi( gfx_mode::@36/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#28
  (byte) keyboard_modifiers#10 ← (byte) keyboard_modifiers#25
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:gfx_mode::@52
gfx_mode::@52: scope:[gfx_mode]  from gfx_mode::@51
  (byte) keyboard_modifiers#43 ← phi( gfx_mode::@51/(byte) keyboard_modifiers#10 )
  (byte) keyboard_events_size#29 ← phi( gfx_mode::@51/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#6 ← phi( gfx_mode::@51/(byte) keyboard_event_get::return#3 )
  (byte~) gfx_mode::$88 ← (byte) keyboard_event_get::return#6
  (byte) keyboard_events_size#10 ← (byte) keyboard_events_size#29
  (byte) gfx_mode::keyboard_event#0 ← (byte~) gfx_mode::$88
  (bool~) gfx_mode::$89 ← (byte) gfx_mode::keyboard_event#0 == (byte) KEY_SPACE#0
  (bool~) gfx_mode::$90 ← ! (bool~) gfx_mode::$89
  if((bool~) gfx_mode::$90) goto gfx_mode::@42
  to:gfx_mode::@return
gfx_mode::@42: scope:[gfx_mode]  from gfx_mode::@52
  (byte) keyboard_modifiers#60 ← phi( gfx_mode::@52/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#60 ← phi( gfx_mode::@52/(byte) keyboard_events_size#10 )
  to:gfx_mode::@31
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@31 gfx_mode::@52
  (byte) keyboard_modifiers#26 ← phi( gfx_mode::@31/(byte) keyboard_modifiers#42 gfx_mode::@52/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#30 ← phi( gfx_mode::@31/(byte) keyboard_events_size#45 gfx_mode::@52/(byte) keyboard_events_size#10 )
  (byte) keyboard_events_size#11 ← (byte) keyboard_events_size#30
  (byte) keyboard_modifiers#11 ← (byte) keyboard_modifiers#26
  return 
  to:@return
gfx_init: scope:[gfx_init]  from main::@7
  call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  call gfx_init_vic_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  call gfx_init_plane_full 
  to:gfx_init::@15
gfx_init::@15: scope:[gfx_init]  from gfx_init::@14
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@15
  return 
  to:@return
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  *((byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32
  (byte*) gfx_init_charset::chargen#0 ← (byte*) CHARGEN#0
  (byte*) gfx_init_charset::charset#0 ← (byte*) VIC_CHARSET_ROM#0
  (byte) gfx_init_charset::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  (byte) gfx_init_charset::c#4 ← phi( gfx_init_charset/(byte) gfx_init_charset::c#0 gfx_init_charset::@3/(byte) gfx_init_charset::c#1 )
  (byte*) gfx_init_charset::charset#3 ← phi( gfx_init_charset/(byte*) gfx_init_charset::charset#0 gfx_init_charset::@3/(byte*) gfx_init_charset::charset#4 )
  (byte*) gfx_init_charset::chargen#3 ← phi( gfx_init_charset/(byte*) gfx_init_charset::chargen#0 gfx_init_charset::@3/(byte*) gfx_init_charset::chargen#4 )
  (byte) gfx_init_charset::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  (byte) gfx_init_charset::c#3 ← phi( gfx_init_charset::@1/(byte) gfx_init_charset::c#4 gfx_init_charset::@2/(byte) gfx_init_charset::c#3 )
  (byte) gfx_init_charset::l#2 ← phi( gfx_init_charset::@1/(byte) gfx_init_charset::l#0 gfx_init_charset::@2/(byte) gfx_init_charset::l#1 )
  (byte*) gfx_init_charset::charset#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::charset#3 gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  (byte*) gfx_init_charset::chargen#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::chargen#3 gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2)
  (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2
  (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2
  (byte) gfx_init_charset::l#1 ← (byte) gfx_init_charset::l#2 + rangenext(0,7)
  (bool~) gfx_init_charset::$0 ← (byte) gfx_init_charset::l#1 != rangelast(0,7)
  if((bool~) gfx_init_charset::$0) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  (byte*) gfx_init_charset::charset#4 ← phi( gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  (byte*) gfx_init_charset::chargen#4 ← phi( gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  (byte) gfx_init_charset::c#2 ← phi( gfx_init_charset::@2/(byte) gfx_init_charset::c#3 )
  (byte) gfx_init_charset::c#1 ← (byte) gfx_init_charset::c#2 + rangenext(0,$ff)
  (bool~) gfx_init_charset::$1 ← (byte) gfx_init_charset::c#1 != rangelast(0,$ff)
  if((bool~) gfx_init_charset::$1) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  *((byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  return 
  to:@return
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  (byte*) gfx_init_screen0::ch#0 ← (byte*) VIC_SCREEN0#0
  (byte) gfx_init_screen0::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(byte*) gfx_init_screen0::ch#0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#4 )
  (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte) gfx_init_screen0::cy#0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  (byte) gfx_init_screen0::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cx#0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  (byte) gfx_init_screen0::cy#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cy#4 gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
  *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3
  (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  (byte) gfx_init_screen0::cx#1 ← (byte) gfx_init_screen0::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen0::$4 ← (byte) gfx_init_screen0::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen0::$4) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#4 ← phi( gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cy#3 ← phi( gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (byte) gfx_init_screen0::cy#1 ← (byte) gfx_init_screen0::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen0::$5 ← (byte) gfx_init_screen0::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen0::$5) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  return 
  to:@return
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  (byte*) gfx_init_screen1::ch#0 ← (byte*) VIC_SCREEN1#0
  (byte) gfx_init_screen1::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  (byte*) gfx_init_screen1::ch#3 ← phi( gfx_init_screen1/(byte*) gfx_init_screen1::ch#0 gfx_init_screen1::@3/(byte*) gfx_init_screen1::ch#4 )
  (byte) gfx_init_screen1::cy#4 ← phi( gfx_init_screen1/(byte) gfx_init_screen1::cy#0 gfx_init_screen1::@3/(byte) gfx_init_screen1::cy#1 )
  (byte) gfx_init_screen1::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  (byte*) gfx_init_screen1::ch#2 ← phi( gfx_init_screen1::@1/(byte*) gfx_init_screen1::ch#3 gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  (byte) gfx_init_screen1::cy#2 ← phi( gfx_init_screen1::@1/(byte) gfx_init_screen1::cy#4 gfx_init_screen1::@2/(byte) gfx_init_screen1::cy#2 )
  (byte) gfx_init_screen1::cx#2 ← phi( gfx_init_screen1::@1/(byte) gfx_init_screen1::cx#0 gfx_init_screen1::@2/(byte) gfx_init_screen1::cx#1 )
  (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#2
  (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1
  (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2
  (byte) gfx_init_screen1::cx#1 ← (byte) gfx_init_screen1::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen1::$2 ← (byte) gfx_init_screen1::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen1::$2) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  (byte*) gfx_init_screen1::ch#4 ← phi( gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  (byte) gfx_init_screen1::cy#3 ← phi( gfx_init_screen1::@2/(byte) gfx_init_screen1::cy#2 )
  (byte) gfx_init_screen1::cy#1 ← (byte) gfx_init_screen1::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen1::$3 ← (byte) gfx_init_screen1::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen1::$3) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  return 
  to:@return
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  (byte*) gfx_init_screen2::ch#0 ← (byte*) VIC_SCREEN2#0
  (byte) gfx_init_screen2::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  (byte*) gfx_init_screen2::ch#3 ← phi( gfx_init_screen2/(byte*) gfx_init_screen2::ch#0 gfx_init_screen2::@3/(byte*) gfx_init_screen2::ch#4 )
  (byte) gfx_init_screen2::cy#4 ← phi( gfx_init_screen2/(byte) gfx_init_screen2::cy#0 gfx_init_screen2::@3/(byte) gfx_init_screen2::cy#1 )
  (byte) gfx_init_screen2::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  (byte*) gfx_init_screen2::ch#2 ← phi( gfx_init_screen2::@1/(byte*) gfx_init_screen2::ch#3 gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  (byte) gfx_init_screen2::cy#2 ← phi( gfx_init_screen2::@1/(byte) gfx_init_screen2::cy#4 gfx_init_screen2::@2/(byte) gfx_init_screen2::cy#2 )
  (byte) gfx_init_screen2::cx#2 ← phi( gfx_init_screen2::@1/(byte) gfx_init_screen2::cx#0 gfx_init_screen2::@2/(byte) gfx_init_screen2::cx#1 )
  (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#2
  (byte~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$1
  (byte/signed word/word/dword/signed dword~) gfx_init_screen2::$2 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0
  (byte) gfx_init_screen2::col2#0 ← (byte/signed word/word/dword/signed dword~) gfx_init_screen2::$2
  (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
  *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4
  (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2
  (byte) gfx_init_screen2::cx#1 ← (byte) gfx_init_screen2::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen2::$5 ← (byte) gfx_init_screen2::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen2::$5) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  (byte*) gfx_init_screen2::ch#4 ← phi( gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  (byte) gfx_init_screen2::cy#3 ← phi( gfx_init_screen2::@2/(byte) gfx_init_screen2::cy#2 )
  (byte) gfx_init_screen2::cy#1 ← (byte) gfx_init_screen2::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen2::$6 ← (byte) gfx_init_screen2::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen2::$6) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  return 
  to:@return
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  (byte*) gfx_init_screen3::ch#0 ← (byte*) VIC_SCREEN3#0
  (byte) gfx_init_screen3::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  (byte*) gfx_init_screen3::ch#3 ← phi( gfx_init_screen3/(byte*) gfx_init_screen3::ch#0 gfx_init_screen3::@3/(byte*) gfx_init_screen3::ch#4 )
  (byte) gfx_init_screen3::cy#4 ← phi( gfx_init_screen3/(byte) gfx_init_screen3::cy#0 gfx_init_screen3::@3/(byte) gfx_init_screen3::cy#1 )
  (byte) gfx_init_screen3::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  (byte*) gfx_init_screen3::ch#2 ← phi( gfx_init_screen3::@1/(byte*) gfx_init_screen3::ch#3 gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  (byte) gfx_init_screen3::cy#2 ← phi( gfx_init_screen3::@1/(byte) gfx_init_screen3::cy#4 gfx_init_screen3::@2/(byte) gfx_init_screen3::cy#2 )
  (byte) gfx_init_screen3::cx#2 ← phi( gfx_init_screen3::@1/(byte) gfx_init_screen3::cx#0 gfx_init_screen3::@2/(byte) gfx_init_screen3::cx#1 )
  (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2
  *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3
  (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2
  (byte) gfx_init_screen3::cx#1 ← (byte) gfx_init_screen3::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen3::$4 ← (byte) gfx_init_screen3::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen3::$4) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  (byte*) gfx_init_screen3::ch#4 ← phi( gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  (byte) gfx_init_screen3::cy#3 ← phi( gfx_init_screen3::@2/(byte) gfx_init_screen3::cy#2 )
  (byte) gfx_init_screen3::cy#1 ← (byte) gfx_init_screen3::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen3::$5 ← (byte) gfx_init_screen3::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen3::$5) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  return 
  to:@return
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  (byte*) gfx_init_screen4::ch#0 ← (byte*) VIC_SCREEN4#0
  (byte) gfx_init_screen4::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  (byte) gfx_init_screen4::cy#4 ← phi( gfx_init_screen4/(byte) gfx_init_screen4::cy#0 gfx_init_screen4::@3/(byte) gfx_init_screen4::cy#1 )
  (byte*) gfx_init_screen4::ch#3 ← phi( gfx_init_screen4/(byte*) gfx_init_screen4::ch#0 gfx_init_screen4::@3/(byte*) gfx_init_screen4::ch#4 )
  (byte) gfx_init_screen4::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  (byte) gfx_init_screen4::cy#3 ← phi( gfx_init_screen4::@1/(byte) gfx_init_screen4::cy#4 gfx_init_screen4::@2/(byte) gfx_init_screen4::cy#3 )
  (byte) gfx_init_screen4::cx#2 ← phi( gfx_init_screen4::@1/(byte) gfx_init_screen4::cx#0 gfx_init_screen4::@2/(byte) gfx_init_screen4::cx#1 )
  (byte*) gfx_init_screen4::ch#2 ← phi( gfx_init_screen4::@1/(byte*) gfx_init_screen4::ch#3 gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2
  (byte) gfx_init_screen4::cx#1 ← (byte) gfx_init_screen4::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen4::$0 ← (byte) gfx_init_screen4::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen4::$0) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  (byte*) gfx_init_screen4::ch#4 ← phi( gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  (byte) gfx_init_screen4::cy#2 ← phi( gfx_init_screen4::@2/(byte) gfx_init_screen4::cy#3 )
  (byte) gfx_init_screen4::cy#1 ← (byte) gfx_init_screen4::cy#2 + rangenext(0,$18)
  (bool~) gfx_init_screen4::$1 ← (byte) gfx_init_screen4::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen4::$1) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  return 
  to:@return
gfx_init_vic_bitmap: scope:[gfx_init_vic_bitmap]  from gfx_init::@6
  (byte*) bitmap_init::bitmap#0 ← (byte*) VIC_BITMAP#0
  call bitmap_init 
  to:gfx_init_vic_bitmap::@3
gfx_init_vic_bitmap::@3: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap
  call bitmap_clear 
  to:gfx_init_vic_bitmap::@4
gfx_init_vic_bitmap::@4: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@3
  (byte[]) gfx_init_vic_bitmap::lines_x#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $80, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80 }
  (byte[]) gfx_init_vic_bitmap::lines_y#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $c7, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte) gfx_init_vic_bitmap::lines_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) gfx_init_vic_bitmap::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@1: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@4 gfx_init_vic_bitmap::@5
  (byte) gfx_init_vic_bitmap::l#2 ← phi( gfx_init_vic_bitmap::@4/(byte) gfx_init_vic_bitmap::l#0 gfx_init_vic_bitmap::@5/(byte) gfx_init_vic_bitmap::l#1 )
  (byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$2 ← (byte) gfx_init_vic_bitmap::l#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) bitmap_line::x0#0 ← *((byte[]) gfx_init_vic_bitmap::lines_x#0 + (byte) gfx_init_vic_bitmap::l#2)
  (byte) bitmap_line::x1#0 ← *((byte[]) gfx_init_vic_bitmap::lines_x#0 + (byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$2)
  (byte) bitmap_line::y0#0 ← *((byte[]) gfx_init_vic_bitmap::lines_y#0 + (byte) gfx_init_vic_bitmap::l#2)
  (byte) bitmap_line::y1#0 ← *((byte[]) gfx_init_vic_bitmap::lines_y#0 + (byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$3)
  call bitmap_line 
  to:gfx_init_vic_bitmap::@5
gfx_init_vic_bitmap::@5: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  (byte) gfx_init_vic_bitmap::l#3 ← phi( gfx_init_vic_bitmap::@1/(byte) gfx_init_vic_bitmap::l#2 )
  (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#3
  (bool~) gfx_init_vic_bitmap::$5 ← (byte) gfx_init_vic_bitmap::l#1 < (byte) gfx_init_vic_bitmap::lines_cnt#0
  if((bool~) gfx_init_vic_bitmap::$5) goto gfx_init_vic_bitmap::@1
  to:gfx_init_vic_bitmap::@return
gfx_init_vic_bitmap::@return: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@5
  return 
  to:@return
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  (dword~) gfx_init_plane_8bppchunky::$0 ← (dword) PLANE_8BPP_CHUNKY#0 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_8bppchunky::$1 ← ((byte)) (dword~) gfx_init_plane_8bppchunky::$0
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 ← (byte~) gfx_init_plane_8bppchunky::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#0 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3 ← phi( gfx_init_plane_8bppchunky/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3
  (byte*) gfx_init_plane_8bppchunky::gfxb#0 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  (byte) gfx_init_plane_8bppchunky::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5 gfx_init_plane_8bppchunky::@7
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 )
  (byte) gfx_init_plane_8bppchunky::y#6 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::y#1 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::y#0 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#5 ← phi( gfx_init_plane_8bppchunky::@5/(byte*) gfx_init_plane_8bppchunky::gfxb#6 gfx_init_plane_8bppchunky::@7/(byte*) gfx_init_plane_8bppchunky::gfxb#0 )
  (word) gfx_init_plane_8bppchunky::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  (byte) gfx_init_plane_8bppchunky::y#4 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::y#2 )
  (word) gfx_init_plane_8bppchunky::x#3 ← phi( gfx_init_plane_8bppchunky::@1/(word) gfx_init_plane_8bppchunky::x#0 gfx_init_plane_8bppchunky::@3/(word) gfx_init_plane_8bppchunky::x#1 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#3 ← phi( gfx_init_plane_8bppchunky::@1/(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  (bool~) gfx_init_plane_8bppchunky::$6 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (word/dword/signed dword) $8000
  (bool~) gfx_init_plane_8bppchunky::$7 ← ! (bool~) gfx_init_plane_8bppchunky::$6
  if((bool~) gfx_init_plane_8bppchunky::$7) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@8
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 gfx_init_plane_8bppchunky::@8/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::@8/(byte*) gfx_init_plane_8bppchunky::gfxb#2 )
  (byte) gfx_init_plane_8bppchunky::y#2 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::y#4 gfx_init_plane_8bppchunky::@8/(byte) gfx_init_plane_8bppchunky::y#5 )
  (word) gfx_init_plane_8bppchunky::x#2 ← phi( gfx_init_plane_8bppchunky::@2/(word) gfx_init_plane_8bppchunky::x#3 gfx_init_plane_8bppchunky::@8/(word) gfx_init_plane_8bppchunky::x#4 )
  (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#2
  (byte~) gfx_init_plane_8bppchunky::$10 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9
  (byte) gfx_init_plane_8bppchunky::c#0 ← (byte~) gfx_init_plane_8bppchunky::$10
  *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0
  (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4
  (word) gfx_init_plane_8bppchunky::x#1 ← (word) gfx_init_plane_8bppchunky::x#2 + rangenext(0,$13f)
  (bool~) gfx_init_plane_8bppchunky::$11 ← (word) gfx_init_plane_8bppchunky::x#1 != rangelast(0,$13f)
  if((bool~) gfx_init_plane_8bppchunky::$11) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  (byte) gfx_init_plane_8bppchunky::y#7 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::y#4 )
  (word) gfx_init_plane_8bppchunky::x#5 ← phi( gfx_init_plane_8bppchunky::@2/(word) gfx_init_plane_8bppchunky::x#3 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 )
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@8
gfx_init_plane_8bppchunky::@8: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  (byte) gfx_init_plane_8bppchunky::y#5 ← phi( gfx_init_plane_8bppchunky::@4/(byte) gfx_init_plane_8bppchunky::y#7 )
  (word) gfx_init_plane_8bppchunky::x#4 ← phi( gfx_init_plane_8bppchunky::@4/(word) gfx_init_plane_8bppchunky::x#5 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5 ← phi( gfx_init_plane_8bppchunky::@4/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5
  (byte*) gfx_init_plane_8bppchunky::gfxb#2 ← ((byte*)) (word/signed word/dword/signed dword) $4000
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 ← phi( gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#6 ← phi( gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  (byte) gfx_init_plane_8bppchunky::y#3 ← phi( gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::y#2 )
  (byte) gfx_init_plane_8bppchunky::y#1 ← (byte) gfx_init_plane_8bppchunky::y#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_8bppchunky::$12 ← (byte) gfx_init_plane_8bppchunky::y#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_8bppchunky::$12) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_8bppchunky::$3 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_8bppchunky::$4 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_8bppchunky::$3
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← (byte~) gfx_init_plane_8bppchunky::$4
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@9
gfx_init_plane_8bppchunky::@9: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@9
  return 
  to:@return
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  (dword~) gfx_init_plane_horisontal::$0 ← (dword) PLANE_HORISONTAL#0 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_horisontal::$1 ← ((byte)) (dword~) gfx_init_plane_horisontal::$0
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 ← (byte~) gfx_init_plane_horisontal::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← (byte) gfx_init_plane_horisontal::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@9
gfx_init_plane_horisontal::@9: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#2 ← phi( gfx_init_plane_horisontal/(byte) gfx_init_plane_horisontal::gfxbCpuBank#0 )
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal::gfxbCpuBank#2
  (word/dword~) gfx_init_plane_horisontal::$3 ← (dword) PLANE_HORISONTAL#0 & (word/signed word/dword/signed dword) $3fff
  (word/dword/signed dword~) gfx_init_plane_horisontal::$4 ← (word/signed word/dword/signed dword) $4000 + (word/dword~) gfx_init_plane_horisontal::$3
  (byte*) gfx_init_plane_horisontal::gfxa#0 ← ((byte*)) (word/dword/signed dword~) gfx_init_plane_horisontal::$4
  (byte) gfx_init_plane_horisontal::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7 gfx_init_plane_horisontal::@9
  (byte*) gfx_init_plane_horisontal::gfxa#6 ← phi( gfx_init_plane_horisontal::@7/(byte*) gfx_init_plane_horisontal::gfxa#8 gfx_init_plane_horisontal::@9/(byte*) gfx_init_plane_horisontal::gfxa#0 )
  (byte) gfx_init_plane_horisontal::ay#4 ← phi( gfx_init_plane_horisontal::@7/(byte) gfx_init_plane_horisontal::ay#1 gfx_init_plane_horisontal::@9/(byte) gfx_init_plane_horisontal::ay#0 )
  (byte) gfx_init_plane_horisontal::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  (byte) gfx_init_plane_horisontal::ax#5 ← phi( gfx_init_plane_horisontal::@1/(byte) gfx_init_plane_horisontal::ax#0 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ax#1 )
  (byte*) gfx_init_plane_horisontal::gfxa#5 ← phi( gfx_init_plane_horisontal::@1/(byte*) gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  (byte) gfx_init_plane_horisontal::ay#2 ← phi( gfx_init_plane_horisontal::@1/(byte) gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ay#5 )
  (byte~) gfx_init_plane_horisontal::$8 ← (byte) gfx_init_plane_horisontal::ay#2 & (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) gfx_init_plane_horisontal::$9 ← (byte~) gfx_init_plane_horisontal::$8 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) gfx_init_plane_horisontal::$9) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  (byte) gfx_init_plane_horisontal::ay#6 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ay#2 )
  (byte) gfx_init_plane_horisontal::ax#3 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ax#5 )
  (byte*) gfx_init_plane_horisontal::gfxa#3 ← phi( gfx_init_plane_horisontal::@2/(byte*) gfx_init_plane_horisontal::gfxa#5 )
  *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  (byte) gfx_init_plane_horisontal::ay#7 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ay#2 )
  (byte) gfx_init_plane_horisontal::ax#4 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ax#5 )
  (byte*) gfx_init_plane_horisontal::gfxa#4 ← phi( gfx_init_plane_horisontal::@2/(byte*) gfx_init_plane_horisontal::gfxa#5 )
  *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (byte/word/signed word/dword/signed dword) $ff
  (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#4
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  (byte*) gfx_init_plane_horisontal::gfxa#7 ← phi( gfx_init_plane_horisontal::@3/(byte*) gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::@5/(byte*) gfx_init_plane_horisontal::gfxa#2 )
  (byte) gfx_init_plane_horisontal::ay#5 ← phi( gfx_init_plane_horisontal::@3/(byte) gfx_init_plane_horisontal::ay#6 gfx_init_plane_horisontal::@5/(byte) gfx_init_plane_horisontal::ay#7 )
  (byte) gfx_init_plane_horisontal::ax#2 ← phi( gfx_init_plane_horisontal::@3/(byte) gfx_init_plane_horisontal::ax#3 gfx_init_plane_horisontal::@5/(byte) gfx_init_plane_horisontal::ax#4 )
  (byte) gfx_init_plane_horisontal::ax#1 ← (byte) gfx_init_plane_horisontal::ax#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_horisontal::$10 ← (byte) gfx_init_plane_horisontal::ax#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_horisontal::$10) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  (byte*) gfx_init_plane_horisontal::gfxa#8 ← phi( gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  (byte) gfx_init_plane_horisontal::ay#3 ← phi( gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ay#5 )
  (byte) gfx_init_plane_horisontal::ay#1 ← (byte) gfx_init_plane_horisontal::ay#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_horisontal::$11 ← (byte) gfx_init_plane_horisontal::ay#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_horisontal::$11) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@8
gfx_init_plane_horisontal::@8: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_horisontal::$5 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_horisontal::$6 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_horisontal::$5
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#4 ← (byte~) gfx_init_plane_horisontal::$6
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@10
gfx_init_plane_horisontal::@10: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@8
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@10
  return 
  to:@return
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  (dword~) gfx_init_plane_horisontal2::$0 ← (dword) PLANE_HORISONTAL2#0 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_horisontal2::$1 ← ((byte)) (dword~) gfx_init_plane_horisontal2::$0
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 ← (byte~) gfx_init_plane_horisontal2::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#5 ← (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@5
gfx_init_plane_horisontal2::@5: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2 ← phi( gfx_init_plane_horisontal2/(byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 )
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2
  (word/dword~) gfx_init_plane_horisontal2::$3 ← (dword) PLANE_HORISONTAL2#0 & (word/signed word/dword/signed dword) $3fff
  (word/dword/signed dword~) gfx_init_plane_horisontal2::$4 ← (word/signed word/dword/signed dword) $4000 + (word/dword~) gfx_init_plane_horisontal2::$3
  (byte*) gfx_init_plane_horisontal2::gfxa#0 ← ((byte*)) (word/dword/signed dword~) gfx_init_plane_horisontal2::$4
  (byte[]) gfx_init_plane_horisontal2::row_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $55, (byte/word/signed word/dword/signed dword) $aa, (byte/word/signed word/dword/signed dword) $ff }
  (byte) gfx_init_plane_horisontal2::ay#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3 gfx_init_plane_horisontal2::@5
  (byte*) gfx_init_plane_horisontal2::gfxa#3 ← phi( gfx_init_plane_horisontal2::@3/(byte*) gfx_init_plane_horisontal2::gfxa#4 gfx_init_plane_horisontal2::@5/(byte*) gfx_init_plane_horisontal2::gfxa#0 )
  (byte) gfx_init_plane_horisontal2::ay#4 ← phi( gfx_init_plane_horisontal2::@3/(byte) gfx_init_plane_horisontal2::ay#1 gfx_init_plane_horisontal2::@5/(byte) gfx_init_plane_horisontal2::ay#0 )
  (byte) gfx_init_plane_horisontal2::ax#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  (byte) gfx_init_plane_horisontal2::ax#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) gfx_init_plane_horisontal2::ax#0 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ax#1 )
  (byte*) gfx_init_plane_horisontal2::gfxa#2 ← phi( gfx_init_plane_horisontal2::@1/(byte*) gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  (byte) gfx_init_plane_horisontal2::ay#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ay#2 )
  (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) gfx_init_plane_horisontal2::$9 ← (byte~) gfx_init_plane_horisontal2::$8 & (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$9
  *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0)
  (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2
  (byte) gfx_init_plane_horisontal2::ax#1 ← (byte) gfx_init_plane_horisontal2::ax#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_horisontal2::$10 ← (byte) gfx_init_plane_horisontal2::ax#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_horisontal2::$10) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  (byte*) gfx_init_plane_horisontal2::gfxa#4 ← phi( gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  (byte) gfx_init_plane_horisontal2::ay#3 ← phi( gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ay#2 )
  (byte) gfx_init_plane_horisontal2::ay#1 ← (byte) gfx_init_plane_horisontal2::ay#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_horisontal2::$11 ← (byte) gfx_init_plane_horisontal2::ay#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_horisontal2::$11) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_horisontal2::$5 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_horisontal2::$6 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_horisontal2::$5
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#6 ← (byte~) gfx_init_plane_horisontal2::$6
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@6
gfx_init_plane_horisontal2::@6: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@6
  return 
  to:@return
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  (dword~) gfx_init_plane_vertical::$0 ← (dword) PLANE_VERTICAL#0 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_vertical::$1 ← ((byte)) (dword~) gfx_init_plane_vertical::$0
  (byte) gfx_init_plane_vertical::gfxbCpuBank#0 ← (byte~) gfx_init_plane_vertical::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#7 ← (byte) gfx_init_plane_vertical::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@5
gfx_init_plane_vertical::@5: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical
  (byte) gfx_init_plane_vertical::gfxbCpuBank#2 ← phi( gfx_init_plane_vertical/(byte) gfx_init_plane_vertical::gfxbCpuBank#0 )
  (byte) gfx_init_plane_vertical::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_vertical::gfxbCpuBank#2
  (word/dword~) gfx_init_plane_vertical::$3 ← (dword) PLANE_VERTICAL#0 & (word/signed word/dword/signed dword) $3fff
  (word/dword/signed dword~) gfx_init_plane_vertical::$4 ← (word/signed word/dword/signed dword) $4000 + (word/dword~) gfx_init_plane_vertical::$3
  (byte*) gfx_init_plane_vertical::gfxb#0 ← ((byte*)) (word/dword/signed dword~) gfx_init_plane_vertical::$4
  (byte) gfx_init_plane_vertical::by#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3 gfx_init_plane_vertical::@5
  (byte) gfx_init_plane_vertical::by#4 ← phi( gfx_init_plane_vertical::@3/(byte) gfx_init_plane_vertical::by#1 gfx_init_plane_vertical::@5/(byte) gfx_init_plane_vertical::by#0 )
  (byte*) gfx_init_plane_vertical::gfxb#3 ← phi( gfx_init_plane_vertical::@3/(byte*) gfx_init_plane_vertical::gfxb#4 gfx_init_plane_vertical::@5/(byte*) gfx_init_plane_vertical::gfxb#0 )
  (byte) gfx_init_plane_vertical::bx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  (byte) gfx_init_plane_vertical::by#3 ← phi( gfx_init_plane_vertical::@1/(byte) gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::by#3 )
  (byte) gfx_init_plane_vertical::bx#2 ← phi( gfx_init_plane_vertical::@1/(byte) gfx_init_plane_vertical::bx#0 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::bx#1 )
  (byte*) gfx_init_plane_vertical::gfxb#2 ← phi( gfx_init_plane_vertical::@1/(byte*) gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2
  (byte) gfx_init_plane_vertical::bx#1 ← (byte) gfx_init_plane_vertical::bx#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_vertical::$8 ← (byte) gfx_init_plane_vertical::bx#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_vertical::$8) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  (byte*) gfx_init_plane_vertical::gfxb#4 ← phi( gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  (byte) gfx_init_plane_vertical::by#2 ← phi( gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::by#3 )
  (byte) gfx_init_plane_vertical::by#1 ← (byte) gfx_init_plane_vertical::by#2 + rangenext(0,$c7)
  (bool~) gfx_init_plane_vertical::$9 ← (byte) gfx_init_plane_vertical::by#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_vertical::$9) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_vertical::$5 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_vertical::$6 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_vertical::$5
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#8 ← (byte~) gfx_init_plane_vertical::$6
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@6
gfx_init_plane_vertical::@6: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@6
  return 
  to:@return
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  (dword~) gfx_init_plane_charset8::$0 ← (dword) PLANE_CHARSET8#0 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_charset8::$1 ← ((byte)) (dword~) gfx_init_plane_charset8::$0
  (byte) gfx_init_plane_charset8::gfxbCpuBank#0 ← (byte~) gfx_init_plane_charset8::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#9 ← (byte) gfx_init_plane_charset8::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  (byte) gfx_init_plane_charset8::gfxbCpuBank#2 ← phi( gfx_init_plane_charset8/(byte) gfx_init_plane_charset8::gfxbCpuBank#0 )
  (byte) gfx_init_plane_charset8::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_charset8::gfxbCpuBank#2
  (word/dword~) gfx_init_plane_charset8::$3 ← (dword) PLANE_CHARSET8#0 & (word/signed word/dword/signed dword) $3fff
  (word/dword/signed dword~) gfx_init_plane_charset8::$4 ← (word/signed word/dword/signed dword) $4000 + (word/dword~) gfx_init_plane_charset8::$3
  (byte*) gfx_init_plane_charset8::gfxa#0 ← ((byte*)) (word/dword/signed dword~) gfx_init_plane_charset8::$4
  (byte*) gfx_init_plane_charset8::chargen#0 ← (byte*) CHARGEN#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_CHARROM#0
  (byte) gfx_init_plane_charset8::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) gfx_init_plane_charset8::ch#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::ch#0 )
  (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#8 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::col#0 )
  (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#8 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::gfxa#0 )
  (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#5 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::chargen#0 )
  (byte) gfx_init_plane_charset8::cr#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::ch#7 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::cr#0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  (byte) gfx_init_plane_charset8::cp#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::ch#5 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::ch#7 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#7 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cp#3 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cp#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  (byte) gfx_init_plane_charset8::col#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#3 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  (byte) gfx_init_plane_charset8::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) gfx_init_plane_charset8::$8 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) $80
  (bool~) gfx_init_plane_charset8::$9 ← (byte~) gfx_init_plane_charset8::$8 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_init_plane_charset8::$10 ← ! (bool~) gfx_init_plane_charset8::$9
  if((bool~) gfx_init_plane_charset8::$10) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  (byte) gfx_init_plane_charset8::ch#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::ch#6 )
  (byte*) gfx_init_plane_charset8::chargen#6 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::chargen#8 )
  (byte) gfx_init_plane_charset8::cr#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cr#5 )
  (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cp#4 )
  (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::col#3 )
  (byte) gfx_init_plane_charset8::bits#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::bits#4 )
  (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::gfxa#4 )
  (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::c#0 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::c#1 )
  *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  (byte~) gfx_init_plane_charset8::$11 ← (byte) gfx_init_plane_charset8::bits#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) gfx_init_plane_charset8::bits#1 ← (byte~) gfx_init_plane_charset8::$11
  (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  (byte) gfx_init_plane_charset8::cp#1 ← (byte) gfx_init_plane_charset8::cp#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$12 ← (byte) gfx_init_plane_charset8::cp#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$12) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  (byte) gfx_init_plane_charset8::ch#6 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 )
  (byte*) gfx_init_plane_charset8::chargen#8 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 )
  (byte) gfx_init_plane_charset8::cr#5 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 )
  (byte) gfx_init_plane_charset8::cp#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 )
  (byte) gfx_init_plane_charset8::bits#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 )
  (byte*) gfx_init_plane_charset8::gfxa#4 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 )
  (byte) gfx_init_plane_charset8::col#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 )
  (byte) gfx_init_plane_charset8::c#1 ← (byte) gfx_init_plane_charset8::col#3
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::col#7 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#7 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::ch#3 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#4 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#2 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cr#1 ← (byte) gfx_init_plane_charset8::cr#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$13 ← (byte) gfx_init_plane_charset8::cr#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$13) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::col#8 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#8 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#5 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::ch#2 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::ch#1 ← (byte) gfx_init_plane_charset8::ch#2 + rangenext(0,$ff)
  (bool~) gfx_init_plane_charset8::$14 ← (byte) gfx_init_plane_charset8::ch#1 != rangelast(0,$ff)
  if((bool~) gfx_init_plane_charset8::$14) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_charset8::$5 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_charset8::$6 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_charset8::$5
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#10 ← (byte~) gfx_init_plane_charset8::$6
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@10
gfx_init_plane_charset8::@10: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@10
  return 
  to:@return
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  (dword) gfx_init_plane_fill::plane_addr#0 ← (dword) PLANE_VERTICAL2#0
  (byte) gfx_init_plane_fill::fill#0 ← (byte/signed byte/word/signed word/dword/signed dword) $1b
  call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@1
gfx_init_plane_vertical2::@1: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2::@1
  return 
  to:@return
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  (dword) gfx_init_plane_fill::plane_addr#1 ← (dword) PLANE_BLANK#0
  (byte) gfx_init_plane_fill::fill#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@1
gfx_init_plane_blank::@1: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank::@1
  return 
  to:@return
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  (dword) gfx_init_plane_fill::plane_addr#2 ← (dword) PLANE_FULL#0
  (byte) gfx_init_plane_fill::fill#2 ← (byte/word/signed word/dword/signed dword) $ff
  call gfx_init_plane_fill 
  to:gfx_init_plane_full::@1
gfx_init_plane_full::@1: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full::@1
  return 
  to:@return
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  (byte) gfx_init_plane_fill::fill#7 ← phi( gfx_init_plane_blank/(byte) gfx_init_plane_fill::fill#1 gfx_init_plane_full/(byte) gfx_init_plane_fill::fill#2 gfx_init_plane_vertical2/(byte) gfx_init_plane_fill::fill#0 )
  (dword) gfx_init_plane_fill::plane_addr#3 ← phi( gfx_init_plane_blank/(dword) gfx_init_plane_fill::plane_addr#1 gfx_init_plane_full/(dword) gfx_init_plane_fill::plane_addr#2 gfx_init_plane_vertical2/(dword) gfx_init_plane_fill::plane_addr#0 )
  (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0
  (byte~) gfx_init_plane_fill::$2 ← < (word~) gfx_init_plane_fill::$1
  (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← (byte~) gfx_init_plane_fill::$2
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  (byte) gfx_init_plane_fill::fill#6 ← phi( gfx_init_plane_fill/(byte) gfx_init_plane_fill::fill#7 )
  (dword) gfx_init_plane_fill::plane_addr#4 ← phi( gfx_init_plane_fill/(dword) gfx_init_plane_fill::plane_addr#3 )
  (byte) gfx_init_plane_fill::gfxbCpuBank#2 ← phi( gfx_init_plane_fill/(byte) gfx_init_plane_fill::gfxbCpuBank#0 )
  (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#2
  (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#4
  (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5
  (byte*) gfx_init_plane_fill::gfxb#0 ← ((byte*)) (word/signed dword/dword~) gfx_init_plane_fill::$6
  (byte) gfx_init_plane_fill::by#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  (byte) gfx_init_plane_fill::by#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::by#1 gfx_init_plane_fill::@5/(byte) gfx_init_plane_fill::by#0 )
  (byte*) gfx_init_plane_fill::gfxb#3 ← phi( gfx_init_plane_fill::@3/(byte*) gfx_init_plane_fill::gfxb#4 gfx_init_plane_fill::@5/(byte*) gfx_init_plane_fill::gfxb#0 )
  (byte) gfx_init_plane_fill::fill#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::fill#5 gfx_init_plane_fill::@5/(byte) gfx_init_plane_fill::fill#6 )
  (byte) gfx_init_plane_fill::bx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  (byte) gfx_init_plane_fill::by#3 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::by#4 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::by#3 )
  (byte) gfx_init_plane_fill::bx#2 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::bx#0 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::bx#1 )
  (byte*) gfx_init_plane_fill::gfxb#2 ← phi( gfx_init_plane_fill::@1/(byte*) gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  (byte) gfx_init_plane_fill::fill#3 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::fill#4 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::fill#3 )
  *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#3
  (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2
  (byte) gfx_init_plane_fill::bx#1 ← (byte) gfx_init_plane_fill::bx#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_fill::$10 ← (byte) gfx_init_plane_fill::bx#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_fill::$10) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  (byte*) gfx_init_plane_fill::gfxb#4 ← phi( gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  (byte) gfx_init_plane_fill::fill#5 ← phi( gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::fill#3 )
  (byte) gfx_init_plane_fill::by#2 ← phi( gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::by#3 )
  (byte) gfx_init_plane_fill::by#1 ← (byte) gfx_init_plane_fill::by#2 + rangenext(0,$c7)
  (bool~) gfx_init_plane_fill::$11 ← (byte) gfx_init_plane_fill::by#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_fill::$11) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_fill::$7 ← (word/signed word/dword/signed dword) $4000 / (word/signed word/dword/signed dword) $4000
  (byte~) gfx_init_plane_fill::$8 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_fill::$7
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#12 ← (byte~) gfx_init_plane_fill::$8
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@6
gfx_init_plane_fill::@6: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@6
  return 
  to:@return
form_mode: scope:[form_mode]  from main::@2
  (byte) form_field_idx#73 ← phi( main::@2/(byte) form_field_idx#25 )
  (byte) keyboard_modifiers#122 ← phi( main::@2/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#142 ← phi( main::@2/(byte) keyboard_events_size#42 )
  (signed byte) form_cursor_count#65 ← phi( main::@2/(signed byte) form_cursor_count#18 )
  (byte*) print_char_cursor#43 ← phi( main::@2/(byte*) print_char_cursor#41 )
  (byte*) print_line_cursor#41 ← phi( main::@2/(byte*) print_line_cursor#39 )
  (byte*) print_screen#21 ← phi( main::@2/(byte*) print_screen#19 )
  (byte*) print_set_screen::screen#0 ← (byte*) COLS#0
  call print_set_screen 
  to:form_mode::@21
form_mode::@21: scope:[form_mode]  from form_mode
  (byte) form_field_idx#72 ← phi( form_mode/(byte) form_field_idx#73 )
  (byte) keyboard_modifiers#120 ← phi( form_mode/(byte) keyboard_modifiers#122 )
  (byte) keyboard_events_size#140 ← phi( form_mode/(byte) keyboard_events_size#142 )
  (signed byte) form_cursor_count#64 ← phi( form_mode/(signed byte) form_cursor_count#65 )
  (byte*) print_char_cursor#29 ← phi( form_mode/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#28 ← phi( form_mode/(byte*) print_line_cursor#8 )
  (byte*) print_screen#15 ← phi( form_mode/(byte*) print_screen#2 )
  (byte*) print_screen#5 ← (byte*) print_screen#15
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#29
  call print_cls 
  to:form_mode::@22
form_mode::@22: scope:[form_mode]  from form_mode::@21
  (byte) form_field_idx#71 ← phi( form_mode::@21/(byte) form_field_idx#72 )
  (byte) keyboard_modifiers#118 ← phi( form_mode::@21/(byte) keyboard_modifiers#120 )
  (byte) keyboard_events_size#138 ← phi( form_mode::@21/(byte) keyboard_events_size#140 )
  (signed byte) form_cursor_count#63 ← phi( form_mode::@21/(signed byte) form_cursor_count#64 )
  (byte*) print_screen#28 ← phi( form_mode::@21/(byte*) print_screen#5 )
  (byte*) print_char_cursor#30 ← phi( form_mode::@21/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#29 ← phi( form_mode::@21/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#30
  (byte*) print_str_lines::str#1 ← (byte[]) FORM_COLS#0
  call print_str_lines 
  to:form_mode::@23
form_mode::@23: scope:[form_mode]  from form_mode::@22
  (byte) form_field_idx#70 ← phi( form_mode::@22/(byte) form_field_idx#71 )
  (byte) keyboard_modifiers#116 ← phi( form_mode::@22/(byte) keyboard_modifiers#118 )
  (byte) keyboard_events_size#136 ← phi( form_mode::@22/(byte) keyboard_events_size#138 )
  (signed byte) form_cursor_count#62 ← phi( form_mode::@22/(signed byte) form_cursor_count#63 )
  (byte*) print_screen#22 ← phi( form_mode::@22/(byte*) print_screen#28 )
  (byte*) print_line_cursor#30 ← phi( form_mode::@22/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#31 ← phi( form_mode::@22/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#31
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#30
  (byte*) print_set_screen::screen#1 ← (byte*) FORM_SCREEN#0
  call print_set_screen 
  to:form_mode::@24
form_mode::@24: scope:[form_mode]  from form_mode::@23
  (byte) form_field_idx#69 ← phi( form_mode::@23/(byte) form_field_idx#70 )
  (byte) keyboard_modifiers#114 ← phi( form_mode::@23/(byte) keyboard_modifiers#116 )
  (byte) keyboard_events_size#134 ← phi( form_mode::@23/(byte) keyboard_events_size#136 )
  (signed byte) form_cursor_count#61 ← phi( form_mode::@23/(signed byte) form_cursor_count#62 )
  (byte*) print_char_cursor#32 ← phi( form_mode::@23/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#31 ← phi( form_mode::@23/(byte*) print_line_cursor#8 )
  (byte*) print_screen#16 ← phi( form_mode::@23/(byte*) print_screen#2 )
  (byte*) print_screen#6 ← (byte*) print_screen#16
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#31
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#32
  call print_cls 
  to:form_mode::@25
form_mode::@25: scope:[form_mode]  from form_mode::@24
  (byte) form_field_idx#68 ← phi( form_mode::@24/(byte) form_field_idx#69 )
  (byte) keyboard_modifiers#112 ← phi( form_mode::@24/(byte) keyboard_modifiers#114 )
  (byte) keyboard_events_size#131 ← phi( form_mode::@24/(byte) keyboard_events_size#134 )
  (signed byte) form_cursor_count#60 ← phi( form_mode::@24/(signed byte) form_cursor_count#61 )
  (byte*) print_screen#54 ← phi( form_mode::@24/(byte*) print_screen#6 )
  (byte*) print_char_cursor#33 ← phi( form_mode::@24/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#32 ← phi( form_mode::@24/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#33
  (byte*) print_str_lines::str#2 ← (byte[]) FORM_TEXT#0
  call print_str_lines 
  to:form_mode::@26
form_mode::@26: scope:[form_mode]  from form_mode::@25
  (byte) form_field_idx#65 ← phi( form_mode::@25/(byte) form_field_idx#68 )
  (byte) keyboard_modifiers#110 ← phi( form_mode::@25/(byte) keyboard_modifiers#112 )
  (byte) keyboard_events_size#127 ← phi( form_mode::@25/(byte) keyboard_events_size#131 )
  (signed byte) form_cursor_count#57 ← phi( form_mode::@25/(signed byte) form_cursor_count#60 )
  (byte*) print_screen#52 ← phi( form_mode::@25/(byte*) print_screen#54 )
  (byte*) print_line_cursor#33 ← phi( form_mode::@25/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#34 ← phi( form_mode::@25/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#34
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#33
  (byte*) form_set_screen::screen#0 ← (byte*) FORM_SCREEN#0
  call form_set_screen 
  to:form_mode::@27
form_mode::@27: scope:[form_mode]  from form_mode::@26
  (byte) form_field_idx#63 ← phi( form_mode::@26/(byte) form_field_idx#65 )
  (byte) keyboard_modifiers#108 ← phi( form_mode::@26/(byte) keyboard_modifiers#110 )
  (byte) keyboard_events_size#124 ← phi( form_mode::@26/(byte) keyboard_events_size#127 )
  (signed byte) form_cursor_count#55 ← phi( form_mode::@26/(signed byte) form_cursor_count#57 )
  (byte*) print_char_cursor#73 ← phi( form_mode::@26/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#73 ← phi( form_mode::@26/(byte*) print_line_cursor#16 )
  (byte*) print_screen#50 ← phi( form_mode::@26/(byte*) print_screen#52 )
  call form_render_values 
  to:form_mode::@28
form_mode::@28: scope:[form_mode]  from form_mode::@27
  (byte) form_field_idx#59 ← phi( form_mode::@27/(byte) form_field_idx#63 )
  (byte) keyboard_modifiers#103 ← phi( form_mode::@27/(byte) keyboard_modifiers#108 )
  (byte) keyboard_events_size#115 ← phi( form_mode::@27/(byte) keyboard_events_size#124 )
  (signed byte) form_cursor_count#52 ← phi( form_mode::@27/(signed byte) form_cursor_count#55 )
  (byte*) print_char_cursor#70 ← phi( form_mode::@27/(byte*) print_char_cursor#73 )
  (byte*) print_line_cursor#70 ← phi( form_mode::@27/(byte*) print_line_cursor#73 )
  (byte*) print_screen#47 ← phi( form_mode::@27/(byte*) print_screen#50 )
  (byte) render_preset_name::idx#0 ← *((byte*) form_preset#0)
  call render_preset_name 
  to:form_mode::@29
form_mode::@29: scope:[form_mode]  from form_mode::@28
  (byte) form_field_idx#56 ← phi( form_mode::@28/(byte) form_field_idx#59 )
  (byte) keyboard_modifiers#97 ← phi( form_mode::@28/(byte) keyboard_modifiers#103 )
  (byte) keyboard_events_size#104 ← phi( form_mode::@28/(byte) keyboard_events_size#115 )
  (signed byte) form_cursor_count#48 ← phi( form_mode::@28/(signed byte) form_cursor_count#52 )
  (byte*) print_char_cursor#65 ← phi( form_mode::@28/(byte*) print_char_cursor#70 )
  (byte*) print_line_cursor#65 ← phi( form_mode::@28/(byte*) print_line_cursor#70 )
  (byte*) print_screen#42 ← phi( form_mode::@28/(byte*) print_screen#47 )
  (dword~) form_mode::$9 ← ((dword)) (byte*) FORM_CHARSET#0
  (dword~) form_mode::$10 ← (dword~) form_mode::$9 / (dword/signed dword) $10000
  (byte~) form_mode::$11 ← ((byte)) (dword~) form_mode::$10
  *((byte*) DTV_GRAPHICS_VIC_BANK#0) ← (byte~) form_mode::$11
  (dword~) form_mode::$12 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) form_mode::$13 ← ((word)) (dword~) form_mode::$12
  (byte~) form_mode::$14 ← < (word~) form_mode::$13
  *((byte*) DTV_COLOR_BANK_LO#0) ← (byte~) form_mode::$14
  (dword~) form_mode::$15 ← (dword) DTV_COLOR_BANK_DEFAULT#0 / (word/signed word/dword/signed dword) $400
  (word~) form_mode::$16 ← ((word)) (dword~) form_mode::$15
  (byte~) form_mode::$17 ← > (word~) form_mode::$16
  *((byte*) DTV_COLOR_BANK_HI#0) ← (byte~) form_mode::$17
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) form_mode::$18 ← ((word)) (byte*) FORM_CHARSET#0
  (word/signed dword/dword~) form_mode::$19 ← (word~) form_mode::$18 / (word/signed word/dword/signed dword) $4000
  (byte~) form_mode::$20 ← ((byte)) (word/signed dword/dword~) form_mode::$19
  (byte/word/dword~) form_mode::$21 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) form_mode::$20
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) form_mode::$21
  *((byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) form_mode::$22 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) form_mode::$23 ← (byte~) form_mode::$22 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) form_mode::$23
  *((byte*) VIC_CONTROL2#0) ← (byte) VIC_CSEL#0
  (word~) form_mode::$24 ← ((word)) (byte*) FORM_SCREEN#0
  (word~) form_mode::$25 ← (word~) form_mode::$24 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) form_mode::$26 ← (word~) form_mode::$25 / (byte/signed byte/word/signed word/dword/signed dword) $40
  (word~) form_mode::$27 ← ((word)) (byte*) FORM_CHARSET#0
  (word~) form_mode::$28 ← (word~) form_mode::$27 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword~) form_mode::$29 ← (word~) form_mode::$28 / (word/signed word/dword/signed dword) $400
  (word/dword~) form_mode::$30 ← (word/signed dword/dword~) form_mode::$26 | (word/signed dword/dword~) form_mode::$29
  (byte~) form_mode::$31 ← ((byte)) (word/dword~) form_mode::$30
  *((byte*) VIC_MEMORY#0) ← (byte~) form_mode::$31
  (byte~) form_mode::$32 ← < (byte*) FORM_SCREEN#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) form_mode::$32
  (byte~) form_mode::$33 ← > (byte*) FORM_SCREEN#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) form_mode::$33
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) form_mode::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@29
  (byte) form_field_idx#49 ← phi( form_mode::@1/(byte) form_field_idx#49 form_mode::@29/(byte) form_field_idx#56 )
  (byte) keyboard_modifiers#83 ← phi( form_mode::@1/(byte) keyboard_modifiers#83 form_mode::@29/(byte) keyboard_modifiers#97 )
  (byte) keyboard_events_size#86 ← phi( form_mode::@1/(byte) keyboard_events_size#86 form_mode::@29/(byte) keyboard_events_size#104 )
  (signed byte) form_cursor_count#39 ← phi( form_mode::@1/(signed byte) form_cursor_count#39 form_mode::@29/(signed byte) form_cursor_count#48 )
  (byte*) print_char_cursor#58 ← phi( form_mode::@1/(byte*) print_char_cursor#58 form_mode::@29/(byte*) print_char_cursor#65 )
  (byte*) print_line_cursor#57 ← phi( form_mode::@1/(byte*) print_line_cursor#57 form_mode::@29/(byte*) print_line_cursor#65 )
  (byte*) print_screen#35 ← phi( form_mode::@1/(byte*) print_screen#35 form_mode::@29/(byte*) print_screen#42 )
  (byte) form_mode::i#2 ← phi( form_mode::@1/(byte) form_mode::i#1 form_mode::@29/(byte) form_mode::i#0 )
  *((byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2)
  (byte) form_mode::i#1 ← (byte) form_mode::i#2 + rangenext(0,$f)
  (bool~) form_mode::$34 ← (byte) form_mode::i#1 != rangelast(0,$f)
  if((bool~) form_mode::$34) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  (byte) form_field_idx#40 ← phi( form_mode::@1/(byte) form_field_idx#49 )
  (byte) keyboard_modifiers#63 ← phi( form_mode::@1/(byte) keyboard_modifiers#83 )
  (byte) keyboard_events_size#63 ← phi( form_mode::@1/(byte) keyboard_events_size#86 )
  (signed byte) form_cursor_count#30 ← phi( form_mode::@1/(signed byte) form_cursor_count#39 )
  (byte*) print_char_cursor#53 ← phi( form_mode::@1/(byte*) print_char_cursor#58 )
  (byte*) print_line_cursor#50 ← phi( form_mode::@1/(byte*) print_line_cursor#57 )
  (byte*) print_screen#30 ← phi( form_mode::@1/(byte*) print_screen#35 )
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) form_mode::preset_current#0 ← *((byte*) form_preset#0)
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@15 form_mode::@2 form_mode::@33
  (byte) form_mode::preset_current#8 ← phi( form_mode::@15/(byte) form_mode::preset_current#9 form_mode::@2/(byte) form_mode::preset_current#0 form_mode::@33/(byte) form_mode::preset_current#10 )
  (byte) form_field_idx#28 ← phi( form_mode::@15/(byte) form_field_idx#39 form_mode::@2/(byte) form_field_idx#40 form_mode::@33/(byte) form_field_idx#41 )
  (byte) keyboard_modifiers#45 ← phi( form_mode::@15/(byte) keyboard_modifiers#62 form_mode::@2/(byte) keyboard_modifiers#63 form_mode::@33/(byte) keyboard_modifiers#64 )
  (byte) keyboard_events_size#47 ← phi( form_mode::@15/(byte) keyboard_events_size#62 form_mode::@2/(byte) keyboard_events_size#63 form_mode::@33/(byte) keyboard_events_size#64 )
  (signed byte) form_cursor_count#21 ← phi( form_mode::@15/(signed byte) form_cursor_count#29 form_mode::@2/(signed byte) form_cursor_count#30 form_mode::@33/(signed byte) form_cursor_count#31 )
  (byte*) print_char_cursor#44 ← phi( form_mode::@15/(byte*) print_char_cursor#52 form_mode::@2/(byte*) print_char_cursor#53 form_mode::@33/(byte*) print_char_cursor#54 )
  (byte*) print_line_cursor#42 ← phi( form_mode::@15/(byte*) print_line_cursor#49 form_mode::@2/(byte*) print_line_cursor#50 form_mode::@33/(byte*) print_line_cursor#51 )
  (byte*) print_screen#23 ← phi( form_mode::@15/(byte*) print_screen#29 form_mode::@2/(byte*) print_screen#30 form_mode::@33/(byte*) print_screen#31 )
  if(true) goto form_mode::@4
  to:form_mode::@return
form_mode::@4: scope:[form_mode]  from form_mode::@3
  (byte*) print_char_cursor#66 ← phi( form_mode::@3/(byte*) print_char_cursor#44 )
  (byte*) print_line_cursor#66 ← phi( form_mode::@3/(byte*) print_line_cursor#42 )
  (byte*) print_screen#43 ← phi( form_mode::@3/(byte*) print_screen#23 )
  (byte) form_mode::preset_current#6 ← phi( form_mode::@3/(byte) form_mode::preset_current#8 )
  (byte) form_field_idx#50 ← phi( form_mode::@3/(byte) form_field_idx#28 )
  (byte) keyboard_modifiers#84 ← phi( form_mode::@3/(byte) keyboard_modifiers#45 )
  (byte) keyboard_events_size#87 ← phi( form_mode::@3/(byte) keyboard_events_size#47 )
  (signed byte) form_cursor_count#40 ← phi( form_mode::@3/(signed byte) form_cursor_count#21 )
  to:form_mode::@6
form_mode::@6: scope:[form_mode]  from form_mode::@4 form_mode::@7
  (byte*) print_char_cursor#59 ← phi( form_mode::@4/(byte*) print_char_cursor#66 form_mode::@7/(byte*) print_char_cursor#67 )
  (byte*) print_line_cursor#58 ← phi( form_mode::@4/(byte*) print_line_cursor#66 form_mode::@7/(byte*) print_line_cursor#67 )
  (byte*) print_screen#36 ← phi( form_mode::@4/(byte*) print_screen#43 form_mode::@7/(byte*) print_screen#44 )
  (byte) form_mode::preset_current#5 ← phi( form_mode::@4/(byte) form_mode::preset_current#6 form_mode::@7/(byte) form_mode::preset_current#7 )
  (byte) form_field_idx#42 ← phi( form_mode::@4/(byte) form_field_idx#50 form_mode::@7/(byte) form_field_idx#51 )
  (byte) keyboard_modifiers#65 ← phi( form_mode::@4/(byte) keyboard_modifiers#84 form_mode::@7/(byte) keyboard_modifiers#85 )
  (byte) keyboard_events_size#65 ← phi( form_mode::@4/(byte) keyboard_events_size#87 form_mode::@7/(byte) keyboard_events_size#88 )
  (signed byte) form_cursor_count#32 ← phi( form_mode::@4/(signed byte) form_cursor_count#40 form_mode::@7/(signed byte) form_cursor_count#41 )
  (bool~) form_mode::$35 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) $ff
  if((bool~) form_mode::$35) goto form_mode::@7
  to:form_mode::@8
form_mode::@7: scope:[form_mode]  from form_mode::@6
  (byte*) print_char_cursor#67 ← phi( form_mode::@6/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#67 ← phi( form_mode::@6/(byte*) print_line_cursor#58 )
  (byte*) print_screen#44 ← phi( form_mode::@6/(byte*) print_screen#36 )
  (byte) form_mode::preset_current#7 ← phi( form_mode::@6/(byte) form_mode::preset_current#5 )
  (byte) form_field_idx#51 ← phi( form_mode::@6/(byte) form_field_idx#42 )
  (byte) keyboard_modifiers#85 ← phi( form_mode::@6/(byte) keyboard_modifiers#65 )
  (byte) keyboard_events_size#88 ← phi( form_mode::@6/(byte) keyboard_events_size#65 )
  (signed byte) form_cursor_count#41 ← phi( form_mode::@6/(signed byte) form_cursor_count#32 )
  to:form_mode::@6
form_mode::@8: scope:[form_mode]  from form_mode::@6
  (byte*) print_char_cursor#55 ← phi( form_mode::@6/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#52 ← phi( form_mode::@6/(byte*) print_line_cursor#58 )
  (byte*) print_screen#32 ← phi( form_mode::@6/(byte*) print_screen#36 )
  (byte) form_mode::preset_current#4 ← phi( form_mode::@6/(byte) form_mode::preset_current#5 )
  (byte) form_field_idx#27 ← phi( form_mode::@6/(byte) form_field_idx#42 )
  (byte) keyboard_modifiers#44 ← phi( form_mode::@6/(byte) keyboard_modifiers#65 )
  (byte) keyboard_events_size#46 ← phi( form_mode::@6/(byte) keyboard_events_size#65 )
  (signed byte) form_cursor_count#20 ← phi( form_mode::@6/(signed byte) form_cursor_count#32 )
  call form_control 
  (byte) form_control::return#0 ← (byte) form_control::return#2
  to:form_mode::@30
form_mode::@30: scope:[form_mode]  from form_mode::@8
  (byte*) print_char_cursor#45 ← phi( form_mode::@8/(byte*) print_char_cursor#55 )
  (byte*) print_line_cursor#43 ← phi( form_mode::@8/(byte*) print_line_cursor#52 )
  (byte*) print_screen#24 ← phi( form_mode::@8/(byte*) print_screen#32 )
  (byte) form_mode::preset_current#3 ← phi( form_mode::@8/(byte) form_mode::preset_current#4 )
  (byte) form_field_idx#13 ← phi( form_mode::@8/(byte) form_field_idx#9 )
  (byte) keyboard_modifiers#27 ← phi( form_mode::@8/(byte) keyboard_modifiers#15 )
  (byte) keyboard_events_size#31 ← phi( form_mode::@8/(byte) keyboard_events_size#16 )
  (signed byte) form_cursor_count#12 ← phi( form_mode::@8/(signed byte) form_cursor_count#8 )
  (byte) form_control::return#6 ← phi( form_mode::@8/(byte) form_control::return#0 )
  (byte~) form_mode::$36 ← (byte) form_control::return#6
  (signed byte) form_cursor_count#2 ← (signed byte) form_cursor_count#12
  (byte) keyboard_events_size#12 ← (byte) keyboard_events_size#31
  (byte) keyboard_modifiers#12 ← (byte) keyboard_modifiers#27
  (byte) form_field_idx#2 ← (byte) form_field_idx#13
  (bool~) form_mode::$37 ← (byte~) form_mode::$36 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) form_mode::$38 ← ! (bool~) form_mode::$37
  if((bool~) form_mode::$38) goto form_mode::@14
  to:form_mode::@return
form_mode::@14: scope:[form_mode]  from form_mode::@30
  (byte) form_field_idx#52 ← phi( form_mode::@30/(byte) form_field_idx#2 )
  (byte) keyboard_modifiers#86 ← phi( form_mode::@30/(byte) keyboard_modifiers#12 )
  (byte) keyboard_events_size#89 ← phi( form_mode::@30/(byte) keyboard_events_size#12 )
  (signed byte) form_cursor_count#42 ← phi( form_mode::@30/(signed byte) form_cursor_count#2 )
  (byte*) print_char_cursor#60 ← phi( form_mode::@30/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#59 ← phi( form_mode::@30/(byte*) print_line_cursor#43 )
  (byte*) print_screen#37 ← phi( form_mode::@30/(byte*) print_screen#24 )
  (byte) form_mode::preset_current#2 ← phi( form_mode::@30/(byte) form_mode::preset_current#3 )
  (bool~) form_mode::$39 ← (byte) form_mode::preset_current#2 != *((byte*) form_preset#0)
  (bool~) form_mode::$40 ← ! (bool~) form_mode::$39
  if((bool~) form_mode::$40) goto form_mode::@15
  to:form_mode::@18
form_mode::@return: scope:[form_mode]  from form_mode::@3 form_mode::@30
  (byte) form_field_idx#14 ← phi( form_mode::@3/(byte) form_field_idx#28 form_mode::@30/(byte) form_field_idx#2 )
  (byte) keyboard_modifiers#28 ← phi( form_mode::@3/(byte) keyboard_modifiers#45 form_mode::@30/(byte) keyboard_modifiers#12 )
  (byte) keyboard_events_size#32 ← phi( form_mode::@3/(byte) keyboard_events_size#47 form_mode::@30/(byte) keyboard_events_size#12 )
  (signed byte) form_cursor_count#13 ← phi( form_mode::@3/(signed byte) form_cursor_count#21 form_mode::@30/(signed byte) form_cursor_count#2 )
  (byte*) print_char_cursor#35 ← phi( form_mode::@3/(byte*) print_char_cursor#44 form_mode::@30/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#34 ← phi( form_mode::@3/(byte*) print_line_cursor#42 form_mode::@30/(byte*) print_line_cursor#43 )
  (byte*) print_screen#17 ← phi( form_mode::@3/(byte*) print_screen#23 form_mode::@30/(byte*) print_screen#24 )
  (byte*) print_screen#7 ← (byte*) print_screen#17
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#35
  (signed byte) form_cursor_count#3 ← (signed byte) form_cursor_count#13
  (byte) keyboard_events_size#13 ← (byte) keyboard_events_size#32
  (byte) keyboard_modifiers#13 ← (byte) keyboard_modifiers#28
  (byte) form_field_idx#3 ← (byte) form_field_idx#14
  return 
  to:@return
form_mode::@15: scope:[form_mode]  from form_mode::@14
  (byte) form_mode::preset_current#9 ← phi( form_mode::@14/(byte) form_mode::preset_current#2 )
  (byte) form_field_idx#39 ← phi( form_mode::@14/(byte) form_field_idx#52 )
  (byte) keyboard_modifiers#62 ← phi( form_mode::@14/(byte) keyboard_modifiers#86 )
  (byte) keyboard_events_size#62 ← phi( form_mode::@14/(byte) keyboard_events_size#89 )
  (signed byte) form_cursor_count#29 ← phi( form_mode::@14/(signed byte) form_cursor_count#42 )
  (byte*) print_char_cursor#52 ← phi( form_mode::@14/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#49 ← phi( form_mode::@14/(byte*) print_line_cursor#59 )
  (byte*) print_screen#29 ← phi( form_mode::@14/(byte*) print_screen#37 )
  to:form_mode::@3
form_mode::@18: scope:[form_mode]  from form_mode::@14
  (byte) form_field_idx#60 ← phi( form_mode::@14/(byte) form_field_idx#52 )
  (byte) keyboard_modifiers#104 ← phi( form_mode::@14/(byte) keyboard_modifiers#86 )
  (byte) keyboard_events_size#116 ← phi( form_mode::@14/(byte) keyboard_events_size#89 )
  (signed byte) form_cursor_count#53 ← phi( form_mode::@14/(signed byte) form_cursor_count#42 )
  (byte*) print_char_cursor#71 ← phi( form_mode::@14/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#71 ← phi( form_mode::@14/(byte*) print_line_cursor#59 )
  (byte*) print_screen#48 ← phi( form_mode::@14/(byte*) print_screen#37 )
  (byte) apply_preset::idx#0 ← *((byte*) form_preset#0)
  call apply_preset 
  to:form_mode::@31
form_mode::@31: scope:[form_mode]  from form_mode::@18
  (byte) form_field_idx#57 ← phi( form_mode::@18/(byte) form_field_idx#60 )
  (byte) keyboard_modifiers#98 ← phi( form_mode::@18/(byte) keyboard_modifiers#104 )
  (byte) keyboard_events_size#105 ← phi( form_mode::@18/(byte) keyboard_events_size#116 )
  (signed byte) form_cursor_count#49 ← phi( form_mode::@18/(signed byte) form_cursor_count#53 )
  (byte*) print_char_cursor#68 ← phi( form_mode::@18/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#68 ← phi( form_mode::@18/(byte*) print_line_cursor#71 )
  (byte*) print_screen#45 ← phi( form_mode::@18/(byte*) print_screen#48 )
  (byte) form_mode::preset_current#1 ← *((byte*) form_preset#0)
  call form_render_values 
  to:form_mode::@32
form_mode::@32: scope:[form_mode]  from form_mode::@31
  (byte) form_mode::preset_current#11 ← phi( form_mode::@31/(byte) form_mode::preset_current#1 )
  (byte) form_field_idx#53 ← phi( form_mode::@31/(byte) form_field_idx#57 )
  (byte) keyboard_modifiers#87 ← phi( form_mode::@31/(byte) keyboard_modifiers#98 )
  (byte) keyboard_events_size#90 ← phi( form_mode::@31/(byte) keyboard_events_size#105 )
  (signed byte) form_cursor_count#43 ← phi( form_mode::@31/(signed byte) form_cursor_count#49 )
  (byte*) print_char_cursor#61 ← phi( form_mode::@31/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#60 ← phi( form_mode::@31/(byte*) print_line_cursor#68 )
  (byte*) print_screen#38 ← phi( form_mode::@31/(byte*) print_screen#45 )
  (byte) render_preset_name::idx#1 ← *((byte*) form_preset#0)
  call render_preset_name 
  to:form_mode::@33
form_mode::@33: scope:[form_mode]  from form_mode::@32
  (byte) form_mode::preset_current#10 ← phi( form_mode::@32/(byte) form_mode::preset_current#11 )
  (byte) form_field_idx#41 ← phi( form_mode::@32/(byte) form_field_idx#53 )
  (byte) keyboard_modifiers#64 ← phi( form_mode::@32/(byte) keyboard_modifiers#87 )
  (byte) keyboard_events_size#64 ← phi( form_mode::@32/(byte) keyboard_events_size#90 )
  (signed byte) form_cursor_count#31 ← phi( form_mode::@32/(signed byte) form_cursor_count#43 )
  (byte*) print_char_cursor#54 ← phi( form_mode::@32/(byte*) print_char_cursor#61 )
  (byte*) print_line_cursor#51 ← phi( form_mode::@32/(byte*) print_line_cursor#60 )
  (byte*) print_screen#31 ← phi( form_mode::@32/(byte*) print_screen#38 )
  to:form_mode::@3
@64: scope:[]  from @45
  (byte) keyboard_modifiers#77 ← phi( @45/(byte) keyboard_modifiers#88 )
  (byte) keyboard_events_size#77 ← phi( @45/(byte) keyboard_events_size#91 )
  (byte*) print_char_cursor#56 ← phi( @45/(byte*) print_char_cursor#62 )
  (byte*) print_line_cursor#53 ← phi( @45/(byte*) print_line_cursor#61 )
  (byte*) print_screen#33 ← phi( @45/(byte*) print_screen#39 )
  (byte[$19]) form_line_lo#0 ← { fill( $19, 0) }
  (byte[$19]) form_line_hi#0 ← { fill( $19, 0) }
  (byte) form_field_idx#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) FORM_CURSOR_BLINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $28
  (signed word/signed byte/signed dword~) $68 ← (signed byte) FORM_CURSOR_BLINK#0 / (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed byte) form_cursor_count#4 ← (signed word/signed byte/signed dword~) $68
  to:@68
form_set_screen: scope:[form_set_screen]  from form_mode::@26
  (byte*) form_set_screen::screen#1 ← phi( form_mode::@26/(byte*) form_set_screen::screen#0 )
  (byte*) form_set_screen::line#0 ← (byte*) form_set_screen::screen#1
  (byte) form_set_screen::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  (byte) form_set_screen::y#2 ← phi( form_set_screen/(byte) form_set_screen::y#0 form_set_screen::@1/(byte) form_set_screen::y#1 )
  (byte*) form_set_screen::line#2 ← phi( form_set_screen/(byte*) form_set_screen::line#0 form_set_screen::@1/(byte*) form_set_screen::line#1 )
  (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2
  *((byte[$19]) form_line_lo#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0
  (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2
  *((byte[$19]) form_line_hi#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1
  (byte*~) form_set_screen::$2 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*) form_set_screen::line#1 ← (byte*~) form_set_screen::$2
  (byte) form_set_screen::y#1 ← (byte) form_set_screen::y#2 + rangenext(0,$18)
  (bool~) form_set_screen::$3 ← (byte) form_set_screen::y#1 != rangelast(0,$18)
  if((bool~) form_set_screen::$3) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  return 
  to:@return
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@1
  (byte) form_field_ptr::field_idx#2 ← phi( form_control/(byte) form_field_ptr::field_idx#1 form_render_values::@1/(byte) form_field_ptr::field_idx#0 )
  (byte) form_field_ptr::y#0 ← *((byte[]) form_fields_y#0 + (byte) form_field_ptr::field_idx#2)
  (byte*~) form_field_ptr::$0 ← ((byte*)) { *((byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0), *((byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0) }
  (byte*) form_field_ptr::line#0 ← (byte*~) form_field_ptr::$0
  (byte) form_field_ptr::x#0 ← *((byte[]) form_fields_x#0 + (byte) form_field_ptr::field_idx#2)
  (byte*~) form_field_ptr::$1 ← (byte*) form_field_ptr::line#0 + (byte) form_field_ptr::x#0
  (byte*) form_field_ptr::field#0 ← (byte*~) form_field_ptr::$1
  (byte*) form_field_ptr::return#0 ← (byte*) form_field_ptr::field#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  (byte*) form_field_ptr::return#4 ← phi( form_field_ptr/(byte*) form_field_ptr::return#0 )
  (byte*) form_field_ptr::return#1 ← (byte*) form_field_ptr::return#4
  return 
  to:@return
form_render_values: scope:[form_render_values]  from form_mode::@27 form_mode::@31
  (byte) form_render_values::idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@3
  (byte) form_render_values::idx#2 ← phi( form_render_values/(byte) form_render_values::idx#0 form_render_values::@3/(byte) form_render_values::idx#1 )
  (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
  call form_field_ptr 
  (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#1
  to:form_render_values::@3
form_render_values::@3: scope:[form_render_values]  from form_render_values::@1
  (byte) form_render_values::idx#3 ← phi( form_render_values::@1/(byte) form_render_values::idx#2 )
  (byte*) form_field_ptr::return#5 ← phi( form_render_values::@1/(byte*) form_field_ptr::return#2 )
  (byte*~) form_render_values::$0 ← (byte*) form_field_ptr::return#5
  (byte*) form_render_values::field#0 ← (byte*~) form_render_values::$0
  *((byte*) form_render_values::field#0) ← *((byte[]) print_hextab#0 + *((byte[]) form_fields_val#0 + (byte) form_render_values::idx#3))
  (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#3
  (bool~) form_render_values::$1 ← (byte) form_render_values::idx#1 < (byte) form_fields_cnt#0
  if((bool~) form_render_values::$1) goto form_render_values::@1
  to:form_render_values::@return
form_render_values::@return: scope:[form_render_values]  from form_render_values::@3
  return 
  to:@return
form_control: scope:[form_control]  from form_mode::@8
  (byte) keyboard_modifiers#105 ← phi( form_mode::@8/(byte) keyboard_modifiers#44 )
  (byte) keyboard_events_size#117 ← phi( form_mode::@8/(byte) keyboard_events_size#46 )
  (signed byte) form_cursor_count#22 ← phi( form_mode::@8/(signed byte) form_cursor_count#20 )
  (byte) form_field_idx#15 ← phi( form_mode::@8/(byte) form_field_idx#27 )
  (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#15
  call form_field_ptr 
  (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#1
  to:form_control::@33
form_control::@33: scope:[form_control]  from form_control
  (byte) form_field_idx#66 ← phi( form_control/(byte) form_field_idx#15 )
  (byte) keyboard_modifiers#99 ← phi( form_control/(byte) keyboard_modifiers#105 )
  (byte) keyboard_events_size#106 ← phi( form_control/(byte) keyboard_events_size#117 )
  (signed byte) form_cursor_count#14 ← phi( form_control/(signed byte) form_cursor_count#22 )
  (byte*) form_field_ptr::return#6 ← phi( form_control/(byte*) form_field_ptr::return#3 )
  (byte*~) form_control::$0 ← (byte*) form_field_ptr::return#6
  (byte*) form_control::field#0 ← (byte*~) form_control::$0
  (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#14
  (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) form_control::$2 ← ! (bool~) form_control::$1
  if((bool~) form_control::$2) goto form_control::@1
  to:form_control::@7
form_control::@1: scope:[form_control]  from form_control::@33 form_control::@7
  (byte) form_field_idx#64 ← phi( form_control::@33/(byte) form_field_idx#66 form_control::@7/(byte) form_field_idx#67 )
  (byte) keyboard_modifiers#89 ← phi( form_control::@33/(byte) keyboard_modifiers#99 form_control::@7/(byte) keyboard_modifiers#100 )
  (byte) keyboard_events_size#92 ← phi( form_control::@33/(byte) keyboard_events_size#106 form_control::@7/(byte) keyboard_events_size#107 )
  (byte*) form_control::field#5 ← phi( form_control::@33/(byte*) form_control::field#0 form_control::@7/(byte*) form_control::field#11 )
  (signed byte) form_cursor_count#15 ← phi( form_control::@33/(signed byte) form_cursor_count#5 form_control::@7/(signed byte) form_cursor_count#6 )
  (signed word/signed byte/signed dword~) form_control::$3 ← (signed byte) FORM_CURSOR_BLINK#0 / (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) form_control::$4 ← (signed byte) form_cursor_count#15 < (signed word/signed byte/signed dword~) form_control::$3
  if((bool~) form_control::$4) goto form_control::@2
  to:form_control::@8
form_control::@7: scope:[form_control]  from form_control::@33
  (byte) form_field_idx#67 ← phi( form_control::@33/(byte) form_field_idx#66 )
  (byte) keyboard_modifiers#100 ← phi( form_control::@33/(byte) keyboard_modifiers#99 )
  (byte) keyboard_events_size#107 ← phi( form_control::@33/(byte) keyboard_events_size#106 )
  (byte*) form_control::field#11 ← phi( form_control::@33/(byte*) form_control::field#0 )
  (signed byte) form_cursor_count#6 ← (signed byte) FORM_CURSOR_BLINK#0
  to:form_control::@1
form_control::@2: scope:[form_control]  from form_control::@1
  (signed byte) form_cursor_count#58 ← phi( form_control::@1/(signed byte) form_cursor_count#15 )
  (byte) form_field_idx#61 ← phi( form_control::@1/(byte) form_field_idx#64 )
  (byte) keyboard_modifiers#66 ← phi( form_control::@1/(byte) keyboard_modifiers#89 )
  (byte) keyboard_events_size#66 ← phi( form_control::@1/(byte) keyboard_events_size#92 )
  (byte*) form_control::field#1 ← phi( form_control::@1/(byte*) form_control::field#5 )
  (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#1) | (byte/word/signed word/dword/signed dword) $80
  *((byte*) form_control::field#1) ← (byte/word/dword~) form_control::$14
  to:form_control::@3
form_control::@8: scope:[form_control]  from form_control::@1
  (signed byte) form_cursor_count#59 ← phi( form_control::@1/(signed byte) form_cursor_count#15 )
  (byte) form_field_idx#62 ← phi( form_control::@1/(byte) form_field_idx#64 )
  (byte) keyboard_modifiers#67 ← phi( form_control::@1/(byte) keyboard_modifiers#89 )
  (byte) keyboard_events_size#67 ← phi( form_control::@1/(byte) keyboard_events_size#92 )
  (byte*) form_control::field#2 ← phi( form_control::@1/(byte*) form_control::field#5 )
  (byte~) form_control::$13 ← *((byte*) form_control::field#2) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  *((byte*) form_control::field#2) ← (byte~) form_control::$13
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@8
  (signed byte) form_cursor_count#56 ← phi( form_control::@2/(signed byte) form_cursor_count#58 form_control::@8/(signed byte) form_cursor_count#59 )
  (byte) form_field_idx#58 ← phi( form_control::@2/(byte) form_field_idx#61 form_control::@8/(byte) form_field_idx#62 )
  (byte*) form_control::field#15 ← phi( form_control::@2/(byte*) form_control::field#1 form_control::@8/(byte*) form_control::field#2 )
  (byte) keyboard_modifiers#46 ← phi( form_control::@2/(byte) keyboard_modifiers#66 form_control::@8/(byte) keyboard_modifiers#67 )
  (byte) keyboard_events_size#48 ← phi( form_control::@2/(byte) keyboard_events_size#66 form_control::@8/(byte) keyboard_events_size#67 )
  call keyboard_event_scan 
  to:form_control::@34
form_control::@34: scope:[form_control]  from form_control::@3
  (signed byte) form_cursor_count#54 ← phi( form_control::@3/(signed byte) form_cursor_count#56 )
  (byte) form_field_idx#54 ← phi( form_control::@3/(byte) form_field_idx#58 )
  (byte*) form_control::field#12 ← phi( form_control::@3/(byte*) form_control::field#15 )
  (byte) keyboard_modifiers#29 ← phi( form_control::@3/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#33 ← phi( form_control::@3/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#14 ← (byte) keyboard_events_size#33
  (byte) keyboard_modifiers#14 ← (byte) keyboard_modifiers#29
  call keyboard_event_get 
  (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  to:form_control::@35
form_control::@35: scope:[form_control]  from form_control::@34
  (signed byte) form_cursor_count#50 ← phi( form_control::@34/(signed byte) form_cursor_count#54 )
  (byte) form_field_idx#43 ← phi( form_control::@34/(byte) form_field_idx#54 )
  (byte) keyboard_modifiers#47 ← phi( form_control::@34/(byte) keyboard_modifiers#14 )
  (byte*) form_control::field#6 ← phi( form_control::@34/(byte*) form_control::field#12 )
  (byte) keyboard_events_size#34 ← phi( form_control::@34/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#7 ← phi( form_control::@34/(byte) keyboard_event_get::return#4 )
  (byte~) form_control::$6 ← (byte) keyboard_event_get::return#7
  (byte) keyboard_events_size#15 ← (byte) keyboard_events_size#34
  (byte) form_control::key_event#0 ← (byte~) form_control::$6
  (bool~) form_control::$7 ← (byte) form_control::key_event#0 == (byte) KEY_CRSR_DOWN#0
  (bool~) form_control::$8 ← ! (bool~) form_control::$7
  if((bool~) form_control::$8) goto form_control::@4
  to:form_control::@10
form_control::@4: scope:[form_control]  from form_control::@35
  (byte*) form_control::field#17 ← phi( form_control::@35/(byte*) form_control::field#6 )
  (byte) keyboard_events_size#95 ← phi( form_control::@35/(byte) keyboard_events_size#15 )
  (signed byte) form_cursor_count#44 ← phi( form_control::@35/(signed byte) form_cursor_count#50 )
  (byte) form_field_idx#46 ← phi( form_control::@35/(byte) form_field_idx#43 )
  (byte) keyboard_modifiers#52 ← phi( form_control::@35/(byte) keyboard_modifiers#47 )
  (byte) form_control::key_event#1 ← phi( form_control::@35/(byte) form_control::key_event#0 )
  (bool~) form_control::$9 ← (byte) form_control::key_event#1 == (byte) KEY_CRSR_RIGHT#0
  (bool~) form_control::$10 ← ! (bool~) form_control::$9
  if((bool~) form_control::$10) goto form_control::@5
  to:form_control::@13
form_control::@10: scope:[form_control]  from form_control::@35
  (byte) keyboard_events_size#108 ← phi( form_control::@35/(byte) keyboard_events_size#15 )
  (byte) form_field_idx#29 ← phi( form_control::@35/(byte) form_field_idx#43 )
  (byte) keyboard_modifiers#30 ← phi( form_control::@35/(byte) keyboard_modifiers#47 )
  (byte*) form_control::field#3 ← phi( form_control::@35/(byte*) form_control::field#6 )
  (byte~) form_control::$15 ← *((byte*) form_control::field#3) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  *((byte*) form_control::field#3) ← (byte~) form_control::$15
  (byte~) form_control::$16 ← (byte) keyboard_modifiers#30 & (byte) KEY_MODIFIER_SHIFT#0
  (bool~) form_control::$17 ← (byte~) form_control::$16 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) form_control::$17) goto form_control::@19
  to:form_control::@11
form_control::@19: scope:[form_control]  from form_control::@10
  (byte) keyboard_modifiers#91 ← phi( form_control::@10/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#94 ← phi( form_control::@10/(byte) keyboard_events_size#108 )
  (byte) form_field_idx#16 ← phi( form_control::@10/(byte) form_field_idx#29 )
  (byte) form_field_idx#5 ← ++ (byte) form_field_idx#16
  (bool~) form_control::$21 ← (byte) form_field_idx#5 == (byte) form_fields_cnt#0
  (bool~) form_control::$22 ← ! (bool~) form_control::$21
  if((bool~) form_control::$22) goto form_control::@23
  to:form_control::@24
form_control::@11: scope:[form_control]  from form_control::@10
  (byte) keyboard_modifiers#90 ← phi( form_control::@10/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#93 ← phi( form_control::@10/(byte) keyboard_events_size#108 )
  (byte) form_field_idx#17 ← phi( form_control::@10/(byte) form_field_idx#29 )
  (byte) form_field_idx#6 ← -- (byte) form_field_idx#17
  (bool~) form_control::$18 ← (byte) form_field_idx#6 == (byte/word/signed word/dword/signed dword) $ff
  (bool~) form_control::$19 ← ! (bool~) form_control::$18
  if((bool~) form_control::$19) goto form_control::@20
  to:form_control::@12
form_control::@20: scope:[form_control]  from form_control::@11
  (byte) form_field_idx#44 ← phi( form_control::@11/(byte) form_field_idx#6 )
  (byte) keyboard_modifiers#69 ← phi( form_control::@11/(byte) keyboard_modifiers#90 )
  (byte) keyboard_events_size#69 ← phi( form_control::@11/(byte) keyboard_events_size#93 )
  to:form_control::@22
form_control::@12: scope:[form_control]  from form_control::@11
  (byte) keyboard_modifiers#68 ← phi( form_control::@11/(byte) keyboard_modifiers#90 )
  (byte) keyboard_events_size#68 ← phi( form_control::@11/(byte) keyboard_events_size#93 )
  (byte/signed word/word/dword/signed dword~) form_control::$20 ← (byte) form_fields_cnt#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) form_field_idx#7 ← (byte/signed word/word/dword/signed dword~) form_control::$20
  to:form_control::@22
form_control::@22: scope:[form_control]  from form_control::@12 form_control::@20 form_control::@23 form_control::@24
  (byte) form_field_idx#31 ← phi( form_control::@12/(byte) form_field_idx#7 form_control::@20/(byte) form_field_idx#44 form_control::@23/(byte) form_field_idx#45 form_control::@24/(byte) form_field_idx#8 )
  (byte) keyboard_modifiers#49 ← phi( form_control::@12/(byte) keyboard_modifiers#68 form_control::@20/(byte) keyboard_modifiers#69 form_control::@23/(byte) keyboard_modifiers#70 form_control::@24/(byte) keyboard_modifiers#71 )
  (byte) keyboard_events_size#50 ← phi( form_control::@12/(byte) keyboard_events_size#68 form_control::@20/(byte) keyboard_events_size#69 form_control::@23/(byte) keyboard_events_size#70 form_control::@24/(byte) keyboard_events_size#71 )
  (signed word/signed byte/signed dword~) form_control::$23 ← (signed byte) FORM_CURSOR_BLINK#0 / (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed byte) form_cursor_count#7 ← (signed word/signed byte/signed dword~) form_control::$23
  (byte) form_control::return#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_control::@return
form_control::@23: scope:[form_control]  from form_control::@19
  (byte) form_field_idx#45 ← phi( form_control::@19/(byte) form_field_idx#5 )
  (byte) keyboard_modifiers#70 ← phi( form_control::@19/(byte) keyboard_modifiers#91 )
  (byte) keyboard_events_size#70 ← phi( form_control::@19/(byte) keyboard_events_size#94 )
  to:form_control::@22
form_control::@24: scope:[form_control]  from form_control::@19
  (byte) keyboard_modifiers#71 ← phi( form_control::@19/(byte) keyboard_modifiers#91 )
  (byte) keyboard_events_size#71 ← phi( form_control::@19/(byte) keyboard_events_size#94 )
  (byte) form_field_idx#8 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_control::@22
form_control::@return: scope:[form_control]  from form_control::@16 form_control::@22 form_control::@29 form_control::@6
  (byte) form_field_idx#18 ← phi( form_control::@16/(byte) form_field_idx#30 form_control::@22/(byte) form_field_idx#31 form_control::@29/(byte) form_field_idx#22 form_control::@6/(byte) form_field_idx#32 )
  (byte) keyboard_modifiers#31 ← phi( form_control::@16/(byte) keyboard_modifiers#48 form_control::@22/(byte) keyboard_modifiers#49 form_control::@29/(byte) keyboard_modifiers#50 form_control::@6/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#35 ← phi( form_control::@16/(byte) keyboard_events_size#49 form_control::@22/(byte) keyboard_events_size#50 form_control::@29/(byte) keyboard_events_size#51 form_control::@6/(byte) keyboard_events_size#52 )
  (signed byte) form_cursor_count#16 ← phi( form_control::@16/(signed byte) form_cursor_count#23 form_control::@22/(signed byte) form_cursor_count#7 form_control::@29/(signed byte) form_cursor_count#24 form_control::@6/(signed byte) form_cursor_count#25 )
  (byte) form_control::return#7 ← phi( form_control::@16/(byte) form_control::return#5 form_control::@22/(byte) form_control::return#1 form_control::@29/(byte) form_control::return#3 form_control::@6/(byte) form_control::return#4 )
  (byte) form_control::return#2 ← (byte) form_control::return#7
  (signed byte) form_cursor_count#8 ← (signed byte) form_cursor_count#16
  (byte) keyboard_events_size#16 ← (byte) keyboard_events_size#35
  (byte) keyboard_modifiers#15 ← (byte) keyboard_modifiers#31
  (byte) form_field_idx#9 ← (byte) form_field_idx#18
  return 
  to:@return
form_control::@5: scope:[form_control]  from form_control::@4
  (byte) form_field_idx#47 ← phi( form_control::@4/(byte) form_field_idx#46 )
  (byte) keyboard_modifiers#76 ← phi( form_control::@4/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#76 ← phi( form_control::@4/(byte) keyboard_events_size#95 )
  (signed byte) form_cursor_count#37 ← phi( form_control::@4/(signed byte) form_cursor_count#44 )
  (byte) form_control::key_event#2 ← phi( form_control::@4/(byte) form_control::key_event#1 )
  (bool~) form_control::$11 ← (byte) form_control::key_event#2 == (byte) KEY_SPACE#0
  (bool~) form_control::$12 ← ! (bool~) form_control::$11
  if((bool~) form_control::$12) goto form_control::@6
  to:form_control::@16
form_control::@13: scope:[form_control]  from form_control::@4
  (byte) keyboard_events_size#109 ← phi( form_control::@4/(byte) keyboard_events_size#95 )
  (signed byte) form_cursor_count#51 ← phi( form_control::@4/(signed byte) form_cursor_count#44 )
  (byte*) form_control::field#16 ← phi( form_control::@4/(byte*) form_control::field#17 )
  (byte) form_field_idx#33 ← phi( form_control::@4/(byte) form_field_idx#46 )
  (byte) keyboard_modifiers#32 ← phi( form_control::@4/(byte) keyboard_modifiers#52 )
  (byte~) form_control::$24 ← (byte) keyboard_modifiers#32 & (byte) KEY_MODIFIER_SHIFT#0
  (bool~) form_control::$25 ← (byte~) form_control::$24 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) form_control::$25) goto form_control::@26
  to:form_control::@14
form_control::@26: scope:[form_control]  from form_control::@13
  (byte) keyboard_modifiers#93 ← phi( form_control::@13/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#97 ← phi( form_control::@13/(byte) keyboard_events_size#109 )
  (signed byte) form_cursor_count#46 ← phi( form_control::@13/(signed byte) form_cursor_count#51 )
  (byte*) form_control::field#14 ← phi( form_control::@13/(byte*) form_control::field#16 )
  (byte) form_field_idx#19 ← phi( form_control::@13/(byte) form_field_idx#33 )
  *((byte[]) form_fields_val#0 + (byte) form_field_idx#19) ← ++ *((byte[]) form_fields_val#0 + (byte) form_field_idx#19)
  (bool~) form_control::$28 ← *((byte[]) form_fields_val#0 + (byte) form_field_idx#19) > *((byte[]) form_fields_max#0 + (byte) form_field_idx#19)
  (bool~) form_control::$29 ← ! (bool~) form_control::$28
  if((bool~) form_control::$29) goto form_control::@30
  to:form_control::@31
form_control::@14: scope:[form_control]  from form_control::@13
  (byte) keyboard_modifiers#92 ← phi( form_control::@13/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#96 ← phi( form_control::@13/(byte) keyboard_events_size#109 )
  (signed byte) form_cursor_count#45 ← phi( form_control::@13/(signed byte) form_cursor_count#51 )
  (byte*) form_control::field#13 ← phi( form_control::@13/(byte*) form_control::field#16 )
  (byte) form_field_idx#20 ← phi( form_control::@13/(byte) form_field_idx#33 )
  *((byte[]) form_fields_val#0 + (byte) form_field_idx#20) ← -- *((byte[]) form_fields_val#0 + (byte) form_field_idx#20)
  (bool~) form_control::$26 ← *((byte[]) form_fields_val#0 + (byte) form_field_idx#20) == (byte/word/signed word/dword/signed dword) $ff
  (bool~) form_control::$27 ← ! (bool~) form_control::$26
  if((bool~) form_control::$27) goto form_control::@27
  to:form_control::@15
form_control::@27: scope:[form_control]  from form_control::@14
  (byte) keyboard_modifiers#73 ← phi( form_control::@14/(byte) keyboard_modifiers#92 )
  (byte) keyboard_events_size#73 ← phi( form_control::@14/(byte) keyboard_events_size#96 )
  (signed byte) form_cursor_count#34 ← phi( form_control::@14/(signed byte) form_cursor_count#45 )
  (byte*) form_control::field#8 ← phi( form_control::@14/(byte*) form_control::field#13 )
  (byte) form_field_idx#34 ← phi( form_control::@14/(byte) form_field_idx#20 )
  to:form_control::@29
form_control::@15: scope:[form_control]  from form_control::@14
  (byte) keyboard_modifiers#72 ← phi( form_control::@14/(byte) keyboard_modifiers#92 )
  (byte) keyboard_events_size#72 ← phi( form_control::@14/(byte) keyboard_events_size#96 )
  (signed byte) form_cursor_count#33 ← phi( form_control::@14/(signed byte) form_cursor_count#45 )
  (byte*) form_control::field#7 ← phi( form_control::@14/(byte*) form_control::field#13 )
  (byte) form_field_idx#21 ← phi( form_control::@14/(byte) form_field_idx#20 )
  *((byte[]) form_fields_val#0 + (byte) form_field_idx#21) ← *((byte[]) form_fields_max#0 + (byte) form_field_idx#21)
  to:form_control::@29
form_control::@29: scope:[form_control]  from form_control::@15 form_control::@27 form_control::@30 form_control::@31
  (byte) keyboard_modifiers#50 ← phi( form_control::@15/(byte) keyboard_modifiers#72 form_control::@27/(byte) keyboard_modifiers#73 form_control::@30/(byte) keyboard_modifiers#74 form_control::@31/(byte) keyboard_modifiers#75 )
  (byte) keyboard_events_size#51 ← phi( form_control::@15/(byte) keyboard_events_size#72 form_control::@27/(byte) keyboard_events_size#73 form_control::@30/(byte) keyboard_events_size#74 form_control::@31/(byte) keyboard_events_size#75 )
  (signed byte) form_cursor_count#24 ← phi( form_control::@15/(signed byte) form_cursor_count#33 form_control::@27/(signed byte) form_cursor_count#34 form_control::@30/(signed byte) form_cursor_count#35 form_control::@31/(signed byte) form_cursor_count#36 )
  (byte*) form_control::field#4 ← phi( form_control::@15/(byte*) form_control::field#7 form_control::@27/(byte*) form_control::field#8 form_control::@30/(byte*) form_control::field#9 form_control::@31/(byte*) form_control::field#10 )
  (byte) form_field_idx#22 ← phi( form_control::@15/(byte) form_field_idx#21 form_control::@27/(byte) form_field_idx#34 form_control::@30/(byte) form_field_idx#35 form_control::@31/(byte) form_field_idx#23 )
  *((byte*) form_control::field#4) ← *((byte[]) print_hextab#0 + *((byte[]) form_fields_val#0 + (byte) form_field_idx#22))
  (byte) form_control::return#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_control::@return
form_control::@30: scope:[form_control]  from form_control::@26
  (byte) keyboard_modifiers#74 ← phi( form_control::@26/(byte) keyboard_modifiers#93 )
  (byte) keyboard_events_size#74 ← phi( form_control::@26/(byte) keyboard_events_size#97 )
  (signed byte) form_cursor_count#35 ← phi( form_control::@26/(signed byte) form_cursor_count#46 )
  (byte*) form_control::field#9 ← phi( form_control::@26/(byte*) form_control::field#14 )
  (byte) form_field_idx#35 ← phi( form_control::@26/(byte) form_field_idx#19 )
  to:form_control::@29
form_control::@31: scope:[form_control]  from form_control::@26
  (byte) keyboard_modifiers#75 ← phi( form_control::@26/(byte) keyboard_modifiers#93 )
  (byte) keyboard_events_size#75 ← phi( form_control::@26/(byte) keyboard_events_size#97 )
  (signed byte) form_cursor_count#36 ← phi( form_control::@26/(signed byte) form_cursor_count#46 )
  (byte*) form_control::field#10 ← phi( form_control::@26/(byte*) form_control::field#14 )
  (byte) form_field_idx#23 ← phi( form_control::@26/(byte) form_field_idx#19 )
  *((byte[]) form_fields_val#0 + (byte) form_field_idx#23) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_control::@29
form_control::@6: scope:[form_control]  from form_control::@5
  (byte) form_field_idx#32 ← phi( form_control::@5/(byte) form_field_idx#47 )
  (byte) keyboard_modifiers#51 ← phi( form_control::@5/(byte) keyboard_modifiers#76 )
  (byte) keyboard_events_size#52 ← phi( form_control::@5/(byte) keyboard_events_size#76 )
  (signed byte) form_cursor_count#25 ← phi( form_control::@5/(signed byte) form_cursor_count#37 )
  (byte) form_control::return#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_control::@return
form_control::@16: scope:[form_control]  from form_control::@5
  (byte) form_field_idx#30 ← phi( form_control::@5/(byte) form_field_idx#47 )
  (byte) keyboard_modifiers#48 ← phi( form_control::@5/(byte) keyboard_modifiers#76 )
  (byte) keyboard_events_size#49 ← phi( form_control::@5/(byte) keyboard_events_size#76 )
  (signed byte) form_cursor_count#23 ← phi( form_control::@5/(signed byte) form_cursor_count#37 )
  (byte) form_control::return#5 ← (byte/word/signed word/dword/signed dword) $ff
  to:form_control::@return
@68: scope:[]  from @64
  (byte) form_field_idx#36 ← phi( @64/(byte) form_field_idx#4 )
  (byte) keyboard_modifiers#53 ← phi( @64/(byte) keyboard_modifiers#77 )
  (byte) keyboard_events_size#53 ← phi( @64/(byte) keyboard_events_size#77 )
  (signed byte) form_cursor_count#26 ← phi( @64/(signed byte) form_cursor_count#4 )
  (byte*) print_char_cursor#46 ← phi( @64/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#44 ← phi( @64/(byte*) print_line_cursor#53 )
  (byte*) print_screen#25 ← phi( @64/(byte*) print_screen#33 )
  call main 
  to:@69
@69: scope:[]  from @68
  (byte) form_field_idx#24 ← phi( @68/(byte) form_field_idx#1 )
  (byte) keyboard_modifiers#33 ← phi( @68/(byte) keyboard_modifiers#9 )
  (byte) keyboard_events_size#36 ← phi( @68/(byte) keyboard_events_size#8 )
  (signed byte) form_cursor_count#17 ← phi( @68/(signed byte) form_cursor_count#1 )
  (byte*) print_char_cursor#36 ← phi( @68/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#35 ← phi( @68/(byte*) print_line_cursor#10 )
  (byte*) print_screen#18 ← phi( @68/(byte*) print_screen#4 )
  (byte*) print_screen#8 ← (byte*) print_screen#18
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#35
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#36
  (signed byte) form_cursor_count#9 ← (signed byte) form_cursor_count#17
  (byte) keyboard_events_size#17 ← (byte) keyboard_events_size#36
  (byte) keyboard_modifiers#16 ← (byte) keyboard_modifiers#33
  (byte) form_field_idx#10 ← (byte) form_field_idx#24
  to:@end
@end: scope:[]  from @69

SYMBOL TABLE SSA
(byte~) $0
(string~) $1
(string~) $10
(const string) $100 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const string) $101 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const string) $102 = (string) "@"
(string~) $11
(string~) $12
(string~) $13
(string~) $14
(string~) $15
(string~) $16
(string~) $17
(string~) $18
(string~) $19
(string~) $2
(string~) $20
(string~) $21
(string~) $22
(string~) $23
(string~) $24
(string~) $25
(string~) $26
(string~) $27
(string~) $28
(string~) $29
(string~) $3
(string~) $30
(string~) $31
(byte*~) $32
(byte*~) $33
(byte*~) $34
(byte*~) $35
(byte*~) $36
(byte*~) $37
(byte*~) $38
(byte*~) $39
(string~) $4
(byte*~) $40
(byte*~) $41
(byte*~) $42
(byte*~) $43
(byte*~) $44
(byte*~) $45
(byte*~) $46
(byte*~) $47
(byte*~) $48
(byte*~) $49
(string~) $5
(byte*~) $50
(byte*~) $51
(byte*~) $52
(byte*~) $53
(byte*~) $54
(byte*~) $55
(byte*~) $56
(byte*~) $57
(byte*~) $58
(byte*~) $59
(string~) $6
(byte*~) $60
(byte*~) $61
(byte*~) $62
(byte*~) $63
(byte*~) $64
(byte*~) $65
(byte*~) $66
(byte*~) $67
(signed word/signed byte/signed dword~) $68
(const string) $69 = (string) "0123456789abcdef"
(string~) $7
(const string) $70 = (string) " C64 DTV Graphics Mode Explorer         @"
(const string) $71 = (string) "                                        @"
(const string) $72 = (string) " PRESET 0 Standard Charset              @"
(const string) $73 = (string) "                                        @"
(const string) $74 = (string) " CONTROL        PLANE  A     VIC II     @"
(const string) $75 = (string) " bmm        0   pattern p0   screen s0  @"
(const string) $76 = (string) " mcm        0   start   00   gfx    g0  @"
(const string) $77 = (string) " ecm        0   step    00   colors c0  @"
(const string) $78 = (string) " hicolor    0   modulo  00              @"
(const string) $79 = (string) " linear     0                COLORS     @"
(string~) $8
(const string) $80 = (string) " color off  0   PLANE  B     palet   0  @"
(const string) $81 = (string) " chunky     0   pattern p0   bgcol0 00  @"
(const string) $82 = (string) " border off 0   start   00   bgcol1 00  @"
(const string) $83 = (string) " overscan   0   step    00   bgcol2 00  @"
(const string) $84 = (string) "                modulo  00   bgcol3 00  @"
(const string) $85 = (string) "@"
(const string) $86 = (string) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"
(const string) $87 = (string) "                                        @"
(const string) $88 = (string) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"
(const string) $89 = (string) "                                        @"
(string~) $9
(const string) $90 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
(const string) $91 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
(const string) $92 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
(const string) $93 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
(const string) $94 = (string) " nnnnnnnnnnnn   mmmmmmmmmm              @"
(const string) $95 = (string) " nnnnnnnnnnnn                jjjjjjjjj  @"
(const string) $96 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const string) $97 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const string) $98 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const string) $99 = (string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(label) @17
(label) @24
(label) @28
(label) @31
(label) @4
(label) @40
(label) @43
(label) @45
(label) @5
(label) @64
(label) @68
(label) @69
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) DTV_BADLINE_OFF
(byte) DTV_BADLINE_OFF#0
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_ALU#0
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL#0
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_CONTROL2#0
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_HI#0
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_HI#0
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LIN_LO#0
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_LO#0
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MI#0
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_HI#0
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_MOD_LO#0
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_DEST_STEP#0
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_HI#0
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_LEN_LO#0
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_HI#0
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI#0
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LIN_LO#0
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_LO#0
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MI#0
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_HI#0
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_MOD_LO#0
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCA_STEP#0
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_HI#0
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI#0
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LIN_LO#0
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_LO#0
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MI#0
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_HI#0
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_MOD_LO#0
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_SRCB_STEP#0
(byte*) DTV_BLITTER_TRANSPARANCY
(byte*) DTV_BLITTER_TRANSPARANCY#0
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_ADD#0
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_AND#0
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CIA_IRQ#0
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_CLEAR_IRQ#0
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_CONT#0
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DEST_FWD#0
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_DISABLE_B#0
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_FORCE_START#0
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_IRQ_EN#0
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NAND#0
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_NOR#0
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_OR#0
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT0#0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT1#0
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT2#0
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT3#0
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT4#0
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT5#0
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT6#0
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SHIFT7#0
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_CONT#0
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCA_FWD#0
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_CONT#0
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_SRCB_FWD#0
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_BUSY#0
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_STATUS_IRQ#0
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_SUB#0
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_TRANSPARANCY_NONE#0
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VBLANK#0
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_VIC_IRQ#0
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_NONTRANSPARENT#0
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT#0
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XNOR#0
(byte) DTV_BLIT_XOR
(byte) DTV_BLIT_XOR#0
(byte) DTV_BORDER_OFF
(byte) DTV_BORDER_OFF#0
(byte) DTV_CHUNKY
(byte) DTV_CHUNKY#0
(byte) DTV_COLORRAM_OFF
(byte) DTV_COLORRAM_OFF#0
(dword) DTV_COLOR_BANK_DEFAULT
(dword) DTV_COLOR_BANK_DEFAULT#0
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_HI#0
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_COLOR_BANK_LO#0
(byte*) DTV_CONTROL
(byte*) DTV_CONTROL#0
(byte*) DTV_FEATURE
(byte*) DTV_FEATURE#0
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_DISABLE_TIL_RESET#0
(byte) DTV_FEATURE_ENABLE
(byte) DTV_FEATURE_ENABLE#0
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_HICOL_BANK#0
(byte*) DTV_GRAPHICS_VIC_BANK
(byte*) DTV_GRAPHICS_VIC_BANK#0
(byte) DTV_HIGHCOLOR
(byte) DTV_HIGHCOLOR#0
(byte) DTV_LINEAR
(byte) DTV_LINEAR#0
(byte) DTV_OVERSCAN
(byte) DTV_OVERSCAN#0
(byte*) DTV_PALETTE
(byte*) DTV_PALETTE#0
(byte[$10]) DTV_PALETTE_DEFAULT
(byte[$10]) DTV_PALETTE_DEFAULT#0
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_HI#0
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_MODULO_LO#0
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_HI#0
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_LO#0
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_START_MI#0
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEA_STEP#0
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_HI#0
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_MODULO_LO#0
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_HI#0
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_LO#0
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_START_MI#0
(byte*) DTV_PLANEB_STEP
(byte*) DTV_PLANEB_STEP#0
(byte*) DTV_SPRITE_BANK
(byte*) DTV_SPRITE_BANK#0
(byte*) FORM_CHARSET
(byte*) FORM_CHARSET#0
(byte[]) FORM_COLS
(byte[]) FORM_COLS#0
(signed byte) FORM_CURSOR_BLINK
(signed byte) FORM_CURSOR_BLINK#0
(byte*) FORM_SCREEN
(byte*) FORM_SCREEN#0
(byte[]) FORM_TEXT
(byte[]) FORM_TEXT#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte) KEY_0
(byte) KEY_0#0
(byte) KEY_1
(byte) KEY_1#0
(byte) KEY_2
(byte) KEY_2#0
(byte) KEY_3
(byte) KEY_3#0
(byte) KEY_4
(byte) KEY_4#0
(byte) KEY_5
(byte) KEY_5#0
(byte) KEY_6
(byte) KEY_6#0
(byte) KEY_7
(byte) KEY_7#0
(byte) KEY_8
(byte) KEY_8#0
(byte) KEY_9
(byte) KEY_9#0
(byte) KEY_A
(byte) KEY_A#0
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_LEFT#0
(byte) KEY_ARROW_UP
(byte) KEY_ARROW_UP#0
(byte) KEY_ASTERISK
(byte) KEY_ASTERISK#0
(byte) KEY_AT
(byte) KEY_AT#0
(byte) KEY_B
(byte) KEY_B#0
(byte) KEY_C
(byte) KEY_C#0
(byte) KEY_COLON
(byte) KEY_COLON#0
(byte) KEY_COMMA
(byte) KEY_COMMA#0
(byte) KEY_COMMODORE
(byte) KEY_COMMODORE#0
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_DOWN#0
(byte) KEY_CRSR_RIGHT
(byte) KEY_CRSR_RIGHT#0
(byte) KEY_CTRL
(byte) KEY_CTRL#0
(byte) KEY_D
(byte) KEY_D#0
(byte) KEY_DEL
(byte) KEY_DEL#0
(byte) KEY_DOT
(byte) KEY_DOT#0
(byte) KEY_E
(byte) KEY_E#0
(byte) KEY_EQUALS
(byte) KEY_EQUALS#0
(byte) KEY_F
(byte) KEY_F#0
(byte) KEY_F1
(byte) KEY_F1#0
(byte) KEY_F3
(byte) KEY_F3#0
(byte) KEY_F5
(byte) KEY_F5#0
(byte) KEY_F7
(byte) KEY_F7#0
(byte) KEY_G
(byte) KEY_G#0
(byte) KEY_H
(byte) KEY_H#0
(byte) KEY_HOME
(byte) KEY_HOME#0
(byte) KEY_I
(byte) KEY_I#0
(byte) KEY_J
(byte) KEY_J#0
(byte) KEY_K
(byte) KEY_K#0
(byte) KEY_L
(byte) KEY_L#0
(byte) KEY_LSHIFT
(byte) KEY_LSHIFT#0
(byte) KEY_M
(byte) KEY_M#0
(byte) KEY_MINUS
(byte) KEY_MINUS#0
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_COMMODORE#0
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_CTRL#0
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_LSHIFT#0
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_RSHIFT#0
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_MODIFIER_SHIFT#0
(byte) KEY_N
(byte) KEY_N#0
(byte) KEY_O
(byte) KEY_O#0
(byte) KEY_P
(byte) KEY_P#0
(byte) KEY_PLUS
(byte) KEY_PLUS#0
(byte) KEY_POUND
(byte) KEY_POUND#0
(byte) KEY_Q
(byte) KEY_Q#0
(byte) KEY_R
(byte) KEY_R#0
(byte) KEY_RETURN
(byte) KEY_RETURN#0
(byte) KEY_RSHIFT
(byte) KEY_RSHIFT#0
(byte) KEY_RUNSTOP
(byte) KEY_RUNSTOP#0
(byte) KEY_S
(byte) KEY_S#0
(byte) KEY_SEMICOLON
(byte) KEY_SEMICOLON#0
(byte) KEY_SLASH
(byte) KEY_SLASH#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) KEY_T
(byte) KEY_T#0
(byte) KEY_U
(byte) KEY_U#0
(byte) KEY_V
(byte) KEY_V#0
(byte) KEY_W
(byte) KEY_W#0
(byte) KEY_X
(byte) KEY_X#0
(byte) KEY_Y
(byte) KEY_Y#0
(byte) KEY_Z
(byte) KEY_Z#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(byte) PINK
(byte) PINK#0
(dword) PLANE_8BPP_CHUNKY
(dword) PLANE_8BPP_CHUNKY#0
(dword) PLANE_BLANK
(dword) PLANE_BLANK#0
(dword) PLANE_CHARSET8
(dword) PLANE_CHARSET8#0
(dword) PLANE_FULL
(dword) PLANE_FULL#0
(dword) PLANE_HORISONTAL
(dword) PLANE_HORISONTAL#0
(dword) PLANE_HORISONTAL2
(dword) PLANE_HORISONTAL2#0
(dword) PLANE_VERTICAL
(dword) PLANE_VERTICAL#0
(dword) PLANE_VERTICAL2
(dword) PLANE_VERTICAL2#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte*) VIC_BITMAP
(byte*) VIC_BITMAP#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CHARSET_ROM
(byte*) VIC_CHARSET_ROM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte*) VIC_SCREEN0
(byte*) VIC_SCREEN0#0
(byte*) VIC_SCREEN1
(byte*) VIC_SCREEN1#0
(byte*) VIC_SCREEN2
(byte*) VIC_SCREEN2#0
(byte*) VIC_SCREEN3
(byte*) VIC_SCREEN3#0
(byte*) VIC_SCREEN4
(byte*) VIC_SCREEN4#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(void()) apply_preset((byte) apply_preset::idx)
(bool~) apply_preset::$0
(bool~) apply_preset::$1
(bool~) apply_preset::$10
(bool~) apply_preset::$11
(bool~) apply_preset::$2
(bool~) apply_preset::$3
(bool~) apply_preset::$4
(bool~) apply_preset::$5
(bool~) apply_preset::$6
(bool~) apply_preset::$7
(bool~) apply_preset::$8
(bool~) apply_preset::$9
(label) apply_preset::@1
(label) apply_preset::@10
(label) apply_preset::@11
(label) apply_preset::@2
(label) apply_preset::@22
(label) apply_preset::@23
(label) apply_preset::@24
(label) apply_preset::@25
(label) apply_preset::@26
(label) apply_preset::@27
(label) apply_preset::@28
(label) apply_preset::@29
(label) apply_preset::@3
(label) apply_preset::@30
(label) apply_preset::@31
(label) apply_preset::@32
(label) apply_preset::@33
(label) apply_preset::@4
(label) apply_preset::@45
(label) apply_preset::@5
(label) apply_preset::@6
(label) apply_preset::@7
(label) apply_preset::@8
(label) apply_preset::@9
(label) apply_preset::@return
(byte) apply_preset::i
(byte) apply_preset::i#0
(byte) apply_preset::i#1
(byte) apply_preset::i#2
(byte) apply_preset::idx
(byte) apply_preset::idx#0
(byte) apply_preset::idx#1
(byte) apply_preset::idx#10
(byte) apply_preset::idx#11
(byte) apply_preset::idx#2
(byte) apply_preset::idx#3
(byte) apply_preset::idx#4
(byte) apply_preset::idx#5
(byte) apply_preset::idx#6
(byte) apply_preset::idx#7
(byte) apply_preset::idx#8
(byte) apply_preset::idx#9
(byte*) apply_preset::preset
(byte*) apply_preset::preset#0
(byte*) apply_preset::preset#1
(byte*) apply_preset::preset#10
(byte*) apply_preset::preset#11
(byte*) apply_preset::preset#12
(byte*) apply_preset::preset#13
(byte*) apply_preset::preset#14
(byte*) apply_preset::preset#2
(byte*) apply_preset::preset#3
(byte*) apply_preset::preset#4
(byte*) apply_preset::preset#5
(byte*) apply_preset::preset#6
(byte*) apply_preset::preset#7
(byte*) apply_preset::preset#8
(byte*) apply_preset::preset#9
(void()) bitmap_clear()
(byte*~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(bool~) bitmap_clear::$2
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#0
(byte*) bitmap_clear::bitmap#1
(byte*) bitmap_clear::bitmap#2
(byte*) bitmap_clear::bitmap#3
(byte*) bitmap_clear::bitmap#4
(byte) bitmap_clear::x
(byte) bitmap_clear::x#0
(byte) bitmap_clear::x#1
(byte) bitmap_clear::x#2
(byte) bitmap_clear::y
(byte) bitmap_clear::y#0
(byte) bitmap_clear::y#1
(byte) bitmap_clear::y#2
(byte) bitmap_clear::y#3
(byte) bitmap_clear::y#4
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0
(byte~) bitmap_init::$1
(byte~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$12
(word/signed word/dword/signed dword~) bitmap_init::$13
(byte*~) bitmap_init::$14
(bool~) bitmap_init::$15
(byte~) bitmap_init::$2
(bool~) bitmap_init::$3
(bool~) bitmap_init::$4
(bool~) bitmap_init::$5
(byte~) bitmap_init::$6
(byte~) bitmap_init::$7
(byte~) bitmap_init::$8
(byte~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte*) bitmap_init::bitmap#0
(byte*) bitmap_init::bitmap#1
(byte*) bitmap_init::bitmap#2
(byte*) bitmap_init::bitmap#3
(byte*) bitmap_init::bitmap#4
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(bool~) bitmap_line::$0
(byte~) bitmap_line::$1
(byte~) bitmap_line::$11
(bool~) bitmap_line::$12
(byte~) bitmap_line::$13
(bool~) bitmap_line::$14
(byte~) bitmap_line::$17
(bool~) bitmap_line::$18
(bool~) bitmap_line::$2
(byte~) bitmap_line::$3
(bool~) bitmap_line::$4
(byte~) bitmap_line::$7
(bool~) bitmap_line::$8
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@15
(label) bitmap_line::@17
(label) bitmap_line::@20
(label) bitmap_line::@21
(label) bitmap_line::@25
(label) bitmap_line::@27
(label) bitmap_line::@29
(label) bitmap_line::@3
(label) bitmap_line::@30
(label) bitmap_line::@31
(label) bitmap_line::@32
(label) bitmap_line::@33
(label) bitmap_line::@34
(label) bitmap_line::@35
(label) bitmap_line::@36
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0
(byte) bitmap_line::x0#1
(byte) bitmap_line::x0#10
(byte) bitmap_line::x0#11
(byte) bitmap_line::x0#12
(byte) bitmap_line::x0#13
(byte) bitmap_line::x0#2
(byte) bitmap_line::x0#3
(byte) bitmap_line::x0#4
(byte) bitmap_line::x0#5
(byte) bitmap_line::x0#6
(byte) bitmap_line::x0#7
(byte) bitmap_line::x0#8
(byte) bitmap_line::x0#9
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0
(byte) bitmap_line::x1#1
(byte) bitmap_line::x1#10
(byte) bitmap_line::x1#11
(byte) bitmap_line::x1#12
(byte) bitmap_line::x1#13
(byte) bitmap_line::x1#2
(byte) bitmap_line::x1#3
(byte) bitmap_line::x1#4
(byte) bitmap_line::x1#5
(byte) bitmap_line::x1#6
(byte) bitmap_line::x1#7
(byte) bitmap_line::x1#8
(byte) bitmap_line::x1#9
(byte) bitmap_line::xd
(byte) bitmap_line::xd#0
(byte) bitmap_line::xd#1
(byte) bitmap_line::xd#10
(byte) bitmap_line::xd#11
(byte) bitmap_line::xd#12
(byte) bitmap_line::xd#13
(byte) bitmap_line::xd#14
(byte) bitmap_line::xd#2
(byte) bitmap_line::xd#3
(byte) bitmap_line::xd#4
(byte) bitmap_line::xd#5
(byte) bitmap_line::xd#6
(byte) bitmap_line::xd#7
(byte) bitmap_line::xd#8
(byte) bitmap_line::xd#9
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0
(byte) bitmap_line::y0#1
(byte) bitmap_line::y0#10
(byte) bitmap_line::y0#11
(byte) bitmap_line::y0#12
(byte) bitmap_line::y0#13
(byte) bitmap_line::y0#2
(byte) bitmap_line::y0#3
(byte) bitmap_line::y0#4
(byte) bitmap_line::y0#5
(byte) bitmap_line::y0#6
(byte) bitmap_line::y0#7
(byte) bitmap_line::y0#8
(byte) bitmap_line::y0#9
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0
(byte) bitmap_line::y1#1
(byte) bitmap_line::y1#10
(byte) bitmap_line::y1#11
(byte) bitmap_line::y1#12
(byte) bitmap_line::y1#13
(byte) bitmap_line::y1#2
(byte) bitmap_line::y1#3
(byte) bitmap_line::y1#4
(byte) bitmap_line::y1#5
(byte) bitmap_line::y1#6
(byte) bitmap_line::y1#7
(byte) bitmap_line::y1#8
(byte) bitmap_line::y1#9
(byte) bitmap_line::yd
(byte) bitmap_line::yd#0
(byte) bitmap_line::yd#1
(byte) bitmap_line::yd#10
(byte) bitmap_line::yd#11
(byte) bitmap_line::yd#12
(byte) bitmap_line::yd#2
(byte) bitmap_line::yd#3
(byte) bitmap_line::yd#4
(byte) bitmap_line::yd#5
(byte) bitmap_line::yd#6
(byte) bitmap_line::yd#7
(byte) bitmap_line::yd#8
(byte) bitmap_line::yd#9
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$0
(byte~) bitmap_line_xdyd::$2
(bool~) bitmap_line_xdyd::$3
(bool~) bitmap_line_xdyd::$4
(byte~) bitmap_line_xdyd::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6
(bool~) bitmap_line_xdyd::$7
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@5
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0
(byte) bitmap_line_xdyd::e#1
(byte) bitmap_line_xdyd::e#2
(byte) bitmap_line_xdyd::e#3
(byte) bitmap_line_xdyd::e#4
(byte) bitmap_line_xdyd::e#5
(byte) bitmap_line_xdyd::e#6
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0
(byte) bitmap_line_xdyd::x#1
(byte) bitmap_line_xdyd::x#2
(byte) bitmap_line_xdyd::x#3
(byte) bitmap_line_xdyd::x#4
(byte) bitmap_line_xdyd::x#5
(byte) bitmap_line_xdyd::x#6
(byte) bitmap_line_xdyd::x#7
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0
(byte) bitmap_line_xdyd::x1#1
(byte) bitmap_line_xdyd::x1#2
(byte) bitmap_line_xdyd::x1#3
(byte) bitmap_line_xdyd::x1#4
(byte) bitmap_line_xdyd::x1#5
(byte) bitmap_line_xdyd::x1#6
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0
(byte) bitmap_line_xdyd::xd#1
(byte) bitmap_line_xdyd::xd#2
(byte) bitmap_line_xdyd::xd#3
(byte) bitmap_line_xdyd::xd#4
(byte) bitmap_line_xdyd::xd#5
(byte) bitmap_line_xdyd::xd#6
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0
(byte) bitmap_line_xdyd::y#1
(byte) bitmap_line_xdyd::y#2
(byte) bitmap_line_xdyd::y#3
(byte) bitmap_line_xdyd::y#4
(byte) bitmap_line_xdyd::y#5
(byte) bitmap_line_xdyd::y#6
(byte) bitmap_line_xdyd::y#7
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0
(byte) bitmap_line_xdyd::yd#1
(byte) bitmap_line_xdyd::yd#2
(byte) bitmap_line_xdyd::yd#3
(byte) bitmap_line_xdyd::yd#4
(byte) bitmap_line_xdyd::yd#5
(byte) bitmap_line_xdyd::yd#6
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$0
(byte~) bitmap_line_xdyi::$2
(bool~) bitmap_line_xdyi::$3
(bool~) bitmap_line_xdyi::$4
(byte~) bitmap_line_xdyi::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6
(bool~) bitmap_line_xdyi::$7
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@5
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0
(byte) bitmap_line_xdyi::e#1
(byte) bitmap_line_xdyi::e#2
(byte) bitmap_line_xdyi::e#3
(byte) bitmap_line_xdyi::e#4
(byte) bitmap_line_xdyi::e#5
(byte) bitmap_line_xdyi::e#6
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0
(byte) bitmap_line_xdyi::x#1
(byte) bitmap_line_xdyi::x#2
(byte) bitmap_line_xdyi::x#3
(byte) bitmap_line_xdyi::x#4
(byte) bitmap_line_xdyi::x#5
(byte) bitmap_line_xdyi::x#6
(byte) bitmap_line_xdyi::x#7
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0
(byte) bitmap_line_xdyi::x1#1
(byte) bitmap_line_xdyi::x1#2
(byte) bitmap_line_xdyi::x1#3
(byte) bitmap_line_xdyi::x1#4
(byte) bitmap_line_xdyi::x1#5
(byte) bitmap_line_xdyi::x1#6
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0
(byte) bitmap_line_xdyi::xd#1
(byte) bitmap_line_xdyi::xd#2
(byte) bitmap_line_xdyi::xd#3
(byte) bitmap_line_xdyi::xd#4
(byte) bitmap_line_xdyi::xd#5
(byte) bitmap_line_xdyi::xd#6
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0
(byte) bitmap_line_xdyi::y#1
(byte) bitmap_line_xdyi::y#2
(byte) bitmap_line_xdyi::y#3
(byte) bitmap_line_xdyi::y#4
(byte) bitmap_line_xdyi::y#5
(byte) bitmap_line_xdyi::y#6
(byte) bitmap_line_xdyi::y#7
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0
(byte) bitmap_line_xdyi::yd#1
(byte) bitmap_line_xdyi::yd#2
(byte) bitmap_line_xdyi::yd#3
(byte) bitmap_line_xdyi::yd#4
(byte) bitmap_line_xdyi::yd#5
(byte) bitmap_line_xdyi::yd#6
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$0
(byte~) bitmap_line_ydxd::$2
(bool~) bitmap_line_ydxd::$3
(bool~) bitmap_line_ydxd::$4
(byte~) bitmap_line_ydxd::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6
(bool~) bitmap_line_ydxd::$7
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@5
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0
(byte) bitmap_line_ydxd::e#1
(byte) bitmap_line_ydxd::e#2
(byte) bitmap_line_ydxd::e#3
(byte) bitmap_line_ydxd::e#4
(byte) bitmap_line_ydxd::e#5
(byte) bitmap_line_ydxd::e#6
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0
(byte) bitmap_line_ydxd::x#1
(byte) bitmap_line_ydxd::x#2
(byte) bitmap_line_ydxd::x#3
(byte) bitmap_line_ydxd::x#4
(byte) bitmap_line_ydxd::x#5
(byte) bitmap_line_ydxd::x#6
(byte) bitmap_line_ydxd::x#7
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0
(byte) bitmap_line_ydxd::xd#1
(byte) bitmap_line_ydxd::xd#2
(byte) bitmap_line_ydxd::xd#3
(byte) bitmap_line_ydxd::xd#4
(byte) bitmap_line_ydxd::xd#5
(byte) bitmap_line_ydxd::xd#6
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0
(byte) bitmap_line_ydxd::y#1
(byte) bitmap_line_ydxd::y#2
(byte) bitmap_line_ydxd::y#3
(byte) bitmap_line_ydxd::y#4
(byte) bitmap_line_ydxd::y#5
(byte) bitmap_line_ydxd::y#6
(byte) bitmap_line_ydxd::y#7
(byte) bitmap_line_ydxd::y#8
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0
(byte) bitmap_line_ydxd::y1#1
(byte) bitmap_line_ydxd::y1#2
(byte) bitmap_line_ydxd::y1#3
(byte) bitmap_line_ydxd::y1#4
(byte) bitmap_line_ydxd::y1#5
(byte) bitmap_line_ydxd::y1#6
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0
(byte) bitmap_line_ydxd::yd#1
(byte) bitmap_line_ydxd::yd#2
(byte) bitmap_line_ydxd::yd#3
(byte) bitmap_line_ydxd::yd#4
(byte) bitmap_line_ydxd::yd#5
(byte) bitmap_line_ydxd::yd#6
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$0
(byte~) bitmap_line_ydxi::$2
(bool~) bitmap_line_ydxi::$3
(bool~) bitmap_line_ydxi::$4
(byte~) bitmap_line_ydxi::$5
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6
(bool~) bitmap_line_ydxi::$7
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@5
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0
(byte) bitmap_line_ydxi::e#1
(byte) bitmap_line_ydxi::e#2
(byte) bitmap_line_ydxi::e#3
(byte) bitmap_line_ydxi::e#4
(byte) bitmap_line_ydxi::e#5
(byte) bitmap_line_ydxi::e#6
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0
(byte) bitmap_line_ydxi::x#1
(byte) bitmap_line_ydxi::x#2
(byte) bitmap_line_ydxi::x#3
(byte) bitmap_line_ydxi::x#4
(byte) bitmap_line_ydxi::x#5
(byte) bitmap_line_ydxi::x#6
(byte) bitmap_line_ydxi::x#7
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0
(byte) bitmap_line_ydxi::xd#1
(byte) bitmap_line_ydxi::xd#2
(byte) bitmap_line_ydxi::xd#3
(byte) bitmap_line_ydxi::xd#4
(byte) bitmap_line_ydxi::xd#5
(byte) bitmap_line_ydxi::xd#6
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0
(byte) bitmap_line_ydxi::y#1
(byte) bitmap_line_ydxi::y#2
(byte) bitmap_line_ydxi::y#3
(byte) bitmap_line_ydxi::y#4
(byte) bitmap_line_ydxi::y#5
(byte) bitmap_line_ydxi::y#6
(byte) bitmap_line_ydxi::y#7
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0
(byte) bitmap_line_ydxi::y1#1
(byte) bitmap_line_ydxi::y1#2
(byte) bitmap_line_ydxi::y1#3
(byte) bitmap_line_ydxi::y1#4
(byte) bitmap_line_ydxi::y1#5
(byte) bitmap_line_ydxi::y1#6
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0
(byte) bitmap_line_ydxi::yd#1
(byte) bitmap_line_ydxi::yd#2
(byte) bitmap_line_ydxi::yd#3
(byte) bitmap_line_ydxi::yd#4
(byte) bitmap_line_ydxi::yd#5
(byte) bitmap_line_ydxi::yd#6
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0
(byte~) bitmap_plot::$1
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0
(byte) bitmap_plot::x#1
(byte) bitmap_plot::x#2
(byte) bitmap_plot::x#3
(byte) bitmap_plot::x#4
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte) bitmap_plot::y#3
(byte) bitmap_plot::y#4
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_bit#0
(byte[$100]) bitmap_plot_xhi
(byte[$100]) bitmap_plot_xhi#0
(byte[$100]) bitmap_plot_xlo
(byte[$100]) bitmap_plot_xlo#0
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_yhi#0
(byte[$100]) bitmap_plot_ylo
(byte[$100]) bitmap_plot_ylo#0
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte*) dtvSetCpuBankSegment1::cpuBank#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1
(byte) dtvSetCpuBankSegment1::cpuBankIdx#10
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11
(byte) dtvSetCpuBankSegment1::cpuBankIdx#12
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3
(byte) dtvSetCpuBankSegment1::cpuBankIdx#4
(byte) dtvSetCpuBankSegment1::cpuBankIdx#5
(byte) dtvSetCpuBankSegment1::cpuBankIdx#6
(byte) dtvSetCpuBankSegment1::cpuBankIdx#7
(byte) dtvSetCpuBankSegment1::cpuBankIdx#8
(byte) dtvSetCpuBankSegment1::cpuBankIdx#9
(byte*) form_a_mod_hi
(byte*) form_a_mod_hi#0
(byte*) form_a_mod_lo
(byte*) form_a_mod_lo#0
(byte*) form_a_pattern
(byte*) form_a_pattern#0
(byte*) form_a_start_hi
(byte*) form_a_start_hi#0
(byte*) form_a_start_lo
(byte*) form_a_start_lo#0
(byte*) form_a_step_hi
(byte*) form_a_step_hi#0
(byte*) form_a_step_lo
(byte*) form_a_step_lo#0
(byte*) form_b_mod_hi
(byte*) form_b_mod_hi#0
(byte*) form_b_mod_lo
(byte*) form_b_mod_lo#0
(byte*) form_b_pattern
(byte*) form_b_pattern#0
(byte*) form_b_start_hi
(byte*) form_b_start_hi#0
(byte*) form_b_start_lo
(byte*) form_b_start_lo#0
(byte*) form_b_step_hi
(byte*) form_b_step_hi#0
(byte*) form_b_step_lo
(byte*) form_b_step_lo#0
(byte()) form_control()
(byte*~) form_control::$0
(bool~) form_control::$1
(bool~) form_control::$10
(bool~) form_control::$11
(bool~) form_control::$12
(byte~) form_control::$13
(byte/word/dword~) form_control::$14
(byte~) form_control::$15
(byte~) form_control::$16
(bool~) form_control::$17
(bool~) form_control::$18
(bool~) form_control::$19
(bool~) form_control::$2
(byte/signed word/word/dword/signed dword~) form_control::$20
(bool~) form_control::$21
(bool~) form_control::$22
(signed word/signed byte/signed dword~) form_control::$23
(byte~) form_control::$24
(bool~) form_control::$25
(bool~) form_control::$26
(bool~) form_control::$27
(bool~) form_control::$28
(bool~) form_control::$29
(signed word/signed byte/signed dword~) form_control::$3
(bool~) form_control::$4
(byte~) form_control::$6
(bool~) form_control::$7
(bool~) form_control::$8
(bool~) form_control::$9
(label) form_control::@1
(label) form_control::@10
(label) form_control::@11
(label) form_control::@12
(label) form_control::@13
(label) form_control::@14
(label) form_control::@15
(label) form_control::@16
(label) form_control::@19
(label) form_control::@2
(label) form_control::@20
(label) form_control::@22
(label) form_control::@23
(label) form_control::@24
(label) form_control::@26
(label) form_control::@27
(label) form_control::@29
(label) form_control::@3
(label) form_control::@30
(label) form_control::@31
(label) form_control::@33
(label) form_control::@34
(label) form_control::@35
(label) form_control::@4
(label) form_control::@5
(label) form_control::@6
(label) form_control::@7
(label) form_control::@8
(label) form_control::@return
(byte*) form_control::field
(byte*) form_control::field#0
(byte*) form_control::field#1
(byte*) form_control::field#10
(byte*) form_control::field#11
(byte*) form_control::field#12
(byte*) form_control::field#13
(byte*) form_control::field#14
(byte*) form_control::field#15
(byte*) form_control::field#16
(byte*) form_control::field#17
(byte*) form_control::field#2
(byte*) form_control::field#3
(byte*) form_control::field#4
(byte*) form_control::field#5
(byte*) form_control::field#6
(byte*) form_control::field#7
(byte*) form_control::field#8
(byte*) form_control::field#9
(byte) form_control::key_event
(byte) form_control::key_event#0
(byte) form_control::key_event#1
(byte) form_control::key_event#2
(byte) form_control::return
(byte) form_control::return#0
(byte) form_control::return#1
(byte) form_control::return#2
(byte) form_control::return#3
(byte) form_control::return#4
(byte) form_control::return#5
(byte) form_control::return#6
(byte) form_control::return#7
(byte*) form_ctrl_bmm
(byte*) form_ctrl_bmm#0
(byte*) form_ctrl_borof
(byte*) form_ctrl_borof#0
(byte*) form_ctrl_chunk
(byte*) form_ctrl_chunk#0
(byte*) form_ctrl_colof
(byte*) form_ctrl_colof#0
(byte*) form_ctrl_ecm
(byte*) form_ctrl_ecm#0
(byte*) form_ctrl_hicol
(byte*) form_ctrl_hicol#0
(byte*) form_ctrl_line
(byte*) form_ctrl_line#0
(byte*) form_ctrl_mcm
(byte*) form_ctrl_mcm#0
(byte*) form_ctrl_overs
(byte*) form_ctrl_overs#0
(signed byte) form_cursor_count
(signed byte) form_cursor_count#0
(signed byte) form_cursor_count#1
(signed byte) form_cursor_count#10
(signed byte) form_cursor_count#11
(signed byte) form_cursor_count#12
(signed byte) form_cursor_count#13
(signed byte) form_cursor_count#14
(signed byte) form_cursor_count#15
(signed byte) form_cursor_count#16
(signed byte) form_cursor_count#17
(signed byte) form_cursor_count#18
(signed byte) form_cursor_count#19
(signed byte) form_cursor_count#2
(signed byte) form_cursor_count#20
(signed byte) form_cursor_count#21
(signed byte) form_cursor_count#22
(signed byte) form_cursor_count#23
(signed byte) form_cursor_count#24
(signed byte) form_cursor_count#25
(signed byte) form_cursor_count#26
(signed byte) form_cursor_count#27
(signed byte) form_cursor_count#28
(signed byte) form_cursor_count#29
(signed byte) form_cursor_count#3
(signed byte) form_cursor_count#30
(signed byte) form_cursor_count#31
(signed byte) form_cursor_count#32
(signed byte) form_cursor_count#33
(signed byte) form_cursor_count#34
(signed byte) form_cursor_count#35
(signed byte) form_cursor_count#36
(signed byte) form_cursor_count#37
(signed byte) form_cursor_count#38
(signed byte) form_cursor_count#39
(signed byte) form_cursor_count#4
(signed byte) form_cursor_count#40
(signed byte) form_cursor_count#41
(signed byte) form_cursor_count#42
(signed byte) form_cursor_count#43
(signed byte) form_cursor_count#44
(signed byte) form_cursor_count#45
(signed byte) form_cursor_count#46
(signed byte) form_cursor_count#47
(signed byte) form_cursor_count#48
(signed byte) form_cursor_count#49
(signed byte) form_cursor_count#5
(signed byte) form_cursor_count#50
(signed byte) form_cursor_count#51
(signed byte) form_cursor_count#52
(signed byte) form_cursor_count#53
(signed byte) form_cursor_count#54
(signed byte) form_cursor_count#55
(signed byte) form_cursor_count#56
(signed byte) form_cursor_count#57
(signed byte) form_cursor_count#58
(signed byte) form_cursor_count#59
(signed byte) form_cursor_count#6
(signed byte) form_cursor_count#60
(signed byte) form_cursor_count#61
(signed byte) form_cursor_count#62
(signed byte) form_cursor_count#63
(signed byte) form_cursor_count#64
(signed byte) form_cursor_count#65
(signed byte) form_cursor_count#7
(signed byte) form_cursor_count#8
(signed byte) form_cursor_count#9
(byte*) form_dtv_palet
(byte*) form_dtv_palet#0
(byte) form_field_idx
(byte) form_field_idx#0
(byte) form_field_idx#1
(byte) form_field_idx#10
(byte) form_field_idx#11
(byte) form_field_idx#12
(byte) form_field_idx#13
(byte) form_field_idx#14
(byte) form_field_idx#15
(byte) form_field_idx#16
(byte) form_field_idx#17
(byte) form_field_idx#18
(byte) form_field_idx#19
(byte) form_field_idx#2
(byte) form_field_idx#20
(byte) form_field_idx#21
(byte) form_field_idx#22
(byte) form_field_idx#23
(byte) form_field_idx#24
(byte) form_field_idx#25
(byte) form_field_idx#26
(byte) form_field_idx#27
(byte) form_field_idx#28
(byte) form_field_idx#29
(byte) form_field_idx#3
(byte) form_field_idx#30
(byte) form_field_idx#31
(byte) form_field_idx#32
(byte) form_field_idx#33
(byte) form_field_idx#34
(byte) form_field_idx#35
(byte) form_field_idx#36
(byte) form_field_idx#37
(byte) form_field_idx#38
(byte) form_field_idx#39
(byte) form_field_idx#4
(byte) form_field_idx#40
(byte) form_field_idx#41
(byte) form_field_idx#42
(byte) form_field_idx#43
(byte) form_field_idx#44
(byte) form_field_idx#45
(byte) form_field_idx#46
(byte) form_field_idx#47
(byte) form_field_idx#48
(byte) form_field_idx#49
(byte) form_field_idx#5
(byte) form_field_idx#50
(byte) form_field_idx#51
(byte) form_field_idx#52
(byte) form_field_idx#53
(byte) form_field_idx#54
(byte) form_field_idx#55
(byte) form_field_idx#56
(byte) form_field_idx#57
(byte) form_field_idx#58
(byte) form_field_idx#59
(byte) form_field_idx#6
(byte) form_field_idx#60
(byte) form_field_idx#61
(byte) form_field_idx#62
(byte) form_field_idx#63
(byte) form_field_idx#64
(byte) form_field_idx#65
(byte) form_field_idx#66
(byte) form_field_idx#67
(byte) form_field_idx#68
(byte) form_field_idx#69
(byte) form_field_idx#7
(byte) form_field_idx#70
(byte) form_field_idx#71
(byte) form_field_idx#72
(byte) form_field_idx#73
(byte) form_field_idx#8
(byte) form_field_idx#9
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(byte*~) form_field_ptr::$0
(byte*~) form_field_ptr::$1
(label) form_field_ptr::@return
(byte*) form_field_ptr::field
(byte*) form_field_ptr::field#0
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0
(byte) form_field_ptr::field_idx#1
(byte) form_field_ptr::field_idx#2
(byte*) form_field_ptr::line
(byte*) form_field_ptr::line#0
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0
(byte*) form_field_ptr::return#1
(byte*) form_field_ptr::return#2
(byte*) form_field_ptr::return#3
(byte*) form_field_ptr::return#4
(byte*) form_field_ptr::return#5
(byte*) form_field_ptr::return#6
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0
(byte) form_fields_cnt
(byte) form_fields_cnt#0
(byte[]) form_fields_max
(byte[]) form_fields_max#0
(byte[]) form_fields_val
(byte[]) form_fields_val#0
(byte[]) form_fields_x
(byte[]) form_fields_x#0
(byte[]) form_fields_y
(byte[]) form_fields_y#0
(byte[$19]) form_line_hi
(byte[$19]) form_line_hi#0
(byte[$19]) form_line_lo
(byte[$19]) form_line_lo#0
(void()) form_mode()
(dword~) form_mode::$10
(byte~) form_mode::$11
(dword~) form_mode::$12
(word~) form_mode::$13
(byte~) form_mode::$14
(dword~) form_mode::$15
(word~) form_mode::$16
(byte~) form_mode::$17
(word~) form_mode::$18
(word/signed dword/dword~) form_mode::$19
(byte~) form_mode::$20
(byte/word/dword~) form_mode::$21
(byte~) form_mode::$22
(byte/word/dword~) form_mode::$23
(word~) form_mode::$24
(word~) form_mode::$25
(word/signed dword/dword~) form_mode::$26
(word~) form_mode::$27
(word~) form_mode::$28
(word/signed dword/dword~) form_mode::$29
(word/dword~) form_mode::$30
(byte~) form_mode::$31
(byte~) form_mode::$32
(byte~) form_mode::$33
(bool~) form_mode::$34
(bool~) form_mode::$35
(byte~) form_mode::$36
(bool~) form_mode::$37
(bool~) form_mode::$38
(bool~) form_mode::$39
(bool~) form_mode::$40
(dword~) form_mode::$9
(label) form_mode::@1
(label) form_mode::@14
(label) form_mode::@15
(label) form_mode::@18
(label) form_mode::@2
(label) form_mode::@21
(label) form_mode::@22
(label) form_mode::@23
(label) form_mode::@24
(label) form_mode::@25
(label) form_mode::@26
(label) form_mode::@27
(label) form_mode::@28
(label) form_mode::@29
(label) form_mode::@3
(label) form_mode::@30
(label) form_mode::@31
(label) form_mode::@32
(label) form_mode::@33
(label) form_mode::@4
(label) form_mode::@6
(label) form_mode::@7
(label) form_mode::@8
(label) form_mode::@return
(byte) form_mode::i
(byte) form_mode::i#0
(byte) form_mode::i#1
(byte) form_mode::i#2
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0
(byte) form_mode::preset_current#1
(byte) form_mode::preset_current#10
(byte) form_mode::preset_current#11
(byte) form_mode::preset_current#2
(byte) form_mode::preset_current#3
(byte) form_mode::preset_current#4
(byte) form_mode::preset_current#5
(byte) form_mode::preset_current#6
(byte) form_mode::preset_current#7
(byte) form_mode::preset_current#8
(byte) form_mode::preset_current#9
(byte*) form_preset
(byte*) form_preset#0
(void()) form_render_values()
(byte*~) form_render_values::$0
(bool~) form_render_values::$1
(label) form_render_values::@1
(label) form_render_values::@3
(label) form_render_values::@return
(byte*) form_render_values::field
(byte*) form_render_values::field#0
(byte) form_render_values::idx
(byte) form_render_values::idx#0
(byte) form_render_values::idx#1
(byte) form_render_values::idx#2
(byte) form_render_values::idx#3
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0
(byte~) form_set_screen::$1
(byte*~) form_set_screen::$2
(bool~) form_set_screen::$3
(label) form_set_screen::@1
(label) form_set_screen::@return
(byte*) form_set_screen::line
(byte*) form_set_screen::line#0
(byte*) form_set_screen::line#1
(byte*) form_set_screen::line#2
(byte*) form_set_screen::screen
(byte*) form_set_screen::screen#0
(byte*) form_set_screen::screen#1
(byte) form_set_screen::y
(byte) form_set_screen::y#0
(byte) form_set_screen::y#1
(byte) form_set_screen::y#2
(byte*) form_vic_bg0_hi
(byte*) form_vic_bg0_hi#0
(byte*) form_vic_bg0_lo
(byte*) form_vic_bg0_lo#0
(byte*) form_vic_bg1_hi
(byte*) form_vic_bg1_hi#0
(byte*) form_vic_bg1_lo
(byte*) form_vic_bg1_lo#0
(byte*) form_vic_bg2_hi
(byte*) form_vic_bg2_hi#0
(byte*) form_vic_bg2_lo
(byte*) form_vic_bg2_lo#0
(byte*) form_vic_bg3_hi
(byte*) form_vic_bg3_hi#0
(byte*) form_vic_bg3_lo
(byte*) form_vic_bg3_lo#0
(byte*) form_vic_cols
(byte*) form_vic_cols#0
(byte*) form_vic_gfx
(byte*) form_vic_gfx#0
(byte*) form_vic_screen
(byte*) form_vic_screen#0
(dword()) get_plane((byte) get_plane::idx)
(bool~) get_plane::$0
(bool~) get_plane::$1
(bool~) get_plane::$10
(bool~) get_plane::$11
(bool~) get_plane::$12
(bool~) get_plane::$13
(bool~) get_plane::$14
(dword~) get_plane::$15
(dword~) get_plane::$16
(dword~) get_plane::$17
(dword~) get_plane::$18
(dword~) get_plane::$19
(bool~) get_plane::$2
(dword~) get_plane::$20
(dword~) get_plane::$21
(dword~) get_plane::$22
(dword~) get_plane::$23
(dword~) get_plane::$24
(dword~) get_plane::$25
(dword~) get_plane::$26
(dword~) get_plane::$27
(dword~) get_plane::$28
(dword~) get_plane::$29
(bool~) get_plane::$3
(bool~) get_plane::$4
(bool~) get_plane::$5
(bool~) get_plane::$6
(bool~) get_plane::$7
(bool~) get_plane::$8
(bool~) get_plane::$9
(label) get_plane::@1
(label) get_plane::@10
(label) get_plane::@11
(label) get_plane::@12
(label) get_plane::@13
(label) get_plane::@14
(label) get_plane::@2
(label) get_plane::@27
(label) get_plane::@28
(label) get_plane::@29
(label) get_plane::@3
(label) get_plane::@30
(label) get_plane::@31
(label) get_plane::@32
(label) get_plane::@33
(label) get_plane::@34
(label) get_plane::@35
(label) get_plane::@36
(label) get_plane::@37
(label) get_plane::@38
(label) get_plane::@39
(label) get_plane::@4
(label) get_plane::@40
(label) get_plane::@41
(label) get_plane::@5
(label) get_plane::@6
(label) get_plane::@7
(label) get_plane::@8
(label) get_plane::@9
(label) get_plane::@return
(byte) get_plane::idx
(byte) get_plane::idx#0
(byte) get_plane::idx#1
(byte) get_plane::idx#10
(byte) get_plane::idx#11
(byte) get_plane::idx#12
(byte) get_plane::idx#13
(byte) get_plane::idx#14
(byte) get_plane::idx#15
(byte) get_plane::idx#2
(byte) get_plane::idx#3
(byte) get_plane::idx#4
(byte) get_plane::idx#5
(byte) get_plane::idx#6
(byte) get_plane::idx#7
(byte) get_plane::idx#8
(byte) get_plane::idx#9
(dword) get_plane::return
(dword) get_plane::return#0
(dword) get_plane::return#1
(dword) get_plane::return#10
(dword) get_plane::return#11
(dword) get_plane::return#12
(dword) get_plane::return#13
(dword) get_plane::return#14
(dword) get_plane::return#15
(dword) get_plane::return#16
(dword) get_plane::return#17
(dword) get_plane::return#18
(dword) get_plane::return#19
(dword) get_plane::return#2
(dword) get_plane::return#20
(dword) get_plane::return#3
(dword) get_plane::return#4
(dword) get_plane::return#5
(dword) get_plane::return#6
(dword) get_plane::return#7
(dword) get_plane::return#8
(dword) get_plane::return#9
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(bool~) get_vic_charset::$0
(bool~) get_vic_charset::$1
(bool~) get_vic_charset::$2
(label) get_vic_charset::@1
(label) get_vic_charset::@2
(label) get_vic_charset::@3
(label) get_vic_charset::@4
(label) get_vic_charset::@5
(label) get_vic_charset::@return
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0
(byte) get_vic_charset::idx#1
(byte) get_vic_charset::idx#2
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#0
(byte*) get_vic_charset::return#1
(byte*) get_vic_charset::return#2
(byte*) get_vic_charset::return#3
(byte*) get_vic_charset::return#4
(byte*) get_vic_charset::return#5
(byte*) get_vic_charset::return#6
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(bool~) get_vic_screen::$0
(bool~) get_vic_screen::$1
(bool~) get_vic_screen::$2
(bool~) get_vic_screen::$3
(bool~) get_vic_screen::$4
(bool~) get_vic_screen::$5
(label) get_vic_screen::@1
(label) get_vic_screen::@10
(label) get_vic_screen::@11
(label) get_vic_screen::@12
(label) get_vic_screen::@13
(label) get_vic_screen::@14
(label) get_vic_screen::@2
(label) get_vic_screen::@3
(label) get_vic_screen::@4
(label) get_vic_screen::@5
(label) get_vic_screen::@9
(label) get_vic_screen::@return
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0
(byte) get_vic_screen::idx#1
(byte) get_vic_screen::idx#2
(byte) get_vic_screen::idx#3
(byte) get_vic_screen::idx#4
(byte) get_vic_screen::idx#5
(byte) get_vic_screen::idx#6
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#0
(byte*) get_vic_screen::return#1
(byte*) get_vic_screen::return#10
(byte*) get_vic_screen::return#11
(byte*) get_vic_screen::return#2
(byte*) get_vic_screen::return#3
(byte*) get_vic_screen::return#4
(byte*) get_vic_screen::return#5
(byte*) get_vic_screen::return#6
(byte*) get_vic_screen::return#7
(byte*) get_vic_screen::return#8
(byte*) get_vic_screen::return#9
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@10
(label) gfx_init::@11
(label) gfx_init::@12
(label) gfx_init::@13
(label) gfx_init::@14
(label) gfx_init::@15
(label) gfx_init::@2
(label) gfx_init::@3
(label) gfx_init::@4
(label) gfx_init::@5
(label) gfx_init::@6
(label) gfx_init::@7
(label) gfx_init::@8
(label) gfx_init::@9
(label) gfx_init::@return
(void()) gfx_init_charset()
(bool~) gfx_init_charset::$0
(bool~) gfx_init_charset::$1
(label) gfx_init_charset::@1
(label) gfx_init_charset::@2
(label) gfx_init_charset::@3
(label) gfx_init_charset::@4
(label) gfx_init_charset::@return
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#0
(byte) gfx_init_charset::c#1
(byte) gfx_init_charset::c#2
(byte) gfx_init_charset::c#3
(byte) gfx_init_charset::c#4
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#0
(byte*) gfx_init_charset::chargen#1
(byte*) gfx_init_charset::chargen#2
(byte*) gfx_init_charset::chargen#3
(byte*) gfx_init_charset::chargen#4
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#0
(byte*) gfx_init_charset::charset#1
(byte*) gfx_init_charset::charset#2
(byte*) gfx_init_charset::charset#3
(byte*) gfx_init_charset::charset#4
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#0
(byte) gfx_init_charset::l#1
(byte) gfx_init_charset::l#2
(void()) gfx_init_plane_8bppchunky()
(dword~) gfx_init_plane_8bppchunky::$0
(byte~) gfx_init_plane_8bppchunky::$1
(byte~) gfx_init_plane_8bppchunky::$10
(bool~) gfx_init_plane_8bppchunky::$11
(bool~) gfx_init_plane_8bppchunky::$12
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_8bppchunky::$3
(byte~) gfx_init_plane_8bppchunky::$4
(bool~) gfx_init_plane_8bppchunky::$6
(bool~) gfx_init_plane_8bppchunky::$7
(word~) gfx_init_plane_8bppchunky::$9
(label) gfx_init_plane_8bppchunky::@1
(label) gfx_init_plane_8bppchunky::@2
(label) gfx_init_plane_8bppchunky::@3
(label) gfx_init_plane_8bppchunky::@4
(label) gfx_init_plane_8bppchunky::@5
(label) gfx_init_plane_8bppchunky::@6
(label) gfx_init_plane_8bppchunky::@7
(label) gfx_init_plane_8bppchunky::@8
(label) gfx_init_plane_8bppchunky::@9
(label) gfx_init_plane_8bppchunky::@return
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#0
(byte*) gfx_init_plane_8bppchunky::gfxb#1
(byte*) gfx_init_plane_8bppchunky::gfxb#2
(byte*) gfx_init_plane_8bppchunky::gfxb#3
(byte*) gfx_init_plane_8bppchunky::gfxb#4
(byte*) gfx_init_plane_8bppchunky::gfxb#5
(byte*) gfx_init_plane_8bppchunky::gfxb#6
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#0
(word) gfx_init_plane_8bppchunky::x#1
(word) gfx_init_plane_8bppchunky::x#2
(word) gfx_init_plane_8bppchunky::x#3
(word) gfx_init_plane_8bppchunky::x#4
(word) gfx_init_plane_8bppchunky::x#5
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#0
(byte) gfx_init_plane_8bppchunky::y#1
(byte) gfx_init_plane_8bppchunky::y#2
(byte) gfx_init_plane_8bppchunky::y#3
(byte) gfx_init_plane_8bppchunky::y#4
(byte) gfx_init_plane_8bppchunky::y#5
(byte) gfx_init_plane_8bppchunky::y#6
(byte) gfx_init_plane_8bppchunky::y#7
(void()) gfx_init_plane_blank()
(label) gfx_init_plane_blank::@1
(label) gfx_init_plane_blank::@return
(void()) gfx_init_plane_charset8()
(dword~) gfx_init_plane_charset8::$0
(byte~) gfx_init_plane_charset8::$1
(bool~) gfx_init_plane_charset8::$10
(byte~) gfx_init_plane_charset8::$11
(bool~) gfx_init_plane_charset8::$12
(bool~) gfx_init_plane_charset8::$13
(bool~) gfx_init_plane_charset8::$14
(word/dword~) gfx_init_plane_charset8::$3
(word/dword/signed dword~) gfx_init_plane_charset8::$4
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_charset8::$5
(byte~) gfx_init_plane_charset8::$6
(byte~) gfx_init_plane_charset8::$8
(bool~) gfx_init_plane_charset8::$9
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@10
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0
(byte) gfx_init_plane_charset8::bits#1
(byte) gfx_init_plane_charset8::bits#2
(byte) gfx_init_plane_charset8::bits#3
(byte) gfx_init_plane_charset8::bits#4
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#0
(byte) gfx_init_plane_charset8::c#1
(byte) gfx_init_plane_charset8::c#2
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#0
(byte) gfx_init_plane_charset8::ch#1
(byte) gfx_init_plane_charset8::ch#2
(byte) gfx_init_plane_charset8::ch#3
(byte) gfx_init_plane_charset8::ch#4
(byte) gfx_init_plane_charset8::ch#5
(byte) gfx_init_plane_charset8::ch#6
(byte) gfx_init_plane_charset8::ch#7
(byte) gfx_init_plane_charset8::ch#8
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#0
(byte*) gfx_init_plane_charset8::chargen#1
(byte*) gfx_init_plane_charset8::chargen#2
(byte*) gfx_init_plane_charset8::chargen#3
(byte*) gfx_init_plane_charset8::chargen#4
(byte*) gfx_init_plane_charset8::chargen#5
(byte*) gfx_init_plane_charset8::chargen#6
(byte*) gfx_init_plane_charset8::chargen#7
(byte*) gfx_init_plane_charset8::chargen#8
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#0
(byte) gfx_init_plane_charset8::col#1
(byte) gfx_init_plane_charset8::col#2
(byte) gfx_init_plane_charset8::col#3
(byte) gfx_init_plane_charset8::col#4
(byte) gfx_init_plane_charset8::col#5
(byte) gfx_init_plane_charset8::col#6
(byte) gfx_init_plane_charset8::col#7
(byte) gfx_init_plane_charset8::col#8
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#0
(byte) gfx_init_plane_charset8::cp#1
(byte) gfx_init_plane_charset8::cp#2
(byte) gfx_init_plane_charset8::cp#3
(byte) gfx_init_plane_charset8::cp#4
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#0
(byte) gfx_init_plane_charset8::cr#1
(byte) gfx_init_plane_charset8::cr#2
(byte) gfx_init_plane_charset8::cr#3
(byte) gfx_init_plane_charset8::cr#4
(byte) gfx_init_plane_charset8::cr#5
(byte) gfx_init_plane_charset8::cr#6
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#0
(byte*) gfx_init_plane_charset8::gfxa#1
(byte*) gfx_init_plane_charset8::gfxa#2
(byte*) gfx_init_plane_charset8::gfxa#3
(byte*) gfx_init_plane_charset8::gfxa#4
(byte*) gfx_init_plane_charset8::gfxa#5
(byte*) gfx_init_plane_charset8::gfxa#6
(byte*) gfx_init_plane_charset8::gfxa#7
(byte*) gfx_init_plane_charset8::gfxa#8
(byte) gfx_init_plane_charset8::gfxbCpuBank
(byte) gfx_init_plane_charset8::gfxbCpuBank#0
(byte) gfx_init_plane_charset8::gfxbCpuBank#1
(byte) gfx_init_plane_charset8::gfxbCpuBank#2
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0
(word~) gfx_init_plane_fill::$1
(bool~) gfx_init_plane_fill::$10
(bool~) gfx_init_plane_fill::$11
(byte~) gfx_init_plane_fill::$2
(word~) gfx_init_plane_fill::$4
(word~) gfx_init_plane_fill::$5
(word/signed dword/dword~) gfx_init_plane_fill::$6
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_fill::$7
(byte~) gfx_init_plane_fill::$8
(label) gfx_init_plane_fill::@1
(label) gfx_init_plane_fill::@2
(label) gfx_init_plane_fill::@3
(label) gfx_init_plane_fill::@4
(label) gfx_init_plane_fill::@5
(label) gfx_init_plane_fill::@6
(label) gfx_init_plane_fill::@return
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#0
(byte) gfx_init_plane_fill::bx#1
(byte) gfx_init_plane_fill::bx#2
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#0
(byte) gfx_init_plane_fill::by#1
(byte) gfx_init_plane_fill::by#2
(byte) gfx_init_plane_fill::by#3
(byte) gfx_init_plane_fill::by#4
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#0
(byte) gfx_init_plane_fill::fill#1
(byte) gfx_init_plane_fill::fill#2
(byte) gfx_init_plane_fill::fill#3
(byte) gfx_init_plane_fill::fill#4
(byte) gfx_init_plane_fill::fill#5
(byte) gfx_init_plane_fill::fill#6
(byte) gfx_init_plane_fill::fill#7
(byte*) gfx_init_plane_fill::gfxb
(byte*) gfx_init_plane_fill::gfxb#0
(byte*) gfx_init_plane_fill::gfxb#1
(byte*) gfx_init_plane_fill::gfxb#2
(byte*) gfx_init_plane_fill::gfxb#3
(byte*) gfx_init_plane_fill::gfxb#4
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0
(byte) gfx_init_plane_fill::gfxbCpuBank#1
(byte) gfx_init_plane_fill::gfxbCpuBank#2
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#0
(dword) gfx_init_plane_fill::plane_addr#1
(dword) gfx_init_plane_fill::plane_addr#2
(dword) gfx_init_plane_fill::plane_addr#3
(dword) gfx_init_plane_fill::plane_addr#4
(void()) gfx_init_plane_full()
(label) gfx_init_plane_full::@1
(label) gfx_init_plane_full::@return
(void()) gfx_init_plane_horisontal()
(dword~) gfx_init_plane_horisontal::$0
(byte~) gfx_init_plane_horisontal::$1
(bool~) gfx_init_plane_horisontal::$10
(bool~) gfx_init_plane_horisontal::$11
(word/dword~) gfx_init_plane_horisontal::$3
(word/dword/signed dword~) gfx_init_plane_horisontal::$4
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_horisontal::$5
(byte~) gfx_init_plane_horisontal::$6
(byte~) gfx_init_plane_horisontal::$8
(bool~) gfx_init_plane_horisontal::$9
(label) gfx_init_plane_horisontal::@1
(label) gfx_init_plane_horisontal::@10
(label) gfx_init_plane_horisontal::@2
(label) gfx_init_plane_horisontal::@3
(label) gfx_init_plane_horisontal::@4
(label) gfx_init_plane_horisontal::@5
(label) gfx_init_plane_horisontal::@7
(label) gfx_init_plane_horisontal::@8
(label) gfx_init_plane_horisontal::@9
(label) gfx_init_plane_horisontal::@return
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#0
(byte) gfx_init_plane_horisontal::ax#1
(byte) gfx_init_plane_horisontal::ax#2
(byte) gfx_init_plane_horisontal::ax#3
(byte) gfx_init_plane_horisontal::ax#4
(byte) gfx_init_plane_horisontal::ax#5
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#0
(byte) gfx_init_plane_horisontal::ay#1
(byte) gfx_init_plane_horisontal::ay#2
(byte) gfx_init_plane_horisontal::ay#3
(byte) gfx_init_plane_horisontal::ay#4
(byte) gfx_init_plane_horisontal::ay#5
(byte) gfx_init_plane_horisontal::ay#6
(byte) gfx_init_plane_horisontal::ay#7
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#0
(byte*) gfx_init_plane_horisontal::gfxa#1
(byte*) gfx_init_plane_horisontal::gfxa#2
(byte*) gfx_init_plane_horisontal::gfxa#3
(byte*) gfx_init_plane_horisontal::gfxa#4
(byte*) gfx_init_plane_horisontal::gfxa#5
(byte*) gfx_init_plane_horisontal::gfxa#6
(byte*) gfx_init_plane_horisontal::gfxa#7
(byte*) gfx_init_plane_horisontal::gfxa#8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(byte) gfx_init_plane_horisontal::gfxbCpuBank#0
(byte) gfx_init_plane_horisontal::gfxbCpuBank#1
(byte) gfx_init_plane_horisontal::gfxbCpuBank#2
(void()) gfx_init_plane_horisontal2()
(dword~) gfx_init_plane_horisontal2::$0
(byte~) gfx_init_plane_horisontal2::$1
(bool~) gfx_init_plane_horisontal2::$10
(bool~) gfx_init_plane_horisontal2::$11
(word/dword~) gfx_init_plane_horisontal2::$3
(word/dword/signed dword~) gfx_init_plane_horisontal2::$4
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_horisontal2::$5
(byte~) gfx_init_plane_horisontal2::$6
(byte~) gfx_init_plane_horisontal2::$8
(byte~) gfx_init_plane_horisontal2::$9
(label) gfx_init_plane_horisontal2::@1
(label) gfx_init_plane_horisontal2::@2
(label) gfx_init_plane_horisontal2::@3
(label) gfx_init_plane_horisontal2::@4
(label) gfx_init_plane_horisontal2::@5
(label) gfx_init_plane_horisontal2::@6
(label) gfx_init_plane_horisontal2::@return
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#0
(byte) gfx_init_plane_horisontal2::ax#1
(byte) gfx_init_plane_horisontal2::ax#2
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#0
(byte) gfx_init_plane_horisontal2::ay#1
(byte) gfx_init_plane_horisontal2::ay#2
(byte) gfx_init_plane_horisontal2::ay#3
(byte) gfx_init_plane_horisontal2::ay#4
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#0
(byte*) gfx_init_plane_horisontal2::gfxa#1
(byte*) gfx_init_plane_horisontal2::gfxa#2
(byte*) gfx_init_plane_horisontal2::gfxa#3
(byte*) gfx_init_plane_horisontal2::gfxa#4
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#1
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#2
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0
(byte[]) gfx_init_plane_horisontal2::row_bitmask
(byte[]) gfx_init_plane_horisontal2::row_bitmask#0
(void()) gfx_init_plane_vertical()
(dword~) gfx_init_plane_vertical::$0
(byte~) gfx_init_plane_vertical::$1
(word/dword~) gfx_init_plane_vertical::$3
(word/dword/signed dword~) gfx_init_plane_vertical::$4
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_vertical::$5
(byte~) gfx_init_plane_vertical::$6
(bool~) gfx_init_plane_vertical::$8
(bool~) gfx_init_plane_vertical::$9
(label) gfx_init_plane_vertical::@1
(label) gfx_init_plane_vertical::@2
(label) gfx_init_plane_vertical::@3
(label) gfx_init_plane_vertical::@4
(label) gfx_init_plane_vertical::@5
(label) gfx_init_plane_vertical::@6
(label) gfx_init_plane_vertical::@return
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#0
(byte) gfx_init_plane_vertical::bx#1
(byte) gfx_init_plane_vertical::bx#2
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#0
(byte) gfx_init_plane_vertical::by#1
(byte) gfx_init_plane_vertical::by#2
(byte) gfx_init_plane_vertical::by#3
(byte) gfx_init_plane_vertical::by#4
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#0
(byte*) gfx_init_plane_vertical::gfxb#1
(byte*) gfx_init_plane_vertical::gfxb#2
(byte*) gfx_init_plane_vertical::gfxb#3
(byte*) gfx_init_plane_vertical::gfxb#4
(byte) gfx_init_plane_vertical::gfxbCpuBank
(byte) gfx_init_plane_vertical::gfxbCpuBank#0
(byte) gfx_init_plane_vertical::gfxbCpuBank#1
(byte) gfx_init_plane_vertical::gfxbCpuBank#2
(void()) gfx_init_plane_vertical2()
(label) gfx_init_plane_vertical2::@1
(label) gfx_init_plane_vertical2::@return
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0
(byte~) gfx_init_screen0::$1
(byte~) gfx_init_screen0::$2
(byte~) gfx_init_screen0::$3
(bool~) gfx_init_screen0::$4
(bool~) gfx_init_screen0::$5
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#0
(byte*) gfx_init_screen0::ch#1
(byte*) gfx_init_screen0::ch#2
(byte*) gfx_init_screen0::ch#3
(byte*) gfx_init_screen0::ch#4
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#0
(byte) gfx_init_screen0::cx#1
(byte) gfx_init_screen0::cx#2
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#0
(byte) gfx_init_screen0::cy#1
(byte) gfx_init_screen0::cy#2
(byte) gfx_init_screen0::cy#3
(byte) gfx_init_screen0::cy#4
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0
(byte~) gfx_init_screen1::$1
(bool~) gfx_init_screen1::$2
(bool~) gfx_init_screen1::$3
(label) gfx_init_screen1::@1
(label) gfx_init_screen1::@2
(label) gfx_init_screen1::@3
(label) gfx_init_screen1::@return
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#0
(byte*) gfx_init_screen1::ch#1
(byte*) gfx_init_screen1::ch#2
(byte*) gfx_init_screen1::ch#3
(byte*) gfx_init_screen1::ch#4
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#0
(byte) gfx_init_screen1::cx#1
(byte) gfx_init_screen1::cx#2
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#0
(byte) gfx_init_screen1::cy#1
(byte) gfx_init_screen1::cy#2
(byte) gfx_init_screen1::cy#3
(byte) gfx_init_screen1::cy#4
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0
(byte~) gfx_init_screen2::$1
(byte/signed word/word/dword/signed dword~) gfx_init_screen2::$2
(byte~) gfx_init_screen2::$3
(byte~) gfx_init_screen2::$4
(bool~) gfx_init_screen2::$5
(bool~) gfx_init_screen2::$6
(label) gfx_init_screen2::@1
(label) gfx_init_screen2::@2
(label) gfx_init_screen2::@3
(label) gfx_init_screen2::@return
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#0
(byte*) gfx_init_screen2::ch#1
(byte*) gfx_init_screen2::ch#2
(byte*) gfx_init_screen2::ch#3
(byte*) gfx_init_screen2::ch#4
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#0
(byte) gfx_init_screen2::cx#1
(byte) gfx_init_screen2::cx#2
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#0
(byte) gfx_init_screen2::cy#1
(byte) gfx_init_screen2::cy#2
(byte) gfx_init_screen2::cy#3
(byte) gfx_init_screen2::cy#4
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0
(byte~) gfx_init_screen3::$1
(byte~) gfx_init_screen3::$2
(byte~) gfx_init_screen3::$3
(bool~) gfx_init_screen3::$4
(bool~) gfx_init_screen3::$5
(label) gfx_init_screen3::@1
(label) gfx_init_screen3::@2
(label) gfx_init_screen3::@3
(label) gfx_init_screen3::@return
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#0
(byte*) gfx_init_screen3::ch#1
(byte*) gfx_init_screen3::ch#2
(byte*) gfx_init_screen3::ch#3
(byte*) gfx_init_screen3::ch#4
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#0
(byte) gfx_init_screen3::cx#1
(byte) gfx_init_screen3::cx#2
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#0
(byte) gfx_init_screen3::cy#1
(byte) gfx_init_screen3::cy#2
(byte) gfx_init_screen3::cy#3
(byte) gfx_init_screen3::cy#4
(void()) gfx_init_screen4()
(bool~) gfx_init_screen4::$0
(bool~) gfx_init_screen4::$1
(label) gfx_init_screen4::@1
(label) gfx_init_screen4::@2
(label) gfx_init_screen4::@3
(label) gfx_init_screen4::@return
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#0
(byte*) gfx_init_screen4::ch#1
(byte*) gfx_init_screen4::ch#2
(byte*) gfx_init_screen4::ch#3
(byte*) gfx_init_screen4::ch#4
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#0
(byte) gfx_init_screen4::cx#1
(byte) gfx_init_screen4::cx#2
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#0
(byte) gfx_init_screen4::cy#1
(byte) gfx_init_screen4::cy#2
(byte) gfx_init_screen4::cy#3
(byte) gfx_init_screen4::cy#4
(void()) gfx_init_vic_bitmap()
(byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$2
(byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$3
(bool~) gfx_init_vic_bitmap::$5
(label) gfx_init_vic_bitmap::@1
(label) gfx_init_vic_bitmap::@3
(label) gfx_init_vic_bitmap::@4
(label) gfx_init_vic_bitmap::@5
(label) gfx_init_vic_bitmap::@return
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#0
(byte) gfx_init_vic_bitmap::l#1
(byte) gfx_init_vic_bitmap::l#2
(byte) gfx_init_vic_bitmap::l#3
(byte) gfx_init_vic_bitmap::lines_cnt
(byte) gfx_init_vic_bitmap::lines_cnt#0
(byte[]) gfx_init_vic_bitmap::lines_x
(byte[]) gfx_init_vic_bitmap::lines_x#0
(byte[]) gfx_init_vic_bitmap::lines_y
(byte[]) gfx_init_vic_bitmap::lines_y#0
(void()) gfx_mode()
(bool~) gfx_mode::$0
(bool~) gfx_mode::$1
(bool~) gfx_mode::$10
(bool~) gfx_mode::$11
(byte~) gfx_mode::$12
(byte/word/dword~) gfx_mode::$13
(bool~) gfx_mode::$14
(bool~) gfx_mode::$15
(bool~) gfx_mode::$16
(bool~) gfx_mode::$17
(bool~) gfx_mode::$18
(bool~) gfx_mode::$19
(bool~) gfx_mode::$2
(byte~) gfx_mode::$20
(byte~) gfx_mode::$21
(dword~) gfx_mode::$22
(dword~) gfx_mode::$23
(word~) gfx_mode::$24
(byte~) gfx_mode::$25
(word~) gfx_mode::$26
(byte~) gfx_mode::$27
(word~) gfx_mode::$28
(byte~) gfx_mode::$29
(bool~) gfx_mode::$3
(byte~) gfx_mode::$30
(byte~) gfx_mode::$31
(byte~) gfx_mode::$32
(byte~) gfx_mode::$33
(byte~) gfx_mode::$34
(byte~) gfx_mode::$35
(dword~) gfx_mode::$36
(dword~) gfx_mode::$37
(word~) gfx_mode::$38
(byte~) gfx_mode::$39
(bool~) gfx_mode::$4
(word~) gfx_mode::$40
(byte~) gfx_mode::$41
(word~) gfx_mode::$42
(byte~) gfx_mode::$43
(byte~) gfx_mode::$44
(byte~) gfx_mode::$45
(byte~) gfx_mode::$46
(byte~) gfx_mode::$47
(word~) gfx_mode::$48
(word/signed dword/dword~) gfx_mode::$49
(bool~) gfx_mode::$5
(byte~) gfx_mode::$50
(byte/word/dword~) gfx_mode::$51
(byte*~) gfx_mode::$52
(word~) gfx_mode::$53
(word~) gfx_mode::$54
(word~) gfx_mode::$55
(byte~) gfx_mode::$56
(byte*~) gfx_mode::$57
(word~) gfx_mode::$58
(word~) gfx_mode::$59
(bool~) gfx_mode::$6
(byte~) gfx_mode::$60
(byte~) gfx_mode::$61
(byte~) gfx_mode::$62
(byte*~) gfx_mode::$63
(byte~) gfx_mode::$64
(byte~) gfx_mode::$65
(byte~) gfx_mode::$66
(byte~) gfx_mode::$67
(byte~) gfx_mode::$68
(byte~) gfx_mode::$69
(bool~) gfx_mode::$7
(byte~) gfx_mode::$70
(byte~) gfx_mode::$71
(bool~) gfx_mode::$72
(byte~) gfx_mode::$73
(byte~) gfx_mode::$74
(byte~) gfx_mode::$75
(byte~) gfx_mode::$76
(byte~) gfx_mode::$77
(byte~) gfx_mode::$78
(byte~) gfx_mode::$79
(bool~) gfx_mode::$8
(byte~) gfx_mode::$80
(byte~) gfx_mode::$81
(bool~) gfx_mode::$82
(bool~) gfx_mode::$83
(bool~) gfx_mode::$84
(bool~) gfx_mode::$85
(bool~) gfx_mode::$86
(byte~) gfx_mode::$88
(bool~) gfx_mode::$89
(bool~) gfx_mode::$9
(bool~) gfx_mode::$90
(label) gfx_mode::@1
(label) gfx_mode::@10
(label) gfx_mode::@12
(label) gfx_mode::@13
(label) gfx_mode::@14
(label) gfx_mode::@15
(label) gfx_mode::@16
(label) gfx_mode::@17
(label) gfx_mode::@18
(label) gfx_mode::@19
(label) gfx_mode::@2
(label) gfx_mode::@20
(label) gfx_mode::@21
(label) gfx_mode::@22
(label) gfx_mode::@23
(label) gfx_mode::@24
(label) gfx_mode::@25
(label) gfx_mode::@26
(label) gfx_mode::@29
(label) gfx_mode::@3
(label) gfx_mode::@31
(label) gfx_mode::@32
(label) gfx_mode::@34
(label) gfx_mode::@35
(label) gfx_mode::@36
(label) gfx_mode::@4
(label) gfx_mode::@42
(label) gfx_mode::@46
(label) gfx_mode::@47
(label) gfx_mode::@48
(label) gfx_mode::@49
(label) gfx_mode::@5
(label) gfx_mode::@50
(label) gfx_mode::@51
(label) gfx_mode::@52
(label) gfx_mode::@6
(label) gfx_mode::@7
(label) gfx_mode::@8
(label) gfx_mode::@9
(label) gfx_mode::@return
(byte*) gfx_mode::col
(byte*) gfx_mode::col#0
(byte*) gfx_mode::col#1
(byte*) gfx_mode::col#2
(byte*) gfx_mode::col#3
(byte*) gfx_mode::col#4
(byte) gfx_mode::cx
(byte) gfx_mode::cx#0
(byte) gfx_mode::cx#1
(byte) gfx_mode::cx#2
(byte) gfx_mode::cy
(byte) gfx_mode::cy#0
(byte) gfx_mode::cy#1
(byte) gfx_mode::cy#2
(byte) gfx_mode::cy#3
(byte) gfx_mode::cy#4
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#0
(byte) gfx_mode::dtv_control#1
(byte) gfx_mode::dtv_control#10
(byte) gfx_mode::dtv_control#11
(byte) gfx_mode::dtv_control#12
(byte) gfx_mode::dtv_control#13
(byte) gfx_mode::dtv_control#14
(byte) gfx_mode::dtv_control#15
(byte) gfx_mode::dtv_control#16
(byte) gfx_mode::dtv_control#17
(byte) gfx_mode::dtv_control#18
(byte) gfx_mode::dtv_control#2
(byte) gfx_mode::dtv_control#3
(byte) gfx_mode::dtv_control#4
(byte) gfx_mode::dtv_control#5
(byte) gfx_mode::dtv_control#6
(byte) gfx_mode::dtv_control#7
(byte) gfx_mode::dtv_control#8
(byte) gfx_mode::dtv_control#9
(byte) gfx_mode::i
(byte) gfx_mode::i#0
(byte) gfx_mode::i#1
(byte) gfx_mode::i#2
(byte) gfx_mode::j
(byte) gfx_mode::j#0
(byte) gfx_mode::j#1
(byte) gfx_mode::j#2
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0
(byte) gfx_mode::plane_a_offs#1
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0
(byte) gfx_mode::plane_b_offs#1
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0
(byte*) gfx_mode::vic_colors#1
(byte*) gfx_mode::vic_colors#2
(byte*) gfx_mode::vic_colors#3
(byte*) gfx_mode::vic_colors#4
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#0
(byte) gfx_mode::vic_control#1
(byte) gfx_mode::vic_control#2
(byte) gfx_mode::vic_control#3
(byte) gfx_mode::vic_control#4
(byte) gfx_mode::vic_control#5
(byte) gfx_mode::vic_control#6
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#0
(byte) gfx_mode::vic_control2#1
(byte) gfx_mode::vic_control2#2
(byte) gfx_mode::vic_control2#3
(byte[]) keyboard_char_keycodes
(byte[]) keyboard_char_keycodes#0
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte) keyboard_event_get::return#6
(byte) keyboard_event_get::return#7
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(byte~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(bool~) keyboard_event_scan::$11
(byte~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(byte/signed word/word/dword/signed dword~) keyboard_event_scan::$14
(byte~) keyboard_event_scan::$15
(byte~) keyboard_event_scan::$16
(bool~) keyboard_event_scan::$17
(bool~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(bool~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(bool~) keyboard_event_scan::$22
(byte/word/dword~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(bool~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(byte~) keyboard_event_scan::$27
(byte~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(bool~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(byte~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::col#8
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#15
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#14
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(byte) keyboard_event_scan::row_scan#9
(byte[8]) keyboard_events
(byte[8]) keyboard_events#0
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#100
(byte) keyboard_events_size#101
(byte) keyboard_events_size#102
(byte) keyboard_events_size#103
(byte) keyboard_events_size#104
(byte) keyboard_events_size#105
(byte) keyboard_events_size#106
(byte) keyboard_events_size#107
(byte) keyboard_events_size#108
(byte) keyboard_events_size#109
(byte) keyboard_events_size#11
(byte) keyboard_events_size#110
(byte) keyboard_events_size#111
(byte) keyboard_events_size#112
(byte) keyboard_events_size#113
(byte) keyboard_events_size#114
(byte) keyboard_events_size#115
(byte) keyboard_events_size#116
(byte) keyboard_events_size#117
(byte) keyboard_events_size#118
(byte) keyboard_events_size#119
(byte) keyboard_events_size#12
(byte) keyboard_events_size#120
(byte) keyboard_events_size#121
(byte) keyboard_events_size#122
(byte) keyboard_events_size#123
(byte) keyboard_events_size#124
(byte) keyboard_events_size#125
(byte) keyboard_events_size#126
(byte) keyboard_events_size#127
(byte) keyboard_events_size#128
(byte) keyboard_events_size#129
(byte) keyboard_events_size#13
(byte) keyboard_events_size#130
(byte) keyboard_events_size#131
(byte) keyboard_events_size#132
(byte) keyboard_events_size#133
(byte) keyboard_events_size#134
(byte) keyboard_events_size#135
(byte) keyboard_events_size#136
(byte) keyboard_events_size#137
(byte) keyboard_events_size#138
(byte) keyboard_events_size#139
(byte) keyboard_events_size#14
(byte) keyboard_events_size#140
(byte) keyboard_events_size#141
(byte) keyboard_events_size#142
(byte) keyboard_events_size#143
(byte) keyboard_events_size#144
(byte) keyboard_events_size#145
(byte) keyboard_events_size#146
(byte) keyboard_events_size#147
(byte) keyboard_events_size#148
(byte) keyboard_events_size#149
(byte) keyboard_events_size#15
(byte) keyboard_events_size#150
(byte) keyboard_events_size#151
(byte) keyboard_events_size#152
(byte) keyboard_events_size#153
(byte) keyboard_events_size#154
(byte) keyboard_events_size#155
(byte) keyboard_events_size#156
(byte) keyboard_events_size#157
(byte) keyboard_events_size#158
(byte) keyboard_events_size#159
(byte) keyboard_events_size#16
(byte) keyboard_events_size#160
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#72
(byte) keyboard_events_size#73
(byte) keyboard_events_size#74
(byte) keyboard_events_size#75
(byte) keyboard_events_size#76
(byte) keyboard_events_size#77
(byte) keyboard_events_size#78
(byte) keyboard_events_size#79
(byte) keyboard_events_size#8
(byte) keyboard_events_size#80
(byte) keyboard_events_size#81
(byte) keyboard_events_size#82
(byte) keyboard_events_size#83
(byte) keyboard_events_size#84
(byte) keyboard_events_size#85
(byte) keyboard_events_size#86
(byte) keyboard_events_size#87
(byte) keyboard_events_size#88
(byte) keyboard_events_size#89
(byte) keyboard_events_size#9
(byte) keyboard_events_size#90
(byte) keyboard_events_size#91
(byte) keyboard_events_size#92
(byte) keyboard_events_size#93
(byte) keyboard_events_size#94
(byte) keyboard_events_size#95
(byte) keyboard_events_size#96
(byte) keyboard_events_size#97
(byte) keyboard_events_size#98
(byte) keyboard_events_size#99
(void()) keyboard_init()
(label) keyboard_init::@return
(byte[8]) keyboard_matrix_col_bitmask
(byte[8]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#100
(byte) keyboard_modifiers#101
(byte) keyboard_modifiers#102
(byte) keyboard_modifiers#103
(byte) keyboard_modifiers#104
(byte) keyboard_modifiers#105
(byte) keyboard_modifiers#106
(byte) keyboard_modifiers#107
(byte) keyboard_modifiers#108
(byte) keyboard_modifiers#109
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#110
(byte) keyboard_modifiers#111
(byte) keyboard_modifiers#112
(byte) keyboard_modifiers#113
(byte) keyboard_modifiers#114
(byte) keyboard_modifiers#115
(byte) keyboard_modifiers#116
(byte) keyboard_modifiers#117
(byte) keyboard_modifiers#118
(byte) keyboard_modifiers#119
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#120
(byte) keyboard_modifiers#121
(byte) keyboard_modifiers#122
(byte) keyboard_modifiers#123
(byte) keyboard_modifiers#124
(byte) keyboard_modifiers#125
(byte) keyboard_modifiers#126
(byte) keyboard_modifiers#127
(byte) keyboard_modifiers#128
(byte) keyboard_modifiers#129
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#130
(byte) keyboard_modifiers#131
(byte) keyboard_modifiers#132
(byte) keyboard_modifiers#133
(byte) keyboard_modifiers#134
(byte) keyboard_modifiers#135
(byte) keyboard_modifiers#136
(byte) keyboard_modifiers#137
(byte) keyboard_modifiers#138
(byte) keyboard_modifiers#139
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#140
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#53
(byte) keyboard_modifiers#54
(byte) keyboard_modifiers#55
(byte) keyboard_modifiers#56
(byte) keyboard_modifiers#57
(byte) keyboard_modifiers#58
(byte) keyboard_modifiers#59
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#60
(byte) keyboard_modifiers#61
(byte) keyboard_modifiers#62
(byte) keyboard_modifiers#63
(byte) keyboard_modifiers#64
(byte) keyboard_modifiers#65
(byte) keyboard_modifiers#66
(byte) keyboard_modifiers#67
(byte) keyboard_modifiers#68
(byte) keyboard_modifiers#69
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#70
(byte) keyboard_modifiers#71
(byte) keyboard_modifiers#72
(byte) keyboard_modifiers#73
(byte) keyboard_modifiers#74
(byte) keyboard_modifiers#75
(byte) keyboard_modifiers#76
(byte) keyboard_modifiers#77
(byte) keyboard_modifiers#78
(byte) keyboard_modifiers#79
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#80
(byte) keyboard_modifiers#81
(byte) keyboard_modifiers#82
(byte) keyboard_modifiers#83
(byte) keyboard_modifiers#84
(byte) keyboard_modifiers#85
(byte) keyboard_modifiers#86
(byte) keyboard_modifiers#87
(byte) keyboard_modifiers#88
(byte) keyboard_modifiers#89
(byte) keyboard_modifiers#9
(byte) keyboard_modifiers#90
(byte) keyboard_modifiers#91
(byte) keyboard_modifiers#92
(byte) keyboard_modifiers#93
(byte) keyboard_modifiers#94
(byte) keyboard_modifiers#95
(byte) keyboard_modifiers#96
(byte) keyboard_modifiers#97
(byte) keyboard_modifiers#98
(byte) keyboard_modifiers#99
(byte[8]) keyboard_scan_values
(byte[8]) keyboard_scan_values#0
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte[]) preset_8bpppixelcell
(byte[]) preset_8bpppixelcell#0
(byte[]) preset_chunky
(byte[]) preset_chunky#0
(byte[]) preset_ecmchar
(byte[]) preset_ecmchar#0
(byte[]) preset_hi_ecmchar
(byte[]) preset_hi_ecmchar#0
(byte[]) preset_hi_stdchar
(byte[]) preset_hi_stdchar#0
(byte[]) preset_mcbm
(byte[]) preset_mcbm#0
(byte[]) preset_sixsfred
(byte[]) preset_sixsfred#0
(byte[]) preset_sixsfred2
(byte[]) preset_sixsfred2#0
(byte[]) preset_stdbm
(byte[]) preset_stdbm#0
(byte[]) preset_stdchar
(byte[]) preset_stdchar#0
(byte[]) preset_twoplane
(byte[]) preset_twoplane#0
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#14
(byte*) print_screen#15
(byte*) print_screen#16
(byte*) print_screen#17
(byte*) print_screen#18
(byte*) print_screen#19
(byte*) print_screen#2
(byte*) print_screen#20
(byte*) print_screen#21
(byte*) print_screen#22
(byte*) print_screen#23
(byte*) print_screen#24
(byte*) print_screen#25
(byte*) print_screen#26
(byte*) print_screen#27
(byte*) print_screen#28
(byte*) print_screen#29
(byte*) print_screen#3
(byte*) print_screen#30
(byte*) print_screen#31
(byte*) print_screen#32
(byte*) print_screen#33
(byte*) print_screen#34
(byte*) print_screen#35
(byte*) print_screen#36
(byte*) print_screen#37
(byte*) print_screen#38
(byte*) print_screen#39
(byte*) print_screen#4
(byte*) print_screen#40
(byte*) print_screen#41
(byte*) print_screen#42
(byte*) print_screen#43
(byte*) print_screen#44
(byte*) print_screen#45
(byte*) print_screen#46
(byte*) print_screen#47
(byte*) print_screen#48
(byte*) print_screen#49
(byte*) print_screen#5
(byte*) print_screen#50
(byte*) print_screen#51
(byte*) print_screen#52
(byte*) print_screen#53
(byte*) print_screen#54
(byte*) print_screen#55
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#0
(byte*) print_set_screen::screen#1
(byte*) print_set_screen::screen#2
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(bool~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0
(byte*) print_str_at::at#1
(byte*) print_str_at::at#2
(byte*) print_str_at::at#3
(byte*) print_str_at::at#4
(byte*) print_str_at::str
(byte*) print_str_at::str#0
(byte*) print_str_at::str#1
(byte*) print_str_at::str#2
(byte*) print_str_at::str#3
(byte*) print_str_at::str#4
(void()) print_str_lines((byte*) print_str_lines::str)
(bool~) print_str_lines::$0
(bool~) print_str_lines::$1
(bool~) print_str_lines::$2
(bool~) print_str_lines::$3
(label) print_str_lines::@1
(label) print_str_lines::@11
(label) print_str_lines::@2
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@6
(label) print_str_lines::@7
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0
(byte) print_str_lines::ch#1
(byte) print_str_lines::ch#2
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0
(byte*) print_str_lines::str#1
(byte*) print_str_lines::str#10
(byte*) print_str_lines::str#2
(byte*) print_str_lines::str#3
(byte*) print_str_lines::str#4
(byte*) print_str_lines::str#5
(byte*) print_str_lines::str#6
(byte*) print_str_lines::str#7
(byte*) print_str_lines::str#8
(byte*) print_str_lines::str#9
(void()) render_preset_name((byte) render_preset_name::idx)
(bool~) render_preset_name::$0
(bool~) render_preset_name::$1
(bool~) render_preset_name::$10
(byte/signed byte/word/signed word/dword/signed dword~) render_preset_name::$11
(byte*~) render_preset_name::$12
(byte*~) render_preset_name::$13
(const string) render_preset_name::$15 = (string) "Standard Charset              @"
(const string) render_preset_name::$16 = (string) "Extended Color Charset        @"
(const string) render_preset_name::$17 = (string) "Standard Bitmap               @"
(const string) render_preset_name::$18 = (string) "Multicolor Bitmap             @"
(const string) render_preset_name::$19 = (string) "Hicolor Charset               @"
(bool~) render_preset_name::$2
(const string) render_preset_name::$20 = (string) "Hicolor Extended Color Charset@"
(const string) render_preset_name::$21 = (string) "Twoplane Bitmap               @"
(const string) render_preset_name::$22 = (string) "Chunky 8bpp                   @"
(const string) render_preset_name::$23 = (string) "Sixs Fred                     @"
(const string) render_preset_name::$24 = (string) "Sixs Fred 2                   @"
(const string) render_preset_name::$25 = (string) "8bpp Pixel Cell               @"
(const string) render_preset_name::$26 = (string) "Standard Charset              @"
(bool~) render_preset_name::$3
(bool~) render_preset_name::$4
(bool~) render_preset_name::$5
(bool~) render_preset_name::$6
(bool~) render_preset_name::$7
(bool~) render_preset_name::$8
(bool~) render_preset_name::$9
(label) render_preset_name::@1
(label) render_preset_name::@10
(label) render_preset_name::@11
(label) render_preset_name::@2
(label) render_preset_name::@22
(label) render_preset_name::@23
(label) render_preset_name::@24
(label) render_preset_name::@25
(label) render_preset_name::@26
(label) render_preset_name::@27
(label) render_preset_name::@28
(label) render_preset_name::@29
(label) render_preset_name::@3
(label) render_preset_name::@30
(label) render_preset_name::@31
(label) render_preset_name::@32
(label) render_preset_name::@33
(label) render_preset_name::@4
(label) render_preset_name::@45
(label) render_preset_name::@5
(label) render_preset_name::@6
(label) render_preset_name::@7
(label) render_preset_name::@8
(label) render_preset_name::@9
(label) render_preset_name::@return
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0
(byte) render_preset_name::idx#1
(byte) render_preset_name::idx#10
(byte) render_preset_name::idx#11
(byte) render_preset_name::idx#12
(byte) render_preset_name::idx#2
(byte) render_preset_name::idx#3
(byte) render_preset_name::idx#4
(byte) render_preset_name::idx#5
(byte) render_preset_name::idx#6
(byte) render_preset_name::idx#7
(byte) render_preset_name::idx#8
(byte) render_preset_name::idx#9
(byte*) render_preset_name::name
(byte*) render_preset_name::name#0
(byte*) render_preset_name::name#1
(byte*) render_preset_name::name#10
(byte*) render_preset_name::name#11
(byte*) render_preset_name::name#12
(byte*) render_preset_name::name#13
(byte*) render_preset_name::name#2
(byte*) render_preset_name::name#3
(byte*) render_preset_name::name#4
(byte*) render_preset_name::name#5
(byte*) render_preset_name::name#6
(byte*) render_preset_name::name#7
(byte*) render_preset_name::name#8
(byte*) render_preset_name::name#9

Culled Empty Block (label) bitmap_line::@29
Culled Empty Block (label) bitmap_line::@30
Culled Empty Block (label) bitmap_line::@31
Culled Empty Block (label) bitmap_line::@32
Culled Empty Block (label) bitmap_line::@33
Culled Empty Block (label) bitmap_line::@34
Culled Empty Block (label) bitmap_line::@35
Culled Empty Block (label) bitmap_line::@36
Culled Empty Block (label) get_plane::@14
Culled Empty Block (label) get_vic_screen::@5
Culled Empty Block (label) get_vic_charset::@2
Culled Empty Block (label) render_preset_name::@45
Culled Empty Block (label) gfx_init::@15
Culled Empty Block (label) gfx_init_plane_8bppchunky::@9
Culled Empty Block (label) gfx_init_plane_horisontal::@10
Culled Empty Block (label) gfx_init_plane_horisontal2::@6
Culled Empty Block (label) gfx_init_plane_vertical::@6
Culled Empty Block (label) gfx_init_plane_charset8::@10
Culled Empty Block (label) gfx_init_plane_vertical2::@1
Culled Empty Block (label) gfx_init_plane_blank::@1
Culled Empty Block (label) gfx_init_plane_full::@1
Culled Empty Block (label) gfx_init_plane_fill::@6
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not [191] (bool~) print_str_lines::$2 ← (byte) print_str_lines::ch#0 == (byte) '@' from [190] (bool~) print_str_lines::$1 ← (byte) print_str_lines::ch#0 != (byte) '@'
Inversing boolean not [370] (bool~) keyboard_event_scan::$18 ← (byte~) keyboard_event_scan::$16 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [369] (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [379] (bool~) keyboard_event_scan::$20 ← (byte) keyboard_events_size#18 == (byte/signed byte/word/signed word/dword/signed dword) 8 from [378] (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not [404] (bool~) keyboard_event_scan::$2 ← (byte~) keyboard_event_scan::$0 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [403] (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [413] (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$3 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [412] (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [425] (bool~) keyboard_event_scan::$8 ← (byte~) keyboard_event_scan::$6 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [424] (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [437] (bool~) keyboard_event_scan::$11 ← (byte~) keyboard_event_scan::$9 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [436] (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [489] (bool~) bitmap_init::$4 ← (byte) bitmap_init::bits#1 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [488] (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [508] (bool~) bitmap_init::$12 ← (byte~) bitmap_init::$10 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [507] (bool~) bitmap_init::$11 ← (byte~) bitmap_init::$10 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [647] (bool~) bitmap_line_xdyi::$4 ← (byte) bitmap_line_xdyi::xd#2 >= (byte) bitmap_line_xdyi::e#1 from [646] (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
Inversing boolean not [670] (bool~) bitmap_line_xdyd::$4 ← (byte) bitmap_line_xdyd::xd#2 >= (byte) bitmap_line_xdyd::e#1 from [669] (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
Inversing boolean not [693] (bool~) bitmap_line_ydxi::$4 ← (byte) bitmap_line_ydxi::yd#2 >= (byte) bitmap_line_ydxi::e#1 from [692] (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
Inversing boolean not [717] (bool~) bitmap_line_ydxd::$4 ← (byte) bitmap_line_ydxd::yd#2 >= (byte) bitmap_line_ydxd::e#1 from [716] (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
Inversing boolean not [845] (bool~) get_plane::$14 ← (byte) get_plane::idx#15 != (byte/signed byte/word/signed word/dword/signed dword) $d from [844] (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (byte/signed byte/word/signed word/dword/signed dword) $d
Inversing boolean not [872] (bool~) get_vic_screen::$5 ← (byte) get_vic_screen::idx#6 != (byte/signed byte/word/signed word/dword/signed dword) 4 from [871] (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (byte/signed byte/word/signed word/dword/signed dword) 4
Inversing boolean not [885] (bool~) get_vic_charset::$2 ← (byte) get_vic_charset::idx#2 != (byte/signed byte/word/signed word/dword/signed dword) 1 from [884] (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not [1128] (bool~) gfx_mode::$1 ← *((byte*) form_ctrl_line#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1127] (bool~) gfx_mode::$0 ← *((byte*) form_ctrl_line#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1132] (bool~) gfx_mode::$3 ← *((byte*) form_ctrl_borof#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1131] (bool~) gfx_mode::$2 ← *((byte*) form_ctrl_borof#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1139] (bool~) gfx_mode::$5 ← *((byte*) form_ctrl_hicol#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1138] (bool~) gfx_mode::$4 ← *((byte*) form_ctrl_hicol#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1146] (bool~) gfx_mode::$7 ← *((byte*) form_ctrl_overs#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1145] (bool~) gfx_mode::$6 ← *((byte*) form_ctrl_overs#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1153] (bool~) gfx_mode::$9 ← *((byte*) form_ctrl_colof#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1152] (bool~) gfx_mode::$8 ← *((byte*) form_ctrl_colof#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1160] (bool~) gfx_mode::$11 ← *((byte*) form_ctrl_chunk#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1159] (bool~) gfx_mode::$10 ← *((byte*) form_ctrl_chunk#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1171] (bool~) gfx_mode::$15 ← *((byte*) form_ctrl_ecm#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1170] (bool~) gfx_mode::$14 ← *((byte*) form_ctrl_ecm#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1178] (bool~) gfx_mode::$17 ← *((byte*) form_ctrl_bmm#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1177] (bool~) gfx_mode::$16 ← *((byte*) form_ctrl_bmm#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1187] (bool~) gfx_mode::$19 ← *((byte*) form_ctrl_mcm#0) == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1186] (bool~) gfx_mode::$18 ← *((byte*) form_ctrl_mcm#0) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1345] (bool~) gfx_mode::$90 ← (byte) gfx_mode::keyboard_event#0 != (byte) KEY_SPACE#0 from [1344] (bool~) gfx_mode::$89 ← (byte) gfx_mode::keyboard_event#0 == (byte) KEY_SPACE#0
Inversing boolean not [1512] (bool~) gfx_init_plane_8bppchunky::$7 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 != (word/dword/signed dword) $8000 from [1511] (bool~) gfx_init_plane_8bppchunky::$6 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (word/dword/signed dword) $8000
Inversing boolean not [1658] (bool~) gfx_init_plane_charset8::$10 ← (byte~) gfx_init_plane_charset8::$8 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1657] (bool~) gfx_init_plane_charset8::$9 ← (byte~) gfx_init_plane_charset8::$8 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1831] (bool~) form_mode::$38 ← (byte~) form_mode::$36 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [1830] (bool~) form_mode::$37 ← (byte~) form_mode::$36 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1835] (bool~) form_mode::$40 ← (byte) form_mode::preset_current#2 == *((byte*) form_preset#0) from [1834] (bool~) form_mode::$39 ← (byte) form_mode::preset_current#2 != *((byte*) form_preset#0)
Inversing boolean not [1911] (bool~) form_control::$2 ← (signed byte) form_cursor_count#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [1910] (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [1937] (bool~) form_control::$8 ← (byte) form_control::key_event#0 != (byte) KEY_CRSR_DOWN#0 from [1936] (bool~) form_control::$7 ← (byte) form_control::key_event#0 == (byte) KEY_CRSR_DOWN#0
Inversing boolean not [1941] (bool~) form_control::$10 ← (byte) form_control::key_event#1 != (byte) KEY_CRSR_RIGHT#0 from [1940] (bool~) form_control::$9 ← (byte) form_control::key_event#1 == (byte) KEY_CRSR_RIGHT#0
Inversing boolean not [1952] (bool~) form_control::$22 ← (byte) form_field_idx#5 != (byte) form_fields_cnt#0 from [1951] (bool~) form_control::$21 ← (byte) form_field_idx#5 == (byte) form_fields_cnt#0
Inversing boolean not [1957] (bool~) form_control::$19 ← (byte) form_field_idx#6 != (byte/word/signed word/dword/signed dword) $ff from [1956] (bool~) form_control::$18 ← (byte) form_field_idx#6 == (byte/word/signed word/dword/signed dword) $ff
Inversing boolean not [1979] (bool~) form_control::$12 ← (byte) form_control::key_event#2 != (byte) KEY_SPACE#0 from [1978] (bool~) form_control::$11 ← (byte) form_control::key_event#2 == (byte) KEY_SPACE#0
Inversing boolean not [1988] (bool~) form_control::$29 ← *((byte[]) form_fields_val#0 + (byte) form_field_idx#19) <= *((byte[]) form_fields_max#0 + (byte) form_field_idx#19) from [1987] (bool~) form_control::$28 ← *((byte[]) form_fields_val#0 + (byte) form_field_idx#19) > *((byte[]) form_fields_max#0 + (byte) form_field_idx#19)
Inversing boolean not [1993] (bool~) form_control::$27 ← *((byte[]) form_fields_val#0 + (byte) form_field_idx#20) != (byte/word/signed word/dword/signed dword) $ff from [1992] (bool~) form_control::$26 ← *((byte[]) form_fields_val#0 + (byte) form_field_idx#20) == (byte/word/signed word/dword/signed dword) $ff
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_screen#0 = (byte*) print_line_cursor#0 (byte*) print_char_cursor#0 (byte*) print_screen#55 (byte*) print_line_cursor#76 (byte*) print_char_cursor#76 (byte*) print_screen#53 (byte*) print_line_cursor#75 (byte*) print_char_cursor#75 (byte*) print_screen#51 (byte*) print_line_cursor#74 (byte*) print_char_cursor#74 (byte*) print_screen#49 (byte*) print_line_cursor#72 (byte*) print_char_cursor#72 (byte*) print_screen#46 (byte*) print_line_cursor#69 (byte*) print_char_cursor#69 (byte*) print_screen#41 (byte*) print_line_cursor#64 (byte*) print_char_cursor#64 (byte*) print_screen#39 (byte*) print_line_cursor#61 (byte*) print_char_cursor#62 (byte*) print_screen#33 (byte*) print_line_cursor#53 (byte*) print_char_cursor#56 (byte*) print_screen#25 (byte*) print_line_cursor#44 (byte*) print_char_cursor#46 
Alias (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#7 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#48 (byte*) print_char_cursor#39 (byte*) print_char_cursor#3 
Alias (byte*) print_line_cursor#2 = (byte*) print_line_cursor#62 (byte*) print_line_cursor#37 (byte*) print_line_cursor#20 
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#2 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#37 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#9 
Alias (byte*) print_line_cursor#54 = (byte*) print_line_cursor#55 
Alias (byte*) print_line_cursor#36 = (byte*) print_line_cursor#46 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#49 
Alias (byte*) print_str_lines::str#10 = (byte*) print_str_lines::str#8 (byte*) print_str_lines::str#6 
Alias (byte*) print_line_cursor#1 = (byte*) print_line_cursor#19 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#21 
Alias (byte*) print_str_at::str#2 = (byte*) print_str_at::str#3 
Alias (byte*) print_str_at::at#2 = (byte*) print_str_at::at#3 
Alias (byte*) print_line_cursor#22 = (byte*) print_line_cursor#3 (byte*~) print_ln::$0 (byte*) print_char_cursor#4 (byte*) print_line_cursor#23 (byte*) print_char_cursor#24 (byte*) print_line_cursor#4 (byte*) print_char_cursor#5 
Alias (byte*) print_line_cursor#24 = (byte*) print_screen#11 (byte*) print_screen#10 (byte*) print_line_cursor#5 (byte*) print_char_cursor#6 (byte*) print_char_cursor#25 (byte*) print_line_cursor#6 (byte*) print_char_cursor#7 
Alias (byte*) print_screen#1 = (byte*) print_line_cursor#7 (byte*) print_char_cursor#8 (byte*) print_screen#12 (byte*) print_line_cursor#25 (byte*) print_char_cursor#26 (byte*) print_screen#2 (byte*) print_line_cursor#8 (byte*) print_char_cursor#9 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) KEY_MODIFIER_SHIFT#0 = (byte~) $0 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#3 (byte) keyboard_event_scan::row#9 (byte) keyboard_event_scan::row#7 
Alias (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#7 (byte) keyboard_event_scan::keycode#12 (byte) keyboard_event_scan::keycode#3 
Alias (byte) keyboard_events_size#119 = (byte) keyboard_events_size#78 (byte) keyboard_events_size#98 (byte) keyboard_events_size#55 
Alias (byte) keyboard_event_scan::row_scan#0 = (byte~) keyboard_event_scan::$12 (byte) keyboard_event_scan::row_scan#5 
Alias (byte) keyboard_event_scan::keycode#1 = (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$14 
Alias (byte) keyboard_events_size#18 = (byte) keyboard_events_size#37 (byte) keyboard_events_size#79 (byte) keyboard_events_size#38 (byte) keyboard_events_size#19 (byte) keyboard_events_size#20 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#6 (byte) keyboard_event_scan::row_scan#7 (byte) keyboard_event_scan::row_scan#2 (byte) keyboard_event_scan::row_scan#8 (byte) keyboard_event_scan::row_scan#9 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#8 (byte) keyboard_event_scan::col#5 (byte) keyboard_event_scan::col#4 (byte) keyboard_event_scan::col#6 (byte) keyboard_event_scan::col#7 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#13 (byte) keyboard_event_scan::keycode#8 (byte) keyboard_event_scan::keycode#9 (byte) keyboard_event_scan::keycode#5 (byte) keyboard_event_scan::keycode#6 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#13 (byte) keyboard_event_scan::row#5 (byte) keyboard_event_scan::row#14 (byte) keyboard_event_scan::row#11 (byte) keyboard_event_scan::row#12 
Alias (byte) keyboard_event_scan::event_type#0 = (byte~) keyboard_event_scan::$21 
Alias (byte) keyboard_event_scan::row_scan#3 = (byte) keyboard_event_scan::row_scan#4 
Alias (byte) keyboard_event_scan::row#6 = (byte) keyboard_event_scan::row#8 
Alias (byte) keyboard_event_scan::keycode#15 = (byte) keyboard_event_scan::keycode#2 
Alias (byte) keyboard_events_size#118 = (byte) keyboard_events_size#54 
Alias (byte) keyboard_events_size#111 = (byte) keyboard_events_size#132 (byte) keyboard_events_size#129 (byte) keyboard_events_size#128 
Alias (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#6 
Alias (byte) keyboard_modifiers#1 = (byte) keyboard_modifiers#34 (byte) keyboard_modifiers#17 
Alias (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#7 
Alias (byte) keyboard_modifiers#18 = (byte) keyboard_modifiers#35 (byte) keyboard_modifiers#54 
Alias (byte) keyboard_events_size#120 = (byte) keyboard_events_size#125 (byte) keyboard_events_size#121 
Alias (byte) keyboard_modifiers#2 = (byte~) keyboard_event_scan::$26 
Alias (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#8 
Alias (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#36 (byte) keyboard_modifiers#55 
Alias (byte) keyboard_events_size#100 = (byte) keyboard_events_size#99 (byte) keyboard_events_size#112 
Alias (byte) keyboard_modifiers#3 = (byte~) keyboard_event_scan::$27 
Alias (byte) keyboard_event_pressed::return#3 = (byte) keyboard_event_pressed::return#9 
Alias (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#37 (byte) keyboard_modifiers#56 (byte) keyboard_modifiers#38 
Alias (byte) keyboard_events_size#39 = (byte) keyboard_events_size#56 (byte) keyboard_events_size#80 (byte) keyboard_events_size#40 
Alias (byte) keyboard_modifiers#4 = (byte~) keyboard_event_scan::$28 
Alias (byte) keyboard_modifiers#5 = (byte~) keyboard_event_scan::$29 
Alias (byte) keyboard_events_size#21 = (byte) keyboard_events_size#3 
Alias (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#6 
Alias (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#4 (byte~) keyboard_event_pressed::$2 (byte) keyboard_event_pressed::return#5 
Alias (byte) keyboard_events_size#22 = (byte) keyboard_events_size#41 (byte) keyboard_events_size#23 
Alias (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#5 
Alias (byte) keyboard_events_size#24 = (byte) keyboard_events_size#5 
Alias (byte) keyboard_events_size#0 = (byte) keyboard_events_size#122 (byte) keyboard_events_size#113 (byte) keyboard_events_size#102 (byte) keyboard_events_size#91 (byte) keyboard_events_size#77 (byte) keyboard_events_size#53 
Alias (byte) keyboard_modifiers#0 = (byte) keyboard_modifiers#106 (byte) keyboard_modifiers#101 (byte) keyboard_modifiers#95 (byte) keyboard_modifiers#88 (byte) keyboard_modifiers#77 (byte) keyboard_modifiers#53 
Alias (byte) bitmap_init::bits#1 = (byte~) bitmap_init::$2 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#4 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#4 
Alias (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#4 
Alias (byte*) bitmap_init::yoffs#1 = (byte*~) bitmap_init::$14 
Alias (byte*) bitmap_clear::bitmap#0 = (byte*~) bitmap_clear::$0 
Alias (byte) bitmap_clear::y#2 = (byte) bitmap_clear::y#3 
Alias (byte*) bitmap_clear::bitmap#1 = (byte*) bitmap_clear::bitmap#4 
Alias (byte) bitmap_line::x1#1 = (byte) bitmap_line::x1#2 (byte) bitmap_line::x1#3 (byte) bitmap_line::x1#11 (byte) bitmap_line::x1#10 (byte) bitmap_line::x1#4 (byte) bitmap_line::x1#5 (byte) bitmap_line::x1#6 (byte) bitmap_line::x1#13 (byte) bitmap_line::x1#12 (byte) bitmap_line::x1#7 (byte) bitmap_line::x1#8 (byte) bitmap_line::x1#9 
Alias (byte) bitmap_line::x0#1 = (byte) bitmap_line::x0#2 (byte) bitmap_line::x0#3 (byte) bitmap_line::x0#11 (byte) bitmap_line::x0#10 (byte) bitmap_line::x0#4 (byte) bitmap_line::x0#5 (byte) bitmap_line::x0#6 (byte) bitmap_line::x0#13 (byte) bitmap_line::x0#12 (byte) bitmap_line::x0#7 (byte) bitmap_line::x0#8 (byte) bitmap_line::x0#9 
Alias (byte) bitmap_line::y0#1 = (byte) bitmap_line::y0#13 (byte) bitmap_line::y0#2 (byte) bitmap_line::y0#3 (byte) bitmap_line::y0#4 (byte) bitmap_line::y0#5 (byte) bitmap_line::y0#6 (byte) bitmap_line::y0#7 (byte) bitmap_line::y0#8 (byte) bitmap_line::y0#9 (byte) bitmap_line::y0#10 (byte) bitmap_line::y0#11 (byte) bitmap_line::y0#12 
Alias (byte) bitmap_line::y1#1 = (byte) bitmap_line::y1#13 (byte) bitmap_line::y1#2 (byte) bitmap_line::y1#3 (byte) bitmap_line::y1#4 (byte) bitmap_line::y1#5 (byte) bitmap_line::y1#6 (byte) bitmap_line::y1#7 (byte) bitmap_line::y1#8 (byte) bitmap_line::y1#9 (byte) bitmap_line::y1#10 (byte) bitmap_line::y1#11 (byte) bitmap_line::y1#12 
Alias (byte) bitmap_line::xd#1 = (byte~) bitmap_line::$11 (byte) bitmap_line::xd#9 (byte) bitmap_line::xd#10 (byte) bitmap_line::xd#11 (byte) bitmap_line::xd#12 (byte) bitmap_line::xd#13 (byte) bitmap_line::xd#14 
Alias (byte) bitmap_line::xd#2 = (byte~) bitmap_line::$1 (byte) bitmap_line::xd#3 (byte) bitmap_line::xd#4 (byte) bitmap_line::xd#5 (byte) bitmap_line::xd#6 (byte) bitmap_line::xd#7 (byte) bitmap_line::xd#8 
Alias (byte) bitmap_line::yd#1 = (byte~) bitmap_line::$7 (byte) bitmap_line::yd#7 (byte) bitmap_line::yd#8 
Alias (byte) bitmap_line::yd#2 = (byte~) bitmap_line::$3 (byte) bitmap_line::yd#5 (byte) bitmap_line::yd#6 
Alias (byte) bitmap_line::yd#11 = (byte) bitmap_line::yd#3 (byte~) bitmap_line::$17 (byte) bitmap_line::yd#12 
Alias (byte) bitmap_line::yd#10 = (byte) bitmap_line::yd#4 (byte~) bitmap_line::$13 (byte) bitmap_line::yd#9 
Alias (byte) bitmap_line_xdyi::e#0 = (byte~) bitmap_line_xdyi::$0 
Alias (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#4 
Alias (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#5 
Alias (byte) bitmap_line_xdyi::yd#3 = (byte) bitmap_line_xdyi::yd#4 (byte) bitmap_line_xdyi::yd#6 
Alias (byte) bitmap_line_xdyi::xd#2 = (byte) bitmap_line_xdyi::xd#4 (byte) bitmap_line_xdyi::xd#3 
Alias (byte) bitmap_line_xdyi::x1#3 = (byte) bitmap_line_xdyi::x1#4 (byte) bitmap_line_xdyi::x1#5 
Alias (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#7 (byte) bitmap_line_xdyi::y#4 
Alias (byte) bitmap_line_xdyi::e#1 = (byte~) bitmap_line_xdyi::$2 (byte) bitmap_line_xdyi::e#4 
Alias (byte) bitmap_line_xdyi::x#2 = (byte) bitmap_line_xdyi::x#7 
Alias (byte) bitmap_line_xdyi::e#2 = (byte~) bitmap_line_xdyi::$5 
Alias (byte) bitmap_line_xdyd::e#0 = (byte~) bitmap_line_xdyd::$0 
Alias (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#4 
Alias (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#5 
Alias (byte) bitmap_line_xdyd::yd#3 = (byte) bitmap_line_xdyd::yd#4 (byte) bitmap_line_xdyd::yd#6 
Alias (byte) bitmap_line_xdyd::xd#2 = (byte) bitmap_line_xdyd::xd#4 (byte) bitmap_line_xdyd::xd#3 
Alias (byte) bitmap_line_xdyd::x1#3 = (byte) bitmap_line_xdyd::x1#4 (byte) bitmap_line_xdyd::x1#5 
Alias (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#7 (byte) bitmap_line_xdyd::y#4 
Alias (byte) bitmap_line_xdyd::e#1 = (byte~) bitmap_line_xdyd::$2 (byte) bitmap_line_xdyd::e#4 
Alias (byte) bitmap_line_xdyd::x#2 = (byte) bitmap_line_xdyd::x#7 
Alias (byte) bitmap_line_xdyd::e#2 = (byte~) bitmap_line_xdyd::$5 
Alias (byte) bitmap_line_ydxi::e#0 = (byte~) bitmap_line_ydxi::$0 
Alias (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#4 
Alias (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#5 
Alias (byte) bitmap_line_ydxi::xd#3 = (byte) bitmap_line_ydxi::xd#4 (byte) bitmap_line_ydxi::xd#6 
Alias (byte) bitmap_line_ydxi::yd#2 = (byte) bitmap_line_ydxi::yd#4 (byte) bitmap_line_ydxi::yd#3 
Alias (byte) bitmap_line_ydxi::y1#3 = (byte) bitmap_line_ydxi::y1#4 (byte) bitmap_line_ydxi::y1#5 
Alias (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#7 (byte) bitmap_line_ydxi::x#4 
Alias (byte) bitmap_line_ydxi::e#1 = (byte~) bitmap_line_ydxi::$2 (byte) bitmap_line_ydxi::e#4 
Alias (byte) bitmap_line_ydxi::y#2 = (byte) bitmap_line_ydxi::y#7 
Alias (byte) bitmap_line_ydxi::e#2 = (byte~) bitmap_line_ydxi::$5 
Alias (byte) bitmap_line_ydxd::e#0 = (byte~) bitmap_line_ydxd::$0 
Alias (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#5 (byte) bitmap_line_ydxd::y#4 
Alias (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#5 
Alias (byte) bitmap_line_ydxd::xd#3 = (byte) bitmap_line_ydxd::xd#4 (byte) bitmap_line_ydxd::xd#6 
Alias (byte) bitmap_line_ydxd::yd#2 = (byte) bitmap_line_ydxd::yd#4 (byte) bitmap_line_ydxd::yd#3 
Alias (byte) bitmap_line_ydxd::y1#3 = (byte) bitmap_line_ydxd::y1#4 (byte) bitmap_line_ydxd::y1#5 
Alias (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#7 (byte) bitmap_line_ydxd::x#4 
Alias (byte) bitmap_line_ydxd::e#1 = (byte~) bitmap_line_ydxd::$2 (byte) bitmap_line_ydxd::e#4 
Alias (byte) bitmap_line_ydxd::y#3 = (byte) bitmap_line_ydxd::y#8 
Alias (byte) bitmap_line_ydxd::e#2 = (byte~) bitmap_line_ydxd::$5 
Alias (byte*) print_screen#27 = (byte*) print_screen#34 (byte*) print_screen#40 
Alias (byte*) print_line_cursor#48 = (byte*) print_line_cursor#56 (byte*) print_line_cursor#63 
Alias (byte*) print_char_cursor#51 = (byte*) print_char_cursor#57 (byte*) print_char_cursor#63 
Alias (signed byte) form_cursor_count#28 = (signed byte) form_cursor_count#38 (signed byte) form_cursor_count#47 
Alias (byte) keyboard_events_size#101 = (byte) keyboard_events_size#81 (byte) keyboard_events_size#57 
Alias (byte) keyboard_modifiers#57 = (byte) keyboard_modifiers#78 (byte) keyboard_modifiers#94 
Alias (byte) form_field_idx#38 = (byte) form_field_idx#48 (byte) form_field_idx#55 
Alias (byte*) print_screen#14 = (byte*) print_screen#19 (byte*) print_screen#20 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#39 (byte*) print_line_cursor#40 (byte*) print_line_cursor#27 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#41 (byte*) print_char_cursor#42 (byte*) print_char_cursor#28 
Alias (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#18 (signed byte) form_cursor_count#19 (signed byte) form_cursor_count#11 
Alias (byte) keyboard_events_size#27 = (byte) keyboard_events_size#42 (byte) keyboard_events_size#43 (byte) keyboard_events_size#8 
Alias (byte) keyboard_modifiers#24 = (byte) keyboard_modifiers#39 (byte) keyboard_modifiers#40 (byte) keyboard_modifiers#9 
Alias (byte) form_field_idx#1 = (byte) form_field_idx#25 (byte) form_field_idx#26 (byte) form_field_idx#12 
Alias (byte*) print_screen#13 = (byte*) print_screen#3 (byte*) print_screen#26 
Alias (byte*) print_line_cursor#26 = (byte*) print_line_cursor#9 (byte*) print_line_cursor#47 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#27 (byte*) print_char_cursor#50 
Alias (signed byte) form_cursor_count#0 = (signed byte) form_cursor_count#10 (signed byte) form_cursor_count#27 
Alias (byte) keyboard_events_size#25 = (byte) keyboard_events_size#6 
Alias (byte) keyboard_modifiers#22 = (byte) keyboard_modifiers#7 
Alias (byte) form_field_idx#0 = (byte) form_field_idx#11 (byte) form_field_idx#37 
Alias (byte) keyboard_events_size#26 = (byte) keyboard_events_size#7 
Alias (byte) keyboard_modifiers#23 = (byte) keyboard_modifiers#8 
Alias (dword) get_plane::return#0 = (dword~) get_plane::$29 
Alias (byte) get_plane::idx#10 = (byte) get_plane::idx#3 (byte) get_plane::idx#2 (byte) get_plane::idx#4 (byte) get_plane::idx#5 (byte) get_plane::idx#6 (byte) get_plane::idx#7 (byte) get_plane::idx#8 (byte) get_plane::idx#9 (byte) get_plane::idx#11 (byte) get_plane::idx#12 (byte) get_plane::idx#13 (byte) get_plane::idx#14 (byte) get_plane::idx#15 
Alias (dword) get_plane::return#1 = (dword~) get_plane::$28 
Alias (dword) get_plane::return#2 = (dword~) get_plane::$27 
Alias (dword) get_plane::return#3 = (dword~) get_plane::$26 
Alias (dword) get_plane::return#4 = (dword~) get_plane::$25 
Alias (dword) get_plane::return#5 = (dword~) get_plane::$24 
Alias (dword) get_plane::return#6 = (dword~) get_plane::$23 
Alias (dword) get_plane::return#7 = (dword~) get_plane::$22 
Alias (dword) get_plane::return#8 = (dword~) get_plane::$21 
Alias (dword) get_plane::return#9 = (dword~) get_plane::$20 
Alias (dword) get_plane::return#10 = (dword~) get_plane::$19 
Alias (dword) get_plane::return#11 = (dword~) get_plane::$18 
Alias (dword) get_plane::return#12 = (dword~) get_plane::$17 
Alias (dword) get_plane::return#13 = (dword~) get_plane::$16 
Alias (dword) get_plane::return#14 = (dword) get_plane::return#18 
Alias (dword) get_plane::return#15 = (dword~) get_plane::$15 
Alias (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#3 (byte) get_vic_screen::idx#4 (byte) get_vic_screen::idx#5 (byte) get_vic_screen::idx#6 
Alias (byte*) get_vic_screen::return#5 = (byte*) get_vic_screen::return#9 
Alias (byte) get_vic_charset::idx#1 = (byte) get_vic_charset::idx#2 
Alias (byte*) get_vic_charset::return#2 = (byte*) get_vic_charset::return#5 
Alias (byte[]) FORM_TEXT#0 = (string~) $15 
Alias (byte[]) FORM_COLS#0 = (string~) $31 
Alias (byte) apply_preset::idx#1 = (byte) apply_preset::idx#2 (byte) apply_preset::idx#3 (byte) apply_preset::idx#4 (byte) apply_preset::idx#5 (byte) apply_preset::idx#6 (byte) apply_preset::idx#7 (byte) apply_preset::idx#8 (byte) apply_preset::idx#9 (byte) apply_preset::idx#10 (byte) apply_preset::idx#11 
Alias (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#3 (byte) render_preset_name::idx#2 (byte) render_preset_name::idx#4 (byte) render_preset_name::idx#5 (byte) render_preset_name::idx#6 (byte) render_preset_name::idx#7 (byte) render_preset_name::idx#8 (byte) render_preset_name::idx#9 (byte) render_preset_name::idx#11 (byte) render_preset_name::idx#12 
Alias (byte*) print_str_at::at#1 = (byte*~) render_preset_name::$13 
Alias (byte*) form_preset#0 = (byte*~) $32 
Alias (byte*) form_ctrl_bmm#0 = (byte*~) $33 
Alias (byte*) form_ctrl_mcm#0 = (byte*~) $34 
Alias (byte*) form_ctrl_ecm#0 = (byte*~) $35 
Alias (byte*) form_ctrl_hicol#0 = (byte*~) $36 
Alias (byte*) form_ctrl_line#0 = (byte*~) $37 
Alias (byte*) form_ctrl_colof#0 = (byte*~) $38 
Alias (byte*) form_ctrl_chunk#0 = (byte*~) $39 
Alias (byte*) form_ctrl_borof#0 = (byte*~) $40 
Alias (byte*) form_ctrl_overs#0 = (byte*~) $41 
Alias (byte*) form_a_pattern#0 = (byte*~) $42 
Alias (byte*) form_a_start_hi#0 = (byte*~) $43 
Alias (byte*) form_a_start_lo#0 = (byte*~) $44 
Alias (byte*) form_a_step_hi#0 = (byte*~) $45 
Alias (byte*) form_a_step_lo#0 = (byte*~) $46 
Alias (byte*) form_a_mod_hi#0 = (byte*~) $47 
Alias (byte*) form_a_mod_lo#0 = (byte*~) $48 
Alias (byte*) form_b_pattern#0 = (byte*~) $49 
Alias (byte*) form_b_start_hi#0 = (byte*~) $50 
Alias (byte*) form_b_start_lo#0 = (byte*~) $51 
Alias (byte*) form_b_step_hi#0 = (byte*~) $52 
Alias (byte*) form_b_step_lo#0 = (byte*~) $53 
Alias (byte*) form_b_mod_hi#0 = (byte*~) $54 
Alias (byte*) form_b_mod_lo#0 = (byte*~) $55 
Alias (byte*) form_vic_screen#0 = (byte*~) $56 
Alias (byte*) form_vic_gfx#0 = (byte*~) $57 
Alias (byte*) form_vic_cols#0 = (byte*~) $58 
Alias (byte*) form_dtv_palet#0 = (byte*~) $59 
Alias (byte*) form_vic_bg0_hi#0 = (byte*~) $60 
Alias (byte*) form_vic_bg0_lo#0 = (byte*~) $61 
Alias (byte*) form_vic_bg1_hi#0 = (byte*~) $62 
Alias (byte*) form_vic_bg1_lo#0 = (byte*~) $63 
Alias (byte*) form_vic_bg2_hi#0 = (byte*~) $64 
Alias (byte*) form_vic_bg2_lo#0 = (byte*~) $65 
Alias (byte*) form_vic_bg3_hi#0 = (byte*~) $66 
Alias (byte*) form_vic_bg3_lo#0 = (byte*~) $67 
Alias (byte) gfx_mode::dtv_control#0 = (byte) gfx_mode::dtv_control#7 
Alias (byte) keyboard_events_size#159 = (byte) keyboard_events_size#160 
Alias (byte) keyboard_modifiers#139 = (byte) keyboard_modifiers#140 
Alias (byte) gfx_mode::dtv_control#1 = (byte~) gfx_mode::$73 
Alias (byte) gfx_mode::dtv_control#14 = (byte) gfx_mode::dtv_control#8 
Alias (byte) keyboard_events_size#157 = (byte) keyboard_events_size#158 
Alias (byte) keyboard_modifiers#137 = (byte) keyboard_modifiers#138 
Alias (byte) gfx_mode::dtv_control#2 = (byte~) gfx_mode::$74 
Alias (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#9 
Alias (byte) keyboard_events_size#155 = (byte) keyboard_events_size#156 
Alias (byte) keyboard_modifiers#135 = (byte) keyboard_modifiers#136 
Alias (byte) gfx_mode::dtv_control#3 = (byte~) gfx_mode::$75 
Alias (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#16 
Alias (byte) keyboard_events_size#153 = (byte) keyboard_events_size#154 
Alias (byte) keyboard_modifiers#133 = (byte) keyboard_modifiers#134 
Alias (byte) gfx_mode::dtv_control#4 = (byte~) gfx_mode::$76 
Alias (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#17 
Alias (byte) keyboard_events_size#151 = (byte) keyboard_events_size#152 
Alias (byte) keyboard_modifiers#131 = (byte) keyboard_modifiers#132 
Alias (byte) gfx_mode::dtv_control#5 = (byte~) gfx_mode::$77 
Alias (byte) gfx_mode::vic_control#0 = (byte/word/dword~) gfx_mode::$13 (byte) gfx_mode::vic_control#3 
Alias (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#18 
Alias (byte) keyboard_events_size#149 = (byte) keyboard_events_size#150 
Alias (byte) keyboard_modifiers#129 = (byte) keyboard_modifiers#130 
Alias (byte) gfx_mode::dtv_control#6 = (byte~) gfx_mode::$78 
Alias (byte) keyboard_events_size#147 = (byte) keyboard_events_size#148 
Alias (byte) keyboard_modifiers#127 = (byte) keyboard_modifiers#128 
Alias (byte) gfx_mode::vic_control#1 = (byte~) gfx_mode::$79 
Alias (byte) gfx_mode::vic_control#5 = (byte) gfx_mode::vic_control#6 
Alias (byte) keyboard_events_size#145 = (byte) keyboard_events_size#146 
Alias (byte) keyboard_modifiers#125 = (byte) keyboard_modifiers#126 
Alias (byte) gfx_mode::vic_control#2 = (byte~) gfx_mode::$80 
Alias (byte) gfx_mode::plane_a_offs#0 = (byte~) gfx_mode::$21 (byte) gfx_mode::plane_a_offs#1 
Alias (dword) get_plane::return#16 = (dword) get_plane::return#19 
Alias (byte) keyboard_events_size#130 = (byte) keyboard_events_size#139 (byte) keyboard_events_size#141 (byte) keyboard_events_size#137 (byte) keyboard_events_size#135 (byte) keyboard_events_size#133 
Alias (byte) keyboard_modifiers#111 = (byte) keyboard_modifiers#119 (byte) keyboard_modifiers#121 (byte) keyboard_modifiers#117 (byte) keyboard_modifiers#115 (byte) keyboard_modifiers#113 
Alias (dword) gfx_mode::plane_a#0 = (dword~) gfx_mode::$23 
Alias (byte) gfx_mode::plane_b_offs#0 = (byte~) gfx_mode::$35 (byte) gfx_mode::plane_b_offs#1 
Alias (dword) get_plane::return#17 = (dword) get_plane::return#20 
Alias (dword) gfx_mode::plane_b#0 = (dword~) gfx_mode::$37 
Alias (byte*) get_vic_screen::return#10 = (byte*) get_vic_screen::return#7 
Alias (byte*) get_vic_charset::return#4 = (byte*) get_vic_charset::return#6 
Alias (byte*) get_vic_screen::return#11 = (byte*) get_vic_screen::return#8 
Alias (byte*) gfx_mode::vic_colors#0 = (byte*~) gfx_mode::$63 
Alias (byte) gfx_mode::vic_control2#0 = (byte) gfx_mode::vic_control2#3 
Alias (byte) keyboard_events_size#143 = (byte) keyboard_events_size#144 
Alias (byte) keyboard_modifiers#123 = (byte) keyboard_modifiers#124 
Alias (byte) gfx_mode::vic_control2#1 = (byte~) gfx_mode::$81 
Alias (byte) gfx_mode::cy#2 = (byte) gfx_mode::cy#3 
Alias (byte*) gfx_mode::vic_colors#1 = (byte*) gfx_mode::vic_colors#4 
Alias (byte*) gfx_mode::col#1 = (byte*) gfx_mode::col#4 
Alias (byte) keyboard_events_size#103 = (byte) keyboard_events_size#114 (byte) keyboard_events_size#123 (byte) keyboard_events_size#83 (byte) keyboard_events_size#82 
Alias (byte) keyboard_modifiers#102 = (byte) keyboard_modifiers#107 (byte) keyboard_modifiers#96 (byte) keyboard_modifiers#80 (byte) keyboard_modifiers#79 
Alias (byte) keyboard_events_size#45 = (byte) keyboard_events_size#84 
Alias (byte) keyboard_modifiers#42 = (byte) keyboard_modifiers#81 
Alias (byte) keyboard_events_size#44 = (byte) keyboard_events_size#85 (byte) keyboard_events_size#61 
Alias (byte) keyboard_modifiers#41 = (byte) keyboard_modifiers#82 (byte) keyboard_modifiers#61 
Alias (byte) keyboard_events_size#28 = (byte) keyboard_events_size#9 
Alias (byte) keyboard_modifiers#10 = (byte) keyboard_modifiers#25 (byte) keyboard_modifiers#43 (byte) keyboard_modifiers#60 
Alias (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#6 
Alias (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 (byte) keyboard_events_size#60 
Alias (byte) gfx_mode::keyboard_event#0 = (byte~) gfx_mode::$88 
Alias (byte) keyboard_events_size#11 = (byte) keyboard_events_size#30 
Alias (byte) keyboard_modifiers#11 = (byte) keyboard_modifiers#26 
Alias (byte) gfx_init_charset::c#2 = (byte) gfx_init_charset::c#3 
Alias (byte*) gfx_init_charset::chargen#1 = (byte*) gfx_init_charset::chargen#4 
Alias (byte*) gfx_init_charset::charset#1 = (byte*) gfx_init_charset::charset#4 
Alias (byte) gfx_init_screen0::cy#2 = (byte) gfx_init_screen0::cy#3 
Alias (byte*) gfx_init_screen0::ch#1 = (byte*) gfx_init_screen0::ch#4 
Alias (byte) gfx_init_screen1::cy#2 = (byte) gfx_init_screen1::cy#3 
Alias (byte*) gfx_init_screen1::ch#1 = (byte*) gfx_init_screen1::ch#4 
Alias (byte) gfx_init_screen2::col#0 = (byte~) gfx_init_screen2::$1 
Alias (byte) gfx_init_screen2::col2#0 = (byte/signed word/word/dword/signed dword~) gfx_init_screen2::$2 
Alias (byte) gfx_init_screen2::cy#2 = (byte) gfx_init_screen2::cy#3 
Alias (byte*) gfx_init_screen2::ch#1 = (byte*) gfx_init_screen2::ch#4 
Alias (byte) gfx_init_screen3::cy#2 = (byte) gfx_init_screen3::cy#3 
Alias (byte*) gfx_init_screen3::ch#1 = (byte*) gfx_init_screen3::ch#4 
Alias (byte) gfx_init_screen4::cy#2 = (byte) gfx_init_screen4::cy#3 
Alias (byte*) gfx_init_screen4::ch#1 = (byte*) gfx_init_screen4::ch#4 
Alias (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#3 
Alias (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte~) gfx_init_plane_8bppchunky::$1 (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3 
Alias (byte) gfx_init_plane_8bppchunky::c#0 = (byte~) gfx_init_plane_8bppchunky::$10 
Alias (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5 
Alias (word) gfx_init_plane_8bppchunky::x#3 = (word) gfx_init_plane_8bppchunky::x#5 (word) gfx_init_plane_8bppchunky::x#4 
Alias (byte) gfx_init_plane_8bppchunky::y#4 = (byte) gfx_init_plane_8bppchunky::y#7 (byte) gfx_init_plane_8bppchunky::y#5 
Alias (byte) gfx_init_plane_8bppchunky::y#2 = (byte) gfx_init_plane_8bppchunky::y#3 
Alias (byte*) gfx_init_plane_8bppchunky::gfxb#1 = (byte*) gfx_init_plane_8bppchunky::gfxb#6 
Alias (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte~) gfx_init_plane_8bppchunky::$4 
Alias (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte~) gfx_init_plane_horisontal::$1 (byte) gfx_init_plane_horisontal::gfxbCpuBank#2 
Alias (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#5 (byte*) gfx_init_plane_horisontal::gfxa#4 
Alias (byte) gfx_init_plane_horisontal::ax#3 = (byte) gfx_init_plane_horisontal::ax#5 (byte) gfx_init_plane_horisontal::ax#4 
Alias (byte) gfx_init_plane_horisontal::ay#2 = (byte) gfx_init_plane_horisontal::ay#6 (byte) gfx_init_plane_horisontal::ay#7 
Alias (byte) gfx_init_plane_horisontal::ay#3 = (byte) gfx_init_plane_horisontal::ay#5 
Alias (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#8 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte~) gfx_init_plane_horisontal::$6 
Alias (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte~) gfx_init_plane_horisontal2::$1 (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2 
Alias (byte) gfx_init_plane_horisontal2::row#0 = (byte~) gfx_init_plane_horisontal2::$9 
Alias (byte) gfx_init_plane_horisontal2::ay#2 = (byte) gfx_init_plane_horisontal2::ay#3 
Alias (byte*) gfx_init_plane_horisontal2::gfxa#1 = (byte*) gfx_init_plane_horisontal2::gfxa#4 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte~) gfx_init_plane_horisontal2::$6 
Alias (byte) gfx_init_plane_vertical::gfxbCpuBank#0 = (byte~) gfx_init_plane_vertical::$1 (byte) gfx_init_plane_vertical::gfxbCpuBank#2 
Alias (byte) gfx_init_plane_vertical::by#2 = (byte) gfx_init_plane_vertical::by#3 
Alias (byte*) gfx_init_plane_vertical::gfxb#1 = (byte*) gfx_init_plane_vertical::gfxb#4 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte~) gfx_init_plane_vertical::$6 
Alias (byte) gfx_init_plane_charset8::gfxbCpuBank#0 = (byte~) gfx_init_plane_charset8::$1 (byte) gfx_init_plane_charset8::gfxbCpuBank#2 
Alias (byte) gfx_init_plane_charset8::bits#1 = (byte~) gfx_init_plane_charset8::$11 
Alias (byte) gfx_init_plane_charset8::col#3 = (byte) gfx_init_plane_charset8::col#4 (byte) gfx_init_plane_charset8::c#1 
Alias (byte*) gfx_init_plane_charset8::gfxa#3 = (byte*) gfx_init_plane_charset8::gfxa#4 
Alias (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#4 
Alias (byte) gfx_init_plane_charset8::cp#3 = (byte) gfx_init_plane_charset8::cp#4 
Alias (byte) gfx_init_plane_charset8::cr#4 = (byte) gfx_init_plane_charset8::cr#5 
Alias (byte*) gfx_init_plane_charset8::chargen#7 = (byte*) gfx_init_plane_charset8::chargen#8 
Alias (byte) gfx_init_plane_charset8::ch#5 = (byte) gfx_init_plane_charset8::ch#6 
Alias (byte) gfx_init_plane_charset8::cr#2 = (byte) gfx_init_plane_charset8::cr#3 
Alias (byte*) gfx_init_plane_charset8::chargen#4 = (byte*) gfx_init_plane_charset8::chargen#6 (byte*) gfx_init_plane_charset8::chargen#5 
Alias (byte) gfx_init_plane_charset8::ch#2 = (byte) gfx_init_plane_charset8::ch#3 (byte) gfx_init_plane_charset8::ch#4 
Alias (byte*) gfx_init_plane_charset8::gfxa#1 = (byte*) gfx_init_plane_charset8::gfxa#7 (byte*) gfx_init_plane_charset8::gfxa#8 
Alias (byte) gfx_init_plane_charset8::col#1 = (byte) gfx_init_plane_charset8::col#7 (byte) gfx_init_plane_charset8::col#8 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte~) gfx_init_plane_charset8::$6 
Alias (byte) gfx_init_plane_fill::gfxbCpuBank#0 = (byte~) gfx_init_plane_fill::$2 (byte) gfx_init_plane_fill::gfxbCpuBank#2 
Alias (dword) gfx_init_plane_fill::plane_addr#3 = (dword) gfx_init_plane_fill::plane_addr#4 
Alias (byte) gfx_init_plane_fill::fill#6 = (byte) gfx_init_plane_fill::fill#7 
Alias (byte) gfx_init_plane_fill::by#2 = (byte) gfx_init_plane_fill::by#3 
Alias (byte) gfx_init_plane_fill::fill#3 = (byte) gfx_init_plane_fill::fill#5 
Alias (byte*) gfx_init_plane_fill::gfxb#1 = (byte*) gfx_init_plane_fill::gfxb#4 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte~) gfx_init_plane_fill::$8 
Alias (signed byte) form_cursor_count#48 = (signed byte) form_cursor_count#64 (signed byte) form_cursor_count#65 (signed byte) form_cursor_count#63 (signed byte) form_cursor_count#62 (signed byte) form_cursor_count#61 (signed byte) form_cursor_count#60 (signed byte) form_cursor_count#57 (signed byte) form_cursor_count#55 (signed byte) form_cursor_count#52 
Alias (byte) keyboard_events_size#104 = (byte) keyboard_events_size#140 (byte) keyboard_events_size#142 (byte) keyboard_events_size#138 (byte) keyboard_events_size#136 (byte) keyboard_events_size#134 (byte) keyboard_events_size#131 (byte) keyboard_events_size#127 (byte) keyboard_events_size#124 (byte) keyboard_events_size#115 
Alias (byte) keyboard_modifiers#103 = (byte) keyboard_modifiers#120 (byte) keyboard_modifiers#122 (byte) keyboard_modifiers#118 (byte) keyboard_modifiers#116 (byte) keyboard_modifiers#114 (byte) keyboard_modifiers#112 (byte) keyboard_modifiers#110 (byte) keyboard_modifiers#108 (byte) keyboard_modifiers#97 
Alias (byte) form_field_idx#56 = (byte) form_field_idx#72 (byte) form_field_idx#73 (byte) form_field_idx#71 (byte) form_field_idx#70 (byte) form_field_idx#69 (byte) form_field_idx#68 (byte) form_field_idx#65 (byte) form_field_idx#63 (byte) form_field_idx#59 
Alias (byte*) print_screen#15 = (byte*) print_screen#5 (byte*) print_screen#28 (byte*) print_screen#22 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#28 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#29 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#29 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#30 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#31 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#30 
Alias (byte*) print_screen#16 = (byte*) print_screen#6 (byte*) print_screen#54 (byte*) print_screen#52 (byte*) print_screen#50 (byte*) print_screen#47 (byte*) print_screen#42 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#31 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#32 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#32 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#33 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#73 (byte*) print_char_cursor#70 (byte*) print_char_cursor#65 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#33 (byte*) print_line_cursor#73 (byte*) print_line_cursor#70 (byte*) print_line_cursor#65 
Alias (byte*) print_screen#30 = (byte*) print_screen#35 
Alias (byte*) print_line_cursor#50 = (byte*) print_line_cursor#57 
Alias (byte*) print_char_cursor#53 = (byte*) print_char_cursor#58 
Alias (signed byte) form_cursor_count#30 = (signed byte) form_cursor_count#39 
Alias (byte) keyboard_events_size#63 = (byte) keyboard_events_size#86 
Alias (byte) keyboard_modifiers#63 = (byte) keyboard_modifiers#83 
Alias (byte) form_field_idx#40 = (byte) form_field_idx#49 
Alias (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#40 
Alias (byte) keyboard_events_size#47 = (byte) keyboard_events_size#87 
Alias (byte) keyboard_modifiers#45 = (byte) keyboard_modifiers#84 
Alias (byte) form_field_idx#28 = (byte) form_field_idx#50 
Alias (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#8 
Alias (byte*) print_screen#23 = (byte*) print_screen#43 
Alias (byte*) print_line_cursor#42 = (byte*) print_line_cursor#66 
Alias (byte*) print_char_cursor#44 = (byte*) print_char_cursor#66 
Alias (signed byte) form_cursor_count#20 = (signed byte) form_cursor_count#41 (signed byte) form_cursor_count#32 
Alias (byte) keyboard_events_size#46 = (byte) keyboard_events_size#88 (byte) keyboard_events_size#65 
Alias (byte) keyboard_modifiers#44 = (byte) keyboard_modifiers#85 (byte) keyboard_modifiers#65 
Alias (byte) form_field_idx#27 = (byte) form_field_idx#51 (byte) form_field_idx#42 
Alias (byte) form_mode::preset_current#2 = (byte) form_mode::preset_current#7 (byte) form_mode::preset_current#5 (byte) form_mode::preset_current#4 (byte) form_mode::preset_current#3 (byte) form_mode::preset_current#9 
Alias (byte*) print_screen#24 = (byte*) print_screen#44 (byte*) print_screen#36 (byte*) print_screen#32 (byte*) print_screen#37 (byte*) print_screen#29 (byte*) print_screen#48 (byte*) print_screen#45 (byte*) print_screen#38 (byte*) print_screen#31 
Alias (byte*) print_line_cursor#43 = (byte*) print_line_cursor#67 (byte*) print_line_cursor#58 (byte*) print_line_cursor#52 (byte*) print_line_cursor#59 (byte*) print_line_cursor#49 (byte*) print_line_cursor#71 (byte*) print_line_cursor#68 (byte*) print_line_cursor#60 (byte*) print_line_cursor#51 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#67 (byte*) print_char_cursor#59 (byte*) print_char_cursor#55 (byte*) print_char_cursor#60 (byte*) print_char_cursor#52 (byte*) print_char_cursor#71 (byte*) print_char_cursor#68 (byte*) print_char_cursor#61 (byte*) print_char_cursor#54 
Alias (byte) form_control::return#0 = (byte) form_control::return#6 
Alias (signed byte) form_cursor_count#12 = (signed byte) form_cursor_count#2 (signed byte) form_cursor_count#42 (signed byte) form_cursor_count#29 (signed byte) form_cursor_count#53 (signed byte) form_cursor_count#49 (signed byte) form_cursor_count#43 (signed byte) form_cursor_count#31 
Alias (byte) keyboard_events_size#105 = (byte) keyboard_events_size#12 (byte) keyboard_events_size#31 (byte) keyboard_events_size#89 (byte) keyboard_events_size#62 (byte) keyboard_events_size#116 (byte) keyboard_events_size#90 (byte) keyboard_events_size#64 
Alias (byte) keyboard_modifiers#104 = (byte) keyboard_modifiers#12 (byte) keyboard_modifiers#27 (byte) keyboard_modifiers#86 (byte) keyboard_modifiers#62 (byte) keyboard_modifiers#98 (byte) keyboard_modifiers#87 (byte) keyboard_modifiers#64 
Alias (byte) form_field_idx#13 = (byte) form_field_idx#2 (byte) form_field_idx#52 (byte) form_field_idx#39 (byte) form_field_idx#60 (byte) form_field_idx#57 (byte) form_field_idx#53 (byte) form_field_idx#41 
Alias (byte*) print_screen#17 = (byte*) print_screen#7 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#34 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#35 
Alias (signed byte) form_cursor_count#13 = (signed byte) form_cursor_count#3 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#32 
Alias (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#28 
Alias (byte) form_field_idx#14 = (byte) form_field_idx#3 
Alias (byte) form_mode::preset_current#1 = (byte) form_mode::preset_current#11 (byte) form_mode::preset_current#10 
Alias (signed byte) form_cursor_count#26 = (signed byte) form_cursor_count#4 (signed word/signed byte/signed dword~) $68 
Alias (byte*) form_set_screen::line#0 = (byte*) form_set_screen::screen#1 
Alias (byte*) form_set_screen::line#1 = (byte*~) form_set_screen::$2 
Alias (byte*) form_field_ptr::line#0 = (byte*~) form_field_ptr::$0 
Alias (byte*) form_field_ptr::return#0 = (byte*) form_field_ptr::field#0 (byte*~) form_field_ptr::$1 (byte*) form_field_ptr::return#4 (byte*) form_field_ptr::return#1 
Alias (byte*) form_field_ptr::return#2 = (byte*) form_field_ptr::return#5 
Alias (byte) form_render_values::idx#2 = (byte) form_render_values::idx#3 
Alias (byte*) form_render_values::field#0 = (byte*~) form_render_values::$0 
Alias (byte*) form_field_ptr::return#3 = (byte*) form_field_ptr::return#6 
Alias (signed byte) form_cursor_count#14 = (signed byte) form_cursor_count#22 
Alias (byte) keyboard_events_size#106 = (byte) keyboard_events_size#117 (byte) keyboard_events_size#107 
Alias (byte) keyboard_modifiers#100 = (byte) keyboard_modifiers#99 (byte) keyboard_modifiers#105 
Alias (byte) form_field_idx#15 = (byte) form_field_idx#66 (byte) form_field_idx#67 
Alias (byte*) form_control::field#0 = (byte*~) form_control::$0 (byte*) form_control::field#11 
Alias (byte*) form_control::field#1 = (byte*) form_control::field#5 (byte*) form_control::field#2 
Alias (byte) keyboard_events_size#66 = (byte) keyboard_events_size#92 (byte) keyboard_events_size#67 
Alias (byte) keyboard_modifiers#66 = (byte) keyboard_modifiers#89 (byte) keyboard_modifiers#67 
Alias (byte) form_field_idx#61 = (byte) form_field_idx#64 (byte) form_field_idx#62 
Alias (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#58 (signed byte) form_cursor_count#59 
Alias (byte*) form_control::field#10 = (byte*) form_control::field#12 (byte*) form_control::field#15 (byte*) form_control::field#6 (byte*) form_control::field#17 (byte*) form_control::field#3 (byte*) form_control::field#16 (byte*) form_control::field#14 (byte*) form_control::field#13 (byte*) form_control::field#8 (byte*) form_control::field#7 (byte*) form_control::field#9 
Alias (byte) form_field_idx#16 = (byte) form_field_idx#54 (byte) form_field_idx#58 (byte) form_field_idx#43 (byte) form_field_idx#46 (byte) form_field_idx#29 (byte) form_field_idx#17 (byte) form_field_idx#47 (byte) form_field_idx#33 (byte) form_field_idx#19 (byte) form_field_idx#20 (byte) form_field_idx#34 (byte) form_field_idx#21 (byte) form_field_idx#35 (byte) form_field_idx#23 (byte) form_field_idx#32 (byte) form_field_idx#30 
Alias (signed byte) form_cursor_count#23 = (signed byte) form_cursor_count#54 (signed byte) form_cursor_count#56 (signed byte) form_cursor_count#50 (signed byte) form_cursor_count#44 (signed byte) form_cursor_count#37 (signed byte) form_cursor_count#51 (signed byte) form_cursor_count#46 (signed byte) form_cursor_count#45 (signed byte) form_cursor_count#34 (signed byte) form_cursor_count#33 (signed byte) form_cursor_count#35 (signed byte) form_cursor_count#36 (signed byte) form_cursor_count#25 
Alias (byte) keyboard_events_size#14 = (byte) keyboard_events_size#33 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#29 (byte) keyboard_modifiers#47 (byte) keyboard_modifiers#52 (byte) keyboard_modifiers#30 (byte) keyboard_modifiers#91 (byte) keyboard_modifiers#90 (byte) keyboard_modifiers#69 (byte) keyboard_modifiers#68 (byte) keyboard_modifiers#70 (byte) keyboard_modifiers#71 (byte) keyboard_modifiers#76 (byte) keyboard_modifiers#32 (byte) keyboard_modifiers#93 (byte) keyboard_modifiers#92 (byte) keyboard_modifiers#73 (byte) keyboard_modifiers#72 (byte) keyboard_modifiers#74 (byte) keyboard_modifiers#75 (byte) keyboard_modifiers#51 (byte) keyboard_modifiers#48 
Alias (byte) keyboard_event_get::return#4 = (byte) keyboard_event_get::return#7 
Alias (byte) keyboard_events_size#108 = (byte) keyboard_events_size#15 (byte) keyboard_events_size#34 (byte) keyboard_events_size#95 (byte) keyboard_events_size#94 (byte) keyboard_events_size#93 (byte) keyboard_events_size#69 (byte) keyboard_events_size#68 (byte) keyboard_events_size#70 (byte) keyboard_events_size#71 (byte) keyboard_events_size#76 (byte) keyboard_events_size#109 (byte) keyboard_events_size#97 (byte) keyboard_events_size#96 (byte) keyboard_events_size#73 (byte) keyboard_events_size#72 (byte) keyboard_events_size#74 (byte) keyboard_events_size#75 (byte) keyboard_events_size#52 (byte) keyboard_events_size#49 
Alias (byte) form_control::key_event#0 = (byte~) form_control::$6 (byte) form_control::key_event#1 (byte) form_control::key_event#2 
Alias (byte) form_field_idx#44 = (byte) form_field_idx#6 
Alias (byte) form_field_idx#7 = (byte/signed word/word/dword/signed dword~) form_control::$20 
Alias (signed byte) form_cursor_count#7 = (signed word/signed byte/signed dword~) form_control::$23 
Alias (byte) form_field_idx#45 = (byte) form_field_idx#5 
Alias (byte) form_control::return#2 = (byte) form_control::return#7 
Alias (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#8 
Alias (byte) keyboard_events_size#16 = (byte) keyboard_events_size#35 
Alias (byte) keyboard_modifiers#15 = (byte) keyboard_modifiers#31 
Alias (byte) form_field_idx#18 = (byte) form_field_idx#9 
Alias (byte) form_field_idx#36 = (byte) form_field_idx#4 
Alias (byte*) print_screen#18 = (byte*) print_screen#8 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#35 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#36 
Alias (signed byte) form_cursor_count#17 = (signed byte) form_cursor_count#9 
Alias (byte) keyboard_events_size#17 = (byte) keyboard_events_size#36 
Alias (byte) keyboard_modifiers#16 = (byte) keyboard_modifiers#33 
Alias (byte) form_field_idx#10 = (byte) form_field_idx#24 
Successful SSA optimization Pass2AliasElimination
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#1 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#10 
Alias (byte*) print_line_cursor#36 = (byte*) print_line_cursor#54 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#4 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#3 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#3 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#6 
Alias (byte) keyboard_events_size#100 = (byte) keyboard_events_size#120 (byte) keyboard_events_size#111 (byte) keyboard_events_size#39 (byte) keyboard_events_size#21 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#3 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#3 
Alias (byte) bitmap_line_xdyi::x1#2 = (byte) bitmap_line_xdyi::x1#3 
Alias (byte) bitmap_line_xdyi::x#2 = (byte) bitmap_line_xdyi::x#5 
Alias (byte) bitmap_line_xdyi::yd#3 = (byte) bitmap_line_xdyi::yd#5 
Alias (byte) bitmap_line_xdyi::xd#2 = (byte) bitmap_line_xdyi::xd#6 
Alias (byte) bitmap_line_xdyd::x1#2 = (byte) bitmap_line_xdyd::x1#3 
Alias (byte) bitmap_line_xdyd::x#2 = (byte) bitmap_line_xdyd::x#5 
Alias (byte) bitmap_line_xdyd::yd#3 = (byte) bitmap_line_xdyd::yd#5 
Alias (byte) bitmap_line_xdyd::xd#2 = (byte) bitmap_line_xdyd::xd#6 
Alias (byte) bitmap_line_ydxi::y1#2 = (byte) bitmap_line_ydxi::y1#3 
Alias (byte) bitmap_line_ydxi::y#2 = (byte) bitmap_line_ydxi::y#5 
Alias (byte) bitmap_line_ydxi::xd#3 = (byte) bitmap_line_ydxi::xd#5 
Alias (byte) bitmap_line_ydxi::yd#2 = (byte) bitmap_line_ydxi::yd#6 
Alias (byte) bitmap_line_ydxd::y1#2 = (byte) bitmap_line_ydxd::y1#3 
Alias (byte) bitmap_line_ydxd::y#3 = (byte) bitmap_line_ydxd::y#6 
Alias (byte) bitmap_line_ydxd::xd#3 = (byte) bitmap_line_ydxd::xd#5 
Alias (byte) bitmap_line_ydxd::yd#2 = (byte) bitmap_line_ydxd::yd#6 
Alias (byte) keyboard_events_size#130 = (byte) keyboard_events_size#157 (byte) keyboard_events_size#159 (byte) keyboard_events_size#155 (byte) keyboard_events_size#153 (byte) keyboard_events_size#151 (byte) keyboard_events_size#149 (byte) keyboard_events_size#147 (byte) keyboard_events_size#145 (byte) keyboard_events_size#143 
Alias (byte) keyboard_modifiers#111 = (byte) keyboard_modifiers#137 (byte) keyboard_modifiers#139 (byte) keyboard_modifiers#135 (byte) keyboard_modifiers#133 (byte) keyboard_modifiers#131 (byte) keyboard_modifiers#129 (byte) keyboard_modifiers#127 (byte) keyboard_modifiers#125 (byte) keyboard_modifiers#123 
Alias (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#3 
Alias (byte) gfx_init_plane_8bppchunky::y#2 = (byte) gfx_init_plane_8bppchunky::y#4 
Alias (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#3 
Alias (byte) gfx_init_plane_horisontal::ay#2 = (byte) gfx_init_plane_horisontal::ay#3 
Alias (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#3 
Alias (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#3 
Alias (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#3 
Alias (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#3 
Alias (byte) gfx_init_plane_charset8::cr#2 = (byte) gfx_init_plane_charset8::cr#4 
Alias (byte*) gfx_init_plane_charset8::chargen#4 = (byte*) gfx_init_plane_charset8::chargen#7 
Alias (byte) gfx_init_plane_charset8::ch#2 = (byte) gfx_init_plane_charset8::ch#5 
Alias (byte*) form_control::field#0 = (byte*) form_control::field#1 (byte*) form_control::field#10 (byte*) form_control::field#4 
Alias (byte) keyboard_events_size#106 = (byte) keyboard_events_size#66 (byte) keyboard_events_size#48 
Alias (byte) keyboard_modifiers#100 = (byte) keyboard_modifiers#66 (byte) keyboard_modifiers#46 
Alias (byte) form_field_idx#15 = (byte) form_field_idx#61 (byte) form_field_idx#16 (byte) form_field_idx#22 
Alias (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#23 (signed byte) form_cursor_count#24 
Alias (byte) keyboard_events_size#108 = (byte) keyboard_events_size#50 (byte) keyboard_events_size#51 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#49 (byte) keyboard_modifiers#50 
Successful SSA optimization Pass2AliasElimination
Alias (byte) keyboard_events_size#108 = (byte) keyboard_events_size#16 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#15 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_line_cursor#36
Self Phi Eliminated (byte*) print_char_cursor#23
Self Phi Eliminated (byte*) print_line_cursor#24
Self Phi Eliminated (byte) keyboard_event_scan::row_scan#1
Self Phi Eliminated (byte) keyboard_event_scan::row#10
Self Phi Eliminated (byte*) bitmap_init::bitmap#1
Self Phi Eliminated (byte) bitmap_clear::y#2
Self Phi Eliminated (byte) bitmap_line_xdyi::yd#3
Self Phi Eliminated (byte) bitmap_line_xdyi::xd#2
Self Phi Eliminated (byte) bitmap_line_xdyi::x1#2
Self Phi Eliminated (byte) bitmap_line_xdyd::yd#3
Self Phi Eliminated (byte) bitmap_line_xdyd::xd#2
Self Phi Eliminated (byte) bitmap_line_xdyd::x1#2
Self Phi Eliminated (byte) bitmap_line_ydxi::xd#3
Self Phi Eliminated (byte) bitmap_line_ydxi::yd#2
Self Phi Eliminated (byte) bitmap_line_ydxi::y1#2
Self Phi Eliminated (byte) bitmap_line_ydxd::xd#3
Self Phi Eliminated (byte) bitmap_line_ydxd::yd#2
Self Phi Eliminated (byte) bitmap_line_ydxd::y1#2
Self Phi Eliminated (byte*) apply_preset::preset#13
Self Phi Eliminated (byte) gfx_mode::cy#2
Self Phi Eliminated (byte) keyboard_events_size#103
Self Phi Eliminated (byte) keyboard_modifiers#102
Self Phi Eliminated (byte) keyboard_events_size#58
Self Phi Eliminated (byte) keyboard_modifiers#58
Self Phi Eliminated (byte) keyboard_events_size#59
Self Phi Eliminated (byte) keyboard_modifiers#59
Self Phi Eliminated (byte) keyboard_events_size#44
Self Phi Eliminated (byte) keyboard_modifiers#41
Self Phi Eliminated (byte) gfx_init_charset::c#2
Self Phi Eliminated (byte) gfx_init_screen0::cy#2
Self Phi Eliminated (byte) gfx_init_screen1::cy#2
Self Phi Eliminated (byte) gfx_init_screen2::cy#2
Self Phi Eliminated (byte) gfx_init_screen3::cy#2
Self Phi Eliminated (byte) gfx_init_screen4::cy#2
Self Phi Eliminated (byte) gfx_init_plane_8bppchunky::y#2
Self Phi Eliminated (byte) gfx_init_plane_horisontal::ay#2
Self Phi Eliminated (byte) gfx_init_plane_horisontal2::ay#2
Self Phi Eliminated (byte) gfx_init_plane_vertical::by#2
Self Phi Eliminated (byte) gfx_init_plane_charset8::cr#2
Self Phi Eliminated (byte*) gfx_init_plane_charset8::chargen#4
Self Phi Eliminated (byte) gfx_init_plane_charset8::ch#2
Self Phi Eliminated (byte) gfx_init_plane_fill::fill#3
Self Phi Eliminated (byte) gfx_init_plane_fill::by#2
Self Phi Eliminated (byte*) print_screen#30
Self Phi Eliminated (byte*) print_line_cursor#50
Self Phi Eliminated (byte*) print_char_cursor#53
Self Phi Eliminated (signed byte) form_cursor_count#30
Self Phi Eliminated (byte) keyboard_events_size#63
Self Phi Eliminated (byte) keyboard_modifiers#63
Self Phi Eliminated (byte) form_field_idx#40
Self Phi Eliminated (signed byte) form_cursor_count#20
Self Phi Eliminated (byte) keyboard_events_size#46
Self Phi Eliminated (byte) keyboard_modifiers#44
Self Phi Eliminated (byte) form_field_idx#27
Self Phi Eliminated (byte) form_mode::preset_current#2
Self Phi Eliminated (byte*) print_screen#24
Self Phi Eliminated (byte*) print_line_cursor#43
Self Phi Eliminated (byte*) print_char_cursor#45
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_line_cursor#36 (byte*) print_line_cursor#2
Redundant Phi (byte*) print_line_cursor#1 (byte*) print_line_cursor#22
Redundant Phi (byte*) print_char_cursor#2 (byte*) print_line_cursor#22
Redundant Phi (byte*) print_str_at::str#4 (byte*) print_str_at::str#1
Redundant Phi (byte*) print_str_at::at#4 (byte*) print_str_at::at#1
Redundant Phi (byte*) print_line_cursor#38 (byte*) print_line_cursor#36
Redundant Phi (byte*) print_char_cursor#40 (byte*) print_char_cursor#38
Redundant Phi (byte*) print_char_cursor#23 (byte*) print_char_cursor#40
Redundant Phi (byte*) print_line_cursor#24 (byte*) print_screen#9
Redundant Phi (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Redundant Phi (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Redundant Phi (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Redundant Phi (byte*) bitmap_init::bitmap#2 (byte*) bitmap_init::bitmap#0
Redundant Phi (byte*) bitmap_init::bitmap#1 (byte*) bitmap_init::bitmap#2
Redundant Phi (byte) bitmap_clear::y#2 (byte) bitmap_clear::y#4
Redundant Phi (byte) bitmap_line::x0#1 (byte) bitmap_line::x0#0
Redundant Phi (byte) bitmap_line::x1#1 (byte) bitmap_line::x1#0
Redundant Phi (byte) bitmap_line::y0#1 (byte) bitmap_line::y0#0
Redundant Phi (byte) bitmap_line::y1#1 (byte) bitmap_line::y1#0
Redundant Phi (byte) bitmap_line_xdyi::yd#3 (byte) bitmap_line_xdyi::yd#2
Redundant Phi (byte) bitmap_line_xdyi::xd#2 (byte) bitmap_line_xdyi::xd#5
Redundant Phi (byte) bitmap_line_xdyi::x1#2 (byte) bitmap_line_xdyi::x1#6
Redundant Phi (byte) bitmap_line_xdyd::yd#3 (byte) bitmap_line_xdyd::yd#2
Redundant Phi (byte) bitmap_line_xdyd::xd#2 (byte) bitmap_line_xdyd::xd#5
Redundant Phi (byte) bitmap_line_xdyd::x1#2 (byte) bitmap_line_xdyd::x1#6
Redundant Phi (byte) bitmap_line_ydxi::xd#3 (byte) bitmap_line_ydxi::xd#2
Redundant Phi (byte) bitmap_line_ydxi::yd#2 (byte) bitmap_line_ydxi::yd#5
Redundant Phi (byte) bitmap_line_ydxi::y1#2 (byte) bitmap_line_ydxi::y1#6
Redundant Phi (byte) bitmap_line_ydxd::xd#3 (byte) bitmap_line_ydxd::xd#2
Redundant Phi (byte) bitmap_line_ydxd::yd#2 (byte) bitmap_line_ydxd::yd#5
Redundant Phi (byte) bitmap_line_ydxd::y1#2 (byte) bitmap_line_ydxd::y1#6
Redundant Phi (byte*) print_screen#27 (byte*) print_screen#0
Redundant Phi (byte*) print_line_cursor#48 (byte*) print_screen#0
Redundant Phi (byte*) print_char_cursor#51 (byte*) print_screen#0
Redundant Phi (signed byte) form_cursor_count#28 (signed byte) form_cursor_count#26
Redundant Phi (byte) keyboard_events_size#101 (byte) keyboard_events_size#0
Redundant Phi (byte) keyboard_modifiers#57 (byte) keyboard_modifiers#0
Redundant Phi (byte) form_field_idx#38 (byte) form_field_idx#36
Redundant Phi (byte*) print_screen#13 (byte*) print_screen#17
Redundant Phi (byte*) print_line_cursor#26 (byte*) print_line_cursor#17
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#18
Redundant Phi (signed byte) form_cursor_count#0 (signed byte) form_cursor_count#13
Redundant Phi (byte) keyboard_events_size#25 (byte) keyboard_events_size#13
Redundant Phi (byte) keyboard_modifiers#22 (byte) keyboard_modifiers#13
Redundant Phi (byte) form_field_idx#0 (byte) form_field_idx#14
Redundant Phi (byte) keyboard_events_size#26 (byte) keyboard_events_size#11
Redundant Phi (byte) keyboard_modifiers#23 (byte) keyboard_modifiers#11
Redundant Phi (byte) get_vic_charset::idx#1 (byte) get_vic_charset::idx#0
Redundant Phi (byte) apply_preset::idx#1 (byte) apply_preset::idx#0
Redundant Phi (byte*) apply_preset::preset#13 (byte*) apply_preset::preset#14
Redundant Phi (byte) keyboard_events_size#130 (byte) keyboard_events_size#25
Redundant Phi (byte) keyboard_modifiers#111 (byte) keyboard_modifiers#22
Redundant Phi (byte) gfx_mode::cy#2 (byte) gfx_mode::cy#4
Redundant Phi (byte) keyboard_events_size#103 (byte) keyboard_events_size#126
Redundant Phi (byte) keyboard_modifiers#102 (byte) keyboard_modifiers#109
Redundant Phi (byte) keyboard_events_size#58 (byte) keyboard_events_size#103
Redundant Phi (byte) keyboard_modifiers#58 (byte) keyboard_modifiers#102
Redundant Phi (byte) keyboard_events_size#59 (byte) keyboard_events_size#103
Redundant Phi (byte) keyboard_modifiers#59 (byte) keyboard_modifiers#102
Redundant Phi (byte) keyboard_events_size#44 (byte) keyboard_events_size#45
Redundant Phi (byte) keyboard_modifiers#41 (byte) keyboard_modifiers#42
Redundant Phi (byte) keyboard_events_size#28 (byte) keyboard_events_size#100
Redundant Phi (byte) keyboard_modifiers#10 (byte) keyboard_modifiers#21
Redundant Phi (byte) keyboard_events_size#10 (byte) keyboard_events_size#24
Redundant Phi (byte) gfx_init_charset::c#2 (byte) gfx_init_charset::c#4
Redundant Phi (byte) gfx_init_screen0::cy#2 (byte) gfx_init_screen0::cy#4
Redundant Phi (byte) gfx_init_screen1::cy#2 (byte) gfx_init_screen1::cy#4
Redundant Phi (byte) gfx_init_screen2::cy#2 (byte) gfx_init_screen2::cy#4
Redundant Phi (byte) gfx_init_screen3::cy#2 (byte) gfx_init_screen3::cy#4
Redundant Phi (byte) gfx_init_screen4::cy#2 (byte) gfx_init_screen4::cy#4
Redundant Phi (byte) gfx_init_plane_8bppchunky::y#2 (byte) gfx_init_plane_8bppchunky::y#6
Redundant Phi (byte) gfx_init_plane_horisontal::ay#2 (byte) gfx_init_plane_horisontal::ay#4
Redundant Phi (byte) gfx_init_plane_horisontal2::ay#2 (byte) gfx_init_plane_horisontal2::ay#4
Redundant Phi (byte) gfx_init_plane_vertical::by#2 (byte) gfx_init_plane_vertical::by#4
Redundant Phi (byte) gfx_init_plane_charset8::cr#2 (byte) gfx_init_plane_charset8::cr#6
Redundant Phi (byte*) gfx_init_plane_charset8::chargen#4 (byte*) gfx_init_plane_charset8::chargen#1
Redundant Phi (byte) gfx_init_plane_charset8::ch#2 (byte) gfx_init_plane_charset8::ch#7
Redundant Phi (byte) gfx_init_plane_fill::fill#3 (byte) gfx_init_plane_fill::fill#4
Redundant Phi (byte) gfx_init_plane_fill::by#2 (byte) gfx_init_plane_fill::by#4
Redundant Phi (byte*) print_screen#21 (byte*) print_screen#14
Redundant Phi (byte*) print_line_cursor#41 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#43 (byte*) print_char_cursor#11
Redundant Phi (signed byte) form_cursor_count#48 (signed byte) form_cursor_count#1
Redundant Phi (byte) keyboard_events_size#104 (byte) keyboard_events_size#27
Redundant Phi (byte) keyboard_modifiers#103 (byte) keyboard_modifiers#24
Redundant Phi (byte) form_field_idx#56 (byte) form_field_idx#1
Redundant Phi (byte*) print_screen#15 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_screen#1
Redundant Phi (byte*) print_char_cursor#12 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#24
Redundant Phi (byte*) print_char_cursor#13 (byte*) print_line_cursor#24
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#22
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#2
Redundant Phi (byte*) print_screen#16 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#14 (byte*) print_screen#1
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#15 (byte*) print_line_cursor#24
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_line_cursor#24
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_char_cursor#22
Redundant Phi (byte*) print_line_cursor#16 (byte*) print_line_cursor#2
Redundant Phi (byte*) print_screen#30 (byte*) print_screen#16
Redundant Phi (byte*) print_line_cursor#50 (byte*) print_line_cursor#16
Redundant Phi (byte*) print_char_cursor#53 (byte*) print_char_cursor#17
Redundant Phi (signed byte) form_cursor_count#30 (signed byte) form_cursor_count#48
Redundant Phi (byte) keyboard_events_size#63 (byte) keyboard_events_size#104
Redundant Phi (byte) keyboard_modifiers#63 (byte) keyboard_modifiers#103
Redundant Phi (byte) form_field_idx#40 (byte) form_field_idx#56
Redundant Phi (signed byte) form_cursor_count#20 (signed byte) form_cursor_count#21
Redundant Phi (byte) keyboard_events_size#46 (byte) keyboard_events_size#47
Redundant Phi (byte) keyboard_modifiers#44 (byte) keyboard_modifiers#45
Redundant Phi (byte) form_field_idx#27 (byte) form_field_idx#28
Redundant Phi (byte) form_mode::preset_current#2 (byte) form_mode::preset_current#6
Redundant Phi (byte*) print_screen#24 (byte*) print_screen#23
Redundant Phi (byte*) print_line_cursor#43 (byte*) print_line_cursor#42
Redundant Phi (byte*) print_char_cursor#45 (byte*) print_char_cursor#44
Redundant Phi (signed byte) form_cursor_count#12 (signed byte) form_cursor_count#16
Redundant Phi (byte) keyboard_events_size#105 (byte) keyboard_events_size#108
Redundant Phi (byte) keyboard_modifiers#104 (byte) keyboard_modifiers#14
Redundant Phi (byte) form_field_idx#13 (byte) form_field_idx#18
Redundant Phi (byte*) form_set_screen::line#0 (byte*) form_set_screen::screen#0
Redundant Phi (byte) form_field_idx#15 (byte) form_field_idx#27
Redundant Phi (signed byte) form_cursor_count#14 (signed byte) form_cursor_count#20
Redundant Phi (byte) keyboard_events_size#106 (byte) keyboard_events_size#46
Redundant Phi (byte) keyboard_modifiers#100 (byte) keyboard_modifiers#44
Redundant Phi (byte) keyboard_events_size#14 (byte) keyboard_events_size#100
Redundant Phi (byte) keyboard_modifiers#14 (byte) keyboard_modifiers#21
Redundant Phi (byte) keyboard_events_size#108 (byte) keyboard_events_size#24
Redundant Phi (byte*) print_screen#18 (byte*) print_screen#14
Redundant Phi (byte*) print_line_cursor#18 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#19 (byte*) print_char_cursor#11
Redundant Phi (signed byte) form_cursor_count#17 (signed byte) form_cursor_count#1
Redundant Phi (byte) keyboard_events_size#17 (byte) keyboard_events_size#27
Redundant Phi (byte) keyboard_modifiers#16 (byte) keyboard_modifiers#24
Redundant Phi (byte) form_field_idx#10 (byte) form_field_idx#1
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) print_char_cursor#47 (byte*) print_screen#9
Redundant Phi (byte*) print_line_cursor#45 (byte*) print_screen#9
Redundant Phi (byte*) print_screen#9 (byte*) print_screen#1
Redundant Phi (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Redundant Phi (byte) keyboard_events_size#22 (byte) keyboard_events_size#100
Redundant Phi (byte*) print_screen#17 (byte*) print_screen#23
Redundant Phi (byte*) print_line_cursor#17 (byte*) print_line_cursor#42
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_char_cursor#44
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_str_lines::$0 [185] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2
Simple Condition (bool~) print_str_lines::$2 [192] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@5
Simple Condition (bool~) print_str_lines::$3 [195] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@4
Simple Condition (bool~) print_str_at::$0 [211] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2
Simple Condition (bool~) print_ln::$1 [222] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1
Simple Condition (bool~) print_cls::$1 [238] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) keyboard_event_scan::$13 [356] if((byte) keyboard_event_scan::row_scan#0!=*((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
Simple Condition (bool~) keyboard_event_scan::$25 [365] if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@8
Simple Condition (bool~) keyboard_event_scan::$18 [371] if((byte~) keyboard_event_scan::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$24 [376] if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$20 [380] if((byte) keyboard_events_size#18==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@13
Simple Condition (bool~) keyboard_event_scan::$22 [386] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@14
Simple Condition (bool~) keyboard_event_scan::$2 [405] if((byte~) keyboard_event_scan::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$5 [414] if((byte~) keyboard_event_scan::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$8 [426] if((byte~) keyboard_event_scan::$6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@3
Simple Condition (bool~) keyboard_event_scan::$11 [438] if((byte~) keyboard_event_scan::$9==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@4
Simple Condition (bool~) keyboard_event_get::$0 [461] if((byte) keyboard_events_size#100==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@1
Simple Condition (bool~) bitmap_init::$4 [490] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$5 [494] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$12 [509] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@6
Simple Condition (bool~) bitmap_init::$15 [513] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition (bool~) bitmap_clear::$1 [529] if((byte) bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition (bool~) bitmap_clear::$2 [533] if((byte) bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition (bool~) bitmap_line::$0 [547] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
Simple Condition (bool~) bitmap_line::$12 [552] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@20
Simple Condition (bool~) bitmap_line::$2 [557] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@10
Simple Condition (bool~) bitmap_line::$8 [562] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@15
Simple Condition (bool~) bitmap_line::$4 [567] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@11
Simple Condition (bool~) bitmap_line::$18 [600] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@25
Simple Condition (bool~) bitmap_line::$14 [605] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@21
Simple Condition (bool~) bitmap_line_xdyi::$4 [648] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
Simple Condition (bool~) bitmap_line_xdyi::$7 [652] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
Simple Condition (bool~) bitmap_line_xdyd::$4 [671] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
Simple Condition (bool~) bitmap_line_xdyd::$7 [675] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
Simple Condition (bool~) bitmap_line_ydxi::$4 [694] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
Simple Condition (bool~) bitmap_line_ydxi::$7 [698] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
Simple Condition (bool~) bitmap_line_ydxd::$4 [718] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
Simple Condition (bool~) bitmap_line_ydxd::$7 [722] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
Simple Condition (bool~) get_plane::$0 [780] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_plane::@1
Simple Condition (bool~) get_plane::$1 [785] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_plane::@2
Simple Condition (bool~) get_plane::$2 [790] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_plane::@3
Simple Condition (bool~) get_plane::$3 [795] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_plane::@4
Simple Condition (bool~) get_plane::$4 [800] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_plane::@5
Simple Condition (bool~) get_plane::$5 [805] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto get_plane::@6
Simple Condition (bool~) get_plane::$6 [810] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto get_plane::@7
Simple Condition (bool~) get_plane::$7 [815] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto get_plane::@8
Simple Condition (bool~) get_plane::$8 [820] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto get_plane::@9
Simple Condition (bool~) get_plane::$9 [825] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto get_plane::@10
Simple Condition (bool~) get_plane::$10 [830] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto get_plane::@11
Simple Condition (bool~) get_plane::$11 [835] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $b) goto get_plane::@12
Simple Condition (bool~) get_plane::$12 [840] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $c) goto get_plane::@13
Simple Condition (bool~) get_plane::$14 [846] if((byte) get_plane::idx#10!=(byte/signed byte/word/signed word/dword/signed dword) $d) goto get_plane::@27
Simple Condition (bool~) get_vic_screen::$0 [856] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_screen::@1
Simple Condition (bool~) get_vic_screen::$1 [860] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_screen::@2
Simple Condition (bool~) get_vic_screen::$2 [864] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_vic_screen::@3
Simple Condition (bool~) get_vic_screen::$3 [868] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_vic_screen::@4
Simple Condition (bool~) get_vic_screen::$5 [873] if((byte) get_vic_screen::idx#2!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_vic_screen::@9
Simple Condition (bool~) get_vic_charset::$0 [881] if((byte) get_vic_charset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_charset::@1
Simple Condition (bool~) get_vic_charset::$2 [886] if((byte) get_vic_charset::idx#0!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_charset::@3
Simple Condition (bool~) apply_preset::$0 [947] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto apply_preset::@1
Simple Condition (bool~) apply_preset::$1 [951] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 1) goto apply_preset::@2
Simple Condition (bool~) apply_preset::$2 [955] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 2) goto apply_preset::@3
Simple Condition (bool~) apply_preset::$3 [959] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 3) goto apply_preset::@4
Simple Condition (bool~) apply_preset::$4 [963] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 4) goto apply_preset::@5
Simple Condition (bool~) apply_preset::$5 [967] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 5) goto apply_preset::@6
Simple Condition (bool~) apply_preset::$6 [971] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 6) goto apply_preset::@7
Simple Condition (bool~) apply_preset::$7 [975] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 7) goto apply_preset::@8
Simple Condition (bool~) apply_preset::$8 [979] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 8) goto apply_preset::@9
Simple Condition (bool~) apply_preset::$9 [983] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 9) goto apply_preset::@10
Simple Condition (bool~) apply_preset::$10 [987] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) $a) goto apply_preset::@11
Simple Condition (bool~) apply_preset::$11 [996] if((byte) apply_preset::i#1!=(byte) form_fields_cnt#0) goto apply_preset::@45
Simple Condition (bool~) render_preset_name::$0 [1001] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_preset_name::@1
Simple Condition (bool~) render_preset_name::$1 [1005] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_preset_name::@2
Simple Condition (bool~) render_preset_name::$2 [1009] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_preset_name::@3
Simple Condition (bool~) render_preset_name::$3 [1013] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto render_preset_name::@4
Simple Condition (bool~) render_preset_name::$4 [1017] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_preset_name::@5
Simple Condition (bool~) render_preset_name::$5 [1021] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto render_preset_name::@6
Simple Condition (bool~) render_preset_name::$6 [1025] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto render_preset_name::@7
Simple Condition (bool~) render_preset_name::$7 [1029] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto render_preset_name::@8
Simple Condition (bool~) render_preset_name::$8 [1033] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto render_preset_name::@9
Simple Condition (bool~) render_preset_name::$9 [1037] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto render_preset_name::@10
Simple Condition (bool~) render_preset_name::$10 [1041] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto render_preset_name::@11
Simple Condition (bool~) gfx_mode::$1 [1129] if(*((byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1
Simple Condition (bool~) gfx_mode::$3 [1133] if(*((byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2
Simple Condition (bool~) gfx_mode::$5 [1140] if(*((byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3
Simple Condition (bool~) gfx_mode::$7 [1147] if(*((byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4
Simple Condition (bool~) gfx_mode::$9 [1154] if(*((byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5
Simple Condition (bool~) gfx_mode::$11 [1161] if(*((byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6
Simple Condition (bool~) gfx_mode::$15 [1172] if(*((byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7
Simple Condition (bool~) gfx_mode::$17 [1179] if(*((byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8
Simple Condition (bool~) gfx_mode::$19 [1188] if(*((byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9
Simple Condition (bool~) gfx_mode::$82 [1291] if((byte) gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@22
Simple Condition (bool~) gfx_mode::$83 [1295] if((byte) gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@21
Simple Condition (bool~) gfx_mode::$72 [1311] if(*((byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@10
Simple Condition (bool~) gfx_mode::$84 [1320] if((byte) gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@26
Simple Condition (bool~) gfx_mode::$85 [1325] if((byte) gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@29
Simple Condition (bool~) gfx_mode::$86 [1331] if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@35
Simple Condition (bool~) gfx_mode::$90 [1346] if((byte) gfx_mode::keyboard_event#0!=(byte) KEY_SPACE#0) goto gfx_mode::@42
Simple Condition (bool~) gfx_init_charset::$0 [1380] if((byte) gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2
Simple Condition (bool~) gfx_init_charset::$1 [1384] if((byte) gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1
Simple Condition (bool~) gfx_init_screen0::$4 [1400] if((byte) gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2
Simple Condition (bool~) gfx_init_screen0::$5 [1404] if((byte) gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1
Simple Condition (bool~) gfx_init_screen1::$2 [1417] if((byte) gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2
Simple Condition (bool~) gfx_init_screen1::$3 [1421] if((byte) gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1
Simple Condition (bool~) gfx_init_screen2::$5 [1439] if((byte) gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2
Simple Condition (bool~) gfx_init_screen2::$6 [1443] if((byte) gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1
Simple Condition (bool~) gfx_init_screen3::$4 [1458] if((byte) gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2
Simple Condition (bool~) gfx_init_screen3::$5 [1462] if((byte) gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1
Simple Condition (bool~) gfx_init_screen4::$0 [1473] if((byte) gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2
Simple Condition (bool~) gfx_init_screen4::$1 [1477] if((byte) gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1
Simple Condition (bool~) gfx_init_vic_bitmap::$5 [1497] if((byte) gfx_init_vic_bitmap::l#1<(byte) gfx_init_vic_bitmap::lines_cnt#0) goto gfx_init_vic_bitmap::@1
Simple Condition (bool~) gfx_init_plane_8bppchunky::$7 [1513] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3
Simple Condition (bool~) gfx_init_plane_8bppchunky::$11 [1522] if((word) gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2
Simple Condition (bool~) gfx_init_plane_8bppchunky::$12 [1532] if((byte) gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1
Simple Condition (bool~) gfx_init_plane_horisontal::$9 [1554] if((byte~) gfx_init_plane_horisontal::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_horisontal::@3
Simple Condition (bool~) gfx_init_plane_horisontal::$10 [1564] if((byte) gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2
Simple Condition (bool~) gfx_init_plane_horisontal::$11 [1568] if((byte) gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1
Simple Condition (bool~) gfx_init_plane_horisontal2::$10 [1596] if((byte) gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2
Simple Condition (bool~) gfx_init_plane_horisontal2::$11 [1600] if((byte) gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1
Simple Condition (bool~) gfx_init_plane_vertical::$8 [1624] if((byte) gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2
Simple Condition (bool~) gfx_init_plane_vertical::$9 [1628] if((byte) gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1
Simple Condition (bool~) gfx_init_plane_charset8::$10 [1659] if((byte~) gfx_init_plane_charset8::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4
Simple Condition (bool~) gfx_init_plane_charset8::$12 [1668] if((byte) gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3
Simple Condition (bool~) gfx_init_plane_charset8::$13 [1674] if((byte) gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2
Simple Condition (bool~) gfx_init_plane_charset8::$14 [1678] if((byte) gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1
Simple Condition (bool~) gfx_init_plane_fill::$10 [1718] if((byte) gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2
Simple Condition (bool~) gfx_init_plane_fill::$11 [1722] if((byte) gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1
Simple Condition (bool~) form_mode::$34 [1809] if((byte) form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1
Simple Condition (bool~) form_mode::$35 [1819] if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@7
Simple Condition (bool~) form_mode::$38 [1832] if((byte~) form_mode::$36==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_mode::@14
Simple Condition (bool~) form_mode::$40 [1836] if((byte) form_mode::preset_current#6==*((byte*) form_preset#0)) goto form_mode::@15
Simple Condition (bool~) form_set_screen::$3 [1876] if((byte) form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1
Simple Condition (bool~) form_render_values::$1 [1900] if((byte) form_render_values::idx#1<(byte) form_fields_cnt#0) goto form_render_values::@1
Simple Condition (bool~) form_control::$2 [1912] if((signed byte) form_cursor_count#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@1
Simple Condition (bool~) form_control::$4 [1916] if((signed byte) form_cursor_count#15<(signed word/signed byte/signed dword~) form_control::$3) goto form_control::@2
Simple Condition (bool~) form_control::$8 [1938] if((byte) form_control::key_event#0!=(byte) KEY_CRSR_DOWN#0) goto form_control::@4
Simple Condition (bool~) form_control::$10 [1942] if((byte) form_control::key_event#0!=(byte) KEY_CRSR_RIGHT#0) goto form_control::@5
Simple Condition (bool~) form_control::$17 [1948] if((byte~) form_control::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@19
Simple Condition (bool~) form_control::$22 [1953] if((byte) form_field_idx#45!=(byte) form_fields_cnt#0) goto form_control::@23
Simple Condition (bool~) form_control::$19 [1958] if((byte) form_field_idx#44!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@20
Simple Condition (bool~) form_control::$12 [1980] if((byte) form_control::key_event#0!=(byte) KEY_SPACE#0) goto form_control::@6
Simple Condition (bool~) form_control::$25 [1984] if((byte~) form_control::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@26
Simple Condition (bool~) form_control::$29 [1989] if(*((byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@30
Simple Condition (bool~) form_control::$27 [1994] if(*((byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@27
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = $30
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte) PROCPORT_KERNEL_IO#0 = $36
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = $37
Constant (const byte*) CHARGEN#0 = ((byte*))$d000
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))$d000
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))$d001
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))$d010
Constant (const byte*) RASTER#0 = ((byte*))$d012
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))$d015
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))$d017
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))$d01b
Constant (const byte*) SPRITES_MC#0 = ((byte*))$d01c
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))$d01d
Constant (const byte*) BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const byte*) BGCOL1#0 = ((byte*))$d021
Constant (const byte*) BGCOL2#0 = ((byte*))$d022
Constant (const byte*) BGCOL3#0 = ((byte*))$d023
Constant (const byte*) BGCOL4#0 = ((byte*))$d024
Constant (const byte*) SPRITES_MC1#0 = ((byte*))$d025
Constant (const byte*) SPRITES_MC2#0 = ((byte*))$d026
Constant (const byte*) SPRITES_COLS#0 = ((byte*))$d027
Constant (const byte*) VIC_CONTROL#0 = ((byte*))$d011
Constant (const byte*) D011#0 = ((byte*))$d011
Constant (const byte) VIC_RST8#0 = $80
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))$d016
Constant (const byte*) D016#0 = ((byte*))$d016
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))$d018
Constant (const byte*) VIC_MEMORY#0 = ((byte*))$d018
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))$d013
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))$d014
Constant (const byte*) IRQ_STATUS#0 = ((byte*))$d019
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))$d01a
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))$d800
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))$dc00
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))$dc01
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))$dc02
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))$dc03
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))$dc0d
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))$dd00
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))$dd01
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))$dd02
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))$dd03
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))$dd0d
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))$314
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))$fffe
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) LIGHT_GREY#0 = $f
Constant (const byte*) DTV_FEATURE#0 = ((byte*))$d03f
Constant (const byte) DTV_FEATURE_ENABLE#0 = 1
Constant (const byte) DTV_FEATURE_DISABLE_TIL_RESET#0 = 2
Constant (const byte*) DTV_CONTROL#0 = ((byte*))$d03c
Constant (const byte) DTV_LINEAR#0 = 1
Constant (const byte) DTV_BORDER_OFF#0 = 2
Constant (const byte) DTV_HIGHCOLOR#0 = 4
Constant (const byte) DTV_OVERSCAN#0 = 8
Constant (const byte) DTV_COLORRAM_OFF#0 = $10
Constant (const byte) DTV_BADLINE_OFF#0 = $20
Constant (const byte) DTV_CHUNKY#0 = $40
Constant (const byte*) DTV_PALETTE#0 = ((byte*))$d200
Constant (const byte[$10]) DTV_PALETTE_DEFAULT#0 = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
Constant (const byte*) DTV_PLANEA_START_LO#0 = ((byte*))$d03a
Constant (const byte*) DTV_PLANEA_START_MI#0 = ((byte*))$d03b
Constant (const byte*) DTV_PLANEA_START_HI#0 = ((byte*))$d045
Constant (const byte*) DTV_PLANEA_STEP#0 = ((byte*))$d046
Constant (const byte*) DTV_PLANEA_MODULO_LO#0 = ((byte*))$d038
Constant (const byte*) DTV_PLANEA_MODULO_HI#0 = ((byte*))$d039
Constant (const byte*) DTV_PLANEB_START_LO#0 = ((byte*))$d049
Constant (const byte*) DTV_PLANEB_START_MI#0 = ((byte*))$d04a
Constant (const byte*) DTV_PLANEB_START_HI#0 = ((byte*))$d04b
Constant (const byte*) DTV_PLANEB_STEP#0 = ((byte*))$d04c
Constant (const byte*) DTV_PLANEB_MODULO_LO#0 = ((byte*))$d047
Constant (const byte*) DTV_PLANEB_MODULO_HI#0 = ((byte*))$d048
Constant (const byte*) DTV_SPRITE_BANK#0 = ((byte*))$d04d
Constant (const byte*) DTV_COLOR_BANK_LO#0 = ((byte*))$d036
Constant (const byte*) DTV_COLOR_BANK_HI#0 = ((byte*))$d037
Constant (const dword) DTV_COLOR_BANK_DEFAULT#0 = $1d800
Constant (const byte*) DTV_GRAPHICS_VIC_BANK#0 = ((byte*))$d03d
Constant (const byte*) DTV_GRAPHICS_HICOL_BANK#0 = ((byte*))$d03e
Constant (const byte*) dtvSetCpuBankSegment1::cpuBank#0 = ((byte*))$ff
Constant (const byte*) DTV_BLITTER_SRCA_LO#0 = ((byte*))$d320
Constant (const byte*) DTV_BLITTER_SRCA_MI#0 = ((byte*))$d321
Constant (const byte*) DTV_BLITTER_SRCA_HI#0 = ((byte*))$d322
Constant (const byte*) DTV_BLITTER_SRCA_MOD_LO#0 = ((byte*))$d323
Constant (const byte*) DTV_BLITTER_SRCA_MOD_HI#0 = ((byte*))$d324
Constant (const byte*) DTV_BLITTER_SRCA_LIN_LO#0 = ((byte*))$d325
Constant (const byte*) DTV_BLITTER_SRCA_LIN_HI#0 = ((byte*))$d326
Constant (const byte*) DTV_BLITTER_SRCA_STEP#0 = ((byte*))$d327
Constant (const byte*) DTV_BLITTER_SRCB_LO#0 = ((byte*))$d328
Constant (const byte*) DTV_BLITTER_SRCB_MI#0 = ((byte*))$d329
Constant (const byte*) DTV_BLITTER_SRCB_HI#0 = ((byte*))$d32a
Constant (const byte*) DTV_BLITTER_SRCB_MOD_LO#0 = ((byte*))$d32b
Constant (const byte*) DTV_BLITTER_SRCB_MOD_HI#0 = ((byte*))$d32c
Constant (const byte*) DTV_BLITTER_SRCB_LIN_LO#0 = ((byte*))$d32d
Constant (const byte*) DTV_BLITTER_SRCB_LIN_HI#0 = ((byte*))$d32e
Constant (const byte*) DTV_BLITTER_SRCB_STEP#0 = ((byte*))$d32f
Constant (const byte*) DTV_BLITTER_DEST_LO#0 = ((byte*))$d330
Constant (const byte*) DTV_BLITTER_DEST_MI#0 = ((byte*))$d331
Constant (const byte*) DTV_BLITTER_DEST_HI#0 = ((byte*))$d332
Constant (const byte*) DTV_BLITTER_DEST_MOD_LO#0 = ((byte*))$d333
Constant (const byte*) DTV_BLITTER_DEST_MOD_HI#0 = ((byte*))$d334
Constant (const byte*) DTV_BLITTER_DEST_LIN_LO#0 = ((byte*))$d335
Constant (const byte*) DTV_BLITTER_DEST_LIN_HI#0 = ((byte*))$d336
Constant (const byte*) DTV_BLITTER_DEST_STEP#0 = ((byte*))$d337
Constant (const byte*) DTV_BLITTER_LEN_LO#0 = ((byte*))$d338
Constant (const byte*) DTV_BLITTER_LEN_HI#0 = ((byte*))$d339
Constant (const byte*) DTV_BLITTER_CONTROL#0 = ((byte*))$d33a
Constant (const byte) DTV_BLIT_FORCE_START#0 = 1
Constant (const byte) DTV_BLIT_SRCA_FWD#0 = 2
Constant (const byte) DTV_BLIT_SRCB_FWD#0 = 4
Constant (const byte) DTV_BLIT_DEST_FWD#0 = 8
Constant (const byte) DTV_BLIT_VIC_IRQ#0 = $10
Constant (const byte) DTV_BLIT_CIA_IRQ#0 = $20
Constant (const byte) DTV_BLIT_VBLANK#0 = $40
Constant (const byte) DTV_BLIT_IRQ_EN#0 = $80
Constant (const byte*) DTV_BLITTER_TRANSPARANCY#0 = ((byte*))$d33b
Constant (const byte) DTV_BLIT_DISABLE_B#0 = 1
Constant (const byte) DTV_BLIT_WRITE_TRANSPARENT#0 = 2
Constant (const byte) DTV_BLIT_WRITE_NONTRANSPARENT#0 = 4
Constant (const byte) DTV_BLIT_TRANSPARANCY_NONE#0 = 0
Constant (const byte*) DTV_BLITTER_ALU#0 = ((byte*))$d33e
Constant (const byte) DTV_BLIT_SHIFT0#0 = 0
Constant (const byte) DTV_BLIT_SHIFT1#0 = 1
Constant (const byte) DTV_BLIT_SHIFT2#0 = 2
Constant (const byte) DTV_BLIT_SHIFT3#0 = 3
Constant (const byte) DTV_BLIT_SHIFT4#0 = 4
Constant (const byte) DTV_BLIT_SHIFT5#0 = 5
Constant (const byte) DTV_BLIT_SHIFT6#0 = 6
Constant (const byte) DTV_BLIT_SHIFT7#0 = 7
Constant (const byte) DTV_BLIT_AND#0 = 0
Constant (const byte) DTV_BLIT_NAND#0 = 8
Constant (const byte) DTV_BLIT_NOR#0 = $10
Constant (const byte) DTV_BLIT_OR#0 = $18
Constant (const byte) DTV_BLIT_XOR#0 = $20
Constant (const byte) DTV_BLIT_XNOR#0 = $28
Constant (const byte) DTV_BLIT_ADD#0 = $30
Constant (const byte) DTV_BLIT_SUB#0 = $38
Constant (const byte*) DTV_BLITTER_CONTROL2#0 = ((byte*))$d33f
Constant (const byte) DTV_BLIT_CLEAR_IRQ#0 = 1
Constant (const byte) DTV_BLIT_SRCA_CONT#0 = 2
Constant (const byte) DTV_BLIT_SRCB_CONT#0 = 4
Constant (const byte) DTV_BLIT_DEST_CONT#0 = 8
Constant (const byte) DTV_BLIT_STATUS_BUSY#0 = 1
Constant (const byte) DTV_BLIT_STATUS_IRQ#0 = 2
Constant (const byte*) print_screen#0 = ((byte*))$400
Constant (const byte[]) print_hextab#0 = $69
Constant (const byte) KEY_DEL#0 = 0
Constant (const byte) KEY_RETURN#0 = 1
Constant (const byte) KEY_CRSR_RIGHT#0 = 2
Constant (const byte) KEY_F7#0 = 3
Constant (const byte) KEY_F1#0 = 4
Constant (const byte) KEY_F3#0 = 5
Constant (const byte) KEY_F5#0 = 6
Constant (const byte) KEY_CRSR_DOWN#0 = 7
Constant (const byte) KEY_3#0 = 8
Constant (const byte) KEY_W#0 = 9
Constant (const byte) KEY_A#0 = $a
Constant (const byte) KEY_4#0 = $b
Constant (const byte) KEY_Z#0 = $c
Constant (const byte) KEY_S#0 = $d
Constant (const byte) KEY_E#0 = $e
Constant (const byte) KEY_LSHIFT#0 = $f
Constant (const byte) KEY_5#0 = $10
Constant (const byte) KEY_R#0 = $11
Constant (const byte) KEY_D#0 = $12
Constant (const byte) KEY_6#0 = $13
Constant (const byte) KEY_C#0 = $14
Constant (const byte) KEY_F#0 = $15
Constant (const byte) KEY_T#0 = $16
Constant (const byte) KEY_X#0 = $17
Constant (const byte) KEY_7#0 = $18
Constant (const byte) KEY_Y#0 = $19
Constant (const byte) KEY_G#0 = $1a
Constant (const byte) KEY_8#0 = $1b
Constant (const byte) KEY_B#0 = $1c
Constant (const byte) KEY_H#0 = $1d
Constant (const byte) KEY_U#0 = $1e
Constant (const byte) KEY_V#0 = $1f
Constant (const byte) KEY_9#0 = $20
Constant (const byte) KEY_I#0 = $21
Constant (const byte) KEY_J#0 = $22
Constant (const byte) KEY_0#0 = $23
Constant (const byte) KEY_M#0 = $24
Constant (const byte) KEY_K#0 = $25
Constant (const byte) KEY_O#0 = $26
Constant (const byte) KEY_N#0 = $27
Constant (const byte) KEY_PLUS#0 = $28
Constant (const byte) KEY_P#0 = $29
Constant (const byte) KEY_L#0 = $2a
Constant (const byte) KEY_MINUS#0 = $2b
Constant (const byte) KEY_DOT#0 = $2c
Constant (const byte) KEY_COLON#0 = $2d
Constant (const byte) KEY_AT#0 = $2e
Constant (const byte) KEY_COMMA#0 = $2f
Constant (const byte) KEY_POUND#0 = $30
Constant (const byte) KEY_ASTERISK#0 = $31
Constant (const byte) KEY_SEMICOLON#0 = $32
Constant (const byte) KEY_HOME#0 = $33
Constant (const byte) KEY_RSHIFT#0 = $34
Constant (const byte) KEY_EQUALS#0 = $35
Constant (const byte) KEY_ARROW_UP#0 = $36
Constant (const byte) KEY_SLASH#0 = $37
Constant (const byte) KEY_1#0 = $38
Constant (const byte) KEY_ARROW_LEFT#0 = $39
Constant (const byte) KEY_CTRL#0 = $3a
Constant (const byte) KEY_2#0 = $3b
Constant (const byte) KEY_SPACE#0 = $3c
Constant (const byte) KEY_COMMODORE#0 = $3d
Constant (const byte) KEY_Q#0 = $3e
Constant (const byte) KEY_RUNSTOP#0 = $3f
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
Constant (const byte[8]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, $10, $20, $40, $80 }
Constant (const byte[8]) keyboard_events#0 = { fill( 8, 0) }
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) KEY_MODIFIER_LSHIFT#0 = 1
Constant (const byte) KEY_MODIFIER_RSHIFT#0 = 2
Constant (const byte) KEY_MODIFIER_CTRL#0 = 4
Constant (const byte) KEY_MODIFIER_COMMODORE#0 = 8
Constant (const byte[8]) keyboard_scan_values#0 = { fill( 8, 0) }
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_get::return#0 = $ff
Constant (const byte[$100]) bitmap_plot_xlo#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_xhi#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_ylo#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_yhi#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_bit#0 = { fill( $100, 0) }
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte*) bitmap_init::yoffs#0 = ((byte*))0
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word/signed word/dword/signed dword) bitmap_init::$13 = $28*8
Constant (const byte) bitmap_clear::y#0 = 0
Constant (const byte) bitmap_clear::x#0 = 0
Constant (const byte) bitmap_line::xd#0 = 0
Constant (const byte) bitmap_line::yd#0 = 0
Constant (const byte*) VIC_SCREEN0#0 = ((byte*))$4000
Constant (const byte*) VIC_SCREEN1#0 = ((byte*))$4400
Constant (const byte*) VIC_SCREEN2#0 = ((byte*))$4800
Constant (const byte*) VIC_SCREEN3#0 = ((byte*))$4c00
Constant (const byte*) VIC_SCREEN4#0 = ((byte*))$5000
Constant (const byte*) VIC_CHARSET_ROM#0 = ((byte*))$5800
Constant (const byte*) VIC_BITMAP#0 = ((byte*))$6000
Constant (const dword) PLANE_8BPP_CHUNKY#0 = $20000
Constant (const dword) PLANE_HORISONTAL#0 = $30000
Constant (const dword) PLANE_VERTICAL#0 = $32000
Constant (const dword) PLANE_HORISONTAL2#0 = $34000
Constant (const dword) PLANE_VERTICAL2#0 = $36000
Constant (const dword) PLANE_BLANK#0 = $38000
Constant (const dword) PLANE_FULL#0 = $3a000
Constant (const dword) PLANE_CHARSET8#0 = $3c000
Constant (const byte*) FORM_SCREEN#0 = ((byte*))$400
Constant (const byte*) FORM_CHARSET#0 = ((byte*))$1800
Constant (const string) $1 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"
Constant (const string) $16 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"
Constant (const byte) form_fields_cnt#0 = $24
Constant (const byte[]) form_fields_x#0 = { 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25 }
Constant (const byte[]) form_fields_y#0 = { 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e }
Constant (const byte[]) form_fields_max#0 = { $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f }
Constant (const byte[]) form_fields_val#0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_stdchar#0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_ecmchar#0 = { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6 }
Constant (const byte[]) preset_stdbm#0 = { 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_mcbm#0 = { 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_hi_stdchar#0 = { 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_hi_ecmchar#0 = { 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c }
Constant (const byte[]) preset_twoplane#0 = { 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0 }
Constant (const byte[]) preset_chunky#0 = { 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_sixsfred#0 = { 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_sixsfred2#0 = { 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_8bpppixelcell#0 = { $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte*) apply_preset::preset#0 = 0
Constant (const byte) apply_preset::i#0 = 0
Constant (const byte*) render_preset_name::name#0 = 0
Constant (const byte*) render_preset_name::name#1 = render_preset_name::$15
Constant (const byte*) render_preset_name::name#2 = render_preset_name::$16
Constant (const byte*) render_preset_name::name#3 = render_preset_name::$17
Constant (const byte*) render_preset_name::name#4 = render_preset_name::$18
Constant (const byte*) render_preset_name::name#5 = render_preset_name::$19
Constant (const byte*) render_preset_name::name#6 = render_preset_name::$20
Constant (const byte*) render_preset_name::name#7 = render_preset_name::$21
Constant (const byte*) render_preset_name::name#8 = render_preset_name::$22
Constant (const byte*) render_preset_name::name#9 = render_preset_name::$23
Constant (const byte*) render_preset_name::name#10 = render_preset_name::$24
Constant (const byte*) render_preset_name::name#11 = render_preset_name::$25
Constant (const byte*) render_preset_name::name#12 = render_preset_name::$26
Constant (const byte/signed byte/word/signed word/dword/signed dword) render_preset_name::$11 = $28*2
Constant (const byte) gfx_mode::dtv_control#0 = 0
Constant (const byte) gfx_mode::cy#0 = 0
Constant (const byte) gfx_mode::cx#0 = 0
Constant (const byte) gfx_mode::i#0 = 0
Constant (const byte) gfx_mode::j#0 = 0
Constant (const byte) gfx_init_charset::c#0 = 0
Constant (const byte) gfx_init_charset::l#0 = 0
Constant (const byte) gfx_init_screen0::cy#0 = 0
Constant (const byte) gfx_init_screen0::cx#0 = 0
Constant (const byte) gfx_init_screen1::cy#0 = 0
Constant (const byte) gfx_init_screen1::cx#0 = 0
Constant (const byte) gfx_init_screen2::cy#0 = 0
Constant (const byte) gfx_init_screen2::cx#0 = 0
Constant (const byte) gfx_init_screen3::cy#0 = 0
Constant (const byte) gfx_init_screen3::cx#0 = 0
Constant (const byte) gfx_init_screen4::cy#0 = 0
Constant (const byte) gfx_init_screen4::cx#0 = 0
Constant (const byte[]) gfx_init_vic_bitmap::lines_x#0 = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
Constant (const byte[]) gfx_init_vic_bitmap::lines_y#0 = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
Constant (const byte) gfx_init_vic_bitmap::lines_cnt#0 = 9
Constant (const byte) gfx_init_vic_bitmap::l#0 = 0
Constant (const byte*) gfx_init_plane_8bppchunky::gfxb#0 = ((byte*))$4000
Constant (const byte) gfx_init_plane_8bppchunky::y#0 = 0
Constant (const word) gfx_init_plane_8bppchunky::x#0 = 0
Constant (const byte*) gfx_init_plane_8bppchunky::gfxb#2 = ((byte*))$4000
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_8bppchunky::$3 = $4000/$4000
Constant (const byte) gfx_init_plane_horisontal::ay#0 = 0
Constant (const byte) gfx_init_plane_horisontal::ax#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_horisontal::$5 = $4000/$4000
Constant (const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 = { 0, $55, $aa, $ff }
Constant (const byte) gfx_init_plane_horisontal2::ay#0 = 0
Constant (const byte) gfx_init_plane_horisontal2::ax#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_horisontal2::$5 = $4000/$4000
Constant (const byte) gfx_init_plane_vertical::by#0 = 0
Constant (const byte) gfx_init_plane_vertical::bx#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_vertical::$5 = $4000/$4000
Constant (const byte) gfx_init_plane_charset8::col#0 = 0
Constant (const byte) gfx_init_plane_charset8::ch#0 = 0
Constant (const byte) gfx_init_plane_charset8::cr#0 = 0
Constant (const byte) gfx_init_plane_charset8::cp#0 = 0
Constant (const byte) gfx_init_plane_charset8::c#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_charset8::$5 = $4000/$4000
Constant (const byte) gfx_init_plane_fill::fill#0 = $1b
Constant (const byte) gfx_init_plane_fill::fill#1 = 0
Constant (const byte) gfx_init_plane_fill::fill#2 = $ff
Constant (const byte) gfx_init_plane_fill::by#0 = 0
Constant (const byte) gfx_init_plane_fill::bx#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_fill::$7 = $4000/$4000
Constant (const byte) form_mode::i#0 = 0
Constant (const byte[$19]) form_line_lo#0 = { fill( $19, 0) }
Constant (const byte[$19]) form_line_hi#0 = { fill( $19, 0) }
Constant (const byte) form_field_idx#36 = 0
Constant (const signed byte) FORM_CURSOR_BLINK#0 = $28
Constant (const byte) form_set_screen::y#0 = 0
Constant (const byte) form_render_values::idx#0 = 0
Constant (const byte) form_control::return#1 = 0
Constant (const byte) form_field_idx#8 = 0
Constant (const byte) form_control::return#3 = 0
Constant (const byte) form_control::return#4 = 0
Constant (const byte) form_control::return#5 = $ff
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) keyboard_char_keycodes#0 = { KEY_AT#0, KEY_A#0, KEY_B#0, KEY_C#0, KEY_D#0, KEY_E#0, KEY_F#0, KEY_G#0, KEY_H#0, KEY_I#0, KEY_J#0, KEY_K#0, KEY_L#0, KEY_M#0, KEY_N#0, KEY_O#0, KEY_P#0, KEY_Q#0, KEY_R#0, KEY_S#0, KEY_T#0, KEY_U#0, KEY_V#0, KEY_W#0, KEY_X#0, KEY_Y#0, KEY_Z#0, $3f, KEY_POUND#0, $3f, KEY_ARROW_UP#0, KEY_ARROW_LEFT#0, KEY_SPACE#0, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, KEY_ASTERISK#0, KEY_PLUS#0, KEY_COMMA#0, KEY_MINUS#0, KEY_DOT#0, KEY_SLASH#0, KEY_0#0, KEY_1#0, KEY_2#0, KEY_3#0, KEY_4#0, KEY_5#0, KEY_6#0, KEY_7#0, KEY_8#0, KEY_9#0, KEY_COLON#0, KEY_SEMICOLON#0, $3f, KEY_EQUALS#0, $3f, $3f }
Constant (const byte) KEY_MODIFIER_SHIFT#0 = KEY_MODIFIER_LSHIFT#0|KEY_MODIFIER_RSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT#0
Constant (const byte) keyboard_modifiers#2 = keyboard_modifiers#1|KEY_MODIFIER_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL#0
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE#0
Constant (const dword) get_plane::return#0 = ((dword))VIC_SCREEN0#0
Constant (const dword) get_plane::return#1 = ((dword))VIC_SCREEN1#0
Constant (const dword) get_plane::return#2 = ((dword))VIC_SCREEN2#0
Constant (const dword) get_plane::return#3 = ((dword))VIC_SCREEN3#0
Constant (const dword) get_plane::return#4 = ((dword))VIC_BITMAP#0
Constant (const dword) get_plane::return#5 = ((dword))VIC_CHARSET_ROM#0
Constant (const dword) get_plane::return#6 = ((dword))PLANE_8BPP_CHUNKY#0
Constant (const dword) get_plane::return#7 = ((dword))PLANE_HORISONTAL#0
Constant (const dword) get_plane::return#8 = ((dword))PLANE_VERTICAL#0
Constant (const dword) get_plane::return#9 = ((dword))PLANE_HORISONTAL2#0
Constant (const dword) get_plane::return#10 = ((dword))PLANE_VERTICAL2#0
Constant (const dword) get_plane::return#11 = ((dword))PLANE_CHARSET8#0
Constant (const dword) get_plane::return#12 = ((dword))PLANE_BLANK#0
Constant (const dword) get_plane::return#13 = ((dword))PLANE_FULL#0
Constant (const dword) get_plane::return#15 = ((dword))VIC_SCREEN0#0
Constant (const byte*) get_vic_screen::return#0 = VIC_SCREEN0#0
Constant (const byte*) get_vic_screen::return#1 = VIC_SCREEN1#0
Constant (const byte*) get_vic_screen::return#2 = VIC_SCREEN2#0
Constant (const byte*) get_vic_screen::return#3 = VIC_SCREEN3#0
Constant (const byte*) get_vic_screen::return#4 = VIC_SCREEN4#0
Constant (const byte*) get_vic_screen::return#6 = VIC_SCREEN0#0
Constant (const byte*) get_vic_charset::return#0 = VIC_CHARSET_ROM#0
Constant (const byte*) get_vic_charset::return#1 = VIC_BITMAP#0
Constant (const byte*) get_vic_charset::return#3 = VIC_CHARSET_ROM#0
Constant (const string) $2 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"
Constant (const string) $17 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"
Constant (const byte*) apply_preset::preset#1 = preset_stdchar#0
Constant (const byte*) apply_preset::preset#2 = preset_ecmchar#0
Constant (const byte*) apply_preset::preset#3 = preset_stdbm#0
Constant (const byte*) apply_preset::preset#4 = preset_mcbm#0
Constant (const byte*) apply_preset::preset#5 = preset_hi_stdchar#0
Constant (const byte*) apply_preset::preset#6 = preset_hi_ecmchar#0
Constant (const byte*) apply_preset::preset#7 = preset_twoplane#0
Constant (const byte*) apply_preset::preset#8 = preset_chunky#0
Constant (const byte*) apply_preset::preset#9 = preset_sixsfred#0
Constant (const byte*) apply_preset::preset#10 = preset_sixsfred2#0
Constant (const byte*) apply_preset::preset#11 = preset_8bpppixelcell#0
Constant (const byte*) apply_preset::preset#12 = preset_stdchar#0
Constant (const byte*) render_preset_name::$12 = FORM_SCREEN#0+render_preset_name::$11
Constant (const byte*) form_preset#0 = form_fields_val#0+0
Constant (const byte*) form_ctrl_bmm#0 = form_fields_val#0+1
Constant (const byte*) form_ctrl_mcm#0 = form_fields_val#0+2
Constant (const byte*) form_ctrl_ecm#0 = form_fields_val#0+3
Constant (const byte*) form_ctrl_hicol#0 = form_fields_val#0+4
Constant (const byte*) form_ctrl_line#0 = form_fields_val#0+5
Constant (const byte*) form_ctrl_colof#0 = form_fields_val#0+6
Constant (const byte*) form_ctrl_chunk#0 = form_fields_val#0+7
Constant (const byte*) form_ctrl_borof#0 = form_fields_val#0+8
Constant (const byte*) form_ctrl_overs#0 = form_fields_val#0+9
Constant (const byte*) form_a_pattern#0 = form_fields_val#0+$a
Constant (const byte*) form_a_start_hi#0 = form_fields_val#0+$b
Constant (const byte*) form_a_start_lo#0 = form_fields_val#0+$c
Constant (const byte*) form_a_step_hi#0 = form_fields_val#0+$d
Constant (const byte*) form_a_step_lo#0 = form_fields_val#0+$e
Constant (const byte*) form_a_mod_hi#0 = form_fields_val#0+$f
Constant (const byte*) form_a_mod_lo#0 = form_fields_val#0+$10
Constant (const byte*) form_b_pattern#0 = form_fields_val#0+$11
Constant (const byte*) form_b_start_hi#0 = form_fields_val#0+$12
Constant (const byte*) form_b_start_lo#0 = form_fields_val#0+$13
Constant (const byte*) form_b_step_hi#0 = form_fields_val#0+$14
Constant (const byte*) form_b_step_lo#0 = form_fields_val#0+$15
Constant (const byte*) form_b_mod_hi#0 = form_fields_val#0+$16
Constant (const byte*) form_b_mod_lo#0 = form_fields_val#0+$17
Constant (const byte*) form_vic_screen#0 = form_fields_val#0+$18
Constant (const byte*) form_vic_gfx#0 = form_fields_val#0+$19
Constant (const byte*) form_vic_cols#0 = form_fields_val#0+$1a
Constant (const byte*) form_dtv_palet#0 = form_fields_val#0+$1b
Constant (const byte*) form_vic_bg0_hi#0 = form_fields_val#0+$1c
Constant (const byte*) form_vic_bg0_lo#0 = form_fields_val#0+$1d
Constant (const byte*) form_vic_bg1_hi#0 = form_fields_val#0+$1e
Constant (const byte*) form_vic_bg1_lo#0 = form_fields_val#0+$1f
Constant (const byte*) form_vic_bg2_hi#0 = form_fields_val#0+$20
Constant (const byte*) form_vic_bg2_lo#0 = form_fields_val#0+$21
Constant (const byte*) form_vic_bg3_hi#0 = form_fields_val#0+$22
Constant (const byte*) form_vic_bg3_lo#0 = form_fields_val#0+$23
Constant (const byte) gfx_mode::dtv_control#1 = gfx_mode::dtv_control#0|DTV_LINEAR#0
Constant (const byte) gfx_mode::$12 = VIC_DEN#0|VIC_RSEL#0
Constant (const byte) gfx_mode::vic_control2#0 = VIC_CSEL#0
Constant (const word) gfx_mode::$48 = ((word))VIC_SCREEN0#0
Constant (const byte*) gfx_mode::col#0 = COLS#0
Constant (const byte*) gfx_init_charset::chargen#0 = CHARGEN#0
Constant (const byte*) gfx_init_charset::charset#0 = VIC_CHARSET_ROM#0
Constant (const byte*) gfx_init_screen0::ch#0 = VIC_SCREEN0#0
Constant (const byte*) gfx_init_screen1::ch#0 = VIC_SCREEN1#0
Constant (const byte*) gfx_init_screen2::ch#0 = VIC_SCREEN2#0
Constant (const byte*) gfx_init_screen3::ch#0 = VIC_SCREEN3#0
Constant (const byte*) gfx_init_screen4::ch#0 = VIC_SCREEN4#0
Constant (const byte*) bitmap_init::bitmap#0 = VIC_BITMAP#0
Constant (const dword) gfx_init_plane_8bppchunky::$0 = PLANE_8BPP_CHUNKY#0/$4000
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))gfx_init_plane_8bppchunky::$3
Constant (const dword) gfx_init_plane_horisontal::$0 = PLANE_HORISONTAL#0/$4000
Constant (const word/dword) gfx_init_plane_horisontal::$3 = PLANE_HORISONTAL#0&$3fff
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#4 = ((byte))gfx_init_plane_horisontal::$5
Constant (const dword) gfx_init_plane_horisontal2::$0 = PLANE_HORISONTAL2#0/$4000
Constant (const word/dword) gfx_init_plane_horisontal2::$3 = PLANE_HORISONTAL2#0&$3fff
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#6 = ((byte))gfx_init_plane_horisontal2::$5
Constant (const dword) gfx_init_plane_vertical::$0 = PLANE_VERTICAL#0/$4000
Constant (const word/dword) gfx_init_plane_vertical::$3 = PLANE_VERTICAL#0&$3fff
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#8 = ((byte))gfx_init_plane_vertical::$5
Constant (const dword) gfx_init_plane_charset8::$0 = PLANE_CHARSET8#0/$4000
Constant (const word/dword) gfx_init_plane_charset8::$3 = PLANE_CHARSET8#0&$3fff
Constant (const byte*) gfx_init_plane_charset8::chargen#0 = CHARGEN#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#10 = ((byte))gfx_init_plane_charset8::$5
Constant (const dword) gfx_init_plane_fill::plane_addr#0 = PLANE_VERTICAL2#0
Constant (const dword) gfx_init_plane_fill::plane_addr#1 = PLANE_BLANK#0
Constant (const dword) gfx_init_plane_fill::plane_addr#2 = PLANE_FULL#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#12 = ((byte))gfx_init_plane_fill::$7
Constant (const byte*) print_set_screen::screen#0 = COLS#0
Constant (const byte*) print_set_screen::screen#1 = FORM_SCREEN#0
Constant (const byte*) form_set_screen::screen#0 = FORM_SCREEN#0
Constant (const dword) form_mode::$9 = ((dword))FORM_CHARSET#0
Constant (const dword) form_mode::$12 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const dword) form_mode::$15 = DTV_COLOR_BANK_DEFAULT#0/$400
Constant (const word) form_mode::$18 = ((word))FORM_CHARSET#0
Constant (const byte) form_mode::$22 = VIC_DEN#0|VIC_RSEL#0
Constant (const word) form_mode::$24 = ((word))FORM_SCREEN#0
Constant (const word) form_mode::$27 = ((word))FORM_CHARSET#0
Constant (const byte) form_mode::$32 = <FORM_SCREEN#0
Constant (const byte) form_mode::$33 = >FORM_SCREEN#0
Constant (const signed byte) form_cursor_count#26 = FORM_CURSOR_BLINK#0/2
Constant (const signed word/signed byte/signed dword) form_control::$3 = FORM_CURSOR_BLINK#0/2
Constant (const signed byte) form_cursor_count#6 = FORM_CURSOR_BLINK#0
Constant (const byte) form_field_idx#7 = form_fields_cnt#0-1
Constant (const signed byte) form_cursor_count#7 = FORM_CURSOR_BLINK#0/2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) bitmap_init::$1 = >bitmap_init::bitmap#0
Constant (const string) $3 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"
Constant (const string) $18 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"
Constant (const byte*) print_str_at::at#1 = render_preset_name::$12+$a
Constant (const byte) gfx_mode::vic_control#0 = gfx_mode::$12|3
Constant (const word/signed dword/dword) gfx_mode::$49 = gfx_mode::$48/$4000
Constant (const byte) gfx_mode::vic_control2#1 = gfx_mode::vic_control2#0|VIC_MCM#0
Constant (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 = ((byte))gfx_init_plane_8bppchunky::$0
Constant (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 = ((byte))gfx_init_plane_horisontal::$0
Constant (const word/dword/signed dword) gfx_init_plane_horisontal::$4 = $4000+gfx_init_plane_horisontal::$3
Constant (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 = ((byte))gfx_init_plane_horisontal2::$0
Constant (const word/dword/signed dword) gfx_init_plane_horisontal2::$4 = $4000+gfx_init_plane_horisontal2::$3
Constant (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 = ((byte))gfx_init_plane_vertical::$0
Constant (const word/dword/signed dword) gfx_init_plane_vertical::$4 = $4000+gfx_init_plane_vertical::$3
Constant (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 = ((byte))gfx_init_plane_charset8::$0
Constant (const word/dword/signed dword) gfx_init_plane_charset8::$4 = $4000+gfx_init_plane_charset8::$3
Constant (const dword) form_mode::$10 = form_mode::$9/$10000
Constant (const word) form_mode::$13 = ((word))form_mode::$12
Constant (const word) form_mode::$16 = ((word))form_mode::$15
Constant (const word/signed dword/dword) form_mode::$19 = form_mode::$18/$4000
Constant (const byte/word/dword) form_mode::$23 = form_mode::$22|3
Constant (const word) form_mode::$25 = form_mode::$24&$3fff
Constant (const word) form_mode::$28 = form_mode::$27&$3fff
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $4 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"
Constant (const string) $19 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
Constant (const byte) gfx_mode::vic_control#1 = gfx_mode::vic_control#0|VIC_ECM#0
Constant (const byte) gfx_mode::$50 = ((byte))gfx_mode::$49
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = gfx_init_plane_horisontal::gfxbCpuBank#0
Constant (const byte) gfx_init_plane_horisontal::gfxbCpuBank#1 = ++gfx_init_plane_horisontal::gfxbCpuBank#0
Constant (const byte*) gfx_init_plane_horisontal::gfxa#0 = ((byte*))gfx_init_plane_horisontal::$4
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#5 = gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 = ++gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant (const byte*) gfx_init_plane_horisontal2::gfxa#0 = ((byte*))gfx_init_plane_horisontal2::$4
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#7 = gfx_init_plane_vertical::gfxbCpuBank#0
Constant (const byte) gfx_init_plane_vertical::gfxbCpuBank#1 = ++gfx_init_plane_vertical::gfxbCpuBank#0
Constant (const byte*) gfx_init_plane_vertical::gfxb#0 = ((byte*))gfx_init_plane_vertical::$4
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#9 = gfx_init_plane_charset8::gfxbCpuBank#0
Constant (const byte) gfx_init_plane_charset8::gfxbCpuBank#1 = ++gfx_init_plane_charset8::gfxbCpuBank#0
Constant (const byte*) gfx_init_plane_charset8::gfxa#0 = ((byte*))gfx_init_plane_charset8::$4
Constant (const byte) form_mode::$11 = ((byte))form_mode::$10
Constant (const byte) form_mode::$14 = <form_mode::$13
Constant (const byte) form_mode::$17 = >form_mode::$16
Constant (const byte) form_mode::$20 = ((byte))form_mode::$19
Constant (const word/signed dword/dword) form_mode::$26 = form_mode::$25/$40
Constant (const word/signed dword/dword) form_mode::$29 = form_mode::$28/$400
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $5 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"
Constant (const string) $20 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
Constant (const byte/word/dword) gfx_mode::$51 = 3^gfx_mode::$50
Constant (const byte/word/dword) form_mode::$21 = 3^form_mode::$20
Constant (const word/dword) form_mode::$30 = form_mode::$26|form_mode::$29
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $6 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"
Constant (const string) $21 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
Constant (const byte) form_mode::$31 = ((byte))form_mode::$30
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $7 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"
Constant (const string) $22 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $8 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"
Constant (const string) $23 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $9 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"
Constant (const string) $24 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $10 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"
Constant (const string) $25 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $11 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"
Constant (const string) $26 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $12 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"
Constant (const string) $27 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $13 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"+" overscan   0   step    00   bgcol2 00  @"
Constant (const string) $28 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const string) $14 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"+" overscan   0   step    00   bgcol2 00  @"+"                modulo  00   bgcol3 00  @"
Constant (const string) $29 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) FORM_TEXT#0 = " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"+" overscan   0   step    00   bgcol2 00  @"+"                modulo  00   bgcol3 00  @"+"@"
Constant (const string) $30 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) FORM_COLS#0 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+"@"
Constant (const byte*) print_str_lines::str#2 = FORM_TEXT#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_str_lines::str#1 = FORM_COLS#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(bitmap_plot_xhi#0+0)
Consolidated array index constant in *(bitmap_plot_xlo#0+0)
Consolidated array index constant in assignment *(gfx_init_vic_bitmap::lines_x#0+1 + gfx_init_vic_bitmap::$2)
Consolidated array index constant in assignment *(gfx_init_vic_bitmap::lines_y#0+1 + gfx_init_vic_bitmap::$3)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination [277] if(true) goto main::@2
Removing PHI-reference to removed block (gfx_mode::@31) in block gfx_mode::@return
Removing PHI-reference to removed block (gfx_mode::@31) in block gfx_mode::@return
if() condition always true - replacing block destination [472] if(true) goto gfx_mode::@32
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
if() condition always true - replacing block destination [720] if(true) goto form_mode::@4
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization Pass2ConstantStringConsolidation
Fixing inline constructor with bitmap_clear::$3 ← *(bitmap_plot_xhi#0+0) w= *(bitmap_plot_xlo#0+0)
Fixing inline constructor with bitmap_plot::$2 ← *(bitmap_plot_xhi#0 + bitmap_plot::x#4) w= *(bitmap_plot_xlo#0 + bitmap_plot::x#4)
Fixing inline constructor with bitmap_plot::$3 ← *(bitmap_plot_yhi#0 + bitmap_plot::y#4) w= *(bitmap_plot_ylo#0 + bitmap_plot::y#4)
Fixing inline constructor with form_field_ptr::$2 ← *(form_line_hi#0 + form_field_ptr::y#0) w= *(form_line_lo#0 + form_field_ptr::y#0)
Successful SSA optimization Pass2FixInlineConstructors
Inferred type updated to byte in [572] (byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$2 ← (byte) gfx_init_vic_bitmap::l#2
Inferred type updated to byte in [573] (byte/signed word/word/dword/signed dword~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#2
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte*) bitmap_clear::bitmap#0 ← ((byte*)) (word~) bitmap_clear::$3
Eliminating Noop Cast (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$0
Eliminating Noop Cast (word~) gfx_mode::$53 ← ((word)) (byte*~) gfx_mode::$52
Eliminating Noop Cast (word~) gfx_mode::$58 ← ((word)) (byte*~) gfx_mode::$57
Eliminating Noop Cast (byte*) gfx_init_plane_fill::gfxb#0 ← ((byte*)) (word/signed dword/dword~) gfx_init_plane_fill::$6
Eliminating Noop Cast (byte*) form_field_ptr::line#0 ← ((byte*)) (word~) form_field_ptr::$2
Successful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@8 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@11 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value bitmap_clear::x#1 ← ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value bitmap_clear::y#1 ← ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_mode::cx#1 ← ++ gfx_mode::cx#2 to ++
Resolved ranged comparison value if(gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@22 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_mode::cy#1 ← ++ gfx_mode::cy#4 to ++
Resolved ranged comparison value if(gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@21 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value gfx_mode::j#1 ← ++ gfx_mode::j#2 to ++
Resolved ranged comparison value if(gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@26 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value gfx_mode::i#1 ← ++ gfx_mode::i#2 to ++
Resolved ranged comparison value if(gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@29 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value gfx_init_charset::l#1 ← ++ gfx_init_charset::l#2 to ++
Resolved ranged comparison value if(gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value gfx_init_charset::c#1 ← ++ gfx_init_charset::c#4 to ++
Resolved ranged comparison value if(gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value gfx_init_screen0::cx#1 ← ++ gfx_init_screen0::cx#2 to ++
Resolved ranged comparison value if(gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_screen0::cy#1 ← ++ gfx_init_screen0::cy#4 to ++
Resolved ranged comparison value if(gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value gfx_init_screen1::cx#1 ← ++ gfx_init_screen1::cx#2 to ++
Resolved ranged comparison value if(gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_screen1::cy#1 ← ++ gfx_init_screen1::cy#4 to ++
Resolved ranged comparison value if(gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value gfx_init_screen2::cx#1 ← ++ gfx_init_screen2::cx#2 to ++
Resolved ranged comparison value if(gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_screen2::cy#1 ← ++ gfx_init_screen2::cy#4 to ++
Resolved ranged comparison value if(gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value gfx_init_screen3::cx#1 ← ++ gfx_init_screen3::cx#2 to ++
Resolved ranged comparison value if(gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_screen3::cy#1 ← ++ gfx_init_screen3::cy#4 to ++
Resolved ranged comparison value if(gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value gfx_init_screen4::cx#1 ← ++ gfx_init_screen4::cx#2 to ++
Resolved ranged comparison value if(gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_screen4::cy#1 ← ++ gfx_init_screen4::cy#4 to ++
Resolved ranged comparison value if(gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Resolved ranged next value gfx_init_plane_8bppchunky::x#1 ← ++ gfx_init_plane_8bppchunky::x#2 to ++
Resolved ranged comparison value if(gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2 to (word/signed word/dword/signed dword) $140
Resolved ranged next value gfx_init_plane_8bppchunky::y#1 ← ++ gfx_init_plane_8bppchunky::y#6 to ++
Resolved ranged comparison value if(gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value gfx_init_plane_horisontal::ax#1 ← ++ gfx_init_plane_horisontal::ax#2 to ++
Resolved ranged comparison value if(gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_plane_horisontal::ay#1 ← ++ gfx_init_plane_horisontal::ay#4 to ++
Resolved ranged comparison value if(gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value gfx_init_plane_horisontal2::ax#1 ← ++ gfx_init_plane_horisontal2::ax#2 to ++
Resolved ranged comparison value if(gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_plane_horisontal2::ay#1 ← ++ gfx_init_plane_horisontal2::ay#4 to ++
Resolved ranged comparison value if(gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value gfx_init_plane_vertical::bx#1 ← ++ gfx_init_plane_vertical::bx#2 to ++
Resolved ranged comparison value if(gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_plane_vertical::by#1 ← ++ gfx_init_plane_vertical::by#4 to ++
Resolved ranged comparison value if(gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value gfx_init_plane_charset8::cp#1 ← ++ gfx_init_plane_charset8::cp#2 to ++
Resolved ranged comparison value if(gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value gfx_init_plane_charset8::cr#1 ← ++ gfx_init_plane_charset8::cr#6 to ++
Resolved ranged comparison value if(gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value gfx_init_plane_charset8::ch#1 ← ++ gfx_init_plane_charset8::ch#7 to ++
Resolved ranged comparison value if(gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value gfx_init_plane_fill::bx#1 ← ++ gfx_init_plane_fill::bx#2 to ++
Resolved ranged comparison value if(gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2 to (byte/signed byte/word/signed word/dword/signed dword) $28
Resolved ranged next value gfx_init_plane_fill::by#1 ← ++ gfx_init_plane_fill::by#4 to ++
Resolved ranged comparison value if(gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value form_mode::i#1 ← ++ form_mode::i#2 to ++
Resolved ranged comparison value if(form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value form_set_screen::y#1 ← ++ form_set_screen::y#2 to ++
Resolved ranged comparison value if(form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1 to (byte/signed byte/word/signed word/dword/signed dword) $19
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) print_str_lines::@2
Culled Empty Block (label) print_str_lines::@11
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) @17
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @24
Culled Empty Block (label) @28
Culled Empty Block (label) keyboard_event_scan::@9
Culled Empty Block (label) keyboard_event_scan::@13
Culled Empty Block (label) keyboard_event_scan::@4
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) @31
Culled Empty Block (label) bitmap_init::@4
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@10
Culled Empty Block (label) @40
Culled Empty Block (label) get_plane::@1
Culled Empty Block (label) get_plane::@2
Culled Empty Block (label) get_plane::@3
Culled Empty Block (label) get_plane::@4
Culled Empty Block (label) get_plane::@5
Culled Empty Block (label) get_plane::@6
Culled Empty Block (label) get_plane::@7
Culled Empty Block (label) get_plane::@8
Culled Empty Block (label) get_plane::@9
Culled Empty Block (label) get_plane::@10
Culled Empty Block (label) get_plane::@11
Culled Empty Block (label) get_plane::@12
Culled Empty Block (label) get_plane::@13
Culled Empty Block (label) get_plane::@41
Culled Empty Block (label) get_vic_screen::@1
Culled Empty Block (label) get_vic_screen::@2
Culled Empty Block (label) get_vic_screen::@3
Culled Empty Block (label) get_vic_screen::@4
Culled Empty Block (label) get_vic_screen::@14
Culled Empty Block (label) get_vic_charset::@1
Culled Empty Block (label) get_vic_charset::@5
Culled Empty Block (label) @43
Culled Empty Block (label) apply_preset::@1
Culled Empty Block (label) apply_preset::@2
Culled Empty Block (label) apply_preset::@3
Culled Empty Block (label) apply_preset::@4
Culled Empty Block (label) apply_preset::@5
Culled Empty Block (label) apply_preset::@6
Culled Empty Block (label) apply_preset::@7
Culled Empty Block (label) apply_preset::@8
Culled Empty Block (label) apply_preset::@9
Culled Empty Block (label) apply_preset::@10
Culled Empty Block (label) apply_preset::@11
Culled Empty Block (label) render_preset_name::@1
Culled Empty Block (label) render_preset_name::@2
Culled Empty Block (label) render_preset_name::@3
Culled Empty Block (label) render_preset_name::@4
Culled Empty Block (label) render_preset_name::@5
Culled Empty Block (label) render_preset_name::@6
Culled Empty Block (label) render_preset_name::@7
Culled Empty Block (label) render_preset_name::@8
Culled Empty Block (label) render_preset_name::@9
Culled Empty Block (label) render_preset_name::@10
Culled Empty Block (label) render_preset_name::@11
Culled Empty Block (label) @45
Culled Empty Block (label) gfx_mode::@10
Culled Empty Block (label) gfx_mode::@25
Culled Empty Block (label) gfx_mode::@32
Culled Empty Block (label) gfx_mode::@35
Culled Empty Block (label) gfx_mode::@42
Culled Empty Block (label) gfx_init_vic_bitmap::@4
Culled Empty Block (label) gfx_init_plane_8bppchunky::@7
Culled Empty Block (label) gfx_init_plane_horisontal::@9
Culled Empty Block (label) gfx_init_plane_horisontal2::@5
Culled Empty Block (label) gfx_init_plane_vertical::@5
Culled Empty Block (label) form_mode::@4
Culled Empty Block (label) form_mode::@7
Culled Empty Block (label) form_mode::@15
Culled Empty Block (label) form_mode::@33
Culled Empty Block (label) @64
Culled Empty Block (label) form_control::@20
Culled Empty Block (label) form_control::@23
Culled Empty Block (label) form_control::@27
Culled Empty Block (label) form_control::@30
Culled Empty Block (label) form_control::@6
Culled Empty Block (label) @69
Successful SSA optimization Pass2CullEmptyBlocks
Alias (word) bitmap_plot::plotter_x#0 = (word~) bitmap_plot::$2 
Alias (word) bitmap_plot::plotter_y#0 = (word~) bitmap_plot::$3 
Alias (byte) gfx_init_vic_bitmap::l#2 = (byte~) gfx_init_vic_bitmap::$2 (byte~) gfx_init_vic_bitmap::$3 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) keyboard_events_size#126
Self Phi Eliminated (byte) gfx_init_plane_charset8::ch#7
Self Phi Eliminated (byte) gfx_init_plane_fill::fill#4
Self Phi Eliminated (byte) form_mode::preset_current#6
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) keyboard_events_size#126 (byte) keyboard_events_size#13
Redundant Phi (byte) keyboard_events_size#11 (byte) keyboard_events_size#24
Redundant Phi (byte) gfx_init_plane_charset8::ch#7 (byte) gfx_init_plane_charset8::ch#8
Redundant Phi (byte) gfx_init_plane_fill::fill#4 (byte) gfx_init_plane_fill::fill#6
Redundant Phi (signed byte) form_cursor_count#13 (signed byte) form_cursor_count#16
Redundant Phi (byte) keyboard_events_size#13 (byte) keyboard_events_size#24
Redundant Phi (byte) form_field_idx#14 (byte) form_field_idx#18
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte) keyboard_events_size#45 (byte) keyboard_events_size#24
Successful SSA optimization Pass2RedundantPhiElimination
Culled Empty Block (label) gfx_mode::@31
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#4
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#6
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#8
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#10
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#12
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#3
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#5
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#7
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#9
Inlining constant with var siblings (const byte*) print_str_lines::str#2
Inlining constant with var siblings (const byte*) print_str_lines::str#1
Inlining constant with var siblings (const byte*) print_str_at::at#1
Inlining constant with var siblings (const byte*) print_set_screen::screen#0
Inlining constant with var siblings (const byte*) print_set_screen::screen#1
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte*) bitmap_init::yoffs#0
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Inlining constant with var siblings (const dword) get_plane::return#0
Inlining constant with var siblings (const dword) get_plane::return#1
Inlining constant with var siblings (const dword) get_plane::return#2
Inlining constant with var siblings (const dword) get_plane::return#3
Inlining constant with var siblings (const dword) get_plane::return#4
Inlining constant with var siblings (const dword) get_plane::return#5
Inlining constant with var siblings (const dword) get_plane::return#6
Inlining constant with var siblings (const dword) get_plane::return#7
Inlining constant with var siblings (const dword) get_plane::return#8
Inlining constant with var siblings (const dword) get_plane::return#9
Inlining constant with var siblings (const dword) get_plane::return#10
Inlining constant with var siblings (const dword) get_plane::return#11
Inlining constant with var siblings (const dword) get_plane::return#12
Inlining constant with var siblings (const dword) get_plane::return#13
Inlining constant with var siblings (const dword) get_plane::return#15
Inlining constant with var siblings (const byte*) get_vic_screen::return#0
Inlining constant with var siblings (const byte*) get_vic_screen::return#1
Inlining constant with var siblings (const byte*) get_vic_screen::return#2
Inlining constant with var siblings (const byte*) get_vic_screen::return#3
Inlining constant with var siblings (const byte*) get_vic_screen::return#4
Inlining constant with var siblings (const byte*) get_vic_screen::return#6
Inlining constant with var siblings (const byte*) get_vic_charset::return#0
Inlining constant with var siblings (const byte*) get_vic_charset::return#1
Inlining constant with var siblings (const byte*) get_vic_charset::return#3
Inlining constant with var siblings (const byte) apply_preset::i#0
Inlining constant with var siblings (const byte*) apply_preset::preset#1
Inlining constant with var siblings (const byte*) apply_preset::preset#2
Inlining constant with var siblings (const byte*) apply_preset::preset#3
Inlining constant with var siblings (const byte*) apply_preset::preset#4
Inlining constant with var siblings (const byte*) apply_preset::preset#5
Inlining constant with var siblings (const byte*) apply_preset::preset#6
Inlining constant with var siblings (const byte*) apply_preset::preset#7
Inlining constant with var siblings (const byte*) apply_preset::preset#8
Inlining constant with var siblings (const byte*) apply_preset::preset#9
Inlining constant with var siblings (const byte*) apply_preset::preset#10
Inlining constant with var siblings (const byte*) apply_preset::preset#11
Inlining constant with var siblings (const byte*) apply_preset::preset#12
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Inlining constant with var siblings (const byte) gfx_mode::dtv_control#0
Inlining constant with var siblings (const byte) gfx_mode::cy#0
Inlining constant with var siblings (const byte) gfx_mode::cx#0
Inlining constant with var siblings (const byte) gfx_mode::i#0
Inlining constant with var siblings (const byte) gfx_mode::j#0
Inlining constant with var siblings (const byte) gfx_mode::dtv_control#1
Inlining constant with var siblings (const byte) gfx_mode::vic_control2#0
Inlining constant with var siblings (const byte*) gfx_mode::col#0
Inlining constant with var siblings (const byte) gfx_mode::vic_control#0
Inlining constant with var siblings (const byte) gfx_mode::vic_control2#1
Inlining constant with var siblings (const byte) gfx_mode::vic_control#1
Inlining constant with var siblings (const byte) gfx_init_charset::c#0
Inlining constant with var siblings (const byte) gfx_init_charset::l#0
Inlining constant with var siblings (const byte*) gfx_init_charset::chargen#0
Inlining constant with var siblings (const byte*) gfx_init_charset::charset#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen0::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen1::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen1::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen1::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen2::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen2::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen2::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen3::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen3::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen3::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen4::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen4::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen4::ch#0
Inlining constant with var siblings (const byte) gfx_init_vic_bitmap::l#0
Inlining constant with var siblings (const byte*) gfx_init_plane_8bppchunky::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::y#0
Inlining constant with var siblings (const word) gfx_init_plane_8bppchunky::x#0
Inlining constant with var siblings (const byte*) gfx_init_plane_8bppchunky::gfxb#2
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal::ay#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal::ax#0
Inlining constant with var siblings (const byte*) gfx_init_plane_horisontal::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal2::ay#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal2::ax#0
Inlining constant with var siblings (const byte*) gfx_init_plane_horisontal2::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_vertical::by#0
Inlining constant with var siblings (const byte) gfx_init_plane_vertical::bx#0
Inlining constant with var siblings (const byte*) gfx_init_plane_vertical::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::col#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::ch#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cr#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cp#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::c#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::chargen#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#1
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#2
Inlining constant with var siblings (const byte) gfx_init_plane_fill::by#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::bx#0
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#0
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#1
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#2
Inlining constant with var siblings (const byte) form_mode::i#0
Inlining constant with var siblings (const byte) form_set_screen::y#0
Inlining constant with var siblings (const byte) form_render_values::idx#0
Inlining constant with var siblings (const byte) form_control::return#1
Inlining constant with var siblings (const byte) form_control::return#3
Inlining constant with var siblings (const byte) form_control::return#4
Inlining constant with var siblings (const byte) form_control::return#5
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const byte) keyboard_modifiers#1
Inlining constant with var siblings (const byte) form_field_idx#36
Inlining constant with var siblings (const byte) form_field_idx#8
Inlining constant with var siblings (const byte) keyboard_modifiers#2
Inlining constant with var siblings (const signed byte) form_cursor_count#26
Inlining constant with var siblings (const signed byte) form_cursor_count#6
Inlining constant with var siblings (const byte) form_field_idx#7
Inlining constant with var siblings (const signed byte) form_cursor_count#7
Constant inlined form_field_idx#36 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_charset8::cp#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_horisontal::gfxa#0 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff
Constant inlined gfx_init_screen3::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined apply_preset::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_mode::$48 = ((word))(const byte*) VIC_SCREEN0#0
Constant inlined gfx_init_plane_horisontal::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_charset8::ch#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_mode::dtv_control#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_mode::vic_control#1 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3|(const byte) VIC_ECM#0
Constant inlined gfx_mode::dtv_control#1 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) DTV_LINEAR#0
Constant inlined gfx_mode::vic_control#0 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined bitmap_init::yoffs#0 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_horisontal2::ax#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_fill::$7 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_mode::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_fill::bx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_mode::$49 = ((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_mode::$50 = ((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_mode::$51 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000
Constant inlined keyboard_event_scan::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_horisontal2::$0 = (const dword) PLANE_HORISONTAL2#0/(word/signed word/dword/signed dword) $4000
Constant inlined apply_preset::preset#5 = (const byte[]) preset_hi_stdchar#0
Constant inlined apply_preset::preset#4 = (const byte[]) preset_mcbm#0
Constant inlined gfx_init_plane_horisontal2::$4 = (word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff
Constant inlined apply_preset::preset#7 = (const byte[]) preset_twoplane#0
Constant inlined gfx_init_plane_horisontal2::$3 = (const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff
Constant inlined apply_preset::preset#6 = (const byte[]) preset_hi_ecmchar#0
Constant inlined apply_preset::preset#9 = (const byte[]) preset_sixsfred#0
Constant inlined gfx_init_plane_horisontal2::$5 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined apply_preset::preset#8 = (const byte[]) preset_chunky#0
Constant inlined gfx_init_plane_horisontal::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_horisontal2::ay#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_mode::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_vertical::$5 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_vertical::$4 = (word/signed word/dword/signed dword) $4000+(const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff
Constant inlined gfx_init_plane_vertical::$3 = (const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff
Constant inlined apply_preset::preset#1 = (const byte[]) preset_stdchar#0
Constant inlined gfx_init_plane_vertical::$0 = (const dword) PLANE_VERTICAL#0/(word/signed word/dword/signed dword) $4000
Constant inlined apply_preset::preset#3 = (const byte[]) preset_stdbm#0
Constant inlined apply_preset::preset#2 = (const byte[]) preset_ecmchar#0
Constant inlined bitmap_init::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_charset8::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined get_plane::return#15 = ((dword))(const byte*) VIC_SCREEN0#0
Constant inlined form_cursor_count#6 = (const signed byte) FORM_CURSOR_BLINK#0
Constant inlined get_plane::return#13 = ((dword))(const dword) PLANE_FULL#0
Constant inlined form_cursor_count#7 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined get_plane::return#12 = ((dword))(const dword) PLANE_BLANK#0
Constant inlined get_plane::return#11 = ((dword))(const dword) PLANE_CHARSET8#0
Constant inlined form_mode::$32 = <(const byte*) FORM_SCREEN#0
Constant inlined form_mode::$31 = ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined form_mode::$33 = >(const byte*) FORM_SCREEN#0
Constant inlined print_str_at::at#1 = (const byte*) FORM_SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) $a
Constant inlined gfx_init_plane_horisontal2::gfxa#0 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff
Constant inlined form_mode::$30 = ((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined gfx_init_screen2::ch#0 = (const byte*) VIC_SCREEN2#0
Constant inlined gfx_init_plane_charset8::chargen#0 = (const byte*) CHARGEN#0
Constant inlined gfx_init_screen2::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_fill::fill#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_fill::fill#2 = (byte/word/signed word/dword/signed dword) $ff
Constant inlined gfx_init_plane_8bppchunky::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_screen2::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_scan::keycode#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_vic_bitmap::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_screen4::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_mode::$10 = ((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000
Constant inlined get_vic_charset::return#3 = (const byte*) VIC_CHARSET_ROM#0
Constant inlined gfx_init_plane_charset8::gfxa#0 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff
Constant inlined form_mode::$12 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined render_preset_name::$15 = (const byte*) render_preset_name::name#1
Constant inlined form_mode::$11 = ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000
Constant inlined form_control::$3 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined render_preset_name::$16 = (const byte*) render_preset_name::name#2
Constant inlined gfx_init_screen4::ch#0 = (const byte*) VIC_SCREEN4#0
Constant inlined get_vic_charset::return#0 = (const byte*) VIC_CHARSET_ROM#0
Constant inlined render_preset_name::$11 = (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined get_vic_charset::return#1 = (const byte*) VIC_BITMAP#0
Constant inlined render_preset_name::$12 = (const byte*) FORM_SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined keyboard_event_scan::row#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_mode::$18 = ((word))(const byte*) FORM_CHARSET#0
Constant inlined form_mode::$17 = >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined form_mode::$19 = ((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_charset8::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_mode::$14 = <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined render_preset_name::$17 = (const byte*) render_preset_name::name#3
Constant inlined form_mode::$13 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined render_preset_name::$18 = (const byte*) render_preset_name::name#4
Constant inlined form_mode::$16 = ((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined render_preset_name::$19 = (const byte*) render_preset_name::name#5
Constant inlined gfx_init_screen3::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_mode::$15 = (const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
Constant inlined form_mode::$9 = ((dword))(const byte*) FORM_CHARSET#0
Constant inlined bitmap_init::$13 = (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined gfx_init_plane_8bppchunky::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_mode::$21 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined render_preset_name::$24 = (const byte*) render_preset_name::name#10
Constant inlined form_mode::$20 = ((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000
Constant inlined render_preset_name::$25 = (const byte*) render_preset_name::name#11
Constant inlined form_mode::$23 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined render_preset_name::$26 = (const byte*) render_preset_name::name#12
Constant inlined form_mode::$22 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined render_preset_name::$20 = (const byte*) render_preset_name::name#6
Constant inlined render_preset_name::$21 = (const byte*) render_preset_name::name#7
Constant inlined render_preset_name::$22 = (const byte*) render_preset_name::name#8
Constant inlined render_preset_name::$23 = (const byte*) render_preset_name::name#9
Constant inlined gfx_init_plane_fill::by#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_mode::$29 = ((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
Constant inlined form_mode::$28 = ((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff
Constant inlined gfx_init_plane_fill::fill#0 = (byte/signed byte/word/signed word/dword/signed dword) $1b
Constant inlined form_mode::$25 = ((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined form_mode::$24 = ((word))(const byte*) FORM_SCREEN#0
Constant inlined form_mode::$27 = ((word))(const byte*) FORM_CHARSET#0
Constant inlined form_mode::$26 = ((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40
Constant inlined gfx_mode::vic_control2#1 = (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0
Constant inlined gfx_mode::vic_control2#0 = (const byte) VIC_CSEL#0
Constant inlined gfx_init_screen4::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_fill::plane_addr#2 = (const dword) PLANE_FULL#0
Constant inlined gfx_init_plane_fill::plane_addr#0 = (const dword) PLANE_VERTICAL2#0
Constant inlined gfx_init_plane_fill::plane_addr#1 = (const dword) PLANE_BLANK#0
Constant inlined keyboard_event_get::return#0 = (byte/word/signed word/dword/signed dword) $ff
Constant inlined gfx_init_screen3::ch#0 = (const byte*) VIC_SCREEN3#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = ((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#3 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0
Constant inlined gfx_mode::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#9 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0
Constant inlined gfx_init_charset::charset#0 = (const byte*) VIC_CHARSET_ROM#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#8 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#5 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#4 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#7 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#6 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_charset::chargen#0 = (const byte*) CHARGEN#0
Constant inlined gfx_init_screen1::ch#0 = (const byte*) VIC_SCREEN1#0
Constant inlined gfx_init_charset::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str_lines::str#2 = (const byte[]) FORM_TEXT#0
Constant inlined print_str_lines::str#1 = (const byte[]) FORM_COLS#0
Constant inlined gfx_init_screen1::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_vertical::by#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_mode::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_vertical::gfxb#0 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff
Constant inlined get_vic_screen::return#4 = (const byte*) VIC_SCREEN4#0
Constant inlined apply_preset::preset#11 = (const byte[]) preset_8bpppixelcell#0
Constant inlined gfx_init_screen0::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_render_values::idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined get_vic_screen::return#3 = (const byte*) VIC_SCREEN3#0
Constant inlined apply_preset::preset#12 = (const byte[]) preset_stdchar#0
Constant inlined get_vic_screen::return#6 = (const byte*) VIC_SCREEN0#0
Constant inlined get_vic_screen::return#0 = (const byte*) VIC_SCREEN0#0
Constant inlined get_vic_screen::return#2 = (const byte*) VIC_SCREEN2#0
Constant inlined get_vic_screen::return#1 = (const byte*) VIC_SCREEN1#0
Constant inlined apply_preset::preset#10 = (const byte[]) preset_sixsfred2#0
Constant inlined gfx_init_plane_8bppchunky::$0 = (const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000
Constant inlined bitmap_clear::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_pressed::keycode#3 = (const byte) KEY_COMMODORE#0
Constant inlined keyboard_event_pressed::keycode#2 = (const byte) KEY_CTRL#0
Constant inlined keyboard_event_pressed::keycode#1 = (const byte) KEY_RSHIFT#0
Constant inlined keyboard_event_pressed::keycode#0 = (const byte) KEY_LSHIFT#0
Constant inlined gfx_init_screen0::ch#0 = (const byte*) VIC_SCREEN0#0
Constant inlined gfx_mode::col#0 = (const byte*) COLS#0
Constant inlined gfx_init_plane_8bppchunky::$3 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_screen1::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_vertical::bx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_events_size#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined get_plane::return#2 = ((dword))(const byte*) VIC_SCREEN2#0
Constant inlined get_plane::return#10 = ((dword))(const dword) PLANE_VERTICAL2#0
Constant inlined get_plane::return#3 = ((dword))(const byte*) VIC_SCREEN3#0
Constant inlined form_control::return#5 = (byte/word/signed word/dword/signed dword) $ff
Constant inlined get_plane::return#0 = ((dword))(const byte*) VIC_SCREEN0#0
Constant inlined get_plane::return#1 = ((dword))(const byte*) VIC_SCREEN1#0
Constant inlined get_plane::return#6 = ((dword))(const dword) PLANE_8BPP_CHUNKY#0
Constant inlined get_plane::return#7 = ((dword))(const dword) PLANE_HORISONTAL#0
Constant inlined gfx_init_plane_charset8::cr#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_control::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined get_plane::return#4 = ((dword))(const byte*) VIC_BITMAP#0
Constant inlined form_control::return#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_modifiers#2 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0
Constant inlined get_plane::return#5 = ((dword))(const byte*) VIC_CHARSET_ROM#0
Constant inlined form_control::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_modifiers#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_field_idx#8 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined get_plane::return#8 = ((dword))(const dword) PLANE_VERTICAL#0
Constant inlined form_field_idx#7 = (const byte) form_fields_cnt#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined get_plane::return#9 = ((dword))(const dword) PLANE_HORISONTAL2#0
Constant inlined gfx_init_plane_8bppchunky::gfxb#0 = ((byte*))(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_8bppchunky::gfxb#2 = ((byte*))(word/signed word/dword/signed dword) $4000
Constant inlined form_mode::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_screen0::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_clear::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_charset8::$4 = (word/signed word/dword/signed dword) $4000+(const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff
Constant inlined gfx_init_plane_horisontal::$0 = (const dword) PLANE_HORISONTAL#0/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_charset8::$5 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_mode::$12 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined gfx_init_plane_horisontal::$3 = (const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#0 = ((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_horisontal::$4 = (word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_horisontal::$5 = (word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_plane_charset8::$0 = (const dword) PLANE_CHARSET8#0/(word/signed word/dword/signed dword) $4000
Constant inlined form_cursor_count#26 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined gfx_init_plane_charset8::$3 = (const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff
Constant inlined bitmap_init::bitmap#0 = (const byte*) VIC_BITMAP#0
Constant inlined bitmap_init::bits#0 = (byte/word/signed word/dword/signed dword) $80
Constant inlined bitmap_init::bits#2 = (byte/word/signed word/dword/signed dword) $80
Constant inlined form_set_screen::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined form_set_screen::screen#0 = (const byte*) FORM_SCREEN#0
Constant inlined print_set_screen::screen#0 = (const byte*) COLS#0
Constant inlined print_set_screen::screen#1 = (const byte*) FORM_SCREEN#0
Constant inlined $69 = (const byte[]) print_hextab#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#12 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#10 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000
Constant inlined gfx_init_charset::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::$1 = >(const byte*) VIC_BITMAP#0
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Successful SSA optimization Pass2ConstantStringConsolidation
Simplifying constant plus zero form_fields_val#0+0
Simplifying constant plus zero bitmap_plot_xhi#0+0
Simplifying constant plus zero bitmap_plot_xlo#0+0
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Constant inlined form_preset#0 = (const byte[]) form_fields_val#0
Constant inlined render_preset_name::name#12 = (const byte*) render_preset_name::name#1
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Added new block during phi lifting gfx_mode::@53(between gfx_mode::@1 and gfx_mode::@2)
Added new block during phi lifting gfx_mode::@54(between gfx_mode::@2 and gfx_mode::@3)
Added new block during phi lifting gfx_mode::@55(between gfx_mode::@3 and gfx_mode::@4)
Added new block during phi lifting gfx_mode::@56(between gfx_mode::@4 and gfx_mode::@5)
Added new block during phi lifting gfx_mode::@57(between gfx_mode::@5 and gfx_mode::@6)
Added new block during phi lifting gfx_mode::@58(between gfx_mode::@7 and gfx_mode::@8)
Added new block during phi lifting gfx_mode::@59(between gfx_mode::@23 and gfx_mode::@21)
Added new block during phi lifting gfx_mode::@60(between gfx_mode::@22 and gfx_mode::@22)
Added new block during phi lifting gfx_mode::@61(between gfx_mode::@26 and gfx_mode::@26)
Added new block during phi lifting gfx_mode::@62(between gfx_mode::@29 and gfx_mode::@29)
Added new block during phi lifting keyboard_event_get::@7(between keyboard_event_get and keyboard_event_get::@return)
Fixing phi predecessor for keyboard_event_get::return#2 to new block ( keyboard_event_get -> keyboard_event_get::@7 ) during phi lifting.
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@10 and keyboard_event_scan::@8)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@27 and keyboard_event_scan::@2)
Added new block during phi lifting keyboard_event_scan::@32(between keyboard_event_scan::@28 and keyboard_event_scan::@3)
Added new block during phi lifting keyboard_event_scan::@33(between keyboard_event_scan::@29 and keyboard_event_scan::@return)
Added new block during phi lifting keyboard_event_scan::@34(between keyboard_event_scan::@12 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@35(between keyboard_event_scan::@25 and keyboard_event_scan::@11)
Fixing phi predecessor for keyboard_event_scan::col#2 to new block ( keyboard_event_scan::@25 -> keyboard_event_scan::@35 ) during phi lifting.
Added new block during phi lifting keyboard_event_scan::@36(between keyboard_event_scan::@11 and keyboard_event_scan::@12)
Added new block during phi lifting keyboard_event_scan::@37(between keyboard_event_scan::@16 and keyboard_event_scan::@12)
Added new block during phi lifting form_mode::@34(between form_mode::@1 and form_mode::@1)
Added new block during phi lifting form_mode::@35(between form_mode::@14 and form_mode::@3)
Added new block during phi lifting form_render_values::@4(between form_render_values::@3 and form_render_values::@1)
Added new block during phi lifting apply_preset::@47(between apply_preset::@45 and apply_preset::@45)
Added new block during phi lifting form_control::@36(between form_control::@33 and form_control::@1)
Added new block during phi lifting form_control::@37(between form_control::@11 and form_control::@22)
Added new block during phi lifting form_control::@38(between form_control::@19 and form_control::@22)
Added new block during phi lifting form_control::@39(between form_control::@5 and form_control::@return)
Fixing phi predecessor for form_control::return#2 to new block ( form_control::@5 -> form_control::@39 ) during phi lifting.
Added new block during phi lifting form_set_screen::@3(between form_set_screen::@1 and form_set_screen::@1)
Added new block during phi lifting print_str_lines::@12(between print_str_lines::@1 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@13(between print_str_lines::@5 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@14(between print_str_lines::@4 and print_str_lines::@5)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting gfx_init_plane_fill::@7(between gfx_init_plane_fill::@3 and gfx_init_plane_fill::@1)
Added new block during phi lifting gfx_init_plane_fill::@8(between gfx_init_plane_fill::@2 and gfx_init_plane_fill::@2)
Added new block during phi lifting gfx_init_plane_horisontal2::@7(between gfx_init_plane_horisontal2::@3 and gfx_init_plane_horisontal2::@1)
Added new block during phi lifting gfx_init_plane_horisontal2::@8(between gfx_init_plane_horisontal2::@2 and gfx_init_plane_horisontal2::@2)
Added new block during phi lifting gfx_init_plane_vertical::@7(between gfx_init_plane_vertical::@3 and gfx_init_plane_vertical::@1)
Added new block during phi lifting gfx_init_plane_vertical::@8(between gfx_init_plane_vertical::@2 and gfx_init_plane_vertical::@2)
Added new block during phi lifting gfx_init_plane_horisontal::@11(between gfx_init_plane_horisontal::@7 and gfx_init_plane_horisontal::@1)
Added new block during phi lifting gfx_init_plane_horisontal::@12(between gfx_init_plane_horisontal::@4 and gfx_init_plane_horisontal::@2)
Added new block during phi lifting gfx_init_plane_charset8::@11(between gfx_init_plane_charset8::@7 and gfx_init_plane_charset8::@1)
Added new block during phi lifting gfx_init_plane_charset8::@12(between gfx_init_plane_charset8::@6 and gfx_init_plane_charset8::@2)
Added new block during phi lifting gfx_init_plane_charset8::@13(between gfx_init_plane_charset8::@4 and gfx_init_plane_charset8::@3)
Added new block during phi lifting gfx_init_plane_8bppchunky::@10(between gfx_init_plane_8bppchunky::@5 and gfx_init_plane_8bppchunky::@1)
Added new block during phi lifting gfx_init_plane_8bppchunky::@11(between gfx_init_plane_8bppchunky::@3 and gfx_init_plane_8bppchunky::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@12(between gfx_init_plane_8bppchunky::@2 and gfx_init_plane_8bppchunky::@3)
Added new block during phi lifting gfx_init_vic_bitmap::@6(between gfx_init_vic_bitmap::@5 and gfx_init_vic_bitmap::@1)
Added new block during phi lifting bitmap_line_xdyi::@6(between bitmap_line_xdyi::@2 and bitmap_line_xdyi::@1)
Added new block during phi lifting bitmap_line_xdyi::@7(between bitmap_line_xdyi::@5 and bitmap_line_xdyi::@2)
Added new block during phi lifting bitmap_line_ydxi::@6(between bitmap_line_ydxi::@2 and bitmap_line_ydxi::@1)
Added new block during phi lifting bitmap_line_ydxi::@7(between bitmap_line_ydxi::@5 and bitmap_line_ydxi::@2)
Added new block during phi lifting bitmap_line_xdyd::@6(between bitmap_line_xdyd::@2 and bitmap_line_xdyd::@1)
Added new block during phi lifting bitmap_line_xdyd::@7(between bitmap_line_xdyd::@5 and bitmap_line_xdyd::@2)
Added new block during phi lifting bitmap_line_ydxd::@6(between bitmap_line_ydxd::@2 and bitmap_line_ydxd::@1)
Added new block during phi lifting bitmap_line_ydxd::@7(between bitmap_line_ydxd::@5 and bitmap_line_ydxd::@2)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@6(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@12(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting gfx_init_charset::@5(between gfx_init_charset::@3 and gfx_init_charset::@1)
Added new block during phi lifting gfx_init_charset::@6(between gfx_init_charset::@2 and gfx_init_charset::@2)
Added new block during phi lifting gfx_init_screen4::@5(between gfx_init_screen4::@3 and gfx_init_screen4::@1)
Added new block during phi lifting gfx_init_screen4::@6(between gfx_init_screen4::@2 and gfx_init_screen4::@2)
Added new block during phi lifting gfx_init_screen3::@5(between gfx_init_screen3::@3 and gfx_init_screen3::@1)
Added new block during phi lifting gfx_init_screen3::@6(between gfx_init_screen3::@2 and gfx_init_screen3::@2)
Added new block during phi lifting gfx_init_screen2::@5(between gfx_init_screen2::@3 and gfx_init_screen2::@1)
Added new block during phi lifting gfx_init_screen2::@6(between gfx_init_screen2::@2 and gfx_init_screen2::@2)
Added new block during phi lifting gfx_init_screen1::@5(between gfx_init_screen1::@3 and gfx_init_screen1::@1)
Added new block during phi lifting gfx_init_screen1::@6(between gfx_init_screen1::@2 and gfx_init_screen1::@2)
Added new block during phi lifting gfx_init_screen0::@5(between gfx_init_screen0::@3 and gfx_init_screen0::@1)
Added new block during phi lifting gfx_init_screen0::@6(between gfx_init_screen0::@2 and gfx_init_screen0::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @68
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of gfx_mode::@12
Adding NOP phi() at start of gfx_mode::@18
Adding NOP phi() at start of gfx_mode::@20
Adding NOP phi() at start of gfx_mode::@51
Adding NOP phi() at start of keyboard_event_scan::@23
Adding NOP phi() at start of keyboard_event_scan::@24
Adding NOP phi() at start of get_vic_screen::@9
Adding NOP phi() at start of get_vic_charset::@3
Adding NOP phi() at start of get_plane::@27
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@21
Adding NOP phi() at start of form_mode::@22
Adding NOP phi() at start of form_mode::@23
Adding NOP phi() at start of form_mode::@24
Adding NOP phi() at start of form_mode::@25
Adding NOP phi() at start of form_mode::@26
Adding NOP phi() at start of form_mode::@27
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of render_preset_name::@33
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of apply_preset::@33
Adding NOP phi() at start of form_control::@7
Adding NOP phi() at start of form_control::@34
Adding NOP phi() at start of form_control::@12
Adding NOP phi() at start of form_control::@24
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of print_str_lines::@7
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@8
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_vic_bitmap
Adding NOP phi() at start of gfx_init_vic_bitmap::@3
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen0
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to keyboard_init:8 gfx_init:10 form_mode:13 gfx_mode:15 
Calls in [gfx_mode] to get_plane:59 get_plane:83 get_vic_screen:107 get_vic_charset:114 get_vic_screen:124 keyboard_event_scan:159 keyboard_event_get:161 
Calls in [keyboard_event_scan] to keyboard_matrix_read:196 keyboard_event_pressed:207 keyboard_event_pressed:213 keyboard_event_pressed:220 keyboard_event_pressed:227 
Calls in [form_mode] to print_set_screen:311 print_cls:313 print_str_lines:315 print_set_screen:317 print_cls:319 print_str_lines:321 form_set_screen:323 form_render_values:325 render_preset_name:328 form_control:355 apply_preset:362 form_render_values:364 render_preset_name:367 
Calls in [render_preset_name] to print_str_at:391 
Calls in [form_render_values] to form_field_ptr:406 
Calls in [form_control] to form_field_ptr:441 keyboard_event_scan:452 keyboard_event_get:454 
Calls in [print_str_lines] to print_ln:525 
Calls in [gfx_init] to gfx_init_screen0:551 gfx_init_screen1:553 gfx_init_screen2:555 gfx_init_screen3:557 gfx_init_screen4:559 gfx_init_charset:561 gfx_init_vic_bitmap:563 gfx_init_plane_8bppchunky:565 gfx_init_plane_charset8:567 gfx_init_plane_horisontal:569 gfx_init_plane_vertical:571 gfx_init_plane_horisontal2:573 gfx_init_plane_vertical2:575 gfx_init_plane_blank:577 gfx_init_plane_full:579 
Calls in [gfx_init_plane_full] to gfx_init_plane_fill:582 
Calls in [gfx_init_plane_fill] to dtvSetCpuBankSegment1:590 dtvSetCpuBankSegment1:606 
Calls in [gfx_init_plane_blank] to gfx_init_plane_fill:617 
Calls in [gfx_init_plane_vertical2] to gfx_init_plane_fill:620 
Calls in [gfx_init_plane_horisontal2] to dtvSetCpuBankSegment1:623 dtvSetCpuBankSegment1:636 
Calls in [gfx_init_plane_vertical] to dtvSetCpuBankSegment1:643 dtvSetCpuBankSegment1:654 
Calls in [gfx_init_plane_horisontal] to dtvSetCpuBankSegment1:661 dtvSetCpuBankSegment1:676 
Calls in [gfx_init_plane_charset8] to dtvSetCpuBankSegment1:686 dtvSetCpuBankSegment1:714 
Calls in [gfx_init_plane_8bppchunky] to dtvSetCpuBankSegment1:729 dtvSetCpuBankSegment1:737 dtvSetCpuBankSegment1:750 
Calls in [gfx_init_vic_bitmap] to bitmap_init:761 bitmap_clear:763 bitmap_line:769 
Calls in [bitmap_line] to bitmap_line_ydxi:789 bitmap_line_xdyi:801 bitmap_line_ydxd:814 bitmap_line_xdyd:825 bitmap_line_ydxd:840 bitmap_line_xdyd:851 bitmap_line_ydxi:864 bitmap_line_xdyi:875 
Calls in [bitmap_line_xdyi] to bitmap_plot:886 
Calls in [bitmap_line_ydxi] to bitmap_plot:920 
Calls in [bitmap_line_xdyd] to bitmap_plot:947 
Calls in [bitmap_line_ydxd] to bitmap_plot:974 

Created 192 initial phi equivalence classes
Coalesced [16] form_cursor_count#66 ← form_cursor_count#16
Coalesced [17] keyboard_events_size#161 ← keyboard_events_size#24
Coalesced [18] form_field_idx#74 ← form_field_idx#18
Coalesced [24] gfx_mode::dtv_control#20 ← gfx_mode::dtv_control#2
Coalesced [28] gfx_mode::dtv_control#21 ← gfx_mode::dtv_control#3
Coalesced [32] gfx_mode::dtv_control#23 ← gfx_mode::dtv_control#4
Coalesced [36] gfx_mode::dtv_control#25 ← gfx_mode::dtv_control#5
Coalesced [40] gfx_mode::dtv_control#27 ← gfx_mode::dtv_control#6
Coalesced [48] gfx_mode::vic_control#7 ← gfx_mode::vic_control#2
Coalesced [58] get_plane::idx#17 ← get_plane::idx#0
Coalesced [82] get_plane::idx#16 ← get_plane::idx#1
Coalesced [106] get_vic_screen::idx#7 ← get_vic_screen::idx#0
Coalesced [123] get_vic_screen::idx#8 ← get_vic_screen::idx#1
Coalesced [127] gfx_mode::vic_colors#6 ← gfx_mode::vic_colors#0
Coalesced [129] gfx_mode::vic_colors#7 ← gfx_mode::vic_colors#3
Coalesced [130] gfx_mode::col#6 ← gfx_mode::col#3
Coalesced [158] keyboard_events_size#165 ← keyboard_events_size#24
Coalesced [166] gfx_mode::j#3 ← gfx_mode::j#1
Coalesced [171] gfx_mode::i#3 ← gfx_mode::i#1
Coalesced [172] gfx_mode::vic_colors#5 ← gfx_mode::vic_colors#1
Coalesced [173] gfx_mode::col#5 ← gfx_mode::col#1
Coalesced [174] gfx_mode::cy#5 ← gfx_mode::cy#1
Coalesced (already) [175] gfx_mode::vic_colors#8 ← gfx_mode::vic_colors#1
Coalesced (already) [176] gfx_mode::col#7 ← gfx_mode::col#1
Coalesced [177] gfx_mode::cx#3 ← gfx_mode::cx#1
Coalesced [178] gfx_mode::vic_control#8 ← gfx_mode::vic_control#5
Coalesced [179] gfx_mode::dtv_control#28 ← gfx_mode::dtv_control#13
Coalesced [180] gfx_mode::dtv_control#26 ← gfx_mode::dtv_control#11
Coalesced [181] gfx_mode::dtv_control#24 ← gfx_mode::dtv_control#10
Coalesced [182] gfx_mode::dtv_control#22 ← gfx_mode::dtv_control#15
Coalesced [183] gfx_mode::dtv_control#19 ← gfx_mode::dtv_control#14
Coalesced [187] keyboard_event_get::return#8 ← keyboard_event_get::return#1
Coalesced [188] keyboard_events_size#163 ← keyboard_events_size#4
Coalesced [191] keyboard_events_size#162 ← keyboard_events_size#100
Coalesced [193] keyboard_events_size#166 ← keyboard_events_size#110
Coalesced [201] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#1
Coalesced (already) [202] keyboard_events_size#169 ← keyboard_events_size#119
Coalesced [218] keyboard_modifiers#142 ← keyboard_modifiers#3
Coalesced [225] keyboard_modifiers#144 ← keyboard_modifiers#4
Coalesced [232] keyboard_modifiers#146 ← keyboard_modifiers#5
Coalesced [235] keyboard_modifiers#145 ← keyboard_modifiers#20
Coalesced [236] keyboard_modifiers#143 ← keyboard_modifiers#19
Coalesced [237] keyboard_modifiers#141 ← keyboard_modifiers#18
Coalesced [238] keyboard_event_scan::row#15 ← keyboard_event_scan::row#1
Coalesced [239] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced (already) [240] keyboard_events_size#167 ← keyboard_events_size#100
Coalesced [241] keyboard_event_scan::keycode#20 ← keyboard_event_scan::keycode#11
Coalesced [242] keyboard_events_size#171 ← keyboard_events_size#119
Coalesced [252] keyboard_events_size#175 ← keyboard_events_size#2
Coalesced [258] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#15
Coalesced [259] keyboard_events_size#168 ← keyboard_events_size#118
Coalesced [260] keyboard_event_scan::col#9 ← keyboard_event_scan::col#1
Coalesced (already) [261] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#15
Coalesced (already) [262] keyboard_events_size#170 ← keyboard_events_size#118
Coalesced [266] keyboard_events_size#174 ← keyboard_events_size#1
Coalesced (already) [267] keyboard_events_size#173 ← keyboard_events_size#18
Coalesced (already) [268] keyboard_events_size#172 ← keyboard_events_size#18
Coalesced [327] render_preset_name::idx#13 ← render_preset_name::idx#0
Coalesced [348] form_cursor_count#68 ← form_cursor_count#1
Coalesced [349] keyboard_events_size#177 ← keyboard_events_size#27
Coalesced [350] form_field_idx#76 ← form_field_idx#1
Coalesced [351] form_mode::preset_current#12 ← form_mode::preset_current#0
Coalesced [366] render_preset_name::idx#14 ← render_preset_name::idx#1
Coalesced (already) [368] form_cursor_count#69 ← form_cursor_count#16
Coalesced (already) [369] keyboard_events_size#178 ← keyboard_events_size#24
Coalesced (already) [370] form_field_idx#77 ← form_field_idx#18
Coalesced [371] form_mode::preset_current#13 ← form_mode::preset_current#1
Coalesced (already) [372] form_cursor_count#67 ← form_cursor_count#16
Coalesced (already) [373] keyboard_events_size#176 ← keyboard_events_size#24
Coalesced (already) [374] form_field_idx#75 ← form_field_idx#18
Coalesced [375] form_mode::i#3 ← form_mode::i#1
Coalesced [393] print_str_at::str#5 ← print_str_at::str#1
Coalesced [400] print_str_at::str#6 ← print_str_at::str#0
Coalesced [401] print_str_at::at#5 ← print_str_at::at#0
Coalesced [405] form_field_ptr::field_idx#4 ← form_field_ptr::field_idx#0
Coalesced [413] form_render_values::idx#4 ← form_render_values::idx#1
Coalesced [438] apply_preset::i#3 ← apply_preset::i#1
Coalesced [440] form_field_ptr::field_idx#3 ← form_field_ptr::field_idx#1
Coalesced (already) [451] keyboard_events_size#164 ← keyboard_events_size#47
Coalesced [466] form_field_idx#81 ← form_field_idx#31
Coalesced [469] form_field_idx#78 ← form_field_idx#44
Coalesced [473] form_field_idx#79 ← form_field_idx#45
Coalesced [481] form_cursor_count#72 ← form_cursor_count#15
Coalesced (already) [482] form_field_idx#82 ← form_field_idx#28
Coalesced (already) [487] form_cursor_count#71 ← form_cursor_count#15
Coalesced (already) [488] form_field_idx#80 ← form_field_idx#28
Coalesced (already) [489] form_cursor_count#73 ← form_cursor_count#15
Coalesced (already) [490] form_field_idx#83 ← form_field_idx#28
Coalesced [493] form_cursor_count#70 ← form_cursor_count#5
Coalesced [504] form_set_screen::line#3 ← form_set_screen::line#1
Coalesced [505] form_set_screen::y#3 ← form_set_screen::y#1
Coalesced [507] print_str_lines::str#11 ← print_str_lines::str#5
Not coalescing [508] print_char_cursor#77 ← print_screen#1
Coalesced [509] print_line_cursor#77 ← print_screen#1
Coalesced [513] print_str_lines::str#13 ← print_str_lines::str#3
Coalesced [514] print_char_cursor#79 ← print_char_cursor#22
Coalesced [521] print_char_cursor#82 ← print_char_cursor#1
Coalesced [526] print_str_lines::str#12 ← print_str_lines::str#0
Not coalescing [527] print_char_cursor#78 ← print_line_cursor#22
Coalesced [528] print_line_cursor#78 ← print_line_cursor#22
Coalesced (already) [529] print_str_lines::str#14 ← print_str_lines::str#0
Coalesced [530] print_char_cursor#80 ← print_char_cursor#38
Coalesced (already) [531] print_char_cursor#81 ← print_char_cursor#20
Coalesced [532] print_line_cursor#79 ← print_line_cursor#2
Coalesced (already) [537] print_line_cursor#80 ← print_line_cursor#22
Coalesced [539] print_cls::sc#3 ← print_cls::sc#0
Coalesced [546] print_cls::sc#4 ← print_cls::sc#1
Coalesced [548] print_screen#1 ← print_set_screen::screen#2
Coalesced [589] dtvSetCpuBankSegment1::cpuBankIdx#15 ← dtvSetCpuBankSegment1::cpuBankIdx#11
Coalesced [597] gfx_init_plane_fill::gfxb#7 ← gfx_init_plane_fill::gfxb#3
Coalesced [608] gfx_init_plane_fill::gfxb#5 ← gfx_init_plane_fill::gfxb#1
Coalesced [609] gfx_init_plane_fill::by#5 ← gfx_init_plane_fill::by#1
Coalesced (already) [610] gfx_init_plane_fill::gfxb#8 ← gfx_init_plane_fill::gfxb#1
Coalesced [611] gfx_init_plane_fill::bx#3 ← gfx_init_plane_fill::bx#1
Coalesced [625] gfx_init_plane_horisontal2::gfxa#6 ← gfx_init_plane_horisontal2::gfxa#3
Coalesced [638] gfx_init_plane_horisontal2::ay#5 ← gfx_init_plane_horisontal2::ay#1
Coalesced [639] gfx_init_plane_horisontal2::gfxa#5 ← gfx_init_plane_horisontal2::gfxa#1
Coalesced (already) [640] gfx_init_plane_horisontal2::gfxa#7 ← gfx_init_plane_horisontal2::gfxa#1
Coalesced [641] gfx_init_plane_horisontal2::ax#3 ← gfx_init_plane_horisontal2::ax#1
Coalesced [645] gfx_init_plane_vertical::gfxb#6 ← gfx_init_plane_vertical::gfxb#3
Coalesced [656] gfx_init_plane_vertical::gfxb#5 ← gfx_init_plane_vertical::gfxb#1
Coalesced [657] gfx_init_plane_vertical::by#5 ← gfx_init_plane_vertical::by#1
Coalesced (already) [658] gfx_init_plane_vertical::gfxb#7 ← gfx_init_plane_vertical::gfxb#1
Coalesced [659] gfx_init_plane_vertical::bx#3 ← gfx_init_plane_vertical::bx#1
Coalesced [663] gfx_init_plane_horisontal::gfxa#10 ← gfx_init_plane_horisontal::gfxa#6
Coalesced [669] gfx_init_plane_horisontal::gfxa#13 ← gfx_init_plane_horisontal::gfxa#2
Coalesced [678] gfx_init_plane_horisontal::ay#8 ← gfx_init_plane_horisontal::ay#1
Coalesced [679] gfx_init_plane_horisontal::gfxa#9 ← gfx_init_plane_horisontal::gfxa#7
Coalesced (already) [680] gfx_init_plane_horisontal::gfxa#11 ← gfx_init_plane_horisontal::gfxa#7
Coalesced [681] gfx_init_plane_horisontal::ax#6 ← gfx_init_plane_horisontal::ax#1
Coalesced [684] gfx_init_plane_horisontal::gfxa#12 ← gfx_init_plane_horisontal::gfxa#1
Coalesced [689] gfx_init_plane_charset8::chargen#10 ← gfx_init_plane_charset8::chargen#3
Coalesced [690] gfx_init_plane_charset8::gfxa#10 ← gfx_init_plane_charset8::gfxa#6
Coalesced [691] gfx_init_plane_charset8::col#10 ← gfx_init_plane_charset8::col#6
Coalesced [695] gfx_init_plane_charset8::bits#5 ← gfx_init_plane_charset8::bits#0
Coalesced [696] gfx_init_plane_charset8::gfxa#12 ← gfx_init_plane_charset8::gfxa#5
Coalesced [697] gfx_init_plane_charset8::col#12 ← gfx_init_plane_charset8::col#5
Not coalescing [701] gfx_init_plane_charset8::c#3 ← gfx_init_plane_charset8::col#2
Coalesced [716] gfx_init_plane_charset8::chargen#9 ← gfx_init_plane_charset8::chargen#1
Coalesced [717] gfx_init_plane_charset8::gfxa#9 ← gfx_init_plane_charset8::gfxa#1
Coalesced [718] gfx_init_plane_charset8::col#9 ← gfx_init_plane_charset8::col#1
Coalesced [719] gfx_init_plane_charset8::ch#9 ← gfx_init_plane_charset8::ch#1
Coalesced (already) [720] gfx_init_plane_charset8::chargen#11 ← gfx_init_plane_charset8::chargen#1
Coalesced (already) [721] gfx_init_plane_charset8::gfxa#11 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [722] gfx_init_plane_charset8::col#11 ← gfx_init_plane_charset8::col#1
Coalesced [723] gfx_init_plane_charset8::cr#7 ← gfx_init_plane_charset8::cr#1
Coalesced [724] gfx_init_plane_charset8::bits#6 ← gfx_init_plane_charset8::bits#1
Coalesced (already) [725] gfx_init_plane_charset8::gfxa#13 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [726] gfx_init_plane_charset8::col#13 ← gfx_init_plane_charset8::col#1
Coalesced [727] gfx_init_plane_charset8::cp#5 ← gfx_init_plane_charset8::cp#1
Coalesced [731] gfx_init_plane_8bppchunky::gfxb#8 ← gfx_init_plane_8bppchunky::gfxb#5
Coalesced [732] gfx_init_plane_8bppchunky::gfxbCpuBank#11 ← gfx_init_plane_8bppchunky::gfxbCpuBank#7
Coalesced [736] dtvSetCpuBankSegment1::cpuBankIdx#14 ← dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [739] gfx_init_plane_8bppchunky::gfxbCpuBank#14 ← gfx_init_plane_8bppchunky::gfxbCpuBank#2
Coalesced [752] gfx_init_plane_8bppchunky::gfxb#7 ← gfx_init_plane_8bppchunky::gfxb#1
Coalesced [753] gfx_init_plane_8bppchunky::y#8 ← gfx_init_plane_8bppchunky::y#1
Coalesced [754] gfx_init_plane_8bppchunky::gfxbCpuBank#10 ← gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced (already) [755] gfx_init_plane_8bppchunky::gfxb#9 ← gfx_init_plane_8bppchunky::gfxb#1
Coalesced [756] gfx_init_plane_8bppchunky::x#6 ← gfx_init_plane_8bppchunky::x#1
Coalesced (already) [757] gfx_init_plane_8bppchunky::gfxbCpuBank#12 ← gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced [758] gfx_init_plane_8bppchunky::gfxb#10 ← gfx_init_plane_8bppchunky::gfxb#3
Coalesced (already) [759] gfx_init_plane_8bppchunky::gfxbCpuBank#13 ← gfx_init_plane_8bppchunky::gfxbCpuBank#4
Coalesced [773] gfx_init_vic_bitmap::l#4 ← gfx_init_vic_bitmap::l#1
Coalesced [784] bitmap_line_ydxi::xd#8 ← bitmap_line_ydxi::xd#0
Coalesced [785] bitmap_line_ydxi::x#9 ← bitmap_line_ydxi::x#0
Coalesced [786] bitmap_line_ydxi::y#9 ← bitmap_line_ydxi::y#0
Coalesced [787] bitmap_line_ydxi::yd#8 ← bitmap_line_ydxi::yd#0
Coalesced [788] bitmap_line_ydxi::y1#8 ← bitmap_line_ydxi::y1#0
Coalesced [796] bitmap_line_xdyi::yd#7 ← bitmap_line_xdyi::yd#0
Coalesced [797] bitmap_line_xdyi::x#8 ← bitmap_line_xdyi::x#0
Coalesced [798] bitmap_line_xdyi::y#8 ← bitmap_line_xdyi::y#0
Coalesced [799] bitmap_line_xdyi::xd#7 ← bitmap_line_xdyi::xd#0
Coalesced [800] bitmap_line_xdyi::x1#7 ← bitmap_line_xdyi::x1#0
Coalesced [809] bitmap_line_ydxd::xd#7 ← bitmap_line_ydxd::xd#0
Coalesced [810] bitmap_line_ydxd::x#8 ← bitmap_line_ydxd::x#0
Coalesced [811] bitmap_line_ydxd::y#9 ← bitmap_line_ydxd::y#0
Coalesced [812] bitmap_line_ydxd::yd#7 ← bitmap_line_ydxd::yd#0
Coalesced [813] bitmap_line_ydxd::y1#7 ← bitmap_line_ydxd::y1#0
Coalesced [820] bitmap_line_xdyd::yd#7 ← bitmap_line_xdyd::yd#0
Coalesced [821] bitmap_line_xdyd::x#8 ← bitmap_line_xdyd::x#0
Coalesced [822] bitmap_line_xdyd::y#8 ← bitmap_line_xdyd::y#0
Coalesced [823] bitmap_line_xdyd::xd#7 ← bitmap_line_xdyd::xd#0
Coalesced [824] bitmap_line_xdyd::x1#7 ← bitmap_line_xdyd::x1#0
Coalesced [835] bitmap_line_ydxd::xd#8 ← bitmap_line_ydxd::xd#1
Coalesced [836] bitmap_line_ydxd::x#9 ← bitmap_line_ydxd::x#1
Coalesced [837] bitmap_line_ydxd::y#10 ← bitmap_line_ydxd::y#1
Coalesced [838] bitmap_line_ydxd::yd#8 ← bitmap_line_ydxd::yd#1
Coalesced [839] bitmap_line_ydxd::y1#8 ← bitmap_line_ydxd::y1#1
Coalesced [846] bitmap_line_xdyd::yd#8 ← bitmap_line_xdyd::yd#1
Coalesced [847] bitmap_line_xdyd::x#9 ← bitmap_line_xdyd::x#1
Coalesced [848] bitmap_line_xdyd::y#9 ← bitmap_line_xdyd::y#1
Coalesced [849] bitmap_line_xdyd::xd#8 ← bitmap_line_xdyd::xd#1
Coalesced [850] bitmap_line_xdyd::x1#8 ← bitmap_line_xdyd::x1#1
Coalesced [859] bitmap_line_ydxi::xd#7 ← bitmap_line_ydxi::xd#1
Coalesced [860] bitmap_line_ydxi::x#8 ← bitmap_line_ydxi::x#1
Coalesced [861] bitmap_line_ydxi::y#8 ← bitmap_line_ydxi::y#1
Coalesced [862] bitmap_line_ydxi::yd#7 ← bitmap_line_ydxi::yd#1
Coalesced [863] bitmap_line_ydxi::y1#7 ← bitmap_line_ydxi::y1#1
Coalesced [870] bitmap_line_xdyi::yd#8 ← bitmap_line_xdyi::yd#1
Coalesced [871] bitmap_line_xdyi::x#9 ← bitmap_line_xdyi::x#1
Coalesced [872] bitmap_line_xdyi::y#9 ← bitmap_line_xdyi::y#1
Coalesced [873] bitmap_line_xdyi::xd#8 ← bitmap_line_xdyi::xd#1
Coalesced [874] bitmap_line_xdyi::x1#8 ← bitmap_line_xdyi::x1#1
Coalesced [878] bitmap_line_xdyi::x#10 ← bitmap_line_xdyi::x#6
Coalesced [879] bitmap_line_xdyi::y#10 ← bitmap_line_xdyi::y#5
Coalesced [880] bitmap_line_xdyi::e#7 ← bitmap_line_xdyi::e#0
Coalesced [884] bitmap_plot::x#6 ← bitmap_plot::x#0
Coalesced [885] bitmap_plot::y#6 ← bitmap_plot::y#0
Coalesced [892] bitmap_line_xdyi::y#12 ← bitmap_line_xdyi::y#2
Coalesced [893] bitmap_line_xdyi::e#9 ← bitmap_line_xdyi::e#2
Coalesced [898] bitmap_line_xdyi::x#11 ← bitmap_line_xdyi::x#2
Coalesced [899] bitmap_line_xdyi::y#11 ← bitmap_line_xdyi::y#6
Coalesced [900] bitmap_line_xdyi::e#8 ← bitmap_line_xdyi::e#6
Coalesced (already) [901] bitmap_line_xdyi::y#13 ← bitmap_line_xdyi::y#3
Coalesced [902] bitmap_line_xdyi::e#10 ← bitmap_line_xdyi::e#1
Coalesced [912] bitmap_line_ydxi::x#10 ← bitmap_line_ydxi::x#5
Coalesced [913] bitmap_line_ydxi::y#10 ← bitmap_line_ydxi::y#6
Coalesced [914] bitmap_line_ydxi::e#7 ← bitmap_line_ydxi::e#0
Coalesced [918] bitmap_plot::x#8 ← bitmap_plot::x#2
Coalesced [919] bitmap_plot::y#8 ← bitmap_plot::y#2
Coalesced [926] bitmap_line_ydxi::x#12 ← bitmap_line_ydxi::x#2
Coalesced [927] bitmap_line_ydxi::e#9 ← bitmap_line_ydxi::e#2
Coalesced [932] bitmap_line_ydxi::x#11 ← bitmap_line_ydxi::x#6
Coalesced [933] bitmap_line_ydxi::y#11 ← bitmap_line_ydxi::y#2
Coalesced [934] bitmap_line_ydxi::e#8 ← bitmap_line_ydxi::e#6
Coalesced (already) [935] bitmap_line_ydxi::x#13 ← bitmap_line_ydxi::x#3
Coalesced [936] bitmap_line_ydxi::e#10 ← bitmap_line_ydxi::e#1
Coalesced [939] bitmap_line_xdyd::x#10 ← bitmap_line_xdyd::x#6
Coalesced [940] bitmap_line_xdyd::y#10 ← bitmap_line_xdyd::y#5
Coalesced [941] bitmap_line_xdyd::e#7 ← bitmap_line_xdyd::e#0
Coalesced [945] bitmap_plot::x#5 ← bitmap_plot::x#1
Coalesced [946] bitmap_plot::y#5 ← bitmap_plot::y#1
Coalesced [953] bitmap_line_xdyd::y#12 ← bitmap_line_xdyd::y#2
Coalesced [954] bitmap_line_xdyd::e#9 ← bitmap_line_xdyd::e#2
Coalesced [959] bitmap_line_xdyd::x#11 ← bitmap_line_xdyd::x#2
Coalesced [960] bitmap_line_xdyd::y#11 ← bitmap_line_xdyd::y#6
Coalesced [961] bitmap_line_xdyd::e#8 ← bitmap_line_xdyd::e#6
Coalesced (already) [962] bitmap_line_xdyd::y#13 ← bitmap_line_xdyd::y#3
Coalesced [963] bitmap_line_xdyd::e#10 ← bitmap_line_xdyd::e#1
Coalesced [966] bitmap_line_ydxd::x#10 ← bitmap_line_ydxd::x#5
Coalesced [967] bitmap_line_ydxd::y#11 ← bitmap_line_ydxd::y#7
Coalesced [968] bitmap_line_ydxd::e#7 ← bitmap_line_ydxd::e#0
Coalesced [972] bitmap_plot::x#7 ← bitmap_plot::x#3
Coalesced [973] bitmap_plot::y#7 ← bitmap_plot::y#3
Coalesced [980] bitmap_line_ydxd::x#12 ← bitmap_line_ydxd::x#2
Coalesced [981] bitmap_line_ydxd::e#9 ← bitmap_line_ydxd::e#2
Coalesced [986] bitmap_line_ydxd::x#11 ← bitmap_line_ydxd::x#6
Coalesced [987] bitmap_line_ydxd::y#12 ← bitmap_line_ydxd::y#3
Coalesced [988] bitmap_line_ydxd::e#8 ← bitmap_line_ydxd::e#6
Coalesced (already) [989] bitmap_line_ydxd::x#13 ← bitmap_line_ydxd::x#3
Coalesced [990] bitmap_line_ydxd::e#10 ← bitmap_line_ydxd::e#1
Coalesced [994] bitmap_clear::bitmap#7 ← bitmap_clear::bitmap#3
Coalesced [1003] bitmap_clear::bitmap#6 ← bitmap_clear::bitmap#1
Coalesced [1004] bitmap_clear::y#5 ← bitmap_clear::y#1
Coalesced (already) [1005] bitmap_clear::bitmap#8 ← bitmap_clear::bitmap#1
Coalesced [1006] bitmap_clear::x#3 ← bitmap_clear::x#1
Coalesced [1029] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [1034] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [1035] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [1036] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [1037] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [1038] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [1039] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced [1042] gfx_init_charset::chargen#6 ← gfx_init_charset::chargen#3
Coalesced [1043] gfx_init_charset::charset#6 ← gfx_init_charset::charset#3
Coalesced [1054] gfx_init_charset::chargen#5 ← gfx_init_charset::chargen#1
Coalesced [1055] gfx_init_charset::charset#5 ← gfx_init_charset::charset#1
Coalesced [1056] gfx_init_charset::c#5 ← gfx_init_charset::c#1
Coalesced (already) [1057] gfx_init_charset::chargen#7 ← gfx_init_charset::chargen#1
Coalesced (already) [1058] gfx_init_charset::charset#7 ← gfx_init_charset::charset#1
Coalesced [1059] gfx_init_charset::l#3 ← gfx_init_charset::l#1
Coalesced [1062] gfx_init_screen4::ch#6 ← gfx_init_screen4::ch#3
Coalesced [1071] gfx_init_screen4::ch#5 ← gfx_init_screen4::ch#1
Coalesced [1072] gfx_init_screen4::cy#5 ← gfx_init_screen4::cy#1
Coalesced (already) [1073] gfx_init_screen4::ch#7 ← gfx_init_screen4::ch#1
Coalesced [1074] gfx_init_screen4::cx#3 ← gfx_init_screen4::cx#1
Coalesced [1077] gfx_init_screen3::ch#6 ← gfx_init_screen3::ch#3
Coalesced [1090] gfx_init_screen3::cy#5 ← gfx_init_screen3::cy#1
Coalesced [1091] gfx_init_screen3::ch#5 ← gfx_init_screen3::ch#1
Coalesced [1092] gfx_init_screen3::cx#3 ← gfx_init_screen3::cx#1
Coalesced (already) [1093] gfx_init_screen3::ch#7 ← gfx_init_screen3::ch#1
Coalesced [1096] gfx_init_screen2::ch#6 ← gfx_init_screen2::ch#3
Coalesced [1110] gfx_init_screen2::cy#5 ← gfx_init_screen2::cy#1
Coalesced [1111] gfx_init_screen2::ch#5 ← gfx_init_screen2::ch#1
Coalesced [1112] gfx_init_screen2::cx#3 ← gfx_init_screen2::cx#1
Coalesced (already) [1113] gfx_init_screen2::ch#7 ← gfx_init_screen2::ch#1
Coalesced [1116] gfx_init_screen1::ch#6 ← gfx_init_screen1::ch#3
Coalesced [1127] gfx_init_screen1::cy#5 ← gfx_init_screen1::cy#1
Coalesced [1128] gfx_init_screen1::ch#5 ← gfx_init_screen1::ch#1
Coalesced [1129] gfx_init_screen1::cx#3 ← gfx_init_screen1::cx#1
Coalesced (already) [1130] gfx_init_screen1::ch#7 ← gfx_init_screen1::ch#1
Coalesced [1133] gfx_init_screen0::ch#6 ← gfx_init_screen0::ch#3
Coalesced [1146] gfx_init_screen0::cy#5 ← gfx_init_screen0::cy#1
Coalesced [1147] gfx_init_screen0::ch#5 ← gfx_init_screen0::ch#1
Coalesced [1148] gfx_init_screen0::cx#3 ← gfx_init_screen0::cx#1
Coalesced (already) [1149] gfx_init_screen0::ch#7 ← gfx_init_screen0::ch#1
Coalesced down to 120 phi equivalence classes
Culled Empty Block (label) gfx_mode::@61
Culled Empty Block (label) gfx_mode::@62
Culled Empty Block (label) gfx_mode::@59
Culled Empty Block (label) gfx_mode::@60
Culled Empty Block (label) gfx_mode::@58
Culled Empty Block (label) gfx_mode::@57
Culled Empty Block (label) gfx_mode::@56
Culled Empty Block (label) gfx_mode::@55
Culled Empty Block (label) gfx_mode::@54
Culled Empty Block (label) gfx_mode::@53
Culled Empty Block (label) keyboard_event_get::@7
Culled Empty Block (label) keyboard_event_scan::@33
Culled Empty Block (label) keyboard_event_scan::@32
Culled Empty Block (label) keyboard_event_scan::@31
Culled Empty Block (label) keyboard_event_scan::@30
Culled Empty Block (label) keyboard_event_scan::@35
Culled Empty Block (label) keyboard_event_scan::@34
Culled Empty Block (label) keyboard_event_scan::@37
Culled Empty Block (label) keyboard_event_scan::@36
Culled Empty Block (label) form_mode::@35
Culled Empty Block (label) form_mode::@34
Culled Empty Block (label) form_render_values::@4
Culled Empty Block (label) apply_preset::@47
Culled Empty Block (label) form_control::@7
Culled Empty Block (label) form_control::@12
Culled Empty Block (label) form_control::@24
Culled Empty Block (label) form_control::@16
Culled Empty Block (label) form_set_screen::@3
Culled Empty Block (label) print_str_lines::@12
Culled Empty Block (label) print_str_lines::@13
Culled Empty Block (label) print_str_lines::@14
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@3
Culled Empty Block (label) gfx_init_plane_fill::@7
Culled Empty Block (label) gfx_init_plane_fill::@8
Culled Empty Block (label) gfx_init_plane_horisontal2::@7
Culled Empty Block (label) gfx_init_plane_horisontal2::@8
Culled Empty Block (label) gfx_init_plane_vertical::@7
Culled Empty Block (label) gfx_init_plane_vertical::@8
Culled Empty Block (label) gfx_init_plane_horisontal::@11
Culled Empty Block (label) gfx_init_plane_horisontal::@12
Culled Empty Block (label) gfx_init_plane_charset8::@11
Culled Empty Block (label) gfx_init_plane_charset8::@12
Culled Empty Block (label) gfx_init_plane_charset8::@13
Culled Empty Block (label) gfx_init_plane_8bppchunky::@10
Culled Empty Block (label) gfx_init_plane_8bppchunky::@11
Culled Empty Block (label) gfx_init_plane_8bppchunky::@12
Culled Empty Block (label) gfx_init_vic_bitmap::@6
Culled Empty Block (label) bitmap_line_xdyi::@6
Culled Empty Block (label) bitmap_line_xdyi::@7
Culled Empty Block (label) bitmap_line_ydxi::@6
Culled Empty Block (label) bitmap_line_ydxi::@7
Culled Empty Block (label) bitmap_line_xdyd::@6
Culled Empty Block (label) bitmap_line_xdyd::@7
Culled Empty Block (label) bitmap_line_ydxd::@6
Culled Empty Block (label) bitmap_line_ydxd::@7
Culled Empty Block (label) bitmap_clear::@5
Culled Empty Block (label) bitmap_clear::@6
Culled Empty Block (label) bitmap_init::@3
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@12
Culled Empty Block (label) bitmap_init::@9
Culled Empty Block (label) gfx_init_charset::@5
Culled Empty Block (label) gfx_init_charset::@6
Culled Empty Block (label) gfx_init_screen4::@5
Culled Empty Block (label) gfx_init_screen4::@6
Culled Empty Block (label) gfx_init_screen3::@5
Culled Empty Block (label) gfx_init_screen3::@6
Culled Empty Block (label) gfx_init_screen2::@5
Culled Empty Block (label) gfx_init_screen2::@6
Culled Empty Block (label) gfx_init_screen1::@5
Culled Empty Block (label) gfx_init_screen1::@6
Culled Empty Block (label) gfx_init_screen0::@5
Culled Empty Block (label) gfx_init_screen0::@6
Renumbering block @68 to @1
Renumbering block print_str_lines::@4 to print_str_lines::@2
Renumbering block print_str_lines::@5 to print_str_lines::@3
Renumbering block print_str_lines::@6 to print_str_lines::@4
Renumbering block print_str_lines::@7 to print_str_lines::@5
Renumbering block keyboard_event_scan::@5 to keyboard_event_scan::@4
Renumbering block keyboard_event_scan::@6 to keyboard_event_scan::@5
Renumbering block keyboard_event_scan::@7 to keyboard_event_scan::@6
Renumbering block keyboard_event_scan::@8 to keyboard_event_scan::@7
Renumbering block keyboard_event_scan::@10 to keyboard_event_scan::@8
Renumbering block keyboard_event_scan::@11 to keyboard_event_scan::@9
Renumbering block keyboard_event_scan::@12 to keyboard_event_scan::@10
Renumbering block keyboard_event_scan::@14 to keyboard_event_scan::@11
Renumbering block keyboard_event_scan::@16 to keyboard_event_scan::@12
Renumbering block keyboard_event_scan::@17 to keyboard_event_scan::@13
Renumbering block keyboard_event_scan::@18 to keyboard_event_scan::@14
Renumbering block keyboard_event_scan::@20 to keyboard_event_scan::@15
Renumbering block keyboard_event_scan::@21 to keyboard_event_scan::@16
Renumbering block keyboard_event_scan::@23 to keyboard_event_scan::@17
Renumbering block keyboard_event_scan::@24 to keyboard_event_scan::@18
Renumbering block keyboard_event_scan::@25 to keyboard_event_scan::@19
Renumbering block keyboard_event_scan::@26 to keyboard_event_scan::@20
Renumbering block keyboard_event_scan::@27 to keyboard_event_scan::@21
Renumbering block keyboard_event_scan::@28 to keyboard_event_scan::@22
Renumbering block keyboard_event_scan::@29 to keyboard_event_scan::@23
Renumbering block keyboard_event_get::@3 to keyboard_event_get::@1
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@10 to bitmap_init::@6
Renumbering block bitmap_line::@3 to bitmap_line::@2
Renumbering block bitmap_line::@4 to bitmap_line::@3
Renumbering block bitmap_line::@5 to bitmap_line::@4
Renumbering block bitmap_line::@7 to bitmap_line::@5
Renumbering block bitmap_line::@8 to bitmap_line::@6
Renumbering block bitmap_line::@10 to bitmap_line::@7
Renumbering block bitmap_line::@11 to bitmap_line::@8
Renumbering block bitmap_line::@15 to bitmap_line::@9
Renumbering block bitmap_line::@17 to bitmap_line::@10
Renumbering block bitmap_line::@20 to bitmap_line::@11
Renumbering block bitmap_line::@21 to bitmap_line::@12
Renumbering block bitmap_line::@25 to bitmap_line::@13
Renumbering block bitmap_line::@27 to bitmap_line::@14
Renumbering block bitmap_line_xdyi::@5 to bitmap_line_xdyi::@4
Renumbering block bitmap_line_xdyd::@5 to bitmap_line_xdyd::@4
Renumbering block bitmap_line_ydxi::@5 to bitmap_line_ydxi::@4
Renumbering block bitmap_line_ydxd::@5 to bitmap_line_ydxd::@4
Renumbering block main::@7 to main::@3
Renumbering block main::@9 to main::@4
Renumbering block get_plane::@27 to get_plane::@1
Renumbering block get_plane::@28 to get_plane::@2
Renumbering block get_plane::@29 to get_plane::@3
Renumbering block get_plane::@30 to get_plane::@4
Renumbering block get_plane::@31 to get_plane::@5
Renumbering block get_plane::@32 to get_plane::@6
Renumbering block get_plane::@33 to get_plane::@7
Renumbering block get_plane::@34 to get_plane::@8
Renumbering block get_plane::@35 to get_plane::@9
Renumbering block get_plane::@36 to get_plane::@10
Renumbering block get_plane::@37 to get_plane::@11
Renumbering block get_plane::@38 to get_plane::@12
Renumbering block get_plane::@39 to get_plane::@13
Renumbering block get_plane::@40 to get_plane::@14
Renumbering block get_vic_screen::@9 to get_vic_screen::@1
Renumbering block get_vic_screen::@10 to get_vic_screen::@2
Renumbering block get_vic_screen::@11 to get_vic_screen::@3
Renumbering block get_vic_screen::@12 to get_vic_screen::@4
Renumbering block get_vic_screen::@13 to get_vic_screen::@5
Renumbering block get_vic_charset::@3 to get_vic_charset::@1
Renumbering block get_vic_charset::@4 to get_vic_charset::@2
Renumbering block apply_preset::@22 to apply_preset::@1
Renumbering block apply_preset::@23 to apply_preset::@2
Renumbering block apply_preset::@24 to apply_preset::@3
Renumbering block apply_preset::@25 to apply_preset::@4
Renumbering block apply_preset::@26 to apply_preset::@5
Renumbering block apply_preset::@27 to apply_preset::@6
Renumbering block apply_preset::@28 to apply_preset::@7
Renumbering block apply_preset::@29 to apply_preset::@8
Renumbering block apply_preset::@30 to apply_preset::@9
Renumbering block apply_preset::@31 to apply_preset::@10
Renumbering block apply_preset::@32 to apply_preset::@11
Renumbering block apply_preset::@33 to apply_preset::@12
Renumbering block apply_preset::@45 to apply_preset::@13
Renumbering block render_preset_name::@22 to render_preset_name::@1
Renumbering block render_preset_name::@23 to render_preset_name::@2
Renumbering block render_preset_name::@24 to render_preset_name::@3
Renumbering block render_preset_name::@25 to render_preset_name::@4
Renumbering block render_preset_name::@26 to render_preset_name::@5
Renumbering block render_preset_name::@27 to render_preset_name::@6
Renumbering block render_preset_name::@28 to render_preset_name::@7
Renumbering block render_preset_name::@29 to render_preset_name::@8
Renumbering block render_preset_name::@30 to render_preset_name::@9
Renumbering block render_preset_name::@31 to render_preset_name::@10
Renumbering block render_preset_name::@32 to render_preset_name::@11
Renumbering block render_preset_name::@33 to render_preset_name::@12
Renumbering block gfx_mode::@12 to gfx_mode::@10
Renumbering block gfx_mode::@13 to gfx_mode::@11
Renumbering block gfx_mode::@14 to gfx_mode::@12
Renumbering block gfx_mode::@15 to gfx_mode::@13
Renumbering block gfx_mode::@16 to gfx_mode::@14
Renumbering block gfx_mode::@17 to gfx_mode::@15
Renumbering block gfx_mode::@18 to gfx_mode::@16
Renumbering block gfx_mode::@19 to gfx_mode::@17
Renumbering block gfx_mode::@20 to gfx_mode::@18
Renumbering block gfx_mode::@21 to gfx_mode::@19
Renumbering block gfx_mode::@22 to gfx_mode::@20
Renumbering block gfx_mode::@23 to gfx_mode::@21
Renumbering block gfx_mode::@24 to gfx_mode::@22
Renumbering block gfx_mode::@26 to gfx_mode::@23
Renumbering block gfx_mode::@29 to gfx_mode::@24
Renumbering block gfx_mode::@34 to gfx_mode::@25
Renumbering block gfx_mode::@36 to gfx_mode::@26
Renumbering block gfx_mode::@46 to gfx_mode::@27
Renumbering block gfx_mode::@47 to gfx_mode::@28
Renumbering block gfx_mode::@48 to gfx_mode::@29
Renumbering block gfx_mode::@49 to gfx_mode::@30
Renumbering block gfx_mode::@50 to gfx_mode::@31
Renumbering block gfx_mode::@51 to gfx_mode::@32
Renumbering block gfx_mode::@52 to gfx_mode::@33
Renumbering block gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@2
Renumbering block gfx_init_vic_bitmap::@5 to gfx_init_vic_bitmap::@3
Renumbering block gfx_init_plane_8bppchunky::@8 to gfx_init_plane_8bppchunky::@7
Renumbering block gfx_init_plane_horisontal::@7 to gfx_init_plane_horisontal::@6
Renumbering block gfx_init_plane_horisontal::@8 to gfx_init_plane_horisontal::@7
Renumbering block form_mode::@6 to form_mode::@4
Renumbering block form_mode::@8 to form_mode::@5
Renumbering block form_mode::@14 to form_mode::@6
Renumbering block form_mode::@18 to form_mode::@7
Renumbering block form_mode::@21 to form_mode::@8
Renumbering block form_mode::@22 to form_mode::@9
Renumbering block form_mode::@23 to form_mode::@10
Renumbering block form_mode::@24 to form_mode::@11
Renumbering block form_mode::@25 to form_mode::@12
Renumbering block form_mode::@26 to form_mode::@13
Renumbering block form_mode::@27 to form_mode::@14
Renumbering block form_mode::@28 to form_mode::@15
Renumbering block form_mode::@29 to form_mode::@16
Renumbering block form_mode::@30 to form_mode::@17
Renumbering block form_mode::@31 to form_mode::@18
Renumbering block form_mode::@32 to form_mode::@19
Renumbering block form_render_values::@3 to form_render_values::@2
Renumbering block form_control::@8 to form_control::@6
Renumbering block form_control::@10 to form_control::@7
Renumbering block form_control::@11 to form_control::@8
Renumbering block form_control::@13 to form_control::@9
Renumbering block form_control::@14 to form_control::@10
Renumbering block form_control::@15 to form_control::@11
Renumbering block form_control::@19 to form_control::@12
Renumbering block form_control::@22 to form_control::@13
Renumbering block form_control::@26 to form_control::@14
Renumbering block form_control::@29 to form_control::@15
Renumbering block form_control::@31 to form_control::@16
Renumbering block form_control::@33 to form_control::@17
Renumbering block form_control::@34 to form_control::@18
Renumbering block form_control::@35 to form_control::@19
Renumbering block form_control::@36 to form_control::@20
Renumbering block form_control::@37 to form_control::@21
Renumbering block form_control::@38 to form_control::@22
Renumbering block form_control::@39 to form_control::@23
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of gfx_mode::@16
Adding NOP phi() at start of gfx_mode::@18
Adding NOP phi() at start of gfx_mode::@26
Adding NOP phi() at start of gfx_mode::@32
Adding NOP phi() at start of keyboard_event_scan::@17
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of get_vic_screen::@1
Adding NOP phi() at start of get_vic_charset::@1
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of form_mode::@9
Adding NOP phi() at start of form_mode::@10
Adding NOP phi() at start of form_mode::@11
Adding NOP phi() at start of form_mode::@12
Adding NOP phi() at start of form_mode::@13
Adding NOP phi() at start of form_mode::@14
Adding NOP phi() at start of form_mode::@5
Adding NOP phi() at start of render_preset_name::@12
Adding NOP phi() at start of print_str_at
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of apply_preset::@12
Adding NOP phi() at start of form_control::@3
Adding NOP phi() at start of form_control::@18
Adding NOP phi() at start of form_control::@21
Adding NOP phi() at start of form_control::@22
Adding NOP phi() at start of form_control::@23
Adding NOP phi() at start of form_control::@20
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@7
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_vic_bitmap
Adding NOP phi() at start of gfx_init_vic_bitmap::@2
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen0

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0
  [8] call keyboard_init 
  to:main::@3
main::@3: scope:[main]  from main
  [9] phi()
  [10] call gfx_init 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  [11] (byte) form_field_idx#1 ← phi( main::@4/(byte) form_field_idx#18 main::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [11] (byte) keyboard_events_size#27 ← phi( main::@4/(byte) keyboard_events_size#24 main::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [11] (signed byte) form_cursor_count#1 ← phi( main::@4/(signed byte) form_cursor_count#16 main::@3/(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call form_mode 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [14] phi()
  [15] call gfx_mode 
  to:main::@1
gfx_mode: scope:[gfx_mode]  from main::@4
  [16] if(*((const byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1
  to:gfx_mode::@10
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode
  [17] phi()
  to:gfx_mode::@1
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@10
  [18] (byte) gfx_mode::dtv_control#14 ← phi( gfx_mode/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_mode::@10/(byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) DTV_LINEAR#0 )
  [19] if(*((const byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2
  to:gfx_mode::@11
gfx_mode::@11: scope:[gfx_mode]  from gfx_mode::@1
  [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF#0
  to:gfx_mode::@2
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@11
  [21] (byte) gfx_mode::dtv_control#15 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 gfx_mode::@11/(byte) gfx_mode::dtv_control#2 )
  [22] if(*((const byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3
  to:gfx_mode::@12
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode::@2
  [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR#0
  to:gfx_mode::@3
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@12 gfx_mode::@2
  [24] (byte) gfx_mode::dtv_control#10 ← phi( gfx_mode::@12/(byte) gfx_mode::dtv_control#3 gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  [25] if(*((const byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4
  to:gfx_mode::@13
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@3
  [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN#0
  to:gfx_mode::@4
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@13 gfx_mode::@3
  [27] (byte) gfx_mode::dtv_control#11 ← phi( gfx_mode::@13/(byte) gfx_mode::dtv_control#4 gfx_mode::@3/(byte) gfx_mode::dtv_control#10 )
  [28] if(*((const byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5
  to:gfx_mode::@14
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@4
  [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF#0
  to:gfx_mode::@5
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@4
  [30] (byte) gfx_mode::dtv_control#13 ← phi( gfx_mode::@14/(byte) gfx_mode::dtv_control#5 gfx_mode::@4/(byte) gfx_mode::dtv_control#11 )
  [31] if(*((const byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6
  to:gfx_mode::@15
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@5
  [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY#0
  to:gfx_mode::@6
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@5
  [33] (byte) gfx_mode::dtv_control#12 ← phi( gfx_mode::@15/(byte) gfx_mode::dtv_control#6 gfx_mode::@5/(byte) gfx_mode::dtv_control#13 )
  [34] *((const byte*) DTV_CONTROL#0) ← (byte) gfx_mode::dtv_control#12
  [35] if(*((const byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7
  to:gfx_mode::@16
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@6
  [36] phi()
  to:gfx_mode::@7
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@6
  [37] (byte) gfx_mode::vic_control#5 ← phi( gfx_mode::@16/(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3|(const byte) VIC_ECM#0 gfx_mode::@6/(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 )
  [38] if(*((const byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8
  to:gfx_mode::@17
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@7
  [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM#0
  to:gfx_mode::@8
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@7
  [40] (byte) gfx_mode::vic_control#4 ← phi( gfx_mode::@17/(byte) gfx_mode::vic_control#2 gfx_mode::@7/(byte) gfx_mode::vic_control#5 )
  [41] *((const byte*) VIC_CONTROL#0) ← (byte) gfx_mode::vic_control#4
  [42] if(*((const byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9
  to:gfx_mode::@18
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@8
  [43] phi()
  to:gfx_mode::@9
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@8
  [44] (byte) gfx_mode::vic_control2#2 ← phi( gfx_mode::@18/(const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 gfx_mode::@8/(const byte) VIC_CSEL#0 )
  [45] *((const byte*) VIC_CONTROL2#0) ← (byte) gfx_mode::vic_control2#2
  [46] (byte~) gfx_mode::$20 ← *((const byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte*) form_a_start_lo#0)
  [48] (byte) get_plane::idx#0 ← *((const byte*) form_a_pattern#0)
  [49] call get_plane 
  [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
  to:gfx_mode::@27
gfx_mode::@27: scope:[gfx_mode]  from gfx_mode::@9
  [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16
  [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0
  [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0
  [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24
  [55] *((const byte*) DTV_PLANEA_START_LO#0) ← (byte~) gfx_mode::$25
  [56] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0
  [57] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26
  [58] *((const byte*) DTV_PLANEA_START_MI#0) ← (byte~) gfx_mode::$27
  [59] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0
  [60] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28
  [61] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte~) gfx_mode::$29
  [62] (byte~) gfx_mode::$30 ← *((const byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [63] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte*) form_a_step_lo#0)
  [64] *((const byte*) DTV_PLANEA_STEP#0) ← (byte~) gfx_mode::$31
  [65] (byte~) gfx_mode::$32 ← *((const byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [66] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte*) form_a_mod_lo#0)
  [67] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte~) gfx_mode::$33
  [68] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [69] (byte~) gfx_mode::$34 ← *((const byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [70] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte*) form_b_start_lo#0)
  [71] (byte) get_plane::idx#1 ← *((const byte*) form_b_pattern#0)
  [72] call get_plane 
  [73] (dword) get_plane::return#17 ← (dword) get_plane::return#14
  to:gfx_mode::@28
gfx_mode::@28: scope:[gfx_mode]  from gfx_mode::@27
  [74] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17
  [75] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0
  [76] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0
  [77] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38
  [78] *((const byte*) DTV_PLANEB_START_LO#0) ← (byte~) gfx_mode::$39
  [79] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0
  [80] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40
  [81] *((const byte*) DTV_PLANEB_START_MI#0) ← (byte~) gfx_mode::$41
  [82] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0
  [83] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42
  [84] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte~) gfx_mode::$43
  [85] (byte~) gfx_mode::$44 ← *((const byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [86] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte*) form_b_step_lo#0)
  [87] *((const byte*) DTV_PLANEB_STEP#0) ← (byte~) gfx_mode::$45
  [88] (byte~) gfx_mode::$46 ← *((const byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [89] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte*) form_b_mod_lo#0)
  [90] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte~) gfx_mode::$47
  [91] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [92] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [93] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000
  [94] (byte) get_vic_screen::idx#0 ← *((const byte*) form_vic_screen#0)
  [95] call get_vic_screen 
  [96] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@29
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@28
  [97] (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10
  [98] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$52 & (word/signed word/dword/signed dword) $3fff
  [99] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  [100] (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55
  [101] (byte) get_vic_charset::idx#0 ← *((const byte*) form_vic_gfx#0)
  [102] call get_vic_charset 
  [103] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  to:gfx_mode::@30
gfx_mode::@30: scope:[gfx_mode]  from gfx_mode::@29
  [104] (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#4
  [105] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$57 & (word/signed word/dword/signed dword) $3fff
  [106] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59
  [107] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  [108] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61
  [109] *((const byte*) VIC_MEMORY#0) ← (byte~) gfx_mode::$62
  [110] (byte) get_vic_screen::idx#1 ← *((const byte*) form_vic_cols#0)
  [111] call get_vic_screen 
  [112] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@30
  [113] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
  to:gfx_mode::@19
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@21 gfx_mode::@31
  [114] (byte) gfx_mode::cy#4 ← phi( gfx_mode::@21/(byte) gfx_mode::cy#1 gfx_mode::@31/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [114] (byte*) gfx_mode::col#3 ← phi( gfx_mode::@21/(byte*) gfx_mode::col#1 gfx_mode::@31/(const byte*) COLS#0 )
  [114] (byte*) gfx_mode::vic_colors#3 ← phi( gfx_mode::@21/(byte*) gfx_mode::vic_colors#1 gfx_mode::@31/(byte*) gfx_mode::vic_colors#0 )
  to:gfx_mode::@20
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@20
  [115] (byte) gfx_mode::cx#2 ← phi( gfx_mode::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_mode::@20/(byte) gfx_mode::cx#1 )
  [115] (byte*) gfx_mode::col#2 ← phi( gfx_mode::@19/(byte*) gfx_mode::col#3 gfx_mode::@20/(byte*) gfx_mode::col#1 )
  [115] (byte*) gfx_mode::vic_colors#2 ← phi( gfx_mode::@19/(byte*) gfx_mode::vic_colors#3 gfx_mode::@20/(byte*) gfx_mode::vic_colors#1 )
  [116] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2)
  [117] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2
  [118] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2
  [119] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2
  [120] if((byte) gfx_mode::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_mode::@20
  to:gfx_mode::@21
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@20
  [121] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4
  [122] if((byte) gfx_mode::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_mode::@19
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21
  [123] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [124] (byte~) gfx_mode::$64 ← *((const byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [125] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte*) form_vic_bg0_lo#0)
  [126] *((const byte*) BGCOL1#0) ← (byte~) gfx_mode::$65
  [127] (byte~) gfx_mode::$66 ← *((const byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [128] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte*) form_vic_bg1_lo#0)
  [129] *((const byte*) BGCOL2#0) ← (byte~) gfx_mode::$67
  [130] (byte~) gfx_mode::$68 ← *((const byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [131] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte*) form_vic_bg2_lo#0)
  [132] *((const byte*) BGCOL3#0) ← (byte~) gfx_mode::$69
  [133] (byte~) gfx_mode::$70 ← *((const byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4
  [134] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte*) form_vic_bg3_lo#0)
  [135] *((const byte*) BGCOL4#0) ← (byte~) gfx_mode::$71
  [136] if(*((const byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@24
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@23
  [137] (byte) gfx_mode::j#2 ← phi( gfx_mode::@22/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_mode::@23/(byte) gfx_mode::j#1 )
  [138] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2
  [139] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2
  [140] if((byte) gfx_mode::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@23
  to:gfx_mode::@25
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@23 gfx_mode::@24 gfx_mode::@25 gfx_mode::@33
  [141] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@25
  to:gfx_mode::@26
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@25
  [142] phi()
  [143] call keyboard_event_scan 
  to:gfx_mode::@32
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@26
  [144] phi()
  [145] call keyboard_event_get 
  [146] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:gfx_mode::@33
gfx_mode::@33: scope:[gfx_mode]  from gfx_mode::@32
  [147] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
  [148] if((byte) gfx_mode::keyboard_event#0!=(const byte) KEY_SPACE#0) goto gfx_mode::@25
  to:gfx_mode::@return
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@33
  [149] return 
  to:@return
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@24
  [150] (byte) gfx_mode::i#2 ← phi( gfx_mode::@22/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_mode::@24/(byte) gfx_mode::i#1 )
  [151] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2)
  [152] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2
  [153] if((byte) gfx_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@24
  to:gfx_mode::@25
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@18 gfx_mode::@32
  [154] if((byte) keyboard_events_size#100==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [155] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100
  [156] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [157] (byte) keyboard_events_size#24 ← phi( keyboard_event_get/(byte) keyboard_events_size#100 keyboard_event_get::@1/(byte) keyboard_events_size#4 )
  [157] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte/word/signed word/dword/signed dword) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [158] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@26
  [159] (byte) keyboard_events_size#110 ← phi( form_control::@3/(byte) keyboard_events_size#47 gfx_mode::@26/(byte) keyboard_events_size#24 )
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [160] (byte) keyboard_events_size#119 ← phi( keyboard_event_scan/(byte) keyboard_events_size#110 keyboard_event_scan::@8/(byte) keyboard_events_size#100 )
  [160] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#14 )
  [160] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [161] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [162] call keyboard_matrix_read 
  [163] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [164] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [165] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [166] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [167] (byte) keyboard_events_size#100 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#118 keyboard_event_scan::@16/(byte) keyboard_events_size#119 )
  [167] (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#15 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [168] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [169] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [170] phi()
  [171] call keyboard_event_pressed 
  [172] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [173] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [174] if((byte~) keyboard_event_scan::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [175] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [176] (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@18/(byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 keyboard_event_scan::@20/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [177] call keyboard_event_pressed 
  [178] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [179] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [180] if((byte~) keyboard_event_scan::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [181] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT#0
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [182] (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#18 keyboard_event_scan::@4/(byte) keyboard_modifiers#3 )
  [183] call keyboard_event_pressed 
  [184] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [185] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [186] if((byte~) keyboard_event_scan::$6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [187] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL#0
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [188] (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#19 keyboard_event_scan::@5/(byte) keyboard_modifiers#4 )
  [189] call keyboard_event_pressed 
  [190] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [191] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
  [192] if((byte~) keyboard_event_scan::$9==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [193] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE#0
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [194] (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#20 keyboard_event_scan::@6/(byte) keyboard_modifiers#5 )
  [195] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [196] (byte) keyboard_events_size#18 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#118 keyboard_event_scan::@19/(byte) keyboard_events_size#119 )
  [196] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#15 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [196] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [197] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [198] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [199] if((byte~) keyboard_event_scan::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [200] if((byte) keyboard_events_size#18==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [201] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [202] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [203] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10
  [204] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [205] (byte) keyboard_events_size#118 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#18 keyboard_event_scan::@12/(byte) keyboard_events_size#18 keyboard_event_scan::@11/(byte) keyboard_events_size#1 keyboard_event_scan::@14/(byte) keyboard_events_size#2 )
  [206] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10
  [207] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [208] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [209] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [210] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40
  [211] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte/word/dword~) keyboard_event_scan::$23
  [212] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18
  to:keyboard_event_scan::@10
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3
  [213] (byte) keyboard_event_pressed::keycode#4 ← phi( keyboard_event_scan::@1/(const byte) KEY_RSHIFT#0 keyboard_event_scan::@2/(const byte) KEY_CTRL#0 keyboard_event_scan::@17/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@3/(const byte) KEY_COMMODORE#0 )
  [214] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [215] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [216] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [217] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [218] return 
  to:@return
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [219] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [220] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [221] return 
  to:@return
get_vic_screen: scope:[get_vic_screen]  from gfx_mode::@28 gfx_mode::@30
  [222] (byte) get_vic_screen::idx#2 ← phi( gfx_mode::@28/(byte) get_vic_screen::idx#0 gfx_mode::@30/(byte) get_vic_screen::idx#1 )
  [223] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_screen::@return
  to:get_vic_screen::@2
get_vic_screen::@2: scope:[get_vic_screen]  from get_vic_screen
  [224] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_screen::@return
  to:get_vic_screen::@3
get_vic_screen::@3: scope:[get_vic_screen]  from get_vic_screen::@2
  [225] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_vic_screen::@return
  to:get_vic_screen::@4
get_vic_screen::@4: scope:[get_vic_screen]  from get_vic_screen::@3
  [226] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_vic_screen::@return
  to:get_vic_screen::@5
get_vic_screen::@5: scope:[get_vic_screen]  from get_vic_screen::@4
  [227] if((byte) get_vic_screen::idx#2!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_vic_screen::@1
  to:get_vic_screen::@return
get_vic_screen::@return: scope:[get_vic_screen]  from get_vic_screen get_vic_screen::@1 get_vic_screen::@2 get_vic_screen::@3 get_vic_screen::@4 get_vic_screen::@5
  [228] (byte*) get_vic_screen::return#5 ← phi( get_vic_screen/(const byte*) VIC_SCREEN0#0 get_vic_screen::@5/(const byte*) VIC_SCREEN4#0 get_vic_screen::@2/(const byte*) VIC_SCREEN1#0 get_vic_screen::@3/(const byte*) VIC_SCREEN2#0 get_vic_screen::@4/(const byte*) VIC_SCREEN3#0 get_vic_screen::@1/(const byte*) VIC_SCREEN0#0 )
  [229] return 
  to:@return
get_vic_screen::@1: scope:[get_vic_screen]  from get_vic_screen::@5
  [230] phi()
  to:get_vic_screen::@return
get_vic_charset: scope:[get_vic_charset]  from gfx_mode::@29
  [231] if((byte) get_vic_charset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_charset::@return
  to:get_vic_charset::@2
get_vic_charset::@2: scope:[get_vic_charset]  from get_vic_charset
  [232] if((byte) get_vic_charset::idx#0!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_charset::@1
  to:get_vic_charset::@return
get_vic_charset::@return: scope:[get_vic_charset]  from get_vic_charset get_vic_charset::@1 get_vic_charset::@2
  [233] (byte*) get_vic_charset::return#2 ← phi( get_vic_charset/(const byte*) VIC_CHARSET_ROM#0 get_vic_charset::@1/(const byte*) VIC_CHARSET_ROM#0 get_vic_charset::@2/(const byte*) VIC_BITMAP#0 )
  [234] return 
  to:@return
get_vic_charset::@1: scope:[get_vic_charset]  from get_vic_charset::@2
  [235] phi()
  to:get_vic_charset::@return
get_plane: scope:[get_plane]  from gfx_mode::@27 gfx_mode::@9
  [236] (byte) get_plane::idx#10 ← phi( gfx_mode::@27/(byte) get_plane::idx#1 gfx_mode::@9/(byte) get_plane::idx#0 )
  [237] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_plane::@return
  to:get_plane::@2
get_plane::@2: scope:[get_plane]  from get_plane
  [238] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_plane::@return
  to:get_plane::@3
get_plane::@3: scope:[get_plane]  from get_plane::@2
  [239] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_plane::@return
  to:get_plane::@4
get_plane::@4: scope:[get_plane]  from get_plane::@3
  [240] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_plane::@return
  to:get_plane::@5
get_plane::@5: scope:[get_plane]  from get_plane::@4
  [241] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_plane::@return
  to:get_plane::@6
get_plane::@6: scope:[get_plane]  from get_plane::@5
  [242] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto get_plane::@return
  to:get_plane::@7
get_plane::@7: scope:[get_plane]  from get_plane::@6
  [243] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto get_plane::@return
  to:get_plane::@8
get_plane::@8: scope:[get_plane]  from get_plane::@7
  [244] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto get_plane::@return
  to:get_plane::@9
get_plane::@9: scope:[get_plane]  from get_plane::@8
  [245] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto get_plane::@return
  to:get_plane::@10
get_plane::@10: scope:[get_plane]  from get_plane::@9
  [246] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto get_plane::@return
  to:get_plane::@11
get_plane::@11: scope:[get_plane]  from get_plane::@10
  [247] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto get_plane::@return
  to:get_plane::@12
get_plane::@12: scope:[get_plane]  from get_plane::@11
  [248] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $b) goto get_plane::@return
  to:get_plane::@13
get_plane::@13: scope:[get_plane]  from get_plane::@12
  [249] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $c) goto get_plane::@return
  to:get_plane::@14
get_plane::@14: scope:[get_plane]  from get_plane::@13
  [250] if((byte) get_plane::idx#10!=(byte/signed byte/word/signed word/dword/signed dword) $d) goto get_plane::@1
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@14 get_plane::@2 get_plane::@3 get_plane::@4 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  [251] (dword) get_plane::return#14 ← phi( get_plane/((dword))(const byte*) VIC_SCREEN0#0 get_plane::@10/((dword))(const dword) PLANE_HORISONTAL2#0 get_plane::@11/((dword))(const dword) PLANE_VERTICAL2#0 get_plane::@12/((dword))(const dword) PLANE_CHARSET8#0 get_plane::@13/((dword))(const dword) PLANE_BLANK#0 get_plane::@2/((dword))(const byte*) VIC_SCREEN1#0 get_plane::@1/((dword))(const byte*) VIC_SCREEN0#0 get_plane::@3/((dword))(const byte*) VIC_SCREEN2#0 get_plane::@4/((dword))(const byte*) VIC_SCREEN3#0 get_plane::@14/((dword))(const dword) PLANE_FULL#0 get_plane::@5/((dword))(const byte*) VIC_BITMAP#0 get_plane::@6/((dword))(const byte*) VIC_CHARSET_ROM#0 get_plane::@7/((dword))(const dword) PLANE_8BPP_CHUNKY#0 get_plane::@8/((dword))(const dword) PLANE_HORISONTAL#0 get_plane::@9/((dword))(const dword) PLANE_VERTICAL#0 )
  [252] return 
  to:@return
get_plane::@1: scope:[get_plane]  from get_plane::@14
  [253] phi()
  to:get_plane::@return
form_mode: scope:[form_mode]  from main::@2
  [254] phi()
  [255] call print_set_screen 
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode
  [256] phi()
  [257] call print_cls 
  to:form_mode::@9
form_mode::@9: scope:[form_mode]  from form_mode::@8
  [258] phi()
  [259] call print_str_lines 
  to:form_mode::@10
form_mode::@10: scope:[form_mode]  from form_mode::@9
  [260] phi()
  [261] call print_set_screen 
  to:form_mode::@11
form_mode::@11: scope:[form_mode]  from form_mode::@10
  [262] phi()
  [263] call print_cls 
  to:form_mode::@12
form_mode::@12: scope:[form_mode]  from form_mode::@11
  [264] phi()
  [265] call print_str_lines 
  to:form_mode::@13
form_mode::@13: scope:[form_mode]  from form_mode::@12
  [266] phi()
  [267] call form_set_screen 
  to:form_mode::@14
form_mode::@14: scope:[form_mode]  from form_mode::@13
  [268] phi()
  [269] call form_render_values 
  to:form_mode::@15
form_mode::@15: scope:[form_mode]  from form_mode::@14
  [270] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val#0)
  [271] call render_preset_name 
  to:form_mode::@16
form_mode::@16: scope:[form_mode]  from form_mode::@15
  [272] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000
  [273] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [274] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400
  [275] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [276] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000
  [277] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [278] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [279] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0
  [280] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400
  [281] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) FORM_SCREEN#0
  [282] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) FORM_SCREEN#0
  [283] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@16
  [284] (byte) form_mode::i#2 ← phi( form_mode::@1/(byte) form_mode::i#1 form_mode::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [285] *((const byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2)
  [286] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2
  [287] if((byte) form_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  [288] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [289] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [290] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val#0)
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@19 form_mode::@2 form_mode::@6
  [291] (byte) form_mode::preset_current#6 ← phi( form_mode::@2/(byte) form_mode::preset_current#0 form_mode::@19/(byte) form_mode::preset_current#1 )
  [291] (byte) form_field_idx#28 ← phi( form_mode::@6/(byte) form_field_idx#18 form_mode::@2/(byte) form_field_idx#1 form_mode::@19/(byte) form_field_idx#18 )
  [291] (byte) keyboard_events_size#47 ← phi( form_mode::@6/(byte) keyboard_events_size#24 form_mode::@2/(byte) keyboard_events_size#27 form_mode::@19/(byte) keyboard_events_size#24 )
  [291] (signed byte) form_cursor_count#21 ← phi( form_mode::@6/(signed byte) form_cursor_count#16 form_mode::@2/(signed byte) form_cursor_count#1 form_mode::@19/(signed byte) form_cursor_count#16 )
  to:form_mode::@4
form_mode::@4: scope:[form_mode]  from form_mode::@3 form_mode::@4
  [292] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@4
  to:form_mode::@5
form_mode::@5: scope:[form_mode]  from form_mode::@4
  [293] phi()
  [294] call form_control 
  [295] (byte) form_control::return#0 ← (byte) form_control::return#2
  to:form_mode::@17
form_mode::@17: scope:[form_mode]  from form_mode::@5
  [296] (byte~) form_mode::$36 ← (byte) form_control::return#0
  [297] if((byte~) form_mode::$36==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_mode::@6
  to:form_mode::@return
form_mode::@return: scope:[form_mode]  from form_mode::@17
  [298] return 
  to:@return
form_mode::@6: scope:[form_mode]  from form_mode::@17
  [299] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val#0)) goto form_mode::@3
  to:form_mode::@7
form_mode::@7: scope:[form_mode]  from form_mode::@6
  [300] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val#0)
  [301] call apply_preset 
  to:form_mode::@18
form_mode::@18: scope:[form_mode]  from form_mode::@7
  [302] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val#0)
  [303] call form_render_values 
  to:form_mode::@19
form_mode::@19: scope:[form_mode]  from form_mode::@18
  [304] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val#0)
  [305] call render_preset_name 
  to:form_mode::@3
render_preset_name: scope:[render_preset_name]  from form_mode::@15 form_mode::@19
  [306] (byte) render_preset_name::idx#10 ← phi( form_mode::@15/(byte) render_preset_name::idx#0 form_mode::@19/(byte) render_preset_name::idx#1 )
  [307] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_preset_name::@1
  to:render_preset_name::@2
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name
  [308] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_preset_name::@1
  to:render_preset_name::@3
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name::@2
  [309] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_preset_name::@1
  to:render_preset_name::@4
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@3
  [310] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto render_preset_name::@1
  to:render_preset_name::@5
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@4
  [311] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_preset_name::@1
  to:render_preset_name::@6
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@5
  [312] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto render_preset_name::@1
  to:render_preset_name::@7
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@6
  [313] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto render_preset_name::@1
  to:render_preset_name::@8
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@7
  [314] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto render_preset_name::@1
  to:render_preset_name::@9
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@8
  [315] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto render_preset_name::@1
  to:render_preset_name::@10
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@9
  [316] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto render_preset_name::@1
  to:render_preset_name::@11
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@10
  [317] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto render_preset_name::@1
  to:render_preset_name::@12
render_preset_name::@12: scope:[render_preset_name]  from render_preset_name::@11
  [318] phi()
  to:render_preset_name::@1
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name render_preset_name::@10 render_preset_name::@11 render_preset_name::@12 render_preset_name::@2 render_preset_name::@3 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  [319] (byte*) render_preset_name::name#13 ← phi( render_preset_name/(const byte*) render_preset_name::name#1 render_preset_name::@10/(const byte*) render_preset_name::name#10 render_preset_name::@11/(const byte*) render_preset_name::name#11 render_preset_name::@2/(const byte*) render_preset_name::name#2 render_preset_name::@3/(const byte*) render_preset_name::name#3 render_preset_name::@12/(const byte*) render_preset_name::name#1 render_preset_name::@4/(const byte*) render_preset_name::name#4 render_preset_name::@5/(const byte*) render_preset_name::name#5 render_preset_name::@6/(const byte*) render_preset_name::name#6 render_preset_name::@7/(const byte*) render_preset_name::name#7 render_preset_name::@8/(const byte*) render_preset_name::name#8 render_preset_name::@9/(const byte*) render_preset_name::name#9 )
  [320] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  [321] call print_str_at 
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@1
  [322] return 
  to:@return
print_str_at: scope:[print_str_at]  from render_preset_name::@1
  [323] phi()
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  [324] (byte*) print_str_at::at#2 ← phi( print_str_at/(const byte*) FORM_SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) $a print_str_at::@2/(byte*) print_str_at::at#0 )
  [324] (byte*) print_str_at::str#2 ← phi( print_str_at/(byte*) print_str_at::str#1 print_str_at::@2/(byte*) print_str_at::str#0 )
  [325] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  [326] return 
  to:@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  [327] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2)
  [328] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2
  [329] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2
  to:print_str_at::@1
form_render_values: scope:[form_render_values]  from form_mode::@14 form_mode::@18
  [330] phi()
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@2
  [331] (byte) form_render_values::idx#2 ← phi( form_render_values/(byte/signed byte/word/signed word/dword/signed dword) 0 form_render_values::@2/(byte) form_render_values::idx#1 )
  [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
  [333] call form_field_ptr 
  [334] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0
  to:form_render_values::@2
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  [335] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2
  [336] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_render_values::idx#2))
  [337] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2
  [338] if((byte) form_render_values::idx#1<(const byte) form_fields_cnt#0) goto form_render_values::@1
  to:form_render_values::@return
form_render_values::@return: scope:[form_render_values]  from form_render_values::@2
  [339] return 
  to:@return
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@1
  [340] (byte) form_field_ptr::field_idx#2 ← phi( form_control/(byte) form_field_ptr::field_idx#1 form_render_values::@1/(byte) form_field_ptr::field_idx#0 )
  [341] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y#0 + (byte) form_field_ptr::field_idx#2)
  [342] (word~) form_field_ptr::$2 ← *((const byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0)
  [343] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x#0 + (byte) form_field_ptr::field_idx#2)
  [344] (byte*) form_field_ptr::return#0 ← (byte*)(word~) form_field_ptr::$2 + (byte) form_field_ptr::x#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  [345] return 
  to:@return
apply_preset: scope:[apply_preset]  from form_mode::@7
  [346] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto apply_preset::@1
  to:apply_preset::@2
apply_preset::@2: scope:[apply_preset]  from apply_preset
  [347] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 1) goto apply_preset::@1
  to:apply_preset::@3
apply_preset::@3: scope:[apply_preset]  from apply_preset::@2
  [348] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 2) goto apply_preset::@1
  to:apply_preset::@4
apply_preset::@4: scope:[apply_preset]  from apply_preset::@3
  [349] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 3) goto apply_preset::@1
  to:apply_preset::@5
apply_preset::@5: scope:[apply_preset]  from apply_preset::@4
  [350] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 4) goto apply_preset::@1
  to:apply_preset::@6
apply_preset::@6: scope:[apply_preset]  from apply_preset::@5
  [351] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 5) goto apply_preset::@1
  to:apply_preset::@7
apply_preset::@7: scope:[apply_preset]  from apply_preset::@6
  [352] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 6) goto apply_preset::@1
  to:apply_preset::@8
apply_preset::@8: scope:[apply_preset]  from apply_preset::@7
  [353] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 7) goto apply_preset::@1
  to:apply_preset::@9
apply_preset::@9: scope:[apply_preset]  from apply_preset::@8
  [354] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 8) goto apply_preset::@1
  to:apply_preset::@10
apply_preset::@10: scope:[apply_preset]  from apply_preset::@9
  [355] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 9) goto apply_preset::@1
  to:apply_preset::@11
apply_preset::@11: scope:[apply_preset]  from apply_preset::@10
  [356] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) $a) goto apply_preset::@1
  to:apply_preset::@12
apply_preset::@12: scope:[apply_preset]  from apply_preset::@11
  [357] phi()
  to:apply_preset::@1
apply_preset::@1: scope:[apply_preset]  from apply_preset apply_preset::@10 apply_preset::@11 apply_preset::@12 apply_preset::@2 apply_preset::@3 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  [358] (byte*) apply_preset::preset#14 ← phi( apply_preset/(const byte[]) preset_stdchar#0 apply_preset::@10/(const byte[]) preset_sixsfred2#0 apply_preset::@11/(const byte[]) preset_8bpppixelcell#0 apply_preset::@2/(const byte[]) preset_ecmchar#0 apply_preset::@3/(const byte[]) preset_stdbm#0 apply_preset::@12/(const byte[]) preset_stdchar#0 apply_preset::@4/(const byte[]) preset_mcbm#0 apply_preset::@5/(const byte[]) preset_hi_stdchar#0 apply_preset::@6/(const byte[]) preset_hi_ecmchar#0 apply_preset::@7/(const byte[]) preset_twoplane#0 apply_preset::@8/(const byte[]) preset_chunky#0 apply_preset::@9/(const byte[]) preset_sixsfred#0 )
  to:apply_preset::@13
apply_preset::@13: scope:[apply_preset]  from apply_preset::@1 apply_preset::@13
  [359] (byte) apply_preset::i#2 ← phi( apply_preset::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 apply_preset::@13/(byte) apply_preset::i#1 )
  [360] *((const byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#14 + (byte) apply_preset::i#2)
  [361] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2
  [362] if((byte) apply_preset::i#1!=(const byte) form_fields_cnt#0) goto apply_preset::@13
  to:apply_preset::@return
apply_preset::@return: scope:[apply_preset]  from apply_preset::@13
  [363] return 
  to:@return
form_control: scope:[form_control]  from form_mode::@5
  [364] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28
  [365] call form_field_ptr 
  [366] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
  to:form_control::@17
form_control::@17: scope:[form_control]  from form_control
  [367] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
  [368] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21
  [369] if((signed byte) form_cursor_count#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@20
  to:form_control::@1
form_control::@1: scope:[form_control]  from form_control::@17 form_control::@20
  [370] (signed byte) form_cursor_count#15 ← phi( form_control::@20/(signed byte) form_cursor_count#5 form_control::@17/(const signed byte) FORM_CURSOR_BLINK#0 )
  [371] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2) goto form_control::@2
  to:form_control::@6
form_control::@6: scope:[form_control]  from form_control::@1
  [372] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  [373] *((byte*) form_control::field#0) ← (byte~) form_control::$13
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@6
  [374] phi()
  [375] call keyboard_event_scan 
  to:form_control::@18
form_control::@18: scope:[form_control]  from form_control::@3
  [376] phi()
  [377] call keyboard_event_get 
  [378] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  to:form_control::@19
form_control::@19: scope:[form_control]  from form_control::@18
  [379] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
  [380] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN#0) goto form_control::@4
  to:form_control::@7
form_control::@7: scope:[form_control]  from form_control::@19
  [381] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  [382] *((byte*) form_control::field#0) ← (byte~) form_control::$15
  [383] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0
  [384] if((byte~) form_control::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@12
  to:form_control::@8
form_control::@8: scope:[form_control]  from form_control::@7
  [385] (byte) form_field_idx#44 ← -- (byte) form_field_idx#28
  [386] if((byte) form_field_idx#44!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@21
  to:form_control::@13
form_control::@13: scope:[form_control]  from form_control::@12 form_control::@21 form_control::@22 form_control::@8
  [387] (byte) form_field_idx#31 ← phi( form_control::@8/(const byte) form_fields_cnt#0-(byte/signed byte/word/signed word/dword/signed dword) 1 form_control::@21/(byte) form_field_idx#44 form_control::@22/(byte) form_field_idx#45 form_control::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:form_control::@return
form_control::@return: scope:[form_control]  from form_control::@13 form_control::@15 form_control::@23 form_control::@5
  [388] (byte) form_field_idx#18 ← phi( form_control::@5/(byte) form_field_idx#28 form_control::@13/(byte) form_field_idx#31 form_control::@15/(byte) form_field_idx#28 form_control::@23/(byte) form_field_idx#28 )
  [388] (signed byte) form_cursor_count#16 ← phi( form_control::@5/(signed byte) form_cursor_count#15 form_control::@13/(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 form_control::@15/(signed byte) form_cursor_count#15 form_control::@23/(signed byte) form_cursor_count#15 )
  [388] (byte) form_control::return#2 ← phi( form_control::@5/(byte/word/signed word/dword/signed dword) $ff form_control::@13/(byte/signed byte/word/signed word/dword/signed dword) 0 form_control::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 form_control::@23/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [389] return 
  to:@return
form_control::@21: scope:[form_control]  from form_control::@8
  [390] phi()
  to:form_control::@13
form_control::@12: scope:[form_control]  from form_control::@7
  [391] (byte) form_field_idx#45 ← ++ (byte) form_field_idx#28
  [392] if((byte) form_field_idx#45!=(const byte) form_fields_cnt#0) goto form_control::@22
  to:form_control::@13
form_control::@22: scope:[form_control]  from form_control::@12
  [393] phi()
  to:form_control::@13
form_control::@4: scope:[form_control]  from form_control::@19
  [394] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT#0) goto form_control::@5
  to:form_control::@9
form_control::@9: scope:[form_control]  from form_control::@4
  [395] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0
  [396] if((byte~) form_control::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@14
  to:form_control::@10
form_control::@10: scope:[form_control]  from form_control::@9
  [397] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)
  [398] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@15
  to:form_control::@11
form_control::@11: scope:[form_control]  from form_control::@10
  [399] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)
  to:form_control::@15
form_control::@15: scope:[form_control]  from form_control::@10 form_control::@11 form_control::@14 form_control::@16
  [400] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28))
  to:form_control::@return
form_control::@14: scope:[form_control]  from form_control::@9
  [401] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)
  [402] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@15
  to:form_control::@16
form_control::@16: scope:[form_control]  from form_control::@14
  [403] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:form_control::@15
form_control::@5: scope:[form_control]  from form_control::@4
  [404] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE#0) goto form_control::@23
  to:form_control::@return
form_control::@23: scope:[form_control]  from form_control::@5
  [405] phi()
  to:form_control::@return
form_control::@2: scope:[form_control]  from form_control::@1
  [406] (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#0) | (byte/word/signed word/dword/signed dword) $80
  [407] *((byte*) form_control::field#0) ← (byte/word/dword~) form_control::$14
  to:form_control::@3
form_control::@20: scope:[form_control]  from form_control::@17
  [408] phi()
  to:form_control::@1
form_set_screen: scope:[form_set_screen]  from form_mode::@13
  [409] phi()
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  [410] (byte) form_set_screen::y#2 ← phi( form_set_screen/(byte/signed byte/word/signed word/dword/signed dword) 0 form_set_screen::@1/(byte) form_set_screen::y#1 )
  [410] (byte*) form_set_screen::line#2 ← phi( form_set_screen/(const byte*) FORM_SCREEN#0 form_set_screen::@1/(byte*) form_set_screen::line#1 )
  [411] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2
  [412] *((const byte[$19]) form_line_lo#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0
  [413] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2
  [414] *((const byte[$19]) form_line_hi#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1
  [415] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [416] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2
  [417] if((byte) form_set_screen::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  [418] return 
  to:@return
print_str_lines: scope:[print_str_lines]  from form_mode::@12 form_mode::@9
  [419] (byte*) print_str_lines::str#5 ← phi( form_mode::@9/(const byte[]) FORM_COLS#0 form_mode::@12/(const byte[]) FORM_TEXT#0 )
  [420] (byte*~) print_char_cursor#77 ← (byte*) print_set_screen::screen#2
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@5
  [421] (byte*) print_line_cursor#2 ← phi( print_str_lines/(byte*) print_set_screen::screen#2 print_str_lines::@5/(byte*) print_line_cursor#22 )
  [421] (byte*) print_char_cursor#22 ← phi( print_str_lines/(byte*~) print_char_cursor#77 print_str_lines::@5/(byte*~) print_char_cursor#78 )
  [421] (byte*) print_str_lines::str#3 ← phi( print_str_lines/(byte*) print_str_lines::str#5 print_str_lines::@5/(byte*) print_str_lines::str#0 )
  [422] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [423] return 
  to:@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  [424] (byte*) print_char_cursor#20 ← phi( print_str_lines::@1/(byte*) print_char_cursor#22 print_str_lines::@3/(byte*) print_char_cursor#38 )
  [424] (byte*) print_str_lines::str#4 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#3 print_str_lines::@3/(byte*) print_str_lines::str#0 )
  [425] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4)
  [426] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4
  [427] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  [428] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0
  [429] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@4
  [430] (byte*) print_char_cursor#38 ← phi( print_str_lines::@2/(byte*) print_char_cursor#20 print_str_lines::@4/(byte*) print_char_cursor#1 )
  [431] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  [432] phi()
  [433] call print_ln 
  [434] (byte*~) print_char_cursor#78 ← (byte*) print_line_cursor#22
  to:print_str_lines::@1
print_ln: scope:[print_ln]  from print_str_lines::@5
  [435] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [436] (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#2 print_ln::@1/(byte*) print_line_cursor#22 )
  [437] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [438] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [439] return 
  to:@return
print_cls: scope:[print_cls]  from form_mode::@11 form_mode::@8
  [440] (byte*) print_cls::sc#0 ← (byte*) print_set_screen::screen#2
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [441] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [442] *((byte*) print_cls::sc#2) ← (byte) ' '
  [443] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [444] (byte*~) print_cls::$0 ← (byte*) print_set_screen::screen#2 + (word/signed word/dword/signed dword) $3e8
  [445] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [446] return 
  to:@return
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@10
  [447] (byte*) print_set_screen::screen#2 ← phi( form_mode/(const byte*) COLS#0 form_mode::@10/(const byte*) FORM_SCREEN#0 )
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [448] return 
  to:@return
gfx_init: scope:[gfx_init]  from main::@3
  [449] phi()
  [450] call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  [451] phi()
  [452] call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  [453] phi()
  [454] call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  [455] phi()
  [456] call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  [457] phi()
  [458] call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  [459] phi()
  [460] call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  [461] phi()
  [462] call gfx_init_vic_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  [463] phi()
  [464] call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  [465] phi()
  [466] call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  [467] phi()
  [468] call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  [469] phi()
  [470] call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  [471] phi()
  [472] call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  [473] phi()
  [474] call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  [475] phi()
  [476] call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  [477] phi()
  [478] call gfx_init_plane_full 
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@14
  [479] return 
  to:@return
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  [480] phi()
  [481] call gfx_init_plane_fill 
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  [482] return 
  to:@return
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  [483] (byte) gfx_init_plane_fill::fill#6 ← phi( gfx_init_plane_blank/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_full/(byte/word/signed word/dword/signed dword) $ff gfx_init_plane_vertical2/(byte/signed byte/word/signed word/dword/signed dword) $1b )
  [483] (dword) gfx_init_plane_fill::plane_addr#3 ← phi( gfx_init_plane_blank/(const dword) PLANE_BLANK#0 gfx_init_plane_full/(const dword) PLANE_FULL#0 gfx_init_plane_vertical2/(const dword) PLANE_VERTICAL2#0 )
  [484] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [485] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0
  [486] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1
  [487] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
  [488] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  [489] (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#0
  [490] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3
  [491] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff
  [492] (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5
  [493] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word/signed dword/dword~) gfx_init_plane_fill::$6
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  [494] (byte) gfx_init_plane_fill::by#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::by#1 gfx_init_plane_fill::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [494] (byte*) gfx_init_plane_fill::gfxb#3 ← phi( gfx_init_plane_fill::@3/(byte*) gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::@5/(byte*~) gfx_init_plane_fill::gfxb#6 )
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  [495] (byte) gfx_init_plane_fill::bx#2 ← phi( gfx_init_plane_fill::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::bx#1 )
  [495] (byte*) gfx_init_plane_fill::gfxb#2 ← phi( gfx_init_plane_fill::@1/(byte*) gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  [496] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6
  [497] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2
  [498] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2
  [499] if((byte) gfx_init_plane_fill::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  [500] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4
  [501] if((byte) gfx_init_plane_fill::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  [502] phi()
  [503] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  [504] return 
  to:@return
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@7 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  [505] (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 ← phi( gfx_init_plane_8bppchunky/((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 gfx_init_plane_8bppchunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_plane_8bppchunky::@6/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 gfx_init_plane_charset8/(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfx_init_plane_charset8::@8/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 gfx_init_plane_fill/(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 gfx_init_plane_fill::@4/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 gfx_init_plane_horisontal/(const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 gfx_init_plane_horisontal2/(const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 gfx_init_plane_horisontal2::@4/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 gfx_init_plane_horisontal::@7/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 gfx_init_plane_vertical/(const byte) gfx_init_plane_vertical::gfxbCpuBank#0 gfx_init_plane_vertical::@4/((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 )
  [506] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [508] return 
  to:@return
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  [509] phi()
  [510] call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  [511] return 
  to:@return
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  [512] phi()
  [513] call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  [514] return 
  to:@return
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  [515] phi()
  [516] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@3
  [517] (byte*) gfx_init_plane_horisontal2::gfxa#3 ← phi( gfx_init_plane_horisontal2::@3/(byte*) gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_horisontal2/((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff )
  [517] (byte) gfx_init_plane_horisontal2::ay#4 ← phi( gfx_init_plane_horisontal2::@3/(byte) gfx_init_plane_horisontal2::ay#1 gfx_init_plane_horisontal2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  [518] (byte) gfx_init_plane_horisontal2::ax#2 ← phi( gfx_init_plane_horisontal2::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ax#1 )
  [518] (byte*) gfx_init_plane_horisontal2::gfxa#2 ← phi( gfx_init_plane_horisontal2::@1/(byte*) gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  [519] (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [520] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$8 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [521] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0)
  [522] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2
  [523] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2
  [524] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  [525] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4
  [526] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  [527] phi()
  [528] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  [529] return 
  to:@return
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  [530] phi()
  [531] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical gfx_init_plane_vertical::@3
  [532] (byte) gfx_init_plane_vertical::by#4 ← phi( gfx_init_plane_vertical::@3/(byte) gfx_init_plane_vertical::by#1 gfx_init_plane_vertical/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [532] (byte*) gfx_init_plane_vertical::gfxb#3 ← phi( gfx_init_plane_vertical::@3/(byte*) gfx_init_plane_vertical::gfxb#1 gfx_init_plane_vertical/((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff )
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  [533] (byte) gfx_init_plane_vertical::bx#2 ← phi( gfx_init_plane_vertical::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::bx#1 )
  [533] (byte*) gfx_init_plane_vertical::gfxb#2 ← phi( gfx_init_plane_vertical::@1/(byte*) gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  [534] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f
  [535] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2
  [536] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2
  [537] if((byte) gfx_init_plane_vertical::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  [538] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4
  [539] if((byte) gfx_init_plane_vertical::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  [540] phi()
  [541] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  [542] return 
  to:@return
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  [543] phi()
  [544] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal gfx_init_plane_horisontal::@6
  [545] (byte*) gfx_init_plane_horisontal::gfxa#6 ← phi( gfx_init_plane_horisontal::@6/(byte*) gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal/((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff )
  [545] (byte) gfx_init_plane_horisontal::ay#4 ← phi( gfx_init_plane_horisontal::@6/(byte) gfx_init_plane_horisontal::ay#1 gfx_init_plane_horisontal/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  [546] (byte) gfx_init_plane_horisontal::ax#2 ← phi( gfx_init_plane_horisontal::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ax#1 )
  [546] (byte*) gfx_init_plane_horisontal::gfxa#3 ← phi( gfx_init_plane_horisontal::@1/(byte*) gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  [547] (byte~) gfx_init_plane_horisontal::$8 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4
  [548] if((byte~) gfx_init_plane_horisontal::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [549] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff
  [550] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  [551] (byte*) gfx_init_plane_horisontal::gfxa#7 ← phi( gfx_init_plane_horisontal::@3/(byte*) gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::@5/(byte*) gfx_init_plane_horisontal::gfxa#2 )
  [552] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2
  [553] if((byte) gfx_init_plane_horisontal::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@6
gfx_init_plane_horisontal::@6: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  [554] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4
  [555] if((byte) gfx_init_plane_horisontal::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6
  [556] phi()
  [557] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  [558] return 
  to:@return
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [559] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [560] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  [561] phi()
  [562] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  [563] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  [564] (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [564] (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#1 gfx_init_plane_charset8::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [564] (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#1 gfx_init_plane_charset8::@9/((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff )
  [564] (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@9/(const byte*) CHARGEN#0 )
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  [565] (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  [565] (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#1 )
  [565] (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [565] (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#1 )
  [566] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  [567] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  [568] (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  [568] (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  [568] (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [568] (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  [569] (byte~) gfx_init_plane_charset8::$8 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) $80
  [570] if((byte~) gfx_init_plane_charset8::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  [571] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  [572] (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_charset8::@5/(byte~) gfx_init_plane_charset8::c#3 )
  [573] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  [574] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  [575] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [576] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  [577] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2
  [578] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  [579] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6
  [580] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  [581] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8
  [582] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  [583] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [584] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  [585] return 
  to:@return
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  [586] phi()
  [587] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@5
  [588] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky/++((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 )
  [588] (byte) gfx_init_plane_8bppchunky::y#6 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::y#1 gfx_init_plane_8bppchunky/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [588] (byte*) gfx_init_plane_8bppchunky::gfxb#5 ← phi( gfx_init_plane_8bppchunky::@5/(byte*) gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky/((byte*))(word/signed word/dword/signed dword) $4000 )
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  [589] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  [589] (word) gfx_init_plane_8bppchunky::x#2 ← phi( gfx_init_plane_8bppchunky::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_8bppchunky::@3/(word) gfx_init_plane_8bppchunky::x#1 )
  [589] (byte*) gfx_init_plane_8bppchunky::gfxb#3 ← phi( gfx_init_plane_8bppchunky::@1/(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  [590] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  [591] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  [592] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  [593] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@7
  [594] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  [594] (byte*) gfx_init_plane_8bppchunky::gfxb#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::@7/((byte*))(word/signed word/dword/signed dword) $4000 )
  [595] (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6
  [596] (byte) gfx_init_plane_8bppchunky::c#0 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9
  [597] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0
  [598] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4
  [599] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2
  [600] if((word) gfx_init_plane_8bppchunky::x#1!=(word/signed word/dword/signed dword) $140) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  [601] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6
  [602] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  [603] phi()
  [604] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  [605] return 
  to:@return
gfx_init_vic_bitmap: scope:[gfx_init_vic_bitmap]  from gfx_init::@6
  [606] phi()
  [607] call bitmap_init 
  to:gfx_init_vic_bitmap::@2
gfx_init_vic_bitmap::@2: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap
  [608] phi()
  [609] call bitmap_clear 
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@1: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@2 gfx_init_vic_bitmap::@3
  [610] (byte) gfx_init_vic_bitmap::l#2 ← phi( gfx_init_vic_bitmap::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_vic_bitmap::@3/(byte) gfx_init_vic_bitmap::l#1 )
  [611] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0 + (byte) gfx_init_vic_bitmap::l#2)
  [612] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2)
  [613] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0 + (byte) gfx_init_vic_bitmap::l#2)
  [614] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2)
  [615] call bitmap_line 
  to:gfx_init_vic_bitmap::@3
gfx_init_vic_bitmap::@3: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  [616] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2
  [617] if((byte) gfx_init_vic_bitmap::l#1<(const byte) gfx_init_vic_bitmap::lines_cnt#0) goto gfx_init_vic_bitmap::@1
  to:gfx_init_vic_bitmap::@return
gfx_init_vic_bitmap::@return: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@3
  [618] return 
  to:@return
bitmap_line: scope:[bitmap_line]  from gfx_init_vic_bitmap::@1
  [619] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  [620] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0
  [621] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  [622] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [623] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  [624] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0
  [625] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  [626] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  [627] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  [628] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  [629] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@12 bitmap_line::@13 bitmap_line::@14 bitmap_line::@4 bitmap_line::@6 bitmap_line::@8 bitmap_line::@9
  [630] return 
  to:@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  [631] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0
  [632] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0
  [633] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  [634] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  [635] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  [636] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  [637] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [638] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  [639] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0
  [640] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
  [641] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
  [642] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  [643] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  [644] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  [645] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0
  [646] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0
  [647] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  [648] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  [649] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  [650] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [651] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0
  [652] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  [653] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [654] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  [655] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0
  [656] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  [657] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  [658] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  [659] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  [660] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  [661] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0
  [662] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  [663] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  [664] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  [665] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  [666] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  [667] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [668] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  [669] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0
  [670] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0
  [671] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  [672] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  [673] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  [674] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  [675] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0
  [676] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  [677] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0
  [678] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  [679] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  [680] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  [681] (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::x1#0 bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 )
  [681] (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::xd#0 bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 )
  [681] (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::y#0 bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 )
  [681] (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::x#0 bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 )
  [681] (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::yd#0 bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 )
  [682] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [683] (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  [683] (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  [683] (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#2 )
  [684] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  [685] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  [686] call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [687] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3
  [688] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2
  [689] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  [690] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3
  [691] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  [692] (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::e#1 )
  [692] (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::y#3 )
  [693] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [694] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [695] return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [696] (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  [696] (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  [697] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4)
  [698] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4)
  [699] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  [700] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4)
  [701] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [702] return 
  to:@return
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  [703] (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y1#0 )
  [703] (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::yd#0 )
  [703] (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y#0 )
  [703] (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::x#1 bitmap_line::@4/(byte) bitmap_line_ydxi::x#0 )
  [703] (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::xd#0 )
  [704] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [705] (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  [705] (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#2 )
  [705] (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  [706] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  [707] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  [708] call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [709] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3
  [710] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2
  [711] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  [712] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3
  [713] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  [714] (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::e#1 )
  [714] (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::x#3 )
  [715] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [716] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [717] return 
  to:@return
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  [718] (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::x1#0 bitmap_line::@12/(byte) bitmap_line_xdyd::x1#1 )
  [718] (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::xd#0 bitmap_line::@12/(byte) bitmap_line_xdyd::xd#1 )
  [718] (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::y#0 bitmap_line::@12/(byte) bitmap_line_xdyd::y#1 )
  [718] (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::x#0 bitmap_line::@12/(byte) bitmap_line_xdyd::x#1 )
  [718] (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::yd#0 bitmap_line::@12/(byte) bitmap_line_xdyd::yd#1 )
  [719] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [720] (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  [720] (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  [720] (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#2 )
  [721] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  [722] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  [723] call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [724] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3
  [725] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2
  [726] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  [727] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3
  [728] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  [729] (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::e#1 )
  [729] (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::y#3 )
  [730] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [731] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [732] return 
  to:@return
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  [733] (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y1#1 )
  [733] (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::yd#1 )
  [733] (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y#1 )
  [733] (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::x#0 bitmap_line::@6/(byte) bitmap_line_ydxd::x#1 )
  [733] (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::xd#1 )
  [734] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [735] (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  [735] (byte) bitmap_line_ydxd::y#2 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#3 )
  [735] (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  [736] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  [737] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2
  [738] call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [739] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  [740] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2
  [741] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  [742] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3
  [743] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  [744] (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::e#1 )
  [744] (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::x#3 )
  [745] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [746] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [747] return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from gfx_init_vic_bitmap::@2
  [748] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0)
  [749] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [750] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [750] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [751] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [751] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [752] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [753] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [754] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [755] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [756] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [757] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [758] return 
  to:@return
bitmap_init: scope:[bitmap_init]  from gfx_init_vic_bitmap
  [759] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [760] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte/word/signed word/dword/signed dword) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [760] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [761] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8
  [762] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  [763] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP#0
  [764] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [765] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [766] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [767] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte/word/signed word/dword/signed dword) $80 )
  [768] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [769] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [770] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [770] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [771] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [772] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  [773] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7
  [774] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  [775] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  [776] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  [777] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [778] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [779] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [780] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [781] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [782] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [783] return 
  to:@return
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [784] phi()
  to:bitmap_init::@2
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  [785] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  [786] (byte) gfx_init_charset::c#4 ← phi( gfx_init_charset/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_charset::@3/(byte) gfx_init_charset::c#1 )
  [786] (byte*) gfx_init_charset::charset#3 ← phi( gfx_init_charset/(const byte*) VIC_CHARSET_ROM#0 gfx_init_charset::@3/(byte*) gfx_init_charset::charset#1 )
  [786] (byte*) gfx_init_charset::chargen#3 ← phi( gfx_init_charset/(const byte*) CHARGEN#0 gfx_init_charset::@3/(byte*) gfx_init_charset::chargen#1 )
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  [787] (byte) gfx_init_charset::l#2 ← phi( gfx_init_charset::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_charset::@2/(byte) gfx_init_charset::l#1 )
  [787] (byte*) gfx_init_charset::charset#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::charset#3 gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  [787] (byte*) gfx_init_charset::chargen#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::chargen#3 gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  [788] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2)
  [789] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2
  [790] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2
  [791] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2
  [792] if((byte) gfx_init_charset::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  [793] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4
  [794] if((byte) gfx_init_charset::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  [795] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  [796] return 
  to:@return
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  [797] phi()
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  [798] (byte) gfx_init_screen4::cy#4 ← phi( gfx_init_screen4/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen4::@3/(byte) gfx_init_screen4::cy#1 )
  [798] (byte*) gfx_init_screen4::ch#3 ← phi( gfx_init_screen4/(const byte*) VIC_SCREEN4#0 gfx_init_screen4::@3/(byte*) gfx_init_screen4::ch#1 )
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  [799] (byte) gfx_init_screen4::cx#2 ← phi( gfx_init_screen4::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen4::@2/(byte) gfx_init_screen4::cx#1 )
  [799] (byte*) gfx_init_screen4::ch#2 ← phi( gfx_init_screen4::@1/(byte*) gfx_init_screen4::ch#3 gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  [800] *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [801] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2
  [802] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2
  [803] if((byte) gfx_init_screen4::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  [804] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4
  [805] if((byte) gfx_init_screen4::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  [806] return 
  to:@return
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  [807] phi()
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  [808] (byte*) gfx_init_screen3::ch#3 ← phi( gfx_init_screen3/(const byte*) VIC_SCREEN3#0 gfx_init_screen3::@3/(byte*) gfx_init_screen3::ch#1 )
  [808] (byte) gfx_init_screen3::cy#4 ← phi( gfx_init_screen3/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen3::@3/(byte) gfx_init_screen3::cy#1 )
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  [809] (byte*) gfx_init_screen3::ch#2 ← phi( gfx_init_screen3::@1/(byte*) gfx_init_screen3::ch#3 gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  [809] (byte) gfx_init_screen3::cx#2 ← phi( gfx_init_screen3::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen3::@2/(byte) gfx_init_screen3::cx#1 )
  [810] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [811] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [812] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3
  [813] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2
  [814] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3
  [815] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2
  [816] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2
  [817] if((byte) gfx_init_screen3::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  [818] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4
  [819] if((byte) gfx_init_screen3::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  [820] return 
  to:@return
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  [821] phi()
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  [822] (byte*) gfx_init_screen2::ch#3 ← phi( gfx_init_screen2/(const byte*) VIC_SCREEN2#0 gfx_init_screen2::@3/(byte*) gfx_init_screen2::ch#1 )
  [822] (byte) gfx_init_screen2::cy#4 ← phi( gfx_init_screen2/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen2::@3/(byte) gfx_init_screen2::cy#1 )
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  [823] (byte*) gfx_init_screen2::ch#2 ← phi( gfx_init_screen2::@1/(byte*) gfx_init_screen2::ch#3 gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  [823] (byte) gfx_init_screen2::cx#2 ← phi( gfx_init_screen2::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen2::@2/(byte) gfx_init_screen2::cx#1 )
  [824] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4
  [825] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [826] (byte) gfx_init_screen2::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0
  [827] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [828] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
  [829] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4
  [830] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2
  [831] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2
  [832] if((byte) gfx_init_screen2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  [833] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4
  [834] if((byte) gfx_init_screen2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  [835] return 
  to:@return
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  [836] phi()
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  [837] (byte*) gfx_init_screen1::ch#3 ← phi( gfx_init_screen1/(const byte*) VIC_SCREEN1#0 gfx_init_screen1::@3/(byte*) gfx_init_screen1::ch#1 )
  [837] (byte) gfx_init_screen1::cy#4 ← phi( gfx_init_screen1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen1::@3/(byte) gfx_init_screen1::cy#1 )
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  [838] (byte*) gfx_init_screen1::ch#2 ← phi( gfx_init_screen1::@1/(byte*) gfx_init_screen1::ch#3 gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  [838] (byte) gfx_init_screen1::cx#2 ← phi( gfx_init_screen1::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen1::@2/(byte) gfx_init_screen1::cx#1 )
  [839] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4
  [840] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [841] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1
  [842] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2
  [843] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2
  [844] if((byte) gfx_init_screen1::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  [845] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4
  [846] if((byte) gfx_init_screen1::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  [847] return 
  to:@return
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  [848] phi()
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  [849] (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(const byte*) VIC_SCREEN0#0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#1 )
  [849] (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  [850] (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  [850] (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  [851] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [852] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [853] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [854] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
  [855] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3
  [856] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  [857] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2
  [858] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  [859] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4
  [860] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  [861] return 
  to:@return
keyboard_init: scope:[keyboard_init]  from main
  [862] *((const byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff
  [863] *((const byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  [864] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) DTV_BADLINE_OFF
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_TRANSPARANCY
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XOR
(byte) DTV_BORDER_OFF
(byte) DTV_CHUNKY
(byte) DTV_COLORRAM_OFF
(dword) DTV_COLOR_BANK_DEFAULT
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_CONTROL
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_ENABLE
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_VIC_BANK
(byte) DTV_HIGHCOLOR
(byte) DTV_LINEAR
(byte) DTV_OVERSCAN
(byte*) DTV_PALETTE
(byte[$10]) DTV_PALETTE_DEFAULT
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) DTV_SPRITE_BANK
(byte*) FORM_CHARSET
(byte[]) FORM_COLS
(signed byte) FORM_CURSOR_BLINK
(byte*) FORM_SCREEN
(byte[]) FORM_TEXT
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte) KEY_0
(byte) KEY_1
(byte) KEY_2
(byte) KEY_3
(byte) KEY_4
(byte) KEY_5
(byte) KEY_6
(byte) KEY_7
(byte) KEY_8
(byte) KEY_9
(byte) KEY_A
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(byte) KEY_C
(byte) KEY_COLON
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(byte) KEY_D
(byte) KEY_DEL
(byte) KEY_DOT
(byte) KEY_E
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(byte) KEY_LSHIFT
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_N
(byte) KEY_O
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(byte) KEY_T
(byte) KEY_U
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(byte) KEY_Y
(byte) KEY_Z
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(dword) PLANE_8BPP_CHUNKY
(dword) PLANE_BLANK
(dword) PLANE_CHARSET8
(dword) PLANE_FULL
(dword) PLANE_HORISONTAL
(dword) PLANE_HORISONTAL2
(dword) PLANE_VERTICAL
(dword) PLANE_VERTICAL2
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte*) VIC_BITMAP
(byte) VIC_BMM
(byte*) VIC_CHARSET_ROM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte*) VIC_SCREEN0
(byte*) VIC_SCREEN1
(byte*) VIC_SCREEN2
(byte*) VIC_SCREEN3
(byte*) VIC_SCREEN4
(byte) WHITE
(byte) YELLOW
(void()) apply_preset((byte) apply_preset::idx)
(byte) apply_preset::i
(byte) apply_preset::i#1 1501.5
(byte) apply_preset::i#2 2002.0
(byte) apply_preset::idx
(byte) apply_preset::idx#0 11.18181818181818
(byte*) apply_preset::preset
(byte*) apply_preset::preset#14 200.2
(void()) bitmap_clear()
(word~) bitmap_clear::$3 2.0
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 42.599999999999994
(byte*) bitmap_clear::bitmap#2 157.0
(byte*) bitmap_clear::bitmap#3 24.0
(byte*~) bitmap_clear::bitmap#5 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 151.5
(byte) bitmap_clear::x#2 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 16.5
(byte) bitmap_clear::y#4 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 22.0
(byte~) bitmap_init::$10 22.0
(byte~) bitmap_init::$6 11.0
(byte~) bitmap_init::$7 22.0
(byte~) bitmap_init::$8 22.0
(byte~) bitmap_init::$9 22.0
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 11.0
(byte) bitmap_init::bits#3 6.6000000000000005
(byte) bitmap_init::bits#4 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 16.5
(byte) bitmap_init::x#2 7.333333333333334
(byte) bitmap_init::y
(byte) bitmap_init::y#1 16.5
(byte) bitmap_init::y#2 6.0
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 22.0
(byte*) bitmap_init::yoffs#2 6.111111111111112
(byte*) bitmap_init::yoffs#4 11.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 1.260869565217391
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 1.3181818181818181
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 0.7
(byte) bitmap_line::xd#2 0.7
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 1.6666666666666674
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 1.7500000000000007
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 0.8888888888888888
(byte) bitmap_line::yd#10 0.8888888888888888
(byte) bitmap_line::yd#11 0.8888888888888888
(byte) bitmap_line::yd#2 0.8888888888888888
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 202.0
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 4.0
(byte) bitmap_line_xdyd::e#1 134.66666666666666
(byte) bitmap_line_xdyd::e#2 202.0
(byte) bitmap_line_xdyd::e#3 40.8
(byte) bitmap_line_xdyd::e#6 101.0
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 0.8
(byte) bitmap_line_xdyd::x#1 0.8
(byte) bitmap_line_xdyd::x#2 37.875
(byte) bitmap_line_xdyd::x#3 76.25
(byte) bitmap_line_xdyd::x#6 3.0
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 1.3333333333333333
(byte) bitmap_line_xdyd::x1#1 1.3333333333333333
(byte) bitmap_line_xdyd::x1#6 7.5
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 2.0
(byte) bitmap_line_xdyd::xd#1 2.0
(byte) bitmap_line_xdyd::xd#5 14.714285714285715
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 1.0
(byte) bitmap_line_xdyd::y#1 1.0
(byte) bitmap_line_xdyd::y#2 101.0
(byte) bitmap_line_xdyd::y#3 58.00000000000001
(byte) bitmap_line_xdyd::y#5 3.0
(byte) bitmap_line_xdyd::y#6 101.0
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 4.0
(byte) bitmap_line_xdyd::yd#1 4.0
(byte) bitmap_line_xdyd::yd#2 7.642857142857143
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 202.0
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 4.0
(byte) bitmap_line_xdyi::e#1 134.66666666666666
(byte) bitmap_line_xdyi::e#2 202.0
(byte) bitmap_line_xdyi::e#3 40.8
(byte) bitmap_line_xdyi::e#6 101.0
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 0.8
(byte) bitmap_line_xdyi::x#1 0.8
(byte) bitmap_line_xdyi::x#2 37.875
(byte) bitmap_line_xdyi::x#3 76.25
(byte) bitmap_line_xdyi::x#6 3.0
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 1.3333333333333333
(byte) bitmap_line_xdyi::x1#1 1.3333333333333333
(byte) bitmap_line_xdyi::x1#6 7.5
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 2.0
(byte) bitmap_line_xdyi::xd#1 2.0
(byte) bitmap_line_xdyi::xd#5 14.714285714285715
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 1.0
(byte) bitmap_line_xdyi::y#1 1.0
(byte) bitmap_line_xdyi::y#2 101.0
(byte) bitmap_line_xdyi::y#3 58.00000000000001
(byte) bitmap_line_xdyi::y#5 3.0
(byte) bitmap_line_xdyi::y#6 101.0
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 4.0
(byte) bitmap_line_xdyi::yd#1 4.0
(byte) bitmap_line_xdyi::yd#2 7.642857142857143
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 202.0
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 4.0
(byte) bitmap_line_ydxd::e#1 134.66666666666666
(byte) bitmap_line_ydxd::e#2 202.0
(byte) bitmap_line_ydxd::e#3 40.8
(byte) bitmap_line_ydxd::e#6 101.0
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 1.0
(byte) bitmap_line_ydxd::x#1 1.0
(byte) bitmap_line_ydxd::x#2 101.0
(byte) bitmap_line_ydxd::x#3 58.00000000000001
(byte) bitmap_line_ydxd::x#5 3.0
(byte) bitmap_line_ydxd::x#6 101.0
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 4.0
(byte) bitmap_line_ydxd::xd#1 4.0
(byte) bitmap_line_ydxd::xd#2 7.642857142857143
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 0.8
(byte) bitmap_line_ydxd::y#1 0.8
(byte) bitmap_line_ydxd::y#2 76.25
(byte) bitmap_line_ydxd::y#3 37.875
(byte) bitmap_line_ydxd::y#7 3.0
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 1.3333333333333333
(byte) bitmap_line_ydxd::y1#1 1.3333333333333333
(byte) bitmap_line_ydxd::y1#6 7.5
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 2.0
(byte) bitmap_line_ydxd::yd#1 2.0
(byte) bitmap_line_ydxd::yd#5 14.714285714285715
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 202.0
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 4.0
(byte) bitmap_line_ydxi::e#1 134.66666666666666
(byte) bitmap_line_ydxi::e#2 202.0
(byte) bitmap_line_ydxi::e#3 40.8
(byte) bitmap_line_ydxi::e#6 101.0
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 1.0
(byte) bitmap_line_ydxi::x#1 1.0
(byte) bitmap_line_ydxi::x#2 101.0
(byte) bitmap_line_ydxi::x#3 58.00000000000001
(byte) bitmap_line_ydxi::x#5 3.0
(byte) bitmap_line_ydxi::x#6 101.0
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 4.0
(byte) bitmap_line_ydxi::xd#1 4.0
(byte) bitmap_line_ydxi::xd#2 7.642857142857143
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 0.8
(byte) bitmap_line_ydxi::y#1 0.8
(byte) bitmap_line_ydxi::y#2 37.875
(byte) bitmap_line_ydxi::y#3 76.25
(byte) bitmap_line_ydxi::y#6 3.0
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 1.3333333333333333
(byte) bitmap_line_ydxi::y1#1 1.3333333333333333
(byte) bitmap_line_ydxi::y1#6 7.5
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 2.0
(byte) bitmap_line_ydxi::yd#1 2.0
(byte) bitmap_line_ydxi::yd#5 14.714285714285715
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 1.0
(byte~) bitmap_plot::$1 4.0
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 2.0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 4.0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 101.0
(byte) bitmap_plot::x#1 101.0
(byte) bitmap_plot::x#2 101.0
(byte) bitmap_plot::x#3 101.0
(byte) bitmap_plot::x#4 102.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 202.0
(byte) bitmap_plot::y#1 202.0
(byte) bitmap_plot::y#2 202.0
(byte) bitmap_plot::y#3 202.0
(byte) bitmap_plot::y#4 204.0
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_xhi
(byte[$100]) bitmap_plot_xlo
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_ylo
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 202.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 4.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13 105.0
(byte*) form_a_mod_hi
(byte*) form_a_mod_lo
(byte*) form_a_pattern
(byte*) form_a_start_hi
(byte*) form_a_start_lo
(byte*) form_a_step_hi
(byte*) form_a_step_lo
(byte*) form_b_mod_hi
(byte*) form_b_mod_lo
(byte*) form_b_pattern
(byte*) form_b_start_hi
(byte*) form_b_start_lo
(byte*) form_b_step_hi
(byte*) form_b_step_lo
(byte()) form_control()
(byte~) form_control::$13 4.0
(byte/word/dword~) form_control::$14 4.0
(byte~) form_control::$15 4.0
(byte~) form_control::$16 4.0
(byte~) form_control::$24 4.0
(byte*) form_control::field
(byte*) form_control::field#0 0.5925925925925926
(byte) form_control::key_event
(byte) form_control::key_event#0 2.6666666666666665
(byte) form_control::return
(byte) form_control::return#0 2002.0
(byte) form_control::return#2 333.6666666666667
(byte*) form_ctrl_bmm
(byte*) form_ctrl_borof
(byte*) form_ctrl_chunk
(byte*) form_ctrl_colof
(byte*) form_ctrl_ecm
(byte*) form_ctrl_hicol
(byte*) form_ctrl_line
(byte*) form_ctrl_mcm
(byte*) form_ctrl_overs
(signed byte) form_cursor_count
(signed byte) form_cursor_count#1 0.3333333333333333
(signed byte) form_cursor_count#15 0.4
(signed byte) form_cursor_count#16 65.82352941176472
(signed byte) form_cursor_count#21 157.99999999999997
(signed byte) form_cursor_count#5 2.0
(byte*) form_dtv_palet
(byte) form_field_idx
(byte) form_field_idx#1 0.3333333333333333
(byte) form_field_idx#18 65.94117647058826
(byte) form_field_idx#28 29.17948717948718
(byte) form_field_idx#31 6.0
(byte) form_field_idx#44 2.0
(byte) form_field_idx#45 2.0
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(word~) form_field_ptr::$2 1.0
(byte*) form_field_ptr::field
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0 2002.0
(byte) form_field_ptr::field_idx#1 4.0
(byte) form_field_ptr::field_idx#2 335.66666666666674
(byte*) form_field_ptr::line
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0 251.25
(byte*) form_field_ptr::return#2 2002.0
(byte*) form_field_ptr::return#3 4.0
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0 4.0
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0 6.0
(byte) form_fields_cnt
(byte[]) form_fields_max
(byte[]) form_fields_val
(byte[]) form_fields_x
(byte[]) form_fields_y
(byte[$19]) form_line_hi
(byte[$19]) form_line_lo
(void()) form_mode()
(byte~) form_mode::$36 2002.0
(byte) form_mode::i
(byte) form_mode::i#1 151.5
(byte) form_mode::i#2 202.0
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0 4.0
(byte) form_mode::preset_current#1 50.5
(byte) form_mode::preset_current#6 157.71428571428572
(byte*) form_preset
(void()) form_render_values()
(byte*) form_render_values::field
(byte*) form_render_values::field#0 2002.0
(byte) form_render_values::idx
(byte) form_render_values::idx#1 1501.5
(byte) form_render_values::idx#2 667.3333333333334
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0 202.0
(byte~) form_set_screen::$1 202.0
(byte*) form_set_screen::line
(byte*) form_set_screen::line#1 67.33333333333333
(byte*) form_set_screen::line#2 80.8
(byte*) form_set_screen::screen
(byte) form_set_screen::y
(byte) form_set_screen::y#1 151.5
(byte) form_set_screen::y#2 67.33333333333333
(byte*) form_vic_bg0_hi
(byte*) form_vic_bg0_lo
(byte*) form_vic_bg1_hi
(byte*) form_vic_bg1_lo
(byte*) form_vic_bg2_hi
(byte*) form_vic_bg2_lo
(byte*) form_vic_bg3_hi
(byte*) form_vic_bg3_lo
(byte*) form_vic_cols
(byte*) form_vic_gfx
(byte*) form_vic_screen
(dword()) get_plane((byte) get_plane::idx)
(byte) get_plane::idx
(byte) get_plane::idx#0 4.0
(byte) get_plane::idx#1 4.0
(byte) get_plane::idx#10 2.285714285714285
(dword) get_plane::return
(dword) get_plane::return#14 1.0
(dword) get_plane::return#16 4.0
(dword) get_plane::return#17 4.0
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0 3.0
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#2 0.6666666666666666
(byte*) get_vic_charset::return#4 4.0
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0 4.0
(byte) get_vic_screen::idx#1 4.0
(byte) get_vic_screen::idx#2 2.8
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#10 4.0
(byte*) get_vic_screen::return#11 4.0
(byte*) get_vic_screen::return#5 1.0
(void()) gfx_init()
(void()) gfx_init_charset()
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#1 16.5
(byte) gfx_init_charset::c#4 3.142857142857143
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#1 42.599999999999994
(byte*) gfx_init_charset::chargen#2 104.66666666666666
(byte*) gfx_init_charset::chargen#3 22.0
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#1 35.5
(byte*) gfx_init_charset::charset#2 157.0
(byte*) gfx_init_charset::charset#3 22.0
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#1 151.5
(byte) gfx_init_charset::l#2 50.5
(void()) gfx_init_plane_8bppchunky()
(word~) gfx_init_plane_8bppchunky::$9 202.0
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0 202.0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#1 42.599999999999994
(byte*) gfx_init_plane_8bppchunky::gfxb#3 157.0
(byte*) gfx_init_plane_8bppchunky::gfxb#4 75.75
(byte*) gfx_init_plane_8bppchunky::gfxb#5 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 202.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 103.75
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 34.888888888888886
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#1 151.5
(word) gfx_init_plane_8bppchunky::x#2 30.299999999999997
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#1 16.5
(byte) gfx_init_plane_8bppchunky::y#6 9.461538461538462
(void()) gfx_init_plane_blank()
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$8 2002.0
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 101.0
(byte) gfx_init_plane_charset8::bits#1 500.5
(byte) gfx_init_plane_charset8::bits#2 443.42857142857144
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 2002.0
(byte~) gfx_init_plane_charset8::c#3 2002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 16.5
(byte) gfx_init_plane_charset8::ch#8 1.2941176470588236
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 13.3125
(byte*) gfx_init_plane_charset8::chargen#2 157.0
(byte*) gfx_init_plane_charset8::chargen#3 22.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 302.0
(byte) gfx_init_plane_charset8::col#2 388.0
(byte) gfx_init_plane_charset8::col#5 71.0
(byte) gfx_init_plane_charset8::col#6 22.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 1501.5
(byte) gfx_init_plane_charset8::cp#2 222.44444444444446
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 151.5
(byte) gfx_init_plane_charset8::cr#6 14.428571428571429
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 234.8888888888889
(byte*) gfx_init_plane_charset8::gfxa#2 517.3333333333334
(byte*) gfx_init_plane_charset8::gfxa#5 71.0
(byte*) gfx_init_plane_charset8::gfxa#6 22.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0 4.0
(word~) gfx_init_plane_fill::$1 4.0
(word~) gfx_init_plane_fill::$4 4.0
(word~) gfx_init_plane_fill::$5 4.0
(word/signed dword/dword~) gfx_init_plane_fill::$6 2.0
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#1 151.5
(byte) gfx_init_plane_fill::bx#2 67.33333333333333
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#1 16.5
(byte) gfx_init_plane_fill::by#4 3.6666666666666665
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#6 5.315789473684211
(byte*) gfx_init_plane_fill::gfxb
(byte*) gfx_init_plane_fill::gfxb#1 42.599999999999994
(byte*) gfx_init_plane_fill::gfxb#2 157.0
(byte*) gfx_init_plane_fill::gfxb#3 24.0
(byte*~) gfx_init_plane_fill::gfxb#6 4.0
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0 2.0
(byte) gfx_init_plane_fill::gfxbCpuBank#1 20.0
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#3 0.5714285714285714
(void()) gfx_init_plane_full()
(void()) gfx_init_plane_horisontal()
(byte~) gfx_init_plane_horisontal::$8 202.0
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#1 151.5
(byte) gfx_init_plane_horisontal::ax#2 25.25
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#1 16.5
(byte) gfx_init_plane_horisontal::ay#4 11.181818181818182
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#1 202.0
(byte*) gfx_init_plane_horisontal::gfxa#2 202.0
(byte*) gfx_init_plane_horisontal::gfxa#3 103.2
(byte*) gfx_init_plane_horisontal::gfxa#6 22.0
(byte*) gfx_init_plane_horisontal::gfxa#7 62.8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(void()) gfx_init_plane_horisontal2()
(byte~) gfx_init_plane_horisontal2::$8 202.0
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#1 151.5
(byte) gfx_init_plane_horisontal2::ax#2 40.4
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#1 16.5
(byte) gfx_init_plane_horisontal2::ay#4 15.375
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#1 42.599999999999994
(byte*) gfx_init_plane_horisontal2::gfxa#2 78.5
(byte*) gfx_init_plane_horisontal2::gfxa#3 22.0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0 202.0
(byte[]) gfx_init_plane_horisontal2::row_bitmask
(void()) gfx_init_plane_vertical()
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#1 151.5
(byte) gfx_init_plane_vertical::bx#2 67.33333333333333
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#1 16.5
(byte) gfx_init_plane_vertical::by#4 3.6666666666666665
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#1 42.599999999999994
(byte*) gfx_init_plane_vertical::gfxb#2 157.0
(byte*) gfx_init_plane_vertical::gfxb#3 22.0
(byte) gfx_init_plane_vertical::gfxbCpuBank
(void()) gfx_init_plane_vertical2()
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 202.0
(byte~) gfx_init_screen0::$1 101.0
(byte~) gfx_init_screen0::$2 202.0
(byte~) gfx_init_screen0::$3 202.0
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 42.599999999999994
(byte*) gfx_init_screen0::ch#2 52.33333333333333
(byte*) gfx_init_screen0::ch#3 22.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 151.5
(byte) gfx_init_screen0::cx#2 43.285714285714285
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 16.5
(byte) gfx_init_screen0::cy#4 12.299999999999999
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0 202.0
(byte~) gfx_init_screen1::$1 202.0
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#1 42.599999999999994
(byte*) gfx_init_screen1::ch#2 78.5
(byte*) gfx_init_screen1::ch#3 22.0
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#1 151.5
(byte) gfx_init_screen1::cx#2 60.599999999999994
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#1 16.5
(byte) gfx_init_screen1::cy#4 15.375
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0 202.0
(byte~) gfx_init_screen2::$3 202.0
(byte~) gfx_init_screen2::$4 202.0
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#1 42.599999999999994
(byte*) gfx_init_screen2::ch#2 44.85714285714286
(byte*) gfx_init_screen2::ch#3 22.0
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0 151.5
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0 101.0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#1 151.5
(byte) gfx_init_screen2::cx#2 37.875
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#1 16.5
(byte) gfx_init_screen2::cy#4 11.181818181818182
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0 202.0
(byte~) gfx_init_screen3::$1 101.0
(byte~) gfx_init_screen3::$2 202.0
(byte~) gfx_init_screen3::$3 202.0
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#1 42.599999999999994
(byte*) gfx_init_screen3::ch#2 52.33333333333333
(byte*) gfx_init_screen3::ch#3 22.0
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#1 151.5
(byte) gfx_init_screen3::cx#2 43.285714285714285
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#1 16.5
(byte) gfx_init_screen3::cy#4 12.299999999999999
(void()) gfx_init_screen4()
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#1 42.599999999999994
(byte*) gfx_init_screen4::ch#2 157.0
(byte*) gfx_init_screen4::ch#3 22.0
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#1 151.5
(byte) gfx_init_screen4::cx#2 67.33333333333333
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#1 16.5
(byte) gfx_init_screen4::cy#4 3.6666666666666665
(void()) gfx_init_vic_bitmap()
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#1 16.5
(byte) gfx_init_vic_bitmap::l#2 11.0
(byte) gfx_init_vic_bitmap::lines_cnt
(byte[]) gfx_init_vic_bitmap::lines_x
(byte[]) gfx_init_vic_bitmap::lines_y
(void()) gfx_mode()
(byte~) gfx_mode::$20 4.0
(dword~) gfx_mode::$22 4.0
(word~) gfx_mode::$24 4.0
(byte~) gfx_mode::$25 4.0
(word~) gfx_mode::$26 4.0
(byte~) gfx_mode::$27 4.0
(word~) gfx_mode::$28 4.0
(byte~) gfx_mode::$29 4.0
(byte~) gfx_mode::$30 4.0
(byte~) gfx_mode::$31 4.0
(byte~) gfx_mode::$32 4.0
(byte~) gfx_mode::$33 4.0
(byte~) gfx_mode::$34 4.0
(dword~) gfx_mode::$36 4.0
(word~) gfx_mode::$38 4.0
(byte~) gfx_mode::$39 4.0
(word~) gfx_mode::$40 4.0
(byte~) gfx_mode::$41 4.0
(word~) gfx_mode::$42 4.0
(byte~) gfx_mode::$43 4.0
(byte~) gfx_mode::$44 4.0
(byte~) gfx_mode::$45 4.0
(byte~) gfx_mode::$46 4.0
(byte~) gfx_mode::$47 4.0
(byte*~) gfx_mode::$52 2.0
(word~) gfx_mode::$54 4.0
(word~) gfx_mode::$55 4.0
(byte~) gfx_mode::$56 0.5
(byte*~) gfx_mode::$57 2.0
(word~) gfx_mode::$59 4.0
(byte~) gfx_mode::$60 4.0
(byte~) gfx_mode::$61 4.0
(byte~) gfx_mode::$62 4.0
(byte~) gfx_mode::$64 4.0
(byte~) gfx_mode::$65 4.0
(byte~) gfx_mode::$66 4.0
(byte~) gfx_mode::$67 4.0
(byte~) gfx_mode::$68 4.0
(byte~) gfx_mode::$69 4.0
(byte~) gfx_mode::$70 4.0
(byte~) gfx_mode::$71 4.0
(byte*) gfx_mode::col
(byte*) gfx_mode::col#1 350.5
(byte*) gfx_mode::col#2 1552.0
(byte*) gfx_mode::col#3 202.0
(byte) gfx_mode::cx
(byte) gfx_mode::cx#1 1501.5
(byte) gfx_mode::cx#2 500.5
(byte) gfx_mode::cy
(byte) gfx_mode::cy#1 151.5
(byte) gfx_mode::cy#4 28.857142857142858
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#10 4.0
(byte) gfx_mode::dtv_control#11 4.0
(byte) gfx_mode::dtv_control#12 6.0
(byte) gfx_mode::dtv_control#13 4.0
(byte) gfx_mode::dtv_control#14 2.0
(byte) gfx_mode::dtv_control#15 4.0
(byte) gfx_mode::dtv_control#2 4.0
(byte) gfx_mode::dtv_control#3 4.0
(byte) gfx_mode::dtv_control#4 4.0
(byte) gfx_mode::dtv_control#5 4.0
(byte) gfx_mode::dtv_control#6 4.0
(byte) gfx_mode::i
(byte) gfx_mode::i#1 151.5
(byte) gfx_mode::i#2 202.0
(byte) gfx_mode::j
(byte) gfx_mode::j#1 151.5
(byte) gfx_mode::j#2 202.0
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0 202.0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0 1.1428571428571428
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0 0.8
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0 1.1428571428571428
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0 0.8
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0 4.0
(byte*) gfx_mode::vic_colors#1 420.59999999999997
(byte*) gfx_mode::vic_colors#2 1034.6666666666667
(byte*) gfx_mode::vic_colors#3 204.0
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#2 4.0
(byte) gfx_mode::vic_control#4 6.0
(byte) gfx_mode::vic_control#5 2.0
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#2 2.0
(byte[]) keyboard_char_keycodes
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 4.0
(byte) keyboard_event_get::return#2 26.25
(byte) keyboard_event_get::return#3 202.0
(byte) keyboard_event_get::return#4 4.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 4.0
(byte~) keyboard_event_pressed::$1 4.0
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#4 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 4.0
(byte) keyboard_event_pressed::return#1 4.0
(byte) keyboard_event_pressed::return#10 1.6666666666666665
(byte) keyboard_event_pressed::return#2 4.0
(byte) keyboard_event_pressed::return#3 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 2.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 4.0
(byte~) keyboard_event_scan::$15 200002.0
(byte~) keyboard_event_scan::$16 200002.0
(byte/word/dword~) keyboard_event_scan::$23 200002.0
(byte~) keyboard_event_scan::$3 4.0
(byte~) keyboard_event_scan::$6 4.0
(byte~) keyboard_event_scan::$9 4.0
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 150001.5
(byte) keyboard_event_scan::col#2 28571.714285714286
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 200002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 20002.0
(byte) keyboard_event_scan::keycode#10 31538.846153846156
(byte) keyboard_event_scan::keycode#11 5000.5
(byte) keyboard_event_scan::keycode#14 10001.0
(byte) keyboard_event_scan::keycode#15 52500.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 15001.5
(byte) keyboard_event_scan::row#2 6000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 12778.055555555557
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte) keyboard_events_size#1 200002.0
(byte) keyboard_events_size#100 882.6176470588235
(byte) keyboard_events_size#110 105.0
(byte) keyboard_events_size#118 102001.2
(byte) keyboard_events_size#119 4286.428571428572
(byte) keyboard_events_size#18 81000.90000000001
(byte) keyboard_events_size#2 200002.0
(byte) keyboard_events_size#24 6.6923076923076925
(byte) keyboard_events_size#27 0.3333333333333333
(byte) keyboard_events_size#4 3.0
(byte) keyboard_events_size#47 65.05882352941177
(void()) keyboard_init()
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 3334.333333333333
(byte) keyboard_matrix_read::return#2 20002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 10003.0
(byte[8]) keyboard_matrix_row_bitmask
(byte) keyboard_modifiers
(byte) keyboard_modifiers#18 0.8
(byte) keyboard_modifiers#19 1.6
(byte) keyboard_modifiers#20 1.6
(byte) keyboard_modifiers#21 0.7272727272727273
(byte) keyboard_modifiers#3 4.0
(byte) keyboard_modifiers#4 4.0
(byte) keyboard_modifiers#5 4.0
(byte[8]) keyboard_scan_values
(void()) main()
(byte[]) preset_8bpppixelcell
(byte[]) preset_chunky
(byte[]) preset_ecmchar
(byte[]) preset_hi_ecmchar
(byte[]) preset_hi_stdchar
(byte[]) preset_mcbm
(byte[]) preset_sixsfred
(byte[]) preset_sixsfred2
(byte[]) preset_stdbm
(byte[]) preset_stdchar
(byte[]) preset_twoplane
(byte*) print_char_cursor
(byte*) print_char_cursor#1 2002.0
(byte*) print_char_cursor#20 821.0
(byte*) print_char_cursor#22 102.0
(byte*) print_char_cursor#38 572.0
(byte*~) print_char_cursor#77 4.0
(byte*~) print_char_cursor#78 202.0
(void()) print_cls()
(byte*~) print_cls::$0 202.0
(byte*) print_cls::sc
(byte*) print_cls::sc#0 4.0
(byte*) print_cls::sc#1 101.0
(byte*) print_cls::sc#2 152.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#2 8.749999999999998
(byte*) print_line_cursor#21 2004.0
(byte*) print_line_cursor#22 641.0
(void()) print_ln()
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#2 5.631578947368421
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(byte*) print_str_at::at
(byte*) print_str_at::at#0 1001.0
(byte*) print_str_at::at#2 1001.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 2002.0
(byte*) print_str_at::str#1 2.0
(byte*) print_str_at::str#2 1001.5
(void()) print_str_lines((byte*) print_str_lines::str)
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 233.66666666666669
(byte*) print_str_lines::str#3 152.5
(byte*) print_str_lines::str#4 1552.0
(byte*) print_str_lines::str#5 1.0
(void()) render_preset_name((byte) render_preset_name::idx)
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0 4.0
(byte) render_preset_name::idx#1 202.0
(byte) render_preset_name::idx#10 11.363636363636362
(byte*) render_preset_name::name
(byte*) render_preset_name::name#13 2.0

Initial phi equivalence classes
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
[ gfx_mode::vic_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ]
[ keyboard_event_pressed::keycode#4 ]
[ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
[ get_vic_screen::return#5 ]
[ get_vic_charset::return#2 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
[ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ apply_preset::preset#14 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ form_control::return#2 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ]
[ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
[ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Added variable gfx_mode::$20 to zero page equivalence class [ gfx_mode::$20 ]
Added variable gfx_mode::plane_a_offs#0 to zero page equivalence class [ gfx_mode::plane_a_offs#0 ]
Added variable get_plane::return#16 to zero page equivalence class [ get_plane::return#16 ]
Added variable gfx_mode::$22 to zero page equivalence class [ gfx_mode::$22 ]
Added variable gfx_mode::plane_a#0 to zero page equivalence class [ gfx_mode::plane_a#0 ]
Added variable gfx_mode::$24 to zero page equivalence class [ gfx_mode::$24 ]
Added variable gfx_mode::$25 to zero page equivalence class [ gfx_mode::$25 ]
Added variable gfx_mode::$26 to zero page equivalence class [ gfx_mode::$26 ]
Added variable gfx_mode::$27 to zero page equivalence class [ gfx_mode::$27 ]
Added variable gfx_mode::$28 to zero page equivalence class [ gfx_mode::$28 ]
Added variable gfx_mode::$29 to zero page equivalence class [ gfx_mode::$29 ]
Added variable gfx_mode::$30 to zero page equivalence class [ gfx_mode::$30 ]
Added variable gfx_mode::$31 to zero page equivalence class [ gfx_mode::$31 ]
Added variable gfx_mode::$32 to zero page equivalence class [ gfx_mode::$32 ]
Added variable gfx_mode::$33 to zero page equivalence class [ gfx_mode::$33 ]
Added variable gfx_mode::$34 to zero page equivalence class [ gfx_mode::$34 ]
Added variable gfx_mode::plane_b_offs#0 to zero page equivalence class [ gfx_mode::plane_b_offs#0 ]
Added variable get_plane::return#17 to zero page equivalence class [ get_plane::return#17 ]
Added variable gfx_mode::$36 to zero page equivalence class [ gfx_mode::$36 ]
Added variable gfx_mode::plane_b#0 to zero page equivalence class [ gfx_mode::plane_b#0 ]
Added variable gfx_mode::$38 to zero page equivalence class [ gfx_mode::$38 ]
Added variable gfx_mode::$39 to zero page equivalence class [ gfx_mode::$39 ]
Added variable gfx_mode::$40 to zero page equivalence class [ gfx_mode::$40 ]
Added variable gfx_mode::$41 to zero page equivalence class [ gfx_mode::$41 ]
Added variable gfx_mode::$42 to zero page equivalence class [ gfx_mode::$42 ]
Added variable gfx_mode::$43 to zero page equivalence class [ gfx_mode::$43 ]
Added variable gfx_mode::$44 to zero page equivalence class [ gfx_mode::$44 ]
Added variable gfx_mode::$45 to zero page equivalence class [ gfx_mode::$45 ]
Added variable gfx_mode::$46 to zero page equivalence class [ gfx_mode::$46 ]
Added variable gfx_mode::$47 to zero page equivalence class [ gfx_mode::$47 ]
Added variable get_vic_screen::return#10 to zero page equivalence class [ get_vic_screen::return#10 ]
Added variable gfx_mode::$52 to zero page equivalence class [ gfx_mode::$52 ]
Added variable gfx_mode::$54 to zero page equivalence class [ gfx_mode::$54 ]
Added variable gfx_mode::$55 to zero page equivalence class [ gfx_mode::$55 ]
Added variable gfx_mode::$56 to zero page equivalence class [ gfx_mode::$56 ]
Added variable get_vic_charset::idx#0 to zero page equivalence class [ get_vic_charset::idx#0 ]
Added variable get_vic_charset::return#4 to zero page equivalence class [ get_vic_charset::return#4 ]
Added variable gfx_mode::$57 to zero page equivalence class [ gfx_mode::$57 ]
Added variable gfx_mode::$59 to zero page equivalence class [ gfx_mode::$59 ]
Added variable gfx_mode::$60 to zero page equivalence class [ gfx_mode::$60 ]
Added variable gfx_mode::$61 to zero page equivalence class [ gfx_mode::$61 ]
Added variable gfx_mode::$62 to zero page equivalence class [ gfx_mode::$62 ]
Added variable get_vic_screen::return#11 to zero page equivalence class [ get_vic_screen::return#11 ]
Added variable gfx_mode::$64 to zero page equivalence class [ gfx_mode::$64 ]
Added variable gfx_mode::$65 to zero page equivalence class [ gfx_mode::$65 ]
Added variable gfx_mode::$66 to zero page equivalence class [ gfx_mode::$66 ]
Added variable gfx_mode::$67 to zero page equivalence class [ gfx_mode::$67 ]
Added variable gfx_mode::$68 to zero page equivalence class [ gfx_mode::$68 ]
Added variable gfx_mode::$69 to zero page equivalence class [ gfx_mode::$69 ]
Added variable gfx_mode::$70 to zero page equivalence class [ gfx_mode::$70 ]
Added variable gfx_mode::$71 to zero page equivalence class [ gfx_mode::$71 ]
Added variable keyboard_event_get::return#3 to zero page equivalence class [ keyboard_event_get::return#3 ]
Added variable gfx_mode::keyboard_event#0 to zero page equivalence class [ gfx_mode::keyboard_event#0 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to zero page equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to zero page equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$0 to zero page equivalence class [ keyboard_event_scan::$0 ]
Added variable keyboard_event_pressed::return#1 to zero page equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$3 to zero page equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_pressed::return#2 to zero page equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$6 to zero page equivalence class [ keyboard_event_scan::$6 ]
Added variable keyboard_event_pressed::return#3 to zero page equivalence class [ keyboard_event_pressed::return#3 ]
Added variable keyboard_event_scan::$9 to zero page equivalence class [ keyboard_event_scan::$9 ]
Added variable keyboard_event_scan::$15 to zero page equivalence class [ keyboard_event_scan::$15 ]
Added variable keyboard_event_scan::$16 to zero page equivalence class [ keyboard_event_scan::$16 ]
Added variable keyboard_event_scan::event_type#0 to zero page equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$23 to zero page equivalence class [ keyboard_event_scan::$23 ]
Added variable keyboard_event_pressed::$0 to zero page equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to zero page equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to zero page equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#10 to zero page equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable form_control::return#0 to zero page equivalence class [ form_control::return#0 ]
Added variable form_mode::$36 to zero page equivalence class [ form_mode::$36 ]
Added variable apply_preset::idx#0 to zero page equivalence class [ apply_preset::idx#0 ]
Added variable form_field_ptr::return#2 to zero page equivalence class [ form_field_ptr::return#2 ]
Added variable form_render_values::field#0 to zero page equivalence class [ form_render_values::field#0 ]
Added variable form_field_ptr::y#0 to zero page equivalence class [ form_field_ptr::y#0 ]
Added variable form_field_ptr::$2 to zero page equivalence class [ form_field_ptr::$2 ]
Added variable form_field_ptr::x#0 to zero page equivalence class [ form_field_ptr::x#0 ]
Added variable form_field_ptr::return#0 to zero page equivalence class [ form_field_ptr::return#0 ]
Added variable form_field_ptr::return#3 to zero page equivalence class [ form_field_ptr::return#3 ]
Added variable form_control::field#0 to zero page equivalence class [ form_control::field#0 ]
Added variable form_control::$13 to zero page equivalence class [ form_control::$13 ]
Added variable keyboard_event_get::return#4 to zero page equivalence class [ keyboard_event_get::return#4 ]
Added variable form_control::key_event#0 to zero page equivalence class [ form_control::key_event#0 ]
Added variable form_control::$15 to zero page equivalence class [ form_control::$15 ]
Added variable form_control::$16 to zero page equivalence class [ form_control::$16 ]
Added variable form_control::$24 to zero page equivalence class [ form_control::$24 ]
Added variable form_control::$14 to zero page equivalence class [ form_control::$14 ]
Added variable form_set_screen::$0 to zero page equivalence class [ form_set_screen::$0 ]
Added variable form_set_screen::$1 to zero page equivalence class [ form_set_screen::$1 ]
Added variable print_str_lines::ch#0 to zero page equivalence class [ print_str_lines::ch#0 ]
Added variable print_cls::$0 to zero page equivalence class [ print_cls::$0 ]
Added variable gfx_init_plane_fill::$0 to zero page equivalence class [ gfx_init_plane_fill::$0 ]
Added variable gfx_init_plane_fill::$1 to zero page equivalence class [ gfx_init_plane_fill::$1 ]
Added variable gfx_init_plane_fill::gfxbCpuBank#0 to zero page equivalence class [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Added variable gfx_init_plane_fill::gfxbCpuBank#1 to zero page equivalence class [ gfx_init_plane_fill::gfxbCpuBank#1 ]
Added variable gfx_init_plane_fill::$4 to zero page equivalence class [ gfx_init_plane_fill::$4 ]
Added variable gfx_init_plane_fill::$5 to zero page equivalence class [ gfx_init_plane_fill::$5 ]
Added variable gfx_init_plane_fill::$6 to zero page equivalence class [ gfx_init_plane_fill::$6 ]
Added variable gfx_init_plane_horisontal2::$8 to zero page equivalence class [ gfx_init_plane_horisontal2::$8 ]
Added variable gfx_init_plane_horisontal2::row#0 to zero page equivalence class [ gfx_init_plane_horisontal2::row#0 ]
Added variable gfx_init_plane_horisontal::$8 to zero page equivalence class [ gfx_init_plane_horisontal::$8 ]
Added variable gfx_init_plane_charset8::$8 to zero page equivalence class [ gfx_init_plane_charset8::$8 ]
Added variable gfx_init_plane_8bppchunky::$9 to zero page equivalence class [ gfx_init_plane_8bppchunky::$9 ]
Added variable gfx_init_plane_8bppchunky::c#0 to zero page equivalence class [ gfx_init_plane_8bppchunky::c#0 ]
Added variable bitmap_line::x0#0 to zero page equivalence class [ bitmap_line::x0#0 ]
Added variable bitmap_line::x1#0 to zero page equivalence class [ bitmap_line::x1#0 ]
Added variable bitmap_line::y0#0 to zero page equivalence class [ bitmap_line::y0#0 ]
Added variable bitmap_line::y1#0 to zero page equivalence class [ bitmap_line::y1#0 ]
Added variable bitmap_line::xd#2 to zero page equivalence class [ bitmap_line::xd#2 ]
Added variable bitmap_line::yd#2 to zero page equivalence class [ bitmap_line::yd#2 ]
Added variable bitmap_line::yd#1 to zero page equivalence class [ bitmap_line::yd#1 ]
Added variable bitmap_line::xd#1 to zero page equivalence class [ bitmap_line::xd#1 ]
Added variable bitmap_line::yd#10 to zero page equivalence class [ bitmap_line::yd#10 ]
Added variable bitmap_line::yd#11 to zero page equivalence class [ bitmap_line::yd#11 ]
Added variable bitmap_line_xdyi::$6 to zero page equivalence class [ bitmap_line_xdyi::$6 ]
Added variable bitmap_plot::plotter_x#0 to zero page equivalence class [ bitmap_plot::plotter_x#0 ]
Added variable bitmap_plot::plotter_y#0 to zero page equivalence class [ bitmap_plot::plotter_y#0 ]
Added variable bitmap_plot::$0 to zero page equivalence class [ bitmap_plot::$0 ]
Added variable bitmap_plot::$1 to zero page equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_line_ydxi::$6 to zero page equivalence class [ bitmap_line_ydxi::$6 ]
Added variable bitmap_line_xdyd::$6 to zero page equivalence class [ bitmap_line_xdyd::$6 ]
Added variable bitmap_line_ydxd::$6 to zero page equivalence class [ bitmap_line_ydxd::$6 ]
Added variable bitmap_clear::$3 to zero page equivalence class [ bitmap_clear::$3 ]
Added variable bitmap_init::$0 to zero page equivalence class [ bitmap_init::$0 ]
Added variable bitmap_init::$6 to zero page equivalence class [ bitmap_init::$6 ]
Added variable bitmap_init::$7 to zero page equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$8 to zero page equivalence class [ bitmap_init::$8 ]
Added variable bitmap_init::$9 to zero page equivalence class [ bitmap_init::$9 ]
Added variable bitmap_init::$10 to zero page equivalence class [ bitmap_init::$10 ]
Added variable gfx_init_screen3::$0 to zero page equivalence class [ gfx_init_screen3::$0 ]
Added variable gfx_init_screen3::$1 to zero page equivalence class [ gfx_init_screen3::$1 ]
Added variable gfx_init_screen3::$2 to zero page equivalence class [ gfx_init_screen3::$2 ]
Added variable gfx_init_screen3::$3 to zero page equivalence class [ gfx_init_screen3::$3 ]
Added variable gfx_init_screen2::$0 to zero page equivalence class [ gfx_init_screen2::$0 ]
Added variable gfx_init_screen2::col#0 to zero page equivalence class [ gfx_init_screen2::col#0 ]
Added variable gfx_init_screen2::col2#0 to zero page equivalence class [ gfx_init_screen2::col2#0 ]
Added variable gfx_init_screen2::$3 to zero page equivalence class [ gfx_init_screen2::$3 ]
Added variable gfx_init_screen2::$4 to zero page equivalence class [ gfx_init_screen2::$4 ]
Added variable gfx_init_screen1::$0 to zero page equivalence class [ gfx_init_screen1::$0 ]
Added variable gfx_init_screen1::$1 to zero page equivalence class [ gfx_init_screen1::$1 ]
Added variable gfx_init_screen0::$0 to zero page equivalence class [ gfx_init_screen0::$0 ]
Added variable gfx_init_screen0::$1 to zero page equivalence class [ gfx_init_screen0::$1 ]
Added variable gfx_init_screen0::$2 to zero page equivalence class [ gfx_init_screen0::$2 ]
Added variable gfx_init_screen0::$3 to zero page equivalence class [ gfx_init_screen0::$3 ]
Complete equivalence classes
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
[ gfx_mode::vic_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ]
[ keyboard_event_pressed::keycode#4 ]
[ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
[ get_vic_screen::return#5 ]
[ get_vic_charset::return#2 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
[ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ apply_preset::preset#14 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ form_control::return#2 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ]
[ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
[ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
[ gfx_mode::$20 ]
[ gfx_mode::plane_a_offs#0 ]
[ get_plane::return#16 ]
[ gfx_mode::$22 ]
[ gfx_mode::plane_a#0 ]
[ gfx_mode::$24 ]
[ gfx_mode::$25 ]
[ gfx_mode::$26 ]
[ gfx_mode::$27 ]
[ gfx_mode::$28 ]
[ gfx_mode::$29 ]
[ gfx_mode::$30 ]
[ gfx_mode::$31 ]
[ gfx_mode::$32 ]
[ gfx_mode::$33 ]
[ gfx_mode::$34 ]
[ gfx_mode::plane_b_offs#0 ]
[ get_plane::return#17 ]
[ gfx_mode::$36 ]
[ gfx_mode::plane_b#0 ]
[ gfx_mode::$38 ]
[ gfx_mode::$39 ]
[ gfx_mode::$40 ]
[ gfx_mode::$41 ]
[ gfx_mode::$42 ]
[ gfx_mode::$43 ]
[ gfx_mode::$44 ]
[ gfx_mode::$45 ]
[ gfx_mode::$46 ]
[ gfx_mode::$47 ]
[ get_vic_screen::return#10 ]
[ gfx_mode::$52 ]
[ gfx_mode::$54 ]
[ gfx_mode::$55 ]
[ gfx_mode::$56 ]
[ get_vic_charset::idx#0 ]
[ get_vic_charset::return#4 ]
[ gfx_mode::$57 ]
[ gfx_mode::$59 ]
[ gfx_mode::$60 ]
[ gfx_mode::$61 ]
[ gfx_mode::$62 ]
[ get_vic_screen::return#11 ]
[ gfx_mode::$64 ]
[ gfx_mode::$65 ]
[ gfx_mode::$66 ]
[ gfx_mode::$67 ]
[ gfx_mode::$68 ]
[ gfx_mode::$69 ]
[ gfx_mode::$70 ]
[ gfx_mode::$71 ]
[ keyboard_event_get::return#3 ]
[ gfx_mode::keyboard_event#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$0 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$6 ]
[ keyboard_event_pressed::return#3 ]
[ keyboard_event_scan::$9 ]
[ keyboard_event_scan::$15 ]
[ keyboard_event_scan::$16 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$23 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_matrix_read::return#0 ]
[ form_control::return#0 ]
[ form_mode::$36 ]
[ apply_preset::idx#0 ]
[ form_field_ptr::return#2 ]
[ form_render_values::field#0 ]
[ form_field_ptr::y#0 ]
[ form_field_ptr::$2 ]
[ form_field_ptr::x#0 ]
[ form_field_ptr::return#0 ]
[ form_field_ptr::return#3 ]
[ form_control::field#0 ]
[ form_control::$13 ]
[ keyboard_event_get::return#4 ]
[ form_control::key_event#0 ]
[ form_control::$15 ]
[ form_control::$16 ]
[ form_control::$24 ]
[ form_control::$14 ]
[ form_set_screen::$0 ]
[ form_set_screen::$1 ]
[ print_str_lines::ch#0 ]
[ print_cls::$0 ]
[ gfx_init_plane_fill::$0 ]
[ gfx_init_plane_fill::$1 ]
[ gfx_init_plane_fill::gfxbCpuBank#0 ]
[ gfx_init_plane_fill::gfxbCpuBank#1 ]
[ gfx_init_plane_fill::$4 ]
[ gfx_init_plane_fill::$5 ]
[ gfx_init_plane_fill::$6 ]
[ gfx_init_plane_horisontal2::$8 ]
[ gfx_init_plane_horisontal2::row#0 ]
[ gfx_init_plane_horisontal::$8 ]
[ gfx_init_plane_charset8::$8 ]
[ gfx_init_plane_8bppchunky::$9 ]
[ gfx_init_plane_8bppchunky::c#0 ]
[ bitmap_line::x0#0 ]
[ bitmap_line::x1#0 ]
[ bitmap_line::y0#0 ]
[ bitmap_line::y1#0 ]
[ bitmap_line::xd#2 ]
[ bitmap_line::yd#2 ]
[ bitmap_line::yd#1 ]
[ bitmap_line::xd#1 ]
[ bitmap_line::yd#10 ]
[ bitmap_line::yd#11 ]
[ bitmap_line_xdyi::$6 ]
[ bitmap_plot::plotter_x#0 ]
[ bitmap_plot::plotter_y#0 ]
[ bitmap_plot::$0 ]
[ bitmap_plot::$1 ]
[ bitmap_line_ydxi::$6 ]
[ bitmap_line_xdyd::$6 ]
[ bitmap_line_ydxd::$6 ]
[ bitmap_clear::$3 ]
[ bitmap_init::$0 ]
[ bitmap_init::$6 ]
[ bitmap_init::$7 ]
[ bitmap_init::$8 ]
[ bitmap_init::$9 ]
[ bitmap_init::$10 ]
[ gfx_init_screen3::$0 ]
[ gfx_init_screen3::$1 ]
[ gfx_init_screen3::$2 ]
[ gfx_init_screen3::$3 ]
[ gfx_init_screen2::$0 ]
[ gfx_init_screen2::col#0 ]
[ gfx_init_screen2::col2#0 ]
[ gfx_init_screen2::$3 ]
[ gfx_init_screen2::$4 ]
[ gfx_init_screen1::$0 ]
[ gfx_init_screen1::$1 ]
[ gfx_init_screen0::$0 ]
[ gfx_init_screen0::$1 ]
[ gfx_init_screen0::$2 ]
[ gfx_init_screen0::$3 ]
Allocated zp ZP_BYTE:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Allocated zp ZP_BYTE:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Allocated zp ZP_BYTE:4 [ gfx_mode::vic_control2#2 ]
Allocated zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Allocated zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
Allocated zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated zp ZP_BYTE:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Allocated zp ZP_BYTE:11 [ gfx_mode::j#2 gfx_mode::j#1 ]
Allocated zp ZP_BYTE:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Allocated zp ZP_BYTE:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp ZP_BYTE:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Allocated zp ZP_BYTE:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ]
Allocated zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ]
Allocated zp ZP_BYTE:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
Allocated zp ZP_WORD:21 [ get_vic_screen::return#5 ]
Allocated zp ZP_WORD:23 [ get_vic_charset::return#2 ]
Allocated zp ZP_BYTE:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
Allocated zp ZP_DWORD:26 [ get_plane::return#14 ]
Allocated zp ZP_BYTE:30 [ form_mode::i#2 form_mode::i#1 ]
Allocated zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Allocated zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ]
Allocated zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Allocated zp ZP_BYTE:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
Allocated zp ZP_WORD:35 [ render_preset_name::name#13 ]
Allocated zp ZP_WORD:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
Allocated zp ZP_WORD:39 [ print_str_at::at#2 print_str_at::at#0 ]
Allocated zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Allocated zp ZP_BYTE:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Allocated zp ZP_WORD:43 [ apply_preset::preset#14 ]
Allocated zp ZP_BYTE:45 [ apply_preset::i#2 apply_preset::i#1 ]
Allocated zp ZP_BYTE:46 [ form_control::return#2 ]
Allocated zp ZP_WORD:47 [ form_set_screen::line#2 form_set_screen::line#1 ]
Allocated zp ZP_BYTE:49 [ form_set_screen::y#2 form_set_screen::y#1 ]
Allocated zp ZP_WORD:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
Allocated zp ZP_WORD:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ]
Allocated zp ZP_WORD:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
Allocated zp ZP_WORD:56 [ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ]
Allocated zp ZP_DWORD:58 [ gfx_init_plane_fill::plane_addr#3 ]
Allocated zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ]
Allocated zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Allocated zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
Allocated zp ZP_BYTE:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Allocated zp ZP_BYTE:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
Allocated zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Allocated zp ZP_WORD:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
Allocated zp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Allocated zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Allocated zp ZP_WORD:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
Allocated zp ZP_BYTE:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Allocated zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Allocated zp ZP_WORD:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
Allocated zp ZP_BYTE:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Allocated zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Allocated zp ZP_WORD:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
Allocated zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Allocated zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated zp ZP_WORD:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated zp ZP_BYTE:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Allocated zp ZP_BYTE:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
Allocated zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Allocated zp ZP_WORD:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
Allocated zp ZP_BYTE:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Allocated zp ZP_WORD:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
Allocated zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Allocated zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Allocated zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Allocated zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Allocated zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Allocated zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Allocated zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Allocated zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Allocated zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Allocated zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Allocated zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Allocated zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Allocated zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Allocated zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Allocated zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Allocated zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Allocated zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Allocated zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Allocated zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Allocated zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Allocated zp ZP_WORD:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
Allocated zp ZP_WORD:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
Allocated zp ZP_BYTE:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Allocated zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Allocated zp ZP_WORD:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
Allocated zp ZP_BYTE:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Allocated zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Allocated zp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Allocated zp ZP_WORD:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
Allocated zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Allocated zp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Allocated zp ZP_WORD:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
Allocated zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Allocated zp ZP_BYTE:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Allocated zp ZP_WORD:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
Allocated zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Allocated zp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Allocated zp ZP_WORD:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Allocated zp ZP_BYTE:158 [ gfx_mode::$20 ]
Allocated zp ZP_BYTE:159 [ gfx_mode::plane_a_offs#0 ]
Allocated zp ZP_DWORD:160 [ get_plane::return#16 ]
Allocated zp ZP_DWORD:164 [ gfx_mode::$22 ]
Allocated zp ZP_DWORD:168 [ gfx_mode::plane_a#0 ]
Allocated zp ZP_WORD:172 [ gfx_mode::$24 ]
Allocated zp ZP_BYTE:174 [ gfx_mode::$25 ]
Allocated zp ZP_WORD:175 [ gfx_mode::$26 ]
Allocated zp ZP_BYTE:177 [ gfx_mode::$27 ]
Allocated zp ZP_WORD:178 [ gfx_mode::$28 ]
Allocated zp ZP_BYTE:180 [ gfx_mode::$29 ]
Allocated zp ZP_BYTE:181 [ gfx_mode::$30 ]
Allocated zp ZP_BYTE:182 [ gfx_mode::$31 ]
Allocated zp ZP_BYTE:183 [ gfx_mode::$32 ]
Allocated zp ZP_BYTE:184 [ gfx_mode::$33 ]
Allocated zp ZP_BYTE:185 [ gfx_mode::$34 ]
Allocated zp ZP_BYTE:186 [ gfx_mode::plane_b_offs#0 ]
Allocated zp ZP_DWORD:187 [ get_plane::return#17 ]
Allocated zp ZP_DWORD:191 [ gfx_mode::$36 ]
Allocated zp ZP_DWORD:195 [ gfx_mode::plane_b#0 ]
Allocated zp ZP_WORD:199 [ gfx_mode::$38 ]
Allocated zp ZP_BYTE:201 [ gfx_mode::$39 ]
Allocated zp ZP_WORD:202 [ gfx_mode::$40 ]
Allocated zp ZP_BYTE:204 [ gfx_mode::$41 ]
Allocated zp ZP_WORD:205 [ gfx_mode::$42 ]
Allocated zp ZP_BYTE:207 [ gfx_mode::$43 ]
Allocated zp ZP_BYTE:208 [ gfx_mode::$44 ]
Allocated zp ZP_BYTE:209 [ gfx_mode::$45 ]
Allocated zp ZP_BYTE:210 [ gfx_mode::$46 ]
Allocated zp ZP_BYTE:211 [ gfx_mode::$47 ]
Allocated zp ZP_WORD:212 [ get_vic_screen::return#10 ]
Allocated zp ZP_WORD:214 [ gfx_mode::$52 ]
Allocated zp ZP_WORD:216 [ gfx_mode::$54 ]
Allocated zp ZP_WORD:218 [ gfx_mode::$55 ]
Allocated zp ZP_BYTE:220 [ gfx_mode::$56 ]
Allocated zp ZP_BYTE:221 [ get_vic_charset::idx#0 ]
Allocated zp ZP_WORD:222 [ get_vic_charset::return#4 ]
Allocated zp ZP_WORD:224 [ gfx_mode::$57 ]
Allocated zp ZP_WORD:226 [ gfx_mode::$59 ]
Allocated zp ZP_BYTE:228 [ gfx_mode::$60 ]
Allocated zp ZP_BYTE:229 [ gfx_mode::$61 ]
Allocated zp ZP_BYTE:230 [ gfx_mode::$62 ]
Allocated zp ZP_WORD:231 [ get_vic_screen::return#11 ]
Allocated zp ZP_BYTE:233 [ gfx_mode::$64 ]
Allocated zp ZP_BYTE:234 [ gfx_mode::$65 ]
Allocated zp ZP_BYTE:235 [ gfx_mode::$66 ]
Allocated zp ZP_BYTE:236 [ gfx_mode::$67 ]
Allocated zp ZP_BYTE:237 [ gfx_mode::$68 ]
Allocated zp ZP_BYTE:238 [ gfx_mode::$69 ]
Allocated zp ZP_BYTE:239 [ gfx_mode::$70 ]
Allocated zp ZP_BYTE:240 [ gfx_mode::$71 ]
Allocated zp ZP_BYTE:241 [ keyboard_event_get::return#3 ]
Allocated zp ZP_BYTE:242 [ gfx_mode::keyboard_event#0 ]
Allocated zp ZP_BYTE:243 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:244 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ]
Allocated zp ZP_BYTE:246 [ keyboard_event_pressed::return#0 ]
Allocated zp ZP_BYTE:247 [ keyboard_event_scan::$0 ]
Allocated zp ZP_BYTE:248 [ keyboard_event_pressed::return#1 ]
Allocated zp ZP_BYTE:249 [ keyboard_event_scan::$3 ]
Allocated zp ZP_BYTE:250 [ keyboard_event_pressed::return#2 ]
Allocated zp ZP_BYTE:251 [ keyboard_event_scan::$6 ]
Allocated zp ZP_BYTE:252 [ keyboard_event_pressed::return#3 ]
Allocated zp ZP_BYTE:253 [ keyboard_event_scan::$9 ]
Allocated zp ZP_BYTE:254 [ keyboard_event_scan::$15 ]
Allocated zp ZP_BYTE:255 [ keyboard_event_scan::$16 ]
Allocated zp ZP_BYTE:256 [ keyboard_event_scan::event_type#0 ]
Allocated zp ZP_BYTE:257 [ keyboard_event_scan::$23 ]
Allocated zp ZP_BYTE:258 [ keyboard_event_pressed::$0 ]
Allocated zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp ZP_BYTE:260 [ keyboard_event_pressed::$1 ]
Allocated zp ZP_BYTE:261 [ keyboard_event_pressed::return#10 ]
Allocated zp ZP_BYTE:262 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:263 [ form_control::return#0 ]
Allocated zp ZP_BYTE:264 [ form_mode::$36 ]
Allocated zp ZP_BYTE:265 [ apply_preset::idx#0 ]
Allocated zp ZP_WORD:266 [ form_field_ptr::return#2 ]
Allocated zp ZP_WORD:268 [ form_render_values::field#0 ]
Allocated zp ZP_BYTE:270 [ form_field_ptr::y#0 ]
Allocated zp ZP_WORD:271 [ form_field_ptr::$2 ]
Allocated zp ZP_BYTE:273 [ form_field_ptr::x#0 ]
Allocated zp ZP_WORD:274 [ form_field_ptr::return#0 ]
Allocated zp ZP_WORD:276 [ form_field_ptr::return#3 ]
Allocated zp ZP_WORD:278 [ form_control::field#0 ]
Allocated zp ZP_BYTE:280 [ form_control::$13 ]
Allocated zp ZP_BYTE:281 [ keyboard_event_get::return#4 ]
Allocated zp ZP_BYTE:282 [ form_control::key_event#0 ]
Allocated zp ZP_BYTE:283 [ form_control::$15 ]
Allocated zp ZP_BYTE:284 [ form_control::$16 ]
Allocated zp ZP_BYTE:285 [ form_control::$24 ]
Allocated zp ZP_BYTE:286 [ form_control::$14 ]
Allocated zp ZP_BYTE:287 [ form_set_screen::$0 ]
Allocated zp ZP_BYTE:288 [ form_set_screen::$1 ]
Allocated zp ZP_BYTE:289 [ print_str_lines::ch#0 ]
Allocated zp ZP_WORD:290 [ print_cls::$0 ]
Allocated zp ZP_DWORD:292 [ gfx_init_plane_fill::$0 ]
Allocated zp ZP_WORD:296 [ gfx_init_plane_fill::$1 ]
Allocated zp ZP_BYTE:298 [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Allocated zp ZP_BYTE:299 [ gfx_init_plane_fill::gfxbCpuBank#1 ]
Allocated zp ZP_WORD:300 [ gfx_init_plane_fill::$4 ]
Allocated zp ZP_WORD:302 [ gfx_init_plane_fill::$5 ]
Allocated zp ZP_WORD:304 [ gfx_init_plane_fill::$6 ]
Allocated zp ZP_BYTE:306 [ gfx_init_plane_horisontal2::$8 ]
Allocated zp ZP_BYTE:307 [ gfx_init_plane_horisontal2::row#0 ]
Allocated zp ZP_BYTE:308 [ gfx_init_plane_horisontal::$8 ]
Allocated zp ZP_BYTE:309 [ gfx_init_plane_charset8::$8 ]
Allocated zp ZP_WORD:310 [ gfx_init_plane_8bppchunky::$9 ]
Allocated zp ZP_BYTE:312 [ gfx_init_plane_8bppchunky::c#0 ]
Allocated zp ZP_BYTE:313 [ bitmap_line::x0#0 ]
Allocated zp ZP_BYTE:314 [ bitmap_line::x1#0 ]
Allocated zp ZP_BYTE:315 [ bitmap_line::y0#0 ]
Allocated zp ZP_BYTE:316 [ bitmap_line::y1#0 ]
Allocated zp ZP_BYTE:317 [ bitmap_line::xd#2 ]
Allocated zp ZP_BYTE:318 [ bitmap_line::yd#2 ]
Allocated zp ZP_BYTE:319 [ bitmap_line::yd#1 ]
Allocated zp ZP_BYTE:320 [ bitmap_line::xd#1 ]
Allocated zp ZP_BYTE:321 [ bitmap_line::yd#10 ]
Allocated zp ZP_BYTE:322 [ bitmap_line::yd#11 ]
Allocated zp ZP_BYTE:323 [ bitmap_line_xdyi::$6 ]
Allocated zp ZP_WORD:324 [ bitmap_plot::plotter_x#0 ]
Allocated zp ZP_WORD:326 [ bitmap_plot::plotter_y#0 ]
Allocated zp ZP_WORD:328 [ bitmap_plot::$0 ]
Allocated zp ZP_BYTE:330 [ bitmap_plot::$1 ]
Allocated zp ZP_BYTE:331 [ bitmap_line_ydxi::$6 ]
Allocated zp ZP_BYTE:332 [ bitmap_line_xdyd::$6 ]
Allocated zp ZP_BYTE:333 [ bitmap_line_ydxd::$6 ]
Allocated zp ZP_WORD:334 [ bitmap_clear::$3 ]
Allocated zp ZP_BYTE:336 [ bitmap_init::$0 ]
Allocated zp ZP_BYTE:337 [ bitmap_init::$6 ]
Allocated zp ZP_BYTE:338 [ bitmap_init::$7 ]
Allocated zp ZP_BYTE:339 [ bitmap_init::$8 ]
Allocated zp ZP_BYTE:340 [ bitmap_init::$9 ]
Allocated zp ZP_BYTE:341 [ bitmap_init::$10 ]
Allocated zp ZP_BYTE:342 [ gfx_init_screen3::$0 ]
Allocated zp ZP_BYTE:343 [ gfx_init_screen3::$1 ]
Allocated zp ZP_BYTE:344 [ gfx_init_screen3::$2 ]
Allocated zp ZP_BYTE:345 [ gfx_init_screen3::$3 ]
Allocated zp ZP_BYTE:346 [ gfx_init_screen2::$0 ]
Allocated zp ZP_BYTE:347 [ gfx_init_screen2::col#0 ]
Allocated zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ]
Allocated zp ZP_BYTE:349 [ gfx_init_screen2::$3 ]
Allocated zp ZP_BYTE:350 [ gfx_init_screen2::$4 ]
Allocated zp ZP_BYTE:351 [ gfx_init_screen1::$0 ]
Allocated zp ZP_BYTE:352 [ gfx_init_screen1::$1 ]
Allocated zp ZP_BYTE:353 [ gfx_init_screen0::$0 ]
Allocated zp ZP_BYTE:354 [ gfx_init_screen0::$1 ]
Allocated zp ZP_BYTE:355 [ gfx_init_screen0::$2 ]
Allocated zp ZP_BYTE:356 [ gfx_init_screen0::$3 ]

INITIAL ASM
//SEG0 File Comments
// Interactive Explorer for C64DTV Screen Modes
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA #1 Port A data direction register.
  .label CIA1_PORT_A_DDR = $dc02
  // CIA #1 Port B data direction register.
  .label CIA1_PORT_B_DDR = $dc03
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  // Number of form fields
  .const form_fields_cnt = $24
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_vic_screen = form_fields_val+$18
  .label form_vic_gfx = form_fields_val+$19
  .label form_vic_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_vic_bg0_hi = form_fields_val+$1c
  .label form_vic_bg0_lo = form_fields_val+$1d
  .label form_vic_bg1_hi = form_fields_val+$1e
  .label form_vic_bg1_lo = form_fields_val+$1f
  .label form_vic_bg2_hi = form_fields_val+$20
  .label form_vic_bg2_lo = form_fields_val+$21
  .label form_vic_bg3_hi = form_fields_val+$22
  .label form_vic_bg3_lo = form_fields_val+$23
  .label print_char_cursor = $34
  .label print_line_cursor = $36
  .label keyboard_events_size = $12
  .label keyboard_modifiers = $f
  .label form_cursor_count = $1f
  .label form_field_idx = $20
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG12 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG13 [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG14 [8] call keyboard_init 
    jsr keyboard_init
  //SEG15 [9] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    jmp b3
  //SEG16 main::@3
  b3:
  //SEG17 [10] call gfx_init 
  //SEG18 [449] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from_b3:
    jsr gfx_init
  //SEG19 [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG20 [11] phi (byte) form_field_idx#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta form_field_idx
  //SEG21 [11] phi (byte) keyboard_events_size#27 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_events_size
  //SEG22 [11] phi (signed byte) form_cursor_count#1 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbuc1 
    lda #FORM_CURSOR_BLINK/2
    sta form_cursor_count
    jmp b1
  //SEG23 main::@1
  b1:
  //SEG24 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG25 main::@2
  b2:
  //SEG26 [13] call form_mode 
  //SEG27 [254] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from_b2:
    jsr form_mode
  //SEG28 [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  b4_from_b2:
    jmp b4
  //SEG29 main::@4
  b4:
  //SEG30 [15] call gfx_mode 
    jsr gfx_mode
  //SEG31 [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG32 [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG33 [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
  //SEG34 [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp b1
}
//SEG35 gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label _20 = $9e
    .label _22 = $a4
    .label _24 = $ac
    .label _25 = $ae
    .label _26 = $af
    .label _27 = $b1
    .label _28 = $b2
    .label _29 = $b4
    .label _30 = $b5
    .label _31 = $b6
    .label _32 = $b7
    .label _33 = $b8
    .label _34 = $b9
    .label _36 = $bf
    .label _38 = $c7
    .label _39 = $c9
    .label _40 = $ca
    .label _41 = $cc
    .label _42 = $cd
    .label _43 = $cf
    .label _44 = $d0
    .label _45 = $d1
    .label _46 = $d2
    .label _47 = $d3
    .label _52 = $d6
    .label _54 = $d8
    .label _55 = $da
    .label _56 = $dc
    .label _57 = $e0
    .label _59 = $e2
    .label _60 = $e4
    .label _61 = $e5
    .label _62 = $e6
    .label _64 = $e9
    .label _65 = $ea
    .label _66 = $eb
    .label _67 = $ec
    .label _68 = $ed
    .label _69 = $ee
    .label _70 = $ef
    .label _71 = $f0
    .label dtv_control = 2
    .label vic_control = 3
    .label plane_a_offs = $9f
    .label plane_a = $a8
    .label plane_b_offs = $ba
    .label plane_b = $c3
    .label vic_colors = 6
    .label col = 8
    .label cx = $a
    .label cy = 5
    .label j = $b
    .label i = $c
    .label keyboard_event = $f2
    .label vic_control2 = 4
  //SEG36 [16] if(*((const byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq b1_from_gfx_mode
  //SEG37 [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  b10_from_gfx_mode:
    jmp b10
  //SEG38 gfx_mode::@10
  b10:
  //SEG39 [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  b1_from_b10:
  //SEG40 [18] phi (byte) gfx_mode::dtv_control#14 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) DTV_LINEAR#0 [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuz1=vbuc1 
    lda #0|DTV_LINEAR
    sta dtv_control
    jmp b1
  //SEG41 [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  b1_from_gfx_mode:
  //SEG42 [18] phi (byte) gfx_mode::dtv_control#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta dtv_control
    jmp b1
  //SEG43 gfx_mode::@1
  b1:
  //SEG44 [19] if(*((const byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq b2_from_b1
    jmp b11
  //SEG45 gfx_mode::@11
  b11:
  //SEG46 [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_BORDER_OFF
    ora dtv_control
    sta dtv_control
  //SEG47 [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG48 [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp b2
  //SEG49 gfx_mode::@2
  b2:
  //SEG50 [22] if(*((const byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq b3_from_b2
    jmp b12
  //SEG51 gfx_mode::@12
  b12:
  //SEG52 [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_HIGHCOLOR
    ora dtv_control
    sta dtv_control
  //SEG53 [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG54 [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp b3
  //SEG55 gfx_mode::@3
  b3:
  //SEG56 [25] if(*((const byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq b4_from_b3
    jmp b13
  //SEG57 gfx_mode::@13
  b13:
  //SEG58 [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_OVERSCAN
    ora dtv_control
    sta dtv_control
  //SEG59 [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG60 [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp b4
  //SEG61 gfx_mode::@4
  b4:
  //SEG62 [28] if(*((const byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq b5_from_b4
    jmp b14
  //SEG63 gfx_mode::@14
  b14:
  //SEG64 [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_COLORRAM_OFF
    ora dtv_control
    sta dtv_control
  //SEG65 [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG66 [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp b5
  //SEG67 gfx_mode::@5
  b5:
  //SEG68 [31] if(*((const byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq b6_from_b5
    jmp b15
  //SEG69 gfx_mode::@15
  b15:
  //SEG70 [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_CHUNKY
    ora dtv_control
    sta dtv_control
  //SEG71 [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG72 [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp b6
  //SEG73 gfx_mode::@6
  b6:
  //SEG74 [34] *((const byte*) DTV_CONTROL#0) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuz1 
    lda dtv_control
    sta DTV_CONTROL
  //SEG75 [35] if(*((const byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq b7_from_b6
  //SEG76 [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  b16_from_b6:
    jmp b16
  //SEG77 gfx_mode::@16
  b16:
  //SEG78 [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  b7_from_b16:
  //SEG79 [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3|(const byte) VIC_ECM#0 [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuz1=vbuc1 
    lda #VIC_DEN|VIC_RSEL|3|VIC_ECM
    sta vic_control
    jmp b7
  //SEG80 [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  b7_from_b6:
  //SEG81 [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuz1=vbuc1 
    lda #VIC_DEN|VIC_RSEL|3
    sta vic_control
    jmp b7
  //SEG82 gfx_mode::@7
  b7:
  //SEG83 [38] if(*((const byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq b8_from_b7
    jmp b17
  //SEG84 gfx_mode::@17
  b17:
  //SEG85 [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #VIC_BMM
    ora vic_control
    sta vic_control
  //SEG86 [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG87 [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp b8
  //SEG88 gfx_mode::@8
  b8:
  //SEG89 [41] *((const byte*) VIC_CONTROL#0) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuz1 
    lda vic_control
    sta VIC_CONTROL
  //SEG90 [42] if(*((const byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq b9_from_b8
  //SEG91 [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  b18_from_b8:
    jmp b18
  //SEG92 gfx_mode::@18
  b18:
  //SEG93 [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  b9_from_b18:
  //SEG94 [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuz1=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    sta vic_control2
    jmp b9
  //SEG95 [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  b9_from_b8:
  //SEG96 [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL#0 [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuz1=vbuc1 
    lda #VIC_CSEL
    sta vic_control2
    jmp b9
  //SEG97 gfx_mode::@9
  b9:
  //SEG98 [45] *((const byte*) VIC_CONTROL2#0) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuz1 
    lda vic_control2
    sta VIC_CONTROL2
  //SEG99 [46] (byte~) gfx_mode::$20 ← *((const byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
    sta _20
  //SEG100 [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte*) form_a_start_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_a_start_lo
    ora _20
    sta plane_a_offs
  //SEG101 [48] (byte) get_plane::idx#0 ← *((const byte*) form_a_pattern#0) -- vbuz1=_deref_pbuc1 
    lda form_a_pattern
    sta get_plane.idx
  //SEG102 [49] call get_plane 
  //SEG103 [236] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from_b9:
  //SEG104 [236] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
  //SEG105 [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 -- vduz1=vduz2 
    lda get_plane.return
    sta get_plane.return_16
    lda get_plane.return+1
    sta get_plane.return_16+1
    lda get_plane.return+2
    sta get_plane.return_16+2
    lda get_plane.return+3
    sta get_plane.return_16+3
    jmp b27
  //SEG106 gfx_mode::@27
  b27:
  //SEG107 [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 -- vduz1=vduz2 
    lda get_plane.return_16
    sta _22
    lda get_plane.return_16+1
    sta _22+1
    lda get_plane.return_16+2
    sta _22+2
    lda get_plane.return_16+3
    sta _22+3
  //SEG108 [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz2_plus_vbuz3 
    lda plane_a_offs
    clc
    adc _22
    sta plane_a
    lda _22+1
    adc #0
    sta plane_a+1
    lda _22+2
    adc #0
    sta plane_a+2
    lda _22+3
    adc #0
    sta plane_a+3
  //SEG109 [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda plane_a
    sta _24
    lda plane_a+1
    sta _24+1
  //SEG110 [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24 -- vbuz1=_lo_vwuz2 
    lda _24
    sta _25
  //SEG111 [55] *((const byte*) DTV_PLANEA_START_LO#0) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuz1 
    lda _25
    sta DTV_PLANEA_START_LO
  //SEG112 [56] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda plane_a
    sta _26
    lda plane_a+1
    sta _26+1
  //SEG113 [57] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 -- vbuz1=_hi_vwuz2 
    lda _26+1
    sta _27
  //SEG114 [58] *((const byte*) DTV_PLANEA_START_MI#0) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuz1 
    lda _27
    sta DTV_PLANEA_START_MI
  //SEG115 [59] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda plane_a+2
    sta _28
    lda plane_a+3
    sta _28+1
  //SEG116 [60] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 -- vbuz1=_lo_vwuz2 
    lda _28
    sta _29
  //SEG117 [61] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuz1 
    lda _29
    sta DTV_PLANEA_START_HI
  //SEG118 [62] (byte~) gfx_mode::$30 ← *((const byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
    sta _30
  //SEG119 [63] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte*) form_a_step_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_a_step_lo
    ora _30
    sta _31
  //SEG120 [64] *((const byte*) DTV_PLANEA_STEP#0) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuz1 
    lda _31
    sta DTV_PLANEA_STEP
  //SEG121 [65] (byte~) gfx_mode::$32 ← *((const byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
    sta _32
  //SEG122 [66] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte*) form_a_mod_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_a_mod_lo
    ora _32
    sta _33
  //SEG123 [67] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte~) gfx_mode::$33 -- _deref_pbuc1=vbuz1 
    lda _33
    sta DTV_PLANEA_MODULO_LO
  //SEG124 [68] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG125 [69] (byte~) gfx_mode::$34 ← *((const byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
    sta _34
  //SEG126 [70] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte*) form_b_start_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_b_start_lo
    ora _34
    sta plane_b_offs
  //SEG127 [71] (byte) get_plane::idx#1 ← *((const byte*) form_b_pattern#0) -- vbuz1=_deref_pbuc1 
    lda form_b_pattern
    sta get_plane.idx
  //SEG128 [72] call get_plane 
  //SEG129 [236] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from_b27:
  //SEG130 [236] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
  //SEG131 [73] (dword) get_plane::return#17 ← (dword) get_plane::return#14 -- vduz1=vduz2 
    lda get_plane.return
    sta get_plane.return_17
    lda get_plane.return+1
    sta get_plane.return_17+1
    lda get_plane.return+2
    sta get_plane.return_17+2
    lda get_plane.return+3
    sta get_plane.return_17+3
    jmp b28
  //SEG132 gfx_mode::@28
  b28:
  //SEG133 [74] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 -- vduz1=vduz2 
    lda get_plane.return_17
    sta _36
    lda get_plane.return_17+1
    sta _36+1
    lda get_plane.return_17+2
    sta _36+2
    lda get_plane.return_17+3
    sta _36+3
  //SEG134 [75] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz2_plus_vbuz3 
    lda plane_b_offs
    clc
    adc _36
    sta plane_b
    lda _36+1
    adc #0
    sta plane_b+1
    lda _36+2
    adc #0
    sta plane_b+2
    lda _36+3
    adc #0
    sta plane_b+3
  //SEG135 [76] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda plane_b
    sta _38
    lda plane_b+1
    sta _38+1
  //SEG136 [77] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38 -- vbuz1=_lo_vwuz2 
    lda _38
    sta _39
  //SEG137 [78] *((const byte*) DTV_PLANEB_START_LO#0) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuz1 
    lda _39
    sta DTV_PLANEB_START_LO
  //SEG138 [79] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda plane_b
    sta _40
    lda plane_b+1
    sta _40+1
  //SEG139 [80] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 -- vbuz1=_hi_vwuz2 
    lda _40+1
    sta _41
  //SEG140 [81] *((const byte*) DTV_PLANEB_START_MI#0) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuz1 
    lda _41
    sta DTV_PLANEB_START_MI
  //SEG141 [82] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda plane_b+2
    sta _42
    lda plane_b+3
    sta _42+1
  //SEG142 [83] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 -- vbuz1=_lo_vwuz2 
    lda _42
    sta _43
  //SEG143 [84] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuz1 
    lda _43
    sta DTV_PLANEB_START_HI
  //SEG144 [85] (byte~) gfx_mode::$44 ← *((const byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
    sta _44
  //SEG145 [86] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte*) form_b_step_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_b_step_lo
    ora _44
    sta _45
  //SEG146 [87] *((const byte*) DTV_PLANEB_STEP#0) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuz1 
    lda _45
    sta DTV_PLANEB_STEP
  //SEG147 [88] (byte~) gfx_mode::$46 ← *((const byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
    sta _46
  //SEG148 [89] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte*) form_b_mod_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_b_mod_lo
    ora _46
    sta _47
  //SEG149 [90] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte~) gfx_mode::$47 -- _deref_pbuc1=vbuz1 
    lda _47
    sta DTV_PLANEB_MODULO_LO
  //SEG150 [91] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG151 [92] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG152 [93] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2_PORT_A
  //SEG153 [94] (byte) get_vic_screen::idx#0 ← *((const byte*) form_vic_screen#0) -- vbuz1=_deref_pbuc1 
    lda form_vic_screen
    sta get_vic_screen.idx
  //SEG154 [95] call get_vic_screen 
  //SEG155 [222] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  get_vic_screen_from_b28:
  //SEG156 [222] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
  //SEG157 [96] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 -- pbuz1=pbuz2 
    lda get_vic_screen.return
    sta get_vic_screen.return_10
    lda get_vic_screen.return+1
    sta get_vic_screen.return_10+1
    jmp b29
  //SEG158 gfx_mode::@29
  b29:
  //SEG159 [97] (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10 -- pbuz1=pbuz2 
    lda get_vic_screen.return_10
    sta _52
    lda get_vic_screen.return_10+1
    sta _52+1
  //SEG160 [98] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$52 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda _52
    and #<$3fff
    sta _54
    lda _52+1
    and #>$3fff
    sta _54+1
  //SEG161 [99] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6 -- vwuz1=vwuz2_ror_6 
    lda _54+1
    sta _55+1
    lda _54
    sta _55
    ldy #6
  !:
    lsr _55+1
    ror _55
    dey
    bne !-
  //SEG162 [100] (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55 -- vbuz1=_byte_vwuz2 
    lda _55
    sta _56
  //SEG163 [101] (byte) get_vic_charset::idx#0 ← *((const byte*) form_vic_gfx#0) -- vbuz1=_deref_pbuc1 
    lda form_vic_gfx
    sta get_vic_charset.idx
  //SEG164 [102] call get_vic_charset 
    jsr get_vic_charset
  //SEG165 [103] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 -- pbuz1=pbuz2 
    lda get_vic_charset.return
    sta get_vic_charset.return_4
    lda get_vic_charset.return+1
    sta get_vic_charset.return_4+1
    jmp b30
  //SEG166 gfx_mode::@30
  b30:
  //SEG167 [104] (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#4 -- pbuz1=pbuz2 
    lda get_vic_charset.return_4
    sta _57
    lda get_vic_charset.return_4+1
    sta _57+1
  //SEG168 [105] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$57 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda _57
    and #<$3fff
    sta _59
    lda _57+1
    and #>$3fff
    sta _59+1
  //SEG169 [106] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 -- vbuz1=_hi_vwuz2 
    lda _59+1
    sta _60
  //SEG170 [107] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz2_ror_2 
    lda _60
    lsr
    lsr
    sta _61
  //SEG171 [108] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61 -- vbuz1=vbuz2_bor_vbuz3 
    lda _56
    ora _61
    sta _62
  //SEG172 [109] *((const byte*) VIC_MEMORY#0) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuz1 
    // Set VIC Bank
    // VIC memory
    lda _62
    sta VIC_MEMORY
  //SEG173 [110] (byte) get_vic_screen::idx#1 ← *((const byte*) form_vic_cols#0) -- vbuz1=_deref_pbuc1 
    lda form_vic_cols
    sta get_vic_screen.idx
  //SEG174 [111] call get_vic_screen 
  //SEG175 [222] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  get_vic_screen_from_b30:
  //SEG176 [222] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
  //SEG177 [112] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 -- pbuz1=pbuz2 
    lda get_vic_screen.return
    sta get_vic_screen.return_11
    lda get_vic_screen.return+1
    sta get_vic_screen.return_11+1
    jmp b31
  //SEG178 gfx_mode::@31
  b31:
  //SEG179 [113] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 -- pbuz1=pbuz2 
    lda get_vic_screen.return_11
    sta vic_colors
    lda get_vic_screen.return_11+1
    sta vic_colors+1
  //SEG180 [114] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  b19_from_b31:
  //SEG181 [114] phi (byte) gfx_mode::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG182 [114] phi (byte*) gfx_mode::col#3 = (const byte*) COLS#0 [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
  //SEG183 [114] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp b19
  //SEG184 [114] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  b19_from_b21:
  //SEG185 [114] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
  //SEG186 [114] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
  //SEG187 [114] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp b19
  //SEG188 gfx_mode::@19
  b19:
  //SEG189 [115] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  b20_from_b19:
  //SEG190 [115] phi (byte) gfx_mode::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuz1=vbuc1 
    lda #0
    sta cx
  //SEG191 [115] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
  //SEG192 [115] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp b20
  //SEG193 [115] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  b20_from_b20:
  //SEG194 [115] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
  //SEG195 [115] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
  //SEG196 [115] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp b20
  //SEG197 gfx_mode::@20
  b20:
  //SEG198 [116] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    ldy #0
    sta (col),y
  //SEG199 [117] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG200 [118] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc vic_colors
    bne !+
    inc vic_colors+1
  !:
  //SEG201 [119] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG202 [120] if((byte) gfx_mode::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_mode::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp cx
    bne b20_from_b20
    jmp b21
  //SEG203 gfx_mode::@21
  b21:
  //SEG204 [121] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG205 [122] if((byte) gfx_mode::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b19_from_b21
    jmp b22
  //SEG206 gfx_mode::@22
  b22:
  //SEG207 [123] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta BORDERCOL
  //SEG208 [124] (byte~) gfx_mode::$64 ← *((const byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg0_hi
    asl
    asl
    asl
    asl
    sta _64
  //SEG209 [125] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte*) form_vic_bg0_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg0_lo
    ora _64
    sta _65
  //SEG210 [126] *((const byte*) BGCOL1#0) ← (byte~) gfx_mode::$65 -- _deref_pbuc1=vbuz1 
    lda _65
    sta BGCOL1
  //SEG211 [127] (byte~) gfx_mode::$66 ← *((const byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg1_hi
    asl
    asl
    asl
    asl
    sta _66
  //SEG212 [128] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte*) form_vic_bg1_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg1_lo
    ora _66
    sta _67
  //SEG213 [129] *((const byte*) BGCOL2#0) ← (byte~) gfx_mode::$67 -- _deref_pbuc1=vbuz1 
    lda _67
    sta BGCOL2
  //SEG214 [130] (byte~) gfx_mode::$68 ← *((const byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg2_hi
    asl
    asl
    asl
    asl
    sta _68
  //SEG215 [131] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte*) form_vic_bg2_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg2_lo
    ora _68
    sta _69
  //SEG216 [132] *((const byte*) BGCOL3#0) ← (byte~) gfx_mode::$69 -- _deref_pbuc1=vbuz1 
    lda _69
    sta BGCOL3
  //SEG217 [133] (byte~) gfx_mode::$70 ← *((const byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_vic_bg3_hi
    asl
    asl
    asl
    asl
    sta _70
  //SEG218 [134] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte*) form_vic_bg3_lo#0) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_vic_bg3_lo
    ora _70
    sta _71
  //SEG219 [135] *((const byte*) BGCOL4#0) ← (byte~) gfx_mode::$71 -- _deref_pbuc1=vbuz1 
    lda _71
    sta BGCOL4
  //SEG220 [136] if(*((const byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq b24_from_b22
  //SEG221 [137] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  b23_from_b22:
  //SEG222 [137] phi (byte) gfx_mode::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b23
  // DTV Palette - Grey Tones
  //SEG223 [137] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  b23_from_b23:
  //SEG224 [137] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp b23
  //SEG225 gfx_mode::@23
  b23:
  //SEG226 [138] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy j
    tya
    sta DTV_PALETTE,y
  //SEG227 [139] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG228 [140] if((byte) gfx_mode::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp j
    bne b23_from_b23
    jmp b25
  //SEG229 gfx_mode::@25
  b25:
  //SEG230 [141] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b25
  //SEG231 [142] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  b26_from_b25:
    jmp b26
  //SEG232 gfx_mode::@26
  b26:
  //SEG233 [143] call keyboard_event_scan 
  //SEG234 [159] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from_b26:
  //SEG235 [159] phi (byte) keyboard_events_size#110 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
  //SEG236 [144] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  b32_from_b26:
    jmp b32
  //SEG237 gfx_mode::@32
  b32:
  //SEG238 [145] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG239 [146] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_get.return
    sta keyboard_event_get.return_3
    jmp b33
  //SEG240 gfx_mode::@33
  b33:
  //SEG241 [147] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda keyboard_event_get.return_3
    sta keyboard_event
  //SEG242 [148] if((byte) gfx_mode::keyboard_event#0!=(const byte) KEY_SPACE#0) goto gfx_mode::@25 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp keyboard_event
    bne b25
    jmp breturn
  //SEG243 gfx_mode::@return
  breturn:
  //SEG244 [149] return 
    rts
  // DTV Palette - default
  //SEG245 [150] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  b24_from_b22:
  //SEG246 [150] phi (byte) gfx_mode::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b24
  //SEG247 [150] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  b24_from_b24:
  //SEG248 [150] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp b24
  //SEG249 gfx_mode::@24
  b24:
  //SEG250 [151] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG251 [152] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG252 [153] if((byte) gfx_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@24 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b24_from_b24
    jmp b25
}
//SEG253 keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    .label return = $d
    .label return_3 = $f1
    .label return_4 = $119
  //SEG254 [154] if((byte) keyboard_events_size#100==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b1
  //SEG255 keyboard_event_get::@1
  b1:
  //SEG256 [155] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG257 [156] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy keyboard_events_size
    lda keyboard_events,y
    sta return
  //SEG258 [157] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  breturn_from_b1:
  //SEG259 [157] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
  //SEG260 [157] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG261 [157] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
  //SEG262 [157] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG263 [157] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta return
    jmp breturn
  //SEG264 keyboard_event_get::@return
  breturn:
  //SEG265 [158] return 
    rts
}
//SEG266 keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label _0 = $f7
    .label _3 = $f9
    .label _6 = $fb
    .label _9 = $fd
    .label _15 = $fe
    .label _16 = $ff
    .label _23 = $101
    .label row_scan = $f5
    .label keycode = $11
    .label row = $e
    .label col = $10
    .label event_type = $100
  //SEG267 [160] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  b7_from_keyboard_event_scan:
  //SEG268 [160] phi (byte) keyboard_events_size#119 = (byte) keyboard_events_size#110 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
  //SEG269 [160] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG270 [160] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta row
    jmp b7
  //SEG271 [160] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  b7_from_b8:
  //SEG272 [160] phi (byte) keyboard_events_size#119 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
  //SEG273 [160] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
  //SEG274 [160] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp b7
  //SEG275 keyboard_event_scan::@7
  b7:
  //SEG276 [161] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda row
    sta keyboard_matrix_read.rowid
  //SEG277 [162] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG278 [163] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return
    sta keyboard_matrix_read.return_2
    jmp b19
  //SEG279 keyboard_event_scan::@19
  b19:
  //SEG280 [164] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return_2
    sta row_scan
  //SEG281 [165] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda row_scan
    ldy row
    cmp keyboard_scan_values,y
    bne b9_from_b19
    jmp b16
  //SEG282 keyboard_event_scan::@16
  b16:
  //SEG283 [166] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax keycode
    axs #-[8]
    stx keycode
  //SEG284 [167] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  b8_from_b15:
  b8_from_b16:
  //SEG285 [167] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#118 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
  //SEG286 [167] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp b8
  //SEG287 keyboard_event_scan::@8
  b8:
  //SEG288 [168] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG289 [169] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp row
    bne b7_from_b8
  //SEG290 [170] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  b17_from_b8:
    jmp b17
  //SEG291 keyboard_event_scan::@17
  b17:
  //SEG292 [171] call keyboard_event_pressed 
  //SEG293 [213] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from_b17:
  //SEG294 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG295 [172] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_10
    sta keyboard_event_pressed.return
    jmp b20
  //SEG296 keyboard_event_scan::@20
  b20:
  //SEG297 [173] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return
    sta _0
  //SEG298 [174] if((byte~) keyboard_event_scan::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@1 -- vbuz1_eq_0_then_la1 
    lda _0
    cmp #0
    beq b1_from_b20
  //SEG299 [175] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  b18_from_b20:
    jmp b18
  //SEG300 keyboard_event_scan::@18
  b18:
  //SEG301 [176] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  b1_from_b18:
  //SEG302 [176] phi (byte) keyboard_modifiers#18 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuz1=vbuc1 
    lda #0|KEY_MODIFIER_LSHIFT
    sta keyboard_modifiers
    jmp b1
  //SEG303 [176] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  b1_from_b20:
  //SEG304 [176] phi (byte) keyboard_modifiers#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_modifiers
    jmp b1
  //SEG305 keyboard_event_scan::@1
  b1:
  //SEG306 [177] call keyboard_event_pressed 
  //SEG307 [213] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
  //SEG308 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG309 [178] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_10
    sta keyboard_event_pressed.return_1
    jmp b21
  //SEG310 keyboard_event_scan::@21
  b21:
  //SEG311 [179] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_1
    sta _3
  //SEG312 [180] if((byte~) keyboard_event_scan::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@2 -- vbuz1_eq_0_then_la1 
    lda _3
    cmp #0
    beq b2_from_b21
    jmp b4
  //SEG313 keyboard_event_scan::@4
  b4:
  //SEG314 [181] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_RSHIFT
    ora keyboard_modifiers
    sta keyboard_modifiers
  //SEG315 [182] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  b2_from_b21:
  b2_from_b4:
  //SEG316 [182] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp b2
  //SEG317 keyboard_event_scan::@2
  b2:
  //SEG318 [183] call keyboard_event_pressed 
  //SEG319 [213] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from_b2:
  //SEG320 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG321 [184] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_10
    sta keyboard_event_pressed.return_2
    jmp b22
  //SEG322 keyboard_event_scan::@22
  b22:
  //SEG323 [185] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_2
    sta _6
  //SEG324 [186] if((byte~) keyboard_event_scan::$6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@3 -- vbuz1_eq_0_then_la1 
    lda _6
    cmp #0
    beq b3_from_b22
    jmp b5
  //SEG325 keyboard_event_scan::@5
  b5:
  //SEG326 [187] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_CTRL
    ora keyboard_modifiers
    sta keyboard_modifiers
  //SEG327 [188] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  b3_from_b22:
  b3_from_b5:
  //SEG328 [188] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp b3
  //SEG329 keyboard_event_scan::@3
  b3:
  //SEG330 [189] call keyboard_event_pressed 
  //SEG331 [213] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from_b3:
  //SEG332 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG333 [190] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_10
    sta keyboard_event_pressed.return_3
    jmp b23
  //SEG334 keyboard_event_scan::@23
  b23:
  //SEG335 [191] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_3
    sta _9
  //SEG336 [192] if((byte~) keyboard_event_scan::$9==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda _9
    cmp #0
    beq breturn_from_b23
    jmp b6
  //SEG337 keyboard_event_scan::@6
  b6:
  //SEG338 [193] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_COMMODORE
    ora keyboard_modifiers
    sta keyboard_modifiers
  //SEG339 [194] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  breturn_from_b23:
  breturn_from_b6:
  //SEG340 [194] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp breturn
  //SEG341 keyboard_event_scan::@return
  breturn:
  //SEG342 [195] return 
    rts
  // Something has changed on the keyboard row - check each column
  //SEG343 [196] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  b9_from_b10:
  //SEG344 [196] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#118 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
  //SEG345 [196] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
  //SEG346 [196] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp b9
  //SEG347 [196] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b9_from_b19:
  //SEG348 [196] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#119 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
  //SEG349 [196] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
  //SEG350 [196] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuz1=vbuc1 
    lda #0
    sta col
    jmp b9
  //SEG351 keyboard_event_scan::@9
  b9:
  //SEG352 [197] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
    sta _15
  //SEG353 [198] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda _15
    ldy col
    and keyboard_matrix_col_bitmask,y
    sta _16
  //SEG354 [199] if((byte~) keyboard_event_scan::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda _16
    cmp #0
    beq b10_from_b9
    jmp b12
  //SEG355 keyboard_event_scan::@12
  b12:
  //SEG356 [200] if((byte) keyboard_events_size#18==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp keyboard_events_size
    beq b10_from_b12
    jmp b13
  //SEG357 keyboard_event_scan::@13
  b13:
  //SEG358 [201] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda row_scan
    ldy col
    and keyboard_matrix_col_bitmask,y
    sta event_type
  //SEG359 [202] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda event_type
    cmp #0
    beq b11
    jmp b14
  //SEG360 keyboard_event_scan::@14
  b14:
  //SEG361 [203] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG362 [204] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG363 [205] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  b10_from_b11:
  b10_from_b12:
  b10_from_b14:
  b10_from_b9:
  //SEG364 [205] phi (byte) keyboard_events_size#118 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp b10
  //SEG365 keyboard_event_scan::@10
  b10:
  //SEG366 [206] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG367 [207] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG368 [208] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp col
    bne b9_from_b10
    jmp b15
  //SEG369 keyboard_event_scan::@15
  b15:
  //SEG370 [209] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b8_from_b15
  //SEG371 keyboard_event_scan::@11
  b11:
  //SEG372 [210] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora keycode
    sta _23
  //SEG373 [211] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte/word/dword~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key released
    lda _23
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG374 [212] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b10_from_b11
}
//SEG375 keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($13) keycode)
keyboard_event_pressed: {
    .label _0 = $102
    .label _1 = $104
    .label return = $f6
    .label return_1 = $f8
    .label return_2 = $fa
    .label return_3 = $fc
    .label row_bits = $103
    .label keycode = $13
    .label return_10 = $105
  //SEG376 [214] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_ror_3 
    lda keycode
    lsr
    lsr
    lsr
    sta _0
  //SEG377 [215] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda keyboard_scan_values,y
    sta row_bits
  //SEG378 [216] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and keycode
    sta _1
  //SEG379 [217] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda row_bits
    ldy _1
    and keyboard_matrix_col_bitmask,y
    sta return_10
    jmp breturn
  //SEG380 keyboard_event_pressed::@return
  breturn:
  //SEG381 [218] return 
    rts
}
//SEG382 keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte zeropage($f3) rowid)
keyboard_matrix_read: {
    .label return = $106
    .label rowid = $f3
    .label return_2 = $f4
  //SEG383 [219] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG384 [220] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta return
    jmp breturn
  //SEG385 keyboard_matrix_read::@return
  breturn:
  //SEG386 [221] return 
    rts
}
//SEG387 get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte zeropage($14) idx)
get_vic_screen: {
    .label return = $15
    .label idx = $14
    .label return_10 = $d4
    .label return_11 = $e7
  //SEG388 [223] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_screen::@return -- vbuz1_eq_0_then_la1 
    lda idx
    cmp #0
    beq breturn_from_get_vic_screen
    jmp b2
  //SEG389 get_vic_screen::@2
  b2:
  //SEG390 [224] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp idx
    beq breturn_from_b2
    jmp b3
  //SEG391 get_vic_screen::@3
  b3:
  //SEG392 [225] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp idx
    beq breturn_from_b3
    jmp b4
  //SEG393 get_vic_screen::@4
  b4:
  //SEG394 [226] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp idx
    beq breturn_from_b4
    jmp b5
  //SEG395 get_vic_screen::@5
  b5:
  //SEG396 [227] if((byte) get_vic_screen::idx#2!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_vic_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp idx
    bne b1_from_b5
  //SEG397 [228] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  breturn_from_b5:
  //SEG398 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN4#0 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta return
    lda #>VIC_SCREEN4
    sta return+1
    jmp breturn
  //SEG399 [228] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  breturn_from_get_vic_screen:
  breturn_from_b1:
  //SEG400 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN0#0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta return
    lda #>VIC_SCREEN0
    sta return+1
    jmp breturn
  //SEG401 [228] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  breturn_from_b2:
  //SEG402 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN1#0 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta return
    lda #>VIC_SCREEN1
    sta return+1
    jmp breturn
  //SEG403 [228] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  breturn_from_b3:
  //SEG404 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN2#0 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta return
    lda #>VIC_SCREEN2
    sta return+1
    jmp breturn
  //SEG405 [228] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  breturn_from_b4:
  //SEG406 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN3#0 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta return
    lda #>VIC_SCREEN3
    sta return+1
    jmp breturn
  //SEG407 get_vic_screen::@return
  breturn:
  //SEG408 [229] return 
    rts
  //SEG409 [230] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  b1_from_b5:
    jmp b1
  //SEG410 get_vic_screen::@1
  b1:
    jmp breturn_from_b1
}
//SEG411 get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte zeropage($dd) idx)
get_vic_charset: {
    .label return = $17
    .label idx = $dd
    .label return_4 = $de
  //SEG412 [231] if((byte) get_vic_charset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_charset::@return -- vbuz1_eq_0_then_la1 
    lda idx
    cmp #0
    beq breturn_from_get_vic_charset
    jmp b2
  //SEG413 get_vic_charset::@2
  b2:
  //SEG414 [232] if((byte) get_vic_charset::idx#0!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_charset::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp idx
    bne b1_from_b2
  //SEG415 [233] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  breturn_from_b2:
  //SEG416 [233] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_BITMAP#0 [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta return
    lda #>VIC_BITMAP
    sta return+1
    jmp breturn
  //SEG417 [233] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  breturn_from_get_vic_charset:
  breturn_from_b1:
  //SEG418 [233] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_CHARSET_ROM#0 [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta return
    lda #>VIC_CHARSET_ROM
    sta return+1
    jmp breturn
  //SEG419 get_vic_charset::@return
  breturn:
  //SEG420 [234] return 
    rts
  //SEG421 [235] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  b1_from_b2:
    jmp b1
  //SEG422 get_vic_charset::@1
  b1:
    jmp breturn_from_b1
}
//SEG423 get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte zeropage($19) idx)
get_plane: {
    .label return = $1a
    .label idx = $19
    .label return_16 = $a0
    .label return_17 = $bb
  //SEG424 [237] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_plane::@return -- vbuz1_eq_0_then_la1 
    lda idx
    cmp #0
    beq breturn_from_get_plane
    jmp b2
  //SEG425 get_plane::@2
  b2:
  //SEG426 [238] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp idx
    beq breturn_from_b2
    jmp b3
  //SEG427 get_plane::@3
  b3:
  //SEG428 [239] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp idx
    beq breturn_from_b3
    jmp b4
  //SEG429 get_plane::@4
  b4:
  //SEG430 [240] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp idx
    beq breturn_from_b4
    jmp b5
  //SEG431 get_plane::@5
  b5:
  //SEG432 [241] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp idx
    beq breturn_from_b5
    jmp b6
  //SEG433 get_plane::@6
  b6:
  //SEG434 [242] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp idx
    beq breturn_from_b6
    jmp b7
  //SEG435 get_plane::@7
  b7:
  //SEG436 [243] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp idx
    beq breturn_from_b7
    jmp b8
  //SEG437 get_plane::@8
  b8:
  //SEG438 [244] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp idx
    beq breturn_from_b8
    jmp b9
  //SEG439 get_plane::@9
  b9:
  //SEG440 [245] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp idx
    beq breturn_from_b9
    jmp b10
  //SEG441 get_plane::@10
  b10:
  //SEG442 [246] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp idx
    beq breturn_from_b10
    jmp b11
  //SEG443 get_plane::@11
  b11:
  //SEG444 [247] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp idx
    beq breturn_from_b11
    jmp b12
  //SEG445 get_plane::@12
  b12:
  //SEG446 [248] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $b) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$b
    cmp idx
    beq breturn_from_b12
    jmp b13
  //SEG447 get_plane::@13
  b13:
  //SEG448 [249] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $c) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$c
    cmp idx
    beq breturn_from_b13
    jmp b14
  //SEG449 get_plane::@14
  b14:
  //SEG450 [250] if((byte) get_plane::idx#10!=(byte/signed byte/word/signed word/dword/signed dword) $d) goto get_plane::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp idx
    bne b1_from_b14
  //SEG451 [251] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  breturn_from_b14:
  //SEG452 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_FULL#0 [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta return
    lda #>PLANE_FULL
    sta return+1
    lda #<PLANE_FULL>>$10
    sta return+2
    lda #>PLANE_FULL>>$10
    sta return+3
    jmp breturn
  //SEG453 [251] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
  breturn_from_get_plane:
  breturn_from_b1:
  //SEG454 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN0#0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN0
    sta return
    lda #>$ffffffff&VIC_SCREEN0
    sta return+1
    lda #<$ffffffff&VIC_SCREEN0>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN0>>$10
    sta return+3
    jmp breturn
  //SEG455 [251] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  breturn_from_b10:
  //SEG456 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_HORISONTAL2#0 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta return
    lda #>PLANE_HORISONTAL2
    sta return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta return+3
    jmp breturn
  //SEG457 [251] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  breturn_from_b11:
  //SEG458 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_VERTICAL2#0 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta return
    lda #>PLANE_VERTICAL2
    sta return+1
    lda #<PLANE_VERTICAL2>>$10
    sta return+2
    lda #>PLANE_VERTICAL2>>$10
    sta return+3
    jmp breturn
  //SEG459 [251] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  breturn_from_b12:
  //SEG460 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_CHARSET8#0 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta return
    lda #>PLANE_CHARSET8
    sta return+1
    lda #<PLANE_CHARSET8>>$10
    sta return+2
    lda #>PLANE_CHARSET8>>$10
    sta return+3
    jmp breturn
  //SEG461 [251] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  breturn_from_b13:
  //SEG462 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_BLANK#0 [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta return
    lda #>PLANE_BLANK
    sta return+1
    lda #<PLANE_BLANK>>$10
    sta return+2
    lda #>PLANE_BLANK>>$10
    sta return+3
    jmp breturn
  //SEG463 [251] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  breturn_from_b2:
  //SEG464 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN1#0 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN1
    sta return
    lda #>$ffffffff&VIC_SCREEN1
    sta return+1
    lda #<$ffffffff&VIC_SCREEN1>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN1>>$10
    sta return+3
    jmp breturn
  //SEG465 [251] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  breturn_from_b3:
  //SEG466 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN2#0 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN2
    sta return
    lda #>$ffffffff&VIC_SCREEN2
    sta return+1
    lda #<$ffffffff&VIC_SCREEN2>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN2>>$10
    sta return+3
    jmp breturn
  //SEG467 [251] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  breturn_from_b4:
  //SEG468 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN3#0 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN3
    sta return
    lda #>$ffffffff&VIC_SCREEN3
    sta return+1
    lda #<$ffffffff&VIC_SCREEN3>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN3>>$10
    sta return+3
    jmp breturn
  //SEG469 [251] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  breturn_from_b5:
  //SEG470 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_BITMAP#0 [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_BITMAP
    sta return
    lda #>$ffffffff&VIC_BITMAP
    sta return+1
    lda #<$ffffffff&VIC_BITMAP>>$10
    sta return+2
    lda #>$ffffffff&VIC_BITMAP>>$10
    sta return+3
    jmp breturn
  //SEG471 [251] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  breturn_from_b6:
  //SEG472 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_CHARSET_ROM#0 [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_CHARSET_ROM
    sta return
    lda #>$ffffffff&VIC_CHARSET_ROM
    sta return+1
    lda #<$ffffffff&VIC_CHARSET_ROM>>$10
    sta return+2
    lda #>$ffffffff&VIC_CHARSET_ROM>>$10
    sta return+3
    jmp breturn
  //SEG473 [251] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  breturn_from_b7:
  //SEG474 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_8BPP_CHUNKY#0 [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta return
    lda #>PLANE_8BPP_CHUNKY
    sta return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta return+3
    jmp breturn
  //SEG475 [251] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  breturn_from_b8:
  //SEG476 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_HORISONTAL#0 [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta return
    lda #>PLANE_HORISONTAL
    sta return+1
    lda #<PLANE_HORISONTAL>>$10
    sta return+2
    lda #>PLANE_HORISONTAL>>$10
    sta return+3
    jmp breturn
  //SEG477 [251] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  breturn_from_b9:
  //SEG478 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_VERTICAL#0 [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta return
    lda #>PLANE_VERTICAL
    sta return+1
    lda #<PLANE_VERTICAL>>$10
    sta return+2
    lda #>PLANE_VERTICAL>>$10
    sta return+3
    jmp breturn
  //SEG479 get_plane::@return
  breturn:
  //SEG480 [252] return 
    rts
  //SEG481 [253] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  b1_from_b14:
    jmp b1
  //SEG482 get_plane::@1
  b1:
    jmp breturn_from_b1
}
//SEG483 form_mode
// Show the form - and let the user change values
form_mode: {
    .label _36 = $108
    .label i = $1e
    .label preset_current = $21
  //SEG484 [255] call print_set_screen 
  //SEG485 [447] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
  //SEG486 [447] phi (byte*) print_set_screen::screen#2 = (const byte*) COLS#0 [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta print_set_screen.screen
    lda #>COLS
    sta print_set_screen.screen+1
    jsr print_set_screen
  //SEG487 [256] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  b8_from_form_mode:
    jmp b8
  //SEG488 form_mode::@8
  b8:
  //SEG489 [257] call print_cls 
    jsr print_cls
  //SEG490 [258] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  b9_from_b8:
    jmp b9
  //SEG491 form_mode::@9
  b9:
  //SEG492 [259] call print_str_lines 
  //SEG493 [419] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from_b9:
  //SEG494 [419] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_COLS#0 [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta print_str_lines.str
    lda #>FORM_COLS
    sta print_str_lines.str+1
    jsr print_str_lines
  //SEG495 [260] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  b10_from_b9:
    jmp b10
  //SEG496 form_mode::@10
  b10:
  //SEG497 [261] call print_set_screen 
  //SEG498 [447] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from_b10:
  //SEG499 [447] phi (byte*) print_set_screen::screen#2 = (const byte*) FORM_SCREEN#0 [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta print_set_screen.screen
    lda #>FORM_SCREEN
    sta print_set_screen.screen+1
    jsr print_set_screen
  //SEG500 [262] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  b11_from_b10:
    jmp b11
  //SEG501 form_mode::@11
  b11:
  //SEG502 [263] call print_cls 
    jsr print_cls
  //SEG503 [264] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  b12_from_b11:
    jmp b12
  //SEG504 form_mode::@12
  b12:
  //SEG505 [265] call print_str_lines 
  //SEG506 [419] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from_b12:
  //SEG507 [419] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_TEXT#0 [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta print_str_lines.str
    lda #>FORM_TEXT
    sta print_str_lines.str+1
    jsr print_str_lines
  //SEG508 [266] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  b13_from_b12:
    jmp b13
  //SEG509 form_mode::@13
  b13:
  //SEG510 [267] call form_set_screen 
  //SEG511 [409] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from_b13:
    jsr form_set_screen
  //SEG512 [268] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  b14_from_b13:
    jmp b14
  //SEG513 form_mode::@14
  b14:
  //SEG514 [269] call form_render_values 
  //SEG515 [330] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from_b14:
    jsr form_render_values
    jmp b15
  //SEG516 form_mode::@15
  b15:
  //SEG517 [270] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta render_preset_name.idx
  //SEG518 [271] call render_preset_name 
  //SEG519 [306] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from_b15:
  //SEG520 [306] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp b16
  //SEG521 form_mode::@16
  b16:
  //SEG522 [272] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&FORM_CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG523 [273] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG524 [274] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG525 [275] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG526 [276] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^FORM_CHARSET/$4000
    sta CIA2_PORT_A
  //SEG527 [277] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
  //SEG528 [278] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG529 [279] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG530 [280] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG531 [281] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) FORM_SCREEN#0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #<FORM_SCREEN
    sta DTV_PLANEA_START_LO
  //SEG532 [282] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) FORM_SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
  //SEG533 [283] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG534 [284] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  b1_from_b16:
  //SEG535 [284] phi (byte) form_mode::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // DTV Palette - default
  //SEG536 [284] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  b1_from_b1:
  //SEG537 [284] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp b1
  //SEG538 form_mode::@1
  b1:
  //SEG539 [285] *((const byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
  //SEG540 [286] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG541 [287] if((byte) form_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto form_mode::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b1_from_b1
    jmp b2
  //SEG542 form_mode::@2
  b2:
  //SEG543 [288] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG544 [289] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG545 [290] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta preset_current
  //SEG546 [291] phi from form_mode::@19 form_mode::@2 to form_mode::@3 [phi:form_mode::@19/form_mode::@2->form_mode::@3]
  b3_from_b19:
  b3_from_b2:
  //SEG547 [291] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2->form_mode::@3#0] -- register_copy 
  //SEG548 [291] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2->form_mode::@3#1] -- register_copy 
  //SEG549 [291] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2->form_mode::@3#2] -- register_copy 
  //SEG550 [291] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2->form_mode::@3#3] -- register_copy 
    jmp b3
  // Let the user change values in the form
  //SEG551 [291] phi from form_mode::@6 to form_mode::@3 [phi:form_mode::@6->form_mode::@3]
  b3_from_b6:
  //SEG552 [291] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@6->form_mode::@3#0] -- register_copy 
  //SEG553 [291] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@6->form_mode::@3#1] -- register_copy 
  //SEG554 [291] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@6->form_mode::@3#2] -- register_copy 
    jmp b3
  //SEG555 form_mode::@3
  b3:
    jmp b4
  //SEG556 form_mode::@4
  b4:
  //SEG557 [292] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b4
  //SEG558 [293] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  b5_from_b4:
    jmp b5
  //SEG559 form_mode::@5
  b5:
  //SEG560 [294] call form_control 
    jsr form_control
  //SEG561 [295] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuz1=vbuz2 
    lda form_control.return_2
    sta form_control.return
    jmp b17
  //SEG562 form_mode::@17
  b17:
  //SEG563 [296] (byte~) form_mode::$36 ← (byte) form_control::return#0 -- vbuz1=vbuz2 
    lda form_control.return
    sta _36
  //SEG564 [297] if((byte~) form_mode::$36==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_mode::@6 -- vbuz1_eq_0_then_la1 
    lda _36
    cmp #0
    beq b6
    jmp breturn
  //SEG565 form_mode::@return
  breturn:
  //SEG566 [298] return 
    rts
  //SEG567 form_mode::@6
  b6:
  //SEG568 [299] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val#0)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp preset_current
    beq b3_from_b6
    jmp b7
  //SEG569 form_mode::@7
  b7:
  //SEG570 [300] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta apply_preset.idx
  //SEG571 [301] call apply_preset 
    jsr apply_preset
    jmp b18
  //SEG572 form_mode::@18
  b18:
  //SEG573 [302] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta preset_current
  //SEG574 [303] call form_render_values 
  //SEG575 [330] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from_b18:
    jsr form_render_values
    jmp b19
  //SEG576 form_mode::@19
  b19:
  //SEG577 [304] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta render_preset_name.idx
  //SEG578 [305] call render_preset_name 
  //SEG579 [306] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from_b19:
  //SEG580 [306] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp b3_from_b19
}
//SEG581 render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte zeropage($22) idx)
render_preset_name: {
    .label idx = $22
    .label name = $23
  //SEG582 [307] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_preset_name::@1 -- vbuz1_eq_0_then_la1 
    lda idx
    cmp #0
    beq b1_from_render_preset_name
    jmp b2
  //SEG583 render_preset_name::@2
  b2:
  //SEG584 [308] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp idx
    beq b1_from_b2
    jmp b3
  //SEG585 render_preset_name::@3
  b3:
  //SEG586 [309] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp idx
    beq b1_from_b3
    jmp b4
  //SEG587 render_preset_name::@4
  b4:
  //SEG588 [310] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp idx
    beq b1_from_b4
    jmp b5
  //SEG589 render_preset_name::@5
  b5:
  //SEG590 [311] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp idx
    beq b1_from_b5
    jmp b6
  //SEG591 render_preset_name::@6
  b6:
  //SEG592 [312] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp idx
    beq b1_from_b6
    jmp b7
  //SEG593 render_preset_name::@7
  b7:
  //SEG594 [313] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp idx
    beq b1_from_b7
    jmp b8
  //SEG595 render_preset_name::@8
  b8:
  //SEG596 [314] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp idx
    beq b1_from_b8
    jmp b9
  //SEG597 render_preset_name::@9
  b9:
  //SEG598 [315] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp idx
    beq b1_from_b9
    jmp b10
  //SEG599 render_preset_name::@10
  b10:
  //SEG600 [316] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp idx
    beq b1_from_b10
    jmp b11
  //SEG601 render_preset_name::@11
  b11:
  //SEG602 [317] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp idx
    beq b1_from_b11
  //SEG603 [318] phi from render_preset_name::@11 to render_preset_name::@12 [phi:render_preset_name::@11->render_preset_name::@12]
  b12_from_b11:
    jmp b12
  //SEG604 render_preset_name::@12
  b12:
  //SEG605 [319] phi from render_preset_name render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@1]
  b1_from_render_preset_name:
  b1_from_b12:
  //SEG606 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta name
    lda #>name_1
    sta name+1
    jmp b1
  //SEG607 [319] phi from render_preset_name::@10 to render_preset_name::@1 [phi:render_preset_name::@10->render_preset_name::@1]
  b1_from_b10:
  //SEG608 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@10->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta name
    lda #>name_10
    sta name+1
    jmp b1
  //SEG609 [319] phi from render_preset_name::@11 to render_preset_name::@1 [phi:render_preset_name::@11->render_preset_name::@1]
  b1_from_b11:
  //SEG610 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@11->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta name
    lda #>name_11
    sta name+1
    jmp b1
  //SEG611 [319] phi from render_preset_name::@2 to render_preset_name::@1 [phi:render_preset_name::@2->render_preset_name::@1]
  b1_from_b2:
  //SEG612 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@2->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta name
    lda #>name_2
    sta name+1
    jmp b1
  //SEG613 [319] phi from render_preset_name::@3 to render_preset_name::@1 [phi:render_preset_name::@3->render_preset_name::@1]
  b1_from_b3:
  //SEG614 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@3->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta name
    lda #>name_3
    sta name+1
    jmp b1
  //SEG615 [319] phi from render_preset_name::@4 to render_preset_name::@1 [phi:render_preset_name::@4->render_preset_name::@1]
  b1_from_b4:
  //SEG616 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@4->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta name
    lda #>name_4
    sta name+1
    jmp b1
  //SEG617 [319] phi from render_preset_name::@5 to render_preset_name::@1 [phi:render_preset_name::@5->render_preset_name::@1]
  b1_from_b5:
  //SEG618 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@5->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta name
    lda #>name_5
    sta name+1
    jmp b1
  //SEG619 [319] phi from render_preset_name::@6 to render_preset_name::@1 [phi:render_preset_name::@6->render_preset_name::@1]
  b1_from_b6:
  //SEG620 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@6->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta name
    lda #>name_6
    sta name+1
    jmp b1
  //SEG621 [319] phi from render_preset_name::@7 to render_preset_name::@1 [phi:render_preset_name::@7->render_preset_name::@1]
  b1_from_b7:
  //SEG622 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@7->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta name
    lda #>name_7
    sta name+1
    jmp b1
  //SEG623 [319] phi from render_preset_name::@8 to render_preset_name::@1 [phi:render_preset_name::@8->render_preset_name::@1]
  b1_from_b8:
  //SEG624 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@8->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta name
    lda #>name_8
    sta name+1
    jmp b1
  //SEG625 [319] phi from render_preset_name::@9 to render_preset_name::@1 [phi:render_preset_name::@9->render_preset_name::@1]
  b1_from_b9:
  //SEG626 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@9->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta name
    lda #>name_9
    sta name+1
    jmp b1
  //SEG627 render_preset_name::@1
  b1:
  //SEG628 [320] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 -- pbuz1=pbuz2 
    lda name
    sta print_str_at.str
    lda name+1
    sta print_str_at.str+1
  //SEG629 [321] call print_str_at 
  //SEG630 [323] phi from render_preset_name::@1 to print_str_at [phi:render_preset_name::@1->print_str_at]
  print_str_at_from_b1:
    jsr print_str_at
    jmp breturn
  //SEG631 render_preset_name::@return
  breturn:
  //SEG632 [322] return 
    rts
    name_1: .text "Standard Charset              @"
    name_2: .text "Extended Color Charset        @"
    name_3: .text "Standard Bitmap               @"
    name_4: .text "Multicolor Bitmap             @"
    name_5: .text "Hicolor Charset               @"
    name_6: .text "Hicolor Extended Color Charset@"
    name_7: .text "Twoplane Bitmap               @"
    name_8: .text "Chunky 8bpp                   @"
    name_9: .text "Sixs Fred                     @"
    name_10: .text "Sixs Fred 2                   @"
    name_11: .text "8bpp Pixel Cell               @"
}
//SEG633 print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zeropage($25) str, byte* zeropage($27) at)
print_str_at: {
    .label at = $27
    .label str = $25
  //SEG634 [324] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  b1_from_print_str_at:
  //SEG635 [324] phi (byte*) print_str_at::at#2 = (const byte*) FORM_SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta at
    lda #>FORM_SCREEN+$28*2+$a
    sta at+1
  //SEG636 [324] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp b1
  //SEG637 print_str_at::@1
  b1:
  //SEG638 [325] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG639 print_str_at::@return
  breturn:
  //SEG640 [326] return 
    rts
  //SEG641 print_str_at::@2
  b2:
  //SEG642 [327] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
  //SEG643 [328] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc at
    bne !+
    inc at+1
  !:
  //SEG644 [329] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG645 [324] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  b1_from_b2:
  //SEG646 [324] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
  //SEG647 [324] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp b1
}
//SEG648 form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    .label field = $10c
    .label idx = $29
  //SEG649 [331] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  b1_from_form_render_values:
  //SEG650 [331] phi (byte) form_render_values::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
    jmp b1
  //SEG651 [331] phi from form_render_values::@2 to form_render_values::@1 [phi:form_render_values::@2->form_render_values::@1]
  b1_from_b2:
  //SEG652 [331] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@2->form_render_values::@1#0] -- register_copy 
    jmp b1
  //SEG653 form_render_values::@1
  b1:
  //SEG654 [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2 -- vbuz1=vbuz2 
    lda idx
    sta form_field_ptr.field_idx
  //SEG655 [333] call form_field_ptr 
  //SEG656 [340] phi from form_render_values::@1 to form_field_ptr [phi:form_render_values::@1->form_field_ptr]
  form_field_ptr_from_b1:
  //SEG657 [340] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@1->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
  //SEG658 [334] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0 -- pbuz1=pbuz2 
    lda form_field_ptr.return
    sta form_field_ptr.return_2
    lda form_field_ptr.return+1
    sta form_field_ptr.return_2+1
    jmp b2
  //SEG659 form_render_values::@2
  b2:
  //SEG660 [335] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2 -- pbuz1=pbuz2 
    lda form_field_ptr.return_2
    sta field
    lda form_field_ptr.return_2+1
    sta field+1
  //SEG661 [336] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_render_values::idx#2)) -- _deref_pbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    ldx idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
  //SEG662 [337] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuz1=_inc_vbuz1 
    inc idx
  //SEG663 [338] if((byte) form_render_values::idx#1<(const byte) form_fields_cnt#0) goto form_render_values::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda idx
    cmp #form_fields_cnt
    bcc b1_from_b2
    jmp breturn
  //SEG664 form_render_values::@return
  breturn:
  //SEG665 [339] return 
    rts
}
//SEG666 form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte zeropage($2a) field_idx)
form_field_ptr: {
    .label y = $10e
    .label x = $111
    .label return = $112
    .label field_idx = $2a
    .label return_2 = $10a
    .label return_3 = $114
    .label _2 = $10f
  //SEG667 [341] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y#0 + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy field_idx
    lda form_fields_y,y
    sta y
  //SEG668 [342] (word~) form_field_ptr::$2 ← *((const byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy y
    lda form_line_hi,y
    sta _2+1
    lda form_line_lo,y
    sta _2
  //SEG669 [343] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x#0 + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy field_idx
    lda form_fields_x,y
    sta x
  //SEG670 [344] (byte*) form_field_ptr::return#0 ← (byte*)(word~) form_field_ptr::$2 + (byte) form_field_ptr::x#0 -- pbuz1=pbuz2_plus_vbuz3 
    lda x
    clc
    adc _2
    sta return
    lda #0
    adc _2+1
    sta return+1
    jmp breturn
  //SEG671 form_field_ptr::@return
  breturn:
  //SEG672 [345] return 
    rts
}
//SEG673 apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte zeropage($109) idx)
apply_preset: {
    .label i = $2d
    .label idx = $109
    .label preset = $2b
  //SEG674 [346] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto apply_preset::@1 -- vbuz1_eq_0_then_la1 
    lda idx
    cmp #0
    beq b1_from_apply_preset
    jmp b2
  //SEG675 apply_preset::@2
  b2:
  //SEG676 [347] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 1) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp idx
    beq b1_from_b2
    jmp b3
  //SEG677 apply_preset::@3
  b3:
  //SEG678 [348] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 2) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp idx
    beq b1_from_b3
    jmp b4
  //SEG679 apply_preset::@4
  b4:
  //SEG680 [349] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 3) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp idx
    beq b1_from_b4
    jmp b5
  //SEG681 apply_preset::@5
  b5:
  //SEG682 [350] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 4) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp idx
    beq b1_from_b5
    jmp b6
  //SEG683 apply_preset::@6
  b6:
  //SEG684 [351] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 5) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp idx
    beq b1_from_b6
    jmp b7
  //SEG685 apply_preset::@7
  b7:
  //SEG686 [352] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 6) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp idx
    beq b1_from_b7
    jmp b8
  //SEG687 apply_preset::@8
  b8:
  //SEG688 [353] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 7) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp idx
    beq b1_from_b8
    jmp b9
  //SEG689 apply_preset::@9
  b9:
  //SEG690 [354] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 8) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp idx
    beq b1_from_b9
    jmp b10
  //SEG691 apply_preset::@10
  b10:
  //SEG692 [355] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 9) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp idx
    beq b1_from_b10
    jmp b11
  //SEG693 apply_preset::@11
  b11:
  //SEG694 [356] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) $a) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp idx
    beq b1_from_b11
  //SEG695 [357] phi from apply_preset::@11 to apply_preset::@12 [phi:apply_preset::@11->apply_preset::@12]
  b12_from_b11:
    jmp b12
  //SEG696 apply_preset::@12
  b12:
  //SEG697 [358] phi from apply_preset apply_preset::@12 to apply_preset::@1 [phi:apply_preset/apply_preset::@12->apply_preset::@1]
  b1_from_apply_preset:
  b1_from_b12:
  //SEG698 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_stdchar#0 [phi:apply_preset/apply_preset::@12->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta preset
    lda #>preset_stdchar
    sta preset+1
    jmp b1
  //SEG699 [358] phi from apply_preset::@10 to apply_preset::@1 [phi:apply_preset::@10->apply_preset::@1]
  b1_from_b10:
  //SEG700 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_sixsfred2#0 [phi:apply_preset::@10->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta preset
    lda #>preset_sixsfred2
    sta preset+1
    jmp b1
  //SEG701 [358] phi from apply_preset::@11 to apply_preset::@1 [phi:apply_preset::@11->apply_preset::@1]
  b1_from_b11:
  //SEG702 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_8bpppixelcell#0 [phi:apply_preset::@11->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta preset
    lda #>preset_8bpppixelcell
    sta preset+1
    jmp b1
  //SEG703 [358] phi from apply_preset::@2 to apply_preset::@1 [phi:apply_preset::@2->apply_preset::@1]
  b1_from_b2:
  //SEG704 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_ecmchar#0 [phi:apply_preset::@2->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta preset
    lda #>preset_ecmchar
    sta preset+1
    jmp b1
  //SEG705 [358] phi from apply_preset::@3 to apply_preset::@1 [phi:apply_preset::@3->apply_preset::@1]
  b1_from_b3:
  //SEG706 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_stdbm#0 [phi:apply_preset::@3->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta preset
    lda #>preset_stdbm
    sta preset+1
    jmp b1
  //SEG707 [358] phi from apply_preset::@4 to apply_preset::@1 [phi:apply_preset::@4->apply_preset::@1]
  b1_from_b4:
  //SEG708 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_mcbm#0 [phi:apply_preset::@4->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta preset
    lda #>preset_mcbm
    sta preset+1
    jmp b1
  //SEG709 [358] phi from apply_preset::@5 to apply_preset::@1 [phi:apply_preset::@5->apply_preset::@1]
  b1_from_b5:
  //SEG710 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_hi_stdchar#0 [phi:apply_preset::@5->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta preset
    lda #>preset_hi_stdchar
    sta preset+1
    jmp b1
  //SEG711 [358] phi from apply_preset::@6 to apply_preset::@1 [phi:apply_preset::@6->apply_preset::@1]
  b1_from_b6:
  //SEG712 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_hi_ecmchar#0 [phi:apply_preset::@6->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta preset
    lda #>preset_hi_ecmchar
    sta preset+1
    jmp b1
  //SEG713 [358] phi from apply_preset::@7 to apply_preset::@1 [phi:apply_preset::@7->apply_preset::@1]
  b1_from_b7:
  //SEG714 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_twoplane#0 [phi:apply_preset::@7->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta preset
    lda #>preset_twoplane
    sta preset+1
    jmp b1
  //SEG715 [358] phi from apply_preset::@8 to apply_preset::@1 [phi:apply_preset::@8->apply_preset::@1]
  b1_from_b8:
  //SEG716 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_chunky#0 [phi:apply_preset::@8->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta preset
    lda #>preset_chunky
    sta preset+1
    jmp b1
  //SEG717 [358] phi from apply_preset::@9 to apply_preset::@1 [phi:apply_preset::@9->apply_preset::@1]
  b1_from_b9:
  //SEG718 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_sixsfred#0 [phi:apply_preset::@9->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta preset
    lda #>preset_sixsfred
    sta preset+1
    jmp b1
  //SEG719 apply_preset::@1
  b1:
  //SEG720 [359] phi from apply_preset::@1 to apply_preset::@13 [phi:apply_preset::@1->apply_preset::@13]
  b13_from_b1:
  //SEG721 [359] phi (byte) apply_preset::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:apply_preset::@1->apply_preset::@13#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b13
  // Copy preset values into the fields
  //SEG722 [359] phi from apply_preset::@13 to apply_preset::@13 [phi:apply_preset::@13->apply_preset::@13]
  b13_from_b13:
  //SEG723 [359] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@13->apply_preset::@13#0] -- register_copy 
    jmp b13
  //SEG724 apply_preset::@13
  b13:
  //SEG725 [360] *((const byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#14 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuz1 
    ldy i
    lda (preset),y
    sta form_fields_val,y
  //SEG726 [361] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG727 [362] if((byte) apply_preset::i#1!=(const byte) form_fields_cnt#0) goto apply_preset::@13 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp i
    bne b13_from_b13
    jmp breturn
  //SEG728 apply_preset::@return
  breturn:
  //SEG729 [363] return 
    rts
}
//SEG730 form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label _13 = $118
    .label _14 = $11e
    .label _15 = $11b
    .label _16 = $11c
    .label _24 = $11d
    .label return = $107
    .label field = $116
    .label key_event = $11a
    .label return_2 = $2e
  //SEG731 [364] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuz1=vbuz2 
    lda form_field_idx
    sta form_field_ptr.field_idx
  //SEG732 [365] call form_field_ptr 
  //SEG733 [340] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
  //SEG734 [340] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
  //SEG735 [366] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0 -- pbuz1=pbuz2 
    lda form_field_ptr.return
    sta form_field_ptr.return_3
    lda form_field_ptr.return+1
    sta form_field_ptr.return_3+1
    jmp b17
  //SEG736 form_control::@17
  b17:
  //SEG737 [367] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3 -- pbuz1=pbuz2 
    lda form_field_ptr.return_3
    sta field
    lda form_field_ptr.return_3+1
    sta field+1
  //SEG738 [368] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec form_cursor_count
  //SEG739 [369] if((signed byte) form_cursor_count#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@20 -- vbsz1_ge_0_then_la1 
    lda form_cursor_count
    cmp #0
    bpl b20_from_b17
  //SEG740 [370] phi from form_control::@17 to form_control::@1 [phi:form_control::@17->form_control::@1]
  b1_from_b17:
  //SEG741 [370] phi (signed byte) form_cursor_count#15 = (const signed byte) FORM_CURSOR_BLINK#0 [phi:form_control::@17->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta form_cursor_count
    jmp b1
  //SEG742 form_control::@1
  b1:
  //SEG743 [371] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2) goto form_control::@2 -- vbsz1_lt_vbuc1_then_la1 
    lda form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp b6
  //SEG744 form_control::@6
  b6:
  //SEG745 [372] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- vbuz1=_deref_pbuz2_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    sta _13
  //SEG746 [373] *((byte*) form_control::field#0) ← (byte~) form_control::$13 -- _deref_pbuz1=vbuz2 
    lda _13
    ldy #0
    sta (field),y
  //SEG747 [374] phi from form_control::@2 form_control::@6 to form_control::@3 [phi:form_control::@2/form_control::@6->form_control::@3]
  b3_from_b2:
  b3_from_b6:
    jmp b3
  //SEG748 form_control::@3
  b3:
  //SEG749 [375] call keyboard_event_scan 
  //SEG750 [159] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from_b3:
  //SEG751 [159] phi (byte) keyboard_events_size#110 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
  //SEG752 [376] phi from form_control::@3 to form_control::@18 [phi:form_control::@3->form_control::@18]
  b18_from_b3:
    jmp b18
  //SEG753 form_control::@18
  b18:
  //SEG754 [377] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG755 [378] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_get.return
    sta keyboard_event_get.return_4
    jmp b19
  //SEG756 form_control::@19
  b19:
  //SEG757 [379] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4 -- vbuz1=vbuz2 
    lda keyboard_event_get.return_4
    sta key_event
  //SEG758 [380] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN#0) goto form_control::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_CRSR_DOWN
    cmp key_event
    bne b4
    jmp b7
  //SEG759 form_control::@7
  b7:
  //SEG760 [381] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- vbuz1=_deref_pbuz2_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
    sta _15
  //SEG761 [382] *((byte*) form_control::field#0) ← (byte~) form_control::$15 -- _deref_pbuz1=vbuz2 
    // Unblink the cursor
    lda _15
    ldy #0
    sta (field),y
  //SEG762 [383] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 -- vbuz1=vbuz2_band_vbuc1 
    lda #KEY_MODIFIER_SHIFT
    and keyboard_modifiers
    sta _16
  //SEG763 [384] if((byte~) form_control::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@12 -- vbuz1_eq_0_then_la1 
    lda _16
    cmp #0
    beq b12
    jmp b8
  //SEG764 form_control::@8
  b8:
  //SEG765 [385] (byte) form_field_idx#44 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec form_field_idx
  //SEG766 [386] if((byte) form_field_idx#44!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@21 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp form_field_idx
    bne b21_from_b8
  //SEG767 [387] phi from form_control::@8 to form_control::@13 [phi:form_control::@8->form_control::@13]
  b13_from_b8:
  //SEG768 [387] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:form_control::@8->form_control::@13#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta form_field_idx
    jmp b13
  //SEG769 form_control::@13
  b13:
  //SEG770 [388] phi from form_control::@13 to form_control::@return [phi:form_control::@13->form_control::@return]
  breturn_from_b13:
  //SEG771 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@13->form_control::@return#0] -- register_copy 
  //SEG772 [388] phi (signed byte) form_cursor_count#16 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:form_control::@13->form_control::@return#1] -- vbsz1=vbuc1 
    lda #FORM_CURSOR_BLINK/2
    sta form_cursor_count
  //SEG773 [388] phi (byte) form_control::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@13->form_control::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta return_2
    jmp breturn
  //SEG774 form_control::@return
  breturn:
  //SEG775 [389] return 
    rts
  //SEG776 [390] phi from form_control::@8 to form_control::@21 [phi:form_control::@8->form_control::@21]
  b21_from_b8:
    jmp b21
  //SEG777 form_control::@21
  b21:
  //SEG778 [387] phi from form_control::@21 form_control::@22 to form_control::@13 [phi:form_control::@21/form_control::@22->form_control::@13]
  b13_from_b21:
  b13_from_b22:
  //SEG779 [387] phi (byte) form_field_idx#31 = (byte) form_field_idx#44 [phi:form_control::@21/form_control::@22->form_control::@13#0] -- register_copy 
    jmp b13
  //SEG780 form_control::@12
  b12:
  //SEG781 [391] (byte) form_field_idx#45 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc form_field_idx
  //SEG782 [392] if((byte) form_field_idx#45!=(const byte) form_fields_cnt#0) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp form_field_idx
    bne b22_from_b12
  //SEG783 [387] phi from form_control::@12 to form_control::@13 [phi:form_control::@12->form_control::@13]
  b13_from_b12:
  //SEG784 [387] phi (byte) form_field_idx#31 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@12->form_control::@13#0] -- vbuz1=vbuc1 
    lda #0
    sta form_field_idx
    jmp b13
  //SEG785 [393] phi from form_control::@12 to form_control::@22 [phi:form_control::@12->form_control::@22]
  b22_from_b12:
    jmp b22
  //SEG786 form_control::@22
  b22:
    jmp b13_from_b22
  //SEG787 form_control::@4
  b4:
  //SEG788 [394] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT#0) goto form_control::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_CRSR_RIGHT
    cmp key_event
    bne b5
    jmp b9
  //SEG789 form_control::@9
  b9:
  //SEG790 [395] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 -- vbuz1=vbuz2_band_vbuc1 
    lda #KEY_MODIFIER_SHIFT
    and keyboard_modifiers
    sta _24
  //SEG791 [396] if((byte~) form_control::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@14 -- vbuz1_eq_0_then_la1 
    lda _24
    cmp #0
    beq b14
    jmp b10
  //SEG792 form_control::@10
  b10:
  //SEG793 [397] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx form_field_idx
    dec form_fields_val,x
  //SEG794 [398] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@15 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy form_field_idx
    cmp form_fields_val,y
    bne b15
    jmp b11
  //SEG795 form_control::@11
  b11:
  //SEG796 [399] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp b15
  //SEG797 form_control::@15
  b15:
  //SEG798 [400] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)) -- _deref_pbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    // Render field value
    ldx form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
  //SEG799 [388] phi from form_control::@15 form_control::@23 to form_control::@return [phi:form_control::@15/form_control::@23->form_control::@return]
  breturn_from_b15:
  breturn_from_b23:
  //SEG800 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@15/form_control::@23->form_control::@return#0] -- register_copy 
  //SEG801 [388] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@15/form_control::@23->form_control::@return#1] -- register_copy 
  //SEG802 [388] phi (byte) form_control::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@15/form_control::@23->form_control::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta return_2
    jmp breturn
  //SEG803 form_control::@14
  b14:
  //SEG804 [401] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx form_field_idx
    inc form_fields_val,x
  //SEG805 [402] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@15 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy form_field_idx
    lda form_fields_val,y
    cmp form_fields_max,y
    bcc b15
    beq b15
    jmp b16
  //SEG806 form_control::@16
  b16:
  //SEG807 [403] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy form_field_idx
    sta form_fields_val,y
    jmp b15
  //SEG808 form_control::@5
  b5:
  //SEG809 [404] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE#0) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp key_event
    bne b23_from_b5
  //SEG810 [388] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  breturn_from_b5:
  //SEG811 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
  //SEG812 [388] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
  //SEG813 [388] phi (byte) form_control::return#2 = (byte/word/signed word/dword/signed dword) $ff [phi:form_control::@5->form_control::@return#2] -- vbuz1=vbuc1 
    lda #$ff
    sta return_2
    jmp breturn
  //SEG814 [405] phi from form_control::@5 to form_control::@23 [phi:form_control::@5->form_control::@23]
  b23_from_b5:
    jmp b23
  //SEG815 form_control::@23
  b23:
    jmp breturn_from_b23
  //SEG816 form_control::@2
  b2:
  //SEG817 [406] (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#0) | (byte/word/signed word/dword/signed dword) $80 -- vbuz1=_deref_pbuz2_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
    sta _14
  //SEG818 [407] *((byte*) form_control::field#0) ← (byte/word/dword~) form_control::$14 -- _deref_pbuz1=vbuz2 
    lda _14
    ldy #0
    sta (field),y
    jmp b3_from_b2
  //SEG819 [408] phi from form_control::@17 to form_control::@20 [phi:form_control::@17->form_control::@20]
  b20_from_b17:
    jmp b20
  //SEG820 form_control::@20
  b20:
  //SEG821 [370] phi from form_control::@20 to form_control::@1 [phi:form_control::@20->form_control::@1]
  b1_from_b20:
  //SEG822 [370] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@20->form_control::@1#0] -- register_copy 
    jmp b1
}
//SEG823 form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label _0 = $11f
    .label _1 = $120
    .label line = $2f
    .label y = $31
  //SEG824 [410] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  b1_from_form_set_screen:
  //SEG825 [410] phi (byte) form_set_screen::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG826 [410] phi (byte*) form_set_screen::line#2 = (const byte*) FORM_SCREEN#0 [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta line
    lda #>FORM_SCREEN
    sta line+1
    jmp b1
  //SEG827 [410] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  b1_from_b1:
  //SEG828 [410] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
  //SEG829 [410] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp b1
  //SEG830 form_set_screen::@1
  b1:
  //SEG831 [411] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuz1=_lo_pbuz2 
    lda line
    sta _0
  //SEG832 [412] *((const byte[$19]) form_line_lo#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _0
    ldy y
    sta form_line_lo,y
  //SEG833 [413] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuz1=_hi_pbuz2 
    lda line+1
    sta _1
  //SEG834 [414] *((const byte[$19]) form_line_hi#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _1
    ldy y
    sta form_line_hi,y
  //SEG835 [415] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc line
    sta line
    bcc !+
    inc line+1
  !:
  //SEG836 [416] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG837 [417] if((byte) form_set_screen::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto form_set_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b1_from_b1
    jmp breturn
  //SEG838 form_set_screen::@return
  breturn:
  //SEG839 [418] return 
    rts
}
//SEG840 print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage($32) str)
print_str_lines: {
    .label ch = $121
    .label str = $32
  //SEG841 [420] (byte*~) print_char_cursor#77 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda print_set_screen.screen
    sta print_char_cursor
    lda print_set_screen.screen+1
    sta print_char_cursor+1
  //SEG842 [421] phi from print_str_lines print_str_lines::@5 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1]
  b1_from_print_str_lines:
  b1_from_b5:
  //SEG843 [421] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#0] -- register_copy 
  //SEG844 [421] phi (byte*) print_char_cursor#22 = (byte*~) print_char_cursor#77 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#1] -- register_copy 
  //SEG845 [421] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#2] -- register_copy 
    jmp b1
  //SEG846 print_str_lines::@1
  b1:
  //SEG847 [422] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2_from_b1
    jmp breturn
  //SEG848 print_str_lines::@return
  breturn:
  //SEG849 [423] return 
    rts
  //SEG850 [424] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG851 [424] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#22 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
  //SEG852 [424] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp b2
  //SEG853 print_str_lines::@2
  b2:
  //SEG854 [425] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta ch
  //SEG855 [426] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG856 [427] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #'@'
    cmp ch
    beq b3_from_b2
    jmp b4
  //SEG857 print_str_lines::@4
  b4:
  //SEG858 [428] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG859 [429] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG860 [430] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG861 [430] phi (byte*) print_char_cursor#38 = (byte*) print_char_cursor#20 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp b3
  //SEG862 print_str_lines::@3
  b3:
  //SEG863 [431] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #'@'
    cmp ch
    bne b2_from_b3
  //SEG864 [432] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  b5_from_b3:
    jmp b5
  //SEG865 print_str_lines::@5
  b5:
  //SEG866 [433] call print_ln 
  //SEG867 [435] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
  //SEG868 [434] (byte*~) print_char_cursor#78 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
    jmp b1_from_b5
}
//SEG869 print_ln
// Print a newline
print_ln: {
  //SEG870 [436] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG871 [436] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG872 print_ln::@1
  b1:
  //SEG873 [437] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG874 [438] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG875 print_ln::@return
  breturn:
  //SEG876 [439] return 
    rts
}
//SEG877 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label _0 = $122
    .label sc = $38
  //SEG878 [440] (byte*) print_cls::sc#0 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda print_set_screen.screen
    sta sc
    lda print_set_screen.screen+1
    sta sc+1
  //SEG879 [441] phi from print_cls print_cls::@1 to print_cls::@1 [phi:print_cls/print_cls::@1->print_cls::@1]
  b1_from_print_cls:
  b1_from_b1:
  //SEG880 [441] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#0 [phi:print_cls/print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG881 print_cls::@1
  b1:
  //SEG882 [442] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG883 [443] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG884 [444] (byte*~) print_cls::$0 ← (byte*) print_set_screen::screen#2 + (word/signed word/dword/signed dword) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda print_set_screen.screen
    clc
    adc #<$3e8
    sta _0
    lda print_set_screen.screen+1
    adc #>$3e8
    sta _0+1
  //SEG885 [445] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda sc+1
    cmp _0+1
    bne b1_from_b1
    lda sc
    cmp _0
    bne b1_from_b1
    jmp breturn
  //SEG886 print_cls::@return
  breturn:
  //SEG887 [446] return 
    rts
}
//SEG888 print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zeropage($36) screen)
print_set_screen: {
    .label screen = $36
    jmp breturn
  //SEG889 print_set_screen::@return
  breturn:
  //SEG890 [448] return 
    rts
}
//SEG891 gfx_init
// Initialize the different graphics in the memory
gfx_init: {
  //SEG892 [450] call gfx_init_screen0 
  //SEG893 [848] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
  //SEG894 [451] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  b1_from_gfx_init:
    jmp b1
  //SEG895 gfx_init::@1
  b1:
  //SEG896 [452] call gfx_init_screen1 
  //SEG897 [836] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from_b1:
    jsr gfx_init_screen1
  //SEG898 [453] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  b2_from_b1:
    jmp b2
  //SEG899 gfx_init::@2
  b2:
  //SEG900 [454] call gfx_init_screen2 
  //SEG901 [821] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from_b2:
    jsr gfx_init_screen2
  //SEG902 [455] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  b3_from_b2:
    jmp b3
  //SEG903 gfx_init::@3
  b3:
  //SEG904 [456] call gfx_init_screen3 
  //SEG905 [807] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from_b3:
    jsr gfx_init_screen3
  //SEG906 [457] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  b4_from_b3:
    jmp b4
  //SEG907 gfx_init::@4
  b4:
  //SEG908 [458] call gfx_init_screen4 
  //SEG909 [797] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from_b4:
    jsr gfx_init_screen4
  //SEG910 [459] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  b5_from_b4:
    jmp b5
  //SEG911 gfx_init::@5
  b5:
  //SEG912 [460] call gfx_init_charset 
    jsr gfx_init_charset
  //SEG913 [461] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  b6_from_b5:
    jmp b6
  //SEG914 gfx_init::@6
  b6:
  //SEG915 [462] call gfx_init_vic_bitmap 
  //SEG916 [606] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
  gfx_init_vic_bitmap_from_b6:
    jsr gfx_init_vic_bitmap
  //SEG917 [463] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  b7_from_b6:
    jmp b7
  //SEG918 gfx_init::@7
  b7:
  //SEG919 [464] call gfx_init_plane_8bppchunky 
  //SEG920 [586] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from_b7:
    jsr gfx_init_plane_8bppchunky
  //SEG921 [465] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  b8_from_b7:
    jmp b8
  //SEG922 gfx_init::@8
  b8:
  //SEG923 [466] call gfx_init_plane_charset8 
  //SEG924 [561] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from_b8:
    jsr gfx_init_plane_charset8
  //SEG925 [467] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  b9_from_b8:
    jmp b9
  //SEG926 gfx_init::@9
  b9:
  //SEG927 [468] call gfx_init_plane_horisontal 
  //SEG928 [543] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from_b9:
    jsr gfx_init_plane_horisontal
  //SEG929 [469] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  b10_from_b9:
    jmp b10
  //SEG930 gfx_init::@10
  b10:
  //SEG931 [470] call gfx_init_plane_vertical 
  //SEG932 [530] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from_b10:
    jsr gfx_init_plane_vertical
  //SEG933 [471] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  b11_from_b10:
    jmp b11
  //SEG934 gfx_init::@11
  b11:
  //SEG935 [472] call gfx_init_plane_horisontal2 
  //SEG936 [515] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from_b11:
    jsr gfx_init_plane_horisontal2
  //SEG937 [473] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  b12_from_b11:
    jmp b12
  //SEG938 gfx_init::@12
  b12:
  //SEG939 [474] call gfx_init_plane_vertical2 
  //SEG940 [512] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from_b12:
    jsr gfx_init_plane_vertical2
  //SEG941 [475] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  b13_from_b12:
    jmp b13
  //SEG942 gfx_init::@13
  b13:
  //SEG943 [476] call gfx_init_plane_blank 
  //SEG944 [509] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from_b13:
    jsr gfx_init_plane_blank
  //SEG945 [477] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  b14_from_b13:
    jmp b14
  //SEG946 gfx_init::@14
  b14:
  //SEG947 [478] call gfx_init_plane_full 
  //SEG948 [480] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from_b14:
    jsr gfx_init_plane_full
    jmp breturn
  //SEG949 gfx_init::@return
  breturn:
  //SEG950 [479] return 
    rts
}
//SEG951 gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
  //SEG952 [481] call gfx_init_plane_fill 
  //SEG953 [483] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
  //SEG954 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/word/signed word/dword/signed dword) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta gfx_init_plane_fill.fill
  //SEG955 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_FULL#0 [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp breturn
  //SEG956 gfx_init_plane_full::@return
  breturn:
  //SEG957 [482] return 
    rts
}
//SEG958 gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zeropage($3a) plane_addr, byte zeropage($3e) fill)
gfx_init_plane_fill: {
    .label _0 = $124
    .label _1 = $128
    .label _4 = $12c
    .label _5 = $12e
    .label _6 = $130
    .label gfxbCpuBank = $12a
    .label gfxbCpuBank_1 = $12b
    .label gfxb = $40
    .label bx = $42
    .label by = $3f
    .label plane_addr = $3a
    .label fill = $3e
  //SEG959 [484] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2 -- vduz1=vduz2_rol_2 
    lda plane_addr
    sta _0
    lda plane_addr+1
    sta _0+1
    lda plane_addr+2
    sta _0+2
    lda plane_addr+3
    sta _0+3
    asl _0
    rol _0+1
    rol _0+2
    rol _0+3
    asl _0
    rol _0+1
    rol _0+2
    rol _0+3
  //SEG960 [485] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda _0+2
    sta _1
    lda _0+3
    sta _1+1
  //SEG961 [486] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuz1=_lo_vwuz2 
    lda _1
    sta gfxbCpuBank
  //SEG962 [487] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuz1=vbuz2 
    lda gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
  //SEG963 [488] call dtvSetCpuBankSegment1 
  //SEG964 [505] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
  //SEG965 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b5
  //SEG966 gfx_init_plane_fill::@5
  b5:
  //SEG967 [489] (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuz1=_inc_vbuz2 
    ldy gfxbCpuBank
    iny
    sty gfxbCpuBank_1
  //SEG968 [490] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda plane_addr
    sta _4
    lda plane_addr+1
    sta _4+1
  //SEG969 [491] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda _4
    and #<$3fff
    sta _5
    lda _4+1
    and #>$3fff
    sta _5+1
  //SEG970 [492] (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz2 
    lda _5
    clc
    adc #<$4000
    sta _6
    lda _5+1
    adc #>$4000
    sta _6+1
  //SEG971 [493] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word/signed dword/dword~) gfx_init_plane_fill::$6 -- pbuz1=pbuz2 
    lda _6
    sta gfxb
    lda _6+1
    sta gfxb+1
  //SEG972 [494] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  b1_from_b5:
  //SEG973 [494] phi (byte) gfx_init_plane_fill::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG974 [494] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*~) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp b1
  //SEG975 [494] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  b1_from_b3:
  //SEG976 [494] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
  //SEG977 [494] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp b1
  //SEG978 gfx_init_plane_fill::@1
  b1:
  //SEG979 [495] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  b2_from_b1:
  //SEG980 [495] phi (byte) gfx_init_plane_fill::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta bx
  //SEG981 [495] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp b2
  //SEG982 [495] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  b2_from_b2:
  //SEG983 [495] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
  //SEG984 [495] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp b2
  //SEG985 gfx_init_plane_fill::@2
  b2:
  //SEG986 [496] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda fill
    ldy #0
    sta (gfxb),y
  //SEG987 [497] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG988 [498] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuz1=_inc_vbuz1 
    inc bx
  //SEG989 [499] if((byte) gfx_init_plane_fill::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_fill::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp bx
    bne b2_from_b2
    jmp b3
  //SEG990 gfx_init_plane_fill::@3
  b3:
  //SEG991 [500] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG992 [501] if((byte) gfx_init_plane_fill::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp by
    bne b1_from_b3
  //SEG993 [502] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  b4_from_b3:
    jmp b4
  //SEG994 gfx_init_plane_fill::@4
  b4:
  //SEG995 [503] call dtvSetCpuBankSegment1 
  //SEG996 [505] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG997 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG998 gfx_init_plane_fill::@return
  breturn:
  //SEG999 [504] return 
    rts
}
//SEG1000 dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte zeropage($43) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    .label cpuBankIdx = $43
  //SEG1001 [506] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuz1 
    lda cpuBankIdx
    sta cpuBank
  //SEG1002 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG1003 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG1004 [508] return 
    rts
}
//SEG1005 gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
  //SEG1006 [510] call gfx_init_plane_fill 
  //SEG1007 [483] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
  //SEG1008 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta gfx_init_plane_fill.fill
  //SEG1009 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_BLANK#0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp breturn
  //SEG1010 gfx_init_plane_blank::@return
  breturn:
  //SEG1011 [511] return 
    rts
}
//SEG1012 gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
  //SEG1013 [513] call gfx_init_plane_fill 
  //SEG1014 [483] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
  //SEG1015 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/signed byte/word/signed word/dword/signed dword) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta gfx_init_plane_fill.fill
  //SEG1016 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_VERTICAL2#0 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp breturn
  //SEG1017 gfx_init_plane_vertical2::@return
  breturn:
  //SEG1018 [514] return 
    rts
}
//SEG1019 gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label _8 = $132
    .label row = $133
    .label gfxa = $45
    .label ax = $47
    .label ay = $44
  //SEG1020 [516] call dtvSetCpuBankSegment1 
  //SEG1021 [505] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
  //SEG1022 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG1023 [517] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  b1_from_gfx_init_plane_horisontal2:
  //SEG1024 [517] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_HORISONTAL2&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_HORISONTAL2&$3fff)
    sta gfxa+1
  //SEG1025 [517] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b1
  //SEG1026 [517] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  b1_from_b3:
  //SEG1027 [517] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
  //SEG1028 [517] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp b1
  //SEG1029 gfx_init_plane_horisontal2::@1
  b1:
  //SEG1030 [518] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  b2_from_b1:
  //SEG1031 [518] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta ax
  //SEG1032 [518] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp b2
  //SEG1033 [518] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  b2_from_b2:
  //SEG1034 [518] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
  //SEG1035 [518] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp b2
  //SEG1036 gfx_init_plane_horisontal2::@2
  b2:
  //SEG1037 [519] (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda ay
    lsr
    sta _8
  //SEG1038 [520] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$8 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and _8
    sta row
  //SEG1039 [521] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy row
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG1040 [522] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1041 [523] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG1042 [524] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp ax
    bne b2_from_b2
    jmp b3
  //SEG1043 gfx_init_plane_horisontal2::@3
  b3:
  //SEG1044 [525] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG1045 [526] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp ay
    bne b1_from_b3
  //SEG1046 [527] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  b4_from_b3:
    jmp b4
  //SEG1047 gfx_init_plane_horisontal2::@4
  b4:
  //SEG1048 [528] call dtvSetCpuBankSegment1 
  //SEG1049 [505] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG1050 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1051 gfx_init_plane_horisontal2::@return
  breturn:
  //SEG1052 [529] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG1053 gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $49
    .label bx = $4b
    .label by = $48
  //SEG1054 [531] call dtvSetCpuBankSegment1 
  //SEG1055 [505] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
  //SEG1056 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG1057 [532] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  b1_from_gfx_init_plane_vertical:
  //SEG1058 [532] phi (byte) gfx_init_plane_vertical::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG1059 [532] phi (byte*) gfx_init_plane_vertical::gfxb#3 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta gfxb+1
    jmp b1
  //SEG1060 [532] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  b1_from_b3:
  //SEG1061 [532] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
  //SEG1062 [532] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp b1
  //SEG1063 gfx_init_plane_vertical::@1
  b1:
  //SEG1064 [533] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  b2_from_b1:
  //SEG1065 [533] phi (byte) gfx_init_plane_vertical::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta bx
  //SEG1066 [533] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp b2
  //SEG1067 [533] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  b2_from_b2:
  //SEG1068 [533] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
  //SEG1069 [533] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp b2
  //SEG1070 gfx_init_plane_vertical::@2
  b2:
  //SEG1071 [534] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG1072 [535] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG1073 [536] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuz1=_inc_vbuz1 
    inc bx
  //SEG1074 [537] if((byte) gfx_init_plane_vertical::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_vertical::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp bx
    bne b2_from_b2
    jmp b3
  //SEG1075 gfx_init_plane_vertical::@3
  b3:
  //SEG1076 [538] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG1077 [539] if((byte) gfx_init_plane_vertical::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp by
    bne b1_from_b3
  //SEG1078 [540] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  b4_from_b3:
    jmp b4
  //SEG1079 gfx_init_plane_vertical::@4
  b4:
  //SEG1080 [541] call dtvSetCpuBankSegment1 
  //SEG1081 [505] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG1082 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1083 gfx_init_plane_vertical::@return
  breturn:
  //SEG1084 [542] return 
    rts
}
//SEG1085 gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label _8 = $134
    .label gfxa = $4d
    .label ax = $4f
    .label ay = $4c
  //SEG1086 [544] call dtvSetCpuBankSegment1 
  //SEG1087 [505] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
  //SEG1088 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG1089 [545] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  b1_from_gfx_init_plane_horisontal:
  //SEG1090 [545] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_HORISONTAL&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_HORISONTAL&$3fff)
    sta gfxa+1
  //SEG1091 [545] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b1
  //SEG1092 [545] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  b1_from_b6:
  //SEG1093 [545] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
  //SEG1094 [545] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp b1
  //SEG1095 gfx_init_plane_horisontal::@1
  b1:
  //SEG1096 [546] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  b2_from_b1:
  //SEG1097 [546] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta ax
  //SEG1098 [546] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp b2
  //SEG1099 [546] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  b2_from_b4:
  //SEG1100 [546] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
  //SEG1101 [546] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp b2
  //SEG1102 gfx_init_plane_horisontal::@2
  b2:
  //SEG1103 [547] (byte~) gfx_init_plane_horisontal::$8 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_band_vbuc1 
    lda #4
    and ay
    sta _8
  //SEG1104 [548] if((byte~) gfx_init_plane_horisontal::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_horisontal::@3 -- vbuz1_eq_0_then_la1 
    lda _8
    cmp #0
    beq b3
    jmp b5
  //SEG1105 gfx_init_plane_horisontal::@5
  b5:
  //SEG1106 [549] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG1107 [550] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1108 [551] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  b4_from_b3:
  b4_from_b5:
  //SEG1109 [551] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp b4
  //SEG1110 gfx_init_plane_horisontal::@4
  b4:
  //SEG1111 [552] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuz1=_inc_vbuz1 
    inc ax
  //SEG1112 [553] if((byte) gfx_init_plane_horisontal::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp ax
    bne b2_from_b4
    jmp b6
  //SEG1113 gfx_init_plane_horisontal::@6
  b6:
  //SEG1114 [554] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG1115 [555] if((byte) gfx_init_plane_horisontal::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp ay
    bne b1_from_b6
  //SEG1116 [556] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  b7_from_b6:
    jmp b7
  //SEG1117 gfx_init_plane_horisontal::@7
  b7:
  //SEG1118 [557] call dtvSetCpuBankSegment1 
  //SEG1119 [505] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b7:
  //SEG1120 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1121 gfx_init_plane_horisontal::@return
  breturn:
  //SEG1122 [558] return 
    rts
  //SEG1123 gfx_init_plane_horisontal::@3
  b3:
  //SEG1124 [559] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
  //SEG1125 [560] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b4_from_b3
}
//SEG1126 gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label _8 = $135
    .label bits = $54
    .label chargen = $51
    .label gfxa = $55
    .label col = $57
    .label cp = $58
    .label cr = $53
    .label ch = $50
    .label c = $59
  //SEG1127 [562] call dtvSetCpuBankSegment1 
  //SEG1128 [505] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
  //SEG1129 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp b9
  //SEG1130 gfx_init_plane_charset8::@9
  b9:
  //SEG1131 [563] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG1132 [564] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  b1_from_b9:
  //SEG1133 [564] phi (byte) gfx_init_plane_charset8::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG1134 [564] phi (byte) gfx_init_plane_charset8::col#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta col
  //SEG1135 [564] phi (byte*) gfx_init_plane_charset8::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_CHARSET8&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_CHARSET8&$3fff)
    sta gfxa+1
  //SEG1136 [564] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN#0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG1137 [564] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  b1_from_b7:
  //SEG1138 [564] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
  //SEG1139 [564] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
  //SEG1140 [564] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
  //SEG1141 [564] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp b1
  //SEG1142 gfx_init_plane_charset8::@1
  b1:
  //SEG1143 [565] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  b2_from_b1:
  //SEG1144 [565] phi (byte) gfx_init_plane_charset8::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG1145 [565] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG1146 [565] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG1147 [565] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG1148 [565] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  b2_from_b6:
  //SEG1149 [565] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
  //SEG1150 [565] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG1151 [565] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG1152 [565] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG1153 gfx_init_plane_charset8::@2
  b2:
  //SEG1154 [566] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG1155 [567] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG1156 [568] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  b3_from_b2:
  //SEG1157 [568] phi (byte) gfx_init_plane_charset8::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta cp
  //SEG1158 [568] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG1159 [568] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG1160 [568] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG1161 [568] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  b3_from_b4:
  //SEG1162 [568] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
  //SEG1163 [568] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG1164 [568] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG1165 [568] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG1166 gfx_init_plane_charset8::@3
  b3:
  //SEG1167 [569] (byte~) gfx_init_plane_charset8::$8 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and bits
    sta _8
  //SEG1168 [570] if((byte~) gfx_init_plane_charset8::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4 -- vbuz1_eq_0_then_la1 
    lda _8
    cmp #0
    beq b4_from_b3
    jmp b5
  //SEG1169 gfx_init_plane_charset8::@5
  b5:
  //SEG1170 [571] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuz1=vbuz2 
    lda col
    sta c
  //SEG1171 [572] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  b4_from_b5:
  //SEG1172 [572] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp b4
  //SEG1173 [572] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b4_from_b3:
  //SEG1174 [572] phi (byte) gfx_init_plane_charset8::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b4
  //SEG1175 gfx_init_plane_charset8::@4
  b4:
  //SEG1176 [573] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (gfxa),y
  //SEG1177 [574] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1178 [575] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG1179 [576] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG1180 [577] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuz1=_inc_vbuz1 
    inc cp
  //SEG1181 [578] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp cp
    bne b3_from_b4
    jmp b6
  //SEG1182 gfx_init_plane_charset8::@6
  b6:
  //SEG1183 [579] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG1184 [580] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp cr
    bne b2_from_b6
    jmp b7
  //SEG1185 gfx_init_plane_charset8::@7
  b7:
  //SEG1186 [581] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG1187 [582] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda ch
    cmp #0
    bne b1_from_b7
    jmp b8
  //SEG1188 gfx_init_plane_charset8::@8
  b8:
  //SEG1189 [583] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG1190 [584] call dtvSetCpuBankSegment1 
  //SEG1191 [505] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b8:
  //SEG1192 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1193 gfx_init_plane_charset8::@return
  breturn:
  //SEG1194 [585] return 
    rts
}
//SEG1195 gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label _9 = $136
    .label c = $138
    .label gfxb = $5e
    .label x = $5b
    .label gfxbCpuBank = $5d
    .label y = $5a
  //SEG1196 [587] call dtvSetCpuBankSegment1 
  //SEG1197 [505] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
  //SEG1198 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG1199 [588] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  b1_from_gfx_init_plane_8bppchunky:
  //SEG1200 [588] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuz1=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000+1
    sta gfxbCpuBank
  //SEG1201 [588] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1202 [588] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b1
  //SEG1203 [588] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  b1_from_b5:
  //SEG1204 [588] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
  //SEG1205 [588] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
  //SEG1206 [588] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp b1
  //SEG1207 gfx_init_plane_8bppchunky::@1
  b1:
  //SEG1208 [589] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  b2_from_b1:
  //SEG1209 [589] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
  //SEG1210 [589] phi (word) gfx_init_plane_8bppchunky::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
  //SEG1211 [589] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp b2
  //SEG1212 [589] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  b2_from_b3:
  //SEG1213 [589] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
  //SEG1214 [589] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
  //SEG1215 [589] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp b2
  //SEG1216 gfx_init_plane_8bppchunky::@2
  b2:
  //SEG1217 [590] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b3_from_b2
    lda gfxb
    cmp #<$8000
    bne b3_from_b2
    jmp b4
  //SEG1218 gfx_init_plane_8bppchunky::@4
  b4:
  //SEG1219 [591] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuz1=vbuz2 
    lda gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
  //SEG1220 [592] call dtvSetCpuBankSegment1 
  //SEG1221 [505] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG1222 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b7
  //SEG1223 gfx_init_plane_8bppchunky::@7
  b7:
  //SEG1224 [593] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuz1=_inc_vbuz1 
    inc gfxbCpuBank
  //SEG1225 [594] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  b3_from_b7:
  //SEG1226 [594] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
  //SEG1227 [594] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b3
  //SEG1228 [594] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  b3_from_b2:
  //SEG1229 [594] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
  //SEG1230 [594] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp b3
  //SEG1231 gfx_init_plane_8bppchunky::@3
  b3:
  //SEG1232 [595] (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _9
    lda #0
    adc x+1
    sta _9+1
  //SEG1233 [596] (byte) gfx_init_plane_8bppchunky::c#0 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9 -- vbuz1=_byte_vwuz2 
    lda _9
    sta c
  //SEG1234 [597] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (gfxb),y
  //SEG1235 [598] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG1236 [599] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG1237 [600] if((word) gfx_init_plane_8bppchunky::x#1!=(word/signed word/dword/signed dword) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b2_from_b3
    lda x
    cmp #<$140
    bne b2_from_b3
    jmp b5
  //SEG1238 gfx_init_plane_8bppchunky::@5
  b5:
  //SEG1239 [601] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1240 [602] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp y
    bne b1_from_b5
  //SEG1241 [603] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  b6_from_b5:
    jmp b6
  //SEG1242 gfx_init_plane_8bppchunky::@6
  b6:
  //SEG1243 [604] call dtvSetCpuBankSegment1 
  //SEG1244 [505] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b6:
  //SEG1245 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1246 gfx_init_plane_8bppchunky::@return
  breturn:
  //SEG1247 [605] return 
    rts
}
//SEG1248 gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = $60
  //SEG1249 [607] call bitmap_init 
  //SEG1250 [759] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_vic_bitmap:
    jsr bitmap_init
  //SEG1251 [608] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@2 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@2]
  b2_from_gfx_init_vic_bitmap:
    jmp b2
  //SEG1252 gfx_init_vic_bitmap::@2
  b2:
  //SEG1253 [609] call bitmap_clear 
    jsr bitmap_clear
  //SEG1254 [610] phi from gfx_init_vic_bitmap::@2 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@2->gfx_init_vic_bitmap::@1]
  b1_from_b2:
  //SEG1255 [610] phi (byte) gfx_init_vic_bitmap::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_vic_bitmap::@2->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b1
  //SEG1256 [610] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  b1_from_b3:
  //SEG1257 [610] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp b1
  //SEG1258 gfx_init_vic_bitmap::@1
  b1:
  //SEG1259 [611] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x,y
    sta bitmap_line.x0
  //SEG1260 [612] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x+1,y
    sta bitmap_line.x1
  //SEG1261 [613] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y,y
    sta bitmap_line.y0
  //SEG1262 [614] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y+1,y
    sta bitmap_line.y1
  //SEG1263 [615] call bitmap_line 
    jsr bitmap_line
    jmp b3
  //SEG1264 gfx_init_vic_bitmap::@3
  b3:
  //SEG1265 [616] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1266 [617] if((byte) gfx_init_vic_bitmap::l#1<(const byte) gfx_init_vic_bitmap::lines_cnt#0) goto gfx_init_vic_bitmap::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1_from_b3
    jmp breturn
  //SEG1267 gfx_init_vic_bitmap::@return
  breturn:
  //SEG1268 [618] return 
    rts
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
//SEG1269 bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage($139) x0, byte zeropage($13a) x1, byte zeropage($13b) y0, byte zeropage($13c) y1)
bitmap_line: {
    .label xd = $140
    .label xd_2 = $13d
    .label yd = $13f
    .label yd_2 = $13e
    .label x0 = $139
    .label x1 = $13a
    .label y0 = $13b
    .label y1 = $13c
    .label yd_10 = $141
    .label yd_11 = $142
  //SEG1270 [619] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda x0
    cmp x1
    bcc b1
    jmp b2
  //SEG1271 bitmap_line::@2
  b2:
  //SEG1272 [620] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x0
    sec
    sbc x1
    sta xd_2
  //SEG1273 [621] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b7
    jmp b3
  //SEG1274 bitmap_line::@3
  b3:
  //SEG1275 [622] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y0
    sec
    sbc y1
    sta yd_2
  //SEG1276 [623] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuz1_lt_vbuz2_then_la1 
    lda yd_2
    cmp xd_2
    bcc b8
    jmp b4
  //SEG1277 bitmap_line::@4
  b4:
  //SEG1278 [624] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxi.y
  //SEG1279 [625] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_ydxi.x
  //SEG1280 [626] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y1
  //SEG1281 [627] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda yd_2
    sta bitmap_line_ydxi.yd
  //SEG1282 [628] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_ydxi.xd
  //SEG1283 [629] call bitmap_line_ydxi 
  //SEG1284 [703] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b4:
  //SEG1285 [703] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
  //SEG1286 [703] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
  //SEG1287 [703] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
  //SEG1288 [703] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
  //SEG1289 [703] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1290 bitmap_line::@return
  breturn:
  //SEG1291 [630] return 
    rts
  //SEG1292 bitmap_line::@8
  b8:
  //SEG1293 [631] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x
  //SEG1294 [632] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyi.y
  //SEG1295 [633] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x1
  //SEG1296 [634] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_xdyi.xd
  //SEG1297 [635] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda yd_2
    sta bitmap_line_xdyi.yd
  //SEG1298 [636] call bitmap_line_xdyi 
  //SEG1299 [681] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b8:
  //SEG1300 [681] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
  //SEG1301 [681] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
  //SEG1302 [681] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
  //SEG1303 [681] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
  //SEG1304 [681] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
  //SEG1305 bitmap_line::@7
  b7:
  //SEG1306 [637] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y1
    sec
    sbc y0
    sta yd
  //SEG1307 [638] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda yd
    cmp xd_2
    bcc b9
    jmp b10
  //SEG1308 bitmap_line::@10
  b10:
  //SEG1309 [639] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y
  //SEG1310 [640] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_ydxd.x
  //SEG1311 [641] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y1
  //SEG1312 [642] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda yd
    sta bitmap_line_ydxd.yd
  //SEG1313 [643] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_ydxd.xd
  //SEG1314 [644] call bitmap_line_ydxd 
  //SEG1315 [733] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b10:
  //SEG1316 [733] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
  //SEG1317 [733] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
  //SEG1318 [733] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
  //SEG1319 [733] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
  //SEG1320 [733] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1321 bitmap_line::@9
  b9:
  //SEG1322 [645] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyd.x
  //SEG1323 [646] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyd.y
  //SEG1324 [647] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x1
  //SEG1325 [648] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda xd_2
    sta bitmap_line_xdyd.xd
  //SEG1326 [649] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda yd
    sta bitmap_line_xdyd.yd
  //SEG1327 [650] call bitmap_line_xdyd 
  //SEG1328 [718] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b9:
  //SEG1329 [718] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
  //SEG1330 [718] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
  //SEG1331 [718] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
  //SEG1332 [718] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
  //SEG1333 [718] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1334 bitmap_line::@1
  b1:
  //SEG1335 [651] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda x1
    sec
    sbc x0
    sta xd
  //SEG1336 [652] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b11
    jmp b5
  //SEG1337 bitmap_line::@5
  b5:
  //SEG1338 [653] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y0
    sec
    sbc y1
    sta yd_10
  //SEG1339 [654] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuz1_lt_vbuz2_then_la1 
    lda yd_10
    cmp xd
    bcc b12
    jmp b6
  //SEG1340 bitmap_line::@6
  b6:
  //SEG1341 [655] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y
  //SEG1342 [656] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_ydxd.x
  //SEG1343 [657] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y1
  //SEG1344 [658] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda yd_10
    sta bitmap_line_ydxd.yd
  //SEG1345 [659] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_ydxd.xd
  //SEG1346 [660] call bitmap_line_ydxd 
  //SEG1347 [733] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b6:
  //SEG1348 [733] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
  //SEG1349 [733] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
  //SEG1350 [733] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
  //SEG1351 [733] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
  //SEG1352 [733] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1353 bitmap_line::@12
  b12:
  //SEG1354 [661] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x
  //SEG1355 [662] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_xdyd.y
  //SEG1356 [663] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyd.x1
  //SEG1357 [664] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_xdyd.xd
  //SEG1358 [665] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda yd_10
    sta bitmap_line_xdyd.yd
  //SEG1359 [666] call bitmap_line_xdyd 
  //SEG1360 [718] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b12:
  //SEG1361 [718] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
  //SEG1362 [718] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
  //SEG1363 [718] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
  //SEG1364 [718] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
  //SEG1365 [718] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1366 bitmap_line::@11
  b11:
  //SEG1367 [667] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda y1
    sec
    sbc y0
    sta yd_11
  //SEG1368 [668] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    lda yd_11
    cmp xd
    bcc b13
    jmp b14
  //SEG1369 bitmap_line::@14
  b14:
  //SEG1370 [669] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y
  //SEG1371 [670] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_ydxi.x
  //SEG1372 [671] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxi.y1
  //SEG1373 [672] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda yd_11
    sta bitmap_line_ydxi.yd
  //SEG1374 [673] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_ydxi.xd
  //SEG1375 [674] call bitmap_line_ydxi 
  //SEG1376 [703] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b14:
  //SEG1377 [703] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
  //SEG1378 [703] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
  //SEG1379 [703] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
  //SEG1380 [703] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
  //SEG1381 [703] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1382 bitmap_line::@13
  b13:
  //SEG1383 [675] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x
  //SEG1384 [676] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_xdyi.y
  //SEG1385 [677] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda x1
    sta bitmap_line_xdyi.x1
  //SEG1386 [678] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda xd
    sta bitmap_line_xdyi.xd
  //SEG1387 [679] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda yd_11
    sta bitmap_line_xdyi.yd
  //SEG1388 [680] call bitmap_line_xdyi 
  //SEG1389 [681] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b13:
  //SEG1390 [681] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
  //SEG1391 [681] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
  //SEG1392 [681] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
  //SEG1393 [681] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
  //SEG1394 [681] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
}
//SEG1395 bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($64) x, byte zeropage($65) y, byte zeropage($63) x1, byte zeropage($62) xd, byte zeropage($61) yd)
bitmap_line_xdyi: {
    .label _6 = $143
    .label x = $64
    .label y = $65
    .label x1 = $63
    .label xd = $62
    .label yd = $61
    .label e = $66
  //SEG1396 [682] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1397 [683] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  b1_from_bitmap_line_xdyi:
  b1_from_b2:
  //SEG1398 [683] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
  //SEG1399 [683] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
  //SEG1400 [683] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp b1
  //SEG1401 bitmap_line_xdyi::@1
  b1:
  //SEG1402 [684] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1403 [685] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1404 [686] call bitmap_plot 
  //SEG1405 [696] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1406 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
  //SEG1407 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1408 bitmap_line_xdyi::@4
  b4:
  //SEG1409 [687] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1410 [688] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1411 [689] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1412 bitmap_line_xdyi::@3
  b3:
  //SEG1413 [690] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1414 [691] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1415 [692] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1416 [692] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
  //SEG1417 [692] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp b2
  //SEG1418 bitmap_line_xdyi::@2
  b2:
  //SEG1419 [693] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy x1
    iny
    sty _6
  //SEG1420 [694] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda x
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1421 bitmap_line_xdyi::@return
  breturn:
  //SEG1422 [695] return 
    rts
}
//SEG1423 bitmap_plot
// bitmap_plot(byte zeropage($67) x, byte zeropage($68) y)
bitmap_plot: {
    .label _0 = $148
    .label _1 = $14a
    .label plotter_x = $144
    .label plotter_y = $146
    .label x = $67
    .label y = $68
  //SEG1424 [697] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy x
    lda bitmap_plot_xhi,y
    sta plotter_x+1
    lda bitmap_plot_xlo,y
    sta plotter_x
  //SEG1425 [698] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy y
    lda bitmap_plot_yhi,y
    sta plotter_y+1
    lda bitmap_plot_ylo,y
    sta plotter_y
  //SEG1426 [699] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda plotter_x
    clc
    adc plotter_y
    sta _0
    lda plotter_x+1
    adc plotter_y+1
    sta _0+1
  //SEG1427 [700] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) -- vbuz1=_deref_pbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy #0
    lda (_0),y
    ldy x
    ora bitmap_plot_bit,y
    sta _1
  //SEG1428 [701] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuz2 
    lda _1
    ldy #0
    sta (_0),y
    jmp breturn
  //SEG1429 bitmap_plot::@return
  breturn:
  //SEG1430 [702] return 
    rts
}
//SEG1431 bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($6d) y, byte zeropage($6c) x, byte zeropage($6b) y1, byte zeropage($6a) yd, byte zeropage($69) xd)
bitmap_line_ydxi: {
    .label _6 = $14b
    .label y = $6d
    .label x = $6c
    .label y1 = $6b
    .label yd = $6a
    .label xd = $69
    .label e = $6e
  //SEG1432 [704] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1433 [705] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  b1_from_bitmap_line_ydxi:
  b1_from_b2:
  //SEG1434 [705] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
  //SEG1435 [705] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
  //SEG1436 [705] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp b1
  //SEG1437 bitmap_line_ydxi::@1
  b1:
  //SEG1438 [706] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1439 [707] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1440 [708] call bitmap_plot 
  //SEG1441 [696] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1442 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
  //SEG1443 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1444 bitmap_line_ydxi::@4
  b4:
  //SEG1445 [709] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1446 [710] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1447 [711] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1448 bitmap_line_ydxi::@3
  b3:
  //SEG1449 [712] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1450 [713] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1451 [714] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1452 [714] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
  //SEG1453 [714] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp b2
  //SEG1454 bitmap_line_ydxi::@2
  b2:
  //SEG1455 [715] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy y1
    iny
    sty _6
  //SEG1456 [716] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1457 bitmap_line_ydxi::@return
  breturn:
  //SEG1458 [717] return 
    rts
}
//SEG1459 bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($72) x, byte zeropage($73) y, byte zeropage($71) x1, byte zeropage($70) xd, byte zeropage($6f) yd)
bitmap_line_xdyd: {
    .label _6 = $14c
    .label x = $72
    .label y = $73
    .label x1 = $71
    .label xd = $70
    .label yd = $6f
    .label e = $74
  //SEG1460 [719] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1461 [720] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  b1_from_bitmap_line_xdyd:
  b1_from_b2:
  //SEG1462 [720] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
  //SEG1463 [720] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
  //SEG1464 [720] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp b1
  //SEG1465 bitmap_line_xdyd::@1
  b1:
  //SEG1466 [721] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1467 [722] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1468 [723] call bitmap_plot 
  //SEG1469 [696] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1470 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
  //SEG1471 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1472 bitmap_line_xdyd::@4
  b4:
  //SEG1473 [724] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1474 [725] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1475 [726] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1476 bitmap_line_xdyd::@3
  b3:
  //SEG1477 [727] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec y
  //SEG1478 [728] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1479 [729] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1480 [729] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
  //SEG1481 [729] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp b2
  //SEG1482 bitmap_line_xdyd::@2
  b2:
  //SEG1483 [730] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy x1
    iny
    sty _6
  //SEG1484 [731] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda x
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1485 bitmap_line_xdyd::@return
  breturn:
  //SEG1486 [732] return 
    rts
}
//SEG1487 bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($79) y, byte zeropage($78) x, byte zeropage($77) y1, byte zeropage($76) yd, byte zeropage($75) xd)
bitmap_line_ydxd: {
    .label _6 = $14d
    .label y = $79
    .label x = $78
    .label y1 = $77
    .label yd = $76
    .label xd = $75
    .label e = $7a
  //SEG1488 [734] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1489 [735] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  b1_from_bitmap_line_ydxd:
  b1_from_b2:
  //SEG1490 [735] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
  //SEG1491 [735] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
  //SEG1492 [735] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp b1
  //SEG1493 bitmap_line_ydxd::@1
  b1:
  //SEG1494 [736] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3 -- vbuz1=vbuz2 
    lda x
    sta bitmap_plot.x
  //SEG1495 [737] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuz1=vbuz2 
    lda y
    sta bitmap_plot.y
  //SEG1496 [738] call bitmap_plot 
  //SEG1497 [696] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1498 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
  //SEG1499 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1500 bitmap_line_ydxd::@4
  b4:
  //SEG1501 [739] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1502 [740] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1503 [741] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1504 bitmap_line_ydxd::@3
  b3:
  //SEG1505 [742] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec x
  //SEG1506 [743] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1507 [744] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1508 [744] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
  //SEG1509 [744] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp b2
  //SEG1510 bitmap_line_ydxd::@2
  b2:
  //SEG1511 [745] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy y1
    iny
    sty _6
  //SEG1512 [746] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda y
    cmp _6
    bne b1_from_b2
    jmp breturn
  //SEG1513 bitmap_line_ydxd::@return
  breturn:
  //SEG1514 [747] return 
    rts
}
//SEG1515 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $7c
    .label x = $7e
    .label y = $7b
    .label _3 = $14e
  //SEG1516 [748] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta _3
    lda bitmap_plot_xhi
    sta _3+1
  //SEG1517 [749] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 -- pbuz1=pbuz2 
    lda _3
    sta bitmap
    lda _3+1
    sta bitmap+1
  //SEG1518 [750] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG1519 [750] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1520 [750] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1521 [750] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG1522 [750] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG1523 [750] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1524 bitmap_clear::@1
  b1:
  //SEG1525 [751] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG1526 [751] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG1527 [751] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1528 [751] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG1529 [751] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG1530 [751] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1531 bitmap_clear::@2
  b2:
  //SEG1532 [752] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG1533 [753] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG1534 [754] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1535 [755] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp x
    bne b2_from_b2
    jmp b3
  //SEG1536 bitmap_clear::@3
  b3:
  //SEG1537 [756] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1538 [757] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp y
    bne b1_from_b3
    jmp breturn
  //SEG1539 bitmap_clear::@return
  breturn:
  //SEG1540 [758] return 
    rts
}
//SEG1541 bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label _0 = $150
    .label _6 = $151
    .label _7 = $152
    .label _8 = $153
    .label _9 = $154
    .label _10 = $155
    .label bits = $80
    .label x = $7f
    .label y = $81
    .label yoffs = $82
  //SEG1542 [760] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG1543 [760] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
  //SEG1544 [760] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b1
  //SEG1545 [760] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG1546 [760] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG1547 [760] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG1548 bitmap_init::@1
  b1:
  //SEG1549 [761] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f8
    and x
    sta _0
  //SEG1550 [762] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _0
    ldy x
    sta bitmap_plot_xlo,y
  //SEG1551 [763] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #>VIC_BITMAP
    ldy x
    sta bitmap_plot_xhi,y
  //SEG1552 [764] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda bits
    ldy x
    sta bitmap_plot_bit,y
  //SEG1553 [765] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_ror_1 
    lsr bits
  //SEG1554 [766] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@6 -- vbuz1_neq_0_then_la1 
    lda bits
    cmp #0
    bne b6_from_b1
  //SEG1555 [767] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG1556 [767] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b2
  //SEG1557 bitmap_init::@2
  b2:
  //SEG1558 [768] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1559 [769] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda x
    cmp #0
    bne b1_from_b2
  //SEG1560 [770] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG1561 [770] phi (byte*) bitmap_init::yoffs#2 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta yoffs
    lda #>0
    sta yoffs+1
  //SEG1562 [770] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b3
  //SEG1563 [770] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG1564 [770] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG1565 [770] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG1566 bitmap_init::@3
  b3:
  //SEG1567 [771] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _6
  //SEG1568 [772] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda yoffs
    sta _7
  //SEG1569 [773] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7 -- vbuz1=vbuz2_bor_vbuz3 
    lda _6
    ora _7
    sta _8
  //SEG1570 [774] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _8
    ldy y
    sta bitmap_plot_ylo,y
  //SEG1571 [775] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda yoffs+1
    sta _9
  //SEG1572 [776] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _9
    ldy y
    sta bitmap_plot_yhi,y
  //SEG1573 [777] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _10
  //SEG1574 [778] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp _10
    bne b4_from_b3
    jmp b5
  //SEG1575 bitmap_init::@5
  b5:
  //SEG1576 [779] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG1577 [780] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  b4_from_b3:
  b4_from_b5:
  //SEG1578 [780] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG1579 bitmap_init::@4
  b4:
  //SEG1580 [781] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1581 [782] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda y
    cmp #0
    bne b3_from_b4
    jmp breturn
  //SEG1582 bitmap_init::@return
  breturn:
  //SEG1583 [783] return 
    rts
  //SEG1584 [784] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  b6_from_b1:
    jmp b6
  //SEG1585 bitmap_init::@6
  b6:
  //SEG1586 [767] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  b2_from_b6:
  //SEG1587 [767] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
//SEG1588 gfx_init_charset
gfx_init_charset: {
    .label charset = $87
    .label chargen = $85
    .label l = $89
    .label c = $84
  //SEG1589 [785] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
  //SEG1590 [786] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  b1_from_gfx_init_charset:
  //SEG1591 [786] phi (byte) gfx_init_charset::c#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG1592 [786] phi (byte*) gfx_init_charset::charset#3 = (const byte*) VIC_CHARSET_ROM#0 [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta charset
    lda #>VIC_CHARSET_ROM
    sta charset+1
  //SEG1593 [786] phi (byte*) gfx_init_charset::chargen#3 = (const byte*) CHARGEN#0 [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG1594 [786] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  b1_from_b3:
  //SEG1595 [786] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
  //SEG1596 [786] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
  //SEG1597 [786] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp b1
  //SEG1598 gfx_init_charset::@1
  b1:
  //SEG1599 [787] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  b2_from_b1:
  //SEG1600 [787] phi (byte) gfx_init_charset::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG1601 [787] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
  //SEG1602 [787] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp b2
  //SEG1603 [787] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  b2_from_b2:
  //SEG1604 [787] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
  //SEG1605 [787] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
  //SEG1606 [787] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp b2
  //SEG1607 gfx_init_charset::@2
  b2:
  //SEG1608 [788] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
  //SEG1609 [789] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc charset
    bne !+
    inc charset+1
  !:
  //SEG1610 [790] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG1611 [791] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1612 [792] if((byte) gfx_init_charset::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_charset::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp l
    bne b2_from_b2
    jmp b3
  //SEG1613 gfx_init_charset::@3
  b3:
  //SEG1614 [793] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG1615 [794] if((byte) gfx_init_charset::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b1_from_b3
    jmp b4
  //SEG1616 gfx_init_charset::@4
  b4:
  //SEG1617 [795] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp breturn
  //SEG1618 gfx_init_charset::@return
  breturn:
  //SEG1619 [796] return 
    rts
}
//SEG1620 gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $8b
    .label cx = $8d
    .label cy = $8a
  //SEG1621 [798] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  b1_from_gfx_init_screen4:
  //SEG1622 [798] phi (byte) gfx_init_screen4::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1623 [798] phi (byte*) gfx_init_screen4::ch#3 = (const byte*) VIC_SCREEN4#0 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta ch
    lda #>VIC_SCREEN4
    sta ch+1
    jmp b1
  //SEG1624 [798] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  b1_from_b3:
  //SEG1625 [798] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
  //SEG1626 [798] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp b1
  //SEG1627 gfx_init_screen4::@1
  b1:
  //SEG1628 [799] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  b2_from_b1:
  //SEG1629 [799] phi (byte) gfx_init_screen4::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cx
  //SEG1630 [799] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp b2
  //SEG1631 [799] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  b2_from_b2:
  //SEG1632 [799] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
  //SEG1633 [799] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp b2
  //SEG1634 gfx_init_screen4::@2
  b2:
  //SEG1635 [800] *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
  //SEG1636 [801] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1637 [802] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1638 [803] if((byte) gfx_init_screen4::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen4::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp cx
    bne b2_from_b2
    jmp b3
  //SEG1639 gfx_init_screen4::@3
  b3:
  //SEG1640 [804] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1641 [805] if((byte) gfx_init_screen4::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1642 gfx_init_screen4::@return
  breturn:
  //SEG1643 [806] return 
    rts
}
//SEG1644 gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label _0 = $156
    .label _1 = $157
    .label _2 = $158
    .label _3 = $159
    .label ch = $90
    .label cx = $8f
    .label cy = $8e
  //SEG1645 [808] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  b1_from_gfx_init_screen3:
  //SEG1646 [808] phi (byte*) gfx_init_screen3::ch#3 = (const byte*) VIC_SCREEN3#0 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta ch
    lda #>VIC_SCREEN3
    sta ch+1
  //SEG1647 [808] phi (byte) gfx_init_screen3::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1648 [808] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  b1_from_b3:
  //SEG1649 [808] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
  //SEG1650 [808] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp b1
  //SEG1651 gfx_init_screen3::@1
  b1:
  //SEG1652 [809] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  b2_from_b1:
  //SEG1653 [809] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
  //SEG1654 [809] phi (byte) gfx_init_screen3::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b2
  //SEG1655 [809] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  b2_from_b2:
  //SEG1656 [809] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
  //SEG1657 [809] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp b2
  //SEG1658 gfx_init_screen3::@2
  b2:
  //SEG1659 [810] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and cx
    sta _0
  //SEG1660 [811] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _0
    asl
    asl
    asl
    asl
    sta _1
  //SEG1661 [812] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and cy
    sta _2
  //SEG1662 [813] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda _1
    ora _2
    sta _3
  //SEG1663 [814] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuz2 
    lda _3
    ldy #0
    sta (ch),y
  //SEG1664 [815] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1665 [816] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1666 [817] if((byte) gfx_init_screen3::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen3::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp cx
    bne b2_from_b2
    jmp b3
  //SEG1667 gfx_init_screen3::@3
  b3:
  //SEG1668 [818] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1669 [819] if((byte) gfx_init_screen3::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1670 gfx_init_screen3::@return
  breturn:
  //SEG1671 [820] return 
    rts
}
//SEG1672 gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label _0 = $15a
    .label _3 = $15d
    .label _4 = $15e
    .label col = $15b
    .label col2 = $15c
    .label ch = $94
    .label cx = $93
    .label cy = $92
  //SEG1673 [822] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  b1_from_gfx_init_screen2:
  //SEG1674 [822] phi (byte*) gfx_init_screen2::ch#3 = (const byte*) VIC_SCREEN2#0 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta ch
    lda #>VIC_SCREEN2
    sta ch+1
  //SEG1675 [822] phi (byte) gfx_init_screen2::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1676 [822] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  b1_from_b3:
  //SEG1677 [822] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
  //SEG1678 [822] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp b1
  //SEG1679 gfx_init_screen2::@1
  b1:
  //SEG1680 [823] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  b2_from_b1:
  //SEG1681 [823] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
  //SEG1682 [823] phi (byte) gfx_init_screen2::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b2
  //SEG1683 [823] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  b2_from_b2:
  //SEG1684 [823] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
  //SEG1685 [823] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp b2
  //SEG1686 gfx_init_screen2::@2
  b2:
  //SEG1687 [824] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _0
  //SEG1688 [825] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _0
    sta col
  //SEG1689 [826] (byte) gfx_init_screen2::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$f
    sec
    sbc col
    sta col2
  //SEG1690 [827] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda col
    asl
    asl
    asl
    asl
    sta _3
  //SEG1691 [828] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuz1=vbuz2_bor_vbuz3 
    lda _3
    ora col2
    sta _4
  //SEG1692 [829] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuz2 
    lda _4
    ldy #0
    sta (ch),y
  //SEG1693 [830] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1694 [831] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1695 [832] if((byte) gfx_init_screen2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp cx
    bne b2_from_b2
    jmp b3
  //SEG1696 gfx_init_screen2::@3
  b3:
  //SEG1697 [833] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1698 [834] if((byte) gfx_init_screen2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1699 gfx_init_screen2::@return
  breturn:
  //SEG1700 [835] return 
    rts
}
//SEG1701 gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label _0 = $15f
    .label _1 = $160
    .label ch = $98
    .label cx = $97
    .label cy = $96
  //SEG1702 [837] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  b1_from_gfx_init_screen1:
  //SEG1703 [837] phi (byte*) gfx_init_screen1::ch#3 = (const byte*) VIC_SCREEN1#0 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta ch
    lda #>VIC_SCREEN1
    sta ch+1
  //SEG1704 [837] phi (byte) gfx_init_screen1::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1705 [837] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  b1_from_b3:
  //SEG1706 [837] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
  //SEG1707 [837] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp b1
  //SEG1708 gfx_init_screen1::@1
  b1:
  //SEG1709 [838] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  b2_from_b1:
  //SEG1710 [838] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
  //SEG1711 [838] phi (byte) gfx_init_screen1::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b2
  //SEG1712 [838] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  b2_from_b2:
  //SEG1713 [838] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
  //SEG1714 [838] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp b2
  //SEG1715 gfx_init_screen1::@2
  b2:
  //SEG1716 [839] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda cx
    clc
    adc cy
    sta _0
  //SEG1717 [840] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and _0
    sta _1
  //SEG1718 [841] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuz2 
    lda _1
    ldy #0
    sta (ch),y
  //SEG1719 [842] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1720 [843] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1721 [844] if((byte) gfx_init_screen1::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen1::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp cx
    bne b2_from_b2
    jmp b3
  //SEG1722 gfx_init_screen1::@3
  b3:
  //SEG1723 [845] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1724 [846] if((byte) gfx_init_screen1::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1725 gfx_init_screen1::@return
  breturn:
  //SEG1726 [847] return 
    rts
}
//SEG1727 gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label _0 = $161
    .label _1 = $162
    .label _2 = $163
    .label _3 = $164
    .label ch = $9c
    .label cx = $9b
    .label cy = $9a
  //SEG1728 [849] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  b1_from_gfx_init_screen0:
  //SEG1729 [849] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) VIC_SCREEN0#0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta ch
    lda #>VIC_SCREEN0
    sta ch+1
  //SEG1730 [849] phi (byte) gfx_init_screen0::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1731 [849] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  b1_from_b3:
  //SEG1732 [849] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
  //SEG1733 [849] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp b1
  //SEG1734 gfx_init_screen0::@1
  b1:
  //SEG1735 [850] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  b2_from_b1:
  //SEG1736 [850] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
  //SEG1737 [850] phi (byte) gfx_init_screen0::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b2
  //SEG1738 [850] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  b2_from_b2:
  //SEG1739 [850] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
  //SEG1740 [850] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp b2
  //SEG1741 gfx_init_screen0::@2
  b2:
  //SEG1742 [851] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _0
  //SEG1743 [852] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _0
    asl
    asl
    asl
    asl
    sta _1
  //SEG1744 [853] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _2
  //SEG1745 [854] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda _1
    ora _2
    sta _3
  //SEG1746 [855] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuz2 
    lda _3
    ldy #0
    sta (ch),y
  //SEG1747 [856] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1748 [857] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG1749 [858] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp cx
    bne b2_from_b2
    jmp b3
  //SEG1750 gfx_init_screen0::@3
  b3:
  //SEG1751 [859] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1752 [860] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1753 gfx_init_screen0::@return
  breturn:
  //SEG1754 [861] return 
    rts
}
//SEG1755 keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
  //SEG1756 [862] *((const byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1_PORT_A_DDR
  //SEG1757 [863] *((const byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1_PORT_B_DDR
    jmp breturn
  //SEG1758 keyboard_init::@return
  breturn:
  //SEG1759 [864] return 
    rts
}
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"+" overscan   0   step    00   bgcol2 00  @"+"                modulo  00   bgcol3 00  @"+"@"
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+"@"

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:338 [ bitmap_init::$7 ] has ALU potential.
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ]
Statement [19] if(*((const byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF#0 [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR#0 [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] ) always clobbers reg byte a 
Statement [25] if(*((const byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN#0 [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] ) always clobbers reg byte a 
Statement [28] if(*((const byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF#0 [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] ) always clobbers reg byte a 
Statement [31] if(*((const byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY#0 [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] ) always clobbers reg byte a 
Statement [35] if(*((const byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [38] if(*((const byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM#0 [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] ) always clobbers reg byte a 
Statement [42] if(*((const byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$20 ← *((const byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$20 ] ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte*) form_a_start_lo#0) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:159 [ gfx_mode::plane_a_offs#0 ]
Statement [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] ) always clobbers reg byte a 
Statement [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$25 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$25 ] ) always clobbers reg byte a 
Statement [56] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ) always clobbers reg byte a 
Statement [57] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ) always clobbers reg byte a 
Statement [59] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] ) always clobbers reg byte a 
Statement [60] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$30 ← *((const byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] ) always clobbers reg byte a 
Statement [63] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte*) form_a_step_lo#0) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$32 ← *((const byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] ) always clobbers reg byte a 
Statement [66] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte*) form_a_mod_lo#0) [ keyboard_events_size#24 gfx_mode::$33 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$33 ] ) always clobbers reg byte a 
Statement [68] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [69] (byte~) gfx_mode::$34 ← *((const byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$34 ] ) always clobbers reg byte a 
Statement [70] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte*) form_b_start_lo#0) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ) always clobbers reg byte a 
Statement [73] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:186 [ gfx_mode::plane_b_offs#0 ]
Statement [74] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ) always clobbers reg byte a 
Statement [75] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] ) always clobbers reg byte a 
Statement [76] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] ) always clobbers reg byte a 
Statement [77] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$39 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$39 ] ) always clobbers reg byte a 
Statement [79] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ) always clobbers reg byte a 
Statement [80] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ) always clobbers reg byte a 
Statement [82] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] ) always clobbers reg byte a 
Statement [85] (byte~) gfx_mode::$44 ← *((const byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte*) form_b_step_lo#0) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] ) always clobbers reg byte a 
Statement [88] (byte~) gfx_mode::$46 ← *((const byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$46 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$46 ] ) always clobbers reg byte a 
Statement [89] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte*) form_b_mod_lo#0) [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] ) always clobbers reg byte a 
Statement [91] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [92] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [93] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [96] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] ) always clobbers reg byte a 
Statement [97] (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$52 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$52 ] ) always clobbers reg byte a 
Statement [98] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$52 & (word/signed word/dword/signed dword) $3fff [ keyboard_events_size#24 gfx_mode::$54 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$54 ] ) always clobbers reg byte a 
Statement [99] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ]
Statement [100] (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55 [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] ) always clobbers reg byte a 
Statement [103] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:220 [ gfx_mode::$56 ]
Statement [104] (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$57 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$57 ] ) always clobbers reg byte a 
Statement [105] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$57 & (word/signed word/dword/signed dword) $3fff [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ) always clobbers reg byte a 
Statement [106] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ) always clobbers reg byte a 
Statement [107] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ) always clobbers reg byte a 
Statement [112] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] ) always clobbers reg byte a 
Statement [113] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] ) always clobbers reg byte a 
Statement [116] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Statement [123] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [124] (byte~) gfx_mode::$64 ← *((const byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$64 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$64 ] ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte*) form_vic_bg0_lo#0) [ keyboard_events_size#24 gfx_mode::$65 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$65 ] ) always clobbers reg byte a 
Statement [127] (byte~) gfx_mode::$66 ← *((const byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$66 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$66 ] ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte*) form_vic_bg1_lo#0) [ keyboard_events_size#24 gfx_mode::$67 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$67 ] ) always clobbers reg byte a 
Statement [130] (byte~) gfx_mode::$68 ← *((const byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$68 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$68 ] ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte*) form_vic_bg2_lo#0) [ keyboard_events_size#24 gfx_mode::$69 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$69 ] ) always clobbers reg byte a 
Statement [133] (byte~) gfx_mode::$70 ← *((const byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$70 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$70 ] ) always clobbers reg byte a 
Statement [134] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte*) form_vic_bg3_lo#0) [ keyboard_events_size#24 gfx_mode::$71 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$71 ] ) always clobbers reg byte a 
Statement [136] if(*((const byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [141] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [151] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Statement [166] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ keyboard_event_scan::row#2 keyboard_events_size#119 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#119 keyboard_event_scan::keycode#1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#119 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [181] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT#0 [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [187] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL#0 [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [193] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE#0 [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] ) always clobbers reg byte a 
Statement [197] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ]
Statement [201] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [203] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ) always clobbers reg byte a 
Statement [209] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#118 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#118 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#118 ] ) always clobbers reg byte a 
Statement [210] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [214] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:171 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:171 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:177 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:177 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:183 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:183 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:189 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:189 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Statement [216] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:171 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:171 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:177 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:177 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:183 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:183 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:189 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:189 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ]
Statement [217] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:171 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:171 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:177 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:177 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:183 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:183 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:189 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:189 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] ) always clobbers reg byte a 
Statement [219] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_matrix_read:162 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_matrix_read:162 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 ] ) always clobbers reg byte a 
Statement [220] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_matrix_read:162 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_matrix_read::return#0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_matrix_read:162 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [272] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [273] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [274] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [275] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [276] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [277] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [279] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [280] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [281] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) FORM_SCREEN#0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [282] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) FORM_SCREEN#0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [283] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [285] *((const byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ form_mode::i#2 form_mode::i#1 ]
Statement [288] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [289] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [292] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ) always clobbers reg byte a 
Statement [320] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:271 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] main:2::form_mode:13::render_preset_name:305 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] ) always clobbers reg byte a 
Statement [325] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:271::print_str_at:321 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:305::print_str_at:321 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [327] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:271::print_str_at:321 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:305::print_str_at:321 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [334] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0 [ form_render_values::idx#2 form_field_ptr::return#2 ] ( main:2::form_mode:13::form_render_values:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::return#2 ] main:2::form_mode:13::form_render_values:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Statement [335] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2 [ form_render_values::idx#2 form_render_values::field#0 ] ( main:2::form_mode:13::form_render_values:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_render_values::field#0 ] main:2::form_mode:13::form_render_values:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_render_values::field#0 ] ) always clobbers reg byte a 
Statement [336] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] main:2::form_mode:13::form_render_values:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Statement [342] (word~) form_field_ptr::$2 ← *((const byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0) [ form_field_ptr::field_idx#2 form_field_ptr::$2 ] ( main:2::form_mode:13::form_render_values:269::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::field_idx#2 form_field_ptr::$2 ] main:2::form_mode:13::form_render_values:303::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::field_idx#2 form_field_ptr::$2 ] main:2::form_mode:13::form_control:294::form_field_ptr:365 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::field_idx#2 form_field_ptr::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Statement [344] (byte*) form_field_ptr::return#0 ← (byte*)(word~) form_field_ptr::$2 + (byte) form_field_ptr::x#0 [ form_field_ptr::return#0 ] ( main:2::form_mode:13::form_render_values:269::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::return#0 ] main:2::form_mode:13::form_render_values:303::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::return#0 ] main:2::form_mode:13::form_control:294::form_field_ptr:365 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#0 ] ) always clobbers reg byte a 
Statement [360] *((const byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#14 + (byte) apply_preset::i#2) [ apply_preset::preset#14 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#14 apply_preset::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ apply_preset::i#2 apply_preset::i#1 ]
Statement [366] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] ) always clobbers reg byte a 
Statement [367] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] ) always clobbers reg byte a 
Statement [371] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [372] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] ) always clobbers reg byte a reg byte y 
Statement [373] *((byte*) form_control::field#0) ← (byte~) form_control::$13 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [381] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$15 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Statement [382] *((byte*) form_control::field#0) ← (byte~) form_control::$15 [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ) always clobbers reg byte y 
Statement [383] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 [ keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ) always clobbers reg byte a 
Statement [395] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$24 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$24 ] ) always clobbers reg byte a 
Statement [398] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@15 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [399] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max#0 + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [400] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [402] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@15 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [403] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [406] (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#0) | (byte/word/signed word/dword/signed dword) $80 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$14 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$14 ] ) always clobbers reg byte a reg byte y 
Statement [407] *((byte*) form_control::field#0) ← (byte/word/dword~) form_control::$14 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [415] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ form_set_screen::y#2 form_set_screen::y#1 ]
Statement [420] (byte*~) print_char_cursor#77 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#77 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#77 print_set_screen::screen#2 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#77 print_set_screen::screen#2 ] ) always clobbers reg byte a 
Statement [422] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [425] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [428] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 [ print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:289 [ print_str_lines::ch#0 ]
Statement [434] (byte*~) print_char_cursor#78 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#78 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#78 print_line_cursor#22 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#78 print_line_cursor#22 ] ) always clobbers reg byte a 
Statement [437] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:259::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:265::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [438] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:259::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:265::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [440] (byte*) print_cls::sc#0 ← (byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 print_cls::sc#0 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#0 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#0 ] ) always clobbers reg byte a 
Statement [442] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_set_screen::screen#2 print_cls::sc#2 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#2 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [444] (byte*~) print_cls::$0 ← (byte*) print_set_screen::screen#2 + (word/signed word/dword/signed dword) $3e8 [ print_set_screen::screen#2 print_cls::sc#1 print_cls::$0 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 print_cls::$0 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 print_cls::$0 ] ) always clobbers reg byte a 
Statement [445] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1 [ print_set_screen::screen#2 print_cls::sc#1 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [484] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ]
Statement [485] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ) always clobbers reg byte a 
Statement [486] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ) always clobbers reg byte a 
Statement [490] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ) always clobbers reg byte a 
Statement [491] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ) always clobbers reg byte a 
Statement [492] (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] ) always clobbers reg byte a 
Statement [493] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word/signed dword/dword~) gfx_init_plane_fill::$6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ) always clobbers reg byte a 
Statement [496] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:298 [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [519] (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$8 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:472 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [521] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:472 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [534] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:470 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Statement [549] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:468 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Statement [559] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:468 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [563] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ ] ) always clobbers reg byte a 
Statement [566] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Statement [573] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Statement [583] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ ] ) always clobbers reg byte a 
Statement [590] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [595] (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$9 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$9 ] ) always clobbers reg byte a 
Statement [596] (byte) gfx_init_plane_8bppchunky::c#0 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ) always clobbers reg byte a 
Statement [597] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [600] if((word) gfx_init_plane_8bppchunky::x#1!=(word/signed word/dword/signed dword) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ) always clobbers reg byte a 
Statement [620] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:313 [ bitmap_line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:314 [ bitmap_line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:315 [ bitmap_line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:316 [ bitmap_line::y1#0 ]
Statement [622] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:317 [ bitmap_line::xd#2 ]
Statement [637] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [651] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [653] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:320 [ bitmap_line::xd#1 ]
Statement [667] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [682] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Statement [688] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [691] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [697] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [698] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [699] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::$0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] ) always clobbers reg byte a 
Statement [700] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::$0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [701] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [704] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [710] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [713] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [719] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [725] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [728] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [734] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [740] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [743] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [748] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) [ bitmap_clear::$3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_clear:609 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [749] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_clear:609 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [752] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_clear:609 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [763] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP#0 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Statement [764] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [779] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [785] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:460 [ ] ) always clobbers reg byte a 
Statement [788] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:460 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Statement [795] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:460 [ ] ) always clobbers reg byte a 
Statement [800] *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:458 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Statement [811] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [812] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:343 [ gfx_init_screen3::$1 ]
Statement [814] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [824] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [826] (byte) gfx_init_screen2::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:347 [ gfx_init_screen2::col#0 ]
Statement [827] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ]
Statement [829] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [839] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:452 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [841] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:452 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [852] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [853] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:354 [ gfx_init_screen0::$1 ]
Statement [855] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [862] *((const byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [863] *((const byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [19] if(*((const byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] ) always clobbers reg byte a 
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF#0 [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR#0 [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] ) always clobbers reg byte a 
Statement [25] if(*((const byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN#0 [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] ) always clobbers reg byte a 
Statement [28] if(*((const byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF#0 [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] ) always clobbers reg byte a 
Statement [31] if(*((const byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY#0 [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] ) always clobbers reg byte a 
Statement [35] if(*((const byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [38] if(*((const byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] ) always clobbers reg byte a 
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM#0 [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] ) always clobbers reg byte a 
Statement [42] if(*((const byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$20 ← *((const byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$20 ] ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte*) form_a_start_lo#0) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ) always clobbers reg byte a 
Statement [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$24 ] ) always clobbers reg byte a 
Statement [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$25 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$25 ] ) always clobbers reg byte a 
Statement [56] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ) always clobbers reg byte a 
Statement [57] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ) always clobbers reg byte a 
Statement [59] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] ) always clobbers reg byte a 
Statement [60] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$30 ← *((const byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] ) always clobbers reg byte a 
Statement [63] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte*) form_a_step_lo#0) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$32 ← *((const byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] ) always clobbers reg byte a 
Statement [66] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte*) form_a_mod_lo#0) [ keyboard_events_size#24 gfx_mode::$33 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$33 ] ) always clobbers reg byte a 
Statement [68] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [69] (byte~) gfx_mode::$34 ← *((const byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$34 ] ) always clobbers reg byte a 
Statement [70] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte*) form_b_start_lo#0) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ) always clobbers reg byte a 
Statement [73] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ) always clobbers reg byte a 
Statement [74] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ) always clobbers reg byte a 
Statement [75] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] ) always clobbers reg byte a 
Statement [76] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$38 ] ) always clobbers reg byte a 
Statement [77] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$39 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$39 ] ) always clobbers reg byte a 
Statement [79] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ) always clobbers reg byte a 
Statement [80] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ) always clobbers reg byte a 
Statement [82] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] ) always clobbers reg byte a 
Statement [85] (byte~) gfx_mode::$44 ← *((const byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte*) form_b_step_lo#0) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] ) always clobbers reg byte a 
Statement [88] (byte~) gfx_mode::$46 ← *((const byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$46 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$46 ] ) always clobbers reg byte a 
Statement [89] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte*) form_b_mod_lo#0) [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] ) always clobbers reg byte a 
Statement [91] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [92] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [93] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [96] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] ) always clobbers reg byte a 
Statement [97] (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$52 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$52 ] ) always clobbers reg byte a 
Statement [98] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$52 & (word/signed word/dword/signed dword) $3fff [ keyboard_events_size#24 gfx_mode::$54 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$54 ] ) always clobbers reg byte a 
Statement [99] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] ) always clobbers reg byte a reg byte y 
Statement [100] (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55 [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] ) always clobbers reg byte a 
Statement [103] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ) always clobbers reg byte a 
Statement [104] (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$57 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$57 ] ) always clobbers reg byte a 
Statement [105] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$57 & (word/signed word/dword/signed dword) $3fff [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ) always clobbers reg byte a 
Statement [106] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ) always clobbers reg byte a 
Statement [107] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ) always clobbers reg byte a 
Statement [112] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] ) always clobbers reg byte a 
Statement [113] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] ) always clobbers reg byte a 
Statement [116] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ) always clobbers reg byte a reg byte y 
Statement [123] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [124] (byte~) gfx_mode::$64 ← *((const byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$64 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$64 ] ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte*) form_vic_bg0_lo#0) [ keyboard_events_size#24 gfx_mode::$65 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$65 ] ) always clobbers reg byte a 
Statement [127] (byte~) gfx_mode::$66 ← *((const byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$66 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$66 ] ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte*) form_vic_bg1_lo#0) [ keyboard_events_size#24 gfx_mode::$67 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$67 ] ) always clobbers reg byte a 
Statement [130] (byte~) gfx_mode::$68 ← *((const byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$68 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$68 ] ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte*) form_vic_bg2_lo#0) [ keyboard_events_size#24 gfx_mode::$69 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$69 ] ) always clobbers reg byte a 
Statement [133] (byte~) gfx_mode::$70 ← *((const byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 [ keyboard_events_size#24 gfx_mode::$70 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$70 ] ) always clobbers reg byte a 
Statement [134] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte*) form_vic_bg3_lo#0) [ keyboard_events_size#24 gfx_mode::$71 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$71 ] ) always clobbers reg byte a 
Statement [136] if(*((const byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [141] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [151] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] ) always clobbers reg byte a 
Statement [165] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_event_scan::row_scan#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_event_scan::row_scan#0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a 
Statement [166] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ keyboard_event_scan::row#2 keyboard_events_size#119 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#119 keyboard_event_scan::keycode#1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#119 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Statement [181] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT#0 [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [187] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL#0 [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [193] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE#0 [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] ) always clobbers reg byte a 
Statement [197] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Statement [201] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [203] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ) always clobbers reg byte a 
Statement [209] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#118 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#118 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#118 ] ) always clobbers reg byte a 
Statement [210] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:143 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [214] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:171 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:171 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:177 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:177 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:183 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:183 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:189 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:189 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [216] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:171 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:171 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:177 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:177 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:183 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:183 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:189 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:189 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [217] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:171 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:171 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:177 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:177 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:183 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:183 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_event_pressed:189 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_event_pressed:189 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] ) always clobbers reg byte a 
Statement [219] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_matrix_read:162 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_matrix_read:162 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 ] ) always clobbers reg byte a 
Statement [220] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:143::keyboard_matrix_read:162 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_matrix_read::return#0 ] main:2::form_mode:13::form_control:294::keyboard_event_scan:375::keyboard_matrix_read:162 [ form_mode::preset_current#6 form_field_idx#28 form_control::field#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#119 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [272] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [273] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [274] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [275] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [276] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [277] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [279] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [280] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [281] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) FORM_SCREEN#0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [282] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) FORM_SCREEN#0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [283] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [285] *((const byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ) always clobbers reg byte a 
Statement [288] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [289] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [292] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ) always clobbers reg byte a 
Statement [320] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:271 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] main:2::form_mode:13::render_preset_name:305 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] ) always clobbers reg byte a 
Statement [325] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:271::print_str_at:321 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:305::print_str_at:321 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [327] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:271::print_str_at:321 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:305::print_str_at:321 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [334] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0 [ form_render_values::idx#2 form_field_ptr::return#2 ] ( main:2::form_mode:13::form_render_values:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::return#2 ] main:2::form_mode:13::form_render_values:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::return#2 ] ) always clobbers reg byte a 
Statement [335] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2 [ form_render_values::idx#2 form_render_values::field#0 ] ( main:2::form_mode:13::form_render_values:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_render_values::field#0 ] main:2::form_mode:13::form_render_values:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_render_values::field#0 ] ) always clobbers reg byte a 
Statement [336] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] main:2::form_mode:13::form_render_values:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] ) always clobbers reg byte a reg byte y 
Statement [342] (word~) form_field_ptr::$2 ← *((const byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0) [ form_field_ptr::field_idx#2 form_field_ptr::$2 ] ( main:2::form_mode:13::form_render_values:269::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::field_idx#2 form_field_ptr::$2 ] main:2::form_mode:13::form_render_values:303::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::field_idx#2 form_field_ptr::$2 ] main:2::form_mode:13::form_control:294::form_field_ptr:365 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::field_idx#2 form_field_ptr::$2 ] ) always clobbers reg byte a 
Statement [344] (byte*) form_field_ptr::return#0 ← (byte*)(word~) form_field_ptr::$2 + (byte) form_field_ptr::x#0 [ form_field_ptr::return#0 ] ( main:2::form_mode:13::form_render_values:269::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::return#0 ] main:2::form_mode:13::form_render_values:303::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::return#0 ] main:2::form_mode:13::form_control:294::form_field_ptr:365 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#0 ] ) always clobbers reg byte a 
Statement [360] *((const byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#14 + (byte) apply_preset::i#2) [ apply_preset::preset#14 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#14 apply_preset::i#2 ] ) always clobbers reg byte a 
Statement [366] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::return#3 ] ) always clobbers reg byte a 
Statement [367] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_control::field#0 ] ) always clobbers reg byte a 
Statement [371] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [372] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$13 ] ) always clobbers reg byte a reg byte y 
Statement [373] *((byte*) form_control::field#0) ← (byte~) form_control::$13 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [381] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_control::field#0 form_control::$15 ] ) always clobbers reg byte a reg byte y 
Statement [382] *((byte*) form_control::field#0) ← (byte~) form_control::$15 [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ) always clobbers reg byte y 
Statement [383] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 [ keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ) always clobbers reg byte a 
Statement [395] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$24 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$24 ] ) always clobbers reg byte a 
Statement [398] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@15 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [399] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max#0 + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [400] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [402] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@15 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [403] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [406] (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#0) | (byte/word/signed word/dword/signed dword) $80 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$14 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 form_control::$14 ] ) always clobbers reg byte a reg byte y 
Statement [407] *((byte*) form_control::field#0) ← (byte/word/dword~) form_control::$14 [ keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:294 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_control::field#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [415] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] ) always clobbers reg byte a 
Statement [420] (byte*~) print_char_cursor#77 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#77 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#77 print_set_screen::screen#2 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#77 print_set_screen::screen#2 ] ) always clobbers reg byte a 
Statement [422] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [425] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [428] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 [ print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Statement [434] (byte*~) print_char_cursor#78 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#78 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:259 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#78 print_line_cursor#22 ] main:2::form_mode:13::print_str_lines:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#78 print_line_cursor#22 ] ) always clobbers reg byte a 
Statement [437] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:259::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:265::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [438] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:259::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:265::print_ln:433 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [440] (byte*) print_cls::sc#0 ← (byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 print_cls::sc#0 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#0 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#0 ] ) always clobbers reg byte a 
Statement [442] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_set_screen::screen#2 print_cls::sc#2 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#2 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [444] (byte*~) print_cls::$0 ← (byte*) print_set_screen::screen#2 + (word/signed word/dword/signed dword) $3e8 [ print_set_screen::screen#2 print_cls::sc#1 print_cls::$0 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 print_cls::$0 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 print_cls::$0 ] ) always clobbers reg byte a 
Statement [445] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1 [ print_set_screen::screen#2 print_cls::sc#1 ] ( main:2::form_mode:13::print_cls:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 ] main:2::form_mode:13::print_cls:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [484] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ) always clobbers reg byte a 
Statement [485] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ) always clobbers reg byte a 
Statement [486] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ) always clobbers reg byte a 
Statement [490] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ) always clobbers reg byte a 
Statement [491] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ) always clobbers reg byte a 
Statement [492] (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$6 ] ) always clobbers reg byte a 
Statement [493] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word/signed dword/dword~) gfx_init_plane_fill::$6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ) always clobbers reg byte a 
Statement [496] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:478::gfx_init_plane_fill:481 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_blank:476::gfx_init_plane_fill:510 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_vertical2:474::gfx_init_plane_fill:513 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [519] (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$8 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:472 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$8 ] ) always clobbers reg byte a 
Statement [521] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:472 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [534] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:470 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [547] (byte~) gfx_init_plane_horisontal::$8 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$8 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:468 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$8 ] ) always clobbers reg byte a 
Statement [549] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:468 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [559] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:468 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [563] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ ] ) always clobbers reg byte a 
Statement [566] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [573] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Statement [583] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:466 [ ] ) always clobbers reg byte a 
Statement [590] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [595] (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$9 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$9 ] ) always clobbers reg byte a 
Statement [596] (byte) gfx_init_plane_8bppchunky::c#0 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ) always clobbers reg byte a 
Statement [597] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ) always clobbers reg byte y 
Statement [600] if((word) gfx_init_plane_8bppchunky::x#1!=(word/signed word/dword/signed dword) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:464 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ) always clobbers reg byte a 
Statement [620] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Statement [622] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Statement [637] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [651] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [653] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Statement [667] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [682] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Statement [688] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [691] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [697] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Statement [698] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [699] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::$0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::$0 ] ) always clobbers reg byte a 
Statement [700] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) [ bitmap_plot::$0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::$0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Statement [701] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:636::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyi:680::bitmap_plot:686 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674::bitmap_plot:708 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666::bitmap_plot:723 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660::bitmap_plot:738 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [704] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [710] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [713] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:629 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxi:674 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [719] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [725] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [728] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:650 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_xdyd:666 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [734] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [740] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [743] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:644 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_line:615::bitmap_line_ydxd:660 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [748] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) [ bitmap_clear::$3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_clear:609 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [749] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_clear:609 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [752] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_clear:609 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [761] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ) always clobbers reg byte a 
Statement [763] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP#0 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [764] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [771] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$6 ] ) always clobbers reg byte a 
Statement [777] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ) always clobbers reg byte a 
Statement [779] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:462::bitmap_init:607 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [785] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:460 [ ] ) always clobbers reg byte a 
Statement [788] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:460 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ) always clobbers reg byte a reg byte y 
Statement [795] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:460 [ ] ) always clobbers reg byte a 
Statement [800] *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:458 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ) always clobbers reg byte a reg byte y 
Statement [810] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ) always clobbers reg byte a 
Statement [811] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ) always clobbers reg byte a 
Statement [812] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ) always clobbers reg byte a 
Statement [814] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:456 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ) always clobbers reg byte y 
Statement [824] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ) always clobbers reg byte a 
Statement [826] (byte) gfx_init_screen2::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ) always clobbers reg byte a 
Statement [827] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ) always clobbers reg byte a 
Statement [829] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:454 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ) always clobbers reg byte y 
Statement [839] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:452 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ) always clobbers reg byte a 
Statement [841] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:452 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ) always clobbers reg byte y 
Statement [851] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ) always clobbers reg byte a 
Statement [852] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Statement [853] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Statement [855] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:450 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Statement [862] *((const byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [863] *((const byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ gfx_mode::vic_control2#2 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ gfx_mode::j#2 gfx_mode::j#1 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ gfx_mode::i#2 gfx_mode::i#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] : zp ZP_BYTE:15 , reg byte x , 
Potential registers zp ZP_BYTE:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp ZP_BYTE:16 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ get_vic_screen::return#5 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ get_vic_charset::return#2 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_BYTE:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:26 [ get_plane::return#14 ] : zp ZP_DWORD:26 , 
Potential registers zp ZP_BYTE:30 [ form_mode::i#2 form_mode::i#1 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] : zp ZP_BYTE:31 , reg byte x , 
Potential registers zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ] : zp ZP_BYTE:32 , reg byte x , 
Potential registers zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] : zp ZP_BYTE:33 , reg byte x , 
Potential registers zp ZP_BYTE:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:35 [ render_preset_name::name#13 ] : zp ZP_WORD:35 , 
Potential registers zp ZP_WORD:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_WORD:39 [ print_str_at::at#2 print_str_at::at#0 ] : zp ZP_WORD:39 , 
Potential registers zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ] : zp ZP_BYTE:41 , reg byte x , 
Potential registers zp ZP_BYTE:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] : zp ZP_BYTE:42 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:43 [ apply_preset::preset#14 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_BYTE:45 [ apply_preset::i#2 apply_preset::i#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ form_control::return#2 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:47 [ form_set_screen::line#2 form_set_screen::line#1 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_BYTE:49 [ form_set_screen::y#2 form_set_screen::y#1 ] : zp ZP_BYTE:49 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] : zp ZP_WORD:50 , 
Potential registers zp ZP_WORD:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ] : zp ZP_WORD:52 , 
Potential registers zp ZP_WORD:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] : zp ZP_WORD:54 , 
Potential registers zp ZP_WORD:56 [ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ] : zp ZP_WORD:56 , 
Potential registers zp ZP_DWORD:58 [ gfx_init_plane_fill::plane_addr#3 ] : zp ZP_DWORD:58 , 
Potential registers zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ] : zp ZP_BYTE:62 , reg byte x , 
Potential registers zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] : zp ZP_BYTE:63 , reg byte x , 
Potential registers zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] : zp ZP_WORD:64 , 
Potential registers zp ZP_BYTE:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] : zp ZP_BYTE:66 , reg byte x , 
Potential registers zp ZP_BYTE:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] : zp ZP_BYTE:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] : zp ZP_BYTE:68 , reg byte x , 
Potential registers zp ZP_WORD:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] : zp ZP_WORD:69 , 
Potential registers zp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] : zp ZP_BYTE:71 , reg byte x , 
Potential registers zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] : zp ZP_BYTE:72 , reg byte x , 
Potential registers zp ZP_WORD:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_BYTE:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] : zp ZP_BYTE:75 , reg byte x , 
Potential registers zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] : zp ZP_BYTE:76 , reg byte x , 
Potential registers zp ZP_WORD:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_BYTE:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] : zp ZP_BYTE:79 , reg byte x , 
Potential registers zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] : zp ZP_BYTE:80 , reg byte x , 
Potential registers zp ZP_WORD:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] : zp ZP_BYTE:83 , reg byte x , 
Potential registers zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] : zp ZP_BYTE:84 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] : zp ZP_WORD:85 , 
Potential registers zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] : zp ZP_BYTE:87 , reg byte x , 
Potential registers zp ZP_BYTE:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] : zp ZP_BYTE:88 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] : zp ZP_BYTE:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] : zp ZP_BYTE:90 , reg byte x , 
Potential registers zp ZP_WORD:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] : zp ZP_WORD:91 , 
Potential registers zp ZP_BYTE:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] : zp ZP_BYTE:93 , reg byte x , 
Potential registers zp ZP_WORD:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] : zp ZP_WORD:94 , 
Potential registers zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] : zp ZP_BYTE:96 , reg byte x , 
Potential registers zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] : zp ZP_BYTE:97 , reg byte x , 
Potential registers zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] : zp ZP_BYTE:98 , reg byte x , 
Potential registers zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] : zp ZP_BYTE:99 , reg byte x , 
Potential registers zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] : zp ZP_BYTE:100 , reg byte x , 
Potential registers zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] : zp ZP_BYTE:101 , reg byte x , 
Potential registers zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] : zp ZP_BYTE:102 , reg byte x , 
Potential registers zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] : zp ZP_BYTE:103 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] : zp ZP_BYTE:104 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] : zp ZP_BYTE:105 , reg byte x , 
Potential registers zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] : zp ZP_BYTE:106 , reg byte x , 
Potential registers zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] : zp ZP_BYTE:107 , reg byte x , 
Potential registers zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] : zp ZP_BYTE:108 , reg byte x , 
Potential registers zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] : zp ZP_BYTE:109 , reg byte x , 
Potential registers zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] : zp ZP_BYTE:110 , reg byte x , 
Potential registers zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] : zp ZP_BYTE:111 , reg byte x , 
Potential registers zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] : zp ZP_BYTE:112 , reg byte x , 
Potential registers zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] : zp ZP_BYTE:113 , reg byte x , 
Potential registers zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] : zp ZP_BYTE:114 , reg byte x , 
Potential registers zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] : zp ZP_BYTE:115 , reg byte x , 
Potential registers zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] : zp ZP_BYTE:116 , reg byte x , 
Potential registers zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] : zp ZP_BYTE:117 , reg byte x , 
Potential registers zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] : zp ZP_BYTE:118 , reg byte x , 
Potential registers zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] : zp ZP_BYTE:119 , reg byte x , 
Potential registers zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] : zp ZP_BYTE:120 , reg byte x , 
Potential registers zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] : zp ZP_BYTE:121 , reg byte x , 
Potential registers zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] : zp ZP_BYTE:122 , reg byte x , 
Potential registers zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp ZP_BYTE:123 , reg byte x , 
Potential registers zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp ZP_WORD:124 , 
Potential registers zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp ZP_BYTE:126 , reg byte x , 
Potential registers zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp ZP_BYTE:127 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp ZP_BYTE:128 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp ZP_BYTE:129 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp ZP_WORD:130 , 
Potential registers zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] : zp ZP_BYTE:132 , reg byte x , 
Potential registers zp ZP_WORD:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] : zp ZP_WORD:133 , 
Potential registers zp ZP_WORD:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] : zp ZP_WORD:135 , 
Potential registers zp ZP_BYTE:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] : zp ZP_BYTE:137 , reg byte x , 
Potential registers zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] : zp ZP_BYTE:138 , reg byte x , 
Potential registers zp ZP_WORD:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] : zp ZP_WORD:139 , 
Potential registers zp ZP_BYTE:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] : zp ZP_BYTE:141 , reg byte x , 
Potential registers zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] : zp ZP_BYTE:142 , reg byte x , 
Potential registers zp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] : zp ZP_BYTE:143 , reg byte x , 
Potential registers zp ZP_WORD:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] : zp ZP_WORD:144 , 
Potential registers zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] : zp ZP_BYTE:146 , reg byte x , 
Potential registers zp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] : zp ZP_BYTE:147 , reg byte x , 
Potential registers zp ZP_WORD:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] : zp ZP_WORD:148 , 
Potential registers zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] : zp ZP_BYTE:150 , reg byte x , 
Potential registers zp ZP_BYTE:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] : zp ZP_BYTE:151 , reg byte x , 
Potential registers zp ZP_WORD:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] : zp ZP_WORD:152 , 
Potential registers zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] : zp ZP_BYTE:154 , reg byte x , 
Potential registers zp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] : zp ZP_BYTE:155 , reg byte x , 
Potential registers zp ZP_WORD:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] : zp ZP_WORD:156 , 
Potential registers zp ZP_BYTE:158 [ gfx_mode::$20 ] : zp ZP_BYTE:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:159 [ gfx_mode::plane_a_offs#0 ] : zp ZP_BYTE:159 , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:160 [ get_plane::return#16 ] : zp ZP_DWORD:160 , 
Potential registers zp ZP_DWORD:164 [ gfx_mode::$22 ] : zp ZP_DWORD:164 , 
Potential registers zp ZP_DWORD:168 [ gfx_mode::plane_a#0 ] : zp ZP_DWORD:168 , 
Potential registers zp ZP_WORD:172 [ gfx_mode::$24 ] : zp ZP_WORD:172 , 
Potential registers zp ZP_BYTE:174 [ gfx_mode::$25 ] : zp ZP_BYTE:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:175 [ gfx_mode::$26 ] : zp ZP_WORD:175 , 
Potential registers zp ZP_BYTE:177 [ gfx_mode::$27 ] : zp ZP_BYTE:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:178 [ gfx_mode::$28 ] : zp ZP_WORD:178 , 
Potential registers zp ZP_BYTE:180 [ gfx_mode::$29 ] : zp ZP_BYTE:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:181 [ gfx_mode::$30 ] : zp ZP_BYTE:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:182 [ gfx_mode::$31 ] : zp ZP_BYTE:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:183 [ gfx_mode::$32 ] : zp ZP_BYTE:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:184 [ gfx_mode::$33 ] : zp ZP_BYTE:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:185 [ gfx_mode::$34 ] : zp ZP_BYTE:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:186 [ gfx_mode::plane_b_offs#0 ] : zp ZP_BYTE:186 , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:187 [ get_plane::return#17 ] : zp ZP_DWORD:187 , 
Potential registers zp ZP_DWORD:191 [ gfx_mode::$36 ] : zp ZP_DWORD:191 , 
Potential registers zp ZP_DWORD:195 [ gfx_mode::plane_b#0 ] : zp ZP_DWORD:195 , 
Potential registers zp ZP_WORD:199 [ gfx_mode::$38 ] : zp ZP_WORD:199 , 
Potential registers zp ZP_BYTE:201 [ gfx_mode::$39 ] : zp ZP_BYTE:201 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:202 [ gfx_mode::$40 ] : zp ZP_WORD:202 , 
Potential registers zp ZP_BYTE:204 [ gfx_mode::$41 ] : zp ZP_BYTE:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:205 [ gfx_mode::$42 ] : zp ZP_WORD:205 , 
Potential registers zp ZP_BYTE:207 [ gfx_mode::$43 ] : zp ZP_BYTE:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:208 [ gfx_mode::$44 ] : zp ZP_BYTE:208 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:209 [ gfx_mode::$45 ] : zp ZP_BYTE:209 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:210 [ gfx_mode::$46 ] : zp ZP_BYTE:210 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:211 [ gfx_mode::$47 ] : zp ZP_BYTE:211 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:212 [ get_vic_screen::return#10 ] : zp ZP_WORD:212 , 
Potential registers zp ZP_WORD:214 [ gfx_mode::$52 ] : zp ZP_WORD:214 , 
Potential registers zp ZP_WORD:216 [ gfx_mode::$54 ] : zp ZP_WORD:216 , 
Potential registers zp ZP_WORD:218 [ gfx_mode::$55 ] : zp ZP_WORD:218 , 
Potential registers zp ZP_BYTE:220 [ gfx_mode::$56 ] : zp ZP_BYTE:220 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:221 [ get_vic_charset::idx#0 ] : zp ZP_BYTE:221 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:222 [ get_vic_charset::return#4 ] : zp ZP_WORD:222 , 
Potential registers zp ZP_WORD:224 [ gfx_mode::$57 ] : zp ZP_WORD:224 , 
Potential registers zp ZP_WORD:226 [ gfx_mode::$59 ] : zp ZP_WORD:226 , 
Potential registers zp ZP_BYTE:228 [ gfx_mode::$60 ] : zp ZP_BYTE:228 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:229 [ gfx_mode::$61 ] : zp ZP_BYTE:229 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:230 [ gfx_mode::$62 ] : zp ZP_BYTE:230 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:231 [ get_vic_screen::return#11 ] : zp ZP_WORD:231 , 
Potential registers zp ZP_BYTE:233 [ gfx_mode::$64 ] : zp ZP_BYTE:233 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:234 [ gfx_mode::$65 ] : zp ZP_BYTE:234 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:235 [ gfx_mode::$66 ] : zp ZP_BYTE:235 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:236 [ gfx_mode::$67 ] : zp ZP_BYTE:236 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:237 [ gfx_mode::$68 ] : zp ZP_BYTE:237 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:238 [ gfx_mode::$69 ] : zp ZP_BYTE:238 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:239 [ gfx_mode::$70 ] : zp ZP_BYTE:239 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:240 [ gfx_mode::$71 ] : zp ZP_BYTE:240 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:241 [ keyboard_event_get::return#3 ] : zp ZP_BYTE:241 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:242 [ gfx_mode::keyboard_event#0 ] : zp ZP_BYTE:242 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:243 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:243 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:244 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:244 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ] : zp ZP_BYTE:245 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:246 [ keyboard_event_pressed::return#0 ] : zp ZP_BYTE:246 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:247 [ keyboard_event_scan::$0 ] : zp ZP_BYTE:247 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:248 [ keyboard_event_pressed::return#1 ] : zp ZP_BYTE:248 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:249 [ keyboard_event_scan::$3 ] : zp ZP_BYTE:249 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:250 [ keyboard_event_pressed::return#2 ] : zp ZP_BYTE:250 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:251 [ keyboard_event_scan::$6 ] : zp ZP_BYTE:251 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:252 [ keyboard_event_pressed::return#3 ] : zp ZP_BYTE:252 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:253 [ keyboard_event_scan::$9 ] : zp ZP_BYTE:253 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:254 [ keyboard_event_scan::$15 ] : zp ZP_BYTE:254 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:255 [ keyboard_event_scan::$16 ] : zp ZP_BYTE:255 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:256 [ keyboard_event_scan::event_type#0 ] : zp ZP_BYTE:256 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:257 [ keyboard_event_scan::$23 ] : zp ZP_BYTE:257 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:258 [ keyboard_event_pressed::$0 ] : zp ZP_BYTE:258 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ] : zp ZP_BYTE:259 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:260 [ keyboard_event_pressed::$1 ] : zp ZP_BYTE:260 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:261 [ keyboard_event_pressed::return#10 ] : zp ZP_BYTE:261 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:262 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:262 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:263 [ form_control::return#0 ] : zp ZP_BYTE:263 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:264 [ form_mode::$36 ] : zp ZP_BYTE:264 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:265 [ apply_preset::idx#0 ] : zp ZP_BYTE:265 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:266 [ form_field_ptr::return#2 ] : zp ZP_WORD:266 , 
Potential registers zp ZP_WORD:268 [ form_render_values::field#0 ] : zp ZP_WORD:268 , 
Potential registers zp ZP_BYTE:270 [ form_field_ptr::y#0 ] : zp ZP_BYTE:270 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:271 [ form_field_ptr::$2 ] : zp ZP_WORD:271 , 
Potential registers zp ZP_BYTE:273 [ form_field_ptr::x#0 ] : zp ZP_BYTE:273 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:274 [ form_field_ptr::return#0 ] : zp ZP_WORD:274 , 
Potential registers zp ZP_WORD:276 [ form_field_ptr::return#3 ] : zp ZP_WORD:276 , 
Potential registers zp ZP_WORD:278 [ form_control::field#0 ] : zp ZP_WORD:278 , 
Potential registers zp ZP_BYTE:280 [ form_control::$13 ] : zp ZP_BYTE:280 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:281 [ keyboard_event_get::return#4 ] : zp ZP_BYTE:281 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:282 [ form_control::key_event#0 ] : zp ZP_BYTE:282 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:283 [ form_control::$15 ] : zp ZP_BYTE:283 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:284 [ form_control::$16 ] : zp ZP_BYTE:284 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:285 [ form_control::$24 ] : zp ZP_BYTE:285 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:286 [ form_control::$14 ] : zp ZP_BYTE:286 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:287 [ form_set_screen::$0 ] : zp ZP_BYTE:287 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:288 [ form_set_screen::$1 ] : zp ZP_BYTE:288 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:289 [ print_str_lines::ch#0 ] : zp ZP_BYTE:289 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:290 [ print_cls::$0 ] : zp ZP_WORD:290 , 
Potential registers zp ZP_DWORD:292 [ gfx_init_plane_fill::$0 ] : zp ZP_DWORD:292 , 
Potential registers zp ZP_WORD:296 [ gfx_init_plane_fill::$1 ] : zp ZP_WORD:296 , 
Potential registers zp ZP_BYTE:298 [ gfx_init_plane_fill::gfxbCpuBank#0 ] : zp ZP_BYTE:298 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:299 [ gfx_init_plane_fill::gfxbCpuBank#1 ] : zp ZP_BYTE:299 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:300 [ gfx_init_plane_fill::$4 ] : zp ZP_WORD:300 , 
Potential registers zp ZP_WORD:302 [ gfx_init_plane_fill::$5 ] : zp ZP_WORD:302 , 
Potential registers zp ZP_WORD:304 [ gfx_init_plane_fill::$6 ] : zp ZP_WORD:304 , 
Potential registers zp ZP_BYTE:306 [ gfx_init_plane_horisontal2::$8 ] : zp ZP_BYTE:306 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:307 [ gfx_init_plane_horisontal2::row#0 ] : zp ZP_BYTE:307 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:308 [ gfx_init_plane_horisontal::$8 ] : zp ZP_BYTE:308 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:309 [ gfx_init_plane_charset8::$8 ] : zp ZP_BYTE:309 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:310 [ gfx_init_plane_8bppchunky::$9 ] : zp ZP_WORD:310 , 
Potential registers zp ZP_BYTE:312 [ gfx_init_plane_8bppchunky::c#0 ] : zp ZP_BYTE:312 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:313 [ bitmap_line::x0#0 ] : zp ZP_BYTE:313 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:314 [ bitmap_line::x1#0 ] : zp ZP_BYTE:314 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:315 [ bitmap_line::y0#0 ] : zp ZP_BYTE:315 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:316 [ bitmap_line::y1#0 ] : zp ZP_BYTE:316 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:317 [ bitmap_line::xd#2 ] : zp ZP_BYTE:317 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:318 [ bitmap_line::yd#2 ] : zp ZP_BYTE:318 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:319 [ bitmap_line::yd#1 ] : zp ZP_BYTE:319 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:320 [ bitmap_line::xd#1 ] : zp ZP_BYTE:320 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:321 [ bitmap_line::yd#10 ] : zp ZP_BYTE:321 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:322 [ bitmap_line::yd#11 ] : zp ZP_BYTE:322 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:323 [ bitmap_line_xdyi::$6 ] : zp ZP_BYTE:323 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:324 [ bitmap_plot::plotter_x#0 ] : zp ZP_WORD:324 , 
Potential registers zp ZP_WORD:326 [ bitmap_plot::plotter_y#0 ] : zp ZP_WORD:326 , 
Potential registers zp ZP_WORD:328 [ bitmap_plot::$0 ] : zp ZP_WORD:328 , 
Potential registers zp ZP_BYTE:330 [ bitmap_plot::$1 ] : zp ZP_BYTE:330 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:331 [ bitmap_line_ydxi::$6 ] : zp ZP_BYTE:331 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:332 [ bitmap_line_xdyd::$6 ] : zp ZP_BYTE:332 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:333 [ bitmap_line_ydxd::$6 ] : zp ZP_BYTE:333 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:334 [ bitmap_clear::$3 ] : zp ZP_WORD:334 , 
Potential registers zp ZP_BYTE:336 [ bitmap_init::$0 ] : zp ZP_BYTE:336 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:337 [ bitmap_init::$6 ] : zp ZP_BYTE:337 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:338 [ bitmap_init::$7 ] : zp ZP_BYTE:338 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:339 [ bitmap_init::$8 ] : zp ZP_BYTE:339 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:340 [ bitmap_init::$9 ] : zp ZP_BYTE:340 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:341 [ bitmap_init::$10 ] : zp ZP_BYTE:341 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:342 [ gfx_init_screen3::$0 ] : zp ZP_BYTE:342 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:343 [ gfx_init_screen3::$1 ] : zp ZP_BYTE:343 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:344 [ gfx_init_screen3::$2 ] : zp ZP_BYTE:344 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:345 [ gfx_init_screen3::$3 ] : zp ZP_BYTE:345 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:346 [ gfx_init_screen2::$0 ] : zp ZP_BYTE:346 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:347 [ gfx_init_screen2::col#0 ] : zp ZP_BYTE:347 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ] : zp ZP_BYTE:348 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:349 [ gfx_init_screen2::$3 ] : zp ZP_BYTE:349 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:350 [ gfx_init_screen2::$4 ] : zp ZP_BYTE:350 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:351 [ gfx_init_screen1::$0 ] : zp ZP_BYTE:351 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:352 [ gfx_init_screen1::$1 ] : zp ZP_BYTE:352 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:353 [ gfx_init_screen0::$0 ] : zp ZP_BYTE:353 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:354 [ gfx_init_screen0::$1 ] : zp ZP_BYTE:354 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:355 [ gfx_init_screen0::$2 ] : zp ZP_BYTE:355 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:356 [ gfx_init_screen0::$3 ] : zp ZP_BYTE:356 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 200,002: zp ZP_BYTE:254 [ keyboard_event_scan::$15 ] 200,002: zp ZP_BYTE:255 [ keyboard_event_scan::$16 ] 200,002: zp ZP_BYTE:256 [ keyboard_event_scan::event_type#0 ] 200,002: zp ZP_BYTE:257 [ keyboard_event_scan::$23 ] 178,573.21: zp ZP_BYTE:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 119,043.1: zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ] 21,001.74: zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 12,778.06: zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ] 4: zp ZP_BYTE:247 [ keyboard_event_scan::$0 ] 4: zp ZP_BYTE:249 [ keyboard_event_scan::$3 ] 4: zp ZP_BYTE:251 [ keyboard_event_scan::$6 ] 4: zp ZP_BYTE:253 [ keyboard_event_scan::$9 ] 
Uplift Scope [] 588,355.23: zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ] 3,703: zp ZP_WORD:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ] 2,659.38: zp ZP_WORD:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] 226.56: zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 105.45: zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ] 16.73: zp ZP_BYTE:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] 
Uplift Scope [keyboard_matrix_read] 20,002: zp ZP_BYTE:244 [ keyboard_matrix_read::return#2 ] 10,003: zp ZP_BYTE:243 [ keyboard_matrix_read::rowid#0 ] 3,334.33: zp ZP_BYTE:262 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [gfx_init_plane_charset8] 4,004: zp ZP_BYTE:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] 2,002: zp ZP_BYTE:309 [ gfx_init_plane_charset8::$8 ] 1,723.94: zp ZP_BYTE:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 1,044.93: zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 845.22: zp ZP_WORD:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] 783: zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 192.31: zp ZP_WORD:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] 165.93: zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 17.79: zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Uplift Scope [gfx_mode] 2,104.5: zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] 2,002: zp ZP_BYTE:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ] 1,663.27: zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] 353.5: zp ZP_BYTE:11 [ gfx_mode::j#2 gfx_mode::j#1 ] 353.5: zp ZP_BYTE:12 [ gfx_mode::i#2 gfx_mode::i#1 ] 202: zp ZP_BYTE:242 [ gfx_mode::keyboard_event#0 ] 180.36: zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 44: zp ZP_BYTE:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 12: zp ZP_BYTE:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] 4: zp ZP_BYTE:158 [ gfx_mode::$20 ] 4: zp ZP_DWORD:164 [ gfx_mode::$22 ] 4: zp ZP_WORD:172 [ gfx_mode::$24 ] 4: zp ZP_BYTE:174 [ gfx_mode::$25 ] 4: zp ZP_WORD:175 [ gfx_mode::$26 ] 4: zp ZP_BYTE:177 [ gfx_mode::$27 ] 4: zp ZP_WORD:178 [ gfx_mode::$28 ] 4: zp ZP_BYTE:180 [ gfx_mode::$29 ] 4: zp ZP_BYTE:181 [ gfx_mode::$30 ] 4: zp ZP_BYTE:182 [ gfx_mode::$31 ] 4: zp ZP_BYTE:183 [ gfx_mode::$32 ] 4: zp ZP_BYTE:184 [ gfx_mode::$33 ] 4: zp ZP_BYTE:185 [ gfx_mode::$34 ] 4: zp ZP_DWORD:191 [ gfx_mode::$36 ] 4: zp ZP_WORD:199 [ gfx_mode::$38 ] 4: zp ZP_BYTE:201 [ gfx_mode::$39 ] 4: zp ZP_WORD:202 [ gfx_mode::$40 ] 4: zp ZP_BYTE:204 [ gfx_mode::$41 ] 4: zp ZP_WORD:205 [ gfx_mode::$42 ] 4: zp ZP_BYTE:207 [ gfx_mode::$43 ] 4: zp ZP_BYTE:208 [ gfx_mode::$44 ] 4: zp ZP_BYTE:209 [ gfx_mode::$45 ] 4: zp ZP_BYTE:210 [ gfx_mode::$46 ] 4: zp ZP_BYTE:211 [ gfx_mode::$47 ] 4: zp ZP_WORD:216 [ gfx_mode::$54 ] 4: zp ZP_WORD:218 [ gfx_mode::$55 ] 4: zp ZP_WORD:226 [ gfx_mode::$59 ] 4: zp ZP_BYTE:228 [ gfx_mode::$60 ] 4: zp ZP_BYTE:229 [ gfx_mode::$61 ] 4: zp ZP_BYTE:230 [ gfx_mode::$62 ] 4: zp ZP_BYTE:233 [ gfx_mode::$64 ] 4: zp ZP_BYTE:234 [ gfx_mode::$65 ] 4: zp ZP_BYTE:235 [ gfx_mode::$66 ] 4: zp ZP_BYTE:236 [ gfx_mode::$67 ] 4: zp ZP_BYTE:237 [ gfx_mode::$68 ] 4: zp ZP_BYTE:238 [ gfx_mode::$69 ] 4: zp ZP_BYTE:239 [ gfx_mode::$70 ] 4: zp ZP_BYTE:240 [ gfx_mode::$71 ] 2: zp ZP_BYTE:4 [ gfx_mode::vic_control2#2 ] 2: zp ZP_WORD:214 [ gfx_mode::$52 ] 2: zp ZP_WORD:224 [ gfx_mode::$57 ] 1.14: zp ZP_DWORD:168 [ gfx_mode::plane_a#0 ] 1.14: zp ZP_DWORD:195 [ gfx_mode::plane_b#0 ] 0.8: zp ZP_BYTE:159 [ gfx_mode::plane_a_offs#0 ] 0.8: zp ZP_BYTE:186 [ gfx_mode::plane_b_offs#0 ] 0.5: zp ZP_BYTE:220 [ gfx_mode::$56 ] 
Uplift Scope [print_str_at] 3,005.5: zp ZP_WORD:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] 2,002: zp ZP_WORD:39 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplift Scope [form_field_ptr] 2,341.67: zp ZP_BYTE:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] 2,002: zp ZP_WORD:266 [ form_field_ptr::return#2 ] 251.25: zp ZP_WORD:274 [ form_field_ptr::return#0 ] 6: zp ZP_BYTE:270 [ form_field_ptr::y#0 ] 4: zp ZP_BYTE:273 [ form_field_ptr::x#0 ] 4: zp ZP_WORD:276 [ form_field_ptr::return#3 ] 1: zp ZP_WORD:271 [ form_field_ptr::$2 ] 
Uplift Scope [form_render_values] 2,168.83: zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ] 2,002: zp ZP_WORD:268 [ form_render_values::field#0 ] 
Uplift Scope [apply_preset] 3,503.5: zp ZP_BYTE:45 [ apply_preset::i#2 apply_preset::i#1 ] 200.2: zp ZP_WORD:43 [ apply_preset::preset#14 ] 11.18: zp ZP_BYTE:265 [ apply_preset::idx#0 ] 
Uplift Scope [print_str_lines] 1,939.17: zp ZP_WORD:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] 667.33: zp ZP_BYTE:289 [ print_str_lines::ch#0 ] 
Uplift Scope [form_mode] 2,002: zp ZP_BYTE:264 [ form_mode::$36 ] 353.5: zp ZP_BYTE:30 [ form_mode::i#2 form_mode::i#1 ] 212.21: zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 
Uplift Scope [form_control] 2,002: zp ZP_BYTE:263 [ form_control::return#0 ] 333.67: zp ZP_BYTE:46 [ form_control::return#2 ] 4: zp ZP_BYTE:280 [ form_control::$13 ] 4: zp ZP_BYTE:283 [ form_control::$15 ] 4: zp ZP_BYTE:284 [ form_control::$16 ] 4: zp ZP_BYTE:285 [ form_control::$24 ] 4: zp ZP_BYTE:286 [ form_control::$14 ] 2.67: zp ZP_BYTE:282 [ form_control::key_event#0 ] 0.59: zp ZP_WORD:278 [ form_control::field#0 ] 
Uplift Scope [bitmap_plot] 1,012: zp ZP_BYTE:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] 506.5: zp ZP_BYTE:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 4: zp ZP_WORD:326 [ bitmap_plot::plotter_y#0 ] 4: zp ZP_BYTE:330 [ bitmap_plot::$1 ] 2: zp ZP_WORD:324 [ bitmap_plot::plotter_x#0 ] 1: zp ZP_WORD:328 [ bitmap_plot::$0 ] 
Uplift Scope [gfx_init_plane_8bppchunky] 362.64: zp ZP_BYTE:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] 297.35: zp ZP_WORD:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] 202: zp ZP_WORD:310 [ gfx_init_plane_8bppchunky::$9 ] 202: zp ZP_BYTE:312 [ gfx_init_plane_8bppchunky::c#0 ] 181.8: zp ZP_WORD:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] 25.96: zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Uplift Scope [gfx_init_screen2] 202: zp ZP_BYTE:346 [ gfx_init_screen2::$0 ] 202: zp ZP_BYTE:349 [ gfx_init_screen2::$3 ] 202: zp ZP_BYTE:350 [ gfx_init_screen2::$4 ] 189.38: zp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 151.5: zp ZP_BYTE:347 [ gfx_init_screen2::col#0 ] 109.46: zp ZP_WORD:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] 101: zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ] 27.68: zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Uplift Scope [bitmap_line_xdyi] 482.47: zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 265: zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 202: zp ZP_BYTE:323 [ bitmap_line_xdyi::$6 ] 118.72: zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] 18.71: zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] 15.64: zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] 10.17: zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] 
Uplift Scope [bitmap_line_xdyd] 482.47: zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 265: zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 202: zp ZP_BYTE:332 [ bitmap_line_xdyd::$6 ] 118.72: zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] 18.71: zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] 15.64: zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] 10.17: zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] 
Uplift Scope [bitmap_line_ydxi] 482.47: zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 265: zp ZP_BYTE:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 202: zp ZP_BYTE:331 [ bitmap_line_ydxi::$6 ] 118.72: zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 18.71: zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 15.64: zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 10.17: zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Uplift Scope [bitmap_line_ydxd] 482.47: zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 265: zp ZP_BYTE:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 202: zp ZP_BYTE:333 [ bitmap_line_ydxd::$6 ] 118.72: zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 18.71: zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 15.64: zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 10.17: zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Uplift Scope [gfx_init_screen0] 202: zp ZP_BYTE:353 [ gfx_init_screen0::$0 ] 202: zp ZP_BYTE:355 [ gfx_init_screen0::$2 ] 202: zp ZP_BYTE:356 [ gfx_init_screen0::$3 ] 194.79: zp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 116.93: zp ZP_WORD:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] 101: zp ZP_BYTE:354 [ gfx_init_screen0::$1 ] 28.8: zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Uplift Scope [gfx_init_screen3] 202: zp ZP_BYTE:342 [ gfx_init_screen3::$0 ] 202: zp ZP_BYTE:344 [ gfx_init_screen3::$2 ] 202: zp ZP_BYTE:345 [ gfx_init_screen3::$3 ] 194.79: zp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 116.93: zp ZP_WORD:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] 101: zp ZP_BYTE:343 [ gfx_init_screen3::$1 ] 28.8: zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Uplift Scope [gfx_init_plane_horisontal] 592: zp ZP_WORD:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] 202: zp ZP_BYTE:308 [ gfx_init_plane_horisontal::$8 ] 176.75: zp ZP_BYTE:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] 27.68: zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Uplift Scope [gfx_init_screen1] 212.1: zp ZP_BYTE:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] 202: zp ZP_BYTE:351 [ gfx_init_screen1::$0 ] 202: zp ZP_BYTE:352 [ gfx_init_screen1::$1 ] 143.1: zp ZP_WORD:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] 31.88: zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Uplift Scope [form_set_screen] 218.83: zp ZP_BYTE:49 [ form_set_screen::y#2 form_set_screen::y#1 ] 202: zp ZP_BYTE:287 [ form_set_screen::$0 ] 202: zp ZP_BYTE:288 [ form_set_screen::$1 ] 148.13: zp ZP_WORD:47 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Uplift Scope [gfx_init_plane_horisontal2] 202: zp ZP_BYTE:306 [ gfx_init_plane_horisontal2::$8 ] 202: zp ZP_BYTE:307 [ gfx_init_plane_horisontal2::row#0 ] 191.9: zp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 143.1: zp ZP_WORD:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] 31.88: zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Uplift Scope [gfx_init_charset] 214.5: zp ZP_WORD:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] 202: zp ZP_BYTE:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] 169.27: zp ZP_WORD:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] 19.64: zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplift Scope [gfx_init_plane_fill] 227.6: zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] 218.83: zp ZP_BYTE:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] 20.17: zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 20: zp ZP_BYTE:299 [ gfx_init_plane_fill::gfxbCpuBank#1 ] 5.32: zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ] 4: zp ZP_DWORD:292 [ gfx_init_plane_fill::$0 ] 4: zp ZP_WORD:296 [ gfx_init_plane_fill::$1 ] 4: zp ZP_WORD:300 [ gfx_init_plane_fill::$4 ] 4: zp ZP_WORD:302 [ gfx_init_plane_fill::$5 ] 2: zp ZP_BYTE:298 [ gfx_init_plane_fill::gfxbCpuBank#0 ] 2: zp ZP_WORD:304 [ gfx_init_plane_fill::$6 ] 0.57: zp ZP_DWORD:58 [ gfx_init_plane_fill::plane_addr#3 ] 
Uplift Scope [bitmap_clear] 227.6: zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 218.83: zp ZP_BYTE:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 20.17: zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 2: zp ZP_WORD:334 [ bitmap_clear::$3 ] 
Uplift Scope [gfx_init_screen4] 221.6: zp ZP_WORD:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] 218.83: zp ZP_BYTE:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] 20.17: zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplift Scope [gfx_init_plane_vertical] 221.6: zp ZP_WORD:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] 218.83: zp ZP_BYTE:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] 20.17: zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplift Scope [print_cls] 257.5: zp ZP_WORD:56 [ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ] 202: zp ZP_WORD:290 [ print_cls::$0 ] 
Uplift Scope [dtvSetCpuBankSegment1] 311: zp ZP_BYTE:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplift Scope [keyboard_event_get] 202: zp ZP_BYTE:241 [ keyboard_event_get::return#3 ] 30.25: zp ZP_BYTE:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 4: zp ZP_BYTE:281 [ keyboard_event_get::return#4 ] 
Uplift Scope [bitmap_init] 39.11: zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 24.93: zp ZP_BYTE:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 23.83: zp ZP_BYTE:127 [ bitmap_init::x#2 bitmap_init::x#1 ] 22.5: zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ] 22: zp ZP_BYTE:336 [ bitmap_init::$0 ] 22: zp ZP_BYTE:338 [ bitmap_init::$7 ] 22: zp ZP_BYTE:339 [ bitmap_init::$8 ] 22: zp ZP_BYTE:340 [ bitmap_init::$9 ] 22: zp ZP_BYTE:341 [ bitmap_init::$10 ] 11: zp ZP_BYTE:337 [ bitmap_init::$6 ] 
Uplift Scope [render_preset_name] 217.36: zp ZP_BYTE:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] 2: zp ZP_WORD:35 [ render_preset_name::name#13 ] 
Uplift Scope [keyboard_event_pressed] 4: zp ZP_BYTE:246 [ keyboard_event_pressed::return#0 ] 4: zp ZP_BYTE:248 [ keyboard_event_pressed::return#1 ] 4: zp ZP_BYTE:250 [ keyboard_event_pressed::return#2 ] 4: zp ZP_BYTE:252 [ keyboard_event_pressed::return#3 ] 4: zp ZP_BYTE:258 [ keyboard_event_pressed::$0 ] 4: zp ZP_BYTE:260 [ keyboard_event_pressed::$1 ] 2: zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ] 1.67: zp ZP_BYTE:261 [ keyboard_event_pressed::return#10 ] 1.33: zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ] 
Uplift Scope [gfx_init_vic_bitmap] 27.5: zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Uplift Scope [get_vic_screen] 10.8: zp ZP_BYTE:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] 4: zp ZP_WORD:212 [ get_vic_screen::return#10 ] 4: zp ZP_WORD:231 [ get_vic_screen::return#11 ] 1: zp ZP_WORD:21 [ get_vic_screen::return#5 ] 
Uplift Scope [get_plane] 10.29: zp ZP_BYTE:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] 4: zp ZP_DWORD:160 [ get_plane::return#16 ] 4: zp ZP_DWORD:187 [ get_plane::return#17 ] 1: zp ZP_DWORD:26 [ get_plane::return#14 ] 
Uplift Scope [bitmap_line] 1.75: zp ZP_BYTE:316 [ bitmap_line::y1#0 ] 1.67: zp ZP_BYTE:315 [ bitmap_line::y0#0 ] 1.32: zp ZP_BYTE:314 [ bitmap_line::x1#0 ] 1.26: zp ZP_BYTE:313 [ bitmap_line::x0#0 ] 0.89: zp ZP_BYTE:318 [ bitmap_line::yd#2 ] 0.89: zp ZP_BYTE:319 [ bitmap_line::yd#1 ] 0.89: zp ZP_BYTE:321 [ bitmap_line::yd#10 ] 0.89: zp ZP_BYTE:322 [ bitmap_line::yd#11 ] 0.7: zp ZP_BYTE:317 [ bitmap_line::xd#2 ] 0.7: zp ZP_BYTE:320 [ bitmap_line::xd#1 ] 
Uplift Scope [get_vic_charset] 4: zp ZP_WORD:222 [ get_vic_charset::return#4 ] 3: zp ZP_BYTE:221 [ get_vic_charset::idx#0 ] 0.67: zp ZP_WORD:23 [ get_vic_charset::return#2 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_set_screen] 
Uplift Scope [keyboard_init] 
Uplift Scope [main] 
Uplift Scope [gfx_init] 
Uplift Scope [gfx_init_plane_vertical2] 
Uplift Scope [gfx_init_plane_blank] 
Uplift Scope [gfx_init_plane_full] 

Uplifting [keyboard_event_scan] best 15511606 combination reg byte a [ keyboard_event_scan::$15 ] reg byte a [ keyboard_event_scan::$16 ] zp ZP_BYTE:256 [ keyboard_event_scan::event_type#0 ] zp ZP_BYTE:257 [ keyboard_event_scan::$23 ] zp ZP_BYTE:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ] zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ] zp ZP_BYTE:247 [ keyboard_event_scan::$0 ] zp ZP_BYTE:249 [ keyboard_event_scan::$3 ] zp ZP_BYTE:251 [ keyboard_event_scan::$6 ] zp ZP_BYTE:253 [ keyboard_event_scan::$9 ] 
Limited combination testing to 10 combinations of 5308416 possible.
Uplifting [] best 15511588 combination zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ] zp ZP_WORD:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ] zp ZP_WORD:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ] reg byte x [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [keyboard_matrix_read] best 15421585 combination reg byte a [ keyboard_matrix_read::return#2 ] reg byte x [ keyboard_matrix_read::rowid#0 ] zp ZP_BYTE:262 [ keyboard_matrix_read::return#0 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_plane_charset8] best 15406585 combination reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] reg byte a [ gfx_init_plane_charset8::$8 ] zp ZP_BYTE:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] zp ZP_WORD:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] zp ZP_WORD:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Limited combination testing to 10 combinations of 1152 possible.
Uplifting [print_str_at] best 15406585 combination zp ZP_WORD:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] zp ZP_WORD:39 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplifting [form_field_ptr] best 15403570 combination reg byte y [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] zp ZP_WORD:266 [ form_field_ptr::return#2 ] zp ZP_WORD:274 [ form_field_ptr::return#0 ] reg byte x [ form_field_ptr::y#0 ] zp ZP_BYTE:273 [ form_field_ptr::x#0 ] zp ZP_WORD:276 [ form_field_ptr::return#3 ] zp ZP_WORD:271 [ form_field_ptr::$2 ] 
Limited combination testing to 10 combinations of 48 possible.
Uplifting [form_render_values] best 15403570 combination zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ] zp ZP_WORD:268 [ form_render_values::field#0 ] 
Uplifting [apply_preset] best 15391237 combination reg byte y [ apply_preset::i#2 apply_preset::i#1 ] zp ZP_WORD:43 [ apply_preset::preset#14 ] reg byte a [ apply_preset::idx#0 ] 
Limited combination testing to 10 combinations of 12 possible.
Uplifting [print_str_lines] best 15379237 combination zp ZP_WORD:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [form_mode] best 15372037 combination reg byte a [ form_mode::$36 ] reg byte x [ form_mode::i#2 form_mode::i#1 ] zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 
Limited combination testing to 10 combinations of 24 possible.
Uplifting [form_control] best 15365028 combination reg byte a [ form_control::return#0 ] reg byte x [ form_control::return#2 ] zp ZP_BYTE:280 [ form_control::$13 ] zp ZP_BYTE:283 [ form_control::$15 ] zp ZP_BYTE:284 [ form_control::$16 ] zp ZP_BYTE:285 [ form_control::$24 ] zp ZP_BYTE:286 [ form_control::$14 ] zp ZP_BYTE:282 [ form_control::key_event#0 ] zp ZP_WORD:278 [ form_control::field#0 ] 
Limited combination testing to 10 combinations of 65536 possible.
Uplifting [bitmap_plot] best 15362619 combination reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] zp ZP_WORD:326 [ bitmap_plot::plotter_y#0 ] zp ZP_BYTE:330 [ bitmap_plot::$1 ] zp ZP_WORD:324 [ bitmap_plot::plotter_x#0 ] zp ZP_WORD:328 [ bitmap_plot::$0 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [gfx_init_plane_8bppchunky] best 15361389 combination reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] zp ZP_WORD:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] zp ZP_WORD:310 [ gfx_init_plane_8bppchunky::$9 ] reg byte a [ gfx_init_plane_8bppchunky::c#0 ] zp ZP_WORD:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen2] best 15360189 combination reg byte a [ gfx_init_screen2::$0 ] reg byte a [ gfx_init_screen2::$3 ] zp ZP_BYTE:350 [ gfx_init_screen2::$4 ] zp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] zp ZP_BYTE:347 [ gfx_init_screen2::col#0 ] zp ZP_WORD:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ] zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [bitmap_line_xdyi] best 15359589 combination zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] reg byte x [ bitmap_line_xdyi::$6 ] zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_xdyd] best 15358989 combination zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] reg byte x [ bitmap_line_xdyd::$6 ] zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxi] best 15357983 combination zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] reg byte a [ bitmap_line_ydxi::$6 ] zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxd] best 15356977 combination zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] reg byte a [ bitmap_line_ydxd::$6 ] zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [gfx_init_screen0] best 15355777 combination reg byte a [ gfx_init_screen0::$0 ] reg byte a [ gfx_init_screen0::$2 ] zp ZP_BYTE:356 [ gfx_init_screen0::$3 ] zp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] zp ZP_WORD:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] zp ZP_BYTE:354 [ gfx_init_screen0::$1 ] zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_screen3] best 15354577 combination reg byte a [ gfx_init_screen3::$0 ] reg byte a [ gfx_init_screen3::$2 ] zp ZP_BYTE:345 [ gfx_init_screen3::$3 ] zp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] zp ZP_WORD:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] zp ZP_BYTE:343 [ gfx_init_screen3::$1 ] zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_plane_horisontal] best 15353077 combination zp ZP_WORD:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] reg byte a [ gfx_init_plane_horisontal::$8 ] reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen1] best 15351477 combination reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] reg byte a [ gfx_init_screen1::$0 ] zp ZP_BYTE:352 [ gfx_init_screen1::$1 ] zp ZP_WORD:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [form_set_screen] best 15349377 combination reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ] reg byte a [ form_set_screen::$0 ] zp ZP_BYTE:288 [ form_set_screen::$1 ] zp ZP_WORD:47 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Limited combination testing to 10 combinations of 48 possible.
Uplifting [gfx_init_plane_horisontal2] best 15348377 combination reg byte a [ gfx_init_plane_horisontal2::$8 ] reg byte a [ gfx_init_plane_horisontal2::row#0 ] zp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] zp ZP_WORD:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_charset] best 15347477 combination zp ZP_WORD:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] zp ZP_WORD:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplifting [gfx_init_plane_fill] best 15346574 combination zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] reg byte x [ gfx_init_plane_fill::gfxbCpuBank#1 ] zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ] zp ZP_DWORD:292 [ gfx_init_plane_fill::$0 ] zp ZP_WORD:296 [ gfx_init_plane_fill::$1 ] zp ZP_WORD:300 [ gfx_init_plane_fill::$4 ] zp ZP_WORD:302 [ gfx_init_plane_fill::$5 ] zp ZP_BYTE:298 [ gfx_init_plane_fill::gfxbCpuBank#0 ] zp ZP_WORD:304 [ gfx_init_plane_fill::$6 ] zp ZP_DWORD:58 [ gfx_init_plane_fill::plane_addr#3 ] 
Limited combination testing to 10 combinations of 96 possible.
Uplifting [bitmap_clear] best 15345674 combination zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp ZP_WORD:334 [ bitmap_clear::$3 ] 
Uplifting [gfx_init_screen4] best 15344774 combination zp ZP_WORD:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplifting [gfx_init_plane_vertical] best 15343874 combination zp ZP_WORD:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplifting [print_cls] best 15343874 combination zp ZP_WORD:56 [ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ] zp ZP_WORD:290 [ print_cls::$0 ] 
Uplifting [dtvSetCpuBankSegment1] best 15343735 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplifting [keyboard_event_get] best 15342826 combination reg byte a [ keyboard_event_get::return#3 ] reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] zp ZP_BYTE:281 [ keyboard_event_get::return#4 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [bitmap_init] best 15342526 combination zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] zp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ] zp ZP_BYTE:336 [ bitmap_init::$0 ] zp ZP_BYTE:338 [ bitmap_init::$7 ] zp ZP_BYTE:339 [ bitmap_init::$8 ] zp ZP_BYTE:340 [ bitmap_init::$9 ] zp ZP_BYTE:341 [ bitmap_init::$10 ] zp ZP_BYTE:337 [ bitmap_init::$6 ] 
Limited combination testing to 10 combinations of 138240 possible.
Uplifting [render_preset_name] best 15342190 combination reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] zp ZP_WORD:35 [ render_preset_name::name#13 ] 
Uplifting [keyboard_event_pressed] best 15342178 combination reg byte a [ keyboard_event_pressed::return#0 ] reg byte a [ keyboard_event_pressed::return#1 ] zp ZP_BYTE:250 [ keyboard_event_pressed::return#2 ] zp ZP_BYTE:252 [ keyboard_event_pressed::return#3 ] zp ZP_BYTE:258 [ keyboard_event_pressed::$0 ] zp ZP_BYTE:260 [ keyboard_event_pressed::$1 ] zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ] zp ZP_BYTE:261 [ keyboard_event_pressed::return#10 ] zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ] 
Limited combination testing to 10 combinations of 147456 possible.
Uplifting [gfx_init_vic_bitmap] best 15342178 combination zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Uplifting [get_vic_screen] best 15342157 combination reg byte a [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] zp ZP_WORD:212 [ get_vic_screen::return#10 ] zp ZP_WORD:231 [ get_vic_screen::return#11 ] zp ZP_WORD:21 [ get_vic_screen::return#5 ] 
Uplifting [get_plane] best 15342109 combination reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] zp ZP_DWORD:160 [ get_plane::return#16 ] zp ZP_DWORD:187 [ get_plane::return#17 ] zp ZP_DWORD:26 [ get_plane::return#14 ] 
Uplifting [bitmap_line] best 15342063 combination zp ZP_BYTE:316 [ bitmap_line::y1#0 ] zp ZP_BYTE:315 [ bitmap_line::y0#0 ] reg byte x [ bitmap_line::x1#0 ] zp ZP_BYTE:313 [ bitmap_line::x0#0 ] zp ZP_BYTE:318 [ bitmap_line::yd#2 ] zp ZP_BYTE:319 [ bitmap_line::yd#1 ] zp ZP_BYTE:321 [ bitmap_line::yd#10 ] zp ZP_BYTE:322 [ bitmap_line::yd#11 ] zp ZP_BYTE:317 [ bitmap_line::xd#2 ] zp ZP_BYTE:320 [ bitmap_line::xd#1 ] 
Limited combination testing to 10 combinations of 186624 possible.
Uplifting [get_vic_charset] best 15342054 combination zp ZP_WORD:222 [ get_vic_charset::return#4 ] reg byte a [ get_vic_charset::idx#0 ] zp ZP_WORD:23 [ get_vic_charset::return#2 ] 
Uplifting [print_ln] best 15342054 combination 
Uplifting [print_set_screen] best 15342054 combination 
Uplifting [keyboard_init] best 15342054 combination 
Uplifting [main] best 15342054 combination 
Uplifting [gfx_init] best 15342054 combination 
Uplifting [gfx_init_plane_vertical2] best 15342054 combination 
Uplifting [gfx_init_plane_blank] best 15342054 combination 
Uplifting [gfx_init_plane_full] best 15342054 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ]
Uplifting [] best 15342054 combination zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:256 [ keyboard_event_scan::event_type#0 ]
Uplifting [keyboard_event_scan] best 14742054 combination reg byte a [ keyboard_event_scan::event_type#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:257 [ keyboard_event_scan::$23 ]
Uplifting [keyboard_event_scan] best 14142054 combination reg byte a [ keyboard_event_scan::$23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 12642054 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ]
Uplifting [keyboard_event_scan] best 12642054 combination zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 12642054 combination zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 12642054 combination zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:262 [ keyboard_matrix_read::return#0 ]
Uplifting [keyboard_matrix_read] best 12612051 combination reg byte a [ keyboard_matrix_read::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Uplifting [form_render_values] best 12612051 combination zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Uplifting [gfx_mode] best 12603051 combination reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Uplifting [gfx_init_plane_charset8] best 12594051 combination reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Uplifting [gfx_init_plane_charset8] best 12594051 combination zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Uplifting [gfx_init_plane_charset8] best 12594051 combination zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Uplifting [bitmap_line_xdyi] best 12594051 combination zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Uplifting [bitmap_line_ydxi] best 12594051 combination zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Uplifting [bitmap_line_xdyd] best 12594051 combination zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Uplifting [bitmap_line_ydxd] best 12594051 combination zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ gfx_mode::j#2 gfx_mode::j#1 ]
Uplifting [gfx_mode] best 12592851 combination reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Uplifting [gfx_mode] best 12591651 combination reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Uplifting [bitmap_line_xdyi] best 12591651 combination zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Uplifting [bitmap_line_xdyd] best 12591651 combination zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Uplifting [] best 12591651 combination zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Uplifting [form_mode] best 12591651 combination zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:242 [ gfx_mode::keyboard_event#0 ]
Uplifting [gfx_mode] best 12591051 combination reg byte a [ gfx_mode::keyboard_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:288 [ form_set_screen::$1 ]
Uplifting [form_set_screen] best 12590451 combination reg byte a [ form_set_screen::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:345 [ gfx_init_screen3::$3 ]
Uplifting [gfx_init_screen3] best 12589851 combination reg byte a [ gfx_init_screen3::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:350 [ gfx_init_screen2::$4 ]
Uplifting [gfx_init_screen2] best 12589251 combination reg byte a [ gfx_init_screen2::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:352 [ gfx_init_screen1::$1 ]
Uplifting [gfx_init_screen1] best 12588651 combination reg byte a [ gfx_init_screen1::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:356 [ gfx_init_screen0::$3 ]
Uplifting [gfx_init_screen0] best 12588051 combination reg byte a [ gfx_init_screen0::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Uplifting [gfx_init_screen3] best 12587051 combination reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Uplifting [gfx_init_screen0] best 12586051 combination reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12585151 combination reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Uplifting [gfx_init_screen2] best 12584151 combination reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Uplifting [gfx_mode] best 12584151 combination zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Uplifting [gfx_init_plane_charset8] best 12584151 combination zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:347 [ gfx_init_screen2::col#0 ]
Uplifting [gfx_init_screen2] best 12584051 combination reg byte y [ gfx_init_screen2::col#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Uplifting [bitmap_line_xdyi] best 12584051 combination zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Uplifting [bitmap_line_ydxi] best 12584051 combination zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Uplifting [bitmap_line_xdyd] best 12584051 combination zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Uplifting [bitmap_line_ydxd] best 12584051 combination zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ]
Uplifting [] best 12584051 combination zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:343 [ gfx_init_screen3::$1 ]
Uplifting [gfx_init_screen3] best 12584051 combination zp ZP_BYTE:343 [ gfx_init_screen3::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ]
Uplifting [gfx_init_screen2] best 12584051 combination zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:354 [ gfx_init_screen0::$1 ]
Uplifting [gfx_init_screen0] best 12584051 combination zp ZP_BYTE:354 [ gfx_init_screen0::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Uplifting [gfx_mode] best 12584032 combination reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12584032 combination zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Uplifting [gfx_init_screen1] best 12584032 combination zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Uplifting [gfx_init_screen3] best 12584032 combination zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Uplifting [gfx_init_screen0] best 12584032 combination zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Uplifting [gfx_init_plane_horisontal] best 12584032 combination zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Uplifting [gfx_init_screen2] best 12584032 combination zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Uplifting [gfx_init_vic_bitmap] best 12584032 combination zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Uplifting [gfx_init_plane_8bppchunky] best 12584032 combination zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Uplifting [bitmap_init] best 12583822 combination reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:336 [ bitmap_init::$0 ]
Uplifting [bitmap_init] best 12583782 combination reg byte a [ bitmap_init::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:338 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 12583722 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:339 [ bitmap_init::$8 ]
Uplifting [bitmap_init] best 12583662 combination reg byte a [ bitmap_init::$8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:340 [ bitmap_init::$9 ]
Uplifting [bitmap_init] best 12583602 combination reg byte a [ bitmap_init::$9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:341 [ bitmap_init::$10 ]
Uplifting [bitmap_init] best 12583562 combination reg byte a [ bitmap_init::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Uplifting [gfx_init_plane_fill] best 12583562 combination zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Uplifting [gfx_init_plane_vertical] best 12583562 combination zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 12583562 combination zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Uplifting [gfx_init_screen4] best 12583562 combination zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Uplifting [gfx_init_charset] best 12583562 combination zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Uplifting [bitmap_line_xdyi] best 12583562 combination zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Uplifting [bitmap_line_ydxi] best 12583562 combination zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Uplifting [bitmap_line_xdyd] best 12583562 combination zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Uplifting [bitmap_line_ydxd] best 12583562 combination zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Uplifting [gfx_init_plane_charset8] best 12583562 combination zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Uplifting [bitmap_line_xdyi] best 12583562 combination zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Uplifting [bitmap_line_ydxi] best 12583562 combination zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Uplifting [bitmap_line_xdyd] best 12583562 combination zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Uplifting [bitmap_line_ydxd] best 12583562 combination zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Uplifting [gfx_mode] best 12583551 combination reg byte x [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:337 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 12583551 combination zp ZP_BYTE:337 [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Uplifting [bitmap_line_xdyi] best 12583551 combination zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Uplifting [bitmap_line_ydxi] best 12583551 combination zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Uplifting [bitmap_line_xdyd] best 12583551 combination zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Uplifting [bitmap_line_ydxd] best 12583551 combination zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ]
Uplifting [gfx_init_plane_fill] best 12583551 combination zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:158 [ gfx_mode::$20 ]
Uplifting [gfx_mode] best 12583545 combination reg byte a [ gfx_mode::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:174 [ gfx_mode::$25 ]
Uplifting [gfx_mode] best 12583539 combination reg byte a [ gfx_mode::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:177 [ gfx_mode::$27 ]
Uplifting [gfx_mode] best 12583533 combination reg byte a [ gfx_mode::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:180 [ gfx_mode::$29 ]
Uplifting [gfx_mode] best 12583527 combination reg byte a [ gfx_mode::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:181 [ gfx_mode::$30 ]
Uplifting [gfx_mode] best 12583521 combination reg byte a [ gfx_mode::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:182 [ gfx_mode::$31 ]
Uplifting [gfx_mode] best 12583515 combination reg byte a [ gfx_mode::$31 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:183 [ gfx_mode::$32 ]
Uplifting [gfx_mode] best 12583509 combination reg byte a [ gfx_mode::$32 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:184 [ gfx_mode::$33 ]
Uplifting [gfx_mode] best 12583503 combination reg byte a [ gfx_mode::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:185 [ gfx_mode::$34 ]
Uplifting [gfx_mode] best 12583497 combination reg byte a [ gfx_mode::$34 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:201 [ gfx_mode::$39 ]
Uplifting [gfx_mode] best 12583491 combination reg byte a [ gfx_mode::$39 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:204 [ gfx_mode::$41 ]
Uplifting [gfx_mode] best 12583485 combination reg byte a [ gfx_mode::$41 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:207 [ gfx_mode::$43 ]
Uplifting [gfx_mode] best 12583479 combination reg byte a [ gfx_mode::$43 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:208 [ gfx_mode::$44 ]
Uplifting [gfx_mode] best 12583473 combination reg byte a [ gfx_mode::$44 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:209 [ gfx_mode::$45 ]
Uplifting [gfx_mode] best 12583467 combination reg byte a [ gfx_mode::$45 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:210 [ gfx_mode::$46 ]
Uplifting [gfx_mode] best 12583461 combination reg byte a [ gfx_mode::$46 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:211 [ gfx_mode::$47 ]
Uplifting [gfx_mode] best 12583455 combination reg byte a [ gfx_mode::$47 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:228 [ gfx_mode::$60 ]
Uplifting [gfx_mode] best 12583449 combination reg byte a [ gfx_mode::$60 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:229 [ gfx_mode::$61 ]
Uplifting [gfx_mode] best 12583443 combination reg byte a [ gfx_mode::$61 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:230 [ gfx_mode::$62 ]
Uplifting [gfx_mode] best 12583437 combination reg byte a [ gfx_mode::$62 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:233 [ gfx_mode::$64 ]
Uplifting [gfx_mode] best 12583431 combination reg byte a [ gfx_mode::$64 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:234 [ gfx_mode::$65 ]
Uplifting [gfx_mode] best 12583425 combination reg byte a [ gfx_mode::$65 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:235 [ gfx_mode::$66 ]
Uplifting [gfx_mode] best 12583419 combination reg byte a [ gfx_mode::$66 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:236 [ gfx_mode::$67 ]
Uplifting [gfx_mode] best 12583413 combination reg byte a [ gfx_mode::$67 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:237 [ gfx_mode::$68 ]
Uplifting [gfx_mode] best 12583407 combination reg byte a [ gfx_mode::$68 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:238 [ gfx_mode::$69 ]
Uplifting [gfx_mode] best 12583401 combination reg byte a [ gfx_mode::$69 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:239 [ gfx_mode::$70 ]
Uplifting [gfx_mode] best 12583395 combination reg byte a [ gfx_mode::$70 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:240 [ gfx_mode::$71 ]
Uplifting [gfx_mode] best 12583389 combination reg byte a [ gfx_mode::$71 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:247 [ keyboard_event_scan::$0 ]
Uplifting [keyboard_event_scan] best 12583383 combination reg byte a [ keyboard_event_scan::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:249 [ keyboard_event_scan::$3 ]
Uplifting [keyboard_event_scan] best 12583377 combination reg byte a [ keyboard_event_scan::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:250 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 12583371 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:251 [ keyboard_event_scan::$6 ]
Uplifting [keyboard_event_scan] best 12583365 combination reg byte a [ keyboard_event_scan::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:252 [ keyboard_event_pressed::return#3 ]
Uplifting [keyboard_event_pressed] best 12583359 combination reg byte a [ keyboard_event_pressed::return#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:253 [ keyboard_event_scan::$9 ]
Uplifting [keyboard_event_scan] best 12583353 combination reg byte a [ keyboard_event_scan::$9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:258 [ keyboard_event_pressed::$0 ]
Uplifting [keyboard_event_pressed] best 12583349 combination reg byte a [ keyboard_event_pressed::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:260 [ keyboard_event_pressed::$1 ]
Uplifting [keyboard_event_pressed] best 12583345 combination reg byte a [ keyboard_event_pressed::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:273 [ form_field_ptr::x#0 ]
Uplifting [form_field_ptr] best 12583339 combination reg byte a [ form_field_ptr::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:280 [ form_control::$13 ]
Uplifting [form_control] best 12583333 combination reg byte a [ form_control::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:281 [ keyboard_event_get::return#4 ]
Uplifting [keyboard_event_get] best 12583327 combination reg byte a [ keyboard_event_get::return#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:283 [ form_control::$15 ]
Uplifting [form_control] best 12583321 combination reg byte a [ form_control::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:284 [ form_control::$16 ]
Uplifting [form_control] best 12583317 combination reg byte a [ form_control::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:285 [ form_control::$24 ]
Uplifting [form_control] best 12583313 combination reg byte a [ form_control::$24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:286 [ form_control::$14 ]
Uplifting [form_control] best 12583307 combination reg byte a [ form_control::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:330 [ bitmap_plot::$1 ]
Uplifting [bitmap_plot] best 12583301 combination reg byte a [ bitmap_plot::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:282 [ form_control::key_event#0 ]
Uplifting [form_control] best 12583289 combination reg byte a [ form_control::key_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ gfx_mode::vic_control2#2 ]
Uplifting [gfx_mode] best 12583280 combination reg byte a [ gfx_mode::vic_control2#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 12583280 combination zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:298 [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Uplifting [gfx_init_plane_fill] best 12583275 combination reg byte x [ gfx_init_plane_fill::gfxbCpuBank#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:316 [ bitmap_line::y1#0 ]
Uplifting [bitmap_line] best 12583275 combination zp ZP_BYTE:316 [ bitmap_line::y1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:315 [ bitmap_line::y0#0 ]
Uplifting [bitmap_line] best 12583275 combination zp ZP_BYTE:315 [ bitmap_line::y0#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:261 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 12583260 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ]
Uplifting [keyboard_event_pressed] best 12583260 combination zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:313 [ bitmap_line::x0#0 ]
Uplifting [bitmap_line] best 12583260 combination zp ZP_BYTE:313 [ bitmap_line::x0#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:318 [ bitmap_line::yd#2 ]
Uplifting [bitmap_line] best 12583250 combination reg byte y [ bitmap_line::yd#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:319 [ bitmap_line::yd#1 ]
Uplifting [bitmap_line] best 12583240 combination reg byte y [ bitmap_line::yd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:321 [ bitmap_line::yd#10 ]
Uplifting [bitmap_line] best 12583230 combination reg byte y [ bitmap_line::yd#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:322 [ bitmap_line::yd#11 ]
Uplifting [bitmap_line] best 12583220 combination reg byte y [ bitmap_line::yd#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:159 [ gfx_mode::plane_a_offs#0 ]
Uplifting [gfx_mode] best 12583218 combination reg byte x [ gfx_mode::plane_a_offs#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:186 [ gfx_mode::plane_b_offs#0 ]
Uplifting [gfx_mode] best 12583216 combination reg byte x [ gfx_mode::plane_b_offs#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:317 [ bitmap_line::xd#2 ]
Uplifting [bitmap_line] best 12583216 combination zp ZP_BYTE:317 [ bitmap_line::xd#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:320 [ bitmap_line::xd#1 ]
Uplifting [bitmap_line] best 12583216 combination zp ZP_BYTE:320 [ bitmap_line::xd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:220 [ gfx_mode::$56 ]
Uplifting [gfx_mode] best 12583216 combination zp ZP_BYTE:220 [ gfx_mode::$56 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] ] with [ zp ZP_WORD:231 [ get_vic_screen::return#11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ get_vic_screen::return#5 ] ] with [ zp ZP_WORD:212 [ get_vic_screen::return#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:23 [ get_vic_charset::return#2 ] ] with [ zp ZP_WORD:222 [ get_vic_charset::return#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:26 [ get_plane::return#14 ] ] with [ zp ZP_DWORD:160 [ get_plane::return#16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:26 [ get_plane::return#14 get_plane::return#16 ] ] with [ zp ZP_DWORD:187 [ get_plane::return#17 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:35 [ render_preset_name::name#13 ] ] with [ zp ZP_WORD:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] ] with [ zp ZP_WORD:304 [ gfx_init_plane_fill::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] ] with [ zp ZP_BYTE:317 [ bitmap_line::xd#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 ] ] with [ zp ZP_BYTE:320 [ bitmap_line::xd#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] ] with [ zp ZP_BYTE:313 [ bitmap_line::x0#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] ] with [ zp ZP_BYTE:315 [ bitmap_line::y0#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] ] with [ zp ZP_BYTE:316 [ bitmap_line::y1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp ZP_WORD:334 [ bitmap_clear::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:164 [ gfx_mode::$22 ] ] with [ zp ZP_DWORD:168 [ gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:191 [ gfx_mode::$36 ] ] with [ zp ZP_DWORD:195 [ gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:214 [ gfx_mode::$52 ] ] with [ zp ZP_WORD:216 [ gfx_mode::$54 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:224 [ gfx_mode::$57 ] ] with [ zp ZP_WORD:226 [ gfx_mode::$59 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:266 [ form_field_ptr::return#2 ] ] with [ zp ZP_WORD:268 [ form_render_values::field#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:266 [ form_field_ptr::return#2 form_render_values::field#0 ] ] with [ zp ZP_WORD:274 [ form_field_ptr::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:276 [ form_field_ptr::return#3 ] ] with [ zp ZP_WORD:278 [ form_control::field#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:300 [ gfx_init_plane_fill::$4 ] ] with [ zp ZP_WORD:302 [ gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:324 [ bitmap_plot::plotter_x#0 ] ] with [ zp ZP_WORD:328 [ bitmap_plot::$0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 ] ] with [ zp ZP_BYTE:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] with [ zp ZP_BYTE:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] ] with [ zp ZP_BYTE:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 ] ] with [ zp ZP_WORD:21 [ get_vic_screen::return#5 get_vic_screen::return#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:23 [ get_vic_charset::return#2 get_vic_charset::return#4 ] ] with [ zp ZP_WORD:224 [ gfx_mode::$57 gfx_mode::$59 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 ] ] with [ zp ZP_DWORD:164 [ gfx_mode::$22 gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 ] ] with [ zp ZP_DWORD:191 [ gfx_mode::$36 gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 ] ] with [ zp ZP_WORD:300 [ gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 ] ] with [ zp ZP_BYTE:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 ] ] with [ zp ZP_BYTE:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] with [ zp ZP_BYTE:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:214 [ gfx_mode::$52 gfx_mode::$54 ] ] with [ zp ZP_WORD:218 [ gfx_mode::$55 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:266 [ form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 ] ] with [ zp ZP_WORD:271 [ form_field_ptr::$2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:266 [ form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 form_field_ptr::$2 ] ] with [ zp ZP_WORD:276 [ form_field_ptr::return#3 form_control::field#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 ] ] with [ zp ZP_WORD:214 [ gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] ] with [ zp ZP_BYTE:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ] with [ zp ZP_BYTE:19 [ keyboard_event_pressed::keycode#4 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 ] ] with [ zp ZP_BYTE:41 [ form_render_values::idx#2 form_render_values::idx#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 ] ] with [ zp ZP_BYTE:62 [ gfx_init_plane_fill::fill#6 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 ] ] with [ zp ZP_BYTE:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] ] with [ zp ZP_BYTE:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] ] with [ zp ZP_BYTE:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] ] with [ zp ZP_BYTE:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ] with [ zp ZP_BYTE:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] ] with [ zp ZP_BYTE:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] ] with [ zp ZP_BYTE:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp ZP_BYTE:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 ] ] with [ zp ZP_BYTE:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] ] with [ zp ZP_BYTE:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] ] with [ zp ZP_BYTE:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ] with [ zp ZP_BYTE:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] ] with [ zp ZP_BYTE:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ] with [ zp ZP_BYTE:220 [ gfx_mode::$56 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_mode::$56 ] ] with [ zp ZP_BYTE:337 [ bitmap_init::$6 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 ] ] with [ zp ZP_WORD:23 [ get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 ] ] with [ zp ZP_WORD:35 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] with [ zp ZP_WORD:43 [ apply_preset::preset#14 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 ] ] with [ zp ZP_WORD:47 [ form_set_screen::line#2 form_set_screen::line#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 ] ] with [ zp ZP_WORD:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ] with [ zp ZP_WORD:56 [ print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 ] ] with [ zp ZP_WORD:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] with [ zp ZP_WORD:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ] with [ zp ZP_WORD:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] ] with [ zp ZP_WORD:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ] with [ zp ZP_WORD:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] ] with [ zp ZP_WORD:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] ] with [ zp ZP_WORD:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ] with [ zp ZP_WORD:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp ZP_WORD:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] ] with [ zp ZP_WORD:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] ] with [ zp ZP_WORD:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ] with [ zp ZP_WORD:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] ] with [ zp ZP_WORD:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ] with [ zp ZP_WORD:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] ] with [ zp ZP_WORD:172 [ gfx_mode::$24 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 ] ] with [ zp ZP_WORD:175 [ gfx_mode::$26 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 ] ] with [ zp ZP_WORD:178 [ gfx_mode::$28 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 ] ] with [ zp ZP_WORD:199 [ gfx_mode::$38 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 ] ] with [ zp ZP_WORD:202 [ gfx_mode::$40 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 gfx_mode::$40 ] ] with [ zp ZP_WORD:205 [ gfx_mode::$42 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 gfx_mode::$40 gfx_mode::$42 ] ] with [ zp ZP_WORD:266 [ form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 form_field_ptr::$2 form_field_ptr::return#3 form_control::field#0 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 gfx_mode::$40 gfx_mode::$42 form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 form_field_ptr::$2 form_field_ptr::return#3 form_control::field#0 ] ] with [ zp ZP_WORD:296 [ gfx_init_plane_fill::$1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 gfx_mode::$40 gfx_mode::$42 form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 form_field_ptr::$2 form_field_ptr::return#3 form_control::field#0 gfx_init_plane_fill::$1 ] ] with [ zp ZP_WORD:324 [ bitmap_plot::plotter_x#0 bitmap_plot::$0 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ] with [ zp ZP_WORD:39 [ print_str_at::at#2 print_str_at::at#0 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 ] ] with [ zp ZP_WORD:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 ] ] with [ zp ZP_WORD:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ] with [ zp ZP_WORD:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ] with [ zp ZP_WORD:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ] with [ zp ZP_WORD:290 [ print_cls::$0 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 print_cls::$0 ] ] with [ zp ZP_WORD:326 [ bitmap_plot::plotter_y#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 ] ] with [ zp ZP_BYTE:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] ] with [ zp ZP_BYTE:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ] with [ zp ZP_BYTE:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] ] with [ zp ZP_BYTE:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ] with [ zp ZP_BYTE:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] ] with [ zp ZP_BYTE:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] with [ zp ZP_BYTE:259 [ keyboard_event_pressed::row_bits#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_event_pressed::row_bits#0 ] ] with [ zp ZP_BYTE:343 [ gfx_init_screen3::$1 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_event_pressed::row_bits#0 gfx_init_screen3::$1 ] ] with [ zp ZP_BYTE:348 [ gfx_init_screen2::col2#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_event_pressed::row_bits#0 gfx_init_screen3::$1 gfx_init_screen2::col2#0 ] ] with [ zp ZP_BYTE:354 [ gfx_init_screen0::$1 ] ]
Coalescing zero page register [ zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 ] ] with [ zp ZP_BYTE:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:18 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ] with [ zp ZP_BYTE:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ]
Coalescing zero page register [ zp ZP_DWORD:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 gfx_mode::$36 gfx_mode::plane_b#0 ] ] with [ zp ZP_DWORD:58 [ gfx_init_plane_fill::plane_addr#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] ] with [ zp ZP_BYTE:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ] with [ zp ZP_BYTE:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] ] with [ zp ZP_BYTE:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ] with [ zp ZP_BYTE:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 ] ] with [ zp ZP_BYTE:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] ] with [ zp ZP_BYTE:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ] with [ zp ZP_BYTE:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] ] with [ zp ZP_BYTE:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ] with [ zp ZP_BYTE:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ]
Coalescing zero page register [ zp ZP_WORD:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] ] with [ zp ZP_WORD:310 [ gfx_init_plane_8bppchunky::$9 ] ]
Coalescing zero page register [ zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ] with [ zp ZP_BYTE:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 ] ] with [ zp ZP_BYTE:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ] with [ zp ZP_BYTE:245 [ keyboard_event_scan::row_scan#0 ] ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:2 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_mode::$56 bitmap_init::$6 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:3 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 gfx_mode::$40 gfx_mode::$42 form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 form_field_ptr::$2 form_field_ptr::return#3 form_control::field#0 gfx_init_plane_fill::$1 bitmap_plot::plotter_x#0 bitmap_plot::$0 ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:5 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 print_cls::$0 bitmap_plot::plotter_y#0 ]
Allocated (was zp ZP_BYTE:17) zp ZP_BYTE:7 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_event_pressed::row_bits#0 gfx_init_screen3::$1 gfx_init_screen2::col2#0 gfx_init_screen0::$1 ]
Allocated (was zp ZP_BYTE:18) zp ZP_BYTE:8 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated (was zp ZP_DWORD:26) zp ZP_DWORD:9 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 gfx_mode::$36 gfx_mode::plane_b#0 gfx_init_plane_fill::plane_addr#3 ]
Allocated (was zp ZP_BYTE:31) zp ZP_BYTE:13 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated (was zp ZP_BYTE:32) zp ZP_BYTE:14 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated (was zp ZP_BYTE:33) zp ZP_BYTE:15 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated (was zp ZP_WORD:54) zp ZP_WORD:16 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 gfx_init_plane_8bppchunky::$9 ]
Allocated (was zp ZP_BYTE:102) zp ZP_BYTE:18 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 keyboard_event_scan::row_scan#0 ]
Allocated (was zp ZP_DWORD:292) zp ZP_DWORD:19 [ gfx_init_plane_fill::$0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Interactive Explorer for C64DTV Screen Modes
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA #1 Port A data direction register.
  .label CIA1_PORT_A_DDR = $dc02
  // CIA #1 Port B data direction register.
  .label CIA1_PORT_B_DDR = $dc03
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  // Number of form fields
  .const form_fields_cnt = $24
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_vic_screen = form_fields_val+$18
  .label form_vic_gfx = form_fields_val+$19
  .label form_vic_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_vic_bg0_hi = form_fields_val+$1c
  .label form_vic_bg0_lo = form_fields_val+$1d
  .label form_vic_bg1_hi = form_fields_val+$1e
  .label form_vic_bg1_lo = form_fields_val+$1f
  .label form_vic_bg2_hi = form_fields_val+$20
  .label form_vic_bg2_lo = form_fields_val+$21
  .label form_vic_bg3_hi = form_fields_val+$22
  .label form_vic_bg3_lo = form_fields_val+$23
  .label print_char_cursor = 5
  .label print_line_cursor = $10
  .label keyboard_events_size = 8
  .label form_cursor_count = $d
  .label form_field_idx = $e
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG12 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG13 [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG14 [8] call keyboard_init 
    jsr keyboard_init
  //SEG15 [9] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    jmp b3
  //SEG16 main::@3
  b3:
  //SEG17 [10] call gfx_init 
  //SEG18 [449] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from_b3:
    jsr gfx_init
  //SEG19 [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG20 [11] phi (byte) form_field_idx#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta form_field_idx
  //SEG21 [11] phi (byte) keyboard_events_size#27 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_events_size
  //SEG22 [11] phi (signed byte) form_cursor_count#1 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbuc1 
    lda #FORM_CURSOR_BLINK/2
    sta form_cursor_count
    jmp b1
  //SEG23 main::@1
  b1:
  //SEG24 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG25 main::@2
  b2:
  //SEG26 [13] call form_mode 
  //SEG27 [254] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from_b2:
    jsr form_mode
  //SEG28 [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  b4_from_b2:
    jmp b4
  //SEG29 main::@4
  b4:
  //SEG30 [15] call gfx_mode 
    jsr gfx_mode
  //SEG31 [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG32 [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG33 [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
  //SEG34 [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp b1
}
//SEG35 gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label _22 = 9
    .label _24 = 3
    .label _26 = 3
    .label _28 = 3
    .label _36 = 9
    .label _38 = 3
    .label _40 = 3
    .label _42 = 3
    .label _52 = 3
    .label _54 = 3
    .label _55 = 3
    .label _56 = 2
    .label _57 = 3
    .label _59 = 3
    .label plane_a = 9
    .label plane_b = 9
    .label vic_colors = 3
    .label col = 5
    .label cy = 2
  //SEG36 [16] if(*((const byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq b1_from_gfx_mode
  //SEG37 [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  b10_from_gfx_mode:
    jmp b10
  //SEG38 gfx_mode::@10
  b10:
  //SEG39 [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  b1_from_b10:
  //SEG40 [18] phi (byte) gfx_mode::dtv_control#14 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) DTV_LINEAR#0 [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0|DTV_LINEAR
    jmp b1
  //SEG41 [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  b1_from_gfx_mode:
  //SEG42 [18] phi (byte) gfx_mode::dtv_control#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG43 gfx_mode::@1
  b1:
  //SEG44 [19] if(*((const byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq b2_from_b1
    jmp b11
  //SEG45 gfx_mode::@11
  b11:
  //SEG46 [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
  //SEG47 [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG48 [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp b2
  //SEG49 gfx_mode::@2
  b2:
  //SEG50 [22] if(*((const byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq b3_from_b2
    jmp b12
  //SEG51 gfx_mode::@12
  b12:
  //SEG52 [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
  //SEG53 [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG54 [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp b3
  //SEG55 gfx_mode::@3
  b3:
  //SEG56 [25] if(*((const byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq b4_from_b3
    jmp b13
  //SEG57 gfx_mode::@13
  b13:
  //SEG58 [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
  //SEG59 [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG60 [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp b4
  //SEG61 gfx_mode::@4
  b4:
  //SEG62 [28] if(*((const byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq b5_from_b4
    jmp b14
  //SEG63 gfx_mode::@14
  b14:
  //SEG64 [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
  //SEG65 [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG66 [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp b5
  //SEG67 gfx_mode::@5
  b5:
  //SEG68 [31] if(*((const byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq b6_from_b5
    jmp b15
  //SEG69 gfx_mode::@15
  b15:
  //SEG70 [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
  //SEG71 [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG72 [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp b6
  //SEG73 gfx_mode::@6
  b6:
  //SEG74 [34] *((const byte*) DTV_CONTROL#0) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
  //SEG75 [35] if(*((const byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq b7_from_b6
  //SEG76 [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  b16_from_b6:
    jmp b16
  //SEG77 gfx_mode::@16
  b16:
  //SEG78 [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  b7_from_b16:
  //SEG79 [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3|(const byte) VIC_ECM#0 [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3|VIC_ECM
    jmp b7
  //SEG80 [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  b7_from_b6:
  //SEG81 [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3
    jmp b7
  //SEG82 gfx_mode::@7
  b7:
  //SEG83 [38] if(*((const byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq b8_from_b7
    jmp b17
  //SEG84 gfx_mode::@17
  b17:
  //SEG85 [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VIC_BMM
    tax
  //SEG86 [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG87 [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp b8
  //SEG88 gfx_mode::@8
  b8:
  //SEG89 [41] *((const byte*) VIC_CONTROL#0) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuxx 
    stx VIC_CONTROL
  //SEG90 [42] if(*((const byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq b9_from_b8
  //SEG91 [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  b18_from_b8:
    jmp b18
  //SEG92 gfx_mode::@18
  b18:
  //SEG93 [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  b9_from_b18:
  //SEG94 [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    jmp b9
  //SEG95 [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  b9_from_b8:
  //SEG96 [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL#0 [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL
    jmp b9
  //SEG97 gfx_mode::@9
  b9:
  //SEG98 [45] *((const byte*) VIC_CONTROL2#0) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL2
  //SEG99 [46] (byte~) gfx_mode::$20 ← *((const byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
  //SEG100 [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte*) form_a_start_lo#0) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_a_start_lo
    tax
  //SEG101 [48] (byte) get_plane::idx#0 ← *((const byte*) form_a_pattern#0) -- vbuaa=_deref_pbuc1 
    lda form_a_pattern
  //SEG102 [49] call get_plane 
  //SEG103 [236] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from_b9:
  //SEG104 [236] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
  //SEG105 [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
    jmp b27
  //SEG106 gfx_mode::@27
  b27:
  //SEG107 [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16
  //SEG108 [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc plane_a
    sta plane_a
    lda plane_a+1
    adc #0
    sta plane_a+1
    lda plane_a+2
    adc #0
    sta plane_a+2
    lda plane_a+3
    adc #0
    sta plane_a+3
  //SEG109 [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda plane_a
    sta _24
    lda plane_a+1
    sta _24+1
  //SEG110 [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24 -- vbuaa=_lo_vwuz1 
    lda _24
  //SEG111 [55] *((const byte*) DTV_PLANEA_START_LO#0) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
  //SEG112 [56] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda plane_a
    sta _26
    lda plane_a+1
    sta _26+1
  //SEG113 [57] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 -- vbuaa=_hi_vwuz1 
    lda _26+1
  //SEG114 [58] *((const byte*) DTV_PLANEA_START_MI#0) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
  //SEG115 [59] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda plane_a+2
    sta _28
    lda plane_a+3
    sta _28+1
  //SEG116 [60] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 -- vbuaa=_lo_vwuz1 
    lda _28
  //SEG117 [61] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
  //SEG118 [62] (byte~) gfx_mode::$30 ← *((const byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
  //SEG119 [63] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte*) form_a_step_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_step_lo
  //SEG120 [64] *((const byte*) DTV_PLANEA_STEP#0) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
  //SEG121 [65] (byte~) gfx_mode::$32 ← *((const byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
  //SEG122 [66] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte*) form_a_mod_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_mod_lo
  //SEG123 [67] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte~) gfx_mode::$33 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
  //SEG124 [68] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG125 [69] (byte~) gfx_mode::$34 ← *((const byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
  //SEG126 [70] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte*) form_b_start_lo#0) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_b_start_lo
    tax
  //SEG127 [71] (byte) get_plane::idx#1 ← *((const byte*) form_b_pattern#0) -- vbuaa=_deref_pbuc1 
    lda form_b_pattern
  //SEG128 [72] call get_plane 
  //SEG129 [236] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from_b27:
  //SEG130 [236] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
  //SEG131 [73] (dword) get_plane::return#17 ← (dword) get_plane::return#14
    jmp b28
  //SEG132 gfx_mode::@28
  b28:
  //SEG133 [74] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17
  //SEG134 [75] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc plane_b
    sta plane_b
    lda plane_b+1
    adc #0
    sta plane_b+1
    lda plane_b+2
    adc #0
    sta plane_b+2
    lda plane_b+3
    adc #0
    sta plane_b+3
  //SEG135 [76] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda plane_b
    sta _38
    lda plane_b+1
    sta _38+1
  //SEG136 [77] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38 -- vbuaa=_lo_vwuz1 
    lda _38
  //SEG137 [78] *((const byte*) DTV_PLANEB_START_LO#0) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
  //SEG138 [79] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda plane_b
    sta _40
    lda plane_b+1
    sta _40+1
  //SEG139 [80] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 -- vbuaa=_hi_vwuz1 
    lda _40+1
  //SEG140 [81] *((const byte*) DTV_PLANEB_START_MI#0) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
  //SEG141 [82] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda plane_b+2
    sta _42
    lda plane_b+3
    sta _42+1
  //SEG142 [83] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 -- vbuaa=_lo_vwuz1 
    lda _42
  //SEG143 [84] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
  //SEG144 [85] (byte~) gfx_mode::$44 ← *((const byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
  //SEG145 [86] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte*) form_b_step_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_step_lo
  //SEG146 [87] *((const byte*) DTV_PLANEB_STEP#0) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
  //SEG147 [88] (byte~) gfx_mode::$46 ← *((const byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
  //SEG148 [89] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte*) form_b_mod_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_mod_lo
  //SEG149 [90] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte~) gfx_mode::$47 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
  //SEG150 [91] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG151 [92] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG152 [93] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2_PORT_A
  //SEG153 [94] (byte) get_vic_screen::idx#0 ← *((const byte*) form_vic_screen#0) -- vbuaa=_deref_pbuc1 
    lda form_vic_screen
  //SEG154 [95] call get_vic_screen 
  //SEG155 [222] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  get_vic_screen_from_b28:
  //SEG156 [222] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
  //SEG157 [96] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
    jmp b29
  //SEG158 gfx_mode::@29
  b29:
  //SEG159 [97] (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10
  //SEG160 [98] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$52 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda _54
    and #<$3fff
    sta _54
    lda _54+1
    and #>$3fff
    sta _54+1
  //SEG161 [99] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6 -- vwuz1=vwuz1_ror_6 
    ldy #6
  !:
    lsr _55+1
    ror _55
    dey
    bne !-
  //SEG162 [100] (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55 -- vbuz1=_byte_vwuz2 
    lda _55
    sta _56
  //SEG163 [101] (byte) get_vic_charset::idx#0 ← *((const byte*) form_vic_gfx#0) -- vbuaa=_deref_pbuc1 
    lda form_vic_gfx
  //SEG164 [102] call get_vic_charset 
    jsr get_vic_charset
  //SEG165 [103] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
    jmp b30
  //SEG166 gfx_mode::@30
  b30:
  //SEG167 [104] (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#4
  //SEG168 [105] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$57 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda _59
    and #<$3fff
    sta _59
    lda _59+1
    and #>$3fff
    sta _59+1
  //SEG169 [106] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 -- vbuaa=_hi_vwuz1 
    lda _59+1
  //SEG170 [107] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
  //SEG171 [108] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61 -- vbuaa=vbuz1_bor_vbuaa 
    ora _56
  //SEG172 [109] *((const byte*) VIC_MEMORY#0) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VIC_MEMORY
  //SEG173 [110] (byte) get_vic_screen::idx#1 ← *((const byte*) form_vic_cols#0) -- vbuaa=_deref_pbuc1 
    lda form_vic_cols
  //SEG174 [111] call get_vic_screen 
  //SEG175 [222] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  get_vic_screen_from_b30:
  //SEG176 [222] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
  //SEG177 [112] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
    jmp b31
  //SEG178 gfx_mode::@31
  b31:
  //SEG179 [113] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
  //SEG180 [114] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  b19_from_b31:
  //SEG181 [114] phi (byte) gfx_mode::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG182 [114] phi (byte*) gfx_mode::col#3 = (const byte*) COLS#0 [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
  //SEG183 [114] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp b19
  //SEG184 [114] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  b19_from_b21:
  //SEG185 [114] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
  //SEG186 [114] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
  //SEG187 [114] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp b19
  //SEG188 gfx_mode::@19
  b19:
  //SEG189 [115] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  b20_from_b19:
  //SEG190 [115] phi (byte) gfx_mode::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG191 [115] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
  //SEG192 [115] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp b20
  //SEG193 [115] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  b20_from_b20:
  //SEG194 [115] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
  //SEG195 [115] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
  //SEG196 [115] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp b20
  //SEG197 gfx_mode::@20
  b20:
  //SEG198 [116] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    ldy #0
    sta (col),y
  //SEG199 [117] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG200 [118] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc vic_colors
    bne !+
    inc vic_colors+1
  !:
  //SEG201 [119] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG202 [120] if((byte) gfx_mode::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b20_from_b20
    jmp b21
  //SEG203 gfx_mode::@21
  b21:
  //SEG204 [121] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG205 [122] if((byte) gfx_mode::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b19_from_b21
    jmp b22
  //SEG206 gfx_mode::@22
  b22:
  //SEG207 [123] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta BORDERCOL
  //SEG208 [124] (byte~) gfx_mode::$64 ← *((const byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg0_hi
    asl
    asl
    asl
    asl
  //SEG209 [125] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte*) form_vic_bg0_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg0_lo
  //SEG210 [126] *((const byte*) BGCOL1#0) ← (byte~) gfx_mode::$65 -- _deref_pbuc1=vbuaa 
    sta BGCOL1
  //SEG211 [127] (byte~) gfx_mode::$66 ← *((const byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg1_hi
    asl
    asl
    asl
    asl
  //SEG212 [128] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte*) form_vic_bg1_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg1_lo
  //SEG213 [129] *((const byte*) BGCOL2#0) ← (byte~) gfx_mode::$67 -- _deref_pbuc1=vbuaa 
    sta BGCOL2
  //SEG214 [130] (byte~) gfx_mode::$68 ← *((const byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg2_hi
    asl
    asl
    asl
    asl
  //SEG215 [131] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte*) form_vic_bg2_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg2_lo
  //SEG216 [132] *((const byte*) BGCOL3#0) ← (byte~) gfx_mode::$69 -- _deref_pbuc1=vbuaa 
    sta BGCOL3
  //SEG217 [133] (byte~) gfx_mode::$70 ← *((const byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg3_hi
    asl
    asl
    asl
    asl
  //SEG218 [134] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte*) form_vic_bg3_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg3_lo
  //SEG219 [135] *((const byte*) BGCOL4#0) ← (byte~) gfx_mode::$71 -- _deref_pbuc1=vbuaa 
    sta BGCOL4
  //SEG220 [136] if(*((const byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq b24_from_b22
  //SEG221 [137] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  b23_from_b22:
  //SEG222 [137] phi (byte) gfx_mode::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b23
  // DTV Palette - Grey Tones
  //SEG223 [137] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  b23_from_b23:
  //SEG224 [137] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp b23
  //SEG225 gfx_mode::@23
  b23:
  //SEG226 [138] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG227 [139] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG228 [140] if((byte) gfx_mode::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b23_from_b23
    jmp b25
  //SEG229 gfx_mode::@25
  b25:
  //SEG230 [141] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b25
  //SEG231 [142] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  b26_from_b25:
    jmp b26
  //SEG232 gfx_mode::@26
  b26:
  //SEG233 [143] call keyboard_event_scan 
  //SEG234 [159] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from_b26:
  //SEG235 [159] phi (byte) keyboard_events_size#110 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
  //SEG236 [144] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  b32_from_b26:
    jmp b32
  //SEG237 gfx_mode::@32
  b32:
  //SEG238 [145] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG239 [146] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    jmp b33
  //SEG240 gfx_mode::@33
  b33:
  //SEG241 [147] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
  //SEG242 [148] if((byte) gfx_mode::keyboard_event#0!=(const byte) KEY_SPACE#0) goto gfx_mode::@25 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b25
    jmp breturn
  //SEG243 gfx_mode::@return
  breturn:
  //SEG244 [149] return 
    rts
  // DTV Palette - default
  //SEG245 [150] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  b24_from_b22:
  //SEG246 [150] phi (byte) gfx_mode::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b24
  //SEG247 [150] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  b24_from_b24:
  //SEG248 [150] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp b24
  //SEG249 gfx_mode::@24
  b24:
  //SEG250 [151] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG251 [152] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG252 [153] if((byte) gfx_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b24_from_b24
    jmp b25
}
//SEG253 keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
  //SEG254 [154] if((byte) keyboard_events_size#100==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b1
  //SEG255 keyboard_event_get::@1
  b1:
  //SEG256 [155] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG257 [156] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy keyboard_events_size
    lda keyboard_events,y
  //SEG258 [157] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  breturn_from_b1:
  //SEG259 [157] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
  //SEG260 [157] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG261 [157] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
  //SEG262 [157] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG263 [157] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp breturn
  //SEG264 keyboard_event_get::@return
  breturn:
  //SEG265 [158] return 
    rts
}
//SEG266 keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $12
    .label keycode = 7
    .label row = 2
  //SEG267 [160] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  b7_from_keyboard_event_scan:
  //SEG268 [160] phi (byte) keyboard_events_size#119 = (byte) keyboard_events_size#110 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
  //SEG269 [160] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG270 [160] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta row
    jmp b7
  //SEG271 [160] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  b7_from_b8:
  //SEG272 [160] phi (byte) keyboard_events_size#119 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
  //SEG273 [160] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
  //SEG274 [160] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp b7
  //SEG275 keyboard_event_scan::@7
  b7:
  //SEG276 [161] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx row
  //SEG277 [162] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG278 [163] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    jmp b19
  //SEG279 keyboard_event_scan::@19
  b19:
  //SEG280 [164] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta row_scan
  //SEG281 [165] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda row_scan
    ldy row
    cmp keyboard_scan_values,y
    bne b9_from_b19
    jmp b16
  //SEG282 keyboard_event_scan::@16
  b16:
  //SEG283 [166] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax keycode
    axs #-[8]
    stx keycode
  //SEG284 [167] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  b8_from_b15:
  b8_from_b16:
  //SEG285 [167] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#118 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
  //SEG286 [167] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp b8
  //SEG287 keyboard_event_scan::@8
  b8:
  //SEG288 [168] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG289 [169] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp row
    bne b7_from_b8
  //SEG290 [170] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  b17_from_b8:
    jmp b17
  //SEG291 keyboard_event_scan::@17
  b17:
  //SEG292 [171] call keyboard_event_pressed 
  //SEG293 [213] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from_b17:
  //SEG294 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG295 [172] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
    jmp b20
  //SEG296 keyboard_event_scan::@20
  b20:
  //SEG297 [173] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  //SEG298 [174] if((byte~) keyboard_event_scan::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_b20
  //SEG299 [175] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  b18_from_b20:
    jmp b18
  //SEG300 keyboard_event_scan::@18
  b18:
  //SEG301 [176] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  b1_from_b18:
  //SEG302 [176] phi (byte) keyboard_modifiers#18 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0|KEY_MODIFIER_LSHIFT
    jmp b1
  //SEG303 [176] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  b1_from_b20:
  //SEG304 [176] phi (byte) keyboard_modifiers#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG305 keyboard_event_scan::@1
  b1:
  //SEG306 [177] call keyboard_event_pressed 
  //SEG307 [213] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
  //SEG308 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG309 [178] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
    jmp b21
  //SEG310 keyboard_event_scan::@21
  b21:
  //SEG311 [179] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  //SEG312 [180] if((byte~) keyboard_event_scan::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b21
    jmp b4
  //SEG313 keyboard_event_scan::@4
  b4:
  //SEG314 [181] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
  //SEG315 [182] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  b2_from_b21:
  b2_from_b4:
  //SEG316 [182] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp b2
  //SEG317 keyboard_event_scan::@2
  b2:
  //SEG318 [183] call keyboard_event_pressed 
  //SEG319 [213] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from_b2:
  //SEG320 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG321 [184] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
    jmp b22
  //SEG322 keyboard_event_scan::@22
  b22:
  //SEG323 [185] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  //SEG324 [186] if((byte~) keyboard_event_scan::$6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b22
    jmp b5
  //SEG325 keyboard_event_scan::@5
  b5:
  //SEG326 [187] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
  //SEG327 [188] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  b3_from_b22:
  b3_from_b5:
  //SEG328 [188] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp b3
  //SEG329 keyboard_event_scan::@3
  b3:
  //SEG330 [189] call keyboard_event_pressed 
  //SEG331 [213] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from_b3:
  //SEG332 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG333 [190] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
    jmp b23
  //SEG334 keyboard_event_scan::@23
  b23:
  //SEG335 [191] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
  //SEG336 [192] if((byte~) keyboard_event_scan::$9==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn_from_b23
    jmp b6
  //SEG337 keyboard_event_scan::@6
  b6:
  //SEG338 [193] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
  //SEG339 [194] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  breturn_from_b23:
  breturn_from_b6:
  //SEG340 [194] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp breturn
  //SEG341 keyboard_event_scan::@return
  breturn:
  //SEG342 [195] return 
    rts
  // Something has changed on the keyboard row - check each column
  //SEG343 [196] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  b9_from_b10:
  //SEG344 [196] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#118 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
  //SEG345 [196] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
  //SEG346 [196] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp b9
  //SEG347 [196] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b9_from_b19:
  //SEG348 [196] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#119 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
  //SEG349 [196] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
  //SEG350 [196] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b9
  //SEG351 keyboard_event_scan::@9
  b9:
  //SEG352 [197] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
  //SEG353 [198] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG354 [199] if((byte~) keyboard_event_scan::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10_from_b9
    jmp b12
  //SEG355 keyboard_event_scan::@12
  b12:
  //SEG356 [200] if((byte) keyboard_events_size#18==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp keyboard_events_size
    beq b10_from_b12
    jmp b13
  //SEG357 keyboard_event_scan::@13
  b13:
  //SEG358 [201] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and row_scan
  //SEG359 [202] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
    jmp b14
  //SEG360 keyboard_event_scan::@14
  b14:
  //SEG361 [203] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG362 [204] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG363 [205] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  b10_from_b11:
  b10_from_b12:
  b10_from_b14:
  b10_from_b9:
  //SEG364 [205] phi (byte) keyboard_events_size#118 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp b10
  //SEG365 keyboard_event_scan::@10
  b10:
  //SEG366 [206] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG367 [207] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG368 [208] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b9_from_b10
    jmp b15
  //SEG369 keyboard_event_scan::@15
  b15:
  //SEG370 [209] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b8_from_b15
  //SEG371 keyboard_event_scan::@11
  b11:
  //SEG372 [210] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora keycode
  //SEG373 [211] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte/word/dword~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG374 [212] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b10_from_b11
}
//SEG375 keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage(2) keycode)
keyboard_event_pressed: {
    .label row_bits = 7
    .label keycode = 2
  //SEG376 [214] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_ror_3 
    lda keycode
    lsr
    lsr
    lsr
  //SEG377 [215] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta row_bits
  //SEG378 [216] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and keycode
  //SEG379 [217] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and row_bits
    jmp breturn
  //SEG380 keyboard_event_pressed::@return
  breturn:
  //SEG381 [218] return 
    rts
}
//SEG382 keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
  //SEG383 [219] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG384 [220] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
  //SEG385 keyboard_matrix_read::@return
  breturn:
  //SEG386 [221] return 
    rts
}
//SEG387 get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte register(A) idx)
get_vic_screen: {
    .label return = 3
  //SEG388 [223] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn_from_get_vic_screen
    jmp b2
  //SEG389 get_vic_screen::@2
  b2:
  //SEG390 [224] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq breturn_from_b2
    jmp b3
  //SEG391 get_vic_screen::@3
  b3:
  //SEG392 [225] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq breturn_from_b3
    jmp b4
  //SEG393 get_vic_screen::@4
  b4:
  //SEG394 [226] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq breturn_from_b4
    jmp b5
  //SEG395 get_vic_screen::@5
  b5:
  //SEG396 [227] if((byte) get_vic_screen::idx#2!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_vic_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne b1_from_b5
  //SEG397 [228] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  breturn_from_b5:
  //SEG398 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN4#0 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta return
    lda #>VIC_SCREEN4
    sta return+1
    jmp breturn
  //SEG399 [228] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  breturn_from_get_vic_screen:
  breturn_from_b1:
  //SEG400 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN0#0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta return
    lda #>VIC_SCREEN0
    sta return+1
    jmp breturn
  //SEG401 [228] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  breturn_from_b2:
  //SEG402 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN1#0 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta return
    lda #>VIC_SCREEN1
    sta return+1
    jmp breturn
  //SEG403 [228] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  breturn_from_b3:
  //SEG404 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN2#0 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta return
    lda #>VIC_SCREEN2
    sta return+1
    jmp breturn
  //SEG405 [228] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  breturn_from_b4:
  //SEG406 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN3#0 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta return
    lda #>VIC_SCREEN3
    sta return+1
    jmp breturn
  //SEG407 get_vic_screen::@return
  breturn:
  //SEG408 [229] return 
    rts
  //SEG409 [230] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  b1_from_b5:
    jmp b1
  //SEG410 get_vic_screen::@1
  b1:
    jmp breturn_from_b1
}
//SEG411 get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte register(A) idx)
get_vic_charset: {
    .label return = 3
  //SEG412 [231] if((byte) get_vic_charset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn_from_get_vic_charset
    jmp b2
  //SEG413 get_vic_charset::@2
  b2:
  //SEG414 [232] if((byte) get_vic_charset::idx#0!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne b1_from_b2
  //SEG415 [233] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  breturn_from_b2:
  //SEG416 [233] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_BITMAP#0 [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta return
    lda #>VIC_BITMAP
    sta return+1
    jmp breturn
  //SEG417 [233] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  breturn_from_get_vic_charset:
  breturn_from_b1:
  //SEG418 [233] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_CHARSET_ROM#0 [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta return
    lda #>VIC_CHARSET_ROM
    sta return+1
    jmp breturn
  //SEG419 get_vic_charset::@return
  breturn:
  //SEG420 [234] return 
    rts
  //SEG421 [235] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  b1_from_b2:
    jmp b1
  //SEG422 get_vic_charset::@1
  b1:
    jmp breturn_from_b1
}
//SEG423 get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 9
  //SEG424 [237] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn_from_get_plane
    jmp b2
  //SEG425 get_plane::@2
  b2:
  //SEG426 [238] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq breturn_from_b2
    jmp b3
  //SEG427 get_plane::@3
  b3:
  //SEG428 [239] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq breturn_from_b3
    jmp b4
  //SEG429 get_plane::@4
  b4:
  //SEG430 [240] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq breturn_from_b4
    jmp b5
  //SEG431 get_plane::@5
  b5:
  //SEG432 [241] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq breturn_from_b5
    jmp b6
  //SEG433 get_plane::@6
  b6:
  //SEG434 [242] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq breturn_from_b6
    jmp b7
  //SEG435 get_plane::@7
  b7:
  //SEG436 [243] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq breturn_from_b7
    jmp b8
  //SEG437 get_plane::@8
  b8:
  //SEG438 [244] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq breturn_from_b8
    jmp b9
  //SEG439 get_plane::@9
  b9:
  //SEG440 [245] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq breturn_from_b9
    jmp b10
  //SEG441 get_plane::@10
  b10:
  //SEG442 [246] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq breturn_from_b10
    jmp b11
  //SEG443 get_plane::@11
  b11:
  //SEG444 [247] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq breturn_from_b11
    jmp b12
  //SEG445 get_plane::@12
  b12:
  //SEG446 [248] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq breturn_from_b12
    jmp b13
  //SEG447 get_plane::@13
  b13:
  //SEG448 [249] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq breturn_from_b13
    jmp b14
  //SEG449 get_plane::@14
  b14:
  //SEG450 [250] if((byte) get_plane::idx#10!=(byte/signed byte/word/signed word/dword/signed dword) $d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne b1_from_b14
  //SEG451 [251] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  breturn_from_b14:
  //SEG452 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_FULL#0 [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta return
    lda #>PLANE_FULL
    sta return+1
    lda #<PLANE_FULL>>$10
    sta return+2
    lda #>PLANE_FULL>>$10
    sta return+3
    jmp breturn
  //SEG453 [251] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
  breturn_from_get_plane:
  breturn_from_b1:
  //SEG454 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN0#0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN0
    sta return
    lda #>$ffffffff&VIC_SCREEN0
    sta return+1
    lda #<$ffffffff&VIC_SCREEN0>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN0>>$10
    sta return+3
    jmp breturn
  //SEG455 [251] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  breturn_from_b10:
  //SEG456 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_HORISONTAL2#0 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta return
    lda #>PLANE_HORISONTAL2
    sta return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta return+3
    jmp breturn
  //SEG457 [251] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  breturn_from_b11:
  //SEG458 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_VERTICAL2#0 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta return
    lda #>PLANE_VERTICAL2
    sta return+1
    lda #<PLANE_VERTICAL2>>$10
    sta return+2
    lda #>PLANE_VERTICAL2>>$10
    sta return+3
    jmp breturn
  //SEG459 [251] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  breturn_from_b12:
  //SEG460 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_CHARSET8#0 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta return
    lda #>PLANE_CHARSET8
    sta return+1
    lda #<PLANE_CHARSET8>>$10
    sta return+2
    lda #>PLANE_CHARSET8>>$10
    sta return+3
    jmp breturn
  //SEG461 [251] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  breturn_from_b13:
  //SEG462 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_BLANK#0 [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta return
    lda #>PLANE_BLANK
    sta return+1
    lda #<PLANE_BLANK>>$10
    sta return+2
    lda #>PLANE_BLANK>>$10
    sta return+3
    jmp breturn
  //SEG463 [251] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  breturn_from_b2:
  //SEG464 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN1#0 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN1
    sta return
    lda #>$ffffffff&VIC_SCREEN1
    sta return+1
    lda #<$ffffffff&VIC_SCREEN1>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN1>>$10
    sta return+3
    jmp breturn
  //SEG465 [251] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  breturn_from_b3:
  //SEG466 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN2#0 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN2
    sta return
    lda #>$ffffffff&VIC_SCREEN2
    sta return+1
    lda #<$ffffffff&VIC_SCREEN2>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN2>>$10
    sta return+3
    jmp breturn
  //SEG467 [251] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  breturn_from_b4:
  //SEG468 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN3#0 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN3
    sta return
    lda #>$ffffffff&VIC_SCREEN3
    sta return+1
    lda #<$ffffffff&VIC_SCREEN3>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN3>>$10
    sta return+3
    jmp breturn
  //SEG469 [251] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  breturn_from_b5:
  //SEG470 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_BITMAP#0 [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_BITMAP
    sta return
    lda #>$ffffffff&VIC_BITMAP
    sta return+1
    lda #<$ffffffff&VIC_BITMAP>>$10
    sta return+2
    lda #>$ffffffff&VIC_BITMAP>>$10
    sta return+3
    jmp breturn
  //SEG471 [251] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  breturn_from_b6:
  //SEG472 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_CHARSET_ROM#0 [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_CHARSET_ROM
    sta return
    lda #>$ffffffff&VIC_CHARSET_ROM
    sta return+1
    lda #<$ffffffff&VIC_CHARSET_ROM>>$10
    sta return+2
    lda #>$ffffffff&VIC_CHARSET_ROM>>$10
    sta return+3
    jmp breturn
  //SEG473 [251] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  breturn_from_b7:
  //SEG474 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_8BPP_CHUNKY#0 [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta return
    lda #>PLANE_8BPP_CHUNKY
    sta return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta return+3
    jmp breturn
  //SEG475 [251] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  breturn_from_b8:
  //SEG476 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_HORISONTAL#0 [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta return
    lda #>PLANE_HORISONTAL
    sta return+1
    lda #<PLANE_HORISONTAL>>$10
    sta return+2
    lda #>PLANE_HORISONTAL>>$10
    sta return+3
    jmp breturn
  //SEG477 [251] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  breturn_from_b9:
  //SEG478 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_VERTICAL#0 [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta return
    lda #>PLANE_VERTICAL
    sta return+1
    lda #<PLANE_VERTICAL>>$10
    sta return+2
    lda #>PLANE_VERTICAL>>$10
    sta return+3
    jmp breturn
  //SEG479 get_plane::@return
  breturn:
  //SEG480 [252] return 
    rts
  //SEG481 [253] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  b1_from_b14:
    jmp b1
  //SEG482 get_plane::@1
  b1:
    jmp breturn_from_b1
}
//SEG483 form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = $f
  //SEG484 [255] call print_set_screen 
  //SEG485 [447] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
  //SEG486 [447] phi (byte*) print_set_screen::screen#2 = (const byte*) COLS#0 [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta print_set_screen.screen
    lda #>COLS
    sta print_set_screen.screen+1
    jsr print_set_screen
  //SEG487 [256] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  b8_from_form_mode:
    jmp b8
  //SEG488 form_mode::@8
  b8:
  //SEG489 [257] call print_cls 
    jsr print_cls
  //SEG490 [258] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  b9_from_b8:
    jmp b9
  //SEG491 form_mode::@9
  b9:
  //SEG492 [259] call print_str_lines 
  //SEG493 [419] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from_b9:
  //SEG494 [419] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_COLS#0 [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta print_str_lines.str
    lda #>FORM_COLS
    sta print_str_lines.str+1
    jsr print_str_lines
  //SEG495 [260] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  b10_from_b9:
    jmp b10
  //SEG496 form_mode::@10
  b10:
  //SEG497 [261] call print_set_screen 
  //SEG498 [447] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from_b10:
  //SEG499 [447] phi (byte*) print_set_screen::screen#2 = (const byte*) FORM_SCREEN#0 [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta print_set_screen.screen
    lda #>FORM_SCREEN
    sta print_set_screen.screen+1
    jsr print_set_screen
  //SEG500 [262] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  b11_from_b10:
    jmp b11
  //SEG501 form_mode::@11
  b11:
  //SEG502 [263] call print_cls 
    jsr print_cls
  //SEG503 [264] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  b12_from_b11:
    jmp b12
  //SEG504 form_mode::@12
  b12:
  //SEG505 [265] call print_str_lines 
  //SEG506 [419] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from_b12:
  //SEG507 [419] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_TEXT#0 [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta print_str_lines.str
    lda #>FORM_TEXT
    sta print_str_lines.str+1
    jsr print_str_lines
  //SEG508 [266] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  b13_from_b12:
    jmp b13
  //SEG509 form_mode::@13
  b13:
  //SEG510 [267] call form_set_screen 
  //SEG511 [409] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from_b13:
    jsr form_set_screen
  //SEG512 [268] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  b14_from_b13:
    jmp b14
  //SEG513 form_mode::@14
  b14:
  //SEG514 [269] call form_render_values 
  //SEG515 [330] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from_b14:
    jsr form_render_values
    jmp b15
  //SEG516 form_mode::@15
  b15:
  //SEG517 [270] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val#0) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
  //SEG518 [271] call render_preset_name 
  //SEG519 [306] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from_b15:
  //SEG520 [306] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp b16
  //SEG521 form_mode::@16
  b16:
  //SEG522 [272] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&FORM_CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG523 [273] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG524 [274] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG525 [275] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG526 [276] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^FORM_CHARSET/$4000
    sta CIA2_PORT_A
  //SEG527 [277] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
  //SEG528 [278] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG529 [279] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG530 [280] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG531 [281] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) FORM_SCREEN#0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #<FORM_SCREEN
    sta DTV_PLANEA_START_LO
  //SEG532 [282] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) FORM_SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
  //SEG533 [283] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG534 [284] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  b1_from_b16:
  //SEG535 [284] phi (byte) form_mode::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  // DTV Palette - default
  //SEG536 [284] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  b1_from_b1:
  //SEG537 [284] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp b1
  //SEG538 form_mode::@1
  b1:
  //SEG539 [285] *((const byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG540 [286] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG541 [287] if((byte) form_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b2
  //SEG542 form_mode::@2
  b2:
  //SEG543 [288] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG544 [289] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG545 [290] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta preset_current
  //SEG546 [291] phi from form_mode::@19 form_mode::@2 to form_mode::@3 [phi:form_mode::@19/form_mode::@2->form_mode::@3]
  b3_from_b19:
  b3_from_b2:
  //SEG547 [291] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2->form_mode::@3#0] -- register_copy 
  //SEG548 [291] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2->form_mode::@3#1] -- register_copy 
  //SEG549 [291] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2->form_mode::@3#2] -- register_copy 
  //SEG550 [291] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2->form_mode::@3#3] -- register_copy 
    jmp b3
  // Let the user change values in the form
  //SEG551 [291] phi from form_mode::@6 to form_mode::@3 [phi:form_mode::@6->form_mode::@3]
  b3_from_b6:
  //SEG552 [291] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@6->form_mode::@3#0] -- register_copy 
  //SEG553 [291] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@6->form_mode::@3#1] -- register_copy 
  //SEG554 [291] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@6->form_mode::@3#2] -- register_copy 
    jmp b3
  //SEG555 form_mode::@3
  b3:
    jmp b4
  //SEG556 form_mode::@4
  b4:
  //SEG557 [292] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b4
  //SEG558 [293] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  b5_from_b4:
    jmp b5
  //SEG559 form_mode::@5
  b5:
  //SEG560 [294] call form_control 
    jsr form_control
  //SEG561 [295] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuaa=vbuxx 
    txa
    jmp b17
  //SEG562 form_mode::@17
  b17:
  //SEG563 [296] (byte~) form_mode::$36 ← (byte) form_control::return#0
  //SEG564 [297] if((byte~) form_mode::$36==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
    jmp breturn
  //SEG565 form_mode::@return
  breturn:
  //SEG566 [298] return 
    rts
  //SEG567 form_mode::@6
  b6:
  //SEG568 [299] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val#0)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp preset_current
    beq b3_from_b6
    jmp b7
  //SEG569 form_mode::@7
  b7:
  //SEG570 [300] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val#0) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
  //SEG571 [301] call apply_preset 
    jsr apply_preset
    jmp b18
  //SEG572 form_mode::@18
  b18:
  //SEG573 [302] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta preset_current
  //SEG574 [303] call form_render_values 
  //SEG575 [330] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from_b18:
    jsr form_render_values
    jmp b19
  //SEG576 form_mode::@19
  b19:
  //SEG577 [304] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val#0) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
  //SEG578 [305] call render_preset_name 
  //SEG579 [306] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from_b19:
  //SEG580 [306] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp b3_from_b19
}
//SEG581 render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = 3
  //SEG582 [307] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_preset_name::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_render_preset_name
    jmp b2
  //SEG583 render_preset_name::@2
  b2:
  //SEG584 [308] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b1_from_b2
    jmp b3
  //SEG585 render_preset_name::@3
  b3:
  //SEG586 [309] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b1_from_b3
    jmp b4
  //SEG587 render_preset_name::@4
  b4:
  //SEG588 [310] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b1_from_b4
    jmp b5
  //SEG589 render_preset_name::@5
  b5:
  //SEG590 [311] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq b1_from_b5
    jmp b6
  //SEG591 render_preset_name::@6
  b6:
  //SEG592 [312] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq b1_from_b6
    jmp b7
  //SEG593 render_preset_name::@7
  b7:
  //SEG594 [313] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq b1_from_b7
    jmp b8
  //SEG595 render_preset_name::@8
  b8:
  //SEG596 [314] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq b1_from_b8
    jmp b9
  //SEG597 render_preset_name::@9
  b9:
  //SEG598 [315] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq b1_from_b9
    jmp b10
  //SEG599 render_preset_name::@10
  b10:
  //SEG600 [316] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b1_from_b10
    jmp b11
  //SEG601 render_preset_name::@11
  b11:
  //SEG602 [317] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq b1_from_b11
  //SEG603 [318] phi from render_preset_name::@11 to render_preset_name::@12 [phi:render_preset_name::@11->render_preset_name::@12]
  b12_from_b11:
    jmp b12
  //SEG604 render_preset_name::@12
  b12:
  //SEG605 [319] phi from render_preset_name render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@1]
  b1_from_render_preset_name:
  b1_from_b12:
  //SEG606 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta name
    lda #>name_1
    sta name+1
    jmp b1
  //SEG607 [319] phi from render_preset_name::@10 to render_preset_name::@1 [phi:render_preset_name::@10->render_preset_name::@1]
  b1_from_b10:
  //SEG608 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@10->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta name
    lda #>name_10
    sta name+1
    jmp b1
  //SEG609 [319] phi from render_preset_name::@11 to render_preset_name::@1 [phi:render_preset_name::@11->render_preset_name::@1]
  b1_from_b11:
  //SEG610 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@11->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta name
    lda #>name_11
    sta name+1
    jmp b1
  //SEG611 [319] phi from render_preset_name::@2 to render_preset_name::@1 [phi:render_preset_name::@2->render_preset_name::@1]
  b1_from_b2:
  //SEG612 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@2->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta name
    lda #>name_2
    sta name+1
    jmp b1
  //SEG613 [319] phi from render_preset_name::@3 to render_preset_name::@1 [phi:render_preset_name::@3->render_preset_name::@1]
  b1_from_b3:
  //SEG614 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@3->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta name
    lda #>name_3
    sta name+1
    jmp b1
  //SEG615 [319] phi from render_preset_name::@4 to render_preset_name::@1 [phi:render_preset_name::@4->render_preset_name::@1]
  b1_from_b4:
  //SEG616 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@4->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta name
    lda #>name_4
    sta name+1
    jmp b1
  //SEG617 [319] phi from render_preset_name::@5 to render_preset_name::@1 [phi:render_preset_name::@5->render_preset_name::@1]
  b1_from_b5:
  //SEG618 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@5->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta name
    lda #>name_5
    sta name+1
    jmp b1
  //SEG619 [319] phi from render_preset_name::@6 to render_preset_name::@1 [phi:render_preset_name::@6->render_preset_name::@1]
  b1_from_b6:
  //SEG620 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@6->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta name
    lda #>name_6
    sta name+1
    jmp b1
  //SEG621 [319] phi from render_preset_name::@7 to render_preset_name::@1 [phi:render_preset_name::@7->render_preset_name::@1]
  b1_from_b7:
  //SEG622 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@7->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta name
    lda #>name_7
    sta name+1
    jmp b1
  //SEG623 [319] phi from render_preset_name::@8 to render_preset_name::@1 [phi:render_preset_name::@8->render_preset_name::@1]
  b1_from_b8:
  //SEG624 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@8->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta name
    lda #>name_8
    sta name+1
    jmp b1
  //SEG625 [319] phi from render_preset_name::@9 to render_preset_name::@1 [phi:render_preset_name::@9->render_preset_name::@1]
  b1_from_b9:
  //SEG626 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@9->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta name
    lda #>name_9
    sta name+1
    jmp b1
  //SEG627 render_preset_name::@1
  b1:
  //SEG628 [320] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  //SEG629 [321] call print_str_at 
  //SEG630 [323] phi from render_preset_name::@1 to print_str_at [phi:render_preset_name::@1->print_str_at]
  print_str_at_from_b1:
    jsr print_str_at
    jmp breturn
  //SEG631 render_preset_name::@return
  breturn:
  //SEG632 [322] return 
    rts
    name_1: .text "Standard Charset              @"
    name_2: .text "Extended Color Charset        @"
    name_3: .text "Standard Bitmap               @"
    name_4: .text "Multicolor Bitmap             @"
    name_5: .text "Hicolor Charset               @"
    name_6: .text "Hicolor Extended Color Charset@"
    name_7: .text "Twoplane Bitmap               @"
    name_8: .text "Chunky 8bpp                   @"
    name_9: .text "Sixs Fred                     @"
    name_10: .text "Sixs Fred 2                   @"
    name_11: .text "8bpp Pixel Cell               @"
}
//SEG633 print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zeropage(3) str, byte* zeropage(5) at)
print_str_at: {
    .label at = 5
    .label str = 3
  //SEG634 [324] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  b1_from_print_str_at:
  //SEG635 [324] phi (byte*) print_str_at::at#2 = (const byte*) FORM_SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta at
    lda #>FORM_SCREEN+$28*2+$a
    sta at+1
  //SEG636 [324] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp b1
  //SEG637 print_str_at::@1
  b1:
  //SEG638 [325] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG639 print_str_at::@return
  breturn:
  //SEG640 [326] return 
    rts
  //SEG641 print_str_at::@2
  b2:
  //SEG642 [327] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
  //SEG643 [328] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc at
    bne !+
    inc at+1
  !:
  //SEG644 [329] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG645 [324] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  b1_from_b2:
  //SEG646 [324] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
  //SEG647 [324] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp b1
}
//SEG648 form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    .label field = 3
    .label idx = 2
  //SEG649 [331] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  b1_from_form_render_values:
  //SEG650 [331] phi (byte) form_render_values::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
    jmp b1
  //SEG651 [331] phi from form_render_values::@2 to form_render_values::@1 [phi:form_render_values::@2->form_render_values::@1]
  b1_from_b2:
  //SEG652 [331] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@2->form_render_values::@1#0] -- register_copy 
    jmp b1
  //SEG653 form_render_values::@1
  b1:
  //SEG654 [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2 -- vbuyy=vbuz1 
    ldy idx
  //SEG655 [333] call form_field_ptr 
  //SEG656 [340] phi from form_render_values::@1 to form_field_ptr [phi:form_render_values::@1->form_field_ptr]
  form_field_ptr_from_b1:
  //SEG657 [340] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@1->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
  //SEG658 [334] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0
    jmp b2
  //SEG659 form_render_values::@2
  b2:
  //SEG660 [335] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2
  //SEG661 [336] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_render_values::idx#2)) -- _deref_pbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    ldx idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
  //SEG662 [337] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuz1=_inc_vbuz1 
    inc idx
  //SEG663 [338] if((byte) form_render_values::idx#1<(const byte) form_fields_cnt#0) goto form_render_values::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda idx
    cmp #form_fields_cnt
    bcc b1_from_b2
    jmp breturn
  //SEG664 form_render_values::@return
  breturn:
  //SEG665 [339] return 
    rts
}
//SEG666 form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(Y) field_idx)
form_field_ptr: {
    .label return = 3
    .label _2 = 3
  //SEG667 [341] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y#0 + (byte) form_field_ptr::field_idx#2) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx form_fields_y,y
  //SEG668 [342] (word~) form_field_ptr::$2 ← *((const byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda form_line_hi,x
    sta _2+1
    lda form_line_lo,x
    sta _2
  //SEG669 [343] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x#0 + (byte) form_field_ptr::field_idx#2) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda form_fields_x,y
  //SEG670 [344] (byte*) form_field_ptr::return#0 ← (byte*)(word~) form_field_ptr::$2 + (byte) form_field_ptr::x#0 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc return
    sta return
    bcc !+
    inc return+1
  !:
    jmp breturn
  //SEG671 form_field_ptr::@return
  breturn:
  //SEG672 [345] return 
    rts
}
//SEG673 apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = 3
  //SEG674 [346] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto apply_preset::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_apply_preset
    jmp b2
  //SEG675 apply_preset::@2
  b2:
  //SEG676 [347] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 1) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b1_from_b2
    jmp b3
  //SEG677 apply_preset::@3
  b3:
  //SEG678 [348] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 2) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b1_from_b3
    jmp b4
  //SEG679 apply_preset::@4
  b4:
  //SEG680 [349] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 3) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b1_from_b4
    jmp b5
  //SEG681 apply_preset::@5
  b5:
  //SEG682 [350] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 4) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq b1_from_b5
    jmp b6
  //SEG683 apply_preset::@6
  b6:
  //SEG684 [351] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 5) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq b1_from_b6
    jmp b7
  //SEG685 apply_preset::@7
  b7:
  //SEG686 [352] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 6) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq b1_from_b7
    jmp b8
  //SEG687 apply_preset::@8
  b8:
  //SEG688 [353] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 7) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq b1_from_b8
    jmp b9
  //SEG689 apply_preset::@9
  b9:
  //SEG690 [354] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 8) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq b1_from_b9
    jmp b10
  //SEG691 apply_preset::@10
  b10:
  //SEG692 [355] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 9) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b1_from_b10
    jmp b11
  //SEG693 apply_preset::@11
  b11:
  //SEG694 [356] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) $a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq b1_from_b11
  //SEG695 [357] phi from apply_preset::@11 to apply_preset::@12 [phi:apply_preset::@11->apply_preset::@12]
  b12_from_b11:
    jmp b12
  //SEG696 apply_preset::@12
  b12:
  //SEG697 [358] phi from apply_preset apply_preset::@12 to apply_preset::@1 [phi:apply_preset/apply_preset::@12->apply_preset::@1]
  b1_from_apply_preset:
  b1_from_b12:
  //SEG698 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_stdchar#0 [phi:apply_preset/apply_preset::@12->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta preset
    lda #>preset_stdchar
    sta preset+1
    jmp b1
  //SEG699 [358] phi from apply_preset::@10 to apply_preset::@1 [phi:apply_preset::@10->apply_preset::@1]
  b1_from_b10:
  //SEG700 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_sixsfred2#0 [phi:apply_preset::@10->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta preset
    lda #>preset_sixsfred2
    sta preset+1
    jmp b1
  //SEG701 [358] phi from apply_preset::@11 to apply_preset::@1 [phi:apply_preset::@11->apply_preset::@1]
  b1_from_b11:
  //SEG702 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_8bpppixelcell#0 [phi:apply_preset::@11->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta preset
    lda #>preset_8bpppixelcell
    sta preset+1
    jmp b1
  //SEG703 [358] phi from apply_preset::@2 to apply_preset::@1 [phi:apply_preset::@2->apply_preset::@1]
  b1_from_b2:
  //SEG704 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_ecmchar#0 [phi:apply_preset::@2->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta preset
    lda #>preset_ecmchar
    sta preset+1
    jmp b1
  //SEG705 [358] phi from apply_preset::@3 to apply_preset::@1 [phi:apply_preset::@3->apply_preset::@1]
  b1_from_b3:
  //SEG706 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_stdbm#0 [phi:apply_preset::@3->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta preset
    lda #>preset_stdbm
    sta preset+1
    jmp b1
  //SEG707 [358] phi from apply_preset::@4 to apply_preset::@1 [phi:apply_preset::@4->apply_preset::@1]
  b1_from_b4:
  //SEG708 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_mcbm#0 [phi:apply_preset::@4->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta preset
    lda #>preset_mcbm
    sta preset+1
    jmp b1
  //SEG709 [358] phi from apply_preset::@5 to apply_preset::@1 [phi:apply_preset::@5->apply_preset::@1]
  b1_from_b5:
  //SEG710 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_hi_stdchar#0 [phi:apply_preset::@5->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta preset
    lda #>preset_hi_stdchar
    sta preset+1
    jmp b1
  //SEG711 [358] phi from apply_preset::@6 to apply_preset::@1 [phi:apply_preset::@6->apply_preset::@1]
  b1_from_b6:
  //SEG712 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_hi_ecmchar#0 [phi:apply_preset::@6->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta preset
    lda #>preset_hi_ecmchar
    sta preset+1
    jmp b1
  //SEG713 [358] phi from apply_preset::@7 to apply_preset::@1 [phi:apply_preset::@7->apply_preset::@1]
  b1_from_b7:
  //SEG714 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_twoplane#0 [phi:apply_preset::@7->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta preset
    lda #>preset_twoplane
    sta preset+1
    jmp b1
  //SEG715 [358] phi from apply_preset::@8 to apply_preset::@1 [phi:apply_preset::@8->apply_preset::@1]
  b1_from_b8:
  //SEG716 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_chunky#0 [phi:apply_preset::@8->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta preset
    lda #>preset_chunky
    sta preset+1
    jmp b1
  //SEG717 [358] phi from apply_preset::@9 to apply_preset::@1 [phi:apply_preset::@9->apply_preset::@1]
  b1_from_b9:
  //SEG718 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_sixsfred#0 [phi:apply_preset::@9->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta preset
    lda #>preset_sixsfred
    sta preset+1
    jmp b1
  //SEG719 apply_preset::@1
  b1:
  //SEG720 [359] phi from apply_preset::@1 to apply_preset::@13 [phi:apply_preset::@1->apply_preset::@13]
  b13_from_b1:
  //SEG721 [359] phi (byte) apply_preset::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:apply_preset::@1->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b13
  // Copy preset values into the fields
  //SEG722 [359] phi from apply_preset::@13 to apply_preset::@13 [phi:apply_preset::@13->apply_preset::@13]
  b13_from_b13:
  //SEG723 [359] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@13->apply_preset::@13#0] -- register_copy 
    jmp b13
  //SEG724 apply_preset::@13
  b13:
  //SEG725 [360] *((const byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#14 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
  //SEG726 [361] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG727 [362] if((byte) apply_preset::i#1!=(const byte) form_fields_cnt#0) goto apply_preset::@13 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne b13_from_b13
    jmp breturn
  //SEG728 apply_preset::@return
  breturn:
  //SEG729 [363] return 
    rts
}
//SEG730 form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label field = 3
  //SEG731 [364] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuyy=vbuz1 
    ldy form_field_idx
  //SEG732 [365] call form_field_ptr 
  //SEG733 [340] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
  //SEG734 [340] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
  //SEG735 [366] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
    jmp b17
  //SEG736 form_control::@17
  b17:
  //SEG737 [367] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
  //SEG738 [368] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec form_cursor_count
  //SEG739 [369] if((signed byte) form_cursor_count#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@20 -- vbsz1_ge_0_then_la1 
    lda form_cursor_count
    cmp #0
    bpl b20_from_b17
  //SEG740 [370] phi from form_control::@17 to form_control::@1 [phi:form_control::@17->form_control::@1]
  b1_from_b17:
  //SEG741 [370] phi (signed byte) form_cursor_count#15 = (const signed byte) FORM_CURSOR_BLINK#0 [phi:form_control::@17->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta form_cursor_count
    jmp b1
  //SEG742 form_control::@1
  b1:
  //SEG743 [371] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2) goto form_control::@2 -- vbsz1_lt_vbuc1_then_la1 
    lda form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp b6
  //SEG744 form_control::@6
  b6:
  //SEG745 [372] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
  //SEG746 [373] *((byte*) form_control::field#0) ← (byte~) form_control::$13 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (field),y
  //SEG747 [374] phi from form_control::@2 form_control::@6 to form_control::@3 [phi:form_control::@2/form_control::@6->form_control::@3]
  b3_from_b2:
  b3_from_b6:
    jmp b3
  //SEG748 form_control::@3
  b3:
  //SEG749 [375] call keyboard_event_scan 
  //SEG750 [159] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from_b3:
  //SEG751 [159] phi (byte) keyboard_events_size#110 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
  //SEG752 [376] phi from form_control::@3 to form_control::@18 [phi:form_control::@3->form_control::@18]
  b18_from_b3:
    jmp b18
  //SEG753 form_control::@18
  b18:
  //SEG754 [377] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG755 [378] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
    jmp b19
  //SEG756 form_control::@19
  b19:
  //SEG757 [379] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
  //SEG758 [380] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN#0) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne b4
    jmp b7
  //SEG759 form_control::@7
  b7:
  //SEG760 [381] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
  //SEG761 [382] *((byte*) form_control::field#0) ← (byte~) form_control::$15 -- _deref_pbuz1=vbuaa 
    // Unblink the cursor
    ldy #0
    sta (field),y
  //SEG762 [383] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
  //SEG763 [384] if((byte~) form_control::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12
    jmp b8
  //SEG764 form_control::@8
  b8:
  //SEG765 [385] (byte) form_field_idx#44 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec form_field_idx
  //SEG766 [386] if((byte) form_field_idx#44!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@21 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp form_field_idx
    bne b21_from_b8
  //SEG767 [387] phi from form_control::@8 to form_control::@13 [phi:form_control::@8->form_control::@13]
  b13_from_b8:
  //SEG768 [387] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:form_control::@8->form_control::@13#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta form_field_idx
    jmp b13
  //SEG769 form_control::@13
  b13:
  //SEG770 [388] phi from form_control::@13 to form_control::@return [phi:form_control::@13->form_control::@return]
  breturn_from_b13:
  //SEG771 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@13->form_control::@return#0] -- register_copy 
  //SEG772 [388] phi (signed byte) form_cursor_count#16 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:form_control::@13->form_control::@return#1] -- vbsz1=vbuc1 
    lda #FORM_CURSOR_BLINK/2
    sta form_cursor_count
  //SEG773 [388] phi (byte) form_control::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@13->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp breturn
  //SEG774 form_control::@return
  breturn:
  //SEG775 [389] return 
    rts
  //SEG776 [390] phi from form_control::@8 to form_control::@21 [phi:form_control::@8->form_control::@21]
  b21_from_b8:
    jmp b21
  //SEG777 form_control::@21
  b21:
  //SEG778 [387] phi from form_control::@21 form_control::@22 to form_control::@13 [phi:form_control::@21/form_control::@22->form_control::@13]
  b13_from_b21:
  b13_from_b22:
  //SEG779 [387] phi (byte) form_field_idx#31 = (byte) form_field_idx#44 [phi:form_control::@21/form_control::@22->form_control::@13#0] -- register_copy 
    jmp b13
  //SEG780 form_control::@12
  b12:
  //SEG781 [391] (byte) form_field_idx#45 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc form_field_idx
  //SEG782 [392] if((byte) form_field_idx#45!=(const byte) form_fields_cnt#0) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp form_field_idx
    bne b22_from_b12
  //SEG783 [387] phi from form_control::@12 to form_control::@13 [phi:form_control::@12->form_control::@13]
  b13_from_b12:
  //SEG784 [387] phi (byte) form_field_idx#31 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@12->form_control::@13#0] -- vbuz1=vbuc1 
    lda #0
    sta form_field_idx
    jmp b13
  //SEG785 [393] phi from form_control::@12 to form_control::@22 [phi:form_control::@12->form_control::@22]
  b22_from_b12:
    jmp b22
  //SEG786 form_control::@22
  b22:
    jmp b13_from_b22
  //SEG787 form_control::@4
  b4:
  //SEG788 [394] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT#0) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne b5
    jmp b9
  //SEG789 form_control::@9
  b9:
  //SEG790 [395] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
  //SEG791 [396] if((byte~) form_control::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@14 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b14
    jmp b10
  //SEG792 form_control::@10
  b10:
  //SEG793 [397] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx form_field_idx
    dec form_fields_val,x
  //SEG794 [398] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@15 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy form_field_idx
    cmp form_fields_val,y
    bne b15
    jmp b11
  //SEG795 form_control::@11
  b11:
  //SEG796 [399] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp b15
  //SEG797 form_control::@15
  b15:
  //SEG798 [400] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)) -- _deref_pbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    // Render field value
    ldx form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
  //SEG799 [388] phi from form_control::@15 form_control::@23 to form_control::@return [phi:form_control::@15/form_control::@23->form_control::@return]
  breturn_from_b15:
  breturn_from_b23:
  //SEG800 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@15/form_control::@23->form_control::@return#0] -- register_copy 
  //SEG801 [388] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@15/form_control::@23->form_control::@return#1] -- register_copy 
  //SEG802 [388] phi (byte) form_control::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@15/form_control::@23->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp breturn
  //SEG803 form_control::@14
  b14:
  //SEG804 [401] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx form_field_idx
    inc form_fields_val,x
  //SEG805 [402] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@15 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy form_field_idx
    lda form_fields_val,y
    cmp form_fields_max,y
    bcc b15
    beq b15
    jmp b16
  //SEG806 form_control::@16
  b16:
  //SEG807 [403] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy form_field_idx
    sta form_fields_val,y
    jmp b15
  //SEG808 form_control::@5
  b5:
  //SEG809 [404] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE#0) goto form_control::@23 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b23_from_b5
  //SEG810 [388] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  breturn_from_b5:
  //SEG811 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
  //SEG812 [388] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
  //SEG813 [388] phi (byte) form_control::return#2 = (byte/word/signed word/dword/signed dword) $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    jmp breturn
  //SEG814 [405] phi from form_control::@5 to form_control::@23 [phi:form_control::@5->form_control::@23]
  b23_from_b5:
    jmp b23
  //SEG815 form_control::@23
  b23:
    jmp breturn_from_b23
  //SEG816 form_control::@2
  b2:
  //SEG817 [406] (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#0) | (byte/word/signed word/dword/signed dword) $80 -- vbuaa=_deref_pbuz1_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
  //SEG818 [407] *((byte*) form_control::field#0) ← (byte/word/dword~) form_control::$14 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (field),y
    jmp b3_from_b2
  //SEG819 [408] phi from form_control::@17 to form_control::@20 [phi:form_control::@17->form_control::@20]
  b20_from_b17:
    jmp b20
  //SEG820 form_control::@20
  b20:
  //SEG821 [370] phi from form_control::@20 to form_control::@1 [phi:form_control::@20->form_control::@1]
  b1_from_b20:
  //SEG822 [370] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@20->form_control::@1#0] -- register_copy 
    jmp b1
}
//SEG823 form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = 3
  //SEG824 [410] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  b1_from_form_set_screen:
  //SEG825 [410] phi (byte) form_set_screen::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG826 [410] phi (byte*) form_set_screen::line#2 = (const byte*) FORM_SCREEN#0 [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta line
    lda #>FORM_SCREEN
    sta line+1
    jmp b1
  //SEG827 [410] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  b1_from_b1:
  //SEG828 [410] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
  //SEG829 [410] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp b1
  //SEG830 form_set_screen::@1
  b1:
  //SEG831 [411] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda line
  //SEG832 [412] *((const byte[$19]) form_line_lo#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
  //SEG833 [413] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda line+1
  //SEG834 [414] *((const byte[$19]) form_line_hi#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
  //SEG835 [415] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc line
    sta line
    bcc !+
    inc line+1
  !:
  //SEG836 [416] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG837 [417] if((byte) form_set_screen::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne b1_from_b1
    jmp breturn
  //SEG838 form_set_screen::@return
  breturn:
  //SEG839 [418] return 
    rts
}
//SEG840 print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage(3) str)
print_str_lines: {
    .label str = 3
  //SEG841 [420] (byte*~) print_char_cursor#77 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda print_set_screen.screen
    sta print_char_cursor
    lda print_set_screen.screen+1
    sta print_char_cursor+1
  //SEG842 [421] phi from print_str_lines print_str_lines::@5 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1]
  b1_from_print_str_lines:
  b1_from_b5:
  //SEG843 [421] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#0] -- register_copy 
  //SEG844 [421] phi (byte*) print_char_cursor#22 = (byte*~) print_char_cursor#77 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#1] -- register_copy 
  //SEG845 [421] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#2] -- register_copy 
    jmp b1
  //SEG846 print_str_lines::@1
  b1:
  //SEG847 [422] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2_from_b1
    jmp breturn
  //SEG848 print_str_lines::@return
  breturn:
  //SEG849 [423] return 
    rts
  //SEG850 [424] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG851 [424] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#22 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
  //SEG852 [424] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp b2
  //SEG853 print_str_lines::@2
  b2:
  //SEG854 [425] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
  //SEG855 [426] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG856 [427] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@3 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'@'
    beq b3_from_b2
    jmp b4
  //SEG857 print_str_lines::@4
  b4:
  //SEG858 [428] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG859 [429] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG860 [430] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG861 [430] phi (byte*) print_char_cursor#38 = (byte*) print_char_cursor#20 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp b3
  //SEG862 print_str_lines::@3
  b3:
  //SEG863 [431] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'@'
    bne b2_from_b3
  //SEG864 [432] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  b5_from_b3:
    jmp b5
  //SEG865 print_str_lines::@5
  b5:
  //SEG866 [433] call print_ln 
  //SEG867 [435] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
  //SEG868 [434] (byte*~) print_char_cursor#78 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
    jmp b1_from_b5
}
//SEG869 print_ln
// Print a newline
print_ln: {
  //SEG870 [436] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG871 [436] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG872 print_ln::@1
  b1:
  //SEG873 [437] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG874 [438] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG875 print_ln::@return
  breturn:
  //SEG876 [439] return 
    rts
}
//SEG877 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label _0 = 5
    .label sc = 3
  //SEG878 [440] (byte*) print_cls::sc#0 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda print_set_screen.screen
    sta sc
    lda print_set_screen.screen+1
    sta sc+1
  //SEG879 [441] phi from print_cls print_cls::@1 to print_cls::@1 [phi:print_cls/print_cls::@1->print_cls::@1]
  b1_from_print_cls:
  b1_from_b1:
  //SEG880 [441] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#0 [phi:print_cls/print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG881 print_cls::@1
  b1:
  //SEG882 [442] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG883 [443] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG884 [444] (byte*~) print_cls::$0 ← (byte*) print_set_screen::screen#2 + (word/signed word/dword/signed dword) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda print_set_screen.screen
    clc
    adc #<$3e8
    sta _0
    lda print_set_screen.screen+1
    adc #>$3e8
    sta _0+1
  //SEG885 [445] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda sc+1
    cmp _0+1
    bne b1_from_b1
    lda sc
    cmp _0
    bne b1_from_b1
    jmp breturn
  //SEG886 print_cls::@return
  breturn:
  //SEG887 [446] return 
    rts
}
//SEG888 print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zeropage($10) screen)
print_set_screen: {
    .label screen = $10
    jmp breturn
  //SEG889 print_set_screen::@return
  breturn:
  //SEG890 [448] return 
    rts
}
//SEG891 gfx_init
// Initialize the different graphics in the memory
gfx_init: {
  //SEG892 [450] call gfx_init_screen0 
  //SEG893 [848] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
  //SEG894 [451] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  b1_from_gfx_init:
    jmp b1
  //SEG895 gfx_init::@1
  b1:
  //SEG896 [452] call gfx_init_screen1 
  //SEG897 [836] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from_b1:
    jsr gfx_init_screen1
  //SEG898 [453] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  b2_from_b1:
    jmp b2
  //SEG899 gfx_init::@2
  b2:
  //SEG900 [454] call gfx_init_screen2 
  //SEG901 [821] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from_b2:
    jsr gfx_init_screen2
  //SEG902 [455] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  b3_from_b2:
    jmp b3
  //SEG903 gfx_init::@3
  b3:
  //SEG904 [456] call gfx_init_screen3 
  //SEG905 [807] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from_b3:
    jsr gfx_init_screen3
  //SEG906 [457] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  b4_from_b3:
    jmp b4
  //SEG907 gfx_init::@4
  b4:
  //SEG908 [458] call gfx_init_screen4 
  //SEG909 [797] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from_b4:
    jsr gfx_init_screen4
  //SEG910 [459] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  b5_from_b4:
    jmp b5
  //SEG911 gfx_init::@5
  b5:
  //SEG912 [460] call gfx_init_charset 
    jsr gfx_init_charset
  //SEG913 [461] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  b6_from_b5:
    jmp b6
  //SEG914 gfx_init::@6
  b6:
  //SEG915 [462] call gfx_init_vic_bitmap 
  //SEG916 [606] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
  gfx_init_vic_bitmap_from_b6:
    jsr gfx_init_vic_bitmap
  //SEG917 [463] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  b7_from_b6:
    jmp b7
  //SEG918 gfx_init::@7
  b7:
  //SEG919 [464] call gfx_init_plane_8bppchunky 
  //SEG920 [586] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from_b7:
    jsr gfx_init_plane_8bppchunky
  //SEG921 [465] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  b8_from_b7:
    jmp b8
  //SEG922 gfx_init::@8
  b8:
  //SEG923 [466] call gfx_init_plane_charset8 
  //SEG924 [561] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from_b8:
    jsr gfx_init_plane_charset8
  //SEG925 [467] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  b9_from_b8:
    jmp b9
  //SEG926 gfx_init::@9
  b9:
  //SEG927 [468] call gfx_init_plane_horisontal 
  //SEG928 [543] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from_b9:
    jsr gfx_init_plane_horisontal
  //SEG929 [469] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  b10_from_b9:
    jmp b10
  //SEG930 gfx_init::@10
  b10:
  //SEG931 [470] call gfx_init_plane_vertical 
  //SEG932 [530] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from_b10:
    jsr gfx_init_plane_vertical
  //SEG933 [471] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  b11_from_b10:
    jmp b11
  //SEG934 gfx_init::@11
  b11:
  //SEG935 [472] call gfx_init_plane_horisontal2 
  //SEG936 [515] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from_b11:
    jsr gfx_init_plane_horisontal2
  //SEG937 [473] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  b12_from_b11:
    jmp b12
  //SEG938 gfx_init::@12
  b12:
  //SEG939 [474] call gfx_init_plane_vertical2 
  //SEG940 [512] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from_b12:
    jsr gfx_init_plane_vertical2
  //SEG941 [475] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  b13_from_b12:
    jmp b13
  //SEG942 gfx_init::@13
  b13:
  //SEG943 [476] call gfx_init_plane_blank 
  //SEG944 [509] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from_b13:
    jsr gfx_init_plane_blank
  //SEG945 [477] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  b14_from_b13:
    jmp b14
  //SEG946 gfx_init::@14
  b14:
  //SEG947 [478] call gfx_init_plane_full 
  //SEG948 [480] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from_b14:
    jsr gfx_init_plane_full
    jmp breturn
  //SEG949 gfx_init::@return
  breturn:
  //SEG950 [479] return 
    rts
}
//SEG951 gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
  //SEG952 [481] call gfx_init_plane_fill 
  //SEG953 [483] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
  //SEG954 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/word/signed word/dword/signed dword) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta gfx_init_plane_fill.fill
  //SEG955 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_FULL#0 [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp breturn
  //SEG956 gfx_init_plane_full::@return
  breturn:
  //SEG957 [482] return 
    rts
}
//SEG958 gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zeropage(9) plane_addr, byte zeropage(2) fill)
gfx_init_plane_fill: {
    .label _0 = $13
    .label _1 = 3
    .label _4 = 3
    .label _5 = 3
    .label _6 = 3
    .label gfxb = 3
    .label by = 7
    .label plane_addr = 9
    .label fill = 2
  //SEG959 [484] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2 -- vduz1=vduz2_rol_2 
    lda plane_addr
    sta _0
    lda plane_addr+1
    sta _0+1
    lda plane_addr+2
    sta _0+2
    lda plane_addr+3
    sta _0+3
    asl _0
    rol _0+1
    rol _0+2
    rol _0+3
    asl _0
    rol _0+1
    rol _0+2
    rol _0+3
  //SEG960 [485] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda _0+2
    sta _1
    lda _0+3
    sta _1+1
  //SEG961 [486] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuxx=_lo_vwuz1 
    lda _1
    tax
  //SEG962 [487] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuaa=vbuxx 
    txa
  //SEG963 [488] call dtvSetCpuBankSegment1 
  //SEG964 [505] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
  //SEG965 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b5
  //SEG966 gfx_init_plane_fill::@5
  b5:
  //SEG967 [489] (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuxx=_inc_vbuxx 
    inx
  //SEG968 [490] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda plane_addr
    sta _4
    lda plane_addr+1
    sta _4+1
  //SEG969 [491] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda _5
    and #<$3fff
    sta _5
    lda _5+1
    and #>$3fff
    sta _5+1
  //SEG970 [492] (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda _6
    adc #<$4000
    sta _6
    lda _6+1
    adc #>$4000
    sta _6+1
  //SEG971 [493] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word/signed dword/dword~) gfx_init_plane_fill::$6
  //SEG972 [494] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  b1_from_b5:
  //SEG973 [494] phi (byte) gfx_init_plane_fill::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG974 [494] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*~) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp b1
  //SEG975 [494] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  b1_from_b3:
  //SEG976 [494] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
  //SEG977 [494] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp b1
  //SEG978 gfx_init_plane_fill::@1
  b1:
  //SEG979 [495] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  b2_from_b1:
  //SEG980 [495] phi (byte) gfx_init_plane_fill::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG981 [495] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp b2
  //SEG982 [495] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  b2_from_b2:
  //SEG983 [495] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
  //SEG984 [495] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp b2
  //SEG985 gfx_init_plane_fill::@2
  b2:
  //SEG986 [496] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda fill
    ldy #0
    sta (gfxb),y
  //SEG987 [497] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG988 [498] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG989 [499] if((byte) gfx_init_plane_fill::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG990 gfx_init_plane_fill::@3
  b3:
  //SEG991 [500] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG992 [501] if((byte) gfx_init_plane_fill::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp by
    bne b1_from_b3
  //SEG993 [502] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  b4_from_b3:
    jmp b4
  //SEG994 gfx_init_plane_fill::@4
  b4:
  //SEG995 [503] call dtvSetCpuBankSegment1 
  //SEG996 [505] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG997 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG998 gfx_init_plane_fill::@return
  breturn:
  //SEG999 [504] return 
    rts
}
//SEG1000 dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
  //SEG1001 [506] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG1002 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG1003 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG1004 [508] return 
    rts
}
//SEG1005 gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
  //SEG1006 [510] call gfx_init_plane_fill 
  //SEG1007 [483] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
  //SEG1008 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta gfx_init_plane_fill.fill
  //SEG1009 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_BLANK#0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp breturn
  //SEG1010 gfx_init_plane_blank::@return
  breturn:
  //SEG1011 [511] return 
    rts
}
//SEG1012 gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
  //SEG1013 [513] call gfx_init_plane_fill 
  //SEG1014 [483] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
  //SEG1015 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/signed byte/word/signed word/dword/signed dword) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta gfx_init_plane_fill.fill
  //SEG1016 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_VERTICAL2#0 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp breturn
  //SEG1017 gfx_init_plane_vertical2::@return
  breturn:
  //SEG1018 [514] return 
    rts
}
//SEG1019 gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = 3
    .label ay = 2
  //SEG1020 [516] call dtvSetCpuBankSegment1 
  //SEG1021 [505] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
  //SEG1022 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1023 [517] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  b1_from_gfx_init_plane_horisontal2:
  //SEG1024 [517] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_HORISONTAL2&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_HORISONTAL2&$3fff)
    sta gfxa+1
  //SEG1025 [517] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b1
  //SEG1026 [517] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  b1_from_b3:
  //SEG1027 [517] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
  //SEG1028 [517] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp b1
  //SEG1029 gfx_init_plane_horisontal2::@1
  b1:
  //SEG1030 [518] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  b2_from_b1:
  //SEG1031 [518] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1032 [518] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp b2
  //SEG1033 [518] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  b2_from_b2:
  //SEG1034 [518] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
  //SEG1035 [518] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp b2
  //SEG1036 gfx_init_plane_horisontal2::@2
  b2:
  //SEG1037 [519] (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_ror_1 
    lda ay
    lsr
  //SEG1038 [520] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$8 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
  //SEG1039 [521] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG1040 [522] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1041 [523] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1042 [524] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1043 gfx_init_plane_horisontal2::@3
  b3:
  //SEG1044 [525] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG1045 [526] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp ay
    bne b1_from_b3
  //SEG1046 [527] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  b4_from_b3:
    jmp b4
  //SEG1047 gfx_init_plane_horisontal2::@4
  b4:
  //SEG1048 [528] call dtvSetCpuBankSegment1 
  //SEG1049 [505] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG1050 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1051 gfx_init_plane_horisontal2::@return
  breturn:
  //SEG1052 [529] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG1053 gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = 3
    .label by = 2
  //SEG1054 [531] call dtvSetCpuBankSegment1 
  //SEG1055 [505] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
  //SEG1056 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1057 [532] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  b1_from_gfx_init_plane_vertical:
  //SEG1058 [532] phi (byte) gfx_init_plane_vertical::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG1059 [532] phi (byte*) gfx_init_plane_vertical::gfxb#3 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta gfxb+1
    jmp b1
  //SEG1060 [532] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  b1_from_b3:
  //SEG1061 [532] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
  //SEG1062 [532] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp b1
  //SEG1063 gfx_init_plane_vertical::@1
  b1:
  //SEG1064 [533] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  b2_from_b1:
  //SEG1065 [533] phi (byte) gfx_init_plane_vertical::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1066 [533] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp b2
  //SEG1067 [533] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  b2_from_b2:
  //SEG1068 [533] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
  //SEG1069 [533] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp b2
  //SEG1070 gfx_init_plane_vertical::@2
  b2:
  //SEG1071 [534] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG1072 [535] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG1073 [536] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1074 [537] if((byte) gfx_init_plane_vertical::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1075 gfx_init_plane_vertical::@3
  b3:
  //SEG1076 [538] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG1077 [539] if((byte) gfx_init_plane_vertical::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp by
    bne b1_from_b3
  //SEG1078 [540] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  b4_from_b3:
    jmp b4
  //SEG1079 gfx_init_plane_vertical::@4
  b4:
  //SEG1080 [541] call dtvSetCpuBankSegment1 
  //SEG1081 [505] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG1082 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1083 gfx_init_plane_vertical::@return
  breturn:
  //SEG1084 [542] return 
    rts
}
//SEG1085 gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = 3
    .label ay = 2
  //SEG1086 [544] call dtvSetCpuBankSegment1 
  //SEG1087 [505] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
  //SEG1088 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1089 [545] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  b1_from_gfx_init_plane_horisontal:
  //SEG1090 [545] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_HORISONTAL&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_HORISONTAL&$3fff)
    sta gfxa+1
  //SEG1091 [545] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
    jmp b1
  //SEG1092 [545] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  b1_from_b6:
  //SEG1093 [545] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
  //SEG1094 [545] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp b1
  //SEG1095 gfx_init_plane_horisontal::@1
  b1:
  //SEG1096 [546] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  b2_from_b1:
  //SEG1097 [546] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1098 [546] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp b2
  //SEG1099 [546] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  b2_from_b4:
  //SEG1100 [546] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
  //SEG1101 [546] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp b2
  //SEG1102 gfx_init_plane_horisontal::@2
  b2:
  //SEG1103 [547] (byte~) gfx_init_plane_horisontal::$8 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and ay
  //SEG1104 [548] if((byte~) gfx_init_plane_horisontal::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
    jmp b5
  //SEG1105 gfx_init_plane_horisontal::@5
  b5:
  //SEG1106 [549] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG1107 [550] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1108 [551] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  b4_from_b3:
  b4_from_b5:
  //SEG1109 [551] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp b4
  //SEG1110 gfx_init_plane_horisontal::@4
  b4:
  //SEG1111 [552] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1112 [553] if((byte) gfx_init_plane_horisontal::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b4
    jmp b6
  //SEG1113 gfx_init_plane_horisontal::@6
  b6:
  //SEG1114 [554] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG1115 [555] if((byte) gfx_init_plane_horisontal::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp ay
    bne b1_from_b6
  //SEG1116 [556] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  b7_from_b6:
    jmp b7
  //SEG1117 gfx_init_plane_horisontal::@7
  b7:
  //SEG1118 [557] call dtvSetCpuBankSegment1 
  //SEG1119 [505] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b7:
  //SEG1120 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1121 gfx_init_plane_horisontal::@return
  breturn:
  //SEG1122 [558] return 
    rts
  //SEG1123 gfx_init_plane_horisontal::@3
  b3:
  //SEG1124 [559] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
  //SEG1125 [560] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b4_from_b3
}
//SEG1126 gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = 8
    .label chargen = 3
    .label gfxa = 5
    .label col = $d
    .label cr = 7
    .label ch = 2
  //SEG1127 [562] call dtvSetCpuBankSegment1 
  //SEG1128 [505] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
  //SEG1129 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    jmp b9
  //SEG1130 gfx_init_plane_charset8::@9
  b9:
  //SEG1131 [563] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG1132 [564] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  b1_from_b9:
  //SEG1133 [564] phi (byte) gfx_init_plane_charset8::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG1134 [564] phi (byte) gfx_init_plane_charset8::col#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta col
  //SEG1135 [564] phi (byte*) gfx_init_plane_charset8::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_CHARSET8&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_CHARSET8&$3fff)
    sta gfxa+1
  //SEG1136 [564] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN#0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG1137 [564] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  b1_from_b7:
  //SEG1138 [564] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
  //SEG1139 [564] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
  //SEG1140 [564] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
  //SEG1141 [564] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp b1
  //SEG1142 gfx_init_plane_charset8::@1
  b1:
  //SEG1143 [565] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  b2_from_b1:
  //SEG1144 [565] phi (byte) gfx_init_plane_charset8::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG1145 [565] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG1146 [565] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG1147 [565] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG1148 [565] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  b2_from_b6:
  //SEG1149 [565] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
  //SEG1150 [565] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG1151 [565] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG1152 [565] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG1153 gfx_init_plane_charset8::@2
  b2:
  //SEG1154 [566] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG1155 [567] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG1156 [568] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  b3_from_b2:
  //SEG1157 [568] phi (byte) gfx_init_plane_charset8::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1158 [568] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG1159 [568] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG1160 [568] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG1161 [568] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  b3_from_b4:
  //SEG1162 [568] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
  //SEG1163 [568] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG1164 [568] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG1165 [568] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG1166 gfx_init_plane_charset8::@3
  b3:
  //SEG1167 [569] (byte~) gfx_init_plane_charset8::$8 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG1168 [570] if((byte~) gfx_init_plane_charset8::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b3
    jmp b5
  //SEG1169 gfx_init_plane_charset8::@5
  b5:
  //SEG1170 [571] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda col
  //SEG1171 [572] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  b4_from_b5:
  //SEG1172 [572] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp b4
  //SEG1173 [572] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b4_from_b3:
  //SEG1174 [572] phi (byte) gfx_init_plane_charset8::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp b4
  //SEG1175 gfx_init_plane_charset8::@4
  b4:
  //SEG1176 [573] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
  //SEG1177 [574] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1178 [575] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG1179 [576] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG1180 [577] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1181 [578] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3_from_b4
    jmp b6
  //SEG1182 gfx_init_plane_charset8::@6
  b6:
  //SEG1183 [579] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG1184 [580] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp cr
    bne b2_from_b6
    jmp b7
  //SEG1185 gfx_init_plane_charset8::@7
  b7:
  //SEG1186 [581] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG1187 [582] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda ch
    cmp #0
    bne b1_from_b7
    jmp b8
  //SEG1188 gfx_init_plane_charset8::@8
  b8:
  //SEG1189 [583] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG1190 [584] call dtvSetCpuBankSegment1 
  //SEG1191 [505] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b8:
  //SEG1192 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1193 gfx_init_plane_charset8::@return
  breturn:
  //SEG1194 [585] return 
    rts
}
//SEG1195 gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label _9 = $10
    .label gfxb = 5
    .label x = 3
    .label y = 2
  //SEG1196 [587] call dtvSetCpuBankSegment1 
  //SEG1197 [505] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
  //SEG1198 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1199 [588] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  b1_from_gfx_init_plane_8bppchunky:
  //SEG1200 [588] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
  //SEG1201 [588] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1202 [588] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b1
  //SEG1203 [588] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  b1_from_b5:
  //SEG1204 [588] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
  //SEG1205 [588] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
  //SEG1206 [588] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp b1
  //SEG1207 gfx_init_plane_8bppchunky::@1
  b1:
  //SEG1208 [589] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  b2_from_b1:
  //SEG1209 [589] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
  //SEG1210 [589] phi (word) gfx_init_plane_8bppchunky::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
  //SEG1211 [589] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp b2
  //SEG1212 [589] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  b2_from_b3:
  //SEG1213 [589] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
  //SEG1214 [589] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
  //SEG1215 [589] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp b2
  //SEG1216 gfx_init_plane_8bppchunky::@2
  b2:
  //SEG1217 [590] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b3_from_b2
    lda gfxb
    cmp #<$8000
    bne b3_from_b2
    jmp b4
  //SEG1218 gfx_init_plane_8bppchunky::@4
  b4:
  //SEG1219 [591] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
  //SEG1220 [592] call dtvSetCpuBankSegment1 
  //SEG1221 [505] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG1222 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b7
  //SEG1223 gfx_init_plane_8bppchunky::@7
  b7:
  //SEG1224 [593] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1225 [594] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  b3_from_b7:
  //SEG1226 [594] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
  //SEG1227 [594] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b3
  //SEG1228 [594] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  b3_from_b2:
  //SEG1229 [594] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
  //SEG1230 [594] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp b3
  //SEG1231 gfx_init_plane_8bppchunky::@3
  b3:
  //SEG1232 [595] (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _9
    lda #0
    adc x+1
    sta _9+1
  //SEG1233 [596] (byte) gfx_init_plane_8bppchunky::c#0 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9 -- vbuaa=_byte_vwuz1 
    lda _9
  //SEG1234 [597] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG1235 [598] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG1236 [599] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG1237 [600] if((word) gfx_init_plane_8bppchunky::x#1!=(word/signed word/dword/signed dword) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b2_from_b3
    lda x
    cmp #<$140
    bne b2_from_b3
    jmp b5
  //SEG1238 gfx_init_plane_8bppchunky::@5
  b5:
  //SEG1239 [601] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1240 [602] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp y
    bne b1_from_b5
  //SEG1241 [603] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  b6_from_b5:
    jmp b6
  //SEG1242 gfx_init_plane_8bppchunky::@6
  b6:
  //SEG1243 [604] call dtvSetCpuBankSegment1 
  //SEG1244 [505] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b6:
  //SEG1245 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG1246 gfx_init_plane_8bppchunky::@return
  breturn:
  //SEG1247 [605] return 
    rts
}
//SEG1248 gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = 2
  //SEG1249 [607] call bitmap_init 
  //SEG1250 [759] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_vic_bitmap:
    jsr bitmap_init
  //SEG1251 [608] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@2 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@2]
  b2_from_gfx_init_vic_bitmap:
    jmp b2
  //SEG1252 gfx_init_vic_bitmap::@2
  b2:
  //SEG1253 [609] call bitmap_clear 
    jsr bitmap_clear
  //SEG1254 [610] phi from gfx_init_vic_bitmap::@2 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@2->gfx_init_vic_bitmap::@1]
  b1_from_b2:
  //SEG1255 [610] phi (byte) gfx_init_vic_bitmap::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_vic_bitmap::@2->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b1
  //SEG1256 [610] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  b1_from_b3:
  //SEG1257 [610] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp b1
  //SEG1258 gfx_init_vic_bitmap::@1
  b1:
  //SEG1259 [611] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x,y
    sta bitmap_line.x0
  //SEG1260 [612] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy l
    ldx lines_x+1,y
  //SEG1261 [613] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y,y
    sta bitmap_line.y0
  //SEG1262 [614] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_y+1,y
    sta bitmap_line.y1
  //SEG1263 [615] call bitmap_line 
    jsr bitmap_line
    jmp b3
  //SEG1264 gfx_init_vic_bitmap::@3
  b3:
  //SEG1265 [616] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1266 [617] if((byte) gfx_init_vic_bitmap::l#1<(const byte) gfx_init_vic_bitmap::lines_cnt#0) goto gfx_init_vic_bitmap::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1_from_b3
    jmp breturn
  //SEG1267 gfx_init_vic_bitmap::@return
  breturn:
  //SEG1268 [618] return 
    rts
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
//SEG1269 bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage($d) x0, byte register(X) x1, byte zeropage($f) y0, byte zeropage($12) y1)
bitmap_line: {
    .label xd = 8
    .label x0 = $d
    .label y0 = $f
    .label y1 = $12
  //SEG1270 [619] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuxx_then_la1 
    txa
    cmp x0
    beq !+
    bcs b1
  !:
    jmp b2
  //SEG1271 bitmap_line::@2
  b2:
  //SEG1272 [620] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc x0
    sta xd
  //SEG1273 [621] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b7
    jmp b3
  //SEG1274 bitmap_line::@3
  b3:
  //SEG1275 [622] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda y0
    sec
    sbc y1
    tay
  //SEG1276 [623] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b8
    jmp b4
  //SEG1277 bitmap_line::@4
  b4:
  //SEG1278 [624] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxi.y
  //SEG1279 [625] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  //SEG1280 [626] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y1
  //SEG1281 [627] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.yd
  //SEG1282 [628] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1283 [629] call bitmap_line_ydxi 
  //SEG1284 [703] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b4:
  //SEG1285 [703] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
  //SEG1286 [703] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
  //SEG1287 [703] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
  //SEG1288 [703] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
  //SEG1289 [703] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1290 bitmap_line::@return
  breturn:
  //SEG1291 [630] return 
    rts
  //SEG1292 bitmap_line::@8
  b8:
  //SEG1293 [631] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyi.x
  //SEG1294 [632] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyi.y
  //SEG1295 [633] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  //SEG1296 [634] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1297 [635] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty bitmap_line_xdyi.yd
  //SEG1298 [636] call bitmap_line_xdyi 
  //SEG1299 [681] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b8:
  //SEG1300 [681] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
  //SEG1301 [681] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
  //SEG1302 [681] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
  //SEG1303 [681] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
  //SEG1304 [681] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
  //SEG1305 bitmap_line::@7
  b7:
  //SEG1306 [637] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda y1
    sec
    sbc y0
    tay
  //SEG1307 [638] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b9
    jmp b10
  //SEG1308 bitmap_line::@10
  b10:
  //SEG1309 [639] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y
  //SEG1310 [640] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1311 [641] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y1
  //SEG1312 [642] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.yd
  //SEG1313 [643] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1314 [644] call bitmap_line_ydxd 
  //SEG1315 [733] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b10:
  //SEG1316 [733] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
  //SEG1317 [733] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
  //SEG1318 [733] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
  //SEG1319 [733] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
  //SEG1320 [733] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1321 bitmap_line::@9
  b9:
  //SEG1322 [645] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyd.x
  //SEG1323 [646] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyd.y
  //SEG1324 [647] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  //SEG1325 [648] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1326 [649] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty bitmap_line_xdyd.yd
  //SEG1327 [650] call bitmap_line_xdyd 
  //SEG1328 [718] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b9:
  //SEG1329 [718] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
  //SEG1330 [718] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
  //SEG1331 [718] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
  //SEG1332 [718] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
  //SEG1333 [718] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1334 bitmap_line::@1
  b1:
  //SEG1335 [651] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuxx_minus_vbuz2 
    txa
    sec
    sbc x0
    sta xd
  //SEG1336 [652] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b11
    jmp b5
  //SEG1337 bitmap_line::@5
  b5:
  //SEG1338 [653] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda y0
    sec
    sbc y1
    tay
  //SEG1339 [654] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b12
    jmp b6
  //SEG1340 bitmap_line::@6
  b6:
  //SEG1341 [655] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y
  //SEG1342 [656] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  //SEG1343 [657] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  //SEG1344 [658] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.yd
  //SEG1345 [659] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1346 [660] call bitmap_line_ydxd 
  //SEG1347 [733] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from_b6:
  //SEG1348 [733] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
  //SEG1349 [733] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
  //SEG1350 [733] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
  //SEG1351 [733] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
  //SEG1352 [733] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp breturn
  //SEG1353 bitmap_line::@12
  b12:
  //SEG1354 [661] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x
  //SEG1355 [662] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  //SEG1356 [663] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyd.x1
  //SEG1357 [664] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1358 [665] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty bitmap_line_xdyd.yd
  //SEG1359 [666] call bitmap_line_xdyd 
  //SEG1360 [718] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from_b12:
  //SEG1361 [718] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
  //SEG1362 [718] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
  //SEG1363 [718] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
  //SEG1364 [718] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
  //SEG1365 [718] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp breturn
  //SEG1366 bitmap_line::@11
  b11:
  //SEG1367 [667] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda y1
    sec
    sbc y0
    tay
  //SEG1368 [668] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b13
    jmp b14
  //SEG1369 bitmap_line::@14
  b14:
  //SEG1370 [669] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y
  //SEG1371 [670] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1372 [671] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  //SEG1373 [672] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.yd
  //SEG1374 [673] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1375 [674] call bitmap_line_ydxi 
  //SEG1376 [703] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from_b14:
  //SEG1377 [703] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
  //SEG1378 [703] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
  //SEG1379 [703] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
  //SEG1380 [703] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
  //SEG1381 [703] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp breturn
  //SEG1382 bitmap_line::@13
  b13:
  //SEG1383 [675] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x
  //SEG1384 [676] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  //SEG1385 [677] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyi.x1
  //SEG1386 [678] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1387 [679] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty bitmap_line_xdyi.yd
  //SEG1388 [680] call bitmap_line_xdyi 
  //SEG1389 [681] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from_b13:
  //SEG1390 [681] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
  //SEG1391 [681] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
  //SEG1392 [681] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
  //SEG1393 [681] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
  //SEG1394 [681] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp breturn
}
//SEG1395 bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($e) x, byte zeropage($f) y, byte zeropage($d) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyi: {
    .label x = $e
    .label y = $f
    .label x1 = $d
    .label xd = 8
    .label yd = 7
    .label e = $12
  //SEG1396 [682] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1397 [683] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  b1_from_bitmap_line_xdyi:
  b1_from_b2:
  //SEG1398 [683] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
  //SEG1399 [683] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
  //SEG1400 [683] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp b1
  //SEG1401 bitmap_line_xdyi::@1
  b1:
  //SEG1402 [684] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1403 [685] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1404 [686] call bitmap_plot 
  //SEG1405 [696] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1406 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
  //SEG1407 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1408 bitmap_line_xdyi::@4
  b4:
  //SEG1409 [687] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1410 [688] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1411 [689] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1412 bitmap_line_xdyi::@3
  b3:
  //SEG1413 [690] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1414 [691] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1415 [692] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1416 [692] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
  //SEG1417 [692] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp b2
  //SEG1418 bitmap_line_xdyi::@2
  b2:
  //SEG1419 [693] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1420 [694] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1_from_b2
    jmp breturn
  //SEG1421 bitmap_line_xdyi::@return
  breturn:
  //SEG1422 [695] return 
    rts
}
//SEG1423 bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label _0 = 3
    .label plotter_x = 3
    .label plotter_y = 5
  //SEG1424 [697] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta plotter_x+1
    lda bitmap_plot_xlo,x
    sta plotter_x
  //SEG1425 [698] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta plotter_y+1
    lda bitmap_plot_ylo,y
    sta plotter_y
  //SEG1426 [699] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda _0
    clc
    adc plotter_y
    sta _0
    lda _0+1
    adc plotter_y+1
    sta _0+1
  //SEG1427 [700] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (_0),y
  //SEG1428 [701] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (_0),y
    jmp breturn
  //SEG1429 bitmap_plot::@return
  breturn:
  //SEG1430 [702] return 
    rts
}
//SEG1431 bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($e) y, byte register(X) x, byte zeropage($12) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxi: {
    .label y = $e
    .label y1 = $12
    .label yd = 7
    .label xd = 8
    .label e = $d
  //SEG1432 [704] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1433 [705] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  b1_from_bitmap_line_ydxi:
  b1_from_b2:
  //SEG1434 [705] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
  //SEG1435 [705] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
  //SEG1436 [705] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp b1
  //SEG1437 bitmap_line_ydxi::@1
  b1:
  //SEG1438 [706] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  //SEG1439 [707] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1440 [708] call bitmap_plot 
  //SEG1441 [696] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1442 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
  //SEG1443 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1444 bitmap_line_ydxi::@4
  b4:
  //SEG1445 [709] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1446 [710] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1447 [711] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1448 bitmap_line_ydxi::@3
  b3:
  //SEG1449 [712] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1450 [713] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1451 [714] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1452 [714] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
  //SEG1453 [714] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp b2
  //SEG1454 bitmap_line_ydxi::@2
  b2:
  //SEG1455 [715] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1456 [716] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1_from_b2
    jmp breturn
  //SEG1457 bitmap_line_ydxi::@return
  breturn:
  //SEG1458 [717] return 
    rts
}
//SEG1459 bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($e) x, byte zeropage($f) y, byte zeropage($d) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyd: {
    .label x = $e
    .label y = $f
    .label x1 = $d
    .label xd = 8
    .label yd = 7
    .label e = $12
  //SEG1460 [719] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1461 [720] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  b1_from_bitmap_line_xdyd:
  b1_from_b2:
  //SEG1462 [720] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
  //SEG1463 [720] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
  //SEG1464 [720] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp b1
  //SEG1465 bitmap_line_xdyd::@1
  b1:
  //SEG1466 [721] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1467 [722] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1468 [723] call bitmap_plot 
  //SEG1469 [696] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1470 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
  //SEG1471 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1472 bitmap_line_xdyd::@4
  b4:
  //SEG1473 [724] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1474 [725] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1475 [726] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1476 bitmap_line_xdyd::@3
  b3:
  //SEG1477 [727] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec y
  //SEG1478 [728] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1479 [729] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1480 [729] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
  //SEG1481 [729] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp b2
  //SEG1482 bitmap_line_xdyd::@2
  b2:
  //SEG1483 [730] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1484 [731] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1_from_b2
    jmp breturn
  //SEG1485 bitmap_line_xdyd::@return
  breturn:
  //SEG1486 [732] return 
    rts
}
//SEG1487 bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($e) y, byte register(X) x, byte zeropage($f) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxd: {
    .label y = $e
    .label y1 = $f
    .label yd = 7
    .label xd = 8
    .label e = $d
  //SEG1488 [734] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1489 [735] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  b1_from_bitmap_line_ydxd:
  b1_from_b2:
  //SEG1490 [735] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
  //SEG1491 [735] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
  //SEG1492 [735] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp b1
  //SEG1493 bitmap_line_ydxd::@1
  b1:
  //SEG1494 [736] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  //SEG1495 [737] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy y
  //SEG1496 [738] call bitmap_plot 
  //SEG1497 [696] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from_b1:
  //SEG1498 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
  //SEG1499 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b4
  //SEG1500 bitmap_line_ydxd::@4
  b4:
  //SEG1501 [739] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1502 [740] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1503 [741] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2_from_b4
    jmp b3
  //SEG1504 bitmap_line_ydxd::@3
  b3:
  //SEG1505 [742] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
  //SEG1506 [743] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1507 [744] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  b2_from_b3:
  b2_from_b4:
  //SEG1508 [744] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
  //SEG1509 [744] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp b2
  //SEG1510 bitmap_line_ydxd::@2
  b2:
  //SEG1511 [745] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1512 [746] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1_from_b2
    jmp breturn
  //SEG1513 bitmap_line_ydxd::@return
  breturn:
  //SEG1514 [747] return 
    rts
}
//SEG1515 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = 3
    .label y = 2
    .label _3 = 3
  //SEG1516 [748] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta _3
    lda bitmap_plot_xhi
    sta _3+1
  //SEG1517 [749] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  //SEG1518 [750] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG1519 [750] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1520 [750] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1521 [750] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG1522 [750] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG1523 [750] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG1524 bitmap_clear::@1
  b1:
  //SEG1525 [751] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG1526 [751] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1527 [751] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1528 [751] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG1529 [751] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG1530 [751] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG1531 bitmap_clear::@2
  b2:
  //SEG1532 [752] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG1533 [753] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG1534 [754] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1535 [755] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2_from_b2
    jmp b3
  //SEG1536 bitmap_clear::@3
  b3:
  //SEG1537 [756] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1538 [757] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp y
    bne b1_from_b3
    jmp breturn
  //SEG1539 bitmap_clear::@return
  breturn:
  //SEG1540 [758] return 
    rts
}
//SEG1541 bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label _6 = 2
    .label yoffs = 3
  //SEG1542 [760] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG1543 [760] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
  //SEG1544 [760] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG1545 [760] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG1546 [760] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG1547 [760] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG1548 bitmap_init::@1
  b1:
  //SEG1549 [761] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
  //SEG1550 [762] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
  //SEG1551 [763] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>VIC_BITMAP
    sta bitmap_plot_xhi,x
  //SEG1552 [764] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
  //SEG1553 [765] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
  //SEG1554 [766] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b6_from_b1
  //SEG1555 [767] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG1556 [767] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp b2
  //SEG1557 bitmap_init::@2
  b2:
  //SEG1558 [768] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1559 [769] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG1560 [770] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG1561 [770] phi (byte*) bitmap_init::yoffs#2 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta yoffs
    lda #>0
    sta yoffs+1
  //SEG1562 [770] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG1563 [770] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG1564 [770] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG1565 [770] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG1566 bitmap_init::@3
  b3:
  //SEG1567 [771] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax _6
  //SEG1568 [772] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG1569 [773] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora _6
  //SEG1570 [774] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG1571 [775] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG1572 [776] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG1573 [777] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG1574 [778] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4_from_b3
    jmp b5
  //SEG1575 bitmap_init::@5
  b5:
  //SEG1576 [779] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG1577 [780] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  b4_from_b3:
  b4_from_b5:
  //SEG1578 [780] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG1579 bitmap_init::@4
  b4:
  //SEG1580 [781] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1581 [782] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
    jmp breturn
  //SEG1582 bitmap_init::@return
  breturn:
  //SEG1583 [783] return 
    rts
  //SEG1584 [784] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  b6_from_b1:
    jmp b6
  //SEG1585 bitmap_init::@6
  b6:
  //SEG1586 [767] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  b2_from_b6:
  //SEG1587 [767] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
//SEG1588 gfx_init_charset
gfx_init_charset: {
    .label charset = 5
    .label chargen = 3
    .label c = 2
  //SEG1589 [785] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
  //SEG1590 [786] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  b1_from_gfx_init_charset:
  //SEG1591 [786] phi (byte) gfx_init_charset::c#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG1592 [786] phi (byte*) gfx_init_charset::charset#3 = (const byte*) VIC_CHARSET_ROM#0 [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta charset
    lda #>VIC_CHARSET_ROM
    sta charset+1
  //SEG1593 [786] phi (byte*) gfx_init_charset::chargen#3 = (const byte*) CHARGEN#0 [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG1594 [786] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  b1_from_b3:
  //SEG1595 [786] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
  //SEG1596 [786] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
  //SEG1597 [786] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp b1
  //SEG1598 gfx_init_charset::@1
  b1:
  //SEG1599 [787] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  b2_from_b1:
  //SEG1600 [787] phi (byte) gfx_init_charset::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1601 [787] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
  //SEG1602 [787] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp b2
  //SEG1603 [787] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  b2_from_b2:
  //SEG1604 [787] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
  //SEG1605 [787] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
  //SEG1606 [787] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp b2
  //SEG1607 gfx_init_charset::@2
  b2:
  //SEG1608 [788] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
  //SEG1609 [789] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc charset
    bne !+
    inc charset+1
  !:
  //SEG1610 [790] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG1611 [791] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1612 [792] if((byte) gfx_init_charset::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2_from_b2
    jmp b3
  //SEG1613 gfx_init_charset::@3
  b3:
  //SEG1614 [793] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG1615 [794] if((byte) gfx_init_charset::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b1_from_b3
    jmp b4
  //SEG1616 gfx_init_charset::@4
  b4:
  //SEG1617 [795] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp breturn
  //SEG1618 gfx_init_charset::@return
  breturn:
  //SEG1619 [796] return 
    rts
}
//SEG1620 gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = 3
    .label cy = 2
  //SEG1621 [798] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  b1_from_gfx_init_screen4:
  //SEG1622 [798] phi (byte) gfx_init_screen4::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1623 [798] phi (byte*) gfx_init_screen4::ch#3 = (const byte*) VIC_SCREEN4#0 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta ch
    lda #>VIC_SCREEN4
    sta ch+1
    jmp b1
  //SEG1624 [798] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  b1_from_b3:
  //SEG1625 [798] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
  //SEG1626 [798] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp b1
  //SEG1627 gfx_init_screen4::@1
  b1:
  //SEG1628 [799] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  b2_from_b1:
  //SEG1629 [799] phi (byte) gfx_init_screen4::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1630 [799] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp b2
  //SEG1631 [799] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  b2_from_b2:
  //SEG1632 [799] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
  //SEG1633 [799] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp b2
  //SEG1634 gfx_init_screen4::@2
  b2:
  //SEG1635 [800] *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
  //SEG1636 [801] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1637 [802] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1638 [803] if((byte) gfx_init_screen4::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1639 gfx_init_screen4::@3
  b3:
  //SEG1640 [804] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1641 [805] if((byte) gfx_init_screen4::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1642 gfx_init_screen4::@return
  breturn:
  //SEG1643 [806] return 
    rts
}
//SEG1644 gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label _1 = 7
    .label ch = 3
    .label cy = 2
  //SEG1645 [808] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  b1_from_gfx_init_screen3:
  //SEG1646 [808] phi (byte*) gfx_init_screen3::ch#3 = (const byte*) VIC_SCREEN3#0 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta ch
    lda #>VIC_SCREEN3
    sta ch+1
  //SEG1647 [808] phi (byte) gfx_init_screen3::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1648 [808] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  b1_from_b3:
  //SEG1649 [808] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
  //SEG1650 [808] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp b1
  //SEG1651 gfx_init_screen3::@1
  b1:
  //SEG1652 [809] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  b2_from_b1:
  //SEG1653 [809] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
  //SEG1654 [809] phi (byte) gfx_init_screen3::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG1655 [809] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  b2_from_b2:
  //SEG1656 [809] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
  //SEG1657 [809] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp b2
  //SEG1658 gfx_init_screen3::@2
  b2:
  //SEG1659 [810] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
  //SEG1660 [811] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _1
  //SEG1661 [812] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and cy
  //SEG1662 [813] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora _1
  //SEG1663 [814] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1664 [815] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1665 [816] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1666 [817] if((byte) gfx_init_screen3::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1667 gfx_init_screen3::@3
  b3:
  //SEG1668 [818] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1669 [819] if((byte) gfx_init_screen3::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1670 gfx_init_screen3::@return
  breturn:
  //SEG1671 [820] return 
    rts
}
//SEG1672 gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = 7
    .label ch = 3
    .label cy = 2
  //SEG1673 [822] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  b1_from_gfx_init_screen2:
  //SEG1674 [822] phi (byte*) gfx_init_screen2::ch#3 = (const byte*) VIC_SCREEN2#0 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta ch
    lda #>VIC_SCREEN2
    sta ch+1
  //SEG1675 [822] phi (byte) gfx_init_screen2::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1676 [822] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  b1_from_b3:
  //SEG1677 [822] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
  //SEG1678 [822] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp b1
  //SEG1679 gfx_init_screen2::@1
  b1:
  //SEG1680 [823] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  b2_from_b1:
  //SEG1681 [823] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
  //SEG1682 [823] phi (byte) gfx_init_screen2::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG1683 [823] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  b2_from_b2:
  //SEG1684 [823] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
  //SEG1685 [823] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp b2
  //SEG1686 gfx_init_screen2::@2
  b2:
  //SEG1687 [824] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1688 [825] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
  //SEG1689 [826] (byte) gfx_init_screen2::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta col2
  //SEG1690 [827] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
  //SEG1691 [828] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora col2
  //SEG1692 [829] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1693 [830] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1694 [831] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1695 [832] if((byte) gfx_init_screen2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1696 gfx_init_screen2::@3
  b3:
  //SEG1697 [833] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1698 [834] if((byte) gfx_init_screen2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1699 gfx_init_screen2::@return
  breturn:
  //SEG1700 [835] return 
    rts
}
//SEG1701 gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = 3
    .label cy = 2
  //SEG1702 [837] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  b1_from_gfx_init_screen1:
  //SEG1703 [837] phi (byte*) gfx_init_screen1::ch#3 = (const byte*) VIC_SCREEN1#0 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta ch
    lda #>VIC_SCREEN1
    sta ch+1
  //SEG1704 [837] phi (byte) gfx_init_screen1::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1705 [837] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  b1_from_b3:
  //SEG1706 [837] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
  //SEG1707 [837] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp b1
  //SEG1708 gfx_init_screen1::@1
  b1:
  //SEG1709 [838] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  b2_from_b1:
  //SEG1710 [838] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
  //SEG1711 [838] phi (byte) gfx_init_screen1::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG1712 [838] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  b2_from_b2:
  //SEG1713 [838] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
  //SEG1714 [838] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp b2
  //SEG1715 gfx_init_screen1::@2
  b2:
  //SEG1716 [839] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1717 [840] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1718 [841] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1719 [842] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1720 [843] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1721 [844] if((byte) gfx_init_screen1::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1722 gfx_init_screen1::@3
  b3:
  //SEG1723 [845] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1724 [846] if((byte) gfx_init_screen1::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1725 gfx_init_screen1::@return
  breturn:
  //SEG1726 [847] return 
    rts
}
//SEG1727 gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label _1 = 7
    .label ch = 3
    .label cy = 2
  //SEG1728 [849] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  b1_from_gfx_init_screen0:
  //SEG1729 [849] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) VIC_SCREEN0#0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta ch
    lda #>VIC_SCREEN0
    sta ch+1
  //SEG1730 [849] phi (byte) gfx_init_screen0::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG1731 [849] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  b1_from_b3:
  //SEG1732 [849] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
  //SEG1733 [849] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp b1
  //SEG1734 gfx_init_screen0::@1
  b1:
  //SEG1735 [850] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  b2_from_b1:
  //SEG1736 [850] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
  //SEG1737 [850] phi (byte) gfx_init_screen0::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG1738 [850] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  b2_from_b2:
  //SEG1739 [850] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
  //SEG1740 [850] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp b2
  //SEG1741 gfx_init_screen0::@2
  b2:
  //SEG1742 [851] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1743 [852] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _1
  //SEG1744 [853] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1745 [854] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora _1
  //SEG1746 [855] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1747 [856] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1748 [857] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1749 [858] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG1750 gfx_init_screen0::@3
  b3:
  //SEG1751 [859] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1752 [860] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1_from_b3
    jmp breturn
  //SEG1753 gfx_init_screen0::@return
  breturn:
  //SEG1754 [861] return 
    rts
}
//SEG1755 keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
  //SEG1756 [862] *((const byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1_PORT_A_DDR
  //SEG1757 [863] *((const byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1_PORT_B_DDR
    jmp breturn
  //SEG1758 keyboard_init::@return
  breturn:
  //SEG1759 [864] return 
    rts
}
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"+" overscan   0   step    00   bgcol2 00  @"+"                modulo  00   bgcol3 00  @"+"@"
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+"@"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b11
Removing instruction jmp b2
Removing instruction jmp b12
Removing instruction jmp b3
Removing instruction jmp b13
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b5
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b16
Removing instruction jmp b7
Removing instruction jmp b17
Removing instruction jmp b8
Removing instruction jmp b18
Removing instruction jmp b9
Removing instruction jmp b27
Removing instruction jmp b28
Removing instruction jmp b29
Removing instruction jmp b30
Removing instruction jmp b31
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp b22
Removing instruction jmp b23
Removing instruction jmp b25
Removing instruction jmp b26
Removing instruction jmp b32
Removing instruction jmp b33
Removing instruction jmp breturn
Removing instruction jmp b24
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b19
Removing instruction jmp b16
Removing instruction jmp b8
Removing instruction jmp b17
Removing instruction jmp b20
Removing instruction jmp b18
Removing instruction jmp b1
Removing instruction jmp b21
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b22
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b23
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b10
Removing instruction jmp b15
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b17
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b1
Removing instruction jmp b13
Removing instruction jmp breturn
Removing instruction jmp b17
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b13
Removing instruction jmp breturn
Removing instruction jmp b21
Removing instruction jmp b22
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b23
Removing instruction jmp b20
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b14
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda _26+1
Removing instruction lda _40+1
Removing instruction lda _59+1
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda row_scan
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy l
Removing instruction ldy l
Removing instruction ldy l
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b4_from_b3 with b4
Replacing label b5_from_b4 with b5
Replacing label b6_from_b5 with b6
Replacing label b8_from_b7 with b8
Replacing label b20_from_b20 with b20
Replacing label b19_from_b21 with b19
Replacing label b23_from_b23 with b23
Replacing label b24_from_b24 with b24
Replacing label b7_from_b8 with b7
Replacing label b2_from_b21 with b2
Replacing label b3_from_b22 with b3
Replacing label breturn_from_b23 with breturn
Replacing label b10_from_b9 with b10
Replacing label b10_from_b12 with b10
Replacing label b8_from_b15 with b8
Replacing label b10_from_b11 with b10
Replacing label breturn_from_get_vic_screen with breturn_from_b1
Replacing label b1_from_b5 with b1
Replacing label breturn_from_get_vic_charset with breturn_from_b1
Replacing label b1_from_b2 with b1
Replacing label breturn_from_get_plane with breturn_from_b1
Replacing label b1_from_b14 with b1
Replacing label b1_from_b1 with b1
Replacing label b3 with b4
Replacing label b3_from_b6 with b4
Replacing label b3_from_b19 with b3_from_b2
Replacing label b1_from_render_preset_name with b12
Replacing label b1_from_b2 with b1
Replacing label b1_from_apply_preset with b12
Replacing label b13_from_b13 with b13
Replacing label b20_from_b17 with b20
Replacing label b21_from_b8 with b21
Replacing label b22_from_b12 with b22
Replacing label b13_from_b22 with b21
Replacing label b23_from_b5 with b23
Replacing label b3_from_b2 with b3
Replacing label b1_from_b1 with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b2_from_b3 with b2
Replacing label b1_from_b5 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b6 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b2_from_b6 with b2
Replacing label b1_from_b7 with b1
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b2_from_b3 with b2
Replacing label b2_from_b3 with b2
Replacing label b1_from_b5 with b1
Replacing label b1_from_b3 with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b4 with b2
Replacing label b1_from_b2 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b6_from_b1 with b6
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Removing instruction b3_from_main:
Removing instruction gfx_init_from_b3:
Removing instruction b1:
Removing instruction b2_from_b1:
Removing instruction form_mode_from_b2:
Removing instruction b4_from_b2:
Removing instruction b10_from_gfx_mode:
Removing instruction b1_from_b10:
Removing instruction b2_from_b1:
Removing instruction b2_from_b11:
Removing instruction b3_from_b12:
Removing instruction b3_from_b2:
Removing instruction b4_from_b13:
Removing instruction b4_from_b3:
Removing instruction b5_from_b14:
Removing instruction b5_from_b4:
Removing instruction b6_from_b15:
Removing instruction b6_from_b5:
Removing instruction b16_from_b6:
Removing instruction b7_from_b16:
Removing instruction b8_from_b17:
Removing instruction b8_from_b7:
Removing instruction b18_from_b8:
Removing instruction b9_from_b18:
Removing instruction b19_from_b31:
Removing instruction b19_from_b21:
Removing instruction b20_from_b19:
Removing instruction b20_from_b20:
Removing instruction b23_from_b23:
Removing instruction b26_from_b25:
Removing instruction keyboard_event_scan_from_b26:
Removing instruction b32_from_b26:
Removing instruction b24_from_b24:
Removing instruction b7_from_b8:
Removing instruction b8_from_b15:
Removing instruction b8_from_b16:
Removing instruction b17_from_b8:
Removing instruction keyboard_event_pressed_from_b17:
Removing instruction b18_from_b20:
Removing instruction b1_from_b18:
Removing instruction keyboard_event_pressed_from_b1:
Removing instruction b2_from_b21:
Removing instruction b2_from_b4:
Removing instruction keyboard_event_pressed_from_b2:
Removing instruction b3_from_b22:
Removing instruction b3_from_b5:
Removing instruction keyboard_event_pressed_from_b3:
Removing instruction breturn_from_b23:
Removing instruction breturn_from_b6:
Removing instruction b10_from_b11:
Removing instruction b10_from_b12:
Removing instruction b10_from_b14:
Removing instruction b10_from_b9:
Removing instruction breturn_from_get_vic_screen:
Removing instruction b1_from_b5:
Removing instruction breturn_from_get_vic_charset:
Removing instruction b1_from_b2:
Removing instruction breturn_from_get_plane:
Removing instruction b1_from_b14:
Removing instruction b8_from_form_mode:
Removing instruction b9_from_b8:
Removing instruction print_str_lines_from_b9:
Removing instruction b10_from_b9:
Removing instruction print_set_screen_from_b10:
Removing instruction b11_from_b10:
Removing instruction b12_from_b11:
Removing instruction print_str_lines_from_b12:
Removing instruction b13_from_b12:
Removing instruction form_set_screen_from_b13:
Removing instruction b14_from_b13:
Removing instruction form_render_values_from_b14:
Removing instruction b1_from_b1:
Removing instruction b3_from_b19:
Removing instruction b3_from_b6:
Removing instruction b3:
Removing instruction b5_from_b4:
Removing instruction b12_from_b11:
Removing instruction b1_from_render_preset_name:
Removing instruction b1_from_b12:
Removing instruction print_str_at_from_b1:
Removing instruction b1_from_b2:
Removing instruction b12_from_b11:
Removing instruction b1_from_apply_preset:
Removing instruction b1_from_b12:
Removing instruction b13_from_b1:
Removing instruction b13_from_b13:
Removing instruction b3_from_b2:
Removing instruction b3_from_b6:
Removing instruction keyboard_event_scan_from_b3:
Removing instruction b18_from_b3:
Removing instruction breturn_from_b13:
Removing instruction b21_from_b8:
Removing instruction b13_from_b21:
Removing instruction b13_from_b22:
Removing instruction b22_from_b12:
Removing instruction breturn_from_b15:
Removing instruction b23_from_b5:
Removing instruction b20_from_b17:
Removing instruction b1_from_b20:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str_lines:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b5_from_b3:
Removing instruction print_ln_from_b5:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_cls:
Removing instruction b1_from_b1:
Removing instruction b1_from_gfx_init:
Removing instruction gfx_init_screen1_from_b1:
Removing instruction b2_from_b1:
Removing instruction gfx_init_screen2_from_b2:
Removing instruction b3_from_b2:
Removing instruction gfx_init_screen3_from_b3:
Removing instruction b4_from_b3:
Removing instruction gfx_init_screen4_from_b4:
Removing instruction b5_from_b4:
Removing instruction b6_from_b5:
Removing instruction gfx_init_vic_bitmap_from_b6:
Removing instruction b7_from_b6:
Removing instruction gfx_init_plane_8bppchunky_from_b7:
Removing instruction b8_from_b7:
Removing instruction gfx_init_plane_charset8_from_b8:
Removing instruction b9_from_b8:
Removing instruction gfx_init_plane_horisontal_from_b9:
Removing instruction b10_from_b9:
Removing instruction gfx_init_plane_vertical_from_b10:
Removing instruction b11_from_b10:
Removing instruction gfx_init_plane_horisontal2_from_b11:
Removing instruction b12_from_b11:
Removing instruction gfx_init_plane_vertical2_from_b12:
Removing instruction b13_from_b12:
Removing instruction gfx_init_plane_blank_from_b13:
Removing instruction b14_from_b13:
Removing instruction gfx_init_plane_full_from_b14:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b4_from_b3:
Removing instruction dtvSetCpuBankSegment1_from_b4:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b4_from_b3:
Removing instruction dtvSetCpuBankSegment1_from_b4:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b4_from_b3:
Removing instruction dtvSetCpuBankSegment1_from_b4:
Removing instruction b1_from_b6:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b5:
Removing instruction b7_from_b6:
Removing instruction dtvSetCpuBankSegment1_from_b7:
Removing instruction b1_from_b7:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b4:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b3_from_b2:
Removing instruction b6_from_b5:
Removing instruction dtvSetCpuBankSegment1_from_b6:
Removing instruction b2_from_gfx_init_vic_bitmap:
Removing instruction b1_from_b3:
Removing instruction b1_from_bitmap_line_xdyi:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction b1_from_bitmap_line_ydxi:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction b1_from_bitmap_line_xdyd:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction b1_from_bitmap_line_ydxd:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b5:
Removing instruction b6_from_b1:
Removing instruction b2_from_b6:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction get_plane_from_b9:
Removing instruction b27:
Removing instruction get_plane_from_b27:
Removing instruction b28:
Removing instruction get_vic_screen_from_b28:
Removing instruction b29:
Removing instruction b30:
Removing instruction get_vic_screen_from_b30:
Removing instruction b31:
Removing instruction b21:
Removing instruction b22:
Removing instruction b23_from_b22:
Removing instruction b26:
Removing instruction b32:
Removing instruction b33:
Removing instruction breturn:
Removing instruction b1:
Removing instruction breturn_from_b1:
Removing instruction b7_from_keyboard_event_scan:
Removing instruction b19:
Removing instruction b16:
Removing instruction b17:
Removing instruction b20:
Removing instruction b18:
Removing instruction b21:
Removing instruction b4:
Removing instruction b22:
Removing instruction b5:
Removing instruction b23:
Removing instruction b6:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn_from_b5:
Removing instruction b2:
Removing instruction breturn_from_b2:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction breturn_from_b14:
Removing instruction print_set_screen_from_form_mode:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction render_preset_name_from_b15:
Removing instruction b16:
Removing instruction b1_from_b16:
Removing instruction b2:
Removing instruction b5:
Removing instruction b17:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b18:
Removing instruction form_render_values_from_b18:
Removing instruction b19:
Removing instruction render_preset_name_from_b19:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_print_str_at:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b1_from_form_render_values:
Removing instruction form_field_ptr_from_b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction form_field_ptr_from_form_control:
Removing instruction b17:
Removing instruction b1_from_b17:
Removing instruction b6:
Removing instruction b18:
Removing instruction b19:
Removing instruction b7:
Removing instruction b8:
Removing instruction b13_from_b8:
Removing instruction b13_from_b12:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b16:
Removing instruction breturn_from_b5:
Removing instruction b1_from_form_set_screen:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction gfx_init_screen0_from_gfx_init:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_full:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
Removing instruction b5:
Removing instruction b1_from_b5:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_blank:
Removing instruction breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_vertical2:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
Removing instruction b1_from_gfx_init_plane_horisontal2:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
Removing instruction b1_from_gfx_init_plane_vertical:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
Removing instruction b1_from_gfx_init_plane_horisontal:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
Removing instruction b9:
Removing instruction b1_from_b9:
Removing instruction b3_from_b2:
Removing instruction b5:
Removing instruction b4_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction dtvSetCpuBankSegment1_from_b8:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
Removing instruction b1_from_gfx_init_plane_8bppchunky:
Removing instruction b4:
Removing instruction dtvSetCpuBankSegment1_from_b4:
Removing instruction b7:
Removing instruction b3_from_b7:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction bitmap_init_from_gfx_init_vic_bitmap:
Removing instruction b2:
Removing instruction b1_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction bitmap_line_ydxi_from_b4:
Removing instruction bitmap_line_xdyi_from_b8:
Removing instruction b10:
Removing instruction bitmap_line_ydxd_from_b10:
Removing instruction bitmap_line_xdyd_from_b9:
Removing instruction b5:
Removing instruction b6:
Removing instruction bitmap_line_ydxd_from_b6:
Removing instruction bitmap_line_xdyd_from_b12:
Removing instruction b14:
Removing instruction bitmap_line_ydxi_from_b14:
Removing instruction bitmap_line_xdyi_from_b13:
Removing instruction bitmap_plot_from_b1:
Removing instruction b4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction bitmap_plot_from_b1:
Removing instruction b4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction bitmap_plot_from_b1:
Removing instruction b4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction bitmap_plot_from_b1:
Removing instruction b4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_clear:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_init:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_charset:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_screen4:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_screen3:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_screen2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_screen1:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_screen0:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp breturn
Skipping double jump to b9 in bne b9_from_b10
Skipping double jump to breturn_from_b1 in bne b1
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Skipping double jump to breturn_from_b1 in bne b1
Replacing jump to rts with rts in jmp breturn
Skipping double jump to breturn_from_b1 in bne b1
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Skipping double jump to b4 in jmp b3_from_b2
Skipping double jump to b1 in bpl b20
Skipping double jump to b13 in bne b21
Skipping double jump to b21 in bne b22
Skipping double jump to b13 in jmp b21
Replacing jump to rts with rts in jmp breturn
Skipping double jump to breturn_from_b23 in bne b23
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Skipping double jump to b2 in bne b6
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_gfx_mode to b10
Relabelling long label b7_from_b6 to b11
Relabelling long label b9_from_b8 to b12
Relabelling long label b24_from_b22 to b13
Relabelling long label breturn_from_keyboard_event_get to b1
Relabelling long label b1_from_b20 to b4
Relabelling long label b9_from_b10 to b5
Relabelling long label b9_from_b19 to b6
Relabelling long label breturn_from_b1 to b2
Relabelling long label breturn_from_b2 to b3
Relabelling long label breturn_from_b3 to b4
Relabelling long label breturn_from_b4 to b5
Relabelling long label breturn_from_b1 to b2
Relabelling long label breturn_from_b1 to b2
Relabelling long label breturn_from_b10 to b3
Relabelling long label breturn_from_b11 to b4
Relabelling long label breturn_from_b12 to b5
Relabelling long label breturn_from_b13 to b6
Relabelling long label breturn_from_b2 to b7
Relabelling long label breturn_from_b3 to b8
Relabelling long label breturn_from_b4 to b9
Relabelling long label breturn_from_b5 to b10
Relabelling long label breturn_from_b6 to b11
Relabelling long label breturn_from_b7 to b12
Relabelling long label breturn_from_b8 to b13
Relabelling long label breturn_from_b9 to b14
Relabelling long label b3_from_b2 to b2
Relabelling long label b1_from_b10 to b2
Relabelling long label b1_from_b11 to b3
Relabelling long label b1_from_b2 to b4
Relabelling long label b1_from_b3 to b5
Relabelling long label b1_from_b4 to b6
Relabelling long label b1_from_b5 to b7
Relabelling long label b1_from_b6 to b8
Relabelling long label b1_from_b7 to b9
Relabelling long label b1_from_b8 to b10
Relabelling long label b1_from_b9 to b11
Relabelling long label b1_from_b10 to b2
Relabelling long label b1_from_b11 to b3
Relabelling long label b1_from_b2 to b4
Relabelling long label b1_from_b3 to b5
Relabelling long label b1_from_b4 to b6
Relabelling long label b1_from_b5 to b7
Relabelling long label b1_from_b6 to b8
Relabelling long label b1_from_b7 to b9
Relabelling long label b1_from_b8 to b10
Relabelling long label b1_from_b9 to b11
Relabelling long label breturn_from_b23 to b6
Relabelling long label b4_from_b3 to b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b23
Removing instruction jmp b24
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b13
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction lda form_fields_val
Removing instruction ldy form_field_idx
Removing instruction ldy form_field_idx
Removing instruction lda y0
Removing instruction lda y0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Removing instruction breturn:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b22:
Removing instruction b23:
Removing instruction b20:
Removing instruction breturn:
Removing instruction b6:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b13 in bne b21
Succesful ASM optimization Pass5DoubleJumpElimination
Removing unreachable instruction jmp b9
Removing unreachable instruction jmp b2
Removing unreachable instruction jmp b2
Removing unreachable instruction jmp b2
Removing unreachable instruction jmp b13
Removing unreachable instruction jmp b6
Removing unreachable instruction jmp b1
Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5UnreachableCodeElimination
Removing instruction b21:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b13
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [747] beq b7 to bne
Fixing long branch [751] beq b8 to bne
Fixing long branch [755] beq b9 to bne
Fixing long branch [759] beq b10 to bne
Fixing long branch [763] beq b11 to bne
Fixing long branch [767] beq b12 to bne
Fixing long branch [771] beq b13 to bne
Fixing long branch [775] beq b14 to bne
Fixing long branch [1324] bmi b2 to bpl

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(byte*) BGCOL1
(const byte*) BGCOL1#0 BGCOL1 = ((byte*))(word/dword/signed dword) $d021
(byte*) BGCOL2
(const byte*) BGCOL2#0 BGCOL2 = ((byte*))(word/dword/signed dword) $d022
(byte*) BGCOL3
(const byte*) BGCOL3#0 BGCOL3 = ((byte*))(word/dword/signed dword) $d023
(byte*) BGCOL4
(const byte*) BGCOL4#0 BGCOL4 = ((byte*))(word/dword/signed dword) $d024
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) $d020
(byte) BROWN
(byte*) CHARGEN
(const byte*) CHARGEN#0 CHARGEN = ((byte*))(word/dword/signed dword) $d000
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = ((byte*))(word/dword/signed dword) $dc00
(byte*) CIA1_PORT_A_DDR
(const byte*) CIA1_PORT_A_DDR#0 CIA1_PORT_A_DDR = ((byte*))(word/dword/signed dword) $dc02
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = ((byte*))(word/dword/signed dword) $dc01
(byte*) CIA1_PORT_B_DDR
(const byte*) CIA1_PORT_B_DDR#0 CIA1_PORT_B_DDR = ((byte*))(word/dword/signed dword) $dc03
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) $dd00
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) $dd02
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) $d800
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) DTV_BADLINE_OFF
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_TRANSPARANCY
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XOR
(byte) DTV_BORDER_OFF
(const byte) DTV_BORDER_OFF#0 DTV_BORDER_OFF = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) DTV_CHUNKY
(const byte) DTV_CHUNKY#0 DTV_CHUNKY = (byte/signed byte/word/signed word/dword/signed dword) $40
(byte) DTV_COLORRAM_OFF
(const byte) DTV_COLORRAM_OFF#0 DTV_COLORRAM_OFF = (byte/signed byte/word/signed word/dword/signed dword) $10
(dword) DTV_COLOR_BANK_DEFAULT
(const dword) DTV_COLOR_BANK_DEFAULT#0 DTV_COLOR_BANK_DEFAULT = (dword/signed dword) $1d800
(byte*) DTV_COLOR_BANK_HI
(const byte*) DTV_COLOR_BANK_HI#0 DTV_COLOR_BANK_HI = ((byte*))(word/dword/signed dword) $d037
(byte*) DTV_COLOR_BANK_LO
(const byte*) DTV_COLOR_BANK_LO#0 DTV_COLOR_BANK_LO = ((byte*))(word/dword/signed dword) $d036
(byte*) DTV_CONTROL
(const byte*) DTV_CONTROL#0 DTV_CONTROL = ((byte*))(word/dword/signed dword) $d03c
(byte*) DTV_FEATURE
(const byte*) DTV_FEATURE#0 DTV_FEATURE = ((byte*))(word/dword/signed dword) $d03f
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_ENABLE
(const byte) DTV_FEATURE_ENABLE#0 DTV_FEATURE_ENABLE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_VIC_BANK
(const byte*) DTV_GRAPHICS_VIC_BANK#0 DTV_GRAPHICS_VIC_BANK = ((byte*))(word/dword/signed dword) $d03d
(byte) DTV_HIGHCOLOR
(const byte) DTV_HIGHCOLOR#0 DTV_HIGHCOLOR = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) DTV_LINEAR
(const byte) DTV_LINEAR#0 DTV_LINEAR = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) DTV_OVERSCAN
(const byte) DTV_OVERSCAN#0 DTV_OVERSCAN = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) DTV_PALETTE
(const byte*) DTV_PALETTE#0 DTV_PALETTE = ((byte*))(word/dword/signed dword) $d200
(byte[$10]) DTV_PALETTE_DEFAULT
(const byte[$10]) DTV_PALETTE_DEFAULT#0 DTV_PALETTE_DEFAULT = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $36, (byte/word/signed word/dword/signed dword) $be, (byte/signed byte/word/signed word/dword/signed dword) $58, (byte/word/signed word/dword/signed dword) $db, (byte/word/signed word/dword/signed dword) $86, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) $29, (byte/signed byte/word/signed word/dword/signed dword) $26, (byte/signed byte/word/signed word/dword/signed dword) $3b, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $9a, (byte/signed byte/word/signed word/dword/signed dword) $a }
(byte*) DTV_PLANEA_MODULO_HI
(const byte*) DTV_PLANEA_MODULO_HI#0 DTV_PLANEA_MODULO_HI = ((byte*))(word/dword/signed dword) $d039
(byte*) DTV_PLANEA_MODULO_LO
(const byte*) DTV_PLANEA_MODULO_LO#0 DTV_PLANEA_MODULO_LO = ((byte*))(word/dword/signed dword) $d038
(byte*) DTV_PLANEA_START_HI
(const byte*) DTV_PLANEA_START_HI#0 DTV_PLANEA_START_HI = ((byte*))(word/dword/signed dword) $d045
(byte*) DTV_PLANEA_START_LO
(const byte*) DTV_PLANEA_START_LO#0 DTV_PLANEA_START_LO = ((byte*))(word/dword/signed dword) $d03a
(byte*) DTV_PLANEA_START_MI
(const byte*) DTV_PLANEA_START_MI#0 DTV_PLANEA_START_MI = ((byte*))(word/dword/signed dword) $d03b
(byte*) DTV_PLANEA_STEP
(const byte*) DTV_PLANEA_STEP#0 DTV_PLANEA_STEP = ((byte*))(word/dword/signed dword) $d046
(byte*) DTV_PLANEB_MODULO_HI
(const byte*) DTV_PLANEB_MODULO_HI#0 DTV_PLANEB_MODULO_HI = ((byte*))(word/dword/signed dword) $d048
(byte*) DTV_PLANEB_MODULO_LO
(const byte*) DTV_PLANEB_MODULO_LO#0 DTV_PLANEB_MODULO_LO = ((byte*))(word/dword/signed dword) $d047
(byte*) DTV_PLANEB_START_HI
(const byte*) DTV_PLANEB_START_HI#0 DTV_PLANEB_START_HI = ((byte*))(word/dword/signed dword) $d04b
(byte*) DTV_PLANEB_START_LO
(const byte*) DTV_PLANEB_START_LO#0 DTV_PLANEB_START_LO = ((byte*))(word/dword/signed dword) $d049
(byte*) DTV_PLANEB_START_MI
(const byte*) DTV_PLANEB_START_MI#0 DTV_PLANEB_START_MI = ((byte*))(word/dword/signed dword) $d04a
(byte*) DTV_PLANEB_STEP
(const byte*) DTV_PLANEB_STEP#0 DTV_PLANEB_STEP = ((byte*))(word/dword/signed dword) $d04c
(byte*) DTV_SPRITE_BANK
(byte*) FORM_CHARSET
(const byte*) FORM_CHARSET#0 FORM_CHARSET = ((byte*))(word/signed word/dword/signed dword) $1800
(byte[]) FORM_COLS
(const byte[]) FORM_COLS#0 FORM_COLS = (string) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+(string) "                                        @"+(string) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+(string) "                                        @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm              @"+(string) " nnnnnnnnnnnn                jjjjjjjjj  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+(string) " nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+(string) "@"
(signed byte) FORM_CURSOR_BLINK
(const signed byte) FORM_CURSOR_BLINK#0 FORM_CURSOR_BLINK = (byte/signed byte/word/signed word/dword/signed dword) $28
(byte*) FORM_SCREEN
(const byte*) FORM_SCREEN#0 FORM_SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte[]) FORM_TEXT
(const byte[]) FORM_TEXT#0 FORM_TEXT = (string) " C64 DTV Graphics Mode Explorer         @"+(string) "                                        @"+(string) " PRESET 0 Standard Charset              @"+(string) "                                        @"+(string) " CONTROL        PLANE  A     VIC II     @"+(string) " bmm        0   pattern p0   screen s0  @"+(string) " mcm        0   start   00   gfx    g0  @"+(string) " ecm        0   step    00   colors c0  @"+(string) " hicolor    0   modulo  00              @"+(string) " linear     0                COLORS     @"+(string) " color off  0   PLANE  B     palet   0  @"+(string) " chunky     0   pattern p0   bgcol0 00  @"+(string) " border off 0   start   00   bgcol1 00  @"+(string) " overscan   0   step    00   bgcol2 00  @"+(string) "                modulo  00   bgcol3 00  @"+(string) "@"
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte) KEY_0
(byte) KEY_1
(byte) KEY_2
(byte) KEY_3
(byte) KEY_4
(byte) KEY_5
(byte) KEY_6
(byte) KEY_7
(byte) KEY_8
(byte) KEY_9
(byte) KEY_A
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(byte) KEY_C
(byte) KEY_COLON
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(const byte) KEY_COMMODORE#0 KEY_COMMODORE = (byte/signed byte/word/signed word/dword/signed dword) $3d
(byte) KEY_CRSR_DOWN
(const byte) KEY_CRSR_DOWN#0 KEY_CRSR_DOWN = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) KEY_CRSR_RIGHT
(const byte) KEY_CRSR_RIGHT#0 KEY_CRSR_RIGHT = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) KEY_CTRL
(const byte) KEY_CTRL#0 KEY_CTRL = (byte/signed byte/word/signed word/dword/signed dword) $3a
(byte) KEY_D
(byte) KEY_DEL
(byte) KEY_DOT
(byte) KEY_E
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(byte) KEY_LSHIFT
(const byte) KEY_LSHIFT#0 KEY_LSHIFT = (byte/signed byte/word/signed word/dword/signed dword) $f
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_MODIFIER_COMMODORE
(const byte) KEY_MODIFIER_COMMODORE#0 KEY_MODIFIER_COMMODORE = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) KEY_MODIFIER_CTRL
(const byte) KEY_MODIFIER_CTRL#0 KEY_MODIFIER_CTRL = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) KEY_MODIFIER_LSHIFT
(const byte) KEY_MODIFIER_LSHIFT#0 KEY_MODIFIER_LSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) KEY_MODIFIER_RSHIFT
(const byte) KEY_MODIFIER_RSHIFT#0 KEY_MODIFIER_RSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) KEY_MODIFIER_SHIFT
(const byte) KEY_MODIFIER_SHIFT#0 KEY_MODIFIER_SHIFT = (const byte) KEY_MODIFIER_LSHIFT#0|(const byte) KEY_MODIFIER_RSHIFT#0
(byte) KEY_N
(byte) KEY_O
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(const byte) KEY_RSHIFT#0 KEY_RSHIFT = (byte/signed byte/word/signed word/dword/signed dword) $34
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte/signed byte/word/signed word/dword/signed dword) $3c
(byte) KEY_T
(byte) KEY_U
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(byte) KEY_Y
(byte) KEY_Z
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(dword) PLANE_8BPP_CHUNKY
(const dword) PLANE_8BPP_CHUNKY#0 PLANE_8BPP_CHUNKY = (dword/signed dword) $20000
(dword) PLANE_BLANK
(const dword) PLANE_BLANK#0 PLANE_BLANK = (dword/signed dword) $38000
(dword) PLANE_CHARSET8
(const dword) PLANE_CHARSET8#0 PLANE_CHARSET8 = (dword/signed dword) $3c000
(dword) PLANE_FULL
(const dword) PLANE_FULL#0 PLANE_FULL = (dword/signed dword) $3a000
(dword) PLANE_HORISONTAL
(const dword) PLANE_HORISONTAL#0 PLANE_HORISONTAL = (dword/signed dword) $30000
(dword) PLANE_HORISONTAL2
(const dword) PLANE_HORISONTAL2#0 PLANE_HORISONTAL2 = (dword/signed dword) $34000
(dword) PLANE_VERTICAL
(const dword) PLANE_VERTICAL#0 PLANE_VERTICAL = (dword/signed dword) $32000
(dword) PLANE_VERTICAL2
(const dword) PLANE_VERTICAL2#0 PLANE_VERTICAL2 = (dword/signed dword) $36000
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(const byte) PROCPORT_RAM_CHARROM#0 PROCPORT_RAM_CHARROM = (byte/signed byte/word/signed word/dword/signed dword) $31
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) $35
(byte) PURPLE
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) $d012
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte*) VIC_BITMAP
(const byte*) VIC_BITMAP#0 VIC_BITMAP = ((byte*))(word/signed word/dword/signed dword) $6000
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte/signed byte/word/signed word/dword/signed dword) $20
(byte*) VIC_CHARSET_ROM
(const byte*) VIC_CHARSET_ROM#0 VIC_CHARSET_ROM = ((byte*))(word/signed word/dword/signed dword) $5800
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) $d011
(byte*) VIC_CONTROL2
(const byte*) VIC_CONTROL2#0 VIC_CONTROL2 = ((byte*))(word/dword/signed dword) $d016
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) $10
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte/signed byte/word/signed word/dword/signed dword) $40
(byte) VIC_MCM
(const byte) VIC_MCM#0 VIC_MCM = (byte/signed byte/word/signed word/dword/signed dword) $10
(byte*) VIC_MEMORY
(const byte*) VIC_MEMORY#0 VIC_MEMORY = ((byte*))(word/dword/signed dword) $d018
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_RST8
(byte*) VIC_SCREEN0
(const byte*) VIC_SCREEN0#0 VIC_SCREEN0 = ((byte*))(word/signed word/dword/signed dword) $4000
(byte*) VIC_SCREEN1
(const byte*) VIC_SCREEN1#0 VIC_SCREEN1 = ((byte*))(word/signed word/dword/signed dword) $4400
(byte*) VIC_SCREEN2
(const byte*) VIC_SCREEN2#0 VIC_SCREEN2 = ((byte*))(word/signed word/dword/signed dword) $4800
(byte*) VIC_SCREEN3
(const byte*) VIC_SCREEN3#0 VIC_SCREEN3 = ((byte*))(word/signed word/dword/signed dword) $4c00
(byte*) VIC_SCREEN4
(const byte*) VIC_SCREEN4#0 VIC_SCREEN4 = ((byte*))(word/signed word/dword/signed dword) $5000
(byte) WHITE
(byte) YELLOW
(void()) apply_preset((byte) apply_preset::idx)
(label) apply_preset::@1
(label) apply_preset::@10
(label) apply_preset::@11
(label) apply_preset::@12
(label) apply_preset::@13
(label) apply_preset::@2
(label) apply_preset::@3
(label) apply_preset::@4
(label) apply_preset::@5
(label) apply_preset::@6
(label) apply_preset::@7
(label) apply_preset::@8
(label) apply_preset::@9
(label) apply_preset::@return
(byte) apply_preset::i
(byte) apply_preset::i#1 reg byte y 1501.5
(byte) apply_preset::i#2 reg byte y 2002.0
(byte) apply_preset::idx
(byte) apply_preset::idx#0 reg byte a 11.18181818181818
(byte*) apply_preset::preset
(byte*) apply_preset::preset#14 preset zp ZP_WORD:3 200.2
(void()) bitmap_clear()
(word~) bitmap_clear::$3 $3 zp ZP_WORD:3 2.0
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 bitmap zp ZP_WORD:3 42.599999999999994
(byte*) bitmap_clear::bitmap#2 bitmap zp ZP_WORD:3 157.0
(byte*) bitmap_clear::bitmap#3 bitmap zp ZP_WORD:3 24.0
(byte*~) bitmap_clear::bitmap#5 bitmap zp ZP_WORD:3 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 151.5
(byte) bitmap_clear::x#2 reg byte x 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp ZP_BYTE:2 16.5
(byte) bitmap_clear::y#4 y zp ZP_BYTE:2 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 reg byte a 22.0
(byte~) bitmap_init::$10 reg byte a 22.0
(byte~) bitmap_init::$6 $6 zp ZP_BYTE:2 11.0
(byte~) bitmap_init::$7 reg byte a 22.0
(byte~) bitmap_init::$8 reg byte a 22.0
(byte~) bitmap_init::$9 reg byte a 22.0
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte y 11.0
(byte) bitmap_init::bits#3 reg byte y 6.6000000000000005
(byte) bitmap_init::bits#4 reg byte y 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 7.333333333333334
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 6.0
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:3 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:3 6.111111111111112
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:3 11.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 x0 zp ZP_BYTE:13 1.260869565217391
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 reg byte x 1.3181818181818181
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 xd zp ZP_BYTE:8 0.7
(byte) bitmap_line::xd#2 xd zp ZP_BYTE:8 0.7
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 y0 zp ZP_BYTE:15 1.6666666666666674
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 y1 zp ZP_BYTE:18 1.7500000000000007
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 reg byte y 0.8888888888888888
(byte) bitmap_line::yd#10 reg byte y 0.8888888888888888
(byte) bitmap_line::yd#11 reg byte y 0.8888888888888888
(byte) bitmap_line::yd#2 reg byte y 0.8888888888888888
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 reg byte x 202.0
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@4
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 e zp ZP_BYTE:18 4.0
(byte) bitmap_line_xdyd::e#1 e zp ZP_BYTE:18 134.66666666666666
(byte) bitmap_line_xdyd::e#2 e zp ZP_BYTE:18 202.0
(byte) bitmap_line_xdyd::e#3 e zp ZP_BYTE:18 40.8
(byte) bitmap_line_xdyd::e#6 e zp ZP_BYTE:18 101.0
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 x zp ZP_BYTE:14 0.8
(byte) bitmap_line_xdyd::x#1 x zp ZP_BYTE:14 0.8
(byte) bitmap_line_xdyd::x#2 x zp ZP_BYTE:14 37.875
(byte) bitmap_line_xdyd::x#3 x zp ZP_BYTE:14 76.25
(byte) bitmap_line_xdyd::x#6 x zp ZP_BYTE:14 3.0
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 x1 zp ZP_BYTE:13 1.3333333333333333
(byte) bitmap_line_xdyd::x1#1 x1 zp ZP_BYTE:13 1.3333333333333333
(byte) bitmap_line_xdyd::x1#6 x1 zp ZP_BYTE:13 7.5
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyd::xd#1 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyd::xd#5 xd zp ZP_BYTE:8 14.714285714285715
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 y zp ZP_BYTE:15 1.0
(byte) bitmap_line_xdyd::y#1 y zp ZP_BYTE:15 1.0
(byte) bitmap_line_xdyd::y#2 y zp ZP_BYTE:15 101.0
(byte) bitmap_line_xdyd::y#3 y zp ZP_BYTE:15 58.00000000000001
(byte) bitmap_line_xdyd::y#5 y zp ZP_BYTE:15 3.0
(byte) bitmap_line_xdyd::y#6 y zp ZP_BYTE:15 101.0
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyd::yd#1 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyd::yd#2 yd zp ZP_BYTE:7 7.642857142857143
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 reg byte x 202.0
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@4
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 e zp ZP_BYTE:18 4.0
(byte) bitmap_line_xdyi::e#1 e zp ZP_BYTE:18 134.66666666666666
(byte) bitmap_line_xdyi::e#2 e zp ZP_BYTE:18 202.0
(byte) bitmap_line_xdyi::e#3 e zp ZP_BYTE:18 40.8
(byte) bitmap_line_xdyi::e#6 e zp ZP_BYTE:18 101.0
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 x zp ZP_BYTE:14 0.8
(byte) bitmap_line_xdyi::x#1 x zp ZP_BYTE:14 0.8
(byte) bitmap_line_xdyi::x#2 x zp ZP_BYTE:14 37.875
(byte) bitmap_line_xdyi::x#3 x zp ZP_BYTE:14 76.25
(byte) bitmap_line_xdyi::x#6 x zp ZP_BYTE:14 3.0
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 x1 zp ZP_BYTE:13 1.3333333333333333
(byte) bitmap_line_xdyi::x1#1 x1 zp ZP_BYTE:13 1.3333333333333333
(byte) bitmap_line_xdyi::x1#6 x1 zp ZP_BYTE:13 7.5
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyi::xd#1 xd zp ZP_BYTE:8 2.0
(byte) bitmap_line_xdyi::xd#5 xd zp ZP_BYTE:8 14.714285714285715
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 y zp ZP_BYTE:15 1.0
(byte) bitmap_line_xdyi::y#1 y zp ZP_BYTE:15 1.0
(byte) bitmap_line_xdyi::y#2 y zp ZP_BYTE:15 101.0
(byte) bitmap_line_xdyi::y#3 y zp ZP_BYTE:15 58.00000000000001
(byte) bitmap_line_xdyi::y#5 y zp ZP_BYTE:15 3.0
(byte) bitmap_line_xdyi::y#6 y zp ZP_BYTE:15 101.0
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyi::yd#1 yd zp ZP_BYTE:7 4.0
(byte) bitmap_line_xdyi::yd#2 yd zp ZP_BYTE:7 7.642857142857143
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 reg byte a 202.0
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@4
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 e zp ZP_BYTE:13 4.0
(byte) bitmap_line_ydxd::e#1 e zp ZP_BYTE:13 134.66666666666666
(byte) bitmap_line_ydxd::e#2 e zp ZP_BYTE:13 202.0
(byte) bitmap_line_ydxd::e#3 e zp ZP_BYTE:13 40.8
(byte) bitmap_line_ydxd::e#6 e zp ZP_BYTE:13 101.0
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 reg byte x 1.0
(byte) bitmap_line_ydxd::x#1 reg byte x 1.0
(byte) bitmap_line_ydxd::x#2 reg byte x 101.0
(byte) bitmap_line_ydxd::x#3 reg byte x 58.00000000000001
(byte) bitmap_line_ydxd::x#5 reg byte x 3.0
(byte) bitmap_line_ydxd::x#6 reg byte x 101.0
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxd::xd#1 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxd::xd#2 xd zp ZP_BYTE:8 7.642857142857143
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 y zp ZP_BYTE:14 0.8
(byte) bitmap_line_ydxd::y#1 y zp ZP_BYTE:14 0.8
(byte) bitmap_line_ydxd::y#2 y zp ZP_BYTE:14 76.25
(byte) bitmap_line_ydxd::y#3 y zp ZP_BYTE:14 37.875
(byte) bitmap_line_ydxd::y#7 y zp ZP_BYTE:14 3.0
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 y1 zp ZP_BYTE:15 1.3333333333333333
(byte) bitmap_line_ydxd::y1#1 y1 zp ZP_BYTE:15 1.3333333333333333
(byte) bitmap_line_ydxd::y1#6 y1 zp ZP_BYTE:15 7.5
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxd::yd#1 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxd::yd#5 yd zp ZP_BYTE:7 14.714285714285715
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 reg byte a 202.0
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@4
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 e zp ZP_BYTE:13 4.0
(byte) bitmap_line_ydxi::e#1 e zp ZP_BYTE:13 134.66666666666666
(byte) bitmap_line_ydxi::e#2 e zp ZP_BYTE:13 202.0
(byte) bitmap_line_ydxi::e#3 e zp ZP_BYTE:13 40.8
(byte) bitmap_line_ydxi::e#6 e zp ZP_BYTE:13 101.0
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 reg byte x 1.0
(byte) bitmap_line_ydxi::x#1 reg byte x 1.0
(byte) bitmap_line_ydxi::x#2 reg byte x 101.0
(byte) bitmap_line_ydxi::x#3 reg byte x 58.00000000000001
(byte) bitmap_line_ydxi::x#5 reg byte x 3.0
(byte) bitmap_line_ydxi::x#6 reg byte x 101.0
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxi::xd#1 xd zp ZP_BYTE:8 4.0
(byte) bitmap_line_ydxi::xd#2 xd zp ZP_BYTE:8 7.642857142857143
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 y zp ZP_BYTE:14 0.8
(byte) bitmap_line_ydxi::y#1 y zp ZP_BYTE:14 0.8
(byte) bitmap_line_ydxi::y#2 y zp ZP_BYTE:14 37.875
(byte) bitmap_line_ydxi::y#3 y zp ZP_BYTE:14 76.25
(byte) bitmap_line_ydxi::y#6 y zp ZP_BYTE:14 3.0
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 y1 zp ZP_BYTE:18 1.3333333333333333
(byte) bitmap_line_ydxi::y1#1 y1 zp ZP_BYTE:18 1.3333333333333333
(byte) bitmap_line_ydxi::y1#6 y1 zp ZP_BYTE:18 7.5
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxi::yd#1 yd zp ZP_BYTE:7 2.0
(byte) bitmap_line_ydxi::yd#5 yd zp ZP_BYTE:7 14.714285714285715
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 $0 zp ZP_WORD:3 1.0
(byte~) bitmap_plot::$1 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 plotter_x zp ZP_WORD:3 2.0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 plotter_y zp ZP_WORD:5 4.0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 reg byte x 101.0
(byte) bitmap_plot::x#1 reg byte x 101.0
(byte) bitmap_plot::x#2 reg byte x 101.0
(byte) bitmap_plot::x#3 reg byte x 101.0
(byte) bitmap_plot::x#4 reg byte x 102.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte y 202.0
(byte) bitmap_plot::y#1 reg byte y 202.0
(byte) bitmap_plot::y#2 reg byte y 202.0
(byte) bitmap_plot::y#3 reg byte y 202.0
(byte) bitmap_plot::y#4 reg byte y 204.0
(byte[$100]) bitmap_plot_bit
(const byte[$100]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( $100, 0) }
(byte[$100]) bitmap_plot_xhi
(const byte[$100]) bitmap_plot_xhi#0 bitmap_plot_xhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_xlo
(const byte[$100]) bitmap_plot_xlo#0 bitmap_plot_xlo = { fill( $100, 0) }
(byte[$100]) bitmap_plot_yhi
(const byte[$100]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_ylo
(const byte[$100]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( $100, 0) }
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(const byte*) dtvSetCpuBankSegment1::cpuBank#0 cpuBank = ((byte*))(byte/word/signed word/dword/signed dword) $ff
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 202.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 reg byte a 4.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13 reg byte a 105.0
(byte*) form_a_mod_hi
(const byte*) form_a_mod_hi#0 form_a_mod_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $f
(byte*) form_a_mod_lo
(const byte*) form_a_mod_lo#0 form_a_mod_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $10
(byte*) form_a_pattern
(const byte*) form_a_pattern#0 form_a_pattern = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $a
(byte*) form_a_start_hi
(const byte*) form_a_start_hi#0 form_a_start_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $b
(byte*) form_a_start_lo
(const byte*) form_a_start_lo#0 form_a_start_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $c
(byte*) form_a_step_hi
(const byte*) form_a_step_hi#0 form_a_step_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $d
(byte*) form_a_step_lo
(const byte*) form_a_step_lo#0 form_a_step_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $e
(byte*) form_b_mod_hi
(const byte*) form_b_mod_hi#0 form_b_mod_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $16
(byte*) form_b_mod_lo
(const byte*) form_b_mod_lo#0 form_b_mod_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $17
(byte*) form_b_pattern
(const byte*) form_b_pattern#0 form_b_pattern = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $11
(byte*) form_b_start_hi
(const byte*) form_b_start_hi#0 form_b_start_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $12
(byte*) form_b_start_lo
(const byte*) form_b_start_lo#0 form_b_start_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $13
(byte*) form_b_step_hi
(const byte*) form_b_step_hi#0 form_b_step_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $14
(byte*) form_b_step_lo
(const byte*) form_b_step_lo#0 form_b_step_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $15
(byte()) form_control()
(byte~) form_control::$13 reg byte a 4.0
(byte/word/dword~) form_control::$14 reg byte a 4.0
(byte~) form_control::$15 reg byte a 4.0
(byte~) form_control::$16 reg byte a 4.0
(byte~) form_control::$24 reg byte a 4.0
(label) form_control::@1
(label) form_control::@10
(label) form_control::@11
(label) form_control::@12
(label) form_control::@13
(label) form_control::@14
(label) form_control::@15
(label) form_control::@16
(label) form_control::@17
(label) form_control::@18
(label) form_control::@19
(label) form_control::@2
(label) form_control::@20
(label) form_control::@21
(label) form_control::@22
(label) form_control::@23
(label) form_control::@3
(label) form_control::@4
(label) form_control::@5
(label) form_control::@6
(label) form_control::@7
(label) form_control::@8
(label) form_control::@9
(label) form_control::@return
(byte*) form_control::field
(byte*) form_control::field#0 field zp ZP_WORD:3 0.5925925925925926
(byte) form_control::key_event
(byte) form_control::key_event#0 reg byte a 2.6666666666666665
(byte) form_control::return
(byte) form_control::return#0 reg byte a 2002.0
(byte) form_control::return#2 reg byte x 333.6666666666667
(byte*) form_ctrl_bmm
(const byte*) form_ctrl_bmm#0 form_ctrl_bmm = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) form_ctrl_borof
(const byte*) form_ctrl_borof#0 form_ctrl_borof = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) form_ctrl_chunk
(const byte*) form_ctrl_chunk#0 form_ctrl_chunk = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 7
(byte*) form_ctrl_colof
(const byte*) form_ctrl_colof#0 form_ctrl_colof = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) form_ctrl_ecm
(const byte*) form_ctrl_ecm#0 form_ctrl_ecm = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 3
(byte*) form_ctrl_hicol
(const byte*) form_ctrl_hicol#0 form_ctrl_hicol = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 4
(byte*) form_ctrl_line
(const byte*) form_ctrl_line#0 form_ctrl_line = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 5
(byte*) form_ctrl_mcm
(const byte*) form_ctrl_mcm#0 form_ctrl_mcm = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 2
(byte*) form_ctrl_overs
(const byte*) form_ctrl_overs#0 form_ctrl_overs = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) 9
(signed byte) form_cursor_count
(signed byte) form_cursor_count#1 form_cursor_count zp ZP_BYTE:13 0.3333333333333333
(signed byte) form_cursor_count#15 form_cursor_count zp ZP_BYTE:13 0.4
(signed byte) form_cursor_count#16 form_cursor_count zp ZP_BYTE:13 65.82352941176472
(signed byte) form_cursor_count#21 form_cursor_count zp ZP_BYTE:13 157.99999999999997
(signed byte) form_cursor_count#5 form_cursor_count zp ZP_BYTE:13 2.0
(byte*) form_dtv_palet
(const byte*) form_dtv_palet#0 form_dtv_palet = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $1b
(byte) form_field_idx
(byte) form_field_idx#1 form_field_idx zp ZP_BYTE:14 0.3333333333333333
(byte) form_field_idx#18 form_field_idx zp ZP_BYTE:14 65.94117647058826
(byte) form_field_idx#28 form_field_idx zp ZP_BYTE:14 29.17948717948718
(byte) form_field_idx#31 form_field_idx zp ZP_BYTE:14 6.0
(byte) form_field_idx#44 form_field_idx zp ZP_BYTE:14 2.0
(byte) form_field_idx#45 form_field_idx zp ZP_BYTE:14 2.0
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(word~) form_field_ptr::$2 $2 zp ZP_WORD:3 1.0
(label) form_field_ptr::@return
(byte*) form_field_ptr::field
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0 reg byte y 2002.0
(byte) form_field_ptr::field_idx#1 reg byte y 4.0
(byte) form_field_ptr::field_idx#2 reg byte y 335.66666666666674
(byte*) form_field_ptr::line
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0 return zp ZP_WORD:3 251.25
(byte*) form_field_ptr::return#2 return zp ZP_WORD:3 2002.0
(byte*) form_field_ptr::return#3 return zp ZP_WORD:3 4.0
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0 reg byte a 4.0
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0 reg byte x 6.0
(byte) form_fields_cnt
(const byte) form_fields_cnt#0 form_fields_cnt = (byte/signed byte/word/signed word/dword/signed dword) $24
(byte[]) form_fields_max
(const byte[]) form_fields_max#0 form_fields_max = { (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f, (byte/signed byte/word/signed word/dword/signed dword) $f }
(byte[]) form_fields_val
(const byte[]) form_fields_val#0 form_fields_val = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) form_fields_x
(const byte[]) form_fields_x#0 form_fields_x = { (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $18, (byte/signed byte/word/signed word/dword/signed dword) $19, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25, (byte/signed byte/word/signed word/dword/signed dword) $24, (byte/signed byte/word/signed word/dword/signed dword) $25 }
(byte[]) form_fields_y
(const byte[]) form_fields_y#0 form_fields_y = { (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) $e, (byte/signed byte/word/signed word/dword/signed dword) $e }
(byte[$19]) form_line_hi
(const byte[$19]) form_line_hi#0 form_line_hi = { fill( $19, 0) }
(byte[$19]) form_line_lo
(const byte[$19]) form_line_lo#0 form_line_lo = { fill( $19, 0) }
(void()) form_mode()
(byte~) form_mode::$36 reg byte a 2002.0
(label) form_mode::@1
(label) form_mode::@10
(label) form_mode::@11
(label) form_mode::@12
(label) form_mode::@13
(label) form_mode::@14
(label) form_mode::@15
(label) form_mode::@16
(label) form_mode::@17
(label) form_mode::@18
(label) form_mode::@19
(label) form_mode::@2
(label) form_mode::@3
(label) form_mode::@4
(label) form_mode::@5
(label) form_mode::@6
(label) form_mode::@7
(label) form_mode::@8
(label) form_mode::@9
(label) form_mode::@return
(byte) form_mode::i
(byte) form_mode::i#1 reg byte x 151.5
(byte) form_mode::i#2 reg byte x 202.0
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0 preset_current zp ZP_BYTE:15 4.0
(byte) form_mode::preset_current#1 preset_current zp ZP_BYTE:15 50.5
(byte) form_mode::preset_current#6 preset_current zp ZP_BYTE:15 157.71428571428572
(byte*) form_preset
(void()) form_render_values()
(label) form_render_values::@1
(label) form_render_values::@2
(label) form_render_values::@return
(byte*) form_render_values::field
(byte*) form_render_values::field#0 field zp ZP_WORD:3 2002.0
(byte) form_render_values::idx
(byte) form_render_values::idx#1 idx zp ZP_BYTE:2 1501.5
(byte) form_render_values::idx#2 idx zp ZP_BYTE:2 667.3333333333334
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0 reg byte a 202.0
(byte~) form_set_screen::$1 reg byte a 202.0
(label) form_set_screen::@1
(label) form_set_screen::@return
(byte*) form_set_screen::line
(byte*) form_set_screen::line#1 line zp ZP_WORD:3 67.33333333333333
(byte*) form_set_screen::line#2 line zp ZP_WORD:3 80.8
(byte*) form_set_screen::screen
(byte) form_set_screen::y
(byte) form_set_screen::y#1 reg byte x 151.5
(byte) form_set_screen::y#2 reg byte x 67.33333333333333
(byte*) form_vic_bg0_hi
(const byte*) form_vic_bg0_hi#0 form_vic_bg0_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $1c
(byte*) form_vic_bg0_lo
(const byte*) form_vic_bg0_lo#0 form_vic_bg0_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $1d
(byte*) form_vic_bg1_hi
(const byte*) form_vic_bg1_hi#0 form_vic_bg1_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $1e
(byte*) form_vic_bg1_lo
(const byte*) form_vic_bg1_lo#0 form_vic_bg1_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $1f
(byte*) form_vic_bg2_hi
(const byte*) form_vic_bg2_hi#0 form_vic_bg2_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $20
(byte*) form_vic_bg2_lo
(const byte*) form_vic_bg2_lo#0 form_vic_bg2_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $21
(byte*) form_vic_bg3_hi
(const byte*) form_vic_bg3_hi#0 form_vic_bg3_hi = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $22
(byte*) form_vic_bg3_lo
(const byte*) form_vic_bg3_lo#0 form_vic_bg3_lo = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $23
(byte*) form_vic_cols
(const byte*) form_vic_cols#0 form_vic_cols = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $1a
(byte*) form_vic_gfx
(const byte*) form_vic_gfx#0 form_vic_gfx = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $19
(byte*) form_vic_screen
(const byte*) form_vic_screen#0 form_vic_screen = (const byte[]) form_fields_val#0+(byte/signed byte/word/signed word/dword/signed dword) $18
(dword()) get_plane((byte) get_plane::idx)
(label) get_plane::@1
(label) get_plane::@10
(label) get_plane::@11
(label) get_plane::@12
(label) get_plane::@13
(label) get_plane::@14
(label) get_plane::@2
(label) get_plane::@3
(label) get_plane::@4
(label) get_plane::@5
(label) get_plane::@6
(label) get_plane::@7
(label) get_plane::@8
(label) get_plane::@9
(label) get_plane::@return
(byte) get_plane::idx
(byte) get_plane::idx#0 reg byte a 4.0
(byte) get_plane::idx#1 reg byte a 4.0
(byte) get_plane::idx#10 reg byte a 2.285714285714285
(dword) get_plane::return
(dword) get_plane::return#14 return zp ZP_DWORD:9 1.0
(dword) get_plane::return#16 return zp ZP_DWORD:9 4.0
(dword) get_plane::return#17 return zp ZP_DWORD:9 4.0
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(label) get_vic_charset::@1
(label) get_vic_charset::@2
(label) get_vic_charset::@return
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0 reg byte a 3.0
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#2 return zp ZP_WORD:3 0.6666666666666666
(byte*) get_vic_charset::return#4 return zp ZP_WORD:3 4.0
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(label) get_vic_screen::@1
(label) get_vic_screen::@2
(label) get_vic_screen::@3
(label) get_vic_screen::@4
(label) get_vic_screen::@5
(label) get_vic_screen::@return
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0 reg byte a 4.0
(byte) get_vic_screen::idx#1 reg byte a 4.0
(byte) get_vic_screen::idx#2 reg byte a 2.8
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#10 return zp ZP_WORD:3 4.0
(byte*) get_vic_screen::return#11 return zp ZP_WORD:3 4.0
(byte*) get_vic_screen::return#5 return zp ZP_WORD:3 1.0
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@10
(label) gfx_init::@11
(label) gfx_init::@12
(label) gfx_init::@13
(label) gfx_init::@14
(label) gfx_init::@2
(label) gfx_init::@3
(label) gfx_init::@4
(label) gfx_init::@5
(label) gfx_init::@6
(label) gfx_init::@7
(label) gfx_init::@8
(label) gfx_init::@9
(label) gfx_init::@return
(void()) gfx_init_charset()
(label) gfx_init_charset::@1
(label) gfx_init_charset::@2
(label) gfx_init_charset::@3
(label) gfx_init_charset::@4
(label) gfx_init_charset::@return
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#1 c zp ZP_BYTE:2 16.5
(byte) gfx_init_charset::c#4 c zp ZP_BYTE:2 3.142857142857143
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#1 chargen zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_charset::chargen#2 chargen zp ZP_WORD:3 104.66666666666666
(byte*) gfx_init_charset::chargen#3 chargen zp ZP_WORD:3 22.0
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#1 charset zp ZP_WORD:5 35.5
(byte*) gfx_init_charset::charset#2 charset zp ZP_WORD:5 157.0
(byte*) gfx_init_charset::charset#3 charset zp ZP_WORD:5 22.0
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#1 reg byte x 151.5
(byte) gfx_init_charset::l#2 reg byte x 50.5
(void()) gfx_init_plane_8bppchunky()
(word~) gfx_init_plane_8bppchunky::$9 $9 zp ZP_WORD:16 202.0
(label) gfx_init_plane_8bppchunky::@1
(label) gfx_init_plane_8bppchunky::@2
(label) gfx_init_plane_8bppchunky::@3
(label) gfx_init_plane_8bppchunky::@4
(label) gfx_init_plane_8bppchunky::@5
(label) gfx_init_plane_8bppchunky::@6
(label) gfx_init_plane_8bppchunky::@7
(label) gfx_init_plane_8bppchunky::@return
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0 reg byte a 202.0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#1 gfxb zp ZP_WORD:5 42.599999999999994
(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfxb zp ZP_WORD:5 157.0
(byte*) gfx_init_plane_8bppchunky::gfxb#4 gfxb zp ZP_WORD:5 75.75
(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfxb zp ZP_WORD:5 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 reg byte x 202.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 reg byte x 103.75
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 reg byte x 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 reg byte x 34.888888888888886
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#1 x zp ZP_WORD:3 151.5
(word) gfx_init_plane_8bppchunky::x#2 x zp ZP_WORD:3 30.299999999999997
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#1 y zp ZP_BYTE:2 16.5
(byte) gfx_init_plane_8bppchunky::y#6 y zp ZP_BYTE:2 9.461538461538462
(void()) gfx_init_plane_blank()
(label) gfx_init_plane_blank::@return
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$8 reg byte a 2002.0
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 bits zp ZP_BYTE:8 101.0
(byte) gfx_init_plane_charset8::bits#1 bits zp ZP_BYTE:8 500.5
(byte) gfx_init_plane_charset8::bits#2 bits zp ZP_BYTE:8 443.42857142857144
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 reg byte a 2002.0
(byte~) gfx_init_plane_charset8::c#3 reg byte a 2002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 ch zp ZP_BYTE:2 16.5
(byte) gfx_init_plane_charset8::ch#8 ch zp ZP_BYTE:2 1.2941176470588236
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 chargen zp ZP_WORD:3 13.3125
(byte*) gfx_init_plane_charset8::chargen#2 chargen zp ZP_WORD:3 157.0
(byte*) gfx_init_plane_charset8::chargen#3 chargen zp ZP_WORD:3 22.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 col zp ZP_BYTE:13 302.0
(byte) gfx_init_plane_charset8::col#2 col zp ZP_BYTE:13 388.0
(byte) gfx_init_plane_charset8::col#5 col zp ZP_BYTE:13 71.0
(byte) gfx_init_plane_charset8::col#6 col zp ZP_BYTE:13 22.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 reg byte x 1501.5
(byte) gfx_init_plane_charset8::cp#2 reg byte x 222.44444444444446
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 cr zp ZP_BYTE:7 151.5
(byte) gfx_init_plane_charset8::cr#6 cr zp ZP_BYTE:7 14.428571428571429
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 gfxa zp ZP_WORD:5 234.8888888888889
(byte*) gfx_init_plane_charset8::gfxa#2 gfxa zp ZP_WORD:5 517.3333333333334
(byte*) gfx_init_plane_charset8::gfxa#5 gfxa zp ZP_WORD:5 71.0
(byte*) gfx_init_plane_charset8::gfxa#6 gfxa zp ZP_WORD:5 22.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfxbCpuBank = ((byte))(const dword) PLANE_CHARSET8#0/(word/signed word/dword/signed dword) $4000
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0 $0 zp ZP_DWORD:19 4.0
(word~) gfx_init_plane_fill::$1 $1 zp ZP_WORD:3 4.0
(word~) gfx_init_plane_fill::$4 $4 zp ZP_WORD:3 4.0
(word~) gfx_init_plane_fill::$5 $5 zp ZP_WORD:3 4.0
(word/signed dword/dword~) gfx_init_plane_fill::$6 $6 zp ZP_WORD:3 2.0
(label) gfx_init_plane_fill::@1
(label) gfx_init_plane_fill::@2
(label) gfx_init_plane_fill::@3
(label) gfx_init_plane_fill::@4
(label) gfx_init_plane_fill::@5
(label) gfx_init_plane_fill::@return
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#1 reg byte x 151.5
(byte) gfx_init_plane_fill::bx#2 reg byte x 67.33333333333333
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#1 by zp ZP_BYTE:7 16.5
(byte) gfx_init_plane_fill::by#4 by zp ZP_BYTE:7 3.6666666666666665
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#6 fill zp ZP_BYTE:2 5.315789473684211
(byte*) gfx_init_plane_fill::gfxb
(byte*) gfx_init_plane_fill::gfxb#1 gfxb zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_plane_fill::gfxb#2 gfxb zp ZP_WORD:3 157.0
(byte*) gfx_init_plane_fill::gfxb#3 gfxb zp ZP_WORD:3 24.0
(byte*~) gfx_init_plane_fill::gfxb#6 gfxb zp ZP_WORD:3 4.0
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0 reg byte x 2.0
(byte) gfx_init_plane_fill::gfxbCpuBank#1 reg byte x 20.0
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#3 plane_addr zp ZP_DWORD:9 0.5714285714285714
(void()) gfx_init_plane_full()
(label) gfx_init_plane_full::@return
(void()) gfx_init_plane_horisontal()
(byte~) gfx_init_plane_horisontal::$8 reg byte a 202.0
(label) gfx_init_plane_horisontal::@1
(label) gfx_init_plane_horisontal::@2
(label) gfx_init_plane_horisontal::@3
(label) gfx_init_plane_horisontal::@4
(label) gfx_init_plane_horisontal::@5
(label) gfx_init_plane_horisontal::@6
(label) gfx_init_plane_horisontal::@7
(label) gfx_init_plane_horisontal::@return
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#1 reg byte x 151.5
(byte) gfx_init_plane_horisontal::ax#2 reg byte x 25.25
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#1 ay zp ZP_BYTE:2 16.5
(byte) gfx_init_plane_horisontal::ay#4 ay zp ZP_BYTE:2 11.181818181818182
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#1 gfxa zp ZP_WORD:3 202.0
(byte*) gfx_init_plane_horisontal::gfxa#2 gfxa zp ZP_WORD:3 202.0
(byte*) gfx_init_plane_horisontal::gfxa#3 gfxa zp ZP_WORD:3 103.2
(byte*) gfx_init_plane_horisontal::gfxa#6 gfxa zp ZP_WORD:3 22.0
(byte*) gfx_init_plane_horisontal::gfxa#7 gfxa zp ZP_WORD:3 62.8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 gfxbCpuBank = ((byte))(const dword) PLANE_HORISONTAL#0/(word/signed word/dword/signed dword) $4000
(void()) gfx_init_plane_horisontal2()
(byte~) gfx_init_plane_horisontal2::$8 reg byte a 202.0
(label) gfx_init_plane_horisontal2::@1
(label) gfx_init_plane_horisontal2::@2
(label) gfx_init_plane_horisontal2::@3
(label) gfx_init_plane_horisontal2::@4
(label) gfx_init_plane_horisontal2::@return
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#1 reg byte x 151.5
(byte) gfx_init_plane_horisontal2::ax#2 reg byte x 40.4
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#1 ay zp ZP_BYTE:2 16.5
(byte) gfx_init_plane_horisontal2::ay#4 ay zp ZP_BYTE:2 15.375
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#1 gfxa zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_plane_horisontal2::gfxa#2 gfxa zp ZP_WORD:3 78.5
(byte*) gfx_init_plane_horisontal2::gfxa#3 gfxa zp ZP_WORD:3 22.0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 gfxbCpuBank = ((byte))(const dword) PLANE_HORISONTAL2#0/(word/signed word/dword/signed dword) $4000
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0 reg byte a 202.0
(byte[]) gfx_init_plane_horisontal2::row_bitmask
(const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 row_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $55, (byte/word/signed word/dword/signed dword) $aa, (byte/word/signed word/dword/signed dword) $ff }
(void()) gfx_init_plane_vertical()
(label) gfx_init_plane_vertical::@1
(label) gfx_init_plane_vertical::@2
(label) gfx_init_plane_vertical::@3
(label) gfx_init_plane_vertical::@4
(label) gfx_init_plane_vertical::@return
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#1 reg byte x 151.5
(byte) gfx_init_plane_vertical::bx#2 reg byte x 67.33333333333333
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#1 by zp ZP_BYTE:2 16.5
(byte) gfx_init_plane_vertical::by#4 by zp ZP_BYTE:2 3.6666666666666665
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#1 gfxb zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_plane_vertical::gfxb#2 gfxb zp ZP_WORD:3 157.0
(byte*) gfx_init_plane_vertical::gfxb#3 gfxb zp ZP_WORD:3 22.0
(byte) gfx_init_plane_vertical::gfxbCpuBank
(const byte) gfx_init_plane_vertical::gfxbCpuBank#0 gfxbCpuBank = ((byte))(const dword) PLANE_VERTICAL#0/(word/signed word/dword/signed dword) $4000
(void()) gfx_init_plane_vertical2()
(label) gfx_init_plane_vertical2::@return
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 reg byte a 202.0
(byte~) gfx_init_screen0::$1 $1 zp ZP_BYTE:7 101.0
(byte~) gfx_init_screen0::$2 reg byte a 202.0
(byte~) gfx_init_screen0::$3 reg byte a 202.0
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 ch zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_screen0::ch#2 ch zp ZP_WORD:3 52.33333333333333
(byte*) gfx_init_screen0::ch#3 ch zp ZP_WORD:3 22.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 reg byte x 151.5
(byte) gfx_init_screen0::cx#2 reg byte x 43.285714285714285
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 cy zp ZP_BYTE:2 16.5
(byte) gfx_init_screen0::cy#4 cy zp ZP_BYTE:2 12.299999999999999
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0 reg byte a 202.0
(byte~) gfx_init_screen1::$1 reg byte a 202.0
(label) gfx_init_screen1::@1
(label) gfx_init_screen1::@2
(label) gfx_init_screen1::@3
(label) gfx_init_screen1::@return
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#1 ch zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_screen1::ch#2 ch zp ZP_WORD:3 78.5
(byte*) gfx_init_screen1::ch#3 ch zp ZP_WORD:3 22.0
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#1 reg byte x 151.5
(byte) gfx_init_screen1::cx#2 reg byte x 60.599999999999994
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#1 cy zp ZP_BYTE:2 16.5
(byte) gfx_init_screen1::cy#4 cy zp ZP_BYTE:2 15.375
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0 reg byte a 202.0
(byte~) gfx_init_screen2::$3 reg byte a 202.0
(byte~) gfx_init_screen2::$4 reg byte a 202.0
(label) gfx_init_screen2::@1
(label) gfx_init_screen2::@2
(label) gfx_init_screen2::@3
(label) gfx_init_screen2::@return
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#1 ch zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_screen2::ch#2 ch zp ZP_WORD:3 44.85714285714286
(byte*) gfx_init_screen2::ch#3 ch zp ZP_WORD:3 22.0
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0 reg byte y 151.5
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0 col2 zp ZP_BYTE:7 101.0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#1 reg byte x 151.5
(byte) gfx_init_screen2::cx#2 reg byte x 37.875
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#1 cy zp ZP_BYTE:2 16.5
(byte) gfx_init_screen2::cy#4 cy zp ZP_BYTE:2 11.181818181818182
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0 reg byte a 202.0
(byte~) gfx_init_screen3::$1 $1 zp ZP_BYTE:7 101.0
(byte~) gfx_init_screen3::$2 reg byte a 202.0
(byte~) gfx_init_screen3::$3 reg byte a 202.0
(label) gfx_init_screen3::@1
(label) gfx_init_screen3::@2
(label) gfx_init_screen3::@3
(label) gfx_init_screen3::@return
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#1 ch zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_screen3::ch#2 ch zp ZP_WORD:3 52.33333333333333
(byte*) gfx_init_screen3::ch#3 ch zp ZP_WORD:3 22.0
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#1 reg byte x 151.5
(byte) gfx_init_screen3::cx#2 reg byte x 43.285714285714285
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#1 cy zp ZP_BYTE:2 16.5
(byte) gfx_init_screen3::cy#4 cy zp ZP_BYTE:2 12.299999999999999
(void()) gfx_init_screen4()
(label) gfx_init_screen4::@1
(label) gfx_init_screen4::@2
(label) gfx_init_screen4::@3
(label) gfx_init_screen4::@return
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#1 ch zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_screen4::ch#2 ch zp ZP_WORD:3 157.0
(byte*) gfx_init_screen4::ch#3 ch zp ZP_WORD:3 22.0
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#1 reg byte x 151.5
(byte) gfx_init_screen4::cx#2 reg byte x 67.33333333333333
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#1 cy zp ZP_BYTE:2 16.5
(byte) gfx_init_screen4::cy#4 cy zp ZP_BYTE:2 3.6666666666666665
(void()) gfx_init_vic_bitmap()
(label) gfx_init_vic_bitmap::@1
(label) gfx_init_vic_bitmap::@2
(label) gfx_init_vic_bitmap::@3
(label) gfx_init_vic_bitmap::@return
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#1 l zp ZP_BYTE:2 16.5
(byte) gfx_init_vic_bitmap::l#2 l zp ZP_BYTE:2 11.0
(byte) gfx_init_vic_bitmap::lines_cnt
(const byte) gfx_init_vic_bitmap::lines_cnt#0 lines_cnt = (byte/signed byte/word/signed word/dword/signed dword) 9
(byte[]) gfx_init_vic_bitmap::lines_x
(const byte[]) gfx_init_vic_bitmap::lines_x#0 lines_x = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $ff, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80, (byte/word/signed word/dword/signed dword) $ff, (byte/word/signed word/dword/signed dword) $80, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $80 }
(byte[]) gfx_init_vic_bitmap::lines_y
(const byte[]) gfx_init_vic_bitmap::lines_y#0 lines_y = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/word/signed word/dword/signed dword) $c7, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/word/signed word/dword/signed dword) $c7, (byte/signed byte/word/signed word/dword/signed dword) $64, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(void()) gfx_mode()
(byte~) gfx_mode::$20 reg byte a 4.0
(dword~) gfx_mode::$22 $22 zp ZP_DWORD:9 4.0
(word~) gfx_mode::$24 $24 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$25 reg byte a 4.0
(word~) gfx_mode::$26 $26 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$27 reg byte a 4.0
(word~) gfx_mode::$28 $28 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$29 reg byte a 4.0
(byte~) gfx_mode::$30 reg byte a 4.0
(byte~) gfx_mode::$31 reg byte a 4.0
(byte~) gfx_mode::$32 reg byte a 4.0
(byte~) gfx_mode::$33 reg byte a 4.0
(byte~) gfx_mode::$34 reg byte a 4.0
(dword~) gfx_mode::$36 $36 zp ZP_DWORD:9 4.0
(word~) gfx_mode::$38 $38 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$39 reg byte a 4.0
(word~) gfx_mode::$40 $40 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$41 reg byte a 4.0
(word~) gfx_mode::$42 $42 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$43 reg byte a 4.0
(byte~) gfx_mode::$44 reg byte a 4.0
(byte~) gfx_mode::$45 reg byte a 4.0
(byte~) gfx_mode::$46 reg byte a 4.0
(byte~) gfx_mode::$47 reg byte a 4.0
(byte*~) gfx_mode::$52 $52 zp ZP_WORD:3 2.0
(word~) gfx_mode::$54 $54 zp ZP_WORD:3 4.0
(word~) gfx_mode::$55 $55 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$56 $56 zp ZP_BYTE:2 0.5
(byte*~) gfx_mode::$57 $57 zp ZP_WORD:3 2.0
(word~) gfx_mode::$59 $59 zp ZP_WORD:3 4.0
(byte~) gfx_mode::$60 reg byte a 4.0
(byte~) gfx_mode::$61 reg byte a 4.0
(byte~) gfx_mode::$62 reg byte a 4.0
(byte~) gfx_mode::$64 reg byte a 4.0
(byte~) gfx_mode::$65 reg byte a 4.0
(byte~) gfx_mode::$66 reg byte a 4.0
(byte~) gfx_mode::$67 reg byte a 4.0
(byte~) gfx_mode::$68 reg byte a 4.0
(byte~) gfx_mode::$69 reg byte a 4.0
(byte~) gfx_mode::$70 reg byte a 4.0
(byte~) gfx_mode::$71 reg byte a 4.0
(label) gfx_mode::@1
(label) gfx_mode::@10
(label) gfx_mode::@11
(label) gfx_mode::@12
(label) gfx_mode::@13
(label) gfx_mode::@14
(label) gfx_mode::@15
(label) gfx_mode::@16
(label) gfx_mode::@17
(label) gfx_mode::@18
(label) gfx_mode::@19
(label) gfx_mode::@2
(label) gfx_mode::@20
(label) gfx_mode::@21
(label) gfx_mode::@22
(label) gfx_mode::@23
(label) gfx_mode::@24
(label) gfx_mode::@25
(label) gfx_mode::@26
(label) gfx_mode::@27
(label) gfx_mode::@28
(label) gfx_mode::@29
(label) gfx_mode::@3
(label) gfx_mode::@30
(label) gfx_mode::@31
(label) gfx_mode::@32
(label) gfx_mode::@33
(label) gfx_mode::@4
(label) gfx_mode::@5
(label) gfx_mode::@6
(label) gfx_mode::@7
(label) gfx_mode::@8
(label) gfx_mode::@9
(label) gfx_mode::@return
(byte*) gfx_mode::col
(byte*) gfx_mode::col#1 col zp ZP_WORD:5 350.5
(byte*) gfx_mode::col#2 col zp ZP_WORD:5 1552.0
(byte*) gfx_mode::col#3 col zp ZP_WORD:5 202.0
(byte) gfx_mode::cx
(byte) gfx_mode::cx#1 reg byte x 1501.5
(byte) gfx_mode::cx#2 reg byte x 500.5
(byte) gfx_mode::cy
(byte) gfx_mode::cy#1 cy zp ZP_BYTE:2 151.5
(byte) gfx_mode::cy#4 cy zp ZP_BYTE:2 28.857142857142858
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#10 reg byte x 4.0
(byte) gfx_mode::dtv_control#11 reg byte x 4.0
(byte) gfx_mode::dtv_control#12 reg byte x 6.0
(byte) gfx_mode::dtv_control#13 reg byte x 4.0
(byte) gfx_mode::dtv_control#14 reg byte x 2.0
(byte) gfx_mode::dtv_control#15 reg byte x 4.0
(byte) gfx_mode::dtv_control#2 reg byte x 4.0
(byte) gfx_mode::dtv_control#3 reg byte x 4.0
(byte) gfx_mode::dtv_control#4 reg byte x 4.0
(byte) gfx_mode::dtv_control#5 reg byte x 4.0
(byte) gfx_mode::dtv_control#6 reg byte x 4.0
(byte) gfx_mode::i
(byte) gfx_mode::i#1 reg byte x 151.5
(byte) gfx_mode::i#2 reg byte x 202.0
(byte) gfx_mode::j
(byte) gfx_mode::j#1 reg byte x 151.5
(byte) gfx_mode::j#2 reg byte x 202.0
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0 reg byte a 202.0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0 plane_a zp ZP_DWORD:9 1.1428571428571428
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0 reg byte x 0.8
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0 plane_b zp ZP_DWORD:9 1.1428571428571428
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0 reg byte x 0.8
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0 vic_colors zp ZP_WORD:3 4.0
(byte*) gfx_mode::vic_colors#1 vic_colors zp ZP_WORD:3 420.59999999999997
(byte*) gfx_mode::vic_colors#2 vic_colors zp ZP_WORD:3 1034.6666666666667
(byte*) gfx_mode::vic_colors#3 vic_colors zp ZP_WORD:3 204.0
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#2 reg byte x 4.0
(byte) gfx_mode::vic_control#4 reg byte x 6.0
(byte) gfx_mode::vic_control#5 reg byte x 2.0
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#2 reg byte a 2.0
(byte[]) keyboard_char_keycodes
(byte()) keyboard_event_get()
(label) keyboard_event_get::@1
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 4.0
(byte) keyboard_event_get::return#2 reg byte a 26.25
(byte) keyboard_event_get::return#3 reg byte a 202.0
(byte) keyboard_event_get::return#4 reg byte a 4.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte a 4.0
(byte~) keyboard_event_pressed::$1 reg byte a 4.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#4 keycode zp ZP_BYTE:2 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 4.0
(byte) keyboard_event_pressed::return#1 reg byte a 4.0
(byte) keyboard_event_pressed::return#10 reg byte a 1.6666666666666665
(byte) keyboard_event_pressed::return#2 reg byte a 4.0
(byte) keyboard_event_pressed::return#3 reg byte a 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 row_bits zp ZP_BYTE:7 2.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 reg byte a 4.0
(byte~) keyboard_event_scan::$15 reg byte a 200002.0
(byte~) keyboard_event_scan::$16 reg byte a 200002.0
(byte/word/dword~) keyboard_event_scan::$23 reg byte a 200002.0
(byte~) keyboard_event_scan::$3 reg byte a 4.0
(byte~) keyboard_event_scan::$6 reg byte a 4.0
(byte~) keyboard_event_scan::$9 reg byte a 4.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 150001.5
(byte) keyboard_event_scan::col#2 reg byte x 28571.714285714286
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 200002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp ZP_BYTE:7 20002.0
(byte) keyboard_event_scan::keycode#10 keycode zp ZP_BYTE:7 31538.846153846156
(byte) keyboard_event_scan::keycode#11 keycode zp ZP_BYTE:7 5000.5
(byte) keyboard_event_scan::keycode#14 keycode zp ZP_BYTE:7 10001.0
(byte) keyboard_event_scan::keycode#15 keycode zp ZP_BYTE:7 52500.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp ZP_BYTE:2 15001.5
(byte) keyboard_event_scan::row#2 row zp ZP_BYTE:2 6000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp ZP_BYTE:18 12778.055555555557
(byte[8]) keyboard_events
(const byte[8]) keyboard_events#0 keyboard_events = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp ZP_BYTE:8 200002.0
(byte) keyboard_events_size#100 keyboard_events_size zp ZP_BYTE:8 882.6176470588235
(byte) keyboard_events_size#110 keyboard_events_size zp ZP_BYTE:8 105.0
(byte) keyboard_events_size#118 keyboard_events_size zp ZP_BYTE:8 102001.2
(byte) keyboard_events_size#119 keyboard_events_size zp ZP_BYTE:8 4286.428571428572
(byte) keyboard_events_size#18 keyboard_events_size zp ZP_BYTE:8 81000.90000000001
(byte) keyboard_events_size#2 keyboard_events_size zp ZP_BYTE:8 200002.0
(byte) keyboard_events_size#24 keyboard_events_size zp ZP_BYTE:8 6.6923076923076925
(byte) keyboard_events_size#27 keyboard_events_size zp ZP_BYTE:8 0.3333333333333333
(byte) keyboard_events_size#4 keyboard_events_size zp ZP_BYTE:8 3.0
(byte) keyboard_events_size#47 keyboard_events_size zp ZP_BYTE:8 65.05882352941177
(void()) keyboard_init()
(label) keyboard_init::@return
(byte[8]) keyboard_matrix_col_bitmask
(const byte[8]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $10, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $40, (byte/word/signed word/dword/signed dword) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 3334.333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 20002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 10003.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte/word/signed word/dword/signed dword) $fe, (byte/word/signed word/dword/signed dword) $fd, (byte/word/signed word/dword/signed dword) $fb, (byte/word/signed word/dword/signed dword) $f7, (byte/word/signed word/dword/signed dword) $ef, (byte/word/signed word/dword/signed dword) $df, (byte/word/signed word/dword/signed dword) $bf, (byte/signed byte/word/signed word/dword/signed dword) $7f }
(byte) keyboard_modifiers
(byte) keyboard_modifiers#18 reg byte x 0.8
(byte) keyboard_modifiers#19 reg byte x 1.6
(byte) keyboard_modifiers#20 reg byte x 1.6
(byte) keyboard_modifiers#21 reg byte x 0.7272727272727273
(byte) keyboard_modifiers#3 reg byte x 4.0
(byte) keyboard_modifiers#4 reg byte x 4.0
(byte) keyboard_modifiers#5 reg byte x 4.0
(byte[8]) keyboard_scan_values
(const byte[8]) keyboard_scan_values#0 keyboard_scan_values = { fill( 8, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(byte[]) preset_8bpppixelcell
(const byte[]) preset_8bpppixelcell#0 preset_8bpppixelcell = { (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $b, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_chunky
(const byte[]) preset_chunky#0 preset_chunky = { (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_ecmchar
(const byte[]) preset_ecmchar#0 preset_ecmchar = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 6 }
(byte[]) preset_hi_ecmchar
(const byte[]) preset_hi_ecmchar#0 preset_hi_ecmchar = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) $c, (byte/signed byte/word/signed word/dword/signed dword) $c }
(byte[]) preset_hi_stdchar
(const byte[]) preset_hi_stdchar#0 preset_hi_stdchar = { (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_mcbm
(const byte[]) preset_mcbm#0 preset_mcbm = { (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_sixsfred
(const byte[]) preset_sixsfred#0 preset_sixsfred = { (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_sixsfred2
(const byte[]) preset_sixsfred2#0 preset_sixsfred2 = { (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 9, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $a, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_stdbm
(const byte[]) preset_stdbm#0 preset_stdbm = { (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_stdchar
(const byte[]) preset_stdchar#0 preset_stdchar = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[]) preset_twoplane
(const byte[]) preset_twoplane#0 preset_twoplane = { (byte/signed byte/word/signed word/dword/signed dword) 6, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) $d, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:5 2002.0
(byte*) print_char_cursor#20 print_char_cursor zp ZP_WORD:5 821.0
(byte*) print_char_cursor#22 print_char_cursor zp ZP_WORD:5 102.0
(byte*) print_char_cursor#38 print_char_cursor zp ZP_WORD:5 572.0
(byte*~) print_char_cursor#77 print_char_cursor zp ZP_WORD:5 4.0
(byte*~) print_char_cursor#78 print_char_cursor zp ZP_WORD:5 202.0
(void()) print_cls()
(byte*~) print_cls::$0 $0 zp ZP_WORD:5 202.0
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0 sc zp ZP_WORD:3 4.0
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 101.0
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 152.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#2 print_line_cursor zp ZP_WORD:16 8.749999999999998
(byte*) print_line_cursor#21 print_line_cursor zp ZP_WORD:16 2004.0
(byte*) print_line_cursor#22 print_line_cursor zp ZP_WORD:16 641.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#2 screen zp ZP_WORD:16 5.631578947368421
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0 at zp ZP_WORD:5 1001.0
(byte*) print_str_at::at#2 at zp ZP_WORD:5 1001.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 str zp ZP_WORD:3 2002.0
(byte*) print_str_at::str#1 str zp ZP_WORD:3 2.0
(byte*) print_str_at::str#2 str zp ZP_WORD:3 1001.5
(void()) print_str_lines((byte*) print_str_lines::str)
(label) print_str_lines::@1
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 reg byte a 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 str zp ZP_WORD:3 233.66666666666669
(byte*) print_str_lines::str#3 str zp ZP_WORD:3 152.5
(byte*) print_str_lines::str#4 str zp ZP_WORD:3 1552.0
(byte*) print_str_lines::str#5 str zp ZP_WORD:3 1.0
(void()) render_preset_name((byte) render_preset_name::idx)
(label) render_preset_name::@1
(label) render_preset_name::@10
(label) render_preset_name::@11
(label) render_preset_name::@12
(label) render_preset_name::@2
(label) render_preset_name::@3
(label) render_preset_name::@4
(label) render_preset_name::@5
(label) render_preset_name::@6
(label) render_preset_name::@7
(label) render_preset_name::@8
(label) render_preset_name::@9
(label) render_preset_name::@return
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0 reg byte a 4.0
(byte) render_preset_name::idx#1 reg byte a 202.0
(byte) render_preset_name::idx#10 reg byte a 11.363636363636362
(byte*) render_preset_name::name
(const byte*) render_preset_name::name#1 name#1 = (string) "Standard Charset              @"
(const byte*) render_preset_name::name#10 name#10 = (string) "Sixs Fred 2                   @"
(const byte*) render_preset_name::name#11 name#11 = (string) "8bpp Pixel Cell               @"
(byte*) render_preset_name::name#13 name zp ZP_WORD:3 2.0
(const byte*) render_preset_name::name#2 name#2 = (string) "Extended Color Charset        @"
(const byte*) render_preset_name::name#3 name#3 = (string) "Standard Bitmap               @"
(const byte*) render_preset_name::name#4 name#4 = (string) "Multicolor Bitmap             @"
(const byte*) render_preset_name::name#5 name#5 = (string) "Hicolor Charset               @"
(const byte*) render_preset_name::name#6 name#6 = (string) "Hicolor Extended Color Charset@"
(const byte*) render_preset_name::name#7 name#7 = (string) "Twoplane Bitmap               @"
(const byte*) render_preset_name::name#8 name#8 = (string) "Chunky 8bpp                   @"
(const byte*) render_preset_name::name#9 name#9 = (string) "Sixs Fred                     @"

reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
reg byte x [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
reg byte a [ gfx_mode::vic_control2#2 ]
zp ZP_BYTE:2 [ gfx_mode::cy#4 gfx_mode::cy#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 keyboard_event_pressed::keycode#4 form_render_values::idx#2 form_render_values::idx#1 gfx_init_plane_fill::fill#6 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 bitmap_clear::y#4 bitmap_clear::y#1 gfx_init_charset::c#4 gfx_init_charset::c#1 gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_mode::$56 bitmap_init::$6 ]
zp ZP_WORD:3 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$52 gfx_mode::$54 gfx_mode::$55 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$57 gfx_mode::$59 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 apply_preset::preset#14 form_set_screen::line#2 form_set_screen::line#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 print_cls::sc#2 print_cls::sc#0 print_cls::sc#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::$6 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_mode::$24 gfx_mode::$26 gfx_mode::$28 gfx_mode::$38 gfx_mode::$40 gfx_mode::$42 form_field_ptr::return#2 form_render_values::field#0 form_field_ptr::return#0 form_field_ptr::$2 form_field_ptr::return#3 form_control::field#0 gfx_init_plane_fill::$1 bitmap_plot::plotter_x#0 bitmap_plot::$0 ]
zp ZP_WORD:5 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 print_str_at::at#2 print_str_at::at#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#77 print_char_cursor#78 print_char_cursor#38 print_char_cursor#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 print_cls::$0 bitmap_plot::plotter_y#0 ]
reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ]
reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ]
reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte x [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp ZP_BYTE:7 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#15 keyboard_event_scan::keycode#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 keyboard_event_pressed::row_bits#0 gfx_init_screen3::$1 gfx_init_screen2::col2#0 gfx_init_screen0::$1 ]
zp ZP_BYTE:8 [ keyboard_events_size#18 keyboard_events_size#119 keyboard_events_size#110 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#118 keyboard_events_size#1 keyboard_events_size#2 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
reg byte a [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
zp ZP_DWORD:9 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 gfx_mode::$36 gfx_mode::plane_b#0 gfx_init_plane_fill::plane_addr#3 ]
reg byte x [ form_mode::i#2 form_mode::i#1 ]
zp ZP_BYTE:13 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
zp ZP_BYTE:14 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#44 form_field_idx#45 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
zp ZP_BYTE:15 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
reg byte y [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
reg byte y [ apply_preset::i#2 apply_preset::i#1 ]
reg byte x [ form_control::return#2 ]
reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ]
zp ZP_WORD:16 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 gfx_init_plane_8bppchunky::$9 ]
reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
zp ZP_BYTE:18 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 keyboard_event_scan::row_scan#0 ]
reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
reg byte a [ gfx_mode::$20 ]
reg byte x [ gfx_mode::plane_a_offs#0 ]
reg byte a [ gfx_mode::$25 ]
reg byte a [ gfx_mode::$27 ]
reg byte a [ gfx_mode::$29 ]
reg byte a [ gfx_mode::$30 ]
reg byte a [ gfx_mode::$31 ]
reg byte a [ gfx_mode::$32 ]
reg byte a [ gfx_mode::$33 ]
reg byte a [ gfx_mode::$34 ]
reg byte x [ gfx_mode::plane_b_offs#0 ]
reg byte a [ gfx_mode::$39 ]
reg byte a [ gfx_mode::$41 ]
reg byte a [ gfx_mode::$43 ]
reg byte a [ gfx_mode::$44 ]
reg byte a [ gfx_mode::$45 ]
reg byte a [ gfx_mode::$46 ]
reg byte a [ gfx_mode::$47 ]
reg byte a [ get_vic_charset::idx#0 ]
reg byte a [ gfx_mode::$60 ]
reg byte a [ gfx_mode::$61 ]
reg byte a [ gfx_mode::$62 ]
reg byte a [ gfx_mode::$64 ]
reg byte a [ gfx_mode::$65 ]
reg byte a [ gfx_mode::$66 ]
reg byte a [ gfx_mode::$67 ]
reg byte a [ gfx_mode::$68 ]
reg byte a [ gfx_mode::$69 ]
reg byte a [ gfx_mode::$70 ]
reg byte a [ gfx_mode::$71 ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte a [ gfx_mode::keyboard_event#0 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#3 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ keyboard_event_pressed::$0 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ form_control::return#0 ]
reg byte a [ form_mode::$36 ]
reg byte a [ apply_preset::idx#0 ]
reg byte x [ form_field_ptr::y#0 ]
reg byte a [ form_field_ptr::x#0 ]
reg byte a [ form_control::$13 ]
reg byte a [ keyboard_event_get::return#4 ]
reg byte a [ form_control::key_event#0 ]
reg byte a [ form_control::$15 ]
reg byte a [ form_control::$16 ]
reg byte a [ form_control::$24 ]
reg byte a [ form_control::$14 ]
reg byte a [ form_set_screen::$0 ]
reg byte a [ form_set_screen::$1 ]
reg byte a [ print_str_lines::ch#0 ]
zp ZP_DWORD:19 [ gfx_init_plane_fill::$0 ]
reg byte x [ gfx_init_plane_fill::gfxbCpuBank#0 ]
reg byte x [ gfx_init_plane_fill::gfxbCpuBank#1 ]
reg byte a [ gfx_init_plane_horisontal2::$8 ]
reg byte a [ gfx_init_plane_horisontal2::row#0 ]
reg byte a [ gfx_init_plane_horisontal::$8 ]
reg byte a [ gfx_init_plane_charset8::$8 ]
reg byte a [ gfx_init_plane_8bppchunky::c#0 ]
reg byte x [ bitmap_line::x1#0 ]
reg byte y [ bitmap_line::yd#2 ]
reg byte y [ bitmap_line::yd#1 ]
reg byte y [ bitmap_line::yd#10 ]
reg byte y [ bitmap_line::yd#11 ]
reg byte x [ bitmap_line_xdyi::$6 ]
reg byte a [ bitmap_plot::$1 ]
reg byte a [ bitmap_line_ydxi::$6 ]
reg byte x [ bitmap_line_xdyd::$6 ]
reg byte a [ bitmap_line_ydxd::$6 ]
reg byte a [ bitmap_init::$0 ]
reg byte a [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$8 ]
reg byte a [ bitmap_init::$9 ]
reg byte a [ bitmap_init::$10 ]
reg byte a [ gfx_init_screen3::$0 ]
reg byte a [ gfx_init_screen3::$2 ]
reg byte a [ gfx_init_screen3::$3 ]
reg byte a [ gfx_init_screen2::$0 ]
reg byte y [ gfx_init_screen2::col#0 ]
reg byte a [ gfx_init_screen2::$3 ]
reg byte a [ gfx_init_screen2::$4 ]
reg byte a [ gfx_init_screen1::$0 ]
reg byte a [ gfx_init_screen1::$1 ]
reg byte a [ gfx_init_screen0::$0 ]
reg byte a [ gfx_init_screen0::$2 ]
reg byte a [ gfx_init_screen0::$3 ]


FINAL ASSEMBLER
Score: 10142556

//SEG0 File Comments
// Interactive Explorer for C64DTV Screen Modes
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA #1 Port A data direction register.
  .label CIA1_PORT_A_DDR = $dc02
  // CIA #1 Port B data direction register.
  .label CIA1_PORT_B_DDR = $dc03
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  // Number of form fields
  .const form_fields_cnt = $24
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  .label form_ctrl_bmm = form_fields_val+1
  .label form_ctrl_mcm = form_fields_val+2
  .label form_ctrl_ecm = form_fields_val+3
  .label form_ctrl_hicol = form_fields_val+4
  .label form_ctrl_line = form_fields_val+5
  .label form_ctrl_colof = form_fields_val+6
  .label form_ctrl_chunk = form_fields_val+7
  .label form_ctrl_borof = form_fields_val+8
  .label form_ctrl_overs = form_fields_val+9
  .label form_a_pattern = form_fields_val+$a
  .label form_a_start_hi = form_fields_val+$b
  .label form_a_start_lo = form_fields_val+$c
  .label form_a_step_hi = form_fields_val+$d
  .label form_a_step_lo = form_fields_val+$e
  .label form_a_mod_hi = form_fields_val+$f
  .label form_a_mod_lo = form_fields_val+$10
  .label form_b_pattern = form_fields_val+$11
  .label form_b_start_hi = form_fields_val+$12
  .label form_b_start_lo = form_fields_val+$13
  .label form_b_step_hi = form_fields_val+$14
  .label form_b_step_lo = form_fields_val+$15
  .label form_b_mod_hi = form_fields_val+$16
  .label form_b_mod_lo = form_fields_val+$17
  .label form_vic_screen = form_fields_val+$18
  .label form_vic_gfx = form_fields_val+$19
  .label form_vic_cols = form_fields_val+$1a
  .label form_dtv_palet = form_fields_val+$1b
  .label form_vic_bg0_hi = form_fields_val+$1c
  .label form_vic_bg0_lo = form_fields_val+$1d
  .label form_vic_bg1_hi = form_fields_val+$1e
  .label form_vic_bg1_lo = form_fields_val+$1f
  .label form_vic_bg2_hi = form_fields_val+$20
  .label form_vic_bg2_lo = form_fields_val+$21
  .label form_vic_bg3_hi = form_fields_val+$22
  .label form_vic_bg3_lo = form_fields_val+$23
  .label print_char_cursor = 5
  .label print_line_cursor = $10
  .label keyboard_events_size = 8
  .label form_cursor_count = $d
  .label form_field_idx = $e
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 asm { sei  }
    sei
  //SEG11 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG12 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG13 [7] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG14 [8] call keyboard_init 
    jsr keyboard_init
  //SEG15 [9] phi from main to main::@3 [phi:main->main::@3]
  //SEG16 main::@3
  //SEG17 [10] call gfx_init 
  //SEG18 [449] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
    jsr gfx_init
  //SEG19 [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG20 [11] phi (byte) form_field_idx#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta form_field_idx
  //SEG21 [11] phi (byte) keyboard_events_size#27 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    sta keyboard_events_size
  //SEG22 [11] phi (signed byte) form_cursor_count#1 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbuc1 
    lda #FORM_CURSOR_BLINK/2
    sta form_cursor_count
  //SEG23 main::@1
  //SEG24 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG25 main::@2
  b2:
  //SEG26 [13] call form_mode 
  //SEG27 [254] phi from main::@2 to form_mode [phi:main::@2->form_mode]
    jsr form_mode
  //SEG28 [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  //SEG29 main::@4
  //SEG30 [15] call gfx_mode 
    jsr gfx_mode
  //SEG31 [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG32 [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG33 [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
  //SEG34 [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp b2
}
//SEG35 gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label _22 = 9
    .label _24 = 3
    .label _26 = 3
    .label _28 = 3
    .label _36 = 9
    .label _38 = 3
    .label _40 = 3
    .label _42 = 3
    .label _52 = 3
    .label _54 = 3
    .label _55 = 3
    .label _56 = 2
    .label _57 = 3
    .label _59 = 3
    .label plane_a = 9
    .label plane_b = 9
    .label vic_colors = 3
    .label col = 5
    .label cy = 2
  //SEG36 [16] if(*((const byte*) form_ctrl_line#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_line
    cmp #0
    beq b10
  //SEG37 [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  //SEG38 gfx_mode::@10
  //SEG39 [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  //SEG40 [18] phi (byte) gfx_mode::dtv_control#14 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) DTV_LINEAR#0 [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0|DTV_LINEAR
    jmp b1
  //SEG41 [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  b10:
  //SEG42 [18] phi (byte) gfx_mode::dtv_control#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG43 gfx_mode::@1
  b1:
  //SEG44 [19] if(*((const byte*) form_ctrl_borof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_borof
    cmp #0
    beq b2
  //SEG45 gfx_mode::@11
  //SEG46 [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
  //SEG47 [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  //SEG48 [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
  //SEG49 gfx_mode::@2
  b2:
  //SEG50 [22] if(*((const byte*) form_ctrl_hicol#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_hicol
    cmp #0
    beq b3
  //SEG51 gfx_mode::@12
  //SEG52 [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
  //SEG53 [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  //SEG54 [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
  //SEG55 gfx_mode::@3
  b3:
  //SEG56 [25] if(*((const byte*) form_ctrl_overs#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_overs
    cmp #0
    beq b4
  //SEG57 gfx_mode::@13
  //SEG58 [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
  //SEG59 [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  //SEG60 [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
  //SEG61 gfx_mode::@4
  b4:
  //SEG62 [28] if(*((const byte*) form_ctrl_colof#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_colof
    cmp #0
    beq b5
  //SEG63 gfx_mode::@14
  //SEG64 [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
  //SEG65 [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  //SEG66 [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
  //SEG67 gfx_mode::@5
  b5:
  //SEG68 [31] if(*((const byte*) form_ctrl_chunk#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_chunk
    cmp #0
    beq b6
  //SEG69 gfx_mode::@15
  //SEG70 [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
  //SEG71 [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  //SEG72 [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
  //SEG73 gfx_mode::@6
  b6:
  //SEG74 [34] *((const byte*) DTV_CONTROL#0) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
  //SEG75 [35] if(*((const byte*) form_ctrl_ecm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_ecm
    cmp #0
    beq b11
  //SEG76 [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  //SEG77 gfx_mode::@16
  //SEG78 [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  //SEG79 [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3|(const byte) VIC_ECM#0 [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3|VIC_ECM
    jmp b7
  //SEG80 [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  b11:
  //SEG81 [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3
  //SEG82 gfx_mode::@7
  b7:
  //SEG83 [38] if(*((const byte*) form_ctrl_bmm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_bmm
    cmp #0
    beq b8
  //SEG84 gfx_mode::@17
  //SEG85 [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VIC_BMM
    tax
  //SEG86 [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  //SEG87 [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
  //SEG88 gfx_mode::@8
  b8:
  //SEG89 [41] *((const byte*) VIC_CONTROL#0) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuxx 
    stx VIC_CONTROL
  //SEG90 [42] if(*((const byte*) form_ctrl_mcm#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_ctrl_mcm
    cmp #0
    beq b12
  //SEG91 [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  //SEG92 gfx_mode::@18
  //SEG93 [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  //SEG94 [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL#0|(const byte) VIC_MCM#0 [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    jmp b9
  //SEG95 [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  b12:
  //SEG96 [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL#0 [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL
  //SEG97 gfx_mode::@9
  b9:
  //SEG98 [45] *((const byte*) VIC_CONTROL2#0) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL2
  //SEG99 [46] (byte~) gfx_mode::$20 ← *((const byte*) form_a_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_start_hi
    asl
    asl
    asl
    asl
  //SEG100 [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte*) form_a_start_lo#0) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_a_start_lo
    tax
  //SEG101 [48] (byte) get_plane::idx#0 ← *((const byte*) form_a_pattern#0) -- vbuaa=_deref_pbuc1 
    lda form_a_pattern
  //SEG102 [49] call get_plane 
  //SEG103 [236] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  //SEG104 [236] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
  //SEG105 [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
  //SEG106 gfx_mode::@27
  //SEG107 [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16
  //SEG108 [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc plane_a
    sta plane_a
    lda plane_a+1
    adc #0
    sta plane_a+1
    lda plane_a+2
    adc #0
    sta plane_a+2
    lda plane_a+3
    adc #0
    sta plane_a+3
  //SEG109 [53] (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda plane_a
    sta _24
    lda plane_a+1
    sta _24+1
  //SEG110 [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24 -- vbuaa=_lo_vwuz1 
    lda _24
  //SEG111 [55] *((const byte*) DTV_PLANEA_START_LO#0) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
  //SEG112 [56] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda plane_a
    sta _26
    lda plane_a+1
    sta _26+1
  //SEG113 [57] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 -- vbuaa=_hi_vwuz1 
  //SEG114 [58] *((const byte*) DTV_PLANEA_START_MI#0) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
  //SEG115 [59] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda plane_a+2
    sta _28
    lda plane_a+3
    sta _28+1
  //SEG116 [60] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 -- vbuaa=_lo_vwuz1 
    lda _28
  //SEG117 [61] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
  //SEG118 [62] (byte~) gfx_mode::$30 ← *((const byte*) form_a_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_step_hi
    asl
    asl
    asl
    asl
  //SEG119 [63] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte*) form_a_step_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_step_lo
  //SEG120 [64] *((const byte*) DTV_PLANEA_STEP#0) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
  //SEG121 [65] (byte~) gfx_mode::$32 ← *((const byte*) form_a_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_a_mod_hi
    asl
    asl
    asl
    asl
  //SEG122 [66] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte*) form_a_mod_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_a_mod_lo
  //SEG123 [67] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte~) gfx_mode::$33 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
  //SEG124 [68] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG125 [69] (byte~) gfx_mode::$34 ← *((const byte*) form_b_start_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_start_hi
    asl
    asl
    asl
    asl
  //SEG126 [70] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte*) form_b_start_lo#0) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_b_start_lo
    tax
  //SEG127 [71] (byte) get_plane::idx#1 ← *((const byte*) form_b_pattern#0) -- vbuaa=_deref_pbuc1 
    lda form_b_pattern
  //SEG128 [72] call get_plane 
  //SEG129 [236] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  //SEG130 [236] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
  //SEG131 [73] (dword) get_plane::return#17 ← (dword) get_plane::return#14
  //SEG132 gfx_mode::@28
  //SEG133 [74] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17
  //SEG134 [75] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc plane_b
    sta plane_b
    lda plane_b+1
    adc #0
    sta plane_b+1
    lda plane_b+2
    adc #0
    sta plane_b+2
    lda plane_b+3
    adc #0
    sta plane_b+3
  //SEG135 [76] (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda plane_b
    sta _38
    lda plane_b+1
    sta _38+1
  //SEG136 [77] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38 -- vbuaa=_lo_vwuz1 
    lda _38
  //SEG137 [78] *((const byte*) DTV_PLANEB_START_LO#0) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
  //SEG138 [79] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda plane_b
    sta _40
    lda plane_b+1
    sta _40+1
  //SEG139 [80] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 -- vbuaa=_hi_vwuz1 
  //SEG140 [81] *((const byte*) DTV_PLANEB_START_MI#0) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
  //SEG141 [82] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda plane_b+2
    sta _42
    lda plane_b+3
    sta _42+1
  //SEG142 [83] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 -- vbuaa=_lo_vwuz1 
    lda _42
  //SEG143 [84] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
  //SEG144 [85] (byte~) gfx_mode::$44 ← *((const byte*) form_b_step_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_step_hi
    asl
    asl
    asl
    asl
  //SEG145 [86] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte*) form_b_step_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_step_lo
  //SEG146 [87] *((const byte*) DTV_PLANEB_STEP#0) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
  //SEG147 [88] (byte~) gfx_mode::$46 ← *((const byte*) form_b_mod_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_b_mod_hi
    asl
    asl
    asl
    asl
  //SEG148 [89] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte*) form_b_mod_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_b_mod_lo
  //SEG149 [90] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte~) gfx_mode::$47 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
  //SEG150 [91] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG151 [92] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG152 [93] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) VIC_SCREEN0#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2_PORT_A
  //SEG153 [94] (byte) get_vic_screen::idx#0 ← *((const byte*) form_vic_screen#0) -- vbuaa=_deref_pbuc1 
    lda form_vic_screen
  //SEG154 [95] call get_vic_screen 
  //SEG155 [222] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  //SEG156 [222] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
  //SEG157 [96] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
  //SEG158 gfx_mode::@29
  //SEG159 [97] (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10
  //SEG160 [98] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$52 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda _54
    and #<$3fff
    sta _54
    lda _54+1
    and #>$3fff
    sta _54+1
  //SEG161 [99] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte/signed byte/word/signed word/dword/signed dword) 6 -- vwuz1=vwuz1_ror_6 
    ldy #6
  !:
    lsr _55+1
    ror _55
    dey
    bne !-
  //SEG162 [100] (byte~) gfx_mode::$56 ← ((byte)) (word~) gfx_mode::$55 -- vbuz1=_byte_vwuz2 
    lda _55
    sta _56
  //SEG163 [101] (byte) get_vic_charset::idx#0 ← *((const byte*) form_vic_gfx#0) -- vbuaa=_deref_pbuc1 
    lda form_vic_gfx
  //SEG164 [102] call get_vic_charset 
    jsr get_vic_charset
  //SEG165 [103] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  //SEG166 gfx_mode::@30
  //SEG167 [104] (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#4
  //SEG168 [105] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$57 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda _59
    and #<$3fff
    sta _59
    lda _59+1
    and #>$3fff
    sta _59+1
  //SEG169 [106] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 -- vbuaa=_hi_vwuz1 
  //SEG170 [107] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
  //SEG171 [108] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61 -- vbuaa=vbuz1_bor_vbuaa 
    ora _56
  //SEG172 [109] *((const byte*) VIC_MEMORY#0) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VIC_MEMORY
  //SEG173 [110] (byte) get_vic_screen::idx#1 ← *((const byte*) form_vic_cols#0) -- vbuaa=_deref_pbuc1 
    lda form_vic_cols
  //SEG174 [111] call get_vic_screen 
  //SEG175 [222] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  //SEG176 [222] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
  //SEG177 [112] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
  //SEG178 gfx_mode::@31
  //SEG179 [113] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
  //SEG180 [114] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  //SEG181 [114] phi (byte) gfx_mode::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG182 [114] phi (byte*) gfx_mode::col#3 = (const byte*) COLS#0 [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
  //SEG183 [114] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
  //SEG184 [114] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  //SEG185 [114] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
  //SEG186 [114] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
  //SEG187 [114] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
  //SEG188 gfx_mode::@19
  b19:
  //SEG189 [115] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  //SEG190 [115] phi (byte) gfx_mode::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG191 [115] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
  //SEG192 [115] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
  //SEG193 [115] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  //SEG194 [115] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
  //SEG195 [115] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
  //SEG196 [115] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
  //SEG197 gfx_mode::@20
  b20:
  //SEG198 [116] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    sta (col),y
  //SEG199 [117] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG200 [118] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc vic_colors
    bne !+
    inc vic_colors+1
  !:
  //SEG201 [119] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG202 [120] if((byte) gfx_mode::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b20
  //SEG203 gfx_mode::@21
  //SEG204 [121] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG205 [122] if((byte) gfx_mode::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b19
  //SEG206 gfx_mode::@22
  //SEG207 [123] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta BORDERCOL
  //SEG208 [124] (byte~) gfx_mode::$64 ← *((const byte*) form_vic_bg0_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg0_hi
    asl
    asl
    asl
    asl
  //SEG209 [125] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte*) form_vic_bg0_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg0_lo
  //SEG210 [126] *((const byte*) BGCOL1#0) ← (byte~) gfx_mode::$65 -- _deref_pbuc1=vbuaa 
    sta BGCOL1
  //SEG211 [127] (byte~) gfx_mode::$66 ← *((const byte*) form_vic_bg1_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg1_hi
    asl
    asl
    asl
    asl
  //SEG212 [128] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte*) form_vic_bg1_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg1_lo
  //SEG213 [129] *((const byte*) BGCOL2#0) ← (byte~) gfx_mode::$67 -- _deref_pbuc1=vbuaa 
    sta BGCOL2
  //SEG214 [130] (byte~) gfx_mode::$68 ← *((const byte*) form_vic_bg2_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg2_hi
    asl
    asl
    asl
    asl
  //SEG215 [131] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte*) form_vic_bg2_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg2_lo
  //SEG216 [132] *((const byte*) BGCOL3#0) ← (byte~) gfx_mode::$69 -- _deref_pbuc1=vbuaa 
    sta BGCOL3
  //SEG217 [133] (byte~) gfx_mode::$70 ← *((const byte*) form_vic_bg3_hi#0) << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_vic_bg3_hi
    asl
    asl
    asl
    asl
  //SEG218 [134] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte*) form_vic_bg3_lo#0) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_vic_bg3_lo
  //SEG219 [135] *((const byte*) BGCOL4#0) ← (byte~) gfx_mode::$71 -- _deref_pbuc1=vbuaa 
    sta BGCOL4
  //SEG220 [136] if(*((const byte*) form_dtv_palet#0)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_dtv_palet
    cmp #0
    beq b13
  //SEG221 [137] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  //SEG222 [137] phi (byte) gfx_mode::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
  //SEG223 [137] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  //SEG224 [137] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
  //SEG225 gfx_mode::@23
  b23:
  //SEG226 [138] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG227 [139] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG228 [140] if((byte) gfx_mode::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b23
  //SEG229 gfx_mode::@25
  b25:
  //SEG230 [141] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b25
  //SEG231 [142] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  //SEG232 gfx_mode::@26
  //SEG233 [143] call keyboard_event_scan 
  //SEG234 [159] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  //SEG235 [159] phi (byte) keyboard_events_size#110 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
  //SEG236 [144] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  //SEG237 gfx_mode::@32
  //SEG238 [145] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG239 [146] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  //SEG240 gfx_mode::@33
  //SEG241 [147] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
  //SEG242 [148] if((byte) gfx_mode::keyboard_event#0!=(const byte) KEY_SPACE#0) goto gfx_mode::@25 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b25
  //SEG243 gfx_mode::@return
  //SEG244 [149] return 
    rts
  // DTV Palette - default
  //SEG245 [150] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  b13:
  //SEG246 [150] phi (byte) gfx_mode::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG247 [150] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  //SEG248 [150] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
  //SEG249 gfx_mode::@24
  b24:
  //SEG250 [151] *((const byte*) DTV_PALETTE#0 + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG251 [152] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG252 [153] if((byte) gfx_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b24
    jmp b25
}
//SEG253 keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
  //SEG254 [154] if((byte) keyboard_events_size#100==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq b1
  //SEG255 keyboard_event_get::@1
  //SEG256 [155] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG257 [156] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy keyboard_events_size
    lda keyboard_events,y
  //SEG258 [157] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  //SEG259 [157] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
  //SEG260 [157] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    rts
  //SEG261 [157] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  b1:
  //SEG262 [157] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG263 [157] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
  //SEG264 keyboard_event_get::@return
  //SEG265 [158] return 
    rts
}
//SEG266 keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $12
    .label keycode = 7
    .label row = 2
  //SEG267 [160] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  //SEG268 [160] phi (byte) keyboard_events_size#119 = (byte) keyboard_events_size#110 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
  //SEG269 [160] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG270 [160] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    sta row
  //SEG271 [160] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  //SEG272 [160] phi (byte) keyboard_events_size#119 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
  //SEG273 [160] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
  //SEG274 [160] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
  //SEG275 keyboard_event_scan::@7
  b7:
  //SEG276 [161] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx row
  //SEG277 [162] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG278 [163] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  //SEG279 keyboard_event_scan::@19
  //SEG280 [164] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta row_scan
  //SEG281 [165] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy row
    cmp keyboard_scan_values,y
    bne b6
  //SEG282 keyboard_event_scan::@16
  //SEG283 [166] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax keycode
    axs #-[8]
    stx keycode
  //SEG284 [167] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  //SEG285 [167] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#118 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
  //SEG286 [167] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
  //SEG287 keyboard_event_scan::@8
  b8:
  //SEG288 [168] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG289 [169] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp row
    bne b7
  //SEG290 [170] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  //SEG291 keyboard_event_scan::@17
  //SEG292 [171] call keyboard_event_pressed 
  //SEG293 [213] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  //SEG294 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG295 [172] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
  //SEG296 keyboard_event_scan::@20
  //SEG297 [173] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  //SEG298 [174] if((byte~) keyboard_event_scan::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG299 [175] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  //SEG300 keyboard_event_scan::@18
  //SEG301 [176] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  //SEG302 [176] phi (byte) keyboard_modifiers#18 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0|KEY_MODIFIER_LSHIFT
    jmp b1
  //SEG303 [176] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  b4:
  //SEG304 [176] phi (byte) keyboard_modifiers#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG305 keyboard_event_scan::@1
  b1:
  //SEG306 [177] call keyboard_event_pressed 
  //SEG307 [213] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  //SEG308 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG309 [178] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
  //SEG310 keyboard_event_scan::@21
  //SEG311 [179] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  //SEG312 [180] if((byte~) keyboard_event_scan::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG313 keyboard_event_scan::@4
  //SEG314 [181] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
  //SEG315 [182] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  //SEG316 [182] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
  //SEG317 keyboard_event_scan::@2
  b2:
  //SEG318 [183] call keyboard_event_pressed 
  //SEG319 [213] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  //SEG320 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG321 [184] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
  //SEG322 keyboard_event_scan::@22
  //SEG323 [185] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  //SEG324 [186] if((byte~) keyboard_event_scan::$6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
  //SEG325 keyboard_event_scan::@5
  //SEG326 [187] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
  //SEG327 [188] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  //SEG328 [188] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
  //SEG329 keyboard_event_scan::@3
  b3:
  //SEG330 [189] call keyboard_event_pressed 
  //SEG331 [213] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  //SEG332 [213] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG333 [190] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
  //SEG334 keyboard_event_scan::@23
  //SEG335 [191] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
  //SEG336 [192] if((byte~) keyboard_event_scan::$9==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn
  //SEG337 keyboard_event_scan::@6
  //SEG338 [193] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
  //SEG339 [194] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  //SEG340 [194] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
  //SEG341 keyboard_event_scan::@return
  breturn:
  //SEG342 [195] return 
    rts
  // Something has changed on the keyboard row - check each column
  //SEG343 [196] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  //SEG344 [196] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#118 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
  //SEG345 [196] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
  //SEG346 [196] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
  //SEG347 [196] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b6:
  //SEG348 [196] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#119 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
  //SEG349 [196] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
  //SEG350 [196] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG351 keyboard_event_scan::@9
  b9:
  //SEG352 [197] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
  //SEG353 [198] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG354 [199] if((byte~) keyboard_event_scan::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
  //SEG355 keyboard_event_scan::@12
  //SEG356 [200] if((byte) keyboard_events_size#18==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp keyboard_events_size
    beq b10
  //SEG357 keyboard_event_scan::@13
  //SEG358 [201] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and row_scan
  //SEG359 [202] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
  //SEG360 keyboard_event_scan::@14
  //SEG361 [203] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG362 [204] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG363 [205] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  //SEG364 [205] phi (byte) keyboard_events_size#118 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
  //SEG365 keyboard_event_scan::@10
  b10:
  //SEG366 [206] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG367 [207] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG368 [208] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b9
  //SEG369 keyboard_event_scan::@15
  //SEG370 [209] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b8
  //SEG371 keyboard_event_scan::@11
  b11:
  //SEG372 [210] (byte/word/dword~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora keycode
  //SEG373 [211] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#18) ← (byte/word/dword~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG374 [212] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b10
}
//SEG375 keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage(2) keycode)
keyboard_event_pressed: {
    .label row_bits = 7
    .label keycode = 2
  //SEG376 [214] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_ror_3 
    lda keycode
    lsr
    lsr
    lsr
  //SEG377 [215] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta row_bits
  //SEG378 [216] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and keycode
  //SEG379 [217] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and row_bits
  //SEG380 keyboard_event_pressed::@return
  //SEG381 [218] return 
    rts
}
//SEG382 keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
  //SEG383 [219] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG384 [220] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
  //SEG385 keyboard_matrix_read::@return
  //SEG386 [221] return 
    rts
}
//SEG387 get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte register(A) idx)
get_vic_screen: {
    .label return = 3
  //SEG388 [223] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG389 get_vic_screen::@2
  //SEG390 [224] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b3
  //SEG391 get_vic_screen::@3
  //SEG392 [225] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b4
  //SEG393 get_vic_screen::@4
  //SEG394 [226] if((byte) get_vic_screen::idx#2==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b5
  //SEG395 get_vic_screen::@5
  //SEG396 [227] if((byte) get_vic_screen::idx#2!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_vic_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne b2
  //SEG397 [228] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  //SEG398 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN4#0 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta return
    lda #>VIC_SCREEN4
    sta return+1
    rts
  //SEG399 [228] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  b2:
  //SEG400 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN0#0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta return
    lda #>VIC_SCREEN0
    sta return+1
    rts
  //SEG401 [228] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  b3:
  //SEG402 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN1#0 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta return
    lda #>VIC_SCREEN1
    sta return+1
    rts
  //SEG403 [228] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  b4:
  //SEG404 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN2#0 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta return
    lda #>VIC_SCREEN2
    sta return+1
    rts
  //SEG405 [228] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  b5:
  //SEG406 [228] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN3#0 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta return
    lda #>VIC_SCREEN3
    sta return+1
  //SEG407 get_vic_screen::@return
  //SEG408 [229] return 
    rts
  //SEG409 [230] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  //SEG410 get_vic_screen::@1
}
//SEG411 get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte register(A) idx)
get_vic_charset: {
    .label return = 3
  //SEG412 [231] if((byte) get_vic_charset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_vic_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG413 get_vic_charset::@2
  //SEG414 [232] if((byte) get_vic_charset::idx#0!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_vic_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne b2
  //SEG415 [233] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  //SEG416 [233] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_BITMAP#0 [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta return
    lda #>VIC_BITMAP
    sta return+1
    rts
  //SEG417 [233] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  b2:
  //SEG418 [233] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_CHARSET_ROM#0 [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta return
    lda #>VIC_CHARSET_ROM
    sta return+1
  //SEG419 get_vic_charset::@return
  //SEG420 [234] return 
    rts
  //SEG421 [235] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  //SEG422 get_vic_charset::@1
}
//SEG423 get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 9
  //SEG424 [237] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG425 get_plane::@2
  //SEG426 [238] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    bne !b7+
    jmp b7
  !b7:
  //SEG427 get_plane::@3
  //SEG428 [239] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    bne !b8+
    jmp b8
  !b8:
  //SEG429 get_plane::@4
  //SEG430 [240] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    bne !b9+
    jmp b9
  !b9:
  //SEG431 get_plane::@5
  //SEG432 [241] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    bne !b10+
    jmp b10
  !b10:
  //SEG433 get_plane::@6
  //SEG434 [242] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    bne !b11+
    jmp b11
  !b11:
  //SEG435 get_plane::@7
  //SEG436 [243] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    bne !b12+
    jmp b12
  !b12:
  //SEG437 get_plane::@8
  //SEG438 [244] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    bne !b13+
    jmp b13
  !b13:
  //SEG439 get_plane::@9
  //SEG440 [245] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    bne !b14+
    jmp b14
  !b14:
  //SEG441 get_plane::@10
  //SEG442 [246] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b3
  //SEG443 get_plane::@11
  //SEG444 [247] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq b4
  //SEG445 get_plane::@12
  //SEG446 [248] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq b5
  //SEG447 get_plane::@13
  //SEG448 [249] if((byte) get_plane::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq b6
  //SEG449 get_plane::@14
  //SEG450 [250] if((byte) get_plane::idx#10!=(byte/signed byte/word/signed word/dword/signed dword) $d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne b2
  //SEG451 [251] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  //SEG452 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_FULL#0 [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta return
    lda #>PLANE_FULL
    sta return+1
    lda #<PLANE_FULL>>$10
    sta return+2
    lda #>PLANE_FULL>>$10
    sta return+3
    rts
  //SEG453 [251] phi from get_plane get_plane::@1 to get_plane::@return [phi:get_plane/get_plane::@1->get_plane::@return]
  b2:
  //SEG454 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN0#0 [phi:get_plane/get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN0
    sta return
    lda #>$ffffffff&VIC_SCREEN0
    sta return+1
    lda #<$ffffffff&VIC_SCREEN0>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN0>>$10
    sta return+3
    rts
  //SEG455 [251] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  b3:
  //SEG456 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_HORISONTAL2#0 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta return
    lda #>PLANE_HORISONTAL2
    sta return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta return+3
    rts
  //SEG457 [251] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  b4:
  //SEG458 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_VERTICAL2#0 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta return
    lda #>PLANE_VERTICAL2
    sta return+1
    lda #<PLANE_VERTICAL2>>$10
    sta return+2
    lda #>PLANE_VERTICAL2>>$10
    sta return+3
    rts
  //SEG459 [251] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  b5:
  //SEG460 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_CHARSET8#0 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta return
    lda #>PLANE_CHARSET8
    sta return+1
    lda #<PLANE_CHARSET8>>$10
    sta return+2
    lda #>PLANE_CHARSET8>>$10
    sta return+3
    rts
  //SEG461 [251] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  b6:
  //SEG462 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_BLANK#0 [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta return
    lda #>PLANE_BLANK
    sta return+1
    lda #<PLANE_BLANK>>$10
    sta return+2
    lda #>PLANE_BLANK>>$10
    sta return+3
    rts
  //SEG463 [251] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  b7:
  //SEG464 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN1#0 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN1
    sta return
    lda #>$ffffffff&VIC_SCREEN1
    sta return+1
    lda #<$ffffffff&VIC_SCREEN1>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN1>>$10
    sta return+3
    rts
  //SEG465 [251] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  b8:
  //SEG466 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN2#0 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN2
    sta return
    lda #>$ffffffff&VIC_SCREEN2
    sta return+1
    lda #<$ffffffff&VIC_SCREEN2>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN2>>$10
    sta return+3
    rts
  //SEG467 [251] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  b9:
  //SEG468 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_SCREEN3#0 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_SCREEN3
    sta return
    lda #>$ffffffff&VIC_SCREEN3
    sta return+1
    lda #<$ffffffff&VIC_SCREEN3>>$10
    sta return+2
    lda #>$ffffffff&VIC_SCREEN3>>$10
    sta return+3
    rts
  //SEG469 [251] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  b10:
  //SEG470 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_BITMAP#0 [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_BITMAP
    sta return
    lda #>$ffffffff&VIC_BITMAP
    sta return+1
    lda #<$ffffffff&VIC_BITMAP>>$10
    sta return+2
    lda #>$ffffffff&VIC_BITMAP>>$10
    sta return+3
    rts
  //SEG471 [251] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  b11:
  //SEG472 [251] phi (dword) get_plane::return#14 = ((dword))(const byte*) VIC_CHARSET_ROM#0 [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<$ffffffff&VIC_CHARSET_ROM
    sta return
    lda #>$ffffffff&VIC_CHARSET_ROM
    sta return+1
    lda #<$ffffffff&VIC_CHARSET_ROM>>$10
    sta return+2
    lda #>$ffffffff&VIC_CHARSET_ROM>>$10
    sta return+3
    rts
  //SEG473 [251] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  b12:
  //SEG474 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_8BPP_CHUNKY#0 [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta return
    lda #>PLANE_8BPP_CHUNKY
    sta return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta return+3
    rts
  //SEG475 [251] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  b13:
  //SEG476 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_HORISONTAL#0 [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta return
    lda #>PLANE_HORISONTAL
    sta return+1
    lda #<PLANE_HORISONTAL>>$10
    sta return+2
    lda #>PLANE_HORISONTAL>>$10
    sta return+3
    rts
  //SEG477 [251] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  b14:
  //SEG478 [251] phi (dword) get_plane::return#14 = ((dword))(const dword) PLANE_VERTICAL#0 [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta return
    lda #>PLANE_VERTICAL
    sta return+1
    lda #<PLANE_VERTICAL>>$10
    sta return+2
    lda #>PLANE_VERTICAL>>$10
    sta return+3
  //SEG479 get_plane::@return
  //SEG480 [252] return 
    rts
  //SEG481 [253] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  //SEG482 get_plane::@1
}
//SEG483 form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = $f
  //SEG484 [255] call print_set_screen 
  //SEG485 [447] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  //SEG486 [447] phi (byte*) print_set_screen::screen#2 = (const byte*) COLS#0 [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta print_set_screen.screen
    lda #>COLS
    sta print_set_screen.screen+1
    jsr print_set_screen
  //SEG487 [256] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  //SEG488 form_mode::@8
  //SEG489 [257] call print_cls 
    jsr print_cls
  //SEG490 [258] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  //SEG491 form_mode::@9
  //SEG492 [259] call print_str_lines 
  //SEG493 [419] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  //SEG494 [419] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_COLS#0 [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta print_str_lines.str
    lda #>FORM_COLS
    sta print_str_lines.str+1
    jsr print_str_lines
  //SEG495 [260] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  //SEG496 form_mode::@10
  //SEG497 [261] call print_set_screen 
  //SEG498 [447] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  //SEG499 [447] phi (byte*) print_set_screen::screen#2 = (const byte*) FORM_SCREEN#0 [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta print_set_screen.screen
    lda #>FORM_SCREEN
    sta print_set_screen.screen+1
    jsr print_set_screen
  //SEG500 [262] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  //SEG501 form_mode::@11
  //SEG502 [263] call print_cls 
    jsr print_cls
  //SEG503 [264] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  //SEG504 form_mode::@12
  //SEG505 [265] call print_str_lines 
  //SEG506 [419] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  //SEG507 [419] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_TEXT#0 [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta print_str_lines.str
    lda #>FORM_TEXT
    sta print_str_lines.str+1
    jsr print_str_lines
  //SEG508 [266] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  //SEG509 form_mode::@13
  //SEG510 [267] call form_set_screen 
  //SEG511 [409] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
    jsr form_set_screen
  //SEG512 [268] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  //SEG513 form_mode::@14
  //SEG514 [269] call form_render_values 
  //SEG515 [330] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
    jsr form_render_values
  //SEG516 form_mode::@15
  //SEG517 [270] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val#0) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
  //SEG518 [271] call render_preset_name 
  //SEG519 [306] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  //SEG520 [306] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
  //SEG521 form_mode::@16
  //SEG522 [272] *((const byte*) DTV_GRAPHICS_VIC_BANK#0) ← ((byte))((dword))(const byte*) FORM_CHARSET#0/(dword/signed dword) $10000 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #($ffffffff&FORM_CHARSET)/$10000
    sta DTV_GRAPHICS_VIC_BANK
  //SEG523 [273] *((const byte*) DTV_COLOR_BANK_LO#0) ← <((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
  //SEG524 [274] *((const byte*) DTV_COLOR_BANK_HI#0) ← >((word))(const dword) DTV_COLOR_BANK_DEFAULT#0/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
  //SEG525 [275] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG526 [276] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) FORM_CHARSET#0/(word/signed word/dword/signed dword) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^FORM_CHARSET/$4000
    sta CIA2_PORT_A
  //SEG527 [277] *((const byte*) DTV_CONTROL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
  //SEG528 [278] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG529 [279] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
  //SEG530 [280] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) FORM_SCREEN#0&(word/signed word/dword/signed dword) $3fff/(byte/signed byte/word/signed word/dword/signed dword) $40|((word))(const byte*) FORM_CHARSET#0&(word/signed word/dword/signed dword) $3fff/(word/signed word/dword/signed dword) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VIC_MEMORY
  //SEG531 [281] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) FORM_SCREEN#0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #<FORM_SCREEN
    sta DTV_PLANEA_START_LO
  //SEG532 [282] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) FORM_SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
  //SEG533 [283] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG534 [284] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  //SEG535 [284] phi (byte) form_mode::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - default
  //SEG536 [284] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  //SEG537 [284] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
  //SEG538 form_mode::@1
  b1:
  //SEG539 [285] *((const byte*) DTV_PALETTE#0 + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT#0 + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
  //SEG540 [286] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG541 [287] if((byte) form_mode::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG542 form_mode::@2
  //SEG543 [288] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
  //SEG544 [289] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
  //SEG545 [290] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta preset_current
  //SEG546 [291] phi from form_mode::@19 form_mode::@2 to form_mode::@3 [phi:form_mode::@19/form_mode::@2->form_mode::@3]
  //SEG547 [291] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2->form_mode::@3#0] -- register_copy 
  //SEG548 [291] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2->form_mode::@3#1] -- register_copy 
  //SEG549 [291] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2->form_mode::@3#2] -- register_copy 
  //SEG550 [291] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2->form_mode::@3#3] -- register_copy 
  // Let the user change values in the form
  //SEG551 [291] phi from form_mode::@6 to form_mode::@3 [phi:form_mode::@6->form_mode::@3]
  //SEG552 [291] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@6->form_mode::@3#0] -- register_copy 
  //SEG553 [291] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@6->form_mode::@3#1] -- register_copy 
  //SEG554 [291] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@6->form_mode::@3#2] -- register_copy 
  //SEG555 form_mode::@3
  //SEG556 form_mode::@4
  b4:
  //SEG557 [292] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b4
  //SEG558 [293] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  //SEG559 form_mode::@5
  //SEG560 [294] call form_control 
    jsr form_control
  //SEG561 [295] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuaa=vbuxx 
    txa
  //SEG562 form_mode::@17
  //SEG563 [296] (byte~) form_mode::$36 ← (byte) form_control::return#0
  //SEG564 [297] if((byte~) form_mode::$36==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
  //SEG565 form_mode::@return
  //SEG566 [298] return 
    rts
  //SEG567 form_mode::@6
  b6:
  //SEG568 [299] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val#0)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp preset_current
    beq b4
  //SEG569 form_mode::@7
  //SEG570 [300] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val#0) -- vbuaa=_deref_pbuc1 
  //SEG571 [301] call apply_preset 
    jsr apply_preset
  //SEG572 form_mode::@18
  //SEG573 [302] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val#0) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta preset_current
  //SEG574 [303] call form_render_values 
  //SEG575 [330] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
    jsr form_render_values
  //SEG576 form_mode::@19
  //SEG577 [304] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val#0) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
  //SEG578 [305] call render_preset_name 
  //SEG579 [306] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  //SEG580 [306] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp b4
}
//SEG581 render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = 3
  //SEG582 [307] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_preset_name::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12
  //SEG583 render_preset_name::@2
  //SEG584 [308] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b4
  //SEG585 render_preset_name::@3
  //SEG586 [309] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b5
  //SEG587 render_preset_name::@4
  //SEG588 [310] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 3) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b6
  //SEG589 render_preset_name::@5
  //SEG590 [311] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq b7
  //SEG591 render_preset_name::@6
  //SEG592 [312] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 5) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq b8
  //SEG593 render_preset_name::@7
  //SEG594 [313] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 6) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq b9
  //SEG595 render_preset_name::@8
  //SEG596 [314] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 7) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq b10
  //SEG597 render_preset_name::@9
  //SEG598 [315] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq b11
  //SEG599 render_preset_name::@10
  //SEG600 [316] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) 9) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b2
  //SEG601 render_preset_name::@11
  //SEG602 [317] if((byte) render_preset_name::idx#10==(byte/signed byte/word/signed word/dword/signed dword) $a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq b3
  //SEG603 [318] phi from render_preset_name::@11 to render_preset_name::@12 [phi:render_preset_name::@11->render_preset_name::@12]
  //SEG604 render_preset_name::@12
  b12:
  //SEG605 [319] phi from render_preset_name render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@1]
  //SEG606 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta name
    lda #>name_1
    sta name+1
    jmp b1
  //SEG607 [319] phi from render_preset_name::@10 to render_preset_name::@1 [phi:render_preset_name::@10->render_preset_name::@1]
  b2:
  //SEG608 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@10->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta name
    lda #>name_10
    sta name+1
    jmp b1
  //SEG609 [319] phi from render_preset_name::@11 to render_preset_name::@1 [phi:render_preset_name::@11->render_preset_name::@1]
  b3:
  //SEG610 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@11->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta name
    lda #>name_11
    sta name+1
    jmp b1
  //SEG611 [319] phi from render_preset_name::@2 to render_preset_name::@1 [phi:render_preset_name::@2->render_preset_name::@1]
  b4:
  //SEG612 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@2->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta name
    lda #>name_2
    sta name+1
    jmp b1
  //SEG613 [319] phi from render_preset_name::@3 to render_preset_name::@1 [phi:render_preset_name::@3->render_preset_name::@1]
  b5:
  //SEG614 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@3->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta name
    lda #>name_3
    sta name+1
    jmp b1
  //SEG615 [319] phi from render_preset_name::@4 to render_preset_name::@1 [phi:render_preset_name::@4->render_preset_name::@1]
  b6:
  //SEG616 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@4->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta name
    lda #>name_4
    sta name+1
    jmp b1
  //SEG617 [319] phi from render_preset_name::@5 to render_preset_name::@1 [phi:render_preset_name::@5->render_preset_name::@1]
  b7:
  //SEG618 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@5->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta name
    lda #>name_5
    sta name+1
    jmp b1
  //SEG619 [319] phi from render_preset_name::@6 to render_preset_name::@1 [phi:render_preset_name::@6->render_preset_name::@1]
  b8:
  //SEG620 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@6->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta name
    lda #>name_6
    sta name+1
    jmp b1
  //SEG621 [319] phi from render_preset_name::@7 to render_preset_name::@1 [phi:render_preset_name::@7->render_preset_name::@1]
  b9:
  //SEG622 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@7->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta name
    lda #>name_7
    sta name+1
    jmp b1
  //SEG623 [319] phi from render_preset_name::@8 to render_preset_name::@1 [phi:render_preset_name::@8->render_preset_name::@1]
  b10:
  //SEG624 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@8->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta name
    lda #>name_8
    sta name+1
    jmp b1
  //SEG625 [319] phi from render_preset_name::@9 to render_preset_name::@1 [phi:render_preset_name::@9->render_preset_name::@1]
  b11:
  //SEG626 [319] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@9->render_preset_name::@1#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta name
    lda #>name_9
    sta name+1
  //SEG627 render_preset_name::@1
  b1:
  //SEG628 [320] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  //SEG629 [321] call print_str_at 
  //SEG630 [323] phi from render_preset_name::@1 to print_str_at [phi:render_preset_name::@1->print_str_at]
    jsr print_str_at
  //SEG631 render_preset_name::@return
  //SEG632 [322] return 
    rts
    name_1: .text "Standard Charset              @"
    name_2: .text "Extended Color Charset        @"
    name_3: .text "Standard Bitmap               @"
    name_4: .text "Multicolor Bitmap             @"
    name_5: .text "Hicolor Charset               @"
    name_6: .text "Hicolor Extended Color Charset@"
    name_7: .text "Twoplane Bitmap               @"
    name_8: .text "Chunky 8bpp                   @"
    name_9: .text "Sixs Fred                     @"
    name_10: .text "Sixs Fred 2                   @"
    name_11: .text "8bpp Pixel Cell               @"
}
//SEG633 print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zeropage(3) str, byte* zeropage(5) at)
print_str_at: {
    .label at = 5
    .label str = 3
  //SEG634 [324] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  //SEG635 [324] phi (byte*) print_str_at::at#2 = (const byte*) FORM_SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta at
    lda #>FORM_SCREEN+$28*2+$a
    sta at+1
  //SEG636 [324] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
  //SEG637 print_str_at::@1
  b1:
  //SEG638 [325] if(*((byte*) print_str_at::str#2)!=(byte) '@') goto print_str_at::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG639 print_str_at::@return
  //SEG640 [326] return 
    rts
  //SEG641 print_str_at::@2
  b2:
  //SEG642 [327] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (at),y
  //SEG643 [328] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc at
    bne !+
    inc at+1
  !:
  //SEG644 [329] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG645 [324] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  //SEG646 [324] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
  //SEG647 [324] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp b1
}
//SEG648 form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    .label field = 3
    .label idx = 2
  //SEG649 [331] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  //SEG650 [331] phi (byte) form_render_values::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG651 [331] phi from form_render_values::@2 to form_render_values::@1 [phi:form_render_values::@2->form_render_values::@1]
  //SEG652 [331] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@2->form_render_values::@1#0] -- register_copy 
  //SEG653 form_render_values::@1
  b1:
  //SEG654 [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2 -- vbuyy=vbuz1 
    ldy idx
  //SEG655 [333] call form_field_ptr 
  //SEG656 [340] phi from form_render_values::@1 to form_field_ptr [phi:form_render_values::@1->form_field_ptr]
  //SEG657 [340] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@1->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
  //SEG658 [334] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0
  //SEG659 form_render_values::@2
  //SEG660 [335] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2
  //SEG661 [336] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_render_values::idx#2)) -- _deref_pbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    ldx idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
  //SEG662 [337] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuz1=_inc_vbuz1 
    inc idx
  //SEG663 [338] if((byte) form_render_values::idx#1<(const byte) form_fields_cnt#0) goto form_render_values::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda idx
    cmp #form_fields_cnt
    bcc b1
  //SEG664 form_render_values::@return
  //SEG665 [339] return 
    rts
}
//SEG666 form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(Y) field_idx)
form_field_ptr: {
    .label return = 3
    .label _2 = 3
  //SEG667 [341] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y#0 + (byte) form_field_ptr::field_idx#2) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx form_fields_y,y
  //SEG668 [342] (word~) form_field_ptr::$2 ← *((const byte[$19]) form_line_hi#0 + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo#0 + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda form_line_hi,x
    sta _2+1
    lda form_line_lo,x
    sta _2
  //SEG669 [343] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x#0 + (byte) form_field_ptr::field_idx#2) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda form_fields_x,y
  //SEG670 [344] (byte*) form_field_ptr::return#0 ← (byte*)(word~) form_field_ptr::$2 + (byte) form_field_ptr::x#0 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc return
    sta return
    bcc !+
    inc return+1
  !:
  //SEG671 form_field_ptr::@return
  //SEG672 [345] return 
    rts
}
//SEG673 apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = 3
  //SEG674 [346] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto apply_preset::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12
  //SEG675 apply_preset::@2
  //SEG676 [347] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 1) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b4
  //SEG677 apply_preset::@3
  //SEG678 [348] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 2) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b5
  //SEG679 apply_preset::@4
  //SEG680 [349] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 3) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b6
  //SEG681 apply_preset::@5
  //SEG682 [350] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 4) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq b7
  //SEG683 apply_preset::@6
  //SEG684 [351] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 5) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq b8
  //SEG685 apply_preset::@7
  //SEG686 [352] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 6) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq b9
  //SEG687 apply_preset::@8
  //SEG688 [353] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 7) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq b10
  //SEG689 apply_preset::@9
  //SEG690 [354] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 8) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq b11
  //SEG691 apply_preset::@10
  //SEG692 [355] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) 9) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b2
  //SEG693 apply_preset::@11
  //SEG694 [356] if((byte) apply_preset::idx#0==(byte/signed byte/word/signed word/dword/signed dword) $a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq b3
  //SEG695 [357] phi from apply_preset::@11 to apply_preset::@12 [phi:apply_preset::@11->apply_preset::@12]
  //SEG696 apply_preset::@12
  b12:
  //SEG697 [358] phi from apply_preset apply_preset::@12 to apply_preset::@1 [phi:apply_preset/apply_preset::@12->apply_preset::@1]
  //SEG698 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_stdchar#0 [phi:apply_preset/apply_preset::@12->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta preset
    lda #>preset_stdchar
    sta preset+1
    jmp b1
  //SEG699 [358] phi from apply_preset::@10 to apply_preset::@1 [phi:apply_preset::@10->apply_preset::@1]
  b2:
  //SEG700 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_sixsfred2#0 [phi:apply_preset::@10->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta preset
    lda #>preset_sixsfred2
    sta preset+1
    jmp b1
  //SEG701 [358] phi from apply_preset::@11 to apply_preset::@1 [phi:apply_preset::@11->apply_preset::@1]
  b3:
  //SEG702 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_8bpppixelcell#0 [phi:apply_preset::@11->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta preset
    lda #>preset_8bpppixelcell
    sta preset+1
    jmp b1
  //SEG703 [358] phi from apply_preset::@2 to apply_preset::@1 [phi:apply_preset::@2->apply_preset::@1]
  b4:
  //SEG704 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_ecmchar#0 [phi:apply_preset::@2->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta preset
    lda #>preset_ecmchar
    sta preset+1
    jmp b1
  //SEG705 [358] phi from apply_preset::@3 to apply_preset::@1 [phi:apply_preset::@3->apply_preset::@1]
  b5:
  //SEG706 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_stdbm#0 [phi:apply_preset::@3->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta preset
    lda #>preset_stdbm
    sta preset+1
    jmp b1
  //SEG707 [358] phi from apply_preset::@4 to apply_preset::@1 [phi:apply_preset::@4->apply_preset::@1]
  b6:
  //SEG708 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_mcbm#0 [phi:apply_preset::@4->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta preset
    lda #>preset_mcbm
    sta preset+1
    jmp b1
  //SEG709 [358] phi from apply_preset::@5 to apply_preset::@1 [phi:apply_preset::@5->apply_preset::@1]
  b7:
  //SEG710 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_hi_stdchar#0 [phi:apply_preset::@5->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta preset
    lda #>preset_hi_stdchar
    sta preset+1
    jmp b1
  //SEG711 [358] phi from apply_preset::@6 to apply_preset::@1 [phi:apply_preset::@6->apply_preset::@1]
  b8:
  //SEG712 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_hi_ecmchar#0 [phi:apply_preset::@6->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta preset
    lda #>preset_hi_ecmchar
    sta preset+1
    jmp b1
  //SEG713 [358] phi from apply_preset::@7 to apply_preset::@1 [phi:apply_preset::@7->apply_preset::@1]
  b9:
  //SEG714 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_twoplane#0 [phi:apply_preset::@7->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta preset
    lda #>preset_twoplane
    sta preset+1
    jmp b1
  //SEG715 [358] phi from apply_preset::@8 to apply_preset::@1 [phi:apply_preset::@8->apply_preset::@1]
  b10:
  //SEG716 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_chunky#0 [phi:apply_preset::@8->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta preset
    lda #>preset_chunky
    sta preset+1
    jmp b1
  //SEG717 [358] phi from apply_preset::@9 to apply_preset::@1 [phi:apply_preset::@9->apply_preset::@1]
  b11:
  //SEG718 [358] phi (byte*) apply_preset::preset#14 = (const byte[]) preset_sixsfred#0 [phi:apply_preset::@9->apply_preset::@1#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta preset
    lda #>preset_sixsfred
    sta preset+1
  //SEG719 apply_preset::@1
  b1:
  //SEG720 [359] phi from apply_preset::@1 to apply_preset::@13 [phi:apply_preset::@1->apply_preset::@13]
  //SEG721 [359] phi (byte) apply_preset::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:apply_preset::@1->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
  // Copy preset values into the fields
  //SEG722 [359] phi from apply_preset::@13 to apply_preset::@13 [phi:apply_preset::@13->apply_preset::@13]
  //SEG723 [359] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@13->apply_preset::@13#0] -- register_copy 
  //SEG724 apply_preset::@13
  b13:
  //SEG725 [360] *((const byte[]) form_fields_val#0 + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#14 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
  //SEG726 [361] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG727 [362] if((byte) apply_preset::i#1!=(const byte) form_fields_cnt#0) goto apply_preset::@13 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne b13
  //SEG728 apply_preset::@return
  //SEG729 [363] return 
    rts
}
//SEG730 form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label field = 3
  //SEG731 [364] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuyy=vbuz1 
    ldy form_field_idx
  //SEG732 [365] call form_field_ptr 
  //SEG733 [340] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  //SEG734 [340] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
  //SEG735 [366] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
  //SEG736 form_control::@17
  //SEG737 [367] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
  //SEG738 [368] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec form_cursor_count
  //SEG739 [369] if((signed byte) form_cursor_count#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@20 -- vbsz1_ge_0_then_la1 
    lda form_cursor_count
    cmp #0
    bpl b1
  //SEG740 [370] phi from form_control::@17 to form_control::@1 [phi:form_control::@17->form_control::@1]
  //SEG741 [370] phi (signed byte) form_cursor_count#15 = (const signed byte) FORM_CURSOR_BLINK#0 [phi:form_control::@17->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta form_cursor_count
  //SEG742 form_control::@1
  b1:
  //SEG743 [371] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2) goto form_control::@2 -- vbsz1_lt_vbuc1_then_la1 
    lda form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bpl !b2+
    jmp b2
  !b2:
  //SEG744 form_control::@6
  //SEG745 [372] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
  //SEG746 [373] *((byte*) form_control::field#0) ← (byte~) form_control::$13 -- _deref_pbuz1=vbuaa 
    sta (field),y
  //SEG747 [374] phi from form_control::@2 form_control::@6 to form_control::@3 [phi:form_control::@2/form_control::@6->form_control::@3]
  //SEG748 form_control::@3
  b3:
  //SEG749 [375] call keyboard_event_scan 
  //SEG750 [159] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  //SEG751 [159] phi (byte) keyboard_events_size#110 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
  //SEG752 [376] phi from form_control::@3 to form_control::@18 [phi:form_control::@3->form_control::@18]
  //SEG753 form_control::@18
  //SEG754 [377] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG755 [378] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  //SEG756 form_control::@19
  //SEG757 [379] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
  //SEG758 [380] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN#0) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne b4
  //SEG759 form_control::@7
  //SEG760 [381] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f -- vbuaa=_deref_pbuz1_band_vbuc1 
    lda #$7f
    ldy #0
    and (field),y
  //SEG761 [382] *((byte*) form_control::field#0) ← (byte~) form_control::$15 -- _deref_pbuz1=vbuaa 
    // Unblink the cursor
    sta (field),y
  //SEG762 [383] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
  //SEG763 [384] if((byte~) form_control::$16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@12 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b12
  //SEG764 form_control::@8
  //SEG765 [385] (byte) form_field_idx#44 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec form_field_idx
  //SEG766 [386] if((byte) form_field_idx#44!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@21 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp form_field_idx
    bne b13
  //SEG767 [387] phi from form_control::@8 to form_control::@13 [phi:form_control::@8->form_control::@13]
  //SEG768 [387] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:form_control::@8->form_control::@13#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta form_field_idx
  //SEG769 form_control::@13
  b13:
  //SEG770 [388] phi from form_control::@13 to form_control::@return [phi:form_control::@13->form_control::@return]
  //SEG771 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@13->form_control::@return#0] -- register_copy 
  //SEG772 [388] phi (signed byte) form_cursor_count#16 = (const signed byte) FORM_CURSOR_BLINK#0/(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:form_control::@13->form_control::@return#1] -- vbsz1=vbuc1 
    lda #FORM_CURSOR_BLINK/2
    sta form_cursor_count
  //SEG773 [388] phi (byte) form_control::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@13->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG774 form_control::@return
  //SEG775 [389] return 
    rts
  //SEG776 [390] phi from form_control::@8 to form_control::@21 [phi:form_control::@8->form_control::@21]
  //SEG777 form_control::@21
  //SEG778 [387] phi from form_control::@21 form_control::@22 to form_control::@13 [phi:form_control::@21/form_control::@22->form_control::@13]
  //SEG779 [387] phi (byte) form_field_idx#31 = (byte) form_field_idx#44 [phi:form_control::@21/form_control::@22->form_control::@13#0] -- register_copy 
  //SEG780 form_control::@12
  b12:
  //SEG781 [391] (byte) form_field_idx#45 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc form_field_idx
  //SEG782 [392] if((byte) form_field_idx#45!=(const byte) form_fields_cnt#0) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp form_field_idx
    bne b13
  //SEG783 [387] phi from form_control::@12 to form_control::@13 [phi:form_control::@12->form_control::@13]
  //SEG784 [387] phi (byte) form_field_idx#31 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@12->form_control::@13#0] -- vbuz1=vbuc1 
    lda #0
    sta form_field_idx
    jmp b13
  //SEG785 [393] phi from form_control::@12 to form_control::@22 [phi:form_control::@12->form_control::@22]
  //SEG786 form_control::@22
  //SEG787 form_control::@4
  b4:
  //SEG788 [394] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT#0) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne b5
  //SEG789 form_control::@9
  //SEG790 [395] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT#0 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
  //SEG791 [396] if((byte~) form_control::$24==(byte/signed byte/word/signed word/dword/signed dword) 0) goto form_control::@14 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b14
  //SEG792 form_control::@10
  //SEG793 [397] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx form_field_idx
    dec form_fields_val,x
  //SEG794 [398] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)!=(byte/word/signed word/dword/signed dword) $ff) goto form_control::@15 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy form_field_idx
    cmp form_fields_val,y
    bne b15
  //SEG795 form_control::@11
  //SEG796 [399] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    lda form_fields_max,y
    sta form_fields_val,y
  //SEG797 form_control::@15
  b15:
  //SEG798 [400] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab#0 + *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)) -- _deref_pbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    // Render field value
    ldx form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy #0
    sta (field),y
  //SEG799 [388] phi from form_control::@15 form_control::@23 to form_control::@return [phi:form_control::@15/form_control::@23->form_control::@return]
  b6:
  //SEG800 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@15/form_control::@23->form_control::@return#0] -- register_copy 
  //SEG801 [388] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@15/form_control::@23->form_control::@return#1] -- register_copy 
  //SEG802 [388] phi (byte) form_control::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_control::@15/form_control::@23->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    rts
  //SEG803 form_control::@14
  b14:
  //SEG804 [401] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx form_field_idx
    inc form_fields_val,x
  //SEG805 [402] if(*((const byte[]) form_fields_val#0 + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max#0 + (byte) form_field_idx#28)) goto form_control::@15 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy form_field_idx
    lda form_fields_val,y
    cmp form_fields_max,y
    bcc b15
    beq b15
  //SEG806 form_control::@16
  //SEG807 [403] *((const byte[]) form_fields_val#0 + (byte) form_field_idx#28) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    sta form_fields_val,y
    jmp b15
  //SEG808 form_control::@5
  b5:
  //SEG809 [404] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE#0) goto form_control::@23 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b6
  //SEG810 [388] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  //SEG811 [388] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
  //SEG812 [388] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
  //SEG813 [388] phi (byte) form_control::return#2 = (byte/word/signed word/dword/signed dword) $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    rts
  //SEG814 [405] phi from form_control::@5 to form_control::@23 [phi:form_control::@5->form_control::@23]
  //SEG815 form_control::@23
  //SEG816 form_control::@2
  b2:
  //SEG817 [406] (byte/word/dword~) form_control::$14 ← *((byte*) form_control::field#0) | (byte/word/signed word/dword/signed dword) $80 -- vbuaa=_deref_pbuz1_bor_vbuc1 
    lda #$80
    ldy #0
    ora (field),y
  //SEG818 [407] *((byte*) form_control::field#0) ← (byte/word/dword~) form_control::$14 -- _deref_pbuz1=vbuaa 
    sta (field),y
    jmp b3
  //SEG819 [408] phi from form_control::@17 to form_control::@20 [phi:form_control::@17->form_control::@20]
  //SEG820 form_control::@20
  //SEG821 [370] phi from form_control::@20 to form_control::@1 [phi:form_control::@20->form_control::@1]
  //SEG822 [370] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@20->form_control::@1#0] -- register_copy 
}
//SEG823 form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = 3
  //SEG824 [410] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  //SEG825 [410] phi (byte) form_set_screen::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG826 [410] phi (byte*) form_set_screen::line#2 = (const byte*) FORM_SCREEN#0 [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta line
    lda #>FORM_SCREEN
    sta line+1
  //SEG827 [410] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  //SEG828 [410] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
  //SEG829 [410] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
  //SEG830 form_set_screen::@1
  b1:
  //SEG831 [411] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda line
  //SEG832 [412] *((const byte[$19]) form_line_lo#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
  //SEG833 [413] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda line+1
  //SEG834 [414] *((const byte[$19]) form_line_hi#0 + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
  //SEG835 [415] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc line
    sta line
    bcc !+
    inc line+1
  !:
  //SEG836 [416] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG837 [417] if((byte) form_set_screen::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne b1
  //SEG838 form_set_screen::@return
  //SEG839 [418] return 
    rts
}
//SEG840 print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage(3) str)
print_str_lines: {
    .label str = 3
  //SEG841 [420] (byte*~) print_char_cursor#77 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda print_set_screen.screen
    sta print_char_cursor
    lda print_set_screen.screen+1
    sta print_char_cursor+1
  //SEG842 [421] phi from print_str_lines print_str_lines::@5 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1]
  //SEG843 [421] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#0] -- register_copy 
  //SEG844 [421] phi (byte*) print_char_cursor#22 = (byte*~) print_char_cursor#77 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#1] -- register_copy 
  //SEG845 [421] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@5->print_str_lines::@1#2] -- register_copy 
  //SEG846 print_str_lines::@1
  b1:
  //SEG847 [422] if(*((byte*) print_str_lines::str#3)!=(byte) '@') goto print_str_lines::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG848 print_str_lines::@return
  //SEG849 [423] return 
    rts
  //SEG850 [424] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  //SEG851 [424] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#22 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
  //SEG852 [424] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
  //SEG853 print_str_lines::@2
  b2:
  //SEG854 [425] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
  //SEG855 [426] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG856 [427] if((byte) print_str_lines::ch#0==(byte) '@') goto print_str_lines::@3 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'@'
    beq b3
  //SEG857 print_str_lines::@4
  //SEG858 [428] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG859 [429] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG860 [430] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  //SEG861 [430] phi (byte*) print_char_cursor#38 = (byte*) print_char_cursor#20 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
  //SEG862 print_str_lines::@3
  b3:
  //SEG863 [431] if((byte) print_str_lines::ch#0!=(byte) '@') goto print_str_lines::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #'@'
    bne b2
  //SEG864 [432] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  //SEG865 print_str_lines::@5
  //SEG866 [433] call print_ln 
  //SEG867 [435] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
    jsr print_ln
  //SEG868 [434] (byte*~) print_char_cursor#78 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
    jmp b1
}
//SEG869 print_ln
// Print a newline
print_ln: {
  //SEG870 [436] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG871 [436] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG872 print_ln::@1
  b1:
  //SEG873 [437] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG874 [438] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG875 print_ln::@return
  //SEG876 [439] return 
    rts
}
//SEG877 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label _0 = 5
    .label sc = 3
  //SEG878 [440] (byte*) print_cls::sc#0 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda print_set_screen.screen
    sta sc
    lda print_set_screen.screen+1
    sta sc+1
  //SEG879 [441] phi from print_cls print_cls::@1 to print_cls::@1 [phi:print_cls/print_cls::@1->print_cls::@1]
  //SEG880 [441] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#0 [phi:print_cls/print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG881 print_cls::@1
  b1:
  //SEG882 [442] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG883 [443] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG884 [444] (byte*~) print_cls::$0 ← (byte*) print_set_screen::screen#2 + (word/signed word/dword/signed dword) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda print_set_screen.screen
    clc
    adc #<$3e8
    sta _0
    lda print_set_screen.screen+1
    adc #>$3e8
    sta _0+1
  //SEG885 [445] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda sc+1
    cmp _0+1
    bne b1
    lda sc
    cmp _0
    bne b1
  //SEG886 print_cls::@return
  //SEG887 [446] return 
    rts
}
//SEG888 print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zeropage($10) screen)
print_set_screen: {
    .label screen = $10
  //SEG889 print_set_screen::@return
  //SEG890 [448] return 
    rts
}
//SEG891 gfx_init
// Initialize the different graphics in the memory
gfx_init: {
  //SEG892 [450] call gfx_init_screen0 
  //SEG893 [848] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
    jsr gfx_init_screen0
  //SEG894 [451] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  //SEG895 gfx_init::@1
  //SEG896 [452] call gfx_init_screen1 
  //SEG897 [836] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
    jsr gfx_init_screen1
  //SEG898 [453] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  //SEG899 gfx_init::@2
  //SEG900 [454] call gfx_init_screen2 
  //SEG901 [821] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
    jsr gfx_init_screen2
  //SEG902 [455] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  //SEG903 gfx_init::@3
  //SEG904 [456] call gfx_init_screen3 
  //SEG905 [807] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
    jsr gfx_init_screen3
  //SEG906 [457] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  //SEG907 gfx_init::@4
  //SEG908 [458] call gfx_init_screen4 
  //SEG909 [797] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
    jsr gfx_init_screen4
  //SEG910 [459] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  //SEG911 gfx_init::@5
  //SEG912 [460] call gfx_init_charset 
    jsr gfx_init_charset
  //SEG913 [461] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  //SEG914 gfx_init::@6
  //SEG915 [462] call gfx_init_vic_bitmap 
  //SEG916 [606] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
    jsr gfx_init_vic_bitmap
  //SEG917 [463] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  //SEG918 gfx_init::@7
  //SEG919 [464] call gfx_init_plane_8bppchunky 
  //SEG920 [586] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
    jsr gfx_init_plane_8bppchunky
  //SEG921 [465] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  //SEG922 gfx_init::@8
  //SEG923 [466] call gfx_init_plane_charset8 
  //SEG924 [561] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
    jsr gfx_init_plane_charset8
  //SEG925 [467] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  //SEG926 gfx_init::@9
  //SEG927 [468] call gfx_init_plane_horisontal 
  //SEG928 [543] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
    jsr gfx_init_plane_horisontal
  //SEG929 [469] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  //SEG930 gfx_init::@10
  //SEG931 [470] call gfx_init_plane_vertical 
  //SEG932 [530] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
    jsr gfx_init_plane_vertical
  //SEG933 [471] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  //SEG934 gfx_init::@11
  //SEG935 [472] call gfx_init_plane_horisontal2 
  //SEG936 [515] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
    jsr gfx_init_plane_horisontal2
  //SEG937 [473] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  //SEG938 gfx_init::@12
  //SEG939 [474] call gfx_init_plane_vertical2 
  //SEG940 [512] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
    jsr gfx_init_plane_vertical2
  //SEG941 [475] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  //SEG942 gfx_init::@13
  //SEG943 [476] call gfx_init_plane_blank 
  //SEG944 [509] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
    jsr gfx_init_plane_blank
  //SEG945 [477] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  //SEG946 gfx_init::@14
  //SEG947 [478] call gfx_init_plane_full 
  //SEG948 [480] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
    jsr gfx_init_plane_full
  //SEG949 gfx_init::@return
  //SEG950 [479] return 
    rts
}
//SEG951 gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
  //SEG952 [481] call gfx_init_plane_fill 
  //SEG953 [483] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  //SEG954 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/word/signed word/dword/signed dword) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta gfx_init_plane_fill.fill
  //SEG955 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_FULL#0 [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
  //SEG956 gfx_init_plane_full::@return
  //SEG957 [482] return 
    rts
}
//SEG958 gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zeropage(9) plane_addr, byte zeropage(2) fill)
gfx_init_plane_fill: {
    .label _0 = $13
    .label _1 = 3
    .label _4 = 3
    .label _5 = 3
    .label _6 = 3
    .label gfxb = 3
    .label by = 7
    .label plane_addr = 9
    .label fill = 2
  //SEG959 [484] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte/signed byte/word/signed word/dword/signed dword) 2 -- vduz1=vduz2_rol_2 
    lda plane_addr
    sta _0
    lda plane_addr+1
    sta _0+1
    lda plane_addr+2
    sta _0+2
    lda plane_addr+3
    sta _0+3
    asl _0
    rol _0+1
    rol _0+2
    rol _0+3
    asl _0
    rol _0+1
    rol _0+2
    rol _0+3
  //SEG960 [485] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda _0+2
    sta _1
    lda _0+3
    sta _1+1
  //SEG961 [486] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuxx=_lo_vwuz1 
    lda _1
    tax
  //SEG962 [487] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuaa=vbuxx 
    txa
  //SEG963 [488] call dtvSetCpuBankSegment1 
  //SEG964 [505] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  //SEG965 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
  //SEG966 gfx_init_plane_fill::@5
  //SEG967 [489] (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuxx=_inc_vbuxx 
    inx
  //SEG968 [490] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda plane_addr
    sta _4
    lda plane_addr+1
    sta _4+1
  //SEG969 [491] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word/signed word/dword/signed dword) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda _5
    and #<$3fff
    sta _5
    lda _5+1
    and #>$3fff
    sta _5+1
  //SEG970 [492] (word/signed dword/dword~) gfx_init_plane_fill::$6 ← (word/signed word/dword/signed dword) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda _6
    adc #<$4000
    sta _6
    lda _6+1
    adc #>$4000
    sta _6+1
  //SEG971 [493] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word/signed dword/dword~) gfx_init_plane_fill::$6
  //SEG972 [494] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  //SEG973 [494] phi (byte) gfx_init_plane_fill::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG974 [494] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*~) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
  //SEG975 [494] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  //SEG976 [494] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
  //SEG977 [494] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
  //SEG978 gfx_init_plane_fill::@1
  b1:
  //SEG979 [495] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  //SEG980 [495] phi (byte) gfx_init_plane_fill::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG981 [495] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
  //SEG982 [495] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  //SEG983 [495] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
  //SEG984 [495] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
  //SEG985 gfx_init_plane_fill::@2
  b2:
  //SEG986 [496] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda fill
    ldy #0
    sta (gfxb),y
  //SEG987 [497] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG988 [498] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG989 [499] if((byte) gfx_init_plane_fill::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG990 gfx_init_plane_fill::@3
  //SEG991 [500] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG992 [501] if((byte) gfx_init_plane_fill::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp by
    bne b1
  //SEG993 [502] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  //SEG994 gfx_init_plane_fill::@4
  //SEG995 [503] call dtvSetCpuBankSegment1 
  //SEG996 [505] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  //SEG997 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG998 gfx_init_plane_fill::@return
  //SEG999 [504] return 
    rts
}
//SEG1000 dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
  //SEG1001 [506] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG1002 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
  //SEG1003 dtvSetCpuBankSegment1::@return
  //SEG1004 [508] return 
    rts
}
//SEG1005 gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
  //SEG1006 [510] call gfx_init_plane_fill 
  //SEG1007 [483] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  //SEG1008 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta gfx_init_plane_fill.fill
  //SEG1009 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_BLANK#0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
  //SEG1010 gfx_init_plane_blank::@return
  //SEG1011 [511] return 
    rts
}
//SEG1012 gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
  //SEG1013 [513] call gfx_init_plane_fill 
  //SEG1014 [483] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  //SEG1015 [483] phi (byte) gfx_init_plane_fill::fill#6 = (byte/signed byte/word/signed word/dword/signed dword) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta gfx_init_plane_fill.fill
  //SEG1016 [483] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_VERTICAL2#0 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
  //SEG1017 gfx_init_plane_vertical2::@return
  //SEG1018 [514] return 
    rts
}
//SEG1019 gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = 3
    .label ay = 2
  //SEG1020 [516] call dtvSetCpuBankSegment1 
  //SEG1021 [505] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  //SEG1022 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1023 [517] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  //SEG1024 [517] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL2#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_HORISONTAL2&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_HORISONTAL2&$3fff)
    sta gfxa+1
  //SEG1025 [517] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG1026 [517] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  //SEG1027 [517] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
  //SEG1028 [517] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
  //SEG1029 gfx_init_plane_horisontal2::@1
  b1:
  //SEG1030 [518] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  //SEG1031 [518] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1032 [518] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
  //SEG1033 [518] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  //SEG1034 [518] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
  //SEG1035 [518] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
  //SEG1036 gfx_init_plane_horisontal2::@2
  b2:
  //SEG1037 [519] (byte~) gfx_init_plane_horisontal2::$8 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_ror_1 
    lda ay
    lsr
  //SEG1038 [520] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$8 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
  //SEG1039 [521] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask#0 + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
  //SEG1040 [522] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1041 [523] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1042 [524] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1043 gfx_init_plane_horisontal2::@3
  //SEG1044 [525] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG1045 [526] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp ay
    bne b1
  //SEG1046 [527] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  //SEG1047 gfx_init_plane_horisontal2::@4
  //SEG1048 [528] call dtvSetCpuBankSegment1 
  //SEG1049 [505] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  //SEG1050 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1051 gfx_init_plane_horisontal2::@return
  //SEG1052 [529] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
//SEG1053 gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = 3
    .label by = 2
  //SEG1054 [531] call dtvSetCpuBankSegment1 
  //SEG1055 [505] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  //SEG1056 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1057 [532] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  //SEG1058 [532] phi (byte) gfx_init_plane_vertical::by#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta by
  //SEG1059 [532] phi (byte*) gfx_init_plane_vertical::gfxb#3 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_VERTICAL#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta gfxb+1
  //SEG1060 [532] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  //SEG1061 [532] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
  //SEG1062 [532] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
  //SEG1063 gfx_init_plane_vertical::@1
  b1:
  //SEG1064 [533] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  //SEG1065 [533] phi (byte) gfx_init_plane_vertical::bx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1066 [533] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
  //SEG1067 [533] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  //SEG1068 [533] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
  //SEG1069 [533] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
  //SEG1070 gfx_init_plane_vertical::@2
  b2:
  //SEG1071 [534] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte/signed byte/word/signed word/dword/signed dword) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
  //SEG1072 [535] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG1073 [536] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1074 [537] if((byte) gfx_init_plane_vertical::bx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1075 gfx_init_plane_vertical::@3
  //SEG1076 [538] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc by
  //SEG1077 [539] if((byte) gfx_init_plane_vertical::by#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp by
    bne b1
  //SEG1078 [540] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  //SEG1079 gfx_init_plane_vertical::@4
  //SEG1080 [541] call dtvSetCpuBankSegment1 
  //SEG1081 [505] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  //SEG1082 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1083 gfx_init_plane_vertical::@return
  //SEG1084 [542] return 
    rts
}
//SEG1085 gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = 3
    .label ay = 2
  //SEG1086 [544] call dtvSetCpuBankSegment1 
  //SEG1087 [505] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  //SEG1088 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1089 [545] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  //SEG1090 [545] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_HORISONTAL#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_HORISONTAL&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_HORISONTAL&$3fff)
    sta gfxa+1
  //SEG1091 [545] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta ay
  //SEG1092 [545] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  //SEG1093 [545] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
  //SEG1094 [545] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
  //SEG1095 gfx_init_plane_horisontal::@1
  b1:
  //SEG1096 [546] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  //SEG1097 [546] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1098 [546] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
  //SEG1099 [546] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  //SEG1100 [546] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
  //SEG1101 [546] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
  //SEG1102 gfx_init_plane_horisontal::@2
  b2:
  //SEG1103 [547] (byte~) gfx_init_plane_horisontal::$8 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and ay
  //SEG1104 [548] if((byte~) gfx_init_plane_horisontal::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
  //SEG1105 gfx_init_plane_horisontal::@5
  //SEG1106 [549] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
  //SEG1107 [550] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1108 [551] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  //SEG1109 [551] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
  //SEG1110 gfx_init_plane_horisontal::@4
  b4:
  //SEG1111 [552] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1112 [553] if((byte) gfx_init_plane_horisontal::ax#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1113 gfx_init_plane_horisontal::@6
  //SEG1114 [554] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc ay
  //SEG1115 [555] if((byte) gfx_init_plane_horisontal::ay#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp ay
    bne b1
  //SEG1116 [556] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  //SEG1117 gfx_init_plane_horisontal::@7
  //SEG1118 [557] call dtvSetCpuBankSegment1 
  //SEG1119 [505] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  //SEG1120 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1121 gfx_init_plane_horisontal::@return
  //SEG1122 [558] return 
    rts
  //SEG1123 gfx_init_plane_horisontal::@3
  b3:
  //SEG1124 [559] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
  //SEG1125 [560] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
    jmp b4
}
//SEG1126 gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = 8
    .label chargen = 3
    .label gfxa = 5
    .label col = $d
    .label cr = 7
    .label ch = 2
  //SEG1127 [562] call dtvSetCpuBankSegment1 
  //SEG1128 [505] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  //SEG1129 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG1130 gfx_init_plane_charset8::@9
  //SEG1131 [563] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG1132 [564] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  //SEG1133 [564] phi (byte) gfx_init_plane_charset8::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG1134 [564] phi (byte) gfx_init_plane_charset8::col#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    sta col
  //SEG1135 [564] phi (byte*) gfx_init_plane_charset8::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) $4000+(const dword) PLANE_CHARSET8#0&(word/signed word/dword/signed dword) $3fff [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_CHARSET8&$3fff)
    sta gfxa
    lda #>$4000+(PLANE_CHARSET8&$3fff)
    sta gfxa+1
  //SEG1136 [564] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN#0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
  //SEG1137 [564] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  //SEG1138 [564] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
  //SEG1139 [564] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
  //SEG1140 [564] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
  //SEG1141 [564] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
  //SEG1142 gfx_init_plane_charset8::@1
  b1:
  //SEG1143 [565] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  //SEG1144 [565] phi (byte) gfx_init_plane_charset8::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG1145 [565] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG1146 [565] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG1147 [565] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
  //SEG1148 [565] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  //SEG1149 [565] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
  //SEG1150 [565] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG1151 [565] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG1152 [565] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
  //SEG1153 gfx_init_plane_charset8::@2
  b2:
  //SEG1154 [566] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG1155 [567] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG1156 [568] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  //SEG1157 [568] phi (byte) gfx_init_plane_charset8::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1158 [568] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG1159 [568] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG1160 [568] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
  //SEG1161 [568] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  //SEG1162 [568] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
  //SEG1163 [568] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG1164 [568] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG1165 [568] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
  //SEG1166 gfx_init_plane_charset8::@3
  b3:
  //SEG1167 [569] (byte~) gfx_init_plane_charset8::$8 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG1168 [570] if((byte~) gfx_init_plane_charset8::$8==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG1169 gfx_init_plane_charset8::@5
  //SEG1170 [571] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda col
  //SEG1171 [572] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  //SEG1172 [572] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp b4
  //SEG1173 [572] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b5:
  //SEG1174 [572] phi (byte) gfx_init_plane_charset8::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
  //SEG1175 gfx_init_plane_charset8::@4
  b4:
  //SEG1176 [573] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
  //SEG1177 [574] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG1178 [575] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG1179 [576] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG1180 [577] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1181 [578] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3
  //SEG1182 gfx_init_plane_charset8::@6
  //SEG1183 [579] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG1184 [580] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp cr
    bne b2
  //SEG1185 gfx_init_plane_charset8::@7
  //SEG1186 [581] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG1187 [582] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda ch
    cmp #0
    bne b1
  //SEG1188 gfx_init_plane_charset8::@8
  //SEG1189 [583] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG1190 [584] call dtvSetCpuBankSegment1 
  //SEG1191 [505] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  //SEG1192 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1193 gfx_init_plane_charset8::@return
  //SEG1194 [585] return 
    rts
}
//SEG1195 gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label _9 = $10
    .label gfxb = 5
    .label x = 3
    .label y = 2
  //SEG1196 [587] call dtvSetCpuBankSegment1 
  //SEG1197 [505] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  //SEG1198 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1199 [588] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  //SEG1200 [588] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++((byte))(const dword) PLANE_8BPP_CHUNKY#0/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
  //SEG1201 [588] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1202 [588] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
  //SEG1203 [588] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  //SEG1204 [588] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
  //SEG1205 [588] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
  //SEG1206 [588] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
  //SEG1207 gfx_init_plane_8bppchunky::@1
  b1:
  //SEG1208 [589] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  //SEG1209 [589] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
  //SEG1210 [589] phi (word) gfx_init_plane_8bppchunky::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vbuc1 
    lda #0
    sta x
    sta x+1
  //SEG1211 [589] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
  //SEG1212 [589] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  //SEG1213 [589] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
  //SEG1214 [589] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
  //SEG1215 [589] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
  //SEG1216 gfx_init_plane_8bppchunky::@2
  b2:
  //SEG1217 [590] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word/dword/signed dword) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b3
    lda gfxb
    cmp #<$8000
    bne b3
  //SEG1218 gfx_init_plane_8bppchunky::@4
  //SEG1219 [591] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
  //SEG1220 [592] call dtvSetCpuBankSegment1 
  //SEG1221 [505] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  //SEG1222 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
  //SEG1223 gfx_init_plane_8bppchunky::@7
  //SEG1224 [593] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1225 [594] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  //SEG1226 [594] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
  //SEG1227 [594] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
  //SEG1228 [594] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  //SEG1229 [594] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
  //SEG1230 [594] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
  //SEG1231 gfx_init_plane_8bppchunky::@3
  b3:
  //SEG1232 [595] (word~) gfx_init_plane_8bppchunky::$9 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _9
    lda #0
    adc x+1
    sta _9+1
  //SEG1233 [596] (byte) gfx_init_plane_8bppchunky::c#0 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$9 -- vbuaa=_byte_vwuz1 
    lda _9
  //SEG1234 [597] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG1235 [598] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG1236 [599] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG1237 [600] if((word) gfx_init_plane_8bppchunky::x#1!=(word/signed word/dword/signed dword) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b2
    lda x
    cmp #<$140
    bne b2
  //SEG1238 gfx_init_plane_8bppchunky::@5
  //SEG1239 [601] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1240 [602] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte/word/signed word/dword/signed dword) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp y
    bne b1
  //SEG1241 [603] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  //SEG1242 gfx_init_plane_8bppchunky::@6
  //SEG1243 [604] call dtvSetCpuBankSegment1 
  //SEG1244 [505] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  //SEG1245 [505] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = ((byte))(word/signed word/dword/signed dword) $4000/(word/signed word/dword/signed dword) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG1246 gfx_init_plane_8bppchunky::@return
  //SEG1247 [605] return 
    rts
}
//SEG1248 gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = 2
  //SEG1249 [607] call bitmap_init 
  //SEG1250 [759] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
    jsr bitmap_init
  //SEG1251 [608] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@2 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@2]
  //SEG1252 gfx_init_vic_bitmap::@2
  //SEG1253 [609] call bitmap_clear 
    jsr bitmap_clear
  //SEG1254 [610] phi from gfx_init_vic_bitmap::@2 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@2->gfx_init_vic_bitmap::@1]
  //SEG1255 [610] phi (byte) gfx_init_vic_bitmap::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_vic_bitmap::@2->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG1256 [610] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  //SEG1257 [610] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- register_copy 
  //SEG1258 gfx_init_vic_bitmap::@1
  b1:
  //SEG1259 [611] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy l
    lda lines_x,y
    sta bitmap_line.x0
  //SEG1260 [612] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldx lines_x+1,y
  //SEG1261 [613] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y,y
    sta bitmap_line.y0
  //SEG1262 [614] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y+1,y
    sta bitmap_line.y1
  //SEG1263 [615] call bitmap_line 
    jsr bitmap_line
  //SEG1264 gfx_init_vic_bitmap::@3
  //SEG1265 [616] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG1266 [617] if((byte) gfx_init_vic_bitmap::l#1<(const byte) gfx_init_vic_bitmap::lines_cnt#0) goto gfx_init_vic_bitmap::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda l
    cmp #lines_cnt
    bcc b1
  //SEG1267 gfx_init_vic_bitmap::@return
  //SEG1268 [618] return 
    rts
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
//SEG1269 bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage($d) x0, byte register(X) x1, byte zeropage($f) y0, byte zeropage($12) y1)
bitmap_line: {
    .label xd = 8
    .label x0 = $d
    .label y0 = $f
    .label y1 = $12
  //SEG1270 [619] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuxx_then_la1 
    txa
    cmp x0
    beq !+
    bcs b1
  !:
  //SEG1271 bitmap_line::@2
  //SEG1272 [620] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc x0
    sta xd
  //SEG1273 [621] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b7
  //SEG1274 bitmap_line::@3
  //SEG1275 [622] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    sec
    sbc y1
    tay
  //SEG1276 [623] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b8
  //SEG1277 bitmap_line::@4
  //SEG1278 [624] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxi.y
  //SEG1279 [625] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  //SEG1280 [626] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y1
  //SEG1281 [627] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.yd
  //SEG1282 [628] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1283 [629] call bitmap_line_ydxi 
  //SEG1284 [703] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  //SEG1285 [703] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
  //SEG1286 [703] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
  //SEG1287 [703] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
  //SEG1288 [703] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
  //SEG1289 [703] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
  //SEG1290 bitmap_line::@return
  //SEG1291 [630] return 
    rts
  //SEG1292 bitmap_line::@8
  b8:
  //SEG1293 [631] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyi.x
  //SEG1294 [632] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyi.y
  //SEG1295 [633] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  //SEG1296 [634] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1297 [635] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty bitmap_line_xdyi.yd
  //SEG1298 [636] call bitmap_line_xdyi 
  //SEG1299 [681] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  //SEG1300 [681] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
  //SEG1301 [681] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
  //SEG1302 [681] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
  //SEG1303 [681] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
  //SEG1304 [681] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
  //SEG1305 bitmap_line::@7
  b7:
  //SEG1306 [637] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda y1
    sec
    sbc y0
    tay
  //SEG1307 [638] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b9
  //SEG1308 bitmap_line::@10
  //SEG1309 [639] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxd.y
  //SEG1310 [640] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1311 [641] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y1
  //SEG1312 [642] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.yd
  //SEG1313 [643] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1314 [644] call bitmap_line_ydxd 
  //SEG1315 [733] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  //SEG1316 [733] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
  //SEG1317 [733] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
  //SEG1318 [733] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
  //SEG1319 [733] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
  //SEG1320 [733] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
  //SEG1321 bitmap_line::@9
  b9:
  //SEG1322 [645] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyd.x
  //SEG1323 [646] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_xdyd.y
  //SEG1324 [647] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  //SEG1325 [648] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  //SEG1326 [649] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty bitmap_line_xdyd.yd
  //SEG1327 [650] call bitmap_line_xdyd 
  //SEG1328 [718] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  //SEG1329 [718] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
  //SEG1330 [718] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
  //SEG1331 [718] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
  //SEG1332 [718] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
  //SEG1333 [718] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
  //SEG1334 bitmap_line::@1
  b1:
  //SEG1335 [651] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuxx_minus_vbuz2 
    txa
    sec
    sbc x0
    sta xd
  //SEG1336 [652] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda y0
    cmp y1
    bcc b11
  //SEG1337 bitmap_line::@5
  //SEG1338 [653] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    sec
    sbc y1
    tay
  //SEG1339 [654] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b12
  //SEG1340 bitmap_line::@6
  //SEG1341 [655] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda y1
    sta bitmap_line_ydxd.y
  //SEG1342 [656] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  //SEG1343 [657] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  //SEG1344 [658] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty bitmap_line_ydxd.yd
  //SEG1345 [659] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1346 [660] call bitmap_line_ydxd 
  //SEG1347 [733] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  //SEG1348 [733] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
  //SEG1349 [733] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
  //SEG1350 [733] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
  //SEG1351 [733] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
  //SEG1352 [733] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
  //SEG1353 bitmap_line::@12
  b12:
  //SEG1354 [661] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyd.x
  //SEG1355 [662] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  //SEG1356 [663] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyd.x1
  //SEG1357 [664] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1358 [665] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty bitmap_line_xdyd.yd
  //SEG1359 [666] call bitmap_line_xdyd 
  //SEG1360 [718] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  //SEG1361 [718] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
  //SEG1362 [718] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
  //SEG1363 [718] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
  //SEG1364 [718] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
  //SEG1365 [718] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
  //SEG1366 bitmap_line::@11
  b11:
  //SEG1367 [667] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda y1
    sec
    sbc y0
    tay
  //SEG1368 [668] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy xd
    bcc b13
  //SEG1369 bitmap_line::@14
  //SEG1370 [669] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda y0
    sta bitmap_line_ydxi.y
  //SEG1371 [670] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx x0
  //SEG1372 [671] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  //SEG1373 [672] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty bitmap_line_ydxi.yd
  //SEG1374 [673] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1375 [674] call bitmap_line_ydxi 
  //SEG1376 [703] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  //SEG1377 [703] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
  //SEG1378 [703] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
  //SEG1379 [703] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
  //SEG1380 [703] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
  //SEG1381 [703] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    rts
  //SEG1382 bitmap_line::@13
  b13:
  //SEG1383 [675] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda x0
    sta bitmap_line_xdyi.x
  //SEG1384 [676] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  //SEG1385 [677] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx bitmap_line_xdyi.x1
  //SEG1386 [678] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  //SEG1387 [679] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty bitmap_line_xdyi.yd
  //SEG1388 [680] call bitmap_line_xdyi 
  //SEG1389 [681] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  //SEG1390 [681] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
  //SEG1391 [681] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
  //SEG1392 [681] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
  //SEG1393 [681] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
  //SEG1394 [681] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
}
//SEG1395 bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($e) x, byte zeropage($f) y, byte zeropage($d) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyi: {
    .label x = $e
    .label y = $f
    .label x1 = $d
    .label xd = 8
    .label yd = 7
    .label e = $12
  //SEG1396 [682] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1397 [683] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  //SEG1398 [683] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
  //SEG1399 [683] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
  //SEG1400 [683] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
  //SEG1401 bitmap_line_xdyi::@1
  b1:
  //SEG1402 [684] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1403 [685] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1404 [686] call bitmap_plot 
  //SEG1405 [696] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  //SEG1406 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
  //SEG1407 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1408 bitmap_line_xdyi::@4
  //SEG1409 [687] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1410 [688] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1411 [689] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG1412 bitmap_line_xdyi::@3
  //SEG1413 [690] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1414 [691] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1415 [692] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  //SEG1416 [692] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
  //SEG1417 [692] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
  //SEG1418 bitmap_line_xdyi::@2
  b2:
  //SEG1419 [693] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1420 [694] if((byte) bitmap_line_xdyi::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1
  //SEG1421 bitmap_line_xdyi::@return
  //SEG1422 [695] return 
    rts
}
//SEG1423 bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label _0 = 3
    .label plotter_x = 3
    .label plotter_y = 5
  //SEG1424 [697] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta plotter_x+1
    lda bitmap_plot_xlo,x
    sta plotter_x
  //SEG1425 [698] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta plotter_y+1
    lda bitmap_plot_ylo,y
    sta plotter_y
  //SEG1426 [699] (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda _0
    clc
    adc plotter_y
    sta _0
    lda _0+1
    adc plotter_y+1
    sta _0+1
  //SEG1427 [700] (byte~) bitmap_plot::$1 ← *((byte*)(word~) bitmap_plot::$0) | *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (_0),y
  //SEG1428 [701] *((byte*)(word~) bitmap_plot::$0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    sta (_0),y
  //SEG1429 bitmap_plot::@return
  //SEG1430 [702] return 
    rts
}
//SEG1431 bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($e) y, byte register(X) x, byte zeropage($12) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxi: {
    .label y = $e
    .label y1 = $12
    .label yd = 7
    .label xd = 8
    .label e = $d
  //SEG1432 [704] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1433 [705] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  //SEG1434 [705] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
  //SEG1435 [705] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
  //SEG1436 [705] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
  //SEG1437 bitmap_line_ydxi::@1
  b1:
  //SEG1438 [706] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  //SEG1439 [707] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1440 [708] call bitmap_plot 
  //SEG1441 [696] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  //SEG1442 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
  //SEG1443 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1444 bitmap_line_ydxi::@4
  //SEG1445 [709] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1446 [710] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1447 [711] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2
  //SEG1448 bitmap_line_ydxi::@3
  //SEG1449 [712] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1450 [713] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1451 [714] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  //SEG1452 [714] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
  //SEG1453 [714] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
  //SEG1454 bitmap_line_ydxi::@2
  b2:
  //SEG1455 [715] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1456 [716] if((byte) bitmap_line_ydxi::y#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1
  //SEG1457 bitmap_line_ydxi::@return
  //SEG1458 [717] return 
    rts
}
//SEG1459 bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($e) x, byte zeropage($f) y, byte zeropage($d) x1, byte zeropage(8) xd, byte zeropage(7) yd)
bitmap_line_xdyd: {
    .label x = $e
    .label y = $f
    .label x1 = $d
    .label xd = 8
    .label yd = 7
    .label e = $12
  //SEG1460 [719] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda yd
    lsr
    sta e
  //SEG1461 [720] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  //SEG1462 [720] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
  //SEG1463 [720] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
  //SEG1464 [720] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
  //SEG1465 bitmap_line_xdyd::@1
  b1:
  //SEG1466 [721] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuxx=vbuz1 
    ldx x
  //SEG1467 [722] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy y
  //SEG1468 [723] call bitmap_plot 
  //SEG1469 [696] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  //SEG1470 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
  //SEG1471 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1472 bitmap_line_xdyd::@4
  //SEG1473 [724] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG1474 [725] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc yd
    sta e
  //SEG1475 [726] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda xd
    cmp e
    bcs b2
  //SEG1476 bitmap_line_xdyd::@3
  //SEG1477 [727] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec y
  //SEG1478 [728] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc xd
    sta e
  //SEG1479 [729] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  //SEG1480 [729] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
  //SEG1481 [729] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
  //SEG1482 bitmap_line_xdyd::@2
  b2:
  //SEG1483 [730] (byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_plus_1 
    ldx x1
    inx
  //SEG1484 [731] if((byte) bitmap_line_xdyd::x#2!=(byte/signed word/word/dword/signed dword~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx x
    bne b1
  //SEG1485 bitmap_line_xdyd::@return
  //SEG1486 [732] return 
    rts
}
//SEG1487 bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($e) y, byte register(X) x, byte zeropage($f) y1, byte zeropage(7) yd, byte zeropage(8) xd)
bitmap_line_ydxd: {
    .label y = $e
    .label y1 = $f
    .label yd = 7
    .label xd = 8
    .label e = $d
  //SEG1488 [734] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_ror_1 
    lda xd
    lsr
    sta e
  //SEG1489 [735] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  //SEG1490 [735] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
  //SEG1491 [735] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
  //SEG1492 [735] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
  //SEG1493 bitmap_line_ydxd::@1
  b1:
  //SEG1494 [736] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  //SEG1495 [737] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy y
  //SEG1496 [738] call bitmap_plot 
  //SEG1497 [696] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  //SEG1498 [696] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
  //SEG1499 [696] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG1500 bitmap_line_ydxd::@4
  //SEG1501 [739] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1502 [740] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda e
    clc
    adc xd
    sta e
  //SEG1503 [741] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda yd
    cmp e
    bcs b2
  //SEG1504 bitmap_line_ydxd::@3
  //SEG1505 [742] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
  //SEG1506 [743] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda e
    sec
    sbc yd
    sta e
  //SEG1507 [744] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  //SEG1508 [744] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
  //SEG1509 [744] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
  //SEG1510 bitmap_line_ydxd::@2
  b2:
  //SEG1511 [745] (byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_plus_1 
    lda y1
    clc
    adc #1
  //SEG1512 [746] if((byte) bitmap_line_ydxd::y#3!=(byte/signed word/word/dword/signed dword~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp y
    bne b1
  //SEG1513 bitmap_line_ydxd::@return
  //SEG1514 [747] return 
    rts
}
//SEG1515 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = 3
    .label y = 2
    .label _3 = 3
  //SEG1516 [748] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi#0) w= *((const byte[$100]) bitmap_plot_xlo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta _3
    lda bitmap_plot_xhi
    sta _3+1
  //SEG1517 [749] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  //SEG1518 [750] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  //SEG1519 [750] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG1520 [750] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
  //SEG1521 [750] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  //SEG1522 [750] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG1523 [750] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
  //SEG1524 bitmap_clear::@1
  b1:
  //SEG1525 [751] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  //SEG1526 [751] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1527 [751] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
  //SEG1528 [751] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  //SEG1529 [751] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG1530 [751] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
  //SEG1531 bitmap_clear::@2
  b2:
  //SEG1532 [752] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
  //SEG1533 [753] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG1534 [754] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1535 [755] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2
  //SEG1536 bitmap_clear::@3
  //SEG1537 [756] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG1538 [757] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp y
    bne b1
  //SEG1539 bitmap_clear::@return
  //SEG1540 [758] return 
    rts
}
//SEG1541 bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label _6 = 2
    .label yoffs = 3
  //SEG1542 [760] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  //SEG1543 [760] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
  //SEG1544 [760] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1545 [760] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  //SEG1546 [760] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG1547 [760] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
  //SEG1548 bitmap_init::@1
  b1:
  //SEG1549 [761] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte/word/signed word/dword/signed dword) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
  //SEG1550 [762] *((const byte[$100]) bitmap_plot_xlo#0 + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
  //SEG1551 [763] *((const byte[$100]) bitmap_plot_xhi#0 + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>VIC_BITMAP
    sta bitmap_plot_xhi,x
  //SEG1552 [764] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
  //SEG1553 [765] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
  //SEG1554 [766] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b2
  //SEG1555 [767] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  //SEG1556 [767] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
  //SEG1557 bitmap_init::@2
  b2:
  //SEG1558 [768] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1559 [769] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG1560 [770] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  //SEG1561 [770] phi (byte*) bitmap_init::yoffs#2 = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta yoffs
    sta yoffs+1
  //SEG1562 [770] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    tax
  //SEG1563 [770] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  //SEG1564 [770] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG1565 [770] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
  //SEG1566 bitmap_init::@3
  b3:
  //SEG1567 [771] (byte~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax _6
  //SEG1568 [772] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG1569 [773] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora _6
  //SEG1570 [774] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG1571 [775] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG1572 [776] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG1573 [777] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG1574 [778] if((byte~) bitmap_init::$10!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4
  //SEG1575 bitmap_init::@5
  //SEG1576 [779] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG1577 [780] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  //SEG1578 [780] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
  //SEG1579 bitmap_init::@4
  b4:
  //SEG1580 [781] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1581 [782] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG1582 bitmap_init::@return
  //SEG1583 [783] return 
    rts
  //SEG1584 [784] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  //SEG1585 bitmap_init::@6
  //SEG1586 [767] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  //SEG1587 [767] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
}
//SEG1588 gfx_init_charset
gfx_init_charset: {
    .label charset = 5
    .label chargen = 3
    .label c = 2
  //SEG1589 [785] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
  //SEG1590 [786] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  //SEG1591 [786] phi (byte) gfx_init_charset::c#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG1592 [786] phi (byte*) gfx_init_charset::charset#3 = (const byte*) VIC_CHARSET_ROM#0 [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta charset
    lda #>VIC_CHARSET_ROM
    sta charset+1
  //SEG1593 [786] phi (byte*) gfx_init_charset::chargen#3 = (const byte*) CHARGEN#0 [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
  //SEG1594 [786] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  //SEG1595 [786] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
  //SEG1596 [786] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
  //SEG1597 [786] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
  //SEG1598 gfx_init_charset::@1
  b1:
  //SEG1599 [787] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  //SEG1600 [787] phi (byte) gfx_init_charset::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1601 [787] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
  //SEG1602 [787] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
  //SEG1603 [787] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  //SEG1604 [787] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
  //SEG1605 [787] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
  //SEG1606 [787] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
  //SEG1607 gfx_init_charset::@2
  b2:
  //SEG1608 [788] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta (charset),y
  //SEG1609 [789] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc charset
    bne !+
    inc charset+1
  !:
  //SEG1610 [790] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG1611 [791] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1612 [792] if((byte) gfx_init_charset::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2
  //SEG1613 gfx_init_charset::@3
  //SEG1614 [793] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG1615 [794] if((byte) gfx_init_charset::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b1
  //SEG1616 gfx_init_charset::@4
  //SEG1617 [795] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
  //SEG1618 gfx_init_charset::@return
  //SEG1619 [796] return 
    rts
}
//SEG1620 gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = 3
    .label cy = 2
  //SEG1621 [798] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  //SEG1622 [798] phi (byte) gfx_init_screen4::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1623 [798] phi (byte*) gfx_init_screen4::ch#3 = (const byte*) VIC_SCREEN4#0 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta ch
    lda #>VIC_SCREEN4
    sta ch+1
  //SEG1624 [798] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  //SEG1625 [798] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
  //SEG1626 [798] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
  //SEG1627 gfx_init_screen4::@1
  b1:
  //SEG1628 [799] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  //SEG1629 [799] phi (byte) gfx_init_screen4::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG1630 [799] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
  //SEG1631 [799] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  //SEG1632 [799] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
  //SEG1633 [799] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
  //SEG1634 gfx_init_screen4::@2
  b2:
  //SEG1635 [800] *((byte*) gfx_init_screen4::ch#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (ch),y
  //SEG1636 [801] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1637 [802] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1638 [803] if((byte) gfx_init_screen4::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1639 gfx_init_screen4::@3
  //SEG1640 [804] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1641 [805] if((byte) gfx_init_screen4::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1
  //SEG1642 gfx_init_screen4::@return
  //SEG1643 [806] return 
    rts
}
//SEG1644 gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label _1 = 7
    .label ch = 3
    .label cy = 2
  //SEG1645 [808] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  //SEG1646 [808] phi (byte*) gfx_init_screen3::ch#3 = (const byte*) VIC_SCREEN3#0 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta ch
    lda #>VIC_SCREEN3
    sta ch+1
  //SEG1647 [808] phi (byte) gfx_init_screen3::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1648 [808] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  //SEG1649 [808] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
  //SEG1650 [808] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
  //SEG1651 gfx_init_screen3::@1
  b1:
  //SEG1652 [809] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  //SEG1653 [809] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
  //SEG1654 [809] phi (byte) gfx_init_screen3::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1655 [809] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  //SEG1656 [809] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
  //SEG1657 [809] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
  //SEG1658 gfx_init_screen3::@2
  b2:
  //SEG1659 [810] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
  //SEG1660 [811] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _1
  //SEG1661 [812] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and cy
  //SEG1662 [813] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora _1
  //SEG1663 [814] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1664 [815] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1665 [816] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1666 [817] if((byte) gfx_init_screen3::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1667 gfx_init_screen3::@3
  //SEG1668 [818] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1669 [819] if((byte) gfx_init_screen3::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1
  //SEG1670 gfx_init_screen3::@return
  //SEG1671 [820] return 
    rts
}
//SEG1672 gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = 7
    .label ch = 3
    .label cy = 2
  //SEG1673 [822] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  //SEG1674 [822] phi (byte*) gfx_init_screen2::ch#3 = (const byte*) VIC_SCREEN2#0 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta ch
    lda #>VIC_SCREEN2
    sta ch+1
  //SEG1675 [822] phi (byte) gfx_init_screen2::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1676 [822] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  //SEG1677 [822] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
  //SEG1678 [822] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
  //SEG1679 gfx_init_screen2::@1
  b1:
  //SEG1680 [823] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  //SEG1681 [823] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
  //SEG1682 [823] phi (byte) gfx_init_screen2::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1683 [823] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  //SEG1684 [823] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
  //SEG1685 [823] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
  //SEG1686 gfx_init_screen2::@2
  b2:
  //SEG1687 [824] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1688 [825] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
  //SEG1689 [826] (byte) gfx_init_screen2::col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta col2
  //SEG1690 [827] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
  //SEG1691 [828] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora col2
  //SEG1692 [829] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1693 [830] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1694 [831] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1695 [832] if((byte) gfx_init_screen2::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1696 gfx_init_screen2::@3
  //SEG1697 [833] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1698 [834] if((byte) gfx_init_screen2::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1
  //SEG1699 gfx_init_screen2::@return
  //SEG1700 [835] return 
    rts
}
//SEG1701 gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = 3
    .label cy = 2
  //SEG1702 [837] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  //SEG1703 [837] phi (byte*) gfx_init_screen1::ch#3 = (const byte*) VIC_SCREEN1#0 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta ch
    lda #>VIC_SCREEN1
    sta ch+1
  //SEG1704 [837] phi (byte) gfx_init_screen1::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1705 [837] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  //SEG1706 [837] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
  //SEG1707 [837] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
  //SEG1708 gfx_init_screen1::@1
  b1:
  //SEG1709 [838] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  //SEG1710 [838] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
  //SEG1711 [838] phi (byte) gfx_init_screen1::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1712 [838] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  //SEG1713 [838] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
  //SEG1714 [838] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
  //SEG1715 gfx_init_screen1::@2
  b2:
  //SEG1716 [839] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc cy
  //SEG1717 [840] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
  //SEG1718 [841] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1719 [842] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1720 [843] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1721 [844] if((byte) gfx_init_screen1::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1722 gfx_init_screen1::@3
  //SEG1723 [845] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1724 [846] if((byte) gfx_init_screen1::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1
  //SEG1725 gfx_init_screen1::@return
  //SEG1726 [847] return 
    rts
}
//SEG1727 gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label _1 = 7
    .label ch = 3
    .label cy = 2
  //SEG1728 [849] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  //SEG1729 [849] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) VIC_SCREEN0#0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta ch
    lda #>VIC_SCREEN0
    sta ch+1
  //SEG1730 [849] phi (byte) gfx_init_screen0::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG1731 [849] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  //SEG1732 [849] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
  //SEG1733 [849] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
  //SEG1734 gfx_init_screen0::@1
  b1:
  //SEG1735 [850] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  //SEG1736 [850] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
  //SEG1737 [850] phi (byte) gfx_init_screen0::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG1738 [850] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  //SEG1739 [850] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
  //SEG1740 [850] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
  //SEG1741 gfx_init_screen0::@2
  b2:
  //SEG1742 [851] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG1743 [852] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _1
  //SEG1744 [853] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG1745 [854] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora _1
  //SEG1746 [855] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG1747 [856] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG1748 [857] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG1749 [858] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG1750 gfx_init_screen0::@3
  //SEG1751 [859] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG1752 [860] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp cy
    bne b1
  //SEG1753 gfx_init_screen0::@return
  //SEG1754 [861] return 
    rts
}
//SEG1755 keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
  //SEG1756 [862] *((const byte*) CIA1_PORT_A_DDR#0) ← (byte/word/signed word/dword/signed dword) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1_PORT_A_DDR
  //SEG1757 [863] *((const byte*) CIA1_PORT_B_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1_PORT_B_DDR
  //SEG1758 keyboard_init::@return
  //SEG1759 [864] return 
    rts
}
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @"+"                                        @"+" PRESET 0 Standard Charset              @"+"                                        @"+" CONTROL        PLANE  A     VIC II     @"+" bmm        0   pattern p0   screen s0  @"+" mcm        0   start   00   gfx    g0  @"+" ecm        0   step    00   colors c0  @"+" hicolor    0   modulo  00              @"+" linear     0                COLORS     @"+" color off  0   PLANE  B     palet   0  @"+" chunky     0   pattern p0   bgcol0 00  @"+" border off 0   start   00   bgcol1 00  @"+" overscan   0   step    00   bgcol2 00  @"+"                modulo  00   bgcol3 00  @"+"@"
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@"+"                                        @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @"+" nnnnnnnnnnnn   mmmmmmmmmm              @"+" nnnnnnnnnnnn                jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+" nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"+"@"

