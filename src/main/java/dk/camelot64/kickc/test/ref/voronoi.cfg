@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  [2] call initscreen param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [3] call render param-assignment [ ]
  to:main::@4
main::@4: scope:[main]  from main::@1
  [4] call animate param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [5] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [6] return  [ ]
  to:@return
animate: scope:[animate]  from main::@4
  [7] (byte~) animate::$0 ← * (const byte[]) XPOS#0+(byte) 0 [ animate::$0 ]
  [8] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [9] *((const byte[]) XPOS#0+(byte) 0) ← (byte~) animate::$1 [ ]
  [10] (byte~) animate::$2 ← * (const byte[]) XPOS#0+(byte) 0 [ animate::$2 ]
  [11] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [12] *((const byte[]) XPOS#0+(byte) 0) ← (byte) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [13] (byte~) animate::$5 ← * (const byte[]) YPOS#0+(byte) 0 [ animate::$5 ]
  [14] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ]
  [15] *((const byte[]) YPOS#0+(byte) 0) ← (byte~) animate::$6 [ ]
  [16] (byte~) animate::$7 ← * (const byte[]) YPOS#0+(byte) 0 [ animate::$7 ]
  [17] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [18] *((const byte[]) YPOS#0+(byte) 0) ← (byte) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [19] (byte~) animate::$10 ← * (const byte[]) XPOS#0+(byte) 1 [ animate::$10 ]
  [20] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ]
  [21] *((const byte[]) XPOS#0+(byte) 1) ← (byte~) animate::$11 [ ]
  [22] (byte~) animate::$12 ← * (const byte[]) XPOS#0+(byte) 1 [ animate::$12 ]
  [23] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [24] *((const byte[]) XPOS#0+(byte) 1) ← (byte) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [25] (byte~) animate::$15 ← * (const byte[]) YPOS#0+(byte) 2 [ animate::$15 ]
  [26] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ]
  [27] *((const byte[]) YPOS#0+(byte) 2) ← (byte~) animate::$16 [ ]
  [28] (byte~) animate::$17 ← * (const byte[]) YPOS#0+(byte) 2 [ animate::$17 ]
  [29] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [30] *((const byte[]) YPOS#0+(byte) 2) ← (byte) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [31] (byte~) animate::$20 ← * (const byte[]) YPOS#0+(byte) 3 [ animate::$20 ]
  [32] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ]
  [33] *((const byte[]) YPOS#0+(byte) 3) ← (byte~) animate::$21 [ ]
  [34] (byte~) animate::$22 ← * (const byte[]) YPOS#0+(byte) 3 [ animate::$22 ]
  [35] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [36] *((const byte[]) YPOS#0+(byte) 3) ← (byte) 25 [ ]
  [37] (byte~) animate::$25 ← * (const byte[]) XPOS#0+(byte) 3 [ animate::$25 ]
  [38] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ]
  [39] *((const byte[]) XPOS#0+(byte) 3) ← (byte~) animate::$26 [ ]
  [40] (byte~) animate::$27 ← * (const byte[]) XPOS#0+(byte) 3 [ animate::$27 ]
  [41] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [42] (byte~) animate::$30 ← * (const byte[]) XPOS#0+(byte) 3 [ animate::$30 ]
  [43] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ]
  [44] *((const byte[]) XPOS#0+(byte) 3) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [45] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  [46] phi() [ ]
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [47] (byte*) render::colline#2 ← phi( render/(const byte*) COLORS#0 render::@3/(byte*) render::colline#1 ) [ render::y#2 render::colline#2 ]
  [47] (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 ) [ render::y#2 render::colline#2 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  [48] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 ) [ render::y#2 render::colline#2 render::x#2 ]
  [49] (byte) findcol::x#0 ← (byte) render::x#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 ]
  [50] (byte) findcol::y#0 ← (byte) render::y#2 [ render::y#2 render::colline#2 render::x#2 findcol::x#0 findcol::y#0 ]
  [51] call findcol param-assignment [ render::y#2 render::colline#2 render::x#2 findcol::return#0 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [52] (byte) render::col#0 ← (byte) findcol::return#0 [ render::y#2 render::colline#2 render::x#2 render::col#0 ]
  [53] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::y#2 render::colline#2 render::x#2 ]
  [54] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 ]
  [55] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::y#2 render::colline#2 render::x#1 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [56] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 ]
  [57] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ]
  [58] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [59] return  [ ]
  to:@return
findcol: scope:[findcol]  from render::@2
  [60] phi() [ findcol::x#0 findcol::y#0 ]
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [61] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte) findcol::mincol#2 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 ]
  [61] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 ]
  [61] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte) findcol::i#1 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 ]
  [62] (byte) findcol::xp#0 ← (const byte[]) XPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 ]
  [63] (byte) findcol::yp#0 ← (const byte[]) YPOS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  [64] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [65] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  [66] (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 ) [ findcol::return#0 ]
  [67] return  [ findcol::return#0 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [68] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::xp#0 findcol::yp#0 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [69] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#1 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [70] (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 ]
  [71] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#4 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [72] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$12 ]
  [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#3 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [74] (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 ]
  [75] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#6 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [76] (byte) findcol::mincol#1 ← (const byte[]) COLS#0 *idx (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::diff#6 findcol::mincol#1 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [77] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@21/(byte~) findcol::mindiff#14 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#2 findcol::mindiff#11 ]
  [77] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@21/(byte) findcol::mincol#11 ) [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#2 findcol::mindiff#11 ]
  [78] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  [79] if((byte) findcol::i#1<(const byte) numpoints#0) goto findcol::@19 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [80] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ findcol::x#0 findcol::y#0 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [81] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mincol#11 findcol::mindiff#14 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [82] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#4 findcol::$14 ]
  [83] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [84] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#12 findcol::mindiff#10 findcol::mincol#11 findcol::yp#0 findcol::diff#0 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main
  [85] phi() [ ]
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [86] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN#0 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ]
  [87] *((byte*) initscreen::screen#2) ← (const byte) FILL#0 [ initscreen::screen#2 ]
  [88] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [89] if((byte*) initscreen::screen#1<(const byte*) SCREEN#0+(word) 1000) goto initscreen::@1 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [90] return  [ ]
  to:@return
