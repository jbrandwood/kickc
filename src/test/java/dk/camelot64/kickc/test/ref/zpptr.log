void main() {
    byte* zpptr = $1000;
    for(byte j : 0..10) {
        for(byte i : 0..10) {
            for(byte k : 0..10) {
                byte* zpptr2 = zpptr+i;
                word w = (word)j;
                // Testing byte* = byte* + word;
                zpptr2 = zpptr2 + w;
                *zpptr2 = k;
            }
        }
    }
}
PROGRAM
proc (void()) main()
  (byte*) main::zpptr ← (word/signed word) 4096
  (byte) main::j ← (byte/signed byte/word/signed word) 0
main::@1:
  (byte) main::i ← (byte/signed byte/word/signed word) 0
main::@2:
  (byte) main::k ← (byte/signed byte/word/signed word) 0
main::@3:
  (byte*~) main::$0 ← (byte*) main::zpptr + (byte) main::i
  (byte*) main::zpptr2 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j
  (word) main::w ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2 + (word) main::w
  (byte*) main::zpptr2 ← (byte*~) main::$2
  *((byte*) main::zpptr2) ← (byte) main::k
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$3 ← (byte) main::k != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$5 ← (byte) main::j != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(byte*~) main::$0
(word~) main::$1
(byte*~) main::$2
(boolean~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::j
(byte) main::k
(word) main::w
(byte*) main::zpptr
(byte*) main::zpptr2

Promoting word/signed word to byte* in main::zpptr ← ((byte*)) 4096
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte*) main::zpptr ← ((byte*)) (word/signed word) 4096
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::k ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte*~) main::$0 ← (byte*) main::zpptr + (byte) main::i
  (byte*) main::zpptr2 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j
  (word) main::w ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2 + (word) main::w
  (byte*) main::zpptr2 ← (byte*~) main::$2
  *((byte*) main::zpptr2) ← (byte) main::k
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$3 ← (byte) main::k != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$5 ← (byte) main::j != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::@return
main::@return: scope:[main]  from main::@6
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@6
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte*) main::zpptr ← ((byte*)) (word/signed word) 4096
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::k ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte*~) main::$0 ← (byte*) main::zpptr + (byte) main::i
  (byte*) main::zpptr2 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j
  (word) main::w ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2 + (word) main::w
  (byte*) main::zpptr2 ← (byte*~) main::$2
  *((byte*) main::zpptr2) ← (byte) main::k
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$3 ← (byte) main::k != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$5 ← (byte) main::j != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr ← ((byte*)) (word/signed word) 4096
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::k ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte*~) main::$0 ← (byte*) main::zpptr + (byte) main::i
  (byte*) main::zpptr2 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j
  (word) main::w ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2 + (word) main::w
  (byte*) main::zpptr2 ← (byte*~) main::$2
  *((byte*) main::zpptr2) ← (byte) main::k
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$3 ← (byte) main::k != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$4 ← (byte) main::i != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$5 ← (byte) main::j != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#5 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#4 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#4 main::@3/(byte) main::j#2 )
  (byte) main::i#2 ← phi( main::@2/(byte) main::i#4 main::@3/(byte) main::i#2 )
  (byte*) main::zpptr#1 ← phi( main::@2/(byte*) main::zpptr#2 main::@3/(byte*) main::zpptr#1 )
  (byte*~) main::$0 ← (byte*) main::zpptr#1 + (byte) main::i#2
  (byte*) main::zpptr2#0 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j#2
  (word) main::w#0 ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2#0 + (word) main::w#0
  (byte*) main::zpptr2#1 ← (byte*~) main::$2
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$3 ← (byte) main::k#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) main::zpptr#4 ← phi( main::@3/(byte*) main::zpptr#1 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#2 )
  (byte) main::i#3 ← phi( main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) main::zpptr#5 ← phi( main::@4/(byte*) main::zpptr#4 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#5 )
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$5 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#5 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#4 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#4 main::@3/(byte) main::j#2 )
  (byte) main::i#2 ← phi( main::@2/(byte) main::i#4 main::@3/(byte) main::i#2 )
  (byte*) main::zpptr#1 ← phi( main::@2/(byte*) main::zpptr#2 main::@3/(byte*) main::zpptr#1 )
  (byte*~) main::$0 ← (byte*) main::zpptr#1 + (byte) main::i#2
  (byte*) main::zpptr2#0 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j#2
  (word) main::w#0 ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2#0 + (word) main::w#0
  (byte*) main::zpptr2#1 ← (byte*~) main::$2
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$3 ← (byte) main::k#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) main::zpptr#4 ← phi( main::@3/(byte*) main::zpptr#1 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#2 )
  (byte) main::i#3 ← phi( main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) main::zpptr#5 ← phi( main::@4/(byte*) main::zpptr#4 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#5 )
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$5 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(word~) main::$1
(byte*~) main::$2
(boolean~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(byte) main::j#5
(byte) main::j#6
(byte) main::k
(byte) main::k#0
(byte) main::k#1
(byte) main::k#2
(word) main::w
(word) main::w#0
(byte*) main::zpptr
(byte*) main::zpptr#0
(byte*) main::zpptr#1
(byte*) main::zpptr#2
(byte*) main::zpptr#3
(byte*) main::zpptr#4
(byte*) main::zpptr#5
(byte*) main::zpptr2
(byte*) main::zpptr2#0
(byte*) main::zpptr2#1

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#5 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#4 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#4 main::@3/(byte) main::j#2 )
  (byte) main::i#2 ← phi( main::@2/(byte) main::i#4 main::@3/(byte) main::i#2 )
  (byte*) main::zpptr#1 ← phi( main::@2/(byte*) main::zpptr#2 main::@3/(byte*) main::zpptr#1 )
  (byte*~) main::$0 ← (byte*) main::zpptr#1 + (byte) main::i#2
  (byte*) main::zpptr2#0 ← (byte*~) main::$0
  (word~) main::$1 ← ((word)) (byte) main::j#2
  (word) main::w#0 ← (word~) main::$1
  (byte*~) main::$2 ← (byte*) main::zpptr2#0 + (word) main::w#0
  (byte*) main::zpptr2#1 ← (byte*~) main::$2
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$3 ← (byte) main::k#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) main::zpptr#4 ← phi( main::@3/(byte*) main::zpptr#1 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#2 )
  (byte) main::i#3 ← phi( main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) main::zpptr#5 ← phi( main::@4/(byte*) main::zpptr#4 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#5 )
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$5 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte*) main::zpptr2#0 = (byte*~) main::$0 
Alias (word) main::w#0 = (word~) main::$1 
Alias (byte*) main::zpptr2#1 = (byte*~) main::$2 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte) main::j#2 = (byte) main::j#5 (byte) main::j#3 
Alias (byte*) main::zpptr#1 = (byte*) main::zpptr#4 (byte*) main::zpptr#5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#1 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#1 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#4 main::@3/(byte) main::j#2 )
  (byte) main::i#2 ← phi( main::@2/(byte) main::i#4 main::@3/(byte) main::i#2 )
  (byte*) main::zpptr#1 ← phi( main::@2/(byte*) main::zpptr#2 main::@3/(byte*) main::zpptr#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#1 + (byte) main::i#2
  (word) main::w#0 ← ((word)) (byte) main::j#2
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$3 ← (byte) main::k#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$5 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte*) main::zpptr#1
Self Phi Eliminated (byte) main::i#2
Self Phi Eliminated (byte) main::j#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#1 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#1 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#4 )
  (byte) main::i#2 ← phi( main::@2/(byte) main::i#4 )
  (byte*) main::zpptr#1 ← phi( main::@2/(byte*) main::zpptr#2 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#1 + (byte) main::i#2
  (word) main::w#0 ← ((word)) (byte) main::j#2
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$3 ← (byte) main::k#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$5 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte*) main::zpptr#1 (byte*) main::zpptr#2
Redundant Phi (byte) main::i#2 (byte) main::i#4
Redundant Phi (byte) main::j#2 (byte) main::j#4
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#2 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#4 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#2 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#2 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#4
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$3 ← (byte) main::k#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$3) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  (boolean~) main::$4 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$4) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#4
  (boolean~) main::$5 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 11
  if((boolean~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$3 if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
Simple Condition (boolean~) main::$4 if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
Simple Condition (boolean~) main::$5 if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::zpptr#0 ← ((byte*)) (word/signed word) 4096
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#2 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#4 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#2 )
  (byte) main::k#0 ← (byte/signed byte/word/signed word) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#2 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#4
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#4
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) main::zpptr#0 = ((byte*))4096
Constant (const byte) main::j#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::k#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(const byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(const byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#2 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 main::@4/(byte) main::j#4 )
  (byte) main::i#4 ← phi( main::@1/(const byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 main::@4/(byte*) main::zpptr#2 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(const byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#2 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#4
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#4
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte*) main::zpptr#2
Self Phi Eliminated (byte) main::j#4
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(const byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(const byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#2 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#6 )
  (byte) main::i#4 ← phi( main::@1/(const byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte*) main::zpptr#2 ← phi( main::@1/(byte*) main::zpptr#3 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(const byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#2 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#4
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#4
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte*) main::zpptr#2 (byte*) main::zpptr#3
Redundant Phi (byte) main::j#4 (byte) main::j#6
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(const byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(const byte*) main::zpptr#0 main::@5/(byte*) main::zpptr#3 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::i#4 ← phi( main::@1/(const byte) main::i#0 main::@4/(byte) main::i#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(const byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#3 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#6
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#6
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte*) main::zpptr#3
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(const byte) main::j#0 main::@5/(byte) main::j#1 )
  (byte*) main::zpptr#3 ← phi( main/(const byte*) main::zpptr#0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::i#4 ← phi( main::@1/(const byte) main::i#0 main::@4/(byte) main::i#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(const byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (byte*) main::zpptr#3 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#6
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#6
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte*) main::zpptr#3 (const byte*) main::zpptr#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(const byte) main::j#0 main::@5/(byte) main::j#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::i#4 ← phi( main::@1/(const byte) main::i#0 main::@4/(byte) main::i#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(const byte) main::k#0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#6
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#6
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#4
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#4
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::k#0
Inlining constant with var siblings (const byte) main::k#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::k#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::j#0 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::j#6 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte) main::j#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::i#4 ← phi( main::@1/(byte/signed byte/word/signed word) 0 main::@4/(byte) main::i#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#2 ← phi( main::@2/(byte/signed byte/word/signed word) 0 main::@3/(byte) main::k#1 )
  (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#6
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#6
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#4
(byte) main::j
(byte) main::j#1
(byte) main::j#6
(byte) main::k
(byte) main::k#1
(byte) main::k#2
(word) main::w
(word) main::w#0
(byte*) main::zpptr
(const byte*) main::zpptr#0 = ((byte*))(word/signed word) 4096
(byte*) main::zpptr2
(byte*) main::zpptr2#0
(byte*) main::zpptr2#1

Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@3 main::@4 main::@5 main::@return 
Added new block during phi lifting main::@7(between main::@5 and main::@1)
Added new block during phi lifting main::@8(between main::@4 and main::@2)
Added new block during phi lifting main::@9(between main::@3 and main::@3)
Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@3 main::@4 main::@5 main::@return main::@7 main::@8 main::@9 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::j#6 ← phi( main/(byte/signed byte/word/signed word) 0 main::@7/(byte~) main::j#7 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@8
  (byte) main::i#4 ← phi( main::@1/(byte/signed byte/word/signed word) 0 main::@8/(byte~) main::i#5 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@9
  (byte) main::k#2 ← phi( main::@2/(byte/signed byte/word/signed word) 0 main::@9/(byte~) main::k#3 )
  (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4
  (word) main::w#0 ← ((word)) (byte) main::j#6
  (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0
  *((byte*) main::zpptr2#1) ← (byte) main::k#2
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@9
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::i#1 ← ++ (byte) main::i#4
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@8
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::j#1 ← ++ (byte) main::j#6
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@7
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
main::@7: scope:[main]  from main::@5
  (byte~) main::j#7 ← (byte) main::j#1
  to:main::@1
main::@8: scope:[main]  from main::@4
  (byte~) main::i#5 ← (byte) main::i#1
  to:main::@2
main::@9: scope:[main]  from main::@3
  (byte~) main::k#3 ← (byte) main::k#1
  to:main::@3

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [5] (byte) main::j#6 ← phi( main/(byte/signed byte/word/signed word) 0 main::@7/(byte~) main::j#7 ) [ main::j#6 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@8
  [6] (byte) main::i#4 ← phi( main::@1/(byte/signed byte/word/signed word) 0 main::@8/(byte~) main::i#5 ) [ main::j#6 main::i#4 ]
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@9
  [7] (byte) main::k#2 ← phi( main::@2/(byte/signed byte/word/signed word) 0 main::@9/(byte~) main::k#3 ) [ main::j#6 main::i#4 main::k#2 ]
  [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ]
  [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ]
  [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ]
  [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ]
  [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::j#6 main::i#4 main::k#1 ]
  [13] if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@9 [ main::j#6 main::i#4 main::k#1 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [14] (byte) main::i#1 ← ++ (byte) main::i#4 [ main::j#6 main::i#1 ]
  [15] if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@8 [ main::j#6 main::i#1 ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] (byte) main::j#1 ← ++ (byte) main::j#6 [ main::j#1 ]
  [17] if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@7 [ main::j#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [18] return  [ ]
  to:@return
main::@7: scope:[main]  from main::@5
  [19] (byte~) main::j#7 ← (byte) main::j#1 [ main::j#7 ]
  to:main::@1
main::@8: scope:[main]  from main::@4
  [20] (byte~) main::i#5 ← (byte) main::i#1 [ main::j#6 main::i#5 ]
  to:main::@2
main::@9: scope:[main]  from main::@3
  [21] (byte~) main::k#3 ← (byte) main::k#1 [ main::j#6 main::i#4 main::k#3 ]
  to:main::@3

Created 3 initial phi equivalence classes
Coalesced [19] main::j#7 ← main::j#1
Coalesced [20] main::i#5 ← main::i#1
Coalesced [21] main::k#3 ← main::k#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@3 main::@4 main::@5 main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::j#6 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte) main::j#1 ) [ main::j#6 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::i#4 ← phi( main::@1/(byte/signed byte/word/signed word) 0 main::@4/(byte) main::i#1 ) [ main::j#6 main::i#4 ]
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [7] (byte) main::k#2 ← phi( main::@2/(byte/signed byte/word/signed word) 0 main::@3/(byte) main::k#1 ) [ main::j#6 main::i#4 main::k#2 ]
  [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ]
  [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ]
  [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ]
  [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ]
  [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::j#6 main::i#4 main::k#1 ]
  [13] if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3 [ main::j#6 main::i#4 main::k#1 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [14] (byte) main::i#1 ← ++ (byte) main::i#4 [ main::j#6 main::i#1 ]
  [15] if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2 [ main::j#6 main::i#1 ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] (byte) main::j#1 ← ++ (byte) main::j#6 [ main::j#1 ]
  [17] if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1 [ main::j#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [18] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::j#6 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte) main::j#1 ) [ main::j#6 ] ( main:2 [ main::j#6 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::i#4 ← phi( main::@1/(byte/signed byte/word/signed word) 0 main::@4/(byte) main::i#1 ) [ main::j#6 main::i#4 ] ( main:2 [ main::j#6 main::i#4 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [7] (byte) main::k#2 ← phi( main::@2/(byte/signed byte/word/signed word) 0 main::@3/(byte) main::k#1 ) [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] )
  [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] )
  [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] )
  [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] )
  [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] )
  [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] )
  [13] if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [14] (byte) main::i#1 ← ++ (byte) main::i#4 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] )
  [15] if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] )
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] (byte) main::j#1 ← ++ (byte) main::j#6 [ main::j#1 ] ( main:2 [ main::j#1 ] )
  [17] if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@5
  [18] return  [ ] ( main:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@3 dominated by  @1 @begin main::@1 main::@2 main main::@3 
main::@4 dominated by  @1 @begin main::@1 main::@2 main main::@3 main::@4 
main::@5 dominated by  @1 @begin main::@1 main::@2 main main::@5 main::@3 main::@4 
main::@return dominated by  main::@return @1 @begin main::@1 main::@2 main main::@5 main::@3 main::@4 

Found back edge: Loop head: main::@3 tails: main::@3 blocks: null
Found back edge: Loop head: main::@2 tails: main::@4 blocks: null
Found back edge: Loop head: main::@1 tails: main::@5 blocks: null
Populated: Loop head: main::@3 tails: main::@3 blocks: main::@3 
Populated: Loop head: main::@2 tails: main::@4 blocks: main::@4 main::@3 main::@2 
Populated: Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@3 main::@2 main::@1 
NATURAL LOOPS
Loop head: main::@3 tails: main::@3 blocks: main::@3 
Loop head: main::@2 tails: main::@4 blocks: main::@4 main::@3 main::@2 
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@3 main::@2 main::@1 

Found 0 loops in scope []
Found 3 loops in scope [main]
  Loop head: main::@3 tails: main::@3 blocks: main::@3 
  Loop head: main::@2 tails: main::@4 blocks: main::@4 main::@3 main::@2 
  Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@3 main::@2 main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@3 tails: main::@3 blocks: main::@3  depth: 3
Loop head: main::@2 tails: main::@4 blocks: main::@4 main::@3 main::@2  depth: 2
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@4 main::@3 main::@2 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#4 150.375
(byte) main::j
(byte) main::j#1 16.5
(byte) main::j#6 93.0
(byte) main::k
(byte) main::k#1 1501.5
(byte) main::k#2 600.5999999999999
(word) main::w
(word) main::w#0 2002.0
(byte*) main::zpptr
(byte*) main::zpptr2
(byte*) main::zpptr2#0 1001.0
(byte*) main::zpptr2#1 2002.0

Initial phi equivalence classes
[ main::j#6 main::j#1 ]
[ main::i#4 main::i#1 ]
[ main::k#2 main::k#1 ]
Added variable main::zpptr2#0 to zero page equivalence class [ main::zpptr2#0 ]
Added variable main::w#0 to zero page equivalence class [ main::w#0 ]
Added variable main::zpptr2#1 to zero page equivalence class [ main::zpptr2#1 ]
Complete equivalence classes
[ main::j#6 main::j#1 ]
[ main::i#4 main::i#1 ]
[ main::k#2 main::k#1 ]
[ main::zpptr2#0 ]
[ main::w#0 ]
[ main::zpptr2#1 ]
Allocated zp ZP_BYTE:2 [ main::j#6 main::j#1 ]
Allocated zp ZP_BYTE:3 [ main::i#4 main::i#1 ]
Allocated zp ZP_BYTE:4 [ main::k#2 main::k#1 ]
Allocated zp ZP_WORD:5 [ main::zpptr2#0 ]
Allocated zp ZP_WORD:7 [ main::w#0 ]
Allocated zp ZP_WORD:9 [ main::zpptr2#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const zpptr = $1000
    .label zpptr2 = 5
    .label w = 7
    .label zpptr2_1 = 9
    .label k = 4
    .label i = 3
    .label j = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::j#6 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG12 [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG13 [5] phi (byte) main::j#6 = (byte) main::j#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG16 [6] phi (byte) main::i#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG17 [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  b2_from_b4:
  //SEG18 [6] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp b2
  //SEG19 main::@2
  b2:
  //SEG20 [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG21 [7] phi (byte) main::k#2 = (byte/signed byte/word/signed word) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta k
    jmp b3
  //SEG22 [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG23 [7] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp b3
  //SEG24 main::@3
  b3:
  //SEG25 [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ) -- pbuz1=pbuc1_plus_vbuz2 
    lda #<zpptr
    clc
    adc i
    sta zpptr2
    lda #>zpptr
    adc #0
    sta zpptr2+1
  //SEG26 [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ) -- vwuz1=_word_vbuz2 
    lda j
    sta w
    lda #0
    sta w+1
  //SEG27 [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ) -- pbuz1=pbuz2_plus_vwuz3 
    lda zpptr2_1
    clc
    adc zpptr2
    sta w
    lda zpptr2_1+1
    adc zpptr2+1
    sta w+1
  //SEG28 [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] ) -- _deref_pbuz1=vbuz2 
    ldy #0
    lda k
    sta (zpptr2_1),y
  //SEG29 [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] ) -- vbuz1=_inc_vbuz1 
    inc k
  //SEG30 [13] if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda k
    cmp #$b
    bne b3_from_b3
    jmp b4
  //SEG31 main::@4
  b4:
  //SEG32 [14] (byte) main::i#1 ← ++ (byte) main::i#4 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG33 [15] if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$b
    bne b2_from_b4
    jmp b5
  //SEG34 main::@5
  b5:
  //SEG35 [16] (byte) main::j#1 ← ++ (byte) main::j#6 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG36 [17] if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$b
    bne b1_from_b5
    jmp breturn
  //SEG37 main::@return
  breturn:
  //SEG38 [18] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::j#6 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::i#4 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::k#2 main::k#1 ]
Statement [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ) always clobbers reg byte a 
Statement [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ) always clobbers reg byte a 
Statement [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::j#6 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ main::i#4 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ main::k#2 main::k#1 ]
Statement [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ) always clobbers reg byte a 
Statement [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ) always clobbers reg byte a 
Statement [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ) always clobbers reg byte a 
Statement [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_BYTE:2 [ main::j#6 main::j#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ main::i#4 main::i#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ main::k#2 main::k#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_WORD:5 [ main::zpptr2#0 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_WORD:7 [ main::w#0 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ main::zpptr2#1 ] : zp ZP_WORD:9 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 2,102.1: zp ZP_BYTE:4 [ main::k#2 main::k#1 ] 2,002: zp ZP_WORD:7 [ main::w#0 ] 2,002: zp ZP_WORD:9 [ main::zpptr2#1 ] 1,001: zp ZP_WORD:5 [ main::zpptr2#0 ] 301.88: zp ZP_BYTE:3 [ main::i#4 main::i#1 ] 109.5: zp ZP_BYTE:2 [ main::j#6 main::j#1 ] 
Uplift Scope [] 

Uplifting [main] best 83433 combination reg byte x [ main::k#2 main::k#1 ] zp ZP_WORD:7 [ main::w#0 ] zp ZP_WORD:9 [ main::zpptr2#1 ] zp ZP_WORD:5 [ main::zpptr2#0 ] zp ZP_BYTE:3 [ main::i#4 main::i#1 ] zp ZP_BYTE:2 [ main::j#6 main::j#1 ] 
Uplifting [] best 83433 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::i#4 main::i#1 ]
Uplifting [main] best 83433 combination zp ZP_BYTE:3 [ main::i#4 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::j#6 main::j#1 ]
Uplifting [main] best 83433 combination zp ZP_BYTE:2 [ main::j#6 main::j#1 ] 
Coalescing zero page register [ zp ZP_WORD:5 [ main::zpptr2#0 ] ] with [ zp ZP_WORD:9 [ main::zpptr2#1 ] ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:4 [ main::zpptr2#0 main::zpptr2#1 ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:6 [ main::w#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const zpptr = $1000
    .label zpptr2 = 4
    .label w = 6
    .label i = 3
    .label j = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::j#6 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG12 [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG13 [5] phi (byte) main::j#6 = (byte) main::j#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG16 [6] phi (byte) main::i#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG17 [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  b2_from_b4:
  //SEG18 [6] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp b2
  //SEG19 main::@2
  b2:
  //SEG20 [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG21 [7] phi (byte) main::k#2 = (byte/signed byte/word/signed word) 0 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG22 [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG23 [7] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp b3
  //SEG24 main::@3
  b3:
  //SEG25 [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ) -- pbuz1=pbuc1_plus_vbuz2 
    lda #<zpptr
    clc
    adc i
    sta zpptr2
    lda #>zpptr
    adc #0
    sta zpptr2+1
  //SEG26 [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ) -- vwuz1=_word_vbuz2 
    lda j
    sta w
    lda #0
    sta w+1
  //SEG27 [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ) -- pbuz1=pbuz1_plus_vwuz2 
    lda zpptr2
    clc
    adc w
    sta zpptr2
    lda zpptr2+1
    adc w+1
    sta zpptr2+1
  //SEG28 [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] ) -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (zpptr2),y
  //SEG29 [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG30 [13] if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b3_from_b3
    jmp b4
  //SEG31 main::@4
  b4:
  //SEG32 [14] (byte) main::i#1 ← ++ (byte) main::i#4 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG33 [15] if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$b
    bne b2_from_b4
    jmp b5
  //SEG34 main::@5
  b5:
  //SEG35 [16] (byte) main::j#1 ← ++ (byte) main::j#6 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG36 [17] if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$b
    bne b1_from_b5
    jmp breturn
  //SEG37 main::@return
  breturn:
  //SEG38 [18] return  [ ] ( main:2 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b3_from_b3 with b3
Replacing label b2_from_b4 with b2
Replacing label b1_from_b5 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:3 151.5
(byte) main::i#4 i zp ZP_BYTE:3 150.375
(byte) main::j
(byte) main::j#1 j zp ZP_BYTE:2 16.5
(byte) main::j#6 j zp ZP_BYTE:2 93.0
(byte) main::k
(byte) main::k#1 reg byte x 1501.5
(byte) main::k#2 reg byte x 600.5999999999999
(word) main::w
(word) main::w#0 w zp ZP_WORD:6 2002.0
(byte*) main::zpptr
(const byte*) main::zpptr#0 zpptr = ((byte*))(word/signed word) 4096
(byte*) main::zpptr2
(byte*) main::zpptr2#0 zpptr2 zp ZP_WORD:4 1001.0
(byte*) main::zpptr2#1 zpptr2 zp ZP_WORD:4 2002.0

zp ZP_BYTE:2 [ main::j#6 main::j#1 ]
zp ZP_BYTE:3 [ main::i#4 main::i#1 ]
reg byte x [ main::k#2 main::k#1 ]
zp ZP_WORD:4 [ main::zpptr2#0 main::zpptr2#1 ]
zp ZP_WORD:6 [ main::w#0 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const zpptr = $1000
    .label zpptr2 = 4
    .label w = 6
    .label i = 3
    .label j = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::j#6 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG12 [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG13 [5] phi (byte) main::j#6 = (byte) main::j#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG16 [6] phi (byte) main::i#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG17 [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  //SEG18 [6] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@4->main::@2#0] -- register_copy 
  //SEG19 main::@2
  b2:
  //SEG20 [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG21 [7] phi (byte) main::k#2 = (byte/signed byte/word/signed word) 0 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG22 [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG23 [7] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG24 main::@3
  b3:
  //SEG25 [8] (byte*) main::zpptr2#0 ← (const byte*) main::zpptr#0 + (byte) main::i#4 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 ] ) -- pbuz1=pbuc1_plus_vbuz2 
    lda #<zpptr
    clc
    adc i
    sta zpptr2
    lda #>zpptr
    adc #0
    sta zpptr2+1
  //SEG26 [9] (word) main::w#0 ← ((word)) (byte) main::j#6 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#0 main::w#0 ] ) -- vwuz1=_word_vbuz2 
    lda j
    sta w
    lda #0
    sta w+1
  //SEG27 [10] (byte*) main::zpptr2#1 ← (byte*) main::zpptr2#0 + (word) main::w#0 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ( main:2 [ main::j#6 main::i#4 main::k#2 main::zpptr2#1 ] ) -- pbuz1=pbuz1_plus_vwuz2 
    lda zpptr2
    clc
    adc w
    sta zpptr2
    lda zpptr2+1
    adc w+1
    sta zpptr2+1
  //SEG28 [11] *((byte*) main::zpptr2#1) ← (byte) main::k#2 [ main::j#6 main::i#4 main::k#2 ] ( main:2 [ main::j#6 main::i#4 main::k#2 ] ) -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (zpptr2),y
  //SEG29 [12] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG30 [13] if((byte) main::k#1!=(byte/signed byte/word/signed word) 11) goto main::@3 [ main::j#6 main::i#4 main::k#1 ] ( main:2 [ main::j#6 main::i#4 main::k#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b3
  //SEG31 main::@4
  //SEG32 [14] (byte) main::i#1 ← ++ (byte) main::i#4 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG33 [15] if((byte) main::i#1!=(byte/signed byte/word/signed word) 11) goto main::@2 [ main::j#6 main::i#1 ] ( main:2 [ main::j#6 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$b
    bne b2
  //SEG34 main::@5
  //SEG35 [16] (byte) main::j#1 ← ++ (byte) main::j#6 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG36 [17] if((byte) main::j#1!=(byte/signed byte/word/signed word) 11) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$b
    bne b1
  //SEG37 main::@return
  //SEG38 [18] return  [ ] ( main:2 [ ] )
    rts
}

