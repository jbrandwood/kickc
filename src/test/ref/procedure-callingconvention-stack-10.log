Converting variable modified inside __stackcall procedure main() to load/store idx
Adding parameter assignment in __stackcall procedure get::i = param(get::i)
Adding parameter assignment in __stackcall procedure print::p = param(print::p)
Inlined call call __init
Eliminating unused variable with no statement main::$1
Calling convention __stackcall adding prepare/execute/finalize for main::p = call get(main::i)
Calling convention __stackcall adding prepare/execute/finalize for call print(main::p)
Calling convention __stackcall adding prepare/execute/finalize for call main
Calling convention STACK_CALL replacing param(get::i) with stackidx(byte,get::OFFSET_STACK_I)
Calling convention STACK_CALL replacing param(print::p) with stackidx(struct Point,print::OFFSET_STACK_P)
Calling convention STACK_CALL adding stack return stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return
Calling convention STACK_CALL adding stack pull main::p = stackpull(struct Point)
Calling convention STACK_CALL adding stack push stackpush(byte) = main::i
Calling convention STACK_CALL adding stack push stackpush(struct Point) = main::p
Removing C-classic struct-unwound assignment get::p = struct-unwound {*((byte*)&get::p+OFFSET_STRUCT_POINT_X), *((byte*)&get::p+OFFSET_STRUCT_POINT_Y)}
Removing C-classic struct-unwound assignment get::return = struct-unwound {*(&get::return)}

CONTROL FLOW GRAPH SSA

__stackcall void main()
main: scope:[main]  from
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < 5
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  stackpush(byte) = main::i#3
  sideeffect stackpushbytes(1)
  callexecute get 
  main::p = stackpull(struct Point)
  stackpush(struct Point) = main::p
  callexecute print 
  sideeffect stackpullbytes(2)
  main::i#1 = ++ main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__stackcall struct Point get(byte get::i)
get: scope:[get]  from
  get::i#0 = stackidx(byte,get::OFFSET_STACK_I)
  get::$0 = get::i#0 / 2
  *((byte*)&get::p+OFFSET_STRUCT_POINT_X) = get::i#0
  *((byte*)&get::p+OFFSET_STRUCT_POINT_Y) = get::$0
  *(&get::return) = memcpy(*(&get::p), struct Point, SIZEOF_STRUCT_POINT)
  to:get::@return
get::@return: scope:[get]  from get
  stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return
  return 
  to:@return

__stackcall void print(struct Point print::p)
print: scope:[print]  from
  print::p = stackidx(struct Point,print::OFFSET_STACK_P)
  SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_X)
  idx = ++ idx
  SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_Y)
  idx = ++ idx
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte OFFSET_STRUCT_POINT_X = 0
constant byte OFFSET_STRUCT_POINT_Y = 1
constant byte* const SCREEN = (byte*)$400
constant byte SIZEOF_STRUCT_POINT = 2
constant word STACK_BASE = $103
void __start()
__stackcall struct Point get(byte get::i)
number~ get::$0
constant byte get::OFFSET_STACK_I = 0
constant byte get::OFFSET_STACK_RETURN_0 = 0
byte get::i
byte get::i#0
struct Point get::p loadstore
struct Point get::return loadstore
byte idx loadstore
__stackcall void main()
bool~ main::$0
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
struct Point main::p loadstore
__stackcall void print(struct Point print::p)
constant byte print::OFFSET_STACK_P = 0
struct Point print::p loadstore

Adding number conversion cast (unumber) 5 in main::$0 = main::i#2 < 5
Adding number conversion cast (unumber) 2 in get::$0 = get::i#0 / 2
Adding number conversion cast (unumber) get::$0 in get::$0 = get::i#0 / (unumber)2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in get::$0 = get::i#0 / 2
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [3] if(main::i#2<5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (byte*)&get::p in [15] *((byte*)&get::p+OFFSET_STRUCT_POINT_X) = get::i#0
Simplifying expression containing zero (byte*)&print::p in [21] SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Rewriting division to use shift [12] get::$0 = get::i#0 / 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to get:24 print:27 

Created 1 initial phi equivalence classes
Coalesced [30] main::i#4 = main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__stackcall void print(struct Point print::p)
print: scope:[print]  from
  [5] print::p = stackidx(struct Point,print::OFFSET_STACK_P)
  [6] SCREEN[idx] = *((byte*)&print::p)
  [7] idx = ++ idx
  [8] SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_Y)
  [9] idx = ++ idx
  to:print::@return
print::@return: scope:[print]  from print
  [10] return 
  to:@return

__stackcall struct Point get(byte get::i)
get: scope:[get]  from
  [11] get::i#0 = stackidx(byte,get::OFFSET_STACK_I)
  [12] get::$0 = get::i#0 >> 1
  [13] *((byte*)&get::p) = get::i#0
  [14] *((byte*)&get::p+OFFSET_STRUCT_POINT_Y) = get::$0
  [15] *(&get::return) = memcpy(*(&get::p), struct Point, SIZEOF_STRUCT_POINT)
  to:get::@return
get::@return: scope:[get]  from get
  [16] stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return
  [17] return 
  to:@return

__stackcall void main()
main: scope:[main]  from
  [18] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [19] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [20] if(main::i#2<5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [21] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [22] stackpush(byte) = main::i#2
  sideeffect stackpushbytes(1)
  [24] callexecute get 
  [25] main::p = stackpull(struct Point)
  [26] stackpush(struct Point) = main::p
  [27] callexecute print 
  sideeffect stackpullbytes(2)
  [29] main::i#1 = ++ main::i#2
  to:main::@1

null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope print
null depth in calling loop Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  in scope get

VARIABLE REGISTER WEIGHTS
void __start()
__stackcall struct Point get(byte get::i)
byte~ get::$0 1001.0
byte get::i
byte get::i#0 1501.5
struct Point get::p loadstore
struct Point get::return loadstore 47.666666666666664
byte idx loadstore 316.2105263157895
__stackcall void main()
byte main::i
byte main::i#1 202.0
byte main::i#2 44.888888888888886
struct Point main::p loadstore 202.0
__stackcall void print(struct Point print::p)
struct Point print::p loadstore 333.6666666666667

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable idx to live range equivalence class [ idx ]
Added variable print::p to live range equivalence class [ print::p ]
Added variable get::i#0 to live range equivalence class [ get::i#0 ]
Added variable get::$0 to live range equivalence class [ get::$0 ]
Added variable main::p to live range equivalence class [ main::p ]
Added variable get::return to live range equivalence class [ get::return ]
Added variable get::p to live range equivalence class [ get::p ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx ]
[ print::p ]
[ get::i#0 ]
[ get::$0 ]
[ main::p ]
[ get::return ]
[ get::p ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx ]
Allocated zp[2]:4 [ print::p ]
Allocated zp[1]:6 [ get::i#0 ]
Allocated zp[1]:7 [ get::$0 ]
Allocated zp[2]:8 [ main::p ]
Allocated zp[2]:10 [ get::return ]
Allocated zp[2]:12 [ get::p ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] idx = 0 [ idx get::p get::return ] (  [ idx get::p get::return ] { }  ) always clobbers reg byte a 
Statement [5] print::p = stackidx(struct Point,print::OFFSET_STACK_P) [ idx print::p ] ( main:3::print:27 [ get::p get::return main::i#2 idx print::p ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [6] SCREEN[idx] = *((byte*)&print::p) [ idx print::p ] ( main:3::print:27 [ get::p get::return main::i#2 idx print::p ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [8] SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_Y) [ idx ] ( main:3::print:27 [ get::p get::return main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [11] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) [ get::i#0 get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::i#0 get::p get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [12] get::$0 = get::i#0 >> 1 [ get::i#0 get::$0 get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::i#0 get::$0 get::p get::return ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ get::i#0 ]
Statement [15] *(&get::return) = memcpy(*(&get::p), struct Point, SIZEOF_STRUCT_POINT) [ get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::p get::return ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return [ get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::p get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [20] if(main::i#2<5) goto main::@2 [ idx get::p get::return main::i#2 ] ( main:3 [ idx get::p get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [22] stackpush(byte) = main::i#2 [ idx get::p get::return main::i#2 ] ( main:3 [ idx get::p get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [25] main::p = stackpull(struct Point) [ idx get::p get::return main::i#2 main::p ] ( main:3 [ idx get::p get::return main::i#2 main::p ] { }  ) always clobbers reg byte a 
Statement [26] stackpush(struct Point) = main::p [ idx get::p get::return main::i#2 ] ( main:3 [ idx get::p get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes(2) always clobbers reg byte a 
Statement [1] idx = 0 [ idx get::p get::return ] (  [ idx get::p get::return ] { }  ) always clobbers reg byte a 
Statement [5] print::p = stackidx(struct Point,print::OFFSET_STACK_P) [ idx print::p ] ( main:3::print:27 [ get::p get::return main::i#2 idx print::p ] { }  ) always clobbers reg byte a reg byte x 
Statement [6] SCREEN[idx] = *((byte*)&print::p) [ idx print::p ] ( main:3::print:27 [ get::p get::return main::i#2 idx print::p ] { }  ) always clobbers reg byte a reg byte y 
Statement [8] SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_Y) [ idx ] ( main:3::print:27 [ get::p get::return main::i#2 idx ] { }  ) always clobbers reg byte a reg byte y 
Statement [11] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) [ get::i#0 get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::i#0 get::p get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [12] get::$0 = get::i#0 >> 1 [ get::i#0 get::$0 get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::i#0 get::$0 get::p get::return ] { }  ) always clobbers reg byte a 
Statement [15] *(&get::return) = memcpy(*(&get::p), struct Point, SIZEOF_STRUCT_POINT) [ get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::p get::return ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return [ get::p get::return ] ( main:3::get:24 [ idx main::i#2 get::p get::return ] { }  ) always clobbers reg byte a reg byte x 
Statement [20] if(main::i#2<5) goto main::@2 [ idx get::p get::return main::i#2 ] ( main:3 [ idx get::p get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [22] stackpush(byte) = main::i#2 [ idx get::p get::return main::i#2 ] ( main:3 [ idx get::p get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement [25] main::p = stackpull(struct Point) [ idx get::p get::return main::i#2 main::p ] ( main:3 [ idx get::p get::return main::i#2 main::p ] { }  ) always clobbers reg byte a 
Statement [26] stackpush(struct Point) = main::p [ idx get::p get::return main::i#2 ] ( main:3 [ idx get::p get::return main::i#2 ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes(2) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ idx ] : zp[1]:3 , 
Potential registers zp[2]:4 [ print::p ] : zp[2]:4 , 
Potential registers zp[1]:6 [ get::i#0 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ get::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ main::p ] : zp[2]:8 , 
Potential registers zp[2]:10 [ get::return ] : zp[2]:10 , 
Potential registers zp[2]:12 [ get::p ] : zp[2]:12 , 

REGISTER UPLIFT SCOPES
Uplift Scope [get] 1,501.5: zp[1]:6 [ get::i#0 ] 1,001: zp[1]:7 [ get::$0 ] 47.67: zp[2]:10 [ get::return ] 0: zp[2]:12 [ get::p ] 
Uplift Scope [main] 246.89: zp[1]:2 [ main::i#2 main::i#1 ] 202: zp[2]:8 [ main::p ] 
Uplift Scope [print] 333.67: zp[2]:4 [ print::p ] 
Uplift Scope [] 316.21: zp[1]:3 [ idx ] 
Uplift Scope [Point] 
Uplift Scope [__start] 

Uplifting [get] best 995 combination reg byte x [ get::i#0 ] reg byte a [ get::$0 ] zp[2]:10 [ get::return ] zp[2]:12 [ get::p ] 
Uplifting [main] best 995 combination zp[1]:2 [ main::i#2 main::i#1 ] zp[2]:8 [ main::p ] 
Uplifting [print] best 995 combination zp[2]:4 [ print::p ] 
Uplifting [] best 995 combination zp[1]:3 [ idx ] 
Uplifting [Point] best 995 combination 
Uplifting [__start] best 995 combination 
Attempting to uplift remaining variables inzp[1]:3 [ idx ]
Uplifting [] best 995 combination zp[1]:3 [ idx ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 995 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:8 [ main::p ] ] with [ zp[2]:4 [ print::p ] ]
Allocated (was zp[2]:8) zp[2]:4 [ main::p print::p ]
Allocated (was zp[2]:10) zp[2]:6 [ get::return ]
Allocated (was zp[2]:12) zp[2]:8 [ get::p ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct values
  // Upstart
  // Commodore 64 PRG executable file
.file [name="procedure-callingconvention-stack-10.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const SIZEOF_STRUCT_POINT = 2
  .const STACK_BASE = $103
  .label SCREEN = $400
  .label idx = 3
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] callexecute main  -- call_vprc1 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // print
// print(struct Point zp(4) p)
print: {
    .const OFFSET_STACK_P = 0
    .label p = 4
    // [5] print::p = stackidx(struct Point,print::OFFSET_STACK_P) -- vssz1=_stackidxstruct_2_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_P,x
    sta.z p
    lda STACK_BASE+OFFSET_STACK_P+1,x
    sta.z p+1
    // [6] SCREEN[idx] = *((byte*)&print::p) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda.z p
    ldy.z idx
    sta SCREEN,y
    // [7] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [8] SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_Y) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda p+OFFSET_STRUCT_POINT_Y
    ldy.z idx
    sta SCREEN,y
    // [9] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [10] return 
    rts
}
  // get
// get(byte register(X) i)
get: {
    .const OFFSET_STACK_I = 0
    .const OFFSET_STACK_RETURN_0 = 0
    .label return = 6
    .label p = 8
    // [11] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tax
    // [12] get::$0 = get::i#0 >> 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
    // [13] *((byte*)&get::p) = get::i#0 -- _deref_pbuc1=vbuxx 
    stx.z p
    // [14] *((byte*)&get::p+OFFSET_STRUCT_POINT_Y) = get::$0 -- _deref_pbuc1=vbuaa 
    sta p+OFFSET_STRUCT_POINT_Y
    // [15] *(&get::return) = memcpy(*(&get::p), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda p-1,y
    sta return-1,y
    dey
    bne !-
    jmp __breturn
    // get::@return
  __breturn:
    // [16] stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return -- _stackidxstruct_2_vbuc1=vssz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN_0+1,x
    // [17] return 
    rts
}
  // main
main: {
    .label p = 4
    .label i = 2
    // [19] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [19] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [20] if(main::i#2<5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [21] return 
    rts
    // main::@2
  __b2:
    // [22] stackpush(byte) = main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes(1) -- _stackpushbyte_1 
    pha
    // [24] callexecute get  -- call_vprc1 
    jsr get
    // [25] main::p = stackpull(struct Point) -- vssz1=_stackpullstruct_2_ 
    pla
    sta.z p
    pla
    sta.z p+1
    // [26] stackpush(struct Point) = main::p -- _stackpushstruct_2_=vssz1 
    lda.z p+1
    pha
    lda.z p
    pha
    // [27] callexecute print  -- call_vprc1 
    jsr print
    // sideeffect stackpullbytes(2) -- _stackpullbyte_2 
    pla
    pla
    // [29] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [19] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z p+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte OFFSET_STRUCT_POINT_Y = 1
constant byte* const SCREEN = (byte*) 1024
constant byte SIZEOF_STRUCT_POINT = 2
constant word STACK_BASE = $103
void __start()
__stackcall struct Point get(byte get::i)
byte~ get::$0 reg byte a 1001.0
constant byte get::OFFSET_STACK_I = 0
constant byte get::OFFSET_STACK_RETURN_0 = 0
byte get::i
byte get::i#0 reg byte x 1501.5
struct Point get::p loadstore zp[2]:8
struct Point get::return loadstore zp[2]:6 47.666666666666664
byte idx loadstore zp[1]:3 316.2105263157895
__stackcall void main()
byte main::i
byte main::i#1 i zp[1]:2 202.0
byte main::i#2 i zp[1]:2 44.888888888888886
struct Point main::p loadstore zp[2]:4 202.0
__stackcall void print(struct Point print::p)
constant byte print::OFFSET_STACK_P = 0
struct Point print::p loadstore zp[2]:4 333.6666666666667

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ idx ]
reg byte x [ get::i#0 ]
reg byte a [ get::$0 ]
zp[2]:4 [ main::p print::p ]
zp[2]:6 [ get::return ]
zp[2]:8 [ get::p ]


FINAL ASSEMBLER
Score: 863

  // File Comments
// Test a procedure with calling convention stack
// Returning and passing struct values
  // Upstart
  // Commodore 64 PRG executable file
.file [name="procedure-callingconvention-stack-10.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const SIZEOF_STRUCT_POINT = 2
  .const STACK_BASE = $103
  .label SCREEN = $400
  .label idx = 3
.segment Code
  // __start
__start: {
    // __start::__init1
    // char idx = 0
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] callexecute main  -- call_vprc1 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // print
// print(struct Point zp(4) p)
print: {
    .const OFFSET_STACK_P = 0
    .label p = 4
    // [5] print::p = stackidx(struct Point,print::OFFSET_STACK_P) -- vssz1=_stackidxstruct_2_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_P,x
    sta.z p
    lda STACK_BASE+OFFSET_STACK_P+1,x
    sta.z p+1
    // SCREEN[idx++] = p.x
    // [6] SCREEN[idx] = *((byte*)&print::p) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda.z p
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = p.x;
    // [7] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // SCREEN[idx++] = p.y
    // [8] SCREEN[idx] = *((byte*)&print::p+OFFSET_STRUCT_POINT_Y) -- pbuc1_derefidx_vbuz1=_deref_pbuc2 
    lda p+OFFSET_STRUCT_POINT_Y
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = p.y;
    // [9] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::@return
    // }
    // [10] return 
    rts
}
  // get
// get(byte register(X) i)
get: {
    .const OFFSET_STACK_I = 0
    .const OFFSET_STACK_RETURN_0 = 0
    .label return = 6
    .label p = 8
    // [11] get::i#0 = stackidx(byte,get::OFFSET_STACK_I) -- vbuxx=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_I,x
    tax
    // i/2
    // [12] get::$0 = get::i#0 >> 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
    // struct Point p = { i, i/2 }
    // [13] *((byte*)&get::p) = get::i#0 -- _deref_pbuc1=vbuxx 
    stx.z p
    // [14] *((byte*)&get::p+OFFSET_STRUCT_POINT_Y) = get::$0 -- _deref_pbuc1=vbuaa 
    sta p+OFFSET_STRUCT_POINT_Y
    // return p;
    // [15] *(&get::return) = memcpy(*(&get::p), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda p-1,y
    sta return-1,y
    dey
    bne !-
    // get::@return
    // }
    // [16] stackidx(struct Point,get::OFFSET_STACK_RETURN_0) = get::return -- _stackidxstruct_2_vbuc1=vssz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN_0+1,x
    // [17] return 
    rts
}
  // main
main: {
    .label p = 4
    .label i = 2
    // [19] phi from main to main::@1 [phi:main->main::@1]
    // [19] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // for(char i=0;i<5;i++)
    // [20] if(main::i#2<5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    // main::@return
    // }
    // [21] return 
    rts
    // main::@2
  __b2:
    // struct Point p = get(i)
    // [22] stackpush(byte) = main::i#2 -- _stackpushbyte_=vbuz1 
    lda.z i
    pha
    // sideeffect stackpushbytes(1) -- _stackpushbyte_1 
    pha
    // [24] callexecute get  -- call_vprc1 
    jsr get
    // [25] main::p = stackpull(struct Point) -- vssz1=_stackpullstruct_2_ 
    pla
    sta.z p
    pla
    sta.z p+1
    // print(p)
    // [26] stackpush(struct Point) = main::p -- _stackpushstruct_2_=vssz1 
    pha
    lda.z p
    pha
    // [27] callexecute print  -- call_vprc1 
    jsr print
    // sideeffect stackpullbytes(2) -- _stackpullbyte_2 
    pla
    pla
    // for(char i=0;i<5;i++)
    // [29] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [19] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

