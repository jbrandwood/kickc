
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] phi()
  to:__start::__init1_toD0181
__start::__init1_toD0181: scope:[__start]  from __start::__init1
  [2] phi()
  to:__start::__init1_@1
__start::__init1_@1: scope:[__start]  from __start::__init1_toD0181
  [3] canvas_show_memory = __start::__init1_toD0181_return#0
  [4] canvas_show_flag = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1_@1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [9] call kbhit 
  [10] kbhit::return#2 = kbhit::return#0
  to:irq_bottom_2::@4
irq_bottom_2::@4: scope:[irq_bottom_2]  from irq_bottom_2
  [11] irq_bottom_2::$0 = kbhit::return#2
  [12] if(0==irq_bottom_2::$0) goto irq_bottom_2::@1
  to:irq_bottom_2::toD0181
irq_bottom_2::toD0181: scope:[irq_bottom_2]  from irq_bottom_2::@4
  [13] phi()
  to:irq_bottom_2::@3
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2::toD0181
  [14] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::toD0181_return#0
  to:irq_bottom_2::@2
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@1 irq_bottom_2::@3
  [15] canvas_show_flag = 0
  [16] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
  [18] *KERNEL_IRQ = &irq_bottom_1
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@2
  [19] return 
  to:@return
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@4
  [20] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory
  to:irq_bottom_2::@2

interrupt(KERNEL_MIN) void irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  [21] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  [22] phi()
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  [23] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::toD0181_return#0
  [24] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  [25] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM
  [26] *KERNEL_IRQ = &irq_bottom_2
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  [27] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [28] phi()
  [29] call memset 
  to:main::@12
main::@12: scope:[main]  from main
  [30] phi()
  [31] call memset 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [32] phi()
  [33] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@6
  [34] main::screen#5 = phi( main::@13/SCREEN+$c, main::@6/main::screen#1 )
  [34] main::cols#5 = phi( main::@13/COLS+$c, main::@6/main::cols#1 )
  [34] main::y#2 = phi( main::@13/0, main::@6/main::y#1 )
  [35] if(main::y#2<$10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [36] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [37] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK
  [38] call setup_irq 
  to:main::@7
main::@7: scope:[main]  from main::@20 main::@3
  [39] main::canvas#10 = phi( main::@3/CANVAS1, main::@20/main::canvas#19 )
  [39] main::p2_idx#2 = phi( main::@3/$b5+$aa, main::@20/main::p2_idx#1 )
  [39] main::p1_idx#2 = phi( main::@3/$b5+$f, main::@20/main::p1_idx#1 )
  [39] main::p0_idx#2 = phi( main::@3/$b5, main::@20/main::p0_idx#1 )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [40] phi()
  [41] call clock_start 
  to:main::@14
main::@14: scope:[main]  from main::@8
  [42] phi()
  [43] call memset 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [44] main::x0#0 = COSTAB[main::p0_idx#2]
  [45] main::y0#0 = SINTAB[main::p0_idx#2]
  [46] main::x1#0 = COSTAB[main::p1_idx#2]
  [47] main::y1#0 = SINTAB[main::p1_idx#2]
  [48] line::x1#0 = main::x0#0
  [49] line::y1#0 = main::y0#0
  [50] line::x2#0 = main::x1#0
  [51] line::y2#0 = main::y1#0
  [52] call line 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [53] main::x2#0 = COSTAB[main::p2_idx#2]
  [54] main::y2#0 = SINTAB[main::p2_idx#2]
  [55] line::x1#1 = main::x1#0
  [56] line::y1#1 = main::y1#0
  [57] line::x2#1 = main::x2#0
  [58] line::y2#1 = main::y2#0
  [59] call line 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [60] line::x1#2 = main::x2#0
  [61] line::y1#2 = main::y2#0
  [62] line::x2#2 = main::x0#0
  [63] line::y2#2 = main::y0#0
  [64] call line 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [65] main::p0_idx#1 = ++ main::p0_idx#2
  [66] main::p1_idx#1 = ++ main::p1_idx#2
  [67] main::p2_idx#1 = ++ main::p2_idx#2
  [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED
  to:main::@9
main::@9: scope:[main]  from main::@18 main::@9
  [69] if(0!=canvas_show_flag) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@9
  [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [71] eorfill::canvas#0 = main::canvas#10
  [72] call eorfill 
  to:main::@19
main::@19: scope:[main]  from main::@10
  [73] main::canvas#1 = main::canvas#10 ^ CANVAS1^CANVAS2
  to:main::toD0181
main::toD0181: scope:[main]  from main::@19
  [74] phi()
  to:main::toD0182
main::toD0182: scope:[main]  from main::toD0181
  [75] phi()
  to:main::@11
main::@11: scope:[main]  from main::toD0182
  [76] canvas_show_memory = canvas_show_memory ^ main::toD0181_return#0^main::toD0182_return#0
  [77] canvas_show_flag = 1
  to:main::@20
main::@20: scope:[main]  from main::@11
  [78] main::canvas#19 = (byte*)main::canvas#1
  to:main::@7
main::@2: scope:[main]  from main::@1
  [79] main::c#4 = main::y#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [80] main::c#2 = phi( main::@2/main::c#4, main::@5/main::c#1 )
  [80] main::x#2 = phi( main::@2/0, main::@5/main::x#1 )
  [81] if(main::x#2<$10) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [82] main::cols#1 = main::cols#5 + $28
  [83] main::screen#1 = main::screen#5 + $28
  [84] main::y#1 = ++ main::y#2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [85] main::cols#5[main::x#2] = WHITE
  [86] main::screen#5[main::x#2] = main::c#2
  [87] main::c#1 = main::c#2 + $10
  [88] main::x#1 = ++ main::x#2
  to:main::@4

byte kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  [89] *kbhit::CIA1_PORT_A = 0
  [90] kbhit::return#0 = ~ *kbhit::CIA1_PORT_B
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [91] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main main::@12 main::@13 main::@14
  [92] memset::c#6 = phi( main/' ', main::@12/0, main::@13/BLACK, main::@14/0 )
  [92] memset::str#5 = phi( main/(void*)CONSOLE, main::@12/(void*)SCREEN, main::@13/(void*)COLS, main::@14/(void*)LINE_BUFFER )
  [92] memset::num#4 = phi( main/(word)$28*$19, main::@12/(word)$28*$19, main::@13/(word)$28*$19, main::@14/$800 )
  [93] if(memset::num#4<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [94] memset::end#0 = (byte*)memset::str#5 + memset::num#4
  [95] memset::dst#4 = (byte*)memset::str#5
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [96] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [97] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [98] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [99] *memset::dst#2 = memset::c#6
  [100] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  [102] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [103] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f
  [104] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
  [105] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER
  [106] *KERNEL_IRQ = &irq_bottom_1
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  [108] return 
  to:@return

void clock_start()
clock_start: scope:[clock_start]  from main::@8
  [109] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0
  [110] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [111] *CIA2_TIMER_AB = $ffffffff
  [112] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [113] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [114] return 
  to:@return

void line(byte* line::canvas , byte line::x1 , byte line::y1 , byte line::x2 , byte line::y2)
line: scope:[line]  from main::@15 main::@16 main::@17
  [115] line::y2#10 = phi( main::@15/line::y2#0, main::@16/line::y2#1, main::@17/line::y2#2 )
  [115] line::x2#15 = phi( main::@15/line::x2#0, main::@16/line::x2#1, main::@17/line::x2#2 )
  [115] line::y#0 = phi( main::@15/line::y1#0, main::@16/line::y1#1, main::@17/line::y1#2 )
  [115] line::x#0 = phi( main::@15/line::x1#0, main::@16/line::x1#1, main::@17/line::x1#2 )
  [116] abs_u8::u#0 = line::x2#15 - line::x#0
  [117] call abs_u8 
  [118] abs_u8::return#0 = abs_u8::return#4
  to:line::@19
line::@19: scope:[line]  from line
  [119] line::dx#0 = abs_u8::return#0
  [120] abs_u8::u#1 = line::y2#10 - line::y#0
  [121] call abs_u8 
  [122] abs_u8::return#1 = abs_u8::return#4
  to:line::@20
line::@20: scope:[line]  from line::@19
  [123] line::dy#0 = abs_u8::return#1
  [124] sgn_u8::u#0 = line::x2#15 - line::x#0
  [125] call sgn_u8 
  [126] sgn_u8::return#0 = sgn_u8::return#4
  to:line::@21
line::@21: scope:[line]  from line::@20
  [127] line::sx#0 = sgn_u8::return#0
  [128] sgn_u8::u#1 = line::y2#10 - line::y#0
  [129] call sgn_u8 
  [130] sgn_u8::return#1 = sgn_u8::return#4
  to:line::@22
line::@22: scope:[line]  from line::@21
  [131] line::sy#0 = sgn_u8::return#1
  [132] if(line::sx#0!=$ff) goto line::@1
  to:line::@3
line::@3: scope:[line]  from line::@22
  [133] line::y#1 = ++ line::y#0
  [134] line::y2#3 = ++ line::y2#10
  to:line::@1
line::@1: scope:[line]  from line::@22 line::@3
  [135] line::y2#13 = phi( line::@22/line::y2#10, line::@3/line::y2#3 )
  [135] line::y#17 = phi( line::@22/line::y#0, line::@3/line::y#1 )
  [136] if(line::dx#0>line::dy#0) goto line::@2
  to:line::@4
line::@4: scope:[line]  from line::@1
  [137] if(line::sx#0==line::sy#0) goto line::plot1
  to:line::@5
line::@5: scope:[line]  from line::@4
  [138] line::e#0 = line::dy#0 >> 1
  to:line::@6
line::@6: scope:[line]  from line::@5 line::@7
  [139] line::x#15 = phi( line::@5/line::x#0, line::@7/line::x#17 )
  [139] line::e#3 = phi( line::@5/line::e#0, line::@7/line::e#5 )
  [139] line::y#7 = phi( line::@5/line::y#17, line::@7/line::y#10 )
  [140] line::y#10 = line::y#7 + line::sy#0
  [141] line::e#1 = line::e#3 + line::dx#0
  [142] if(line::e#1<=line::dy#0) goto line::@7
  to:line::@8
line::@8: scope:[line]  from line::@6
  [143] line::plot2_y#0 = line::y#10 - line::sy#0
  to:line::plot2
line::plot2: scope:[line]  from line::@8
  [144] line::plot2_$0 = line::x#15 >> 3
  [145] line::plot2_$2 = line::plot2_$0 << 1
  [146] line::plot2_column#0 = plot_column[line::plot2_$2]
  [147] line::plot2_$1 = line::x#15 & 7
  [148] line::plot2_column#0[line::plot2_y#0] = line::plot2_column#0[line::plot2_y#0] | plot_bit[line::plot2_$1]
  to:line::@16
line::@16: scope:[line]  from line::plot2
  [149] line::x#1 = line::x#15 + line::sx#0
  [150] line::e#2 = line::e#1 - line::dy#0
  to:line::@7
line::@7: scope:[line]  from line::@16 line::@6
  [151] line::x#17 = phi( line::@16/line::x#1, line::@6/line::x#15 )
  [151] line::e#5 = phi( line::@16/line::e#2, line::@6/line::e#1 )
  [152] if(line::y#10!=line::y2#13) goto line::@6
  to:line::plot3
line::plot3: scope:[line]  from line::@7
  [153] line::plot3_$0 = line::x#17 >> 3
  [154] line::plot3_$2 = line::plot3_$0 << 1
  [155] line::plot3_column#0 = plot_column[line::plot3_$2]
  [156] line::plot3_$1 = line::x#17 & 7
  [157] line::plot3_column#0[line::y#10] = line::plot3_column#0[line::y#10] | plot_bit[line::plot3_$1]
  to:line::@return
line::@return: scope:[line]  from line::@15 line::@17 line::plot3 line::plot6
  [158] return 
  to:@return
line::plot1: scope:[line]  from line::@4
  [159] line::plot1_$0 = line::x#0 >> 3
  [160] line::plot1_$2 = line::plot1_$0 << 1
  [161] line::plot1_column#0 = plot_column[line::plot1_$2]
  [162] line::plot1_$1 = line::x#0 & 7
  [163] line::plot1_column#0[line::y#17] = line::plot1_column#0[line::y#17] | plot_bit[line::plot1_$1]
  to:line::@15
line::@15: scope:[line]  from line::plot1
  [164] if(line::dx#0!=0) goto line::@9
  to:line::@return
line::@9: scope:[line]  from line::@15
  [165] line::e1#0 = line::dy#0 >> 1
  to:line::@10
line::@10: scope:[line]  from line::@10 line::@17 line::@9
  [166] line::x#18 = phi( line::@9/line::x#0, line::@10/line::x#18, line::@17/line::x#19 )
  [166] line::e1#3 = phi( line::@9/line::e1#0, line::@10/line::e1#1, line::@17/line::e1#2 )
  [166] line::y#11 = phi( line::@9/line::y#17, line::@10/line::y#12, line::@17/line::y#12 )
  [167] line::y#12 = line::y#11 + line::sy#0
  [168] line::e1#1 = line::e1#3 + line::dx#0
  [169] if(line::e1#1<=line::dy#0) goto line::@10
  to:line::@11
line::@11: scope:[line]  from line::@10
  [170] line::x#19 = line::x#18 + line::sx#0
  [171] line::e1#2 = line::e1#1 - line::dy#0
  to:line::plot4
line::plot4: scope:[line]  from line::@11
  [172] line::plot4_$0 = line::x#19 >> 3
  [173] line::plot4_$2 = line::plot4_$0 << 1
  [174] line::plot4_column#0 = plot_column[line::plot4_$2]
  [175] line::plot4_$1 = line::x#19 & 7
  [176] line::plot4_column#0[line::y#12] = line::plot4_column#0[line::y#12] | plot_bit[line::plot4_$1]
  to:line::@17
line::@17: scope:[line]  from line::plot4
  [177] if(line::x#19!=line::x2#15) goto line::@10
  to:line::@return
line::@2: scope:[line]  from line::@1
  [178] line::e2#0 = line::dx#0 >> 1
  to:line::@12
line::@12: scope:[line]  from line::@13 line::@2
  [179] line::e2#3 = phi( line::@13/line::e2#7, line::@2/line::e2#0 )
  [179] line::y#13 = phi( line::@13/line::y#15, line::@2/line::y#17 )
  [179] line::x#10 = phi( line::@13/line::x#12, line::@2/line::x#0 )
  to:line::plot5
line::plot5: scope:[line]  from line::@12
  [180] line::plot5_$0 = line::x#10 >> 3
  [181] line::plot5_$2 = line::plot5_$0 << 1
  [182] line::plot5_column#0 = plot_column[line::plot5_$2]
  [183] line::plot5_$1 = line::x#10 & 7
  [184] line::plot5_column#0[line::y#13] = line::plot5_column#0[line::y#13] | plot_bit[line::plot5_$1]
  to:line::@18
line::@18: scope:[line]  from line::plot5
  [185] line::x#12 = line::x#10 + line::sx#0
  [186] line::e2#1 = line::e2#3 + line::dy#0
  [187] if(line::e2#1<=line::dx#0) goto line::@13
  to:line::@14
line::@14: scope:[line]  from line::@18
  [188] line::y#4 = line::y#13 + line::sy#0
  [189] line::e2#2 = line::e2#1 - line::dx#0
  to:line::@13
line::@13: scope:[line]  from line::@14 line::@18
  [190] line::e2#7 = phi( line::@14/line::e2#2, line::@18/line::e2#1 )
  [190] line::y#15 = phi( line::@14/line::y#4, line::@18/line::y#13 )
  [191] if(line::x#12!=line::x2#15) goto line::@12
  to:line::plot6
line::plot6: scope:[line]  from line::@13
  [192] line::plot6_$0 = line::x#12 >> 3
  [193] line::plot6_$2 = line::plot6_$0 << 1
  [194] line::plot6_column#0 = plot_column[line::plot6_$2]
  [195] line::plot6_$1 = line::x#12 & 7
  [196] line::plot6_column#0[line::y#15] = line::plot6_column#0[line::y#15] | plot_bit[line::plot6_$1]
  to:line::@return

void eorfill(byte* eorfill::line_buffer , byte* eorfill::canvas)
eorfill: scope:[eorfill]  from main::@10
  [197] phi()
  to:eorfill::@1
eorfill::@1: scope:[eorfill]  from eorfill eorfill::@5
  [198] eorfill::fill_column#2 = phi( eorfill/eorfill::canvas#0, eorfill::@5/eorfill::fill_column#1 )
  [198] eorfill::line_column#2 = phi( eorfill/LINE_BUFFER, eorfill::@5/eorfill::line_column#1 )
  [198] eorfill::x#2 = phi( eorfill/0, eorfill::@5/eorfill::x#1 )
  [199] if(eorfill::x#2<$10) goto eorfill::@2
  to:eorfill::@return
eorfill::@return: scope:[eorfill]  from eorfill::@1
  [200] return 
  to:@return
eorfill::@2: scope:[eorfill]  from eorfill::@1
  [201] eorfill::eor#0 = *eorfill::line_column#2
  [202] *eorfill::fill_column#2 = eorfill::eor#0
  to:eorfill::@3
eorfill::@3: scope:[eorfill]  from eorfill::@2 eorfill::@4
  [203] eorfill::eor#2 = phi( eorfill::@2/eorfill::eor#0, eorfill::@4/eorfill::eor#1 )
  [203] eorfill::y#2 = phi( eorfill::@2/1, eorfill::@4/eorfill::y#1 )
  [204] if(eorfill::y#2<$10*8) goto eorfill::@4
  to:eorfill::@5
eorfill::@5: scope:[eorfill]  from eorfill::@3
  [205] eorfill::line_column#1 = eorfill::line_column#2 + $10*8
  [206] eorfill::fill_column#1 = eorfill::fill_column#2 + $10*8
  [207] eorfill::x#1 = ++ eorfill::x#2
  to:eorfill::@1
eorfill::@4: scope:[eorfill]  from eorfill::@3
  [208] eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#2[eorfill::y#2]
  [209] eorfill::fill_column#2[eorfill::y#2] = eorfill::eor#1
  [210] eorfill::y#1 = ++ eorfill::y#2
  to:eorfill::@3

byte abs_u8(byte abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@19
  [211] abs_u8::u#2 = phi( line/abs_u8::u#0, line::@19/abs_u8::u#1 )
  [212] abs_u8::$0 = abs_u8::u#2 & $80
  [213] if(0!=abs_u8::$0) goto abs_u8::@1
  to:abs_u8::@return
abs_u8::@1: scope:[abs_u8]  from abs_u8
  [214] abs_u8::return#2 = - abs_u8::u#2
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8 abs_u8::@1
  [215] abs_u8::return#4 = phi( abs_u8::@1/abs_u8::return#2, abs_u8/abs_u8::u#2 )
  [216] return 
  to:@return

byte sgn_u8(byte sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@20 line::@21
  [217] sgn_u8::u#2 = phi( line::@20/sgn_u8::u#0, line::@21/sgn_u8::u#1 )
  [218] sgn_u8::$0 = sgn_u8::u#2 & $80
  [219] if(0!=sgn_u8::$0) goto sgn_u8::@1
  to:sgn_u8::@return
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  [220] phi()
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8 sgn_u8::@1
  [221] sgn_u8::return#4 = phi( sgn_u8::@1/-1, sgn_u8/1 )
  [222] return 
  to:@return
