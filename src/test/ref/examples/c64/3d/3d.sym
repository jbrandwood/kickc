const signed byte* COSH = SINH+$40
const signed byte* COSQ = SINQ+$40
const nomodify byte GREEN = 5
const nomodify byte LIGHT_BLUE = $e
const nomodify byte LIGHT_GREY = $f
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
const signed byte* PERSP_Z[$100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* SCREEN = (byte*) 1024
const signed byte* SINH[$140]  = kickasm {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
const signed byte* SINQ[$140]  = kickasm {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
const byte* SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const nomodify byte* SPRITES_COLOR = (byte*) 53287
const nomodify byte* SPRITES_XPOS = (byte*) 53248
const nomodify byte* SPRITES_YPOS = (byte*) 53249
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
void __start()
void anim()
byte~ anim::$10 reg byte a 20002.0
byte~ anim::$13 reg byte a 20002.0
byte~ anim::$14 reg byte a 20002.0
byte~ anim::$9 reg byte a 20002.0
byte anim::i
byte anim::i#1 i zp[1]:4 15001.5
byte anim::i#2 i zp[1]:4 6316.421052631579
byte anim::i2
byte anim::i2#0 reg byte x 5000.5
void calculate_matrix(signed byte calculate_matrix::sx , signed byte calculate_matrix::sy , signed byte calculate_matrix::sz)
signed byte~ calculate_matrix::$10 reg byte a 20002.0
signed byte~ calculate_matrix::$11 reg byte a 20002.0
signed byte~ calculate_matrix::$12 reg byte a 20002.0
signed byte~ calculate_matrix::$13 reg byte a 20002.0
signed byte~ calculate_matrix::$14 reg byte a 20002.0
signed byte~ calculate_matrix::$15 reg byte a 20002.0
signed byte~ calculate_matrix::$16 reg byte a 20002.0
signed byte~ calculate_matrix::$17 reg byte a 20002.0
signed byte~ calculate_matrix::$18 reg byte a 20002.0
signed byte~ calculate_matrix::$19 reg byte a 20002.0
signed byte~ calculate_matrix::$20 reg byte a 20002.0
signed byte~ calculate_matrix::$21 reg byte a 20002.0
signed byte~ calculate_matrix::$22 reg byte a 20002.0
signed byte~ calculate_matrix::$23 reg byte a 20002.0
signed byte~ calculate_matrix::$24 reg byte a 20002.0
signed byte~ calculate_matrix::$25 reg byte a 20002.0
signed byte~ calculate_matrix::$26 reg byte a 20002.0
signed byte~ calculate_matrix::$27 reg byte a 20002.0
signed byte~ calculate_matrix::$28 reg byte a 20002.0
signed byte~ calculate_matrix::$29 reg byte a 20002.0
signed byte~ calculate_matrix::$30 reg byte a 20002.0
signed byte~ calculate_matrix::$31 reg byte a 20002.0
signed byte~ calculate_matrix::$32 reg byte a 20002.0
signed byte~ calculate_matrix::$33 reg byte a 20002.0
signed byte~ calculate_matrix::$34 reg byte a 20002.0
signed byte calculate_matrix::sx
signed byte calculate_matrix::sx#0 reg byte x 7364.454545454545
signed byte calculate_matrix::sy
signed byte calculate_matrix::sy#0 sy zp[1]:3 4067.133333333334
signed byte calculate_matrix::sz
signed byte calculate_matrix::t1
signed byte calculate_matrix::t1#0 t1 zp[1]:33 4167.083333333333
signed byte calculate_matrix::t10
signed byte calculate_matrix::t10#0 reg byte x 909.1818181818182
signed byte calculate_matrix::t2
signed byte calculate_matrix::t2#0 t2 zp[1]:34 4545.909090909091
signed byte calculate_matrix::t3
signed byte calculate_matrix::t3#0 t3 zp[1]:35 1470.7352941176468
signed byte calculate_matrix::t4
signed byte calculate_matrix::t4#0 t4 zp[1]:36 1515.3030303030303
signed byte calculate_matrix::t5
signed byte calculate_matrix::t5#0 t5 zp[1]:37 1470.7352941176468
signed byte calculate_matrix::t6
signed byte calculate_matrix::t6#0 t6 zp[1]:38 1562.65625
signed byte calculate_matrix::t7
signed byte calculate_matrix::t7#0 t7 zp[1]:39 1515.3030303030303
signed byte calculate_matrix::t8
signed byte calculate_matrix::t8#0 t8 zp[1]:40 1515.3030303030303
signed byte calculate_matrix::t9
signed byte calculate_matrix::t9#0 t9 zp[1]:41 882.4411764705882
void debug_print()
byte* debug_print::at_line
const byte* debug_print::at_line#0 at_line = SCREEN+(word)$13*$28
byte debug_print::c
byte debug_print::c#1 c zp[1]:35 666667.3333333334
byte debug_print::c#2 c zp[1]:35 421053.05263157893
byte debug_print::i
byte debug_print::i#1 i zp[1]:33 1500001.5
byte debug_print::i#2 i zp[1]:33 400000.39999999997
byte debug_print::print_schar_pos10_col
const byte debug_print::print_schar_pos10_col#0 print_schar_pos10_col = $1d
byte debug_print::print_schar_pos10_row
const byte debug_print::print_schar_pos10_row#0 print_schar_pos10_row = 6
signed byte debug_print::print_schar_pos10_sb
signed byte debug_print::print_schar_pos10_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos11_col
const byte debug_print::print_schar_pos11_col#0 print_schar_pos11_col = $21
byte debug_print::print_schar_pos11_row
const byte debug_print::print_schar_pos11_row#0 print_schar_pos11_row = 6
signed byte debug_print::print_schar_pos11_sb
signed byte debug_print::print_schar_pos11_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos12_col
const byte debug_print::print_schar_pos12_col#0 print_schar_pos12_col = $25
byte debug_print::print_schar_pos12_row
const byte debug_print::print_schar_pos12_row#0 print_schar_pos12_row = 6
signed byte debug_print::print_schar_pos12_sb
signed byte debug_print::print_schar_pos12_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos1_col
const byte debug_print::print_schar_pos1_col#0 print_schar_pos1_col = $25
byte debug_print::print_schar_pos1_row
signed byte debug_print::print_schar_pos1_sb
signed byte debug_print::print_schar_pos1_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos2_col
const byte debug_print::print_schar_pos2_col#0 print_schar_pos2_col = $25
byte debug_print::print_schar_pos2_row
const byte debug_print::print_schar_pos2_row#0 print_schar_pos2_row = 1
signed byte debug_print::print_schar_pos2_sb
signed byte debug_print::print_schar_pos2_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos3_col
const byte debug_print::print_schar_pos3_col#0 print_schar_pos3_col = $25
byte debug_print::print_schar_pos3_row
const byte debug_print::print_schar_pos3_row#0 print_schar_pos3_row = 2
signed byte debug_print::print_schar_pos3_sb
byte debug_print::print_schar_pos4_col
const byte debug_print::print_schar_pos4_col#0 print_schar_pos4_col = $1d
byte debug_print::print_schar_pos4_row
const byte debug_print::print_schar_pos4_row#0 print_schar_pos4_row = 4
signed byte debug_print::print_schar_pos4_sb
signed byte debug_print::print_schar_pos4_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos5_col
const byte debug_print::print_schar_pos5_col#0 print_schar_pos5_col = $21
byte debug_print::print_schar_pos5_row
const byte debug_print::print_schar_pos5_row#0 print_schar_pos5_row = 4
signed byte debug_print::print_schar_pos5_sb
signed byte debug_print::print_schar_pos5_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos6_col
const byte debug_print::print_schar_pos6_col#0 print_schar_pos6_col = $25
byte debug_print::print_schar_pos6_row
const byte debug_print::print_schar_pos6_row#0 print_schar_pos6_row = 4
signed byte debug_print::print_schar_pos6_sb
signed byte debug_print::print_schar_pos6_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos7_col
const byte debug_print::print_schar_pos7_col#0 print_schar_pos7_col = $1d
byte debug_print::print_schar_pos7_row
const byte debug_print::print_schar_pos7_row#0 print_schar_pos7_row = 5
signed byte debug_print::print_schar_pos7_sb
signed byte debug_print::print_schar_pos7_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos8_col
const byte debug_print::print_schar_pos8_col#0 print_schar_pos8_col = $21
byte debug_print::print_schar_pos8_row
const byte debug_print::print_schar_pos8_row#0 print_schar_pos8_row = 5
signed byte debug_print::print_schar_pos8_sb
signed byte debug_print::print_schar_pos8_sb#0 reg byte a 20002.0
byte debug_print::print_schar_pos9_col
const byte debug_print::print_schar_pos9_col#0 print_schar_pos9_col = $25
byte debug_print::print_schar_pos9_row
const byte debug_print::print_schar_pos9_row#0 print_schar_pos9_row = 5
signed byte debug_print::print_schar_pos9_sb
signed byte debug_print::print_schar_pos9_sb#0 reg byte a 20002.0
void debug_print_init()
byte*~ debug_print_init::$41 zp[2]:15 20002.0
byte*~ debug_print_init::$44 zp[2]:17 20002.0
byte*~ debug_print_init::$47 zp[2]:19 20002.0
byte*~ debug_print_init::$50 zp[2]:21 20002.0
byte*~ debug_print_init::$53 zp[2]:23 20002.0
byte*~ debug_print_init::$56 zp[2]:25 20002.0
byte*~ debug_print_init::$59 zp[2]:27 20002.0
byte*~ debug_print_init::$62 zp[2]:29 20002.0
byte*~ debug_print_init::$65 zp[2]:31 20002.0
const byte* debug_print_init::COLS = (byte*) 55296
byte* debug_print_init::at_cols
const byte* debug_print_init::at_cols#0 at_cols = debug_print_init::COLS+(word)$10*$28
byte* debug_print_init::at_line
const byte* debug_print_init::at_line#0 at_line = SCREEN+(word)$10*$28
byte debug_print_init::c
byte debug_print_init::c#1 c zp[1]:2 667.3333333333334
byte debug_print_init::c#2 c zp[1]:2 2969.1875
byte debug_print_init::col
byte debug_print_init::col#0 reg byte x 5556.111111111112
byte debug_print_init::i
byte debug_print_init::i#1 i zp[1]:3 1501.5
byte debug_print_init::i#2 i zp[1]:3 454.7272727272727
byte debug_print_init::j
byte debug_print_init::j#1 reg byte y 15001.5
byte debug_print_init::j#2 reg byte y 5500.550000000001
const byte* debug_print_init::str[3]  = "sx"
const byte* debug_print_init::str1[3]  = "sy"
const byte* debug_print_init::str10[3]  = "xp"
const byte* debug_print_init::str11[3]  = "yp"
const byte* debug_print_init::str2[3]  = "sz"
const byte* debug_print_init::str3[2]  = "x"
const byte* debug_print_init::str4[2]  = "y"
const byte* debug_print_init::str5[2]  = "z"
const byte* debug_print_init::str6[3]  = "xr"
const byte* debug_print_init::str7[3]  = "yr"
const byte* debug_print_init::str8[3]  = "zr"
const byte* debug_print_init::str9[3]  = "pp"
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:17 200002.0
byte* memset::dst#2 dst zp[2]:17 133334.66666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
const byte* mulf_sqr1[$200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
const byte* mulf_sqr2[$200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
volatile signed byte pp loadstore zp[1]:8 185.24074074074073
const signed byte* pps[8]  = { fill( 8, 0) }
void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
byte* print_char_at::at
byte* print_char_at::at#0 at zp[2]:15 2.0000002E7
byte* print_char_at::at#1 at zp[2]:15 2.0000002E7
byte* print_char_at::at#2 at zp[2]:15 2.00000002E8
byte* print_char_at::at#3 at zp[2]:15 1.00000001E8
byte* print_char_at::at#4 at zp[2]:15 1.220000005E9
byte print_char_at::ch
byte print_char_at::ch#2 reg byte x 1.00000001E8
byte print_char_at::ch#3 reg byte x 2.00000002E8
byte print_char_at::ch#4 reg byte x 1.200000003E9
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
void print_schar_at(signed byte print_schar_at::b , byte* print_schar_at::at)
byte* print_schar_at::at
byte* print_schar_at::at#0 at zp[2]:15 1001.0
byte* print_schar_at::at#1 at zp[2]:15 1001.0
byte* print_schar_at::at#15 at zp[2]:15 1000001.0
byte* print_schar_at::at#16 at zp[2]:15 1000001.0
byte* print_schar_at::at#17 at zp[2]:15 1000001.0
byte* print_schar_at::at#18 at zp[2]:15 1000001.0
byte* print_schar_at::at#19 at zp[2]:15 1000001.0
byte* print_schar_at::at#2 at zp[2]:15 1001.0
byte* print_schar_at::at#20 at zp[2]:15 1000001.0
byte* print_schar_at::at#21 at zp[2]:15 4500376.5
signed byte print_schar_at::b
signed byte print_schar_at::b#0 b zp[1]:34 2.0000002E7
signed byte print_schar_at::b#1 b zp[1]:34 2002.0
signed byte print_schar_at::b#10 b zp[1]:34 20002.0
signed byte print_schar_at::b#11 b zp[1]:34 20002.0
signed byte print_schar_at::b#12 b zp[1]:34 20002.0
signed byte print_schar_at::b#13 b zp[1]:34 20002.0
signed byte print_schar_at::b#14 b zp[1]:34 20002.0
signed byte print_schar_at::b#15 b zp[1]:34 20002.0
signed byte print_schar_at::b#16 b zp[1]:34 2000002.0
signed byte print_schar_at::b#17 b zp[1]:34 2000002.0
signed byte print_schar_at::b#18 b zp[1]:34 2000002.0
signed byte print_schar_at::b#19 b zp[1]:34 2000002.0
signed byte print_schar_at::b#2 b zp[1]:34 2002.0
signed byte print_schar_at::b#20 b zp[1]:34 2000002.0
signed byte print_schar_at::b#21 b zp[1]:34 2000002.0
signed byte print_schar_at::b#22 b zp[1]:34 6018837.166666667
signed byte print_schar_at::b#24 b zp[1]:34 1.0000001E7
signed byte print_schar_at::b#3 b zp[1]:34 2002.0
signed byte print_schar_at::b#4 b zp[1]:34 20002.0
signed byte print_schar_at::b#5 b zp[1]:34 20002.0
signed byte print_schar_at::b#7 b zp[1]:34 20002.0
signed byte print_schar_at::b#8 b zp[1]:34 20002.0
signed byte print_schar_at::b#9 b zp[1]:34 20002.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
byte* print_str_at::at
byte* print_str_at::at#0 at zp[2]:17 10001.0
byte* print_str_at::at#13 at zp[2]:17 10334.666666666666
byte* print_str_at::at#15 at zp[2]:17 1001.0
byte* print_str_at::str
byte* print_str_at::str#0 str zp[2]:15 20002.0
byte* print_str_at::str#13 str zp[2]:15 10251.25
byte* print_str_at::str#15 str zp[2]:15 1001.0
void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
byte~ print_uchar_at::$0 reg byte a 2.00000002E8
byte~ print_uchar_at::$2 reg byte y 1.00000001E8
byte* print_uchar_at::at
byte* print_uchar_at::at#0 at zp[2]:15 3.000000042857143E7
byte print_uchar_at::b
byte print_uchar_at::b#0 b zp[1]:34 4.2000000599999994E7
volatile word psp1 loadstore zp[2]:11 0.28260869565217395
volatile word psp2 loadstore zp[2]:13 0.28888888888888886
void rotate_matrix(signed byte rotate_matrix::x , signed byte rotate_matrix::y , signed byte rotate_matrix::z)
signed byte rotate_matrix::x
signed byte rotate_matrix::x#0 reg byte x 36667.33333333333
signed byte rotate_matrix::y
signed byte rotate_matrix::y#0 y zp[1]:34 36667.33333333333
signed byte rotate_matrix::z
signed byte rotate_matrix::z#0 z zp[1]:35 36667.33333333333
const signed byte* rotation_matrix[9]  = { fill( 9, 0) }
void sprites_init()
const byte* sprites_init::SCREEN = (byte*) 1024
byte sprites_init::i
byte sprites_init::i#1 reg byte x 1501.5
byte sprites_init::i#2 reg byte x 1334.6666666666667
byte* sprites_init::sprites_ptr
const byte* sprites_init::sprites_ptr#0 sprites_ptr = sprites_init::SCREEN+$3f8
void store_matrix()
signed byte sx
signed byte sx#11 sx zp[1]:2 141.34782608695653
signed byte sx#2 sx zp[1]:2 1001.0
signed byte sy
signed byte sy#11 sy zp[1]:3 139.8279569892473
signed byte sy#2 sy zp[1]:3 2002.0
const signed byte sz = 0
volatile signed byte xp loadstore zp[1]:9 188.7358490566038
const signed byte* xps[8]  = { fill( 8, 0) }
volatile signed byte xr loadstore zp[1]:5 18334.0
const signed byte* xrs[8]  = { fill( 8, 0) }
const signed byte* xs[8]  = { -$34, -$34, -$34, 0, 0, $34, $34, $34 }
volatile signed byte yp loadstore zp[1]:10 192.3653846153846
const signed byte* yps[8]  = { fill( 8, 0) }
volatile signed byte yr loadstore zp[1]:6 18334.0
const signed byte* yrs[8]  = { fill( 8, 0) }
const signed byte* ys[8]  = { -$34, 0, $34, -$34, $34, -$34, 0, $34 }
volatile signed byte zr loadstore zp[1]:7 18334.0
const signed byte* zrs[8]  = { fill( 8, 0) }
const signed byte* zs[8]  = { $34, $34, $34, $34, $34, $34, $34, $34 }

reg byte x [ sprites_init::i#2 sprites_init::i#1 ]
reg byte y [ debug_print_init::j#2 debug_print_init::j#1 ]
zp[1]:2 [ sx#11 sx#2 debug_print_init::c#2 debug_print_init::c#1 ]
zp[1]:3 [ sy#11 sy#2 calculate_matrix::sy#0 debug_print_init::i#2 debug_print_init::i#1 ]
zp[1]:4 [ anim::i#2 anim::i#1 ]
reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
zp[1]:5 [ xr ]
zp[1]:6 [ yr ]
zp[1]:7 [ zr ]
zp[1]:8 [ pp ]
zp[1]:9 [ xp ]
zp[1]:10 [ yp ]
zp[2]:11 [ psp1 ]
zp[2]:13 [ psp2 ]
reg byte x [ debug_print_init::col#0 ]
zp[2]:15 [ debug_print_init::$41 print_schar_at::at#21 print_schar_at::at#15 print_schar_at::at#16 print_schar_at::at#17 print_schar_at::at#18 print_schar_at::at#19 print_schar_at::at#20 print_schar_at::at#0 print_schar_at::at#1 print_schar_at::at#2 print_char_at::at#4 print_char_at::at#0 print_char_at::at#1 print_char_at::at#2 print_char_at::at#3 print_uchar_at::at#0 print_str_at::str#13 print_str_at::str#15 print_str_at::str#0 ]
zp[2]:17 [ debug_print_init::$44 memset::dst#2 memset::dst#1 print_str_at::at#13 print_str_at::at#15 print_str_at::at#0 ]
zp[2]:19 [ debug_print_init::$47 ]
zp[2]:21 [ debug_print_init::$50 ]
zp[2]:23 [ debug_print_init::$53 ]
zp[2]:25 [ debug_print_init::$56 ]
zp[2]:27 [ debug_print_init::$59 ]
zp[2]:29 [ debug_print_init::$62 ]
zp[2]:31 [ debug_print_init::$65 ]
reg byte x [ calculate_matrix::sx#0 ]
reg byte x [ rotate_matrix::x#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$13 ]
reg byte a [ anim::$9 ]
reg byte a [ anim::$14 ]
reg byte a [ anim::$10 ]
zp[1]:33 [ calculate_matrix::t1#0 debug_print::i#2 debug_print::i#1 ]
zp[1]:34 [ calculate_matrix::t2#0 rotate_matrix::y#0 print_schar_at::b#24 print_schar_at::b#0 print_schar_at::b#22 print_schar_at::b#16 print_schar_at::b#17 print_schar_at::b#18 print_schar_at::b#19 print_schar_at::b#20 print_schar_at::b#21 print_schar_at::b#4 print_schar_at::b#13 print_schar_at::b#14 print_schar_at::b#15 print_schar_at::b#5 print_schar_at::b#7 print_schar_at::b#8 print_schar_at::b#9 print_schar_at::b#10 print_schar_at::b#11 print_schar_at::b#12 print_schar_at::b#1 print_schar_at::b#2 print_schar_at::b#3 print_uchar_at::b#0 ]
zp[1]:35 [ calculate_matrix::t3#0 rotate_matrix::z#0 debug_print::c#2 debug_print::c#1 ]
zp[1]:36 [ calculate_matrix::t4#0 ]
zp[1]:37 [ calculate_matrix::t5#0 ]
zp[1]:38 [ calculate_matrix::t6#0 ]
zp[1]:39 [ calculate_matrix::t7#0 ]
zp[1]:40 [ calculate_matrix::t8#0 ]
zp[1]:41 [ calculate_matrix::t9#0 ]
reg byte x [ calculate_matrix::t10#0 ]
reg byte a [ calculate_matrix::$10 ]
reg byte a [ calculate_matrix::$11 ]
reg byte a [ calculate_matrix::$12 ]
reg byte a [ calculate_matrix::$13 ]
reg byte a [ calculate_matrix::$14 ]
reg byte a [ calculate_matrix::$15 ]
reg byte a [ calculate_matrix::$16 ]
reg byte a [ calculate_matrix::$17 ]
reg byte a [ calculate_matrix::$18 ]
reg byte a [ calculate_matrix::$19 ]
reg byte a [ calculate_matrix::$20 ]
reg byte a [ calculate_matrix::$21 ]
reg byte a [ calculate_matrix::$22 ]
reg byte a [ calculate_matrix::$23 ]
reg byte a [ calculate_matrix::$24 ]
reg byte a [ calculate_matrix::$25 ]
reg byte a [ calculate_matrix::$26 ]
reg byte a [ calculate_matrix::$27 ]
reg byte a [ calculate_matrix::$28 ]
reg byte a [ calculate_matrix::$29 ]
reg byte a [ calculate_matrix::$30 ]
reg byte a [ calculate_matrix::$31 ]
reg byte a [ calculate_matrix::$32 ]
reg byte a [ calculate_matrix::$33 ]
reg byte a [ calculate_matrix::$34 ]
reg byte a [ debug_print::print_schar_pos1_sb#0 ]
reg byte a [ debug_print::print_schar_pos2_sb#0 ]
reg byte a [ debug_print::print_schar_pos4_sb#0 ]
reg byte a [ debug_print::print_schar_pos5_sb#0 ]
reg byte a [ debug_print::print_schar_pos6_sb#0 ]
reg byte a [ debug_print::print_schar_pos7_sb#0 ]
reg byte a [ debug_print::print_schar_pos8_sb#0 ]
reg byte a [ debug_print::print_schar_pos9_sb#0 ]
reg byte a [ debug_print::print_schar_pos10_sb#0 ]
reg byte a [ debug_print::print_schar_pos11_sb#0 ]
reg byte a [ debug_print::print_schar_pos12_sb#0 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
