@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] phi()
  [5] call main 
  to:@end
@end: scope:[]  from @2
  [6] phi()

(void()) main()
main: scope:[main]  from @2
  [7] phi()
  [8] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [9] phi()
  [10] call printf_char 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] phi()
  [12] call printf_str 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] phi()
  [14] call printf_char 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call printf_str 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] phi()
  [18] call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [19] phi()
  [20] call printf_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [21] phi()
  [22] call printf_sint 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [23] phi()
  [24] call printf_str 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [25] phi()
  [26] call printf_char 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [27] phi()
  [28] call printf_str 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [29] phi()
  [30] call printf_char 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [31] phi()
  [32] call printf_str 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [33] phi()
  [34] call printf_sint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [35] phi()
  [36] call printf_str 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [37] phi()
  [38] call printf_sint 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [39] phi()
  [40] call printf_str 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [41] phi()
  [42] call printf_char 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [43] phi()
  [44] call printf_str 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [45] phi()
  [46] call printf_char 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [47] phi()
  [48] call printf_str 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [49] phi()
  [50] call printf_sint 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [51] phi()
  [52] call printf_str 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [53] phi()
  [54] call printf_sint 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [55] phi()
  [56] call printf_str 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [57] phi()
  [58] call printf_char 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [59] phi()
  [60] call printf_str 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [61] phi()
  [62] call printf_char 
  to:main::@28
main::@28: scope:[main]  from main::@27
  [63] phi()
  [64] call printf_str 
  to:main::@29
main::@29: scope:[main]  from main::@28
  [65] phi()
  [66] call printf_sint 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [67] phi()
  [68] call printf_str 
  to:main::@31
main::@31: scope:[main]  from main::@30
  [69] phi()
  [70] call printf_sint 
  to:main::@32
main::@32: scope:[main]  from main::@31
  [71] phi()
  [72] call printf_str 
  to:main::@33
main::@33: scope:[main]  from main::@32
  [73] phi()
  [74] call printf_char 
  to:main::@34
main::@34: scope:[main]  from main::@33
  [75] phi()
  [76] call printf_str 
  to:main::@35
main::@35: scope:[main]  from main::@34
  [77] phi()
  [78] call printf_char 
  to:main::@36
main::@36: scope:[main]  from main::@35
  [79] phi()
  [80] call printf_str 
  to:main::@37
main::@37: scope:[main]  from main::@36
  [81] phi()
  [82] call printf_sint 
  to:main::@38
main::@38: scope:[main]  from main::@37
  [83] phi()
  [84] call printf_str 
  to:main::@39
main::@39: scope:[main]  from main::@38
  [85] phi()
  [86] call printf_sint 
  to:main::@40
main::@40: scope:[main]  from main::@39
  [87] phi()
  [88] call printf_str 
  to:main::@return
main::@return: scope:[main]  from main::@40
  [89] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@10 main::@12 main::@14 main::@16 main::@18 main::@2 main::@20 main::@22 main::@24 main::@26 main::@28 main::@30 main::@32 main::@34 main::@36 main::@38 main::@4 main::@40 main::@6 main::@8 printf_number_buffer::@2
  [90] (byte*) printf_str::str#24 ← phi( main::@10/(const byte*) main::str4 main::@12/(const byte*) main::str5 main::@14/(const byte*) main::str2 main::@16/(const byte*) main::str3 main::@18/(const byte*) main::str4 main::@2/(const byte*) main::str main::@20/(const byte*) main::str9 main::@22/(const byte*) main::str2 main::@24/(const byte*) main::str3 main::@26/(const byte*) main::str12 main::@28/(const byte*) main::str5 main::@30/(const byte*) main::str2 main::@32/(const byte*) main::str3 main::@34/(const byte*) main::str12 main::@36/(const byte*) main::str9 main::@38/(const byte*) main::str2 main::@4/(const byte*) main::str1 main::@40/(const byte*) main::str3 main::@6/(const byte*) main::str2 main::@8/(const byte*) main::str3 printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [91] (byte*) printf_str::str#22 ← phi( printf_str/(byte*) printf_str::str#24 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [92] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#22)
  [93] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#22
  [94] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [95] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [96] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [97] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [98] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [99] phi()
  [100] call printf_ln 
  to:printf_str::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  [101] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [102] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [103] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [104] (byte) printf_cursor_x ← (byte) 0
  [105] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [106] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [107] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [108] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [109] phi()
  [110] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [111] phi()
  [112] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [113] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [114] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [115] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [116] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [117] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [117] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [117] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [118] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [119] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [120] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [121] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [122] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [123] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [124] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [125] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [126] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [127] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [127] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [128] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [129] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [130] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [131] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [132] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from main::@1 main::@11 main::@17 main::@19 main::@25 main::@27 main::@3 main::@33 main::@35 main::@9 printf_number_buffer::@3 printf_str::@5
  [133] (byte) printf_char::ch#13 ← phi( main::@1/(byte) '%' main::@11/(byte) '%' main::@17/(byte) '%' main::@19/(byte) '%' main::@25/(byte) '%' main::@27/(byte) '%' main::@3/(byte) '%' main::@33/(byte) '%' main::@35/(byte) '%' main::@9/(byte) '%' printf_number_buffer::@3/(byte) printf_char::ch#2 printf_str::@5/(byte) printf_char::ch#1 )
  [134] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#13
  [135] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [136] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [137] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [138] (byte) printf_cursor_x ← (byte) 0
  [139] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [140] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [141] return 
  to:@return

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@13 main::@15 main::@21 main::@23 main::@29 main::@31 main::@37 main::@39 main::@5 main::@7
  [142] (signed word) printf_sint::value#11 ← phi( main::@13/(signed byte) 1 main::@15/(signed byte) 2 main::@21/(signed byte) 1 main::@23/(signed byte) 1 main::@29/(signed byte) 2 main::@31/(signed byte) 2 main::@37/(signed byte) 2 main::@39/(signed byte) 1 main::@5/(signed byte) 1 main::@7/(signed byte) 2 )
  [143] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [144] if((signed word) printf_sint::value#11<(signed byte) 0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [145] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#11
  [146] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [147] (signed word) printf_sint::value#13 ← phi( printf_sint::@1/(signed word) printf_sint::value#0 printf_sint/(signed word) printf_sint::value#11 )
  [148] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#13
  [149] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [150] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [151] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [152] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [153] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [154] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [155] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#0
  [156] call printf_char 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [157] phi()
  [158] call printf_str 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [159] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [160] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [161] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [161] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [161] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [161] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [162] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [163] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [164] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [165] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [166] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [167] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [168] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [169] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [170] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [171] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [172] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [172] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [172] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [173] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [174] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [175] (word) utoa_append::value#0 ← (word) utoa::value#2
  [176] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [177] call utoa_append 
  [178] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [179] (word) utoa::value#0 ← (word) utoa_append::return#0
  [180] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [181] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [182] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [182] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [183] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [184] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [185] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [186] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [187] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [188] phi()
  [189] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [190] (byte*) printf_cursor_ptr ← (byte*) 1024
  [191] (byte) printf_cursor_x ← (byte) 0
  [192] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [193] return 
  to:@return
