
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call sin8u_table 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [5] phi()
  [6] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [7] return 
  to:@return

(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
sin8u_table: scope:[sin8u_table]  from main::@1
  [8] phi()
  [9] call div16u 
  [10] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8u_table::@3
sin8u_table::@3: scope:[sin8u_table]  from sin8u_table
  [11] (word) sin8u_table::step#0 ← (word) div16u::return#2
  [12] call print_str 
  to:sin8u_table::@4
sin8u_table::@4: scope:[sin8u_table]  from sin8u_table::@3
  [13] (word) print_uint::w#1 ← (word) sin8u_table::step#0
  [14] call print_uint 
  to:sin8u_table::@5
sin8u_table::@5: scope:[sin8u_table]  from sin8u_table::@4
  [15] phi()
  [16] call print_str 
  to:sin8u_table::@6
sin8u_table::@6: scope:[sin8u_table]  from sin8u_table::@5
  [17] phi()
  [18] call print_uchar 
  to:sin8u_table::@7
sin8u_table::@7: scope:[sin8u_table]  from sin8u_table::@6
  [19] phi()
  [20] call print_str 
  to:sin8u_table::@8
sin8u_table::@8: scope:[sin8u_table]  from sin8u_table::@7
  [21] phi()
  [22] call print_uchar 
  to:sin8u_table::@9
sin8u_table::@9: scope:[sin8u_table]  from sin8u_table::@8
  [23] phi()
  [24] call print_str 
  to:sin8u_table::@10
sin8u_table::@10: scope:[sin8u_table]  from sin8u_table::@9
  [25] phi()
  [26] call print_uchar 
  to:sin8u_table::@11
sin8u_table::@11: scope:[sin8u_table]  from sin8u_table::@10
  [27] phi()
  [28] call print_str 
  to:sin8u_table::@12
sin8u_table::@12: scope:[sin8u_table]  from sin8u_table::@11
  [29] phi()
  [30] call print_uchar 
  to:sin8u_table::@13
sin8u_table::@13: scope:[sin8u_table]  from sin8u_table::@12
  [31] phi()
  [32] call print_ln 
  to:sin8u_table::@1
sin8u_table::@1: scope:[sin8u_table]  from sin8u_table::@13 sin8u_table::@24
  [33] (byte*) sin8u_table::sintab#2 ← phi( sin8u_table::@13/(const byte*) main::sintab sin8u_table::@24/(byte*) sin8u_table::sintab#1 )
  [33] (word) sin8u_table::x#10 ← phi( sin8u_table::@13/(word) 0 sin8u_table::@24/(word) sin8u_table::x#1 )
  [33] (word) sin8u_table::i#10 ← phi( sin8u_table::@13/(word) 0 sin8u_table::@24/(word) sin8u_table::i#1 )
  [34] if((word) sin8u_table::i#10<(const word) main::tabsize) goto sin8u_table::@2
  to:sin8u_table::@return
sin8u_table::@return: scope:[sin8u_table]  from sin8u_table::@1
  [35] return 
  to:@return
sin8u_table::@2: scope:[sin8u_table]  from sin8u_table::@1
  [36] (word) sin8s::x#2 ← (word) sin8u_table::x#10
  [37] call sin8s 
  [38] (signed byte) sin8s::return#2 ← (signed byte) sin8s::return#0
  to:sin8u_table::@14
sin8u_table::@14: scope:[sin8u_table]  from sin8u_table::@2
  [39] (signed byte) sin8u_table::sinx#0 ← (signed byte) sin8s::return#2
  [40] (signed byte) mul8su::a#0 ← (signed byte) sin8u_table::sinx#0
  [41] call mul8su 
  to:sin8u_table::@15
sin8u_table::@15: scope:[sin8u_table]  from sin8u_table::@14
  [42] (signed word) sin8u_table::sinx_sc#0 ← (signed word)(word) mul8su::m#2
  [43] (byte~) sin8u_table::$20 ← > (signed word) sin8u_table::sinx_sc#0
  [44] (byte) sin8u_table::sinx_tr#0 ← (const byte) sin8u_table::mid#0 + (byte~) sin8u_table::$20
  [45] *((byte*) sin8u_table::sintab#2) ← (byte) sin8u_table::sinx_tr#0
  [46] (byte*) sin8u_table::sintab#1 ← ++ (byte*) sin8u_table::sintab#2
  [47] (byte*) print_char_cursor#119 ← (byte*) print_line_cursor#0
  [48] call print_str 
  to:sin8u_table::@16
sin8u_table::@16: scope:[sin8u_table]  from sin8u_table::@15
  [49] (word) print_uint::w#2 ← (word) sin8u_table::x#10
  [50] call print_uint 
  to:sin8u_table::@17
sin8u_table::@17: scope:[sin8u_table]  from sin8u_table::@16
  [51] phi()
  [52] call print_str 
  to:sin8u_table::@18
sin8u_table::@18: scope:[sin8u_table]  from sin8u_table::@17
  [53] (signed byte) print_schar::b#1 ← (signed byte) sin8u_table::sinx#0
  [54] call print_schar 
  to:sin8u_table::@19
sin8u_table::@19: scope:[sin8u_table]  from sin8u_table::@18
  [55] phi()
  [56] call print_str 
  to:sin8u_table::@20
sin8u_table::@20: scope:[sin8u_table]  from sin8u_table::@19
  [57] (signed word) print_sint::w#1 ← (signed word) sin8u_table::sinx_sc#0
  [58] call print_sint 
  to:sin8u_table::@21
sin8u_table::@21: scope:[sin8u_table]  from sin8u_table::@20
  [59] phi()
  [60] call print_str 
  to:sin8u_table::@22
sin8u_table::@22: scope:[sin8u_table]  from sin8u_table::@21
  [61] (byte) print_uchar::b#7 ← (byte) sin8u_table::sinx_tr#0
  [62] call print_uchar 
  to:sin8u_table::@23
sin8u_table::@23: scope:[sin8u_table]  from sin8u_table::@22
  [63] phi()
  [64] call print_ln 
  to:sin8u_table::@24
sin8u_table::@24: scope:[sin8u_table]  from sin8u_table::@23
  [65] (word) sin8u_table::x#1 ← (word) sin8u_table::x#10 + (word) sin8u_table::step#0
  [66] (word) sin8u_table::i#1 ← ++ (word) sin8u_table::i#10
  to:sin8u_table::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [67] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [68] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [69] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [70] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [71] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [72] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8u_table
  [73] phi()
  [74] call divr16u 
  [75] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [76] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [77] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from sin8u_table::@11 sin8u_table::@15 sin8u_table::@17 sin8u_table::@19 sin8u_table::@21 sin8u_table::@3 sin8u_table::@5 sin8u_table::@7 sin8u_table::@9
  [78] (byte*) print_char_cursor#112 ← phi( sin8u_table::@11/(byte*) print_char_cursor#18 sin8u_table::@15/(byte*) print_char_cursor#119 sin8u_table::@17/(byte*) print_char_cursor#18 sin8u_table::@19/(byte*) print_char_cursor#18 sin8u_table::@21/(byte*) print_char_cursor#18 sin8u_table::@3/(const byte*) print_screen#0 sin8u_table::@5/(byte*) print_char_cursor#18 sin8u_table::@7/(byte*) print_char_cursor#18 sin8u_table::@9/(byte*) print_char_cursor#18 )
  [78] (byte*) print_str::str#13 ← phi( sin8u_table::@11/(const byte*) sin8u_table::str4 sin8u_table::@15/(const byte*) sin8u_table::str5 sin8u_table::@17/(const byte*) sin8u_table::str6 sin8u_table::@19/(const byte*) sin8u_table::str7 sin8u_table::@21/(const byte*) sin8u_table::str8 sin8u_table::@3/(const byte*) sin8u_table::str sin8u_table::@5/(const byte*) sin8u_table::str1 sin8u_table::@7/(const byte*) sin8u_table::str2 sin8u_table::@9/(const byte*) sin8u_table::str3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [79] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#112 print_str::@3/(byte*) print_char_cursor#18 )
  [79] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#13 print_str::@3/(byte*) print_str::str#0 )
  [80] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [81] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [82] (byte) print_char::ch#0 ← *((byte*) print_str::str#10)
  [83] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [84] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 sin8u_table::@16 sin8u_table::@4
  [85] (byte*) print_char_cursor#105 ← phi( print_sint::@2/(byte*) print_char_cursor#18 sin8u_table::@16/(byte*) print_char_cursor#1 sin8u_table::@4/(byte*) print_char_cursor#1 )
  [85] (word) print_uint::w#3 ← phi( print_sint::@2/(word) print_uint::w#0 sin8u_table::@16/(word) print_uint::w#2 sin8u_table::@4/(word) print_uint::w#1 )
  [86] (byte) print_uchar::b#1 ← > (word) print_uint::w#3
  [87] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [88] (byte) print_uchar::b#2 ← < (word) print_uint::w#3
  [89] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [90] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 sin8u_table::@10 sin8u_table::@12 sin8u_table::@22 sin8u_table::@6 sin8u_table::@8
  [91] (byte*) print_char_cursor#106 ← phi( print_schar::@2/(byte*) print_char_cursor#18 print_uint/(byte*) print_char_cursor#105 print_uint::@1/(byte*) print_char_cursor#18 sin8u_table::@10/(byte*) print_char_cursor#1 sin8u_table::@12/(byte*) print_char_cursor#1 sin8u_table::@22/(byte*) print_char_cursor#1 sin8u_table::@6/(byte*) print_char_cursor#1 sin8u_table::@8/(byte*) print_char_cursor#1 )
  [91] (byte) print_uchar::b#8 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 sin8u_table::@10/(const byte) sin8u_table::amplitude#0 sin8u_table::@12/(const byte) sin8u_table::mid#0 sin8u_table::@22/(byte) print_uchar::b#7 sin8u_table::@6/(const byte) sin8u_table::min#0 sin8u_table::@8/(const byte) sin8u_table::max#0 )
  [92] (byte~) print_uchar::$0 ← (byte) print_uchar::b#8 >> (byte) 4
  [93] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [94] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [95] (byte~) print_uchar::$2 ← (byte) print_uchar::b#8 & (byte) $f
  [96] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [97] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [98] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from sin8u_table::@13 sin8u_table::@23
  [99] (byte*) print_line_cursor#25 ← phi( sin8u_table::@13/(const byte*) print_screen#0 sin8u_table::@23/(byte*) print_line_cursor#0 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [100] (byte*) print_line_cursor#13 ← phi( print_ln/(byte*) print_line_cursor#25 print_ln::@1/(byte*) print_line_cursor#0 )
  [101] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#13 + (byte) $28
  [102] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [103] return 
  to:@return

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8u_table::@2
  [104] if((word) sin8s::x#2<(const nomodify word) PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [105] (word) sin8s::x#0 ← (word) sin8s::x#2 - (const nomodify word) PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [106] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [106] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#2 sin8s::@5/(word) sin8s::x#0 )
  [107] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [108] (word) sin8s::x#1 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [109] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#1 )
  [110] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [111] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [112] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [113] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [114] call mulu8_sel 
  [115] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [116] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [117] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [118] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [119] call mulu8_sel 
  [120] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [121] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [122] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [123] call mulu8_sel 
  [124] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [125] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [126] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [127] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [128] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [129] call mulu8_sel 
  [130] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [131] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [132] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [133] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [134] call mulu8_sel 
  [135] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [136] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [137] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [138] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [139] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [140] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [141] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [142] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [143] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [144] (signed byte) sin8s::return#0 ← phi( sin8s::@14/(signed byte) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [145] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [146] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4

(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
mul8su: scope:[mul8su]  from sin8u_table::@14
  [147] (byte) mul8u::a#1 ← (byte)(signed byte) mul8su::a#0
  [148] call mul8u 
  [149] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8su::@3
mul8su::@3: scope:[mul8su]  from mul8su
  [150] (word) mul8su::m#0 ← (word) mul8u::return#2
  [151] if((signed byte) mul8su::a#0>=(signed byte) 0) goto mul8su::@1
  to:mul8su::@2
mul8su::@2: scope:[mul8su]  from mul8su::@3
  [152] (byte~) mul8su::$4 ← > (word) mul8su::m#0
  [153] (byte~) mul8su::$6 ← (byte~) mul8su::$4 - (const byte) mul8su::b#0
  [154] (word) mul8su::m#1 ← (word) mul8su::m#0 hi= (byte~) mul8su::$6
  to:mul8su::@1
mul8su::@1: scope:[mul8su]  from mul8su::@2 mul8su::@3
  [155] (word) mul8su::m#2 ← phi( mul8su::@2/(word) mul8su::m#1 mul8su::@3/(word) mul8su::m#0 )
  to:mul8su::@return
mul8su::@return: scope:[mul8su]  from mul8su::@1
  [156] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from sin8u_table::@18
  [157] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [158] phi()
  [159] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [160] (signed byte) print_schar::b#4 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#1 )
  [161] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
  [162] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [163] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [164] phi()
  [165] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [166] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1
  to:print_schar::@2

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from sin8u_table::@20
  [167] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [168] phi()
  [169] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [170] (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#1 )
  [171] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  [172] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [173] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [174] phi()
  [175] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [176] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1
  to:print_sint::@2

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u
  [177] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [178] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [178] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [178] (word) divr16u::dividend#2 ← phi( divr16u/(const nomodify word) PI2_u4f12 divr16u::@3/(word) divr16u::dividend#0 )
  [178] (word) divr16u::rem#4 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#9 )
  [179] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [180] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [181] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [182] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [183] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [184] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [185] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [186] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [187] if((word) divr16u::rem#5<(const word) main::tabsize) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [188] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [189] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::tabsize
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [190] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [190] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [191] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [192] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [193] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [194] (byte*) print_char_cursor#67 ← phi( print_schar::@1/(byte*) print_char_cursor#1 print_schar::@3/(byte*) print_char_cursor#1 print_sint::@1/(byte*) print_char_cursor#1 print_sint::@3/(byte*) print_char_cursor#1 print_str::@2/(byte*) print_char_cursor#1 print_uchar/(byte*) print_char_cursor#106 print_uchar::@1/(byte*) print_char_cursor#18 )
  [194] (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  [195] *((byte*) print_char_cursor#67) ← (byte) print_char::ch#7
  [196] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#67
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [197] return 
  to:@return

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [198] (byte) mulu8_sel::select#5 ← phi( sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 sin8s::@9/(byte) 1 )
  [198] (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(const nomodify byte) sin8s::DIV_6 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 sin8s::@9/(byte) mulu8_sel::v2#1 )
  [198] (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 sin8s::@9/(byte) mulu8_sel::v1#1 )
  [199] (byte) mul8u::a#2 ← (byte) mulu8_sel::v1#5
  [200] (byte) mul8u::b#1 ← (byte) mulu8_sel::v2#5
  [201] call mul8u 
  [202] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [203] (word~) mulu8_sel::$0 ← (word) mul8u::return#3
  [204] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [205] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [206] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8su mulu8_sel
  [207] (byte) mul8u::a#6 ← phi( mul8su/(byte) mul8u::a#1 mulu8_sel/(byte) mul8u::a#2 )
  [207] (byte) mul8u::b#2 ← phi( mul8su/(const byte) mul8su::b#0 mulu8_sel/(byte) mul8u::b#1 )
  [208] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [209] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [209] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [209] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [210] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [211] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [212] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [213] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [214] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [215] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [216] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [217] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
