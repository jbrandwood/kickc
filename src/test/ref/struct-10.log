Fixing pointer array-indexing *((struct RadixInfo) main::info.values + (number) 1)
Fixing pointer array-indexing *((word*) main::SCREEN + (number) 0)
Fixing pointer array-indexing *((word[]) RADIX_DECIMAL_VALUES + (number) 1)
Fixing pointer array-indexing *((word*) main::SCREEN + (number) 1)
Created struct value member variable (word*) main::info_values
Converted struct value to member variables (struct RadixInfo) main::info
Adding struct value list initializer (word*) main::info_values ← (word[]) RADIX_DECIMAL_VALUES
Replacing struct member reference (struct RadixInfo) main::info.values with member unwinding reference (word*) main::info_values

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (word[]) RADIX_DECIMAL_VALUES#0 ← { (number) $2710, (number) $3e8, (number) $64, (number) $a }
  to:@1
main: scope:[main]  from @1
  (word*) main::SCREEN#0 ← ((word*)) (number) $400
  (word*) main::info_values#0 ← (word[]) RADIX_DECIMAL_VALUES#0
  (number~) main::$0 ← (number) 1 * (const byte) SIZEOF_WORD
  (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_WORD
  *((word*) main::SCREEN#0 + (number~) main::$1) ← *((word*) main::info_values#0 + (number~) main::$0)
  (number~) main::$2 ← (number) 1 * (const byte) SIZEOF_WORD
  *((word*) main::SCREEN#0 + (number~) main::$2) ← *((word[]) RADIX_DECIMAL_VALUES#0 + (number~) main::$2)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(word[]) RADIX_DECIMAL_VALUES
(word[]) RADIX_DECIMAL_VALUES#0
(word*) RadixInfo::values
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(number~) main::$0
(number~) main::$1
(number~) main::$2
(label) main::@return
(word*) main::SCREEN
(word*) main::SCREEN#0
(word*) main::info_values
(word*) main::info_values#0

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 0 in (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 1 in (number~) main::$2 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (word[]) RADIX_DECIMAL_VALUES#0 ← (word[]){ (word)(number) $2710, (word)(number) $3e8, (word)(number) $64, (word)(number) $a }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (word*) main::SCREEN#0 ← (word*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $2710
Simplifying constant integer cast $3e8
Simplifying constant integer cast $64
Simplifying constant integer cast $a
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 0 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [3] (byte~) main::$0 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [4] (byte~) main::$1 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [6] (byte~) main::$2 ← (byte) 1 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (word[]) { (word) $2710, (word) $3e8, (word) $64, (word) $a }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const word[]) RADIX_DECIMAL_VALUES#0 = { $2710, $3e8, $64, $a }
Constant (const word*) main::SCREEN#0 = (word*) 1024
Constant (const byte) main::$0 = 1*SIZEOF_WORD
Constant (const byte) main::$1 = 0*SIZEOF_WORD
Constant (const byte) main::$2 = 1*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Constant (const word*) main::info_values#0 = RADIX_DECIMAL_VALUES#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN#0 in [5] *((const word*) main::SCREEN#0 + (const byte) main::$1) ← *((const word*) main::info_values#0 + (const byte) main::$0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$1
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::info_values#0 = (const word[]) RADIX_DECIMAL_VALUES#0
Constant inlined main::$2 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$0 = (byte) 1*(const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(RADIX_DECIMAL_VALUES#0+1*SIZEOF_WORD)
Consolidated array index constant in *(RADIX_DECIMAL_VALUES#0+1*SIZEOF_WORD)
Consolidated array index constant in *(main::SCREEN#0+1*SIZEOF_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const word*) main::SCREEN#0) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD)
  [5] *((const word*) main::SCREEN#0+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD)
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word[]) RADIX_DECIMAL_VALUES
(word*) RadixInfo::values
(void()) main()
(word*) main::SCREEN
(word*) main::info_values

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic
  // File Comments
// Illustrates a problem with pointer sizeof()-rewriting for pointers inside structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((const word*) main::SCREEN#0) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1
    // [5] *((const word*) main::SCREEN#0+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN+1*SIZEOF_WORD
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1*SIZEOF_WORD+1
    jmp breturn
    // main::@return
  breturn:
    // [6] return 
    rts
}
  // File Data
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const word*) main::SCREEN#0) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const word*) main::SCREEN#0+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [RadixInfo] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [RadixInfo] best 53 combination 
Uplifting [main] best 53 combination 
Uplifting [] best 53 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem with pointer sizeof()-rewriting for pointers inside structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((const word*) main::SCREEN#0) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1
    // [5] *((const word*) main::SCREEN#0+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN+1*SIZEOF_WORD
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1*SIZEOF_WORD+1
    jmp breturn
    // main::@return
  breturn:
    // [6] return 
    rts
}
  // File Data
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(word[]) RADIX_DECIMAL_VALUES
(const word[]) RADIX_DECIMAL_VALUES#0 RADIX_DECIMAL_VALUES = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(word*) RadixInfo::values
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(word*) main::SCREEN
(const word*) main::SCREEN#0 SCREEN = (word*) 1024
(word*) main::info_values



FINAL ASSEMBLER
Score: 38

  // File Comments
// Illustrates a problem with pointer sizeof()-rewriting for pointers inside structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // SCREEN[0] = info.values[1]
    // [4] *((const word*) main::SCREEN#0) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1
    // SCREEN[1] = RADIX_DECIMAL_VALUES[1]
    // [5] *((const word*) main::SCREEN#0+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word[]) RADIX_DECIMAL_VALUES#0+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN+1*SIZEOF_WORD
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1*SIZEOF_WORD+1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a

