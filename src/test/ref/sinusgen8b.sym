__constant const unsigned int PI2_u4f12 = $6488
__constant const unsigned long PI2_u4f28 = $6487ed51
__constant const unsigned int PI_HALF_u4f12 = $1922
__constant const unsigned long PI_HALF_u4f28 = $1921fb54
__constant const unsigned int PI_u4f12 = $3244
__constant const unsigned long PI_u4f28 = $3243f6a9
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char SIZEOF_INT = 2
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::dividend
unsigned int div16u::divisor
unsigned int div16u::return
unsigned int div16u::return#0 // return zp[2]:42 22.0
unsigned int div16u::return#1 // return zp[2]:42 37.33333333333333
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned long div32u16u::dividend
unsigned int div32u16u::divisor
unsigned long div32u16u::quotient
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0 // quotient_hi zp[2]:34 40.4
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0 // quotient_lo zp[2]:42 202.0
unsigned long div32u16u::return
unsigned long div32u16u::return#0 // return zp[4]:27 22.0
unsigned long div32u16u::return#1 // return zp[4]:27 37.33333333333333
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 20002.0
char divr16u::$2 // reg byte a 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:18 2500.25
unsigned int divr16u::dividend#4 // dividend zp[2]:18 4429.142857142857
unsigned int divr16u::dividend#6 // dividend zp[2]:18 1001.0
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 15001.5
char divr16u::i#2 // reg byte x 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:42 15001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:42 10001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:42 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:25 7500.75
unsigned int divr16u::rem#1 // rem zp[2]:25 20002.0
unsigned int divr16u::rem#10 // rem zp[2]:25 10334.666666666666
unsigned int divr16u::rem#11 // rem zp[2]:25 1102.0
unsigned int divr16u::rem#2 // rem zp[2]:25 20002.0
unsigned int divr16u::rem#5 // rem zp[2]:25 202.0
unsigned int divr16u::rem#6 // rem zp[2]:25 21003.0
unsigned int divr16u::rem#7 // rem zp[2]:25 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:42 3788.25
unsigned int divr16u::return#2 // return zp[2]:42 202.0
unsigned int divr16u::return#3 // return zp[2]:42 202.0
unsigned int divr16u::return#4 // return zp[2]:42 202.0
void main()
unsigned int main::$10 // zp[2]:25 22.0
char main::$11 // reg byte a 11.0
int *main::$3 // zp[2]:25 22.0
unsigned int main::$9 // zp[2]:25 22.0
char main::i
char main::i#1 // i zp[1]:2 16.5
char main::i#2 // i zp[1]:2 2.75
signed char main::sb
signed char main::sb#0 // sb zp[1]:24 3.6666666666666665
signed char main::sd
signed char main::sd#0 // reg byte a 22.0
__constant signed char main::sintabb[$c0] = { fill( $c0, 0) }
__constant int main::sintabw[$c0] = { fill( $c0, 0) }
__constant char main::str[3] = "  "
int main::sw
int main::sw#0 // sw zp[2]:25 22.0
__constant unsigned int main::wavelength = $c0
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:15 2002.0
char *memset::dst#2 // dst zp[2]:15 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // reg byte a 2.0000002E7
unsigned int mul16u::a
unsigned int mul16u::a#0 // a zp[2]:42 36667.33333333333
unsigned int mul16u::a#1 // a zp[2]:42 1.0000001E7
unsigned int mul16u::a#2 // a zp[2]:42 6683334.166666666
unsigned int mul16u::b
unsigned int mul16u::b#0 // b zp[2]:18 10001.0
unsigned long mul16u::mb
unsigned long mul16u::mb#0 // mb zp[4]:20 200002.0
unsigned long mul16u::mb#1 // mb zp[4]:20 2.0000002E7
unsigned long mul16u::mb#2 // mb zp[4]:20 4300000.571428571
unsigned long mul16u::res
unsigned long mul16u::res#1 // res zp[4]:36 2.0000002E7
unsigned long mul16u::res#2 // res zp[4]:36 5001667.333333333
unsigned long mul16u::res#6 // res zp[4]:36 1.0000001E7
unsigned long mul16u::return
unsigned long mul16u::return#0 // return zp[4]:36 20002.0
unsigned int mul8u(char a , char b)
char mul8u::$1 // reg byte a 2.0000002E7
char mul8u::a
char mul8u::a#0 // reg byte x 36667.33333333333
char mul8u::a#1 // reg byte x 1.0000001E7
char mul8u::a#2 // reg byte x 6683334.166666666
char mul8u::b
char mul8u::b#0 // reg byte a 10001.0
unsigned int mul8u::mb
unsigned int mul8u::mb#0 // mb zp[2]:34 200002.0
unsigned int mul8u::mb#1 // mb zp[2]:34 2.0000002E7
unsigned int mul8u::mb#2 // mb zp[2]:34 4300000.571428571
unsigned int mul8u::res
unsigned int mul8u::res#1 // res zp[2]:25 2.0000002E7
unsigned int mul8u::res#2 // res zp[2]:25 5001667.333333333
unsigned int mul8u::res#6 // res zp[2]:25 1.0000001E7
unsigned int mul8u::return
unsigned int mul8u::return#0 // return zp[2]:25 20002.0
unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
unsigned long mulu16_sel::$0 // zp[4]:36 20002.0
unsigned long mulu16_sel::$1 // zp[4]:36 20002.0
unsigned int mulu16_sel::return
unsigned int mulu16_sel::return#0 // return zp[2]:42 2002.0
unsigned int mulu16_sel::return#1 // return_1 zp[2]:25 2002.0
unsigned int mulu16_sel::return#10 // return_1 zp[2]:25 2002.0
unsigned int mulu16_sel::return#11 // return zp[2]:42 2002.0
unsigned int mulu16_sel::return#12 // return zp[2]:42 2143.714285714286
unsigned int mulu16_sel::return#2 // return zp[2]:42 2002.0
char mulu16_sel::select
char mulu16_sel::select#5 // reg byte x 1666.8333333333333
unsigned int mulu16_sel::v1
unsigned int mulu16_sel::v1#0 // v1 zp[2]:25 1001.0
unsigned int mulu16_sel::v1#1 // v1 zp[2]:25 1001.0
unsigned int mulu16_sel::v1#2 // v1 zp[2]:25 2002.0
unsigned int mulu16_sel::v1#3 // v1 zp[2]:25 1001.0
unsigned int mulu16_sel::v1#4 // v1 zp[2]:25 1001.0
unsigned int mulu16_sel::v1#5 // v1 zp[2]:25 15006.0
unsigned int mulu16_sel::v2
unsigned int mulu16_sel::v2#0 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#1 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#3 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#4 // v2 zp[2]:18 2002.0
unsigned int mulu16_sel::v2#5 // v2 zp[2]:18 7002.5
char mulu8_sel(char v1 , char v2 , char select)
unsigned int mulu8_sel::$0 // zp[2]:25 20002.0
unsigned int mulu8_sel::$1 // zp[2]:25 20002.0
char mulu8_sel::return
char mulu8_sel::return#0 // reg byte a 2002.0
char mulu8_sel::return#1 // reg byte a 2002.0
char mulu8_sel::return#10 // reg byte a 2002.0
char mulu8_sel::return#11 // reg byte a 2002.0
char mulu8_sel::return#12 // reg byte a 2143.714285714286
char mulu8_sel::return#2 // reg byte a 2002.0
char mulu8_sel::select
char mulu8_sel::select#5 // select zp[1]:17 1666.8333333333333
char mulu8_sel::v1
char mulu8_sel::v1#0 // reg byte x 1001.0
char mulu8_sel::v1#1 // reg byte x 1001.0
char mulu8_sel::v1#2 // reg byte x 2002.0
char mulu8_sel::v1#3 // reg byte x 1001.0
char mulu8_sel::v1#4 // reg byte x 1001.0
char mulu8_sel::v1#5 // reg byte x 15006.0
char mulu8_sel::v2
char mulu8_sel::v2#0 // reg byte y 2002.0
char mulu8_sel::v2#1 // reg byte y 2002.0
char mulu8_sel::v2#3 // reg byte y 2002.0
char mulu8_sel::v2#4 // reg byte y 2002.0
char mulu8_sel::v2#5 // reg byte y 7002.5
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 2002.0
char print_char::ch#4 // reg byte a 2002.0
char print_char::ch#5 // reg byte a 112004.0
char *print_char_cursor
char *print_char_cursor#10 // print_char_cursor zp[2]:15 4000.535714285714
char *print_char_cursor#29 // print_char_cursor zp[2]:15 106103.5
char *print_char_cursor#45 // print_char_cursor zp[2]:15 17.75
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // reg byte x 202.0
signed char print_schar::b#1 // reg byte x 52.33333333333333
signed char print_schar::b#4 // reg byte x 202.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:40 20002.0
char *print_str::str#2 // str zp[2]:40 10001.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 2002.0
char print_uchar::$2 // reg byte x 2002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 525.75
unsigned int rem16u
unsigned int rem16u#21 // rem16u zp[2]:25 220.39999999999998
int sin16s(unsigned long x)
unsigned long sin16s::$4 // zp[4]:36 2002.0
char sin16s::isUpper
char sin16s::isUpper#2 // reg byte y 30.333333333333332
int sin16s::return
int sin16s::return#0 // return zp[2]:13 202.0
int sin16s::return#1 // return zp[2]:13 701.0
int sin16s::return#5 // return zp[2]:13 2002.0
int sin16s::sinx
int sin16s::sinx#1 // sinx zp[2]:13 2002.0
unsigned int sin16s::usinx
unsigned int sin16s::usinx#0 // usinx zp[2]:13 166.83333333333334
unsigned int sin16s::usinx#1 // usinx zp[2]:13 500.5
unsigned long sin16s::x
unsigned long sin16s::x#0 // x zp[4]:9 1552.0
unsigned long sin16s::x#1 // x zp[4]:9 2002.0
unsigned long sin16s::x#2 // x zp[4]:9 2002.0
unsigned long sin16s::x#4 // x zp[4]:9 2502.5
unsigned long sin16s::x#6 // x zp[4]:9 3003.0
unsigned int sin16s::x1
unsigned int sin16s::x1#0 // x1 zp[2]:40 318.5
unsigned int sin16s::x2
unsigned int sin16s::x2#0 // x2 zp[2]:25 2002.0
unsigned int sin16s::x3
unsigned int sin16s::x3#0 // x3 zp[2]:25 500.5
unsigned int sin16s::x3_6
unsigned int sin16s::x3_6#0 // x3_6 zp[2]:42 2002.0
unsigned int sin16s::x4
unsigned int sin16s::x4#0 // x4 zp[2]:25 2002.0
unsigned int sin16s::x5
unsigned int sin16s::x5#0 // x5 zp[2]:42 2002.0
unsigned int sin16s::x5_128
unsigned int sin16s::x5_128#0 // x5_128 zp[2]:42 2002.0
void sin16s_gen(int *sintab , unsigned int wavelength)
int sin16s_gen::$2 // zp[2]:13 202.0
unsigned int sin16s_gen::i
unsigned int sin16s_gen::i#1 // i zp[2]:15 202.0
unsigned int sin16s_gen::i#2 // i zp[2]:15 33.666666666666664
int *sin16s_gen::sintab
int *sin16s_gen::sintab#0 // sintab zp[2]:7 67.33333333333333
int *sin16s_gen::sintab#2 // sintab zp[2]:7 43.285714285714285
unsigned long sin16s_gen::step
unsigned long sin16s_gen::step#0 // step zp[4]:27 10.181818181818182
unsigned int sin16s_gen::wavelength
unsigned long sin16s_gen::x
unsigned long sin16s_gen::x#1 // x zp[4]:3 101.0
unsigned long sin16s_gen::x#2 // x zp[4]:3 37.875
signed char sin8s(unsigned int x)
unsigned int sin8s::$4 // zp[2]:13 2002.0
__constant const char sin8s::DIV_6 = $2b
char sin8s::isUpper
char sin8s::isUpper#10 // isUpper zp[1]:24 27.805555555555557
signed char sin8s::return
signed char sin8s::return#0 // reg byte a 202.0
signed char sin8s::return#1 // reg byte a 701.0
signed char sin8s::return#5 // reg byte a 2002.0
signed char sin8s::sinx
signed char sin8s::sinx#1 // reg byte a 2002.0
char sin8s::usinx
char sin8s::usinx#0 // usinx zp[1]:33 166.83333333333334
char sin8s::usinx#1 // reg byte x 2002.0
char sin8s::usinx#2 // reg byte x 2002.0
char sin8s::usinx#4 // reg byte x 1001.0
unsigned int sin8s::x
unsigned int sin8s::x#0 // x zp[2]:13 1552.0
unsigned int sin8s::x#1 // x zp[2]:13 2002.0
unsigned int sin8s::x#2 // x zp[2]:13 2002.0
unsigned int sin8s::x#4 // x zp[2]:13 2502.5
unsigned int sin8s::x#6 // x zp[2]:13 3003.0
char sin8s::x1
char sin8s::x1#0 // x1 zp[1]:31 318.5
char sin8s::x2
char sin8s::x2#0 // reg byte a 2002.0
char sin8s::x3
char sin8s::x3#0 // x3 zp[1]:32 500.5
char sin8s::x3_6
char sin8s::x3_6#0 // reg byte a 2002.0
char sin8s::x4
char sin8s::x4#0 // reg byte a 2002.0
char sin8s::x5
char sin8s::x5#0 // reg byte a 2002.0
char sin8s::x5_128
char sin8s::x5_128#0 // reg byte a 2002.0
void sin8s_gen(signed char *sintab , unsigned int wavelength)
signed char sin8s_gen::$2 // reg byte a 202.0
unsigned int sin8s_gen::i
unsigned int sin8s_gen::i#1 // i zp[2]:15 202.0
unsigned int sin8s_gen::i#2 // i zp[2]:15 33.666666666666664
signed char *sin8s_gen::sintab
signed char *sin8s_gen::sintab#0 // sintab zp[2]:40 67.33333333333333
signed char *sin8s_gen::sintab#2 // sintab zp[2]:40 43.285714285714285
unsigned int sin8s_gen::step
unsigned int sin8s_gen::step#0 // step zp[2]:42 10.181818181818182
unsigned int sin8s_gen::wavelength
unsigned int sin8s_gen::x
unsigned int sin8s_gen::x#1 // x zp[2]:7 101.0
unsigned int sin8s_gen::x#2 // x zp[2]:7 37.875

zp[1]:2 [ main::i#2 main::i#1 ]
zp[4]:3 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
zp[2]:7 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 sin8s_gen::x#2 sin8s_gen::x#1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:9 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[2]:13 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:15 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 memset::dst#2 memset::dst#1 sin16s_gen::i#2 sin16s_gen::i#1 sin8s_gen::i#2 sin8s_gen::i#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:17 [ mulu8_sel::select#5 ]
zp[2]:18 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
reg byte x [ mulu16_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
zp[4]:20 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[1]:24 [ main::sb#0 sin8s::isUpper#10 ]
zp[2]:25 [ main::$10 main::$9 main::$3 main::sw#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#21 ]
reg byte a [ main::$11 ]
reg byte a [ main::sd#0 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
zp[4]:27 [ div32u16u::return#0 sin16s_gen::step#0 div32u16u::return#1 ]
reg byte x [ print_uchar::b#0 ]
zp[1]:31 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:32 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:33 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
zp[2]:34 [ div32u16u::quotient_hi#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
zp[4]:36 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mulu16_sel::$0 mulu16_sel::$1 ]
zp[2]:40 [ sin16s::x1#0 print_str::str#2 print_str::str#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp[2]:42 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 mul16u::a#2 mul16u::a#0 mul16u::a#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#0 sin8s_gen::step#0 div16u::return#1 div32u16u::quotient_lo#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
reg byte a [ mul16u::$1 ]
