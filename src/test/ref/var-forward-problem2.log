Resolved forward reference screen to (byte*) screen
Resolved forward reference b to (byte) b
Resolved forward reference b to (byte) b
Resolved forward reference screen to (byte*) screen

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) screen#0 ← ((byte*)) (number) $400
  (byte) b#0 ← (byte) 'a'
  *((byte*) screen#0) ← (byte) b#0
  to:main::@return
main::@return: scope:[main]  from main
  (byte) b#4 ← phi( main/(byte) b#0 )
  (byte*) screen#4 ← phi( main/(byte*) screen#0 )
  (byte*) screen#1 ← (byte*) screen#4
  (byte) b#1 ← (byte) b#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) screen#2 ← (byte*) 0
  (byte) b#2 ← (byte) 0
  call main 
  to:@2
@2: scope:[]  from @1
  (byte) b#5 ← phi( @1/(byte) b#1 )
  (byte*) screen#5 ← phi( @1/(byte*) screen#1 )
  (byte*) screen#3 ← (byte*) screen#5
  (byte) b#3 ← (byte) b#5
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) b
(byte) b#0
(byte) b#1
(byte) b#2
(byte) b#3
(byte) b#4
(byte) b#5
(void()) main()
(label) main::@return
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5

Inlining cast (byte*) screen#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias (byte*) screen#0 = (byte*) screen#4 (byte*) screen#1 
Alias (byte) b#0 = (byte) b#4 (byte) b#1 
Alias (byte*) screen#3 = (byte*) screen#5 
Alias (byte) b#3 = (byte) b#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) screen#3 (byte*) screen#0
Identical Phi Values (byte) b#3 (byte) b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) screen#0 = (byte*) 1024
Constant (const byte) b#0 = 'a'
Constant (const byte*) screen#2 = (byte*) 0
Constant (const byte) b#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte*) screen#2
Eliminating unused constant (const byte) b#2
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) screen#0) ← (const byte) b#0
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) b
(void()) main()
(byte*) screen

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates the problem with variable forward references not working
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  .const b = 'a'
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) screen#0) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) screen#0) ← (const byte) b#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates the problem with variable forward references not working
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  .const b = 'a'
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) screen#0) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) b
(const byte) b#0 b = (byte) 'a'
(void()) main()
(label) main::@return
(byte*) screen
(const byte*) screen#0 screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Illustrates the problem with variable forward references not working
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  .const b = 'a'
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // *screen = b
    // [4] *((const byte*) screen#0) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

