
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@18
print_str: scope:[print_str]  from main
  (byte*) print_char_cursor#21 ← phi( main/(byte*) print_char_cursor#19 )
  (byte*) print_str::str#4 ← phi( main/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#17 ← phi( print_str/(byte*) print_char_cursor#21 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#2) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#9 ← phi( print_str::@1/(byte*) print_char_cursor#17 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#9) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#9
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#10 ← phi( print_str::@1/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#10
  return 
  to:@return
print_ln: scope:[print_ln]  from main::@1
  (byte*) print_char_cursor#18 ← phi( main::@1/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#12 ← phi( main::@1/(byte*) print_line_cursor#13 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#11 ← phi( print_ln/(byte*) print_char_cursor#18 print_ln::@1/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#6 ← phi( print_ln/(byte*) print_line_cursor#12 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#11
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#7 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#7
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#12 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#8 ← phi( print_ln::@2/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#12
  return 
  to:@return
main: scope:[main]  from @18
  (byte*) print_line_cursor#15 ← phi( @18/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#19 ← phi( @18/(byte*) print_char_cursor#20 )
  (byte*) print_str::str#1 ← (const string) main::str
  call print_str 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#13 ← phi( main/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#13
  call print_ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_char_cursor#14 ← phi( main::@1/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#9 ← phi( main::@1/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#14
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) print_line_cursor#10 ← phi( main::@2/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#15 ← phi( main::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#15
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#10
  return 
  to:@return
@18: scope:[]  from @begin
  (byte*) print_line_cursor#14 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#20 ← phi( @begin/(byte*) print_char_cursor#0 )
  call main 
  to:@19
@19: scope:[]  from @18
  (byte*) print_line_cursor#11 ← phi( @18/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#16 ← phi( @18/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#16
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#11
  to:@end
@end: scope:[]  from @19

SYMBOL TABLE SSA
(label) @18
(label) @19
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const string) main::str = (string) "hello world!@"
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#3
(byte*) print_char_cursor#4
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4

Alias (byte*) print_char_cursor#0 = (byte*) print_line_cursor#0 (byte*) print_screen#0 (byte*) print_char_cursor#20 (byte*) print_line_cursor#14 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#9 (byte*) print_char_cursor#17 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#7 (byte*) print_char_cursor#3 (byte*) print_line_cursor#8 (byte*) print_char_cursor#12 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#15 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#5 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#3 (byte*) print_line_cursor#9 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#6 (byte*) print_char_cursor#15 (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#8 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#11
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_str::str#4 (byte*) print_str::str#1
Redundant Phi (byte*) print_char_cursor#21 (byte*) print_char_cursor#19
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#13
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_char_cursor#13
Redundant Phi (byte*) print_char_cursor#11 (byte*) print_char_cursor#18
Redundant Phi (byte*) print_char_cursor#19 (byte*) print_char_cursor#0
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_char_cursor#0
Redundant Phi (byte*) print_char_cursor#13 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_char_cursor#14
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_line_cursor#10
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_str::$0 if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_char_cursor#0 = ((byte*))1024
Constant (const byte*) print_str::str#1 = main::str
Successful SSA optimization Pass2ConstantIdentification
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) main::@2
Culled Empty Block (label) @19
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_char_cursor#0
Constant inlined print_char_cursor#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined print_str::str#1 = (const string) main::str
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @18
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_str:5 print_ln:7 

Created 3 initial phi equivalence classes
Coalesced [14] print_line_cursor#16 ← print_line_cursor#1
Coalesced [22] print_str::str#5 ← print_str::str#0
Coalesced [23] print_char_cursor#22 ← print_char_cursor#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) print_ln::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @18
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@18
@18: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @18
  [3] phi() [ ] ( )
main: scope:[main]  from @18
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_str  [ print_char_cursor#10 ] ( main:2 [ print_char_cursor#10 ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ print_char_cursor#10 ] ( main:2 [ print_char_cursor#10 ] )
  [7] call print_ln  [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return  [ ] ( main:2 [ ] )
  to:@return
print_ln: scope:[print_ln]  from main::@1
  [9] phi() [ print_char_cursor#10 ] ( main:2::print_ln:7 [ print_char_cursor#10 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [10] (byte*) print_line_cursor#6 ← phi( print_ln/((byte*))(word/signed word/dword/signed dword) 1024 print_ln::@1/(byte*) print_line_cursor#1 ) [ print_line_cursor#6 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#6 print_char_cursor#10 ] )
  [11] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] )
  [12] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [13] return  [ ] ( main:2::print_ln:7 [ ] )
  to:@return
print_str: scope:[print_str]  from main
  [14] phi() [ ] ( main:2::print_str:5 [ ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [15] (byte*) print_char_cursor#10 ← phi( print_str/((byte*))(word/signed word/dword/signed dword) 1024 print_str::@2/(byte*) print_char_cursor#1 ) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] )
  [15] (byte*) print_str::str#2 ← phi( print_str/(const string) main::str print_str::@2/(byte*) print_str::str#0 ) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] )
  [16] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [17] return  [ print_char_cursor#10 ] ( main:2::print_str:5 [ print_char_cursor#10 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [18] *((byte*) print_char_cursor#10) ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] )
  [19] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#10 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#2 print_char_cursor#1 ] )
  [20] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#0 print_char_cursor#1 ] )
  to:print_str::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) print_char_cursor
(byte*) print_char_cursor#1 11.0
(byte*) print_char_cursor#10 4.4
(byte*) print_line_cursor
(byte*) print_line_cursor#1 16.5
(byte*) print_line_cursor#6 22.0
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 22.0
(byte*) print_str::str#2 11.0

Initial phi equivalence classes
[ print_line_cursor#6 print_line_cursor#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char_cursor#10 print_char_cursor#1 ]
Complete equivalence classes
[ print_line_cursor#6 print_line_cursor#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char_cursor#10 print_char_cursor#1 ]
Allocated zp ZP_WORD:2 [ print_line_cursor#6 print_line_cursor#1 ]
Allocated zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ]
Allocated zp ZP_WORD:6 [ print_char_cursor#10 print_char_cursor#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 6
  .label print_line_cursor = 2
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @18 [phi:@begin->@18]
b18_from_bbegin:
  jmp b18
//SEG4 @18
b18:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @18 to main [phi:@18->main]
main_from_b18:
  jsr main
//SEG7 [3] phi from @18 to @end [phi:@18->@end]
bend_from_b18:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_str  [ print_char_cursor#10 ] ( main:2 [ print_char_cursor#10 ] )
  //SEG11 [14] phi from main to print_str [phi:main->print_str]
  print_str_from_main:
    jsr print_str
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call print_ln  [ ] ( main:2 [ ] )
  //SEG15 [9] phi from main::@1 to print_ln [phi:main::@1->print_ln]
  print_ln_from_b1:
    jsr print_ln
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
    str: .text "hello world!@"
}
//SEG18 print_ln
print_ln: {
  //SEG19 [10] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
  b1_from_print_ln:
  //SEG20 [10] phi (byte*) print_line_cursor#6 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jmp b1
  //SEG21 [10] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
  b1_from_b1:
  //SEG22 [10] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#1 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG23 print_ln::@1
  b1:
  //SEG24 [11] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG25 [12] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG26 print_ln::@return
  breturn:
  //SEG27 [13] return  [ ] ( main:2::print_ln:7 [ ] )
    rts
}
//SEG28 print_str
print_str: {
    .label str = 4
  //SEG29 [15] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG30 [15] phi (byte*) print_char_cursor#10 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG31 [15] phi (byte*) print_str::str#2 = (const string) main::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<main.str
    sta str
    lda #>main.str
    sta str+1
    jmp b1
  //SEG32 print_str::@1
  b1:
  //SEG33 [16] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG34 print_str::@return
  breturn:
  //SEG35 [17] return  [ print_char_cursor#10 ] ( main:2::print_str:5 [ print_char_cursor#10 ] )
    rts
  //SEG36 print_str::@2
  b2:
  //SEG37 [18] *((byte*) print_char_cursor#10) ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG38 [19] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#10 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#2 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG39 [20] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG40 [15] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG41 [15] phi (byte*) print_char_cursor#10 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG42 [15] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) always clobbers reg byte a 
Statement [12] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) always clobbers reg byte a 
Statement [16] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [18] *((byte*) print_char_cursor#10) ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_WORD:2 [ print_line_cursor#6 print_line_cursor#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ print_char_cursor#10 print_char_cursor#1 ] : zp ZP_WORD:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 38.5: zp ZP_WORD:2 [ print_line_cursor#6 print_line_cursor#1 ] 15.4: zp ZP_WORD:6 [ print_char_cursor#10 print_char_cursor#1 ] 
Uplift Scope [print_str] 33: zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [] best 1423 combination zp ZP_WORD:2 [ print_line_cursor#6 print_line_cursor#1 ] zp ZP_WORD:6 [ print_char_cursor#10 print_char_cursor#1 ] 
Uplifting [print_str] best 1423 combination zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ] 
Uplifting [print_ln] best 1423 combination 
Uplifting [main] best 1423 combination 
Coalescing zero page register [ zp ZP_WORD:2 [ print_line_cursor#6 print_line_cursor#1 ] ] with [ zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ] ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:4 [ print_char_cursor#10 print_char_cursor#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 4
  .label print_line_cursor = 2
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @18 [phi:@begin->@18]
b18_from_bbegin:
  jmp b18
//SEG4 @18
b18:
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @18 to main [phi:@18->main]
main_from_b18:
  jsr main
//SEG7 [3] phi from @18 to @end [phi:@18->@end]
bend_from_b18:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_str  [ print_char_cursor#10 ] ( main:2 [ print_char_cursor#10 ] )
  //SEG11 [14] phi from main to print_str [phi:main->print_str]
  print_str_from_main:
    jsr print_str
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call print_ln  [ ] ( main:2 [ ] )
  //SEG15 [9] phi from main::@1 to print_ln [phi:main::@1->print_ln]
  print_ln_from_b1:
    jsr print_ln
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
    str: .text "hello world!@"
}
//SEG18 print_ln
print_ln: {
  //SEG19 [10] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
  b1_from_print_ln:
  //SEG20 [10] phi (byte*) print_line_cursor#6 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
    jmp b1
  //SEG21 [10] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
  b1_from_b1:
  //SEG22 [10] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#1 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG23 print_ln::@1
  b1:
  //SEG24 [11] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG25 [12] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG26 print_ln::@return
  breturn:
  //SEG27 [13] return  [ ] ( main:2::print_ln:7 [ ] )
    rts
}
//SEG28 print_str
print_str: {
    .label str = 2
  //SEG29 [15] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG30 [15] phi (byte*) print_char_cursor#10 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG31 [15] phi (byte*) print_str::str#2 = (const string) main::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<main.str
    sta str
    lda #>main.str
    sta str+1
    jmp b1
  //SEG32 print_str::@1
  b1:
  //SEG33 [16] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG34 print_str::@return
  breturn:
  //SEG35 [17] return  [ print_char_cursor#10 ] ( main:2::print_str:5 [ print_char_cursor#10 ] )
    rts
  //SEG36 print_str::@2
  b2:
  //SEG37 [18] *((byte*) print_char_cursor#10) ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG38 [19] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#10 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#2 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG39 [20] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG40 [15] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG41 [15] phi (byte*) print_char_cursor#10 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG42 [15] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b18
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b18_from_bbegin:
Removing instruction main_from_b18:
Removing instruction bend_from_b18:
Removing instruction b1_from_main:
Removing instruction print_ln_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b18:
Removing instruction bend:
Removing instruction print_str_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_print_ln:
Removing instruction breturn:
Removing instruction b1_from_print_str:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @18
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(const string) main::str str = (string) "hello world!@"
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:4 11.0
(byte*) print_char_cursor#10 print_char_cursor zp ZP_WORD:4 4.4
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:2 16.5
(byte*) print_line_cursor#6 print_line_cursor zp ZP_WORD:2 22.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:2 22.0
(byte*) print_str::str#2 str zp ZP_WORD:2 11.0

zp ZP_WORD:2 [ print_line_cursor#6 print_line_cursor#1 print_str::str#2 print_str::str#0 ]
zp ZP_WORD:4 [ print_char_cursor#10 print_char_cursor#1 ]


FINAL ASSEMBLER
Score: 1241

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 4
  .label print_line_cursor = 2
//SEG2 @begin
//SEG3 [1] phi from @begin to @18 [phi:@begin->@18]
//SEG4 @18
//SEG5 [2] call main  [ ] ( )
//SEG6 [4] phi from @18 to main [phi:@18->main]
  jsr main
//SEG7 [3] phi from @18 to @end [phi:@18->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call print_str  [ print_char_cursor#10 ] ( main:2 [ print_char_cursor#10 ] )
  //SEG11 [14] phi from main to print_str [phi:main->print_str]
    jsr print_str
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call print_ln  [ ] ( main:2 [ ] )
  //SEG15 [9] phi from main::@1 to print_ln [phi:main::@1->print_ln]
    jsr print_ln
  //SEG16 main::@return
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
    str: .text "hello world!@"
}
//SEG18 print_ln
print_ln: {
  //SEG19 [10] phi from print_ln to print_ln::@1 [phi:print_ln->print_ln::@1]
  //SEG20 [10] phi (byte*) print_line_cursor#6 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_ln->print_ln::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG21 [10] phi from print_ln::@1 to print_ln::@1 [phi:print_ln::@1->print_ln::@1]
  //SEG22 [10] phi (byte*) print_line_cursor#6 = (byte*) print_line_cursor#1 [phi:print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG23 print_ln::@1
  b1:
  //SEG24 [11] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG25 [12] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#10 ] ( main:2::print_ln:7 [ print_line_cursor#1 print_char_cursor#10 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG26 print_ln::@return
  //SEG27 [13] return  [ ] ( main:2::print_ln:7 [ ] )
    rts
}
//SEG28 print_str
print_str: {
    .label str = 2
  //SEG29 [15] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  //SEG30 [15] phi (byte*) print_char_cursor#10 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG31 [15] phi (byte*) print_str::str#2 = (const string) main::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<main.str
    sta str
    lda #>main.str
    sta str+1
  //SEG32 print_str::@1
  b1:
  //SEG33 [16] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG34 print_str::@return
  //SEG35 [17] return  [ print_char_cursor#10 ] ( main:2::print_str:5 [ print_char_cursor#10 ] )
    rts
  //SEG36 print_str::@2
  b2:
  //SEG37 [18] *((byte*) print_char_cursor#10) ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_str::str#2 ] ( main:2::print_str:5 [ print_char_cursor#10 print_str::str#2 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG38 [19] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#10 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#2 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG39 [20] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:5 [ print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG40 [15] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  //SEG41 [15] phi (byte*) print_char_cursor#10 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG42 [15] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}

