byte[15] fibs = $1100;
fibs[0] = 0;
fibs[1] = 1;
byte i = 0;
do {
    fibs[i+2] = fibs[i]+fibs[i+1];
    i = i + 1;
} while(i<15)

PROGRAM
  (byte[15]) fibs ← (word) 4352
  *((byte[15]) fibs + (byte) 0) ← (byte) 0
  *((byte[15]) fibs + (byte) 1) ← (byte) 1
  (byte) i ← (byte) 0
@1:
  (byte~) $0 ← (byte) i + (byte) 2
  (byte~) $1 ← (byte[15]) fibs *idx (byte) i
  (byte~) $2 ← (byte) i + (byte) 1
  (byte~) $3 ← (byte[15]) fibs *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $5
  (boolean~) $6 ← (byte) i < (byte) 15
  if((boolean~) $6) goto @1

SYMBOLS
(byte~) $0
(byte~) $1
(byte~) $2
(byte~) $3
(byte~) $4
(byte~) $5
(boolean~) $6
(label) @1
(byte[15]) fibs
(byte) i

INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte[15]) fibs ← (word) 4352
  *((byte[15]) fibs + (byte) 0) ← (byte) 0
  *((byte[15]) fibs + (byte) 1) ← (byte) 1
  (byte) i ← (byte) 0
  to:@1
@1: from @1 @BEGIN
  (byte~) $0 ← (byte) i + (byte) 2
  (byte~) $1 ← (byte[15]) fibs *idx (byte) i
  (byte~) $2 ← (byte) i + (byte) 1
  (byte~) $3 ← (byte[15]) fibs *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $5
  (boolean~) $6 ← (byte) i < (byte) 15
  if((boolean~) $6) goto @1
  to:@2
@2: from @1
  to:@END
@END: from @2

Removing empty block @2
CONTROL FLOW GRAPH
@BEGIN: from
  (byte[15]) fibs ← (word) 4352
  *((byte[15]) fibs + (byte) 0) ← (byte) 0
  *((byte[15]) fibs + (byte) 1) ← (byte) 1
  (byte) i ← (byte) 0
  to:@1
@1: from @1 @BEGIN
  (byte~) $0 ← (byte) i + (byte) 2
  (byte~) $1 ← (byte[15]) fibs *idx (byte) i
  (byte~) $2 ← (byte) i + (byte) 1
  (byte~) $3 ← (byte[15]) fibs *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $5
  (boolean~) $6 ← (byte) i < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte[15]) fibs ← (word) 4352
  *((byte[15]) fibs + (byte) 0) ← (byte) 0
  *((byte[15]) fibs + (byte) 1) ← (byte) 1
  (byte) i ← (byte) 0
  to:@1
@1: from @1 @BEGIN
  (byte~) $0 ← (byte) i + (byte) 2
  (byte~) $1 ← (byte[15]) fibs *idx (byte) i
  (byte~) $2 ← (byte) i + (byte) 1
  (byte~) $3 ← (byte[15]) fibs *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i + (byte) 1
  (byte) i ← (byte~) $5
  (boolean~) $6 ← (byte) i < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte[15]) fibs#0 ← (word) 4352
  *((byte[15]) fibs#0 + (byte) 0) ← (byte) 0
  *((byte[15]) fibs#0 + (byte) 1) ← (byte) 1
  (byte) i#0 ← (byte) 0
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @1/(byte[15]) fibs#1 @BEGIN/(byte[15]) fibs#0 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) i#0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $5
  (boolean~) $6 ← (byte) i#1 < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte[15]) fibs#0 ← (word) 4352
  *((byte[15]) fibs#0 + (byte) 0) ← (byte) 0
  *((byte[15]) fibs#0 + (byte) 1) ← (byte) 1
  (byte) i#0 ← (byte) 0
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @1/(byte[15]) fibs#1 @BEGIN/(byte[15]) fibs#0 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) i#0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $5
  (boolean~) $6 ← (byte) i#1 < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

Constant (byte[15]) fibs#0 (word) 4352
Constant (byte) i#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352 + (byte) 0) ← (byte) 0
  *((word) 4352 + (byte) 1) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @1/(byte[15]) fibs#1 @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $5
  (boolean~) $6 ← (byte) i#1 < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

Consolidated assigned array index constant in assignment *(4352)
Consolidated assigned array index constant in assignment *(4353)
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @1/(byte[15]) fibs#1 @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte~) $5 ← (byte) i#2 + (byte) 1
  (byte) i#1 ← (byte~) $5
  (boolean~) $6 ← (byte) i#1 < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

Alias (byte) i#1 = (byte~) $5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @1/(byte[15]) fibs#1 @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  (boolean~) $6 ← (byte) i#1 < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

Self Phi Eliminated (byte[15]) fibs#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  (boolean~) $6 ← (byte) i#1 < (byte) 15
  if((boolean~) $6) goto @1
  to:@END
@END: from @1

Simple Condition (boolean~) $6 if((byte) i#1<(byte) 15) goto @1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte[15]) fibs#1 ← phi( @BEGIN/(word) 4352 )
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (byte[15]) fibs#1 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (byte[15]) fibs#1 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((byte[15]) fibs#1 + (byte~) $0) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 15) goto @1
  to:@END
@END: from @1

Constant (byte[15]) fibs#1 (word) 4352
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2 + (byte) 2
  (byte~) $1 ← (word) 4352 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2 + (byte) 1
  (byte~) $3 ← (word) 4352 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((word) 4352 + (byte~) $0) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 15) goto @1
  to:@END
@END: from @1

Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Consolidated referenced array index constant in assignment $3
Consolidated assigned array index constant in assignment *(4354 + $0)
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $0 ← (byte) i#2
  (byte~) $1 ← (word) 4352 *idx (byte) i#2
  (byte~) $2 ← (byte) i#2
  (byte~) $3 ← (word) 4353 *idx (byte~) $2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((word) 4354 + (byte~) $0) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 15) goto @1
  to:@END
@END: from @1

Alias (byte) i#2 = (byte~) $0 (byte~) $2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @1 @BEGIN
  (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 )
  (byte~) $1 ← (word) 4352 *idx (byte) i#2
  (byte~) $3 ← (word) 4353 *idx (byte) i#2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((word) 4354 + (byte) i#2) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 15) goto @1
  to:@END
@END: from @1

Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Multiple usages for variable. Not optimizing sub-constant (byte) i#2
Block Sequence Planned @BEGIN @1 @END 
Added new block during phi lifting @3(between @1 and @1)
Block Sequence Planned @BEGIN @1 @END @3 
CONTROL FLOW GRAPH - PHI LIFTED
@BEGIN: from
  *((word) 4352) ← (byte) 0
  *((word) 4353) ← (byte) 1
  to:@1
@1: from @3 @BEGIN
  (byte) i#2 ← phi( @3/(byte~) i#3 @BEGIN/(byte) 0 )
  (byte~) $1 ← (word) 4352 *idx (byte) i#2
  (byte~) $3 ← (word) 4353 *idx (byte) i#2
  (byte~) $4 ← (byte~) $1 + (byte~) $3
  *((word) 4354 + (byte) i#2) ← (byte~) $4
  (byte) i#1 ← (byte) i#2 + (byte) 1
  if((byte) i#1<(byte) 15) goto @3
  to:@END
@END: from @1
@3: from @1
  (byte~) i#3 ← (byte) i#1
  to:@1

Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@BEGIN: from
  [0] *((word) 4352) ← (byte) 0 [ ]
  [1] *((word) 4353) ← (byte) 1 [ ]
  to:@1
@1: from @3 @BEGIN
  [2] (byte) i#2 ← phi( @3/(byte~) i#3 @BEGIN/(byte) 0 ) [ i#2 ]
  [3] (byte~) $1 ← (word) 4352 *idx (byte) i#2 [ i#2 $1 ]
  [4] (byte~) $3 ← (word) 4353 *idx (byte) i#2 [ i#2 $1 $3 ]
  [5] (byte~) $4 ← (byte~) $1 + (byte~) $3 [ i#2 $4 ]
  [6] *((word) 4354 + (byte) i#2) ← (byte~) $4 [ i#2 ]
  [7] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ]
  [8] if((byte) i#1<(byte) 15) goto @3 [ i#1 ]
  to:@END
@END: from @1
@3: from @1
  [9] (byte~) i#3 ← (byte) i#1 [ i#3 ]
  to:@1

Created 1 initial phi equivalence classes
Coalesced [9] i#3 ← i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Block Sequence Planned @BEGIN @1 @END 
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@BEGIN: from
  [0] *((word) 4352) ← (byte) 0 [ ]
  [1] *((word) 4353) ← (byte) 1 [ ]
  to:@1
@1: from @1 @BEGIN
  [2] (byte) i#2 ← phi( @1/(byte) i#1 @BEGIN/(byte) 0 ) [ i#2 ]
  [3] (byte~) $1 ← (word) 4352 *idx (byte) i#2 [ i#2 $1 ]
  [4] (byte~) $3 ← (word) 4353 *idx (byte) i#2 [ i#2 $1 $3 ]
  [5] (byte~) $4 ← (byte~) $1 + (byte~) $3 [ i#2 $4 ]
  [6] *((word) 4354 + (byte) i#2) ← (byte~) $4 [ i#2 ]
  [7] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ]
  [8] if((byte) i#1<(byte) 15) goto @1 [ i#1 ]
  to:@END
@END: from @1

CALL GRAPH

DOMINATORS
@BEGIN dominated by  @BEGIN 
@1 dominated by  @1 @BEGIN 
@END dominated by  @1 @BEGIN @END 

Found back edge: Loop head: @1 tails: @1 blocks: null
Populated: Loop head: @1 tails: @1 blocks: @1 
NATURAL LOOPS
Loop head: @1 tails: @1 blocks: @1 

Found 1 loops in scope []
  Loop head: @1 tails: @1 blocks: @1 
NATURAL LOOPS WITH DEPTH
Loop head: @1 tails: @1 blocks: @1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte~) $1 11.0
(byte~) $3 22.0
(byte~) $4 22.0
(byte[15]) fibs
(byte) i
(byte) i#1 16.5
(byte) i#2 11.0

Initial phi equivalence classes
[ i#2 i#1 ]
Added variable $1 to zero page equivalence class [ $1 ]
Added variable $3 to zero page equivalence class [ $3 ]
Added variable $4 to zero page equivalence class [ $4 ]
Complete equivalence classes
[ i#2 i#1 ]
[ $1 ]
[ $3 ]
[ $4 ]
Allocated zp byte:2 to zp byte:2 [ i#2 i#1 ]
Allocated zp byte:3 to zp byte:3 [ $1 ]
Allocated zp byte:4 to zp byte:4 [ $3 ]
Allocated zp byte:5 to zp byte:5 [ $4 ]
INITIAL ASM
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
//SEG2 [1] *((word) 4353) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 4353
//SEG3 [2] phi from @BEGIN to @1
B1_from_BBEGIN:
//SEG4 [2] phi (byte) i#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
  jmp B1
//SEG5 [2] phi from @1 to @1
B1_from_B1:
//SEG6 [2] phi (byte) i#2 = (byte) i#1 -- register_copy 
  jmp B1
//SEG7 @1
B1:
//SEG8 [3] (byte~) $1 ← (word) 4352 *idx (byte) i#2 [ i#2 $1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4352,x
  sta 3
//SEG9 [4] (byte~) $3 ← (word) 4353 *idx (byte) i#2 [ i#2 $1 $3 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4353,x
  sta 4
//SEG10 [5] (byte~) $4 ← (byte~) $1 + (byte~) $3 [ i#2 $4 ] -- zpby1=zpby2_plus_zpby3 
  lda 3
  clc
  adc 4
  sta 5
//SEG11 [6] *((word) 4354 + (byte) i#2) ← (byte~) $4 [ i#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda 5
  ldx 2
  sta 4354,x
//SEG12 [7] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- zpby1=zpby1_plus_1 
  inc 2
//SEG13 [8] if((byte) i#1<(byte) 15) goto @1 [ i#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #15
  bcc B1_from_B1
  jmp BEND
//SEG14 @END
BEND:

Uplifting max weight 27.5 live range equivalence class zp byte:2 [ i#2 i#1 ]
Uplift to reg byte a resulted in clobber.
Uplift to reg byte x succesfull.
Uplift to reg byte y succesfull.
REGISTER UPLIFTING
(byte~) $1 zp byte:3 11.0
(byte~) $3 zp byte:4 22.0
(byte~) $4 zp byte:5 22.0
(byte[15]) fibs
(byte) i
(byte) i#1 zp byte:2 16.5
(byte) i#2 zp byte:2 11.0

zp byte:2 [ i#2 i#1 ]
zp byte:3 [ $1 ]
zp byte:4 [ $3 ]
zp byte:5 [ $4 ]

Coalescing zero page register [ zp byte:3 [ $1 ] ] with [ zp byte:5 [ $4 ] ]
Removing instruction jmp B1
Removing instruction jmp BEND
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
//SEG2 [1] *((word) 4353) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 4353
//SEG3 [2] phi from @BEGIN to @1
B1_from_BBEGIN:
//SEG4 [2] phi (byte) i#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
  jmp B1
//SEG5 [2] phi from @1 to @1
B1_from_B1:
//SEG6 [2] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG7 @1
B1:
//SEG8 [3] (byte~) $1 ← (word) 4352 *idx (byte) i#2 [ i#2 $1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4352,x
  sta 3
//SEG9 [4] (byte~) $3 ← (word) 4353 *idx (byte) i#2 [ i#2 $1 $3 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4353,x
  sta 4
//SEG10 [5] (byte~) $4 ← (byte~) $1 + (byte~) $3 [ i#2 $4 ] -- zpby1=zpby2_plus_zpby3 
  lda 3
  clc
  adc 4
  sta 5
//SEG11 [6] *((word) 4354 + (byte) i#2) ← (byte~) $4 [ i#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda 5
  ldx 2
  sta 4354,x
//SEG12 [7] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- zpby1=zpby1_plus_1 
  inc 2
//SEG13 [8] if((byte) i#1<(byte) 15) goto @1 [ i#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #15
  bcc B1_from_B1
//SEG14 @END
BEND:

Removing instruction jmp B1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
//SEG2 [1] *((word) 4353) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 4353
//SEG3 [2] phi from @BEGIN to @1
B1_from_BBEGIN:
//SEG4 [2] phi (byte) i#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
//SEG5 [2] phi from @1 to @1
B1_from_B1:
//SEG6 [2] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG7 @1
B1:
//SEG8 [3] (byte~) $1 ← (word) 4352 *idx (byte) i#2 [ i#2 $1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4352,x
  sta 3
//SEG9 [4] (byte~) $3 ← (word) 4353 *idx (byte) i#2 [ i#2 $1 $3 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4353,x
  sta 4
//SEG10 [5] (byte~) $4 ← (byte~) $1 + (byte~) $3 [ i#2 $4 ] -- zpby1=zpby2_plus_zpby3 
  lda 3
  clc
  adc 4
  sta 5
//SEG11 [6] *((word) 4354 + (byte) i#2) ← (byte~) $4 [ i#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda 5
  ldx 2
  sta 4354,x
//SEG12 [7] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- zpby1=zpby1_plus_1 
  inc 2
//SEG13 [8] if((byte) i#1<(byte) 15) goto @1 [ i#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #15
  bcc B1_from_B1
//SEG14 @END
BEND:

FINAL SYMBOL TABLE
(byte~) $1 zp byte:3 11.0
(byte~) $3 zp byte:4 22.0
(byte~) $4 zp byte:5 22.0
(label) @1
(label) @BEGIN
(label) @END
(byte[15]) fibs
(byte) i
(byte) i#1 zp byte:2 16.5
(byte) i#2 zp byte:2 11.0

zp byte:2 [ i#2 i#1 ]
zp byte:3 [ $1 $4 ]
zp byte:4 [ $3 ]

FINAL CODE
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
  lda #0
  sta 4352
//SEG2 [1] *((word) 4353) ← (byte) 1 [ ] -- _star_cowo1=coby2 
  lda #1
  sta 4353
//SEG3 [2] phi from @BEGIN to @1
B1_from_BBEGIN:
//SEG4 [2] phi (byte) i#2 = (byte) 0 -- zpby1=coby1 
  lda #0
  sta 2
//SEG5 [2] phi from @1 to @1
B1_from_B1:
//SEG6 [2] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG7 @1
B1:
//SEG8 [3] (byte~) $1 ← (word) 4352 *idx (byte) i#2 [ i#2 $1 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4352,x
  sta 3
//SEG9 [4] (byte~) $3 ← (word) 4353 *idx (byte) i#2 [ i#2 $1 $3 ] -- zpby1=cowo1_staridx_zpby2 
  ldx 2
  lda 4353,x
  sta 4
//SEG10 [5] (byte~) $4 ← (byte~) $1 + (byte~) $3 [ i#2 $4 ] -- zpby1=zpby2_plus_zpby3 
  lda 3
  clc
  adc 4
  sta 5
//SEG11 [6] *((word) 4354 + (byte) i#2) ← (byte~) $4 [ i#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda 5
  ldx 2
  sta 4354,x
//SEG12 [7] (byte) i#1 ← (byte) i#2 + (byte) 1 [ i#1 ] -- zpby1=zpby1_plus_1 
  inc 2
//SEG13 [8] if((byte) i#1<(byte) 15) goto @1 [ i#1 ] -- zpby1_lt_coby1_then_la1 
  lda 2
  cmp #15
  bcc B1_from_B1
//SEG14 @END
BEND:

