
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$0 ← *((const nomodify byte*) SCREEN + (byte) main::i#2) == (byte) 'a'
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  *((const nomodify byte*) SCREEN + (byte) main::i#3) ← (byte) 'a'
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$28*6)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,$28*6)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Inversing boolean not [3] (bool~) main::$1 ← *((const nomodify byte*) SCREEN + (byte) main::i#2) != (byte) 'a' from [2] (bool~) main::$0 ← *((const nomodify byte*) SCREEN + (byte) main::i#2) == (byte) 'a'
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [3] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)!=(byte) 'a') goto main::@2
Simple Condition (bool~) main::$2 [7] if((byte) main::i#1!=rangelast(0,$28*6)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [3] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,$28*6)) goto main::@1 to (number) $28*(number) 6+(number) 1
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28*6+1 in [4] if((byte) main::i#1!=(number) $28*(number) 6+(number) 1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [2] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return
  to:main::@2
main::@2: scope:[main]  from main::@1
  [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) 'a'
  [4] (byte) main::i#1 ← ++ (byte) main::i#2
  [5] if((byte) main::i#1!=(byte)(number) $28*(number) 6+(number) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return -- pbuc1_derefidx_vbuz1_eq_vbuc2_then_la1 
    ldy.z i
    lda SCREEN,y
    cmp #'a'
    beq __breturn
    jmp __b2
    // main::@2
  __b2:
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) 'a' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'a'
    ldy.z i
    sta SCREEN,y
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] if((byte) main::i#1!=(byte)(number) $28*(number) 6+(number) 1) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28*6+1
    cmp.z i
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) 'a' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) 'a' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 371 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 371 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #'a'
    beq __breturn
    jmp __b2
    // main::@2
  __b2:
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'a'
    sta SCREEN,x
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if((byte) main::i#1!=(byte)(number) $28*(number) 6+(number) 1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28*6+1
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 251

  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // if(SCREEN[i]=='a')
    // [2] if(*((const nomodify byte*) SCREEN + (byte) main::i#2)==(byte) 'a') goto main::@return -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #'a'
    beq __breturn
    // main::@2
    // SCREEN[i] = 'a'
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'a'
    sta SCREEN,x
    // for( byte i: 0..40*6)
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if((byte) main::i#1!=(byte)(number) $28*(number) 6+(number) 1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28*6+1
    bne __b1
    // main::@return
  __breturn:
    // }
    // [6] return 
    rts
}
  // File Data

