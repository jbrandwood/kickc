Loading link script "procedure-callingconvention-phi-bank-5.ld"

CONTROL FLOW GRAPH SSA

__bank(bank) char func_ram_bank1_a(char a , char b)
func_ram_bank1_a: scope:[func_ram_bank1_a]  from func_ram_bank1_c func_rom_bank2_c main
  func_ram_bank1_a::b#3 = phi( func_ram_bank1_c/func_ram_bank1_a::b#0, func_rom_bank2_c/func_ram_bank1_a::b#1, main/func_ram_bank1_a::b#2 )
  func_ram_bank1_a::a#3 = phi( func_ram_bank1_c/func_ram_bank1_a::a#0, func_rom_bank2_c/func_ram_bank1_a::a#1, main/func_ram_bank1_a::a#2 )
  func_ram_bank1_a::$0 = func_ram_bank1_a::a#3 + func_ram_bank1_a::b#3
  func_ram_bank1_a::return#0 = func_ram_bank1_a::$0
  to:func_ram_bank1_a::@return
func_ram_bank1_a::@return: scope:[func_ram_bank1_a]  from func_ram_bank1_a
  func_ram_bank1_a::return#5 = phi( func_ram_bank1_a/func_ram_bank1_a::return#0 )
  func_ram_bank1_a::return#1 = func_ram_bank1_a::return#5
  return 
  to:@return

char func_ram_bank1_b(char a , char b)
func_ram_bank1_b: scope:[func_ram_bank1_b]  from main::@1
  func_ram_bank1_b::b#1 = phi( main::@1/func_ram_bank1_b::b#0 )
  func_ram_bank1_b::a#1 = phi( main::@1/func_ram_bank1_b::a#0 )
  func_ram_bank1_b::$0 = func_ram_bank1_b::a#1 + func_ram_bank1_b::b#1
  func_ram_bank1_b::return#0 = func_ram_bank1_b::$0
  to:func_ram_bank1_b::@return
func_ram_bank1_b::@return: scope:[func_ram_bank1_b]  from func_ram_bank1_b
  func_ram_bank1_b::return#3 = phi( func_ram_bank1_b/func_ram_bank1_b::return#0 )
  func_ram_bank1_b::return#1 = func_ram_bank1_b::return#3
  return 
  to:@return

__bank(bank) char func_ram_bank1_c(char a , char b)
func_ram_bank1_c: scope:[func_ram_bank1_c]  from main::@2
  func_ram_bank1_c::b#1 = phi( main::@2/func_ram_bank1_c::b#0 )
  func_ram_bank1_c::a#1 = phi( main::@2/func_ram_bank1_c::a#0 )
  func_ram_bank1_a::a#0 = func_ram_bank1_c::a#1
  func_ram_bank1_a::b#0 = func_ram_bank1_c::b#1
  call func_ram_bank1_a
  func_ram_bank1_a::return#2 = func_ram_bank1_a::return#1
  to:func_ram_bank1_c::@1
func_ram_bank1_c::@1: scope:[func_ram_bank1_c]  from func_ram_bank1_c
  func_ram_bank1_a::return#6 = phi( func_ram_bank1_c/func_ram_bank1_a::return#2 )
  func_ram_bank1_c::$0 = func_ram_bank1_a::return#6
  func_ram_bank1_c::return#0 = func_ram_bank1_c::$0
  to:func_ram_bank1_c::@return
func_ram_bank1_c::@return: scope:[func_ram_bank1_c]  from func_ram_bank1_c::@1
  func_ram_bank1_c::return#3 = phi( func_ram_bank1_c::@1/func_ram_bank1_c::return#0 )
  func_ram_bank1_c::return#1 = func_ram_bank1_c::return#3
  return 
  to:@return

__bank(bank) char func_ram_bank1_d(char a , char b)
func_ram_bank1_d: scope:[func_ram_bank1_d]  from main::@3
  func_ram_bank1_d::b#1 = phi( main::@3/func_ram_bank1_d::b#0 )
  func_ram_bank1_d::a#1 = phi( main::@3/func_ram_bank1_d::a#0 )
  func_rom_bank2_a::a#0 = func_ram_bank1_d::a#1
  func_rom_bank2_a::b#0 = func_ram_bank1_d::b#1
  call func_rom_bank2_a
  func_rom_bank2_a::return#0 = func_rom_bank2_a::return#2
  to:func_ram_bank1_d::@1
func_ram_bank1_d::@1: scope:[func_ram_bank1_d]  from func_ram_bank1_d
  func_rom_bank2_a::return#5 = phi( func_ram_bank1_d/func_rom_bank2_a::return#0 )
  func_ram_bank1_d::$0 = func_rom_bank2_a::return#5
  func_ram_bank1_d::return#0 = func_ram_bank1_d::$0
  to:func_ram_bank1_d::@return
func_ram_bank1_d::@return: scope:[func_ram_bank1_d]  from func_ram_bank1_d::@1
  func_ram_bank1_d::return#3 = phi( func_ram_bank1_d::@1/func_ram_bank1_d::return#0 )
  func_ram_bank1_d::return#1 = func_ram_bank1_d::return#3
  return 
  to:@return

__bank(bank) char func_ram_bank1_e(char a , char b)
func_ram_bank1_e: scope:[func_ram_bank1_e]  from func_main_a main::@4
  func_ram_bank1_e::b#2 = phi( func_main_a/func_ram_bank1_e::b#0, main::@4/func_ram_bank1_e::b#1 )
  func_ram_bank1_e::a#2 = phi( func_main_a/func_ram_bank1_e::a#0, main::@4/func_ram_bank1_e::a#1 )
  func_rom_bank2_b::a#0 = func_ram_bank1_e::a#2
  func_rom_bank2_b::b#0 = func_ram_bank1_e::b#2
  call func_rom_bank2_b
  func_rom_bank2_b::return#0 = func_rom_bank2_b::return#2
  to:func_ram_bank1_e::@1
func_ram_bank1_e::@1: scope:[func_ram_bank1_e]  from func_ram_bank1_e
  func_rom_bank2_b::return#5 = phi( func_ram_bank1_e/func_rom_bank2_b::return#0 )
  func_ram_bank1_e::$0 = func_rom_bank2_b::return#5
  func_ram_bank1_e::return#0 = func_ram_bank1_e::$0
  to:func_ram_bank1_e::@return
func_ram_bank1_e::@return: scope:[func_ram_bank1_e]  from func_ram_bank1_e::@1
  func_ram_bank1_e::return#4 = phi( func_ram_bank1_e::@1/func_ram_bank1_e::return#0 )
  func_ram_bank1_e::return#1 = func_ram_bank1_e::return#4
  return 
  to:@return

__bank(bank) char func_ram_bank1_f(char a , char b)
func_ram_bank1_f: scope:[func_ram_bank1_f]  from main::@5
  func_ram_bank1_f::b#1 = phi( main::@5/func_ram_bank1_f::b#0 )
  func_ram_bank1_f::a#1 = phi( main::@5/func_ram_bank1_f::a#0 )
  func_main_a::a#0 = func_ram_bank1_f::a#1
  func_main_a::b#0 = func_ram_bank1_f::b#1
  call func_main_a
  func_main_a::return#0 = func_main_a::return#3
  to:func_ram_bank1_f::@1
func_ram_bank1_f::@1: scope:[func_ram_bank1_f]  from func_ram_bank1_f
  func_main_a::return#5 = phi( func_ram_bank1_f/func_main_a::return#0 )
  func_ram_bank1_f::$0 = func_main_a::return#5
  func_ram_bank1_f::return#0 = func_ram_bank1_f::$0
  to:func_ram_bank1_f::@return
func_ram_bank1_f::@return: scope:[func_ram_bank1_f]  from func_ram_bank1_f::@1
  func_ram_bank1_f::return#3 = phi( func_ram_bank1_f::@1/func_ram_bank1_f::return#0 )
  func_ram_bank1_f::return#1 = func_ram_bank1_f::return#3
  return 
  to:@return

__bank(bank) char func_rom_bank2_a(char a , char b)
func_rom_bank2_a: scope:[func_rom_bank2_a]  from func_ram_bank1_d func_rom_bank2_d main::@6
  func_rom_bank2_a::b#3 = phi( func_ram_bank1_d/func_rom_bank2_a::b#0, func_rom_bank2_d/func_rom_bank2_a::b#1, main::@6/func_rom_bank2_a::b#2 )
  func_rom_bank2_a::a#3 = phi( func_ram_bank1_d/func_rom_bank2_a::a#0, func_rom_bank2_d/func_rom_bank2_a::a#1, main::@6/func_rom_bank2_a::a#2 )
  func_rom_bank2_a::$0 = func_rom_bank2_a::a#3 + func_rom_bank2_a::b#3
  func_rom_bank2_a::return#1 = func_rom_bank2_a::$0
  to:func_rom_bank2_a::@return
func_rom_bank2_a::@return: scope:[func_rom_bank2_a]  from func_rom_bank2_a
  func_rom_bank2_a::return#6 = phi( func_rom_bank2_a/func_rom_bank2_a::return#1 )
  func_rom_bank2_a::return#2 = func_rom_bank2_a::return#6
  return 
  to:@return

char func_rom_bank2_b(char a , char b)
func_rom_bank2_b: scope:[func_rom_bank2_b]  from func_ram_bank1_e func_rom_bank2_e main::@7
  func_rom_bank2_b::b#3 = phi( func_ram_bank1_e/func_rom_bank2_b::b#0, func_rom_bank2_e/func_rom_bank2_b::b#1, main::@7/func_rom_bank2_b::b#2 )
  func_rom_bank2_b::a#3 = phi( func_ram_bank1_e/func_rom_bank2_b::a#0, func_rom_bank2_e/func_rom_bank2_b::a#1, main::@7/func_rom_bank2_b::a#2 )
  func_rom_bank2_b::$0 = func_rom_bank2_b::a#3 + func_rom_bank2_b::b#3
  func_rom_bank2_b::return#1 = func_rom_bank2_b::$0
  to:func_rom_bank2_b::@return
func_rom_bank2_b::@return: scope:[func_rom_bank2_b]  from func_rom_bank2_b
  func_rom_bank2_b::return#6 = phi( func_rom_bank2_b/func_rom_bank2_b::return#1 )
  func_rom_bank2_b::return#2 = func_rom_bank2_b::return#6
  return 
  to:@return

__bank(bank) char func_rom_bank2_c(char a , char b)
func_rom_bank2_c: scope:[func_rom_bank2_c]  from main::@8
  func_rom_bank2_c::b#1 = phi( main::@8/func_rom_bank2_c::b#0 )
  func_rom_bank2_c::a#1 = phi( main::@8/func_rom_bank2_c::a#0 )
  func_ram_bank1_a::a#1 = func_rom_bank2_c::a#1
  func_ram_bank1_a::b#1 = func_rom_bank2_c::b#1
  call func_ram_bank1_a
  func_ram_bank1_a::return#3 = func_ram_bank1_a::return#1
  to:func_rom_bank2_c::@1
func_rom_bank2_c::@1: scope:[func_rom_bank2_c]  from func_rom_bank2_c
  func_ram_bank1_a::return#7 = phi( func_rom_bank2_c/func_ram_bank1_a::return#3 )
  func_rom_bank2_c::$0 = func_ram_bank1_a::return#7
  func_rom_bank2_c::return#0 = func_rom_bank2_c::$0
  to:func_rom_bank2_c::@return
func_rom_bank2_c::@return: scope:[func_rom_bank2_c]  from func_rom_bank2_c::@1
  func_rom_bank2_c::return#3 = phi( func_rom_bank2_c::@1/func_rom_bank2_c::return#0 )
  func_rom_bank2_c::return#1 = func_rom_bank2_c::return#3
  return 
  to:@return

__bank(bank) char func_rom_bank2_d(char a , char b)
func_rom_bank2_d: scope:[func_rom_bank2_d]  from main::@9
  func_rom_bank2_d::b#1 = phi( main::@9/func_rom_bank2_d::b#0 )
  func_rom_bank2_d::a#1 = phi( main::@9/func_rom_bank2_d::a#0 )
  func_rom_bank2_a::a#1 = func_rom_bank2_d::a#1
  func_rom_bank2_a::b#1 = func_rom_bank2_d::b#1
  call func_rom_bank2_a
  func_rom_bank2_a::return#3 = func_rom_bank2_a::return#2
  to:func_rom_bank2_d::@1
func_rom_bank2_d::@1: scope:[func_rom_bank2_d]  from func_rom_bank2_d
  func_rom_bank2_a::return#7 = phi( func_rom_bank2_d/func_rom_bank2_a::return#3 )
  func_rom_bank2_d::$0 = func_rom_bank2_a::return#7
  func_rom_bank2_d::return#0 = func_rom_bank2_d::$0
  to:func_rom_bank2_d::@return
func_rom_bank2_d::@return: scope:[func_rom_bank2_d]  from func_rom_bank2_d::@1
  func_rom_bank2_d::return#3 = phi( func_rom_bank2_d::@1/func_rom_bank2_d::return#0 )
  func_rom_bank2_d::return#1 = func_rom_bank2_d::return#3
  return 
  to:@return

__bank(bank) char func_rom_bank2_e(char a , char b)
func_rom_bank2_e: scope:[func_rom_bank2_e]  from func_main_b main::@10
  func_rom_bank2_e::b#2 = phi( func_main_b/func_rom_bank2_e::b#0, main::@10/func_rom_bank2_e::b#1 )
  func_rom_bank2_e::a#2 = phi( func_main_b/func_rom_bank2_e::a#0, main::@10/func_rom_bank2_e::a#1 )
  func_rom_bank2_b::a#1 = func_rom_bank2_e::a#2
  func_rom_bank2_b::b#1 = func_rom_bank2_e::b#2
  call func_rom_bank2_b
  func_rom_bank2_b::return#3 = func_rom_bank2_b::return#2
  to:func_rom_bank2_e::@1
func_rom_bank2_e::@1: scope:[func_rom_bank2_e]  from func_rom_bank2_e
  func_rom_bank2_b::return#7 = phi( func_rom_bank2_e/func_rom_bank2_b::return#3 )
  func_rom_bank2_e::$0 = func_rom_bank2_b::return#7
  func_rom_bank2_e::return#0 = func_rom_bank2_e::$0
  to:func_rom_bank2_e::@return
func_rom_bank2_e::@return: scope:[func_rom_bank2_e]  from func_rom_bank2_e::@1
  func_rom_bank2_e::return#4 = phi( func_rom_bank2_e::@1/func_rom_bank2_e::return#0 )
  func_rom_bank2_e::return#1 = func_rom_bank2_e::return#4
  return 
  to:@return

__bank(bank) char func_rom_bank2_f(char a , char b)
func_rom_bank2_f: scope:[func_rom_bank2_f]  from main::@11
  func_rom_bank2_f::b#1 = phi( main::@11/func_rom_bank2_f::b#0 )
  func_rom_bank2_f::a#1 = phi( main::@11/func_rom_bank2_f::a#0 )
  func_main_a::a#1 = func_rom_bank2_f::a#1
  func_main_a::b#1 = func_rom_bank2_f::b#1
  call func_main_a
  func_main_a::return#1 = func_main_a::return#3
  to:func_rom_bank2_f::@1
func_rom_bank2_f::@1: scope:[func_rom_bank2_f]  from func_rom_bank2_f
  func_main_a::return#6 = phi( func_rom_bank2_f/func_main_a::return#1 )
  func_rom_bank2_f::$0 = func_main_a::return#6
  func_rom_bank2_f::return#0 = func_rom_bank2_f::$0
  to:func_rom_bank2_f::@return
func_rom_bank2_f::@return: scope:[func_rom_bank2_f]  from func_rom_bank2_f::@1
  func_rom_bank2_f::return#3 = phi( func_rom_bank2_f::@1/func_rom_bank2_f::return#0 )
  func_rom_bank2_f::return#1 = func_rom_bank2_f::return#3
  return 
  to:@return

char func_main_a(char a , char b)
func_main_a: scope:[func_main_a]  from func_ram_bank1_f func_rom_bank2_f main::@12
  func_main_a::b#3 = phi( func_ram_bank1_f/func_main_a::b#0, func_rom_bank2_f/func_main_a::b#1, main::@12/func_main_a::b#2 )
  func_main_a::a#3 = phi( func_ram_bank1_f/func_main_a::a#0, func_rom_bank2_f/func_main_a::a#1, main::@12/func_main_a::a#2 )
  func_ram_bank1_e::a#0 = func_main_a::a#3
  func_ram_bank1_e::b#0 = func_main_a::b#3
  call func_ram_bank1_e
  func_ram_bank1_e::return#2 = func_ram_bank1_e::return#1
  to:func_main_a::@1
func_main_a::@1: scope:[func_main_a]  from func_main_a
  func_ram_bank1_e::return#5 = phi( func_main_a/func_ram_bank1_e::return#2 )
  func_main_a::$0 = func_ram_bank1_e::return#5
  func_main_a::return#2 = func_main_a::$0
  to:func_main_a::@return
func_main_a::@return: scope:[func_main_a]  from func_main_a::@1
  func_main_a::return#7 = phi( func_main_a::@1/func_main_a::return#2 )
  func_main_a::return#3 = func_main_a::return#7
  return 
  to:@return

char func_main_b(char a , char b)
func_main_b: scope:[func_main_b]  from main::@13
  func_main_b::b#1 = phi( main::@13/func_main_b::b#0 )
  func_main_b::a#1 = phi( main::@13/func_main_b::a#0 )
  func_rom_bank2_e::a#0 = func_main_b::a#1
  func_rom_bank2_e::b#0 = func_main_b::b#1
  call func_rom_bank2_e
  func_rom_bank2_e::return#2 = func_rom_bank2_e::return#1
  to:func_main_b::@1
func_main_b::@1: scope:[func_main_b]  from func_main_b
  func_rom_bank2_e::return#5 = phi( func_main_b/func_rom_bank2_e::return#2 )
  func_main_b::$0 = func_rom_bank2_e::return#5
  func_main_b::return#0 = func_main_b::$0
  to:func_main_b::@return
func_main_b::@return: scope:[func_main_b]  from func_main_b::@1
  func_main_b::return#3 = phi( func_main_b::@1/func_main_b::return#0 )
  func_main_b::return#1 = func_main_b::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start
  func_ram_bank1_a::a#2 = '0'
  func_ram_bank1_a::b#2 = 7
  call func_ram_bank1_a
  func_ram_bank1_a::return#4 = func_ram_bank1_a::return#1
  to:main::@1
main::@1: scope:[main]  from main
  func_ram_bank1_a::return#8 = phi( main/func_ram_bank1_a::return#4 )
  main::$0 = func_ram_bank1_a::return#8
  SCREEN[0] = main::$0
  func_ram_bank1_b::a#0 = '0'
  func_ram_bank1_b::b#0 = 7
  call func_ram_bank1_b
  func_ram_bank1_b::return#2 = func_ram_bank1_b::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  func_ram_bank1_b::return#4 = phi( main::@1/func_ram_bank1_b::return#2 )
  main::$1 = func_ram_bank1_b::return#4
  SCREEN[0] = main::$1
  func_ram_bank1_c::a#0 = '0'
  func_ram_bank1_c::b#0 = 7
  call func_ram_bank1_c
  func_ram_bank1_c::return#2 = func_ram_bank1_c::return#1
  to:main::@3
main::@3: scope:[main]  from main::@2
  func_ram_bank1_c::return#4 = phi( main::@2/func_ram_bank1_c::return#2 )
  main::$2 = func_ram_bank1_c::return#4
  SCREEN[0] = main::$2
  func_ram_bank1_d::a#0 = '0'
  func_ram_bank1_d::b#0 = 7
  call func_ram_bank1_d
  func_ram_bank1_d::return#2 = func_ram_bank1_d::return#1
  to:main::@4
main::@4: scope:[main]  from main::@3
  func_ram_bank1_d::return#4 = phi( main::@3/func_ram_bank1_d::return#2 )
  main::$3 = func_ram_bank1_d::return#4
  SCREEN[0] = main::$3
  func_ram_bank1_e::a#1 = '0'
  func_ram_bank1_e::b#1 = 7
  call func_ram_bank1_e
  func_ram_bank1_e::return#3 = func_ram_bank1_e::return#1
  to:main::@5
main::@5: scope:[main]  from main::@4
  func_ram_bank1_e::return#6 = phi( main::@4/func_ram_bank1_e::return#3 )
  main::$4 = func_ram_bank1_e::return#6
  SCREEN[0] = main::$4
  func_ram_bank1_f::a#0 = '0'
  func_ram_bank1_f::b#0 = 7
  call func_ram_bank1_f
  func_ram_bank1_f::return#2 = func_ram_bank1_f::return#1
  to:main::@6
main::@6: scope:[main]  from main::@5
  func_ram_bank1_f::return#4 = phi( main::@5/func_ram_bank1_f::return#2 )
  main::$5 = func_ram_bank1_f::return#4
  SCREEN[0] = main::$5
  func_rom_bank2_a::a#2 = '0'
  func_rom_bank2_a::b#2 = 7
  call func_rom_bank2_a
  func_rom_bank2_a::return#4 = func_rom_bank2_a::return#2
  to:main::@7
main::@7: scope:[main]  from main::@6
  func_rom_bank2_a::return#8 = phi( main::@6/func_rom_bank2_a::return#4 )
  main::$6 = func_rom_bank2_a::return#8
  SCREEN[0] = main::$6
  func_rom_bank2_b::a#2 = '0'
  func_rom_bank2_b::b#2 = 7
  call func_rom_bank2_b
  func_rom_bank2_b::return#4 = func_rom_bank2_b::return#2
  to:main::@8
main::@8: scope:[main]  from main::@7
  func_rom_bank2_b::return#8 = phi( main::@7/func_rom_bank2_b::return#4 )
  main::$7 = func_rom_bank2_b::return#8
  SCREEN[0] = main::$7
  func_rom_bank2_c::a#0 = '0'
  func_rom_bank2_c::b#0 = 7
  call func_rom_bank2_c
  func_rom_bank2_c::return#2 = func_rom_bank2_c::return#1
  to:main::@9
main::@9: scope:[main]  from main::@8
  func_rom_bank2_c::return#4 = phi( main::@8/func_rom_bank2_c::return#2 )
  main::$8 = func_rom_bank2_c::return#4
  SCREEN[0] = main::$8
  func_rom_bank2_d::a#0 = '0'
  func_rom_bank2_d::b#0 = 7
  call func_rom_bank2_d
  func_rom_bank2_d::return#2 = func_rom_bank2_d::return#1
  to:main::@10
main::@10: scope:[main]  from main::@9
  func_rom_bank2_d::return#4 = phi( main::@9/func_rom_bank2_d::return#2 )
  main::$9 = func_rom_bank2_d::return#4
  SCREEN[0] = main::$9
  func_rom_bank2_e::a#1 = '0'
  func_rom_bank2_e::b#1 = 7
  call func_rom_bank2_e
  func_rom_bank2_e::return#3 = func_rom_bank2_e::return#1
  to:main::@11
main::@11: scope:[main]  from main::@10
  func_rom_bank2_e::return#6 = phi( main::@10/func_rom_bank2_e::return#3 )
  main::$10 = func_rom_bank2_e::return#6
  SCREEN[0] = main::$10
  func_rom_bank2_f::a#0 = '0'
  func_rom_bank2_f::b#0 = 7
  call func_rom_bank2_f
  func_rom_bank2_f::return#2 = func_rom_bank2_f::return#1
  to:main::@12
main::@12: scope:[main]  from main::@11
  func_rom_bank2_f::return#4 = phi( main::@11/func_rom_bank2_f::return#2 )
  main::$11 = func_rom_bank2_f::return#4
  SCREEN[0] = main::$11
  func_main_a::a#2 = '0'
  func_main_a::b#2 = 7
  call func_main_a
  func_main_a::return#4 = func_main_a::return#3
  to:main::@13
main::@13: scope:[main]  from main::@12
  func_main_a::return#8 = phi( main::@12/func_main_a::return#4 )
  main::$12 = func_main_a::return#8
  SCREEN[0] = main::$12
  func_main_b::a#0 = '0'
  func_main_b::b#0 = 7
  call func_main_b
  func_main_b::return#2 = func_main_b::return#1
  to:main::@14
main::@14: scope:[main]  from main::@13
  func_main_b::return#4 = phi( main::@13/func_main_b::return#2 )
  main::$13 = func_main_b::return#4
  SCREEN[0] = main::$13
  to:main::@return
main::@return: scope:[main]  from main::@14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
void __start()
char func_main_a(char a , char b)
char func_main_a::$0
char func_main_a::a
char func_main_a::a#0
char func_main_a::a#1
char func_main_a::a#2
char func_main_a::a#3
char func_main_a::b
char func_main_a::b#0
char func_main_a::b#1
char func_main_a::b#2
char func_main_a::b#3
char func_main_a::return
char func_main_a::return#0
char func_main_a::return#1
char func_main_a::return#2
char func_main_a::return#3
char func_main_a::return#4
char func_main_a::return#5
char func_main_a::return#6
char func_main_a::return#7
char func_main_a::return#8
char func_main_b(char a , char b)
char func_main_b::$0
char func_main_b::a
char func_main_b::a#0
char func_main_b::a#1
char func_main_b::b
char func_main_b::b#0
char func_main_b::b#1
char func_main_b::return
char func_main_b::return#0
char func_main_b::return#1
char func_main_b::return#2
char func_main_b::return#3
char func_main_b::return#4
__bank(bank) char func_ram_bank1_a(char a , char b)
char func_ram_bank1_a::$0
char func_ram_bank1_a::a
char func_ram_bank1_a::a#0
char func_ram_bank1_a::a#1
char func_ram_bank1_a::a#2
char func_ram_bank1_a::a#3
char func_ram_bank1_a::b
char func_ram_bank1_a::b#0
char func_ram_bank1_a::b#1
char func_ram_bank1_a::b#2
char func_ram_bank1_a::b#3
char func_ram_bank1_a::return
char func_ram_bank1_a::return#0
char func_ram_bank1_a::return#1
char func_ram_bank1_a::return#2
char func_ram_bank1_a::return#3
char func_ram_bank1_a::return#4
char func_ram_bank1_a::return#5
char func_ram_bank1_a::return#6
char func_ram_bank1_a::return#7
char func_ram_bank1_a::return#8
char func_ram_bank1_b(char a , char b)
char func_ram_bank1_b::$0
char func_ram_bank1_b::a
char func_ram_bank1_b::a#0
char func_ram_bank1_b::a#1
char func_ram_bank1_b::b
char func_ram_bank1_b::b#0
char func_ram_bank1_b::b#1
char func_ram_bank1_b::return
char func_ram_bank1_b::return#0
char func_ram_bank1_b::return#1
char func_ram_bank1_b::return#2
char func_ram_bank1_b::return#3
char func_ram_bank1_b::return#4
__bank(bank) char func_ram_bank1_c(char a , char b)
char func_ram_bank1_c::$0
char func_ram_bank1_c::a
char func_ram_bank1_c::a#0
char func_ram_bank1_c::a#1
char func_ram_bank1_c::b
char func_ram_bank1_c::b#0
char func_ram_bank1_c::b#1
char func_ram_bank1_c::return
char func_ram_bank1_c::return#0
char func_ram_bank1_c::return#1
char func_ram_bank1_c::return#2
char func_ram_bank1_c::return#3
char func_ram_bank1_c::return#4
__bank(bank) char func_ram_bank1_d(char a , char b)
char func_ram_bank1_d::$0
char func_ram_bank1_d::a
char func_ram_bank1_d::a#0
char func_ram_bank1_d::a#1
char func_ram_bank1_d::b
char func_ram_bank1_d::b#0
char func_ram_bank1_d::b#1
char func_ram_bank1_d::return
char func_ram_bank1_d::return#0
char func_ram_bank1_d::return#1
char func_ram_bank1_d::return#2
char func_ram_bank1_d::return#3
char func_ram_bank1_d::return#4
__bank(bank) char func_ram_bank1_e(char a , char b)
char func_ram_bank1_e::$0
char func_ram_bank1_e::a
char func_ram_bank1_e::a#0
char func_ram_bank1_e::a#1
char func_ram_bank1_e::a#2
char func_ram_bank1_e::b
char func_ram_bank1_e::b#0
char func_ram_bank1_e::b#1
char func_ram_bank1_e::b#2
char func_ram_bank1_e::return
char func_ram_bank1_e::return#0
char func_ram_bank1_e::return#1
char func_ram_bank1_e::return#2
char func_ram_bank1_e::return#3
char func_ram_bank1_e::return#4
char func_ram_bank1_e::return#5
char func_ram_bank1_e::return#6
__bank(bank) char func_ram_bank1_f(char a , char b)
char func_ram_bank1_f::$0
char func_ram_bank1_f::a
char func_ram_bank1_f::a#0
char func_ram_bank1_f::a#1
char func_ram_bank1_f::b
char func_ram_bank1_f::b#0
char func_ram_bank1_f::b#1
char func_ram_bank1_f::return
char func_ram_bank1_f::return#0
char func_ram_bank1_f::return#1
char func_ram_bank1_f::return#2
char func_ram_bank1_f::return#3
char func_ram_bank1_f::return#4
__bank(bank) char func_rom_bank2_a(char a , char b)
char func_rom_bank2_a::$0
char func_rom_bank2_a::a
char func_rom_bank2_a::a#0
char func_rom_bank2_a::a#1
char func_rom_bank2_a::a#2
char func_rom_bank2_a::a#3
char func_rom_bank2_a::b
char func_rom_bank2_a::b#0
char func_rom_bank2_a::b#1
char func_rom_bank2_a::b#2
char func_rom_bank2_a::b#3
char func_rom_bank2_a::return
char func_rom_bank2_a::return#0
char func_rom_bank2_a::return#1
char func_rom_bank2_a::return#2
char func_rom_bank2_a::return#3
char func_rom_bank2_a::return#4
char func_rom_bank2_a::return#5
char func_rom_bank2_a::return#6
char func_rom_bank2_a::return#7
char func_rom_bank2_a::return#8
char func_rom_bank2_b(char a , char b)
char func_rom_bank2_b::$0
char func_rom_bank2_b::a
char func_rom_bank2_b::a#0
char func_rom_bank2_b::a#1
char func_rom_bank2_b::a#2
char func_rom_bank2_b::a#3
char func_rom_bank2_b::b
char func_rom_bank2_b::b#0
char func_rom_bank2_b::b#1
char func_rom_bank2_b::b#2
char func_rom_bank2_b::b#3
char func_rom_bank2_b::return
char func_rom_bank2_b::return#0
char func_rom_bank2_b::return#1
char func_rom_bank2_b::return#2
char func_rom_bank2_b::return#3
char func_rom_bank2_b::return#4
char func_rom_bank2_b::return#5
char func_rom_bank2_b::return#6
char func_rom_bank2_b::return#7
char func_rom_bank2_b::return#8
__bank(bank) char func_rom_bank2_c(char a , char b)
char func_rom_bank2_c::$0
char func_rom_bank2_c::a
char func_rom_bank2_c::a#0
char func_rom_bank2_c::a#1
char func_rom_bank2_c::b
char func_rom_bank2_c::b#0
char func_rom_bank2_c::b#1
char func_rom_bank2_c::return
char func_rom_bank2_c::return#0
char func_rom_bank2_c::return#1
char func_rom_bank2_c::return#2
char func_rom_bank2_c::return#3
char func_rom_bank2_c::return#4
__bank(bank) char func_rom_bank2_d(char a , char b)
char func_rom_bank2_d::$0
char func_rom_bank2_d::a
char func_rom_bank2_d::a#0
char func_rom_bank2_d::a#1
char func_rom_bank2_d::b
char func_rom_bank2_d::b#0
char func_rom_bank2_d::b#1
char func_rom_bank2_d::return
char func_rom_bank2_d::return#0
char func_rom_bank2_d::return#1
char func_rom_bank2_d::return#2
char func_rom_bank2_d::return#3
char func_rom_bank2_d::return#4
__bank(bank) char func_rom_bank2_e(char a , char b)
char func_rom_bank2_e::$0
char func_rom_bank2_e::a
char func_rom_bank2_e::a#0
char func_rom_bank2_e::a#1
char func_rom_bank2_e::a#2
char func_rom_bank2_e::b
char func_rom_bank2_e::b#0
char func_rom_bank2_e::b#1
char func_rom_bank2_e::b#2
char func_rom_bank2_e::return
char func_rom_bank2_e::return#0
char func_rom_bank2_e::return#1
char func_rom_bank2_e::return#2
char func_rom_bank2_e::return#3
char func_rom_bank2_e::return#4
char func_rom_bank2_e::return#5
char func_rom_bank2_e::return#6
__bank(bank) char func_rom_bank2_f(char a , char b)
char func_rom_bank2_f::$0
char func_rom_bank2_f::a
char func_rom_bank2_f::a#0
char func_rom_bank2_f::a#1
char func_rom_bank2_f::b
char func_rom_bank2_f::b#0
char func_rom_bank2_f::b#1
char func_rom_bank2_f::return
char func_rom_bank2_f::return#0
char func_rom_bank2_f::return#1
char func_rom_bank2_f::return#2
char func_rom_bank2_f::return#3
char func_rom_bank2_f::return#4
void main()
char main::$0
char main::$1
char main::$10
char main::$11
char main::$12
char main::$13
char main::$2
char main::$3
char main::$4
char main::$5
char main::$6
char main::$7
char main::$8
char main::$9

Adding number conversion cast (unumber) 7 in func_ram_bank1_a::b#2 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$0
Adding number conversion cast (unumber) 7 in func_ram_bank1_b::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$1
Adding number conversion cast (unumber) 7 in func_ram_bank1_c::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$2
Adding number conversion cast (unumber) 7 in func_ram_bank1_d::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$3
Adding number conversion cast (unumber) 7 in func_ram_bank1_e::b#1 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$4
Adding number conversion cast (unumber) 7 in func_ram_bank1_f::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$5
Adding number conversion cast (unumber) 7 in func_rom_bank2_a::b#2 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$6
Adding number conversion cast (unumber) 7 in func_rom_bank2_b::b#2 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$7
Adding number conversion cast (unumber) 7 in func_rom_bank2_c::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$8
Adding number conversion cast (unumber) 7 in func_rom_bank2_d::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$9
Adding number conversion cast (unumber) 7 in func_rom_bank2_e::b#1 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$10
Adding number conversion cast (unumber) 7 in func_rom_bank2_f::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$11
Adding number conversion cast (unumber) 7 in func_main_a::b#2 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$12
Adding number conversion cast (unumber) 7 in func_main_b::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$13
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast func_ram_bank1_a::b#2 = (unumber)7
Inlining cast func_ram_bank1_b::b#0 = (unumber)7
Inlining cast func_ram_bank1_c::b#0 = (unumber)7
Inlining cast func_ram_bank1_d::b#0 = (unumber)7
Inlining cast func_ram_bank1_e::b#1 = (unumber)7
Inlining cast func_ram_bank1_f::b#0 = (unumber)7
Inlining cast func_rom_bank2_a::b#2 = (unumber)7
Inlining cast func_rom_bank2_b::b#2 = (unumber)7
Inlining cast func_rom_bank2_c::b#0 = (unumber)7
Inlining cast func_rom_bank2_d::b#0 = (unumber)7
Inlining cast func_rom_bank2_e::b#1 = (unumber)7
Inlining cast func_rom_bank2_f::b#0 = (unumber)7
Inlining cast func_main_a::b#2 = (unumber)7
Inlining cast func_main_b::b#0 = (unumber)7
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias func_ram_bank1_a::return#0 = func_ram_bank1_a::$0 func_ram_bank1_a::return#5 func_ram_bank1_a::return#1 
Alias func_ram_bank1_b::return#0 = func_ram_bank1_b::$0 func_ram_bank1_b::return#3 func_ram_bank1_b::return#1 
Alias func_ram_bank1_a::return#2 = func_ram_bank1_a::return#6 
Alias func_ram_bank1_c::return#0 = func_ram_bank1_c::$0 func_ram_bank1_c::return#3 func_ram_bank1_c::return#1 
Alias func_rom_bank2_a::return#0 = func_rom_bank2_a::return#5 
Alias func_ram_bank1_d::return#0 = func_ram_bank1_d::$0 func_ram_bank1_d::return#3 func_ram_bank1_d::return#1 
Alias func_rom_bank2_b::return#0 = func_rom_bank2_b::return#5 
Alias func_ram_bank1_e::return#0 = func_ram_bank1_e::$0 func_ram_bank1_e::return#4 func_ram_bank1_e::return#1 
Alias func_main_a::return#0 = func_main_a::return#5 
Alias func_ram_bank1_f::return#0 = func_ram_bank1_f::$0 func_ram_bank1_f::return#3 func_ram_bank1_f::return#1 
Alias func_rom_bank2_a::return#1 = func_rom_bank2_a::$0 func_rom_bank2_a::return#6 func_rom_bank2_a::return#2 
Alias func_rom_bank2_b::return#1 = func_rom_bank2_b::$0 func_rom_bank2_b::return#6 func_rom_bank2_b::return#2 
Alias func_ram_bank1_a::return#3 = func_ram_bank1_a::return#7 
Alias func_rom_bank2_c::return#0 = func_rom_bank2_c::$0 func_rom_bank2_c::return#3 func_rom_bank2_c::return#1 
Alias func_rom_bank2_a::return#3 = func_rom_bank2_a::return#7 
Alias func_rom_bank2_d::return#0 = func_rom_bank2_d::$0 func_rom_bank2_d::return#3 func_rom_bank2_d::return#1 
Alias func_rom_bank2_b::return#3 = func_rom_bank2_b::return#7 
Alias func_rom_bank2_e::return#0 = func_rom_bank2_e::$0 func_rom_bank2_e::return#4 func_rom_bank2_e::return#1 
Alias func_main_a::return#1 = func_main_a::return#6 
Alias func_rom_bank2_f::return#0 = func_rom_bank2_f::$0 func_rom_bank2_f::return#3 func_rom_bank2_f::return#1 
Alias func_ram_bank1_e::return#2 = func_ram_bank1_e::return#5 
Alias func_main_a::return#2 = func_main_a::$0 func_main_a::return#7 func_main_a::return#3 
Alias func_rom_bank2_e::return#2 = func_rom_bank2_e::return#5 
Alias func_main_b::return#0 = func_main_b::$0 func_main_b::return#3 func_main_b::return#1 
Alias func_ram_bank1_a::return#4 = func_ram_bank1_a::return#8 
Alias func_ram_bank1_b::return#2 = func_ram_bank1_b::return#4 
Alias func_ram_bank1_c::return#2 = func_ram_bank1_c::return#4 
Alias func_ram_bank1_d::return#2 = func_ram_bank1_d::return#4 
Alias func_ram_bank1_e::return#3 = func_ram_bank1_e::return#6 
Alias func_ram_bank1_f::return#2 = func_ram_bank1_f::return#4 
Alias func_rom_bank2_a::return#4 = func_rom_bank2_a::return#8 
Alias func_rom_bank2_b::return#4 = func_rom_bank2_b::return#8 
Alias func_rom_bank2_c::return#2 = func_rom_bank2_c::return#4 
Alias func_rom_bank2_d::return#2 = func_rom_bank2_d::return#4 
Alias func_rom_bank2_e::return#3 = func_rom_bank2_e::return#6 
Alias func_rom_bank2_f::return#2 = func_rom_bank2_f::return#4 
Alias func_main_a::return#4 = func_main_a::return#8 
Alias func_main_b::return#2 = func_main_b::return#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values func_ram_bank1_b::a#1 func_ram_bank1_b::a#0
Identical Phi Values func_ram_bank1_b::b#1 func_ram_bank1_b::b#0
Identical Phi Values func_ram_bank1_c::a#1 func_ram_bank1_c::a#0
Identical Phi Values func_ram_bank1_c::b#1 func_ram_bank1_c::b#0
Identical Phi Values func_ram_bank1_d::a#1 func_ram_bank1_d::a#0
Identical Phi Values func_ram_bank1_d::b#1 func_ram_bank1_d::b#0
Identical Phi Values func_ram_bank1_f::a#1 func_ram_bank1_f::a#0
Identical Phi Values func_ram_bank1_f::b#1 func_ram_bank1_f::b#0
Identical Phi Values func_rom_bank2_c::a#1 func_rom_bank2_c::a#0
Identical Phi Values func_rom_bank2_c::b#1 func_rom_bank2_c::b#0
Identical Phi Values func_rom_bank2_d::a#1 func_rom_bank2_d::a#0
Identical Phi Values func_rom_bank2_d::b#1 func_rom_bank2_d::b#0
Identical Phi Values func_rom_bank2_f::a#1 func_rom_bank2_f::a#0
Identical Phi Values func_rom_bank2_f::b#1 func_rom_bank2_f::b#0
Identical Phi Values func_main_b::a#1 func_main_b::a#0
Identical Phi Values func_main_b::b#1 func_main_b::b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant func_ram_bank1_a::a#2 = '0'
Constant func_ram_bank1_a::b#2 = 7
Constant func_ram_bank1_b::a#0 = '0'
Constant func_ram_bank1_b::b#0 = 7
Constant func_ram_bank1_c::a#0 = '0'
Constant func_ram_bank1_c::b#0 = 7
Constant func_ram_bank1_d::a#0 = '0'
Constant func_ram_bank1_d::b#0 = 7
Constant func_ram_bank1_e::a#1 = '0'
Constant func_ram_bank1_e::b#1 = 7
Constant func_ram_bank1_f::a#0 = '0'
Constant func_ram_bank1_f::b#0 = 7
Constant func_rom_bank2_a::a#2 = '0'
Constant func_rom_bank2_a::b#2 = 7
Constant func_rom_bank2_b::a#2 = '0'
Constant func_rom_bank2_b::b#2 = 7
Constant func_rom_bank2_c::a#0 = '0'
Constant func_rom_bank2_c::b#0 = 7
Constant func_rom_bank2_d::a#0 = '0'
Constant func_rom_bank2_d::b#0 = 7
Constant func_rom_bank2_e::a#1 = '0'
Constant func_rom_bank2_e::b#1 = 7
Constant func_rom_bank2_f::a#0 = '0'
Constant func_rom_bank2_f::b#0 = 7
Constant func_main_a::a#2 = '0'
Constant func_main_a::b#2 = 7
Constant func_main_b::a#0 = '0'
Constant func_main_b::b#0 = 7
Successful SSA optimization Pass2ConstantIdentification
Constant func_ram_bank1_a::a#0 = func_ram_bank1_c::a#0
Constant func_ram_bank1_a::b#0 = func_ram_bank1_c::b#0
Constant func_rom_bank2_a::a#0 = func_ram_bank1_d::a#0
Constant func_rom_bank2_a::b#0 = func_ram_bank1_d::b#0
Constant func_main_a::a#0 = func_ram_bank1_f::a#0
Constant func_main_a::b#0 = func_ram_bank1_f::b#0
Constant func_ram_bank1_a::a#1 = func_rom_bank2_c::a#0
Constant func_ram_bank1_a::b#1 = func_rom_bank2_c::b#0
Constant func_rom_bank2_a::a#1 = func_rom_bank2_d::a#0
Constant func_rom_bank2_a::b#1 = func_rom_bank2_d::b#0
Constant func_main_a::a#1 = func_rom_bank2_f::a#0
Constant func_main_a::b#1 = func_rom_bank2_f::b#0
Constant func_rom_bank2_e::a#0 = func_main_b::a#0
Constant func_rom_bank2_e::b#0 = func_main_b::b#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [87] SCREEN[0] = main::$0
Simplifying expression containing zero SCREEN in [93] SCREEN[0] = main::$1
Simplifying expression containing zero SCREEN in [99] SCREEN[0] = main::$2
Simplifying expression containing zero SCREEN in [105] SCREEN[0] = main::$3
Simplifying expression containing zero SCREEN in [111] SCREEN[0] = main::$4
Simplifying expression containing zero SCREEN in [117] SCREEN[0] = main::$5
Simplifying expression containing zero SCREEN in [123] SCREEN[0] = main::$6
Simplifying expression containing zero SCREEN in [129] SCREEN[0] = main::$7
Simplifying expression containing zero SCREEN in [135] SCREEN[0] = main::$8
Simplifying expression containing zero SCREEN in [141] SCREEN[0] = main::$9
Simplifying expression containing zero SCREEN in [147] SCREEN[0] = main::$10
Simplifying expression containing zero SCREEN in [153] SCREEN[0] = main::$11
Simplifying expression containing zero SCREEN in [159] SCREEN[0] = main::$12
Simplifying expression containing zero SCREEN in [165] SCREEN[0] = main::$13
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [3] func_ram_bank1_b::return#0 = func_ram_bank1_b::a#0 + func_ram_bank1_b::b#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant func_ram_bank1_b::return#0 = func_ram_bank1_b::a#0+func_ram_bank1_b::b#0
Successful SSA optimization Pass2ConstantIdentification
Constant func_ram_bank1_b::return#2 = func_ram_bank1_b::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant main::$1 = func_ram_bank1_b::return#2
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings func_ram_bank1_a::a#2
Inlining constant with var siblings func_ram_bank1_a::b#2
Inlining constant with var siblings func_ram_bank1_a::a#0
Inlining constant with var siblings func_ram_bank1_a::b#0
Inlining constant with var siblings func_ram_bank1_a::a#1
Inlining constant with var siblings func_ram_bank1_a::b#1
Inlining constant with different constant siblings func_ram_bank1_b::return#2
Inlining constant with var siblings func_ram_bank1_e::a#1
Inlining constant with var siblings func_ram_bank1_e::b#1
Inlining constant with var siblings func_rom_bank2_a::a#2
Inlining constant with var siblings func_rom_bank2_a::b#2
Inlining constant with var siblings func_rom_bank2_a::a#0
Inlining constant with var siblings func_rom_bank2_a::b#0
Inlining constant with var siblings func_rom_bank2_a::a#1
Inlining constant with var siblings func_rom_bank2_a::b#1
Inlining constant with var siblings func_rom_bank2_b::a#2
Inlining constant with var siblings func_rom_bank2_b::b#2
Inlining constant with var siblings func_rom_bank2_e::a#1
Inlining constant with var siblings func_rom_bank2_e::b#1
Inlining constant with var siblings func_rom_bank2_e::a#0
Inlining constant with var siblings func_rom_bank2_e::b#0
Inlining constant with var siblings func_main_a::a#2
Inlining constant with var siblings func_main_a::b#2
Inlining constant with var siblings func_main_a::a#0
Inlining constant with var siblings func_main_a::b#0
Inlining constant with var siblings func_main_a::a#1
Inlining constant with var siblings func_main_a::b#1
Constant inlined func_rom_bank2_e::a#0 = func_main_b::a#0
Constant inlined func_rom_bank2_e::b#0 = func_main_b::b#0
Constant inlined func_rom_bank2_e::a#1 = '0'
Constant inlined func_rom_bank2_e::b#1 = 7
Constant inlined func_ram_bank1_e::b#1 = 7
Constant inlined func_ram_bank1_e::a#1 = '0'
Constant inlined func_main_a::a#0 = func_ram_bank1_f::a#0
Constant inlined func_main_a::b#0 = func_ram_bank1_f::b#0
Constant inlined func_main_a::a#1 = func_rom_bank2_f::a#0
Constant inlined func_main_a::b#1 = func_rom_bank2_f::b#0
Constant inlined func_main_a::a#2 = '0'
Constant inlined func_main_a::b#2 = 7
Constant inlined func_ram_bank1_a::b#2 = 7
Constant inlined func_ram_bank1_a::b#1 = func_rom_bank2_c::b#0
Constant inlined func_ram_bank1_a::a#2 = '0'
Constant inlined func_ram_bank1_a::b#0 = func_ram_bank1_c::b#0
Constant inlined func_ram_bank1_a::a#1 = func_rom_bank2_c::a#0
Constant inlined func_ram_bank1_a::a#0 = func_ram_bank1_c::a#0
Constant inlined func_rom_bank2_a::a#0 = func_ram_bank1_d::a#0
Constant inlined func_rom_bank2_a::b#0 = func_ram_bank1_d::b#0
Constant inlined func_rom_bank2_a::a#1 = func_rom_bank2_d::a#0
Constant inlined func_rom_bank2_a::b#1 = func_rom_bank2_d::b#0
Constant inlined func_rom_bank2_a::a#2 = '0'
Constant inlined func_rom_bank2_a::b#2 = 7
Constant inlined main::$1 = func_ram_bank1_b::return#0
Constant inlined func_ram_bank1_b::return#2 = func_ram_bank1_b::return#0
Constant inlined func_rom_bank2_b::a#2 = '0'
Constant inlined func_rom_bank2_b::b#2 = 7
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of func_ram_bank1_b
Adding NOP phi() at start of func_ram_bank1_c
Adding NOP phi() at start of func_ram_bank1_d
Adding NOP phi() at start of func_ram_bank1_f
Adding NOP phi() at start of func_rom_bank2_c
Adding NOP phi() at start of func_rom_bank2_d
Adding NOP phi() at start of func_rom_bank2_f
Adding NOP phi() at start of func_main_b
CALL GRAPH
Calls in [main] to func_ram_bank1_a:1 func_ram_bank1_b:5 func_ram_bank1_c:7 func_ram_bank1_d:11 func_ram_bank1_e:15 func_ram_bank1_f:19 func_rom_bank2_a:23 func_rom_bank2_b:27 func_rom_bank2_c:31 func_rom_bank2_d:35 func_rom_bank2_e:39 func_rom_bank2_f:43 func_main_a:47 func_main_b:51 
Calls in [func_ram_bank1_c] to func_ram_bank1_a:62 
Calls in [func_ram_bank1_d] to func_rom_bank2_a:67 
Calls in [func_ram_bank1_e] to func_rom_bank2_b:76 
Calls in [func_ram_bank1_f] to func_main_a:81 
Calls in [func_rom_bank2_c] to func_ram_bank1_a:92 
Calls in [func_rom_bank2_d] to func_rom_bank2_a:97 
Calls in [func_rom_bank2_e] to func_rom_bank2_b:106 
Calls in [func_rom_bank2_f] to func_main_a:111 
Calls in [func_main_a] to func_ram_bank1_e:120 
Calls in [func_main_b] to func_rom_bank2_e:125 

Created 12 initial phi equivalence classes
Coalesced [74] func_rom_bank2_b::a#4 = func_rom_bank2_b::a#0
Coalesced [75] func_rom_bank2_b::b#4 = func_rom_bank2_b::b#0
Coalesced [104] func_rom_bank2_b::a#5 = func_rom_bank2_b::a#1
Coalesced [105] func_rom_bank2_b::b#5 = func_rom_bank2_b::b#1
Coalesced [118] func_ram_bank1_e::a#3 = func_ram_bank1_e::a#0
Coalesced [119] func_ram_bank1_e::b#3 = func_ram_bank1_e::b#0
Coalesced down to 12 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of func_ram_bank1_b
Adding NOP phi() at start of func_ram_bank1_c
Adding NOP phi() at start of func_ram_bank1_d
Adding NOP phi() at start of func_ram_bank1_f
Adding NOP phi() at start of func_rom_bank2_c
Adding NOP phi() at start of func_rom_bank2_d
Adding NOP phi() at start of func_rom_bank2_f
Adding NOP phi() at start of func_main_b

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call func_ram_bank1_a
  [2] func_ram_bank1_a::return#4 = func_ram_bank1_a::return#0
  to:main::@1
main::@1: scope:[main]  from main
  [3] main::$0 = func_ram_bank1_a::return#4
  [4] *SCREEN = main::$0
  [5] call func_ram_bank1_b
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] *SCREEN = func_ram_bank1_b::return#0
  [7] call func_ram_bank1_c
  [8] func_ram_bank1_c::return#2 = func_ram_bank1_c::return#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] main::$2 = func_ram_bank1_c::return#2
  [10] *SCREEN = main::$2
  [11] call func_ram_bank1_d
  [12] func_ram_bank1_d::return#2 = func_ram_bank1_d::return#0
  to:main::@4
main::@4: scope:[main]  from main::@3
  [13] main::$3 = func_ram_bank1_d::return#2
  [14] *SCREEN = main::$3
  [15] call func_ram_bank1_e
  [16] func_ram_bank1_e::return#3 = func_ram_bank1_e::return#0
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] main::$4 = func_ram_bank1_e::return#3
  [18] *SCREEN = main::$4
  [19] call func_ram_bank1_f
  [20] func_ram_bank1_f::return#2 = func_ram_bank1_f::return#0
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] main::$5 = func_ram_bank1_f::return#2
  [22] *SCREEN = main::$5
  [23] call func_rom_bank2_a
  [24] func_rom_bank2_a::return#4 = func_rom_bank2_a::return#1
  to:main::@7
main::@7: scope:[main]  from main::@6
  [25] main::$6 = func_rom_bank2_a::return#4
  [26] *SCREEN = main::$6
  [27] call func_rom_bank2_b
  [28] func_rom_bank2_b::return#4 = func_rom_bank2_b::return#1
  to:main::@8
main::@8: scope:[main]  from main::@7
  [29] main::$7 = func_rom_bank2_b::return#4
  [30] *SCREEN = main::$7
  [31] call func_rom_bank2_c
  [32] func_rom_bank2_c::return#2 = func_rom_bank2_c::return#0
  to:main::@9
main::@9: scope:[main]  from main::@8
  [33] main::$8 = func_rom_bank2_c::return#2
  [34] *SCREEN = main::$8
  [35] call func_rom_bank2_d
  [36] func_rom_bank2_d::return#2 = func_rom_bank2_d::return#0
  to:main::@10
main::@10: scope:[main]  from main::@9
  [37] main::$9 = func_rom_bank2_d::return#2
  [38] *SCREEN = main::$9
  [39] call func_rom_bank2_e
  [40] func_rom_bank2_e::return#3 = func_rom_bank2_e::return#0
  to:main::@11
main::@11: scope:[main]  from main::@10
  [41] main::$10 = func_rom_bank2_e::return#3
  [42] *SCREEN = main::$10
  [43] call func_rom_bank2_f
  [44] func_rom_bank2_f::return#2 = func_rom_bank2_f::return#0
  to:main::@12
main::@12: scope:[main]  from main::@11
  [45] main::$11 = func_rom_bank2_f::return#2
  [46] *SCREEN = main::$11
  [47] call func_main_a
  [48] func_main_a::return#4 = func_main_a::return#2
  to:main::@13
main::@13: scope:[main]  from main::@12
  [49] main::$12 = func_main_a::return#4
  [50] *SCREEN = main::$12
  [51] call func_main_b
  [52] func_main_b::return#2 = func_main_b::return#0
  to:main::@14
main::@14: scope:[main]  from main::@13
  [53] main::$13 = func_main_b::return#2
  [54] *SCREEN = main::$13
  to:main::@return
main::@return: scope:[main]  from main::@14
  [55] return 
  to:@return

__bank(bank) char func_ram_bank1_a(char a , char b)
func_ram_bank1_a: scope:[func_ram_bank1_a]  from func_ram_bank1_c func_rom_bank2_c main
  [56] func_ram_bank1_a::b#3 = phi( func_ram_bank1_c/func_ram_bank1_c::b#0, func_rom_bank2_c/func_rom_bank2_c::b#0, main/7 )
  [56] func_ram_bank1_a::a#3 = phi( func_ram_bank1_c/func_ram_bank1_c::a#0, func_rom_bank2_c/func_rom_bank2_c::a#0, main/'0' )
  [57] func_ram_bank1_a::return#0 = func_ram_bank1_a::a#3 + func_ram_bank1_a::b#3
  to:func_ram_bank1_a::@return
func_ram_bank1_a::@return: scope:[func_ram_bank1_a]  from func_ram_bank1_a
  [58] return 
  to:@return

char func_ram_bank1_b(char a , char b)
func_ram_bank1_b: scope:[func_ram_bank1_b]  from main::@1
  [59] phi()
  to:func_ram_bank1_b::@return
func_ram_bank1_b::@return: scope:[func_ram_bank1_b]  from func_ram_bank1_b
  [60] return 
  to:@return

__bank(bank) char func_ram_bank1_c(char a , char b)
func_ram_bank1_c: scope:[func_ram_bank1_c]  from main::@2
  [61] phi()
  [62] call func_ram_bank1_a
  [63] func_ram_bank1_a::return#2 = func_ram_bank1_a::return#0
  to:func_ram_bank1_c::@1
func_ram_bank1_c::@1: scope:[func_ram_bank1_c]  from func_ram_bank1_c
  [64] func_ram_bank1_c::return#0 = func_ram_bank1_a::return#2
  to:func_ram_bank1_c::@return
func_ram_bank1_c::@return: scope:[func_ram_bank1_c]  from func_ram_bank1_c::@1
  [65] return 
  to:@return

__bank(bank) char func_ram_bank1_d(char a , char b)
func_ram_bank1_d: scope:[func_ram_bank1_d]  from main::@3
  [66] phi()
  [67] call func_rom_bank2_a
  [68] func_rom_bank2_a::return#0 = func_rom_bank2_a::return#1
  to:func_ram_bank1_d::@1
func_ram_bank1_d::@1: scope:[func_ram_bank1_d]  from func_ram_bank1_d
  [69] func_ram_bank1_d::return#0 = func_rom_bank2_a::return#0
  to:func_ram_bank1_d::@return
func_ram_bank1_d::@return: scope:[func_ram_bank1_d]  from func_ram_bank1_d::@1
  [70] return 
  to:@return

__bank(bank) char func_ram_bank1_e(char a , char b)
func_ram_bank1_e: scope:[func_ram_bank1_e]  from func_main_a main::@4
  [71] func_ram_bank1_e::b#2 = phi( func_main_a/func_ram_bank1_e::b#0, main::@4/7 )
  [71] func_ram_bank1_e::a#2 = phi( func_main_a/func_ram_bank1_e::a#0, main::@4/'0' )
  [72] func_rom_bank2_b::a#0 = func_ram_bank1_e::a#2
  [73] func_rom_bank2_b::b#0 = func_ram_bank1_e::b#2
  [74] call func_rom_bank2_b
  [75] func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1
  to:func_ram_bank1_e::@1
func_ram_bank1_e::@1: scope:[func_ram_bank1_e]  from func_ram_bank1_e
  [76] func_ram_bank1_e::return#0 = func_rom_bank2_b::return#0
  to:func_ram_bank1_e::@return
func_ram_bank1_e::@return: scope:[func_ram_bank1_e]  from func_ram_bank1_e::@1
  [77] return 
  to:@return

__bank(bank) char func_ram_bank1_f(char a , char b)
func_ram_bank1_f: scope:[func_ram_bank1_f]  from main::@5
  [78] phi()
  [79] call func_main_a
  [80] func_main_a::return#0 = func_main_a::return#2
  to:func_ram_bank1_f::@1
func_ram_bank1_f::@1: scope:[func_ram_bank1_f]  from func_ram_bank1_f
  [81] func_ram_bank1_f::return#0 = func_main_a::return#0
  to:func_ram_bank1_f::@return
func_ram_bank1_f::@return: scope:[func_ram_bank1_f]  from func_ram_bank1_f::@1
  [82] return 
  to:@return

__bank(bank) char func_rom_bank2_a(char a , char b)
func_rom_bank2_a: scope:[func_rom_bank2_a]  from func_ram_bank1_d func_rom_bank2_d main::@6
  [83] func_rom_bank2_a::b#3 = phi( func_ram_bank1_d/func_ram_bank1_d::b#0, func_rom_bank2_d/func_rom_bank2_d::b#0, main::@6/7 )
  [83] func_rom_bank2_a::a#3 = phi( func_ram_bank1_d/func_ram_bank1_d::a#0, func_rom_bank2_d/func_rom_bank2_d::a#0, main::@6/'0' )
  [84] func_rom_bank2_a::return#1 = func_rom_bank2_a::a#3 + func_rom_bank2_a::b#3
  to:func_rom_bank2_a::@return
func_rom_bank2_a::@return: scope:[func_rom_bank2_a]  from func_rom_bank2_a
  [85] return 
  to:@return

char func_rom_bank2_b(char a , char b)
func_rom_bank2_b: scope:[func_rom_bank2_b]  from func_ram_bank1_e func_rom_bank2_e main::@7
  [86] func_rom_bank2_b::b#3 = phi( func_ram_bank1_e/func_rom_bank2_b::b#0, func_rom_bank2_e/func_rom_bank2_b::b#1, main::@7/7 )
  [86] func_rom_bank2_b::a#3 = phi( func_ram_bank1_e/func_rom_bank2_b::a#0, func_rom_bank2_e/func_rom_bank2_b::a#1, main::@7/'0' )
  [87] func_rom_bank2_b::return#1 = func_rom_bank2_b::a#3 + func_rom_bank2_b::b#3
  to:func_rom_bank2_b::@return
func_rom_bank2_b::@return: scope:[func_rom_bank2_b]  from func_rom_bank2_b
  [88] return 
  to:@return

__bank(bank) char func_rom_bank2_c(char a , char b)
func_rom_bank2_c: scope:[func_rom_bank2_c]  from main::@8
  [89] phi()
  [90] call func_ram_bank1_a
  [91] func_ram_bank1_a::return#3 = func_ram_bank1_a::return#0
  to:func_rom_bank2_c::@1
func_rom_bank2_c::@1: scope:[func_rom_bank2_c]  from func_rom_bank2_c
  [92] func_rom_bank2_c::return#0 = func_ram_bank1_a::return#3
  to:func_rom_bank2_c::@return
func_rom_bank2_c::@return: scope:[func_rom_bank2_c]  from func_rom_bank2_c::@1
  [93] return 
  to:@return

__bank(bank) char func_rom_bank2_d(char a , char b)
func_rom_bank2_d: scope:[func_rom_bank2_d]  from main::@9
  [94] phi()
  [95] call func_rom_bank2_a
  [96] func_rom_bank2_a::return#3 = func_rom_bank2_a::return#1
  to:func_rom_bank2_d::@1
func_rom_bank2_d::@1: scope:[func_rom_bank2_d]  from func_rom_bank2_d
  [97] func_rom_bank2_d::return#0 = func_rom_bank2_a::return#3
  to:func_rom_bank2_d::@return
func_rom_bank2_d::@return: scope:[func_rom_bank2_d]  from func_rom_bank2_d::@1
  [98] return 
  to:@return

__bank(bank) char func_rom_bank2_e(char a , char b)
func_rom_bank2_e: scope:[func_rom_bank2_e]  from func_main_b main::@10
  [99] func_rom_bank2_e::b#2 = phi( func_main_b/func_main_b::b#0, main::@10/7 )
  [99] func_rom_bank2_e::a#2 = phi( func_main_b/func_main_b::a#0, main::@10/'0' )
  [100] func_rom_bank2_b::a#1 = func_rom_bank2_e::a#2
  [101] func_rom_bank2_b::b#1 = func_rom_bank2_e::b#2
  [102] call func_rom_bank2_b
  [103] func_rom_bank2_b::return#3 = func_rom_bank2_b::return#1
  to:func_rom_bank2_e::@1
func_rom_bank2_e::@1: scope:[func_rom_bank2_e]  from func_rom_bank2_e
  [104] func_rom_bank2_e::return#0 = func_rom_bank2_b::return#3
  to:func_rom_bank2_e::@return
func_rom_bank2_e::@return: scope:[func_rom_bank2_e]  from func_rom_bank2_e::@1
  [105] return 
  to:@return

__bank(bank) char func_rom_bank2_f(char a , char b)
func_rom_bank2_f: scope:[func_rom_bank2_f]  from main::@11
  [106] phi()
  [107] call func_main_a
  [108] func_main_a::return#1 = func_main_a::return#2
  to:func_rom_bank2_f::@1
func_rom_bank2_f::@1: scope:[func_rom_bank2_f]  from func_rom_bank2_f
  [109] func_rom_bank2_f::return#0 = func_main_a::return#1
  to:func_rom_bank2_f::@return
func_rom_bank2_f::@return: scope:[func_rom_bank2_f]  from func_rom_bank2_f::@1
  [110] return 
  to:@return

char func_main_a(char a , char b)
func_main_a: scope:[func_main_a]  from func_ram_bank1_f func_rom_bank2_f main::@12
  [111] func_main_a::b#3 = phi( func_ram_bank1_f/func_ram_bank1_f::b#0, func_rom_bank2_f/func_rom_bank2_f::b#0, main::@12/7 )
  [111] func_main_a::a#3 = phi( func_ram_bank1_f/func_ram_bank1_f::a#0, func_rom_bank2_f/func_rom_bank2_f::a#0, main::@12/'0' )
  [112] func_ram_bank1_e::a#0 = func_main_a::a#3
  [113] func_ram_bank1_e::b#0 = func_main_a::b#3
  [114] call func_ram_bank1_e
  [115] func_ram_bank1_e::return#2 = func_ram_bank1_e::return#0
  to:func_main_a::@1
func_main_a::@1: scope:[func_main_a]  from func_main_a
  [116] func_main_a::return#2 = func_ram_bank1_e::return#2
  to:func_main_a::@return
func_main_a::@return: scope:[func_main_a]  from func_main_a::@1
  [117] return 
  to:@return

char func_main_b(char a , char b)
func_main_b: scope:[func_main_b]  from main::@13
  [118] phi()
  [119] call func_rom_bank2_e
  [120] func_rom_bank2_e::return#2 = func_rom_bank2_e::return#0
  to:func_main_b::@1
func_main_b::@1: scope:[func_main_b]  from func_main_b
  [121] func_main_b::return#0 = func_rom_bank2_e::return#2
  to:func_main_b::@return
func_main_b::@return: scope:[func_main_b]  from func_main_b::@1
  [122] return 
  to:@return


VARIABLE REGISTER WEIGHTS
char func_main_a(char a , char b)
char func_main_a::a
char func_main_a::a#3 // 101.0
char func_main_a::b
char func_main_a::b#3 // 50.5
char func_main_a::return
char func_main_a::return#0 // 22.0
char func_main_a::return#1 // 22.0
char func_main_a::return#2 // 25.0
char func_main_a::return#4 // 4.0
char func_main_b(char a , char b)
char func_main_b::a
char func_main_b::b
char func_main_b::return
char func_main_b::return#0 // 4.333333333333333
char func_main_b::return#2 // 4.0
__bank(bank) char func_ram_bank1_a(char a , char b)
char func_ram_bank1_a::a
char func_ram_bank1_a::a#3 // 101.0
char func_ram_bank1_a::b
char func_ram_bank1_a::b#3 // 101.0
char func_ram_bank1_a::return
char func_ram_bank1_a::return#0 // 24.999999999999996
char func_ram_bank1_a::return#2 // 22.0
char func_ram_bank1_a::return#3 // 22.0
char func_ram_bank1_a::return#4 // 4.0
char func_ram_bank1_b(char a , char b)
char func_ram_bank1_b::a
char func_ram_bank1_b::b
char func_ram_bank1_b::return
__bank(bank) char func_ram_bank1_c(char a , char b)
char func_ram_bank1_c::a
char func_ram_bank1_c::b
char func_ram_bank1_c::return
char func_ram_bank1_c::return#0 // 4.333333333333333
char func_ram_bank1_c::return#2 // 4.0
__bank(bank) char func_ram_bank1_d(char a , char b)
char func_ram_bank1_d::a
char func_ram_bank1_d::b
char func_ram_bank1_d::return
char func_ram_bank1_d::return#0 // 4.333333333333333
char func_ram_bank1_d::return#2 // 4.0
__bank(bank) char func_ram_bank1_e(char a , char b)
char func_ram_bank1_e::a
char func_ram_bank1_e::a#0 // 101.0
char func_ram_bank1_e::a#2 // 1102.0
char func_ram_bank1_e::b
char func_ram_bank1_e::b#0 // 202.0
char func_ram_bank1_e::b#2 // 551.0
char func_ram_bank1_e::return
char func_ram_bank1_e::return#0 // 276.0
char func_ram_bank1_e::return#2 // 202.0
char func_ram_bank1_e::return#3 // 4.0
__bank(bank) char func_ram_bank1_f(char a , char b)
char func_ram_bank1_f::a
char func_ram_bank1_f::b
char func_ram_bank1_f::return
char func_ram_bank1_f::return#0 // 4.333333333333333
char func_ram_bank1_f::return#2 // 4.0
__bank(bank) char func_rom_bank2_a(char a , char b)
char func_rom_bank2_a::a
char func_rom_bank2_a::a#3 // 101.0
char func_rom_bank2_a::b
char func_rom_bank2_a::b#3 // 101.0
char func_rom_bank2_a::return
char func_rom_bank2_a::return#0 // 22.0
char func_rom_bank2_a::return#1 // 25.0
char func_rom_bank2_a::return#3 // 22.0
char func_rom_bank2_a::return#4 // 4.0
char func_rom_bank2_b(char a , char b)
char func_rom_bank2_b::a
char func_rom_bank2_b::a#0 // 1001.0
char func_rom_bank2_b::a#1 // 101.0
char func_rom_bank2_b::a#3 // 11103.0
char func_rom_bank2_b::b
char func_rom_bank2_b::b#0 // 2002.0
char func_rom_bank2_b::b#1 // 202.0
char func_rom_bank2_b::b#3 // 11103.0
char func_rom_bank2_b::return
char func_rom_bank2_b::return#0 // 2002.0
char func_rom_bank2_b::return#1 // 2221.0
char func_rom_bank2_b::return#3 // 202.0
char func_rom_bank2_b::return#4 // 4.0
__bank(bank) char func_rom_bank2_c(char a , char b)
char func_rom_bank2_c::a
char func_rom_bank2_c::b
char func_rom_bank2_c::return
char func_rom_bank2_c::return#0 // 4.333333333333333
char func_rom_bank2_c::return#2 // 4.0
__bank(bank) char func_rom_bank2_d(char a , char b)
char func_rom_bank2_d::a
char func_rom_bank2_d::b
char func_rom_bank2_d::return
char func_rom_bank2_d::return#0 // 4.333333333333333
char func_rom_bank2_d::return#2 // 4.0
__bank(bank) char func_rom_bank2_e(char a , char b)
char func_rom_bank2_e::a
char func_rom_bank2_e::a#2 // 101.0
char func_rom_bank2_e::b
char func_rom_bank2_e::b#2 // 50.5
char func_rom_bank2_e::return
char func_rom_bank2_e::return#0 // 28.5
char func_rom_bank2_e::return#2 // 22.0
char func_rom_bank2_e::return#3 // 4.0
__bank(bank) char func_rom_bank2_f(char a , char b)
char func_rom_bank2_f::a
char func_rom_bank2_f::b
char func_rom_bank2_f::return
char func_rom_bank2_f::return#0 // 4.333333333333333
char func_rom_bank2_f::return#2 // 4.0
void main()
char main::$0 // 4.0
char main::$10 // 4.0
char main::$11 // 4.0
char main::$12 // 4.0
char main::$13 // 4.0
char main::$2 // 4.0
char main::$3 // 4.0
char main::$4 // 4.0
char main::$5 // 4.0
char main::$6 // 4.0
char main::$7 // 4.0
char main::$8 // 4.0
char main::$9 // 4.0

Initial phi equivalence classes
[ func_ram_bank1_a::a#3 ]
[ func_ram_bank1_a::b#3 ]
[ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ]
[ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ]
[ func_rom_bank2_a::a#3 ]
[ func_rom_bank2_a::b#3 ]
[ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ]
[ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ]
[ func_rom_bank2_e::a#2 ]
[ func_rom_bank2_e::b#2 ]
[ func_main_a::a#3 ]
[ func_main_a::b#3 ]
Added variable func_ram_bank1_a::return#4 to live range equivalence class [ func_ram_bank1_a::return#4 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable func_ram_bank1_c::return#2 to live range equivalence class [ func_ram_bank1_c::return#2 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable func_ram_bank1_d::return#2 to live range equivalence class [ func_ram_bank1_d::return#2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable func_ram_bank1_e::return#3 to live range equivalence class [ func_ram_bank1_e::return#3 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable func_ram_bank1_f::return#2 to live range equivalence class [ func_ram_bank1_f::return#2 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable func_rom_bank2_a::return#4 to live range equivalence class [ func_rom_bank2_a::return#4 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable func_rom_bank2_b::return#4 to live range equivalence class [ func_rom_bank2_b::return#4 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable func_rom_bank2_c::return#2 to live range equivalence class [ func_rom_bank2_c::return#2 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Added variable func_rom_bank2_d::return#2 to live range equivalence class [ func_rom_bank2_d::return#2 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable func_rom_bank2_e::return#3 to live range equivalence class [ func_rom_bank2_e::return#3 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable func_rom_bank2_f::return#2 to live range equivalence class [ func_rom_bank2_f::return#2 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable func_main_a::return#4 to live range equivalence class [ func_main_a::return#4 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable func_main_b::return#2 to live range equivalence class [ func_main_b::return#2 ]
Added variable main::$13 to live range equivalence class [ main::$13 ]
Added variable func_ram_bank1_a::return#0 to live range equivalence class [ func_ram_bank1_a::return#0 ]
Added variable func_ram_bank1_a::return#2 to live range equivalence class [ func_ram_bank1_a::return#2 ]
Added variable func_ram_bank1_c::return#0 to live range equivalence class [ func_ram_bank1_c::return#0 ]
Added variable func_rom_bank2_a::return#0 to live range equivalence class [ func_rom_bank2_a::return#0 ]
Added variable func_ram_bank1_d::return#0 to live range equivalence class [ func_ram_bank1_d::return#0 ]
Added variable func_rom_bank2_b::return#0 to live range equivalence class [ func_rom_bank2_b::return#0 ]
Added variable func_ram_bank1_e::return#0 to live range equivalence class [ func_ram_bank1_e::return#0 ]
Added variable func_main_a::return#0 to live range equivalence class [ func_main_a::return#0 ]
Added variable func_ram_bank1_f::return#0 to live range equivalence class [ func_ram_bank1_f::return#0 ]
Added variable func_rom_bank2_a::return#1 to live range equivalence class [ func_rom_bank2_a::return#1 ]
Added variable func_rom_bank2_b::return#1 to live range equivalence class [ func_rom_bank2_b::return#1 ]
Added variable func_ram_bank1_a::return#3 to live range equivalence class [ func_ram_bank1_a::return#3 ]
Added variable func_rom_bank2_c::return#0 to live range equivalence class [ func_rom_bank2_c::return#0 ]
Added variable func_rom_bank2_a::return#3 to live range equivalence class [ func_rom_bank2_a::return#3 ]
Added variable func_rom_bank2_d::return#0 to live range equivalence class [ func_rom_bank2_d::return#0 ]
Added variable func_rom_bank2_b::return#3 to live range equivalence class [ func_rom_bank2_b::return#3 ]
Added variable func_rom_bank2_e::return#0 to live range equivalence class [ func_rom_bank2_e::return#0 ]
Added variable func_main_a::return#1 to live range equivalence class [ func_main_a::return#1 ]
Added variable func_rom_bank2_f::return#0 to live range equivalence class [ func_rom_bank2_f::return#0 ]
Added variable func_ram_bank1_e::return#2 to live range equivalence class [ func_ram_bank1_e::return#2 ]
Added variable func_main_a::return#2 to live range equivalence class [ func_main_a::return#2 ]
Added variable func_rom_bank2_e::return#2 to live range equivalence class [ func_rom_bank2_e::return#2 ]
Added variable func_main_b::return#0 to live range equivalence class [ func_main_b::return#0 ]
Complete equivalence classes
[ func_ram_bank1_a::a#3 ]
[ func_ram_bank1_a::b#3 ]
[ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ]
[ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ]
[ func_rom_bank2_a::a#3 ]
[ func_rom_bank2_a::b#3 ]
[ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ]
[ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ]
[ func_rom_bank2_e::a#2 ]
[ func_rom_bank2_e::b#2 ]
[ func_main_a::a#3 ]
[ func_main_a::b#3 ]
[ func_ram_bank1_a::return#4 ]
[ main::$0 ]
[ func_ram_bank1_c::return#2 ]
[ main::$2 ]
[ func_ram_bank1_d::return#2 ]
[ main::$3 ]
[ func_ram_bank1_e::return#3 ]
[ main::$4 ]
[ func_ram_bank1_f::return#2 ]
[ main::$5 ]
[ func_rom_bank2_a::return#4 ]
[ main::$6 ]
[ func_rom_bank2_b::return#4 ]
[ main::$7 ]
[ func_rom_bank2_c::return#2 ]
[ main::$8 ]
[ func_rom_bank2_d::return#2 ]
[ main::$9 ]
[ func_rom_bank2_e::return#3 ]
[ main::$10 ]
[ func_rom_bank2_f::return#2 ]
[ main::$11 ]
[ func_main_a::return#4 ]
[ main::$12 ]
[ func_main_b::return#2 ]
[ main::$13 ]
[ func_ram_bank1_a::return#0 ]
[ func_ram_bank1_a::return#2 ]
[ func_ram_bank1_c::return#0 ]
[ func_rom_bank2_a::return#0 ]
[ func_ram_bank1_d::return#0 ]
[ func_rom_bank2_b::return#0 ]
[ func_ram_bank1_e::return#0 ]
[ func_main_a::return#0 ]
[ func_ram_bank1_f::return#0 ]
[ func_rom_bank2_a::return#1 ]
[ func_rom_bank2_b::return#1 ]
[ func_ram_bank1_a::return#3 ]
[ func_rom_bank2_c::return#0 ]
[ func_rom_bank2_a::return#3 ]
[ func_rom_bank2_d::return#0 ]
[ func_rom_bank2_b::return#3 ]
[ func_rom_bank2_e::return#0 ]
[ func_main_a::return#1 ]
[ func_rom_bank2_f::return#0 ]
[ func_ram_bank1_e::return#2 ]
[ func_main_a::return#2 ]
[ func_rom_bank2_e::return#2 ]
[ func_main_b::return#0 ]
Allocated zp[1]:2 [ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ]
Allocated zp[1]:3 [ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ]
Allocated zp[1]:4 [ func_rom_bank2_b::return#1 ]
Allocated zp[1]:5 [ func_rom_bank2_b::return#0 ]
Allocated zp[1]:6 [ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ]
Allocated zp[1]:7 [ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ]
Allocated zp[1]:8 [ func_ram_bank1_e::return#0 ]
Allocated zp[1]:9 [ func_rom_bank2_b::return#3 ]
Allocated zp[1]:10 [ func_ram_bank1_e::return#2 ]
Allocated zp[1]:11 [ func_ram_bank1_a::a#3 ]
Allocated zp[1]:12 [ func_ram_bank1_a::b#3 ]
Allocated zp[1]:13 [ func_rom_bank2_a::a#3 ]
Allocated zp[1]:14 [ func_rom_bank2_a::b#3 ]
Allocated zp[1]:15 [ func_rom_bank2_e::a#2 ]
Allocated zp[1]:16 [ func_main_a::a#3 ]
Allocated zp[1]:17 [ func_rom_bank2_e::b#2 ]
Allocated zp[1]:18 [ func_main_a::b#3 ]
Allocated zp[1]:19 [ func_rom_bank2_e::return#0 ]
Allocated zp[1]:20 [ func_rom_bank2_a::return#1 ]
Allocated zp[1]:21 [ func_main_a::return#2 ]
Allocated zp[1]:22 [ func_ram_bank1_a::return#0 ]
Allocated zp[1]:23 [ func_ram_bank1_a::return#2 ]
Allocated zp[1]:24 [ func_rom_bank2_a::return#0 ]
Allocated zp[1]:25 [ func_main_a::return#0 ]
Allocated zp[1]:26 [ func_ram_bank1_a::return#3 ]
Allocated zp[1]:27 [ func_rom_bank2_a::return#3 ]
Allocated zp[1]:28 [ func_main_a::return#1 ]
Allocated zp[1]:29 [ func_rom_bank2_e::return#2 ]
Allocated zp[1]:30 [ func_ram_bank1_c::return#0 ]
Allocated zp[1]:31 [ func_ram_bank1_d::return#0 ]
Allocated zp[1]:32 [ func_ram_bank1_f::return#0 ]
Allocated zp[1]:33 [ func_rom_bank2_c::return#0 ]
Allocated zp[1]:34 [ func_rom_bank2_d::return#0 ]
Allocated zp[1]:35 [ func_rom_bank2_f::return#0 ]
Allocated zp[1]:36 [ func_main_b::return#0 ]
Allocated zp[1]:37 [ func_ram_bank1_a::return#4 ]
Allocated zp[1]:38 [ main::$0 ]
Allocated zp[1]:39 [ func_ram_bank1_c::return#2 ]
Allocated zp[1]:40 [ main::$2 ]
Allocated zp[1]:41 [ func_ram_bank1_d::return#2 ]
Allocated zp[1]:42 [ main::$3 ]
Allocated zp[1]:43 [ func_ram_bank1_e::return#3 ]
Allocated zp[1]:44 [ main::$4 ]
Allocated zp[1]:45 [ func_ram_bank1_f::return#2 ]
Allocated zp[1]:46 [ main::$5 ]
Allocated zp[1]:47 [ func_rom_bank2_a::return#4 ]
Allocated zp[1]:48 [ main::$6 ]
Allocated zp[1]:49 [ func_rom_bank2_b::return#4 ]
Allocated zp[1]:50 [ main::$7 ]
Allocated zp[1]:51 [ func_rom_bank2_c::return#2 ]
Allocated zp[1]:52 [ main::$8 ]
Allocated zp[1]:53 [ func_rom_bank2_d::return#2 ]
Allocated zp[1]:54 [ main::$9 ]
Allocated zp[1]:55 [ func_rom_bank2_e::return#3 ]
Allocated zp[1]:56 [ main::$10 ]
Allocated zp[1]:57 [ func_rom_bank2_f::return#2 ]
Allocated zp[1]:58 [ main::$11 ]
Allocated zp[1]:59 [ func_main_a::return#4 ]
Allocated zp[1]:60 [ main::$12 ]
Allocated zp[1]:61 [ func_main_b::return#2 ]
Allocated zp[1]:62 [ main::$13 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *SCREEN = func_ram_bank1_b::return#0 [ ] (  [ ] { { func_ram_bank1_c::return#0 = func_ram_bank1_c::return#2 } }  ) always clobbers reg byte a 
Statement [57] func_ram_bank1_a::return#0 = func_ram_bank1_a::a#3 + func_ram_bank1_a::b#3 [ func_ram_bank1_a::return#0 ] ( func_ram_bank1_a:1 [ func_ram_bank1_a::return#0 ] { { func_ram_bank1_a::return#0 = func_ram_bank1_a::return#4 } }  func_ram_bank1_c:7::func_ram_bank1_a:62 [ func_ram_bank1_a::return#0 ] { { func_ram_bank1_c::return#0 = func_ram_bank1_c::return#2 } { func_ram_bank1_a::return#0 = func_ram_bank1_a::return#2 } }  func_rom_bank2_c:31::func_ram_bank1_a:90 [ func_ram_bank1_a::return#0 ] { { func_rom_bank2_c::return#0 = func_rom_bank2_c::return#2 } { func_ram_bank1_a::return#0 = func_ram_bank1_a::return#3 } }  ) always clobbers reg byte a 
Statement [84] func_rom_bank2_a::return#1 = func_rom_bank2_a::a#3 + func_rom_bank2_a::b#3 [ func_rom_bank2_a::return#1 ] ( func_rom_bank2_a:23 [ func_rom_bank2_a::return#1 ] { { func_rom_bank2_a::return#1 = func_rom_bank2_a::return#4 } }  func_ram_bank1_d:11::func_rom_bank2_a:67 [ func_rom_bank2_a::return#1 ] { { func_ram_bank1_d::return#0 = func_ram_bank1_d::return#2 } { func_rom_bank2_a::return#0 = func_rom_bank2_a::return#1 } }  func_rom_bank2_d:35::func_rom_bank2_a:95 [ func_rom_bank2_a::return#1 ] { { func_rom_bank2_d::return#0 = func_rom_bank2_d::return#2 } { func_rom_bank2_a::return#1 = func_rom_bank2_a::return#3 } }  ) always clobbers reg byte a 
Statement [87] func_rom_bank2_b::return#1 = func_rom_bank2_b::a#3 + func_rom_bank2_b::b#3 [ func_rom_bank2_b::return#1 ] ( func_rom_bank2_b:27 [ func_rom_bank2_b::return#1 ] { { func_rom_bank2_b::return#1 = func_rom_bank2_b::return#4 } }  func_ram_bank1_e:15::func_rom_bank2_b:74 [ func_rom_bank2_b::return#1 ] { { func_ram_bank1_e::return#0 = func_ram_bank1_e::return#3 } { func_rom_bank2_b::a#0 = func_rom_bank2_b::a#3 func_ram_bank1_e::a#2 } { func_rom_bank2_b::b#0 = func_rom_bank2_b::b#3 func_ram_bank1_e::b#2 } { func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1 } }  func_main_a:47::func_ram_bank1_e:114::func_rom_bank2_b:74 [ func_rom_bank2_b::return#1 ] { { func_main_a::return#2 = func_main_a::return#4 } { func_ram_bank1_e::return#0 = func_ram_bank1_e::return#2 } { func_rom_bank2_b::a#0 = func_rom_bank2_b::a#3 func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 func_main_a::a#3 } { func_rom_bank2_b::b#0 = func_rom_bank2_b::b#3 func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 func_main_a::b#3 } { func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1 } }  func_ram_bank1_f:19::func_main_a:79::func_ram_bank1_e:114::func_rom_bank2_b:74 [ func_rom_bank2_b::return#1 ] { { func_ram_bank1_f::return#0 = func_ram_bank1_f::return#2 } { func_main_a::return#0 = func_main_a::return#2 } { func_ram_bank1_e::return#0 = func_ram_bank1_e::return#2 } { func_rom_bank2_b::a#0 = func_rom_bank2_b::a#3 func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 func_main_a::a#3 } { func_rom_bank2_b::b#0 = func_rom_bank2_b::b#3 func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 func_main_a::b#3 } { func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1 } }  func_rom_bank2_f:43::func_main_a:107::func_ram_bank1_e:114::func_rom_bank2_b:74 [ func_rom_bank2_b::return#1 ] { { func_rom_bank2_f::return#0 = func_rom_bank2_f::return#2 } { func_main_a::return#1 = func_main_a::return#2 } { func_ram_bank1_e::return#0 = func_ram_bank1_e::return#2 } { func_rom_bank2_b::a#0 = func_rom_bank2_b::a#3 func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 func_main_a::a#3 } { func_rom_bank2_b::b#0 = func_rom_bank2_b::b#3 func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 func_main_a::b#3 } { func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1 } }  func_rom_bank2_e:39::func_rom_bank2_b:102 [ func_rom_bank2_b::return#1 ] { { func_rom_bank2_e::return#0 = func_rom_bank2_e::return#3 } { func_rom_bank2_b::a#1 = func_rom_bank2_b::a#3 func_rom_bank2_e::a#2 } { func_rom_bank2_b::b#1 = func_rom_bank2_b::b#3 func_rom_bank2_e::b#2 } { func_rom_bank2_b::return#1 = func_rom_bank2_b::return#3 } }  func_main_b:51::func_rom_bank2_e:119::func_rom_bank2_b:102 [ func_rom_bank2_b::return#1 ] { { func_main_b::return#0 = func_main_b::return#2 } { func_rom_bank2_e::return#0 = func_rom_bank2_e::return#2 } { func_rom_bank2_b::a#1 = func_rom_bank2_b::a#3 func_rom_bank2_e::a#2 } { func_rom_bank2_b::b#1 = func_rom_bank2_b::b#3 func_rom_bank2_e::b#2 } { func_rom_bank2_b::return#1 = func_rom_bank2_b::return#3 } }  ) always clobbers reg byte a 
Potential registers zp[1]:11 [ func_ram_bank1_a::a#3 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ func_ram_bank1_a::b#3 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ func_rom_bank2_a::a#3 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ func_rom_bank2_a::b#3 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ func_rom_bank2_e::a#2 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ func_rom_bank2_e::b#2 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ func_main_a::a#3 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ func_main_a::b#3 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ func_ram_bank1_a::return#4 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ main::$0 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ func_ram_bank1_c::return#2 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ main::$2 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ func_ram_bank1_d::return#2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ main::$3 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ func_ram_bank1_e::return#3 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ main::$4 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ func_ram_bank1_f::return#2 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ main::$5 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ func_rom_bank2_a::return#4 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ main::$6 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ func_rom_bank2_b::return#4 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ main::$7 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ func_rom_bank2_c::return#2 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ main::$8 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ func_rom_bank2_d::return#2 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ main::$9 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ func_rom_bank2_e::return#3 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ main::$10 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ func_rom_bank2_f::return#2 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ main::$11 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ func_main_a::return#4 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ main::$12 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ func_main_b::return#2 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ main::$13 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ func_ram_bank1_a::return#0 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ func_ram_bank1_a::return#2 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ func_ram_bank1_c::return#0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ func_rom_bank2_a::return#0 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ func_ram_bank1_d::return#0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ func_rom_bank2_b::return#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ func_ram_bank1_e::return#0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ func_main_a::return#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ func_ram_bank1_f::return#0 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ func_rom_bank2_a::return#1 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ func_rom_bank2_b::return#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ func_ram_bank1_a::return#3 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ func_rom_bank2_c::return#0 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ func_rom_bank2_a::return#3 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ func_rom_bank2_d::return#0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ func_rom_bank2_b::return#3 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ func_rom_bank2_e::return#0 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ func_main_a::return#1 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ func_rom_bank2_f::return#0 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ func_ram_bank1_e::return#2 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ func_main_a::return#2 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ func_rom_bank2_e::return#2 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ func_main_b::return#0 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [func_rom_bank2_b] 13,307: zp[1]:2 [ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ] 12,205: zp[1]:3 [ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ] 2,221: zp[1]:4 [ func_rom_bank2_b::return#1 ] 2,002: zp[1]:5 [ func_rom_bank2_b::return#0 ] 202: zp[1]:9 [ func_rom_bank2_b::return#3 ] 4: zp[1]:49 [ func_rom_bank2_b::return#4 ] 
Uplift Scope [func_ram_bank1_e] 1,203: zp[1]:6 [ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ] 753: zp[1]:7 [ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ] 276: zp[1]:8 [ func_ram_bank1_e::return#0 ] 202: zp[1]:10 [ func_ram_bank1_e::return#2 ] 4: zp[1]:43 [ func_ram_bank1_e::return#3 ] 
Uplift Scope [func_ram_bank1_a] 101: zp[1]:11 [ func_ram_bank1_a::a#3 ] 101: zp[1]:12 [ func_ram_bank1_a::b#3 ] 25: zp[1]:22 [ func_ram_bank1_a::return#0 ] 22: zp[1]:23 [ func_ram_bank1_a::return#2 ] 22: zp[1]:26 [ func_ram_bank1_a::return#3 ] 4: zp[1]:37 [ func_ram_bank1_a::return#4 ] 
Uplift Scope [func_rom_bank2_a] 101: zp[1]:13 [ func_rom_bank2_a::a#3 ] 101: zp[1]:14 [ func_rom_bank2_a::b#3 ] 25: zp[1]:20 [ func_rom_bank2_a::return#1 ] 22: zp[1]:24 [ func_rom_bank2_a::return#0 ] 22: zp[1]:27 [ func_rom_bank2_a::return#3 ] 4: zp[1]:47 [ func_rom_bank2_a::return#4 ] 
Uplift Scope [func_main_a] 101: zp[1]:16 [ func_main_a::a#3 ] 50.5: zp[1]:18 [ func_main_a::b#3 ] 25: zp[1]:21 [ func_main_a::return#2 ] 22: zp[1]:25 [ func_main_a::return#0 ] 22: zp[1]:28 [ func_main_a::return#1 ] 4: zp[1]:59 [ func_main_a::return#4 ] 
Uplift Scope [func_rom_bank2_e] 101: zp[1]:15 [ func_rom_bank2_e::a#2 ] 50.5: zp[1]:17 [ func_rom_bank2_e::b#2 ] 28.5: zp[1]:19 [ func_rom_bank2_e::return#0 ] 22: zp[1]:29 [ func_rom_bank2_e::return#2 ] 4: zp[1]:55 [ func_rom_bank2_e::return#3 ] 
Uplift Scope [main] 4: zp[1]:38 [ main::$0 ] 4: zp[1]:40 [ main::$2 ] 4: zp[1]:42 [ main::$3 ] 4: zp[1]:44 [ main::$4 ] 4: zp[1]:46 [ main::$5 ] 4: zp[1]:48 [ main::$6 ] 4: zp[1]:50 [ main::$7 ] 4: zp[1]:52 [ main::$8 ] 4: zp[1]:54 [ main::$9 ] 4: zp[1]:56 [ main::$10 ] 4: zp[1]:58 [ main::$11 ] 4: zp[1]:60 [ main::$12 ] 4: zp[1]:62 [ main::$13 ] 
Uplift Scope [func_ram_bank1_c] 4.33: zp[1]:30 [ func_ram_bank1_c::return#0 ] 4: zp[1]:39 [ func_ram_bank1_c::return#2 ] 
Uplift Scope [func_ram_bank1_d] 4.33: zp[1]:31 [ func_ram_bank1_d::return#0 ] 4: zp[1]:41 [ func_ram_bank1_d::return#2 ] 
Uplift Scope [func_ram_bank1_f] 4.33: zp[1]:32 [ func_ram_bank1_f::return#0 ] 4: zp[1]:45 [ func_ram_bank1_f::return#2 ] 
Uplift Scope [func_rom_bank2_c] 4.33: zp[1]:33 [ func_rom_bank2_c::return#0 ] 4: zp[1]:51 [ func_rom_bank2_c::return#2 ] 
Uplift Scope [func_rom_bank2_d] 4.33: zp[1]:34 [ func_rom_bank2_d::return#0 ] 4: zp[1]:53 [ func_rom_bank2_d::return#2 ] 
Uplift Scope [func_rom_bank2_f] 4.33: zp[1]:35 [ func_rom_bank2_f::return#0 ] 4: zp[1]:57 [ func_rom_bank2_f::return#2 ] 
Uplift Scope [func_main_b] 4.33: zp[1]:36 [ func_main_b::return#0 ] 4: zp[1]:61 [ func_main_b::return#2 ] 
Uplift Scope [func_ram_bank1_b] 
Uplift Scope [] 

Uplifting [func_rom_bank2_b] best 914 combination reg byte x [ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ] reg byte a [ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ] reg byte a [ func_rom_bank2_b::return#1 ] reg byte a [ func_rom_bank2_b::return#0 ] zp[1]:9 [ func_rom_bank2_b::return#3 ] zp[1]:49 [ func_rom_bank2_b::return#4 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [func_ram_bank1_e] best 881 combination reg byte a [ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ] reg byte x [ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ] reg byte a [ func_ram_bank1_e::return#0 ] reg byte a [ func_ram_bank1_e::return#2 ] zp[1]:43 [ func_ram_bank1_e::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [func_ram_bank1_a] best 845 combination reg byte x [ func_ram_bank1_a::a#3 ] reg byte a [ func_ram_bank1_a::b#3 ] reg byte a [ func_ram_bank1_a::return#0 ] reg byte a [ func_ram_bank1_a::return#2 ] zp[1]:26 [ func_ram_bank1_a::return#3 ] zp[1]:37 [ func_ram_bank1_a::return#4 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [func_rom_bank2_a] best 809 combination reg byte x [ func_rom_bank2_a::a#3 ] reg byte a [ func_rom_bank2_a::b#3 ] reg byte a [ func_rom_bank2_a::return#1 ] reg byte a [ func_rom_bank2_a::return#0 ] zp[1]:27 [ func_rom_bank2_a::return#3 ] zp[1]:47 [ func_rom_bank2_a::return#4 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [func_main_a] best 767 combination reg byte a [ func_main_a::a#3 ] reg byte x [ func_main_a::b#3 ] reg byte a [ func_main_a::return#2 ] reg byte a [ func_main_a::return#0 ] zp[1]:28 [ func_main_a::return#1 ] zp[1]:59 [ func_main_a::return#4 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [func_rom_bank2_e] best 734 combination reg byte a [ func_rom_bank2_e::a#2 ] reg byte x [ func_rom_bank2_e::b#2 ] reg byte a [ func_rom_bank2_e::return#0 ] reg byte a [ func_rom_bank2_e::return#2 ] zp[1]:55 [ func_rom_bank2_e::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 710 combination reg byte a [ main::$0 ] reg byte a [ main::$2 ] reg byte a [ main::$3 ] reg byte a [ main::$4 ] zp[1]:46 [ main::$5 ] zp[1]:48 [ main::$6 ] zp[1]:50 [ main::$7 ] zp[1]:52 [ main::$8 ] zp[1]:54 [ main::$9 ] zp[1]:56 [ main::$10 ] zp[1]:58 [ main::$11 ] zp[1]:60 [ main::$12 ] zp[1]:62 [ main::$13 ] 
Limited combination testing to 100 combinations of 67108864 possible.
Uplifting [func_ram_bank1_c] best 698 combination reg byte a [ func_ram_bank1_c::return#0 ] reg byte a [ func_ram_bank1_c::return#2 ] 
Uplifting [func_ram_bank1_d] best 686 combination reg byte a [ func_ram_bank1_d::return#0 ] reg byte a [ func_ram_bank1_d::return#2 ] 
Uplifting [func_ram_bank1_f] best 674 combination reg byte a [ func_ram_bank1_f::return#0 ] reg byte a [ func_ram_bank1_f::return#2 ] 
Uplifting [func_rom_bank2_c] best 662 combination reg byte a [ func_rom_bank2_c::return#0 ] reg byte a [ func_rom_bank2_c::return#2 ] 
Uplifting [func_rom_bank2_d] best 650 combination reg byte a [ func_rom_bank2_d::return#0 ] reg byte a [ func_rom_bank2_d::return#2 ] 
Uplifting [func_rom_bank2_f] best 638 combination reg byte a [ func_rom_bank2_f::return#0 ] reg byte a [ func_rom_bank2_f::return#2 ] 
Uplifting [func_main_b] best 626 combination reg byte a [ func_main_b::return#0 ] reg byte a [ func_main_b::return#2 ] 
Uplifting [func_ram_bank1_b] best 626 combination 
Uplifting [] best 626 combination 
Attempting to uplift remaining variables inzp[1]:9 [ func_rom_bank2_b::return#3 ]
Uplifting [func_rom_bank2_b] best 620 combination reg byte a [ func_rom_bank2_b::return#3 ] 
Attempting to uplift remaining variables inzp[1]:26 [ func_ram_bank1_a::return#3 ]
Uplifting [func_ram_bank1_a] best 614 combination reg byte a [ func_ram_bank1_a::return#3 ] 
Attempting to uplift remaining variables inzp[1]:27 [ func_rom_bank2_a::return#3 ]
Uplifting [func_rom_bank2_a] best 608 combination reg byte a [ func_rom_bank2_a::return#3 ] 
Attempting to uplift remaining variables inzp[1]:28 [ func_main_a::return#1 ]
Uplifting [func_main_a] best 602 combination reg byte a [ func_main_a::return#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ func_ram_bank1_a::return#4 ]
Uplifting [func_ram_bank1_a] best 596 combination reg byte a [ func_ram_bank1_a::return#4 ] 
Attempting to uplift remaining variables inzp[1]:43 [ func_ram_bank1_e::return#3 ]
Uplifting [func_ram_bank1_e] best 590 combination reg byte a [ func_ram_bank1_e::return#3 ] 
Attempting to uplift remaining variables inzp[1]:46 [ main::$5 ]
Uplifting [main] best 584 combination reg byte a [ main::$5 ] 
Attempting to uplift remaining variables inzp[1]:47 [ func_rom_bank2_a::return#4 ]
Uplifting [func_rom_bank2_a] best 578 combination reg byte a [ func_rom_bank2_a::return#4 ] 
Attempting to uplift remaining variables inzp[1]:48 [ main::$6 ]
Uplifting [main] best 572 combination reg byte a [ main::$6 ] 
Attempting to uplift remaining variables inzp[1]:49 [ func_rom_bank2_b::return#4 ]
Uplifting [func_rom_bank2_b] best 566 combination reg byte a [ func_rom_bank2_b::return#4 ] 
Attempting to uplift remaining variables inzp[1]:50 [ main::$7 ]
Uplifting [main] best 560 combination reg byte a [ main::$7 ] 
Attempting to uplift remaining variables inzp[1]:52 [ main::$8 ]
Uplifting [main] best 554 combination reg byte a [ main::$8 ] 
Attempting to uplift remaining variables inzp[1]:54 [ main::$9 ]
Uplifting [main] best 548 combination reg byte a [ main::$9 ] 
Attempting to uplift remaining variables inzp[1]:55 [ func_rom_bank2_e::return#3 ]
Uplifting [func_rom_bank2_e] best 542 combination reg byte a [ func_rom_bank2_e::return#3 ] 
Attempting to uplift remaining variables inzp[1]:56 [ main::$10 ]
Uplifting [main] best 536 combination reg byte a [ main::$10 ] 
Attempting to uplift remaining variables inzp[1]:58 [ main::$11 ]
Uplifting [main] best 530 combination reg byte a [ main::$11 ] 
Attempting to uplift remaining variables inzp[1]:59 [ func_main_a::return#4 ]
Uplifting [func_main_a] best 524 combination reg byte a [ func_main_a::return#4 ] 
Attempting to uplift remaining variables inzp[1]:60 [ main::$12 ]
Uplifting [main] best 518 combination reg byte a [ main::$12 ] 
Attempting to uplift remaining variables inzp[1]:62 [ main::$13 ]
Uplifting [main] best 512 combination reg byte a [ main::$13 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// The linker specification of the different segments.
  // Upstart
.cpu _65c02
  .segmentdef Program                 [segments="Basic, Code, Data, Bank1, Bank2"]
.segmentdef Basic                   [start=$0801]a
.segmentdef Code                    [start=$80d]
.segmentdef Data                    [startAfter="Code"]
.segmentdef Bank1                   [start=$A000, min=$A000, max=$BFFF, align=$100]
.segmentdef Bank2                   [start=$C000, min=$C000, max=$FFFF, align=$100]


  // Global Constants & labels
  // The target computer platform is the Commander X16,
  // which implements banking in ram between 0xA0000 and 0xBFFF,
  // and in rom between 0xC000 and 0xFFFF.
  .label SCREEN = $400
.segment Code
  // main
// Practically this means that the main() function is placed in main memory ...
main: {
    // [1] call func_ram_bank1_a
    // [56] phi from main to func_ram_bank1_a [phi:main->func_ram_bank1_a]
  func_ram_bank1_a_from_main:
    // [56] phi func_ram_bank1_a::b#3 = 7 [phi:main->func_ram_bank1_a#0] -- vbuaa=vbuc1 
    lda #7
    // [56] phi func_ram_bank1_a::a#3 = '0' [phi:main->func_ram_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_ram_bank1_a
    .byte >func_ram_bank1_a
    .byte 1
    // [2] func_ram_bank1_a::return#4 = func_ram_bank1_a::return#0
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$0 = func_ram_bank1_a::return#4
    // [4] *SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [5] call func_ram_bank1_b
    // [59] phi from main::@1 to func_ram_bank1_b [phi:main::@1->func_ram_bank1_b]
  func_ram_bank1_b_from___b1:
    jsr func_ram_bank1_b
    jmp __b2
    // main::@2
  __b2:
    // [6] *SCREEN = func_ram_bank1_b::return#0 -- _deref_pbuc1=vbuc2 
    // Banked call to ram in bank 1 from main memory.
    lda #func_ram_bank1_b.return
    sta SCREEN
    // [7] call func_ram_bank1_c
    // [61] phi from main::@2 to func_ram_bank1_c [phi:main::@2->func_ram_bank1_c] -- call_far_cx16_ram_finalize 
  func_ram_bank1_c_from___b2:
    jsr $ff6e
    .byte <func_ram_bank1_c
    .byte >func_ram_bank1_c
    .byte 1
    // [8] func_ram_bank1_c::return#2 = func_ram_bank1_c::return#0
    jmp __b3
    // main::@3
  __b3:
    // [9] main::$2 = func_ram_bank1_c::return#2
    // [10] *SCREEN = main::$2 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // [11] call func_ram_bank1_d
    // [66] phi from main::@3 to func_ram_bank1_d [phi:main::@3->func_ram_bank1_d] -- call_far_cx16_ram_finalize 
  func_ram_bank1_d_from___b3:
    jsr $ff6e
    .byte <func_ram_bank1_d
    .byte >func_ram_bank1_d
    .byte 1
    // [12] func_ram_bank1_d::return#2 = func_ram_bank1_d::return#0
    jmp __b4
    // main::@4
  __b4:
    // [13] main::$3 = func_ram_bank1_d::return#2
    // [14] *SCREEN = main::$3 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // [15] call func_ram_bank1_e
    // [71] phi from main::@4 to func_ram_bank1_e [phi:main::@4->func_ram_bank1_e]
  func_ram_bank1_e_from___b4:
    // [71] phi func_ram_bank1_e::b#2 = 7 [phi:main::@4->func_ram_bank1_e#0] -- vbuxx=vbuc1 
    ldx #7
    // [71] phi func_ram_bank1_e::a#2 = '0' [phi:main::@4->func_ram_bank1_e#1] -- call_far_cx16_ram_finalize 
    lda #'0'
    jsr $ff6e
    .byte <func_ram_bank1_e
    .byte >func_ram_bank1_e
    .byte 1
    // [16] func_ram_bank1_e::return#3 = func_ram_bank1_e::return#0
    jmp __b5
    // main::@5
  __b5:
    // [17] main::$4 = func_ram_bank1_e::return#3
    // [18] *SCREEN = main::$4 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // [19] call func_ram_bank1_f
    // [78] phi from main::@5 to func_ram_bank1_f [phi:main::@5->func_ram_bank1_f] -- call_far_cx16_ram_finalize 
  func_ram_bank1_f_from___b5:
    jsr $ff6e
    .byte <func_ram_bank1_f
    .byte >func_ram_bank1_f
    .byte 1
    // [20] func_ram_bank1_f::return#2 = func_ram_bank1_f::return#0
    jmp __b6
    // main::@6
  __b6:
    // [21] main::$5 = func_ram_bank1_f::return#2
    // [22] *SCREEN = main::$5 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // [23] call func_rom_bank2_a
    // [83] phi from main::@6 to func_rom_bank2_a [phi:main::@6->func_rom_bank2_a]
  func_rom_bank2_a_from___b6:
    // [83] phi func_rom_bank2_a::b#3 = 7 [phi:main::@6->func_rom_bank2_a#0] -- vbuaa=vbuc1 
    lda #7
    // [83] phi func_rom_bank2_a::a#3 = '0' [phi:main::@6->func_rom_bank2_a#1] -- call_far_cx16_rom_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_rom_bank2_a
    .byte >func_rom_bank2_a
    .byte 2
    // [24] func_rom_bank2_a::return#4 = func_rom_bank2_a::return#1
    jmp __b7
    // main::@7
  __b7:
    // [25] main::$6 = func_rom_bank2_a::return#4
    // [26] *SCREEN = main::$6 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // [27] call func_rom_bank2_b
    // [86] phi from main::@7 to func_rom_bank2_b [phi:main::@7->func_rom_bank2_b]
  func_rom_bank2_b_from___b7:
    // [86] phi func_rom_bank2_b::b#3 = 7 [phi:main::@7->func_rom_bank2_b#0] -- vbuxx=vbuc1 
    ldx #7
    // [86] phi func_rom_bank2_b::a#3 = '0' [phi:main::@7->func_rom_bank2_b#1] -- vbuaa=vbuc1 
    lda #'0'
    jsr func_rom_bank2_b
    // [28] func_rom_bank2_b::return#4 = func_rom_bank2_b::return#1
    jmp __b8
    // main::@8
  __b8:
    // [29] main::$7 = func_rom_bank2_b::return#4
    // [30] *SCREEN = main::$7 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // [31] call func_rom_bank2_c
    // [89] phi from main::@8 to func_rom_bank2_c [phi:main::@8->func_rom_bank2_c] -- call_far_cx16_rom_finalize 
  func_rom_bank2_c_from___b8:
    jsr $ff6e
    .byte <func_rom_bank2_c
    .byte >func_rom_bank2_c
    .byte 2
    // [32] func_rom_bank2_c::return#2 = func_rom_bank2_c::return#0
    jmp __b9
    // main::@9
  __b9:
    // [33] main::$8 = func_rom_bank2_c::return#2
    // [34] *SCREEN = main::$8 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // [35] call func_rom_bank2_d
    // [94] phi from main::@9 to func_rom_bank2_d [phi:main::@9->func_rom_bank2_d] -- call_far_cx16_rom_finalize 
  func_rom_bank2_d_from___b9:
    jsr $ff6e
    .byte <func_rom_bank2_d
    .byte >func_rom_bank2_d
    .byte 2
    // [36] func_rom_bank2_d::return#2 = func_rom_bank2_d::return#0
    jmp __b10
    // main::@10
  __b10:
    // [37] main::$9 = func_rom_bank2_d::return#2
    // [38] *SCREEN = main::$9 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // [39] call func_rom_bank2_e
    // [99] phi from main::@10 to func_rom_bank2_e [phi:main::@10->func_rom_bank2_e]
  func_rom_bank2_e_from___b10:
    // [99] phi func_rom_bank2_e::b#2 = 7 [phi:main::@10->func_rom_bank2_e#0] -- vbuxx=vbuc1 
    ldx #7
    // [99] phi func_rom_bank2_e::a#2 = '0' [phi:main::@10->func_rom_bank2_e#1] -- call_far_cx16_rom_finalize 
    lda #'0'
    jsr $ff6e
    .byte <func_rom_bank2_e
    .byte >func_rom_bank2_e
    .byte 2
    // [40] func_rom_bank2_e::return#3 = func_rom_bank2_e::return#0
    jmp __b11
    // main::@11
  __b11:
    // [41] main::$10 = func_rom_bank2_e::return#3
    // [42] *SCREEN = main::$10 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // [43] call func_rom_bank2_f
    // [106] phi from main::@11 to func_rom_bank2_f [phi:main::@11->func_rom_bank2_f] -- call_far_cx16_rom_finalize 
  func_rom_bank2_f_from___b11:
    jsr $ff6e
    .byte <func_rom_bank2_f
    .byte >func_rom_bank2_f
    .byte 2
    // [44] func_rom_bank2_f::return#2 = func_rom_bank2_f::return#0
    jmp __b12
    // main::@12
  __b12:
    // [45] main::$11 = func_rom_bank2_f::return#2
    // [46] *SCREEN = main::$11 -- _deref_pbuc1=vbuaa 
    // banked call to rom in bank 2 from main memory.
    sta SCREEN
    // [47] call func_main_a
    // [111] phi from main::@12 to func_main_a [phi:main::@12->func_main_a]
  func_main_a_from___b12:
    // [111] phi func_main_a::b#3 = 7 [phi:main::@12->func_main_a#0] -- vbuxx=vbuc1 
    ldx #7
    // [111] phi func_main_a::a#3 = '0' [phi:main::@12->func_main_a#1] -- vbuaa=vbuc1 
    lda #'0'
    jsr func_main_a
    // [48] func_main_a::return#4 = func_main_a::return#2
    jmp __b13
    // main::@13
  __b13:
    // [49] main::$12 = func_main_a::return#4
    // [50] *SCREEN = main::$12 -- _deref_pbuc1=vbuaa 
    // banked call to rom in bank 2 from main memory.
    sta SCREEN
    // [51] call func_main_b
    // [118] phi from main::@13 to func_main_b [phi:main::@13->func_main_b]
  func_main_b_from___b13:
    jsr func_main_b
    // [52] func_main_b::return#2 = func_main_b::return#0
    jmp __b14
    // main::@14
  __b14:
    // [53] main::$13 = func_main_b::return#2
    // [54] *SCREEN = main::$13 -- _deref_pbuc1=vbuaa 
    // Near call in main memory from main memory.
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [55] return 
    rts
}
.segment Bank1
  // func_ram_bank1_a
// Functional code
// __register(A) char func_ram_bank1_a(__register(X) char a, __register(A) char b)
func_ram_bank1_a: {
    // [57] func_ram_bank1_a::return#0 = func_ram_bank1_a::a#3 + func_ram_bank1_a::b#3 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_ram_bank1_a::@return
  __breturn:
    // [58] return 
    rts
}
.segment Bank2
  // func_ram_bank1_b
// The sequent functions will consider no banking calculations anymore.
// The __bank directive declares this function to be banked using call method ram in bank number 1 of banked ram.
// char func_ram_bank1_b(char a, char b)
func_ram_bank1_b: {
    .const a = '0'
    .const b = 7
    .label return = a+b
    jmp __breturn
    // func_ram_bank1_b::@return
  __breturn:
    // [60] return 
    rts
}
.segment Bank1
  // func_ram_bank1_c
// __register(A) char func_ram_bank1_c(char a, char b)
func_ram_bank1_c: {
    .const a = '0'
    .const b = 7
    // [62] call func_ram_bank1_a
    // [56] phi from func_ram_bank1_c to func_ram_bank1_a [phi:func_ram_bank1_c->func_ram_bank1_a]
  func_ram_bank1_a_from_func_ram_bank1_c:
    // [56] phi func_ram_bank1_a::b#3 = func_ram_bank1_c::b#0 [phi:func_ram_bank1_c->func_ram_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [56] phi func_ram_bank1_a::a#3 = func_ram_bank1_c::a#0 [phi:func_ram_bank1_c->func_ram_bank1_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_ram_bank1_a
    // [63] func_ram_bank1_a::return#2 = func_ram_bank1_a::return#0
    jmp __b1
    // func_ram_bank1_c::@1
  __b1:
    // [64] func_ram_bank1_c::return#0 = func_ram_bank1_a::return#2
    jmp __breturn
    // func_ram_bank1_c::@return
  __breturn:
    // [65] return 
    rts
}
  // func_ram_bank1_d
// __register(A) char func_ram_bank1_d(char a, char b)
func_ram_bank1_d: {
    .const a = '0'
    .const b = 7
    // [67] call func_rom_bank2_a
    // [83] phi from func_ram_bank1_d to func_rom_bank2_a [phi:func_ram_bank1_d->func_rom_bank2_a]
  func_rom_bank2_a_from_func_ram_bank1_d:
    // [83] phi func_rom_bank2_a::b#3 = func_ram_bank1_d::b#0 [phi:func_ram_bank1_d->func_rom_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [83] phi func_rom_bank2_a::a#3 = func_ram_bank1_d::a#0 [phi:func_ram_bank1_d->func_rom_bank2_a#1] -- call_far_cx16_rom_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_rom_bank2_a
    .byte >func_rom_bank2_a
    .byte 2
    // [68] func_rom_bank2_a::return#0 = func_rom_bank2_a::return#1
    jmp __b1
    // func_ram_bank1_d::@1
  __b1:
    // [69] func_ram_bank1_d::return#0 = func_rom_bank2_a::return#0
    jmp __breturn
    // func_ram_bank1_d::@return
  __breturn:
    // [70] return 
    rts
}
  // func_ram_bank1_e
// __register(A) char func_ram_bank1_e(__register(A) char a, __register(X) char b)
func_ram_bank1_e: {
    // [72] func_rom_bank2_b::a#0 = func_ram_bank1_e::a#2
    // [73] func_rom_bank2_b::b#0 = func_ram_bank1_e::b#2
    // [74] call func_rom_bank2_b
    // [86] phi from func_ram_bank1_e to func_rom_bank2_b [phi:func_ram_bank1_e->func_rom_bank2_b]
  func_rom_bank2_b_from_func_ram_bank1_e:
    // [86] phi func_rom_bank2_b::b#3 = func_rom_bank2_b::b#0 [phi:func_ram_bank1_e->func_rom_bank2_b#0] -- register_copy 
    // [86] phi func_rom_bank2_b::a#3 = func_rom_bank2_b::a#0 [phi:func_ram_bank1_e->func_rom_bank2_b#1] -- register_copy 
    jsr func_rom_bank2_b
    // [75] func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1
    jmp __b1
    // func_ram_bank1_e::@1
  __b1:
    // [76] func_ram_bank1_e::return#0 = func_rom_bank2_b::return#0
    jmp __breturn
    // func_ram_bank1_e::@return
  __breturn:
    // [77] return 
    rts
}
  // func_ram_bank1_f
// __register(A) char func_ram_bank1_f(char a, char b)
func_ram_bank1_f: {
    .const a = '0'
    .const b = 7
    // [79] call func_main_a
    // [111] phi from func_ram_bank1_f to func_main_a [phi:func_ram_bank1_f->func_main_a]
  func_main_a_from_func_ram_bank1_f:
    // [111] phi func_main_a::b#3 = func_ram_bank1_f::b#0 [phi:func_ram_bank1_f->func_main_a#0] -- vbuxx=vbuc1 
    ldx #b
    // [111] phi func_main_a::a#3 = func_ram_bank1_f::a#0 [phi:func_ram_bank1_f->func_main_a#1] -- vbuaa=vbuc1 
    lda #a
    jsr func_main_a
    // [80] func_main_a::return#0 = func_main_a::return#2
    jmp __b1
    // func_ram_bank1_f::@1
  __b1:
    // [81] func_ram_bank1_f::return#0 = func_main_a::return#0
    jmp __breturn
    // func_ram_bank1_f::@return
  __breturn:
    // [82] return 
    rts
}
.segment Bank2
  // func_rom_bank2_a
// The sequent functions will be banked using call method rom in bank number 2.
// __register(A) char func_rom_bank2_a(__register(X) char a, __register(A) char b)
func_rom_bank2_a: {
    // [84] func_rom_bank2_a::return#1 = func_rom_bank2_a::a#3 + func_rom_bank2_a::b#3 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_rom_bank2_a::@return
  __breturn:
    // [85] return 
    rts
}
  // func_rom_bank2_b
// The __bank directive declares this function to be banked using call method rom in bank number 2 of banked rom.
// __register(A) char func_rom_bank2_b(__register(A) char a, __register(X) char b)
func_rom_bank2_b: {
    // [87] func_rom_bank2_b::return#1 = func_rom_bank2_b::a#3 + func_rom_bank2_b::b#3 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_rom_bank2_b::@return
  __breturn:
    // [88] return 
    rts
}
  // func_rom_bank2_c
// __register(A) char func_rom_bank2_c(char a, char b)
func_rom_bank2_c: {
    .const a = '0'
    .const b = 7
    // [90] call func_ram_bank1_a
    // [56] phi from func_rom_bank2_c to func_ram_bank1_a [phi:func_rom_bank2_c->func_ram_bank1_a]
  func_ram_bank1_a_from_func_rom_bank2_c:
    // [56] phi func_ram_bank1_a::b#3 = func_rom_bank2_c::b#0 [phi:func_rom_bank2_c->func_ram_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [56] phi func_ram_bank1_a::a#3 = func_rom_bank2_c::a#0 [phi:func_rom_bank2_c->func_ram_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_ram_bank1_a
    .byte >func_ram_bank1_a
    .byte 1
    // [91] func_ram_bank1_a::return#3 = func_ram_bank1_a::return#0
    jmp __b1
    // func_rom_bank2_c::@1
  __b1:
    // [92] func_rom_bank2_c::return#0 = func_ram_bank1_a::return#3
    jmp __breturn
    // func_rom_bank2_c::@return
  __breturn:
    // [93] return 
    rts
}
  // func_rom_bank2_d
// __register(A) char func_rom_bank2_d(char a, char b)
func_rom_bank2_d: {
    .const a = '0'
    .const b = 7
    // [95] call func_rom_bank2_a
    // [83] phi from func_rom_bank2_d to func_rom_bank2_a [phi:func_rom_bank2_d->func_rom_bank2_a]
  func_rom_bank2_a_from_func_rom_bank2_d:
    // [83] phi func_rom_bank2_a::b#3 = func_rom_bank2_d::b#0 [phi:func_rom_bank2_d->func_rom_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [83] phi func_rom_bank2_a::a#3 = func_rom_bank2_d::a#0 [phi:func_rom_bank2_d->func_rom_bank2_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_rom_bank2_a
    // [96] func_rom_bank2_a::return#3 = func_rom_bank2_a::return#1
    jmp __b1
    // func_rom_bank2_d::@1
  __b1:
    // [97] func_rom_bank2_d::return#0 = func_rom_bank2_a::return#3
    jmp __breturn
    // func_rom_bank2_d::@return
  __breturn:
    // [98] return 
    rts
}
  // func_rom_bank2_e
// __register(A) char func_rom_bank2_e(__register(A) char a, __register(X) char b)
func_rom_bank2_e: {
    // [100] func_rom_bank2_b::a#1 = func_rom_bank2_e::a#2
    // [101] func_rom_bank2_b::b#1 = func_rom_bank2_e::b#2
    // [102] call func_rom_bank2_b
    // [86] phi from func_rom_bank2_e to func_rom_bank2_b [phi:func_rom_bank2_e->func_rom_bank2_b]
  func_rom_bank2_b_from_func_rom_bank2_e:
    // [86] phi func_rom_bank2_b::b#3 = func_rom_bank2_b::b#1 [phi:func_rom_bank2_e->func_rom_bank2_b#0] -- register_copy 
    // [86] phi func_rom_bank2_b::a#3 = func_rom_bank2_b::a#1 [phi:func_rom_bank2_e->func_rom_bank2_b#1] -- register_copy 
    jsr func_rom_bank2_b
    // [103] func_rom_bank2_b::return#3 = func_rom_bank2_b::return#1
    jmp __b1
    // func_rom_bank2_e::@1
  __b1:
    // [104] func_rom_bank2_e::return#0 = func_rom_bank2_b::return#3
    jmp __breturn
    // func_rom_bank2_e::@return
  __breturn:
    // [105] return 
    rts
}
  // func_rom_bank2_f
// __register(A) char func_rom_bank2_f(char a, char b)
func_rom_bank2_f: {
    .const a = '0'
    .const b = 7
    // [107] call func_main_a
    // [111] phi from func_rom_bank2_f to func_main_a [phi:func_rom_bank2_f->func_main_a]
  func_main_a_from_func_rom_bank2_f:
    // [111] phi func_main_a::b#3 = func_rom_bank2_f::b#0 [phi:func_rom_bank2_f->func_main_a#0] -- vbuxx=vbuc1 
    ldx #b
    // [111] phi func_main_a::a#3 = func_rom_bank2_f::a#0 [phi:func_rom_bank2_f->func_main_a#1] -- vbuaa=vbuc1 
    lda #a
    jsr func_main_a
    // [108] func_main_a::return#1 = func_main_a::return#2
    jmp __b1
    // func_rom_bank2_f::@1
  __b1:
    // [109] func_rom_bank2_f::return#0 = func_main_a::return#1
    jmp __breturn
    // func_rom_bank2_f::@return
  __breturn:
    // [110] return 
    rts
}
.segment Code
  // func_main_a
// The sequent functions will be addressed in the default main memory location (segment Code).
// Allocated in main memory.
// __register(A) char func_main_a(__register(A) char a, __register(X) char b)
func_main_a: {
    // [112] func_ram_bank1_e::a#0 = func_main_a::a#3
    // [113] func_ram_bank1_e::b#0 = func_main_a::b#3
    // [114] call func_ram_bank1_e
    // [71] phi from func_main_a to func_ram_bank1_e [phi:func_main_a->func_ram_bank1_e]
  func_ram_bank1_e_from_func_main_a:
    // [71] phi func_ram_bank1_e::b#2 = func_ram_bank1_e::b#0 [phi:func_main_a->func_ram_bank1_e#0] -- register_copy 
    // [71] phi func_ram_bank1_e::a#2 = func_ram_bank1_e::a#0 [phi:func_main_a->func_ram_bank1_e#1] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_ram_bank1_e
    .byte >func_ram_bank1_e
    .byte 1
    // [115] func_ram_bank1_e::return#2 = func_ram_bank1_e::return#0
    jmp __b1
    // func_main_a::@1
  __b1:
    // [116] func_main_a::return#2 = func_ram_bank1_e::return#2
    jmp __breturn
    // func_main_a::@return
  __breturn:
    // [117] return 
    rts
}
  // func_main_b
// Allocated in main memory.
// __register(A) char func_main_b(char a, char b)
func_main_b: {
    .const a = '0'
    .const b = 7
    // [119] call func_rom_bank2_e
    // [99] phi from func_main_b to func_rom_bank2_e [phi:func_main_b->func_rom_bank2_e]
  func_rom_bank2_e_from_func_main_b:
    // [99] phi func_rom_bank2_e::b#2 = func_main_b::b#0 [phi:func_main_b->func_rom_bank2_e#0] -- vbuxx=vbuc1 
    ldx #b
    // [99] phi func_rom_bank2_e::a#2 = func_main_b::a#0 [phi:func_main_b->func_rom_bank2_e#1] -- call_far_cx16_rom_finalize 
    lda #a
    jsr $ff6e
    .byte <func_rom_bank2_e
    .byte >func_rom_bank2_e
    .byte 2
    // [120] func_rom_bank2_e::return#2 = func_rom_bank2_e::return#0
    jmp __b1
    // func_main_b::@1
  __b1:
    // [121] func_main_b::return#0 = func_rom_bank2_e::return#2
    jmp __breturn
    // func_main_b::@return
  __breturn:
    // [122] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction func_ram_bank1_a_from_main:
Removing instruction __b1:
Removing instruction func_ram_bank1_b_from___b1:
Removing instruction __b2:
Removing instruction func_ram_bank1_c_from___b2:
Removing instruction __b3:
Removing instruction func_ram_bank1_d_from___b3:
Removing instruction __b4:
Removing instruction func_ram_bank1_e_from___b4:
Removing instruction __b5:
Removing instruction func_ram_bank1_f_from___b5:
Removing instruction __b6:
Removing instruction func_rom_bank2_a_from___b6:
Removing instruction __b7:
Removing instruction func_rom_bank2_b_from___b7:
Removing instruction __b8:
Removing instruction func_rom_bank2_c_from___b8:
Removing instruction __b9:
Removing instruction func_rom_bank2_d_from___b9:
Removing instruction __b10:
Removing instruction func_rom_bank2_e_from___b10:
Removing instruction __b11:
Removing instruction func_rom_bank2_f_from___b11:
Removing instruction __b12:
Removing instruction func_main_a_from___b12:
Removing instruction __b13:
Removing instruction func_main_b_from___b13:
Removing instruction __b14:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction func_ram_bank1_a_from_func_ram_bank1_c:
Removing instruction __b1:
Removing instruction func_rom_bank2_a_from_func_ram_bank1_d:
Removing instruction __b1:
Removing instruction func_rom_bank2_b_from_func_ram_bank1_e:
Removing instruction __b1:
Removing instruction func_main_a_from_func_ram_bank1_f:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction func_ram_bank1_a_from_func_rom_bank2_c:
Removing instruction __b1:
Removing instruction func_rom_bank2_a_from_func_rom_bank2_d:
Removing instruction __b1:
Removing instruction func_rom_bank2_b_from_func_rom_bank2_e:
Removing instruction __b1:
Removing instruction func_main_a_from_func_rom_bank2_f:
Removing instruction __b1:
Removing instruction func_ram_bank1_e_from_func_main_a:
Removing instruction __b1:
Removing instruction func_rom_bank2_e_from_func_main_b:
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
char func_main_a(char a , char b)
char func_main_a::a
char func_main_a::a#3 // reg byte a 101.0
char func_main_a::b
char func_main_a::b#3 // reg byte x 50.5
char func_main_a::return
char func_main_a::return#0 // reg byte a 22.0
char func_main_a::return#1 // reg byte a 22.0
char func_main_a::return#2 // reg byte a 25.0
char func_main_a::return#4 // reg byte a 4.0
char func_main_b(char a , char b)
char func_main_b::a
__constant char func_main_b::a#0 = '0' // a
char func_main_b::b
__constant char func_main_b::b#0 = 7 // b
char func_main_b::return
char func_main_b::return#0 // reg byte a 4.333333333333333
char func_main_b::return#2 // reg byte a 4.0
__bank(bank) char func_ram_bank1_a(char a , char b)
char func_ram_bank1_a::a
char func_ram_bank1_a::a#3 // reg byte x 101.0
char func_ram_bank1_a::b
char func_ram_bank1_a::b#3 // reg byte a 101.0
char func_ram_bank1_a::return
char func_ram_bank1_a::return#0 // reg byte a 24.999999999999996
char func_ram_bank1_a::return#2 // reg byte a 22.0
char func_ram_bank1_a::return#3 // reg byte a 22.0
char func_ram_bank1_a::return#4 // reg byte a 4.0
char func_ram_bank1_b(char a , char b)
char func_ram_bank1_b::a
__constant char func_ram_bank1_b::a#0 = '0' // a
char func_ram_bank1_b::b
__constant char func_ram_bank1_b::b#0 = 7 // b
char func_ram_bank1_b::return
__constant char func_ram_bank1_b::return#0 = func_ram_bank1_b::a#0+func_ram_bank1_b::b#0 // return
__bank(bank) char func_ram_bank1_c(char a , char b)
char func_ram_bank1_c::a
__constant char func_ram_bank1_c::a#0 = '0' // a
char func_ram_bank1_c::b
__constant char func_ram_bank1_c::b#0 = 7 // b
char func_ram_bank1_c::return
char func_ram_bank1_c::return#0 // reg byte a 4.333333333333333
char func_ram_bank1_c::return#2 // reg byte a 4.0
__bank(bank) char func_ram_bank1_d(char a , char b)
char func_ram_bank1_d::a
__constant char func_ram_bank1_d::a#0 = '0' // a
char func_ram_bank1_d::b
__constant char func_ram_bank1_d::b#0 = 7 // b
char func_ram_bank1_d::return
char func_ram_bank1_d::return#0 // reg byte a 4.333333333333333
char func_ram_bank1_d::return#2 // reg byte a 4.0
__bank(bank) char func_ram_bank1_e(char a , char b)
char func_ram_bank1_e::a
char func_ram_bank1_e::a#0 // reg byte a 101.0
char func_ram_bank1_e::a#2 // reg byte a 1102.0
char func_ram_bank1_e::b
char func_ram_bank1_e::b#0 // reg byte x 202.0
char func_ram_bank1_e::b#2 // reg byte x 551.0
char func_ram_bank1_e::return
char func_ram_bank1_e::return#0 // reg byte a 276.0
char func_ram_bank1_e::return#2 // reg byte a 202.0
char func_ram_bank1_e::return#3 // reg byte a 4.0
__bank(bank) char func_ram_bank1_f(char a , char b)
char func_ram_bank1_f::a
__constant char func_ram_bank1_f::a#0 = '0' // a
char func_ram_bank1_f::b
__constant char func_ram_bank1_f::b#0 = 7 // b
char func_ram_bank1_f::return
char func_ram_bank1_f::return#0 // reg byte a 4.333333333333333
char func_ram_bank1_f::return#2 // reg byte a 4.0
__bank(bank) char func_rom_bank2_a(char a , char b)
char func_rom_bank2_a::a
char func_rom_bank2_a::a#3 // reg byte x 101.0
char func_rom_bank2_a::b
char func_rom_bank2_a::b#3 // reg byte a 101.0
char func_rom_bank2_a::return
char func_rom_bank2_a::return#0 // reg byte a 22.0
char func_rom_bank2_a::return#1 // reg byte a 25.0
char func_rom_bank2_a::return#3 // reg byte a 22.0
char func_rom_bank2_a::return#4 // reg byte a 4.0
char func_rom_bank2_b(char a , char b)
char func_rom_bank2_b::a
char func_rom_bank2_b::a#0 // reg byte a 1001.0
char func_rom_bank2_b::a#1 // reg byte a 101.0
char func_rom_bank2_b::a#3 // reg byte a 11103.0
char func_rom_bank2_b::b
char func_rom_bank2_b::b#0 // reg byte x 2002.0
char func_rom_bank2_b::b#1 // reg byte x 202.0
char func_rom_bank2_b::b#3 // reg byte x 11103.0
char func_rom_bank2_b::return
char func_rom_bank2_b::return#0 // reg byte a 2002.0
char func_rom_bank2_b::return#1 // reg byte a 2221.0
char func_rom_bank2_b::return#3 // reg byte a 202.0
char func_rom_bank2_b::return#4 // reg byte a 4.0
__bank(bank) char func_rom_bank2_c(char a , char b)
char func_rom_bank2_c::a
__constant char func_rom_bank2_c::a#0 = '0' // a
char func_rom_bank2_c::b
__constant char func_rom_bank2_c::b#0 = 7 // b
char func_rom_bank2_c::return
char func_rom_bank2_c::return#0 // reg byte a 4.333333333333333
char func_rom_bank2_c::return#2 // reg byte a 4.0
__bank(bank) char func_rom_bank2_d(char a , char b)
char func_rom_bank2_d::a
__constant char func_rom_bank2_d::a#0 = '0' // a
char func_rom_bank2_d::b
__constant char func_rom_bank2_d::b#0 = 7 // b
char func_rom_bank2_d::return
char func_rom_bank2_d::return#0 // reg byte a 4.333333333333333
char func_rom_bank2_d::return#2 // reg byte a 4.0
__bank(bank) char func_rom_bank2_e(char a , char b)
char func_rom_bank2_e::a
char func_rom_bank2_e::a#2 // reg byte a 101.0
char func_rom_bank2_e::b
char func_rom_bank2_e::b#2 // reg byte x 50.5
char func_rom_bank2_e::return
char func_rom_bank2_e::return#0 // reg byte a 28.5
char func_rom_bank2_e::return#2 // reg byte a 22.0
char func_rom_bank2_e::return#3 // reg byte a 4.0
__bank(bank) char func_rom_bank2_f(char a , char b)
char func_rom_bank2_f::a
__constant char func_rom_bank2_f::a#0 = '0' // a
char func_rom_bank2_f::b
__constant char func_rom_bank2_f::b#0 = 7 // b
char func_rom_bank2_f::return
char func_rom_bank2_f::return#0 // reg byte a 4.333333333333333
char func_rom_bank2_f::return#2 // reg byte a 4.0
void main()
char main::$0 // reg byte a 4.0
char main::$10 // reg byte a 4.0
char main::$11 // reg byte a 4.0
char main::$12 // reg byte a 4.0
char main::$13 // reg byte a 4.0
char main::$2 // reg byte a 4.0
char main::$3 // reg byte a 4.0
char main::$4 // reg byte a 4.0
char main::$5 // reg byte a 4.0
char main::$6 // reg byte a 4.0
char main::$7 // reg byte a 4.0
char main::$8 // reg byte a 4.0
char main::$9 // reg byte a 4.0

reg byte x [ func_ram_bank1_a::a#3 ]
reg byte a [ func_ram_bank1_a::b#3 ]
reg byte a [ func_ram_bank1_e::a#2 func_ram_bank1_e::a#0 ]
reg byte x [ func_ram_bank1_e::b#2 func_ram_bank1_e::b#0 ]
reg byte x [ func_rom_bank2_a::a#3 ]
reg byte a [ func_rom_bank2_a::b#3 ]
reg byte a [ func_rom_bank2_b::a#3 func_rom_bank2_b::a#0 func_rom_bank2_b::a#1 ]
reg byte x [ func_rom_bank2_b::b#3 func_rom_bank2_b::b#0 func_rom_bank2_b::b#1 ]
reg byte a [ func_rom_bank2_e::a#2 ]
reg byte x [ func_rom_bank2_e::b#2 ]
reg byte a [ func_main_a::a#3 ]
reg byte x [ func_main_a::b#3 ]
reg byte a [ func_ram_bank1_a::return#4 ]
reg byte a [ main::$0 ]
reg byte a [ func_ram_bank1_c::return#2 ]
reg byte a [ main::$2 ]
reg byte a [ func_ram_bank1_d::return#2 ]
reg byte a [ main::$3 ]
reg byte a [ func_ram_bank1_e::return#3 ]
reg byte a [ main::$4 ]
reg byte a [ func_ram_bank1_f::return#2 ]
reg byte a [ main::$5 ]
reg byte a [ func_rom_bank2_a::return#4 ]
reg byte a [ main::$6 ]
reg byte a [ func_rom_bank2_b::return#4 ]
reg byte a [ main::$7 ]
reg byte a [ func_rom_bank2_c::return#2 ]
reg byte a [ main::$8 ]
reg byte a [ func_rom_bank2_d::return#2 ]
reg byte a [ main::$9 ]
reg byte a [ func_rom_bank2_e::return#3 ]
reg byte a [ main::$10 ]
reg byte a [ func_rom_bank2_f::return#2 ]
reg byte a [ main::$11 ]
reg byte a [ func_main_a::return#4 ]
reg byte a [ main::$12 ]
reg byte a [ func_main_b::return#2 ]
reg byte a [ main::$13 ]
reg byte a [ func_ram_bank1_a::return#0 ]
reg byte a [ func_ram_bank1_a::return#2 ]
reg byte a [ func_ram_bank1_c::return#0 ]
reg byte a [ func_rom_bank2_a::return#0 ]
reg byte a [ func_ram_bank1_d::return#0 ]
reg byte a [ func_rom_bank2_b::return#0 ]
reg byte a [ func_ram_bank1_e::return#0 ]
reg byte a [ func_main_a::return#0 ]
reg byte a [ func_ram_bank1_f::return#0 ]
reg byte a [ func_rom_bank2_a::return#1 ]
reg byte a [ func_rom_bank2_b::return#1 ]
reg byte a [ func_ram_bank1_a::return#3 ]
reg byte a [ func_rom_bank2_c::return#0 ]
reg byte a [ func_rom_bank2_a::return#3 ]
reg byte a [ func_rom_bank2_d::return#0 ]
reg byte a [ func_rom_bank2_b::return#3 ]
reg byte a [ func_rom_bank2_e::return#0 ]
reg byte a [ func_main_a::return#1 ]
reg byte a [ func_rom_bank2_f::return#0 ]
reg byte a [ func_ram_bank1_e::return#2 ]
reg byte a [ func_main_a::return#2 ]
reg byte a [ func_rom_bank2_e::return#2 ]
reg byte a [ func_main_b::return#0 ]


FINAL ASSEMBLER
Score: 368

  // File Comments
// The linker specification of the different segments.
  // Upstart
.cpu _65c02
  .segmentdef Program                 [segments="Basic, Code, Data, Bank1, Bank2"]
.segmentdef Basic                   [start=$0801]a
.segmentdef Code                    [start=$80d]
.segmentdef Data                    [startAfter="Code"]
.segmentdef Bank1                   [start=$A000, min=$A000, max=$BFFF, align=$100]
.segmentdef Bank2                   [start=$C000, min=$C000, max=$FFFF, align=$100]


  // Global Constants & labels
  // The target computer platform is the Commander X16,
  // which implements banking in ram between 0xA0000 and 0xBFFF,
  // and in rom between 0xC000 and 0xFFFF.
  .label SCREEN = $400
.segment Code
  // main
// Practically this means that the main() function is placed in main memory ...
main: {
    // func_ram_bank1_a('0', 7)
    // [1] call func_ram_bank1_a
    // [56] phi from main to func_ram_bank1_a [phi:main->func_ram_bank1_a]
    // [56] phi func_ram_bank1_a::b#3 = 7 [phi:main->func_ram_bank1_a#0] -- vbuaa=vbuc1 
    lda #7
    // [56] phi func_ram_bank1_a::a#3 = '0' [phi:main->func_ram_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_ram_bank1_a
    .byte >func_ram_bank1_a
    .byte 1
    // func_ram_bank1_a('0', 7)
    // [2] func_ram_bank1_a::return#4 = func_ram_bank1_a::return#0
    // main::@1
    // [3] main::$0 = func_ram_bank1_a::return#4
    // SCREEN[0] = func_ram_bank1_a('0', 7)
    // [4] *SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // func_ram_bank1_b('0', 7)
    // [5] call func_ram_bank1_b
    // [59] phi from main::@1 to func_ram_bank1_b [phi:main::@1->func_ram_bank1_b]
    jsr func_ram_bank1_b
    // main::@2
    // SCREEN[0] = func_ram_bank1_b('0', 7)
    // [6] *SCREEN = func_ram_bank1_b::return#0 -- _deref_pbuc1=vbuc2 
    // Banked call to ram in bank 1 from main memory.
    lda #func_ram_bank1_b.return
    sta SCREEN
    // func_ram_bank1_c('0', 7)
    // [7] call func_ram_bank1_c
    // [61] phi from main::@2 to func_ram_bank1_c [phi:main::@2->func_ram_bank1_c] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_ram_bank1_c
    .byte >func_ram_bank1_c
    .byte 1
    // func_ram_bank1_c('0', 7)
    // [8] func_ram_bank1_c::return#2 = func_ram_bank1_c::return#0
    // main::@3
    // [9] main::$2 = func_ram_bank1_c::return#2
    // SCREEN[0] = func_ram_bank1_c('0', 7)
    // [10] *SCREEN = main::$2 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // func_ram_bank1_d('0', 7)
    // [11] call func_ram_bank1_d
    // [66] phi from main::@3 to func_ram_bank1_d [phi:main::@3->func_ram_bank1_d] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_ram_bank1_d
    .byte >func_ram_bank1_d
    .byte 1
    // func_ram_bank1_d('0', 7)
    // [12] func_ram_bank1_d::return#2 = func_ram_bank1_d::return#0
    // main::@4
    // [13] main::$3 = func_ram_bank1_d::return#2
    // SCREEN[0] = func_ram_bank1_d('0', 7)
    // [14] *SCREEN = main::$3 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // func_ram_bank1_e('0', 7)
    // [15] call func_ram_bank1_e
    // [71] phi from main::@4 to func_ram_bank1_e [phi:main::@4->func_ram_bank1_e]
    // [71] phi func_ram_bank1_e::b#2 = 7 [phi:main::@4->func_ram_bank1_e#0] -- vbuxx=vbuc1 
    ldx #7
    // [71] phi func_ram_bank1_e::a#2 = '0' [phi:main::@4->func_ram_bank1_e#1] -- call_far_cx16_ram_finalize 
    lda #'0'
    jsr $ff6e
    .byte <func_ram_bank1_e
    .byte >func_ram_bank1_e
    .byte 1
    // func_ram_bank1_e('0', 7)
    // [16] func_ram_bank1_e::return#3 = func_ram_bank1_e::return#0
    // main::@5
    // [17] main::$4 = func_ram_bank1_e::return#3
    // SCREEN[0] = func_ram_bank1_e('0', 7)
    // [18] *SCREEN = main::$4 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // func_ram_bank1_f('0', 7)
    // [19] call func_ram_bank1_f
    // [78] phi from main::@5 to func_ram_bank1_f [phi:main::@5->func_ram_bank1_f] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_ram_bank1_f
    .byte >func_ram_bank1_f
    .byte 1
    // func_ram_bank1_f('0', 7)
    // [20] func_ram_bank1_f::return#2 = func_ram_bank1_f::return#0
    // main::@6
    // [21] main::$5 = func_ram_bank1_f::return#2
    // SCREEN[0] = func_ram_bank1_f('0', 7)
    // [22] *SCREEN = main::$5 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // func_rom_bank2_a('0', 7)
    // [23] call func_rom_bank2_a
    // [83] phi from main::@6 to func_rom_bank2_a [phi:main::@6->func_rom_bank2_a]
    // [83] phi func_rom_bank2_a::b#3 = 7 [phi:main::@6->func_rom_bank2_a#0] -- vbuaa=vbuc1 
    lda #7
    // [83] phi func_rom_bank2_a::a#3 = '0' [phi:main::@6->func_rom_bank2_a#1] -- call_far_cx16_rom_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_rom_bank2_a
    .byte >func_rom_bank2_a
    .byte 2
    // func_rom_bank2_a('0', 7)
    // [24] func_rom_bank2_a::return#4 = func_rom_bank2_a::return#1
    // main::@7
    // [25] main::$6 = func_rom_bank2_a::return#4
    // SCREEN[0] = func_rom_bank2_a('0', 7)
    // [26] *SCREEN = main::$6 -- _deref_pbuc1=vbuaa 
    // Banked call to ram in bank 1 from main memory.
    sta SCREEN
    // func_rom_bank2_b('0', 7)
    // [27] call func_rom_bank2_b
    // [86] phi from main::@7 to func_rom_bank2_b [phi:main::@7->func_rom_bank2_b]
    // [86] phi func_rom_bank2_b::b#3 = 7 [phi:main::@7->func_rom_bank2_b#0] -- vbuxx=vbuc1 
    ldx #7
    // [86] phi func_rom_bank2_b::a#3 = '0' [phi:main::@7->func_rom_bank2_b#1] -- vbuaa=vbuc1 
    lda #'0'
    jsr func_rom_bank2_b
    // func_rom_bank2_b('0', 7)
    // [28] func_rom_bank2_b::return#4 = func_rom_bank2_b::return#1
    // main::@8
    // [29] main::$7 = func_rom_bank2_b::return#4
    // SCREEN[0] = func_rom_bank2_b('0', 7)
    // [30] *SCREEN = main::$7 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // func_rom_bank2_c('0', 7)
    // [31] call func_rom_bank2_c
    // [89] phi from main::@8 to func_rom_bank2_c [phi:main::@8->func_rom_bank2_c] -- call_far_cx16_rom_finalize 
    jsr $ff6e
    .byte <func_rom_bank2_c
    .byte >func_rom_bank2_c
    .byte 2
    // func_rom_bank2_c('0', 7)
    // [32] func_rom_bank2_c::return#2 = func_rom_bank2_c::return#0
    // main::@9
    // [33] main::$8 = func_rom_bank2_c::return#2
    // SCREEN[0] = func_rom_bank2_c('0', 7)
    // [34] *SCREEN = main::$8 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // func_rom_bank2_d('0', 7)
    // [35] call func_rom_bank2_d
    // [94] phi from main::@9 to func_rom_bank2_d [phi:main::@9->func_rom_bank2_d] -- call_far_cx16_rom_finalize 
    jsr $ff6e
    .byte <func_rom_bank2_d
    .byte >func_rom_bank2_d
    .byte 2
    // func_rom_bank2_d('0', 7)
    // [36] func_rom_bank2_d::return#2 = func_rom_bank2_d::return#0
    // main::@10
    // [37] main::$9 = func_rom_bank2_d::return#2
    // SCREEN[0] = func_rom_bank2_d('0', 7)
    // [38] *SCREEN = main::$9 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // func_rom_bank2_e('0', 7)
    // [39] call func_rom_bank2_e
    // [99] phi from main::@10 to func_rom_bank2_e [phi:main::@10->func_rom_bank2_e]
    // [99] phi func_rom_bank2_e::b#2 = 7 [phi:main::@10->func_rom_bank2_e#0] -- vbuxx=vbuc1 
    ldx #7
    // [99] phi func_rom_bank2_e::a#2 = '0' [phi:main::@10->func_rom_bank2_e#1] -- call_far_cx16_rom_finalize 
    lda #'0'
    jsr $ff6e
    .byte <func_rom_bank2_e
    .byte >func_rom_bank2_e
    .byte 2
    // func_rom_bank2_e('0', 7)
    // [40] func_rom_bank2_e::return#3 = func_rom_bank2_e::return#0
    // main::@11
    // [41] main::$10 = func_rom_bank2_e::return#3
    // SCREEN[0] = func_rom_bank2_e('0', 7)
    // [42] *SCREEN = main::$10 -- _deref_pbuc1=vbuaa 
    // Banked call to rom in bank 2 from main memory.
    sta SCREEN
    // func_rom_bank2_f('0', 7)
    // [43] call func_rom_bank2_f
    // [106] phi from main::@11 to func_rom_bank2_f [phi:main::@11->func_rom_bank2_f] -- call_far_cx16_rom_finalize 
    jsr $ff6e
    .byte <func_rom_bank2_f
    .byte >func_rom_bank2_f
    .byte 2
    // func_rom_bank2_f('0', 7)
    // [44] func_rom_bank2_f::return#2 = func_rom_bank2_f::return#0
    // main::@12
    // [45] main::$11 = func_rom_bank2_f::return#2
    // SCREEN[0] = func_rom_bank2_f('0', 7)
    // [46] *SCREEN = main::$11 -- _deref_pbuc1=vbuaa 
    // banked call to rom in bank 2 from main memory.
    sta SCREEN
    // func_main_a('0', 7)
    // [47] call func_main_a
    // [111] phi from main::@12 to func_main_a [phi:main::@12->func_main_a]
    // [111] phi func_main_a::b#3 = 7 [phi:main::@12->func_main_a#0] -- vbuxx=vbuc1 
    ldx #7
    // [111] phi func_main_a::a#3 = '0' [phi:main::@12->func_main_a#1] -- vbuaa=vbuc1 
    lda #'0'
    jsr func_main_a
    // func_main_a('0', 7)
    // [48] func_main_a::return#4 = func_main_a::return#2
    // main::@13
    // [49] main::$12 = func_main_a::return#4
    // SCREEN[0] = func_main_a('0', 7)
    // [50] *SCREEN = main::$12 -- _deref_pbuc1=vbuaa 
    // banked call to rom in bank 2 from main memory.
    sta SCREEN
    // func_main_b('0', 7)
    // [51] call func_main_b
    // [118] phi from main::@13 to func_main_b [phi:main::@13->func_main_b]
    jsr func_main_b
    // func_main_b('0', 7)
    // [52] func_main_b::return#2 = func_main_b::return#0
    // main::@14
    // [53] main::$13 = func_main_b::return#2
    // SCREEN[0] = func_main_b('0', 7)
    // [54] *SCREEN = main::$13 -- _deref_pbuc1=vbuaa 
    // Near call in main memory from main memory.
    sta SCREEN
    // main::@return
    // }
    // [55] return 
    rts
}
.segment Bank1
  // func_ram_bank1_a
// Functional code
// __register(A) char func_ram_bank1_a(__register(X) char a, __register(A) char b)
func_ram_bank1_a: {
    // a + b
    // [57] func_ram_bank1_a::return#0 = func_ram_bank1_a::a#3 + func_ram_bank1_a::b#3 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // func_ram_bank1_a::@return
    // }
    // [58] return 
    rts
}
.segment Bank2
  // func_ram_bank1_b
// The sequent functions will consider no banking calculations anymore.
// The __bank directive declares this function to be banked using call method ram in bank number 1 of banked ram.
// char func_ram_bank1_b(char a, char b)
func_ram_bank1_b: {
    .const a = '0'
    .const b = 7
    .label return = a+b
    // func_ram_bank1_b::@return
    // [60] return 
    rts
}
.segment Bank1
  // func_ram_bank1_c
// __register(A) char func_ram_bank1_c(char a, char b)
func_ram_bank1_c: {
    .const a = '0'
    .const b = 7
    // func_ram_bank1_a(a, b)
    // [62] call func_ram_bank1_a
    // [56] phi from func_ram_bank1_c to func_ram_bank1_a [phi:func_ram_bank1_c->func_ram_bank1_a]
    // [56] phi func_ram_bank1_a::b#3 = func_ram_bank1_c::b#0 [phi:func_ram_bank1_c->func_ram_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [56] phi func_ram_bank1_a::a#3 = func_ram_bank1_c::a#0 [phi:func_ram_bank1_c->func_ram_bank1_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_ram_bank1_a
    // func_ram_bank1_a(a, b)
    // [63] func_ram_bank1_a::return#2 = func_ram_bank1_a::return#0
    // func_ram_bank1_c::@1
    // [64] func_ram_bank1_c::return#0 = func_ram_bank1_a::return#2
    // func_ram_bank1_c::@return
    // }
    // [65] return 
    rts
}
  // func_ram_bank1_d
// __register(A) char func_ram_bank1_d(char a, char b)
func_ram_bank1_d: {
    .const a = '0'
    .const b = 7
    // func_rom_bank2_a(a, b)
    // [67] call func_rom_bank2_a
    // [83] phi from func_ram_bank1_d to func_rom_bank2_a [phi:func_ram_bank1_d->func_rom_bank2_a]
    // [83] phi func_rom_bank2_a::b#3 = func_ram_bank1_d::b#0 [phi:func_ram_bank1_d->func_rom_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [83] phi func_rom_bank2_a::a#3 = func_ram_bank1_d::a#0 [phi:func_ram_bank1_d->func_rom_bank2_a#1] -- call_far_cx16_rom_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_rom_bank2_a
    .byte >func_rom_bank2_a
    .byte 2
    // func_rom_bank2_a(a, b)
    // [68] func_rom_bank2_a::return#0 = func_rom_bank2_a::return#1
    // func_ram_bank1_d::@1
    // [69] func_ram_bank1_d::return#0 = func_rom_bank2_a::return#0
    // func_ram_bank1_d::@return
    // }
    // [70] return 
    rts
}
  // func_ram_bank1_e
// __register(A) char func_ram_bank1_e(__register(A) char a, __register(X) char b)
func_ram_bank1_e: {
    // func_rom_bank2_b(a, b)
    // [72] func_rom_bank2_b::a#0 = func_ram_bank1_e::a#2
    // [73] func_rom_bank2_b::b#0 = func_ram_bank1_e::b#2
    // [74] call func_rom_bank2_b
    // [86] phi from func_ram_bank1_e to func_rom_bank2_b [phi:func_ram_bank1_e->func_rom_bank2_b]
    // [86] phi func_rom_bank2_b::b#3 = func_rom_bank2_b::b#0 [phi:func_ram_bank1_e->func_rom_bank2_b#0] -- register_copy 
    // [86] phi func_rom_bank2_b::a#3 = func_rom_bank2_b::a#0 [phi:func_ram_bank1_e->func_rom_bank2_b#1] -- register_copy 
    jsr func_rom_bank2_b
    // func_rom_bank2_b(a, b)
    // [75] func_rom_bank2_b::return#0 = func_rom_bank2_b::return#1
    // func_ram_bank1_e::@1
    // [76] func_ram_bank1_e::return#0 = func_rom_bank2_b::return#0
    // func_ram_bank1_e::@return
    // }
    // [77] return 
    rts
}
  // func_ram_bank1_f
// __register(A) char func_ram_bank1_f(char a, char b)
func_ram_bank1_f: {
    .const a = '0'
    .const b = 7
    // func_main_a(a, b)
    // [79] call func_main_a
    // [111] phi from func_ram_bank1_f to func_main_a [phi:func_ram_bank1_f->func_main_a]
    // [111] phi func_main_a::b#3 = func_ram_bank1_f::b#0 [phi:func_ram_bank1_f->func_main_a#0] -- vbuxx=vbuc1 
    ldx #b
    // [111] phi func_main_a::a#3 = func_ram_bank1_f::a#0 [phi:func_ram_bank1_f->func_main_a#1] -- vbuaa=vbuc1 
    lda #a
    jsr func_main_a
    // func_main_a(a, b)
    // [80] func_main_a::return#0 = func_main_a::return#2
    // func_ram_bank1_f::@1
    // [81] func_ram_bank1_f::return#0 = func_main_a::return#0
    // func_ram_bank1_f::@return
    // }
    // [82] return 
    rts
}
.segment Bank2
  // func_rom_bank2_a
// The sequent functions will be banked using call method rom in bank number 2.
// __register(A) char func_rom_bank2_a(__register(X) char a, __register(A) char b)
func_rom_bank2_a: {
    // a + b
    // [84] func_rom_bank2_a::return#1 = func_rom_bank2_a::a#3 + func_rom_bank2_a::b#3 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // func_rom_bank2_a::@return
    // }
    // [85] return 
    rts
}
  // func_rom_bank2_b
// The __bank directive declares this function to be banked using call method rom in bank number 2 of banked rom.
// __register(A) char func_rom_bank2_b(__register(A) char a, __register(X) char b)
func_rom_bank2_b: {
    // a + b
    // [87] func_rom_bank2_b::return#1 = func_rom_bank2_b::a#3 + func_rom_bank2_b::b#3 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // func_rom_bank2_b::@return
    // }
    // [88] return 
    rts
}
  // func_rom_bank2_c
// __register(A) char func_rom_bank2_c(char a, char b)
func_rom_bank2_c: {
    .const a = '0'
    .const b = 7
    // func_ram_bank1_a(a, b)
    // [90] call func_ram_bank1_a
    // [56] phi from func_rom_bank2_c to func_ram_bank1_a [phi:func_rom_bank2_c->func_ram_bank1_a]
    // [56] phi func_ram_bank1_a::b#3 = func_rom_bank2_c::b#0 [phi:func_rom_bank2_c->func_ram_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [56] phi func_ram_bank1_a::a#3 = func_rom_bank2_c::a#0 [phi:func_rom_bank2_c->func_ram_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_ram_bank1_a
    .byte >func_ram_bank1_a
    .byte 1
    // func_ram_bank1_a(a, b)
    // [91] func_ram_bank1_a::return#3 = func_ram_bank1_a::return#0
    // func_rom_bank2_c::@1
    // [92] func_rom_bank2_c::return#0 = func_ram_bank1_a::return#3
    // func_rom_bank2_c::@return
    // }
    // [93] return 
    rts
}
  // func_rom_bank2_d
// __register(A) char func_rom_bank2_d(char a, char b)
func_rom_bank2_d: {
    .const a = '0'
    .const b = 7
    // func_rom_bank2_a(a, b)
    // [95] call func_rom_bank2_a
    // [83] phi from func_rom_bank2_d to func_rom_bank2_a [phi:func_rom_bank2_d->func_rom_bank2_a]
    // [83] phi func_rom_bank2_a::b#3 = func_rom_bank2_d::b#0 [phi:func_rom_bank2_d->func_rom_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [83] phi func_rom_bank2_a::a#3 = func_rom_bank2_d::a#0 [phi:func_rom_bank2_d->func_rom_bank2_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_rom_bank2_a
    // func_rom_bank2_a(a, b)
    // [96] func_rom_bank2_a::return#3 = func_rom_bank2_a::return#1
    // func_rom_bank2_d::@1
    // [97] func_rom_bank2_d::return#0 = func_rom_bank2_a::return#3
    // func_rom_bank2_d::@return
    // }
    // [98] return 
    rts
}
  // func_rom_bank2_e
// __register(A) char func_rom_bank2_e(__register(A) char a, __register(X) char b)
func_rom_bank2_e: {
    // func_rom_bank2_b(a, b)
    // [100] func_rom_bank2_b::a#1 = func_rom_bank2_e::a#2
    // [101] func_rom_bank2_b::b#1 = func_rom_bank2_e::b#2
    // [102] call func_rom_bank2_b
    // [86] phi from func_rom_bank2_e to func_rom_bank2_b [phi:func_rom_bank2_e->func_rom_bank2_b]
    // [86] phi func_rom_bank2_b::b#3 = func_rom_bank2_b::b#1 [phi:func_rom_bank2_e->func_rom_bank2_b#0] -- register_copy 
    // [86] phi func_rom_bank2_b::a#3 = func_rom_bank2_b::a#1 [phi:func_rom_bank2_e->func_rom_bank2_b#1] -- register_copy 
    jsr func_rom_bank2_b
    // func_rom_bank2_b(a, b)
    // [103] func_rom_bank2_b::return#3 = func_rom_bank2_b::return#1
    // func_rom_bank2_e::@1
    // [104] func_rom_bank2_e::return#0 = func_rom_bank2_b::return#3
    // func_rom_bank2_e::@return
    // }
    // [105] return 
    rts
}
  // func_rom_bank2_f
// __register(A) char func_rom_bank2_f(char a, char b)
func_rom_bank2_f: {
    .const a = '0'
    .const b = 7
    // func_main_a(a, b)
    // [107] call func_main_a
    // [111] phi from func_rom_bank2_f to func_main_a [phi:func_rom_bank2_f->func_main_a]
    // [111] phi func_main_a::b#3 = func_rom_bank2_f::b#0 [phi:func_rom_bank2_f->func_main_a#0] -- vbuxx=vbuc1 
    ldx #b
    // [111] phi func_main_a::a#3 = func_rom_bank2_f::a#0 [phi:func_rom_bank2_f->func_main_a#1] -- vbuaa=vbuc1 
    lda #a
    jsr func_main_a
    // func_main_a(a, b)
    // [108] func_main_a::return#1 = func_main_a::return#2
    // func_rom_bank2_f::@1
    // [109] func_rom_bank2_f::return#0 = func_main_a::return#1
    // func_rom_bank2_f::@return
    // }
    // [110] return 
    rts
}
.segment Code
  // func_main_a
// The sequent functions will be addressed in the default main memory location (segment Code).
// Allocated in main memory.
// __register(A) char func_main_a(__register(A) char a, __register(X) char b)
func_main_a: {
    // func_ram_bank1_e(a, b)
    // [112] func_ram_bank1_e::a#0 = func_main_a::a#3
    // [113] func_ram_bank1_e::b#0 = func_main_a::b#3
    // [114] call func_ram_bank1_e
    // [71] phi from func_main_a to func_ram_bank1_e [phi:func_main_a->func_ram_bank1_e]
    // [71] phi func_ram_bank1_e::b#2 = func_ram_bank1_e::b#0 [phi:func_main_a->func_ram_bank1_e#0] -- register_copy 
    // [71] phi func_ram_bank1_e::a#2 = func_ram_bank1_e::a#0 [phi:func_main_a->func_ram_bank1_e#1] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_ram_bank1_e
    .byte >func_ram_bank1_e
    .byte 1
    // func_ram_bank1_e(a, b)
    // [115] func_ram_bank1_e::return#2 = func_ram_bank1_e::return#0
    // func_main_a::@1
    // [116] func_main_a::return#2 = func_ram_bank1_e::return#2
    // func_main_a::@return
    // }
    // [117] return 
    rts
}
  // func_main_b
// Allocated in main memory.
// __register(A) char func_main_b(char a, char b)
func_main_b: {
    .const a = '0'
    .const b = 7
    // func_rom_bank2_e(a, b)
    // [119] call func_rom_bank2_e
    // [99] phi from func_main_b to func_rom_bank2_e [phi:func_main_b->func_rom_bank2_e]
    // [99] phi func_rom_bank2_e::b#2 = func_main_b::b#0 [phi:func_main_b->func_rom_bank2_e#0] -- vbuxx=vbuc1 
    ldx #b
    // [99] phi func_rom_bank2_e::a#2 = func_main_b::a#0 [phi:func_main_b->func_rom_bank2_e#1] -- call_far_cx16_rom_finalize 
    lda #a
    jsr $ff6e
    .byte <func_rom_bank2_e
    .byte >func_rom_bank2_e
    .byte 2
    // func_rom_bank2_e(a, b)
    // [120] func_rom_bank2_e::return#2 = func_rom_bank2_e::return#0
    // func_main_b::@1
    // [121] func_main_b::return#0 = func_rom_bank2_e::return#2
    // func_main_b::@return
    // }
    // [122] return 
    rts
}
  // File Data

