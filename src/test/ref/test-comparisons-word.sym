const nomodify byte FF = $57
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte TT = $51
void compare(word compare::w1 , word compare::w2 , byte compare::op)
byte compare::op
byte compare::op#0 reg byte a 10167.833333333334
byte* compare::ops
const byte* compare::ops#1 ops_1 = "!="
const byte* compare::ops#2 ops_2 = "=="
const byte* compare::ops#3 ops_3 = ">="
const byte* compare::ops#4 ops_4 = "> "
const byte* compare::ops#5 ops_5 = "<="
const byte* compare::ops#6 ops_6 = "< "
byte* compare::ops#7 ops zp[2]:9 3333.6666666666665
byte compare::r
byte compare::r#10 r zp[1]:6 10001.000000000002
byte compare::r#12 r zp[1]:6 10001.0
byte compare::r#13 r zp[1]:6 10001.0
byte compare::r#14 r zp[1]:6 10001.0
byte compare::r#15 r zp[1]:6 10001.0
byte compare::r#16 r zp[1]:6 10001.0
byte compare::r#17 r zp[1]:6 10001.0
word compare::w1
word compare::w1#0 w1 zp[2]:11 2536.0000000000005
word compare::w2
word compare::w2#0 w2 zp[2]:17 2290.5806451612902
void main()
byte~ main::$8 reg byte a 22.0
byte~ main::$9 reg byte a 202.0
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 1.5714285714285716
byte main::j
byte main::j#1 j zp[1]:3 151.5
byte main::j#2 j zp[1]:3 18.9375
byte main::op
byte main::op#1 op zp[1]:4 1501.5
byte main::op#2 op zp[1]:4 273.0
byte main::s
byte main::s#1 s zp[1]:5 1501.5
byte main::s#10 s zp[1]:5 302.0
byte main::s#3 s zp[1]:5 420.59999999999997
byte main::s#5 s zp[1]:5 71.0
byte main::s#7 s zp[1]:5 7.333333333333333
word main::w1
word main::w1#0 w1 zp[2]:15 53.26315789473684
word main::w2
word main::w2#0 w2 zp[2]:17 78.71428571428571
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:9 2002.0
byte* memset::dst#2 dst zp[2]:9 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 2.000000002E9
byte print_char::ch#1 reg byte a 2000002.0
byte print_char::ch#2 reg byte a 2000002.0
byte print_char::ch#3 reg byte a 20002.0
byte print_char::ch#5 reg byte a 1.1002010005E10
byte* print_char_cursor
byte* print_char_cursor#10 print_char_cursor zp[2]:13 3.0836475025000006E8
byte* print_char_cursor#108 print_char_cursor zp[2]:13 2002.0
byte* print_char_cursor#37 print_char_cursor zp[2]:13 1.05010100035E10
byte* print_char_cursor#55 print_char_cursor zp[2]:13 60001.5
byte* print_char_cursor#56 print_char_cursor zp[2]:13 400001.00000000006
byte* print_char_cursor#58 print_char_cursor zp[2]:13 370.1
byte* print_char_cursor#64 print_char_cursor zp[2]:13 71.0
byte* print_char_cursor#65 print_char_cursor zp[2]:13 445.0
byte* print_char_cursor#74 print_char_cursor zp[2]:13 7.333333333333333
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:7 6.0000401E7
byte* print_line_cursor#10 print_line_cursor zp[2]:7 2.00010003E8
byte* print_line_cursor#21 print_line_cursor zp[2]:7 1344.888888888889
byte* print_line_cursor#25 print_line_cursor zp[2]:7 445.0
byte* print_line_cursor#28 print_line_cursor zp[2]:7 71.0
byte* print_line_cursor#30 print_line_cursor zp[2]:7 7.333333333333333
void print_ln()
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:9 2.000000002E9
byte* print_str::str#1 str zp[2]:9 55001.0
byte* print_str::str#2 str zp[2]:9 1.00002500125E9
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2000002.0
byte~ print_uchar::$2 reg byte x 2000002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 200002.0
byte print_uchar::b#1 reg byte x 200002.0
byte print_uchar::b#2 reg byte x 550001.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:11 20002.0
word print_uint::w#1 w zp[2]:11 20002.0
word print_uint::w#2 w zp[2]:11 73334.66666666666
const word* words[]  = { $12, $3f34, $cfed }

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ main::j#2 main::j#1 ]
zp[1]:4 [ main::op#2 main::op#1 ]
zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
zp[1]:6 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
zp[2]:7 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ]
zp[2]:9 [ memset::dst#2 memset::dst#1 compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
zp[2]:11 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 compare::w1#0 ]
reg byte a [ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:13 [ print_char_cursor#37 print_char_cursor#55 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ main::$8 ]
zp[2]:15 [ main::w1#0 ]
reg byte a [ main::$9 ]
zp[2]:17 [ main::w2#0 compare::w2#0 ]
reg byte a [ compare::op#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
