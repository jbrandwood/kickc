
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call cputln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_string 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call cputln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call printf_string 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call cputln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] phi()
  [23] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@7
  [24] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [25] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [26] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [26] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [26] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [27] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [28] conio_cursor_x = 0
  [29] conio_cursor_y = 0
  [30] conio_line_text = DEFAULT_SCREEN
  [31] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [32] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [33] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [34] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [35] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [37] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [38] clrscr::line_text#5[clrscr::c#2] = ' '
  [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [40] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1 main::@3 main::@5 main::@7
  [41] printf_string::str#10 = phi( main::@1/main::str, main::@3/main::str1, main::@5/main::str, main::@7/main::str1 )
  [41] printf_string::format_justify_left#10 = phi( main::@1/0, main::@3/0, main::@5/1, main::@7/1 )
  to:printf_string::@3
printf_string::@3: scope:[printf_string]  from printf_string
  [42] strlen::str#1 = printf_string::str#10
  [43] call strlen 
  [44] strlen::return#2 = strlen::len#2
  to:printf_string::@6
printf_string::@6: scope:[printf_string]  from printf_string::@3
  [45] printf_string::$9 = strlen::return#2
  [46] printf_string::len#0 = (signed byte)printf_string::$9
  [47] printf_string::padding#1 = $a - printf_string::len#0
  [48] if(printf_string::padding#1>=0) goto printf_string::@10
  to:printf_string::@1
printf_string::@10: scope:[printf_string]  from printf_string::@6
  [49] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string::@10 printf_string::@6
  [50] printf_string::padding#3 = phi( printf_string::@6/0, printf_string::@10/printf_string::padding#1 )
  [51] if(0!=printf_string::format_justify_left#10) goto printf_string::@2
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@1
  [52] if(0!=printf_string::padding#3) goto printf_string::@4
  to:printf_string::@2
printf_string::@4: scope:[printf_string]  from printf_string::@8
  [53] printf_padding::length#0 = (byte)printf_string::padding#3
  [54] call printf_padding 
  to:printf_string::@2
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@4 printf_string::@8
  [55] cputs::s#1 = printf_string::str#10
  [56] call cputs 
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@2
  [57] if(0==printf_string::format_justify_left#10) goto printf_string::@return
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@7
  [58] if(0!=printf_string::padding#3) goto printf_string::@5
  to:printf_string::@return
printf_string::@5: scope:[printf_string]  from printf_string::@9
  [59] printf_padding::length#1 = (byte)printf_string::padding#3
  [60] call printf_padding 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@5 printf_string::@7 printf_string::@9
  [61] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3 main::@2 main::@4 main::@6
  [62] conio_line_text = conio_line_text + $28
  [63] conio_line_color = conio_line_color + $28
  [64] conio_cursor_x = 0
  [65] conio_cursor_y = ++ conio_cursor_y
  [66] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [67] return 
  to:@return

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_string::@3
  [68] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [69] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [69] strlen::str#2 = phi( strlen/strlen::str#1, strlen::@2/strlen::str#0 )
  [70] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [71] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [72] strlen::len#1 = ++ strlen::len#2
  [73] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_string::@4 printf_string::@5
  [74] printf_padding::pad#4 = phi( printf_string::@4/' ', printf_string::@5/' ' )
  [74] printf_padding::length#3 = phi( printf_string::@4/printf_padding::length#0, printf_string::@5/printf_padding::length#1 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [75] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [76] if(printf_padding::i#2<printf_padding::length#3) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [77] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [78] cputc::c#1 = printf_padding::pad#4
  [79] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [80] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from printf_string::@2
  [81] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [82] cputs::s#2 = phi( cputs/cputs::s#1, cputs::@2/cputs::s#0 )
  [83] cputs::c#1 = *cputs::s#2
  [84] cputs::s#0 = ++ cputs::s#2
  [85] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [86] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [87] cputc::c#0 = cputs::c#1
  [88] call cputc 
  to:cputs::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [89] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [90] phi()
  [91] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [92] phi()
  [93] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [94] phi()
  [95] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [96] phi()
  [97] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [98] conio_line_text = conio_line_text - $28
  [99] conio_line_color = conio_line_color - $28
  [100] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [101] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_padding::@2
  [102] cputc::c#2 = phi( cputs::@2/cputc::c#0, printf_padding::@2/cputc::c#1 )
  [103] if(cputc::c#2=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [104] conio_line_text[conio_cursor_x] = cputc::c#2
  [105] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [106] conio_cursor_x = ++ conio_cursor_x
  [107] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [108] phi()
  [109] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [110] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [111] phi()
  [112] call cputln 
  to:cputc::@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [113] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [113] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [114] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [115] memcpy::src#4 = (byte*)memcpy::source#2
  [116] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [117] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [117] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [118] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [119] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [120] *memcpy::dst#2 = *memcpy::src#2
  [121] memcpy::dst#1 = ++ memcpy::dst#2
  [122] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [123] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [123] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [124] memset::end#0 = (byte*)memset::str#3 + $28
  [125] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [126] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [127] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [128] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [129] *memset::dst#2 = memset::c#4
  [130] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
