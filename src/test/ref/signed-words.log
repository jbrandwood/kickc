Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  yvel_init#21 = phi( __start::@1/yvel_init#18 )
  xvel#21 = phi( __start::@1/xvel#17 )
  ypos#21 = phi( __start::@1/ypos#17 )
  xpos#21 = phi( __start::@1/xpos#17 )
  yvel#19 = phi( __start::@1/yvel#16 )
  call init 
  to:main::@3
main::@3: scope:[main]  from main
  yvel_init#20 = phi( main/yvel_init#21 )
  xvel#20 = phi( main/xvel#21 )
  ypos#20 = phi( main/ypos#21 )
  xpos#20 = phi( main/xpos#21 )
  yvel#18 = phi( main/yvel#19 )
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3 main::@4
  yvel_init#19 = phi( main::@1/yvel_init#19, main::@3/yvel_init#20, main::@4/yvel_init#0 )
  xvel#18 = phi( main::@1/xvel#18, main::@3/xvel#20, main::@4/xvel#0 )
  ypos#18 = phi( main::@1/ypos#18, main::@3/ypos#20, main::@4/ypos#0 )
  xpos#18 = phi( main::@1/xpos#18, main::@3/xpos#20, main::@4/xpos#0 )
  yvel#17 = phi( main::@1/yvel#17, main::@3/yvel#18, main::@4/yvel#0 )
  main::$1 = *RASTER != $ff
  if(main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  yvel_init#15 = phi( main::@1/yvel_init#19 )
  xvel#14 = phi( main::@1/xvel#18 )
  ypos#15 = phi( main::@1/ypos#18 )
  xpos#14 = phi( main::@1/xpos#18 )
  yvel#14 = phi( main::@1/yvel#17 )
  call anim 
  to:main::@4
main::@4: scope:[main]  from main::@2
  yvel_init#8 = phi( main::@2/yvel_init#4 )
  xvel#7 = phi( main::@2/xvel#3 )
  ypos#8 = phi( main::@2/ypos#4 )
  xpos#8 = phi( main::@2/xpos#4 )
  yvel#8 = phi( main::@2/yvel#4 )
  yvel#0 = yvel#8
  xpos#0 = xpos#8
  ypos#0 = ypos#8
  xvel#0 = xvel#7
  yvel_init#0 = yvel_init#8
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  yvel_init#9 = phi( main::@4/yvel_init#0 )
  xvel#8 = phi( main::@4/xvel#0 )
  ypos#9 = phi( main::@4/ypos#0 )
  xpos#9 = phi( main::@4/xpos#0 )
  yvel#9 = phi( main::@4/yvel#0 )
  yvel#1 = yvel#9
  xpos#1 = xpos#9
  ypos#1 = ypos#9
  xvel#1 = xvel#8
  yvel_init#1 = yvel_init#9
  return 
  to:@return

void init()
init: scope:[init]  from main
  *SPRITES_ENABLE = 1
  *SPRITES_EXPAND_X = 0
  *SPRITES_EXPAND_Y = 0
  SPRITES_XPOS[0] = $64
  SPRITES_YPOS[0] = $64
  SPRITES_COLOR[0] = WHITE
  SPRITES_PTR[0] = (byte)SPRITE/$40
  init::sc#0 = SCREEN
  to:init::@1
init::@1: scope:[init]  from init init::@2
  init::sc#2 = phi( init/init::sc#0, init::@2/init::sc#1 )
  init::$0 = init::sc#2 != SCREEN+$3e8
  if(init::$0) goto init::@2
  to:init::@3
init::@2: scope:[init]  from init::@1
  init::sc#3 = phi( init::@1/init::sc#2 )
  *init::sc#3 = ' '
  init::sc#1 = ++ init::sc#3
  to:init::@1
init::@3: scope:[init]  from init::@1
  init::i#0 = 0
  to:init::@4
init::@4: scope:[init]  from init::@3 init::@4
  init::i#2 = phi( init::@3/init::i#0, init::@4/init::i#1 )
  SPRITE[init::i#2] = $ff
  init::i#1 = init::i#2 + rangenext(0,$3f)
  init::$1 = init::i#1 != rangelast(0,$3f)
  if(init::$1) goto init::@4
  to:init::@return
init::@return: scope:[init]  from init::@4
  return 
  to:@return

void anim()
anim: scope:[anim]  from main::@2
  yvel_init#16 = phi( main::@2/yvel_init#15 )
  xvel#15 = phi( main::@2/xvel#14 )
  xpos#15 = phi( main::@2/xpos#14 )
  yvel#15 = phi( main::@2/yvel#14 )
  ypos#10 = phi( main::@2/ypos#15 )
  anim::$0 = ypos#10 < 0
  anim::$1 = ! anim::$0
  if(anim::$1) goto anim::@1
  to:anim::@2
anim::@1: scope:[anim]  from anim anim::@4
  yvel_init#17 = phi( anim/yvel_init#16, anim::@4/yvel_init#11 )
  ypos#11 = phi( anim/ypos#10, anim::@4/ypos#16 )
  xvel#9 = phi( anim/xvel#15, anim::@4/xvel#16 )
  xpos#10 = phi( anim/xpos#15, anim::@4/xpos#16 )
  yvel#10 = phi( anim/yvel#15, anim::@4/yvel#3 )
  anim::$2 = yvel#10 + g
  yvel#2 = anim::$2
  anim::$3 = xpos#10 + xvel#9
  xpos#2 = anim::$3
  anim::$4 = ypos#11 + yvel#2
  ypos#2 = anim::$4
  anim::$5 = xpos#2 >> 7
  anim::$6 = anim::$5 + $a0
  anim::sprite_x#0 = anim::$6
  anim::$7 = ypos#2 >> 5
  anim::$8 = $e6 - anim::$7
  anim::sprite_y#0 = anim::$8
  SPRITES_XPOS[0] = (byte)anim::sprite_x#0
  SPRITES_YPOS[0] = (byte)anim::sprite_y#0
  anim::$9 = byte1  anim::sprite_x#0
  *SPRITES_XMSB = anim::$9
  to:anim::@return
anim::@2: scope:[anim]  from anim
  yvel_init#10 = phi( anim/yvel_init#16 )
  xvel#10 = phi( anim/xvel#15 )
  xpos#3 = 0
  ypos#3 = 0
  anim::$10 = - xvel#10
  xvel#2 = anim::$10
  anim::$11 = yvel_init#10 - $a
  yvel_init#2 = anim::$11
  anim::$12 = yvel_init#2 < -$c8
  anim::$13 = ! anim::$12
  if(anim::$13) goto anim::@4
  to:anim::@3
anim::@4: scope:[anim]  from anim::@2 anim::@3
  ypos#16 = phi( anim::@2/ypos#3, anim::@3/ypos#19 )
  xvel#16 = phi( anim::@2/xvel#2, anim::@3/xvel#19 )
  xpos#16 = phi( anim::@2/xpos#3, anim::@3/xpos#19 )
  yvel_init#11 = phi( anim::@2/yvel_init#2, anim::@3/yvel_init#3 )
  yvel#3 = yvel_init#11
  to:anim::@1
anim::@3: scope:[anim]  from anim::@2
  ypos#19 = phi( anim::@2/ypos#3 )
  xvel#19 = phi( anim::@2/xvel#2 )
  xpos#19 = phi( anim::@2/xpos#3 )
  yvel_init#3 = $c8
  to:anim::@4
anim::@return: scope:[anim]  from anim::@1
  yvel_init#12 = phi( anim::@1/yvel_init#17 )
  xvel#11 = phi( anim::@1/xvel#9 )
  ypos#12 = phi( anim::@1/ypos#2 )
  xpos#11 = phi( anim::@1/xpos#2 )
  yvel#11 = phi( anim::@1/yvel#2 )
  yvel#4 = yvel#11
  xpos#4 = xpos#11
  ypos#4 = ypos#12
  xvel#3 = xvel#11
  yvel_init#4 = yvel_init#12
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  xpos#5 = 0
  ypos#5 = 0
  yvel_init#5 = $64
  xvel#4 = $c8
  yvel#5 = yvel_init#5
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  yvel_init#18 = phi( __start::__init1/yvel_init#5 )
  xvel#17 = phi( __start::__init1/xvel#4 )
  ypos#17 = phi( __start::__init1/ypos#5 )
  xpos#17 = phi( __start::__init1/xpos#5 )
  yvel#16 = phi( __start::__init1/yvel#5 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  yvel_init#13 = phi( __start::@1/yvel_init#1 )
  xvel#12 = phi( __start::@1/xvel#1 )
  ypos#13 = phi( __start::@1/ypos#1 )
  xpos#12 = phi( __start::@1/xpos#1 )
  yvel#12 = phi( __start::@1/yvel#1 )
  yvel#6 = yvel#12
  xpos#6 = xpos#12
  ypos#6 = ypos#13
  xvel#5 = xvel#12
  yvel_init#6 = yvel_init#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  yvel#13 = phi( __start::@2/yvel#6 )
  xvel#13 = phi( __start::@2/xvel#5 )
  yvel_init#14 = phi( __start::@2/yvel_init#6 )
  ypos#14 = phi( __start::@2/ypos#6 )
  xpos#13 = phi( __start::@2/xpos#6 )
  xpos#7 = xpos#13
  ypos#7 = ypos#14
  yvel_init#7 = yvel_init#14
  xvel#6 = xvel#13
  yvel#7 = yvel#13
  return 
  to:@return

SYMBOL TABLE SSA
constant byte* const RASTER = (byte*)$d012
constant byte* const SCREEN = (byte*)$400
constant byte* const SPRITE = (byte*)$2000
constant byte* const SPRITES_COLOR = (byte*)$d027
constant byte* const SPRITES_ENABLE = (byte*)$d015
constant byte* const SPRITES_EXPAND_X = (byte*)$d01d
constant byte* const SPRITES_EXPAND_Y = (byte*)$d017
constant byte* const SPRITES_PTR = SCREEN+$3f8
constant byte* const SPRITES_XMSB = (byte*)$d010
constant byte* const SPRITES_XPOS = (byte*)$d000
constant byte* const SPRITES_YPOS = (byte*)$d001
constant const byte WHITE = 1
void __start()
void anim()
bool~ anim::$0
bool~ anim::$1
signed word~ anim::$10
number~ anim::$11
bool~ anim::$12
bool~ anim::$13
signed word~ anim::$2
signed word~ anim::$3
signed word~ anim::$4
signed word~ anim::$5
number~ anim::$6
signed word~ anim::$7
number~ anim::$8
byte~ anim::$9
signed word anim::sprite_x
signed word anim::sprite_x#0
signed word anim::sprite_y
signed word anim::sprite_y#0
constant const signed word g = -5
void init()
bool~ init::$0
bool~ init::$1
byte init::i
byte init::i#0
byte init::i#1
byte init::i#2
byte* init::sc
byte* init::sc#0
byte* init::sc#1
byte* init::sc#2
byte* init::sc#3
void main()
bool~ main::$1
signed word xpos
signed word xpos#0
signed word xpos#1
signed word xpos#10
signed word xpos#11
signed word xpos#12
signed word xpos#13
signed word xpos#14
signed word xpos#15
signed word xpos#16
signed word xpos#17
signed word xpos#18
signed word xpos#19
signed word xpos#2
signed word xpos#20
signed word xpos#21
signed word xpos#3
signed word xpos#4
signed word xpos#5
signed word xpos#6
signed word xpos#7
signed word xpos#8
signed word xpos#9
signed word xvel
signed word xvel#0
signed word xvel#1
signed word xvel#10
signed word xvel#11
signed word xvel#12
signed word xvel#13
signed word xvel#14
signed word xvel#15
signed word xvel#16
signed word xvel#17
signed word xvel#18
signed word xvel#19
signed word xvel#2
signed word xvel#20
signed word xvel#21
signed word xvel#3
signed word xvel#4
signed word xvel#5
signed word xvel#6
signed word xvel#7
signed word xvel#8
signed word xvel#9
signed word ypos
signed word ypos#0
signed word ypos#1
signed word ypos#10
signed word ypos#11
signed word ypos#12
signed word ypos#13
signed word ypos#14
signed word ypos#15
signed word ypos#16
signed word ypos#17
signed word ypos#18
signed word ypos#19
signed word ypos#2
signed word ypos#20
signed word ypos#21
signed word ypos#3
signed word ypos#4
signed word ypos#5
signed word ypos#6
signed word ypos#7
signed word ypos#8
signed word ypos#9
signed word yvel
signed word yvel#0
signed word yvel#1
signed word yvel#10
signed word yvel#11
signed word yvel#12
signed word yvel#13
signed word yvel#14
signed word yvel#15
signed word yvel#16
signed word yvel#17
signed word yvel#18
signed word yvel#19
signed word yvel#2
signed word yvel#3
signed word yvel#4
signed word yvel#5
signed word yvel#6
signed word yvel#7
signed word yvel#8
signed word yvel#9
signed word yvel_init
signed word yvel_init#0
signed word yvel_init#1
signed word yvel_init#10
signed word yvel_init#11
signed word yvel_init#12
signed word yvel_init#13
signed word yvel_init#14
signed word yvel_init#15
signed word yvel_init#16
signed word yvel_init#17
signed word yvel_init#18
signed word yvel_init#19
signed word yvel_init#2
signed word yvel_init#20
signed word yvel_init#21
signed word yvel_init#3
signed word yvel_init#4
signed word yvel_init#5
signed word yvel_init#6
signed word yvel_init#7
signed word yvel_init#8
signed word yvel_init#9

Adding number conversion cast (unumber) $3f8 in 
Adding number conversion cast (unumber) $ff in main::$1 = *RASTER != $ff
Adding number conversion cast (unumber) 1 in *SPRITES_ENABLE = 1
Adding number conversion cast (unumber) 0 in *SPRITES_EXPAND_X = 0
Adding number conversion cast (unumber) 0 in *SPRITES_EXPAND_Y = 0
Adding number conversion cast (unumber) $64 in SPRITES_XPOS[0] = $64
Adding number conversion cast (unumber) 0 in SPRITES_XPOS[0] = ((unumber)) $64
Adding number conversion cast (unumber) $64 in SPRITES_YPOS[0] = $64
Adding number conversion cast (unumber) 0 in SPRITES_YPOS[0] = ((unumber)) $64
Adding number conversion cast (unumber) 0 in SPRITES_COLOR[0] = WHITE
Adding number conversion cast (unumber) $40 in SPRITES_PTR[0] = (byte)SPRITE/$40
Adding number conversion cast (unumber) 0 in SPRITES_PTR[0] = (byte)SPRITE/(unumber)$40
Adding number conversion cast (unumber) $3e8 in init::$0 = init::sc#2 != SCREEN+$3e8
Adding number conversion cast (unumber) $ff in SPRITE[init::i#2] = $ff
Adding number conversion cast (snumber) 0 in anim::$0 = ypos#10 < 0
Adding number conversion cast (snumber) 7 in anim::$5 = xpos#2 >> 7
Adding number conversion cast (snumber) $a0 in anim::$6 = anim::$5 + $a0
Adding number conversion cast (snumber) anim::$6 in anim::$6 = anim::$5 + (snumber)$a0
Adding number conversion cast (snumber) 5 in anim::$7 = ypos#2 >> 5
Adding number conversion cast (snumber) $e6 in anim::$8 = $e6 - anim::$7
Adding number conversion cast (snumber) anim::$8 in anim::$8 = (snumber)$e6 - anim::$7
Adding number conversion cast (unumber) 0 in SPRITES_XPOS[0] = (byte)anim::sprite_x#0
Adding number conversion cast (unumber) 0 in SPRITES_YPOS[0] = (byte)anim::sprite_y#0
Adding number conversion cast (snumber) 0 in xpos#3 = 0
Adding number conversion cast (snumber) 0 in ypos#3 = 0
Adding number conversion cast (snumber) $a in anim::$11 = yvel_init#10 - $a
Adding number conversion cast (snumber) anim::$11 in anim::$11 = yvel_init#10 - (snumber)$a
Adding number conversion cast (snumber) -$c8 in anim::$12 = yvel_init#2 < -$c8
Adding number conversion cast (snumber) $c8 in yvel_init#3 = $c8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *SPRITES_ENABLE = (unumber)1
Inlining cast *SPRITES_EXPAND_X = (unumber)0
Inlining cast *SPRITES_EXPAND_Y = (unumber)0
Inlining cast SPRITES_XPOS[(unumber)0] = (unumber)$64
Inlining cast SPRITES_YPOS[(unumber)0] = (unumber)$64
Inlining cast SPRITE[init::i#2] = (unumber)$ff
Inlining cast xpos#3 = (snumber)0
Inlining cast ypos#3 = (snumber)0
Inlining cast yvel_init#3 = (snumber)$c8
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53264
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3f8
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $64
Simplifying constant integer cast 0
Simplifying constant integer cast $64
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast $a0
Simplifying constant integer cast 5
Simplifying constant integer cast $e6
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast -$c8
Simplifying constant integer cast $c8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $64
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $64
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $ff
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 7
Finalized signed number type (signed word) $a0
Finalized signed number type (signed byte) 5
Finalized signed number type (signed word) $e6
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) $a
Finalized signed number type (signed word) -$c8
Finalized signed number type (signed word) $c8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to signed word in anim::$6 = anim::$5 + $a0
Inferred type updated to signed word in anim::$8 = $e6 - anim::$7
Inferred type updated to signed word in anim::$11 = yvel_init#10 - $a
Inversing boolean not [45] anim::$1 = ypos#10 >= 0 from [44] anim::$0 = ypos#10 < 0
Inversing boolean not [72] anim::$13 = yvel_init#2 >= -$c8 from [71] anim::$12 = yvel_init#2 < -$c8
Successful SSA optimization Pass2UnaryNotSimplification
Alias yvel#18 = yvel#19 
Alias xpos#20 = xpos#21 
Alias ypos#20 = ypos#21 
Alias xvel#20 = xvel#21 
Alias yvel_init#20 = yvel_init#21 
Alias yvel#14 = yvel#17 
Alias xpos#14 = xpos#18 
Alias ypos#15 = ypos#18 
Alias xvel#14 = xvel#18 
Alias yvel_init#15 = yvel_init#19 
Alias yvel#0 = yvel#8 yvel#9 yvel#1 
Alias xpos#0 = xpos#8 xpos#9 xpos#1 
Alias ypos#0 = ypos#8 ypos#9 ypos#1 
Alias xvel#0 = xvel#7 xvel#8 xvel#1 
Alias yvel_init#0 = yvel_init#8 yvel_init#9 yvel_init#1 
Alias init::sc#2 = init::sc#3 
Alias yvel#11 = yvel#2 anim::$2 yvel#4 
Alias xpos#11 = xpos#2 anim::$3 xpos#4 
Alias ypos#12 = ypos#2 anim::$4 ypos#4 
Alias anim::sprite_x#0 = anim::$6 
Alias anim::sprite_y#0 = anim::$8 
Alias xvel#10 = xvel#15 
Alias yvel_init#10 = yvel_init#16 
Alias xvel#19 = xvel#2 anim::$10 
Alias yvel_init#2 = anim::$11 
Alias yvel#3 = yvel_init#11 
Alias xpos#19 = xpos#3 
Alias ypos#19 = ypos#3 
Alias xvel#11 = xvel#9 xvel#3 
Alias yvel_init#12 = yvel_init#17 yvel_init#4 
Alias yvel#16 = yvel#5 yvel_init#5 yvel_init#18 
Alias xpos#17 = xpos#5 
Alias ypos#17 = ypos#5 
Alias xvel#17 = xvel#4 
Alias yvel#12 = yvel#6 yvel#13 yvel#7 
Alias xpos#12 = xpos#6 xpos#13 xpos#7 
Alias ypos#13 = ypos#6 ypos#14 ypos#7 
Alias xvel#12 = xvel#5 xvel#13 xvel#6 
Alias yvel_init#13 = yvel_init#6 yvel_init#14 yvel_init#7 
Successful SSA optimization Pass2AliasElimination
Alias xpos#16 = xpos#19 
Alias xvel#16 = xvel#19 
Alias ypos#16 = ypos#19 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values yvel#18 yvel#16
Identical Phi Values xpos#20 xpos#17
Identical Phi Values ypos#20 ypos#17
Identical Phi Values xvel#20 xvel#17
Identical Phi Values yvel_init#20 yvel#16
Identical Phi Values yvel#0 yvel#11
Identical Phi Values xpos#0 xpos#11
Identical Phi Values ypos#0 ypos#12
Identical Phi Values xvel#0 xvel#11
Identical Phi Values yvel_init#0 yvel_init#12
Identical Phi Values ypos#10 ypos#15
Identical Phi Values yvel#15 yvel#14
Identical Phi Values xpos#15 xpos#14
Identical Phi Values xvel#10 xvel#14
Identical Phi Values yvel_init#10 yvel_init#15
Identical Phi Values yvel#12 yvel#0
Identical Phi Values xpos#12 xpos#0
Identical Phi Values ypos#13 ypos#0
Identical Phi Values xvel#12 xvel#0
Identical Phi Values yvel_init#13 yvel_init#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [4] if(*RASTER!=$ff) goto main::@1
Simple Condition init::$0 [19] if(init::sc#2!=SCREEN+$3e8) goto init::@2
Simple Condition init::$1 [27] if(init::i#1!=rangelast(0,$3f)) goto init::@4
Simple Condition anim::$1 [31] if(ypos#15>=0) goto anim::@1
Simple Condition anim::$13 [49] if(yvel_init#2>=-$c8) goto anim::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant init::sc#0 = SCREEN
Constant init::i#0 = 0
Constant xpos#16 = 0
Constant ypos#16 = 0
Constant yvel_init#3 = $c8
Constant xpos#17 = 0
Constant ypos#17 = 0
Constant yvel#16 = $64
Constant xvel#17 = $c8
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [7] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [25] init::i#1 = ++ init::i#2 to ++
Resolved ranged comparison value [27] if(init::i#1!=rangelast(0,$3f)) goto init::@4 to $40
Simplifying expression containing zero SPRITES_XPOS in [12] SPRITES_XPOS[0] = $64
Simplifying expression containing zero SPRITES_YPOS in [13] SPRITES_YPOS[0] = $64
Simplifying expression containing zero SPRITES_COLOR in [14] SPRITES_COLOR[0] = WHITE
Simplifying expression containing zero SPRITES_PTR in [15] SPRITES_PTR[0] = (byte)SPRITE/$40
Simplifying expression containing zero SPRITES_XPOS in [40] SPRITES_XPOS[0] = (byte)anim::sprite_x#0
Simplifying expression containing zero SPRITES_YPOS in [41] SPRITES_YPOS[0] = (byte)anim::sprite_y#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $40 in [18] if(init::i#1!=$40) goto init::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $40
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $40
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings init::sc#0
Inlining constant with var siblings init::i#0
Inlining constant with var siblings xpos#16
Inlining constant with var siblings ypos#16
Inlining constant with var siblings yvel_init#3
Inlining constant with var siblings xpos#17
Inlining constant with var siblings ypos#17
Inlining constant with var siblings yvel#16
Inlining constant with var siblings xvel#17
Constant inlined init::i#0 = 0
Constant inlined yvel_init#3 = $c8
Constant inlined xpos#17 = 0
Constant inlined xpos#16 = 0
Constant inlined init::sc#0 = SCREEN
Constant inlined yvel#16 = $64
Constant inlined ypos#16 = 0
Constant inlined xvel#17 = $c8
Constant inlined ypos#17 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting init::@5(between init::@4 and init::@4)
Added new block during phi lifting anim::@5(between anim and anim::@1)
Added new block during phi lifting anim::@6(between anim::@2 and anim::@4)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init::@3
Adding NOP phi() at start of anim::@3
CALL GRAPH
Calls in [main] to init:1 anim:6 

Created 13 initial phi equivalence classes
Coalesced [7] yvel#21 = yvel#11
Coalesced [8] xpos#23 = xpos#11
Coalesced [9] ypos#23 = ypos#12
Coalesced [10] xvel#23 = xvel#11
Coalesced [11] yvel_init#23 = yvel_init#12
Coalesced (already) [12] yvel#20 = yvel#14
Coalesced (already) [13] xpos#22 = xpos#14
Coalesced (already) [14] ypos#22 = ypos#15
Coalesced (already) [15] xvel#22 = xvel#14
Coalesced (already) [16] yvel_init#22 = yvel_init#15
Coalesced [32] init::i#3 = init::i#1
Coalesced [35] init::sc#4 = init::sc#1
Not coalescing [42] yvel#23 = yvel#3
Coalesced [43] xvel#25 = xvel#16
Coalesced [44] yvel_init#25 = yvel#3
Coalesced [58] yvel#24 = yvel_init#2
Coalesced [59] yvel#22 = yvel#14
Coalesced [60] xpos#24 = xpos#14
Coalesced (already) [61] xvel#24 = xvel#14
Coalesced [62] ypos#24 = ypos#15
Coalesced (already) [63] yvel_init#24 = yvel_init#15
Coalesced down to 7 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@4
Culled Empty Block label main::@5
Culled Empty Block label init::@3
Culled Empty Block label init::@5
Culled Empty Block label anim::@3
Culled Empty Block label anim::@5
Renumbering block init::@4 to init::@3
Renumbering block anim::@4 to anim::@3
Renumbering block anim::@6 to anim::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of anim::@4

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [2] yvel_init#15 = phi( main::@1/yvel_init#15, main/$64, main::@2/yvel_init#12 )
  [2] xvel#14 = phi( main::@1/xvel#14, main/$c8, main::@2/xvel#11 )
  [2] ypos#15 = phi( main::@1/ypos#15, main/0, main::@2/ypos#12 )
  [2] xpos#14 = phi( main::@1/xpos#14, main/0, main::@2/xpos#11 )
  [2] yvel#14 = phi( main::@1/yvel#14, main/$64, main::@2/yvel#11 )
  [3] if(*RASTER!=$ff) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call anim 
  to:main::@1

void init()
init: scope:[init]  from main
  [6] *SPRITES_ENABLE = 1
  [7] *SPRITES_EXPAND_X = 0
  [8] *SPRITES_EXPAND_Y = 0
  [9] *SPRITES_XPOS = $64
  [10] *SPRITES_YPOS = $64
  [11] *SPRITES_COLOR = WHITE
  [12] *SPRITES_PTR = (byte)SPRITE/$40
  to:init::@1
init::@1: scope:[init]  from init init::@2
  [13] init::sc#2 = phi( init/SCREEN, init::@2/init::sc#1 )
  [14] if(init::sc#2!=SCREEN+$3e8) goto init::@2
  to:init::@3
init::@3: scope:[init]  from init::@1 init::@3
  [15] init::i#2 = phi( init::@1/0, init::@3/init::i#1 )
  [16] SPRITE[init::i#2] = $ff
  [17] init::i#1 = ++ init::i#2
  [18] if(init::i#1!=$40) goto init::@3
  to:init::@return
init::@return: scope:[init]  from init::@3
  [19] return 
  to:@return
init::@2: scope:[init]  from init::@1
  [20] *init::sc#2 = ' '
  [21] init::sc#1 = ++ init::sc#2
  to:init::@1

void anim()
anim: scope:[anim]  from main::@2
  [22] if(ypos#15>=0) goto anim::@1
  to:anim::@2
anim::@2: scope:[anim]  from anim
  [23] xvel#16 = - xvel#14
  [24] yvel_init#2 = yvel_init#15 - $a
  [25] if(yvel_init#2>=-$c8) goto anim::@4
  to:anim::@3
anim::@4: scope:[anim]  from anim::@2
  [26] phi()
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2 anim::@4
  [27] yvel#3 = phi( anim::@4/yvel_init#2, anim::@2/$c8 )
  [28] yvel#23 = yvel#3
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@3
  [29] yvel_init#12 = phi( anim/yvel_init#15, anim::@3/yvel#3 )
  [29] ypos#11 = phi( anim/ypos#15, anim::@3/0 )
  [29] xvel#11 = phi( anim/xvel#14, anim::@3/xvel#16 )
  [29] xpos#10 = phi( anim/xpos#14, anim::@3/0 )
  [29] yvel#10 = phi( anim/yvel#14, anim::@3/yvel#23 )
  [30] yvel#11 = yvel#10 + g
  [31] xpos#11 = xpos#10 + xvel#11
  [32] ypos#12 = ypos#11 + yvel#11
  [33] anim::$5 = xpos#11 >> 7
  [34] anim::sprite_x#0 = anim::$5 + $a0
  [35] anim::$7 = ypos#12 >> 5
  [36] anim::sprite_y#0 = $e6 - anim::$7
  [37] *SPRITES_XPOS = (byte)anim::sprite_x#0
  [38] *SPRITES_YPOS = (byte)anim::sprite_y#0
  [39] anim::$9 = byte1  anim::sprite_x#0
  [40] *SPRITES_XMSB = anim::$9
  to:anim::@return
anim::@return: scope:[anim]  from anim::@1
  [41] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void anim()
signed word~ anim::$5 202.0
signed word~ anim::$7 202.0
byte~ anim::$9 202.0
signed word anim::sprite_x
signed word anim::sprite_x#0 40.4
signed word anim::sprite_y
signed word anim::sprite_y#0 50.5
void init()
byte init::i
byte init::i#1 151.5
byte init::i#2 151.5
byte* init::sc
byte* init::sc#1 202.0
byte* init::sc#2 134.66666666666666
void main()
signed word xpos
signed word xpos#10 101.0
signed word xpos#11 17.75
signed word xpos#14 78.5
signed word xvel
signed word xvel#11 22.42857142857143
signed word xvel#14 103.75
signed word xvel#16 33.666666666666664
signed word ypos
signed word ypos#11 67.33333333333333
signed word ypos#12 19.363636363636363
signed word ypos#15 103.75
signed word yvel
signed word yvel#10 303.0
signed word yvel#11 16.384615384615383
signed word yvel#14 78.5
signed word yvel#23 202.0
signed word yvel#3 151.5
signed word yvel_init
signed word yvel_init#12 15.214285714285715
signed word yvel_init#15 83.0
signed word yvel_init#2 101.0

Initial phi equivalence classes
[ xvel#14 xvel#11 xvel#16 ]
[ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ]
[ init::sc#2 init::sc#1 ]
[ init::i#2 init::i#1 ]
[ yvel#10 yvel#14 yvel#11 yvel#23 ]
[ xpos#10 xpos#14 xpos#11 ]
[ ypos#11 ypos#15 ypos#12 ]
Added variable anim::$5 to live range equivalence class [ anim::$5 ]
Added variable anim::sprite_x#0 to live range equivalence class [ anim::sprite_x#0 ]
Added variable anim::$7 to live range equivalence class [ anim::$7 ]
Added variable anim::sprite_y#0 to live range equivalence class [ anim::sprite_y#0 ]
Added variable anim::$9 to live range equivalence class [ anim::$9 ]
Complete equivalence classes
[ xvel#14 xvel#11 xvel#16 ]
[ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ]
[ init::sc#2 init::sc#1 ]
[ init::i#2 init::i#1 ]
[ yvel#10 yvel#14 yvel#11 yvel#23 ]
[ xpos#10 xpos#14 xpos#11 ]
[ ypos#11 ypos#15 ypos#12 ]
[ anim::$5 ]
[ anim::sprite_x#0 ]
[ anim::$7 ]
[ anim::sprite_y#0 ]
[ anim::$9 ]
Allocated zp[2]:2 [ xvel#14 xvel#11 xvel#16 ]
Allocated zp[2]:4 [ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ]
Allocated zp[2]:6 [ init::sc#2 init::sc#1 ]
Allocated zp[1]:8 [ init::i#2 init::i#1 ]
Allocated zp[2]:9 [ yvel#10 yvel#14 yvel#11 yvel#23 ]
Allocated zp[2]:11 [ xpos#10 xpos#14 xpos#11 ]
Allocated zp[2]:13 [ ypos#11 ypos#15 ypos#12 ]
Allocated zp[2]:15 [ anim::$5 ]
Allocated zp[2]:17 [ anim::sprite_x#0 ]
Allocated zp[2]:19 [ anim::$7 ]
Allocated zp[2]:21 [ anim::sprite_y#0 ]
Allocated zp[1]:23 [ anim::$9 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] if(*RASTER!=$ff) goto main::@1 [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] (  [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] { }  ) always clobbers reg byte a 
Statement [6] *SPRITES_ENABLE = 1 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [7] *SPRITES_EXPAND_X = 0 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [8] *SPRITES_EXPAND_Y = 0 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [9] *SPRITES_XPOS = $64 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [10] *SPRITES_YPOS = $64 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [11] *SPRITES_COLOR = WHITE [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [12] *SPRITES_PTR = (byte)SPRITE/$40 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [14] if(init::sc#2!=SCREEN+$3e8) goto init::@2 [ init::sc#2 ] ( init:1 [ init::sc#2 ] { }  ) always clobbers reg byte a 
Statement [16] SPRITE[init::i#2] = $ff [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ init::i#2 init::i#1 ]
Statement [20] *init::sc#2 = ' ' [ init::sc#2 ] ( init:1 [ init::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [22] if(ypos#15>=0) goto anim::@1 [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] ( anim:5 [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] { }  ) always clobbers reg byte a 
Statement [23] xvel#16 = - xvel#14 [ yvel_init#15 xvel#16 ] ( anim:5 [ yvel_init#15 xvel#16 ] { }  ) always clobbers reg byte a 
Statement [24] yvel_init#2 = yvel_init#15 - $a [ xvel#16 yvel_init#2 ] ( anim:5 [ xvel#16 yvel_init#2 ] { }  ) always clobbers reg byte a 
Statement [25] if(yvel_init#2>=-$c8) goto anim::@4 [ xvel#16 yvel_init#2 ] ( anim:5 [ xvel#16 yvel_init#2 ] { }  ) always clobbers reg byte a 
Statement [28] yvel#23 = yvel#3 [ xvel#16 yvel#3 yvel#23 ] ( anim:5 [ xvel#16 yvel#3 yvel#23 ] { }  ) always clobbers reg byte a 
Statement [30] yvel#11 = yvel#10 + g [ yvel#11 xvel#11 yvel_init#12 xpos#10 ypos#11 ] ( anim:5 [ yvel#11 xvel#11 yvel_init#12 xpos#10 ypos#11 ] { }  ) always clobbers reg byte a 
Statement [31] xpos#11 = xpos#10 + xvel#11 [ yvel#11 xpos#11 xvel#11 yvel_init#12 ypos#11 ] ( anim:5 [ yvel#11 xpos#11 xvel#11 yvel_init#12 ypos#11 ] { }  ) always clobbers reg byte a 
Statement [32] ypos#12 = ypos#11 + yvel#11 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 ] { }  ) always clobbers reg byte a 
Statement [33] anim::$5 = xpos#11 >> 7 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::$5 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::$5 ] { }  ) always clobbers reg byte a 
Statement [34] anim::sprite_x#0 = anim::$5 + $a0 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] { }  ) always clobbers reg byte a 
Statement [35] anim::$7 = ypos#12 >> 5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::$7 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::$7 ] { }  ) always clobbers reg byte a 
Statement [36] anim::sprite_y#0 = $e6 - anim::$7 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] { }  ) always clobbers reg byte a 
Statement [37] *SPRITES_XPOS = (byte)anim::sprite_x#0 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] { }  ) always clobbers reg byte a 
Statement [38] *SPRITES_YPOS = (byte)anim::sprite_y#0 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] { }  ) always clobbers reg byte a 
Statement [3] if(*RASTER!=$ff) goto main::@1 [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] (  [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] { }  ) always clobbers reg byte a 
Statement [6] *SPRITES_ENABLE = 1 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [7] *SPRITES_EXPAND_X = 0 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [8] *SPRITES_EXPAND_Y = 0 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [9] *SPRITES_XPOS = $64 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [10] *SPRITES_YPOS = $64 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [11] *SPRITES_COLOR = WHITE [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [12] *SPRITES_PTR = (byte)SPRITE/$40 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [14] if(init::sc#2!=SCREEN+$3e8) goto init::@2 [ init::sc#2 ] ( init:1 [ init::sc#2 ] { }  ) always clobbers reg byte a 
Statement [16] SPRITE[init::i#2] = $ff [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Statement [20] *init::sc#2 = ' ' [ init::sc#2 ] ( init:1 [ init::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [22] if(ypos#15>=0) goto anim::@1 [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] ( anim:5 [ yvel#14 xpos#14 ypos#15 xvel#14 yvel_init#15 ] { }  ) always clobbers reg byte a 
Statement [23] xvel#16 = - xvel#14 [ yvel_init#15 xvel#16 ] ( anim:5 [ yvel_init#15 xvel#16 ] { }  ) always clobbers reg byte a 
Statement [24] yvel_init#2 = yvel_init#15 - $a [ xvel#16 yvel_init#2 ] ( anim:5 [ xvel#16 yvel_init#2 ] { }  ) always clobbers reg byte a 
Statement [25] if(yvel_init#2>=-$c8) goto anim::@4 [ xvel#16 yvel_init#2 ] ( anim:5 [ xvel#16 yvel_init#2 ] { }  ) always clobbers reg byte a 
Statement [28] yvel#23 = yvel#3 [ xvel#16 yvel#3 yvel#23 ] ( anim:5 [ xvel#16 yvel#3 yvel#23 ] { }  ) always clobbers reg byte a 
Statement [30] yvel#11 = yvel#10 + g [ yvel#11 xvel#11 yvel_init#12 xpos#10 ypos#11 ] ( anim:5 [ yvel#11 xvel#11 yvel_init#12 xpos#10 ypos#11 ] { }  ) always clobbers reg byte a 
Statement [31] xpos#11 = xpos#10 + xvel#11 [ yvel#11 xpos#11 xvel#11 yvel_init#12 ypos#11 ] ( anim:5 [ yvel#11 xpos#11 xvel#11 yvel_init#12 ypos#11 ] { }  ) always clobbers reg byte a 
Statement [32] ypos#12 = ypos#11 + yvel#11 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 ] { }  ) always clobbers reg byte a 
Statement [33] anim::$5 = xpos#11 >> 7 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::$5 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::$5 ] { }  ) always clobbers reg byte a 
Statement [34] anim::sprite_x#0 = anim::$5 + $a0 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] { }  ) always clobbers reg byte a 
Statement [35] anim::$7 = ypos#12 >> 5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::$7 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::$7 ] { }  ) always clobbers reg byte a 
Statement [36] anim::sprite_y#0 = $e6 - anim::$7 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] { }  ) always clobbers reg byte a 
Statement [37] *SPRITES_XPOS = (byte)anim::sprite_x#0 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 anim::sprite_y#0 ] { }  ) always clobbers reg byte a 
Statement [38] *SPRITES_YPOS = (byte)anim::sprite_y#0 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] ( anim:5 [ yvel#11 xpos#11 ypos#12 xvel#11 yvel_init#12 anim::sprite_x#0 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ xvel#14 xvel#11 xvel#16 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ init::sc#2 init::sc#1 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ init::i#2 init::i#1 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[2]:9 [ yvel#10 yvel#14 yvel#11 yvel#23 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ xpos#10 xpos#14 xpos#11 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ ypos#11 ypos#15 ypos#12 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ anim::$5 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ anim::sprite_x#0 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ anim::$7 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ anim::sprite_y#0 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ anim::$9 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 599.88: zp[2]:9 [ yvel#10 yvel#14 yvel#11 yvel#23 ] 350.71: zp[2]:4 [ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ] 197.25: zp[2]:11 [ xpos#10 xpos#14 xpos#11 ] 190.45: zp[2]:13 [ ypos#11 ypos#15 ypos#12 ] 159.85: zp[2]:2 [ xvel#14 xvel#11 xvel#16 ] 
Uplift Scope [anim] 202: zp[2]:15 [ anim::$5 ] 202: zp[2]:19 [ anim::$7 ] 202: zp[1]:23 [ anim::$9 ] 50.5: zp[2]:21 [ anim::sprite_y#0 ] 40.4: zp[2]:17 [ anim::sprite_x#0 ] 
Uplift Scope [init] 336.67: zp[2]:6 [ init::sc#2 init::sc#1 ] 303: zp[1]:8 [ init::i#2 init::i#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 

Uplifting [] best 7871 combination zp[2]:9 [ yvel#10 yvel#14 yvel#11 yvel#23 ] zp[2]:4 [ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ] zp[2]:11 [ xpos#10 xpos#14 xpos#11 ] zp[2]:13 [ ypos#11 ypos#15 ypos#12 ] zp[2]:2 [ xvel#14 xvel#11 xvel#16 ] 
Uplifting [anim] best 7865 combination zp[2]:15 [ anim::$5 ] zp[2]:19 [ anim::$7 ] reg byte a [ anim::$9 ] zp[2]:21 [ anim::sprite_y#0 ] zp[2]:17 [ anim::sprite_x#0 ] 
Uplifting [init] best 7745 combination zp[2]:6 [ init::sc#2 init::sc#1 ] reg byte x [ init::i#2 init::i#1 ] 
Uplifting [MOS6526_CIA] best 7745 combination 
Uplifting [MOS6569_VICII] best 7745 combination 
Uplifting [MOS6581_SID] best 7745 combination 
Uplifting [main] best 7745 combination 
Coalescing zero page register [ zp[2]:15 [ anim::$5 ] ] with [ zp[2]:17 [ anim::sprite_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ anim::$7 ] ] with [ zp[2]:21 [ anim::sprite_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ init::sc#2 init::sc#1 ] ] with [ zp[2]:2 [ xvel#14 xvel#11 xvel#16 ] ]
Allocated (was zp[2]:4) zp[2]:2 [ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ]
Allocated (was zp[2]:6) zp[2]:4 [ init::sc#2 init::sc#1 xvel#14 xvel#11 xvel#16 ]
Allocated (was zp[2]:9) zp[2]:6 [ yvel#10 yvel#14 yvel#11 yvel#23 ]
Allocated (was zp[2]:11) zp[2]:8 [ xpos#10 xpos#14 xpos#11 ]
Allocated (was zp[2]:13) zp[2]:10 [ ypos#11 ypos#15 ypos#12 ]
Allocated (was zp[2]:15) zp[2]:12 [ anim::$5 anim::sprite_x#0 ]
Allocated (was zp[2]:19) zp[2]:14 [ anim::$7 anim::sprite_y#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/// @file
/// @brief Commodore 64 Registers and Constants
/// @file
/// @brief The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="signed-words.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const WHITE = 1
  .const g = -5
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label RASTER = $d012
  .label SCREEN = $400
  .label SPRITES_PTR = SCREEN+$3f8
  .label SPRITE = $2000
  // Reset y velocity
  .label yvel_init = 2
  .label yvel = 2
  .label yvel_1 = 6
  // Reset position
  .label xpos = 8
  .label ypos = $a
  .label xvel = 4
.segment Code
  // main
main: {
    // [1] call init 
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi yvel_init#15 = $64 [phi:main->main::@1#0] -- vwsz1=vwsc1 
    lda #<$64
    sta.z yvel_init
    lda #>$64
    sta.z yvel_init+1
    // [2] phi xvel#14 = $c8 [phi:main->main::@1#1] -- vwsz1=vwsc1 
    lda #<$c8
    sta.z xvel
    lda #>$c8
    sta.z xvel+1
    // [2] phi ypos#15 = 0 [phi:main->main::@1#2] -- vwsz1=vwsc1 
    lda #<0
    sta.z ypos
    lda #>0
    sta.z ypos+1
    // [2] phi xpos#14 = 0 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<0
    sta.z xpos
    lda #>0
    sta.z xpos+1
    // [2] phi yvel#14 = $64 [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<$64
    sta.z yvel_1
    lda #>$64
    sta.z yvel_1+1
    jmp __b1
    // [2] phi from main::@1 main::@2 to main::@1 [phi:main::@1/main::@2->main::@1]
  __b1_from___b1:
  __b1_from___b2:
    // [2] phi yvel_init#15 = yvel_init#15 [phi:main::@1/main::@2->main::@1#0] -- register_copy 
    // [2] phi xvel#14 = xvel#14 [phi:main::@1/main::@2->main::@1#1] -- register_copy 
    // [2] phi ypos#15 = ypos#15 [phi:main::@1/main::@2->main::@1#2] -- register_copy 
    // [2] phi xpos#14 = xpos#14 [phi:main::@1/main::@2->main::@1#3] -- register_copy 
    // [2] phi yvel#14 = yvel#14 [phi:main::@1/main::@2->main::@1#4] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] if(*RASTER!=$ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b1_from___b1
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call anim 
    jsr anim
    jmp __b1_from___b2
}
  // init
// Fill and show a sprite, clear the screen
init: {
    .label sc = 4
    // [6] *SPRITES_ENABLE = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta SPRITES_ENABLE
    // [7] *SPRITES_EXPAND_X = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_X
    // [8] *SPRITES_EXPAND_Y = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_Y
    // [9] *SPRITES_XPOS = $64 -- _deref_pbuc1=vbuc2 
    lda #$64
    sta SPRITES_XPOS
    // [10] *SPRITES_YPOS = $64 -- _deref_pbuc1=vbuc2 
    lda #$64
    sta SPRITES_YPOS
    // [11] *SPRITES_COLOR = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta SPRITES_COLOR
    // [12] *SPRITES_PTR = (byte)SPRITE/$40 -- _deref_pbuc1=vbuc2 
    lda #SPRITE/$40
    sta SPRITES_PTR
    // [13] phi from init to init::@1 [phi:init->init::@1]
  __b1_from_init:
    // [13] phi init::sc#2 = SCREEN [phi:init->init::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
    jmp __b1
    // init::@1
  __b1:
    // [14] if(init::sc#2!=SCREEN+$3e8) goto init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z sc
    cmp #<SCREEN+$3e8
    bne __b2
    // [15] phi from init::@1 to init::@3 [phi:init::@1->init::@3]
  __b3_from___b1:
    // [15] phi init::i#2 = 0 [phi:init::@1->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [15] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  __b3_from___b3:
    // [15] phi init::i#2 = init::i#1 [phi:init::@3->init::@3#0] -- register_copy 
    jmp __b3
    // init::@3
  __b3:
    // [16] SPRITE[init::i#2] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff
    sta SPRITE,x
    // [17] init::i#1 = ++ init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [18] if(init::i#1!=$40) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$40
    bne __b3_from___b3
    jmp __breturn
    // init::@return
  __breturn:
    // [19] return 
    rts
    // init::@2
  __b2:
    // [20] *init::sc#2 = ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [21] init::sc#1 = ++ init::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [13] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
  __b1_from___b2:
    // [13] phi init::sc#2 = init::sc#1 [phi:init::@2->init::@1#0] -- register_copy 
    jmp __b1
}
  // anim
anim: {
    .label __5 = $c
    .label __7 = $e
    .label sprite_x = $c
    .label sprite_y = $e
    // [22] if(ypos#15>=0) goto anim::@1 -- vwsz1_ge_0_then_la1 
    lda.z ypos+1
    bpl __b1_from_anim
    jmp __b2
    // anim::@2
  __b2:
    // [23] xvel#16 = - xvel#14 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z xvel
    sta.z xvel
    lda #0
    sbc.z xvel+1
    sta.z xvel+1
    // [24] yvel_init#2 = yvel_init#15 - $a -- vwsz1=vwsz1_minus_vbsc1 
    lda.z yvel_init
    sec
    sbc #$a
    sta.z yvel_init
    lda.z yvel_init+1
    sbc #>$a
    sta.z yvel_init+1
    // [25] if(yvel_init#2>=-$c8) goto anim::@4 -- vwsz1_ge_vwsc1_then_la1 
    lda.z yvel_init
    cmp #<-$c8
    lda.z yvel_init+1
    sbc #>-$c8
    bvc !+
    eor #$80
  !:
    bpl __b4_from___b2
    // [27] phi from anim::@2 to anim::@3 [phi:anim::@2->anim::@3]
  __b3_from___b2:
    // [27] phi yvel#3 = $c8 [phi:anim::@2->anim::@3#0] -- vwsz1=vwsc1 
    lda #<$c8
    sta.z yvel
    lda #>$c8
    sta.z yvel+1
    jmp __b3
    // [26] phi from anim::@2 to anim::@4 [phi:anim::@2->anim::@4]
  __b4_from___b2:
    jmp __b4
    // anim::@4
  __b4:
    // [27] phi from anim::@4 to anim::@3 [phi:anim::@4->anim::@3]
  __b3_from___b4:
    // [27] phi yvel#3 = yvel_init#2 [phi:anim::@4->anim::@3#0] -- register_copy 
    jmp __b3
    // anim::@3
  __b3:
    // [28] yvel#23 = yvel#3 -- vwsz1=vwsz2 
    lda.z yvel
    sta.z yvel_1
    lda.z yvel+1
    sta.z yvel_1+1
    // [29] phi from anim::@3 to anim::@1 [phi:anim::@3->anim::@1]
  __b1_from___b3:
    // [29] phi yvel_init#12 = yvel#3 [phi:anim::@3->anim::@1#0] -- register_copy 
    // [29] phi ypos#11 = 0 [phi:anim::@3->anim::@1#1] -- vwsz1=vbsc1 
    lda #<0
    sta.z ypos
    lda #>0
    sta.z ypos+1
    // [29] phi xvel#11 = xvel#16 [phi:anim::@3->anim::@1#2] -- register_copy 
    // [29] phi xpos#10 = 0 [phi:anim::@3->anim::@1#3] -- vwsz1=vbsc1 
    lda #<0
    sta.z xpos
    lda #>0
    sta.z xpos+1
    // [29] phi yvel#10 = yvel#23 [phi:anim::@3->anim::@1#4] -- register_copy 
    jmp __b1
    // [29] phi from anim to anim::@1 [phi:anim->anim::@1]
  __b1_from_anim:
    // [29] phi yvel_init#12 = yvel_init#15 [phi:anim->anim::@1#0] -- register_copy 
    // [29] phi ypos#11 = ypos#15 [phi:anim->anim::@1#1] -- register_copy 
    // [29] phi xvel#11 = xvel#14 [phi:anim->anim::@1#2] -- register_copy 
    // [29] phi xpos#10 = xpos#14 [phi:anim->anim::@1#3] -- register_copy 
    // [29] phi yvel#10 = yvel#14 [phi:anim->anim::@1#4] -- register_copy 
    jmp __b1
    // anim::@1
  __b1:
    // [30] yvel#11 = yvel#10 + g -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z yvel_1
    adc #<g
    sta.z yvel_1
    lda.z yvel_1+1
    adc #>g
    sta.z yvel_1+1
    // [31] xpos#11 = xpos#10 + xvel#11 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z xpos
    clc
    adc.z xvel
    sta.z xpos
    lda.z xpos+1
    adc.z xvel+1
    sta.z xpos+1
    // [32] ypos#12 = ypos#11 + yvel#11 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z ypos
    clc
    adc.z yvel_1
    sta.z ypos
    lda.z ypos+1
    adc.z yvel_1+1
    sta.z ypos+1
    // [33] anim::$5 = xpos#11 >> 7 -- vwsz1=vwsz2_ror_7 
    lda.z xpos+1
    sta.z __5
    and #$80
    beq !+
    lda #$ff
  !:
    sta.z __5+1
    lda.z xpos
    rol
    rol.z __5
    rol.z __5+1
    // [34] anim::sprite_x#0 = anim::$5 + $a0 -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z sprite_x
    adc #<$a0
    sta.z sprite_x
    lda.z sprite_x+1
    adc #>$a0
    sta.z sprite_x+1
    // [35] anim::$7 = ypos#12 >> 5 -- vwsz1=vwsz2_ror_5 
    lda.z ypos
    sta.z $ff
    lda.z ypos+1
    sta.z __7
    lda #0
    bit.z ypos+1
    bpl !+
    lda #$ff
  !:
    sta.z __7+1
    rol.z $ff
    rol.z __7
    rol.z __7+1
    rol.z $ff
    rol.z __7
    rol.z __7+1
    rol.z $ff
    rol.z __7
    rol.z __7+1
    // [36] anim::sprite_y#0 = $e6 - anim::$7 -- vwsz1=vwsc1_minus_vwsz1 
    lda #<$e6
    sec
    sbc.z sprite_y
    sta.z sprite_y
    lda #>$e6
    sbc.z sprite_y+1
    sta.z sprite_y+1
    // [37] *SPRITES_XPOS = (byte)anim::sprite_x#0 -- _deref_pbuc1=_byte_vwsz1 
    lda.z sprite_x
    sta SPRITES_XPOS
    // [38] *SPRITES_YPOS = (byte)anim::sprite_y#0 -- _deref_pbuc1=_byte_vwsz1 
    lda.z sprite_y
    sta SPRITES_YPOS
    // [39] anim::$9 = byte1  anim::sprite_x#0 -- vbuaa=_byte1_vwsz1 
    lda.z sprite_x+1
    // [40] *SPRITES_XMSB = anim::$9 -- _deref_pbuc1=vbuaa 
    sta SPRITES_XMSB
    jmp __breturn
    // anim::@return
  __breturn:
    // [41] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #$64
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b1_from_anim with __b1
Replacing label __b4_from___b2 with __b3
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b3:
Removing instruction __b4_from___b2:
Removing instruction __b4:
Removing instruction __b3_from___b4:
Removing instruction __b1_from_anim:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b1_from_init:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b3
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant byte* const RASTER = (byte*) 53266
constant byte* const SCREEN = (byte*) 1024
constant byte* const SPRITE = (byte*) 8192
constant byte* const SPRITES_COLOR = (byte*) 53287
constant byte* const SPRITES_ENABLE = (byte*) 53269
constant byte* const SPRITES_EXPAND_X = (byte*) 53277
constant byte* const SPRITES_EXPAND_Y = (byte*) 53271
constant byte* const SPRITES_PTR = SCREEN+$3f8
constant byte* const SPRITES_XMSB = (byte*) 53264
constant byte* const SPRITES_XPOS = (byte*) 53248
constant byte* const SPRITES_YPOS = (byte*) 53249
constant const byte WHITE = 1
void anim()
signed word~ anim::$5 zp[2]:12 202.0
signed word~ anim::$7 zp[2]:14 202.0
byte~ anim::$9 reg byte a 202.0
signed word anim::sprite_x
signed word anim::sprite_x#0 sprite_x zp[2]:12 40.4
signed word anim::sprite_y
signed word anim::sprite_y#0 sprite_y zp[2]:14 50.5
constant const signed word g = -5
void init()
byte init::i
byte init::i#1 reg byte x 151.5
byte init::i#2 reg byte x 151.5
byte* init::sc
byte* init::sc#1 sc zp[2]:4 202.0
byte* init::sc#2 sc zp[2]:4 134.66666666666666
void main()
signed word xpos
signed word xpos#10 xpos zp[2]:8 101.0
signed word xpos#11 xpos zp[2]:8 17.75
signed word xpos#14 xpos zp[2]:8 78.5
signed word xvel
signed word xvel#11 xvel zp[2]:4 22.42857142857143
signed word xvel#14 xvel zp[2]:4 103.75
signed word xvel#16 xvel zp[2]:4 33.666666666666664
signed word ypos
signed word ypos#11 ypos zp[2]:10 67.33333333333333
signed word ypos#12 ypos zp[2]:10 19.363636363636363
signed word ypos#15 ypos zp[2]:10 103.75
signed word yvel
signed word yvel#10 yvel_1 zp[2]:6 303.0
signed word yvel#11 yvel_1 zp[2]:6 16.384615384615383
signed word yvel#14 yvel_1 zp[2]:6 78.5
signed word yvel#23 yvel_1 zp[2]:6 202.0
signed word yvel#3 yvel zp[2]:2 151.5
signed word yvel_init
signed word yvel_init#12 yvel_init zp[2]:2 15.214285714285715
signed word yvel_init#15 yvel_init zp[2]:2 83.0
signed word yvel_init#2 yvel_init zp[2]:2 101.0

zp[2]:2 [ yvel_init#15 yvel_init#12 yvel#3 yvel_init#2 ]
zp[2]:4 [ init::sc#2 init::sc#1 xvel#14 xvel#11 xvel#16 ]
reg byte x [ init::i#2 init::i#1 ]
zp[2]:6 [ yvel#10 yvel#14 yvel#11 yvel#23 ]
zp[2]:8 [ xpos#10 xpos#14 xpos#11 ]
zp[2]:10 [ ypos#11 ypos#15 ypos#12 ]
zp[2]:12 [ anim::$5 anim::sprite_x#0 ]
zp[2]:14 [ anim::$7 anim::sprite_y#0 ]
reg byte a [ anim::$9 ]


FINAL ASSEMBLER
Score: 6364

  // File Comments
/// @file
/// @brief Commodore 64 Registers and Constants
/// @file
/// @brief The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="signed-words.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const WHITE = 1
  .const g = -5
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label RASTER = $d012
  .label SCREEN = $400
  .label SPRITES_PTR = SCREEN+$3f8
  .label SPRITE = $2000
  // Reset y velocity
  .label yvel_init = 2
  .label yvel = 2
  .label yvel_1 = 6
  // Reset position
  .label xpos = 8
  .label ypos = $a
  .label xvel = 4
.segment Code
  // main
main: {
    // init()
    // [1] call init 
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi yvel_init#15 = $64 [phi:main->main::@1#0] -- vwsz1=vwsc1 
    lda #<$64
    sta.z yvel_init
    lda #>$64
    sta.z yvel_init+1
    // [2] phi xvel#14 = $c8 [phi:main->main::@1#1] -- vwsz1=vwsc1 
    lda #<$c8
    sta.z xvel
    lda #>$c8
    sta.z xvel+1
    // [2] phi ypos#15 = 0 [phi:main->main::@1#2] -- vwsz1=vwsc1 
    lda #<0
    sta.z ypos
    sta.z ypos+1
    // [2] phi xpos#14 = 0 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    sta.z xpos
    sta.z xpos+1
    // [2] phi yvel#14 = $64 [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<$64
    sta.z yvel_1
    lda #>$64
    sta.z yvel_1+1
    // [2] phi from main::@1 main::@2 to main::@1 [phi:main::@1/main::@2->main::@1]
    // [2] phi yvel_init#15 = yvel_init#15 [phi:main::@1/main::@2->main::@1#0] -- register_copy 
    // [2] phi xvel#14 = xvel#14 [phi:main::@1/main::@2->main::@1#1] -- register_copy 
    // [2] phi ypos#15 = ypos#15 [phi:main::@1/main::@2->main::@1#2] -- register_copy 
    // [2] phi xpos#14 = xpos#14 [phi:main::@1/main::@2->main::@1#3] -- register_copy 
    // [2] phi yvel#14 = yvel#14 [phi:main::@1/main::@2->main::@1#4] -- register_copy 
    // main::@1
  __b1:
    // while (*RASTER!=$ff)
    // [3] if(*RASTER!=$ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b1
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // anim()
    // [5] call anim 
    jsr anim
    jmp __b1
}
  // init
// Fill and show a sprite, clear the screen
init: {
    .label sc = 4
    // *SPRITES_ENABLE = %00000001
    // [6] *SPRITES_ENABLE = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta SPRITES_ENABLE
    // *SPRITES_EXPAND_X = 0
    // [7] *SPRITES_EXPAND_X = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_X
    // *SPRITES_EXPAND_Y = 0
    // [8] *SPRITES_EXPAND_Y = 0 -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_Y
    // SPRITES_XPOS[0] = 100
    // [9] *SPRITES_XPOS = $64 -- _deref_pbuc1=vbuc2 
    lda #$64
    sta SPRITES_XPOS
    // SPRITES_YPOS[0] = 100
    // [10] *SPRITES_YPOS = $64 -- _deref_pbuc1=vbuc2 
    sta SPRITES_YPOS
    // SPRITES_COLOR[0] = WHITE
    // [11] *SPRITES_COLOR = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta SPRITES_COLOR
    // SPRITES_PTR[0] = (byte)(SPRITE/$40)
    // [12] *SPRITES_PTR = (byte)SPRITE/$40 -- _deref_pbuc1=vbuc2 
    lda #SPRITE/$40
    sta SPRITES_PTR
    // [13] phi from init to init::@1 [phi:init->init::@1]
    // [13] phi init::sc#2 = SCREEN [phi:init->init::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z sc
    lda #>SCREEN
    sta.z sc+1
    // init::@1
  __b1:
    // for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++ )
    // [14] if(init::sc#2!=SCREEN+$3e8) goto init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sc+1
    cmp #>SCREEN+$3e8
    bne __b2
    lda.z sc
    cmp #<SCREEN+$3e8
    bne __b2
    // [15] phi from init::@1 to init::@3 [phi:init::@1->init::@3]
    // [15] phi init::i#2 = 0 [phi:init::@1->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [15] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
    // [15] phi init::i#2 = init::i#1 [phi:init::@3->init::@3#0] -- register_copy 
    // init::@3
  __b3:
    // SPRITE[i] = $ff
    // [16] SPRITE[init::i#2] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff
    sta SPRITE,x
    // for(byte i : 0..63)
    // [17] init::i#1 = ++ init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [18] if(init::i#1!=$40) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$40
    bne __b3
    // init::@return
    // }
    // [19] return 
    rts
    // init::@2
  __b2:
    // *sc = ' '
    // [20] *init::sc#2 = ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++ )
    // [21] init::sc#1 = ++ init::sc#2 -- pbuz1=_inc_pbuz1 
    inc.z sc
    bne !+
    inc.z sc+1
  !:
    // [13] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
    // [13] phi init::sc#2 = init::sc#1 [phi:init::@2->init::@1#0] -- register_copy 
    jmp __b1
}
  // anim
anim: {
    .label __5 = $c
    .label __7 = $e
    .label sprite_x = $c
    .label sprite_y = $e
    // if(ypos<0)
    // [22] if(ypos#15>=0) goto anim::@1 -- vwsz1_ge_0_then_la1 
    lda.z ypos+1
    bpl __b1
    // anim::@2
    // xvel = -xvel
    // [23] xvel#16 = - xvel#14 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z xvel
    sta.z xvel
    lda #0
    sbc.z xvel+1
    sta.z xvel+1
    // yvel_init = yvel_init-10
    // [24] yvel_init#2 = yvel_init#15 - $a -- vwsz1=vwsz1_minus_vbsc1 
    lda.z yvel_init
    sec
    sbc #$a
    sta.z yvel_init
    lda.z yvel_init+1
    sbc #>$a
    sta.z yvel_init+1
    // if(yvel_init<-200)
    // [25] if(yvel_init#2>=-$c8) goto anim::@4 -- vwsz1_ge_vwsc1_then_la1 
    lda.z yvel_init
    cmp #<-$c8
    lda.z yvel_init+1
    sbc #>-$c8
    bvc !+
    eor #$80
  !:
    bpl __b3
    // [27] phi from anim::@2 to anim::@3 [phi:anim::@2->anim::@3]
    // [27] phi yvel#3 = $c8 [phi:anim::@2->anim::@3#0] -- vwsz1=vwsc1 
    lda #<$c8
    sta.z yvel
    lda #>$c8
    sta.z yvel+1
    // [26] phi from anim::@2 to anim::@4 [phi:anim::@2->anim::@4]
    // anim::@4
    // [27] phi from anim::@4 to anim::@3 [phi:anim::@4->anim::@3]
    // [27] phi yvel#3 = yvel_init#2 [phi:anim::@4->anim::@3#0] -- register_copy 
    // anim::@3
  __b3:
    // [28] yvel#23 = yvel#3 -- vwsz1=vwsz2 
    lda.z yvel
    sta.z yvel_1
    lda.z yvel+1
    sta.z yvel_1+1
    // [29] phi from anim::@3 to anim::@1 [phi:anim::@3->anim::@1]
    // [29] phi yvel_init#12 = yvel#3 [phi:anim::@3->anim::@1#0] -- register_copy 
    // [29] phi ypos#11 = 0 [phi:anim::@3->anim::@1#1] -- vwsz1=vbsc1 
    lda #<0
    sta.z ypos
    sta.z ypos+1
    // [29] phi xvel#11 = xvel#16 [phi:anim::@3->anim::@1#2] -- register_copy 
    // [29] phi xpos#10 = 0 [phi:anim::@3->anim::@1#3] -- vwsz1=vbsc1 
    sta.z xpos
    sta.z xpos+1
    // [29] phi yvel#10 = yvel#23 [phi:anim::@3->anim::@1#4] -- register_copy 
    // [29] phi from anim to anim::@1 [phi:anim->anim::@1]
    // [29] phi yvel_init#12 = yvel_init#15 [phi:anim->anim::@1#0] -- register_copy 
    // [29] phi ypos#11 = ypos#15 [phi:anim->anim::@1#1] -- register_copy 
    // [29] phi xvel#11 = xvel#14 [phi:anim->anim::@1#2] -- register_copy 
    // [29] phi xpos#10 = xpos#14 [phi:anim->anim::@1#3] -- register_copy 
    // [29] phi yvel#10 = yvel#14 [phi:anim->anim::@1#4] -- register_copy 
    // anim::@1
  __b1:
    // yvel + g
    // [30] yvel#11 = yvel#10 + g -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z yvel_1
    adc #<g
    sta.z yvel_1
    lda.z yvel_1+1
    adc #>g
    sta.z yvel_1+1
    // xpos + xvel
    // [31] xpos#11 = xpos#10 + xvel#11 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z xpos
    clc
    adc.z xvel
    sta.z xpos
    lda.z xpos+1
    adc.z xvel+1
    sta.z xpos+1
    // ypos + yvel
    // [32] ypos#12 = ypos#11 + yvel#11 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z ypos
    clc
    adc.z yvel_1
    sta.z ypos
    lda.z ypos+1
    adc.z yvel_1+1
    sta.z ypos+1
    // xpos>>7
    // [33] anim::$5 = xpos#11 >> 7 -- vwsz1=vwsz2_ror_7 
    lda.z xpos+1
    sta.z __5
    and #$80
    beq !+
    lda #$ff
  !:
    sta.z __5+1
    lda.z xpos
    rol
    rol.z __5
    rol.z __5+1
    // signed word sprite_x = xpos>>7 + 160
    // [34] anim::sprite_x#0 = anim::$5 + $a0 -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z sprite_x
    adc #<$a0
    sta.z sprite_x
    lda.z sprite_x+1
    adc #>$a0
    sta.z sprite_x+1
    // ypos>>5
    // [35] anim::$7 = ypos#12 >> 5 -- vwsz1=vwsz2_ror_5 
    lda.z ypos
    sta.z $ff
    lda.z ypos+1
    sta.z __7
    lda #0
    bit.z ypos+1
    bpl !+
    lda #$ff
  !:
    sta.z __7+1
    rol.z $ff
    rol.z __7
    rol.z __7+1
    rol.z $ff
    rol.z __7
    rol.z __7+1
    rol.z $ff
    rol.z __7
    rol.z __7+1
    // signed word sprite_y = 230 - ypos>>5
    // [36] anim::sprite_y#0 = $e6 - anim::$7 -- vwsz1=vwsc1_minus_vwsz1 
    lda #<$e6
    sec
    sbc.z sprite_y
    sta.z sprite_y
    lda #>$e6
    sbc.z sprite_y+1
    sta.z sprite_y+1
    // SPRITES_XPOS[0] = (byte)sprite_x
    // [37] *SPRITES_XPOS = (byte)anim::sprite_x#0 -- _deref_pbuc1=_byte_vwsz1 
    lda.z sprite_x
    sta SPRITES_XPOS
    // SPRITES_YPOS[0] = (byte)sprite_y
    // [38] *SPRITES_YPOS = (byte)anim::sprite_y#0 -- _deref_pbuc1=_byte_vwsz1 
    lda.z sprite_y
    sta SPRITES_YPOS
    // BYTE1(sprite_x)
    // [39] anim::$9 = byte1  anim::sprite_x#0 -- vbuaa=_byte1_vwsz1 
    lda.z sprite_x+1
    // *SPRITES_XMSB = BYTE1(sprite_x)
    // [40] *SPRITES_XMSB = anim::$9 -- _deref_pbuc1=vbuaa 
    sta SPRITES_XMSB
    // anim::@return
    // }
    // [41] return 
    rts
}
  // File Data

