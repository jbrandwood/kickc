Setting inferred volatile on symbol affected by address-of (byte**) main::pscreen ← &(byte*) main::screen
Identified constant variable (byte**) main::pscreen

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (volatile byte*) main::screen ← (byte*)(number) $400
  *(*((const byte**) main::pscreen)) ← (byte) 'a'
  *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen)
  *(*((const byte**) main::pscreen)) ← (byte) 'b'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(const byte**) main::pscreen = &(volatile byte*) main::screen
(volatile byte*) main::screen loadstore

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (volatile byte*) main::screen ← (byte*) 1024
  [5] *(*((const byte**) main::pscreen)) ← (byte) 'a'
  [6] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen)
  [7] *(*((const byte**) main::pscreen)) ← (byte) 'b'
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(volatile byte*) main::screen loadstore 110.0

Initial phi equivalence classes
Added variable main::screen to live range equivalence class [ main::screen ]
Complete equivalence classes
[ main::screen ]
Allocated zp[2]:2 [ main::screen ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // [4] (volatile byte*) main::screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] *(*((const byte**) main::pscreen)) ← (byte) 'a' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [6] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen) -- _deref_pptc1=_inc__deref_pptc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // [7] *(*((const byte**) main::pscreen)) ← (byte) 'b' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (volatile byte*) main::screen ← (byte*) 1024 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *(*((const byte**) main::pscreen)) ← (byte) 'a' [ ] ( main:2 [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] *(*((const byte**) main::pscreen)) ← (byte) 'b' [ ] ( main:2 [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::screen ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 110: zp[2]:2 [ main::screen ] 
Uplift Scope [] 

Uplifting [main] best 87 combination zp[2]:2 [ main::screen ] 
Uplifting [] best 87 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // [4] (volatile byte*) main::screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] *(*((const byte**) main::pscreen)) ← (byte) 'a' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [6] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen) -- _deref_pptc1=_inc__deref_pptc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // [7] *(*((const byte**) main::pscreen)) ← (byte) 'b' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(const byte**) main::pscreen = &(volatile byte*) main::screen
(volatile byte*) main::screen loadstore zp[2]:2 110.0

zp[2]:2 [ main::screen ]


FINAL ASSEMBLER
Score: 72

  // File Comments
// Tests optimization of constant pointers to pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label pscreen = screen
    .label screen = 2
    // screen = 0x400
    // [4] (volatile byte*) main::screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // **pscreen = 'a'
    // [5] *(*((const byte**) main::pscreen)) ← (byte) 'a' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'a'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // (*pscreen)++;
    // [6] *((const byte**) main::pscreen) ← ++ *((const byte**) main::pscreen) -- _deref_pptc1=_inc__deref_pptc1 
    inc.z pscreen
    bne !+
    inc.z pscreen+1
  !:
    // **pscreen = 'b'
    // [7] *(*((const byte**) main::pscreen)) ← (byte) 'b' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'b'
    ldy.z pscreen
    sty.z $fe
    ldy.z pscreen+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

