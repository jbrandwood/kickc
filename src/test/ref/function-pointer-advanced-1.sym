__constant char HEX[] = "0123456789abcdef"
__constant char INPUT[] = { 2, 1, 3, 4, 6, 5 }
__constant char SIZEOF_CHAR = 1
__constant unsigned int STACK_BASE = $103
void __start()
void cout(char c)
char cout::c
char cout::c#0 // reg byte x 20002.0
char cout::c#1 // reg byte x 20002.0
char cout::c#7 // reg byte x 120003.0
void exec(char (*collect)(char, char))
char (*exec::collect)(char, char)
char (*exec::collect#10)(char, char) // collect zp[2]:3
char exec::i
char exec::i#1 // i zp[1]:5 2002.0
char exec::i#2 // i zp[1]:5 400.4
char exec::out
char exec::out#0 // out zp[1]:6 202.0
char exec::out#1 // out zp[1]:6 500.5
char exec::out#2 // out zp[1]:6 1051.5
char idx
char idx#0 // idx zp[1]:7 5352.761904761905
char idx#27 // idx zp[1]:7 110654.0
char idx#53 // idx zp[1]:7 3701.0
char idx#54 // idx zp[1]:7 67.33333333333333
__loadstore char *line // zp[2]:8 1757.982456140351
void ln()
void main()
char main::i
char main::i#1 // i zp[1]:2 202.0
char main::i#2 // i zp[1]:2 67.33333333333333
__stackcall char max(char a , char b)
__constant char max::OFFSET_STACK_A = 1
__constant char max::OFFSET_STACK_B = 0
__constant char max::OFFSET_STACK_RETURN_1 = 1
char max::a
char max::a#0 // a zp[1]:11 2.0
char max::b
char max::b#0 // reg byte a 3.0
char max::return
char max::return#2 // reg byte a 6.0
char max::return#4 // reg byte a 4.0
__stackcall char min(char a , char b)
__constant char min::OFFSET_STACK_A = 1
__constant char min::OFFSET_STACK_B = 0
__constant char min::OFFSET_STACK_RETURN_1 = 1
char min::a
char min::a#0 // reg byte y 2.0
char min::b
char min::b#0 // reg byte a 3.0
char min::return
char min::return#2 // reg byte a 6.0
char min::return#4 // reg byte a 4.0
void print(char i)
char print::$0 // reg byte a 20002.0
char print::$2 // reg byte a 20002.0
char print::i
char print::i#0 // i zp[1]:6 202.0
char print::i#1 // i zp[1]:6 2002.0
char print::i#2 // i zp[1]:6 5276.0
__stackcall char sum(char a , char b)
__constant char sum::OFFSET_STACK_A = 1
__constant char sum::OFFSET_STACK_B = 0
__constant char sum::OFFSET_STACK_RETURN_1 = 1
char sum::a
char sum::a#0 // a zp[1]:12 2.0
char sum::b
char sum::b#0 // reg byte a 4.0
char sum::return
char sum::return#0 // reg byte a 4.0
__stackcall char xor(char a , char b)
__constant char xor::OFFSET_STACK_A = 1
__constant char xor::OFFSET_STACK_B = 0
__constant char xor::OFFSET_STACK_RETURN_1 = 1
char xor::a
char xor::a#0 // a zp[1]:10 2.0
char xor::b
char xor::b#0 // reg byte a 4.0
char xor::return
char xor::return#0 // reg byte a 4.0

reg byte a [ min::return#2 min::return#4 min::b#0 ]
reg byte a [ max::return#2 max::return#4 max::b#0 ]
zp[1]:2 [ main::i#2 main::i#1 ]
zp[2]:3 [ exec::collect#10 ]
zp[1]:5 [ exec::i#2 exec::i#1 ]
zp[1]:6 [ exec::out#2 exec::out#0 exec::out#1 print::i#2 print::i#1 print::i#0 ]
reg byte x [ cout::c#7 cout::c#0 cout::c#1 ]
zp[1]:7 [ idx#27 idx#53 idx#54 idx#0 ]
zp[2]:8 [ line ]
zp[1]:10 [ xor::a#0 ]
reg byte a [ xor::b#0 ]
reg byte a [ xor::return#0 ]
reg byte y [ min::a#0 ]
zp[1]:11 [ max::a#0 ]
zp[1]:12 [ sum::a#0 ]
reg byte a [ sum::b#0 ]
reg byte a [ sum::return#0 ]
reg byte a [ print::$0 ]
reg byte a [ print::$2 ]
