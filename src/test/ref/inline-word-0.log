
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const word*) main::screen + (number~) main::$0) ← (const word) main::w
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(number~) main::$0
(label) main::@return
(const word*) main::screen = (word*)(number) $400
(const word) main::w = (byte) 2*(word) $100+(byte) 1

Adding number conversion cast (unumber) 0 in (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [0] (byte~) main::$0 ← (byte) 0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = 0*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::screen in [1] *((const word*) main::screen + (const byte) main::$0) ← (const word) main::w
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$0
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const word*) main::screen) ← (const word) main::w
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests minimal inline word
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const w = 2*$100+1
    .label screen = $400
    // [0] *((const word*) main::screen) ← (const word) main::w -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const word*) main::screen) ← (const word) main::w [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests minimal inline word
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const w = 2*$100+1
    .label screen = $400
    // [0] *((const word*) main::screen) ← (const word) main::w -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const word*) main::screen = (word*) 1024
(const word) main::w = (byte) 2*(word) $100+(byte) 1



FINAL ASSEMBLER
Score: 18

  // File Comments
// Tests minimal inline word
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const w = 2*$100+1
    .label screen = $400
    // screen[0] = w
    // [0] *((const word*) main::screen) ← (const word) main::w -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

