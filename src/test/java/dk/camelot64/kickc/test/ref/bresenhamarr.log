PARSING /Users/jespergravgaard/c64/tmp/kickc/src/test/java/dk/camelot64/kickc/test/bresenhamarr.kc

void main() {
  byte STAR = 81;
  byte[40*25] screen = $0400;
  byte x0 = 0;
  byte y0 = 0;
  byte x1 = 39;
  byte y1 = 24;
  byte xd = x1-x0;
  byte yd = y1-y0;
  byte x = x0;
  byte y = y0;
  byte e = yd/2;
  word idx = x+y*40;
  do  {
      screen[idx] = STAR;
      x = x + 1;
      idx = idx + 1;
      e = e+yd;
      if(xd<e) {
          y = y+1;
          idx  = idx + 40;
          e = e - xd;
      }
  } while (x<(x1+1));
}

STATEMENTS
proc (void()) main()
  (byte) main::STAR ← (byte/signed byte/word/signed word) 81
  (byte[1000]) main::screen ← (word/signed word) 1024
  (byte) main::x0 ← (byte/signed byte/word/signed word) 0
  (byte) main::y0 ← (byte/signed byte/word/signed word) 0
  (byte) main::x1 ← (byte/signed byte/word/signed word) 39
  (byte) main::y1 ← (byte/signed byte/word/signed word) 24
  (byte/signed byte/word/signed word~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte/signed byte/word/signed word~) main::$0
  (byte/signed byte/word/signed word~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte/signed byte/word/signed word~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte/signed byte/word/signed word) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte/signed byte/word/signed word) 40
  (byte/word~) main::$4 ← (byte) main::x + (byte~) main::$3
  (word) main::idx ← (byte/word~) main::$4
main::@1:
  *((byte[1000]) main::screen + (word) main::idx) ← (byte) main::STAR
  (byte/word~) main::$5 ← (byte) main::x + (byte/signed byte/word/signed word) 1
  (byte) main::x ← (byte/word~) main::$5
  (word~) main::$6 ← (word) main::idx + (byte/signed byte/word/signed word) 1
  (word) main::idx ← (word~) main::$6
  (byte/word~) main::$7 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte/word~) main::$7
  (boolean~) main::$8 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  (byte/word~) main::$10 ← (byte) main::y + (byte/signed byte/word/signed word) 1
  (byte) main::y ← (byte/word~) main::$10
  (word~) main::$11 ← (word) main::idx + (byte/signed byte/word/signed word) 40
  (word) main::idx ← (word~) main::$11
  (byte/signed byte/word/signed word~) main::$12 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte/signed byte/word/signed word~) main::$12
main::@2:
  (byte/word~) main::$13 ← (byte) main::x1 + (byte/signed byte/word/signed word) 1
  (boolean~) main::$14 ← (byte) main::x < (byte/word~) main::$13
  if((boolean~) main::$14) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(byte/signed byte/word/signed word~) main::$0
(byte/signed byte/word/signed word~) main::$1
(byte/word~) main::$10
(word~) main::$11
(byte/signed byte/word/signed word~) main::$12
(byte/word~) main::$13
(boolean~) main::$14
(byte~) main::$2
(byte~) main::$3
(byte/word~) main::$4
(byte/word~) main::$5
(word~) main::$6
(byte/word~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::STAR
(byte) main::e
(word) main::idx
(byte[1000]) main::screen
(byte) main::x
(byte) main::x0
(byte) main::x1
(byte) main::xd
(byte) main::y
(byte) main::y0
(byte) main::y1
(byte) main::yd

Promoting word/signed word to byte[1000] in main::screen ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::STAR ← (byte/signed byte/word/signed word) 81
  (byte[1000]) main::screen ← ((byte*)) (word/signed word) 1024
  (byte) main::x0 ← (byte/signed byte/word/signed word) 0
  (byte) main::y0 ← (byte/signed byte/word/signed word) 0
  (byte) main::x1 ← (byte/signed byte/word/signed word) 39
  (byte) main::y1 ← (byte/signed byte/word/signed word) 24
  (byte/signed byte/word/signed word~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte/signed byte/word/signed word~) main::$0
  (byte/signed byte/word/signed word~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte/signed byte/word/signed word~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte/signed byte/word/signed word) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte/signed byte/word/signed word) 40
  (byte/word~) main::$4 ← (byte) main::x + (byte~) main::$3
  (word) main::idx ← (byte/word~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte[1000]) main::screen + (word) main::idx) ← (byte) main::STAR
  (byte/word~) main::$5 ← (byte) main::x + (byte/signed byte/word/signed word) 1
  (byte) main::x ← (byte/word~) main::$5
  (word~) main::$6 ← (word) main::idx + (byte/signed byte/word/signed word) 1
  (word) main::idx ← (word~) main::$6
  (byte/word~) main::$7 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte/word~) main::$7
  (boolean~) main::$8 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte/word~) main::$13 ← (byte) main::x1 + (byte/signed byte/word/signed word) 1
  (boolean~) main::$14 ← (byte) main::x < (byte/word~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte/word~) main::$10 ← (byte) main::y + (byte/signed byte/word/signed word) 1
  (byte) main::y ← (byte/word~) main::$10
  (word~) main::$11 ← (word) main::idx + (byte/signed byte/word/signed word) 40
  (word) main::idx ← (word~) main::$11
  (byte/signed byte/word/signed word~) main::$12 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte/signed byte/word/signed word~) main::$12
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte[1000]) main::screen#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::x0#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::y0#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::x1#0 ← (byte/signed byte/word/signed word) 39
  (byte) main::y1#0 ← (byte/signed byte/word/signed word) 24
  (byte/signed byte/word/signed word~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte/signed byte/word/signed word~) main::$0
  (byte/signed byte/word/signed word~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte/signed byte/word/signed word~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte/signed byte/word/signed word) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte/signed byte/word/signed word) 40
  (byte/word~) main::$4 ← (byte) main::x#0 + (byte~) main::$3
  (word) main::idx#0 ← (byte/word~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#2 )
  *((byte[1000]) main::screen#0 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte/word~) main::$5 ← (byte) main::x#2 + (byte/signed byte/word/signed word) 1
  (byte) main::x#1 ← (byte/word~) main::$5
  (word~) main::$6 ← (word) main::idx#3 + (byte/signed byte/word/signed word) 1
  (word) main::idx#1 ← (word~) main::$6
  (byte/word~) main::$7 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte/word~) main::$7
  (boolean~) main::$8 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte) main::STAR#2 ← phi( main::@1/(byte) main::STAR#1 main::@3/(byte) main::STAR#3 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte/word~) main::$13 ← (byte) main::x1#1 + (byte/signed byte/word/signed word) 1
  (boolean~) main::$14 ← (byte) main::x#3 < (byte/word~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte) main::STAR#3 ← phi( main::@1/(byte) main::STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (word) main::idx#4 ← phi( main::@1/(word) main::idx#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte/word~) main::$10 ← (byte) main::y#2 + (byte/signed byte/word/signed word) 1
  (byte) main::y#1 ← (byte/word~) main::$10
  (word~) main::$11 ← (word) main::idx#4 + (byte/signed byte/word/signed word) 40
  (word) main::idx#2 ← (word~) main::$11
  (byte/signed byte/word/signed word~) main::$12 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte/signed byte/word/signed word~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte/signed byte/word/signed word~) main::$0
(byte/signed byte/word/signed word~) main::$1
(byte/word~) main::$10
(word~) main::$11
(byte/signed byte/word/signed word~) main::$12
(byte/word~) main::$13
(boolean~) main::$14
(byte~) main::$2
(byte~) main::$3
(byte/word~) main::$4
(byte/word~) main::$5
(word~) main::$6
(byte/word~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::STAR
(byte) main::STAR#0
(byte) main::STAR#1
(byte) main::STAR#2
(byte) main::STAR#3
(byte) main::e
(byte) main::e#0
(byte) main::e#1
(byte) main::e#2
(byte) main::e#3
(byte) main::e#4
(byte) main::e#5
(word) main::idx
(word) main::idx#0
(word) main::idx#1
(word) main::idx#2
(word) main::idx#3
(word) main::idx#4
(word) main::idx#5
(byte[1000]) main::screen
(byte[1000]) main::screen#0
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x#4
(byte) main::x0
(byte) main::x0#0
(byte) main::x1
(byte) main::x1#0
(byte) main::x1#1
(byte) main::x1#2
(byte) main::x1#3
(byte) main::xd
(byte) main::xd#0
(byte) main::xd#1
(byte) main::xd#2
(byte) main::xd#3
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::y0
(byte) main::y0#0
(byte) main::y1
(byte) main::y1#0
(byte) main::yd
(byte) main::yd#0
(byte) main::yd#1
(byte) main::yd#2
(byte) main::yd#3

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (boolean~) main::$9 ← (byte) main::xd#1 >= (byte) main::e#1 from (boolean~) main::$8 ← (byte) main::xd#1 < (byte) main::e#1
Succesful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::xd#0 = (byte/signed byte/word/signed word~) main::$0 
Alias (byte) main::yd#0 = (byte/signed byte/word/signed word~) main::$1 
Alias (byte) main::x#0 = (byte) main::x0#0 
Alias (byte) main::y#0 = (byte) main::y0#0 
Alias (byte) main::e#0 = (byte~) main::$2 
Alias (word) main::idx#0 = (byte/word~) main::$4 
Alias (byte) main::x#1 = (byte/word~) main::$5 (byte) main::x#4 
Alias (word) main::idx#1 = (word~) main::$6 (word) main::idx#4 
Alias (byte) main::e#1 = (byte/word~) main::$7 (byte) main::e#4 
Alias (byte) main::y#2 = (byte) main::y#3 
Alias (byte) main::xd#1 = (byte) main::xd#2 
Alias (byte) main::x1#2 = (byte) main::x1#3 
Alias (byte) main::STAR#1 = (byte) main::STAR#3 
Alias (byte) main::yd#1 = (byte) main::yd#3 
Alias (byte) main::y#1 = (byte/word~) main::$10 
Alias (word) main::idx#2 = (word~) main::$11 
Alias (byte) main::e#2 = (byte/signed byte/word/signed word~) main::$12 
Succesful SSA optimization Pass2AliasElimination
Alias (byte) main::x1#1 = (byte) main::x1#2 
Alias (byte) main::x#1 = (byte) main::x#3 
Alias (byte) main::STAR#1 = (byte) main::STAR#2 
Alias (byte) main::yd#1 = (byte) main::yd#2 
Alias (byte) main::xd#1 = (byte) main::xd#3 
Succesful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) main::STAR#1
Self Phi Eliminated (byte) main::yd#1
Self Phi Eliminated (byte) main::xd#1
Self Phi Eliminated (byte) main::x1#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) main::STAR#1 (byte) main::STAR#0
Redundant Phi (byte) main::yd#1 (byte) main::yd#0
Redundant Phi (byte) main::xd#1 (byte) main::xd#0
Redundant Phi (byte) main::x1#1 (byte) main::x1#0
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) main::$9 if((byte) main::xd#0>=(byte) main::e#1) goto main::@2
Simple Condition (boolean~) main::$14 if((byte) main::x#1<(byte/word~) main::$13) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::STAR#0 = 81
Constant (const byte*) main::screen#0 = ((byte*))1024
Constant (const byte) main::x#0 = 0
Constant (const byte) main::y#0 = 0
Constant (const byte) main::x1#0 = 39
Constant (const byte) main::y1#0 = 24
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::xd#0 = main::x1#0-main::x#0
Constant (const byte) main::yd#0 = main::y1#0-main::y#0
Constant (const byte) main::$3 = main::y#0*40
Constant (const byte/word) main::$13 = main::x1#0+1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::e#0 = main::yd#0/2
Constant (const word) main::idx#0 = main::x#0+main::$3
Succesful SSA optimization Pass2ConstantIdentification
Multiple usages for variable. Not optimizing sub-constant (byte) main::y#2
Multiple usages for variable. Not optimizing sub-constant (word) main::idx#1
Multiple usages for variable. Not optimizing sub-constant (byte) main::y#2
Multiple usages for variable. Not optimizing sub-constant (word) main::idx#1
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const word) main::idx#0
Inlining constant with var siblings (const word) main::idx#0
Inlining constant with var siblings (const word) main::idx#0
Inlining constant with var siblings (const word) main::idx#0
Constant inlined main::$13 = (const byte) main::x1#0+(byte/signed byte/word/signed word) 1
Constant inlined main::idx#0 = (byte/signed byte/word/signed word) 0+(byte/signed byte/word/signed word) 0*(byte/signed byte/word/signed word) 40
Constant inlined main::$3 = (byte/signed byte/word/signed word) 0*(byte/signed byte/word/signed word) 40
Constant inlined main::x#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::y#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::e#0 = (const byte) main::yd#0/(byte/signed byte/word/signed word) 2
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 7 initial phi equivalence classes
Coalesced [14] main::idx#8 ← main::idx#2
Coalesced [15] main::e#8 ← main::e#2
Coalesced [16] main::y#7 ← main::y#1
Coalesced [20] main::idx#6 ← main::idx#5
Coalesced [21] main::x#5 ← main::x#1
Coalesced [22] main::e#6 ← main::e#5
Coalesced [23] main::y#5 ← main::y#4
Coalesced [24] main::idx#7 ← main::idx#1
Coalesced [25] main::e#7 ← main::e#1
Coalesced (already) [26] main::y#6 ← main::y#2
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::y#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::y#4 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] )
  [5] (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte/signed byte/word/signed word) 2 main::@2/(byte) main::e#5 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] )
  [5] (byte) main::x#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::x#1 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] )
  [5] (word) main::idx#3 ← phi( main/(byte/signed byte/word/signed word) 0+(byte/signed byte/word/signed word) 0*(byte/signed byte/word/signed word) 40 main::@2/(word) main::idx#5 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] )
  [6] *((const byte*) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] )
  [7] (byte) main::x#1 ← (byte) main::x#2 + (byte/signed byte/word/signed word) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ( main:2 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] )
  [8] (word) main::idx#1 ← (word) main::idx#3 + (byte/signed byte/word/signed word) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ( main:2 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] )
  [9] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] )
  [10] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@1
  [11] (byte) main::y#1 ← (byte) main::y#2 + (byte/signed byte/word/signed word) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ( main:2 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] )
  [12] (word) main::idx#2 ← (word) main::idx#1 + (byte/signed byte/word/signed word) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ( main:2 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] )
  [13] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ( main:2 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [14] (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 ) [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] )
  [14] (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 ) [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] )
  [14] (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 ) [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] )
  [15] if((byte) main::x#1<(const byte) main::x1#0+(byte/signed byte/word/signed word) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return  [ ] ( main:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@3 dominated by  @1 @begin main::@1 main main::@3 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@return dominated by  main::@return @1 @begin main::@1 main::@2 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::STAR
(byte) main::e
(byte) main::e#1 11.0
(byte) main::e#2 22.0
(byte) main::e#3 5.5
(byte) main::e#5 16.5
(word) main::idx
(word) main::idx#1 8.25
(word) main::idx#2 11.0
(word) main::idx#3 11.0
(word) main::idx#5 16.5
(byte[1000]) main::screen
(byte) main::x
(byte) main::x#1 3.666666666666667
(byte) main::x#2 11.0
(byte) main::x0
(byte) main::x1
(byte) main::xd
(byte) main::y
(byte) main::y#1 7.333333333333333
(byte) main::y#2 5.5
(byte) main::y#4 16.5
(byte) main::y0
(byte) main::y1
(byte) main::yd

Initial phi equivalence classes
[ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Complete equivalence classes
[ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Allocated zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
Allocated zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Allocated zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Allocated zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label x = 4
    .label idx = 2
    .label e = 5
    .label y = 6
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::y#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG12 [5] phi (byte) main::e#3 = (const byte) main::yd#0/(byte/signed byte/word/signed word) 2 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #yd/2
    sta e
  //SEG13 [5] phi (byte) main::x#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG14 [5] phi (word) main::idx#3 = (byte/signed byte/word/signed word) 0+(byte/signed byte/word/signed word) 0*(byte/signed byte/word/signed word) 40 [phi:main->main::@1#3] -- vwuz1=vbuc1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
    jmp b1
  //SEG15 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG16 [5] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG17 [5] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG18 [5] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG19 [5] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
    jmp b1
  //SEG20 main::@1
  b1:
  //SEG21 [6] *((const byte*) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ) -- pbuc1_derefidx_vwuz1=vbuc2 
    lda #<screen
    clc
    adc idx
    sta !++1
    lda #>screen
    adc idx+1
    sta !++2
    lda #STAR
  !:
    sta screen
  //SEG22 [7] (byte) main::x#1 ← (byte) main::x#2 + (byte/signed byte/word/signed word) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ( main:2 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc x
  //SEG23 [8] (word) main::idx#1 ← (word) main::idx#3 + (byte/signed byte/word/signed word) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ( main:2 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ) -- vwuz1=vwuz1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG24 [9] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda e
    clc
    adc #yd
    sta e
  //SEG25 [10] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) -- vbuc1_ge_vbuz1_then_la1 
    lda #xd
    cmp e
    bcs b2_from_b1
    jmp b3
  //SEG26 main::@3
  b3:
  //SEG27 [11] (byte) main::y#1 ← (byte) main::y#2 + (byte/signed byte/word/signed word) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ( main:2 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc y
  //SEG28 [12] (word) main::idx#2 ← (word) main::idx#1 + (byte/signed byte/word/signed word) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ( main:2 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG29 [13] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ( main:2 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ) -- vbuz1=vbuz1_minus_vbuc1 
    lda e
    sec
    sbc #xd
    sta e
  //SEG30 [14] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG31 [14] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG32 [14] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG33 [14] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
    jmp b2
  //SEG34 main::@2
  b2:
  //SEG35 [15] if((byte) main::x#1<(const byte) main::x1#0+(byte/signed byte/word/signed word) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ) -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #x1+1
    bcc b1_from_b2
    jmp breturn
  //SEG36 main::@return
  breturn:
  //SEG37 [16] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const byte*) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Statement [9] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) always clobbers reg byte a 
Statement [12] (word) main::idx#2 ← (word) main::idx#1 + (byte/signed byte/word/signed word) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ( main:2 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ) always clobbers reg byte a 
Statement [13] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ( main:2 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ) always clobbers reg byte a 
Statement [9] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) always clobbers reg byte a 
Statement [12] (word) main::idx#2 ← (word) main::idx#1 + (byte/signed byte/word/signed word) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ( main:2 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ) always clobbers reg byte a 
Statement [13] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ( main:2 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ main::x#2 main::x#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55: zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] 46.75: zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] 29.33: zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] 14.67: zp ZP_BYTE:4 [ main::x#2 main::x#1 ] 
Uplift Scope [] 

Uplifting [main] best 1278 combination reg byte y [ main::e#3 main::e#5 main::e#1 main::e#2 ] zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] reg byte x [ main::x#2 main::x#1 ] 
Uplifting [] best 1278 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Uplifting [main] best 1278 combination zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] 
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:4 [ main::y#2 main::y#4 main::y#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::y#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG12 [5] phi (byte) main::e#3 = (const byte) main::yd#0/(byte/signed byte/word/signed word) 2 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #yd/2
  //SEG13 [5] phi (byte) main::x#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG14 [5] phi (word) main::idx#3 = (byte/signed byte/word/signed word) 0+(byte/signed byte/word/signed word) 0*(byte/signed byte/word/signed word) 40 [phi:main->main::@1#3] -- vwuz1=vbuc1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
    jmp b1
  //SEG15 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG16 [5] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG17 [5] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG18 [5] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG19 [5] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
    jmp b1
  //SEG20 main::@1
  b1:
  //SEG21 [6] *((const byte*) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ) -- pbuc1_derefidx_vwuz1=vbuc2 
    lda #<screen
    clc
    adc idx
    sta !++1
    lda #>screen
    adc idx+1
    sta !++2
    lda #STAR
  !:
    sta screen
  //SEG22 [7] (byte) main::x#1 ← (byte) main::x#2 + (byte/signed byte/word/signed word) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ( main:2 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ) -- vbuxx=vbuxx_plus_1 
    inx
  //SEG23 [8] (word) main::idx#1 ← (word) main::idx#3 + (byte/signed byte/word/signed word) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ( main:2 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ) -- vwuz1=vwuz1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG24 [9] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) -- vbuyy=vbuyy_plus_vbuc1 
    tya
    clc
    adc #yd
    tay
  //SEG25 [10] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) -- vbuc1_ge_vbuyy_then_la1 
    cpy #xd
    bcc b2_from_b1
    jmp b3
  //SEG26 main::@3
  b3:
  //SEG27 [11] (byte) main::y#1 ← (byte) main::y#2 + (byte/signed byte/word/signed word) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ( main:2 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc y
  //SEG28 [12] (word) main::idx#2 ← (word) main::idx#1 + (byte/signed byte/word/signed word) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ( main:2 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG29 [13] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ( main:2 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ) -- vbuyy=vbuyy_minus_vbuc1 
    tya
    sec
    sbc #xd
    tay
  //SEG30 [14] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG31 [14] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG32 [14] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG33 [14] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
    jmp b2
  //SEG34 main::@2
  b2:
  //SEG35 [15] if((byte) main::x#1<(const byte) main::x1#0+(byte/signed byte/word/signed word) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ) -- vbuxx_lt_vbuc1_then_la1 
    cpx #x1+1
    bcc b1_from_b2
    jmp breturn
  //SEG36 main::@return
  breturn:
  //SEG37 [16] return  [ ] ( main:2 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction lda #0 with TXA
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::STAR
(const byte) main::STAR#0 STAR = (byte/signed byte/word/signed word) 81
(byte) main::e
(byte) main::e#1 reg byte y 11.0
(byte) main::e#2 reg byte y 22.0
(byte) main::e#3 reg byte y 5.5
(byte) main::e#5 reg byte y 16.5
(word) main::idx
(word) main::idx#1 idx zp ZP_WORD:2 8.25
(word) main::idx#2 idx zp ZP_WORD:2 11.0
(word) main::idx#3 idx zp ZP_WORD:2 11.0
(word) main::idx#5 idx zp ZP_WORD:2 16.5
(byte[1000]) main::screen
(const byte*) main::screen#0 screen = ((byte*))(word/signed word) 1024
(byte) main::x
(byte) main::x#1 reg byte x 3.666666666666667
(byte) main::x#2 reg byte x 11.0
(byte) main::x0
(byte) main::x1
(const byte) main::x1#0 x1 = (byte/signed byte/word/signed word) 39
(byte) main::xd
(const byte) main::xd#0 xd = (const byte) main::x1#0-(byte/signed byte/word/signed word) 0
(byte) main::y
(byte) main::y#1 y zp ZP_BYTE:4 7.333333333333333
(byte) main::y#2 y zp ZP_BYTE:4 5.5
(byte) main::y#4 y zp ZP_BYTE:4 16.5
(byte) main::y0
(byte) main::y1
(const byte) main::y1#0 y1 = (byte/signed byte/word/signed word) 24
(byte) main::yd
(const byte) main::yd#0 yd = (const byte) main::y1#0-(byte/signed byte/word/signed word) 0

zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
reg byte x [ main::x#2 main::x#1 ]
reg byte y [ main::e#3 main::e#5 main::e#1 main::e#2 ]
zp ZP_BYTE:4 [ main::y#2 main::y#4 main::y#1 ]


FINAL ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::y#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG12 [5] phi (byte) main::e#3 = (const byte) main::yd#0/(byte/signed byte/word/signed word) 2 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #yd/2
  //SEG13 [5] phi (byte) main::x#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    tax
  //SEG14 [5] phi (word) main::idx#3 = (byte/signed byte/word/signed word) 0+(byte/signed byte/word/signed word) 0*(byte/signed byte/word/signed word) 40 [phi:main->main::@1#3] -- vwuz1=vbuc1 
    lda #0+0*$28
    sta idx
    txa
    sta idx+1
  //SEG15 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG16 [5] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG17 [5] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG18 [5] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG19 [5] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG20 main::@1
  b1:
  //SEG21 [6] *((const byte*) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ( main:2 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] ) -- pbuc1_derefidx_vwuz1=vbuc2 
    lda #<screen
    clc
    adc idx
    sta !++1
    lda #>screen
    adc idx+1
    sta !++2
    lda #STAR
  !:
    sta screen
  //SEG22 [7] (byte) main::x#1 ← (byte) main::x#2 + (byte/signed byte/word/signed word) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ( main:2 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] ) -- vbuxx=vbuxx_plus_1 
    inx
  //SEG23 [8] (word) main::idx#1 ← (word) main::idx#3 + (byte/signed byte/word/signed word) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ( main:2 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] ) -- vwuz1=vwuz1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG24 [9] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) -- vbuyy=vbuyy_plus_vbuc1 
    tya
    clc
    adc #yd
    tay
  //SEG25 [10] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ( main:2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] ) -- vbuc1_ge_vbuyy_then_la1 
    cpy #xd
    bcc b2
  //SEG26 main::@3
  //SEG27 [11] (byte) main::y#1 ← (byte) main::y#2 + (byte/signed byte/word/signed word) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ( main:2 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc y
  //SEG28 [12] (word) main::idx#2 ← (word) main::idx#1 + (byte/signed byte/word/signed word) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ( main:2 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG29 [13] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ( main:2 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] ) -- vbuyy=vbuyy_minus_vbuc1 
    tya
    sec
    sbc #xd
    tay
  //SEG30 [14] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG31 [14] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG32 [14] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG33 [14] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG34 main::@2
  b2:
  //SEG35 [15] if((byte) main::x#1<(const byte) main::x1#0+(byte/signed byte/word/signed word) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ( main:2 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] ) -- vbuxx_lt_vbuc1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG36 main::@return
  //SEG37 [16] return  [ ] ( main:2 [ ] )
    rts
}

