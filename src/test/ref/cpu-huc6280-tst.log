
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { tst#1+2,$3+4 tst#1+2*3,$7654/2 tst#1+2,$3+4,x tst#1+2*3,$7654/2,x !: rts  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()

Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { tst#1+2,$3+4 tst#1+2*3,$7654/2 tst#1+2,$3+4,x tst#1+2*3,$7654/2,x !: rts  }
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the HUC6280 instructions
  // Upstart
.cpu _huc6280
  // Commodore 64 PRG executable file
.file [name="cpu-huc6280-tst.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // asm { tst#1+2,$3+4 tst#1+2*3,$7654/2 tst#1+2,$3+4,x tst#1+2*3,$7654/2,x !: rts  }
    tst.z #1+2,3+4
    tst #1+2*3,$7654/2
    tst.z #1+2,3+4,x
    tst #1+2*3,$7654/2,x
  !:
    rts
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
void main()



FINAL ASSEMBLER
Score: 36

  // File Comments
// Tests the HUC6280 instructions
  // Upstart
.cpu _huc6280
  // Commodore 64 PRG executable file
.file [name="cpu-huc6280-tst.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // asm
    // asm { tst#1+2,$3+4 tst#1+2*3,$7654/2 tst#1+2,$3+4,x tst#1+2*3,$7654/2,x !: rts  }
    tst.z #1+2,3+4
    tst #1+2*3,$7654/2
    tst.z #1+2,3+4,x
    tst #1+2*3,$7654/2,x
  !:
    rts
    // main::@return
    // }
    // [1] return 
}
  // File Data

