const nomodify byte* BOB_CHARSET = (byte*) 8192
const nomodify byte* BOB_SCREEN = (byte*) 10240
const nomodify byte BOB_SHIFTS_X = 4
const nomodify byte BOB_SHIFTS_Y = 8
const nomodify byte BOB_SUBTABLE_SIZE = BOB_SHIFTS_X*BOB_SHIFTS_Y
const byte* BOB_TABLES[9*8*4]  = { fill( 9*8*4, 0) }
const nomodify byte* BORDER_COLOR = (byte*) 53280
const nomodify byte* CHARSET_BASIC = (byte*) 4096
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const signed byte* COS = SIN+$40
const nomodify byte* D018 = (byte*) 53272
const nomodify byte KEY_SPACE = $3c
const word* MUL40[$20]  = { fill( $20, 0) }
const nomodify byte NUM_BOBS = $14
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const to_nomodify byte* PROTO_BOB[3*3*8]  = kickasm {{ .var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* RASTER = (byte*) 53266
const byte** RENDERBOB_CLEANUP[NUM_BOBS]  = { fill( NUM_BOBS, 0) }
const nomodify byte* SCREEN_BASIC = (byte*) 1024
const signed byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
const byte SIZEOF_POINTER = 2
byte bobCharsetFindOrAddGlyph(byte* bobCharsetFindOrAddGlyph::bob_glyph)
byte* bobCharsetFindOrAddGlyph::bob_glyph
byte* bobCharsetFindOrAddGlyph::bob_glyph#1 bob_glyph zp[2]:19 20002.0
byte* bobCharsetFindOrAddGlyph::bob_glyph#10 bob_glyph zp[2]:19 7.333340002E8
byte bobCharsetFindOrAddGlyph::found
byte bobCharsetFindOrAddGlyph::found#2 reg byte a 1.000000001E9
byte* bobCharsetFindOrAddGlyph::glyph_cursor
byte* bobCharsetFindOrAddGlyph::glyph_cursor#1 glyph_cursor zp[2]:10 2.000000002E9
byte* bobCharsetFindOrAddGlyph::glyph_cursor#11 glyph_cursor zp[2]:10 1.0000000003076923E9
byte bobCharsetFindOrAddGlyph::glyph_id
byte bobCharsetFindOrAddGlyph::glyph_id#1 reg byte x 1.000000001E9
byte bobCharsetFindOrAddGlyph::glyph_id#11 reg byte x 1.8750062525E8
byte bobCharsetFindOrAddGlyph::i
byte bobCharsetFindOrAddGlyph::i#1 reg byte y 2.0000000002E10
byte bobCharsetFindOrAddGlyph::i#2 reg byte y 1.6666666668333332E10
byte bobCharsetFindOrAddGlyph::i1
byte bobCharsetFindOrAddGlyph::i1#1 reg byte y 2.000000002E9
byte bobCharsetFindOrAddGlyph::i1#2 reg byte y 1.6666666683333335E9
byte bobCharsetFindOrAddGlyph::return
byte bobCharsetFindOrAddGlyph::return#1 reg byte a 20002.0
byte bob_charset_next_id
byte bob_charset_next_id#15 bob_charset_next_id zp[1]:9 106.5
byte bob_charset_next_id#17 bob_charset_next_id zp[1]:9 9.091909218181819E7
byte bob_charset_next_id#23 bob_charset_next_id zp[1]:9 2750.5
byte bob_charset_next_id#25 bob_charset_next_id zp[1]:9 1.3334066693333334E8
byte bob_charset_next_id#32 bob_charset_next_id zp[1]:9 367.33333333333337
byte bob_charset_next_id#7 bob_charset_next_id zp[1]:9 200002.0
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 reg byte a 202.0
byte keyboard_key_pressed::colidx
const byte keyboard_key_pressed::colidx#0 colidx = KEY_SPACE&7
byte keyboard_key_pressed::key
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 reg byte a 30.75
byte keyboard_key_pressed::return#2 reg byte a 22.0
byte keyboard_key_pressed::return#3 reg byte a 22.0
byte keyboard_key_pressed::rowidx
const byte keyboard_key_pressed::rowidx#0 rowidx = KEY_SPACE>>3
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 367.33333333333337
byte keyboard_matrix_read::return#2 reg byte a 202.0
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
signed word~ main::$10 zp[2]:10 202.0
signed word~ main::$12 zp[2]:10 202.0
signed word~ main::$13 zp[2]:10 202.0
byte~ main::$19 reg byte a 22.0
byte~ main::$21 reg byte a 22.0
byte main::a
byte main::a#1 a zp[1]:2 28.857142857142858
byte main::a#2 a zp[1]:2 25.9375
byte main::a#6 a zp[1]:2 22.0
byte main::angle
byte main::angle#1 angle zp[1]:5 3.6666666666666665
byte main::angle#8 angle zp[1]:5 1.1785714285714286
byte main::i
byte main::i#1 i zp[1]:3 151.5
byte main::i#2 i zp[1]:3 9.619047619047619
signed byte main::r
signed byte main::r#1 r zp[1]:9 33.666666666666664
signed byte main::r#2 r zp[1]:9 23.764705882352942
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)BOB_SCREEN&$3fff*4|>(word)BOB_CHARSET/4&$f
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
const byte main::toD0182_return#0 toD0182_return = >(word)SCREEN_BASIC&$3fff*4|>(word)CHARSET_BASIC/4&$f
byte* main::toD0182_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
const byte main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = 3
byte* main::vicSelectGfxBank2_gfx
byte* main::vicSelectGfxBank2_toDd001_gfx
byte main::vicSelectGfxBank2_toDd001_return
const byte main::vicSelectGfxBank2_toDd001_return#0 vicSelectGfxBank2_toDd001_return = 3
signed word main::x
signed word main::x#0 x zp[2]:12 18.363636363636363
signed word main::y
signed word main::y#0 y zp[2]:10 40.4
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = 0
byte* memset::dst
byte* memset::dst#1 dst zp[2]:10 202.0
byte* memset::dst#2 dst zp[2]:10 134.66666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)BOB_SCREEN
signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
signed byte mulf8s::a
signed byte mulf8s::a#0 reg byte a 101.0
signed byte mulf8s::a#1 reg byte a 101.0
signed byte mulf8s::b
signed byte mulf8s::b#0 reg byte x 202.0
signed byte mulf8s::b#1 reg byte x 202.0
signed byte mulf8s::b#2 reg byte x 401.0
signed byte mulf8s::mulf8s_prepare1_a
signed byte mulf8s::mulf8s_prepare1_a#0 reg byte a 202.0
signed word mulf8s::return
signed word mulf8s::return#0 return zp[2]:10 300.75
signed word mulf8s::return#2 return zp[2]:10 202.0
signed word mulf8s::return#3 return zp[2]:10 202.0
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 reg byte a 20002.0
byte~ mulf8s_prepared::$12 reg byte a 20002.0
byte~ mulf8s_prepared::$6 reg byte a 20002.0
byte~ mulf8s_prepared::$9 reg byte a 20002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 b zp[1]:18 1100.2
word mulf8s_prepared::m
word mulf8s_prepared::m#0 m zp[2]:10 10001.0
word mulf8s_prepared::m#1 m zp[2]:10 20002.0
word mulf8s_prepared::m#2 m zp[2]:10 20002.0
word mulf8s_prepared::m#4 m zp[2]:10 6667.333333333333
word mulf8s_prepared::m#5 m zp[2]:10 12501.25
const nomodify signed byte* mulf8s_prepared::memA = (signed byte*) 253
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#0 reg byte a 11002.0
const nomodify byte* mulf8u_prepare::memA = (byte*) 253
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 reg byte a 110002.0
const nomodify byte* mulf8u_prepared::memB = (byte*) 255
const nomodify byte* mulf8u_prepared::resL = (byte*) 254
word mulf8u_prepared::return
word mulf8u_prepared::return#0 return zp[2]:10 36667.33333333333
word mulf8u_prepared::return#2 return zp[2]:10 20002.0
void mulf_init()
byte~ mulf_init::$1 reg byte a 202.0
byte~ mulf_init::$4 reg byte a 202.0
byte~ mulf_init::$5 reg byte a 202.0
byte mulf_init::c
byte mulf_init::c#1 c zp[1]:4 23.307692307692307
byte mulf_init::c#2 c zp[1]:4 101.0
byte mulf_init::dir
byte mulf_init::dir#2 dir zp[1]:6 37.875
byte mulf_init::dir#4 dir zp[1]:6 101.0
word mulf_init::sqr
word mulf_init::sqr#1 sqr zp[2]:10 101.0
word mulf_init::sqr#2 sqr zp[2]:10 202.0
word mulf_init::sqr#3 sqr zp[2]:10 84.16666666666666
word mulf_init::sqr#4 sqr zp[2]:10 50.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 sqr1_hi zp[2]:12 67.33333333333333
byte* mulf_init::sqr1_hi#2 sqr1_hi zp[2]:12 25.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 sqr1_lo zp[2]:16 202.0
byte* mulf_init::sqr1_lo#2 sqr1_lo zp[2]:16 28.857142857142858
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 sqr2_hi zp[2]:7 33.666666666666664
byte* mulf_init::sqr2_hi#2 sqr2_hi zp[2]:7 75.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 sqr2_lo zp[2]:19 202.0
byte* mulf_init::sqr2_lo#2 sqr2_lo zp[2]:19 44.888888888888886
byte mulf_init::x_2
byte mulf_init::x_2#1 reg byte x 101.0
byte mulf_init::x_2#2 reg byte x 50.5
byte mulf_init::x_2#3 reg byte x 60.599999999999994
byte mulf_init::x_255
byte mulf_init::x_255#1 reg byte x 60.599999999999994
byte mulf_init::x_255#2 reg byte x 80.8
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void prepareBobs()
byte~ prepareBobs::$6 reg byte a 20002.0
byte* prepareBobs::bob_glyph
byte* prepareBobs::bob_glyph#1 bob_glyph zp[2]:19 5000.5
byte* prepareBobs::bob_glyph#2 bob_glyph zp[2]:19 4286.142857142857
byte* prepareBobs::bob_table
byte* prepareBobs::bob_table#0 bob_table zp[2]:7 2002.0
byte* prepareBobs::bob_table#1 bob_table zp[2]:7 6667.333333333333
byte* prepareBobs::bob_table#2 bob_table zp[2]:7 3875.5
byte prepareBobs::bob_table_idx
byte prepareBobs::bob_table_idx#1 bob_table_idx zp[1]:6 400.4
byte prepareBobs::bob_table_idx#12 bob_table_idx zp[1]:6 188.52941176470588
byte prepareBobs::bob_table_idx#7 bob_table_idx zp[1]:6 101.0
byte prepareBobs::cell
byte prepareBobs::cell#1 cell zp[1]:15 20002.0
byte prepareBobs::cell#2 cell zp[1]:15 3000.3
byte prepareBobs::shift_x
byte prepareBobs::shift_x#1 shift_x zp[1]:14 2002.0
byte prepareBobs::shift_x#2 shift_x zp[1]:14 166.83333333333334
byte prepareBobs::shift_y
byte prepareBobs::shift_y#1 shift_y zp[1]:4 202.0
byte prepareBobs::shift_y#2 shift_y zp[1]:4 13.173913043478262
byte* progress_cursor
byte* progress_cursor#16 progress_cursor zp[2]:12 101.0
byte* progress_cursor#18 progress_cursor zp[2]:12 62000.8
byte* progress_cursor#26 progress_cursor zp[2]:12 18353.294117647056
byte* progress_cursor#33 progress_cursor zp[2]:12 367.33333333333337
byte* progress_cursor#7 progress_cursor zp[2]:12 200002.0
byte progress_idx
byte progress_idx#17 progress_idx zp[1]:5 101.0
byte progress_idx#20 progress_idx zp[1]:5 42000.600000000006
byte progress_idx#27 progress_idx zp[1]:5 8000.285714285715
byte progress_idx#33 progress_idx zp[1]:5 367.33333333333337
byte progress_idx#7 progress_idx zp[1]:5 150001.5
void progress_inc()
const to_nomodify byte* progress_inc::progress_chars[]  = { $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0 }
void renderBob(byte renderBob::xpos , byte renderBob::ypos)
byte*~ renderBob::$2 zp[2]:19 2002.0
byte~ renderBob::$4 reg byte a 2002.0
byte~ renderBob::$5 zp[1]:21 1001.0
byte~ renderBob::$6 reg byte a 2002.0
byte~ renderBob::$8 reg byte a 2002.0
byte renderBob::bob_table_idx
byte renderBob::bob_table_idx#0 reg byte x 910.0
byte* renderBob::screen
byte* renderBob::screen#0 screen zp[2]:19 734.0666666666667
byte renderBob::x_char_offset
byte renderBob::x_char_offset#0 reg byte x 400.4
byte renderBob::xpos
byte renderBob::xpos#0 xpos zp[1]:14 210.29999999999998
byte renderBob::y_char_offset
byte renderBob::y_char_offset#0 reg byte a 2002.0
word renderBob::y_offset
word renderBob::y_offset#0 y_offset zp[2]:19 2002.0
byte renderBob::ypos
byte renderBob::ypos#0 ypos zp[1]:15 300.42857142857144
void renderBobCleanup()
byte~ renderBobCleanup::$1 reg byte a 20002.0
byte renderBobCleanup::i
byte renderBobCleanup::i#1 reg byte x 15001.5
byte renderBobCleanup::i#2 reg byte x 2500.25
byte* renderBobCleanup::screen
byte* renderBobCleanup::screen#0 screen zp[2]:16 11112.222222222224
byte** renderBobCleanupNext
byte** renderBobCleanupNext#14 renderBobCleanupNext zp[2]:16 78.71428571428571
byte** renderBobCleanupNext#19 renderBobCleanupNext zp[2]:16 67.83870967741936
void renderBobInit()
word~ renderBobInit::$0 zp[2]:16 101.0
byte~ renderBobInit::$3 reg byte a 202.0
byte~ renderBobInit::$4 reg byte a 202.0
word~ renderBobInit::$5 zp[2]:16 151.5
word~ renderBobInit::$6 zp[2]:19 202.0
word~ renderBobInit::$7 zp[2]:16 202.0
byte renderBobInit::i
byte renderBobInit::i#1 reg byte x 151.5
byte renderBobInit::i#2 reg byte x 101.0
byte renderBobInit::y
byte renderBobInit::y#1 reg byte x 151.5
byte renderBobInit::y#2 reg byte x 43.285714285714285
void shiftProtoBobDown()
byte shiftProtoBobDown::i
byte shiftProtoBobDown::i#1 reg byte x 200002.0
byte shiftProtoBobDown::i#2 reg byte x 160001.6
void shiftProtoBobRight()
byte~ shiftProtoBobRight::$1 reg byte a 2.0000002E7
byte~ shiftProtoBobRight::$5 reg byte a 2.0000002E7
byte~ shiftProtoBobRight::$6 reg byte a 2.0000002E7
byte shiftProtoBobRight::carry
byte shiftProtoBobRight::carry#1 carry zp[1]:21 1111111.2222222222
byte shiftProtoBobRight::carry#10 reg byte y 2.0000002E7
byte shiftProtoBobRight::carry#2 reg byte y 2857143.1428571427
byte shiftProtoBobRight::i
byte shiftProtoBobRight::i#1 i zp[1]:18 1.0000001E7
byte shiftProtoBobRight::i#2 i zp[1]:18 2307692.5384615385
byte shiftProtoBobRight::j
byte shiftProtoBobRight::j#1 reg byte x 2.0000002E7
byte shiftProtoBobRight::j#10 reg byte x 1.0000001E7
byte shiftProtoBobRight::j#2 reg byte x 2.0000002E7
byte shiftProtoBobRight::j#3 reg byte x 7000000.699999999
byte shiftProtoBobRight::new_carry

zp[1]:2 [ main::a#2 main::a#6 main::a#1 ]
zp[1]:3 [ main::i#2 main::i#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:4 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 mulf_init::c#2 mulf_init::c#1 ]
zp[1]:5 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 main::angle#8 main::angle#1 ]
zp[1]:6 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 mulf_init::dir#2 mulf_init::dir#4 ]
zp[2]:7 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
reg byte x [ renderBobInit::y#2 renderBobInit::y#1 ]
reg byte x [ renderBobInit::i#2 renderBobInit::i#1 ]
reg byte x [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
reg byte a [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
reg byte x [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
zp[1]:9 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 main::r#2 main::r#1 ]
reg byte x [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
reg byte y [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
reg byte y [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
reg byte a [ bobCharsetFindOrAddGlyph::found#2 ]
reg byte x [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
reg byte x [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ]
reg byte y [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
zp[2]:10 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 main::$13 main::y#0 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:12 [ main::x#0 progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
zp[1]:14 [ renderBob::xpos#0 prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
zp[1]:15 [ renderBob::ypos#0 prepareBobs::cell#2 prepareBobs::cell#1 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$19 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ main::$21 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ bobCharsetFindOrAddGlyph::return#1 ]
reg byte a [ prepareBobs::$6 ]
reg byte a [ renderBobInit::$3 ]
reg byte a [ renderBobInit::$4 ]
reg byte a [ renderBobCleanup::$1 ]
zp[2]:16 [ renderBobCleanup::screen#0 renderBobInit::$5 renderBobInit::$7 renderBobInit::$0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 renderBobCleanupNext#19 renderBobCleanupNext#14 ]
reg byte a [ mulf8u_prepare::a#0 ]
zp[1]:18 [ mulf8s_prepared::b#0 shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
reg byte x [ renderBob::x_char_offset#0 ]
reg byte a [ renderBob::y_char_offset#0 ]
reg byte a [ renderBob::$8 ]
zp[2]:19 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 renderBobInit::$6 prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte a [ renderBob::$4 ]
zp[1]:21 [ renderBob::$5 shiftProtoBobRight::carry#1 ]
reg byte a [ renderBob::$6 ]
reg byte x [ renderBob::bob_table_idx#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ shiftProtoBobRight::$1 ]
reg byte a [ shiftProtoBobRight::$5 ]
reg byte a [ shiftProtoBobRight::$6 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ keyboard_matrix_read::return#0 ]
