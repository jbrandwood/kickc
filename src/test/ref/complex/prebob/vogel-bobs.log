Resolved forward reference bob_charset_next_id to bob_charset_next_id
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call mulf8s_prepare mulf8s::a 
Inlined call call vicSelectGfxBank BOB_SCREEN 
Inlined call main::$4 = call toD018 BOB_SCREEN BOB_CHARSET 
Inlined call call vicSelectGfxBank SCREEN_BASIC 
Inlined call main::$7 = call toD018 SCREEN_BASIC CHARSET_BASIC 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@9
  memset::c#4 = phi( main::@9/memset::c#0 )
  memset::str#3 = phi( main::@9/memset::str#0 )
  memset::num#1 = phi( main::@9/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  keyboard_matrix_read::rowid#1 = phi( keyboard_key_pressed/keyboard_matrix_read::rowid#0 )
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#1]
  keyboard_matrix_read::$0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  keyboard_matrix_read::row_pressed_bits#0 = keyboard_matrix_read::$0
  keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  keyboard_matrix_read::return#3 = phi( keyboard_matrix_read/keyboard_matrix_read::return#0 )
  keyboard_matrix_read::return#1 = keyboard_matrix_read::return#3
  return 
  to:@return

byte keyboard_key_pressed(byte keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from main::@5 main::@6
  keyboard_key_pressed::key#2 = phi( main::@5/keyboard_key_pressed::key#0, main::@6/keyboard_key_pressed::key#1 )
  keyboard_key_pressed::$0 = keyboard_key_pressed::key#2 & 7
  keyboard_key_pressed::colidx#0 = keyboard_key_pressed::$0
  keyboard_key_pressed::$1 = keyboard_key_pressed::key#2 >> 3
  keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::$1
  keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0
  call keyboard_matrix_read 
  keyboard_matrix_read::return#2 = keyboard_matrix_read::return#1
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  keyboard_key_pressed::colidx#1 = phi( keyboard_key_pressed/keyboard_key_pressed::colidx#0 )
  keyboard_matrix_read::return#4 = phi( keyboard_key_pressed/keyboard_matrix_read::return#2 )
  keyboard_key_pressed::$2 = keyboard_matrix_read::return#4
  keyboard_key_pressed::$3 = keyboard_key_pressed::$2 & keyboard_matrix_col_bitmask[keyboard_key_pressed::colidx#1]
  keyboard_key_pressed::return#0 = keyboard_key_pressed::$3
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  keyboard_key_pressed::return#4 = phi( keyboard_key_pressed::@1/keyboard_key_pressed::return#0 )
  keyboard_key_pressed::return#1 = keyboard_key_pressed::return#4
  return 
  to:@return

void mulf_init()
mulf_init: scope:[mulf_init]  from main
  mulf_init::sqr#0 = 0
  mulf_init::x_2#0 = 0
  mulf_init::c#0 = 0
  mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
  mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@4
  mulf_init::x_2#5 = phi( mulf_init/mulf_init::x_2#0, mulf_init::@4/mulf_init::x_2#2 )
  mulf_init::sqr1_hi#5 = phi( mulf_init/mulf_init::sqr1_hi#0, mulf_init::@4/mulf_init::sqr1_hi#1 )
  mulf_init::sqr#6 = phi( mulf_init/mulf_init::sqr#0, mulf_init::@4/mulf_init::sqr#1 )
  mulf_init::c#3 = phi( mulf_init/mulf_init::c#0, mulf_init::@4/mulf_init::c#4 )
  mulf_init::sqr1_lo#2 = phi( mulf_init/mulf_init::sqr1_lo#0, mulf_init::@4/mulf_init::sqr1_lo#1 )
  mulf_init::$0 = mulf_init::sqr1_lo#2 != mulf_sqr1_lo+$200
  if(mulf_init::$0) goto mulf_init::@2
  to:mulf_init::@3
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  mulf_init::x_2#4 = phi( mulf_init::@1/mulf_init::x_2#5 )
  mulf_init::sqr1_hi#3 = phi( mulf_init::@1/mulf_init::sqr1_hi#5 )
  mulf_init::sqr1_lo#4 = phi( mulf_init::@1/mulf_init::sqr1_lo#2 )
  mulf_init::sqr#5 = phi( mulf_init::@1/mulf_init::sqr#6 )
  mulf_init::c#2 = phi( mulf_init::@1/mulf_init::c#3 )
  mulf_init::c#1 = ++ mulf_init::c#2
  mulf_init::$1 = mulf_init::c#1 & 1
  mulf_init::$2 = mulf_init::$1 == 0
  mulf_init::$3 = ! mulf_init::$2
  if(mulf_init::$3) goto mulf_init::@4
  to:mulf_init::@5
mulf_init::@3: scope:[mulf_init]  from mulf_init::@1
  mulf_init::x_255#0 = (byte)-1
  mulf_init::dir#0 = $ff
  mulf_init::sqr2_hi#0 = mulf_sqr2_hi
  mulf_init::sqr2_lo#0 = mulf_sqr2_lo
  to:mulf_init::@6
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2 mulf_init::@5
  mulf_init::c#4 = phi( mulf_init::@2/mulf_init::c#1, mulf_init::@5/mulf_init::c#5 )
  mulf_init::x_2#2 = phi( mulf_init::@2/mulf_init::x_2#4, mulf_init::@5/mulf_init::x_2#1 )
  mulf_init::sqr1_hi#2 = phi( mulf_init::@2/mulf_init::sqr1_hi#3, mulf_init::@5/mulf_init::sqr1_hi#4 )
  mulf_init::sqr1_lo#3 = phi( mulf_init::@2/mulf_init::sqr1_lo#4, mulf_init::@5/mulf_init::sqr1_lo#5 )
  mulf_init::sqr#3 = phi( mulf_init::@2/mulf_init::sqr#5, mulf_init::@5/mulf_init::sqr#2 )
  mulf_init::$4 = < mulf_init::sqr#3
  *mulf_init::sqr1_lo#3 = mulf_init::$4
  mulf_init::$5 = > mulf_init::sqr#3
  *mulf_init::sqr1_hi#2 = mulf_init::$5
  mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2
  mulf_init::$6 = mulf_init::sqr#3 + mulf_init::x_2#2
  mulf_init::sqr#1 = mulf_init::$6
  mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#3
  to:mulf_init::@1
mulf_init::@5: scope:[mulf_init]  from mulf_init::@2
  mulf_init::c#5 = phi( mulf_init::@2/mulf_init::c#1 )
  mulf_init::sqr1_hi#4 = phi( mulf_init::@2/mulf_init::sqr1_hi#3 )
  mulf_init::sqr1_lo#5 = phi( mulf_init::@2/mulf_init::sqr1_lo#4 )
  mulf_init::sqr#4 = phi( mulf_init::@2/mulf_init::sqr#5 )
  mulf_init::x_2#3 = phi( mulf_init::@2/mulf_init::x_2#4 )
  mulf_init::x_2#1 = ++ mulf_init::x_2#3
  mulf_init::sqr#2 = ++ mulf_init::sqr#4
  to:mulf_init::@4
mulf_init::@6: scope:[mulf_init]  from mulf_init::@3 mulf_init::@9
  mulf_init::dir#3 = phi( mulf_init::@3/mulf_init::dir#0, mulf_init::@9/mulf_init::dir#4 )
  mulf_init::sqr2_hi#3 = phi( mulf_init::@3/mulf_init::sqr2_hi#0, mulf_init::@9/mulf_init::sqr2_hi#4 )
  mulf_init::x_255#3 = phi( mulf_init::@3/mulf_init::x_255#0, mulf_init::@9/mulf_init::x_255#4 )
  mulf_init::sqr2_lo#2 = phi( mulf_init::@3/mulf_init::sqr2_lo#0, mulf_init::@9/mulf_init::sqr2_lo#1 )
  mulf_init::$7 = mulf_init::sqr2_lo#2 != mulf_sqr2_lo+$1ff
  if(mulf_init::$7) goto mulf_init::@7
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@6
  mulf_init::dir#2 = phi( mulf_init::@6/mulf_init::dir#3 )
  mulf_init::sqr2_hi#2 = phi( mulf_init::@6/mulf_init::sqr2_hi#3 )
  mulf_init::sqr2_lo#3 = phi( mulf_init::@6/mulf_init::sqr2_lo#2 )
  mulf_init::x_255#2 = phi( mulf_init::@6/mulf_init::x_255#3 )
  *mulf_init::sqr2_lo#3 = mulf_sqr1_lo[mulf_init::x_255#2]
  *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2]
  mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2
  mulf_init::$8 = mulf_init::x_255#2 + mulf_init::dir#2
  mulf_init::x_255#1 = mulf_init::$8
  mulf_init::$9 = mulf_init::x_255#1 == 0
  mulf_init::$10 = ! mulf_init::$9
  if(mulf_init::$10) goto mulf_init::@9
  to:mulf_init::@10
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6
  *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
  *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
  to:mulf_init::@return
mulf_init::@9: scope:[mulf_init]  from mulf_init::@10 mulf_init::@7
  mulf_init::dir#4 = phi( mulf_init::@10/mulf_init::dir#1, mulf_init::@7/mulf_init::dir#2 )
  mulf_init::sqr2_hi#4 = phi( mulf_init::@10/mulf_init::sqr2_hi#5, mulf_init::@7/mulf_init::sqr2_hi#1 )
  mulf_init::x_255#4 = phi( mulf_init::@10/mulf_init::x_255#5, mulf_init::@7/mulf_init::x_255#1 )
  mulf_init::sqr2_lo#4 = phi( mulf_init::@10/mulf_init::sqr2_lo#5, mulf_init::@7/mulf_init::sqr2_lo#3 )
  mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#4
  to:mulf_init::@6
mulf_init::@10: scope:[mulf_init]  from mulf_init::@7
  mulf_init::sqr2_hi#5 = phi( mulf_init::@7/mulf_init::sqr2_hi#1 )
  mulf_init::x_255#5 = phi( mulf_init::@7/mulf_init::x_255#1 )
  mulf_init::sqr2_lo#5 = phi( mulf_init::@7/mulf_init::sqr2_lo#3 )
  mulf_init::dir#1 = 1
  to:mulf_init::@9
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return

void mulf8u_prepare(byte mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1
  mulf8u_prepare::a#1 = phi( mulf8s::mulf8s_prepare1/mulf8u_prepare::a#0 )
  *mulf8u_prepare::memA = mulf8u_prepare::a#1
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  return 
  to:@return

word mulf8u_prepared(byte mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  mulf8u_prepared::b#1 = phi( mulf8s_prepared/mulf8u_prepared::b#0 )
  *mulf8u_prepared::memB = mulf8u_prepared::b#1
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  mulf8u_prepared::return#0 = ((word)) { *mulf8u_prepared::memB, *mulf8u_prepared::resL }
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  mulf8u_prepared::return#3 = phi( mulf8u_prepared/mulf8u_prepared::return#0 )
  mulf8u_prepared::return#1 = mulf8u_prepared::return#3
  return 
  to:@return

signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  mulf8s_prepared::b#1 = phi( mulf8s::@1/mulf8s_prepared::b#0 )
  mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#1
  call mulf8u_prepared 
  mulf8u_prepared::return#2 = mulf8u_prepared::return#1
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  mulf8s_prepared::b#4 = phi( mulf8s_prepared/mulf8s_prepared::b#1 )
  mulf8u_prepared::return#4 = phi( mulf8s_prepared/mulf8u_prepared::return#2 )
  mulf8s_prepared::$0 = mulf8u_prepared::return#4
  mulf8s_prepared::m#0 = mulf8s_prepared::$0
  mulf8s_prepared::$1 = *mulf8s_prepared::memA < 0
  mulf8s_prepared::$2 = ! mulf8s_prepared::$1
  if(mulf8s_prepared::$2) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  mulf8s_prepared::m#6 = phi( mulf8s_prepared::@3/mulf8s_prepared::m#1, mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  mulf8s_prepared::b#2 = phi( mulf8s_prepared::@3/mulf8s_prepared::b#3, mulf8s_prepared::@5/mulf8s_prepared::b#4 )
  mulf8s_prepared::$3 = mulf8s_prepared::b#2 < 0
  mulf8s_prepared::$4 = ! mulf8s_prepared::$3
  if(mulf8s_prepared::$4) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  mulf8s_prepared::b#3 = phi( mulf8s_prepared::@5/mulf8s_prepared::b#4 )
  mulf8s_prepared::m#3 = phi( mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  mulf8s_prepared::$6 = > mulf8s_prepared::m#3
  mulf8s_prepared::$13 = (byte)mulf8s_prepared::b#3
  mulf8s_prepared::$7 = mulf8s_prepared::$6 - mulf8s_prepared::$13
  mulf8s_prepared::$11 = mulf8s_prepared::$7
  mulf8s_prepared::m#1 = mulf8s_prepared::m#3 hi= mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  mulf8s_prepared::m#4 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#6, mulf8s_prepared::@4/mulf8s_prepared::m#2 )
  mulf8s_prepared::return#0 = (signed word)mulf8s_prepared::m#4
  to:mulf8s_prepared::@return
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  mulf8s_prepared::m#5 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#6 )
  mulf8s_prepared::$9 = > mulf8s_prepared::m#5
  mulf8s_prepared::$14 = (byte)*mulf8s_prepared::memA
  mulf8s_prepared::$10 = mulf8s_prepared::$9 - mulf8s_prepared::$14
  mulf8s_prepared::$12 = mulf8s_prepared::$10
  mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  mulf8s_prepared::return#3 = phi( mulf8s_prepared::@2/mulf8s_prepared::return#0 )
  mulf8s_prepared::return#1 = mulf8s_prepared::return#3
  return 
  to:@return

signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
mulf8s: scope:[mulf8s]  from main::@17 main::@4
  mulf8s::b#5 = phi( main::@17/mulf8s::b#1, main::@4/mulf8s::b#0 )
  mulf8s::a#2 = phi( main::@17/mulf8s::a#1, main::@4/mulf8s::a#0 )
  mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#2
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  mulf8s::b#4 = phi( mulf8s/mulf8s::b#5 )
  mulf8s::mulf8s_prepare1_a#1 = phi( mulf8s/mulf8s::mulf8s_prepare1_a#0 )
  mulf8u_prepare::a#0 = (byte)mulf8s::mulf8s_prepare1_a#1
  call mulf8u_prepare 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  mulf8s::b#3 = phi( mulf8s::mulf8s_prepare1/mulf8s::b#4 )
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::@2
  mulf8s::b#2 = phi( mulf8s::@2/mulf8s::b#3 )
  mulf8s_prepared::b#0 = mulf8s::b#2
  call mulf8s_prepared 
  mulf8s_prepared::return#2 = mulf8s_prepared::return#1
  to:mulf8s::@3
mulf8s::@3: scope:[mulf8s]  from mulf8s::@1
  mulf8s_prepared::return#4 = phi( mulf8s::@1/mulf8s_prepared::return#2 )
  mulf8s::$1 = mulf8s_prepared::return#4
  mulf8s::return#0 = mulf8s::$1
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@3
  mulf8s::return#4 = phi( mulf8s::@3/mulf8s::return#0 )
  mulf8s::return#1 = mulf8s::return#4
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  renderBobCleanupNext#50 = phi( __start::@1/renderBobCleanupNext#21 )
  bob_charset_next_id#30 = phi( __start::@1/bob_charset_next_id#29 )
  progress_idx#30 = phi( __start::@1/progress_idx#29 )
  progress_cursor#30 = phi( __start::@1/progress_cursor#29 )
  call mulf_init 
  to:main::@12
main::@12: scope:[main]  from main
  renderBobCleanupNext#49 = phi( main/renderBobCleanupNext#50 )
  bob_charset_next_id#21 = phi( main/bob_charset_next_id#30 )
  progress_idx#24 = phi( main/progress_idx#30 )
  progress_cursor#23 = phi( main/progress_cursor#30 )
  call prepareBobs 
  to:main::@13
main::@13: scope:[main]  from main::@12
  renderBobCleanupNext#48 = phi( main::@12/renderBobCleanupNext#49 )
  bob_charset_next_id#11 = phi( main::@12/bob_charset_next_id#5 )
  progress_idx#13 = phi( main::@12/progress_idx#4 )
  progress_cursor#12 = phi( main::@12/progress_cursor#4 )
  progress_cursor#0 = progress_cursor#12
  progress_idx#0 = progress_idx#13
  bob_charset_next_id#0 = bob_charset_next_id#11
  call renderBobInit 
  to:main::@14
main::@14: scope:[main]  from main::@13
  bob_charset_next_id#78 = phi( main::@13/bob_charset_next_id#0 )
  progress_idx#71 = phi( main::@13/progress_idx#0 )
  progress_cursor#71 = phi( main::@13/progress_cursor#0 )
  renderBobCleanupNext#47 = phi( main::@13/renderBobCleanupNext#48 )
  main::vicSelectGfxBank1_gfx#0 = BOB_SCREEN
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@14
  bob_charset_next_id#77 = phi( main::@14/bob_charset_next_id#78 )
  progress_idx#70 = phi( main::@14/progress_idx#71 )
  progress_cursor#70 = phi( main::@14/progress_cursor#71 )
  renderBobCleanupNext#46 = phi( main::@14/renderBobCleanupNext#47 )
  main::vicSelectGfxBank1_gfx#1 = phi( main::@14/main::vicSelectGfxBank1_gfx#0 )
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  main::vicSelectGfxBank1_toDd001_gfx#0 = main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  bob_charset_next_id#75 = phi( main::vicSelectGfxBank1/bob_charset_next_id#77 )
  progress_idx#68 = phi( main::vicSelectGfxBank1/progress_idx#70 )
  progress_cursor#68 = phi( main::vicSelectGfxBank1/progress_cursor#70 )
  renderBobCleanupNext#44 = phi( main::vicSelectGfxBank1/renderBobCleanupNext#46 )
  main::vicSelectGfxBank1_toDd001_gfx#1 = phi( main::vicSelectGfxBank1/main::vicSelectGfxBank1_toDd001_gfx#0 )
  main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_toDd001_gfx#1
  main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
  main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
  main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  bob_charset_next_id#73 = phi( main::vicSelectGfxBank1_toDd001/bob_charset_next_id#75 )
  progress_idx#66 = phi( main::vicSelectGfxBank1_toDd001/progress_idx#68 )
  progress_cursor#66 = phi( main::vicSelectGfxBank1_toDd001/progress_cursor#68 )
  renderBobCleanupNext#42 = phi( main::vicSelectGfxBank1_toDd001/renderBobCleanupNext#44 )
  main::vicSelectGfxBank1_toDd001_return#2 = phi( main::vicSelectGfxBank1_toDd001/main::vicSelectGfxBank1_toDd001_return#0 )
  main::vicSelectGfxBank1_toDd001_return#1 = main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  bob_charset_next_id#71 = phi( main::vicSelectGfxBank1_toDd001_@return/bob_charset_next_id#73 )
  progress_idx#64 = phi( main::vicSelectGfxBank1_toDd001_@return/progress_idx#66 )
  progress_cursor#64 = phi( main::vicSelectGfxBank1_toDd001_@return/progress_cursor#66 )
  renderBobCleanupNext#40 = phi( main::vicSelectGfxBank1_toDd001_@return/renderBobCleanupNext#42 )
  main::vicSelectGfxBank1_toDd001_return#3 = phi( main::vicSelectGfxBank1_toDd001_@return/main::vicSelectGfxBank1_toDd001_return#1 )
  main::vicSelectGfxBank1_$0 = main::vicSelectGfxBank1_toDd001_return#3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank1_$0
  to:main::@8
main::@8: scope:[main]  from main::vicSelectGfxBank1_@1
  bob_charset_next_id#69 = phi( main::vicSelectGfxBank1_@1/bob_charset_next_id#71 )
  progress_idx#62 = phi( main::vicSelectGfxBank1_@1/progress_idx#64 )
  progress_cursor#62 = phi( main::vicSelectGfxBank1_@1/progress_cursor#64 )
  renderBobCleanupNext#38 = phi( main::vicSelectGfxBank1_@1/renderBobCleanupNext#40 )
  main::toD0181_screen#0 = BOB_SCREEN
  main::toD0181_gfx#0 = BOB_CHARSET
  to:main::toD0181
main::toD0181: scope:[main]  from main::@8
  bob_charset_next_id#67 = phi( main::@8/bob_charset_next_id#69 )
  progress_idx#60 = phi( main::@8/progress_idx#62 )
  progress_cursor#60 = phi( main::@8/progress_cursor#62 )
  renderBobCleanupNext#36 = phi( main::@8/renderBobCleanupNext#38 )
  main::toD0181_gfx#1 = phi( main::@8/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@8/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  bob_charset_next_id#65 = phi( main::toD0181/bob_charset_next_id#67 )
  progress_idx#58 = phi( main::toD0181/progress_idx#60 )
  progress_cursor#58 = phi( main::toD0181/progress_cursor#60 )
  renderBobCleanupNext#34 = phi( main::toD0181/renderBobCleanupNext#36 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@9
main::@9: scope:[main]  from main::toD0181_@return
  bob_charset_next_id#63 = phi( main::toD0181_@return/bob_charset_next_id#65 )
  progress_idx#56 = phi( main::toD0181_@return/progress_idx#58 )
  progress_cursor#56 = phi( main::toD0181_@return/progress_cursor#58 )
  renderBobCleanupNext#31 = phi( main::toD0181_@return/renderBobCleanupNext#34 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$4 = main::toD0181_return#3
  *D018 = main::$4
  memset::str#0 = (void*)BOB_SCREEN
  memset::c#0 = 0
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:main::@15
main::@15: scope:[main]  from main::@9
  bob_charset_next_id#61 = phi( main::@9/bob_charset_next_id#63 )
  progress_idx#54 = phi( main::@9/progress_idx#56 )
  progress_cursor#54 = phi( main::@9/progress_cursor#56 )
  renderBobCleanupNext#28 = phi( main::@9/renderBobCleanupNext#31 )
  main::angle#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@20
  bob_charset_next_id#59 = phi( main::@15/bob_charset_next_id#61, main::@20/bob_charset_next_id#60 )
  progress_idx#52 = phi( main::@15/progress_idx#54, main::@20/progress_idx#53 )
  progress_cursor#52 = phi( main::@15/progress_cursor#54, main::@20/progress_cursor#53 )
  main::angle#8 = phi( main::@15/main::angle#0, main::@20/main::angle#10 )
  renderBobCleanupNext#25 = phi( main::@15/renderBobCleanupNext#28, main::@20/renderBobCleanupNext#29 )
  if(true) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1 main::@2
  bob_charset_next_id#76 = phi( main::@1/bob_charset_next_id#59, main::@2/bob_charset_next_id#76 )
  progress_idx#69 = phi( main::@1/progress_idx#52, main::@2/progress_idx#69 )
  progress_cursor#69 = phi( main::@1/progress_cursor#52, main::@2/progress_cursor#69 )
  main::angle#6 = phi( main::@1/main::angle#8, main::@2/main::angle#6 )
  renderBobCleanupNext#22 = phi( main::@1/renderBobCleanupNext#25, main::@2/renderBobCleanupNext#22 )
  main::$8 = *RASTER < $f8
  if(main::$8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  bob_charset_next_id#74 = phi( main::@2/bob_charset_next_id#76 )
  progress_idx#67 = phi( main::@2/progress_idx#69 )
  progress_cursor#67 = phi( main::@2/progress_cursor#69 )
  main::angle#4 = phi( main::@2/main::angle#6 )
  renderBobCleanupNext#18 = phi( main::@2/renderBobCleanupNext#22 )
  *BORDER_COLOR = $f
  call renderBobCleanup 
  to:main::@16
main::@16: scope:[main]  from main::@3
  bob_charset_next_id#72 = phi( main::@3/bob_charset_next_id#74 )
  progress_idx#65 = phi( main::@3/progress_idx#67 )
  progress_cursor#65 = phi( main::@3/progress_cursor#67 )
  main::angle#2 = phi( main::@3/main::angle#4 )
  renderBobCleanupNext#10 = phi( main::@3/renderBobCleanupNext#6 )
  renderBobCleanupNext#0 = renderBobCleanupNext#10
  main::r#0 = $1e
  main::a#0 = main::angle#2
  main::i#0 = 0
  to:main::@4
main::@4: scope:[main]  from main::@16 main::@19
  bob_charset_next_id#70 = phi( main::@16/bob_charset_next_id#72, main::@19/bob_charset_next_id#64 )
  progress_idx#63 = phi( main::@16/progress_idx#65, main::@19/progress_idx#57 )
  progress_cursor#63 = phi( main::@16/progress_cursor#65, main::@19/progress_cursor#57 )
  main::angle#11 = phi( main::@16/main::angle#2, main::@19/main::angle#5 )
  main::i#5 = phi( main::@16/main::i#0, main::@19/main::i#1 )
  renderBobCleanupNext#26 = phi( main::@16/renderBobCleanupNext#0, main::@19/renderBobCleanupNext#1 )
  main::a#2 = phi( main::@16/main::a#0, main::@19/main::a#5 )
  main::r#2 = phi( main::@16/main::r#0, main::@19/main::r#5 )
  *BORDER_COLOR = 1
  mulf8s::a#0 = main::r#2
  mulf8s::b#0 = COS[main::a#2]
  call mulf8s 
  mulf8s::return#2 = mulf8s::return#1
  to:main::@17
main::@17: scope:[main]  from main::@4
  bob_charset_next_id#68 = phi( main::@4/bob_charset_next_id#70 )
  progress_idx#61 = phi( main::@4/progress_idx#63 )
  progress_cursor#61 = phi( main::@4/progress_cursor#63 )
  main::angle#9 = phi( main::@4/main::angle#11 )
  main::i#4 = phi( main::@4/main::i#5 )
  renderBobCleanupNext#23 = phi( main::@4/renderBobCleanupNext#26 )
  main::a#3 = phi( main::@4/main::a#2 )
  main::r#3 = phi( main::@4/main::r#2 )
  mulf8s::return#5 = phi( main::@4/mulf8s::return#2 )
  main::$10 = mulf8s::return#5
  main::$11 = main::$10 + $4b*$100
  main::x#0 = main::$11
  mulf8s::a#1 = main::r#3
  mulf8s::b#1 = SIN[main::a#3]
  call mulf8s 
  mulf8s::return#3 = mulf8s::return#1
  to:main::@18
main::@18: scope:[main]  from main::@17
  bob_charset_next_id#66 = phi( main::@17/bob_charset_next_id#68 )
  progress_idx#59 = phi( main::@17/progress_idx#61 )
  progress_cursor#59 = phi( main::@17/progress_cursor#61 )
  main::angle#7 = phi( main::@17/main::angle#9 )
  main::i#3 = phi( main::@17/main::i#4 )
  renderBobCleanupNext#19 = phi( main::@17/renderBobCleanupNext#23 )
  main::x#1 = phi( main::@17/main::x#0 )
  main::r#4 = phi( main::@17/main::r#3 )
  main::a#4 = phi( main::@17/main::a#3 )
  mulf8s::return#6 = phi( main::@17/mulf8s::return#3 )
  main::$12 = mulf8s::return#6
  main::$13 = main::$12 * 2
  main::$14 = main::$13 + $5a*$100
  main::y#0 = main::$14
  *BORDER_COLOR = 2
  main::a#1 = main::a#4 + $62
  main::r#1 = main::r#4 + 3
  main::$15 = > main::x#1
  main::$16 = > main::y#0
  renderBob::xpos#0 = main::$15
  renderBob::ypos#0 = main::$16
  call renderBob 
  to:main::@19
main::@19: scope:[main]  from main::@18
  bob_charset_next_id#64 = phi( main::@18/bob_charset_next_id#66 )
  progress_idx#57 = phi( main::@18/progress_idx#59 )
  progress_cursor#57 = phi( main::@18/progress_cursor#59 )
  main::angle#5 = phi( main::@18/main::angle#7 )
  main::a#5 = phi( main::@18/main::a#1 )
  main::r#5 = phi( main::@18/main::r#1 )
  main::i#2 = phi( main::@18/main::i#3 )
  renderBobCleanupNext#11 = phi( main::@18/renderBobCleanupNext#4 )
  renderBobCleanupNext#1 = renderBobCleanupNext#11
  main::i#1 = main::i#2 + rangenext(0,NUM_BOBS-1)
  main::$18 = main::i#1 != rangelast(0,NUM_BOBS-1)
  if(main::$18) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@19
  bob_charset_next_id#62 = phi( main::@19/bob_charset_next_id#64 )
  progress_idx#55 = phi( main::@19/progress_idx#57 )
  progress_cursor#55 = phi( main::@19/progress_cursor#57 )
  renderBobCleanupNext#32 = phi( main::@19/renderBobCleanupNext#1 )
  main::angle#3 = phi( main::@19/main::angle#5 )
  main::angle#1 = main::angle#3 + 3
  *BORDER_COLOR = 0
  keyboard_key_pressed::key#0 = KEY_SPACE
  call keyboard_key_pressed 
  keyboard_key_pressed::return#2 = keyboard_key_pressed::return#1
  to:main::@20
main::@20: scope:[main]  from main::@5
  bob_charset_next_id#60 = phi( main::@5/bob_charset_next_id#62 )
  progress_idx#53 = phi( main::@5/progress_idx#55 )
  progress_cursor#53 = phi( main::@5/progress_cursor#55 )
  main::angle#10 = phi( main::@5/main::angle#1 )
  renderBobCleanupNext#29 = phi( main::@5/renderBobCleanupNext#32 )
  keyboard_key_pressed::return#5 = phi( main::@5/keyboard_key_pressed::return#2 )
  main::$19 = keyboard_key_pressed::return#5
  main::$23 = 0 != main::$19
  main::$20 = ! main::$23
  if(main::$20) goto main::@1
  to:main::@6
main::@6: scope:[main]  from main::@1 main::@20 main::@21
  renderBobCleanupNext#45 = phi( main::@1/renderBobCleanupNext#25, main::@20/renderBobCleanupNext#29, main::@21/renderBobCleanupNext#43 )
  bob_charset_next_id#58 = phi( main::@1/bob_charset_next_id#59, main::@20/bob_charset_next_id#60, main::@21/bob_charset_next_id#57 )
  progress_idx#51 = phi( main::@1/progress_idx#52, main::@20/progress_idx#53, main::@21/progress_idx#50 )
  progress_cursor#51 = phi( main::@1/progress_cursor#52, main::@20/progress_cursor#53, main::@21/progress_cursor#50 )
  keyboard_key_pressed::key#1 = KEY_SPACE
  call keyboard_key_pressed 
  keyboard_key_pressed::return#3 = keyboard_key_pressed::return#1
  to:main::@21
main::@21: scope:[main]  from main::@6
  renderBobCleanupNext#43 = phi( main::@6/renderBobCleanupNext#45 )
  bob_charset_next_id#57 = phi( main::@6/bob_charset_next_id#58 )
  progress_idx#50 = phi( main::@6/progress_idx#51 )
  progress_cursor#50 = phi( main::@6/progress_cursor#51 )
  keyboard_key_pressed::return#6 = phi( main::@6/keyboard_key_pressed::return#3 )
  main::$21 = keyboard_key_pressed::return#6
  main::$22 = 0 != main::$21
  if(main::$22) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@21
  renderBobCleanupNext#41 = phi( main::@21/renderBobCleanupNext#43 )
  bob_charset_next_id#56 = phi( main::@21/bob_charset_next_id#57 )
  progress_idx#49 = phi( main::@21/progress_idx#50 )
  progress_cursor#49 = phi( main::@21/progress_cursor#50 )
  main::vicSelectGfxBank2_gfx#0 = SCREEN_BASIC
  to:main::vicSelectGfxBank2
main::vicSelectGfxBank2: scope:[main]  from main::@7
  renderBobCleanupNext#39 = phi( main::@7/renderBobCleanupNext#41 )
  bob_charset_next_id#55 = phi( main::@7/bob_charset_next_id#56 )
  progress_idx#48 = phi( main::@7/progress_idx#49 )
  progress_cursor#48 = phi( main::@7/progress_cursor#49 )
  main::vicSelectGfxBank2_gfx#1 = phi( main::@7/main::vicSelectGfxBank2_gfx#0 )
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  main::vicSelectGfxBank2_toDd001_gfx#0 = main::vicSelectGfxBank2_gfx#1
  to:main::vicSelectGfxBank2_toDd001
main::vicSelectGfxBank2_toDd001: scope:[main]  from main::vicSelectGfxBank2
  renderBobCleanupNext#37 = phi( main::vicSelectGfxBank2/renderBobCleanupNext#39 )
  bob_charset_next_id#53 = phi( main::vicSelectGfxBank2/bob_charset_next_id#55 )
  progress_idx#46 = phi( main::vicSelectGfxBank2/progress_idx#48 )
  progress_cursor#46 = phi( main::vicSelectGfxBank2/progress_cursor#48 )
  main::vicSelectGfxBank2_toDd001_gfx#1 = phi( main::vicSelectGfxBank2/main::vicSelectGfxBank2_toDd001_gfx#0 )
  main::vicSelectGfxBank2_toDd001_$0 = > (word)main::vicSelectGfxBank2_toDd001_gfx#1
  main::vicSelectGfxBank2_toDd001_$1 = main::vicSelectGfxBank2_toDd001_$0 / $40
  main::vicSelectGfxBank2_toDd001_$2 = 3 ^ main::vicSelectGfxBank2_toDd001_$1
  main::vicSelectGfxBank2_toDd001_return#0 = main::vicSelectGfxBank2_toDd001_$2
  to:main::vicSelectGfxBank2_toDd001_@return
main::vicSelectGfxBank2_toDd001_@return: scope:[main]  from main::vicSelectGfxBank2_toDd001
  renderBobCleanupNext#35 = phi( main::vicSelectGfxBank2_toDd001/renderBobCleanupNext#37 )
  bob_charset_next_id#51 = phi( main::vicSelectGfxBank2_toDd001/bob_charset_next_id#53 )
  progress_idx#44 = phi( main::vicSelectGfxBank2_toDd001/progress_idx#46 )
  progress_cursor#44 = phi( main::vicSelectGfxBank2_toDd001/progress_cursor#46 )
  main::vicSelectGfxBank2_toDd001_return#2 = phi( main::vicSelectGfxBank2_toDd001/main::vicSelectGfxBank2_toDd001_return#0 )
  main::vicSelectGfxBank2_toDd001_return#1 = main::vicSelectGfxBank2_toDd001_return#2
  to:main::vicSelectGfxBank2_@1
main::vicSelectGfxBank2_@1: scope:[main]  from main::vicSelectGfxBank2_toDd001_@return
  renderBobCleanupNext#33 = phi( main::vicSelectGfxBank2_toDd001_@return/renderBobCleanupNext#35 )
  bob_charset_next_id#48 = phi( main::vicSelectGfxBank2_toDd001_@return/bob_charset_next_id#51 )
  progress_idx#41 = phi( main::vicSelectGfxBank2_toDd001_@return/progress_idx#44 )
  progress_cursor#41 = phi( main::vicSelectGfxBank2_toDd001_@return/progress_cursor#44 )
  main::vicSelectGfxBank2_toDd001_return#3 = phi( main::vicSelectGfxBank2_toDd001_@return/main::vicSelectGfxBank2_toDd001_return#1 )
  main::vicSelectGfxBank2_$0 = main::vicSelectGfxBank2_toDd001_return#3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank2_$0
  to:main::@10
main::@10: scope:[main]  from main::vicSelectGfxBank2_@1
  renderBobCleanupNext#30 = phi( main::vicSelectGfxBank2_@1/renderBobCleanupNext#33 )
  bob_charset_next_id#43 = phi( main::vicSelectGfxBank2_@1/bob_charset_next_id#48 )
  progress_idx#38 = phi( main::vicSelectGfxBank2_@1/progress_idx#41 )
  progress_cursor#38 = phi( main::vicSelectGfxBank2_@1/progress_cursor#41 )
  main::toD0182_screen#0 = SCREEN_BASIC
  main::toD0182_gfx#0 = CHARSET_BASIC
  to:main::toD0182
main::toD0182: scope:[main]  from main::@10
  renderBobCleanupNext#27 = phi( main::@10/renderBobCleanupNext#30 )
  bob_charset_next_id#37 = phi( main::@10/bob_charset_next_id#43 )
  progress_idx#35 = phi( main::@10/progress_idx#38 )
  progress_cursor#35 = phi( main::@10/progress_cursor#38 )
  main::toD0182_gfx#1 = phi( main::@10/main::toD0182_gfx#0 )
  main::toD0182_screen#1 = phi( main::@10/main::toD0182_screen#0 )
  main::toD0182_$7 = (word)main::toD0182_screen#1
  main::toD0182_$0 = main::toD0182_$7 & $3fff
  main::toD0182_$1 = main::toD0182_$0 * 4
  main::toD0182_$2 = > main::toD0182_$1
  main::toD0182_$3 = > (word)main::toD0182_gfx#1
  main::toD0182_$4 = main::toD0182_$3 / 4
  main::toD0182_$5 = main::toD0182_$4 & $f
  main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
  main::toD0182_return#0 = main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  renderBobCleanupNext#24 = phi( main::toD0182/renderBobCleanupNext#27 )
  bob_charset_next_id#31 = phi( main::toD0182/bob_charset_next_id#37 )
  progress_idx#31 = phi( main::toD0182/progress_idx#35 )
  progress_cursor#31 = phi( main::toD0182/progress_cursor#35 )
  main::toD0182_return#2 = phi( main::toD0182/main::toD0182_return#0 )
  main::toD0182_return#1 = main::toD0182_return#2
  to:main::@11
main::@11: scope:[main]  from main::toD0182_@return
  renderBobCleanupNext#20 = phi( main::toD0182_@return/renderBobCleanupNext#24 )
  bob_charset_next_id#22 = phi( main::toD0182_@return/bob_charset_next_id#31 )
  progress_idx#25 = phi( main::toD0182_@return/progress_idx#31 )
  progress_cursor#24 = phi( main::toD0182_@return/progress_cursor#31 )
  main::toD0182_return#3 = phi( main::toD0182_@return/main::toD0182_return#1 )
  main::$7 = main::toD0182_return#3
  *D018 = main::$7
  to:main::@return
main::@return: scope:[main]  from main::@11
  renderBobCleanupNext#12 = phi( main::@11/renderBobCleanupNext#20 )
  bob_charset_next_id#12 = phi( main::@11/bob_charset_next_id#22 )
  progress_idx#14 = phi( main::@11/progress_idx#25 )
  progress_cursor#13 = phi( main::@11/progress_cursor#24 )
  progress_cursor#1 = progress_cursor#13
  progress_idx#1 = progress_idx#14
  bob_charset_next_id#1 = bob_charset_next_id#12
  renderBobCleanupNext#2 = renderBobCleanupNext#12
  return 
  to:@return

void renderBobInit()
renderBobInit: scope:[renderBobInit]  from main::@13
  renderBobInit::y#0 = 0
  to:renderBobInit::@1
renderBobInit::@1: scope:[renderBobInit]  from renderBobInit renderBobInit::@1
  renderBobInit::y#2 = phi( renderBobInit/renderBobInit::y#0, renderBobInit::@1/renderBobInit::y#1 )
  renderBobInit::$5 = (word)renderBobInit::y#2
  renderBobInit::$0 = renderBobInit::$5 * $28
  renderBobInit::$3 = renderBobInit::y#2 * SIZEOF_WORD
  MUL40[renderBobInit::$3] = renderBobInit::$0
  renderBobInit::y#1 = renderBobInit::y#2 + rangenext(0,$1f)
  renderBobInit::$1 = renderBobInit::y#1 != rangelast(0,$1f)
  if(renderBobInit::$1) goto renderBobInit::@1
  to:renderBobInit::@2
renderBobInit::@2: scope:[renderBobInit]  from renderBobInit::@1
  renderBobInit::i#0 = 0
  to:renderBobInit::@3
renderBobInit::@3: scope:[renderBobInit]  from renderBobInit::@2 renderBobInit::@3
  renderBobInit::i#2 = phi( renderBobInit::@2/renderBobInit::i#0, renderBobInit::@3/renderBobInit::i#1 )
  renderBobInit::$4 = renderBobInit::i#2 * SIZEOF_POINTER
  RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN
  renderBobInit::i#1 = renderBobInit::i#2 + rangenext(0,NUM_BOBS-1)
  renderBobInit::$2 = renderBobInit::i#1 != rangelast(0,NUM_BOBS-1)
  if(renderBobInit::$2) goto renderBobInit::@3
  to:renderBobInit::@return
renderBobInit::@return: scope:[renderBobInit]  from renderBobInit::@3
  return 
  to:@return

void renderBob(byte renderBob::xpos , byte renderBob::ypos)
renderBob: scope:[renderBob]  from main::@18
  renderBobCleanupNext#13 = phi( main::@18/renderBobCleanupNext#19 )
  renderBob::ypos#1 = phi( main::@18/renderBob::ypos#0 )
  renderBob::xpos#1 = phi( main::@18/renderBob::xpos#0 )
  renderBob::$0 = renderBob::xpos#1 / BOB_SHIFTS_X
  renderBob::x_char_offset#0 = renderBob::$0
  renderBob::$1 = renderBob::ypos#1 / BOB_SHIFTS_Y
  renderBob::y_char_offset#0 = renderBob::$1
  renderBob::$8 = renderBob::y_char_offset#0 * SIZEOF_WORD
  renderBob::y_offset#0 = MUL40[renderBob::$8]
  renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0
  renderBob::$3 = renderBob::$2 + renderBob::x_char_offset#0
  renderBob::screen#0 = renderBob::$3
  renderBob::$4 = renderBob::ypos#1 & 7
  renderBob::$5 = renderBob::$4 * BOB_SHIFTS_X
  renderBob::$6 = renderBob::xpos#1 & 3
  renderBob::$7 = renderBob::$5 + renderBob::$6
  renderBob::bob_table_idx#0 = renderBob::$7
  *renderBobCleanupNext#13 = renderBob::screen#0
  renderBobCleanupNext#3 = renderBobCleanupNext#13 + SIZEOF_POINTER
  renderBob::screen#0[0] = (BOB_TABLES+0*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  to:renderBob::@return
renderBob::@return: scope:[renderBob]  from renderBob
  renderBobCleanupNext#14 = phi( renderBob/renderBobCleanupNext#3 )
  renderBobCleanupNext#4 = renderBobCleanupNext#14
  return 
  to:@return

void renderBobCleanup()
renderBobCleanup: scope:[renderBobCleanup]  from main::@3
  renderBobCleanup::i#0 = 0
  to:renderBobCleanup::@1
renderBobCleanup::@1: scope:[renderBobCleanup]  from renderBobCleanup renderBobCleanup::@1
  renderBobCleanup::i#2 = phi( renderBobCleanup/renderBobCleanup::i#0, renderBobCleanup::@1/renderBobCleanup::i#1 )
  renderBobCleanup::$1 = renderBobCleanup::i#2 * SIZEOF_POINTER
  renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1]
  renderBobCleanup::screen#0[0] = 0
  renderBobCleanup::screen#0[$28] = 0
  renderBobCleanup::screen#0[$50] = 0
  renderBobCleanup::screen#0[1] = 0
  renderBobCleanup::screen#0[$29] = 0
  renderBobCleanup::screen#0[$51] = 0
  renderBobCleanup::screen#0[2] = 0
  renderBobCleanup::screen#0[$2a] = 0
  renderBobCleanup::screen#0[$52] = 0
  renderBobCleanup::i#1 = renderBobCleanup::i#2 + rangenext(0,NUM_BOBS-1)
  renderBobCleanup::$0 = renderBobCleanup::i#1 != rangelast(0,NUM_BOBS-1)
  if(renderBobCleanup::$0) goto renderBobCleanup::@1
  to:renderBobCleanup::@2
renderBobCleanup::@2: scope:[renderBobCleanup]  from renderBobCleanup::@1
  renderBobCleanupNext#5 = RENDERBOB_CLEANUP
  to:renderBobCleanup::@return
renderBobCleanup::@return: scope:[renderBobCleanup]  from renderBobCleanup::@2
  renderBobCleanupNext#15 = phi( renderBobCleanup::@2/renderBobCleanupNext#5 )
  renderBobCleanupNext#6 = renderBobCleanupNext#15
  return 
  to:@return

void prepareBobs()
prepareBobs: scope:[prepareBobs]  from main::@12
  progress_idx#26 = phi( main::@12/progress_idx#24 )
  progress_cursor#25 = phi( main::@12/progress_cursor#23 )
  progress_init::line#0 = SCREEN_BASIC
  call progress_init 
  to:prepareBobs::@9
prepareBobs::@9: scope:[prepareBobs]  from prepareBobs
  progress_idx#15 = phi( prepareBobs/progress_idx#6 )
  progress_cursor#14 = phi( prepareBobs/progress_cursor#6 )
  progress_cursor#2 = progress_cursor#14
  progress_idx#2 = progress_idx#15
  bob_charset_next_id#2 = 0
  bobCharsetFindOrAddGlyph::bob_glyph#0 = PROTO_BOB+$30
  call bobCharsetFindOrAddGlyph 
  bobCharsetFindOrAddGlyph::return#0 = bobCharsetFindOrAddGlyph::return#3
  to:prepareBobs::@10
prepareBobs::@10: scope:[prepareBobs]  from prepareBobs::@9
  progress_idx#32 = phi( prepareBobs::@9/progress_idx#2 )
  progress_cursor#32 = phi( prepareBobs::@9/progress_cursor#2 )
  bob_charset_next_id#13 = phi( prepareBobs::@9/bob_charset_next_id#6 )
  bob_charset_next_id#3 = bob_charset_next_id#13
  prepareBobs::bob_table_idx#0 = 0
  prepareBobs::shift_y#0 = 0
  to:prepareBobs::@1
prepareBobs::@1: scope:[prepareBobs]  from prepareBobs::@10 prepareBobs::@11
  prepareBobs::bob_table_idx#9 = phi( prepareBobs::@10/prepareBobs::bob_table_idx#0, prepareBobs::@11/prepareBobs::bob_table_idx#12 )
  bob_charset_next_id#24 = phi( prepareBobs::@10/bob_charset_next_id#3, prepareBobs::@11/bob_charset_next_id#32 )
  progress_idx#28 = phi( prepareBobs::@10/progress_idx#32, prepareBobs::@11/progress_idx#33 )
  progress_cursor#27 = phi( prepareBobs::@10/progress_cursor#32, prepareBobs::@11/progress_cursor#33 )
  prepareBobs::shift_y#2 = phi( prepareBobs::@10/prepareBobs::shift_y#0, prepareBobs::@11/prepareBobs::shift_y#1 )
  prepareBobs::$2 = prepareBobs::shift_y#2 < BOB_SHIFTS_Y
  if(prepareBobs::$2) goto prepareBobs::@2
  to:prepareBobs::@return
prepareBobs::@2: scope:[prepareBobs]  from prepareBobs::@1
  progress_idx#43 = phi( prepareBobs::@1/progress_idx#28 )
  progress_cursor#43 = phi( prepareBobs::@1/progress_cursor#27 )
  bob_charset_next_id#50 = phi( prepareBobs::@1/bob_charset_next_id#24 )
  prepareBobs::shift_y#7 = phi( prepareBobs::@1/prepareBobs::shift_y#2 )
  prepareBobs::bob_table_idx#7 = phi( prepareBobs::@1/prepareBobs::bob_table_idx#9 )
  prepareBobs::shift_x#0 = 0
  to:prepareBobs::@3
prepareBobs::@3: scope:[prepareBobs]  from prepareBobs::@15 prepareBobs::@2
  progress_idx#39 = phi( prepareBobs::@15/progress_idx#42, prepareBobs::@2/progress_idx#43 )
  progress_cursor#39 = phi( prepareBobs::@15/progress_cursor#42, prepareBobs::@2/progress_cursor#43 )
  bob_charset_next_id#44 = phi( prepareBobs::@15/bob_charset_next_id#49, prepareBobs::@2/bob_charset_next_id#50 )
  prepareBobs::shift_y#5 = phi( prepareBobs::@15/prepareBobs::shift_y#6, prepareBobs::@2/prepareBobs::shift_y#7 )
  prepareBobs::bob_table_idx#4 = phi( prepareBobs::@15/prepareBobs::bob_table_idx#6, prepareBobs::@2/prepareBobs::bob_table_idx#7 )
  prepareBobs::shift_x#2 = phi( prepareBobs::@15/prepareBobs::shift_x#1, prepareBobs::@2/prepareBobs::shift_x#0 )
  prepareBobs::$3 = prepareBobs::shift_x#2 < BOB_SHIFTS_X
  if(prepareBobs::$3) goto prepareBobs::@4
  to:prepareBobs::@5
prepareBobs::@4: scope:[prepareBobs]  from prepareBobs::@3
  prepareBobs::shift_y#12 = phi( prepareBobs::@3/prepareBobs::shift_y#5 )
  prepareBobs::shift_x#8 = phi( prepareBobs::@3/prepareBobs::shift_x#2 )
  progress_cursor#40 = phi( prepareBobs::@3/progress_cursor#39 )
  progress_idx#40 = phi( prepareBobs::@3/progress_idx#39 )
  bob_charset_next_id#40 = phi( prepareBobs::@3/bob_charset_next_id#44 )
  prepareBobs::bob_table_idx#2 = phi( prepareBobs::@3/prepareBobs::bob_table_idx#4 )
  prepareBobs::bob_glyph#0 = PROTO_BOB
  prepareBobs::$4 = BOB_TABLES + prepareBobs::bob_table_idx#2
  prepareBobs::bob_table#0 = prepareBobs::$4
  prepareBobs::cell#0 = 0
  to:prepareBobs::@6
prepareBobs::@5: scope:[prepareBobs]  from prepareBobs::@3
  prepareBobs::bob_table_idx#14 = phi( prepareBobs::@3/prepareBobs::bob_table_idx#4 )
  bob_charset_next_id#38 = phi( prepareBobs::@3/bob_charset_next_id#44 )
  progress_idx#36 = phi( prepareBobs::@3/progress_idx#39 )
  progress_cursor#36 = phi( prepareBobs::@3/progress_cursor#39 )
  prepareBobs::shift_y#4 = phi( prepareBobs::@3/prepareBobs::shift_y#5 )
  call shiftProtoBobDown 
  to:prepareBobs::@11
prepareBobs::@11: scope:[prepareBobs]  from prepareBobs::@5
  prepareBobs::bob_table_idx#12 = phi( prepareBobs::@5/prepareBobs::bob_table_idx#14 )
  bob_charset_next_id#32 = phi( prepareBobs::@5/bob_charset_next_id#38 )
  progress_idx#33 = phi( prepareBobs::@5/progress_idx#36 )
  progress_cursor#33 = phi( prepareBobs::@5/progress_cursor#36 )
  prepareBobs::shift_y#3 = phi( prepareBobs::@5/prepareBobs::shift_y#4 )
  prepareBobs::shift_y#1 = ++ prepareBobs::shift_y#3
  to:prepareBobs::@1
prepareBobs::@6: scope:[prepareBobs]  from prepareBobs::@13 prepareBobs::@4
  prepareBobs::shift_y#10 = phi( prepareBobs::@13/prepareBobs::shift_y#11, prepareBobs::@4/prepareBobs::shift_y#12 )
  prepareBobs::shift_x#6 = phi( prepareBobs::@13/prepareBobs::shift_x#7, prepareBobs::@4/prepareBobs::shift_x#8 )
  progress_cursor#37 = phi( prepareBobs::@13/progress_cursor#3, prepareBobs::@4/progress_cursor#40 )
  progress_idx#37 = phi( prepareBobs::@13/progress_idx#3, prepareBobs::@4/progress_idx#40 )
  prepareBobs::bob_table#4 = phi( prepareBobs::@13/prepareBobs::bob_table#5, prepareBobs::@4/prepareBobs::bob_table#0 )
  bob_charset_next_id#33 = phi( prepareBobs::@13/bob_charset_next_id#39, prepareBobs::@4/bob_charset_next_id#40 )
  prepareBobs::bob_table_idx#5 = phi( prepareBobs::@13/prepareBobs::bob_table_idx#8, prepareBobs::@4/prepareBobs::bob_table_idx#2 )
  prepareBobs::bob_glyph#4 = phi( prepareBobs::@13/prepareBobs::bob_glyph#5, prepareBobs::@4/prepareBobs::bob_glyph#0 )
  prepareBobs::cell#2 = phi( prepareBobs::@13/prepareBobs::cell#1, prepareBobs::@4/prepareBobs::cell#0 )
  prepareBobs::$5 = prepareBobs::cell#2 < 9
  if(prepareBobs::$5) goto prepareBobs::@7
  to:prepareBobs::@8
prepareBobs::@7: scope:[prepareBobs]  from prepareBobs::@6
  prepareBobs::shift_y#14 = phi( prepareBobs::@6/prepareBobs::shift_y#10 )
  prepareBobs::shift_x#10 = phi( prepareBobs::@6/prepareBobs::shift_x#6 )
  prepareBobs::bob_table_idx#13 = phi( prepareBobs::@6/prepareBobs::bob_table_idx#5 )
  prepareBobs::cell#5 = phi( prepareBobs::@6/prepareBobs::cell#2 )
  progress_cursor#34 = phi( prepareBobs::@6/progress_cursor#37 )
  progress_idx#34 = phi( prepareBobs::@6/progress_idx#37 )
  prepareBobs::bob_table#3 = phi( prepareBobs::@6/prepareBobs::bob_table#4 )
  bob_charset_next_id#23 = phi( prepareBobs::@6/bob_charset_next_id#33 )
  prepareBobs::bob_glyph#2 = phi( prepareBobs::@6/prepareBobs::bob_glyph#4 )
  bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2
  call bobCharsetFindOrAddGlyph 
  bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::return#3
  to:prepareBobs::@12
prepareBobs::@12: scope:[prepareBobs]  from prepareBobs::@7
  prepareBobs::shift_y#13 = phi( prepareBobs::@7/prepareBobs::shift_y#14 )
  prepareBobs::shift_x#9 = phi( prepareBobs::@7/prepareBobs::shift_x#10 )
  prepareBobs::bob_table_idx#10 = phi( prepareBobs::@7/prepareBobs::bob_table_idx#13 )
  prepareBobs::cell#4 = phi( prepareBobs::@7/prepareBobs::cell#5 )
  progress_cursor#26 = phi( prepareBobs::@7/progress_cursor#34 )
  progress_idx#27 = phi( prepareBobs::@7/progress_idx#34 )
  prepareBobs::bob_glyph#3 = phi( prepareBobs::@7/prepareBobs::bob_glyph#2 )
  prepareBobs::bob_table#2 = phi( prepareBobs::@7/prepareBobs::bob_table#3 )
  bob_charset_next_id#14 = phi( prepareBobs::@7/bob_charset_next_id#6 )
  bobCharsetFindOrAddGlyph::return#5 = phi( prepareBobs::@7/bobCharsetFindOrAddGlyph::return#1 )
  prepareBobs::$6 = bobCharsetFindOrAddGlyph::return#5
  bob_charset_next_id#4 = bob_charset_next_id#14
  *prepareBobs::bob_table#2 = prepareBobs::$6
  prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#3 + 8
  prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y
  call progress_inc 
  to:prepareBobs::@13
prepareBobs::@13: scope:[prepareBobs]  from prepareBobs::@12
  prepareBobs::shift_y#11 = phi( prepareBobs::@12/prepareBobs::shift_y#13 )
  prepareBobs::shift_x#7 = phi( prepareBobs::@12/prepareBobs::shift_x#9 )
  prepareBobs::bob_table#5 = phi( prepareBobs::@12/prepareBobs::bob_table#1 )
  bob_charset_next_id#39 = phi( prepareBobs::@12/bob_charset_next_id#4 )
  prepareBobs::bob_table_idx#8 = phi( prepareBobs::@12/prepareBobs::bob_table_idx#10 )
  prepareBobs::bob_glyph#5 = phi( prepareBobs::@12/prepareBobs::bob_glyph#1 )
  prepareBobs::cell#3 = phi( prepareBobs::@12/prepareBobs::cell#4 )
  progress_cursor#15 = phi( prepareBobs::@12/progress_cursor#8 )
  progress_idx#16 = phi( prepareBobs::@12/progress_idx#9 )
  progress_idx#3 = progress_idx#16
  progress_cursor#3 = progress_cursor#15
  prepareBobs::cell#1 = ++ prepareBobs::cell#3
  to:prepareBobs::@6
prepareBobs::@8: scope:[prepareBobs]  from prepareBobs::@6
  progress_idx#47 = phi( prepareBobs::@6/progress_idx#37 )
  progress_cursor#47 = phi( prepareBobs::@6/progress_cursor#37 )
  bob_charset_next_id#54 = phi( prepareBobs::@6/bob_charset_next_id#33 )
  prepareBobs::shift_y#9 = phi( prepareBobs::@6/prepareBobs::shift_y#10 )
  prepareBobs::shift_x#5 = phi( prepareBobs::@6/prepareBobs::shift_x#6 )
  prepareBobs::bob_table_idx#3 = phi( prepareBobs::@6/prepareBobs::bob_table_idx#5 )
  prepareBobs::bob_table_idx#1 = ++ prepareBobs::bob_table_idx#3
  call shiftProtoBobRight 
  to:prepareBobs::@14
prepareBobs::@14: scope:[prepareBobs]  from prepareBobs::@8
  progress_idx#45 = phi( prepareBobs::@8/progress_idx#47 )
  progress_cursor#45 = phi( prepareBobs::@8/progress_cursor#47 )
  bob_charset_next_id#52 = phi( prepareBobs::@8/bob_charset_next_id#54 )
  prepareBobs::shift_y#8 = phi( prepareBobs::@8/prepareBobs::shift_y#9 )
  prepareBobs::bob_table_idx#11 = phi( prepareBobs::@8/prepareBobs::bob_table_idx#1 )
  prepareBobs::shift_x#4 = phi( prepareBobs::@8/prepareBobs::shift_x#5 )
  call shiftProtoBobRight 
  to:prepareBobs::@15
prepareBobs::@15: scope:[prepareBobs]  from prepareBobs::@14
  progress_idx#42 = phi( prepareBobs::@14/progress_idx#45 )
  progress_cursor#42 = phi( prepareBobs::@14/progress_cursor#45 )
  bob_charset_next_id#49 = phi( prepareBobs::@14/bob_charset_next_id#52 )
  prepareBobs::shift_y#6 = phi( prepareBobs::@14/prepareBobs::shift_y#8 )
  prepareBobs::bob_table_idx#6 = phi( prepareBobs::@14/prepareBobs::bob_table_idx#11 )
  prepareBobs::shift_x#3 = phi( prepareBobs::@14/prepareBobs::shift_x#4 )
  prepareBobs::shift_x#1 = ++ prepareBobs::shift_x#3
  to:prepareBobs::@3
prepareBobs::@return: scope:[prepareBobs]  from prepareBobs::@1
  bob_charset_next_id#15 = phi( prepareBobs::@1/bob_charset_next_id#24 )
  progress_idx#17 = phi( prepareBobs::@1/progress_idx#28 )
  progress_cursor#16 = phi( prepareBobs::@1/progress_cursor#27 )
  progress_cursor#4 = progress_cursor#16
  progress_idx#4 = progress_idx#17
  bob_charset_next_id#5 = bob_charset_next_id#15
  return 
  to:@return

void shiftProtoBobRight()
shiftProtoBobRight: scope:[shiftProtoBobRight]  from prepareBobs::@14 prepareBobs::@8
  shiftProtoBobRight::carry#0 = 0
  shiftProtoBobRight::j#0 = 0
  shiftProtoBobRight::i#0 = 0
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@1: scope:[shiftProtoBobRight]  from shiftProtoBobRight shiftProtoBobRight::@7
  shiftProtoBobRight::carry#6 = phi( shiftProtoBobRight/shiftProtoBobRight::carry#0, shiftProtoBobRight::@7/shiftProtoBobRight::carry#7 )
  shiftProtoBobRight::j#7 = phi( shiftProtoBobRight/shiftProtoBobRight::j#0, shiftProtoBobRight::@7/shiftProtoBobRight::j#10 )
  shiftProtoBobRight::i#2 = phi( shiftProtoBobRight/shiftProtoBobRight::i#0, shiftProtoBobRight::@7/shiftProtoBobRight::i#1 )
  shiftProtoBobRight::$0 = shiftProtoBobRight::i#2 < 3*3*8
  if(shiftProtoBobRight::$0) goto shiftProtoBobRight::@2
  to:shiftProtoBobRight::@return
shiftProtoBobRight::@2: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  shiftProtoBobRight::i#9 = phi( shiftProtoBobRight::@1/shiftProtoBobRight::i#2 )
  shiftProtoBobRight::carry#5 = phi( shiftProtoBobRight::@1/shiftProtoBobRight::carry#6 )
  shiftProtoBobRight::j#3 = phi( shiftProtoBobRight::@1/shiftProtoBobRight::j#7 )
  shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1
  shiftProtoBobRight::$8 = 0 != shiftProtoBobRight::$1
  if(shiftProtoBobRight::$8) goto shiftProtoBobRight::@3
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@3: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2
  shiftProtoBobRight::i#7 = phi( shiftProtoBobRight::@2/shiftProtoBobRight::i#9 )
  shiftProtoBobRight::carry#3 = phi( shiftProtoBobRight::@2/shiftProtoBobRight::carry#5 )
  shiftProtoBobRight::j#8 = phi( shiftProtoBobRight::@2/shiftProtoBobRight::j#3 )
  shiftProtoBobRight::$3 = $80
  to:shiftProtoBobRight::@5
shiftProtoBobRight::@4: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2
  shiftProtoBobRight::i#8 = phi( shiftProtoBobRight::@2/shiftProtoBobRight::i#9 )
  shiftProtoBobRight::carry#4 = phi( shiftProtoBobRight::@2/shiftProtoBobRight::carry#5 )
  shiftProtoBobRight::j#9 = phi( shiftProtoBobRight::@2/shiftProtoBobRight::j#3 )
  shiftProtoBobRight::$2 = 0
  to:shiftProtoBobRight::@5
shiftProtoBobRight::@5: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@3 shiftProtoBobRight::@4
  shiftProtoBobRight::i#6 = phi( shiftProtoBobRight::@3/shiftProtoBobRight::i#7, shiftProtoBobRight::@4/shiftProtoBobRight::i#8 )
  shiftProtoBobRight::carry#2 = phi( shiftProtoBobRight::@3/shiftProtoBobRight::carry#3, shiftProtoBobRight::@4/shiftProtoBobRight::carry#4 )
  shiftProtoBobRight::j#4 = phi( shiftProtoBobRight::@3/shiftProtoBobRight::j#8, shiftProtoBobRight::@4/shiftProtoBobRight::j#9 )
  shiftProtoBobRight::$4 = phi( shiftProtoBobRight::@3/shiftProtoBobRight::$3, shiftProtoBobRight::@4/shiftProtoBobRight::$2 )
  shiftProtoBobRight::new_carry#0 = shiftProtoBobRight::$4
  shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#4] >> 1
  shiftProtoBobRight::$6 = shiftProtoBobRight::carry#2 | shiftProtoBobRight::$5
  PROTO_BOB[shiftProtoBobRight::j#4] = shiftProtoBobRight::$6
  shiftProtoBobRight::carry#1 = shiftProtoBobRight::new_carry#0
  shiftProtoBobRight::$7 = shiftProtoBobRight::j#4 >= $30
  if(shiftProtoBobRight::$7) goto shiftProtoBobRight::@6
  to:shiftProtoBobRight::@8
shiftProtoBobRight::@6: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@5
  shiftProtoBobRight::carry#8 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::carry#1 )
  shiftProtoBobRight::i#4 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::i#6 )
  shiftProtoBobRight::j#5 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::j#4 )
  shiftProtoBobRight::j#1 = shiftProtoBobRight::j#5 - $2f
  to:shiftProtoBobRight::@7
shiftProtoBobRight::@8: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@5
  shiftProtoBobRight::carry#9 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::carry#1 )
  shiftProtoBobRight::i#5 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::i#6 )
  shiftProtoBobRight::j#6 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::j#4 )
  shiftProtoBobRight::j#2 = shiftProtoBobRight::j#6 + $18
  to:shiftProtoBobRight::@7
shiftProtoBobRight::@7: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@6 shiftProtoBobRight::@8
  shiftProtoBobRight::carry#7 = phi( shiftProtoBobRight::@6/shiftProtoBobRight::carry#8, shiftProtoBobRight::@8/shiftProtoBobRight::carry#9 )
  shiftProtoBobRight::j#10 = phi( shiftProtoBobRight::@6/shiftProtoBobRight::j#1, shiftProtoBobRight::@8/shiftProtoBobRight::j#2 )
  shiftProtoBobRight::i#3 = phi( shiftProtoBobRight::@6/shiftProtoBobRight::i#4, shiftProtoBobRight::@8/shiftProtoBobRight::i#5 )
  shiftProtoBobRight::i#1 = ++ shiftProtoBobRight::i#3
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@return: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  return 
  to:@return

void shiftProtoBobDown()
shiftProtoBobDown: scope:[shiftProtoBobDown]  from prepareBobs::@5
  shiftProtoBobDown::i#0 = $17
  to:shiftProtoBobDown::@1
shiftProtoBobDown::@1: scope:[shiftProtoBobDown]  from shiftProtoBobDown shiftProtoBobDown::@2
  shiftProtoBobDown::i#2 = phi( shiftProtoBobDown/shiftProtoBobDown::i#0, shiftProtoBobDown::@2/shiftProtoBobDown::i#1 )
  shiftProtoBobDown::$0 = shiftProtoBobDown::i#2 > 0
  if(shiftProtoBobDown::$0) goto shiftProtoBobDown::@2
  to:shiftProtoBobDown::@3
shiftProtoBobDown::@2: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  shiftProtoBobDown::i#3 = phi( shiftProtoBobDown::@1/shiftProtoBobDown::i#2 )
  PROTO_BOB[shiftProtoBobDown::i#3] = (PROTO_BOB+$17)[shiftProtoBobDown::i#3]
  (PROTO_BOB+$18)[shiftProtoBobDown::i#3] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#3]
  (PROTO_BOB+$30)[shiftProtoBobDown::i#3] = 0
  shiftProtoBobDown::i#1 = -- shiftProtoBobDown::i#3
  to:shiftProtoBobDown::@1
shiftProtoBobDown::@3: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  PROTO_BOB[0] = 0
  PROTO_BOB[$18] = 0
  PROTO_BOB[$30] = 0
  to:shiftProtoBobDown::@return
shiftProtoBobDown::@return: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@3
  return 
  to:@return

byte bobCharsetFindOrAddGlyph(byte* bobCharsetFindOrAddGlyph::bob_glyph)
bobCharsetFindOrAddGlyph: scope:[bobCharsetFindOrAddGlyph]  from prepareBobs::@7 prepareBobs::@9
  bobCharsetFindOrAddGlyph::bob_glyph#10 = phi( prepareBobs::@7/bobCharsetFindOrAddGlyph::bob_glyph#1, prepareBobs::@9/bobCharsetFindOrAddGlyph::bob_glyph#0 )
  bob_charset_next_id#25 = phi( prepareBobs::@7/bob_charset_next_id#23, prepareBobs::@9/bob_charset_next_id#2 )
  bobCharsetFindOrAddGlyph::glyph_cursor#0 = BOB_CHARSET
  bobCharsetFindOrAddGlyph::glyph_id#0 = 0
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@1: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph bobCharsetFindOrAddGlyph::@10
  bobCharsetFindOrAddGlyph::bob_glyph#9 = phi( bobCharsetFindOrAddGlyph/bobCharsetFindOrAddGlyph::bob_glyph#10, bobCharsetFindOrAddGlyph::@10/bobCharsetFindOrAddGlyph::bob_glyph#11 )
  bobCharsetFindOrAddGlyph::glyph_cursor#12 = phi( bobCharsetFindOrAddGlyph/bobCharsetFindOrAddGlyph::glyph_cursor#0, bobCharsetFindOrAddGlyph::@10/bobCharsetFindOrAddGlyph::glyph_cursor#1 )
  bob_charset_next_id#16 = phi( bobCharsetFindOrAddGlyph/bob_charset_next_id#25, bobCharsetFindOrAddGlyph::@10/bob_charset_next_id#26 )
  bobCharsetFindOrAddGlyph::glyph_id#2 = phi( bobCharsetFindOrAddGlyph/bobCharsetFindOrAddGlyph::glyph_id#0, bobCharsetFindOrAddGlyph::@10/bobCharsetFindOrAddGlyph::glyph_id#1 )
  bobCharsetFindOrAddGlyph::$0 = bobCharsetFindOrAddGlyph::glyph_id#2 != bob_charset_next_id#16
  if(bobCharsetFindOrAddGlyph::$0) goto bobCharsetFindOrAddGlyph::@2
  to:bobCharsetFindOrAddGlyph::@3
bobCharsetFindOrAddGlyph::@2: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1
  bob_charset_next_id#45 = phi( bobCharsetFindOrAddGlyph::@1/bob_charset_next_id#16 )
  bobCharsetFindOrAddGlyph::glyph_id#12 = phi( bobCharsetFindOrAddGlyph::@1/bobCharsetFindOrAddGlyph::glyph_id#2 )
  bobCharsetFindOrAddGlyph::bob_glyph#6 = phi( bobCharsetFindOrAddGlyph::@1/bobCharsetFindOrAddGlyph::bob_glyph#9 )
  bobCharsetFindOrAddGlyph::glyph_cursor#8 = phi( bobCharsetFindOrAddGlyph::@1/bobCharsetFindOrAddGlyph::glyph_cursor#12 )
  bobCharsetFindOrAddGlyph::found#0 = 1
  bobCharsetFindOrAddGlyph::i#0 = 0
  to:bobCharsetFindOrAddGlyph::@4
bobCharsetFindOrAddGlyph::@3: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1
  bobCharsetFindOrAddGlyph::glyph_id#11 = phi( bobCharsetFindOrAddGlyph::@1/bobCharsetFindOrAddGlyph::glyph_id#2 )
  bob_charset_next_id#36 = phi( bobCharsetFindOrAddGlyph::@1/bob_charset_next_id#16 )
  bobCharsetFindOrAddGlyph::glyph_cursor#11 = phi( bobCharsetFindOrAddGlyph::@1/bobCharsetFindOrAddGlyph::glyph_cursor#12 )
  bobCharsetFindOrAddGlyph::bob_glyph#8 = phi( bobCharsetFindOrAddGlyph::@1/bobCharsetFindOrAddGlyph::bob_glyph#9 )
  bobCharsetFindOrAddGlyph::i1#0 = 0
  to:bobCharsetFindOrAddGlyph::@11
bobCharsetFindOrAddGlyph::@4: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2 bobCharsetFindOrAddGlyph::@6
  bob_charset_next_id#41 = phi( bobCharsetFindOrAddGlyph::@2/bob_charset_next_id#45, bobCharsetFindOrAddGlyph::@6/bob_charset_next_id#46 )
  bobCharsetFindOrAddGlyph::glyph_id#8 = phi( bobCharsetFindOrAddGlyph::@2/bobCharsetFindOrAddGlyph::glyph_id#12, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::glyph_id#13 )
  bobCharsetFindOrAddGlyph::found#3 = phi( bobCharsetFindOrAddGlyph::@2/bobCharsetFindOrAddGlyph::found#0, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::found#4 )
  bobCharsetFindOrAddGlyph::bob_glyph#4 = phi( bobCharsetFindOrAddGlyph::@2/bobCharsetFindOrAddGlyph::bob_glyph#6, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::bob_glyph#7 )
  bobCharsetFindOrAddGlyph::glyph_cursor#5 = phi( bobCharsetFindOrAddGlyph::@2/bobCharsetFindOrAddGlyph::glyph_cursor#8, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::glyph_cursor#9 )
  bobCharsetFindOrAddGlyph::i#2 = phi( bobCharsetFindOrAddGlyph::@2/bobCharsetFindOrAddGlyph::i#0, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::i#1 )
  bobCharsetFindOrAddGlyph::$1 = bobCharsetFindOrAddGlyph::i#2 < 8
  if(bobCharsetFindOrAddGlyph::$1) goto bobCharsetFindOrAddGlyph::@5
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@5: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@4
  bob_charset_next_id#47 = phi( bobCharsetFindOrAddGlyph::@4/bob_charset_next_id#41 )
  bobCharsetFindOrAddGlyph::glyph_id#14 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::glyph_id#8 )
  bobCharsetFindOrAddGlyph::found#5 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::found#3 )
  bobCharsetFindOrAddGlyph::bob_glyph#2 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::bob_glyph#4 )
  bobCharsetFindOrAddGlyph::i#3 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::i#2 )
  bobCharsetFindOrAddGlyph::glyph_cursor#2 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::glyph_cursor#5 )
  bobCharsetFindOrAddGlyph::$2 = bobCharsetFindOrAddGlyph::glyph_cursor#2[bobCharsetFindOrAddGlyph::i#3] != bobCharsetFindOrAddGlyph::bob_glyph#2[bobCharsetFindOrAddGlyph::i#3]
  bobCharsetFindOrAddGlyph::$3 = ! bobCharsetFindOrAddGlyph::$2
  if(bobCharsetFindOrAddGlyph::$3) goto bobCharsetFindOrAddGlyph::@6
  to:bobCharsetFindOrAddGlyph::@8
bobCharsetFindOrAddGlyph::@6: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5
  bob_charset_next_id#46 = phi( bobCharsetFindOrAddGlyph::@5/bob_charset_next_id#47 )
  bobCharsetFindOrAddGlyph::glyph_id#13 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::glyph_id#14 )
  bobCharsetFindOrAddGlyph::found#4 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::found#5 )
  bobCharsetFindOrAddGlyph::bob_glyph#7 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::bob_glyph#2 )
  bobCharsetFindOrAddGlyph::glyph_cursor#9 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::glyph_cursor#2 )
  bobCharsetFindOrAddGlyph::i#4 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::i#3 )
  bobCharsetFindOrAddGlyph::i#1 = ++ bobCharsetFindOrAddGlyph::i#4
  to:bobCharsetFindOrAddGlyph::@4
bobCharsetFindOrAddGlyph::@8: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5
  bobCharsetFindOrAddGlyph::bob_glyph#13 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::bob_glyph#2 )
  bob_charset_next_id#42 = phi( bobCharsetFindOrAddGlyph::@5/bob_charset_next_id#47 )
  bobCharsetFindOrAddGlyph::glyph_cursor#10 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::glyph_cursor#2 )
  bobCharsetFindOrAddGlyph::glyph_id#9 = phi( bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::glyph_id#14 )
  bobCharsetFindOrAddGlyph::found#1 = 0
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@7: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@4 bobCharsetFindOrAddGlyph::@8
  bobCharsetFindOrAddGlyph::bob_glyph#12 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::bob_glyph#4, bobCharsetFindOrAddGlyph::@8/bobCharsetFindOrAddGlyph::bob_glyph#13 )
  bob_charset_next_id#34 = phi( bobCharsetFindOrAddGlyph::@4/bob_charset_next_id#41, bobCharsetFindOrAddGlyph::@8/bob_charset_next_id#42 )
  bobCharsetFindOrAddGlyph::glyph_cursor#6 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::glyph_cursor#5, bobCharsetFindOrAddGlyph::@8/bobCharsetFindOrAddGlyph::glyph_cursor#10 )
  bobCharsetFindOrAddGlyph::glyph_id#6 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::glyph_id#8, bobCharsetFindOrAddGlyph::@8/bobCharsetFindOrAddGlyph::glyph_id#9 )
  bobCharsetFindOrAddGlyph::found#2 = phi( bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::found#3, bobCharsetFindOrAddGlyph::@8/bobCharsetFindOrAddGlyph::found#1 )
  bobCharsetFindOrAddGlyph::$6 = 0 != bobCharsetFindOrAddGlyph::found#2
  bobCharsetFindOrAddGlyph::$4 = ! bobCharsetFindOrAddGlyph::$6
  if(bobCharsetFindOrAddGlyph::$4) goto bobCharsetFindOrAddGlyph::@10
  to:bobCharsetFindOrAddGlyph::@9
bobCharsetFindOrAddGlyph::@10: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  bobCharsetFindOrAddGlyph::bob_glyph#11 = phi( bobCharsetFindOrAddGlyph::@7/bobCharsetFindOrAddGlyph::bob_glyph#12 )
  bob_charset_next_id#26 = phi( bobCharsetFindOrAddGlyph::@7/bob_charset_next_id#34 )
  bobCharsetFindOrAddGlyph::glyph_cursor#3 = phi( bobCharsetFindOrAddGlyph::@7/bobCharsetFindOrAddGlyph::glyph_cursor#6 )
  bobCharsetFindOrAddGlyph::glyph_id#3 = phi( bobCharsetFindOrAddGlyph::@7/bobCharsetFindOrAddGlyph::glyph_id#6 )
  bobCharsetFindOrAddGlyph::glyph_id#1 = ++ bobCharsetFindOrAddGlyph::glyph_id#3
  bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#3 + 8
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@9: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  bob_charset_next_id#27 = phi( bobCharsetFindOrAddGlyph::@7/bob_charset_next_id#34 )
  bobCharsetFindOrAddGlyph::glyph_id#4 = phi( bobCharsetFindOrAddGlyph::@7/bobCharsetFindOrAddGlyph::glyph_id#6 )
  bobCharsetFindOrAddGlyph::return#2 = bobCharsetFindOrAddGlyph::glyph_id#4
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@return: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@13 bobCharsetFindOrAddGlyph::@9
  bob_charset_next_id#17 = phi( bobCharsetFindOrAddGlyph::@13/bob_charset_next_id#7, bobCharsetFindOrAddGlyph::@9/bob_charset_next_id#27 )
  bobCharsetFindOrAddGlyph::return#6 = phi( bobCharsetFindOrAddGlyph::@13/bobCharsetFindOrAddGlyph::return#4, bobCharsetFindOrAddGlyph::@9/bobCharsetFindOrAddGlyph::return#2 )
  bobCharsetFindOrAddGlyph::return#3 = bobCharsetFindOrAddGlyph::return#6
  bob_charset_next_id#6 = bob_charset_next_id#17
  return 
  to:@return
bobCharsetFindOrAddGlyph::@11: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@12 bobCharsetFindOrAddGlyph::@3
  bobCharsetFindOrAddGlyph::glyph_id#7 = phi( bobCharsetFindOrAddGlyph::@12/bobCharsetFindOrAddGlyph::glyph_id#10, bobCharsetFindOrAddGlyph::@3/bobCharsetFindOrAddGlyph::glyph_id#11 )
  bob_charset_next_id#28 = phi( bobCharsetFindOrAddGlyph::@12/bob_charset_next_id#35, bobCharsetFindOrAddGlyph::@3/bob_charset_next_id#36 )
  bobCharsetFindOrAddGlyph::glyph_cursor#7 = phi( bobCharsetFindOrAddGlyph::@12/bobCharsetFindOrAddGlyph::glyph_cursor#4, bobCharsetFindOrAddGlyph::@3/bobCharsetFindOrAddGlyph::glyph_cursor#11 )
  bobCharsetFindOrAddGlyph::bob_glyph#5 = phi( bobCharsetFindOrAddGlyph::@12/bobCharsetFindOrAddGlyph::bob_glyph#3, bobCharsetFindOrAddGlyph::@3/bobCharsetFindOrAddGlyph::bob_glyph#8 )
  bobCharsetFindOrAddGlyph::i1#2 = phi( bobCharsetFindOrAddGlyph::@12/bobCharsetFindOrAddGlyph::i1#1, bobCharsetFindOrAddGlyph::@3/bobCharsetFindOrAddGlyph::i1#0 )
  bobCharsetFindOrAddGlyph::$5 = bobCharsetFindOrAddGlyph::i1#2 < 8
  if(bobCharsetFindOrAddGlyph::$5) goto bobCharsetFindOrAddGlyph::@12
  to:bobCharsetFindOrAddGlyph::@13
bobCharsetFindOrAddGlyph::@12: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@11
  bobCharsetFindOrAddGlyph::glyph_id#10 = phi( bobCharsetFindOrAddGlyph::@11/bobCharsetFindOrAddGlyph::glyph_id#7 )
  bob_charset_next_id#35 = phi( bobCharsetFindOrAddGlyph::@11/bob_charset_next_id#28 )
  bobCharsetFindOrAddGlyph::glyph_cursor#4 = phi( bobCharsetFindOrAddGlyph::@11/bobCharsetFindOrAddGlyph::glyph_cursor#7 )
  bobCharsetFindOrAddGlyph::i1#3 = phi( bobCharsetFindOrAddGlyph::@11/bobCharsetFindOrAddGlyph::i1#2 )
  bobCharsetFindOrAddGlyph::bob_glyph#3 = phi( bobCharsetFindOrAddGlyph::@11/bobCharsetFindOrAddGlyph::bob_glyph#5 )
  bobCharsetFindOrAddGlyph::glyph_cursor#4[bobCharsetFindOrAddGlyph::i1#3] = bobCharsetFindOrAddGlyph::bob_glyph#3[bobCharsetFindOrAddGlyph::i1#3]
  bobCharsetFindOrAddGlyph::i1#1 = ++ bobCharsetFindOrAddGlyph::i1#3
  to:bobCharsetFindOrAddGlyph::@11
bobCharsetFindOrAddGlyph::@13: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@11
  bobCharsetFindOrAddGlyph::glyph_id#5 = phi( bobCharsetFindOrAddGlyph::@11/bobCharsetFindOrAddGlyph::glyph_id#7 )
  bob_charset_next_id#18 = phi( bobCharsetFindOrAddGlyph::@11/bob_charset_next_id#28 )
  bob_charset_next_id#7 = ++ bob_charset_next_id#18
  bobCharsetFindOrAddGlyph::return#4 = bobCharsetFindOrAddGlyph::glyph_id#5
  to:bobCharsetFindOrAddGlyph::@return

void progress_init(byte* progress_init::line)
progress_init: scope:[progress_init]  from prepareBobs
  progress_init::line#1 = phi( prepareBobs/progress_init::line#0 )
  progress_cursor#5 = progress_init::line#1
  progress_idx#5 = 0
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  progress_idx#18 = phi( progress_init/progress_idx#5 )
  progress_cursor#17 = phi( progress_init/progress_cursor#5 )
  progress_cursor#6 = progress_cursor#17
  progress_idx#6 = progress_idx#18
  return 
  to:@return

void progress_inc()
progress_inc: scope:[progress_inc]  from prepareBobs::@12
  progress_cursor#28 = phi( prepareBobs::@12/progress_cursor#26 )
  progress_idx#19 = phi( prepareBobs::@12/progress_idx#27 )
  progress_idx#7 = ++ progress_idx#19
  progress_inc::$0 = progress_idx#7 == 8
  progress_inc::$1 = ! progress_inc::$0
  if(progress_inc::$1) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  progress_cursor#18 = phi( progress_inc/progress_cursor#28, progress_inc::@2/progress_cursor#7 )
  progress_idx#20 = phi( progress_inc/progress_idx#7, progress_inc::@2/progress_idx#8 )
  *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20]
  to:progress_inc::@return
progress_inc::@2: scope:[progress_inc]  from progress_inc
  progress_cursor#19 = phi( progress_inc/progress_cursor#28 )
  *progress_cursor#19 = progress_inc::progress_chars[8]
  progress_cursor#7 = ++ progress_cursor#19
  progress_idx#8 = 0
  to:progress_inc::@1
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  progress_cursor#20 = phi( progress_inc::@1/progress_cursor#18 )
  progress_idx#21 = phi( progress_inc::@1/progress_idx#20 )
  progress_idx#9 = progress_idx#21
  progress_cursor#8 = progress_cursor#20
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  renderBobCleanupNext#7 = (byte**) 0
  bob_charset_next_id#8 = 0
  progress_cursor#9 = (byte*) 0
  progress_idx#10 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  renderBobCleanupNext#21 = phi( __start::__init1/renderBobCleanupNext#7 )
  bob_charset_next_id#29 = phi( __start::__init1/bob_charset_next_id#8 )
  progress_idx#29 = phi( __start::__init1/progress_idx#10 )
  progress_cursor#29 = phi( __start::__init1/progress_cursor#9 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  renderBobCleanupNext#16 = phi( __start::@1/renderBobCleanupNext#2 )
  bob_charset_next_id#19 = phi( __start::@1/bob_charset_next_id#1 )
  progress_idx#22 = phi( __start::@1/progress_idx#1 )
  progress_cursor#21 = phi( __start::@1/progress_cursor#1 )
  progress_cursor#10 = progress_cursor#21
  progress_idx#11 = progress_idx#22
  bob_charset_next_id#9 = bob_charset_next_id#19
  renderBobCleanupNext#8 = renderBobCleanupNext#16
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  progress_idx#23 = phi( __start::@2/progress_idx#11 )
  progress_cursor#22 = phi( __start::@2/progress_cursor#10 )
  bob_charset_next_id#20 = phi( __start::@2/bob_charset_next_id#9 )
  renderBobCleanupNext#17 = phi( __start::@2/renderBobCleanupNext#8 )
  renderBobCleanupNext#9 = renderBobCleanupNext#17
  bob_charset_next_id#10 = bob_charset_next_id#20
  progress_cursor#11 = progress_cursor#22
  progress_idx#12 = progress_idx#23
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BOB_CHARSET = (byte*)$2000
const nomodify byte* BOB_SCREEN = (byte*)$2800
const nomodify byte BOB_SHIFTS_X = 4
const nomodify byte BOB_SHIFTS_Y = 8
const nomodify byte BOB_SUBTABLE_SIZE = BOB_SHIFTS_X*BOB_SHIFTS_Y
const byte* BOB_TABLES[9*8*4]  = { fill( 9*8*4, 0) }
const nomodify byte* BORDER_COLOR = (byte*)$d020
const nomodify byte* CHARSET_BASIC = (byte*)$1000
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const signed byte* COS = SIN+$40
const nomodify byte* D018 = (byte*)$d018
const nomodify byte KEY_SPACE = $3c
const word* MUL40[$20]  = { fill( $20, 0) }
const nomodify byte NUM_BOBS = $14
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A = 0
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const to_nomodify byte* PROTO_BOB[3*3*8]  = kickasm {{ .var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* RASTER = (byte*)$d012
const byte** RENDERBOB_CLEANUP[NUM_BOBS]  = { fill( NUM_BOBS, 0) }
const nomodify byte* SCREEN_BASIC = (byte*)$400
const signed byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
const byte SIZEOF_POINTER = 2
const byte SIZEOF_WORD = 2
void __start()
byte bobCharsetFindOrAddGlyph(byte* bobCharsetFindOrAddGlyph::bob_glyph)
bool~ bobCharsetFindOrAddGlyph::$0
bool~ bobCharsetFindOrAddGlyph::$1
bool~ bobCharsetFindOrAddGlyph::$2
bool~ bobCharsetFindOrAddGlyph::$3
bool~ bobCharsetFindOrAddGlyph::$4
bool~ bobCharsetFindOrAddGlyph::$5
bool~ bobCharsetFindOrAddGlyph::$6
byte* bobCharsetFindOrAddGlyph::bob_glyph
byte* bobCharsetFindOrAddGlyph::bob_glyph#0
byte* bobCharsetFindOrAddGlyph::bob_glyph#1
byte* bobCharsetFindOrAddGlyph::bob_glyph#10
byte* bobCharsetFindOrAddGlyph::bob_glyph#11
byte* bobCharsetFindOrAddGlyph::bob_glyph#12
byte* bobCharsetFindOrAddGlyph::bob_glyph#13
byte* bobCharsetFindOrAddGlyph::bob_glyph#2
byte* bobCharsetFindOrAddGlyph::bob_glyph#3
byte* bobCharsetFindOrAddGlyph::bob_glyph#4
byte* bobCharsetFindOrAddGlyph::bob_glyph#5
byte* bobCharsetFindOrAddGlyph::bob_glyph#6
byte* bobCharsetFindOrAddGlyph::bob_glyph#7
byte* bobCharsetFindOrAddGlyph::bob_glyph#8
byte* bobCharsetFindOrAddGlyph::bob_glyph#9
byte bobCharsetFindOrAddGlyph::found
byte bobCharsetFindOrAddGlyph::found#0
byte bobCharsetFindOrAddGlyph::found#1
byte bobCharsetFindOrAddGlyph::found#2
byte bobCharsetFindOrAddGlyph::found#3
byte bobCharsetFindOrAddGlyph::found#4
byte bobCharsetFindOrAddGlyph::found#5
byte* bobCharsetFindOrAddGlyph::glyph_cursor
byte* bobCharsetFindOrAddGlyph::glyph_cursor#0
byte* bobCharsetFindOrAddGlyph::glyph_cursor#1
byte* bobCharsetFindOrAddGlyph::glyph_cursor#10
byte* bobCharsetFindOrAddGlyph::glyph_cursor#11
byte* bobCharsetFindOrAddGlyph::glyph_cursor#12
byte* bobCharsetFindOrAddGlyph::glyph_cursor#2
byte* bobCharsetFindOrAddGlyph::glyph_cursor#3
byte* bobCharsetFindOrAddGlyph::glyph_cursor#4
byte* bobCharsetFindOrAddGlyph::glyph_cursor#5
byte* bobCharsetFindOrAddGlyph::glyph_cursor#6
byte* bobCharsetFindOrAddGlyph::glyph_cursor#7
byte* bobCharsetFindOrAddGlyph::glyph_cursor#8
byte* bobCharsetFindOrAddGlyph::glyph_cursor#9
byte bobCharsetFindOrAddGlyph::glyph_id
byte bobCharsetFindOrAddGlyph::glyph_id#0
byte bobCharsetFindOrAddGlyph::glyph_id#1
byte bobCharsetFindOrAddGlyph::glyph_id#10
byte bobCharsetFindOrAddGlyph::glyph_id#11
byte bobCharsetFindOrAddGlyph::glyph_id#12
byte bobCharsetFindOrAddGlyph::glyph_id#13
byte bobCharsetFindOrAddGlyph::glyph_id#14
byte bobCharsetFindOrAddGlyph::glyph_id#2
byte bobCharsetFindOrAddGlyph::glyph_id#3
byte bobCharsetFindOrAddGlyph::glyph_id#4
byte bobCharsetFindOrAddGlyph::glyph_id#5
byte bobCharsetFindOrAddGlyph::glyph_id#6
byte bobCharsetFindOrAddGlyph::glyph_id#7
byte bobCharsetFindOrAddGlyph::glyph_id#8
byte bobCharsetFindOrAddGlyph::glyph_id#9
byte bobCharsetFindOrAddGlyph::i
byte bobCharsetFindOrAddGlyph::i#0
byte bobCharsetFindOrAddGlyph::i#1
byte bobCharsetFindOrAddGlyph::i#2
byte bobCharsetFindOrAddGlyph::i#3
byte bobCharsetFindOrAddGlyph::i#4
byte bobCharsetFindOrAddGlyph::i1
byte bobCharsetFindOrAddGlyph::i1#0
byte bobCharsetFindOrAddGlyph::i1#1
byte bobCharsetFindOrAddGlyph::i1#2
byte bobCharsetFindOrAddGlyph::i1#3
byte bobCharsetFindOrAddGlyph::return
byte bobCharsetFindOrAddGlyph::return#0
byte bobCharsetFindOrAddGlyph::return#1
byte bobCharsetFindOrAddGlyph::return#2
byte bobCharsetFindOrAddGlyph::return#3
byte bobCharsetFindOrAddGlyph::return#4
byte bobCharsetFindOrAddGlyph::return#5
byte bobCharsetFindOrAddGlyph::return#6
byte bob_charset_next_id
byte bob_charset_next_id#0
byte bob_charset_next_id#1
byte bob_charset_next_id#10
byte bob_charset_next_id#11
byte bob_charset_next_id#12
byte bob_charset_next_id#13
byte bob_charset_next_id#14
byte bob_charset_next_id#15
byte bob_charset_next_id#16
byte bob_charset_next_id#17
byte bob_charset_next_id#18
byte bob_charset_next_id#19
byte bob_charset_next_id#2
byte bob_charset_next_id#20
byte bob_charset_next_id#21
byte bob_charset_next_id#22
byte bob_charset_next_id#23
byte bob_charset_next_id#24
byte bob_charset_next_id#25
byte bob_charset_next_id#26
byte bob_charset_next_id#27
byte bob_charset_next_id#28
byte bob_charset_next_id#29
byte bob_charset_next_id#3
byte bob_charset_next_id#30
byte bob_charset_next_id#31
byte bob_charset_next_id#32
byte bob_charset_next_id#33
byte bob_charset_next_id#34
byte bob_charset_next_id#35
byte bob_charset_next_id#36
byte bob_charset_next_id#37
byte bob_charset_next_id#38
byte bob_charset_next_id#39
byte bob_charset_next_id#4
byte bob_charset_next_id#40
byte bob_charset_next_id#41
byte bob_charset_next_id#42
byte bob_charset_next_id#43
byte bob_charset_next_id#44
byte bob_charset_next_id#45
byte bob_charset_next_id#46
byte bob_charset_next_id#47
byte bob_charset_next_id#48
byte bob_charset_next_id#49
byte bob_charset_next_id#5
byte bob_charset_next_id#50
byte bob_charset_next_id#51
byte bob_charset_next_id#52
byte bob_charset_next_id#53
byte bob_charset_next_id#54
byte bob_charset_next_id#55
byte bob_charset_next_id#56
byte bob_charset_next_id#57
byte bob_charset_next_id#58
byte bob_charset_next_id#59
byte bob_charset_next_id#6
byte bob_charset_next_id#60
byte bob_charset_next_id#61
byte bob_charset_next_id#62
byte bob_charset_next_id#63
byte bob_charset_next_id#64
byte bob_charset_next_id#65
byte bob_charset_next_id#66
byte bob_charset_next_id#67
byte bob_charset_next_id#68
byte bob_charset_next_id#69
byte bob_charset_next_id#7
byte bob_charset_next_id#70
byte bob_charset_next_id#71
byte bob_charset_next_id#72
byte bob_charset_next_id#73
byte bob_charset_next_id#74
byte bob_charset_next_id#75
byte bob_charset_next_id#76
byte bob_charset_next_id#77
byte bob_charset_next_id#78
byte bob_charset_next_id#8
byte bob_charset_next_id#9
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
number~ keyboard_key_pressed::$0
byte~ keyboard_key_pressed::$1
byte~ keyboard_key_pressed::$2
byte~ keyboard_key_pressed::$3
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::colidx#0
byte keyboard_key_pressed::colidx#1
byte keyboard_key_pressed::key
byte keyboard_key_pressed::key#0
byte keyboard_key_pressed::key#1
byte keyboard_key_pressed::key#2
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0
byte keyboard_key_pressed::return#1
byte keyboard_key_pressed::return#2
byte keyboard_key_pressed::return#3
byte keyboard_key_pressed::return#4
byte keyboard_key_pressed::return#5
byte keyboard_key_pressed::return#6
byte keyboard_key_pressed::rowidx
byte keyboard_key_pressed::rowidx#0
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte~ keyboard_matrix_read::$0
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0
byte keyboard_matrix_read::return#1
byte keyboard_matrix_read::return#2
byte keyboard_matrix_read::return#3
byte keyboard_matrix_read::return#4
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::row_pressed_bits#0
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0
byte keyboard_matrix_read::rowid#1
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
signed word~ main::$10
number~ main::$11
signed word~ main::$12
number~ main::$13
number~ main::$14
byte~ main::$15
byte~ main::$16
bool~ main::$18
byte~ main::$19
bool~ main::$20
byte~ main::$21
bool~ main::$22
bool~ main::$23
byte~ main::$4
byte~ main::$7
bool~ main::$8
byte main::a
byte main::a#0
byte main::a#1
byte main::a#2
byte main::a#3
byte main::a#4
byte main::a#5
byte main::angle
byte main::angle#0
byte main::angle#1
byte main::angle#10
byte main::angle#11
byte main::angle#2
byte main::angle#3
byte main::angle#4
byte main::angle#5
byte main::angle#6
byte main::angle#7
byte main::angle#8
byte main::angle#9
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
signed byte main::r
signed byte main::r#0
signed byte main::r#1
signed byte main::r#2
signed byte main::r#3
signed byte main::r#4
signed byte main::r#5
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
number~ main::toD0182_$0
number~ main::toD0182_$1
number~ main::toD0182_$2
byte~ main::toD0182_$3
number~ main::toD0182_$4
number~ main::toD0182_$5
number~ main::toD0182_$6
word~ main::toD0182_$7
byte* main::toD0182_gfx
byte* main::toD0182_gfx#0
byte* main::toD0182_gfx#1
byte main::toD0182_return
byte main::toD0182_return#0
byte main::toD0182_return#1
byte main::toD0182_return#2
byte main::toD0182_return#3
byte* main::toD0182_screen
byte* main::toD0182_screen#0
byte* main::toD0182_screen#1
byte~ main::vicSelectGfxBank1_$0
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_gfx#0
byte* main::vicSelectGfxBank1_gfx#1
byte~ main::vicSelectGfxBank1_toDd001_$0
number~ main::vicSelectGfxBank1_toDd001_$1
number~ main::vicSelectGfxBank1_toDd001_$2
byte* main::vicSelectGfxBank1_toDd001_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx#0
byte* main::vicSelectGfxBank1_toDd001_gfx#1
byte main::vicSelectGfxBank1_toDd001_return
byte main::vicSelectGfxBank1_toDd001_return#0
byte main::vicSelectGfxBank1_toDd001_return#1
byte main::vicSelectGfxBank1_toDd001_return#2
byte main::vicSelectGfxBank1_toDd001_return#3
byte~ main::vicSelectGfxBank2_$0
byte* main::vicSelectGfxBank2_gfx
byte* main::vicSelectGfxBank2_gfx#0
byte* main::vicSelectGfxBank2_gfx#1
byte~ main::vicSelectGfxBank2_toDd001_$0
number~ main::vicSelectGfxBank2_toDd001_$1
number~ main::vicSelectGfxBank2_toDd001_$2
byte* main::vicSelectGfxBank2_toDd001_gfx
byte* main::vicSelectGfxBank2_toDd001_gfx#0
byte* main::vicSelectGfxBank2_toDd001_gfx#1
byte main::vicSelectGfxBank2_toDd001_return
byte main::vicSelectGfxBank2_toDd001_return#0
byte main::vicSelectGfxBank2_toDd001_return#1
byte main::vicSelectGfxBank2_toDd001_return#2
byte main::vicSelectGfxBank2_toDd001_return#3
signed word main::x
signed word main::x#0
signed word main::x#1
signed word main::y
signed word main::y#0
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
signed word~ mulf8s::$1
signed byte mulf8s::a
signed byte mulf8s::a#0
signed byte mulf8s::a#1
signed byte mulf8s::a#2
signed byte mulf8s::b
signed byte mulf8s::b#0
signed byte mulf8s::b#1
signed byte mulf8s::b#2
signed byte mulf8s::b#3
signed byte mulf8s::b#4
signed byte mulf8s::b#5
signed byte mulf8s::mulf8s_prepare1_a
signed byte mulf8s::mulf8s_prepare1_a#0
signed byte mulf8s::mulf8s_prepare1_a#1
signed word mulf8s::return
signed word mulf8s::return#0
signed word mulf8s::return#1
signed word mulf8s::return#2
signed word mulf8s::return#3
signed word mulf8s::return#4
signed word mulf8s::return#5
signed word mulf8s::return#6
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
word~ mulf8s_prepared::$0
bool~ mulf8s_prepared::$1
byte~ mulf8s_prepared::$10
byte~ mulf8s_prepared::$11
byte~ mulf8s_prepared::$12
byte~ mulf8s_prepared::$13
byte~ mulf8s_prepared::$14
bool~ mulf8s_prepared::$2
bool~ mulf8s_prepared::$3
bool~ mulf8s_prepared::$4
byte~ mulf8s_prepared::$6
byte~ mulf8s_prepared::$7
byte~ mulf8s_prepared::$9
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0
signed byte mulf8s_prepared::b#1
signed byte mulf8s_prepared::b#2
signed byte mulf8s_prepared::b#3
signed byte mulf8s_prepared::b#4
word mulf8s_prepared::m
word mulf8s_prepared::m#0
word mulf8s_prepared::m#1
word mulf8s_prepared::m#2
word mulf8s_prepared::m#3
word mulf8s_prepared::m#4
word mulf8s_prepared::m#5
word mulf8s_prepared::m#6
const nomodify signed byte* mulf8s_prepared::memA = (signed byte*)$fd
signed word mulf8s_prepared::return
signed word mulf8s_prepared::return#0
signed word mulf8s_prepared::return#1
signed word mulf8s_prepared::return#2
signed word mulf8s_prepared::return#3
signed word mulf8s_prepared::return#4
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#0
byte mulf8u_prepare::a#1
const nomodify byte* mulf8u_prepare::memA = (byte*)$fd
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0
byte mulf8u_prepared::b#1
const nomodify byte* mulf8u_prepared::memB = (byte*)$ff
const nomodify byte* mulf8u_prepared::resL = (byte*)$fe
word mulf8u_prepared::return
word mulf8u_prepared::return#0
word mulf8u_prepared::return#1
word mulf8u_prepared::return#2
word mulf8u_prepared::return#3
word mulf8u_prepared::return#4
void mulf_init()
bool~ mulf_init::$0
number~ mulf_init::$1
bool~ mulf_init::$10
bool~ mulf_init::$2
bool~ mulf_init::$3
byte~ mulf_init::$4
byte~ mulf_init::$5
word~ mulf_init::$6
bool~ mulf_init::$7
byte~ mulf_init::$8
bool~ mulf_init::$9
byte mulf_init::c
byte mulf_init::c#0
byte mulf_init::c#1
byte mulf_init::c#2
byte mulf_init::c#3
byte mulf_init::c#4
byte mulf_init::c#5
byte mulf_init::dir
byte mulf_init::dir#0
byte mulf_init::dir#1
byte mulf_init::dir#2
byte mulf_init::dir#3
byte mulf_init::dir#4
word mulf_init::sqr
word mulf_init::sqr#0
word mulf_init::sqr#1
word mulf_init::sqr#2
word mulf_init::sqr#3
word mulf_init::sqr#4
word mulf_init::sqr#5
word mulf_init::sqr#6
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#0
byte* mulf_init::sqr1_hi#1
byte* mulf_init::sqr1_hi#2
byte* mulf_init::sqr1_hi#3
byte* mulf_init::sqr1_hi#4
byte* mulf_init::sqr1_hi#5
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#0
byte* mulf_init::sqr1_lo#1
byte* mulf_init::sqr1_lo#2
byte* mulf_init::sqr1_lo#3
byte* mulf_init::sqr1_lo#4
byte* mulf_init::sqr1_lo#5
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#0
byte* mulf_init::sqr2_hi#1
byte* mulf_init::sqr2_hi#2
byte* mulf_init::sqr2_hi#3
byte* mulf_init::sqr2_hi#4
byte* mulf_init::sqr2_hi#5
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#0
byte* mulf_init::sqr2_lo#1
byte* mulf_init::sqr2_lo#2
byte* mulf_init::sqr2_lo#3
byte* mulf_init::sqr2_lo#4
byte* mulf_init::sqr2_lo#5
byte mulf_init::x_2
byte mulf_init::x_2#0
byte mulf_init::x_2#1
byte mulf_init::x_2#2
byte mulf_init::x_2#3
byte mulf_init::x_2#4
byte mulf_init::x_2#5
byte mulf_init::x_255
byte mulf_init::x_255#0
byte mulf_init::x_255#1
byte mulf_init::x_255#2
byte mulf_init::x_255#3
byte mulf_init::x_255#4
byte mulf_init::x_255#5
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void prepareBobs()
bool~ prepareBobs::$2
bool~ prepareBobs::$3
byte*~ prepareBobs::$4
bool~ prepareBobs::$5
byte~ prepareBobs::$6
byte* prepareBobs::bob_glyph
byte* prepareBobs::bob_glyph#0
byte* prepareBobs::bob_glyph#1
byte* prepareBobs::bob_glyph#2
byte* prepareBobs::bob_glyph#3
byte* prepareBobs::bob_glyph#4
byte* prepareBobs::bob_glyph#5
byte* prepareBobs::bob_table
byte* prepareBobs::bob_table#0
byte* prepareBobs::bob_table#1
byte* prepareBobs::bob_table#2
byte* prepareBobs::bob_table#3
byte* prepareBobs::bob_table#4
byte* prepareBobs::bob_table#5
byte prepareBobs::bob_table_idx
byte prepareBobs::bob_table_idx#0
byte prepareBobs::bob_table_idx#1
byte prepareBobs::bob_table_idx#10
byte prepareBobs::bob_table_idx#11
byte prepareBobs::bob_table_idx#12
byte prepareBobs::bob_table_idx#13
byte prepareBobs::bob_table_idx#14
byte prepareBobs::bob_table_idx#2
byte prepareBobs::bob_table_idx#3
byte prepareBobs::bob_table_idx#4
byte prepareBobs::bob_table_idx#5
byte prepareBobs::bob_table_idx#6
byte prepareBobs::bob_table_idx#7
byte prepareBobs::bob_table_idx#8
byte prepareBobs::bob_table_idx#9
byte prepareBobs::cell
byte prepareBobs::cell#0
byte prepareBobs::cell#1
byte prepareBobs::cell#2
byte prepareBobs::cell#3
byte prepareBobs::cell#4
byte prepareBobs::cell#5
byte prepareBobs::shift_x
byte prepareBobs::shift_x#0
byte prepareBobs::shift_x#1
byte prepareBobs::shift_x#10
byte prepareBobs::shift_x#2
byte prepareBobs::shift_x#3
byte prepareBobs::shift_x#4
byte prepareBobs::shift_x#5
byte prepareBobs::shift_x#6
byte prepareBobs::shift_x#7
byte prepareBobs::shift_x#8
byte prepareBobs::shift_x#9
byte prepareBobs::shift_y
byte prepareBobs::shift_y#0
byte prepareBobs::shift_y#1
byte prepareBobs::shift_y#10
byte prepareBobs::shift_y#11
byte prepareBobs::shift_y#12
byte prepareBobs::shift_y#13
byte prepareBobs::shift_y#14
byte prepareBobs::shift_y#2
byte prepareBobs::shift_y#3
byte prepareBobs::shift_y#4
byte prepareBobs::shift_y#5
byte prepareBobs::shift_y#6
byte prepareBobs::shift_y#7
byte prepareBobs::shift_y#8
byte prepareBobs::shift_y#9
byte* progress_cursor
byte* progress_cursor#0
byte* progress_cursor#1
byte* progress_cursor#10
byte* progress_cursor#11
byte* progress_cursor#12
byte* progress_cursor#13
byte* progress_cursor#14
byte* progress_cursor#15
byte* progress_cursor#16
byte* progress_cursor#17
byte* progress_cursor#18
byte* progress_cursor#19
byte* progress_cursor#2
byte* progress_cursor#20
byte* progress_cursor#21
byte* progress_cursor#22
byte* progress_cursor#23
byte* progress_cursor#24
byte* progress_cursor#25
byte* progress_cursor#26
byte* progress_cursor#27
byte* progress_cursor#28
byte* progress_cursor#29
byte* progress_cursor#3
byte* progress_cursor#30
byte* progress_cursor#31
byte* progress_cursor#32
byte* progress_cursor#33
byte* progress_cursor#34
byte* progress_cursor#35
byte* progress_cursor#36
byte* progress_cursor#37
byte* progress_cursor#38
byte* progress_cursor#39
byte* progress_cursor#4
byte* progress_cursor#40
byte* progress_cursor#41
byte* progress_cursor#42
byte* progress_cursor#43
byte* progress_cursor#44
byte* progress_cursor#45
byte* progress_cursor#46
byte* progress_cursor#47
byte* progress_cursor#48
byte* progress_cursor#49
byte* progress_cursor#5
byte* progress_cursor#50
byte* progress_cursor#51
byte* progress_cursor#52
byte* progress_cursor#53
byte* progress_cursor#54
byte* progress_cursor#55
byte* progress_cursor#56
byte* progress_cursor#57
byte* progress_cursor#58
byte* progress_cursor#59
byte* progress_cursor#6
byte* progress_cursor#60
byte* progress_cursor#61
byte* progress_cursor#62
byte* progress_cursor#63
byte* progress_cursor#64
byte* progress_cursor#65
byte* progress_cursor#66
byte* progress_cursor#67
byte* progress_cursor#68
byte* progress_cursor#69
byte* progress_cursor#7
byte* progress_cursor#70
byte* progress_cursor#71
byte* progress_cursor#8
byte* progress_cursor#9
byte progress_idx
byte progress_idx#0
byte progress_idx#1
byte progress_idx#10
byte progress_idx#11
byte progress_idx#12
byte progress_idx#13
byte progress_idx#14
byte progress_idx#15
byte progress_idx#16
byte progress_idx#17
byte progress_idx#18
byte progress_idx#19
byte progress_idx#2
byte progress_idx#20
byte progress_idx#21
byte progress_idx#22
byte progress_idx#23
byte progress_idx#24
byte progress_idx#25
byte progress_idx#26
byte progress_idx#27
byte progress_idx#28
byte progress_idx#29
byte progress_idx#3
byte progress_idx#30
byte progress_idx#31
byte progress_idx#32
byte progress_idx#33
byte progress_idx#34
byte progress_idx#35
byte progress_idx#36
byte progress_idx#37
byte progress_idx#38
byte progress_idx#39
byte progress_idx#4
byte progress_idx#40
byte progress_idx#41
byte progress_idx#42
byte progress_idx#43
byte progress_idx#44
byte progress_idx#45
byte progress_idx#46
byte progress_idx#47
byte progress_idx#48
byte progress_idx#49
byte progress_idx#5
byte progress_idx#50
byte progress_idx#51
byte progress_idx#52
byte progress_idx#53
byte progress_idx#54
byte progress_idx#55
byte progress_idx#56
byte progress_idx#57
byte progress_idx#58
byte progress_idx#59
byte progress_idx#6
byte progress_idx#60
byte progress_idx#61
byte progress_idx#62
byte progress_idx#63
byte progress_idx#64
byte progress_idx#65
byte progress_idx#66
byte progress_idx#67
byte progress_idx#68
byte progress_idx#69
byte progress_idx#7
byte progress_idx#70
byte progress_idx#71
byte progress_idx#8
byte progress_idx#9
void progress_inc()
bool~ progress_inc::$0
bool~ progress_inc::$1
const to_nomodify byte* progress_inc::progress_chars[]  = { $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0 }
void progress_init(byte* progress_init::line)
byte* progress_init::line
byte* progress_init::line#0
byte* progress_init::line#1
void renderBob(byte renderBob::xpos , byte renderBob::ypos)
byte~ renderBob::$0
byte~ renderBob::$1
byte*~ renderBob::$2
byte*~ renderBob::$3
number~ renderBob::$4
number~ renderBob::$5
number~ renderBob::$6
number~ renderBob::$7
byte~ renderBob::$8
byte renderBob::bob_table_idx
byte renderBob::bob_table_idx#0
byte* renderBob::screen
byte* renderBob::screen#0
byte renderBob::x_char_offset
byte renderBob::x_char_offset#0
byte renderBob::xpos
byte renderBob::xpos#0
byte renderBob::xpos#1
byte renderBob::y_char_offset
byte renderBob::y_char_offset#0
word renderBob::y_offset
word renderBob::y_offset#0
byte renderBob::ypos
byte renderBob::ypos#0
byte renderBob::ypos#1
void renderBobCleanup()
bool~ renderBobCleanup::$0
byte~ renderBobCleanup::$1
byte renderBobCleanup::i
byte renderBobCleanup::i#0
byte renderBobCleanup::i#1
byte renderBobCleanup::i#2
byte* renderBobCleanup::screen
byte* renderBobCleanup::screen#0
byte** renderBobCleanupNext
byte** renderBobCleanupNext#0
byte** renderBobCleanupNext#1
byte** renderBobCleanupNext#10
byte** renderBobCleanupNext#11
byte** renderBobCleanupNext#12
byte** renderBobCleanupNext#13
byte** renderBobCleanupNext#14
byte** renderBobCleanupNext#15
byte** renderBobCleanupNext#16
byte** renderBobCleanupNext#17
byte** renderBobCleanupNext#18
byte** renderBobCleanupNext#19
byte** renderBobCleanupNext#2
byte** renderBobCleanupNext#20
byte** renderBobCleanupNext#21
byte** renderBobCleanupNext#22
byte** renderBobCleanupNext#23
byte** renderBobCleanupNext#24
byte** renderBobCleanupNext#25
byte** renderBobCleanupNext#26
byte** renderBobCleanupNext#27
byte** renderBobCleanupNext#28
byte** renderBobCleanupNext#29
byte** renderBobCleanupNext#3
byte** renderBobCleanupNext#30
byte** renderBobCleanupNext#31
byte** renderBobCleanupNext#32
byte** renderBobCleanupNext#33
byte** renderBobCleanupNext#34
byte** renderBobCleanupNext#35
byte** renderBobCleanupNext#36
byte** renderBobCleanupNext#37
byte** renderBobCleanupNext#38
byte** renderBobCleanupNext#39
byte** renderBobCleanupNext#4
byte** renderBobCleanupNext#40
byte** renderBobCleanupNext#41
byte** renderBobCleanupNext#42
byte** renderBobCleanupNext#43
byte** renderBobCleanupNext#44
byte** renderBobCleanupNext#45
byte** renderBobCleanupNext#46
byte** renderBobCleanupNext#47
byte** renderBobCleanupNext#48
byte** renderBobCleanupNext#49
byte** renderBobCleanupNext#5
byte** renderBobCleanupNext#50
byte** renderBobCleanupNext#6
byte** renderBobCleanupNext#7
byte** renderBobCleanupNext#8
byte** renderBobCleanupNext#9
void renderBobInit()
number~ renderBobInit::$0
bool~ renderBobInit::$1
bool~ renderBobInit::$2
byte~ renderBobInit::$3
byte~ renderBobInit::$4
word~ renderBobInit::$5
byte renderBobInit::i
byte renderBobInit::i#0
byte renderBobInit::i#1
byte renderBobInit::i#2
byte renderBobInit::y
byte renderBobInit::y#0
byte renderBobInit::y#1
byte renderBobInit::y#2
void shiftProtoBobDown()
bool~ shiftProtoBobDown::$0
byte shiftProtoBobDown::i
byte shiftProtoBobDown::i#0
byte shiftProtoBobDown::i#1
byte shiftProtoBobDown::i#2
byte shiftProtoBobDown::i#3
void shiftProtoBobRight()
bool~ shiftProtoBobRight::$0
number~ shiftProtoBobRight::$1
byte~ shiftProtoBobRight::$2
byte~ shiftProtoBobRight::$3
byte~ shiftProtoBobRight::$4
byte~ shiftProtoBobRight::$5
byte~ shiftProtoBobRight::$6
bool~ shiftProtoBobRight::$7
bool~ shiftProtoBobRight::$8
byte shiftProtoBobRight::carry
byte shiftProtoBobRight::carry#0
byte shiftProtoBobRight::carry#1
byte shiftProtoBobRight::carry#2
byte shiftProtoBobRight::carry#3
byte shiftProtoBobRight::carry#4
byte shiftProtoBobRight::carry#5
byte shiftProtoBobRight::carry#6
byte shiftProtoBobRight::carry#7
byte shiftProtoBobRight::carry#8
byte shiftProtoBobRight::carry#9
byte shiftProtoBobRight::i
byte shiftProtoBobRight::i#0
byte shiftProtoBobRight::i#1
byte shiftProtoBobRight::i#2
byte shiftProtoBobRight::i#3
byte shiftProtoBobRight::i#4
byte shiftProtoBobRight::i#5
byte shiftProtoBobRight::i#6
byte shiftProtoBobRight::i#7
byte shiftProtoBobRight::i#8
byte shiftProtoBobRight::i#9
byte shiftProtoBobRight::j
byte shiftProtoBobRight::j#0
byte shiftProtoBobRight::j#1
byte shiftProtoBobRight::j#10
byte shiftProtoBobRight::j#2
byte shiftProtoBobRight::j#3
byte shiftProtoBobRight::j#4
byte shiftProtoBobRight::j#5
byte shiftProtoBobRight::j#6
byte shiftProtoBobRight::j#7
byte shiftProtoBobRight::j#8
byte shiftProtoBobRight::j#9
byte shiftProtoBobRight::new_carry
byte shiftProtoBobRight::new_carry#0

Fixing inline constructor with mulf8u_prepared::$0 = (byte)*mulf8u_prepared::memB w= (byte)*mulf8u_prepared::resL
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) 7 in keyboard_key_pressed::$0 = keyboard_key_pressed::key#2 & 7
Adding number conversion cast (unumber) keyboard_key_pressed::$0 in keyboard_key_pressed::$0 = keyboard_key_pressed::key#2 & (unumber)7
Adding number conversion cast (unumber) 3 in keyboard_key_pressed::$1 = keyboard_key_pressed::key#2 >> 3
Adding number conversion cast (unumber) 1 in mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Adding number conversion cast (unumber) 1 in mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Adding number conversion cast (unumber) $200 in mulf_init::$0 = mulf_init::sqr1_lo#2 != mulf_sqr1_lo+$200
Adding number conversion cast (unumber) 1 in mulf_init::$1 = mulf_init::c#1 & 1
Adding number conversion cast (unumber) mulf_init::$1 in mulf_init::$1 = mulf_init::c#1 & (unumber)1
Adding number conversion cast (unumber) 0 in mulf_init::$2 = mulf_init::$1 == 0
Adding number conversion cast (unumber) $1ff in mulf_init::$7 = mulf_init::sqr2_lo#2 != mulf_sqr2_lo+$1ff
Adding number conversion cast (unumber) 0 in mulf_init::$9 = mulf_init::x_255#1 == 0
Adding number conversion cast (unumber) $100 in *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
Adding number conversion cast (unumber) $1ff in *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+(unumber)$100)
Adding number conversion cast (unumber) $100 in *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
Adding number conversion cast (unumber) $1ff in *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+(unumber)$100)
Adding number conversion cast (unumber) 1 in mulf_init::dir#1 = 1
Adding number conversion cast (snumber) 0 in mulf8s_prepared::$1 = *mulf8s_prepared::memA < 0
Adding number conversion cast (snumber) 0 in mulf8s_prepared::$3 = mulf8s_prepared::b#2 < 0
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) $40 in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$1 in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / (unumber)$40
Adding number conversion cast (unumber) 3 in main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$2 in main::vicSelectGfxBank1_toDd001_$2 = (unumber)3 ^ main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) 0 in memset::c#0 = 0
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) $f8 in main::$8 = *RASTER < $f8
Adding number conversion cast (unumber) $f in *BORDER_COLOR = $f
Adding number conversion cast (unumber) 1 in *BORDER_COLOR = 1
Adding number conversion cast (snumber) $4b*$100 in main::$11 = main::$10 + $4b*$100
Adding number conversion cast (snumber) main::$11 in main::$11 = main::$10 + (snumber)$4b*$100
Adding number conversion cast (snumber) 2 in main::$13 = main::$12 * 2
Adding number conversion cast (snumber) main::$13 in main::$13 = main::$12 * (snumber)2
Adding number conversion cast (snumber) $5a*$100 in main::$14 = main::$13 + $5a*$100
Adding number conversion cast (snumber) main::$14 in main::$14 = main::$13 + (snumber)$5a*$100
Adding number conversion cast (unumber) 2 in *BORDER_COLOR = 2
Adding number conversion cast (unumber) $62 in main::a#1 = main::a#4 + $62
Adding number conversion cast (snumber) 3 in main::r#1 = main::r#4 + 3
Adding number conversion cast (unumber) 1 in main::i#1 = main::i#2 + rangenext(0,NUM_BOBS-1)
Adding number conversion cast (unumber) 3 in main::angle#1 = main::angle#3 + 3
Adding number conversion cast (unumber) 0 in *BORDER_COLOR = 0
Adding number conversion cast (unumber) 0 in main::$23 = 0 != main::$19
Adding number conversion cast (unumber) 0 in main::$22 = 0 != main::$21
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) $40 in main::vicSelectGfxBank2_toDd001_$1 = main::vicSelectGfxBank2_toDd001_$0 / $40
Adding number conversion cast (unumber) main::vicSelectGfxBank2_toDd001_$1 in main::vicSelectGfxBank2_toDd001_$1 = main::vicSelectGfxBank2_toDd001_$0 / (unumber)$40
Adding number conversion cast (unumber) 3 in main::vicSelectGfxBank2_toDd001_$2 = 3 ^ main::vicSelectGfxBank2_toDd001_$1
Adding number conversion cast (unumber) main::vicSelectGfxBank2_toDd001_$2 in main::vicSelectGfxBank2_toDd001_$2 = (unumber)3 ^ main::vicSelectGfxBank2_toDd001_$1
Adding number conversion cast (unumber) $3fff in main::toD0182_$0 = main::toD0182_$7 & $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in main::toD0182_$0 = main::toD0182_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0182_$1 = main::toD0182_$0 * 4
Adding number conversion cast (unumber) main::toD0182_$1 in main::toD0182_$1 = main::toD0182_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0182_$2 in main::toD0182_$2 = > main::toD0182_$1
Adding number conversion cast (unumber) 4 in main::toD0182_$4 = main::toD0182_$3 / 4
Adding number conversion cast (unumber) main::toD0182_$4 in main::toD0182_$4 = main::toD0182_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0182_$5 = main::toD0182_$4 & $f
Adding number conversion cast (unumber) main::toD0182_$5 in main::toD0182_$5 = main::toD0182_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0182_$6 in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Adding number conversion cast (unumber) $28 in renderBobInit::$0 = renderBobInit::$5 * $28
Adding number conversion cast (unumber) renderBobInit::$0 in renderBobInit::$0 = renderBobInit::$5 * (unumber)$28
Adding number conversion cast (unumber) 1 in renderBobInit::i#1 = renderBobInit::i#2 + rangenext(0,NUM_BOBS-1)
Adding number conversion cast (unumber) 7 in renderBob::$4 = renderBob::ypos#1 & 7
Adding number conversion cast (unumber) renderBob::$4 in renderBob::$4 = renderBob::ypos#1 & (unumber)7
Adding number conversion cast (unumber) renderBob::$5 in renderBob::$5 = renderBob::$4 * BOB_SHIFTS_X
Adding number conversion cast (unumber) 3 in renderBob::$6 = renderBob::xpos#1 & 3
Adding number conversion cast (unumber) renderBob::$6 in renderBob::$6 = renderBob::xpos#1 & (unumber)3
Adding number conversion cast (unumber) renderBob::$7 in renderBob::$7 = renderBob::$5 + renderBob::$6
Adding number conversion cast (unumber) 0*BOB_SUBTABLE_SIZE in renderBob::screen#0[0] = (BOB_TABLES+0*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 0 in renderBob::screen#0[0] = (BOB_TABLES+(unumber)0*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 0 in renderBob::screen#0[0] = (BOB_TABLES+(unumber)(unumber)0*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 1*BOB_SUBTABLE_SIZE in renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 1 in renderBob::screen#0[$28] = (BOB_TABLES+(unumber)1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) $28 in renderBob::screen#0[$28] = (BOB_TABLES+(unumber)(unumber)1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 2*BOB_SUBTABLE_SIZE in renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 2 in renderBob::screen#0[$50] = (BOB_TABLES+(unumber)2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) $50 in renderBob::screen#0[$50] = (BOB_TABLES+(unumber)(unumber)2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 3*BOB_SUBTABLE_SIZE in renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 3 in renderBob::screen#0[1] = (BOB_TABLES+(unumber)3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 1 in renderBob::screen#0[1] = (BOB_TABLES+(unumber)(unumber)3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 4*BOB_SUBTABLE_SIZE in renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 4 in renderBob::screen#0[$29] = (BOB_TABLES+(unumber)4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) $29 in renderBob::screen#0[$29] = (BOB_TABLES+(unumber)(unumber)4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 5*BOB_SUBTABLE_SIZE in renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 5 in renderBob::screen#0[$51] = (BOB_TABLES+(unumber)5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) $51 in renderBob::screen#0[$51] = (BOB_TABLES+(unumber)(unumber)5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 6*BOB_SUBTABLE_SIZE in renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 6 in renderBob::screen#0[2] = (BOB_TABLES+(unumber)6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 2 in renderBob::screen#0[2] = (BOB_TABLES+(unumber)(unumber)6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 7*BOB_SUBTABLE_SIZE in renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 7 in renderBob::screen#0[$2a] = (BOB_TABLES+(unumber)7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) $2a in renderBob::screen#0[$2a] = (BOB_TABLES+(unumber)(unumber)7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 8*BOB_SUBTABLE_SIZE in renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 8 in renderBob::screen#0[$52] = (BOB_TABLES+(unumber)8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) $52 in renderBob::screen#0[$52] = (BOB_TABLES+(unumber)(unumber)8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[0] = 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[0] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[$28] = 0
Adding number conversion cast (unumber) $28 in renderBobCleanup::screen#0[$28] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[$50] = 0
Adding number conversion cast (unumber) $50 in renderBobCleanup::screen#0[$50] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[1] = 0
Adding number conversion cast (unumber) 1 in renderBobCleanup::screen#0[1] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[$29] = 0
Adding number conversion cast (unumber) $29 in renderBobCleanup::screen#0[$29] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[$51] = 0
Adding number conversion cast (unumber) $51 in renderBobCleanup::screen#0[$51] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[2] = 0
Adding number conversion cast (unumber) 2 in renderBobCleanup::screen#0[2] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[$2a] = 0
Adding number conversion cast (unumber) $2a in renderBobCleanup::screen#0[$2a] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in renderBobCleanup::screen#0[$52] = 0
Adding number conversion cast (unumber) $52 in renderBobCleanup::screen#0[$52] = ((unumber)) 0
Adding number conversion cast (unumber) 1 in renderBobCleanup::i#1 = renderBobCleanup::i#2 + rangenext(0,NUM_BOBS-1)
Adding number conversion cast (unumber) 0 in bob_charset_next_id#2 = 0
Adding number conversion cast (unumber) $30 in bobCharsetFindOrAddGlyph::bob_glyph#0 = PROTO_BOB+$30
Adding number conversion cast (unumber) 9 in prepareBobs::$5 = prepareBobs::cell#2 < 9
Adding number conversion cast (unumber) 8 in prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#3 + 8
Adding number conversion cast (unumber) 3*3*8 in shiftProtoBobRight::$0 = shiftProtoBobRight::i#2 < 3*3*8
Adding number conversion cast (unumber) 1 in shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1
Adding number conversion cast (unumber) shiftProtoBobRight::$1 in shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & (unumber)1
Adding number conversion cast (unumber) 0 in shiftProtoBobRight::$8 = 0 != shiftProtoBobRight::$1
Adding number conversion cast (unumber) 1 in shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#4] >> 1
Adding number conversion cast (unumber) $30 in shiftProtoBobRight::$7 = shiftProtoBobRight::j#4 >= $30
Adding number conversion cast (unumber) $2f in shiftProtoBobRight::j#1 = shiftProtoBobRight::j#5 - $2f
Adding number conversion cast (unumber) $18 in shiftProtoBobRight::j#2 = shiftProtoBobRight::j#6 + $18
Adding number conversion cast (unumber) 0 in shiftProtoBobDown::$0 = shiftProtoBobDown::i#2 > 0
Adding number conversion cast (unumber) $17 in PROTO_BOB[shiftProtoBobDown::i#3] = (PROTO_BOB+$17)[shiftProtoBobDown::i#3]
Adding number conversion cast (unumber) $2f in (PROTO_BOB+$18)[shiftProtoBobDown::i#3] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#3]
Adding number conversion cast (unumber) $18 in (PROTO_BOB+$18)[shiftProtoBobDown::i#3] = (PROTO_BOB+(unumber)$2f)[shiftProtoBobDown::i#3]
Adding number conversion cast (unumber) 0 in (PROTO_BOB+$30)[shiftProtoBobDown::i#3] = 0
Adding number conversion cast (unumber) $30 in (PROTO_BOB+$30)[shiftProtoBobDown::i#3] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in PROTO_BOB[0] = 0
Adding number conversion cast (unumber) 0 in PROTO_BOB[0] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in PROTO_BOB[$18] = 0
Adding number conversion cast (unumber) $18 in PROTO_BOB[$18] = ((unumber)) 0
Adding number conversion cast (unumber) 0 in PROTO_BOB[$30] = 0
Adding number conversion cast (unumber) $30 in PROTO_BOB[$30] = ((unumber)) 0
Adding number conversion cast (unumber) 8 in bobCharsetFindOrAddGlyph::$1 = bobCharsetFindOrAddGlyph::i#2 < 8
Adding number conversion cast (unumber) 0 in bobCharsetFindOrAddGlyph::found#1 = 0
Adding number conversion cast (unumber) 0 in bobCharsetFindOrAddGlyph::$6 = 0 != bobCharsetFindOrAddGlyph::found#2
Adding number conversion cast (unumber) 8 in bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#3 + 8
Adding number conversion cast (unumber) 8 in bobCharsetFindOrAddGlyph::$5 = bobCharsetFindOrAddGlyph::i1#2 < 8
Adding number conversion cast (unumber) 0 in progress_idx#5 = 0
Adding number conversion cast (unumber) 8 in progress_inc::$0 = progress_idx#7 == 8
Adding number conversion cast (unumber) 8 in *progress_cursor#19 = progress_inc::progress_chars[8]
Adding number conversion cast (unumber) 0 in progress_idx#8 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast mulf_init::dir#1 = (unumber)1
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast memset::c#0 = (unumber)0
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast *BORDER_COLOR = (unumber)$f
Inlining cast *BORDER_COLOR = (unumber)1
Inlining cast *BORDER_COLOR = (unumber)2
Inlining cast *BORDER_COLOR = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast renderBobCleanup::screen#0[(unumber)0] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)$28] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)$50] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)1] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)$29] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)$51] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)2] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)$2a] = (unumber)0
Inlining cast renderBobCleanup::screen#0[(unumber)$52] = (unumber)0
Inlining cast bob_charset_next_id#2 = (unumber)0
Inlining cast (PROTO_BOB+(unumber)$30)[shiftProtoBobDown::i#3] = (unumber)0
Inlining cast PROTO_BOB[(unumber)0] = (unumber)0
Inlining cast PROTO_BOB[(unumber)$18] = (unumber)0
Inlining cast PROTO_BOB[(unumber)$30] = (unumber)0
Inlining cast bobCharsetFindOrAddGlyph::found#1 = (unumber)0
Inlining cast progress_idx#5 = (unumber)0
Inlining cast progress_idx#8 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 253
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (signed byte*) 253
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 4096
Simplifying constant pointer cast (byte*) 10240
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $200
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast $1ff
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast 1
Simplifying constant integer cast *mulf8u_prepared::memB
Simplifying constant integer cast *mulf8u_prepared::resL
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $f8
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $62
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 3
Simplifying constant integer cast (unumber)0*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (unumber)1*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast (unumber)2*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 2
Simplifying constant integer cast $50
Simplifying constant integer cast (unumber)3*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast (unumber)4*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 4
Simplifying constant integer cast $29
Simplifying constant integer cast (unumber)5*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 5
Simplifying constant integer cast $51
Simplifying constant integer cast (unumber)6*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 6
Simplifying constant integer cast 2
Simplifying constant integer cast (unumber)7*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 7
Simplifying constant integer cast $2a
Simplifying constant integer cast (unumber)8*BOB_SUBTABLE_SIZE
Simplifying constant integer cast 8
Simplifying constant integer cast $52
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $50
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $29
Simplifying constant integer cast 0
Simplifying constant integer cast $51
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $2a
Simplifying constant integer cast 0
Simplifying constant integer cast $52
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $30
Simplifying constant integer cast 9
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $30
Simplifying constant integer cast $2f
Simplifying constant integer cast $18
Simplifying constant integer cast 0
Simplifying constant integer cast $17
Simplifying constant integer cast $2f
Simplifying constant integer cast $18
Simplifying constant integer cast 0
Simplifying constant integer cast $30
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $18
Simplifying constant integer cast 0
Simplifying constant integer cast $30
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $40
Finalized unsigned number type 0
Finalized unsigned number type 7
Finalized unsigned number type 3
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type $200
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type $1ff
Finalized unsigned number type 0
Finalized unsigned number type $100
Finalized unsigned number type $1ff
Finalized unsigned number type $100
Finalized unsigned number type $1ff
Finalized unsigned number type 1
Finalized signed number type 0
Finalized signed number type 0
Finalized unsigned number type 3
Finalized unsigned number type $40
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type 0
Finalized unsigned number type $3e8
Finalized unsigned number type $f8
Finalized unsigned number type $f
Finalized unsigned number type 1
Finalized signed number type 2
Finalized unsigned number type 2
Finalized unsigned number type $62
Finalized signed number type 3
Finalized unsigned number type 1
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type $40
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type $28
Finalized unsigned number type 1
Finalized unsigned number type 7
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type $28
Finalized unsigned number type 2
Finalized unsigned number type $50
Finalized unsigned number type 3
Finalized unsigned number type 1
Finalized unsigned number type 4
Finalized unsigned number type $29
Finalized unsigned number type 5
Finalized unsigned number type $51
Finalized unsigned number type 6
Finalized unsigned number type 2
Finalized unsigned number type 7
Finalized unsigned number type $2a
Finalized unsigned number type 8
Finalized unsigned number type $52
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $50
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type $29
Finalized unsigned number type 0
Finalized unsigned number type $51
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 0
Finalized unsigned number type $2a
Finalized unsigned number type 0
Finalized unsigned number type $52
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type $30
Finalized unsigned number type 9
Finalized unsigned number type 8
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type $30
Finalized unsigned number type $2f
Finalized unsigned number type $18
Finalized unsigned number type 0
Finalized unsigned number type $17
Finalized unsigned number type $2f
Finalized unsigned number type $18
Finalized unsigned number type 0
Finalized unsigned number type $30
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $18
Finalized unsigned number type 0
Finalized unsigned number type $30
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 0
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in keyboard_key_pressed::$0 = keyboard_key_pressed::key#2 & 7
Inferred type updated to byte in mulf_init::$1 = mulf_init::c#1 & 1
Inferred type updated to byte in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Inferred type updated to byte in main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to signed word in main::$11 = main::$10 + (signed word)$4b*$100
Inferred type updated to signed word in main::$13 = main::$12 * 2
Inferred type updated to signed word in main::$14 = main::$13 + (signed word)$5a*$100
Inferred type updated to byte in main::vicSelectGfxBank2_toDd001_$1 = main::vicSelectGfxBank2_toDd001_$0 / $40
Inferred type updated to byte in main::vicSelectGfxBank2_toDd001_$2 = 3 ^ main::vicSelectGfxBank2_toDd001_$1
Inferred type updated to word in main::toD0182_$0 = main::toD0182_$7 & $3fff
Inferred type updated to word in main::toD0182_$1 = main::toD0182_$0 * 4
Inferred type updated to byte in main::toD0182_$2 = > main::toD0182_$1
Inferred type updated to byte in main::toD0182_$4 = main::toD0182_$3 / 4
Inferred type updated to byte in main::toD0182_$5 = main::toD0182_$4 & $f
Inferred type updated to byte in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Inferred type updated to word in renderBobInit::$0 = renderBobInit::$5 * $28
Inferred type updated to byte in renderBob::$4 = renderBob::ypos#1 & 7
Inferred type updated to byte in renderBob::$5 = renderBob::$4 * BOB_SHIFTS_X
Inferred type updated to byte in renderBob::$6 = renderBob::xpos#1 & 3
Inferred type updated to byte in renderBob::$7 = renderBob::$5 + renderBob::$6
Inferred type updated to byte in shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1
Inversing boolean not [2] memset::$1 = memset::num#1 <= 0 from [1] memset::$0 = memset::num#1 > 0
Inversing boolean not [55] mulf_init::$3 = mulf_init::$1 != 0 from [54] mulf_init::$2 = mulf_init::$1 == 0
Inversing boolean not [83] mulf_init::$10 = mulf_init::x_255#1 != 0 from [82] mulf_init::$9 = mulf_init::x_255#1 == 0
Inversing boolean not [112] mulf8s_prepared::$2 = *mulf8s_prepared::memA >= 0 from [111] mulf8s_prepared::$1 = *mulf8s_prepared::memA < 0
Inversing boolean not [116] mulf8s_prepared::$4 = mulf8s_prepared::b#2 >= 0 from [115] mulf8s_prepared::$3 = mulf8s_prepared::b#2 < 0
Inversing boolean not [254] main::$20 = 0 == main::$19 from [253] main::$23 = 0 != main::$19
Inversing boolean not [488] bobCharsetFindOrAddGlyph::$3 = bobCharsetFindOrAddGlyph::glyph_cursor#2[bobCharsetFindOrAddGlyph::i#3] == bobCharsetFindOrAddGlyph::bob_glyph#2[bobCharsetFindOrAddGlyph::i#3] from [487] bobCharsetFindOrAddGlyph::$2 = bobCharsetFindOrAddGlyph::glyph_cursor#2[bobCharsetFindOrAddGlyph::i#3] != bobCharsetFindOrAddGlyph::bob_glyph#2[bobCharsetFindOrAddGlyph::i#3]
Inversing boolean not [496] bobCharsetFindOrAddGlyph::$4 = 0 == bobCharsetFindOrAddGlyph::found#2 from [495] bobCharsetFindOrAddGlyph::$6 = 0 != bobCharsetFindOrAddGlyph::found#2
Inversing boolean not [526] progress_inc::$1 = progress_idx#7 != 8 from [525] progress_inc::$0 = progress_idx#7 == 8
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias keyboard_matrix_read::return#0 = keyboard_matrix_read::row_pressed_bits#0 keyboard_matrix_read::$0 keyboard_matrix_read::return#3 keyboard_matrix_read::return#1 
Alias keyboard_key_pressed::colidx#0 = keyboard_key_pressed::$0 keyboard_key_pressed::colidx#1 
Alias keyboard_key_pressed::rowidx#0 = keyboard_key_pressed::$1 
Alias keyboard_matrix_read::return#2 = keyboard_matrix_read::return#4 
Alias keyboard_key_pressed::return#0 = keyboard_key_pressed::$3 keyboard_key_pressed::return#4 keyboard_key_pressed::return#1 
Alias mulf_init::c#2 = mulf_init::c#3 
Alias mulf_init::sqr#4 = mulf_init::sqr#5 mulf_init::sqr#6 
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#4 mulf_init::sqr1_lo#5 
Alias mulf_init::sqr1_hi#3 = mulf_init::sqr1_hi#5 mulf_init::sqr1_hi#4 
Alias mulf_init::x_2#3 = mulf_init::x_2#4 mulf_init::x_2#5 
Alias mulf_init::sqr#1 = mulf_init::$6 
Alias mulf_init::c#1 = mulf_init::c#5 
Alias mulf_init::x_255#2 = mulf_init::x_255#3 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#3 mulf_init::sqr2_lo#5 
Alias mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#3 
Alias mulf_init::dir#2 = mulf_init::dir#3 
Alias mulf_init::x_255#1 = mulf_init::$8 mulf_init::x_255#5 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#5 
Alias mulf8u_prepared::return#0 = mulf8u_prepared::$0 mulf8u_prepared::return#3 mulf8u_prepared::return#1 
Alias mulf8u_prepared::return#2 = mulf8u_prepared::return#4 
Alias mulf8s_prepared::b#1 = mulf8s_prepared::b#4 mulf8s_prepared::b#3 
Alias mulf8s_prepared::m#0 = mulf8s_prepared::$0 mulf8s_prepared::m#3 
Alias mulf8s_prepared::$11 = mulf8s_prepared::$7 
Alias mulf8s_prepared::m#5 = mulf8s_prepared::m#6 
Alias mulf8s_prepared::$12 = mulf8s_prepared::$10 
Alias mulf8s_prepared::return#0 = mulf8s_prepared::return#3 mulf8s_prepared::return#1 
Alias mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#2 mulf8s::mulf8s_prepare1_a#1 
Alias mulf8s::b#2 = mulf8s::b#4 mulf8s::b#5 mulf8s::b#3 
Alias mulf8s_prepared::return#2 = mulf8s_prepared::return#4 
Alias mulf8s::return#0 = mulf8s::$1 mulf8s::return#4 mulf8s::return#1 
Alias progress_cursor#23 = progress_cursor#30 
Alias progress_idx#24 = progress_idx#30 
Alias bob_charset_next_id#21 = bob_charset_next_id#30 
Alias renderBobCleanupNext#28 = renderBobCleanupNext#49 renderBobCleanupNext#50 renderBobCleanupNext#48 renderBobCleanupNext#47 renderBobCleanupNext#46 renderBobCleanupNext#44 renderBobCleanupNext#42 renderBobCleanupNext#40 renderBobCleanupNext#38 renderBobCleanupNext#36 renderBobCleanupNext#34 renderBobCleanupNext#31 
Alias progress_cursor#0 = progress_cursor#12 progress_cursor#71 progress_cursor#70 progress_cursor#68 progress_cursor#66 progress_cursor#64 progress_cursor#62 progress_cursor#60 progress_cursor#58 progress_cursor#56 progress_cursor#54 
Alias progress_idx#0 = progress_idx#13 progress_idx#71 progress_idx#70 progress_idx#68 progress_idx#66 progress_idx#64 progress_idx#62 progress_idx#60 progress_idx#58 progress_idx#56 progress_idx#54 
Alias bob_charset_next_id#0 = bob_charset_next_id#11 bob_charset_next_id#78 bob_charset_next_id#77 bob_charset_next_id#75 bob_charset_next_id#73 bob_charset_next_id#71 bob_charset_next_id#69 bob_charset_next_id#67 bob_charset_next_id#65 bob_charset_next_id#63 bob_charset_next_id#61 
Alias main::vicSelectGfxBank1_gfx#0 = main::vicSelectGfxBank1_gfx#1 main::vicSelectGfxBank1_toDd001_gfx#0 main::vicSelectGfxBank1_toDd001_gfx#1 
Alias main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2 main::vicSelectGfxBank1_toDd001_return#2 main::vicSelectGfxBank1_toDd001_return#1 main::vicSelectGfxBank1_toDd001_return#3 main::vicSelectGfxBank1_$0 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$4 
Alias renderBobCleanupNext#18 = renderBobCleanupNext#22 
Alias main::angle#2 = main::angle#4 main::angle#6 main::a#0 
Alias progress_cursor#65 = progress_cursor#67 progress_cursor#69 
Alias progress_idx#65 = progress_idx#67 progress_idx#69 
Alias bob_charset_next_id#72 = bob_charset_next_id#74 bob_charset_next_id#76 
Alias renderBobCleanupNext#0 = renderBobCleanupNext#10 
Alias mulf8s::return#2 = mulf8s::return#5 
Alias main::r#2 = main::r#3 main::r#4 
Alias main::a#2 = main::a#3 main::a#4 
Alias renderBobCleanupNext#19 = renderBobCleanupNext#23 renderBobCleanupNext#26 
Alias main::i#2 = main::i#4 main::i#5 main::i#3 
Alias main::angle#11 = main::angle#9 main::angle#7 main::angle#5 main::angle#3 
Alias progress_cursor#53 = progress_cursor#61 progress_cursor#63 progress_cursor#59 progress_cursor#57 progress_cursor#55 
Alias progress_idx#53 = progress_idx#61 progress_idx#63 progress_idx#59 progress_idx#57 progress_idx#55 
Alias bob_charset_next_id#60 = bob_charset_next_id#68 bob_charset_next_id#70 bob_charset_next_id#66 bob_charset_next_id#64 bob_charset_next_id#62 
Alias main::x#0 = main::$11 main::x#1 
Alias mulf8s::return#3 = mulf8s::return#6 
Alias main::y#0 = main::$14 
Alias renderBob::xpos#0 = main::$15 
Alias renderBob::ypos#0 = main::$16 
Alias main::r#1 = main::r#5 
Alias main::a#1 = main::a#5 
Alias renderBobCleanupNext#1 = renderBobCleanupNext#11 renderBobCleanupNext#32 renderBobCleanupNext#29 
Alias keyboard_key_pressed::return#2 = keyboard_key_pressed::return#5 
Alias main::angle#1 = main::angle#10 
Alias keyboard_key_pressed::return#3 = keyboard_key_pressed::return#6 
Alias progress_cursor#1 = progress_cursor#50 progress_cursor#51 progress_cursor#49 progress_cursor#48 progress_cursor#46 progress_cursor#44 progress_cursor#41 progress_cursor#38 progress_cursor#35 progress_cursor#31 progress_cursor#24 progress_cursor#13 
Alias progress_idx#1 = progress_idx#50 progress_idx#51 progress_idx#49 progress_idx#48 progress_idx#46 progress_idx#44 progress_idx#41 progress_idx#38 progress_idx#35 progress_idx#31 progress_idx#25 progress_idx#14 
Alias bob_charset_next_id#1 = bob_charset_next_id#57 bob_charset_next_id#58 bob_charset_next_id#56 bob_charset_next_id#55 bob_charset_next_id#53 bob_charset_next_id#51 bob_charset_next_id#48 bob_charset_next_id#43 bob_charset_next_id#37 bob_charset_next_id#31 bob_charset_next_id#22 bob_charset_next_id#12 
Alias renderBobCleanupNext#12 = renderBobCleanupNext#43 renderBobCleanupNext#45 renderBobCleanupNext#41 renderBobCleanupNext#39 renderBobCleanupNext#37 renderBobCleanupNext#35 renderBobCleanupNext#33 renderBobCleanupNext#30 renderBobCleanupNext#27 renderBobCleanupNext#24 renderBobCleanupNext#20 renderBobCleanupNext#2 
Alias main::vicSelectGfxBank2_gfx#0 = main::vicSelectGfxBank2_gfx#1 main::vicSelectGfxBank2_toDd001_gfx#0 main::vicSelectGfxBank2_toDd001_gfx#1 
Alias main::vicSelectGfxBank2_toDd001_return#0 = main::vicSelectGfxBank2_toDd001_$2 main::vicSelectGfxBank2_toDd001_return#2 main::vicSelectGfxBank2_toDd001_return#1 main::vicSelectGfxBank2_toDd001_return#3 main::vicSelectGfxBank2_$0 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$7 
Alias renderBob::x_char_offset#0 = renderBob::$0 
Alias renderBob::y_char_offset#0 = renderBob::$1 
Alias renderBob::screen#0 = renderBob::$3 
Alias renderBob::bob_table_idx#0 = renderBob::$7 
Alias renderBobCleanupNext#14 = renderBobCleanupNext#3 renderBobCleanupNext#4 
Alias renderBobCleanupNext#15 = renderBobCleanupNext#5 renderBobCleanupNext#6 
Alias progress_cursor#14 = progress_cursor#2 progress_cursor#32 
Alias progress_idx#15 = progress_idx#2 progress_idx#32 
Alias bob_charset_next_id#13 = bob_charset_next_id#3 
Alias prepareBobs::bob_table_idx#7 = prepareBobs::bob_table_idx#9 
Alias prepareBobs::shift_y#2 = prepareBobs::shift_y#7 
Alias bob_charset_next_id#15 = bob_charset_next_id#50 bob_charset_next_id#24 bob_charset_next_id#5 
Alias progress_cursor#16 = progress_cursor#43 progress_cursor#27 progress_cursor#4 
Alias progress_idx#17 = progress_idx#43 progress_idx#28 progress_idx#4 
Alias prepareBobs::bob_table_idx#12 = prepareBobs::bob_table_idx#2 prepareBobs::bob_table_idx#4 prepareBobs::bob_table_idx#14 
Alias bob_charset_next_id#32 = bob_charset_next_id#40 bob_charset_next_id#44 bob_charset_next_id#38 
Alias progress_idx#33 = progress_idx#40 progress_idx#39 progress_idx#36 
Alias progress_cursor#33 = progress_cursor#40 progress_cursor#39 progress_cursor#36 
Alias prepareBobs::shift_x#2 = prepareBobs::shift_x#8 
Alias prepareBobs::shift_y#12 = prepareBobs::shift_y#5 prepareBobs::shift_y#4 prepareBobs::shift_y#3 
Alias prepareBobs::bob_table#0 = prepareBobs::$4 
Alias prepareBobs::bob_glyph#2 = prepareBobs::bob_glyph#4 prepareBobs::bob_glyph#3 
Alias bob_charset_next_id#23 = bob_charset_next_id#33 bob_charset_next_id#54 bob_charset_next_id#52 bob_charset_next_id#49 
Alias prepareBobs::bob_table#2 = prepareBobs::bob_table#3 prepareBobs::bob_table#4 
Alias progress_idx#27 = progress_idx#34 progress_idx#37 progress_idx#47 progress_idx#45 progress_idx#42 
Alias progress_cursor#26 = progress_cursor#34 progress_cursor#37 progress_cursor#47 progress_cursor#45 progress_cursor#42 
Alias prepareBobs::cell#2 = prepareBobs::cell#5 prepareBobs::cell#4 prepareBobs::cell#3 
Alias prepareBobs::bob_table_idx#10 = prepareBobs::bob_table_idx#13 prepareBobs::bob_table_idx#5 prepareBobs::bob_table_idx#8 prepareBobs::bob_table_idx#3 
Alias prepareBobs::shift_x#10 = prepareBobs::shift_x#6 prepareBobs::shift_x#9 prepareBobs::shift_x#7 prepareBobs::shift_x#5 prepareBobs::shift_x#4 prepareBobs::shift_x#3 
Alias prepareBobs::shift_y#10 = prepareBobs::shift_y#14 prepareBobs::shift_y#13 prepareBobs::shift_y#11 prepareBobs::shift_y#9 prepareBobs::shift_y#8 prepareBobs::shift_y#6 
Alias bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::return#5 
Alias bob_charset_next_id#14 = bob_charset_next_id#4 bob_charset_next_id#39 
Alias prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#5 
Alias prepareBobs::bob_table#1 = prepareBobs::bob_table#5 
Alias progress_idx#16 = progress_idx#3 
Alias progress_cursor#15 = progress_cursor#3 
Alias prepareBobs::bob_table_idx#1 = prepareBobs::bob_table_idx#11 prepareBobs::bob_table_idx#6 
Alias shiftProtoBobRight::j#3 = shiftProtoBobRight::j#7 shiftProtoBobRight::j#8 shiftProtoBobRight::j#9 
Alias shiftProtoBobRight::carry#3 = shiftProtoBobRight::carry#5 shiftProtoBobRight::carry#6 shiftProtoBobRight::carry#4 
Alias shiftProtoBobRight::i#2 = shiftProtoBobRight::i#9 shiftProtoBobRight::i#7 shiftProtoBobRight::i#8 
Alias shiftProtoBobRight::carry#1 = shiftProtoBobRight::new_carry#0 shiftProtoBobRight::$4 shiftProtoBobRight::carry#8 shiftProtoBobRight::carry#9 
Alias shiftProtoBobRight::j#4 = shiftProtoBobRight::j#5 shiftProtoBobRight::j#6 
Alias shiftProtoBobRight::i#4 = shiftProtoBobRight::i#6 shiftProtoBobRight::i#5 
Alias shiftProtoBobDown::i#2 = shiftProtoBobDown::i#3 
Alias bobCharsetFindOrAddGlyph::glyph_cursor#11 = bobCharsetFindOrAddGlyph::glyph_cursor#8 bobCharsetFindOrAddGlyph::glyph_cursor#12 
Alias bobCharsetFindOrAddGlyph::bob_glyph#6 = bobCharsetFindOrAddGlyph::bob_glyph#9 bobCharsetFindOrAddGlyph::bob_glyph#8 
Alias bobCharsetFindOrAddGlyph::glyph_id#11 = bobCharsetFindOrAddGlyph::glyph_id#12 bobCharsetFindOrAddGlyph::glyph_id#2 
Alias bob_charset_next_id#16 = bob_charset_next_id#45 bob_charset_next_id#36 
Alias bobCharsetFindOrAddGlyph::glyph_cursor#10 = bobCharsetFindOrAddGlyph::glyph_cursor#2 bobCharsetFindOrAddGlyph::glyph_cursor#5 bobCharsetFindOrAddGlyph::glyph_cursor#9 
Alias bobCharsetFindOrAddGlyph::i#2 = bobCharsetFindOrAddGlyph::i#3 bobCharsetFindOrAddGlyph::i#4 
Alias bobCharsetFindOrAddGlyph::bob_glyph#13 = bobCharsetFindOrAddGlyph::bob_glyph#2 bobCharsetFindOrAddGlyph::bob_glyph#4 bobCharsetFindOrAddGlyph::bob_glyph#7 
Alias bobCharsetFindOrAddGlyph::found#3 = bobCharsetFindOrAddGlyph::found#5 bobCharsetFindOrAddGlyph::found#4 
Alias bobCharsetFindOrAddGlyph::glyph_id#13 = bobCharsetFindOrAddGlyph::glyph_id#14 bobCharsetFindOrAddGlyph::glyph_id#8 bobCharsetFindOrAddGlyph::glyph_id#9 
Alias bob_charset_next_id#41 = bob_charset_next_id#47 bob_charset_next_id#46 bob_charset_next_id#42 
Alias bobCharsetFindOrAddGlyph::glyph_id#3 = bobCharsetFindOrAddGlyph::glyph_id#6 bobCharsetFindOrAddGlyph::glyph_id#4 bobCharsetFindOrAddGlyph::return#2 
Alias bobCharsetFindOrAddGlyph::glyph_cursor#3 = bobCharsetFindOrAddGlyph::glyph_cursor#6 
Alias bob_charset_next_id#26 = bob_charset_next_id#34 bob_charset_next_id#27 
Alias bobCharsetFindOrAddGlyph::bob_glyph#11 = bobCharsetFindOrAddGlyph::bob_glyph#12 
Alias bobCharsetFindOrAddGlyph::return#3 = bobCharsetFindOrAddGlyph::return#6 
Alias bob_charset_next_id#17 = bob_charset_next_id#6 
Alias bobCharsetFindOrAddGlyph::bob_glyph#3 = bobCharsetFindOrAddGlyph::bob_glyph#5 
Alias bobCharsetFindOrAddGlyph::i1#2 = bobCharsetFindOrAddGlyph::i1#3 
Alias bobCharsetFindOrAddGlyph::glyph_cursor#4 = bobCharsetFindOrAddGlyph::glyph_cursor#7 
Alias bob_charset_next_id#18 = bob_charset_next_id#35 bob_charset_next_id#28 
Alias bobCharsetFindOrAddGlyph::glyph_id#10 = bobCharsetFindOrAddGlyph::glyph_id#7 bobCharsetFindOrAddGlyph::glyph_id#5 bobCharsetFindOrAddGlyph::return#4 
Alias progress_cursor#17 = progress_cursor#5 progress_cursor#6 
Alias progress_idx#18 = progress_idx#5 progress_idx#6 
Alias progress_cursor#19 = progress_cursor#28 
Alias progress_idx#20 = progress_idx#21 progress_idx#9 
Alias progress_cursor#18 = progress_cursor#20 progress_cursor#8 
Alias progress_cursor#29 = progress_cursor#9 
Alias progress_idx#10 = progress_idx#29 
Alias bob_charset_next_id#29 = bob_charset_next_id#8 
Alias renderBobCleanupNext#21 = renderBobCleanupNext#7 
Alias progress_cursor#10 = progress_cursor#21 progress_cursor#22 progress_cursor#11 
Alias progress_idx#11 = progress_idx#22 progress_idx#23 progress_idx#12 
Alias bob_charset_next_id#10 = bob_charset_next_id#9 bob_charset_next_id#19 bob_charset_next_id#20 
Alias renderBobCleanupNext#16 = renderBobCleanupNext#8 renderBobCleanupNext#17 renderBobCleanupNext#9 
Successful SSA optimization Pass2AliasElimination
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#3 
Alias mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#3 
Alias mulf_init::c#1 = mulf_init::c#4 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#4 
Alias mulf_init::x_255#1 = mulf_init::x_255#4 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#4 
Alias mulf8s_prepared::b#1 = mulf8s_prepared::b#2 
Alias shiftProtoBobRight::j#3 = shiftProtoBobRight::j#4 
Alias shiftProtoBobRight::carry#2 = shiftProtoBobRight::carry#3 
Alias shiftProtoBobRight::i#2 = shiftProtoBobRight::i#4 shiftProtoBobRight::i#3 
Alias shiftProtoBobRight::carry#1 = shiftProtoBobRight::carry#7 
Alias bobCharsetFindOrAddGlyph::glyph_id#13 = bobCharsetFindOrAddGlyph::glyph_id#3 
Alias bobCharsetFindOrAddGlyph::glyph_cursor#10 = bobCharsetFindOrAddGlyph::glyph_cursor#3 
Alias bob_charset_next_id#26 = bob_charset_next_id#41 
Alias bobCharsetFindOrAddGlyph::bob_glyph#11 = bobCharsetFindOrAddGlyph::bob_glyph#13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values keyboard_matrix_read::rowid#1 keyboard_matrix_read::rowid#0
Identical Phi Values mulf8u_prepare::a#1 mulf8u_prepare::a#0
Identical Phi Values mulf8u_prepared::b#1 mulf8u_prepared::b#0
Identical Phi Values mulf8s_prepared::b#1 mulf8s_prepared::b#0
Identical Phi Values progress_cursor#23 progress_cursor#29
Identical Phi Values progress_idx#24 progress_idx#10
Identical Phi Values bob_charset_next_id#21 bob_charset_next_id#29
Identical Phi Values renderBobCleanupNext#28 renderBobCleanupNext#21
Identical Phi Values progress_cursor#0 progress_cursor#16
Identical Phi Values progress_idx#0 progress_idx#17
Identical Phi Values bob_charset_next_id#0 bob_charset_next_id#15
Identical Phi Values renderBobCleanupNext#18 renderBobCleanupNext#25
Identical Phi Values main::angle#2 main::angle#8
Identical Phi Values progress_cursor#65 progress_cursor#52
Identical Phi Values progress_idx#65 progress_idx#52
Identical Phi Values bob_charset_next_id#72 bob_charset_next_id#59
Identical Phi Values renderBobCleanupNext#0 renderBobCleanupNext#15
Identical Phi Values main::angle#11 main::angle#2
Identical Phi Values progress_cursor#53 progress_cursor#65
Identical Phi Values progress_idx#53 progress_idx#65
Identical Phi Values bob_charset_next_id#60 bob_charset_next_id#72
Identical Phi Values renderBobCleanupNext#1 renderBobCleanupNext#14
Identical Phi Values renderBob::xpos#1 renderBob::xpos#0
Identical Phi Values renderBob::ypos#1 renderBob::ypos#0
Identical Phi Values renderBobCleanupNext#13 renderBobCleanupNext#19
Identical Phi Values progress_cursor#25 progress_cursor#23
Identical Phi Values progress_idx#26 progress_idx#24
Identical Phi Values progress_cursor#14 progress_cursor#17
Identical Phi Values progress_idx#15 progress_idx#18
Identical Phi Values bob_charset_next_id#13 bob_charset_next_id#17
Identical Phi Values prepareBobs::bob_table_idx#10 prepareBobs::bob_table_idx#12
Identical Phi Values prepareBobs::shift_x#10 prepareBobs::shift_x#2
Identical Phi Values prepareBobs::shift_y#10 prepareBobs::shift_y#12
Identical Phi Values bob_charset_next_id#14 bob_charset_next_id#17
Identical Phi Values progress_idx#16 progress_idx#20
Identical Phi Values progress_cursor#15 progress_cursor#18
Identical Phi Values bobCharsetFindOrAddGlyph::glyph_cursor#10 bobCharsetFindOrAddGlyph::glyph_cursor#11
Identical Phi Values bobCharsetFindOrAddGlyph::bob_glyph#11 bobCharsetFindOrAddGlyph::bob_glyph#6
Identical Phi Values bobCharsetFindOrAddGlyph::found#3 bobCharsetFindOrAddGlyph::found#0
Identical Phi Values bobCharsetFindOrAddGlyph::glyph_id#13 bobCharsetFindOrAddGlyph::glyph_id#11
Identical Phi Values bob_charset_next_id#26 bob_charset_next_id#16
Identical Phi Values bobCharsetFindOrAddGlyph::bob_glyph#3 bobCharsetFindOrAddGlyph::bob_glyph#6
Identical Phi Values bobCharsetFindOrAddGlyph::glyph_cursor#4 bobCharsetFindOrAddGlyph::glyph_cursor#11
Identical Phi Values bob_charset_next_id#18 bob_charset_next_id#16
Identical Phi Values bobCharsetFindOrAddGlyph::glyph_id#10 bobCharsetFindOrAddGlyph::glyph_id#11
Identical Phi Values progress_init::line#1 progress_init::line#0
Identical Phi Values progress_idx#19 progress_idx#27
Identical Phi Values progress_cursor#19 progress_cursor#26
Identical Phi Values progress_cursor#10 progress_cursor#1
Identical Phi Values progress_idx#11 progress_idx#1
Identical Phi Values bob_charset_next_id#10 bob_charset_next_id#1
Identical Phi Values renderBobCleanupNext#16 renderBobCleanupNext#12
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values progress_cursor#52 progress_cursor#16
Identical Phi Values progress_idx#52 progress_idx#17
Identical Phi Values bob_charset_next_id#59 bob_charset_next_id#15
Identical Phi Values progress_cursor#1 progress_cursor#52
Identical Phi Values progress_idx#1 progress_idx#52
Identical Phi Values bob_charset_next_id#1 bob_charset_next_id#59
Identical Phi Values prepareBobs::shift_y#12 prepareBobs::shift_y#2
Identical Phi Values bob_charset_next_id#16 bob_charset_next_id#25
Identical Phi Values bobCharsetFindOrAddGlyph::bob_glyph#6 bobCharsetFindOrAddGlyph::bob_glyph#10
Identical Phi Values bobCharsetFindOrAddGlyph::return#3 bobCharsetFindOrAddGlyph::glyph_id#11
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memset::$1 [2] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition mulf_init::$0 [33] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2
Simple Condition mulf_init::$3 [37] if(mulf_init::$1!=0) goto mulf_init::@4
Simple Condition mulf_init::$7 [54] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@7
Simple Condition mulf_init::$10 [60] if(mulf_init::x_255#1!=0) goto mulf_init::@9
Simple Condition mulf8s_prepared::$2 [82] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1
Simple Condition mulf8s_prepared::$4 [85] if(mulf8s_prepared::b#0>=0) goto mulf8s_prepared::@2
Simple Condition main::$8 [137] if(*RASTER<$f8) goto main::@2
Simple Condition main::$18 [167] if(main::i#1!=rangelast(0,NUM_BOBS-1)) goto main::@4
Simple Condition main::$20 [175] if(0==main::$19) goto main::@1
Simple Condition main::$22 [182] if(0!=main::$21) goto main::@6
Simple Condition renderBobInit::$1 [209] if(renderBobInit::y#1!=rangelast(0,$1f)) goto renderBobInit::@1
Simple Condition renderBobInit::$2 [216] if(renderBobInit::i#1!=rangelast(0,NUM_BOBS-1)) goto renderBobInit::@3
Simple Condition renderBobCleanup::$0 [256] if(renderBobCleanup::i#1!=rangelast(0,NUM_BOBS-1)) goto renderBobCleanup::@1
Simple Condition prepareBobs::$2 [272] if(prepareBobs::shift_y#2<BOB_SHIFTS_Y) goto prepareBobs::@2
Simple Condition prepareBobs::$3 [276] if(prepareBobs::shift_x#2<BOB_SHIFTS_X) goto prepareBobs::@4
Simple Condition prepareBobs::$5 [284] if(prepareBobs::cell#2<9) goto prepareBobs::@7
Simple Condition shiftProtoBobRight::$0 [306] if(shiftProtoBobRight::i#2<(byte)3*3*8) goto shiftProtoBobRight::@2
Simple Condition shiftProtoBobRight::$8 [309] if(0!=shiftProtoBobRight::$1) goto shiftProtoBobRight::@3
Simple Condition shiftProtoBobRight::$7 [317] if(shiftProtoBobRight::j#3>=$30) goto shiftProtoBobRight::@6
Simple Condition shiftProtoBobDown::$0 [326] if(shiftProtoBobDown::i#2>0) goto shiftProtoBobDown::@2
Simple Condition bobCharsetFindOrAddGlyph::$0 [340] if(bobCharsetFindOrAddGlyph::glyph_id#11!=bob_charset_next_id#25) goto bobCharsetFindOrAddGlyph::@2
Simple Condition bobCharsetFindOrAddGlyph::$1 [346] if(bobCharsetFindOrAddGlyph::i#2<8) goto bobCharsetFindOrAddGlyph::@5
Simple Condition bobCharsetFindOrAddGlyph::$3 [348] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@6
Simple Condition bobCharsetFindOrAddGlyph::$4 [353] if(0==bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@10
Simple Condition bobCharsetFindOrAddGlyph::$5 [360] if(bobCharsetFindOrAddGlyph::i1#2<8) goto bobCharsetFindOrAddGlyph::@12
Simple Condition progress_inc::$1 [371] if(progress_idx#7!=8) goto progress_inc::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [175] if(0!=main::$19) goto main::@6
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant mulf_init::sqr#0 = 0
Constant mulf_init::x_2#0 = 0
Constant mulf_init::c#0 = 0
Constant mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Constant mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Constant mulf_init::x_255#0 = -1
Constant mulf_init::dir#0 = $ff
Constant mulf_init::sqr2_hi#0 = mulf_sqr2_hi
Constant mulf_init::sqr2_lo#0 = mulf_sqr2_lo
Constant mulf_init::dir#1 = 1
Constant main::vicSelectGfxBank1_gfx#0 = BOB_SCREEN
Constant main::toD0181_screen#0 = BOB_SCREEN
Constant main::toD0181_gfx#0 = BOB_CHARSET
Constant memset::str#0 = (void*)BOB_SCREEN
Constant memset::c#0 = 0
Constant memset::num#0 = $3e8
Constant main::angle#0 = 0
Constant main::r#0 = $1e
Constant main::i#0 = 0
Constant keyboard_key_pressed::key#0 = KEY_SPACE
Constant keyboard_key_pressed::key#1 = KEY_SPACE
Constant main::vicSelectGfxBank2_gfx#0 = SCREEN_BASIC
Constant main::toD0182_screen#0 = SCREEN_BASIC
Constant main::toD0182_gfx#0 = CHARSET_BASIC
Constant renderBobInit::y#0 = 0
Constant renderBobInit::i#0 = 0
Constant renderBobCleanup::i#0 = 0
Constant renderBobCleanupNext#15 = RENDERBOB_CLEANUP
Constant progress_init::line#0 = SCREEN_BASIC
Constant bob_charset_next_id#2 = 0
Constant bobCharsetFindOrAddGlyph::bob_glyph#0 = PROTO_BOB+$30
Constant prepareBobs::bob_table_idx#0 = 0
Constant prepareBobs::shift_y#0 = 0
Constant prepareBobs::shift_x#0 = 0
Constant prepareBobs::bob_glyph#0 = PROTO_BOB
Constant prepareBobs::cell#0 = 0
Constant shiftProtoBobRight::carry#0 = 0
Constant shiftProtoBobRight::j#0 = 0
Constant shiftProtoBobRight::i#0 = 0
Constant shiftProtoBobRight::$3 = $80
Constant shiftProtoBobRight::$2 = 0
Constant shiftProtoBobDown::i#0 = $17
Constant bobCharsetFindOrAddGlyph::glyph_cursor#0 = BOB_CHARSET
Constant bobCharsetFindOrAddGlyph::glyph_id#0 = 0
Constant bobCharsetFindOrAddGlyph::found#0 = 1
Constant bobCharsetFindOrAddGlyph::i#0 = 0
Constant bobCharsetFindOrAddGlyph::i1#0 = 0
Constant bobCharsetFindOrAddGlyph::found#1 = 0
Constant progress_idx#18 = 0
Constant progress_idx#8 = 0
Constant renderBobCleanupNext#21 = (byte**) 0
Constant bob_charset_next_id#29 = 0
Constant progress_cursor#29 = (byte*) 0
Constant progress_idx#10 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant memset::return#2 = memset::str#0
Constant main::toD0182_$7 = (word)main::toD0182_screen#0
Constant progress_cursor#17 = progress_init::line#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::vicSelectGfxBank1_gfx#0 in [112] main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_gfx#0
Constant value identified (word)main::toD0181_gfx#0 in [122] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant value identified (word)main::vicSelectGfxBank2_gfx#0 in [185] main::vicSelectGfxBank2_toDd001_$0 = > (word)main::vicSelectGfxBank2_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [195] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [2] if(memset::num#0<=0) goto memset::@1
Removing PHI-reference to removed block (main::@1) in block main::@6
if() condition always true - replacing block destination [134] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [165] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [167] if(main::i#1!=rangelast(0,NUM_BOBS-1)) goto main::@4 to NUM_BOBS-1+1
Resolved ranged next value [207] renderBobInit::y#1 = ++ renderBobInit::y#2 to ++
Resolved ranged comparison value [209] if(renderBobInit::y#1!=rangelast(0,$1f)) goto renderBobInit::@1 to $20
Resolved ranged next value [214] renderBobInit::i#1 = ++ renderBobInit::i#2 to ++
Resolved ranged comparison value [216] if(renderBobInit::i#1!=rangelast(0,NUM_BOBS-1)) goto renderBobInit::@3 to NUM_BOBS-1+1
Resolved ranged next value [254] renderBobCleanup::i#1 = ++ renderBobCleanup::i#2 to ++
Resolved ranged comparison value [256] if(renderBobCleanup::i#1!=rangelast(0,NUM_BOBS-1)) goto renderBobCleanup::@1 to NUM_BOBS-1+1
Simplifying constant evaluating to zero 0*BOB_SUBTABLE_SIZE in [231] renderBob::screen#0[0] = (BOB_TABLES+0*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)CIA1 in [14] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = keyboard_matrix_row_bitmask[keyboard_matrix_read::rowid#0]
Simplifying expression containing zero (byte*)CIA2 in [115] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank1_toDd001_return#0
Simplifying expression containing zero (byte*)CIA2 in [188] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank2_toDd001_return#0
Simplifying expression containing zero BOB_TABLES in [231] renderBob::screen#0[0] = (BOB_TABLES+0)[renderBob::bob_table_idx#0]
Simplifying expression containing zero renderBob::screen#0 in [231] renderBob::screen#0[0] = BOB_TABLES[renderBob::bob_table_idx#0]
Simplifying expression containing zero renderBobCleanup::screen#0 in [245] renderBobCleanup::screen#0[0] = 0
Simplifying expression containing zero PROTO_BOB in [331] PROTO_BOB[0] = 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable - keeping the phi block renderBobCleanupNext#25
Eliminating unused variable - keeping the phi block renderBobCleanupNext#12
Eliminating unused variable bobCharsetFindOrAddGlyph::return#0 and assignment [199] bobCharsetFindOrAddGlyph::return#0 = bobCharsetFindOrAddGlyph::glyph_id#11
Eliminating unused constant memset::return#2
Eliminating unused constant OFFSET_STRUCT_MOS6526_CIA_PORT_A
Eliminating unused constant bob_charset_next_id#29
Eliminating unused constant progress_cursor#29
Eliminating unused constant progress_idx#10
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant renderBobCleanupNext#21
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) NUM_BOBS-1+1 in [121] if(main::i#1!=NUM_BOBS-1+1) goto main::@4
Adding number conversion cast (unumber) 1 in [121] if(main::i#1!=(unumber)NUM_BOBS-1+1) goto main::@4
Adding number conversion cast (unumber) $20 in [153] if(renderBobInit::y#1!=$20) goto renderBobInit::@1
Adding number conversion cast (unumber) NUM_BOBS-1+1 in [158] if(renderBobInit::i#1!=NUM_BOBS-1+1) goto renderBobInit::@3
Adding number conversion cast (unumber) 1 in [158] if(renderBobInit::i#1!=(unumber)NUM_BOBS-1+1) goto renderBobInit::@3
Adding number conversion cast (unumber) NUM_BOBS-1+1 in [195] if(renderBobCleanup::i#1!=NUM_BOBS-1+1) goto renderBobCleanup::@1
Adding number conversion cast (unumber) 1 in [195] if(renderBobCleanup::i#1!=(unumber)NUM_BOBS-1+1) goto renderBobCleanup::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast NUM_BOBS-1+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast $20
Simplifying constant integer cast NUM_BOBS-1+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast NUM_BOBS-1+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type $20
Finalized unsigned number type 1
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] memset::end#0 = memset::$4 + memset::num#0
Constant right-side identified [82] main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_gfx#0
Constant right-side identified [86] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [89] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [133] main::vicSelectGfxBank2_toDd001_$0 = > (word)main::vicSelectGfxBank2_gfx#0
Constant right-side identified [137] main::toD0182_$0 = main::toD0182_$7 & $3fff
Constant right-side identified [140] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Constant main::vicSelectGfxBank1_toDd001_$0 = >(word)main::vicSelectGfxBank1_gfx#0
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::vicSelectGfxBank2_toDd001_$0 = >(word)main::vicSelectGfxBank2_gfx#0
Constant main::toD0182_$0 = main::toD0182_$7&$3fff
Constant main::toD0182_$3 = >(word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [81] main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Constant right-side identified [84] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [86] main::toD0181_$4 = main::toD0181_$3 / 4
Constant right-side identified [129] main::vicSelectGfxBank2_toDd001_$1 = main::vicSelectGfxBank2_toDd001_$0 / $40
Constant right-side identified [132] main::toD0182_$1 = main::toD0182_$0 * 4
Constant right-side identified [134] main::toD0182_$4 = main::toD0182_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0/$40
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Constant main::vicSelectGfxBank2_toDd001_$1 = main::vicSelectGfxBank2_toDd001_$0/$40
Constant main::toD0182_$1 = main::toD0182_$0*4
Constant main::toD0182_$4 = main::toD0182_$3/4
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::vicSelectGfxBank1_toDd001_$0/$40 in 
Simplifying constant evaluating to zero main::vicSelectGfxBank2_toDd001_$0/$40 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [82] main::vicSelectGfxBank1_toDd001_return#0 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Simplifying expression containing zero 3 in [130] main::vicSelectGfxBank2_toDd001_return#0 = 3 ^ main::vicSelectGfxBank2_toDd001_$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::vicSelectGfxBank1_toDd001_$0
Eliminating unused constant main::vicSelectGfxBank2_toDd001_$0
Eliminating unused constant main::vicSelectGfxBank1_toDd001_$1
Eliminating unused constant main::vicSelectGfxBank2_toDd001_$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant main::vicSelectGfxBank1_gfx#0
Eliminating unused constant main::vicSelectGfxBank2_gfx#0
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [83] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [84] main::toD0181_$5 = main::toD0181_$4 & $f
Constant right-side identified [128] main::toD0182_$2 = > main::toD0182_$1
Constant right-side identified [129] main::toD0182_$5 = main::toD0182_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::vicSelectGfxBank1_toDd001_return#0 = 3
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Constant main::vicSelectGfxBank2_toDd001_return#0 = 3
Constant main::toD0182_$2 = >main::toD0182_$1
Constant main::toD0182_$5 = main::toD0182_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [82] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Constant right-side identified [124] main::toD0182_return#0 = main::toD0182_$2 | main::toD0182_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [59] mulf8s_prepared::$13 = (byte)mulf8s_prepared::b#0 keeping mulf8s_prepared::b#0
Inlining Noop Cast [63] mulf8s_prepared::return#0 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [65] mulf8s_prepared::$14 = (byte)*mulf8s_prepared::memA keeping *mulf8s_prepared::memA
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [74] mulf8s_prepared::return#2 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [101] main::$13 = main::$12 * 2
Rewriting multiplication to use shift and addition[127] renderBobInit::$0 = renderBobInit::$5 * $28
Rewriting multiplication to use shift [128] renderBobInit::$3 = renderBobInit::y#2 * SIZEOF_WORD
Rewriting multiplication to use shift [133] renderBobInit::$4 = renderBobInit::i#2 * SIZEOF_POINTER
Rewriting division to use shift [138] renderBob::x_char_offset#0 = renderBob::xpos#0 / BOB_SHIFTS_X
Rewriting division to use shift [139] renderBob::y_char_offset#0 = renderBob::ypos#0 / BOB_SHIFTS_Y
Rewriting multiplication to use shift [140] renderBob::$8 = renderBob::y_char_offset#0 * SIZEOF_WORD
Rewriting multiplication to use shift [145] renderBob::$5 = renderBob::$4 * BOB_SHIFTS_X
Rewriting multiplication to use shift [161] renderBobCleanup::$1 = renderBobCleanup::i#2 * SIZEOF_POINTER
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings keyboard_key_pressed::key#0
Inlining constant with var siblings keyboard_key_pressed::key#1
Inlining constant with var siblings mulf_init::sqr#0
Inlining constant with var siblings mulf_init::x_2#0
Inlining constant with var siblings mulf_init::c#0
Inlining constant with var siblings mulf_init::sqr1_hi#0
Inlining constant with var siblings mulf_init::sqr1_lo#0
Inlining constant with var siblings mulf_init::x_255#0
Inlining constant with var siblings mulf_init::dir#0
Inlining constant with var siblings mulf_init::sqr2_hi#0
Inlining constant with var siblings mulf_init::sqr2_lo#0
Inlining constant with var siblings mulf_init::dir#1
Inlining constant with var siblings main::angle#0
Inlining constant with var siblings main::r#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings renderBobInit::y#0
Inlining constant with var siblings renderBobInit::i#0
Inlining constant with var siblings renderBobCleanup::i#0
Inlining constant with var siblings prepareBobs::bob_table_idx#0
Inlining constant with var siblings prepareBobs::shift_y#0
Inlining constant with var siblings prepareBobs::shift_x#0
Inlining constant with var siblings prepareBobs::bob_glyph#0
Inlining constant with var siblings prepareBobs::cell#0
Inlining constant with var siblings shiftProtoBobRight::carry#0
Inlining constant with var siblings shiftProtoBobRight::j#0
Inlining constant with var siblings shiftProtoBobRight::i#0
Inlining constant with var siblings shiftProtoBobDown::i#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::bob_glyph#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::glyph_cursor#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::glyph_id#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::found#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::i#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::i1#0
Inlining constant with var siblings bobCharsetFindOrAddGlyph::found#1
Inlining constant with var siblings renderBobCleanupNext#15
Inlining constant with var siblings bob_charset_next_id#2
Inlining constant with var siblings progress_idx#18
Inlining constant with var siblings progress_idx#8
Inlining constant with var siblings progress_cursor#17
Constant inlined mulf_init::sqr2_lo#0 = mulf_sqr2_lo
Constant inlined prepareBobs::bob_table_idx#0 = 0
Constant inlined shiftProtoBobRight::i#0 = 0
Constant inlined mulf_init::sqr2_hi#0 = mulf_sqr2_hi
Constant inlined main::toD0182_$4 = >(word)CHARSET_BASIC/4
Constant inlined main::toD0182_$5 = >(word)CHARSET_BASIC/4&$f
Constant inlined main::toD0182_$7 = (word)SCREEN_BASIC
Constant inlined main::toD0182_$0 = (word)SCREEN_BASIC&$3fff
Constant inlined main::toD0182_$1 = (word)SCREEN_BASIC&$3fff*4
Constant inlined bobCharsetFindOrAddGlyph::found#1 = 0
Constant inlined main::toD0182_$2 = >(word)SCREEN_BASIC&$3fff*4
Constant inlined bobCharsetFindOrAddGlyph::found#0 = 1
Constant inlined bobCharsetFindOrAddGlyph::i#0 = 0
Constant inlined main::toD0182_$3 = >(word)CHARSET_BASIC
Constant inlined mulf_init::dir#1 = 1
Constant inlined bobCharsetFindOrAddGlyph::glyph_id#0 = 0
Constant inlined mulf_init::dir#0 = $ff
Constant inlined bob_charset_next_id#2 = 0
Constant inlined shiftProtoBobDown::i#0 = $17
Constant inlined mulf_init::x_255#0 = -1
Constant inlined mulf_init::x_2#0 = 0
Constant inlined keyboard_key_pressed::key#0 = KEY_SPACE
Constant inlined keyboard_key_pressed::key#1 = KEY_SPACE
Constant inlined main::toD0181_$7 = (word)BOB_SCREEN
Constant inlined main::toD0182_gfx#0 = CHARSET_BASIC
Constant inlined prepareBobs::shift_x#0 = 0
Constant inlined progress_idx#8 = 0
Constant inlined main::toD0181_$2 = >(word)BOB_SCREEN&$3fff*4
Constant inlined main::toD0181_$1 = (word)BOB_SCREEN&$3fff*4
Constant inlined main::toD0181_$0 = (word)BOB_SCREEN&$3fff
Constant inlined shiftProtoBobRight::carry#0 = 0
Constant inlined main::toD0181_$5 = >(word)BOB_CHARSET/4&$f
Constant inlined main::toD0181_$4 = >(word)BOB_CHARSET/4
Constant inlined main::toD0181_$3 = >(word)BOB_CHARSET
Constant inlined bobCharsetFindOrAddGlyph::bob_glyph#0 = PROTO_BOB+$30
Constant inlined mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Constant inlined renderBobCleanupNext#15 = RENDERBOB_CLEANUP
Constant inlined prepareBobs::cell#0 = 0
Constant inlined mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined mulf_init::c#0 = 0
Constant inlined main::toD0181_screen#0 = BOB_SCREEN
Constant inlined main::toD0181_gfx#0 = BOB_CHARSET
Constant inlined bobCharsetFindOrAddGlyph::glyph_cursor#0 = BOB_CHARSET
Constant inlined shiftProtoBobRight::j#0 = 0
Constant inlined progress_init::line#0 = SCREEN_BASIC
Constant inlined progress_cursor#17 = SCREEN_BASIC
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined prepareBobs::bob_glyph#0 = PROTO_BOB
Constant inlined shiftProtoBobRight::$2 = 0
Constant inlined main::i#0 = 0
Constant inlined shiftProtoBobRight::$3 = $80
Constant inlined renderBobCleanup::i#0 = 0
Constant inlined main::r#0 = $1e
Constant inlined prepareBobs::shift_y#0 = 0
Constant inlined mulf_init::sqr#0 = 0
Constant inlined progress_idx#18 = 0
Constant inlined renderBobInit::y#0 = 0
Constant inlined main::angle#0 = 0
Constant inlined main::toD0182_screen#0 = SCREEN_BASIC
Constant inlined renderBobInit::i#0 = 0
Constant inlined bobCharsetFindOrAddGlyph::i1#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(PROTO_BOB+$18)
Consolidated array index constant in *(PROTO_BOB+$30)
Consolidated array index constant in *(progress_inc::progress_chars+8)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias renderBobInit::$0 = renderBobInit::$8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values keyboard_key_pressed::key#2 KEY_SPACE
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [9] keyboard_key_pressed::colidx#0 = KEY_SPACE & 7
Constant right-side identified [10] keyboard_key_pressed::rowidx#0 = KEY_SPACE >> 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant keyboard_key_pressed::colidx#0 = KEY_SPACE&7
Constant keyboard_key_pressed::rowidx#0 = KEY_SPACE>>3
Successful SSA optimization Pass2ConstantIdentification
Constant keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing call to empty procedure [169] call progress_init 
Removing unused procedure progress_init
Removing unused procedure block progress_init
Removing unused procedure block progress_init::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Constant inlined keyboard_matrix_read::rowid#0 = keyboard_key_pressed::rowidx#0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0)
Consolidated array index constant in *(keyboard_matrix_col_bitmask+keyboard_key_pressed::colidx#0)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type 8
Finalized unsigned number type 8
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type $a
Finalized unsigned number type $10
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type $200
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type 8
Finalized unsigned number type $140
Finalized unsigned number type 9
Finalized unsigned number type 8
Finalized unsigned number type 4
Finalized unsigned number type $20
Finalized unsigned number type $20
Finalized unsigned number type $4b
Finalized unsigned number type $100
Finalized unsigned number type $5a
Finalized unsigned number type $100
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type 8
Successful SSA optimization Pass2FinalizeAllNumbers
Simplifying constant integer cast 3*3*8
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting mulf_init::@11(between mulf_init::@2 and mulf_init::@4)
Added new block during phi lifting mulf_init::@12(between mulf_init::@7 and mulf_init::@9)
Added new block during phi lifting mulf8s_prepared::@6(between mulf8s_prepared::@5 and mulf8s_prepared::@1)
Added new block during phi lifting mulf8s_prepared::@7(between mulf8s_prepared::@1 and mulf8s_prepared::@2)
Added new block during phi lifting main::@22(between main::@20 and main::@1)
Added new block during phi lifting main::@23(between main::@19 and main::@4)
Added new block during phi lifting renderBobInit::@4(between renderBobInit::@1 and renderBobInit::@1)
Added new block during phi lifting renderBobInit::@5(between renderBobInit::@3 and renderBobInit::@3)
Added new block during phi lifting renderBobCleanup::@3(between renderBobCleanup::@1 and renderBobCleanup::@1)
Added new block during phi lifting progress_inc::@3(between progress_inc and progress_inc::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::vicSelectGfxBank2_toDd001
Adding NOP phi() at start of main::vicSelectGfxBank2_toDd001_@return
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@3
Adding NOP phi() at start of mulf_init::@10
Adding NOP phi() at start of prepareBobs
Adding NOP phi() at start of prepareBobs::@9
Adding NOP phi() at start of prepareBobs::@5
Adding NOP phi() at start of prepareBobs::@14
Adding NOP phi() at start of renderBobInit
Adding NOP phi() at start of renderBobInit::@2
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of renderBobCleanup
Adding NOP phi() at start of renderBobCleanup::@2
Adding NOP phi() at start of mulf8s::@2
Adding NOP phi() at start of keyboard_key_pressed
Adding NOP phi() at start of bobCharsetFindOrAddGlyph::@3
Adding NOP phi() at start of bobCharsetFindOrAddGlyph::@2
Adding NOP phi() at start of bobCharsetFindOrAddGlyph::@8
Adding NOP phi() at start of shiftProtoBobDown
Adding NOP phi() at start of shiftProtoBobRight
Adding NOP phi() at start of shiftProtoBobRight::@4
Adding NOP phi() at start of shiftProtoBobRight::@3
CALL GRAPH
Calls in [main] to mulf_init:1 prepareBobs:3 renderBobInit:5 memset:15 renderBobCleanup:20 mulf8s:28 mulf8s:36 renderBob:46 keyboard_key_pressed:51 keyboard_key_pressed:57 
Calls in [prepareBobs] to bobCharsetFindOrAddGlyph:121 shiftProtoBobDown:133 shiftProtoBobRight:148 shiftProtoBobRight:150 bobCharsetFindOrAddGlyph:160 progress_inc:166 
Calls in [mulf8s] to mulf8u_prepare:222 mulf8s_prepared:225 
Calls in [keyboard_key_pressed] to keyboard_matrix_read:251 
Calls in [mulf8s_prepared] to mulf8u_prepared:331 

Created 57 initial phi equivalence classes
Not coalescing [21] main::a#6 = main::angle#8
Coalesced [26] mulf8s::mulf8s_prepare1_a#3 = mulf8s::a#0
Coalesced [27] mulf8s::b#7 = mulf8s::b#0
Coalesced [34] mulf8s::mulf8s_prepare1_a#2 = mulf8s::a#1
Coalesced [35] mulf8s::b#6 = mulf8s::b#1
Coalesced [55] main::angle#12 = main::angle#1
Coalesced [71] main::r#6 = main::r#1
Coalesced [72] main::a#7 = main::a#1
Coalesced [73] renderBobCleanupNext#51 = renderBobCleanupNext#14
Coalesced [74] main::i#6 = main::i#1
Coalesced [92] mulf_init::sqr2_lo#6 = mulf_init::sqr2_lo#1
Coalesced [93] mulf_init::x_255#6 = mulf_init::x_255#1
Coalesced [94] mulf_init::sqr2_hi#6 = mulf_init::sqr2_hi#1
Coalesced [95] mulf_init::dir#5 = mulf_init::dir#4
Coalesced (already) [96] mulf_init::dir#6 = mulf_init::dir#2
Coalesced [102] mulf_init::sqr#9 = mulf_init::sqr#2
Coalesced [103] mulf_init::x_2#8 = mulf_init::x_2#1
Coalesced [112] mulf_init::sqr1_lo#6 = mulf_init::sqr1_lo#1
Coalesced [113] mulf_init::c#6 = mulf_init::c#1
Coalesced [114] mulf_init::sqr#7 = mulf_init::sqr#1
Coalesced [115] mulf_init::sqr1_hi#6 = mulf_init::sqr1_hi#1
Coalesced [116] mulf_init::x_2#6 = mulf_init::x_2#2
Coalesced [117] mulf_init::sqr#8 = mulf_init::sqr#4
Coalesced (already) [118] mulf_init::x_2#7 = mulf_init::x_2#3
Coalesced [122] bob_charset_next_id#79 = bob_charset_next_id#17
Coalesced [126] prepareBobs::bob_table_idx#17 = prepareBobs::bob_table_idx#7
Coalesced [127] bob_charset_next_id#82 = bob_charset_next_id#15
Coalesced [128] progress_cursor#74 = progress_cursor#16
Coalesced [129] progress_idx#74 = progress_idx#17
Coalesced [135] prepareBobs::shift_y#15 = prepareBobs::shift_y#1
Coalesced (already) [136] progress_cursor#72 = progress_cursor#33
Coalesced (already) [137] progress_idx#72 = progress_idx#33
Coalesced (already) [138] bob_charset_next_id#80 = bob_charset_next_id#32
Coalesced (already) [139] prepareBobs::bob_table_idx#15 = prepareBobs::bob_table_idx#12
Coalesced [141] bob_charset_next_id#84 = bob_charset_next_id#32
Coalesced [142] prepareBobs::bob_table#7 = prepareBobs::bob_table#0
Coalesced [143] progress_idx#76 = progress_idx#33
Coalesced [144] progress_cursor#76 = progress_cursor#33
Coalesced [152] prepareBobs::shift_x#11 = prepareBobs::shift_x#1
Coalesced [153] prepareBobs::bob_table_idx#16 = prepareBobs::bob_table_idx#1
Coalesced (already) [154] bob_charset_next_id#81 = bob_charset_next_id#23
Coalesced (already) [155] progress_cursor#73 = progress_cursor#26
Coalesced (already) [156] progress_idx#73 = progress_idx#27
Coalesced [158] bob_charset_next_id#85 = bob_charset_next_id#23
Coalesced [159] bobCharsetFindOrAddGlyph::bob_glyph#14 = bobCharsetFindOrAddGlyph::bob_glyph#1
Coalesced [168] prepareBobs::cell#6 = prepareBobs::cell#1
Coalesced [169] prepareBobs::bob_glyph#6 = prepareBobs::bob_glyph#1
Coalesced (already) [170] bob_charset_next_id#83 = bob_charset_next_id#17
Coalesced [171] prepareBobs::bob_table#6 = prepareBobs::bob_table#1
Coalesced [172] progress_idx#75 = progress_idx#20
Coalesced [173] progress_cursor#75 = progress_cursor#18
Coalesced [191] renderBobInit::i#3 = renderBobInit::i#1
Coalesced [192] renderBobInit::y#3 = renderBobInit::y#1
Coalesced [201] memset::dst#4 = memset::dst#1
Coalesced [219] renderBobCleanup::i#3 = renderBobCleanup::i#1
Coalesced [263] bob_charset_next_id#86 = bob_charset_next_id#7
Coalesced [268] bobCharsetFindOrAddGlyph::i1#4 = bobCharsetFindOrAddGlyph::i1#1
Coalesced (already) [274] bob_charset_next_id#87 = bob_charset_next_id#25
Coalesced [277] bobCharsetFindOrAddGlyph::glyph_id#15 = bobCharsetFindOrAddGlyph::glyph_id#1
Coalesced [278] bobCharsetFindOrAddGlyph::glyph_cursor#13 = bobCharsetFindOrAddGlyph::glyph_cursor#1
Coalesced [282] bobCharsetFindOrAddGlyph::i#5 = bobCharsetFindOrAddGlyph::i#1
Coalesced [294] shiftProtoBobDown::i#4 = shiftProtoBobDown::i#1
Coalesced [308] shiftProtoBobRight::j#13 = shiftProtoBobRight::j#2
Coalesced [311] shiftProtoBobRight::i#10 = shiftProtoBobRight::i#1
Coalesced [312] shiftProtoBobRight::j#11 = shiftProtoBobRight::j#10
Not coalescing [313] shiftProtoBobRight::carry#10 = shiftProtoBobRight::carry#1
Coalesced [315] shiftProtoBobRight::j#12 = shiftProtoBobRight::j#1
Coalesced [321] progress_cursor#78 = progress_cursor#7
Coalesced [325] progress_idx#77 = progress_idx#7
Coalesced (already) [326] progress_cursor#77 = progress_cursor#26
Coalesced [338] mulf8s_prepared::m#7 = mulf8s_prepared::m#1
Coalesced [344] mulf8s_prepared::m#10 = mulf8s_prepared::m#2
Coalesced [347] mulf8s_prepared::m#9 = mulf8s_prepared::m#5
Coalesced [348] mulf8s_prepared::m#8 = mulf8s_prepared::m#0
Coalesced down to 41 phi equivalence classes
Culled Empty Block label main::@14
Culled Empty Block label main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block label main::@8
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@15
Culled Empty Block label main::@22
Culled Empty Block label main::@7
Culled Empty Block label main::vicSelectGfxBank2_toDd001_@return
Culled Empty Block label main::@10
Culled Empty Block label main::toD0182_@return
Culled Empty Block label main::@23
Culled Empty Block label mulf_init::@3
Culled Empty Block label mulf_init::@10
Culled Empty Block label mulf_init::@11
Culled Empty Block label prepareBobs::@10
Culled Empty Block label prepareBobs::@2
Culled Empty Block label renderBobInit::@2
Culled Empty Block label renderBobInit::@5
Culled Empty Block label renderBobInit::@4
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label renderBobCleanup::@2
Culled Empty Block label renderBobCleanup::@3
Culled Empty Block label mulf8s::@2
Culled Empty Block label bobCharsetFindOrAddGlyph::@3
Culled Empty Block label bobCharsetFindOrAddGlyph::@2
Culled Empty Block label bobCharsetFindOrAddGlyph::@9
Culled Empty Block label bobCharsetFindOrAddGlyph::@8
Culled Empty Block label shiftProtoBobRight::@4
Culled Empty Block label progress_inc::@3
Culled Empty Block label mulf8s_prepared::@7
Culled Empty Block label mulf8s_prepared::@6
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block mulf_init::@4 to mulf_init::@3
Renumbering block mulf_init::@5 to mulf_init::@4
Renumbering block mulf_init::@6 to mulf_init::@5
Renumbering block mulf_init::@7 to mulf_init::@6
Renumbering block mulf_init::@8 to mulf_init::@7
Renumbering block mulf_init::@9 to mulf_init::@8
Renumbering block mulf_init::@12 to mulf_init::@9
Renumbering block mulf8s::@3 to mulf8s::@2
Renumbering block main::@9 to main::@7
Renumbering block main::@11 to main::@8
Renumbering block main::@12 to main::@9
Renumbering block main::@13 to main::@10
Renumbering block main::@16 to main::@11
Renumbering block main::@17 to main::@12
Renumbering block main::@18 to main::@13
Renumbering block main::@19 to main::@14
Renumbering block main::@20 to main::@15
Renumbering block main::@21 to main::@16
Renumbering block renderBobInit::@3 to renderBobInit::@2
Renumbering block prepareBobs::@3 to prepareBobs::@2
Renumbering block prepareBobs::@4 to prepareBobs::@3
Renumbering block prepareBobs::@5 to prepareBobs::@4
Renumbering block prepareBobs::@6 to prepareBobs::@5
Renumbering block prepareBobs::@7 to prepareBobs::@6
Renumbering block prepareBobs::@8 to prepareBobs::@7
Renumbering block prepareBobs::@9 to prepareBobs::@8
Renumbering block prepareBobs::@11 to prepareBobs::@9
Renumbering block prepareBobs::@12 to prepareBobs::@10
Renumbering block prepareBobs::@13 to prepareBobs::@11
Renumbering block prepareBobs::@14 to prepareBobs::@12
Renumbering block prepareBobs::@15 to prepareBobs::@13
Renumbering block shiftProtoBobRight::@5 to shiftProtoBobRight::@4
Renumbering block shiftProtoBobRight::@6 to shiftProtoBobRight::@5
Renumbering block shiftProtoBobRight::@7 to shiftProtoBobRight::@6
Renumbering block shiftProtoBobRight::@8 to shiftProtoBobRight::@7
Renumbering block bobCharsetFindOrAddGlyph::@4 to bobCharsetFindOrAddGlyph::@2
Renumbering block bobCharsetFindOrAddGlyph::@5 to bobCharsetFindOrAddGlyph::@3
Renumbering block bobCharsetFindOrAddGlyph::@6 to bobCharsetFindOrAddGlyph::@4
Renumbering block bobCharsetFindOrAddGlyph::@7 to bobCharsetFindOrAddGlyph::@5
Renumbering block bobCharsetFindOrAddGlyph::@10 to bobCharsetFindOrAddGlyph::@6
Renumbering block bobCharsetFindOrAddGlyph::@11 to bobCharsetFindOrAddGlyph::@7
Renumbering block bobCharsetFindOrAddGlyph::@12 to bobCharsetFindOrAddGlyph::@8
Renumbering block bobCharsetFindOrAddGlyph::@13 to bobCharsetFindOrAddGlyph::@9
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::vicSelectGfxBank2_toDd001
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@9
Adding NOP phi() at start of prepareBobs
Adding NOP phi() at start of prepareBobs::@8
Adding NOP phi() at start of prepareBobs::@4
Adding NOP phi() at start of prepareBobs::@12
Adding NOP phi() at start of renderBobInit
Adding NOP phi() at start of memset
Adding NOP phi() at start of renderBobCleanup
Adding NOP phi() at start of keyboard_key_pressed
Adding NOP phi() at start of shiftProtoBobDown
Adding NOP phi() at start of shiftProtoBobRight
Adding NOP phi() at start of shiftProtoBobRight::@3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call mulf_init 
  to:main::@9
main::@9: scope:[main]  from main
  [2] phi()
  [3] call prepareBobs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [4] phi()
  [5] call renderBobInit 
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@10
  [6] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [7] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [8] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [9] phi()
  to:main::@7
main::@7: scope:[main]  from main::toD0181
  [10] *D018 = main::toD0181_return#0
  [11] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@7
  [12] main::angle#8 = phi( main::@7/0, main::@15/main::angle#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [13] if(*RASTER<$f8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] *BORDER_COLOR = $f
  [15] call renderBobCleanup 
  to:main::@11
main::@11: scope:[main]  from main::@3
  [16] main::a#6 = main::angle#8
  to:main::@4
main::@4: scope:[main]  from main::@11 main::@14
  [17] main::i#2 = phi( main::@11/0, main::@14/main::i#1 )
  [17] renderBobCleanupNext#19 = phi( main::@11/RENDERBOB_CLEANUP, main::@14/renderBobCleanupNext#14 )
  [17] main::a#2 = phi( main::@11/main::a#6, main::@14/main::a#1 )
  [17] main::r#2 = phi( main::@11/$1e, main::@14/main::r#1 )
  [18] *BORDER_COLOR = 1
  [19] mulf8s::a#0 = main::r#2
  [20] mulf8s::b#0 = COS[main::a#2]
  [21] call mulf8s 
  [22] mulf8s::return#2 = mulf8s::return#0
  to:main::@12
main::@12: scope:[main]  from main::@4
  [23] main::$10 = mulf8s::return#2
  [24] main::x#0 = main::$10 + (signed word)$4b*$100
  [25] mulf8s::a#1 = main::r#2
  [26] mulf8s::b#1 = SIN[main::a#2]
  [27] call mulf8s 
  [28] mulf8s::return#3 = mulf8s::return#0
  to:main::@13
main::@13: scope:[main]  from main::@12
  [29] main::$12 = mulf8s::return#3
  [30] main::$13 = main::$12 << 1
  [31] main::y#0 = main::$13 + (signed word)$5a*$100
  [32] *BORDER_COLOR = 2
  [33] main::a#1 = main::a#2 + $62
  [34] main::r#1 = main::r#2 + 3
  [35] renderBob::xpos#0 = > main::x#0
  [36] renderBob::ypos#0 = > main::y#0
  [37] call renderBob 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [38] main::i#1 = ++ main::i#2
  [39] if(main::i#1!=NUM_BOBS-1+1) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@14
  [40] main::angle#1 = main::angle#8 + 3
  [41] *BORDER_COLOR = 0
  [42] call keyboard_key_pressed 
  [43] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
  to:main::@15
main::@15: scope:[main]  from main::@5
  [44] main::$19 = keyboard_key_pressed::return#2
  [45] if(0!=main::$19) goto main::@6
  to:main::@1
main::@6: scope:[main]  from main::@15 main::@16
  [46] phi()
  [47] call keyboard_key_pressed 
  [48] keyboard_key_pressed::return#3 = keyboard_key_pressed::return#0
  to:main::@16
main::@16: scope:[main]  from main::@6
  [49] main::$21 = keyboard_key_pressed::return#3
  [50] if(0!=main::$21) goto main::@6
  to:main::vicSelectGfxBank2
main::vicSelectGfxBank2: scope:[main]  from main::@16
  [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  to:main::vicSelectGfxBank2_toDd001
main::vicSelectGfxBank2_toDd001: scope:[main]  from main::vicSelectGfxBank2
  [52] phi()
  to:main::vicSelectGfxBank2_@1
main::vicSelectGfxBank2_@1: scope:[main]  from main::vicSelectGfxBank2_toDd001
  [53] *((byte*)CIA2) = main::vicSelectGfxBank2_toDd001_return#0
  to:main::toD0182
main::toD0182: scope:[main]  from main::vicSelectGfxBank2_@1
  [54] phi()
  to:main::@8
main::@8: scope:[main]  from main::toD0182
  [55] *D018 = main::toD0182_return#0
  to:main::@return
main::@return: scope:[main]  from main::@8
  [56] return 
  to:@return

void mulf_init()
mulf_init: scope:[mulf_init]  from main
  [57] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [58] mulf_init::x_2#3 = phi( mulf_init/0, mulf_init::@3/mulf_init::x_2#2 )
  [58] mulf_init::sqr1_hi#2 = phi( mulf_init/mulf_sqr1_hi+1, mulf_init::@3/mulf_init::sqr1_hi#1 )
  [58] mulf_init::sqr#4 = phi( mulf_init/0, mulf_init::@3/mulf_init::sqr#1 )
  [58] mulf_init::c#2 = phi( mulf_init/0, mulf_init::@3/mulf_init::c#1 )
  [58] mulf_init::sqr1_lo#2 = phi( mulf_init/mulf_sqr1_lo+1, mulf_init::@3/mulf_init::sqr1_lo#1 )
  [59] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [60] mulf_init::dir#2 = phi( mulf_init::@1/$ff, mulf_init::@8/mulf_init::dir#4 )
  [60] mulf_init::sqr2_hi#2 = phi( mulf_init::@1/mulf_sqr2_hi, mulf_init::@8/mulf_init::sqr2_hi#1 )
  [60] mulf_init::x_255#2 = phi( mulf_init::@1/-1, mulf_init::@8/mulf_init::x_255#1 )
  [60] mulf_init::sqr2_lo#2 = phi( mulf_init::@1/mulf_sqr2_lo, mulf_init::@8/mulf_init::sqr2_lo#1 )
  [61] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [62] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
  [63] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [64] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [65] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2]
  [66] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2]
  [67] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2
  [68] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2
  [69] if(mulf_init::x_255#1!=0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [70] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [71] mulf_init::dir#4 = phi( mulf_init::@6/1, mulf_init::@9/mulf_init::dir#2 )
  [72] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [73] mulf_init::c#1 = ++ mulf_init::c#2
  [74] mulf_init::$1 = mulf_init::c#1 & 1
  [75] if(mulf_init::$1!=0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [76] mulf_init::x_2#1 = ++ mulf_init::x_2#3
  [77] mulf_init::sqr#2 = ++ mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [78] mulf_init::x_2#2 = phi( mulf_init::@2/mulf_init::x_2#3, mulf_init::@4/mulf_init::x_2#1 )
  [78] mulf_init::sqr#3 = phi( mulf_init::@2/mulf_init::sqr#4, mulf_init::@4/mulf_init::sqr#2 )
  [79] mulf_init::$4 = < mulf_init::sqr#3
  [80] *mulf_init::sqr1_lo#2 = mulf_init::$4
  [81] mulf_init::$5 = > mulf_init::sqr#3
  [82] *mulf_init::sqr1_hi#2 = mulf_init::$5
  [83] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2
  [84] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2
  [85] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2
  to:mulf_init::@1

void prepareBobs()
prepareBobs: scope:[prepareBobs]  from main::@9
  [86] phi()
  to:prepareBobs::@8
prepareBobs::@8: scope:[prepareBobs]  from prepareBobs
  [87] phi()
  [88] call bobCharsetFindOrAddGlyph 
  to:prepareBobs::@1
prepareBobs::@1: scope:[prepareBobs]  from prepareBobs::@8 prepareBobs::@9
  [89] prepareBobs::bob_table_idx#7 = phi( prepareBobs::@8/0, prepareBobs::@9/prepareBobs::bob_table_idx#12 )
  [89] bob_charset_next_id#15 = phi( prepareBobs::@8/bob_charset_next_id#17, prepareBobs::@9/bob_charset_next_id#32 )
  [89] progress_idx#17 = phi( prepareBobs::@8/0, prepareBobs::@9/progress_idx#33 )
  [89] progress_cursor#16 = phi( prepareBobs::@8/SCREEN_BASIC, prepareBobs::@9/progress_cursor#33 )
  [89] prepareBobs::shift_y#2 = phi( prepareBobs::@8/0, prepareBobs::@9/prepareBobs::shift_y#1 )
  [90] if(prepareBobs::shift_y#2<BOB_SHIFTS_Y) goto prepareBobs::@2
  to:prepareBobs::@return
prepareBobs::@return: scope:[prepareBobs]  from prepareBobs::@1
  [91] return 
  to:@return
prepareBobs::@2: scope:[prepareBobs]  from prepareBobs::@1 prepareBobs::@13
  [92] progress_idx#33 = phi( prepareBobs::@13/progress_idx#27, prepareBobs::@1/progress_idx#17 )
  [92] progress_cursor#33 = phi( prepareBobs::@13/progress_cursor#26, prepareBobs::@1/progress_cursor#16 )
  [92] bob_charset_next_id#32 = phi( prepareBobs::@13/bob_charset_next_id#23, prepareBobs::@1/bob_charset_next_id#15 )
  [92] prepareBobs::bob_table_idx#12 = phi( prepareBobs::@13/prepareBobs::bob_table_idx#1, prepareBobs::@1/prepareBobs::bob_table_idx#7 )
  [92] prepareBobs::shift_x#2 = phi( prepareBobs::@13/prepareBobs::shift_x#1, prepareBobs::@1/0 )
  [93] if(prepareBobs::shift_x#2<BOB_SHIFTS_X) goto prepareBobs::@3
  to:prepareBobs::@4
prepareBobs::@4: scope:[prepareBobs]  from prepareBobs::@2
  [94] phi()
  [95] call shiftProtoBobDown 
  to:prepareBobs::@9
prepareBobs::@9: scope:[prepareBobs]  from prepareBobs::@4
  [96] prepareBobs::shift_y#1 = ++ prepareBobs::shift_y#2
  to:prepareBobs::@1
prepareBobs::@3: scope:[prepareBobs]  from prepareBobs::@2
  [97] prepareBobs::bob_table#0 = BOB_TABLES + prepareBobs::bob_table_idx#12
  to:prepareBobs::@5
prepareBobs::@5: scope:[prepareBobs]  from prepareBobs::@11 prepareBobs::@3
  [98] progress_cursor#26 = phi( prepareBobs::@11/progress_cursor#18, prepareBobs::@3/progress_cursor#33 )
  [98] progress_idx#27 = phi( prepareBobs::@11/progress_idx#20, prepareBobs::@3/progress_idx#33 )
  [98] prepareBobs::bob_table#2 = phi( prepareBobs::@11/prepareBobs::bob_table#1, prepareBobs::@3/prepareBobs::bob_table#0 )
  [98] bob_charset_next_id#23 = phi( prepareBobs::@11/bob_charset_next_id#17, prepareBobs::@3/bob_charset_next_id#32 )
  [98] prepareBobs::bob_glyph#2 = phi( prepareBobs::@11/prepareBobs::bob_glyph#1, prepareBobs::@3/PROTO_BOB )
  [98] prepareBobs::cell#2 = phi( prepareBobs::@11/prepareBobs::cell#1, prepareBobs::@3/0 )
  [99] if(prepareBobs::cell#2<9) goto prepareBobs::@6
  to:prepareBobs::@7
prepareBobs::@7: scope:[prepareBobs]  from prepareBobs::@5
  [100] prepareBobs::bob_table_idx#1 = ++ prepareBobs::bob_table_idx#12
  [101] call shiftProtoBobRight 
  to:prepareBobs::@12
prepareBobs::@12: scope:[prepareBobs]  from prepareBobs::@7
  [102] phi()
  [103] call shiftProtoBobRight 
  to:prepareBobs::@13
prepareBobs::@13: scope:[prepareBobs]  from prepareBobs::@12
  [104] prepareBobs::shift_x#1 = ++ prepareBobs::shift_x#2
  to:prepareBobs::@2
prepareBobs::@6: scope:[prepareBobs]  from prepareBobs::@5
  [105] bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2
  [106] call bobCharsetFindOrAddGlyph 
  [107] bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11
  to:prepareBobs::@10
prepareBobs::@10: scope:[prepareBobs]  from prepareBobs::@6
  [108] prepareBobs::$6 = bobCharsetFindOrAddGlyph::return#1
  [109] *prepareBobs::bob_table#2 = prepareBobs::$6
  [110] prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#2 + 8
  [111] prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y
  [112] call progress_inc 
  to:prepareBobs::@11
prepareBobs::@11: scope:[prepareBobs]  from prepareBobs::@10
  [113] prepareBobs::cell#1 = ++ prepareBobs::cell#2
  to:prepareBobs::@5

void renderBobInit()
renderBobInit: scope:[renderBobInit]  from main::@10
  [114] phi()
  to:renderBobInit::@1
renderBobInit::@1: scope:[renderBobInit]  from renderBobInit renderBobInit::@1
  [115] renderBobInit::y#2 = phi( renderBobInit/0, renderBobInit::@1/renderBobInit::y#1 )
  [116] renderBobInit::$5 = (word)renderBobInit::y#2
  [117] renderBobInit::$6 = renderBobInit::$5 << 2
  [118] renderBobInit::$7 = renderBobInit::$6 + renderBobInit::$5
  [119] renderBobInit::$0 = renderBobInit::$7 << 3
  [120] renderBobInit::$3 = renderBobInit::y#2 << 1
  [121] MUL40[renderBobInit::$3] = renderBobInit::$0
  [122] renderBobInit::y#1 = ++ renderBobInit::y#2
  [123] if(renderBobInit::y#1!=$20) goto renderBobInit::@1
  to:renderBobInit::@2
renderBobInit::@2: scope:[renderBobInit]  from renderBobInit::@1 renderBobInit::@2
  [124] renderBobInit::i#2 = phi( renderBobInit::@1/0, renderBobInit::@2/renderBobInit::i#1 )
  [125] renderBobInit::$4 = renderBobInit::i#2 << 1
  [126] RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN
  [127] renderBobInit::i#1 = ++ renderBobInit::i#2
  [128] if(renderBobInit::i#1!=NUM_BOBS-1+1) goto renderBobInit::@2
  to:renderBobInit::@return
renderBobInit::@return: scope:[renderBobInit]  from renderBobInit::@2
  [129] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@7
  [130] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [131] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [132] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [133] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [134] *memset::dst#2 = memset::c#0
  [135] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void renderBobCleanup()
renderBobCleanup: scope:[renderBobCleanup]  from main::@3
  [136] phi()
  to:renderBobCleanup::@1
renderBobCleanup::@1: scope:[renderBobCleanup]  from renderBobCleanup renderBobCleanup::@1
  [137] renderBobCleanup::i#2 = phi( renderBobCleanup/0, renderBobCleanup::@1/renderBobCleanup::i#1 )
  [138] renderBobCleanup::$1 = renderBobCleanup::i#2 << 1
  [139] renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1]
  [140] *renderBobCleanup::screen#0 = 0
  [141] renderBobCleanup::screen#0[$28] = 0
  [142] renderBobCleanup::screen#0[$50] = 0
  [143] renderBobCleanup::screen#0[1] = 0
  [144] renderBobCleanup::screen#0[$29] = 0
  [145] renderBobCleanup::screen#0[$51] = 0
  [146] renderBobCleanup::screen#0[2] = 0
  [147] renderBobCleanup::screen#0[$2a] = 0
  [148] renderBobCleanup::screen#0[$52] = 0
  [149] renderBobCleanup::i#1 = ++ renderBobCleanup::i#2
  [150] if(renderBobCleanup::i#1!=NUM_BOBS-1+1) goto renderBobCleanup::@1
  to:renderBobCleanup::@return
renderBobCleanup::@return: scope:[renderBobCleanup]  from renderBobCleanup::@1
  [151] return 
  to:@return

signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
mulf8s: scope:[mulf8s]  from main::@12 main::@4
  [152] mulf8s::b#2 = phi( main::@12/mulf8s::b#1, main::@4/mulf8s::b#0 )
  [152] mulf8s::mulf8s_prepare1_a#0 = phi( main::@12/mulf8s::a#1, main::@4/mulf8s::a#0 )
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  [153] mulf8u_prepare::a#0 = (byte)mulf8s::mulf8s_prepare1_a#0
  [154] call mulf8u_prepare 
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  [155] mulf8s_prepared::b#0 = mulf8s::b#2
  [156] call mulf8s_prepared 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::@1
  [157] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@2
  [158] return 
  to:@return

void renderBob(byte renderBob::xpos , byte renderBob::ypos)
renderBob: scope:[renderBob]  from main::@13
  [159] renderBob::x_char_offset#0 = renderBob::xpos#0 >> 2
  [160] renderBob::y_char_offset#0 = renderBob::ypos#0 >> 3
  [161] renderBob::$8 = renderBob::y_char_offset#0 << 1
  [162] renderBob::y_offset#0 = MUL40[renderBob::$8]
  [163] renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0
  [164] renderBob::screen#0 = renderBob::$2 + renderBob::x_char_offset#0
  [165] renderBob::$4 = renderBob::ypos#0 & 7
  [166] renderBob::$5 = renderBob::$4 << 2
  [167] renderBob::$6 = renderBob::xpos#0 & 3
  [168] renderBob::bob_table_idx#0 = renderBob::$5 + renderBob::$6
  [169] *renderBobCleanupNext#19 = renderBob::screen#0
  [170] renderBobCleanupNext#14 = renderBobCleanupNext#19 + SIZEOF_POINTER
  [171] *renderBob::screen#0 = BOB_TABLES[renderBob::bob_table_idx#0]
  [172] renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [173] renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [174] renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [175] renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [176] renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [177] renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [178] renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  [179] renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0]
  to:renderBob::@return
renderBob::@return: scope:[renderBob]  from renderBob
  [180] return 
  to:@return

byte keyboard_key_pressed(byte keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from main::@5 main::@6
  [181] phi()
  [182] call keyboard_matrix_read 
  [183] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [184] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
  [185] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & *(keyboard_matrix_col_bitmask+keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [186] return 
  to:@return

byte bobCharsetFindOrAddGlyph(byte* bobCharsetFindOrAddGlyph::bob_glyph)
bobCharsetFindOrAddGlyph: scope:[bobCharsetFindOrAddGlyph]  from prepareBobs::@6 prepareBobs::@8
  [187] bobCharsetFindOrAddGlyph::bob_glyph#10 = phi( prepareBobs::@6/bobCharsetFindOrAddGlyph::bob_glyph#1, prepareBobs::@8/PROTO_BOB+$30 )
  [187] bob_charset_next_id#25 = phi( prepareBobs::@6/bob_charset_next_id#23, prepareBobs::@8/0 )
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@1: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph bobCharsetFindOrAddGlyph::@6
  [188] bobCharsetFindOrAddGlyph::glyph_cursor#11 = phi( bobCharsetFindOrAddGlyph/BOB_CHARSET, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::glyph_cursor#1 )
  [188] bobCharsetFindOrAddGlyph::glyph_id#11 = phi( bobCharsetFindOrAddGlyph/0, bobCharsetFindOrAddGlyph::@6/bobCharsetFindOrAddGlyph::glyph_id#1 )
  [189] if(bobCharsetFindOrAddGlyph::glyph_id#11!=bob_charset_next_id#25) goto bobCharsetFindOrAddGlyph::@2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@7: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@8
  [190] bobCharsetFindOrAddGlyph::i1#2 = phi( bobCharsetFindOrAddGlyph::@8/bobCharsetFindOrAddGlyph::i1#1, bobCharsetFindOrAddGlyph::@1/0 )
  [191] if(bobCharsetFindOrAddGlyph::i1#2<8) goto bobCharsetFindOrAddGlyph::@8
  to:bobCharsetFindOrAddGlyph::@9
bobCharsetFindOrAddGlyph::@9: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [192] bob_charset_next_id#7 = ++ bob_charset_next_id#25
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@return: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5 bobCharsetFindOrAddGlyph::@9
  [193] bob_charset_next_id#17 = phi( bobCharsetFindOrAddGlyph::@9/bob_charset_next_id#7, bobCharsetFindOrAddGlyph::@5/bob_charset_next_id#25 )
  [194] return 
  to:@return
bobCharsetFindOrAddGlyph::@8: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [195] bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i1#2] = bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i1#2]
  [196] bobCharsetFindOrAddGlyph::i1#1 = ++ bobCharsetFindOrAddGlyph::i1#2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@2: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@4
  [197] bobCharsetFindOrAddGlyph::i#2 = phi( bobCharsetFindOrAddGlyph::@1/0, bobCharsetFindOrAddGlyph::@4/bobCharsetFindOrAddGlyph::i#1 )
  [198] if(bobCharsetFindOrAddGlyph::i#2<8) goto bobCharsetFindOrAddGlyph::@3
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@3: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2
  [199] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@4
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@5: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2 bobCharsetFindOrAddGlyph::@3
  [200] bobCharsetFindOrAddGlyph::found#2 = phi( bobCharsetFindOrAddGlyph::@2/1, bobCharsetFindOrAddGlyph::@3/0 )
  [201] if(0==bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@6
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@6: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5
  [202] bobCharsetFindOrAddGlyph::glyph_id#1 = ++ bobCharsetFindOrAddGlyph::glyph_id#11
  [203] bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#11 + 8
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@4: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@3
  [204] bobCharsetFindOrAddGlyph::i#1 = ++ bobCharsetFindOrAddGlyph::i#2
  to:bobCharsetFindOrAddGlyph::@2

void shiftProtoBobDown()
shiftProtoBobDown: scope:[shiftProtoBobDown]  from prepareBobs::@4
  [205] phi()
  to:shiftProtoBobDown::@1
shiftProtoBobDown::@1: scope:[shiftProtoBobDown]  from shiftProtoBobDown shiftProtoBobDown::@2
  [206] shiftProtoBobDown::i#2 = phi( shiftProtoBobDown/$17, shiftProtoBobDown::@2/shiftProtoBobDown::i#1 )
  [207] if(shiftProtoBobDown::i#2>0) goto shiftProtoBobDown::@2
  to:shiftProtoBobDown::@3
shiftProtoBobDown::@3: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [208] *PROTO_BOB = 0
  [209] *(PROTO_BOB+$18) = 0
  [210] *(PROTO_BOB+$30) = 0
  to:shiftProtoBobDown::@return
shiftProtoBobDown::@return: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@3
  [211] return 
  to:@return
shiftProtoBobDown::@2: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [212] PROTO_BOB[shiftProtoBobDown::i#2] = (PROTO_BOB+$17)[shiftProtoBobDown::i#2]
  [213] (PROTO_BOB+$18)[shiftProtoBobDown::i#2] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#2]
  [214] (PROTO_BOB+$30)[shiftProtoBobDown::i#2] = 0
  [215] shiftProtoBobDown::i#1 = -- shiftProtoBobDown::i#2
  to:shiftProtoBobDown::@1

void shiftProtoBobRight()
shiftProtoBobRight: scope:[shiftProtoBobRight]  from prepareBobs::@12 prepareBobs::@7
  [216] phi()
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@1: scope:[shiftProtoBobRight]  from shiftProtoBobRight shiftProtoBobRight::@6
  [217] shiftProtoBobRight::carry#2 = phi( shiftProtoBobRight/0, shiftProtoBobRight::@6/shiftProtoBobRight::carry#10 )
  [217] shiftProtoBobRight::j#3 = phi( shiftProtoBobRight/0, shiftProtoBobRight::@6/shiftProtoBobRight::j#10 )
  [217] shiftProtoBobRight::i#2 = phi( shiftProtoBobRight/0, shiftProtoBobRight::@6/shiftProtoBobRight::i#1 )
  [218] if(shiftProtoBobRight::i#2<3*3*8) goto shiftProtoBobRight::@2
  to:shiftProtoBobRight::@return
shiftProtoBobRight::@return: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [219] return 
  to:@return
shiftProtoBobRight::@2: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [220] shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1
  [221] if(0!=shiftProtoBobRight::$1) goto shiftProtoBobRight::@3
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@3: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2
  [222] phi()
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@4: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2 shiftProtoBobRight::@3
  [223] shiftProtoBobRight::carry#1 = phi( shiftProtoBobRight::@3/$80, shiftProtoBobRight::@2/0 )
  [224] shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#3] >> 1
  [225] shiftProtoBobRight::$6 = shiftProtoBobRight::carry#2 | shiftProtoBobRight::$5
  [226] PROTO_BOB[shiftProtoBobRight::j#3] = shiftProtoBobRight::$6
  [227] if(shiftProtoBobRight::j#3>=$30) goto shiftProtoBobRight::@5
  to:shiftProtoBobRight::@7
shiftProtoBobRight::@7: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [228] shiftProtoBobRight::j#2 = shiftProtoBobRight::j#3 + $18
  to:shiftProtoBobRight::@6
shiftProtoBobRight::@6: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@5 shiftProtoBobRight::@7
  [229] shiftProtoBobRight::j#10 = phi( shiftProtoBobRight::@5/shiftProtoBobRight::j#1, shiftProtoBobRight::@7/shiftProtoBobRight::j#2 )
  [230] shiftProtoBobRight::i#1 = ++ shiftProtoBobRight::i#2
  [231] shiftProtoBobRight::carry#10 = shiftProtoBobRight::carry#1
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@5: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [232] shiftProtoBobRight::j#1 = shiftProtoBobRight::j#3 - $2f
  to:shiftProtoBobRight::@6

void progress_inc()
progress_inc: scope:[progress_inc]  from prepareBobs::@10
  [233] progress_idx#7 = ++ progress_idx#27
  [234] if(progress_idx#7!=8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [235] *progress_cursor#26 = *(progress_inc::progress_chars+8)
  [236] progress_cursor#7 = ++ progress_cursor#26
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [237] progress_cursor#18 = phi( progress_inc/progress_cursor#26, progress_inc::@2/progress_cursor#7 )
  [237] progress_idx#20 = phi( progress_inc/progress_idx#7, progress_inc::@2/0 )
  [238] *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20]
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [239] return 
  to:@return

void mulf8u_prepare(byte mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1
  [240] *mulf8u_prepare::memA = mulf8u_prepare::a#0
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [242] return 
  to:@return

signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  [243] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#0
  [244] call mulf8u_prepared 
  [245] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [246] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
  [247] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [248] mulf8s_prepared::$6 = > mulf8s_prepared::m#0
  [249] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0
  [250] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [251] mulf8s_prepared::m#5 = phi( mulf8s_prepared::@3/mulf8s_prepared::m#1, mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  [252] if(mulf8s_prepared::b#0>=0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [253] mulf8s_prepared::$9 = > mulf8s_prepared::m#5
  [254] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA
  [255] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [256] mulf8s_prepared::m#4 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#5, mulf8s_prepared::@4/mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [257] return 
  to:@return

byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [258] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0)
  [259] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [260] return 
  to:@return

word mulf8u_prepared(byte mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [261] *mulf8u_prepared::memB = mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [263] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [264] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte bobCharsetFindOrAddGlyph(byte* bobCharsetFindOrAddGlyph::bob_glyph)
byte* bobCharsetFindOrAddGlyph::bob_glyph
byte* bobCharsetFindOrAddGlyph::bob_glyph#1 20002.0
byte* bobCharsetFindOrAddGlyph::bob_glyph#10 7.333340002E8
byte bobCharsetFindOrAddGlyph::found
byte bobCharsetFindOrAddGlyph::found#2 1.000000001E9
byte* bobCharsetFindOrAddGlyph::glyph_cursor
byte* bobCharsetFindOrAddGlyph::glyph_cursor#1 2.000000002E9
byte* bobCharsetFindOrAddGlyph::glyph_cursor#11 1.0000000003076923E9
byte bobCharsetFindOrAddGlyph::glyph_id
byte bobCharsetFindOrAddGlyph::glyph_id#1 1.000000001E9
byte bobCharsetFindOrAddGlyph::glyph_id#11 1.8750062525E8
byte bobCharsetFindOrAddGlyph::i
byte bobCharsetFindOrAddGlyph::i#1 2.0000000002E10
byte bobCharsetFindOrAddGlyph::i#2 1.6666666668333332E10
byte bobCharsetFindOrAddGlyph::i1
byte bobCharsetFindOrAddGlyph::i1#1 2.000000002E9
byte bobCharsetFindOrAddGlyph::i1#2 1.6666666683333335E9
byte bobCharsetFindOrAddGlyph::return
byte bobCharsetFindOrAddGlyph::return#1 20002.0
byte bob_charset_next_id
byte bob_charset_next_id#15 106.5
byte bob_charset_next_id#17 9.091909218181819E7
byte bob_charset_next_id#23 2750.5
byte bob_charset_next_id#25 1.3334066693333334E8
byte bob_charset_next_id#32 367.33333333333337
byte bob_charset_next_id#7 200002.0
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 202.0
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::key
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 30.75
byte keyboard_key_pressed::return#2 22.0
byte keyboard_key_pressed::return#3 22.0
byte keyboard_key_pressed::rowidx
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 367.33333333333337
byte keyboard_matrix_read::return#2 202.0
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
void main()
signed word~ main::$10 202.0
signed word~ main::$12 202.0
signed word~ main::$13 202.0
byte~ main::$19 22.0
byte~ main::$21 22.0
byte main::a
byte main::a#1 28.857142857142858
byte main::a#2 25.9375
byte main::a#6 22.0
byte main::angle
byte main::angle#1 3.6666666666666665
byte main::angle#8 1.1785714285714286
byte main::i
byte main::i#1 151.5
byte main::i#2 9.619047619047619
signed byte main::r
signed byte main::r#1 33.666666666666664
signed byte main::r#2 23.764705882352942
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
byte* main::toD0182_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
byte* main::vicSelectGfxBank2_gfx
byte* main::vicSelectGfxBank2_toDd001_gfx
byte main::vicSelectGfxBank2_toDd001_return
signed word main::x
signed word main::x#0 18.363636363636363
signed word main::y
signed word main::y#0 40.4
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 202.0
byte* memset::dst#2 134.66666666666666
byte* memset::end
word memset::num
void* memset::return
void* memset::str
signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
signed byte mulf8s::a
signed byte mulf8s::a#0 101.0
signed byte mulf8s::a#1 101.0
signed byte mulf8s::b
signed byte mulf8s::b#0 202.0
signed byte mulf8s::b#1 202.0
signed byte mulf8s::b#2 401.0
signed byte mulf8s::mulf8s_prepare1_a
signed byte mulf8s::mulf8s_prepare1_a#0 202.0
signed word mulf8s::return
signed word mulf8s::return#0 300.75
signed word mulf8s::return#2 202.0
signed word mulf8s::return#3 202.0
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 20002.0
byte~ mulf8s_prepared::$12 20002.0
byte~ mulf8s_prepared::$6 20002.0
byte~ mulf8s_prepared::$9 20002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 1100.2
word mulf8s_prepared::m
word mulf8s_prepared::m#0 10001.0
word mulf8s_prepared::m#1 20002.0
word mulf8s_prepared::m#2 20002.0
word mulf8s_prepared::m#4 6667.333333333333
word mulf8s_prepared::m#5 12501.25
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#0 11002.0
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 110002.0
word mulf8u_prepared::return
word mulf8u_prepared::return#0 36667.33333333333
word mulf8u_prepared::return#2 20002.0
void mulf_init()
byte~ mulf_init::$1 202.0
byte~ mulf_init::$4 202.0
byte~ mulf_init::$5 202.0
byte mulf_init::c
byte mulf_init::c#1 23.307692307692307
byte mulf_init::c#2 101.0
byte mulf_init::dir
byte mulf_init::dir#2 37.875
byte mulf_init::dir#4 101.0
word mulf_init::sqr
word mulf_init::sqr#1 101.0
word mulf_init::sqr#2 202.0
word mulf_init::sqr#3 84.16666666666666
word mulf_init::sqr#4 50.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 67.33333333333333
byte* mulf_init::sqr1_hi#2 25.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 202.0
byte* mulf_init::sqr1_lo#2 28.857142857142858
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 33.666666666666664
byte* mulf_init::sqr2_hi#2 75.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 202.0
byte* mulf_init::sqr2_lo#2 44.888888888888886
byte mulf_init::x_2
byte mulf_init::x_2#1 101.0
byte mulf_init::x_2#2 50.5
byte mulf_init::x_2#3 60.599999999999994
byte mulf_init::x_255
byte mulf_init::x_255#1 60.599999999999994
byte mulf_init::x_255#2 80.8
void prepareBobs()
byte~ prepareBobs::$6 20002.0
byte* prepareBobs::bob_glyph
byte* prepareBobs::bob_glyph#1 5000.5
byte* prepareBobs::bob_glyph#2 4286.142857142857
byte* prepareBobs::bob_table
byte* prepareBobs::bob_table#0 2002.0
byte* prepareBobs::bob_table#1 6667.333333333333
byte* prepareBobs::bob_table#2 3875.5
byte prepareBobs::bob_table_idx
byte prepareBobs::bob_table_idx#1 400.4
byte prepareBobs::bob_table_idx#12 188.52941176470588
byte prepareBobs::bob_table_idx#7 101.0
byte prepareBobs::cell
byte prepareBobs::cell#1 20002.0
byte prepareBobs::cell#2 3000.3
byte prepareBobs::shift_x
byte prepareBobs::shift_x#1 2002.0
byte prepareBobs::shift_x#2 166.83333333333334
byte prepareBobs::shift_y
byte prepareBobs::shift_y#1 202.0
byte prepareBobs::shift_y#2 13.173913043478262
byte* progress_cursor
byte* progress_cursor#16 101.0
byte* progress_cursor#18 62000.8
byte* progress_cursor#26 18353.294117647056
byte* progress_cursor#33 367.33333333333337
byte* progress_cursor#7 200002.0
byte progress_idx
byte progress_idx#17 101.0
byte progress_idx#20 42000.600000000006
byte progress_idx#27 8000.285714285715
byte progress_idx#33 367.33333333333337
byte progress_idx#7 150001.5
void progress_inc()
void renderBob(byte renderBob::xpos , byte renderBob::ypos)
byte*~ renderBob::$2 2002.0
byte~ renderBob::$4 2002.0
byte~ renderBob::$5 1001.0
byte~ renderBob::$6 2002.0
byte~ renderBob::$8 2002.0
byte renderBob::bob_table_idx
byte renderBob::bob_table_idx#0 910.0
byte* renderBob::screen
byte* renderBob::screen#0 734.0666666666667
byte renderBob::x_char_offset
byte renderBob::x_char_offset#0 400.4
byte renderBob::xpos
byte renderBob::xpos#0 210.29999999999998
byte renderBob::y_char_offset
byte renderBob::y_char_offset#0 2002.0
word renderBob::y_offset
word renderBob::y_offset#0 2002.0
byte renderBob::ypos
byte renderBob::ypos#0 300.42857142857144
void renderBobCleanup()
byte~ renderBobCleanup::$1 20002.0
byte renderBobCleanup::i
byte renderBobCleanup::i#1 15001.5
byte renderBobCleanup::i#2 2500.25
byte* renderBobCleanup::screen
byte* renderBobCleanup::screen#0 11112.222222222224
byte** renderBobCleanupNext
byte** renderBobCleanupNext#14 78.71428571428571
byte** renderBobCleanupNext#19 67.83870967741936
void renderBobInit()
word~ renderBobInit::$0 101.0
byte~ renderBobInit::$3 202.0
byte~ renderBobInit::$4 202.0
word~ renderBobInit::$5 151.5
word~ renderBobInit::$6 202.0
word~ renderBobInit::$7 202.0
byte renderBobInit::i
byte renderBobInit::i#1 151.5
byte renderBobInit::i#2 101.0
byte renderBobInit::y
byte renderBobInit::y#1 151.5
byte renderBobInit::y#2 43.285714285714285
void shiftProtoBobDown()
byte shiftProtoBobDown::i
byte shiftProtoBobDown::i#1 200002.0
byte shiftProtoBobDown::i#2 160001.6
void shiftProtoBobRight()
byte~ shiftProtoBobRight::$1 2.0000002E7
byte~ shiftProtoBobRight::$5 2.0000002E7
byte~ shiftProtoBobRight::$6 2.0000002E7
byte shiftProtoBobRight::carry
byte shiftProtoBobRight::carry#1 1111111.2222222222
byte shiftProtoBobRight::carry#10 2.0000002E7
byte shiftProtoBobRight::carry#2 2857143.1428571427
byte shiftProtoBobRight::i
byte shiftProtoBobRight::i#1 1.0000001E7
byte shiftProtoBobRight::i#2 2307692.5384615385
byte shiftProtoBobRight::j
byte shiftProtoBobRight::j#1 2.0000002E7
byte shiftProtoBobRight::j#10 1.0000001E7
byte shiftProtoBobRight::j#2 2.0000002E7
byte shiftProtoBobRight::j#3 7000000.699999999
byte shiftProtoBobRight::new_carry

Initial phi equivalence classes
[ main::angle#8 main::angle#1 ]
[ main::r#2 main::r#1 ]
[ main::a#2 main::a#6 main::a#1 ]
[ renderBobCleanupNext#19 renderBobCleanupNext#14 ]
[ main::i#2 main::i#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
[ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ]
[ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ]
[ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
[ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
[ prepareBobs::cell#2 prepareBobs::cell#1 ]
[ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ]
[ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ]
[ renderBobInit::y#2 renderBobInit::y#1 ]
[ renderBobInit::i#2 renderBobInit::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
[ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
[ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
[ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ]
[ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ]
[ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
[ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ]
[ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
[ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
[ bobCharsetFindOrAddGlyph::found#2 ]
[ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
[ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
[ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ]
[ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
[ shiftProtoBobRight::carry#1 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
Added variable mulf8s::return#2 to live range equivalence class [ mulf8s::return#2 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::x#0 to live range equivalence class [ main::x#0 ]
Added variable mulf8s::return#3 to live range equivalence class [ mulf8s::return#3 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::$13 to live range equivalence class [ main::$13 ]
Added variable main::y#0 to live range equivalence class [ main::y#0 ]
Added variable renderBob::xpos#0 to live range equivalence class [ renderBob::xpos#0 ]
Added variable renderBob::ypos#0 to live range equivalence class [ renderBob::ypos#0 ]
Added variable keyboard_key_pressed::return#2 to live range equivalence class [ keyboard_key_pressed::return#2 ]
Added variable main::$19 to live range equivalence class [ main::$19 ]
Added variable keyboard_key_pressed::return#3 to live range equivalence class [ keyboard_key_pressed::return#3 ]
Added variable main::$21 to live range equivalence class [ main::$21 ]
Added variable mulf_init::$1 to live range equivalence class [ mulf_init::$1 ]
Added variable mulf_init::$4 to live range equivalence class [ mulf_init::$4 ]
Added variable mulf_init::$5 to live range equivalence class [ mulf_init::$5 ]
Added variable bobCharsetFindOrAddGlyph::return#1 to live range equivalence class [ bobCharsetFindOrAddGlyph::return#1 ]
Added variable prepareBobs::$6 to live range equivalence class [ prepareBobs::$6 ]
Added variable renderBobInit::$5 to live range equivalence class [ renderBobInit::$5 ]
Added variable renderBobInit::$6 to live range equivalence class [ renderBobInit::$6 ]
Added variable renderBobInit::$7 to live range equivalence class [ renderBobInit::$7 ]
Added variable renderBobInit::$0 to live range equivalence class [ renderBobInit::$0 ]
Added variable renderBobInit::$3 to live range equivalence class [ renderBobInit::$3 ]
Added variable renderBobInit::$4 to live range equivalence class [ renderBobInit::$4 ]
Added variable renderBobCleanup::$1 to live range equivalence class [ renderBobCleanup::$1 ]
Added variable renderBobCleanup::screen#0 to live range equivalence class [ renderBobCleanup::screen#0 ]
Added variable mulf8u_prepare::a#0 to live range equivalence class [ mulf8u_prepare::a#0 ]
Added variable mulf8s_prepared::b#0 to live range equivalence class [ mulf8s_prepared::b#0 ]
Added variable mulf8s::return#0 to live range equivalence class [ mulf8s::return#0 ]
Added variable renderBob::x_char_offset#0 to live range equivalence class [ renderBob::x_char_offset#0 ]
Added variable renderBob::y_char_offset#0 to live range equivalence class [ renderBob::y_char_offset#0 ]
Added variable renderBob::$8 to live range equivalence class [ renderBob::$8 ]
Added variable renderBob::y_offset#0 to live range equivalence class [ renderBob::y_offset#0 ]
Added variable renderBob::$2 to live range equivalence class [ renderBob::$2 ]
Added variable renderBob::screen#0 to live range equivalence class [ renderBob::screen#0 ]
Added variable renderBob::$4 to live range equivalence class [ renderBob::$4 ]
Added variable renderBob::$5 to live range equivalence class [ renderBob::$5 ]
Added variable renderBob::$6 to live range equivalence class [ renderBob::$6 ]
Added variable renderBob::bob_table_idx#0 to live range equivalence class [ renderBob::bob_table_idx#0 ]
Added variable keyboard_matrix_read::return#2 to live range equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_key_pressed::$2 to live range equivalence class [ keyboard_key_pressed::$2 ]
Added variable keyboard_key_pressed::return#0 to live range equivalence class [ keyboard_key_pressed::return#0 ]
Added variable shiftProtoBobRight::$1 to live range equivalence class [ shiftProtoBobRight::$1 ]
Added variable shiftProtoBobRight::$5 to live range equivalence class [ shiftProtoBobRight::$5 ]
Added variable shiftProtoBobRight::$6 to live range equivalence class [ shiftProtoBobRight::$6 ]
Added variable mulf8u_prepared::b#0 to live range equivalence class [ mulf8u_prepared::b#0 ]
Added variable mulf8u_prepared::return#2 to live range equivalence class [ mulf8u_prepared::return#2 ]
Added variable mulf8s_prepared::$6 to live range equivalence class [ mulf8s_prepared::$6 ]
Added variable mulf8s_prepared::$11 to live range equivalence class [ mulf8s_prepared::$11 ]
Added variable mulf8s_prepared::$9 to live range equivalence class [ mulf8s_prepared::$9 ]
Added variable mulf8s_prepared::$12 to live range equivalence class [ mulf8s_prepared::$12 ]
Added variable keyboard_matrix_read::return#0 to live range equivalence class [ keyboard_matrix_read::return#0 ]
Added variable mulf8u_prepared::return#0 to live range equivalence class [ mulf8u_prepared::return#0 ]
Complete equivalence classes
[ main::angle#8 main::angle#1 ]
[ main::r#2 main::r#1 ]
[ main::a#2 main::a#6 main::a#1 ]
[ renderBobCleanupNext#19 renderBobCleanupNext#14 ]
[ main::i#2 main::i#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
[ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ]
[ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ]
[ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
[ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
[ prepareBobs::cell#2 prepareBobs::cell#1 ]
[ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ]
[ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ]
[ renderBobInit::y#2 renderBobInit::y#1 ]
[ renderBobInit::i#2 renderBobInit::i#1 ]
[ memset::dst#2 memset::dst#1 ]
[ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
[ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
[ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
[ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ]
[ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ]
[ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
[ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ]
[ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
[ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
[ bobCharsetFindOrAddGlyph::found#2 ]
[ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
[ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
[ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ]
[ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
[ shiftProtoBobRight::carry#1 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8s::return#2 ]
[ main::$10 ]
[ main::x#0 ]
[ mulf8s::return#3 ]
[ main::$12 ]
[ main::$13 ]
[ main::y#0 ]
[ renderBob::xpos#0 ]
[ renderBob::ypos#0 ]
[ keyboard_key_pressed::return#2 ]
[ main::$19 ]
[ keyboard_key_pressed::return#3 ]
[ main::$21 ]
[ mulf_init::$1 ]
[ mulf_init::$4 ]
[ mulf_init::$5 ]
[ bobCharsetFindOrAddGlyph::return#1 ]
[ prepareBobs::$6 ]
[ renderBobInit::$5 ]
[ renderBobInit::$6 ]
[ renderBobInit::$7 ]
[ renderBobInit::$0 ]
[ renderBobInit::$3 ]
[ renderBobInit::$4 ]
[ renderBobCleanup::$1 ]
[ renderBobCleanup::screen#0 ]
[ mulf8u_prepare::a#0 ]
[ mulf8s_prepared::b#0 ]
[ mulf8s::return#0 ]
[ renderBob::x_char_offset#0 ]
[ renderBob::y_char_offset#0 ]
[ renderBob::$8 ]
[ renderBob::y_offset#0 ]
[ renderBob::$2 ]
[ renderBob::screen#0 ]
[ renderBob::$4 ]
[ renderBob::$5 ]
[ renderBob::$6 ]
[ renderBob::bob_table_idx#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_key_pressed::$2 ]
[ keyboard_key_pressed::return#0 ]
[ shiftProtoBobRight::$1 ]
[ shiftProtoBobRight::$5 ]
[ shiftProtoBobRight::$6 ]
[ mulf8u_prepared::b#0 ]
[ mulf8u_prepared::return#2 ]
[ mulf8s_prepared::$6 ]
[ mulf8s_prepared::$11 ]
[ mulf8s_prepared::$9 ]
[ mulf8s_prepared::$12 ]
[ keyboard_matrix_read::return#0 ]
[ mulf8u_prepared::return#0 ]
Allocated zp[1]:2 [ main::angle#8 main::angle#1 ]
Allocated zp[1]:3 [ main::r#2 main::r#1 ]
Allocated zp[1]:4 [ main::a#2 main::a#6 main::a#1 ]
Allocated zp[2]:5 [ renderBobCleanupNext#19 renderBobCleanupNext#14 ]
Allocated zp[1]:7 [ main::i#2 main::i#1 ]
Allocated zp[2]:8 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp[2]:11 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp[1]:13 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp[2]:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp[2]:17 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ]
Allocated zp[2]:20 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
Allocated zp[2]:23 [ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ]
Allocated zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ]
Allocated zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
Allocated zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
Allocated zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ]
Allocated zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ]
Allocated zp[2]:31 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ]
Allocated zp[1]:33 [ renderBobInit::y#2 renderBobInit::y#1 ]
Allocated zp[1]:34 [ renderBobInit::i#2 renderBobInit::i#1 ]
Allocated zp[2]:35 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:37 [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
Allocated zp[1]:38 [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
Allocated zp[1]:39 [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
Allocated zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ]
Allocated zp[2]:41 [ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ]
Allocated zp[1]:43 [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
Allocated zp[2]:44 [ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ]
Allocated zp[1]:46 [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
Allocated zp[1]:47 [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
Allocated zp[1]:48 [ bobCharsetFindOrAddGlyph::found#2 ]
Allocated zp[1]:49 [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
Allocated zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
Allocated zp[1]:51 [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ]
Allocated zp[1]:52 [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
Allocated zp[1]:53 [ shiftProtoBobRight::carry#1 ]
Allocated zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
Allocated zp[2]:56 [ mulf8s::return#2 ]
Allocated zp[2]:58 [ main::$10 ]
Allocated zp[2]:60 [ main::x#0 ]
Allocated zp[2]:62 [ mulf8s::return#3 ]
Allocated zp[2]:64 [ main::$12 ]
Allocated zp[2]:66 [ main::$13 ]
Allocated zp[2]:68 [ main::y#0 ]
Allocated zp[1]:70 [ renderBob::xpos#0 ]
Allocated zp[1]:71 [ renderBob::ypos#0 ]
Allocated zp[1]:72 [ keyboard_key_pressed::return#2 ]
Allocated zp[1]:73 [ main::$19 ]
Allocated zp[1]:74 [ keyboard_key_pressed::return#3 ]
Allocated zp[1]:75 [ main::$21 ]
Allocated zp[1]:76 [ mulf_init::$1 ]
Allocated zp[1]:77 [ mulf_init::$4 ]
Allocated zp[1]:78 [ mulf_init::$5 ]
Allocated zp[1]:79 [ bobCharsetFindOrAddGlyph::return#1 ]
Allocated zp[1]:80 [ prepareBobs::$6 ]
Allocated zp[2]:81 [ renderBobInit::$5 ]
Allocated zp[2]:83 [ renderBobInit::$6 ]
Allocated zp[2]:85 [ renderBobInit::$7 ]
Allocated zp[2]:87 [ renderBobInit::$0 ]
Allocated zp[1]:89 [ renderBobInit::$3 ]
Allocated zp[1]:90 [ renderBobInit::$4 ]
Allocated zp[1]:91 [ renderBobCleanup::$1 ]
Allocated zp[2]:92 [ renderBobCleanup::screen#0 ]
Allocated zp[1]:94 [ mulf8u_prepare::a#0 ]
Allocated zp[1]:95 [ mulf8s_prepared::b#0 ]
Allocated zp[2]:96 [ mulf8s::return#0 ]
Allocated zp[1]:98 [ renderBob::x_char_offset#0 ]
Allocated zp[1]:99 [ renderBob::y_char_offset#0 ]
Allocated zp[1]:100 [ renderBob::$8 ]
Allocated zp[2]:101 [ renderBob::y_offset#0 ]
Allocated zp[2]:103 [ renderBob::$2 ]
Allocated zp[2]:105 [ renderBob::screen#0 ]
Allocated zp[1]:107 [ renderBob::$4 ]
Allocated zp[1]:108 [ renderBob::$5 ]
Allocated zp[1]:109 [ renderBob::$6 ]
Allocated zp[1]:110 [ renderBob::bob_table_idx#0 ]
Allocated zp[1]:111 [ keyboard_matrix_read::return#2 ]
Allocated zp[1]:112 [ keyboard_key_pressed::$2 ]
Allocated zp[1]:113 [ keyboard_key_pressed::return#0 ]
Allocated zp[1]:114 [ shiftProtoBobRight::$1 ]
Allocated zp[1]:115 [ shiftProtoBobRight::$5 ]
Allocated zp[1]:116 [ shiftProtoBobRight::$6 ]
Allocated zp[1]:117 [ mulf8u_prepared::b#0 ]
Allocated zp[2]:118 [ mulf8u_prepared::return#2 ]
Allocated zp[1]:120 [ mulf8s_prepared::$6 ]
Allocated zp[1]:121 [ mulf8s_prepared::$11 ]
Allocated zp[1]:122 [ mulf8s_prepared::$9 ]
Allocated zp[1]:123 [ mulf8s_prepared::$12 ]
Allocated zp[1]:124 [ keyboard_matrix_read::return#0 ]
Allocated zp[2]:125 [ mulf8u_prepared::return#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] if(*RASTER<$f8) goto main::@2 [ main::angle#8 ] (  [ main::angle#8 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::angle#8 main::angle#1 ]
Statement [14] *BORDER_COLOR = $f [ main::angle#8 ] (  [ main::angle#8 ] { }  ) always clobbers reg byte a 
Statement [18] *BORDER_COLOR = 1 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::r#2 main::r#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::a#2 main::a#6 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::i#2 main::i#1 ]
Statement [22] mulf8s::return#2 = mulf8s::return#0 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#2 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [23] main::$10 = mulf8s::return#2 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::$10 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::$10 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [24] main::x#0 = main::$10 + (signed word)$4b*$100 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [28] mulf8s::return#3 = mulf8s::return#0 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#3 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#3 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [29] main::$12 = mulf8s::return#3 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$12 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$12 ] { }  ) always clobbers reg byte a 
Statement [30] main::$13 = main::$12 << 1 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$13 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$13 ] { }  ) always clobbers reg byte a 
Statement [31] main::y#0 = main::$13 + (signed word)$5a*$100 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [32] *BORDER_COLOR = 2 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [33] main::a#1 = main::a#2 + $62 [ main::angle#8 main::r#2 renderBobCleanupNext#19 main::i#2 main::a#1 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 renderBobCleanupNext#19 main::i#2 main::a#1 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [34] main::r#1 = main::r#2 + 3 [ main::angle#8 renderBobCleanupNext#19 main::i#2 main::r#1 main::a#1 main::x#0 main::y#0 ] (  [ main::angle#8 renderBobCleanupNext#19 main::i#2 main::r#1 main::a#1 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [40] main::angle#1 = main::angle#8 + 3 [ main::angle#1 ] (  [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } }  ) always clobbers reg byte a 
Statement [41] *BORDER_COLOR = 0 [ main::angle#1 ] (  [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } }  ) always clobbers reg byte a 
Statement [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [53] *((byte*)CIA2) = main::vicSelectGfxBank2_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [55] *D018 = main::toD0182_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [59] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [61] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [62] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [63] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [65] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [66] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [68] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [74] mulf_init::$1 = mulf_init::c#1 & 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [80] *mulf_init::sqr1_lo#2 = mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:13 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [82] *mulf_init::sqr1_hi#2 = mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [84] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [97] prepareBobs::bob_table#0 = BOB_TABLES + prepareBobs::bob_table_idx#12 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::bob_table#0 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::bob_table#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
Statement [105] bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::bob_glyph#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::bob_glyph#1 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ]
Statement [109] *prepareBobs::bob_table#2 = prepareBobs::$6 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ]
Statement [110] prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#2 + 8 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_table#2 prepareBobs::bob_glyph#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_table#2 prepareBobs::bob_glyph#1 ] { }  ) always clobbers reg byte a 
Statement [111] prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 ] { }  ) always clobbers reg byte a 
Statement [116] renderBobInit::$5 = (word)renderBobInit::y#2 [ renderBobInit::y#2 renderBobInit::$5 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ renderBobInit::y#2 renderBobInit::y#1 ]
Statement [117] renderBobInit::$6 = renderBobInit::$5 << 2 [ renderBobInit::y#2 renderBobInit::$5 renderBobInit::$6 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$5 renderBobInit::$6 ] { }  ) always clobbers reg byte a 
Statement [118] renderBobInit::$7 = renderBobInit::$6 + renderBobInit::$5 [ renderBobInit::y#2 renderBobInit::$7 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$7 ] { }  ) always clobbers reg byte a 
Statement [119] renderBobInit::$0 = renderBobInit::$7 << 3 [ renderBobInit::y#2 renderBobInit::$0 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$0 ] { }  ) always clobbers reg byte a 
Statement [120] renderBobInit::$3 = renderBobInit::y#2 << 1 [ renderBobInit::y#2 renderBobInit::$0 renderBobInit::$3 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$0 renderBobInit::$3 ] { }  ) always clobbers reg byte a 
Statement [121] MUL40[renderBobInit::$3] = renderBobInit::$0 [ renderBobInit::y#2 ] ( renderBobInit:5 [ renderBobInit::y#2 ] { }  ) always clobbers reg byte a 
Statement [125] renderBobInit::$4 = renderBobInit::i#2 << 1 [ renderBobInit::i#2 renderBobInit::$4 ] ( renderBobInit:5 [ renderBobInit::i#2 renderBobInit::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:34 [ renderBobInit::i#2 renderBobInit::i#1 ]
Statement [126] RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN [ renderBobInit::i#2 ] ( renderBobInit:5 [ renderBobInit::i#2 ] { }  ) always clobbers reg byte a 
Statement [132] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( memset:11 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [134] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( memset:11 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [138] renderBobCleanup::$1 = renderBobCleanup::i#2 << 1 [ renderBobCleanup::i#2 renderBobCleanup::$1 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
Statement [139] renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1] [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a 
Statement [140] *renderBobCleanup::screen#0 = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::angle#8 main::angle#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:37 [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
Statement [141] renderBobCleanup::screen#0[$28] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [142] renderBobCleanup::screen#0[$50] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [143] renderBobCleanup::screen#0[1] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [144] renderBobCleanup::screen#0[$29] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [145] renderBobCleanup::screen#0[$51] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [146] renderBobCleanup::screen#0[2] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [147] renderBobCleanup::screen#0[$2a] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [148] renderBobCleanup::screen#0[$52] = 0 [ renderBobCleanup::i#2 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [157] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4 [ mulf8s::return#0 ] ( mulf8s:21 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [159] renderBob::x_char_offset#0 = renderBob::xpos#0 >> 2 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:70 [ renderBob::xpos#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:71 [ renderBob::ypos#0 ]
Statement [160] renderBob::y_char_offset#0 = renderBob::ypos#0 >> 3 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_char_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_char_offset#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:98 [ renderBob::x_char_offset#0 ]
Statement [161] renderBob::$8 = renderBob::y_char_offset#0 << 1 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$8 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$8 ] { }  ) always clobbers reg byte a 
Statement [162] renderBob::y_offset#0 = MUL40[renderBob::$8] [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_offset#0 ] { }  ) always clobbers reg byte a 
Statement [163] renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$2 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$2 ] { }  ) always clobbers reg byte a 
Statement [164] renderBob::screen#0 = renderBob::$2 + renderBob::x_char_offset#0 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::screen#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::screen#0 ] { }  ) always clobbers reg byte a 
Statement [165] renderBob::$4 = renderBob::ypos#0 & 7 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$4 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$4 ] { }  ) always clobbers reg byte a 
Statement [166] renderBob::$5 = renderBob::$4 << 2 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$5 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$5 ] { }  ) always clobbers reg byte a 
Statement [167] renderBob::$6 = renderBob::xpos#0 & 3 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::$5 renderBob::$6 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::$5 renderBob::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:108 [ renderBob::$5 ]
Statement [168] renderBob::bob_table_idx#0 = renderBob::$5 + renderBob::$6 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a 
Statement [169] *renderBobCleanupNext#19 = renderBob::screen#0 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:7 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::r#2 main::r#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::a#2 main::a#6 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:110 [ renderBob::bob_table_idx#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:110 [ renderBob::bob_table_idx#0 ]
Statement [170] renderBobCleanupNext#14 = renderBobCleanupNext#19 + SIZEOF_POINTER [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a 
Statement [171] *renderBob::screen#0 = BOB_TABLES[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [172] renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [173] renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [174] renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [175] renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [176] renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [177] renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [178] renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [179] renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 ] { }  ) always clobbers reg byte a reg byte y 
Statement [195] bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i1#2] = bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i1#2] [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
Statement [199] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@4 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:47 [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
Statement [203] bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#11 + 8 [ bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [208] *PROTO_BOB = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [209] *(PROTO_BOB+$18) = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [210] *(PROTO_BOB+$30) = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [212] PROTO_BOB[shiftProtoBobDown::i#2] = (PROTO_BOB+$17)[shiftProtoBobDown::i#2] [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:49 [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
Statement [213] (PROTO_BOB+$18)[shiftProtoBobDown::i#2] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#2] [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [214] (PROTO_BOB+$30)[shiftProtoBobDown::i#2] = 0 [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [220] shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1 [ shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:51 [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:52 [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
Statement [224] shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#3] >> 1 [ shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:53 [ shiftProtoBobRight::carry#1 ]
Statement [228] shiftProtoBobRight::j#2 = shiftProtoBobRight::j#3 + $18 [ shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] { }  ) always clobbers reg byte a 
Statement [232] shiftProtoBobRight::j#1 = shiftProtoBobRight::j#3 - $2f [ shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] { }  ) always clobbers reg byte a 
Statement [235] *progress_cursor#26 = *(progress_inc::progress_chars+8) [ progress_cursor#26 ] ( prepareBobs:3::progress_inc:112 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 progress_cursor#26 ] { }  ) always clobbers reg byte a reg byte y 
Statement [238] *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20] [ progress_idx#20 progress_cursor#18 ] ( prepareBobs:3::progress_inc:112 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 progress_idx#20 progress_cursor#18 ] { }  ) always clobbers reg byte a reg byte y 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:39 [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
Statement [245] mulf8u_prepared::return#2 = mulf8u_prepared::return#0 [ mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:95 [ mulf8s_prepared::b#0 ]
Statement [246] mulf8s_prepared::m#0 = mulf8u_prepared::return#2 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [247] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [249] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [254] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [258] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0) [ ] ( keyboard_key_pressed:42::keyboard_matrix_read:182 [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  keyboard_key_pressed:47::keyboard_matrix_read:182 [ ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#3 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [259] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( keyboard_key_pressed:42::keyboard_matrix_read:182 [ main::angle#1 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  keyboard_key_pressed:47::keyboard_matrix_read:182 [ keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#3 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::angle#8 main::angle#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:3 [ main::r#2 main::r#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:4 [ main::a#2 main::a#6 main::a#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:7 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:95 [ mulf8s_prepared::b#0 ]
Statement [263] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL [ mulf8u_prepared::return#0 ] ( mulf8s:21::mulf8s_prepared:156::mulf8u_prepared:244 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  mulf8s:27::mulf8s_prepared:156::mulf8u_prepared:244 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [6] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] if(*RASTER<$f8) goto main::@2 [ main::angle#8 ] (  [ main::angle#8 ] { }  ) always clobbers reg byte a 
Statement [14] *BORDER_COLOR = $f [ main::angle#8 ] (  [ main::angle#8 ] { }  ) always clobbers reg byte a 
Statement [16] main::a#6 = main::angle#8 [ main::angle#8 main::a#6 ] (  [ main::angle#8 main::a#6 ] { }  ) always clobbers reg byte a 
Statement [18] *BORDER_COLOR = 1 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [20] mulf8s::b#0 = COS[main::a#2] [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::a#0 mulf8s::b#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::a#0 mulf8s::b#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:38 [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
Statement [22] mulf8s::return#2 = mulf8s::return#0 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#2 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [23] main::$10 = mulf8s::return#2 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::$10 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::$10 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [24] main::x#0 = main::$10 + (signed word)$4b*$100 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [26] mulf8s::b#1 = SIN[main::a#2] [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::a#1 mulf8s::b#1 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::a#1 mulf8s::b#1 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte y 
Statement [28] mulf8s::return#3 = mulf8s::return#0 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#3 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#3 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [29] main::$12 = mulf8s::return#3 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$12 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$12 ] { }  ) always clobbers reg byte a 
Statement [30] main::$13 = main::$12 << 1 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$13 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$13 ] { }  ) always clobbers reg byte a 
Statement [31] main::y#0 = main::$13 + (signed word)$5a*$100 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [32] *BORDER_COLOR = 2 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [33] main::a#1 = main::a#2 + $62 [ main::angle#8 main::r#2 renderBobCleanupNext#19 main::i#2 main::a#1 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 renderBobCleanupNext#19 main::i#2 main::a#1 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [34] main::r#1 = main::r#2 + 3 [ main::angle#8 renderBobCleanupNext#19 main::i#2 main::r#1 main::a#1 main::x#0 main::y#0 ] (  [ main::angle#8 renderBobCleanupNext#19 main::i#2 main::r#1 main::a#1 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [39] if(main::i#1!=NUM_BOBS-1+1) goto main::@4 [ main::angle#8 main::r#1 main::a#1 renderBobCleanupNext#14 main::i#1 ] (  [ main::angle#8 main::r#1 main::a#1 renderBobCleanupNext#14 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [40] main::angle#1 = main::angle#8 + 3 [ main::angle#1 ] (  [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } }  ) always clobbers reg byte a reg byte x 
Statement [41] *BORDER_COLOR = 0 [ main::angle#1 ] (  [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } }  ) always clobbers reg byte a 
Statement [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [53] *((byte*)CIA2) = main::vicSelectGfxBank2_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [55] *D018 = main::toD0182_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [59] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Statement [61] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Statement [62] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [63] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [65] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [66] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [68] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [74] mulf_init::$1 = mulf_init::c#1 & 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [80] *mulf_init::sqr1_lo#2 = mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [82] *mulf_init::sqr1_hi#2 = mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [84] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [97] prepareBobs::bob_table#0 = BOB_TABLES + prepareBobs::bob_table_idx#12 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::bob_table#0 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::bob_table#0 ] { }  ) always clobbers reg byte a 
Statement [105] bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::bob_glyph#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::bob_glyph#1 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [109] *prepareBobs::bob_table#2 = prepareBobs::$6 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 ] { }  ) always clobbers reg byte y 
Statement [110] prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#2 + 8 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_table#2 prepareBobs::bob_glyph#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_table#2 prepareBobs::bob_glyph#1 ] { }  ) always clobbers reg byte a 
Statement [111] prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 ] { }  ) always clobbers reg byte a 
Statement [116] renderBobInit::$5 = (word)renderBobInit::y#2 [ renderBobInit::y#2 renderBobInit::$5 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$5 ] { }  ) always clobbers reg byte a 
Statement [117] renderBobInit::$6 = renderBobInit::$5 << 2 [ renderBobInit::y#2 renderBobInit::$5 renderBobInit::$6 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$5 renderBobInit::$6 ] { }  ) always clobbers reg byte a 
Statement [118] renderBobInit::$7 = renderBobInit::$6 + renderBobInit::$5 [ renderBobInit::y#2 renderBobInit::$7 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$7 ] { }  ) always clobbers reg byte a 
Statement [119] renderBobInit::$0 = renderBobInit::$7 << 3 [ renderBobInit::y#2 renderBobInit::$0 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$0 ] { }  ) always clobbers reg byte a 
Statement [120] renderBobInit::$3 = renderBobInit::y#2 << 1 [ renderBobInit::y#2 renderBobInit::$0 renderBobInit::$3 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$0 renderBobInit::$3 ] { }  ) always clobbers reg byte a 
Statement [121] MUL40[renderBobInit::$3] = renderBobInit::$0 [ renderBobInit::y#2 ] ( renderBobInit:5 [ renderBobInit::y#2 ] { }  ) always clobbers reg byte a 
Statement [125] renderBobInit::$4 = renderBobInit::i#2 << 1 [ renderBobInit::i#2 renderBobInit::$4 ] ( renderBobInit:5 [ renderBobInit::i#2 renderBobInit::$4 ] { }  ) always clobbers reg byte a 
Statement [126] RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN [ renderBobInit::i#2 ] ( renderBobInit:5 [ renderBobInit::i#2 ] { }  ) always clobbers reg byte a 
Statement [132] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( memset:11 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [134] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( memset:11 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [138] renderBobCleanup::$1 = renderBobCleanup::i#2 << 1 [ renderBobCleanup::i#2 renderBobCleanup::$1 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::$1 ] { }  ) always clobbers reg byte a 
Statement [139] renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1] [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a 
Statement [140] *renderBobCleanup::screen#0 = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [141] renderBobCleanup::screen#0[$28] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [142] renderBobCleanup::screen#0[$50] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [143] renderBobCleanup::screen#0[1] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [144] renderBobCleanup::screen#0[$29] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [145] renderBobCleanup::screen#0[$51] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [146] renderBobCleanup::screen#0[2] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [147] renderBobCleanup::screen#0[$2a] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [148] renderBobCleanup::screen#0[$52] = 0 [ renderBobCleanup::i#2 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [157] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4 [ mulf8s::return#0 ] ( mulf8s:21 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [159] renderBob::x_char_offset#0 = renderBob::xpos#0 >> 2 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 ] { }  ) always clobbers reg byte a 
Statement [160] renderBob::y_char_offset#0 = renderBob::ypos#0 >> 3 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_char_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_char_offset#0 ] { }  ) always clobbers reg byte a 
Statement [161] renderBob::$8 = renderBob::y_char_offset#0 << 1 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$8 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$8 ] { }  ) always clobbers reg byte a 
Statement [162] renderBob::y_offset#0 = MUL40[renderBob::$8] [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_offset#0 ] { }  ) always clobbers reg byte a 
Statement [163] renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$2 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$2 ] { }  ) always clobbers reg byte a 
Statement [164] renderBob::screen#0 = renderBob::$2 + renderBob::x_char_offset#0 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::screen#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::screen#0 ] { }  ) always clobbers reg byte a 
Statement [165] renderBob::$4 = renderBob::ypos#0 & 7 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$4 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$4 ] { }  ) always clobbers reg byte a 
Statement [166] renderBob::$5 = renderBob::$4 << 2 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$5 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$5 ] { }  ) always clobbers reg byte a 
Statement [167] renderBob::$6 = renderBob::xpos#0 & 3 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::$5 renderBob::$6 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::$5 renderBob::$6 ] { }  ) always clobbers reg byte a 
Statement [168] renderBob::bob_table_idx#0 = renderBob::$5 + renderBob::$6 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a 
Statement [169] *renderBobCleanupNext#19 = renderBob::screen#0 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [170] renderBobCleanupNext#14 = renderBobCleanupNext#19 + SIZEOF_POINTER [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a 
Statement [171] *renderBob::screen#0 = BOB_TABLES[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [172] renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [173] renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [174] renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [175] renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [176] renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [177] renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [178] renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [179] renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 ] { }  ) always clobbers reg byte a reg byte y 
Statement [195] bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i1#2] = bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i1#2] [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [199] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@4 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [203] bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#11 + 8 [ bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [208] *PROTO_BOB = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [209] *(PROTO_BOB+$18) = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [210] *(PROTO_BOB+$30) = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [212] PROTO_BOB[shiftProtoBobDown::i#2] = (PROTO_BOB+$17)[shiftProtoBobDown::i#2] [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [213] (PROTO_BOB+$18)[shiftProtoBobDown::i#2] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#2] [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [214] (PROTO_BOB+$30)[shiftProtoBobDown::i#2] = 0 [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [220] shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1 [ shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] { }  ) always clobbers reg byte a 
Statement [224] shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#3] >> 1 [ shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] { }  ) always clobbers reg byte a 
Statement [228] shiftProtoBobRight::j#2 = shiftProtoBobRight::j#3 + $18 [ shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] { }  ) always clobbers reg byte a 
Statement [232] shiftProtoBobRight::j#1 = shiftProtoBobRight::j#3 - $2f [ shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] { }  ) always clobbers reg byte a 
Statement [235] *progress_cursor#26 = *(progress_inc::progress_chars+8) [ progress_cursor#26 ] ( prepareBobs:3::progress_inc:112 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 progress_cursor#26 ] { }  ) always clobbers reg byte a reg byte y 
Statement [238] *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20] [ progress_idx#20 progress_cursor#18 ] ( prepareBobs:3::progress_inc:112 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 progress_idx#20 progress_cursor#18 ] { }  ) always clobbers reg byte a reg byte y 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [245] mulf8u_prepared::return#2 = mulf8u_prepared::return#0 [ mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [246] mulf8s_prepared::m#0 = mulf8u_prepared::return#2 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [247] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [249] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [254] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [258] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0) [ ] ( keyboard_key_pressed:42::keyboard_matrix_read:182 [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  keyboard_key_pressed:47::keyboard_matrix_read:182 [ ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#3 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [259] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( keyboard_key_pressed:42::keyboard_matrix_read:182 [ main::angle#1 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  keyboard_key_pressed:47::keyboard_matrix_read:182 [ keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#3 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [263] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL [ mulf8u_prepared::return#0 ] ( mulf8s:21::mulf8s_prepared:156::mulf8u_prepared:244 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  mulf8s:27::mulf8s_prepared:156::mulf8u_prepared:244 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [6] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] if(*RASTER<$f8) goto main::@2 [ main::angle#8 ] (  [ main::angle#8 ] { }  ) always clobbers reg byte a 
Statement [14] *BORDER_COLOR = $f [ main::angle#8 ] (  [ main::angle#8 ] { }  ) always clobbers reg byte a 
Statement [16] main::a#6 = main::angle#8 [ main::angle#8 main::a#6 ] (  [ main::angle#8 main::a#6 ] { }  ) always clobbers reg byte a 
Statement [18] *BORDER_COLOR = 1 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [20] mulf8s::b#0 = COS[main::a#2] [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::a#0 mulf8s::b#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::a#0 mulf8s::b#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte y 
Statement [22] mulf8s::return#2 = mulf8s::return#0 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#2 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [23] main::$10 = mulf8s::return#2 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::$10 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::$10 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [24] main::x#0 = main::$10 + (signed word)$4b*$100 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [26] mulf8s::b#1 = SIN[main::a#2] [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::a#1 mulf8s::b#1 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::a#1 mulf8s::b#1 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte y 
Statement [28] mulf8s::return#3 = mulf8s::return#0 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#3 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#3 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [29] main::$12 = mulf8s::return#3 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$12 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$12 ] { }  ) always clobbers reg byte a 
Statement [30] main::$13 = main::$12 << 1 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$13 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::$13 ] { }  ) always clobbers reg byte a 
Statement [31] main::y#0 = main::$13 + (signed word)$5a*$100 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [32] *BORDER_COLOR = 2 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [33] main::a#1 = main::a#2 + $62 [ main::angle#8 main::r#2 renderBobCleanupNext#19 main::i#2 main::a#1 main::x#0 main::y#0 ] (  [ main::angle#8 main::r#2 renderBobCleanupNext#19 main::i#2 main::a#1 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [34] main::r#1 = main::r#2 + 3 [ main::angle#8 renderBobCleanupNext#19 main::i#2 main::r#1 main::a#1 main::x#0 main::y#0 ] (  [ main::angle#8 renderBobCleanupNext#19 main::i#2 main::r#1 main::a#1 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [39] if(main::i#1!=NUM_BOBS-1+1) goto main::@4 [ main::angle#8 main::r#1 main::a#1 renderBobCleanupNext#14 main::i#1 ] (  [ main::angle#8 main::r#1 main::a#1 renderBobCleanupNext#14 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [40] main::angle#1 = main::angle#8 + 3 [ main::angle#1 ] (  [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } }  ) always clobbers reg byte a reg byte x 
Statement [41] *BORDER_COLOR = 0 [ main::angle#1 ] (  [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } }  ) always clobbers reg byte a 
Statement [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [53] *((byte*)CIA2) = main::vicSelectGfxBank2_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [55] *D018 = main::toD0182_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [59] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Statement [61] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Statement [62] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [63] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [65] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [66] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [68] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [74] mulf_init::$1 = mulf_init::c#1 & 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [80] *mulf_init::sqr1_lo#2 = mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [82] *mulf_init::sqr1_hi#2 = mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [84] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [97] prepareBobs::bob_table#0 = BOB_TABLES + prepareBobs::bob_table_idx#12 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::bob_table#0 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::bob_table#0 ] { }  ) always clobbers reg byte a 
Statement [105] bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::bob_glyph#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::bob_glyph#1 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [109] *prepareBobs::bob_table#2 = prepareBobs::$6 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 ] { }  ) always clobbers reg byte y 
Statement [110] prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#2 + 8 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_table#2 prepareBobs::bob_glyph#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_table#2 prepareBobs::bob_glyph#1 ] { }  ) always clobbers reg byte a 
Statement [111] prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 ] ( prepareBobs:3 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 ] { }  ) always clobbers reg byte a 
Statement [116] renderBobInit::$5 = (word)renderBobInit::y#2 [ renderBobInit::y#2 renderBobInit::$5 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$5 ] { }  ) always clobbers reg byte a 
Statement [117] renderBobInit::$6 = renderBobInit::$5 << 2 [ renderBobInit::y#2 renderBobInit::$5 renderBobInit::$6 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$5 renderBobInit::$6 ] { }  ) always clobbers reg byte a 
Statement [118] renderBobInit::$7 = renderBobInit::$6 + renderBobInit::$5 [ renderBobInit::y#2 renderBobInit::$7 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$7 ] { }  ) always clobbers reg byte a 
Statement [119] renderBobInit::$0 = renderBobInit::$7 << 3 [ renderBobInit::y#2 renderBobInit::$0 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$0 ] { }  ) always clobbers reg byte a 
Statement [120] renderBobInit::$3 = renderBobInit::y#2 << 1 [ renderBobInit::y#2 renderBobInit::$0 renderBobInit::$3 ] ( renderBobInit:5 [ renderBobInit::y#2 renderBobInit::$0 renderBobInit::$3 ] { }  ) always clobbers reg byte a 
Statement [121] MUL40[renderBobInit::$3] = renderBobInit::$0 [ renderBobInit::y#2 ] ( renderBobInit:5 [ renderBobInit::y#2 ] { }  ) always clobbers reg byte a 
Statement [125] renderBobInit::$4 = renderBobInit::i#2 << 1 [ renderBobInit::i#2 renderBobInit::$4 ] ( renderBobInit:5 [ renderBobInit::i#2 renderBobInit::$4 ] { }  ) always clobbers reg byte a 
Statement [126] RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN [ renderBobInit::i#2 ] ( renderBobInit:5 [ renderBobInit::i#2 ] { }  ) always clobbers reg byte a 
Statement [132] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( memset:11 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [134] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( memset:11 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [138] renderBobCleanup::$1 = renderBobCleanup::i#2 << 1 [ renderBobCleanup::i#2 renderBobCleanup::$1 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::$1 ] { }  ) always clobbers reg byte a 
Statement [139] renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1] [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a 
Statement [140] *renderBobCleanup::screen#0 = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [141] renderBobCleanup::screen#0[$28] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [142] renderBobCleanup::screen#0[$50] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [143] renderBobCleanup::screen#0[1] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [144] renderBobCleanup::screen#0[$29] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [145] renderBobCleanup::screen#0[$51] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [146] renderBobCleanup::screen#0[2] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [147] renderBobCleanup::screen#0[$2a] = 0 [ renderBobCleanup::i#2 renderBobCleanup::screen#0 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 renderBobCleanup::screen#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [148] renderBobCleanup::screen#0[$52] = 0 [ renderBobCleanup::i#2 ] ( renderBobCleanup:15 [ main::angle#8 renderBobCleanup::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [157] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4 [ mulf8s::return#0 ] ( mulf8s:21 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [159] renderBob::x_char_offset#0 = renderBob::xpos#0 >> 2 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 ] { }  ) always clobbers reg byte a 
Statement [160] renderBob::y_char_offset#0 = renderBob::ypos#0 >> 3 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_char_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_char_offset#0 ] { }  ) always clobbers reg byte a 
Statement [161] renderBob::$8 = renderBob::y_char_offset#0 << 1 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$8 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$8 ] { }  ) always clobbers reg byte a 
Statement [162] renderBob::y_offset#0 = MUL40[renderBob::$8] [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_offset#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::y_offset#0 ] { }  ) always clobbers reg byte a 
Statement [163] renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$2 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::x_char_offset#0 renderBob::$2 ] { }  ) always clobbers reg byte a 
Statement [164] renderBob::screen#0 = renderBob::$2 + renderBob::x_char_offset#0 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::screen#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::ypos#0 renderBob::screen#0 ] { }  ) always clobbers reg byte a 
Statement [165] renderBob::$4 = renderBob::ypos#0 & 7 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$4 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$4 ] { }  ) always clobbers reg byte a 
Statement [166] renderBob::$5 = renderBob::$4 << 2 [ renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$5 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::xpos#0 renderBob::screen#0 renderBob::$5 ] { }  ) always clobbers reg byte a 
Statement [167] renderBob::$6 = renderBob::xpos#0 & 3 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::$5 renderBob::$6 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::$5 renderBob::$6 ] { }  ) always clobbers reg byte a 
Statement [168] renderBob::bob_table_idx#0 = renderBob::$5 + renderBob::$6 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a 
Statement [169] *renderBobCleanupNext#19 = renderBob::screen#0 [ renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#19 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [170] renderBobCleanupNext#14 = renderBobCleanupNext#19 + SIZEOF_POINTER [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a 
Statement [171] *renderBob::screen#0 = BOB_TABLES[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [172] renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [173] renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [174] renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [175] renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [176] renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [177] renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [178] renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 renderBob::screen#0 renderBob::bob_table_idx#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [179] renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] [ renderBobCleanupNext#14 ] ( renderBob:37 [ main::angle#8 main::i#2 main::r#1 main::a#1 renderBobCleanupNext#14 ] { }  ) always clobbers reg byte a reg byte y 
Statement [195] bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i1#2] = bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i1#2] [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i1#2 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [199] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@4 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bobCharsetFindOrAddGlyph::glyph_id#11 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::i#2 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [203] bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#11 + 8 [ bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] ( prepareBobs:3::bobCharsetFindOrAddGlyph:88 [ bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] { }  prepareBobs:3::bobCharsetFindOrAddGlyph:106 [ prepareBobs::shift_y#2 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 progress_cursor#26 progress_idx#27 prepareBobs::cell#2 prepareBobs::bob_glyph#2 prepareBobs::bob_table#2 bob_charset_next_id#25 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::glyph_id#1 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] { { bob_charset_next_id#23 = bob_charset_next_id#25 } { bobCharsetFindOrAddGlyph::bob_glyph#1 = bobCharsetFindOrAddGlyph::bob_glyph#10 prepareBobs::bob_glyph#2 } { bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 } }  ) always clobbers reg byte a 
Statement [208] *PROTO_BOB = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [209] *(PROTO_BOB+$18) = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [210] *(PROTO_BOB+$30) = 0 [ ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 ] { }  ) always clobbers reg byte a 
Statement [212] PROTO_BOB[shiftProtoBobDown::i#2] = (PROTO_BOB+$17)[shiftProtoBobDown::i#2] [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [213] (PROTO_BOB+$18)[shiftProtoBobDown::i#2] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#2] [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [214] (PROTO_BOB+$30)[shiftProtoBobDown::i#2] = 0 [ shiftProtoBobDown::i#2 ] ( prepareBobs:3::shiftProtoBobDown:95 [ prepareBobs::shift_y#2 progress_cursor#33 progress_idx#33 bob_charset_next_id#32 prepareBobs::bob_table_idx#12 shiftProtoBobDown::i#2 ] { }  ) always clobbers reg byte a 
Statement [220] shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1 [ shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::$1 ] { }  ) always clobbers reg byte a 
Statement [224] shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#3] >> 1 [ shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::j#3 shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::$5 ] { }  ) always clobbers reg byte a 
Statement [228] shiftProtoBobRight::j#2 = shiftProtoBobRight::j#3 + $18 [ shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#2 ] { }  ) always clobbers reg byte a 
Statement [232] shiftProtoBobRight::j#1 = shiftProtoBobRight::j#3 - $2f [ shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] ( prepareBobs:3::shiftProtoBobRight:101 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] { }  prepareBobs:3::shiftProtoBobRight:103 [ prepareBobs::shift_y#2 prepareBobs::shift_x#2 prepareBobs::bob_table_idx#1 bob_charset_next_id#23 progress_cursor#26 progress_idx#27 shiftProtoBobRight::i#2 shiftProtoBobRight::carry#1 shiftProtoBobRight::j#1 ] { }  ) always clobbers reg byte a 
Statement [235] *progress_cursor#26 = *(progress_inc::progress_chars+8) [ progress_cursor#26 ] ( prepareBobs:3::progress_inc:112 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 progress_cursor#26 ] { }  ) always clobbers reg byte a reg byte y 
Statement [238] *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20] [ progress_idx#20 progress_cursor#18 ] ( prepareBobs:3::progress_inc:112 [ prepareBobs::shift_y#2 bob_charset_next_id#17 prepareBobs::bob_table_idx#12 prepareBobs::shift_x#2 prepareBobs::cell#2 prepareBobs::bob_glyph#1 prepareBobs::bob_table#1 progress_idx#20 progress_cursor#18 ] { }  ) always clobbers reg byte a reg byte y 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [245] mulf8u_prepared::return#2 = mulf8u_prepared::return#0 [ mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8u_prepared::return#2 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [246] mulf8s_prepared::m#0 = mulf8u_prepared::return#2 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [247] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [249] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [254] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( mulf8s:21::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  mulf8s:27::mulf8s_prepared:156 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } }  ) always clobbers reg byte a 
Statement [258] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0) [ ] ( keyboard_key_pressed:42::keyboard_matrix_read:182 [ main::angle#1 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  keyboard_key_pressed:47::keyboard_matrix_read:182 [ ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#3 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement [259] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) [ keyboard_matrix_read::return#0 ] ( keyboard_key_pressed:42::keyboard_matrix_read:182 [ main::angle#1 keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#2 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  keyboard_key_pressed:47::keyboard_matrix_read:182 [ keyboard_matrix_read::return#0 ] { { keyboard_key_pressed::return#0 = keyboard_key_pressed::return#3 } { keyboard_matrix_read::return#0 = keyboard_matrix_read::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [263] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL [ mulf8u_prepared::return#0 ] ( mulf8s:21::mulf8s_prepared:156::mulf8u_prepared:244 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 main::r#2 } { mulf8s::b#0 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  mulf8s:27::mulf8s_prepared:156::mulf8u_prepared:244 [ main::angle#8 main::r#2 main::a#2 renderBobCleanupNext#19 main::i#2 main::x#0 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 main::r#2 } { mulf8s::b#1 = mulf8s::b#2 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#3 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::angle#8 main::angle#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::r#2 main::r#1 ] : zp[1]:3 , 
Potential registers zp[1]:4 [ main::a#2 main::a#6 main::a#1 ] : zp[1]:4 , 
Potential registers zp[2]:5 [ renderBobCleanupNext#19 renderBobCleanupNext#14 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ main::i#2 main::i#1 ] : zp[1]:7 , 
Potential registers zp[2]:8 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[2]:11 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[2]:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp[1]:16 , reg byte x , 
Potential registers zp[2]:17 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ] : zp[1]:19 , reg byte x , 
Potential registers zp[2]:20 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp[2]:20 , 
Potential registers zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ] : zp[1]:22 , reg byte x , 
Potential registers zp[2]:23 [ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ] : zp[1]:26 , reg byte x , 
Potential registers zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ] : zp[1]:27 , reg byte x , 
Potential registers zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ renderBobInit::y#2 renderBobInit::y#1 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ renderBobInit::i#2 renderBobInit::i#1 ] : zp[1]:34 , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ memset::dst#2 memset::dst#1 ] : zp[2]:35 , 
Potential registers zp[1]:37 [ renderBobCleanup::i#2 renderBobCleanup::i#1 ] : zp[1]:37 , reg byte x , 
Potential registers zp[1]:38 [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ] : zp[1]:38 , reg byte a , reg byte x , 
Potential registers zp[1]:39 [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ] : zp[1]:40 , reg byte x , 
Potential registers zp[2]:41 [ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[2]:44 [ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] : zp[2]:44 , 
Potential registers zp[1]:46 [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ bobCharsetFindOrAddGlyph::found#2 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ] : zp[1]:49 , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ] : zp[1]:50 , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ shiftProtoBobRight::carry#1 ] : zp[1]:53 , reg byte x , reg byte y , 
Potential registers zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ mulf8s::return#2 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ main::$10 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ main::x#0 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ mulf8s::return#3 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ main::$12 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ main::$13 ] : zp[2]:66 , 
Potential registers zp[2]:68 [ main::y#0 ] : zp[2]:68 , 
Potential registers zp[1]:70 [ renderBob::xpos#0 ] : zp[1]:70 , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ renderBob::ypos#0 ] : zp[1]:71 , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ keyboard_key_pressed::return#2 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ main::$19 ] : zp[1]:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:74 [ keyboard_key_pressed::return#3 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ main::$21 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ mulf_init::$1 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ mulf_init::$4 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ mulf_init::$5 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:79 [ bobCharsetFindOrAddGlyph::return#1 ] : zp[1]:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:80 [ prepareBobs::$6 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:81 [ renderBobInit::$5 ] : zp[2]:81 , 
Potential registers zp[2]:83 [ renderBobInit::$6 ] : zp[2]:83 , 
Potential registers zp[2]:85 [ renderBobInit::$7 ] : zp[2]:85 , 
Potential registers zp[2]:87 [ renderBobInit::$0 ] : zp[2]:87 , 
Potential registers zp[1]:89 [ renderBobInit::$3 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ renderBobInit::$4 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ renderBobCleanup::$1 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:92 [ renderBobCleanup::screen#0 ] : zp[2]:92 , 
Potential registers zp[1]:94 [ mulf8u_prepare::a#0 ] : zp[1]:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ mulf8s_prepared::b#0 ] : zp[1]:95 , reg byte y , 
Potential registers zp[2]:96 [ mulf8s::return#0 ] : zp[2]:96 , 
Potential registers zp[1]:98 [ renderBob::x_char_offset#0 ] : zp[1]:98 , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ renderBob::y_char_offset#0 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ renderBob::$8 ] : zp[1]:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:101 [ renderBob::y_offset#0 ] : zp[2]:101 , 
Potential registers zp[2]:103 [ renderBob::$2 ] : zp[2]:103 , 
Potential registers zp[2]:105 [ renderBob::screen#0 ] : zp[2]:105 , 
Potential registers zp[1]:107 [ renderBob::$4 ] : zp[1]:107 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:108 [ renderBob::$5 ] : zp[1]:108 , reg byte x , reg byte y , 
Potential registers zp[1]:109 [ renderBob::$6 ] : zp[1]:109 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:110 [ renderBob::bob_table_idx#0 ] : zp[1]:110 , reg byte x , 
Potential registers zp[1]:111 [ keyboard_matrix_read::return#2 ] : zp[1]:111 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:112 [ keyboard_key_pressed::$2 ] : zp[1]:112 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:113 [ keyboard_key_pressed::return#0 ] : zp[1]:113 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:114 [ shiftProtoBobRight::$1 ] : zp[1]:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:115 [ shiftProtoBobRight::$5 ] : zp[1]:115 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:116 [ shiftProtoBobRight::$6 ] : zp[1]:116 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:117 [ mulf8u_prepared::b#0 ] : zp[1]:117 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:118 [ mulf8u_prepared::return#2 ] : zp[2]:118 , 
Potential registers zp[1]:120 [ mulf8s_prepared::$6 ] : zp[1]:120 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:121 [ mulf8s_prepared::$11 ] : zp[1]:121 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:122 [ mulf8s_prepared::$9 ] : zp[1]:122 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:123 [ mulf8s_prepared::$12 ] : zp[1]:123 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:124 [ keyboard_matrix_read::return#0 ] : zp[1]:124 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:125 [ mulf8u_prepared::return#0 ] : zp[2]:125 , 

REGISTER UPLIFT SCOPES
Uplift Scope [bobCharsetFindOrAddGlyph] 36,666,666,670.33: zp[1]:47 [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ] 3,666,666,670.33: zp[1]:46 [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ] 3,000,000,002.31: zp[2]:44 [ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] 1,187,500,626.25: zp[1]:43 [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ] 1,000,000,001: zp[1]:48 [ bobCharsetFindOrAddGlyph::found#2 ] 733,354,002.2: zp[2]:41 [ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ] 20,002: zp[1]:79 [ bobCharsetFindOrAddGlyph::return#1 ] 
Uplift Scope [] 224,462,985.45: zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ] 280,824.43: zp[2]:23 [ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ] 200,470.72: zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ] 146.55: zp[2]:5 [ renderBobCleanupNext#19 renderBobCleanupNext#14 ] 
Uplift Scope [shiftProtoBobRight] 57,000,005.7: zp[1]:51 [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ] 22,857,145.14: zp[1]:52 [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ] 20,000,002: zp[1]:114 [ shiftProtoBobRight::$1 ] 20,000,002: zp[1]:115 [ shiftProtoBobRight::$5 ] 20,000,002: zp[1]:116 [ shiftProtoBobRight::$6 ] 12,307,693.54: zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ] 1,111,111.22: zp[1]:53 [ shiftProtoBobRight::carry#1 ] 
Uplift Scope [shiftProtoBobDown] 360,003.6: zp[1]:49 [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ] 
Uplift Scope [mulf8u_prepared] 110,002: zp[1]:117 [ mulf8u_prepared::b#0 ] 36,667.33: zp[2]:125 [ mulf8u_prepared::return#0 ] 20,002: zp[2]:118 [ mulf8u_prepared::return#2 ] 
Uplift Scope [mulf8s_prepared] 69,173.58: zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] 20,002: zp[1]:120 [ mulf8s_prepared::$6 ] 20,002: zp[1]:121 [ mulf8s_prepared::$11 ] 20,002: zp[1]:122 [ mulf8s_prepared::$9 ] 20,002: zp[1]:123 [ mulf8s_prepared::$12 ] 1,100.2: zp[1]:95 [ mulf8s_prepared::b#0 ] 
Uplift Scope [prepareBobs] 23,002.3: zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ] 20,002: zp[1]:80 [ prepareBobs::$6 ] 12,544.83: zp[2]:31 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ] 9,286.64: zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ] 2,168.83: zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ] 689.93: zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ] 215.17: zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ] 
Uplift Scope [renderBobCleanup] 20,002: zp[1]:91 [ renderBobCleanup::$1 ] 17,501.75: zp[1]:37 [ renderBobCleanup::i#2 renderBobCleanup::i#1 ] 11,112.22: zp[2]:92 [ renderBobCleanup::screen#0 ] 
Uplift Scope [renderBob] 2,002: zp[1]:99 [ renderBob::y_char_offset#0 ] 2,002: zp[1]:100 [ renderBob::$8 ] 2,002: zp[2]:101 [ renderBob::y_offset#0 ] 2,002: zp[2]:103 [ renderBob::$2 ] 2,002: zp[1]:107 [ renderBob::$4 ] 2,002: zp[1]:109 [ renderBob::$6 ] 1,001: zp[1]:108 [ renderBob::$5 ] 910: zp[1]:110 [ renderBob::bob_table_idx#0 ] 734.07: zp[2]:105 [ renderBob::screen#0 ] 400.4: zp[1]:98 [ renderBob::x_char_offset#0 ] 300.43: zp[1]:71 [ renderBob::ypos#0 ] 210.3: zp[1]:70 [ renderBob::xpos#0 ] 
Uplift Scope [mulf8u_prepare] 11,002: zp[1]:94 [ mulf8u_prepare::a#0 ] 
Uplift Scope [mulf_init] 437.67: zp[2]:20 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 246.89: zp[2]:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 230.86: zp[2]:8 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 212.1: zp[1]:13 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 202: zp[1]:76 [ mulf_init::$1 ] 202: zp[1]:77 [ mulf_init::$4 ] 202: zp[1]:78 [ mulf_init::$5 ] 141.4: zp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 138.88: zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ] 124.31: zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ] 109.42: zp[2]:17 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 92.58: zp[2]:11 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [mulf8s] 805: zp[1]:39 [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ] 404: zp[1]:38 [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ] 300.75: zp[2]:96 [ mulf8s::return#0 ] 202: zp[2]:56 [ mulf8s::return#2 ] 202: zp[2]:62 [ mulf8s::return#3 ] 
Uplift Scope [renderBobInit] 252.5: zp[1]:34 [ renderBobInit::i#2 renderBobInit::i#1 ] 202: zp[2]:83 [ renderBobInit::$6 ] 202: zp[2]:85 [ renderBobInit::$7 ] 202: zp[1]:89 [ renderBobInit::$3 ] 202: zp[1]:90 [ renderBobInit::$4 ] 194.79: zp[1]:33 [ renderBobInit::y#2 renderBobInit::y#1 ] 151.5: zp[2]:81 [ renderBobInit::$5 ] 101: zp[2]:87 [ renderBobInit::$0 ] 
Uplift Scope [main] 202: zp[2]:58 [ main::$10 ] 202: zp[2]:64 [ main::$12 ] 202: zp[2]:66 [ main::$13 ] 161.12: zp[1]:7 [ main::i#2 main::i#1 ] 76.79: zp[1]:4 [ main::a#2 main::a#6 main::a#1 ] 57.43: zp[1]:3 [ main::r#2 main::r#1 ] 40.4: zp[2]:68 [ main::y#0 ] 22: zp[1]:73 [ main::$19 ] 22: zp[1]:75 [ main::$21 ] 18.36: zp[2]:60 [ main::x#0 ] 4.85: zp[1]:2 [ main::angle#8 main::angle#1 ] 
Uplift Scope [keyboard_matrix_read] 367.33: zp[1]:124 [ keyboard_matrix_read::return#0 ] 202: zp[1]:111 [ keyboard_matrix_read::return#2 ] 
Uplift Scope [memset] 336.67: zp[2]:35 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [keyboard_key_pressed] 202: zp[1]:112 [ keyboard_key_pressed::$2 ] 30.75: zp[1]:113 [ keyboard_key_pressed::return#0 ] 22: zp[1]:72 [ keyboard_key_pressed::return#2 ] 22: zp[1]:74 [ keyboard_key_pressed::return#3 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [progress_inc] 

Uplifting [bobCharsetFindOrAddGlyph] best 4014488 combination reg byte y [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ] reg byte y [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ] zp[2]:44 [ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] reg byte x [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ] reg byte a [ bobCharsetFindOrAddGlyph::found#2 ] zp[2]:41 [ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ] zp[1]:79 [ bobCharsetFindOrAddGlyph::return#1 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [] best 4014488 combination zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ] zp[2]:23 [ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ] zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ] zp[2]:5 [ renderBobCleanupNext#19 renderBobCleanupNext#14 ] 
Uplifting [shiftProtoBobRight] best 3976488 combination reg byte x [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ] reg byte y [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ] reg byte a [ shiftProtoBobRight::$1 ] reg byte a [ shiftProtoBobRight::$5 ] zp[1]:116 [ shiftProtoBobRight::$6 ] zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ] zp[1]:53 [ shiftProtoBobRight::carry#1 ] 
Limited combination testing to 100 combinations of 5184 possible.
Uplifting [shiftProtoBobDown] best 3974888 combination reg byte x [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ] 
Uplifting [mulf8u_prepared] best 3974882 combination reg byte a [ mulf8u_prepared::b#0 ] zp[2]:125 [ mulf8u_prepared::return#0 ] zp[2]:118 [ mulf8u_prepared::return#2 ] 
Uplifting [mulf8s_prepared] best 3974858 combination zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] reg byte a [ mulf8s_prepared::$6 ] reg byte a [ mulf8s_prepared::$11 ] reg byte a [ mulf8s_prepared::$9 ] reg byte a [ mulf8s_prepared::$12 ] zp[1]:95 [ mulf8s_prepared::b#0 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [prepareBobs] best 3968858 combination zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ] reg byte a [ prepareBobs::$6 ] zp[2]:31 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ] zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ] zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ] zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ] zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ] 
Uplifting [renderBobCleanup] best 3967458 combination reg byte a [ renderBobCleanup::$1 ] reg byte x [ renderBobCleanup::i#2 renderBobCleanup::i#1 ] zp[2]:92 [ renderBobCleanup::screen#0 ] 
Uplifting [renderBob] best 3967436 combination reg byte a [ renderBob::y_char_offset#0 ] reg byte a [ renderBob::$8 ] zp[2]:101 [ renderBob::y_offset#0 ] zp[2]:103 [ renderBob::$2 ] reg byte a [ renderBob::$4 ] reg byte a [ renderBob::$6 ] zp[1]:108 [ renderBob::$5 ] zp[1]:110 [ renderBob::bob_table_idx#0 ] zp[2]:105 [ renderBob::screen#0 ] zp[1]:98 [ renderBob::x_char_offset#0 ] zp[1]:71 [ renderBob::ypos#0 ] zp[1]:70 [ renderBob::xpos#0 ] 
Limited combination testing to 100 combinations of 41472 possible.
Uplifting [mulf8u_prepare] best 3967430 combination reg byte a [ mulf8u_prepare::a#0 ] 
Uplifting [mulf_init] best 3967180 combination zp[2]:20 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] zp[2]:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp[2]:8 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$1 ] reg byte a [ mulf_init::$4 ] reg byte a [ mulf_init::$5 ] zp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ] zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ] zp[2]:17 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp[2]:11 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [mulf8s] best 3965974 combination reg byte x [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ] reg byte a [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ] zp[2]:96 [ mulf8s::return#0 ] zp[2]:56 [ mulf8s::return#2 ] zp[2]:62 [ mulf8s::return#3 ] 
Uplifting [renderBobInit] best 3965684 combination reg byte x [ renderBobInit::i#2 renderBobInit::i#1 ] zp[2]:83 [ renderBobInit::$6 ] zp[2]:85 [ renderBobInit::$7 ] reg byte a [ renderBobInit::$3 ] reg byte a [ renderBobInit::$4 ] reg byte x [ renderBobInit::y#2 renderBobInit::y#1 ] zp[2]:81 [ renderBobInit::$5 ] zp[2]:87 [ renderBobInit::$0 ] 
Limited combination testing to 100 combinations of 144 possible.
Uplifting [main] best 3965564 combination zp[2]:58 [ main::$10 ] zp[2]:64 [ main::$12 ] zp[2]:66 [ main::$13 ] zp[1]:7 [ main::i#2 main::i#1 ] zp[1]:4 [ main::a#2 main::a#6 main::a#1 ] zp[1]:3 [ main::r#2 main::r#1 ] zp[2]:68 [ main::y#0 ] reg byte a [ main::$19 ] reg byte a [ main::$21 ] zp[2]:60 [ main::x#0 ] zp[1]:2 [ main::angle#8 main::angle#1 ] 
Uplifting [keyboard_matrix_read] best 3965552 combination reg byte a [ keyboard_matrix_read::return#0 ] reg byte a [ keyboard_matrix_read::return#2 ] 
Uplifting [memset] best 3965552 combination zp[2]:35 [ memset::dst#2 memset::dst#1 ] 
Uplifting [keyboard_key_pressed] best 3965363 combination reg byte a [ keyboard_key_pressed::$2 ] reg byte a [ keyboard_key_pressed::return#0 ] reg byte a [ keyboard_key_pressed::return#2 ] reg byte a [ keyboard_key_pressed::return#3 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [MOS6526_CIA] best 3965363 combination 
Uplifting [MOS6569_VICII] best 3965363 combination 
Uplifting [MOS6581_SID] best 3965363 combination 
Uplifting [RADIX] best 3965363 combination 
Uplifting [progress_inc] best 3965363 combination 
Attempting to uplift remaining variables inzp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ]
Uplifting [] best 3965363 combination zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ] 
Attempting to uplift remaining variables inzp[1]:116 [ shiftProtoBobRight::$6 ]
Uplifting [shiftProtoBobRight] best 3959363 combination reg byte a [ shiftProtoBobRight::$6 ] 
Attempting to uplift remaining variables inzp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
Uplifting [shiftProtoBobRight] best 3959363 combination zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ] 
Attempting to uplift remaining variables inzp[1]:53 [ shiftProtoBobRight::carry#1 ]
Uplifting [shiftProtoBobRight] best 3959363 combination zp[1]:53 [ shiftProtoBobRight::carry#1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ]
Uplifting [] best 3959363 combination zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ] 
Attempting to uplift remaining variables inzp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ]
Uplifting [prepareBobs] best 3959363 combination zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ] 
Attempting to uplift remaining variables inzp[1]:79 [ bobCharsetFindOrAddGlyph::return#1 ]
Uplifting [bobCharsetFindOrAddGlyph] best 3955363 combination reg byte a [ bobCharsetFindOrAddGlyph::return#1 ] 
Attempting to uplift remaining variables inzp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
Uplifting [prepareBobs] best 3955363 combination zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ] 
Attempting to uplift remaining variables inzp[1]:95 [ mulf8s_prepared::b#0 ]
Uplifting [mulf8s_prepared] best 3955363 combination zp[1]:95 [ mulf8s_prepared::b#0 ] 
Attempting to uplift remaining variables inzp[1]:108 [ renderBob::$5 ]
Uplifting [renderBob] best 3955363 combination zp[1]:108 [ renderBob::$5 ] 
Attempting to uplift remaining variables inzp[1]:110 [ renderBob::bob_table_idx#0 ]
Uplifting [renderBob] best 3955335 combination reg byte x [ renderBob::bob_table_idx#0 ] 
Attempting to uplift remaining variables inzp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
Uplifting [prepareBobs] best 3955335 combination zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:98 [ renderBob::x_char_offset#0 ]
Uplifting [renderBob] best 3955333 combination reg byte x [ renderBob::x_char_offset#0 ] 
Attempting to uplift remaining variables inzp[1]:71 [ renderBob::ypos#0 ]
Uplifting [renderBob] best 3955333 combination zp[1]:71 [ renderBob::ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
Uplifting [prepareBobs] best 3955333 combination zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ] 
Attempting to uplift remaining variables inzp[1]:70 [ renderBob::xpos#0 ]
Uplifting [renderBob] best 3955333 combination zp[1]:70 [ renderBob::xpos#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::i#2 main::i#1 ]
Uplifting [main] best 3955333 combination zp[1]:7 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:16 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 3955193 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ]
Uplifting [mulf_init] best 3955193 combination zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ] 
Attempting to uplift remaining variables inzp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ]
Uplifting [mulf_init] best 3955193 combination zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::a#2 main::a#6 main::a#1 ]
Uplifting [main] best 3955193 combination zp[1]:4 [ main::a#2 main::a#6 main::a#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::r#2 main::r#1 ]
Uplifting [main] best 3955193 combination zp[1]:3 [ main::r#2 main::r#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::angle#8 main::angle#1 ]
Uplifting [main] best 3955193 combination zp[1]:2 [ main::angle#8 main::angle#1 ] 
Coalescing zero page register [ zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 ] ] with [ zp[2]:41 [ bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] ] with [ zp[2]:96 [ mulf8s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 ] ] with [ zp[2]:118 [ mulf8u_prepared::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:56 [ mulf8s::return#2 ] ] with [ zp[2]:58 [ main::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:62 [ mulf8s::return#3 ] ] with [ zp[2]:64 [ main::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:66 [ main::$13 ] ] with [ zp[2]:68 [ main::y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:81 [ renderBobInit::$5 ] ] with [ zp[2]:85 [ renderBobInit::$7 ] ] - score: 1
Coalescing zero page register [ zp[2]:101 [ renderBob::y_offset#0 ] ] with [ zp[2]:103 [ renderBob::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 ] ] with [ zp[2]:56 [ mulf8s::return#2 main::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 ] ] with [ zp[2]:62 [ mulf8s::return#3 main::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 ] ] with [ zp[2]:125 [ mulf8u_prepared::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:81 [ renderBobInit::$5 renderBobInit::$7 ] ] with [ zp[2]:87 [ renderBobInit::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:101 [ renderBob::y_offset#0 renderBob::$2 ] ] with [ zp[2]:105 [ renderBob::screen#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 ] ] with [ zp[2]:66 [ main::$13 main::y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ] with [ zp[2]:5 [ renderBobCleanupNext#19 renderBobCleanupNext#14 ] ]
Coalescing zero page register [ zp[1]:22 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 ] ] with [ zp[1]:10 [ mulf_init::c#2 mulf_init::c#1 ] ]
Coalescing zero page register [ zp[2]:23 [ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 ] ] with [ zp[2]:11 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ]
Coalescing zero page register [ zp[1]:25 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 ] ] with [ zp[1]:2 [ main::angle#8 main::angle#1 ] ]
Coalescing zero page register [ zp[1]:26 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ] ] with [ zp[1]:19 [ mulf_init::dir#2 mulf_init::dir#4 ] ]
Coalescing zero page register [ zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 ] ] with [ zp[2]:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Coalescing zero page register [ zp[2]:31 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ] ] with [ zp[2]:17 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ]
Coalescing zero page register [ zp[2]:35 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:20 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp[1]:40 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 ] ] with [ zp[1]:3 [ main::r#2 main::r#1 ] ]
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 main::$13 main::y#0 ] ] with [ zp[2]:44 [ bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] ]
Coalescing zero page register [ zp[1]:70 [ renderBob::xpos#0 ] ] with [ zp[1]:27 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 ] ]
Coalescing zero page register [ zp[1]:71 [ renderBob::ypos#0 ] ] with [ zp[1]:28 [ prepareBobs::cell#2 prepareBobs::cell#1 ] ]
Coalescing zero page register [ zp[2]:92 [ renderBobCleanup::screen#0 ] ] with [ zp[2]:81 [ renderBobInit::$5 renderBobInit::$7 renderBobInit::$0 ] ]
Coalescing zero page register [ zp[1]:95 [ mulf8s_prepared::b#0 ] ] with [ zp[1]:50 [ shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ] ]
Coalescing zero page register [ zp[2]:101 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 ] ] with [ zp[2]:83 [ renderBobInit::$6 ] ]
Coalescing zero page register [ zp[1]:108 [ renderBob::$5 ] ] with [ zp[1]:53 [ shiftProtoBobRight::carry#1 ] ]
Coalescing zero page register [ zp[2]:54 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 main::$13 main::y#0 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ] ] with [ zp[2]:35 [ memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp[2]:60 [ main::x#0 ] ] with [ zp[2]:23 [ progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ]
Coalescing zero page register [ zp[2]:92 [ renderBobCleanup::screen#0 renderBobInit::$5 renderBobInit::$7 renderBobInit::$0 ] ] with [ zp[2]:8 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 renderBobCleanupNext#19 renderBobCleanupNext#14 ] ]
Coalescing zero page register [ zp[2]:101 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 renderBobInit::$6 ] ] with [ zp[2]:29 [ prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Allocated (was zp[1]:4) zp[1]:2 [ main::a#2 main::a#6 main::a#1 ]
Allocated (was zp[1]:7) zp[1]:3 [ main::i#2 main::i#1 ]
Allocated (was zp[1]:22) zp[1]:4 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 mulf_init::c#2 mulf_init::c#1 ]
Allocated (was zp[1]:25) zp[1]:5 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 main::angle#8 main::angle#1 ]
Allocated (was zp[1]:26) zp[1]:6 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 mulf_init::dir#2 mulf_init::dir#4 ]
Allocated (was zp[2]:31) zp[2]:7 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated (was zp[1]:40) zp[1]:9 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 main::r#2 main::r#1 ]
Allocated (was zp[2]:54) zp[2]:10 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 main::$13 main::y#0 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated (was zp[2]:60) zp[2]:12 [ main::x#0 progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated (was zp[1]:70) zp[1]:14 [ renderBob::xpos#0 prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
Allocated (was zp[1]:71) zp[1]:15 [ renderBob::ypos#0 prepareBobs::cell#2 prepareBobs::cell#1 ]
Allocated (was zp[2]:92) zp[2]:16 [ renderBobCleanup::screen#0 renderBobInit::$5 renderBobInit::$7 renderBobInit::$0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 renderBobCleanupNext#19 renderBobCleanupNext#14 ]
Allocated (was zp[1]:95) zp[1]:18 [ mulf8s_prepared::b#0 shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
Allocated (was zp[2]:101) zp[2]:19 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 renderBobInit::$6 prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated (was zp[1]:108) zp[1]:21 [ renderBob::$5 shiftProtoBobRight::carry#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Pre-calculated bobs inside a charset (pre-moved to all x/y-combinations)
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const KEY_SPACE = $3c
  // The number of different X-shifts
  .const BOB_SHIFTS_X = 4
  // The number of different Y-shifts
  .const BOB_SHIFTS_Y = 8
  // The size of a sub-table of BOB_TABLES
  .const BOB_SUBTABLE_SIZE = BOB_SHIFTS_X*BOB_SHIFTS_Y
  // The number of BOBs to render
  .const NUM_BOBS = $14
  .const SIZEOF_POINTER = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .label RASTER = $d012
  .label BORDER_COLOR = $d020
  .label D018 = $d018
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // The BASIC screen
  .label SCREEN_BASIC = $400
  // The BASIC charset
  .label CHARSET_BASIC = $1000
  // The BOB screen
  .label BOB_SCREEN = $2800
  // The BOB charset
  .label BOB_CHARSET = $2000
  .label COS = SIN+$40
  // BOB charset ID of the next glyph to be added
  .label bob_charset_next_id = 9
  // Current index within the progress cursor (0-7)
  .label progress_idx = 5
  // Current position of the progress cursor
  .label progress_cursor = $c
  // Pointer to the next clean-up to add
  // Prepare for next clean-up
  .label renderBobCleanupNext = $10
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .const vicSelectGfxBank2_toDd001_return = 3
    .const toD0181_return = (>(BOB_SCREEN&$3fff)*4)|(>BOB_CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN_BASIC&$3fff)*4)|(>CHARSET_BASIC)/4&$f
    .label __10 = $a
    .label __12 = $a
    .label __13 = $a
    .label x = $c
    .label y = $a
    .label a = 2
    .label r = 9
    .label i = 3
    // Render Rotated BOBs
    .label angle = 5
    // [1] call mulf_init 
    // [57] phi from main to mulf_init [phi:main->mulf_init]
  mulf_init_from_main:
    jsr mulf_init
    // [2] phi from main to main::@9 [phi:main->main::@9]
  __b9_from_main:
    jmp __b9
    // main::@9
  __b9:
    // [3] call prepareBobs 
    // [86] phi from main::@9 to prepareBobs [phi:main::@9->prepareBobs]
  prepareBobs_from___b9:
    jsr prepareBobs
    // [4] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [5] call renderBobInit 
    // [114] phi from main::@10 to renderBobInit [phi:main::@10->renderBobInit]
  renderBobInit_from___b10:
    jsr renderBobInit
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [6] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [7] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [8] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [9] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b7
    // main::@7
  __b7:
    // [10] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [11] call memset 
  /*
	// Clear screen
	memset(BOB_SCREEN, 0x00, 1000);
	// Display a BOB grid
	for(char x: 0..7)
	    for(char y: 0..3)
            renderBob(x*12+y, y*24+x);
	// Wait for space
	while(!keyboard_key_pressed(KEY_SPACE)) {}
	while(keyboard_key_pressed(KEY_SPACE)) {}
	*/
  // Clear screen
    // [130] phi from main::@7 to memset [phi:main::@7->memset]
  memset_from___b7:
    jsr memset
    // [12] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [12] phi main::angle#8 = 0 [phi:main::@7->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] if(*RASTER<$f8) goto main::@2 -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda RASTER
    cmp #$f8
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [14] *BORDER_COLOR = $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta BORDER_COLOR
    // [15] call renderBobCleanup 
    // [136] phi from main::@3 to renderBobCleanup [phi:main::@3->renderBobCleanup]
  renderBobCleanup_from___b3:
    jsr renderBobCleanup
    jmp __b11
    // main::@11
  __b11:
    // [16] main::a#6 = main::angle#8 -- vbuz1=vbuz2 
    lda.z angle
    sta.z a
    // [17] phi from main::@11 to main::@4 [phi:main::@11->main::@4]
  __b4_from___b11:
    // [17] phi main::i#2 = 0 [phi:main::@11->main::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [17] phi renderBobCleanupNext#19 = RENDERBOB_CLEANUP [phi:main::@11->main::@4#1] -- qbuz1=qbuc1 
    lda #<RENDERBOB_CLEANUP
    sta.z renderBobCleanupNext
    lda #>RENDERBOB_CLEANUP
    sta.z renderBobCleanupNext+1
    // [17] phi main::a#2 = main::a#6 [phi:main::@11->main::@4#2] -- register_copy 
    // [17] phi main::r#2 = $1e [phi:main::@11->main::@4#3] -- vbsz1=vbsc1 
    lda #$1e
    sta.z r
    jmp __b4
    // [17] phi from main::@14 to main::@4 [phi:main::@14->main::@4]
  __b4_from___b14:
    // [17] phi main::i#2 = main::i#1 [phi:main::@14->main::@4#0] -- register_copy 
    // [17] phi renderBobCleanupNext#19 = renderBobCleanupNext#14 [phi:main::@14->main::@4#1] -- register_copy 
    // [17] phi main::a#2 = main::a#1 [phi:main::@14->main::@4#2] -- register_copy 
    // [17] phi main::r#2 = main::r#1 [phi:main::@14->main::@4#3] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [18] *BORDER_COLOR = 1 -- _deref_pbuc1=vbuc2 
    //kickasm {{ .break }}
    lda #1
    sta BORDER_COLOR
    // [19] mulf8s::a#0 = main::r#2 -- vbsaa=vbsz1 
    lda.z r
    // [20] mulf8s::b#0 = COS[main::a#2] -- vbsxx=pbsc1_derefidx_vbuz1 
    ldy.z a
    ldx COS,y
    // [21] call mulf8s 
    // [152] phi from main::@4 to mulf8s [phi:main::@4->mulf8s]
  mulf8s_from___b4:
    // [152] phi mulf8s::b#2 = mulf8s::b#0 [phi:main::@4->mulf8s#0] -- register_copy 
    // [152] phi mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 [phi:main::@4->mulf8s#1] -- register_copy 
    jsr mulf8s
    // [22] mulf8s::return#2 = mulf8s::return#0
    jmp __b12
    // main::@12
  __b12:
    // [23] main::$10 = mulf8s::return#2
    // [24] main::x#0 = main::$10 + (signed word)$4b*$100 -- vwsz1=vwsz2_plus_vwsc1 
    clc
    lda.z __10
    adc #<$4b*$100
    sta.z x
    lda.z __10+1
    adc #>$4b*$100
    sta.z x+1
    // [25] mulf8s::a#1 = main::r#2 -- vbsaa=vbsz1 
    lda.z r
    // [26] mulf8s::b#1 = SIN[main::a#2] -- vbsxx=pbsc1_derefidx_vbuz1 
    ldy.z a
    ldx SIN,y
    // [27] call mulf8s 
    // [152] phi from main::@12 to mulf8s [phi:main::@12->mulf8s]
  mulf8s_from___b12:
    // [152] phi mulf8s::b#2 = mulf8s::b#1 [phi:main::@12->mulf8s#0] -- register_copy 
    // [152] phi mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 [phi:main::@12->mulf8s#1] -- register_copy 
    jsr mulf8s
    // [28] mulf8s::return#3 = mulf8s::return#0
    jmp __b13
    // main::@13
  __b13:
    // [29] main::$12 = mulf8s::return#3
    // [30] main::$13 = main::$12 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z __13
    rol.z __13+1
    // [31] main::y#0 = main::$13 + (signed word)$5a*$100 -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z y
    adc #<$5a*$100
    sta.z y
    lda.z y+1
    adc #>$5a*$100
    sta.z y+1
    // [32] *BORDER_COLOR = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BORDER_COLOR
    // [33] main::a#1 = main::a#2 + $62 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z a
    axs #-[$62]
    stx.z a
    // [34] main::r#1 = main::r#2 + 3 -- vbsz1=vbsz1_plus_vbsc1 
    lax.z r
    axs #-[3]
    stx.z r
    // [35] renderBob::xpos#0 = > main::x#0 -- vbuz1=_hi_vwsz2 
    lda.z x+1
    sta.z renderBob.xpos
    // [36] renderBob::ypos#0 = > main::y#0 -- vbuz1=_hi_vwsz2 
    lda.z y+1
    sta.z renderBob.ypos
    // [37] call renderBob 
    jsr renderBob
    jmp __b14
    // main::@14
  __b14:
    // [38] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [39] if(main::i#1!=NUM_BOBS-1+1) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_BOBS-1+1
    cmp.z i
    bne __b4_from___b14
    jmp __b5
    // main::@5
  __b5:
    // [40] main::angle#1 = main::angle#8 + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z angle
    axs #-[3]
    stx.z angle
    // [41] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // [42] call keyboard_key_pressed 
    // [181] phi from main::@5 to keyboard_key_pressed [phi:main::@5->keyboard_key_pressed]
  keyboard_key_pressed_from___b5:
    jsr keyboard_key_pressed
    // [43] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
    jmp __b15
    // main::@15
  __b15:
    // [44] main::$19 = keyboard_key_pressed::return#2
    // [45] if(0!=main::$19) goto main::@6 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b6_from___b15
    // [12] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
  __b1_from___b15:
    // [12] phi main::angle#8 = main::angle#1 [phi:main::@15->main::@1#0] -- register_copy 
    jmp __b1
  // Wait for space release
    // [46] phi from main::@15 main::@16 to main::@6 [phi:main::@15/main::@16->main::@6]
  __b6_from___b15:
  __b6_from___b16:
    jmp __b6
    // main::@6
  __b6:
    // [47] call keyboard_key_pressed 
    // [181] phi from main::@6 to keyboard_key_pressed [phi:main::@6->keyboard_key_pressed]
  keyboard_key_pressed_from___b6:
    jsr keyboard_key_pressed
    // [48] keyboard_key_pressed::return#3 = keyboard_key_pressed::return#0
    jmp __b16
    // main::@16
  __b16:
    // [49] main::$21 = keyboard_key_pressed::return#3
    // [50] if(0!=main::$21) goto main::@6 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b6_from___b16
    jmp vicSelectGfxBank2
    // main::vicSelectGfxBank2
  vicSelectGfxBank2:
    // [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [52] phi from main::vicSelectGfxBank2 to main::vicSelectGfxBank2_toDd001 [phi:main::vicSelectGfxBank2->main::vicSelectGfxBank2_toDd001]
  vicSelectGfxBank2_toDd001_from_vicSelectGfxBank2:
    jmp vicSelectGfxBank2_toDd001
    // main::vicSelectGfxBank2_toDd001
  vicSelectGfxBank2_toDd001:
    jmp vicSelectGfxBank2___b1
    // main::vicSelectGfxBank2_@1
  vicSelectGfxBank2___b1:
    // [53] *((byte*)CIA2) = main::vicSelectGfxBank2_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank2_toDd001_return
    sta CIA2
    // [54] phi from main::vicSelectGfxBank2_@1 to main::toD0182 [phi:main::vicSelectGfxBank2_@1->main::toD0182]
  toD0182_from_vicSelectGfxBank2___b1:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b8
    // main::@8
  __b8:
    // [55] *D018 = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    jmp __breturn
    // main::@return
  __breturn:
    // [56] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = 4
    // Counter used for determining x%2==0
    .label sqr1_hi = $c
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $a
    .label sqr1_lo = $10
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = 7
    .label sqr2_lo = $13
    //Start with g(0)=f(255)
    .label dir = 6
    // [58] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [58] phi mulf_init::x_2#3 = 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [58] phi mulf_init::sqr1_hi#2 = mulf_sqr1_hi+1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [58] phi mulf_init::sqr#4 = 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    // [58] phi mulf_init::c#2 = 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [58] phi mulf_init::sqr1_lo#2 = mulf_sqr1_lo+1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    jmp __b1
    // mulf_init::@1
  __b1:
    // [59] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [60] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
  __b5_from___b1:
    // [60] phi mulf_init::dir#2 = $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [60] phi mulf_init::sqr2_hi#2 = mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [60] phi mulf_init::x_255#2 = -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [60] phi mulf_init::sqr2_lo#2 = mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    jmp __b5
    // mulf_init::@5
  __b5:
    // [61] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    jmp __b7
    // mulf_init::@7
  __b7:
    // [62] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [63] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [64] return 
    rts
    // mulf_init::@6
  __b6:
    // [65] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // [66] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
    // [67] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // [68] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // [69] if(mulf_init::x_255#1!=0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b9_from___b6
    // [71] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
  __b8_from___b6:
    // [71] phi mulf_init::dir#4 = 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    jmp __b8
    // [70] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
  __b9_from___b6:
    jmp __b9
    // mulf_init::@9
  __b9:
    // [71] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
  __b8_from___b9:
    // [71] phi mulf_init::dir#4 = mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    jmp __b8
    // mulf_init::@8
  __b8:
    // [72] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [60] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
  __b5_from___b8:
    // [60] phi mulf_init::dir#2 = mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [60] phi mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [60] phi mulf_init::x_255#2 = mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [60] phi mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // [73] mulf_init::c#1 = ++ mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [74] mulf_init::$1 = mulf_init::c#1 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // [75] if(mulf_init::$1!=0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3_from___b2
    jmp __b4
    // mulf_init::@4
  __b4:
    // [76] mulf_init::x_2#1 = ++ mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // [77] mulf_init::sqr#2 = ++ mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [78] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [78] phi mulf_init::x_2#2 = mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [78] phi mulf_init::sqr#3 = mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    jmp __b3
    // mulf_init::@3
  __b3:
    // [79] mulf_init::$4 = < mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // [80] *mulf_init::sqr1_lo#2 = mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // [81] mulf_init::$5 = > mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // [82] *mulf_init::sqr1_hi#2 = mulf_init::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
    // [83] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // [84] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // [85] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [58] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
  __b1_from___b3:
    // [58] phi mulf_init::x_2#3 = mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [58] phi mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [58] phi mulf_init::sqr#4 = mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [58] phi mulf_init::c#2 = mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [58] phi mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // prepareBobs
// Creates the pre-shifted bobs into BOB_CHARSET and populates the BOB_TABLES
// Modifies PROTO_BOB by shifting it around
prepareBobs: {
    .label bob_table = 7
    .label shift_y = 4
    // Populate charset and tables
    .label bob_glyph = $13
    .label cell = $f
    .label bob_table_idx = 6
    .label shift_x = $e
    // [87] phi from prepareBobs to prepareBobs::@8 [phi:prepareBobs->prepareBobs::@8]
  __b8_from_prepareBobs:
    jmp __b8
    // prepareBobs::@8
  __b8:
    // [88] call bobCharsetFindOrAddGlyph 
  // Ensure that glyph #0 is empty
    // [187] phi from prepareBobs::@8 to bobCharsetFindOrAddGlyph [phi:prepareBobs::@8->bobCharsetFindOrAddGlyph]
  bobCharsetFindOrAddGlyph_from___b8:
    // [187] phi bobCharsetFindOrAddGlyph::bob_glyph#10 = PROTO_BOB+$30 [phi:prepareBobs::@8->bobCharsetFindOrAddGlyph#0] -- pbuz1=pbuc1 
    lda #<PROTO_BOB+$30
    sta.z bobCharsetFindOrAddGlyph.bob_glyph
    lda #>PROTO_BOB+$30
    sta.z bobCharsetFindOrAddGlyph.bob_glyph+1
    // [187] phi bob_charset_next_id#25 = 0 [phi:prepareBobs::@8->bobCharsetFindOrAddGlyph#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bob_charset_next_id
    jsr bobCharsetFindOrAddGlyph
    // [89] phi from prepareBobs::@8 to prepareBobs::@1 [phi:prepareBobs::@8->prepareBobs::@1]
  __b1_from___b8:
    // [89] phi prepareBobs::bob_table_idx#7 = 0 [phi:prepareBobs::@8->prepareBobs::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bob_table_idx
    // [89] phi bob_charset_next_id#15 = bob_charset_next_id#17 [phi:prepareBobs::@8->prepareBobs::@1#1] -- register_copy 
    // [89] phi progress_idx#17 = 0 [phi:prepareBobs::@8->prepareBobs::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z progress_idx
    // [89] phi progress_cursor#16 = SCREEN_BASIC [phi:prepareBobs::@8->prepareBobs::@1#3] -- pbuz1=pbuc1 
    lda #<SCREEN_BASIC
    sta.z progress_cursor
    lda #>SCREEN_BASIC
    sta.z progress_cursor+1
    // [89] phi prepareBobs::shift_y#2 = 0 [phi:prepareBobs::@8->prepareBobs::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z shift_y
    jmp __b1
    // prepareBobs::@1
  __b1:
    // [90] if(prepareBobs::shift_y#2<BOB_SHIFTS_Y) goto prepareBobs::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z shift_y
    cmp #BOB_SHIFTS_Y
    bcc __b2_from___b1
    jmp __breturn
    // prepareBobs::@return
  __breturn:
    // [91] return 
    rts
    // [92] phi from prepareBobs::@1 to prepareBobs::@2 [phi:prepareBobs::@1->prepareBobs::@2]
  __b2_from___b1:
    // [92] phi progress_idx#33 = progress_idx#17 [phi:prepareBobs::@1->prepareBobs::@2#0] -- register_copy 
    // [92] phi progress_cursor#33 = progress_cursor#16 [phi:prepareBobs::@1->prepareBobs::@2#1] -- register_copy 
    // [92] phi bob_charset_next_id#32 = bob_charset_next_id#15 [phi:prepareBobs::@1->prepareBobs::@2#2] -- register_copy 
    // [92] phi prepareBobs::bob_table_idx#12 = prepareBobs::bob_table_idx#7 [phi:prepareBobs::@1->prepareBobs::@2#3] -- register_copy 
    // [92] phi prepareBobs::shift_x#2 = 0 [phi:prepareBobs::@1->prepareBobs::@2#4] -- vbuz1=vbuc1 
    lda #0
    sta.z shift_x
    jmp __b2
    // prepareBobs::@2
  __b2:
    // [93] if(prepareBobs::shift_x#2<BOB_SHIFTS_X) goto prepareBobs::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z shift_x
    cmp #BOB_SHIFTS_X
    bcc __b3
    // [94] phi from prepareBobs::@2 to prepareBobs::@4 [phi:prepareBobs::@2->prepareBobs::@4]
  __b4_from___b2:
    jmp __b4
    // prepareBobs::@4
  __b4:
    // [95] call shiftProtoBobDown 
  // Shift PROTO_BOB down and 8px left
    // [205] phi from prepareBobs::@4 to shiftProtoBobDown [phi:prepareBobs::@4->shiftProtoBobDown]
  shiftProtoBobDown_from___b4:
    jsr shiftProtoBobDown
    jmp __b9
    // prepareBobs::@9
  __b9:
    // [96] prepareBobs::shift_y#1 = ++ prepareBobs::shift_y#2 -- vbuz1=_inc_vbuz1 
    inc.z shift_y
    // [89] phi from prepareBobs::@9 to prepareBobs::@1 [phi:prepareBobs::@9->prepareBobs::@1]
  __b1_from___b9:
    // [89] phi prepareBobs::bob_table_idx#7 = prepareBobs::bob_table_idx#12 [phi:prepareBobs::@9->prepareBobs::@1#0] -- register_copy 
    // [89] phi bob_charset_next_id#15 = bob_charset_next_id#32 [phi:prepareBobs::@9->prepareBobs::@1#1] -- register_copy 
    // [89] phi progress_idx#17 = progress_idx#33 [phi:prepareBobs::@9->prepareBobs::@1#2] -- register_copy 
    // [89] phi progress_cursor#16 = progress_cursor#33 [phi:prepareBobs::@9->prepareBobs::@1#3] -- register_copy 
    // [89] phi prepareBobs::shift_y#2 = prepareBobs::shift_y#1 [phi:prepareBobs::@9->prepareBobs::@1#4] -- register_copy 
    jmp __b1
    // prepareBobs::@3
  __b3:
    // [97] prepareBobs::bob_table#0 = BOB_TABLES + prepareBobs::bob_table_idx#12 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z bob_table_idx
    clc
    adc #<BOB_TABLES
    sta.z bob_table
    lda #>BOB_TABLES
    adc #0
    sta.z bob_table+1
    // [98] phi from prepareBobs::@3 to prepareBobs::@5 [phi:prepareBobs::@3->prepareBobs::@5]
  __b5_from___b3:
    // [98] phi progress_cursor#26 = progress_cursor#33 [phi:prepareBobs::@3->prepareBobs::@5#0] -- register_copy 
    // [98] phi progress_idx#27 = progress_idx#33 [phi:prepareBobs::@3->prepareBobs::@5#1] -- register_copy 
    // [98] phi prepareBobs::bob_table#2 = prepareBobs::bob_table#0 [phi:prepareBobs::@3->prepareBobs::@5#2] -- register_copy 
    // [98] phi bob_charset_next_id#23 = bob_charset_next_id#32 [phi:prepareBobs::@3->prepareBobs::@5#3] -- register_copy 
    // [98] phi prepareBobs::bob_glyph#2 = PROTO_BOB [phi:prepareBobs::@3->prepareBobs::@5#4] -- pbuz1=pbuc1 
    lda #<PROTO_BOB
    sta.z bob_glyph
    lda #>PROTO_BOB
    sta.z bob_glyph+1
    // [98] phi prepareBobs::cell#2 = 0 [phi:prepareBobs::@3->prepareBobs::@5#5] -- vbuz1=vbuc1 
    lda #0
    sta.z cell
    jmp __b5
    // prepareBobs::@5
  __b5:
    // [99] if(prepareBobs::cell#2<9) goto prepareBobs::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z cell
    cmp #9
    bcc __b6
    jmp __b7
    // prepareBobs::@7
  __b7:
    // [100] prepareBobs::bob_table_idx#1 = ++ prepareBobs::bob_table_idx#12 -- vbuz1=_inc_vbuz1 
    inc.z bob_table_idx
    // [101] call shiftProtoBobRight 
  // Shift PROTO_BOB right twice
    // [216] phi from prepareBobs::@7 to shiftProtoBobRight [phi:prepareBobs::@7->shiftProtoBobRight]
  shiftProtoBobRight_from___b7:
    jsr shiftProtoBobRight
    // [102] phi from prepareBobs::@7 to prepareBobs::@12 [phi:prepareBobs::@7->prepareBobs::@12]
  __b12_from___b7:
    jmp __b12
    // prepareBobs::@12
  __b12:
    // [103] call shiftProtoBobRight 
    // [216] phi from prepareBobs::@12 to shiftProtoBobRight [phi:prepareBobs::@12->shiftProtoBobRight]
  shiftProtoBobRight_from___b12:
    jsr shiftProtoBobRight
    jmp __b13
    // prepareBobs::@13
  __b13:
    // [104] prepareBobs::shift_x#1 = ++ prepareBobs::shift_x#2 -- vbuz1=_inc_vbuz1 
    inc.z shift_x
    // [92] phi from prepareBobs::@13 to prepareBobs::@2 [phi:prepareBobs::@13->prepareBobs::@2]
  __b2_from___b13:
    // [92] phi progress_idx#33 = progress_idx#27 [phi:prepareBobs::@13->prepareBobs::@2#0] -- register_copy 
    // [92] phi progress_cursor#33 = progress_cursor#26 [phi:prepareBobs::@13->prepareBobs::@2#1] -- register_copy 
    // [92] phi bob_charset_next_id#32 = bob_charset_next_id#23 [phi:prepareBobs::@13->prepareBobs::@2#2] -- register_copy 
    // [92] phi prepareBobs::bob_table_idx#12 = prepareBobs::bob_table_idx#1 [phi:prepareBobs::@13->prepareBobs::@2#3] -- register_copy 
    // [92] phi prepareBobs::shift_x#2 = prepareBobs::shift_x#1 [phi:prepareBobs::@13->prepareBobs::@2#4] -- register_copy 
    jmp __b2
    // prepareBobs::@6
  __b6:
    // [105] bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2
    // [106] call bobCharsetFindOrAddGlyph 
    // [187] phi from prepareBobs::@6 to bobCharsetFindOrAddGlyph [phi:prepareBobs::@6->bobCharsetFindOrAddGlyph]
  bobCharsetFindOrAddGlyph_from___b6:
    // [187] phi bobCharsetFindOrAddGlyph::bob_glyph#10 = bobCharsetFindOrAddGlyph::bob_glyph#1 [phi:prepareBobs::@6->bobCharsetFindOrAddGlyph#0] -- register_copy 
    // [187] phi bob_charset_next_id#25 = bob_charset_next_id#23 [phi:prepareBobs::@6->bobCharsetFindOrAddGlyph#1] -- register_copy 
    jsr bobCharsetFindOrAddGlyph
    // [107] bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 -- vbuaa=vbuxx 
    txa
    jmp __b10
    // prepareBobs::@10
  __b10:
    // [108] prepareBobs::$6 = bobCharsetFindOrAddGlyph::return#1
    // [109] *prepareBobs::bob_table#2 = prepareBobs::$6 -- _deref_pbuz1=vbuaa 
    // Look for an existing char in BOB_CHARSET 
    ldy #0
    sta (bob_table),y
    // [110] prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#2 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    // Move to the next glyph
    lda #8
    clc
    adc.z bob_glyph
    sta.z bob_glyph
    bcc !+
    inc.z bob_glyph+1
  !:
    // [111] prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y -- pbuz1=pbuz1_plus_vbuc1 
    // Move to the next sub-table
    lda #BOB_SHIFTS_X*BOB_SHIFTS_Y
    clc
    adc.z bob_table
    sta.z bob_table
    bcc !+
    inc.z bob_table+1
  !:
    // [112] call progress_inc 
    jsr progress_inc
    jmp __b11
    // prepareBobs::@11
  __b11:
    // [113] prepareBobs::cell#1 = ++ prepareBobs::cell#2 -- vbuz1=_inc_vbuz1 
    inc.z cell
    // [98] phi from prepareBobs::@11 to prepareBobs::@5 [phi:prepareBobs::@11->prepareBobs::@5]
  __b5_from___b11:
    // [98] phi progress_cursor#26 = progress_cursor#18 [phi:prepareBobs::@11->prepareBobs::@5#0] -- register_copy 
    // [98] phi progress_idx#27 = progress_idx#20 [phi:prepareBobs::@11->prepareBobs::@5#1] -- register_copy 
    // [98] phi prepareBobs::bob_table#2 = prepareBobs::bob_table#1 [phi:prepareBobs::@11->prepareBobs::@5#2] -- register_copy 
    // [98] phi bob_charset_next_id#23 = bob_charset_next_id#17 [phi:prepareBobs::@11->prepareBobs::@5#3] -- register_copy 
    // [98] phi prepareBobs::bob_glyph#2 = prepareBobs::bob_glyph#1 [phi:prepareBobs::@11->prepareBobs::@5#4] -- register_copy 
    // [98] phi prepareBobs::cell#2 = prepareBobs::cell#1 [phi:prepareBobs::@11->prepareBobs::@5#5] -- register_copy 
    jmp __b5
}
  // renderBobInit
// Initialize the tables used by renderBob()
renderBobInit: {
    .label __0 = $10
    .label __5 = $10
    .label __6 = $13
    .label __7 = $10
    // [115] phi from renderBobInit to renderBobInit::@1 [phi:renderBobInit->renderBobInit::@1]
  __b1_from_renderBobInit:
    // [115] phi renderBobInit::y#2 = 0 [phi:renderBobInit->renderBobInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [115] phi from renderBobInit::@1 to renderBobInit::@1 [phi:renderBobInit::@1->renderBobInit::@1]
  __b1_from___b1:
    // [115] phi renderBobInit::y#2 = renderBobInit::y#1 [phi:renderBobInit::@1->renderBobInit::@1#0] -- register_copy 
    jmp __b1
    // renderBobInit::@1
  __b1:
    // [116] renderBobInit::$5 = (word)renderBobInit::y#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z __5
    lda #0
    sta.z __5+1
    // [117] renderBobInit::$6 = renderBobInit::$5 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __5
    asl
    sta.z __6
    lda.z __5+1
    rol
    sta.z __6+1
    asl.z __6
    rol.z __6+1
    // [118] renderBobInit::$7 = renderBobInit::$6 + renderBobInit::$5 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __7
    clc
    adc.z __6
    sta.z __7
    lda.z __7+1
    adc.z __6+1
    sta.z __7+1
    // [119] renderBobInit::$0 = renderBobInit::$7 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // [120] renderBobInit::$3 = renderBobInit::y#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [121] MUL40[renderBobInit::$3] = renderBobInit::$0 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z __0
    sta MUL40,y
    lda.z __0+1
    sta MUL40+1,y
    // [122] renderBobInit::y#1 = ++ renderBobInit::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [123] if(renderBobInit::y#1!=$20) goto renderBobInit::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$20
    bne __b1_from___b1
    // [124] phi from renderBobInit::@1 to renderBobInit::@2 [phi:renderBobInit::@1->renderBobInit::@2]
  __b2_from___b1:
    // [124] phi renderBobInit::i#2 = 0 [phi:renderBobInit::@1->renderBobInit::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [124] phi from renderBobInit::@2 to renderBobInit::@2 [phi:renderBobInit::@2->renderBobInit::@2]
  __b2_from___b2:
    // [124] phi renderBobInit::i#2 = renderBobInit::i#1 [phi:renderBobInit::@2->renderBobInit::@2#0] -- register_copy 
    jmp __b2
    // renderBobInit::@2
  __b2:
    // [125] renderBobInit::$4 = renderBobInit::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [126] RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN -- qbuc1_derefidx_vbuaa=pbuc2 
    tay
    lda #<BOB_SCREEN
    sta RENDERBOB_CLEANUP,y
    lda #>BOB_SCREEN
    sta RENDERBOB_CLEANUP+1,y
    // [127] renderBobInit::i#1 = ++ renderBobInit::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [128] if(renderBobInit::i#1!=NUM_BOBS-1+1) goto renderBobInit::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_BOBS-1+1
    bne __b2_from___b2
    jmp __breturn
    // renderBobInit::@return
  __breturn:
    // [129] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = 0
    .const num = $3e8
    .label str = BOB_SCREEN
    .label end = str+num
    .label dst = $a
    // [131] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [131] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [132] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [133] return 
    rts
    // memset::@2
  __b2:
    // [134] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [135] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [131] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [131] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // renderBobCleanup
// Clean Up the rendered BOB's
renderBobCleanup: {
    .label screen = $10
    // [137] phi from renderBobCleanup to renderBobCleanup::@1 [phi:renderBobCleanup->renderBobCleanup::@1]
  __b1_from_renderBobCleanup:
    // [137] phi renderBobCleanup::i#2 = 0 [phi:renderBobCleanup->renderBobCleanup::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [137] phi from renderBobCleanup::@1 to renderBobCleanup::@1 [phi:renderBobCleanup::@1->renderBobCleanup::@1]
  __b1_from___b1:
    // [137] phi renderBobCleanup::i#2 = renderBobCleanup::i#1 [phi:renderBobCleanup::@1->renderBobCleanup::@1#0] -- register_copy 
    jmp __b1
    // renderBobCleanup::@1
  __b1:
    // [138] renderBobCleanup::$1 = renderBobCleanup::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [139] renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda RENDERBOB_CLEANUP,y
    sta.z screen
    lda RENDERBOB_CLEANUP+1,y
    sta.z screen+1
    // [140] *renderBobCleanup::screen#0 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (screen),y
    // [141] renderBobCleanup::screen#0[$28] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #$28
    sta (screen),y
    // [142] renderBobCleanup::screen#0[$50] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #$50
    sta (screen),y
    // [143] renderBobCleanup::screen#0[1] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #1
    sta (screen),y
    // [144] renderBobCleanup::screen#0[$29] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #$29
    sta (screen),y
    // [145] renderBobCleanup::screen#0[$51] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #$51
    sta (screen),y
    // [146] renderBobCleanup::screen#0[2] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #2
    sta (screen),y
    // [147] renderBobCleanup::screen#0[$2a] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #$2a
    sta (screen),y
    // [148] renderBobCleanup::screen#0[$52] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    lda #0
    ldy #$52
    sta (screen),y
    // [149] renderBobCleanup::i#1 = ++ renderBobCleanup::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [150] if(renderBobCleanup::i#1!=NUM_BOBS-1+1) goto renderBobCleanup::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_BOBS-1+1
    bne __b1_from___b1
    jmp __breturn
    // renderBobCleanup::@return
  __breturn:
    // [151] return 
    rts
}
  // mulf8s
// Fast multiply two signed chars to a unsigned int result
// mulf8s(signed byte register(A) a, signed byte register(X) b)
mulf8s: {
    .label return = $a
    jmp mulf8s_prepare1
    // mulf8s::mulf8s_prepare1
  mulf8s_prepare1:
    // [153] mulf8u_prepare::a#0 = (byte)mulf8s::mulf8s_prepare1_a#0
    // [154] call mulf8u_prepare 
    jsr mulf8u_prepare
    jmp __b1
    // mulf8s::@1
  __b1:
    // [155] mulf8s_prepared::b#0 = mulf8s::b#2 -- vbsz1=vbsxx 
    stx.z mulf8s_prepared.b
    // [156] call mulf8s_prepared 
    jsr mulf8s_prepared
    jmp __b2
    // mulf8s::@2
  __b2:
    // [157] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4
    jmp __breturn
    // mulf8s::@return
  __breturn:
    // [158] return 
    rts
}
  // renderBob
// Render a single BOB at a given x/y-position
// X-position is 0-151. Each x-position is 2 pixels wide.
// Y-position is 0-183. Each y-position is 1 pixel high.
// renderBob(byte zp($e) xpos, byte zp($f) ypos)
renderBob: {
    .label __2 = $13
    .label __5 = $15
    .label xpos = $e
    .label ypos = $f
    .label y_offset = $13
    .label screen = $13
    // [159] renderBob::x_char_offset#0 = renderBob::xpos#0 >> 2 -- vbuxx=vbuz1_ror_2 
    lda.z xpos
    lsr
    lsr
    tax
    // [160] renderBob::y_char_offset#0 = renderBob::ypos#0 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z ypos
    lsr
    lsr
    lsr
    // [161] renderBob::$8 = renderBob::y_char_offset#0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [162] renderBob::y_offset#0 = MUL40[renderBob::$8] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda MUL40,y
    sta.z y_offset
    lda MUL40+1,y
    sta.z y_offset+1
    // [163] renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __2
    adc #<BOB_SCREEN
    sta.z __2
    lda.z __2+1
    adc #>BOB_SCREEN
    sta.z __2+1
    // [164] renderBob::screen#0 = renderBob::$2 + renderBob::x_char_offset#0 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [165] renderBob::$4 = renderBob::ypos#0 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z ypos
    // [166] renderBob::$5 = renderBob::$4 << 2 -- vbuz1=vbuaa_rol_2 
    asl
    asl
    sta.z __5
    // [167] renderBob::$6 = renderBob::xpos#0 & 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z xpos
    // [168] renderBob::bob_table_idx#0 = renderBob::$5 + renderBob::$6 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z __5
    tax
    // [169] *renderBobCleanupNext#19 = renderBob::screen#0 -- _deref_qbuz1=pbuz2 
    ldy #0
    lda.z screen
    sta (renderBobCleanupNext),y
    iny
    lda.z screen+1
    sta (renderBobCleanupNext),y
    // [170] renderBobCleanupNext#14 = renderBobCleanupNext#19 + SIZEOF_POINTER -- qbuz1=qbuz1_plus_vbuc1 
    lda #SIZEOF_POINTER
    clc
    adc.z renderBobCleanupNext
    sta.z renderBobCleanupNext
    bcc !+
    inc.z renderBobCleanupNext+1
  !:
    // [171] *renderBob::screen#0 = BOB_TABLES[renderBob::bob_table_idx#0] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda BOB_TABLES,x
    ldy #0
    sta (screen),y
    // [172] renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+1*BOB_SUBTABLE_SIZE,x
    ldy #$28
    sta (screen),y
    // [173] renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+2*BOB_SUBTABLE_SIZE,x
    ldy #$50
    sta (screen),y
    // [174] renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+3*BOB_SUBTABLE_SIZE,x
    ldy #1
    sta (screen),y
    // [175] renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+4*BOB_SUBTABLE_SIZE,x
    ldy #$29
    sta (screen),y
    // [176] renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+5*BOB_SUBTABLE_SIZE,x
    ldy #$51
    sta (screen),y
    // [177] renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+6*BOB_SUBTABLE_SIZE,x
    ldy #2
    sta (screen),y
    // [178] renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+7*BOB_SUBTABLE_SIZE,x
    ldy #$2a
    sta (screen),y
    // [179] renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+8*BOB_SUBTABLE_SIZE,x
    ldy #$52
    sta (screen),y
    jmp __breturn
    // renderBob::@return
  __breturn:
    // [180] return 
    rts
}
  // keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
keyboard_key_pressed: {
    .const colidx = KEY_SPACE&7
    .label rowidx = KEY_SPACE>>3
    // [182] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [183] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
    jmp __b1
    // keyboard_key_pressed::@1
  __b1:
    // [184] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
    // [185] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & *(keyboard_matrix_col_bitmask+keyboard_key_pressed::colidx#0) -- vbuaa=vbuaa_band__deref_pbuc1 
    and keyboard_matrix_col_bitmask+colidx
    jmp __breturn
    // keyboard_key_pressed::@return
  __breturn:
    // [186] return 
    rts
}
  // bobCharsetFindOrAddGlyph
// Looks through BOB_CHARSET to find the passed bob glyph if present.
// If not present it is added
// Returns the glyph ID
// bobCharsetFindOrAddGlyph(byte* zp($13) bob_glyph)
bobCharsetFindOrAddGlyph: {
    .label bob_glyph = $13
    .label glyph_cursor = $a
    // [188] phi from bobCharsetFindOrAddGlyph to bobCharsetFindOrAddGlyph::@1 [phi:bobCharsetFindOrAddGlyph->bobCharsetFindOrAddGlyph::@1]
  __b1_from_bobCharsetFindOrAddGlyph:
    // [188] phi bobCharsetFindOrAddGlyph::glyph_cursor#11 = BOB_CHARSET [phi:bobCharsetFindOrAddGlyph->bobCharsetFindOrAddGlyph::@1#0] -- pbuz1=pbuc1 
    lda #<BOB_CHARSET
    sta.z glyph_cursor
    lda #>BOB_CHARSET
    sta.z glyph_cursor+1
    // [188] phi bobCharsetFindOrAddGlyph::glyph_id#11 = 0 [phi:bobCharsetFindOrAddGlyph->bobCharsetFindOrAddGlyph::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // bobCharsetFindOrAddGlyph::@1
  __b1:
    // [189] if(bobCharsetFindOrAddGlyph::glyph_id#11!=bob_charset_next_id#25) goto bobCharsetFindOrAddGlyph::@2 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z bob_charset_next_id
    bne __b2_from___b1
    // [190] phi from bobCharsetFindOrAddGlyph::@1 to bobCharsetFindOrAddGlyph::@7 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@7]
  __b7_from___b1:
    // [190] phi bobCharsetFindOrAddGlyph::i1#2 = 0 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@7#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b7
  // Not found - add it
    // bobCharsetFindOrAddGlyph::@7
  __b7:
    // [191] if(bobCharsetFindOrAddGlyph::i1#2<8) goto bobCharsetFindOrAddGlyph::@8 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b8
    jmp __b9
    // bobCharsetFindOrAddGlyph::@9
  __b9:
    // [192] bob_charset_next_id#7 = ++ bob_charset_next_id#25 -- vbuz1=_inc_vbuz1 
    inc.z bob_charset_next_id
    // [193] phi from bobCharsetFindOrAddGlyph::@5 bobCharsetFindOrAddGlyph::@9 to bobCharsetFindOrAddGlyph::@return [phi:bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::@9->bobCharsetFindOrAddGlyph::@return]
  __breturn_from___b5:
  __breturn_from___b9:
    // [193] phi bob_charset_next_id#17 = bob_charset_next_id#25 [phi:bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::@9->bobCharsetFindOrAddGlyph::@return#0] -- register_copy 
    jmp __breturn
    // bobCharsetFindOrAddGlyph::@return
  __breturn:
    // [194] return 
    rts
    // bobCharsetFindOrAddGlyph::@8
  __b8:
    // [195] bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i1#2] = bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i1#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (bob_glyph),y
    sta (glyph_cursor),y
    // [196] bobCharsetFindOrAddGlyph::i1#1 = ++ bobCharsetFindOrAddGlyph::i1#2 -- vbuyy=_inc_vbuyy 
    iny
    // [190] phi from bobCharsetFindOrAddGlyph::@8 to bobCharsetFindOrAddGlyph::@7 [phi:bobCharsetFindOrAddGlyph::@8->bobCharsetFindOrAddGlyph::@7]
  __b7_from___b8:
    // [190] phi bobCharsetFindOrAddGlyph::i1#2 = bobCharsetFindOrAddGlyph::i1#1 [phi:bobCharsetFindOrAddGlyph::@8->bobCharsetFindOrAddGlyph::@7#0] -- register_copy 
    jmp __b7
    // [197] phi from bobCharsetFindOrAddGlyph::@1 to bobCharsetFindOrAddGlyph::@2 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@2]
  __b2_from___b1:
    // [197] phi bobCharsetFindOrAddGlyph::i#2 = 0 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // bobCharsetFindOrAddGlyph::@2
  __b2:
    // [198] if(bobCharsetFindOrAddGlyph::i#2<8) goto bobCharsetFindOrAddGlyph::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b3
    // [200] phi from bobCharsetFindOrAddGlyph::@2 to bobCharsetFindOrAddGlyph::@5 [phi:bobCharsetFindOrAddGlyph::@2->bobCharsetFindOrAddGlyph::@5]
  __b5_from___b2:
    // [200] phi bobCharsetFindOrAddGlyph::found#2 = 1 [phi:bobCharsetFindOrAddGlyph::@2->bobCharsetFindOrAddGlyph::@5#0] -- vbuaa=vbuc1 
    lda #1
    jmp __b5
    // bobCharsetFindOrAddGlyph::@3
  __b3:
    // [199] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@4 -- pbuz1_derefidx_vbuyy_eq_pbuz2_derefidx_vbuyy_then_la1 
    lda (glyph_cursor),y
    cmp (bob_glyph),y
    beq __b4
    // [200] phi from bobCharsetFindOrAddGlyph::@3 to bobCharsetFindOrAddGlyph::@5 [phi:bobCharsetFindOrAddGlyph::@3->bobCharsetFindOrAddGlyph::@5]
  __b5_from___b3:
    // [200] phi bobCharsetFindOrAddGlyph::found#2 = 0 [phi:bobCharsetFindOrAddGlyph::@3->bobCharsetFindOrAddGlyph::@5#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b5
    // bobCharsetFindOrAddGlyph::@5
  __b5:
    // [201] if(0==bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@6 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b6
    jmp __breturn_from___b5
    // bobCharsetFindOrAddGlyph::@6
  __b6:
    // [202] bobCharsetFindOrAddGlyph::glyph_id#1 = ++ bobCharsetFindOrAddGlyph::glyph_id#11 -- vbuxx=_inc_vbuxx 
    inx
    // [203] bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#11 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z glyph_cursor
    sta.z glyph_cursor
    bcc !+
    inc.z glyph_cursor+1
  !:
    // [188] phi from bobCharsetFindOrAddGlyph::@6 to bobCharsetFindOrAddGlyph::@1 [phi:bobCharsetFindOrAddGlyph::@6->bobCharsetFindOrAddGlyph::@1]
  __b1_from___b6:
    // [188] phi bobCharsetFindOrAddGlyph::glyph_cursor#11 = bobCharsetFindOrAddGlyph::glyph_cursor#1 [phi:bobCharsetFindOrAddGlyph::@6->bobCharsetFindOrAddGlyph::@1#0] -- register_copy 
    // [188] phi bobCharsetFindOrAddGlyph::glyph_id#11 = bobCharsetFindOrAddGlyph::glyph_id#1 [phi:bobCharsetFindOrAddGlyph::@6->bobCharsetFindOrAddGlyph::@1#1] -- register_copy 
    jmp __b1
    // bobCharsetFindOrAddGlyph::@4
  __b4:
    // [204] bobCharsetFindOrAddGlyph::i#1 = ++ bobCharsetFindOrAddGlyph::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [197] phi from bobCharsetFindOrAddGlyph::@4 to bobCharsetFindOrAddGlyph::@2 [phi:bobCharsetFindOrAddGlyph::@4->bobCharsetFindOrAddGlyph::@2]
  __b2_from___b4:
    // [197] phi bobCharsetFindOrAddGlyph::i#2 = bobCharsetFindOrAddGlyph::i#1 [phi:bobCharsetFindOrAddGlyph::@4->bobCharsetFindOrAddGlyph::@2#0] -- register_copy 
    jmp __b2
}
  // shiftProtoBobDown
// Shift PROTO_BOB down one Y pixel
// At the same time restore PROTO_BOB X by shifting 8 pixels left
shiftProtoBobDown: {
    // [206] phi from shiftProtoBobDown to shiftProtoBobDown::@1 [phi:shiftProtoBobDown->shiftProtoBobDown::@1]
  __b1_from_shiftProtoBobDown:
    // [206] phi shiftProtoBobDown::i#2 = $17 [phi:shiftProtoBobDown->shiftProtoBobDown::@1#0] -- vbuxx=vbuc1 
    ldx #$17
    jmp __b1
    // shiftProtoBobDown::@1
  __b1:
    // [207] if(shiftProtoBobDown::i#2>0) goto shiftProtoBobDown::@2 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne __b2
    jmp __b3
    // shiftProtoBobDown::@3
  __b3:
    // [208] *PROTO_BOB = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PROTO_BOB
    // [209] *(PROTO_BOB+$18) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PROTO_BOB+$18
    // [210] *(PROTO_BOB+$30) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PROTO_BOB+$30
    jmp __breturn
    // shiftProtoBobDown::@return
  __breturn:
    // [211] return 
    rts
    // shiftProtoBobDown::@2
  __b2:
    // [212] PROTO_BOB[shiftProtoBobDown::i#2] = (PROTO_BOB+$17)[shiftProtoBobDown::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PROTO_BOB+$17,x
    sta PROTO_BOB,x
    // [213] (PROTO_BOB+$18)[shiftProtoBobDown::i#2] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PROTO_BOB+$2f,x
    sta PROTO_BOB+$18,x
    // [214] (PROTO_BOB+$30)[shiftProtoBobDown::i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROTO_BOB+$30,x
    // [215] shiftProtoBobDown::i#1 = -- shiftProtoBobDown::i#2 -- vbuxx=_dec_vbuxx 
    dex
    // [206] phi from shiftProtoBobDown::@2 to shiftProtoBobDown::@1 [phi:shiftProtoBobDown::@2->shiftProtoBobDown::@1]
  __b1_from___b2:
    // [206] phi shiftProtoBobDown::i#2 = shiftProtoBobDown::i#1 [phi:shiftProtoBobDown::@2->shiftProtoBobDown::@1#0] -- register_copy 
    jmp __b1
}
  // shiftProtoBobRight
// Shift PROTO_BOB right one X pixel
shiftProtoBobRight: {
    .label carry = $15
    .label i = $12
    // [217] phi from shiftProtoBobRight to shiftProtoBobRight::@1 [phi:shiftProtoBobRight->shiftProtoBobRight::@1]
  __b1_from_shiftProtoBobRight:
    // [217] phi shiftProtoBobRight::carry#2 = 0 [phi:shiftProtoBobRight->shiftProtoBobRight::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [217] phi shiftProtoBobRight::j#3 = 0 [phi:shiftProtoBobRight->shiftProtoBobRight::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [217] phi shiftProtoBobRight::i#2 = 0 [phi:shiftProtoBobRight->shiftProtoBobRight::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // shiftProtoBobRight::@1
  __b1:
    // [218] if(shiftProtoBobRight::i#2<3*3*8) goto shiftProtoBobRight::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #3*3*8
    bcc __b2
    jmp __breturn
    // shiftProtoBobRight::@return
  __breturn:
    // [219] return 
    rts
    // shiftProtoBobRight::@2
  __b2:
    // [220] shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1 -- vbuaa=pbuc1_derefidx_vbuxx_band_vbuc2 
    lda #1
    and PROTO_BOB,x
    // [221] if(0!=shiftProtoBobRight::$1) goto shiftProtoBobRight::@3 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b3_from___b2
    // [223] phi from shiftProtoBobRight::@2 to shiftProtoBobRight::@4 [phi:shiftProtoBobRight::@2->shiftProtoBobRight::@4]
  __b4_from___b2:
    // [223] phi shiftProtoBobRight::carry#1 = 0 [phi:shiftProtoBobRight::@2->shiftProtoBobRight::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z carry
    jmp __b4
    // [222] phi from shiftProtoBobRight::@2 to shiftProtoBobRight::@3 [phi:shiftProtoBobRight::@2->shiftProtoBobRight::@3]
  __b3_from___b2:
    jmp __b3
    // shiftProtoBobRight::@3
  __b3:
    // [223] phi from shiftProtoBobRight::@3 to shiftProtoBobRight::@4 [phi:shiftProtoBobRight::@3->shiftProtoBobRight::@4]
  __b4_from___b3:
    // [223] phi shiftProtoBobRight::carry#1 = $80 [phi:shiftProtoBobRight::@3->shiftProtoBobRight::@4#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z carry
    jmp __b4
    // shiftProtoBobRight::@4
  __b4:
    // [224] shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#3] >> 1 -- vbuaa=pbuc1_derefidx_vbuxx_ror_1 
    lda PROTO_BOB,x
    lsr
    // [225] shiftProtoBobRight::$6 = shiftProtoBobRight::carry#2 | shiftProtoBobRight::$5 -- vbuaa=vbuyy_bor_vbuaa 
    sty.z $ff
    ora.z $ff
    // [226] PROTO_BOB[shiftProtoBobRight::j#3] = shiftProtoBobRight::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    // Shift value and add old carry
    sta PROTO_BOB,x
    // [227] if(shiftProtoBobRight::j#3>=$30) goto shiftProtoBobRight::@5 -- vbuxx_ge_vbuc1_then_la1 
    // Increment j to iterate over the PROTO_BOB left-to-right, top-to-bottom (0, 24, 48, 1, 25, 49, ...)
    cpx #$30
    bcs __b5
    jmp __b7
    // shiftProtoBobRight::@7
  __b7:
    // [228] shiftProtoBobRight::j#2 = shiftProtoBobRight::j#3 + $18 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$18]
    // [229] phi from shiftProtoBobRight::@5 shiftProtoBobRight::@7 to shiftProtoBobRight::@6 [phi:shiftProtoBobRight::@5/shiftProtoBobRight::@7->shiftProtoBobRight::@6]
  __b6_from___b5:
  __b6_from___b7:
    // [229] phi shiftProtoBobRight::j#10 = shiftProtoBobRight::j#1 [phi:shiftProtoBobRight::@5/shiftProtoBobRight::@7->shiftProtoBobRight::@6#0] -- register_copy 
    jmp __b6
    // shiftProtoBobRight::@6
  __b6:
    // [230] shiftProtoBobRight::i#1 = ++ shiftProtoBobRight::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [231] shiftProtoBobRight::carry#10 = shiftProtoBobRight::carry#1 -- vbuyy=vbuz1 
    ldy.z carry
    // [217] phi from shiftProtoBobRight::@6 to shiftProtoBobRight::@1 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1]
  __b1_from___b6:
    // [217] phi shiftProtoBobRight::carry#2 = shiftProtoBobRight::carry#10 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1#0] -- register_copy 
    // [217] phi shiftProtoBobRight::j#3 = shiftProtoBobRight::j#10 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1#1] -- register_copy 
    // [217] phi shiftProtoBobRight::i#2 = shiftProtoBobRight::i#1 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1#2] -- register_copy 
    jmp __b1
    // shiftProtoBobRight::@5
  __b5:
    // [232] shiftProtoBobRight::j#1 = shiftProtoBobRight::j#3 - $2f -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$2f
    jmp __b6_from___b5
}
  // progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
    // [233] progress_idx#7 = ++ progress_idx#27 -- vbuz1=_inc_vbuz1 
    inc.z progress_idx
    // [234] if(progress_idx#7!=8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z progress_idx
    bne __b1_from_progress_inc
    jmp __b2
    // progress_inc::@2
  __b2:
    // [235] *progress_cursor#26 = *(progress_inc::progress_chars+8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
    // [236] progress_cursor#7 = ++ progress_cursor#26 -- pbuz1=_inc_pbuz1 
    inc.z progress_cursor
    bne !+
    inc.z progress_cursor+1
  !:
    // [237] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
  __b1_from___b2:
    // [237] phi progress_cursor#18 = progress_cursor#7 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
    // [237] phi progress_idx#20 = 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z progress_idx
    jmp __b1
    // [237] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
  __b1_from_progress_inc:
    // [237] phi progress_cursor#18 = progress_cursor#26 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
    // [237] phi progress_idx#20 = progress_idx#7 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    jmp __b1
    // progress_inc::@1
  __b1:
    // [238] *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20] -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    jmp __breturn
    // progress_inc::@return
  __breturn:
    // [239] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // [240] *mulf8u_prepare::memA = mulf8u_prepare::a#0 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp __breturn
    // mulf8u_prepare::@return
  __breturn:
    // [242] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte zp($12) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = $a
    .label b = $12
    // [243] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#0 -- vbuaa=vbuz1 
    lda.z b
    // [244] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [245] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
    jmp __b5
    // mulf8s_prepared::@5
  __b5:
    // [246] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
    // [247] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1_from___b5
    jmp __b3
    // mulf8s_prepared::@3
  __b3:
    // [248] mulf8s_prepared::$6 = > mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [249] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0 -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc.z b
    // [250] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [251] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [251] phi mulf8s_prepared::m#5 = mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    jmp __b1
    // mulf8s_prepared::@1
  __b1:
    // [252] if(mulf8s_prepared::b#0>=0) goto mulf8s_prepared::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2_from___b1
    jmp __b4
    // mulf8s_prepared::@4
  __b4:
    // [253] mulf8s_prepared::$9 = > mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [254] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [255] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [256] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [256] phi mulf8s_prepared::m#4 = mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp __b2
    // mulf8s_prepared::@2
  __b2:
    jmp __breturn
    // mulf8s_prepared::@return
  __breturn:
    // [257] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
keyboard_matrix_read: {
    // [258] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0) -- _deref_pbuc1=_deref_pbuc2 
    lda keyboard_matrix_row_bitmask+keyboard_key_pressed.rowidx
    sta CIA1
    // [259] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [260] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $a
    // [261] *mulf8u_prepared::memB = mulf8u_prepared::b#0 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // [263] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    jmp __breturn
    // mulf8u_prepared::@return
  __breturn:
    // [264] return 
    rts
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // The prototype BOB (a 3x3 char image with a bob image in the upper 2x2 chars)
  // The chars are layout as follows with data in chars 0, 1, 3, 4 initially
  //   0 3 6
  //   1 4 7
  //   2 5 8
PROTO_BOB:
.var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)

  // Sine and Cosine tables
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))

  // Tables containing the char to use for a specific cell of a shifted BOB.
  // char_id = BOB_TABLES[cell*BOB_SUBTABLE_SIZE + shift_y*BOB_SHIFTS_X + shift_x];
  BOB_TABLES: .fill 9*8*4, 0
  // Table used for deleting rendered BOB's. Contains pointers to first char of each BOB.
  RENDERBOB_CLEANUP: .fill 2*NUM_BOBS, 0
  // *40 Table unsigned int[0x20] MUL40 = { ((unsigned int)i)*40 };
  MUL40: .fill 2*$20, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1___b1
Removing instruction jmp toD0181
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b11
Removing instruction jmp __b4
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp vicSelectGfxBank2
Removing instruction jmp vicSelectGfxBank2_toDd001
Removing instruction jmp vicSelectGfxBank2___b1
Removing instruction jmp toD0182
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp mulf8s_prepare1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b7
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda #0 with TXA
Removing instruction lda memA
Replacing instruction ldx memB with TAX
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b14 with __b4
Replacing label __b6_from___b15 with __b6
Replacing label __b1 with __b2
Replacing label __b6_from___b16 with __b6
Replacing label __b9_from___b6 with __b8
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __breturn_from___b5 with __breturn
Replacing label __b3_from___b2 with __b3
Replacing label __b6_from___b5 with __b6
Replacing label __b1_from_progress_inc with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Removing instruction __b9_from_main:
Removing instruction prepareBobs_from___b9:
Removing instruction __b10_from___b9:
Removing instruction renderBobInit_from___b10:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_vicSelectGfxBank1___b1:
Removing instruction toD0181:
Removing instruction __b1:
Removing instruction __b4_from___b14:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b16:
Removing instruction keyboard_key_pressed_from___b6:
Removing instruction vicSelectGfxBank2_toDd001_from_vicSelectGfxBank2:
Removing instruction vicSelectGfxBank2_toDd001:
Removing instruction toD0182_from_vicSelectGfxBank2___b1:
Removing instruction toD0182:
Removing instruction __b9_from___b6:
Removing instruction __b9:
Removing instruction __b8_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b8_from_prepareBobs:
Removing instruction __b4_from___b2:
Removing instruction __b12_from___b7:
Removing instruction shiftProtoBobRight_from___b12:
Removing instruction bobCharsetFindOrAddGlyph_from___b6:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b1:
Removing instruction __breturn:
Removing instruction __breturn_from___b5:
Removing instruction __breturn_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __b6_from___b5:
Removing instruction __b6_from___b7:
Removing instruction __b1_from_progress_inc:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction mulf_init_from_main:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1___b1:
Removing instruction __b7:
Removing instruction memset_from___b7:
Removing instruction __b1_from___b7:
Removing instruction __b3:
Removing instruction renderBobCleanup_from___b3:
Removing instruction __b11:
Removing instruction __b4_from___b11:
Removing instruction mulf8s_from___b4:
Removing instruction __b12:
Removing instruction mulf8s_from___b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b5:
Removing instruction keyboard_key_pressed_from___b5:
Removing instruction __b15:
Removing instruction __b1_from___b15:
Removing instruction __b16:
Removing instruction vicSelectGfxBank2:
Removing instruction vicSelectGfxBank2___b1:
Removing instruction __b8:
Removing instruction __breturn:
Removing instruction __b1_from_mulf_init:
Removing instruction __b5_from___b1:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b8_from___b6:
Removing instruction __b5_from___b8:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b8:
Removing instruction bobCharsetFindOrAddGlyph_from___b8:
Removing instruction __b1_from___b8:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction shiftProtoBobDown_from___b4:
Removing instruction __b9:
Removing instruction __b1_from___b9:
Removing instruction __b5_from___b3:
Removing instruction __b7:
Removing instruction shiftProtoBobRight_from___b7:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b2_from___b13:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b5_from___b11:
Removing instruction __b1_from_renderBobInit:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_renderBobCleanup:
Removing instruction __breturn:
Removing instruction mulf8s_prepare1:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_bobCharsetFindOrAddGlyph:
Removing instruction __b7_from___b1:
Removing instruction __b9:
Removing instruction __b7_from___b8:
Removing instruction __b5_from___b2:
Removing instruction __b5_from___b3:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_shiftProtoBobDown:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_shiftProtoBobRight:
Removing instruction __breturn:
Removing instruction __b4_from___b2:
Removing instruction __b7:
Removing instruction __b1_from___b6:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b2_from___b1 to __b4
Relabelling long label __b2_from___b1 to __b9
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b4
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* BOB_CHARSET = (byte*) 8192
const nomodify byte* BOB_SCREEN = (byte*) 10240
const nomodify byte BOB_SHIFTS_X = 4
const nomodify byte BOB_SHIFTS_Y = 8
const nomodify byte BOB_SUBTABLE_SIZE = BOB_SHIFTS_X*BOB_SHIFTS_Y
const byte* BOB_TABLES[9*8*4]  = { fill( 9*8*4, 0) }
const nomodify byte* BORDER_COLOR = (byte*) 53280
const nomodify byte* CHARSET_BASIC = (byte*) 4096
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const signed byte* COS = SIN+$40
const nomodify byte* D018 = (byte*) 53272
const nomodify byte KEY_SPACE = $3c
const word* MUL40[$20]  = { fill( $20, 0) }
const nomodify byte NUM_BOBS = $14
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const to_nomodify byte* PROTO_BOB[3*3*8]  = kickasm {{ .var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* RASTER = (byte*) 53266
const byte** RENDERBOB_CLEANUP[NUM_BOBS]  = { fill( NUM_BOBS, 0) }
const nomodify byte* SCREEN_BASIC = (byte*) 1024
const signed byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
const byte SIZEOF_POINTER = 2
byte bobCharsetFindOrAddGlyph(byte* bobCharsetFindOrAddGlyph::bob_glyph)
byte* bobCharsetFindOrAddGlyph::bob_glyph
byte* bobCharsetFindOrAddGlyph::bob_glyph#1 bob_glyph zp[2]:19 20002.0
byte* bobCharsetFindOrAddGlyph::bob_glyph#10 bob_glyph zp[2]:19 7.333340002E8
byte bobCharsetFindOrAddGlyph::found
byte bobCharsetFindOrAddGlyph::found#2 reg byte a 1.000000001E9
byte* bobCharsetFindOrAddGlyph::glyph_cursor
byte* bobCharsetFindOrAddGlyph::glyph_cursor#1 glyph_cursor zp[2]:10 2.000000002E9
byte* bobCharsetFindOrAddGlyph::glyph_cursor#11 glyph_cursor zp[2]:10 1.0000000003076923E9
byte bobCharsetFindOrAddGlyph::glyph_id
byte bobCharsetFindOrAddGlyph::glyph_id#1 reg byte x 1.000000001E9
byte bobCharsetFindOrAddGlyph::glyph_id#11 reg byte x 1.8750062525E8
byte bobCharsetFindOrAddGlyph::i
byte bobCharsetFindOrAddGlyph::i#1 reg byte y 2.0000000002E10
byte bobCharsetFindOrAddGlyph::i#2 reg byte y 1.6666666668333332E10
byte bobCharsetFindOrAddGlyph::i1
byte bobCharsetFindOrAddGlyph::i1#1 reg byte y 2.000000002E9
byte bobCharsetFindOrAddGlyph::i1#2 reg byte y 1.6666666683333335E9
byte bobCharsetFindOrAddGlyph::return
byte bobCharsetFindOrAddGlyph::return#1 reg byte a 20002.0
byte bob_charset_next_id
byte bob_charset_next_id#15 bob_charset_next_id zp[1]:9 106.5
byte bob_charset_next_id#17 bob_charset_next_id zp[1]:9 9.091909218181819E7
byte bob_charset_next_id#23 bob_charset_next_id zp[1]:9 2750.5
byte bob_charset_next_id#25 bob_charset_next_id zp[1]:9 1.3334066693333334E8
byte bob_charset_next_id#32 bob_charset_next_id zp[1]:9 367.33333333333337
byte bob_charset_next_id#7 bob_charset_next_id zp[1]:9 200002.0
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 reg byte a 202.0
byte keyboard_key_pressed::colidx
const byte keyboard_key_pressed::colidx#0 colidx = KEY_SPACE&7
byte keyboard_key_pressed::key
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 reg byte a 30.75
byte keyboard_key_pressed::return#2 reg byte a 22.0
byte keyboard_key_pressed::return#3 reg byte a 22.0
byte keyboard_key_pressed::rowidx
const byte keyboard_key_pressed::rowidx#0 rowidx = KEY_SPACE>>3
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 367.33333333333337
byte keyboard_matrix_read::return#2 reg byte a 202.0
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
signed word~ main::$10 zp[2]:10 202.0
signed word~ main::$12 zp[2]:10 202.0
signed word~ main::$13 zp[2]:10 202.0
byte~ main::$19 reg byte a 22.0
byte~ main::$21 reg byte a 22.0
byte main::a
byte main::a#1 a zp[1]:2 28.857142857142858
byte main::a#2 a zp[1]:2 25.9375
byte main::a#6 a zp[1]:2 22.0
byte main::angle
byte main::angle#1 angle zp[1]:5 3.6666666666666665
byte main::angle#8 angle zp[1]:5 1.1785714285714286
byte main::i
byte main::i#1 i zp[1]:3 151.5
byte main::i#2 i zp[1]:3 9.619047619047619
signed byte main::r
signed byte main::r#1 r zp[1]:9 33.666666666666664
signed byte main::r#2 r zp[1]:9 23.764705882352942
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)BOB_SCREEN&$3fff*4|>(word)BOB_CHARSET/4&$f
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
const byte main::toD0182_return#0 toD0182_return = >(word)SCREEN_BASIC&$3fff*4|>(word)CHARSET_BASIC/4&$f
byte* main::toD0182_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
const byte main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = 3
byte* main::vicSelectGfxBank2_gfx
byte* main::vicSelectGfxBank2_toDd001_gfx
byte main::vicSelectGfxBank2_toDd001_return
const byte main::vicSelectGfxBank2_toDd001_return#0 vicSelectGfxBank2_toDd001_return = 3
signed word main::x
signed word main::x#0 x zp[2]:12 18.363636363636363
signed word main::y
signed word main::y#0 y zp[2]:10 40.4
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = 0
byte* memset::dst
byte* memset::dst#1 dst zp[2]:10 202.0
byte* memset::dst#2 dst zp[2]:10 134.66666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)BOB_SCREEN
signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
signed byte mulf8s::a
signed byte mulf8s::a#0 reg byte a 101.0
signed byte mulf8s::a#1 reg byte a 101.0
signed byte mulf8s::b
signed byte mulf8s::b#0 reg byte x 202.0
signed byte mulf8s::b#1 reg byte x 202.0
signed byte mulf8s::b#2 reg byte x 401.0
signed byte mulf8s::mulf8s_prepare1_a
signed byte mulf8s::mulf8s_prepare1_a#0 reg byte a 202.0
signed word mulf8s::return
signed word mulf8s::return#0 return zp[2]:10 300.75
signed word mulf8s::return#2 return zp[2]:10 202.0
signed word mulf8s::return#3 return zp[2]:10 202.0
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 reg byte a 20002.0
byte~ mulf8s_prepared::$12 reg byte a 20002.0
byte~ mulf8s_prepared::$6 reg byte a 20002.0
byte~ mulf8s_prepared::$9 reg byte a 20002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 b zp[1]:18 1100.2
word mulf8s_prepared::m
word mulf8s_prepared::m#0 m zp[2]:10 10001.0
word mulf8s_prepared::m#1 m zp[2]:10 20002.0
word mulf8s_prepared::m#2 m zp[2]:10 20002.0
word mulf8s_prepared::m#4 m zp[2]:10 6667.333333333333
word mulf8s_prepared::m#5 m zp[2]:10 12501.25
const nomodify signed byte* mulf8s_prepared::memA = (signed byte*) 253
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#0 reg byte a 11002.0
const nomodify byte* mulf8u_prepare::memA = (byte*) 253
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 reg byte a 110002.0
const nomodify byte* mulf8u_prepared::memB = (byte*) 255
const nomodify byte* mulf8u_prepared::resL = (byte*) 254
word mulf8u_prepared::return
word mulf8u_prepared::return#0 return zp[2]:10 36667.33333333333
word mulf8u_prepared::return#2 return zp[2]:10 20002.0
void mulf_init()
byte~ mulf_init::$1 reg byte a 202.0
byte~ mulf_init::$4 reg byte a 202.0
byte~ mulf_init::$5 reg byte a 202.0
byte mulf_init::c
byte mulf_init::c#1 c zp[1]:4 23.307692307692307
byte mulf_init::c#2 c zp[1]:4 101.0
byte mulf_init::dir
byte mulf_init::dir#2 dir zp[1]:6 37.875
byte mulf_init::dir#4 dir zp[1]:6 101.0
word mulf_init::sqr
word mulf_init::sqr#1 sqr zp[2]:10 101.0
word mulf_init::sqr#2 sqr zp[2]:10 202.0
word mulf_init::sqr#3 sqr zp[2]:10 84.16666666666666
word mulf_init::sqr#4 sqr zp[2]:10 50.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 sqr1_hi zp[2]:12 67.33333333333333
byte* mulf_init::sqr1_hi#2 sqr1_hi zp[2]:12 25.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 sqr1_lo zp[2]:16 202.0
byte* mulf_init::sqr1_lo#2 sqr1_lo zp[2]:16 28.857142857142858
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 sqr2_hi zp[2]:7 33.666666666666664
byte* mulf_init::sqr2_hi#2 sqr2_hi zp[2]:7 75.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 sqr2_lo zp[2]:19 202.0
byte* mulf_init::sqr2_lo#2 sqr2_lo zp[2]:19 44.888888888888886
byte mulf_init::x_2
byte mulf_init::x_2#1 reg byte x 101.0
byte mulf_init::x_2#2 reg byte x 50.5
byte mulf_init::x_2#3 reg byte x 60.599999999999994
byte mulf_init::x_255
byte mulf_init::x_255#1 reg byte x 60.599999999999994
byte mulf_init::x_255#2 reg byte x 80.8
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void prepareBobs()
byte~ prepareBobs::$6 reg byte a 20002.0
byte* prepareBobs::bob_glyph
byte* prepareBobs::bob_glyph#1 bob_glyph zp[2]:19 5000.5
byte* prepareBobs::bob_glyph#2 bob_glyph zp[2]:19 4286.142857142857
byte* prepareBobs::bob_table
byte* prepareBobs::bob_table#0 bob_table zp[2]:7 2002.0
byte* prepareBobs::bob_table#1 bob_table zp[2]:7 6667.333333333333
byte* prepareBobs::bob_table#2 bob_table zp[2]:7 3875.5
byte prepareBobs::bob_table_idx
byte prepareBobs::bob_table_idx#1 bob_table_idx zp[1]:6 400.4
byte prepareBobs::bob_table_idx#12 bob_table_idx zp[1]:6 188.52941176470588
byte prepareBobs::bob_table_idx#7 bob_table_idx zp[1]:6 101.0
byte prepareBobs::cell
byte prepareBobs::cell#1 cell zp[1]:15 20002.0
byte prepareBobs::cell#2 cell zp[1]:15 3000.3
byte prepareBobs::shift_x
byte prepareBobs::shift_x#1 shift_x zp[1]:14 2002.0
byte prepareBobs::shift_x#2 shift_x zp[1]:14 166.83333333333334
byte prepareBobs::shift_y
byte prepareBobs::shift_y#1 shift_y zp[1]:4 202.0
byte prepareBobs::shift_y#2 shift_y zp[1]:4 13.173913043478262
byte* progress_cursor
byte* progress_cursor#16 progress_cursor zp[2]:12 101.0
byte* progress_cursor#18 progress_cursor zp[2]:12 62000.8
byte* progress_cursor#26 progress_cursor zp[2]:12 18353.294117647056
byte* progress_cursor#33 progress_cursor zp[2]:12 367.33333333333337
byte* progress_cursor#7 progress_cursor zp[2]:12 200002.0
byte progress_idx
byte progress_idx#17 progress_idx zp[1]:5 101.0
byte progress_idx#20 progress_idx zp[1]:5 42000.600000000006
byte progress_idx#27 progress_idx zp[1]:5 8000.285714285715
byte progress_idx#33 progress_idx zp[1]:5 367.33333333333337
byte progress_idx#7 progress_idx zp[1]:5 150001.5
void progress_inc()
const to_nomodify byte* progress_inc::progress_chars[]  = { $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0 }
void renderBob(byte renderBob::xpos , byte renderBob::ypos)
byte*~ renderBob::$2 zp[2]:19 2002.0
byte~ renderBob::$4 reg byte a 2002.0
byte~ renderBob::$5 zp[1]:21 1001.0
byte~ renderBob::$6 reg byte a 2002.0
byte~ renderBob::$8 reg byte a 2002.0
byte renderBob::bob_table_idx
byte renderBob::bob_table_idx#0 reg byte x 910.0
byte* renderBob::screen
byte* renderBob::screen#0 screen zp[2]:19 734.0666666666667
byte renderBob::x_char_offset
byte renderBob::x_char_offset#0 reg byte x 400.4
byte renderBob::xpos
byte renderBob::xpos#0 xpos zp[1]:14 210.29999999999998
byte renderBob::y_char_offset
byte renderBob::y_char_offset#0 reg byte a 2002.0
word renderBob::y_offset
word renderBob::y_offset#0 y_offset zp[2]:19 2002.0
byte renderBob::ypos
byte renderBob::ypos#0 ypos zp[1]:15 300.42857142857144
void renderBobCleanup()
byte~ renderBobCleanup::$1 reg byte a 20002.0
byte renderBobCleanup::i
byte renderBobCleanup::i#1 reg byte x 15001.5
byte renderBobCleanup::i#2 reg byte x 2500.25
byte* renderBobCleanup::screen
byte* renderBobCleanup::screen#0 screen zp[2]:16 11112.222222222224
byte** renderBobCleanupNext
byte** renderBobCleanupNext#14 renderBobCleanupNext zp[2]:16 78.71428571428571
byte** renderBobCleanupNext#19 renderBobCleanupNext zp[2]:16 67.83870967741936
void renderBobInit()
word~ renderBobInit::$0 zp[2]:16 101.0
byte~ renderBobInit::$3 reg byte a 202.0
byte~ renderBobInit::$4 reg byte a 202.0
word~ renderBobInit::$5 zp[2]:16 151.5
word~ renderBobInit::$6 zp[2]:19 202.0
word~ renderBobInit::$7 zp[2]:16 202.0
byte renderBobInit::i
byte renderBobInit::i#1 reg byte x 151.5
byte renderBobInit::i#2 reg byte x 101.0
byte renderBobInit::y
byte renderBobInit::y#1 reg byte x 151.5
byte renderBobInit::y#2 reg byte x 43.285714285714285
void shiftProtoBobDown()
byte shiftProtoBobDown::i
byte shiftProtoBobDown::i#1 reg byte x 200002.0
byte shiftProtoBobDown::i#2 reg byte x 160001.6
void shiftProtoBobRight()
byte~ shiftProtoBobRight::$1 reg byte a 2.0000002E7
byte~ shiftProtoBobRight::$5 reg byte a 2.0000002E7
byte~ shiftProtoBobRight::$6 reg byte a 2.0000002E7
byte shiftProtoBobRight::carry
byte shiftProtoBobRight::carry#1 carry zp[1]:21 1111111.2222222222
byte shiftProtoBobRight::carry#10 reg byte y 2.0000002E7
byte shiftProtoBobRight::carry#2 reg byte y 2857143.1428571427
byte shiftProtoBobRight::i
byte shiftProtoBobRight::i#1 i zp[1]:18 1.0000001E7
byte shiftProtoBobRight::i#2 i zp[1]:18 2307692.5384615385
byte shiftProtoBobRight::j
byte shiftProtoBobRight::j#1 reg byte x 2.0000002E7
byte shiftProtoBobRight::j#10 reg byte x 1.0000001E7
byte shiftProtoBobRight::j#2 reg byte x 2.0000002E7
byte shiftProtoBobRight::j#3 reg byte x 7000000.699999999
byte shiftProtoBobRight::new_carry

zp[1]:2 [ main::a#2 main::a#6 main::a#1 ]
zp[1]:3 [ main::i#2 main::i#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:4 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 mulf_init::c#2 mulf_init::c#1 ]
zp[1]:5 [ progress_idx#17 progress_idx#33 progress_idx#27 progress_idx#20 progress_idx#7 main::angle#8 main::angle#1 ]
zp[1]:6 [ prepareBobs::bob_table_idx#7 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 mulf_init::dir#2 mulf_init::dir#4 ]
zp[2]:7 [ prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
reg byte x [ renderBobInit::y#2 renderBobInit::y#1 ]
reg byte x [ renderBobInit::i#2 renderBobInit::i#1 ]
reg byte x [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
reg byte a [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
reg byte x [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
zp[1]:9 [ bob_charset_next_id#25 bob_charset_next_id#15 bob_charset_next_id#17 bob_charset_next_id#32 bob_charset_next_id#23 bob_charset_next_id#7 main::r#2 main::r#1 ]
reg byte x [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
reg byte y [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
reg byte y [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
reg byte a [ bobCharsetFindOrAddGlyph::found#2 ]
reg byte x [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
reg byte x [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#1 shiftProtoBobRight::j#2 ]
reg byte y [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
zp[2]:10 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 main::$13 main::y#0 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:12 [ main::x#0 progress_cursor#16 progress_cursor#33 progress_cursor#26 progress_cursor#18 progress_cursor#7 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
zp[1]:14 [ renderBob::xpos#0 prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
zp[1]:15 [ renderBob::ypos#0 prepareBobs::cell#2 prepareBobs::cell#1 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$19 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ main::$21 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ bobCharsetFindOrAddGlyph::return#1 ]
reg byte a [ prepareBobs::$6 ]
reg byte a [ renderBobInit::$3 ]
reg byte a [ renderBobInit::$4 ]
reg byte a [ renderBobCleanup::$1 ]
zp[2]:16 [ renderBobCleanup::screen#0 renderBobInit::$5 renderBobInit::$7 renderBobInit::$0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 renderBobCleanupNext#19 renderBobCleanupNext#14 ]
reg byte a [ mulf8u_prepare::a#0 ]
zp[1]:18 [ mulf8s_prepared::b#0 shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 ]
reg byte x [ renderBob::x_char_offset#0 ]
reg byte a [ renderBob::y_char_offset#0 ]
reg byte a [ renderBob::$8 ]
zp[2]:19 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 renderBobInit::$6 prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte a [ renderBob::$4 ]
zp[1]:21 [ renderBob::$5 shiftProtoBobRight::carry#1 ]
reg byte a [ renderBob::$6 ]
reg byte x [ renderBob::bob_table_idx#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ shiftProtoBobRight::$1 ]
reg byte a [ shiftProtoBobRight::$5 ]
reg byte a [ shiftProtoBobRight::$6 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ keyboard_matrix_read::return#0 ]


FINAL ASSEMBLER
Score: 3510787

  // File Comments
// Pre-calculated bobs inside a charset (pre-moved to all x/y-combinations)
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const KEY_SPACE = $3c
  // The number of different X-shifts
  .const BOB_SHIFTS_X = 4
  // The number of different Y-shifts
  .const BOB_SHIFTS_Y = 8
  // The size of a sub-table of BOB_TABLES
  .const BOB_SUBTABLE_SIZE = BOB_SHIFTS_X*BOB_SHIFTS_Y
  // The number of BOBs to render
  .const NUM_BOBS = $14
  .const SIZEOF_POINTER = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
  .label RASTER = $d012
  .label BORDER_COLOR = $d020
  .label D018 = $d018
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // The BASIC screen
  .label SCREEN_BASIC = $400
  // The BASIC charset
  .label CHARSET_BASIC = $1000
  // The BOB screen
  .label BOB_SCREEN = $2800
  // The BOB charset
  .label BOB_CHARSET = $2000
  .label COS = SIN+$40
  // BOB charset ID of the next glyph to be added
  .label bob_charset_next_id = 9
  // Current index within the progress cursor (0-7)
  .label progress_idx = 5
  // Current position of the progress cursor
  .label progress_cursor = $c
  // Pointer to the next clean-up to add
  // Prepare for next clean-up
  .label renderBobCleanupNext = $10
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .const vicSelectGfxBank2_toDd001_return = 3
    .const toD0181_return = (>(BOB_SCREEN&$3fff)*4)|(>BOB_CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN_BASIC&$3fff)*4)|(>CHARSET_BASIC)/4&$f
    .label __10 = $a
    .label __12 = $a
    .label __13 = $a
    .label x = $c
    .label y = $a
    .label a = 2
    .label r = 9
    .label i = 3
    // Render Rotated BOBs
    .label angle = 5
    // mulf_init()
    // [1] call mulf_init 
    // [57] phi from main to mulf_init [phi:main->mulf_init]
    jsr mulf_init
    // [2] phi from main to main::@9 [phi:main->main::@9]
    // main::@9
    // prepareBobs()
    // [3] call prepareBobs 
    // [86] phi from main::@9 to prepareBobs [phi:main::@9->prepareBobs]
    jsr prepareBobs
    // [4] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // renderBobInit()
    // [5] call renderBobInit 
    // [114] phi from main::@10 to renderBobInit [phi:main::@10->renderBobInit]
    jsr renderBobInit
    // main::vicSelectGfxBank1
    // CIA2->PORT_A_DDR = %00000011
    // [6] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [7] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
    // main::vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_@1
    // CIA2->PORT_A = toDd00(gfx)
    // [8] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [9] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
    // main::toD0181
    // main::@7
    // *D018 = toD018(BOB_SCREEN, BOB_CHARSET)
    // [10] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // memset(BOB_SCREEN, 0x00, 1000)
    // [11] call memset 
  /*
	// Clear screen
	memset(BOB_SCREEN, 0x00, 1000);
	// Display a BOB grid
	for(char x: 0..7)
	    for(char y: 0..3)
            renderBob(x*12+y, y*24+x);
	// Wait for space
	while(!keyboard_key_pressed(KEY_SPACE)) {}
	while(keyboard_key_pressed(KEY_SPACE)) {}
	*/
  // Clear screen
    // [130] phi from main::@7 to memset [phi:main::@7->memset]
    jsr memset
    // [12] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
    // [12] phi main::angle#8 = 0 [phi:main::@7->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    // main::@1
    // main::@2
  __b2:
    // while (*RASTER<$f8)
    // [13] if(*RASTER<$f8) goto main::@2 -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda RASTER
    cmp #$f8
    bcc __b2
    // main::@3
    // *BORDER_COLOR = 0xf
    // [14] *BORDER_COLOR = $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta BORDER_COLOR
    // renderBobCleanup()
    // [15] call renderBobCleanup 
    // [136] phi from main::@3 to renderBobCleanup [phi:main::@3->renderBobCleanup]
    jsr renderBobCleanup
    // main::@11
    // [16] main::a#6 = main::angle#8 -- vbuz1=vbuz2 
    lda.z angle
    sta.z a
    // [17] phi from main::@11 to main::@4 [phi:main::@11->main::@4]
    // [17] phi main::i#2 = 0 [phi:main::@11->main::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [17] phi renderBobCleanupNext#19 = RENDERBOB_CLEANUP [phi:main::@11->main::@4#1] -- qbuz1=qbuc1 
    lda #<RENDERBOB_CLEANUP
    sta.z renderBobCleanupNext
    lda #>RENDERBOB_CLEANUP
    sta.z renderBobCleanupNext+1
    // [17] phi main::a#2 = main::a#6 [phi:main::@11->main::@4#2] -- register_copy 
    // [17] phi main::r#2 = $1e [phi:main::@11->main::@4#3] -- vbsz1=vbsc1 
    lda #$1e
    sta.z r
    // [17] phi from main::@14 to main::@4 [phi:main::@14->main::@4]
    // [17] phi main::i#2 = main::i#1 [phi:main::@14->main::@4#0] -- register_copy 
    // [17] phi renderBobCleanupNext#19 = renderBobCleanupNext#14 [phi:main::@14->main::@4#1] -- register_copy 
    // [17] phi main::a#2 = main::a#1 [phi:main::@14->main::@4#2] -- register_copy 
    // [17] phi main::r#2 = main::r#1 [phi:main::@14->main::@4#3] -- register_copy 
    // main::@4
  __b4:
    // *BORDER_COLOR = 1
    // [18] *BORDER_COLOR = 1 -- _deref_pbuc1=vbuc2 
    //kickasm {{ .break }}
    lda #1
    sta BORDER_COLOR
    // mulf8s(r, COS[a])
    // [19] mulf8s::a#0 = main::r#2 -- vbsaa=vbsz1 
    lda.z r
    // [20] mulf8s::b#0 = COS[main::a#2] -- vbsxx=pbsc1_derefidx_vbuz1 
    ldy.z a
    ldx COS,y
    // [21] call mulf8s 
    // [152] phi from main::@4 to mulf8s [phi:main::@4->mulf8s]
    // [152] phi mulf8s::b#2 = mulf8s::b#0 [phi:main::@4->mulf8s#0] -- register_copy 
    // [152] phi mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#0 [phi:main::@4->mulf8s#1] -- register_copy 
    jsr mulf8s
    // mulf8s(r, COS[a])
    // [22] mulf8s::return#2 = mulf8s::return#0
    // main::@12
    // [23] main::$10 = mulf8s::return#2
    // x = mulf8s(r, COS[a]) + 75*0x100
    // [24] main::x#0 = main::$10 + (signed word)$4b*$100 -- vwsz1=vwsz2_plus_vwsc1 
    clc
    lda.z __10
    adc #<$4b*$100
    sta.z x
    lda.z __10+1
    adc #>$4b*$100
    sta.z x+1
    // mulf8s(r, SIN[a])
    // [25] mulf8s::a#1 = main::r#2 -- vbsaa=vbsz1 
    lda.z r
    // [26] mulf8s::b#1 = SIN[main::a#2] -- vbsxx=pbsc1_derefidx_vbuz1 
    ldy.z a
    ldx SIN,y
    // [27] call mulf8s 
    // [152] phi from main::@12 to mulf8s [phi:main::@12->mulf8s]
    // [152] phi mulf8s::b#2 = mulf8s::b#1 [phi:main::@12->mulf8s#0] -- register_copy 
    // [152] phi mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 [phi:main::@12->mulf8s#1] -- register_copy 
    jsr mulf8s
    // mulf8s(r, SIN[a])
    // [28] mulf8s::return#3 = mulf8s::return#0
    // main::@13
    // [29] main::$12 = mulf8s::return#3
    // mulf8s(r, SIN[a])*2
    // [30] main::$13 = main::$12 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z __13
    rol.z __13+1
    // y = mulf8s(r, SIN[a])*2 + 90*0x100
    // [31] main::y#0 = main::$13 + (signed word)$5a*$100 -- vwsz1=vwsz1_plus_vwsc1 
    clc
    lda.z y
    adc #<$5a*$100
    sta.z y
    lda.z y+1
    adc #>$5a*$100
    sta.z y+1
    // *BORDER_COLOR = 2
    // [32] *BORDER_COLOR = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BORDER_COLOR
    // a += 98
    // [33] main::a#1 = main::a#2 + $62 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z a
    axs #-[$62]
    stx.z a
    // r += 3
    // [34] main::r#1 = main::r#2 + 3 -- vbsz1=vbsz1_plus_vbsc1 
    lax.z r
    axs #-[3]
    stx.z r
    // renderBob(>x, >y)
    // [35] renderBob::xpos#0 = > main::x#0 -- vbuz1=_hi_vwsz2 
    lda.z x+1
    sta.z renderBob.xpos
    // [36] renderBob::ypos#0 = > main::y#0 -- vbuz1=_hi_vwsz2 
    lda.z y+1
    sta.z renderBob.ypos
    // [37] call renderBob 
    jsr renderBob
    // main::@14
    // for(char i: 0..NUM_BOBS-1)
    // [38] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [39] if(main::i#1!=NUM_BOBS-1+1) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_BOBS-1+1
    cmp.z i
    bne __b4
    // main::@5
    // angle += 3
    // [40] main::angle#1 = main::angle#8 + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z angle
    axs #-[3]
    stx.z angle
    // *BORDER_COLOR = 0
    // [41] *BORDER_COLOR = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDER_COLOR
    // keyboard_key_pressed(KEY_SPACE)
    // [42] call keyboard_key_pressed 
    // [181] phi from main::@5 to keyboard_key_pressed [phi:main::@5->keyboard_key_pressed]
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_SPACE)
    // [43] keyboard_key_pressed::return#2 = keyboard_key_pressed::return#0
    // main::@15
    // [44] main::$19 = keyboard_key_pressed::return#2
    // if(keyboard_key_pressed(KEY_SPACE))
    // [45] if(0!=main::$19) goto main::@6 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b6
    // [12] phi from main::@15 to main::@1 [phi:main::@15->main::@1]
    // [12] phi main::angle#8 = main::angle#1 [phi:main::@15->main::@1#0] -- register_copy 
    jmp __b2
  // Wait for space release
    // [46] phi from main::@15 main::@16 to main::@6 [phi:main::@15/main::@16->main::@6]
    // main::@6
  __b6:
    // keyboard_key_pressed(KEY_SPACE)
    // [47] call keyboard_key_pressed 
    // [181] phi from main::@6 to keyboard_key_pressed [phi:main::@6->keyboard_key_pressed]
    jsr keyboard_key_pressed
    // keyboard_key_pressed(KEY_SPACE)
    // [48] keyboard_key_pressed::return#3 = keyboard_key_pressed::return#0
    // main::@16
    // [49] main::$21 = keyboard_key_pressed::return#3
    // while(keyboard_key_pressed(KEY_SPACE))
    // [50] if(0!=main::$21) goto main::@6 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b6
    // main::vicSelectGfxBank2
    // CIA2->PORT_A_DDR = %00000011
    // [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [52] phi from main::vicSelectGfxBank2 to main::vicSelectGfxBank2_toDd001 [phi:main::vicSelectGfxBank2->main::vicSelectGfxBank2_toDd001]
    // main::vicSelectGfxBank2_toDd001
    // main::vicSelectGfxBank2_@1
    // CIA2->PORT_A = toDd00(gfx)
    // [53] *((byte*)CIA2) = main::vicSelectGfxBank2_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank2_toDd001_return
    sta CIA2
    // [54] phi from main::vicSelectGfxBank2_@1 to main::toD0182 [phi:main::vicSelectGfxBank2_@1->main::toD0182]
    // main::toD0182
    // main::@8
    // *D018 = toD018(SCREEN_BASIC, CHARSET_BASIC)
    // [55] *D018 = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    // main::@return
    // }
    // [56] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = 4
    // Counter used for determining x%2==0
    .label sqr1_hi = $c
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $a
    .label sqr1_lo = $10
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = 7
    .label sqr2_lo = $13
    //Start with g(0)=f(255)
    .label dir = 6
    // [58] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
    // [58] phi mulf_init::x_2#3 = 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [58] phi mulf_init::sqr1_hi#2 = mulf_sqr1_hi+1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [58] phi mulf_init::sqr#4 = 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    txa
    sta.z sqr
    sta.z sqr+1
    // [58] phi mulf_init::c#2 = 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    sta.z c
    // [58] phi mulf_init::sqr1_lo#2 = mulf_sqr1_lo+1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    // mulf_init::@1
  __b1:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [59] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [60] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
    // [60] phi mulf_init::dir#2 = $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [60] phi mulf_init::sqr2_hi#2 = mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [60] phi mulf_init::x_255#2 = -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [60] phi mulf_init::sqr2_lo#2 = mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    // mulf_init::@5
  __b5:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [61] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    // mulf_init::@7
    // *(mulf_sqr2_lo+511) = *(mulf_sqr1_lo+256)
    // [62] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // *(mulf_sqr2_hi+511) = *(mulf_sqr1_hi+256)
    // [63] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    // mulf_init::@return
    // }
    // [64] return 
    rts
    // mulf_init::@6
  __b6:
    // *sqr2_lo = mulf_sqr1_lo[x_255]
    // [65] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255]
    // [66] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255];
    // [67] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // x_255 = x_255 + dir
    // [68] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // if(x_255==0)
    // [69] if(mulf_init::x_255#1!=0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b8
    // [71] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
    // [71] phi mulf_init::dir#4 = 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    // [70] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
    // mulf_init::@9
    // [71] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
    // [71] phi mulf_init::dir#4 = mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    // mulf_init::@8
  __b8:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [72] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [60] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
    // [60] phi mulf_init::dir#2 = mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [60] phi mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [60] phi mulf_init::x_255#2 = mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [60] phi mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // if((++c&1)==0)
    // [73] mulf_init::c#1 = ++ mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // ++c&1
    // [74] mulf_init::$1 = mulf_init::c#1 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // if((++c&1)==0)
    // [75] if(mulf_init::$1!=0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    // mulf_init::@4
    // x_2++;
    // [76] mulf_init::x_2#1 = ++ mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // sqr++;
    // [77] mulf_init::sqr#2 = ++ mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [78] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
    // [78] phi mulf_init::x_2#2 = mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [78] phi mulf_init::sqr#3 = mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    // mulf_init::@3
  __b3:
    // <sqr
    // [79] mulf_init::$4 = < mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // *sqr1_lo = <sqr
    // [80] *mulf_init::sqr1_lo#2 = mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // >sqr
    // [81] mulf_init::$5 = > mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // *sqr1_hi++ = >sqr
    // [82] *mulf_init::sqr1_hi#2 = mulf_init::$5 -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
    // *sqr1_hi++ = >sqr;
    // [83] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // sqr = sqr + x_2
    // [84] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [85] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [58] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
    // [58] phi mulf_init::x_2#3 = mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [58] phi mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [58] phi mulf_init::sqr#4 = mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [58] phi mulf_init::c#2 = mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [58] phi mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // prepareBobs
// Creates the pre-shifted bobs into BOB_CHARSET and populates the BOB_TABLES
// Modifies PROTO_BOB by shifting it around
prepareBobs: {
    .label bob_table = 7
    .label shift_y = 4
    // Populate charset and tables
    .label bob_glyph = $13
    .label cell = $f
    .label bob_table_idx = 6
    .label shift_x = $e
    // [87] phi from prepareBobs to prepareBobs::@8 [phi:prepareBobs->prepareBobs::@8]
    // prepareBobs::@8
    // bobCharsetFindOrAddGlyph(PROTO_BOB+48)
    // [88] call bobCharsetFindOrAddGlyph 
  // Ensure that glyph #0 is empty
    // [187] phi from prepareBobs::@8 to bobCharsetFindOrAddGlyph [phi:prepareBobs::@8->bobCharsetFindOrAddGlyph]
    // [187] phi bobCharsetFindOrAddGlyph::bob_glyph#10 = PROTO_BOB+$30 [phi:prepareBobs::@8->bobCharsetFindOrAddGlyph#0] -- pbuz1=pbuc1 
    lda #<PROTO_BOB+$30
    sta.z bobCharsetFindOrAddGlyph.bob_glyph
    lda #>PROTO_BOB+$30
    sta.z bobCharsetFindOrAddGlyph.bob_glyph+1
    // [187] phi bob_charset_next_id#25 = 0 [phi:prepareBobs::@8->bobCharsetFindOrAddGlyph#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bob_charset_next_id
    jsr bobCharsetFindOrAddGlyph
    // [89] phi from prepareBobs::@8 to prepareBobs::@1 [phi:prepareBobs::@8->prepareBobs::@1]
    // [89] phi prepareBobs::bob_table_idx#7 = 0 [phi:prepareBobs::@8->prepareBobs::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bob_table_idx
    // [89] phi bob_charset_next_id#15 = bob_charset_next_id#17 [phi:prepareBobs::@8->prepareBobs::@1#1] -- register_copy 
    // [89] phi progress_idx#17 = 0 [phi:prepareBobs::@8->prepareBobs::@1#2] -- vbuz1=vbuc1 
    sta.z progress_idx
    // [89] phi progress_cursor#16 = SCREEN_BASIC [phi:prepareBobs::@8->prepareBobs::@1#3] -- pbuz1=pbuc1 
    lda #<SCREEN_BASIC
    sta.z progress_cursor
    lda #>SCREEN_BASIC
    sta.z progress_cursor+1
    // [89] phi prepareBobs::shift_y#2 = 0 [phi:prepareBobs::@8->prepareBobs::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z shift_y
    // prepareBobs::@1
  __b1:
    // for(char shift_y=0;shift_y<BOB_SHIFTS_Y;shift_y++)
    // [90] if(prepareBobs::shift_y#2<BOB_SHIFTS_Y) goto prepareBobs::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z shift_y
    cmp #BOB_SHIFTS_Y
    bcc __b4
    // prepareBobs::@return
    // }
    // [91] return 
    rts
    // [92] phi from prepareBobs::@1 to prepareBobs::@2 [phi:prepareBobs::@1->prepareBobs::@2]
  __b4:
    // [92] phi progress_idx#33 = progress_idx#17 [phi:prepareBobs::@1->prepareBobs::@2#0] -- register_copy 
    // [92] phi progress_cursor#33 = progress_cursor#16 [phi:prepareBobs::@1->prepareBobs::@2#1] -- register_copy 
    // [92] phi bob_charset_next_id#32 = bob_charset_next_id#15 [phi:prepareBobs::@1->prepareBobs::@2#2] -- register_copy 
    // [92] phi prepareBobs::bob_table_idx#12 = prepareBobs::bob_table_idx#7 [phi:prepareBobs::@1->prepareBobs::@2#3] -- register_copy 
    // [92] phi prepareBobs::shift_x#2 = 0 [phi:prepareBobs::@1->prepareBobs::@2#4] -- vbuz1=vbuc1 
    lda #0
    sta.z shift_x
    // prepareBobs::@2
  __b2:
    // for(char shift_x=0;shift_x<BOB_SHIFTS_X;shift_x++)
    // [93] if(prepareBobs::shift_x#2<BOB_SHIFTS_X) goto prepareBobs::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z shift_x
    cmp #BOB_SHIFTS_X
    bcc __b3
    // [94] phi from prepareBobs::@2 to prepareBobs::@4 [phi:prepareBobs::@2->prepareBobs::@4]
    // prepareBobs::@4
    // shiftProtoBobDown()
    // [95] call shiftProtoBobDown 
  // Shift PROTO_BOB down and 8px left
    // [205] phi from prepareBobs::@4 to shiftProtoBobDown [phi:prepareBobs::@4->shiftProtoBobDown]
    jsr shiftProtoBobDown
    // prepareBobs::@9
    // for(char shift_y=0;shift_y<BOB_SHIFTS_Y;shift_y++)
    // [96] prepareBobs::shift_y#1 = ++ prepareBobs::shift_y#2 -- vbuz1=_inc_vbuz1 
    inc.z shift_y
    // [89] phi from prepareBobs::@9 to prepareBobs::@1 [phi:prepareBobs::@9->prepareBobs::@1]
    // [89] phi prepareBobs::bob_table_idx#7 = prepareBobs::bob_table_idx#12 [phi:prepareBobs::@9->prepareBobs::@1#0] -- register_copy 
    // [89] phi bob_charset_next_id#15 = bob_charset_next_id#32 [phi:prepareBobs::@9->prepareBobs::@1#1] -- register_copy 
    // [89] phi progress_idx#17 = progress_idx#33 [phi:prepareBobs::@9->prepareBobs::@1#2] -- register_copy 
    // [89] phi progress_cursor#16 = progress_cursor#33 [phi:prepareBobs::@9->prepareBobs::@1#3] -- register_copy 
    // [89] phi prepareBobs::shift_y#2 = prepareBobs::shift_y#1 [phi:prepareBobs::@9->prepareBobs::@1#4] -- register_copy 
    jmp __b1
    // prepareBobs::@3
  __b3:
    // bob_table = BOB_TABLES + bob_table_idx
    // [97] prepareBobs::bob_table#0 = BOB_TABLES + prepareBobs::bob_table_idx#12 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z bob_table_idx
    clc
    adc #<BOB_TABLES
    sta.z bob_table
    lda #>BOB_TABLES
    adc #0
    sta.z bob_table+1
    // [98] phi from prepareBobs::@3 to prepareBobs::@5 [phi:prepareBobs::@3->prepareBobs::@5]
    // [98] phi progress_cursor#26 = progress_cursor#33 [phi:prepareBobs::@3->prepareBobs::@5#0] -- register_copy 
    // [98] phi progress_idx#27 = progress_idx#33 [phi:prepareBobs::@3->prepareBobs::@5#1] -- register_copy 
    // [98] phi prepareBobs::bob_table#2 = prepareBobs::bob_table#0 [phi:prepareBobs::@3->prepareBobs::@5#2] -- register_copy 
    // [98] phi bob_charset_next_id#23 = bob_charset_next_id#32 [phi:prepareBobs::@3->prepareBobs::@5#3] -- register_copy 
    // [98] phi prepareBobs::bob_glyph#2 = PROTO_BOB [phi:prepareBobs::@3->prepareBobs::@5#4] -- pbuz1=pbuc1 
    lda #<PROTO_BOB
    sta.z bob_glyph
    lda #>PROTO_BOB
    sta.z bob_glyph+1
    // [98] phi prepareBobs::cell#2 = 0 [phi:prepareBobs::@3->prepareBobs::@5#5] -- vbuz1=vbuc1 
    lda #0
    sta.z cell
    // prepareBobs::@5
  __b5:
    // for(char cell = 0; cell<9; cell++)
    // [99] if(prepareBobs::cell#2<9) goto prepareBobs::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z cell
    cmp #9
    bcc __b6
    // prepareBobs::@7
    // bob_table_idx++;
    // [100] prepareBobs::bob_table_idx#1 = ++ prepareBobs::bob_table_idx#12 -- vbuz1=_inc_vbuz1 
    inc.z bob_table_idx
    // shiftProtoBobRight()
    // [101] call shiftProtoBobRight 
  // Shift PROTO_BOB right twice
    // [216] phi from prepareBobs::@7 to shiftProtoBobRight [phi:prepareBobs::@7->shiftProtoBobRight]
    jsr shiftProtoBobRight
    // [102] phi from prepareBobs::@7 to prepareBobs::@12 [phi:prepareBobs::@7->prepareBobs::@12]
    // prepareBobs::@12
    // shiftProtoBobRight()
    // [103] call shiftProtoBobRight 
    // [216] phi from prepareBobs::@12 to shiftProtoBobRight [phi:prepareBobs::@12->shiftProtoBobRight]
    jsr shiftProtoBobRight
    // prepareBobs::@13
    // for(char shift_x=0;shift_x<BOB_SHIFTS_X;shift_x++)
    // [104] prepareBobs::shift_x#1 = ++ prepareBobs::shift_x#2 -- vbuz1=_inc_vbuz1 
    inc.z shift_x
    // [92] phi from prepareBobs::@13 to prepareBobs::@2 [phi:prepareBobs::@13->prepareBobs::@2]
    // [92] phi progress_idx#33 = progress_idx#27 [phi:prepareBobs::@13->prepareBobs::@2#0] -- register_copy 
    // [92] phi progress_cursor#33 = progress_cursor#26 [phi:prepareBobs::@13->prepareBobs::@2#1] -- register_copy 
    // [92] phi bob_charset_next_id#32 = bob_charset_next_id#23 [phi:prepareBobs::@13->prepareBobs::@2#2] -- register_copy 
    // [92] phi prepareBobs::bob_table_idx#12 = prepareBobs::bob_table_idx#1 [phi:prepareBobs::@13->prepareBobs::@2#3] -- register_copy 
    // [92] phi prepareBobs::shift_x#2 = prepareBobs::shift_x#1 [phi:prepareBobs::@13->prepareBobs::@2#4] -- register_copy 
    jmp __b2
    // prepareBobs::@6
  __b6:
    // bobCharsetFindOrAddGlyph(bob_glyph)
    // [105] bobCharsetFindOrAddGlyph::bob_glyph#1 = prepareBobs::bob_glyph#2
    // [106] call bobCharsetFindOrAddGlyph 
    // [187] phi from prepareBobs::@6 to bobCharsetFindOrAddGlyph [phi:prepareBobs::@6->bobCharsetFindOrAddGlyph]
    // [187] phi bobCharsetFindOrAddGlyph::bob_glyph#10 = bobCharsetFindOrAddGlyph::bob_glyph#1 [phi:prepareBobs::@6->bobCharsetFindOrAddGlyph#0] -- register_copy 
    // [187] phi bob_charset_next_id#25 = bob_charset_next_id#23 [phi:prepareBobs::@6->bobCharsetFindOrAddGlyph#1] -- register_copy 
    jsr bobCharsetFindOrAddGlyph
    // bobCharsetFindOrAddGlyph(bob_glyph)
    // [107] bobCharsetFindOrAddGlyph::return#1 = bobCharsetFindOrAddGlyph::glyph_id#11 -- vbuaa=vbuxx 
    txa
    // prepareBobs::@10
    // [108] prepareBobs::$6 = bobCharsetFindOrAddGlyph::return#1
    // *bob_table = bobCharsetFindOrAddGlyph(bob_glyph)
    // [109] *prepareBobs::bob_table#2 = prepareBobs::$6 -- _deref_pbuz1=vbuaa 
    // Look for an existing char in BOB_CHARSET 
    ldy #0
    sta (bob_table),y
    // bob_glyph+=8
    // [110] prepareBobs::bob_glyph#1 = prepareBobs::bob_glyph#2 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    // Move to the next glyph
    lda #8
    clc
    adc.z bob_glyph
    sta.z bob_glyph
    bcc !+
    inc.z bob_glyph+1
  !:
    // bob_table += BOB_SHIFTS_X*BOB_SHIFTS_Y
    // [111] prepareBobs::bob_table#1 = prepareBobs::bob_table#2 + BOB_SHIFTS_X*BOB_SHIFTS_Y -- pbuz1=pbuz1_plus_vbuc1 
    // Move to the next sub-table
    lda #BOB_SHIFTS_X*BOB_SHIFTS_Y
    clc
    adc.z bob_table
    sta.z bob_table
    bcc !+
    inc.z bob_table+1
  !:
    // progress_inc()
    // [112] call progress_inc 
    jsr progress_inc
    // prepareBobs::@11
    // for(char cell = 0; cell<9; cell++)
    // [113] prepareBobs::cell#1 = ++ prepareBobs::cell#2 -- vbuz1=_inc_vbuz1 
    inc.z cell
    // [98] phi from prepareBobs::@11 to prepareBobs::@5 [phi:prepareBobs::@11->prepareBobs::@5]
    // [98] phi progress_cursor#26 = progress_cursor#18 [phi:prepareBobs::@11->prepareBobs::@5#0] -- register_copy 
    // [98] phi progress_idx#27 = progress_idx#20 [phi:prepareBobs::@11->prepareBobs::@5#1] -- register_copy 
    // [98] phi prepareBobs::bob_table#2 = prepareBobs::bob_table#1 [phi:prepareBobs::@11->prepareBobs::@5#2] -- register_copy 
    // [98] phi bob_charset_next_id#23 = bob_charset_next_id#17 [phi:prepareBobs::@11->prepareBobs::@5#3] -- register_copy 
    // [98] phi prepareBobs::bob_glyph#2 = prepareBobs::bob_glyph#1 [phi:prepareBobs::@11->prepareBobs::@5#4] -- register_copy 
    // [98] phi prepareBobs::cell#2 = prepareBobs::cell#1 [phi:prepareBobs::@11->prepareBobs::@5#5] -- register_copy 
    jmp __b5
}
  // renderBobInit
// Initialize the tables used by renderBob()
renderBobInit: {
    .label __0 = $10
    .label __5 = $10
    .label __6 = $13
    .label __7 = $10
    // [115] phi from renderBobInit to renderBobInit::@1 [phi:renderBobInit->renderBobInit::@1]
    // [115] phi renderBobInit::y#2 = 0 [phi:renderBobInit->renderBobInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [115] phi from renderBobInit::@1 to renderBobInit::@1 [phi:renderBobInit::@1->renderBobInit::@1]
    // [115] phi renderBobInit::y#2 = renderBobInit::y#1 [phi:renderBobInit::@1->renderBobInit::@1#0] -- register_copy 
    // renderBobInit::@1
  __b1:
    // ((unsigned int)y)*40
    // [116] renderBobInit::$5 = (word)renderBobInit::y#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z __5
    lda #0
    sta.z __5+1
    // [117] renderBobInit::$6 = renderBobInit::$5 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __5
    asl
    sta.z __6
    lda.z __5+1
    rol
    sta.z __6+1
    asl.z __6
    rol.z __6+1
    // [118] renderBobInit::$7 = renderBobInit::$6 + renderBobInit::$5 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __7
    clc
    adc.z __6
    sta.z __7
    lda.z __7+1
    adc.z __6+1
    sta.z __7+1
    // [119] renderBobInit::$0 = renderBobInit::$7 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // MUL40[y] = ((unsigned int)y)*40
    // [120] renderBobInit::$3 = renderBobInit::y#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [121] MUL40[renderBobInit::$3] = renderBobInit::$0 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z __0
    sta MUL40,y
    lda.z __0+1
    sta MUL40+1,y
    // for(char y: 0..0x1f)
    // [122] renderBobInit::y#1 = ++ renderBobInit::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [123] if(renderBobInit::y#1!=$20) goto renderBobInit::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$20
    bne __b1
    // [124] phi from renderBobInit::@1 to renderBobInit::@2 [phi:renderBobInit::@1->renderBobInit::@2]
    // [124] phi renderBobInit::i#2 = 0 [phi:renderBobInit::@1->renderBobInit::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [124] phi from renderBobInit::@2 to renderBobInit::@2 [phi:renderBobInit::@2->renderBobInit::@2]
    // [124] phi renderBobInit::i#2 = renderBobInit::i#1 [phi:renderBobInit::@2->renderBobInit::@2#0] -- register_copy 
    // renderBobInit::@2
  __b2:
    // RENDERBOB_CLEANUP[i] = BOB_SCREEN
    // [125] renderBobInit::$4 = renderBobInit::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [126] RENDERBOB_CLEANUP[renderBobInit::$4] = BOB_SCREEN -- qbuc1_derefidx_vbuaa=pbuc2 
    tay
    lda #<BOB_SCREEN
    sta RENDERBOB_CLEANUP,y
    lda #>BOB_SCREEN
    sta RENDERBOB_CLEANUP+1,y
    // for(char i: 0..NUM_BOBS-1)
    // [127] renderBobInit::i#1 = ++ renderBobInit::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [128] if(renderBobInit::i#1!=NUM_BOBS-1+1) goto renderBobInit::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_BOBS-1+1
    bne __b2
    // renderBobInit::@return
    // }
    // [129] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = 0
    .const num = $3e8
    .label str = BOB_SCREEN
    .label end = str+num
    .label dst = $a
    // [131] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [131] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [132] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [133] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [134] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [135] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [131] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [131] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // renderBobCleanup
// Clean Up the rendered BOB's
renderBobCleanup: {
    .label screen = $10
    // [137] phi from renderBobCleanup to renderBobCleanup::@1 [phi:renderBobCleanup->renderBobCleanup::@1]
    // [137] phi renderBobCleanup::i#2 = 0 [phi:renderBobCleanup->renderBobCleanup::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [137] phi from renderBobCleanup::@1 to renderBobCleanup::@1 [phi:renderBobCleanup::@1->renderBobCleanup::@1]
    // [137] phi renderBobCleanup::i#2 = renderBobCleanup::i#1 [phi:renderBobCleanup::@1->renderBobCleanup::@1#0] -- register_copy 
    // renderBobCleanup::@1
  __b1:
    // screen = RENDERBOB_CLEANUP[i]
    // [138] renderBobCleanup::$1 = renderBobCleanup::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [139] renderBobCleanup::screen#0 = RENDERBOB_CLEANUP[renderBobCleanup::$1] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda RENDERBOB_CLEANUP,y
    sta.z screen
    lda RENDERBOB_CLEANUP+1,y
    sta.z screen+1
    // screen[0]  = 0
    // [140] *renderBobCleanup::screen#0 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (screen),y
    // screen[40]  = 0
    // [141] renderBobCleanup::screen#0[$28] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #$28
    sta (screen),y
    // screen[80]  = 0
    // [142] renderBobCleanup::screen#0[$50] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #$50
    sta (screen),y
    // screen[1]  = 0
    // [143] renderBobCleanup::screen#0[1] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #1
    sta (screen),y
    // screen[41]  = 0
    // [144] renderBobCleanup::screen#0[$29] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #$29
    sta (screen),y
    // screen[81]  = 0
    // [145] renderBobCleanup::screen#0[$51] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #$51
    sta (screen),y
    // screen[2]  = 0
    // [146] renderBobCleanup::screen#0[2] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #2
    sta (screen),y
    // screen[42]  = 0
    // [147] renderBobCleanup::screen#0[$2a] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #$2a
    sta (screen),y
    // screen[82]  = 0
    // [148] renderBobCleanup::screen#0[$52] = 0 -- pbuz1_derefidx_vbuc1=vbuc2 
    ldy #$52
    sta (screen),y
    // for(char i: 0..NUM_BOBS-1)
    // [149] renderBobCleanup::i#1 = ++ renderBobCleanup::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [150] if(renderBobCleanup::i#1!=NUM_BOBS-1+1) goto renderBobCleanup::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_BOBS-1+1
    bne __b1
    // renderBobCleanup::@return
    // }
    // [151] return 
    rts
}
  // mulf8s
// Fast multiply two signed chars to a unsigned int result
// mulf8s(signed byte register(A) a, signed byte register(X) b)
mulf8s: {
    .label return = $a
    // mulf8s::mulf8s_prepare1
    // mulf8u_prepare((char)a)
    // [153] mulf8u_prepare::a#0 = (byte)mulf8s::mulf8s_prepare1_a#0
    // [154] call mulf8u_prepare 
    jsr mulf8u_prepare
    // mulf8s::@1
    // mulf8s_prepared(b)
    // [155] mulf8s_prepared::b#0 = mulf8s::b#2 -- vbsz1=vbsxx 
    stx.z mulf8s_prepared.b
    // [156] call mulf8s_prepared 
    jsr mulf8s_prepared
    // mulf8s::@2
    // [157] mulf8s::return#0 = (signed word)mulf8s_prepared::m#4
    // mulf8s::@return
    // }
    // [158] return 
    rts
}
  // renderBob
// Render a single BOB at a given x/y-position
// X-position is 0-151. Each x-position is 2 pixels wide.
// Y-position is 0-183. Each y-position is 1 pixel high.
// renderBob(byte zp($e) xpos, byte zp($f) ypos)
renderBob: {
    .label __2 = $13
    .label __5 = $15
    .label xpos = $e
    .label ypos = $f
    .label y_offset = $13
    .label screen = $13
    // x_char_offset = xpos/BOB_SHIFTS_X
    // [159] renderBob::x_char_offset#0 = renderBob::xpos#0 >> 2 -- vbuxx=vbuz1_ror_2 
    lda.z xpos
    lsr
    lsr
    tax
    // y_char_offset = ypos/BOB_SHIFTS_Y
    // [160] renderBob::y_char_offset#0 = renderBob::ypos#0 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z ypos
    lsr
    lsr
    lsr
    // y_offset = MUL40[y_char_offset]
    // [161] renderBob::$8 = renderBob::y_char_offset#0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [162] renderBob::y_offset#0 = MUL40[renderBob::$8] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda MUL40,y
    sta.z y_offset
    lda MUL40+1,y
    sta.z y_offset+1
    // BOB_SCREEN+y_offset
    // [163] renderBob::$2 = BOB_SCREEN + renderBob::y_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __2
    adc #<BOB_SCREEN
    sta.z __2
    lda.z __2+1
    adc #>BOB_SCREEN
    sta.z __2+1
    // screen = BOB_SCREEN+y_offset+x_char_offset
    // [164] renderBob::screen#0 = renderBob::$2 + renderBob::x_char_offset#0 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // ypos&7
    // [165] renderBob::$4 = renderBob::ypos#0 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z ypos
    // (ypos&7)*BOB_SHIFTS_X
    // [166] renderBob::$5 = renderBob::$4 << 2 -- vbuz1=vbuaa_rol_2 
    asl
    asl
    sta.z __5
    // xpos&3
    // [167] renderBob::$6 = renderBob::xpos#0 & 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z xpos
    // bob_table_idx = (ypos&7)*BOB_SHIFTS_X+(xpos&3)
    // [168] renderBob::bob_table_idx#0 = renderBob::$5 + renderBob::$6 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z __5
    tax
    // *renderBobCleanupNext++ = screen
    // [169] *renderBobCleanupNext#19 = renderBob::screen#0 -- _deref_qbuz1=pbuz2 
    ldy #0
    lda.z screen
    sta (renderBobCleanupNext),y
    iny
    lda.z screen+1
    sta (renderBobCleanupNext),y
    // *renderBobCleanupNext++ = screen;
    // [170] renderBobCleanupNext#14 = renderBobCleanupNext#19 + SIZEOF_POINTER -- qbuz1=qbuz1_plus_vbuc1 
    lda #SIZEOF_POINTER
    clc
    adc.z renderBobCleanupNext
    sta.z renderBobCleanupNext
    bcc !+
    inc.z renderBobCleanupNext+1
  !:
    // screen[0]  = (BOB_TABLES+0*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [171] *renderBob::screen#0 = BOB_TABLES[renderBob::bob_table_idx#0] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda BOB_TABLES,x
    ldy #0
    sta (screen),y
    // screen[40] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [172] renderBob::screen#0[$28] = (BOB_TABLES+1*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+1*BOB_SUBTABLE_SIZE,x
    ldy #$28
    sta (screen),y
    // screen[80] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [173] renderBob::screen#0[$50] = (BOB_TABLES+2*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+2*BOB_SUBTABLE_SIZE,x
    ldy #$50
    sta (screen),y
    // screen[1]  = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [174] renderBob::screen#0[1] = (BOB_TABLES+3*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+3*BOB_SUBTABLE_SIZE,x
    ldy #1
    sta (screen),y
    // screen[41] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [175] renderBob::screen#0[$29] = (BOB_TABLES+4*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+4*BOB_SUBTABLE_SIZE,x
    ldy #$29
    sta (screen),y
    // screen[81] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [176] renderBob::screen#0[$51] = (BOB_TABLES+5*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+5*BOB_SUBTABLE_SIZE,x
    ldy #$51
    sta (screen),y
    // screen[2]  = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [177] renderBob::screen#0[2] = (BOB_TABLES+6*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+6*BOB_SUBTABLE_SIZE,x
    ldy #2
    sta (screen),y
    // screen[42] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [178] renderBob::screen#0[$2a] = (BOB_TABLES+7*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+7*BOB_SUBTABLE_SIZE,x
    ldy #$2a
    sta (screen),y
    // screen[82] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[bob_table_idx]
    // [179] renderBob::screen#0[$52] = (BOB_TABLES+8*BOB_SUBTABLE_SIZE)[renderBob::bob_table_idx#0] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda BOB_TABLES+8*BOB_SUBTABLE_SIZE,x
    ldy #$52
    sta (screen),y
    // renderBob::@return
    // }
    // [180] return 
    rts
}
  // keyboard_key_pressed
// Determines whether a specific key is currently pressed by accessing the matrix directly
// The key is a keyboard code defined from the keyboard matrix by %00rrrccc, where rrr is the row ID (0-7) and ccc is the column ID (0-7)
// All keys exist as as KEY_XXX constants.
// Returns zero if the key is not pressed and a non-zero value if the key is currently pressed
keyboard_key_pressed: {
    .const colidx = KEY_SPACE&7
    .label rowidx = KEY_SPACE>>3
    // keyboard_matrix_read(rowidx)
    // [182] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [183] keyboard_matrix_read::return#2 = keyboard_matrix_read::return#0
    // keyboard_key_pressed::@1
    // [184] keyboard_key_pressed::$2 = keyboard_matrix_read::return#2
    // keyboard_matrix_read(rowidx) & keyboard_matrix_col_bitmask[colidx]
    // [185] keyboard_key_pressed::return#0 = keyboard_key_pressed::$2 & *(keyboard_matrix_col_bitmask+keyboard_key_pressed::colidx#0) -- vbuaa=vbuaa_band__deref_pbuc1 
    and keyboard_matrix_col_bitmask+colidx
    // keyboard_key_pressed::@return
    // }
    // [186] return 
    rts
}
  // bobCharsetFindOrAddGlyph
// Looks through BOB_CHARSET to find the passed bob glyph if present.
// If not present it is added
// Returns the glyph ID
// bobCharsetFindOrAddGlyph(byte* zp($13) bob_glyph)
bobCharsetFindOrAddGlyph: {
    .label bob_glyph = $13
    .label glyph_cursor = $a
    // [188] phi from bobCharsetFindOrAddGlyph to bobCharsetFindOrAddGlyph::@1 [phi:bobCharsetFindOrAddGlyph->bobCharsetFindOrAddGlyph::@1]
    // [188] phi bobCharsetFindOrAddGlyph::glyph_cursor#11 = BOB_CHARSET [phi:bobCharsetFindOrAddGlyph->bobCharsetFindOrAddGlyph::@1#0] -- pbuz1=pbuc1 
    lda #<BOB_CHARSET
    sta.z glyph_cursor
    lda #>BOB_CHARSET
    sta.z glyph_cursor+1
    // [188] phi bobCharsetFindOrAddGlyph::glyph_id#11 = 0 [phi:bobCharsetFindOrAddGlyph->bobCharsetFindOrAddGlyph::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // bobCharsetFindOrAddGlyph::@1
  __b1:
    // while(glyph_id!=bob_charset_next_id)
    // [189] if(bobCharsetFindOrAddGlyph::glyph_id#11!=bob_charset_next_id#25) goto bobCharsetFindOrAddGlyph::@2 -- vbuxx_neq_vbuz1_then_la1 
    cpx.z bob_charset_next_id
    bne __b9
    // [190] phi from bobCharsetFindOrAddGlyph::@1 to bobCharsetFindOrAddGlyph::@7 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@7]
    // [190] phi bobCharsetFindOrAddGlyph::i1#2 = 0 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@7#0] -- vbuyy=vbuc1 
    ldy #0
  // Not found - add it
    // bobCharsetFindOrAddGlyph::@7
  __b7:
    // for(char i=0;i<8;i++)
    // [191] if(bobCharsetFindOrAddGlyph::i1#2<8) goto bobCharsetFindOrAddGlyph::@8 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b8
    // bobCharsetFindOrAddGlyph::@9
    // bob_charset_next_id++;
    // [192] bob_charset_next_id#7 = ++ bob_charset_next_id#25 -- vbuz1=_inc_vbuz1 
    inc.z bob_charset_next_id
    // [193] phi from bobCharsetFindOrAddGlyph::@5 bobCharsetFindOrAddGlyph::@9 to bobCharsetFindOrAddGlyph::@return [phi:bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::@9->bobCharsetFindOrAddGlyph::@return]
    // [193] phi bob_charset_next_id#17 = bob_charset_next_id#25 [phi:bobCharsetFindOrAddGlyph::@5/bobCharsetFindOrAddGlyph::@9->bobCharsetFindOrAddGlyph::@return#0] -- register_copy 
    // bobCharsetFindOrAddGlyph::@return
    // }
    // [194] return 
    rts
    // bobCharsetFindOrAddGlyph::@8
  __b8:
    // glyph_cursor[i]=bob_glyph[i]
    // [195] bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i1#2] = bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i1#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (bob_glyph),y
    sta (glyph_cursor),y
    // for(char i=0;i<8;i++)
    // [196] bobCharsetFindOrAddGlyph::i1#1 = ++ bobCharsetFindOrAddGlyph::i1#2 -- vbuyy=_inc_vbuyy 
    iny
    // [190] phi from bobCharsetFindOrAddGlyph::@8 to bobCharsetFindOrAddGlyph::@7 [phi:bobCharsetFindOrAddGlyph::@8->bobCharsetFindOrAddGlyph::@7]
    // [190] phi bobCharsetFindOrAddGlyph::i1#2 = bobCharsetFindOrAddGlyph::i1#1 [phi:bobCharsetFindOrAddGlyph::@8->bobCharsetFindOrAddGlyph::@7#0] -- register_copy 
    jmp __b7
    // [197] phi from bobCharsetFindOrAddGlyph::@1 to bobCharsetFindOrAddGlyph::@2 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@2]
  __b9:
    // [197] phi bobCharsetFindOrAddGlyph::i#2 = 0 [phi:bobCharsetFindOrAddGlyph::@1->bobCharsetFindOrAddGlyph::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // bobCharsetFindOrAddGlyph::@2
  __b2:
    // for(char i=0;i<8;i++)
    // [198] if(bobCharsetFindOrAddGlyph::i#2<8) goto bobCharsetFindOrAddGlyph::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #8
    bcc __b3
    // [200] phi from bobCharsetFindOrAddGlyph::@2 to bobCharsetFindOrAddGlyph::@5 [phi:bobCharsetFindOrAddGlyph::@2->bobCharsetFindOrAddGlyph::@5]
    // [200] phi bobCharsetFindOrAddGlyph::found#2 = 1 [phi:bobCharsetFindOrAddGlyph::@2->bobCharsetFindOrAddGlyph::@5#0] -- vbuaa=vbuc1 
    lda #1
    jmp __b5
    // bobCharsetFindOrAddGlyph::@3
  __b3:
    // if(glyph_cursor[i]!=bob_glyph[i])
    // [199] if(bobCharsetFindOrAddGlyph::glyph_cursor#11[bobCharsetFindOrAddGlyph::i#2]==bobCharsetFindOrAddGlyph::bob_glyph#10[bobCharsetFindOrAddGlyph::i#2]) goto bobCharsetFindOrAddGlyph::@4 -- pbuz1_derefidx_vbuyy_eq_pbuz2_derefidx_vbuyy_then_la1 
    lda (glyph_cursor),y
    cmp (bob_glyph),y
    beq __b4
    // [200] phi from bobCharsetFindOrAddGlyph::@3 to bobCharsetFindOrAddGlyph::@5 [phi:bobCharsetFindOrAddGlyph::@3->bobCharsetFindOrAddGlyph::@5]
    // [200] phi bobCharsetFindOrAddGlyph::found#2 = 0 [phi:bobCharsetFindOrAddGlyph::@3->bobCharsetFindOrAddGlyph::@5#0] -- vbuaa=vbuc1 
    lda #0
    // bobCharsetFindOrAddGlyph::@5
  __b5:
    // if(found)
    // [201] if(0==bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@6 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b6
    rts
    // bobCharsetFindOrAddGlyph::@6
  __b6:
    // glyph_id++;
    // [202] bobCharsetFindOrAddGlyph::glyph_id#1 = ++ bobCharsetFindOrAddGlyph::glyph_id#11 -- vbuxx=_inc_vbuxx 
    inx
    // glyph_cursor +=8
    // [203] bobCharsetFindOrAddGlyph::glyph_cursor#1 = bobCharsetFindOrAddGlyph::glyph_cursor#11 + 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z glyph_cursor
    sta.z glyph_cursor
    bcc !+
    inc.z glyph_cursor+1
  !:
    // [188] phi from bobCharsetFindOrAddGlyph::@6 to bobCharsetFindOrAddGlyph::@1 [phi:bobCharsetFindOrAddGlyph::@6->bobCharsetFindOrAddGlyph::@1]
    // [188] phi bobCharsetFindOrAddGlyph::glyph_cursor#11 = bobCharsetFindOrAddGlyph::glyph_cursor#1 [phi:bobCharsetFindOrAddGlyph::@6->bobCharsetFindOrAddGlyph::@1#0] -- register_copy 
    // [188] phi bobCharsetFindOrAddGlyph::glyph_id#11 = bobCharsetFindOrAddGlyph::glyph_id#1 [phi:bobCharsetFindOrAddGlyph::@6->bobCharsetFindOrAddGlyph::@1#1] -- register_copy 
    jmp __b1
    // bobCharsetFindOrAddGlyph::@4
  __b4:
    // for(char i=0;i<8;i++)
    // [204] bobCharsetFindOrAddGlyph::i#1 = ++ bobCharsetFindOrAddGlyph::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [197] phi from bobCharsetFindOrAddGlyph::@4 to bobCharsetFindOrAddGlyph::@2 [phi:bobCharsetFindOrAddGlyph::@4->bobCharsetFindOrAddGlyph::@2]
    // [197] phi bobCharsetFindOrAddGlyph::i#2 = bobCharsetFindOrAddGlyph::i#1 [phi:bobCharsetFindOrAddGlyph::@4->bobCharsetFindOrAddGlyph::@2#0] -- register_copy 
    jmp __b2
}
  // shiftProtoBobDown
// Shift PROTO_BOB down one Y pixel
// At the same time restore PROTO_BOB X by shifting 8 pixels left
shiftProtoBobDown: {
    // [206] phi from shiftProtoBobDown to shiftProtoBobDown::@1 [phi:shiftProtoBobDown->shiftProtoBobDown::@1]
    // [206] phi shiftProtoBobDown::i#2 = $17 [phi:shiftProtoBobDown->shiftProtoBobDown::@1#0] -- vbuxx=vbuc1 
    ldx #$17
    // shiftProtoBobDown::@1
  __b1:
    // for(char i=23;i>0;i--)
    // [207] if(shiftProtoBobDown::i#2>0) goto shiftProtoBobDown::@2 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne __b2
    // shiftProtoBobDown::@3
    // PROTO_BOB[0] = 0
    // [208] *PROTO_BOB = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PROTO_BOB
    // PROTO_BOB[24] = 0
    // [209] *(PROTO_BOB+$18) = 0 -- _deref_pbuc1=vbuc2 
    sta PROTO_BOB+$18
    // PROTO_BOB[48] = 0
    // [210] *(PROTO_BOB+$30) = 0 -- _deref_pbuc1=vbuc2 
    sta PROTO_BOB+$30
    // shiftProtoBobDown::@return
    // }
    // [211] return 
    rts
    // shiftProtoBobDown::@2
  __b2:
    // PROTO_BOB[i] = (PROTO_BOB+23)[i]
    // [212] PROTO_BOB[shiftProtoBobDown::i#2] = (PROTO_BOB+$17)[shiftProtoBobDown::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PROTO_BOB+$17,x
    sta PROTO_BOB,x
    // (PROTO_BOB+24)[i] = (PROTO_BOB+47)[i]
    // [213] (PROTO_BOB+$18)[shiftProtoBobDown::i#2] = (PROTO_BOB+$2f)[shiftProtoBobDown::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PROTO_BOB+$2f,x
    sta PROTO_BOB+$18,x
    // (PROTO_BOB+48)[i] = 0x00
    // [214] (PROTO_BOB+$30)[shiftProtoBobDown::i#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROTO_BOB+$30,x
    // for(char i=23;i>0;i--)
    // [215] shiftProtoBobDown::i#1 = -- shiftProtoBobDown::i#2 -- vbuxx=_dec_vbuxx 
    dex
    // [206] phi from shiftProtoBobDown::@2 to shiftProtoBobDown::@1 [phi:shiftProtoBobDown::@2->shiftProtoBobDown::@1]
    // [206] phi shiftProtoBobDown::i#2 = shiftProtoBobDown::i#1 [phi:shiftProtoBobDown::@2->shiftProtoBobDown::@1#0] -- register_copy 
    jmp __b1
}
  // shiftProtoBobRight
// Shift PROTO_BOB right one X pixel
shiftProtoBobRight: {
    .label carry = $15
    .label i = $12
    // [217] phi from shiftProtoBobRight to shiftProtoBobRight::@1 [phi:shiftProtoBobRight->shiftProtoBobRight::@1]
    // [217] phi shiftProtoBobRight::carry#2 = 0 [phi:shiftProtoBobRight->shiftProtoBobRight::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [217] phi shiftProtoBobRight::j#3 = 0 [phi:shiftProtoBobRight->shiftProtoBobRight::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [217] phi shiftProtoBobRight::i#2 = 0 [phi:shiftProtoBobRight->shiftProtoBobRight::@1#2] -- vbuz1=vbuc1 
    txa
    sta.z i
    // shiftProtoBobRight::@1
  __b1:
    // for(char i=0;i<3*3*8;i++)
    // [218] if(shiftProtoBobRight::i#2<3*3*8) goto shiftProtoBobRight::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #3*3*8
    bcc __b2
    // shiftProtoBobRight::@return
    // }
    // [219] return 
    rts
    // shiftProtoBobRight::@2
  __b2:
    // PROTO_BOB[j]&1
    // [220] shiftProtoBobRight::$1 = PROTO_BOB[shiftProtoBobRight::j#3] & 1 -- vbuaa=pbuc1_derefidx_vbuxx_band_vbuc2 
    lda #1
    and PROTO_BOB,x
    // (PROTO_BOB[j]&1)?0x80ub:0ub
    // [221] if(0!=shiftProtoBobRight::$1) goto shiftProtoBobRight::@3 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b3
    // [223] phi from shiftProtoBobRight::@2 to shiftProtoBobRight::@4 [phi:shiftProtoBobRight::@2->shiftProtoBobRight::@4]
    // [223] phi shiftProtoBobRight::carry#1 = 0 [phi:shiftProtoBobRight::@2->shiftProtoBobRight::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z carry
    jmp __b4
    // [222] phi from shiftProtoBobRight::@2 to shiftProtoBobRight::@3 [phi:shiftProtoBobRight::@2->shiftProtoBobRight::@3]
    // shiftProtoBobRight::@3
  __b3:
    // (PROTO_BOB[j]&1)?0x80ub:0ub
    // [223] phi from shiftProtoBobRight::@3 to shiftProtoBobRight::@4 [phi:shiftProtoBobRight::@3->shiftProtoBobRight::@4]
    // [223] phi shiftProtoBobRight::carry#1 = $80 [phi:shiftProtoBobRight::@3->shiftProtoBobRight::@4#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z carry
    // shiftProtoBobRight::@4
  __b4:
    // PROTO_BOB[j]>>1
    // [224] shiftProtoBobRight::$5 = PROTO_BOB[shiftProtoBobRight::j#3] >> 1 -- vbuaa=pbuc1_derefidx_vbuxx_ror_1 
    lda PROTO_BOB,x
    lsr
    // carry | PROTO_BOB[j]>>1
    // [225] shiftProtoBobRight::$6 = shiftProtoBobRight::carry#2 | shiftProtoBobRight::$5 -- vbuaa=vbuyy_bor_vbuaa 
    sty.z $ff
    ora.z $ff
    // PROTO_BOB[j] = carry | PROTO_BOB[j]>>1
    // [226] PROTO_BOB[shiftProtoBobRight::j#3] = shiftProtoBobRight::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    // Shift value and add old carry
    sta PROTO_BOB,x
    // if(j>=48)
    // [227] if(shiftProtoBobRight::j#3>=$30) goto shiftProtoBobRight::@5 -- vbuxx_ge_vbuc1_then_la1 
    // Increment j to iterate over the PROTO_BOB left-to-right, top-to-bottom (0, 24, 48, 1, 25, 49, ...)
    cpx #$30
    bcs __b5
    // shiftProtoBobRight::@7
    // j+=24
    // [228] shiftProtoBobRight::j#2 = shiftProtoBobRight::j#3 + $18 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$18]
    // [229] phi from shiftProtoBobRight::@5 shiftProtoBobRight::@7 to shiftProtoBobRight::@6 [phi:shiftProtoBobRight::@5/shiftProtoBobRight::@7->shiftProtoBobRight::@6]
    // [229] phi shiftProtoBobRight::j#10 = shiftProtoBobRight::j#1 [phi:shiftProtoBobRight::@5/shiftProtoBobRight::@7->shiftProtoBobRight::@6#0] -- register_copy 
    // shiftProtoBobRight::@6
  __b6:
    // for(char i=0;i<3*3*8;i++)
    // [230] shiftProtoBobRight::i#1 = ++ shiftProtoBobRight::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [231] shiftProtoBobRight::carry#10 = shiftProtoBobRight::carry#1 -- vbuyy=vbuz1 
    ldy.z carry
    // [217] phi from shiftProtoBobRight::@6 to shiftProtoBobRight::@1 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1]
    // [217] phi shiftProtoBobRight::carry#2 = shiftProtoBobRight::carry#10 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1#0] -- register_copy 
    // [217] phi shiftProtoBobRight::j#3 = shiftProtoBobRight::j#10 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1#1] -- register_copy 
    // [217] phi shiftProtoBobRight::i#2 = shiftProtoBobRight::i#1 [phi:shiftProtoBobRight::@6->shiftProtoBobRight::@1#2] -- register_copy 
    jmp __b1
    // shiftProtoBobRight::@5
  __b5:
    // j-=47
    // [232] shiftProtoBobRight::j#1 = shiftProtoBobRight::j#3 - $2f -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$2f
    jmp __b6
}
  // progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
    // if(++progress_idx==8)
    // [233] progress_idx#7 = ++ progress_idx#27 -- vbuz1=_inc_vbuz1 
    inc.z progress_idx
    // [234] if(progress_idx#7!=8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z progress_idx
    bne __b1
    // progress_inc::@2
    // *progress_cursor = progress_chars[8]
    // [235] *progress_cursor#26 = *(progress_inc::progress_chars+8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
    // progress_cursor++;
    // [236] progress_cursor#7 = ++ progress_cursor#26 -- pbuz1=_inc_pbuz1 
    inc.z progress_cursor
    bne !+
    inc.z progress_cursor+1
  !:
    // [237] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
    // [237] phi progress_cursor#18 = progress_cursor#7 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
    // [237] phi progress_idx#20 = 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z progress_idx
    // [237] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
    // [237] phi progress_cursor#18 = progress_cursor#26 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
    // [237] phi progress_idx#20 = progress_idx#7 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    // progress_inc::@1
  __b1:
    // *progress_cursor = progress_chars[progress_idx]
    // [238] *progress_cursor#18 = progress_inc::progress_chars[progress_idx#20] -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    // progress_inc::@return
    // }
    // [239] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // *memA = a
    // [240] *mulf8u_prepare::memA = mulf8u_prepare::a#0 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    // mulf8u_prepare::@return
    // }
    // [242] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte zp($12) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = $a
    .label b = $12
    // mulf8u_prepared((char) b)
    // [243] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#0 -- vbuaa=vbuz1 
    lda.z b
    // [244] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [245] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
    // mulf8s_prepared::@5
    // m = mulf8u_prepared((char) b)
    // [246] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
    // if(*memA<0)
    // [247] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1
    // mulf8s_prepared::@3
    // >m
    // [248] mulf8s_prepared::$6 = > mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)b
    // [249] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#0 -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc.z b
    // [250] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [251] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
    // [251] phi mulf8s_prepared::m#5 = mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    // mulf8s_prepared::@1
  __b1:
    // if(b<0)
    // [252] if(mulf8s_prepared::b#0>=0) goto mulf8s_prepared::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2
    // mulf8s_prepared::@4
    // >m
    // [253] mulf8s_prepared::$9 = > mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)*memA
    // [254] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [255] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [256] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
    // [256] phi mulf8s_prepared::m#4 = mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    // mulf8s_prepared::@2
  __b2:
    // mulf8s_prepared::@return
    // }
    // [257] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable the normal interrupt or sei/cli around calls to the keyboard matrix reader.
keyboard_matrix_read: {
    // CIA1->PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [258] *((byte*)CIA1) = *(keyboard_matrix_row_bitmask+keyboard_key_pressed::rowidx#0) -- _deref_pbuc1=_deref_pbuc2 
    lda keyboard_matrix_row_bitmask+keyboard_key_pressed.rowidx
    sta CIA1
    // ~CIA1->PORT_B
    // [259] keyboard_matrix_read::return#0 = ~ *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [260] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $a
    // *memB = b
    // [261] *mulf8u_prepared::memB = mulf8u_prepared::b#0 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    tax
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // return { *memB, *resL };
    // [263] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    // mulf8u_prepared::@return
    // }
    // [264] return 
    rts
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // The prototype BOB (a 3x3 char image with a bob image in the upper 2x2 chars)
  // The chars are layout as follows with data in chars 0, 1, 3, 4 initially
  //   0 3 6
  //   1 4 7
  //   2 5 8
PROTO_BOB:
.var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)

  // Sine and Cosine tables
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))

  // Tables containing the char to use for a specific cell of a shifted BOB.
  // char_id = BOB_TABLES[cell*BOB_SUBTABLE_SIZE + shift_y*BOB_SHIFTS_X + shift_x];
  BOB_TABLES: .fill 9*8*4, 0
  // Table used for deleting rendered BOB's. Contains pointers to first char of each BOB.
  RENDERBOB_CLEANUP: .fill 2*NUM_BOBS, 0
  // *40 Table unsigned int[0x20] MUL40 = { ((unsigned int)i)*40 };
  MUL40: .fill 2*$20, 0

