Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::file#0 = (struct fileentry*) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::file#2 = phi( main/main::file#0, main::@3/main::file#1 )
  main::$0 = main::file#2 != filesEnd
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::file#3 = phi( main::@1/main::file#2 )
  PrintName::file#0 = main::file#3
  call PrintName 
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::file#4 = phi( main::@2/main::file#3 )
  main::file#1 = main::file#4 + SIZEOF_STRUCT_FILEENTRY
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void PrintName(struct fileentry* PrintName::file)
PrintName: scope:[PrintName]  from main::@2
  PrintName::file#1 = phi( main::@2/PrintName::file#0 )
  PrintName::$0 = PrintName::file#1 == dir
  PrintName::$1 = ! PrintName::$0
  if(PrintName::$1) goto PrintName::@return
  to:PrintName::@1
PrintName::@1: scope:[PrintName]  from PrintName
  *((byte*)$c7) = 1
  to:PrintName::@return
PrintName::@return: scope:[PrintName]  from PrintName PrintName::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void PrintName(struct fileentry* PrintName::file)
bool~ PrintName::$0
bool~ PrintName::$1
struct fileentry* PrintName::file
struct fileentry* PrintName::file#0
struct fileentry* PrintName::file#1
const byte SIZEOF_STRUCT_FILEENTRY = 2
void __start()
const struct fileentry* dir = (struct fileentry*) 0
const struct fileentry* filesEnd = (struct fileentry*) 0
void main()
bool~ main::$0
struct fileentry* main::file
struct fileentry* main::file#0
struct fileentry* main::file#1
struct fileentry* main::file#2
struct fileentry* main::file#3
struct fileentry* main::file#4

Adding number conversion cast (unumber) 1 in *((byte*)$c7) = 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)$c7) = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 199
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [12] PrintName::$1 = PrintName::file#1 != dir from [11] PrintName::$0 = PrintName::file#1 == dir
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::file#2 = main::file#3 main::file#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values PrintName::file#1 PrintName::file#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [3] if(main::file#2!=filesEnd) goto main::@2
Simple Condition PrintName::$1 [10] if(PrintName::file#0!=dir) goto PrintName::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::file#0 = (struct fileentry*) 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::file#0
Constant inlined main::file#0 = (struct fileentry*) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to PrintName:5 

Created 1 initial phi equivalence classes
Coalesced [7] main::file#5 = main::file#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::file#2 = phi( main/(struct fileentry*) 0, main::@3/main::file#1 )
  [2] if(main::file#2!=filesEnd) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] PrintName::file#0 = main::file#2
  [5] call PrintName 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] main::file#1 = main::file#2 + SIZEOF_STRUCT_FILEENTRY
  to:main::@1

void PrintName(struct fileentry* PrintName::file)
PrintName: scope:[PrintName]  from main::@2
  [7] if(PrintName::file#0!=dir) goto PrintName::@return
  to:PrintName::@1
PrintName::@1: scope:[PrintName]  from PrintName
  [8] *((byte*) 199) = 1
  to:PrintName::@return
PrintName::@return: scope:[PrintName]  from PrintName PrintName::@1
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void PrintName(struct fileentry* PrintName::file)
struct fileentry* PrintName::file
struct fileentry* PrintName::file#0 112.0
void main()
struct fileentry* main::file
struct fileentry* main::file#1 22.0
struct fileentry* main::file#2 11.0

Initial phi equivalence classes
[ main::file#2 main::file#1 ]
Added variable PrintName::file#0 to live range equivalence class [ PrintName::file#0 ]
Complete equivalence classes
[ main::file#2 main::file#1 ]
[ PrintName::file#0 ]
Allocated zp[2]:2 [ main::file#2 main::file#1 ]
Allocated zp[2]:4 [ PrintName::file#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(main::file#2!=filesEnd) goto main::@2 [ main::file#2 ] (  [ main::file#2 ] { }  ) always clobbers reg byte a 
Statement [4] PrintName::file#0 = main::file#2 [ main::file#2 PrintName::file#0 ] (  [ main::file#2 PrintName::file#0 ] { { PrintName::file#0 = main::file#2 } }  ) always clobbers reg byte a 
Statement [6] main::file#1 = main::file#2 + SIZEOF_STRUCT_FILEENTRY [ main::file#1 ] (  [ main::file#1 ] { }  ) always clobbers reg byte a 
Statement [7] if(PrintName::file#0!=dir) goto PrintName::@return [ ] ( PrintName:5 [ main::file#2 ] { { PrintName::file#0 = main::file#2 } }  ) always clobbers reg byte a 
Statement [8] *((byte*) 199) = 1 [ ] ( PrintName:5 [ main::file#2 ] { { PrintName::file#0 = main::file#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::file#2 main::file#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ PrintName::file#0 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [PrintName] 112: zp[2]:4 [ PrintName::file#0 ] 
Uplift Scope [main] 33: zp[2]:2 [ main::file#2 main::file#1 ] 
Uplift Scope [fileentry] 
Uplift Scope [] 

Uplifting [PrintName] best 764 combination zp[2]:4 [ PrintName::file#0 ] 
Uplifting [main] best 764 combination zp[2]:2 [ main::file#2 main::file#1 ] 
Uplifting [fileentry] best 764 combination 
Uplifting [] best 764 combination 
Coalescing zero page register [ zp[2]:2 [ main::file#2 main::file#1 ] ] with [ zp[2]:4 [ PrintName::file#0 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-24.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_FILEENTRY = 2
  .label filesEnd = 0
  .label dir = 0
.segment Code
  // main
main: {
    .label file = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::file#2 = (struct fileentry*) 0 [phi:main->main::@1#0] -- pssz1=pssc1 
    lda #<0
    sta.z file
    lda #>0
    sta.z file+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::file#2!=filesEnd) goto main::@2 -- pssz1_neq_pssc1_then_la1 
    lda.z file+1
    cmp #>filesEnd
    bne __b2
    lda.z file
    cmp #<filesEnd
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] PrintName::file#0 = main::file#2
    // [5] call PrintName 
    jsr PrintName
    jmp __b3
    // main::@3
  __b3:
    // [6] main::file#1 = main::file#2 + SIZEOF_STRUCT_FILEENTRY -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_FILEENTRY
    clc
    adc.z file
    sta.z file
    bcc !+
    inc.z file+1
  !:
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::file#2 = main::file#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
}
  // PrintName
// PrintName(struct fileentry* zp(2) file)
PrintName: {
    .label file = 2
    // [7] if(PrintName::file#0!=dir) goto PrintName::@return -- pssz1_neq_pssc1_then_la1 
    lda.z file+1
    cmp #>dir
    bne __breturn
    lda.z file
    cmp #<dir
    bne __breturn
    jmp __b1
    // PrintName::@1
  __b1:
    // [8] *((byte*) 199) = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta $c7
    jmp __breturn
    // PrintName::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void PrintName(struct fileentry* PrintName::file)
struct fileentry* PrintName::file
struct fileentry* PrintName::file#0 file zp[2]:2 112.0
const byte SIZEOF_STRUCT_FILEENTRY = 2
const struct fileentry* dir = (struct fileentry*) 0
const struct fileentry* filesEnd = (struct fileentry*) 0
void main()
struct fileentry* main::file
struct fileentry* main::file#1 file zp[2]:2 22.0
struct fileentry* main::file#2 file zp[2]:2 11.0

zp[2]:2 [ main::file#2 main::file#1 PrintName::file#0 ]


FINAL ASSEMBLER
Score: 528

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-24.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_FILEENTRY = 2
  .label filesEnd = 0
  .label dir = 0
.segment Code
  // main
main: {
    .label file = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::file#2 = (struct fileentry*) 0 [phi:main->main::@1#0] -- pssz1=pssc1 
    lda #<0
    sta.z file
    sta.z file+1
    // main::@1
  __b1:
    // while(file != filesEnd)
    // [2] if(main::file#2!=filesEnd) goto main::@2 -- pssz1_neq_pssc1_then_la1 
    lda.z file+1
    cmp #>filesEnd
    bne __b2
    lda.z file
    cmp #<filesEnd
    bne __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // PrintName(file)
    // [4] PrintName::file#0 = main::file#2
    // [5] call PrintName 
    jsr PrintName
    // main::@3
    // ++file;
    // [6] main::file#1 = main::file#2 + SIZEOF_STRUCT_FILEENTRY -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_FILEENTRY
    clc
    adc.z file
    sta.z file
    bcc !+
    inc.z file+1
  !:
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::file#2 = main::file#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
}
  // PrintName
// PrintName(struct fileentry* zp(2) file)
PrintName: {
    .label file = 2
    // if (file == dir)
    // [7] if(PrintName::file#0!=dir) goto PrintName::@return -- pssz1_neq_pssc1_then_la1 
    lda.z file+1
    cmp #>dir
    bne __breturn
    lda.z file
    cmp #<dir
    bne __breturn
    // PrintName::@1
    // *(BYTE *)0xC7 = 1
    // [8] *((byte*) 199) = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta $c7
    // PrintName::@return
  __breturn:
    // }
    // [9] return 
    rts
}
  // File Data

